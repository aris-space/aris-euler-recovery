
aris-euler-recovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f0  08009a50  08009a50  00019a50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f40  08009f40  000202a0  2**0
                  CONTENTS
  4 .ARM          00000008  08009f40  08009f40  00019f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f48  08009f48  000202a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f48  08009f48  00019f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f4c  08009f4c  00019f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a0  20000000  08009f50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  200002a0  0800a1f0  000202a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  0800a1f0  000204f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001afba  00000000  00000000  000202d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003306  00000000  00000000  0003b28a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f10  00000000  00000000  0003e590  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000da8  00000000  00000000  0003f4a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002410b  00000000  00000000  00040248  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010fd1  00000000  00000000  00064353  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c5e54  00000000  00000000  00075324  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013b178  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b04  00000000  00000000  0013b1f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002a0 	.word	0x200002a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009a34 	.word	0x08009a34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002a4 	.word	0x200002a4
 80001cc:	08009a34 	.word	0x08009a34

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f4e:	463b      	mov	r3, r7
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f5a:	4b21      	ldr	r3, [pc, #132]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f5c:	4a21      	ldr	r2, [pc, #132]	; (8000fe4 <MX_ADC1_Init+0x9c>)
 8000f5e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f60:	4b1f      	ldr	r3, [pc, #124]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f66:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f68:	4b1d      	ldr	r3, [pc, #116]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f6e:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f74:	4b1a      	ldr	r3, [pc, #104]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f7a:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f82:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f88:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f8a:	4a17      	ldr	r2, [pc, #92]	; (8000fe8 <MX_ADC1_Init+0xa0>)
 8000f8c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f8e:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f9a:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fa8:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000faa:	f002 f83d 	bl	8003028 <HAL_ADC_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fb4:	f000 fc64 	bl	8001880 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000fb8:	230a      	movs	r3, #10
 8000fba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000fca:	f002 f871 	bl	80030b0 <HAL_ADC_ConfigChannel>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fd4:	f000 fc54 	bl	8001880 <Error_Handler>
  }

}
 8000fd8:	bf00      	nop
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	200002c8 	.word	0x200002c8
 8000fe4:	40012000 	.word	0x40012000
 8000fe8:	0f000001 	.word	0x0f000001

08000fec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	; 0x28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a24      	ldr	r2, [pc, #144]	; (800109c <HAL_ADC_MspInit+0xb0>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d141      	bne.n	8001092 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	4b23      	ldr	r3, [pc, #140]	; (80010a0 <HAL_ADC_MspInit+0xb4>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	4a22      	ldr	r2, [pc, #136]	; (80010a0 <HAL_ADC_MspInit+0xb4>)
 8001018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800101c:	6453      	str	r3, [r2, #68]	; 0x44
 800101e:	4b20      	ldr	r3, [pc, #128]	; (80010a0 <HAL_ADC_MspInit+0xb4>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <HAL_ADC_MspInit+0xb4>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a1b      	ldr	r2, [pc, #108]	; (80010a0 <HAL_ADC_MspInit+0xb4>)
 8001034:	f043 0304 	orr.w	r3, r3, #4
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <HAL_ADC_MspInit+0xb4>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0304 	and.w	r3, r3, #4
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <HAL_ADC_MspInit+0xb4>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a14      	ldr	r2, [pc, #80]	; (80010a0 <HAL_ADC_MspInit+0xb4>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <HAL_ADC_MspInit+0xb4>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> ADC1_IN13
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001062:	230f      	movs	r3, #15
 8001064:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001066:	2303      	movs	r3, #3
 8001068:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106a:	2300      	movs	r3, #0
 800106c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800106e:	f107 0314 	add.w	r3, r7, #20
 8001072:	4619      	mov	r1, r3
 8001074:	480b      	ldr	r0, [pc, #44]	; (80010a4 <HAL_ADC_MspInit+0xb8>)
 8001076:	f002 fb1f 	bl	80036b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800107a:	2307      	movs	r3, #7
 800107c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800107e:	2303      	movs	r3, #3
 8001080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	4619      	mov	r1, r3
 800108c:	4806      	ldr	r0, [pc, #24]	; (80010a8 <HAL_ADC_MspInit+0xbc>)
 800108e:	f002 fb13 	bl	80036b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001092:	bf00      	nop
 8001094:	3728      	adds	r7, #40	; 0x28
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40012000 	.word	0x40012000
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40020800 	.word	0x40020800
 80010a8:	40020000 	.word	0x40020000

080010ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
 80010c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	4b64      	ldr	r3, [pc, #400]	; (8001258 <MX_GPIO_Init+0x1ac>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a63      	ldr	r2, [pc, #396]	; (8001258 <MX_GPIO_Init+0x1ac>)
 80010cc:	f043 0310 	orr.w	r3, r3, #16
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b61      	ldr	r3, [pc, #388]	; (8001258 <MX_GPIO_Init+0x1ac>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0310 	and.w	r3, r3, #16
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	4b5d      	ldr	r3, [pc, #372]	; (8001258 <MX_GPIO_Init+0x1ac>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a5c      	ldr	r2, [pc, #368]	; (8001258 <MX_GPIO_Init+0x1ac>)
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b5a      	ldr	r3, [pc, #360]	; (8001258 <MX_GPIO_Init+0x1ac>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0304 	and.w	r3, r3, #4
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	4b56      	ldr	r3, [pc, #344]	; (8001258 <MX_GPIO_Init+0x1ac>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a55      	ldr	r2, [pc, #340]	; (8001258 <MX_GPIO_Init+0x1ac>)
 8001104:	f043 0301 	orr.w	r3, r3, #1
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b53      	ldr	r3, [pc, #332]	; (8001258 <MX_GPIO_Init+0x1ac>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	4b4f      	ldr	r3, [pc, #316]	; (8001258 <MX_GPIO_Init+0x1ac>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a4e      	ldr	r2, [pc, #312]	; (8001258 <MX_GPIO_Init+0x1ac>)
 8001120:	f043 0302 	orr.w	r3, r3, #2
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b4c      	ldr	r3, [pc, #304]	; (8001258 <MX_GPIO_Init+0x1ac>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0302 	and.w	r3, r3, #2
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	603b      	str	r3, [r7, #0]
 8001136:	4b48      	ldr	r3, [pc, #288]	; (8001258 <MX_GPIO_Init+0x1ac>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a47      	ldr	r2, [pc, #284]	; (8001258 <MX_GPIO_Init+0x1ac>)
 800113c:	f043 0308 	orr.w	r3, r3, #8
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b45      	ldr	r3, [pc, #276]	; (8001258 <MX_GPIO_Init+0x1ac>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0308 	and.w	r3, r3, #8
 800114a:	603b      	str	r3, [r7, #0]
 800114c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	2110      	movs	r1, #16
 8001152:	4842      	ldr	r0, [pc, #264]	; (800125c <MX_GPIO_Init+0x1b0>)
 8001154:	f002 fc4a 	bl	80039ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 8001158:	2200      	movs	r2, #0
 800115a:	2120      	movs	r1, #32
 800115c:	4840      	ldr	r0, [pc, #256]	; (8001260 <MX_GPIO_Init+0x1b4>)
 800115e:	f002 fc45 	bl	80039ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_MEM_Pin|TD1_Pin|TD2_Pin|HAWK1_Pin
 8001162:	2200      	movs	r2, #0
 8001164:	f64f 7180 	movw	r1, #65408	; 0xff80
 8001168:	483e      	ldr	r0, [pc, #248]	; (8001264 <MX_GPIO_Init+0x1b8>)
 800116a:	f002 fc3f 	bl	80039ec <HAL_GPIO_WritePin>
                          |HAWK2_Pin|RDY_Pin|STAT_Pin|SAVE_Pin
                          |PRGM_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|STAY_ALIVE_Pin, GPIO_PIN_RESET);
 800116e:	2200      	movs	r2, #0
 8001170:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8001174:	483c      	ldr	r0, [pc, #240]	; (8001268 <MX_GPIO_Init+0x1bc>)
 8001176:	f002 fc39 	bl	80039ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWR_DTCT_Pin;
 800117a:	2308      	movs	r3, #8
 800117c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800117e:	2300      	movs	r3, #0
 8001180:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PWR_DTCT_GPIO_Port, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	4835      	ldr	r0, [pc, #212]	; (8001264 <MX_GPIO_Init+0x1b8>)
 800118e:	f002 fa93 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_Pin;
 8001192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001196:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001198:	2300      	movs	r3, #0
 800119a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 80011a0:	f107 0314 	add.w	r3, r7, #20
 80011a4:	4619      	mov	r1, r3
 80011a6:	482e      	ldr	r0, [pc, #184]	; (8001260 <MX_GPIO_Init+0x1b4>)
 80011a8:	f002 fa86 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80011ac:	2310      	movs	r3, #16
 80011ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b0:	2301      	movs	r3, #1
 80011b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	2300      	movs	r3, #0
 80011ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4619      	mov	r1, r3
 80011c2:	4826      	ldr	r0, [pc, #152]	; (800125c <MX_GPIO_Init+0x1b0>)
 80011c4:	f002 fa78 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZ_Pin;
 80011c8:	2320      	movs	r3, #32
 80011ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4619      	mov	r1, r3
 80011de:	4820      	ldr	r0, [pc, #128]	; (8001260 <MX_GPIO_Init+0x1b4>)
 80011e0:	f002 fa6a 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = CS_MEM_Pin|TD1_Pin|TD2_Pin|HAWK1_Pin
 80011e4:	f64f 7380 	movw	r3, #65408	; 0xff80
 80011e8:	617b      	str	r3, [r7, #20]
                          |HAWK2_Pin|RDY_Pin|STAT_Pin|SAVE_Pin
                          |PRGM_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2300      	movs	r3, #0
 80011f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4619      	mov	r1, r3
 80011fc:	4819      	ldr	r0, [pc, #100]	; (8001264 <MX_GPIO_Init+0x1b8>)
 80011fe:	f002 fa5b 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin|STAY_ALIVE_Pin;
 8001202:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001208:	2301      	movs	r3, #1
 800120a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001210:	2300      	movs	r3, #0
 8001212:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	4619      	mov	r1, r3
 800121a:	4813      	ldr	r0, [pc, #76]	; (8001268 <MX_GPIO_Init+0x1bc>)
 800121c:	f002 fa4c 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_DTCT_Pin;
 8001220:	2301      	movs	r3, #1
 8001222:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001224:	2300      	movs	r3, #0
 8001226:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DTCT_GPIO_Port, &GPIO_InitStruct);
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	4619      	mov	r1, r3
 8001232:	480e      	ldr	r0, [pc, #56]	; (800126c <MX_GPIO_Init+0x1c0>)
 8001234:	f002 fa40 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENSE_Pin;
 8001238:	2310      	movs	r3, #16
 800123a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800123c:	2300      	movs	r3, #0
 800123e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENSE_GPIO_Port, &GPIO_InitStruct);
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	4619      	mov	r1, r3
 800124a:	4807      	ldr	r0, [pc, #28]	; (8001268 <MX_GPIO_Init+0x1bc>)
 800124c:	f002 fa34 	bl	80036b8 <HAL_GPIO_Init>

}
 8001250:	bf00      	nop
 8001252:	3728      	adds	r7, #40	; 0x28
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40023800 	.word	0x40023800
 800125c:	40020000 	.word	0x40020000
 8001260:	40020800 	.word	0x40020800
 8001264:	40021000 	.word	0x40021000
 8001268:	40020400 	.word	0x40020400
 800126c:	40020c00 	.word	0x40020c00

08001270 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001274:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <MX_I2C1_Init+0x50>)
 8001276:	4a13      	ldr	r2, [pc, #76]	; (80012c4 <MX_I2C1_Init+0x54>)
 8001278:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800127a:	4b11      	ldr	r3, [pc, #68]	; (80012c0 <MX_I2C1_Init+0x50>)
 800127c:	4a12      	ldr	r2, [pc, #72]	; (80012c8 <MX_I2C1_Init+0x58>)
 800127e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001280:	4b0f      	ldr	r3, [pc, #60]	; (80012c0 <MX_I2C1_Init+0x50>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001286:	4b0e      	ldr	r3, [pc, #56]	; (80012c0 <MX_I2C1_Init+0x50>)
 8001288:	2200      	movs	r2, #0
 800128a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800128c:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <MX_I2C1_Init+0x50>)
 800128e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001292:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001294:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <MX_I2C1_Init+0x50>)
 8001296:	2200      	movs	r2, #0
 8001298:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800129a:	4b09      	ldr	r3, [pc, #36]	; (80012c0 <MX_I2C1_Init+0x50>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012a0:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <MX_I2C1_Init+0x50>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <MX_I2C1_Init+0x50>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012ac:	4804      	ldr	r0, [pc, #16]	; (80012c0 <MX_I2C1_Init+0x50>)
 80012ae:	f002 fbd1 	bl	8003a54 <HAL_I2C_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012b8:	f000 fae2 	bl	8001880 <Error_Handler>
  }

}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000310 	.word	0x20000310
 80012c4:	40005400 	.word	0x40005400
 80012c8:	00061a80 	.word	0x00061a80

080012cc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 80012d0:	4b12      	ldr	r3, [pc, #72]	; (800131c <MX_I2C2_Init+0x50>)
 80012d2:	4a13      	ldr	r2, [pc, #76]	; (8001320 <MX_I2C2_Init+0x54>)
 80012d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80012d6:	4b11      	ldr	r3, [pc, #68]	; (800131c <MX_I2C2_Init+0x50>)
 80012d8:	4a12      	ldr	r2, [pc, #72]	; (8001324 <MX_I2C2_Init+0x58>)
 80012da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012dc:	4b0f      	ldr	r3, [pc, #60]	; (800131c <MX_I2C2_Init+0x50>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <MX_I2C2_Init+0x50>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <MX_I2C2_Init+0x50>)
 80012ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012ee:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012f0:	4b0a      	ldr	r3, [pc, #40]	; (800131c <MX_I2C2_Init+0x50>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80012f6:	4b09      	ldr	r3, [pc, #36]	; (800131c <MX_I2C2_Init+0x50>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012fc:	4b07      	ldr	r3, [pc, #28]	; (800131c <MX_I2C2_Init+0x50>)
 80012fe:	2200      	movs	r2, #0
 8001300:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001302:	4b06      	ldr	r3, [pc, #24]	; (800131c <MX_I2C2_Init+0x50>)
 8001304:	2200      	movs	r2, #0
 8001306:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001308:	4804      	ldr	r0, [pc, #16]	; (800131c <MX_I2C2_Init+0x50>)
 800130a:	f002 fba3 	bl	8003a54 <HAL_I2C_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001314:	f000 fab4 	bl	8001880 <Error_Handler>
  }

}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000364 	.word	0x20000364
 8001320:	40005800 	.word	0x40005800
 8001324:	000186a0 	.word	0x000186a0

08001328 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08c      	sub	sp, #48	; 0x30
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 031c 	add.w	r3, r7, #28
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a32      	ldr	r2, [pc, #200]	; (8001410 <HAL_I2C_MspInit+0xe8>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d12c      	bne.n	80013a4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	61bb      	str	r3, [r7, #24]
 800134e:	4b31      	ldr	r3, [pc, #196]	; (8001414 <HAL_I2C_MspInit+0xec>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a30      	ldr	r2, [pc, #192]	; (8001414 <HAL_I2C_MspInit+0xec>)
 8001354:	f043 0302 	orr.w	r3, r3, #2
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b2e      	ldr	r3, [pc, #184]	; (8001414 <HAL_I2C_MspInit+0xec>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	61bb      	str	r3, [r7, #24]
 8001364:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001366:	23c0      	movs	r3, #192	; 0xc0
 8001368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800136a:	2312      	movs	r3, #18
 800136c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800136e:	2301      	movs	r3, #1
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001372:	2303      	movs	r3, #3
 8001374:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001376:	2304      	movs	r3, #4
 8001378:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137a:	f107 031c 	add.w	r3, r7, #28
 800137e:	4619      	mov	r1, r3
 8001380:	4825      	ldr	r0, [pc, #148]	; (8001418 <HAL_I2C_MspInit+0xf0>)
 8001382:	f002 f999 	bl	80036b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	4b22      	ldr	r3, [pc, #136]	; (8001414 <HAL_I2C_MspInit+0xec>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	4a21      	ldr	r2, [pc, #132]	; (8001414 <HAL_I2C_MspInit+0xec>)
 8001390:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001394:	6413      	str	r3, [r2, #64]	; 0x40
 8001396:	4b1f      	ldr	r3, [pc, #124]	; (8001414 <HAL_I2C_MspInit+0xec>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80013a2:	e031      	b.n	8001408 <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a1c      	ldr	r2, [pc, #112]	; (800141c <HAL_I2C_MspInit+0xf4>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d12c      	bne.n	8001408 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	4b18      	ldr	r3, [pc, #96]	; (8001414 <HAL_I2C_MspInit+0xec>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a17      	ldr	r2, [pc, #92]	; (8001414 <HAL_I2C_MspInit+0xec>)
 80013b8:	f043 0302 	orr.w	r3, r3, #2
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b15      	ldr	r3, [pc, #84]	; (8001414 <HAL_I2C_MspInit+0xec>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80013ca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013d0:	2312      	movs	r3, #18
 80013d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d4:	2301      	movs	r3, #1
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d8:	2303      	movs	r3, #3
 80013da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80013dc:	2304      	movs	r3, #4
 80013de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e0:	f107 031c 	add.w	r3, r7, #28
 80013e4:	4619      	mov	r1, r3
 80013e6:	480c      	ldr	r0, [pc, #48]	; (8001418 <HAL_I2C_MspInit+0xf0>)
 80013e8:	f002 f966 	bl	80036b8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	4b08      	ldr	r3, [pc, #32]	; (8001414 <HAL_I2C_MspInit+0xec>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	4a07      	ldr	r2, [pc, #28]	; (8001414 <HAL_I2C_MspInit+0xec>)
 80013f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013fa:	6413      	str	r3, [r2, #64]	; 0x40
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <HAL_I2C_MspInit+0xec>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	68fb      	ldr	r3, [r7, #12]
}
 8001408:	bf00      	nop
 800140a:	3730      	adds	r7, #48	; 0x30
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40005400 	.word	0x40005400
 8001414:	40023800 	.word	0x40023800
 8001418:	40020400 	.word	0x40020400
 800141c:	40005800 	.word	0x40005800

08001420 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001420:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001422:	b09f      	sub	sp, #124	; 0x7c
 8001424:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001426:	f001 fd6b 	bl	8002f00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800142a:	f000 f9bf 	bl	80017ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800142e:	f7ff fe3d 	bl	80010ac <MX_GPIO_Init>
  MX_I2C1_Init();
 8001432:	f7ff ff1d 	bl	8001270 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001436:	f000 faf9 	bl	8001a2c <MX_SPI2_Init>
  MX_ADC1_Init();
 800143a:	f7ff fd85 	bl	8000f48 <MX_ADC1_Init>
  MX_I2C2_Init();
 800143e:	f7ff ff45 	bl	80012cc <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8001442:	f000 fa25 	bl	8001890 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8001446:	f000 fabb 	bl	80019c0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  turn_on(&STAT);
 800144a:	48c1      	ldr	r0, [pc, #772]	; (8001750 <main+0x330>)
 800144c:	f001 f837 	bl	80024be <turn_on>
  HAL_Delay(300);
 8001450:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001454:	f001 fdc6 	bl	8002fe4 <HAL_Delay>
  turn_on(&SAVE);
 8001458:	48be      	ldr	r0, [pc, #760]	; (8001754 <main+0x334>)
 800145a:	f001 f830 	bl	80024be <turn_on>
  HAL_Delay(300);
 800145e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001462:	f001 fdbf 	bl	8002fe4 <HAL_Delay>
  turn_on(&PRGM);
 8001466:	48bc      	ldr	r0, [pc, #752]	; (8001758 <main+0x338>)
 8001468:	f001 f829 	bl	80024be <turn_on>
  HAL_Delay(300);
 800146c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001470:	f001 fdb8 	bl	8002fe4 <HAL_Delay>

  turn_off(&STAT);
 8001474:	48b6      	ldr	r0, [pc, #728]	; (8001750 <main+0x330>)
 8001476:	f001 f832 	bl	80024de <turn_off>
  turn_off(&SAVE);
 800147a:	48b6      	ldr	r0, [pc, #728]	; (8001754 <main+0x334>)
 800147c:	f001 f82f 	bl	80024de <turn_off>
  turn_off(&PRGM);
 8001480:	48b5      	ldr	r0, [pc, #724]	; (8001758 <main+0x338>)
 8001482:	f001 f82c 	bl	80024de <turn_off>
  HAL_Delay(1000);
 8001486:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800148a:	f001 fdab 	bl	8002fe4 <HAL_Delay>


  ms5607_init(&BARO1);
 800148e:	48b3      	ldr	r0, [pc, #716]	; (800175c <main+0x33c>)
 8001490:	f001 f864 	bl	800255c <ms5607_init>
  ms5607_init(&BARO2);
 8001494:	48b2      	ldr	r0, [pc, #712]	; (8001760 <main+0x340>)
 8001496:	f001 f861 	bl	800255c <ms5607_init>

  if (icm20601_init(&IMU1)) printf("setup IMU1 successful \n");
 800149a:	48b2      	ldr	r0, [pc, #712]	; (8001764 <main+0x344>)
 800149c:	f000 fd6d 	bl	8001f7a <icm20601_init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d002      	beq.n	80014ac <main+0x8c>
 80014a6:	48b0      	ldr	r0, [pc, #704]	; (8001768 <main+0x348>)
 80014a8:	f006 fc0a 	bl	8007cc0 <puts>
  if (icm20601_init(&IMU2)) printf("setup IMU2 successful \n");
 80014ac:	48af      	ldr	r0, [pc, #700]	; (800176c <main+0x34c>)
 80014ae:	f000 fd64 	bl	8001f7a <icm20601_init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d002      	beq.n	80014be <main+0x9e>
 80014b8:	48ad      	ldr	r0, [pc, #692]	; (8001770 <main+0x350>)
 80014ba:	f006 fc01 	bl	8007cc0 <puts>

  sht31_init(&TEMP);
 80014be:	48ad      	ldr	r0, [pc, #692]	; (8001774 <main+0x354>)
 80014c0:	f001 fc04 	bl	8002ccc <sht31_init>

  uint8_t raw_data1[3];
  uint8_t raw_data2[3];

  float p1 = 0;
 80014c4:	f04f 0300 	mov.w	r3, #0
 80014c8:	667b      	str	r3, [r7, #100]	; 0x64
  float p2 = 0;
 80014ca:	f04f 0300 	mov.w	r3, #0
 80014ce:	663b      	str	r3, [r7, #96]	; 0x60
  float t_p1 = 0;
 80014d0:	f04f 0300 	mov.w	r3, #0
 80014d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  float t_p2 = 0;
 80014d6:	f04f 0300 	mov.w	r3, #0
 80014da:	65bb      	str	r3, [r7, #88]	; 0x58
  float accel2_val[6];

  uint16_t t_buf[2];
  float t_val[2];

  HAL_Delay(1000);
 80014dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014e0:	f001 fd80 	bl	8002fe4 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	tick = HAL_GetTick();
 80014e4:	f001 fd72 	bl	8002fcc <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	4ba3      	ldr	r3, [pc, #652]	; (8001778 <main+0x358>)
 80014ec:	601a      	str	r2, [r3, #0]

	if (LED_is_busy(&STAT)) toggle(&STAT);
 80014ee:	4898      	ldr	r0, [pc, #608]	; (8001750 <main+0x330>)
 80014f0:	f000 ffbc 	bl	800246c <LED_is_busy>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d002      	beq.n	8001500 <main+0xe0>
 80014fa:	4895      	ldr	r0, [pc, #596]	; (8001750 <main+0x330>)
 80014fc:	f000 ffcf 	bl	800249e <toggle>

	if (LED_is_busy(&SAVE)) toggle(&SAVE);
 8001500:	4894      	ldr	r0, [pc, #592]	; (8001754 <main+0x334>)
 8001502:	f000 ffb3 	bl	800246c <LED_is_busy>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d002      	beq.n	8001512 <main+0xf2>
 800150c:	4891      	ldr	r0, [pc, #580]	; (8001754 <main+0x334>)
 800150e:	f000 ffc6 	bl	800249e <toggle>

	if (LED_is_busy(&PRGM)) toggle(&PRGM);
 8001512:	4891      	ldr	r0, [pc, #580]	; (8001758 <main+0x338>)
 8001514:	f000 ffaa 	bl	800246c <LED_is_busy>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d002      	beq.n	8001524 <main+0x104>
 800151e:	488e      	ldr	r0, [pc, #568]	; (8001758 <main+0x338>)
 8001520:	f000 ffbd 	bl	800249e <toggle>

	if (LED_is_busy(&RDY)) toggle(&RDY);
 8001524:	4895      	ldr	r0, [pc, #596]	; (800177c <main+0x35c>)
 8001526:	f000 ffa1 	bl	800246c <LED_is_busy>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d002      	beq.n	8001536 <main+0x116>
 8001530:	4892      	ldr	r0, [pc, #584]	; (800177c <main+0x35c>)
 8001532:	f000 ffb4 	bl	800249e <toggle>


	if (sht31_is_busy(&TEMP))
 8001536:	488f      	ldr	r0, [pc, #572]	; (8001774 <main+0x354>)
 8001538:	f001 fbb0 	bl	8002c9c <sht31_is_busy>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d006      	beq.n	8001550 <main+0x130>
	{
		sht31_read(&TEMP, t_val, t_buf);
 8001542:	f107 020c 	add.w	r2, r7, #12
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	4619      	mov	r1, r3
 800154a:	488a      	ldr	r0, [pc, #552]	; (8001774 <main+0x354>)
 800154c:	f001 fc14 	bl	8002d78 <sht31_read>
	}


	//icm20601_read_data_raw(&IMU1, accel1_raw_buf);
	//icm20601_convert_data(&IMU1, accel1_val, accel1_raw_buf);
	icm20601_read_data(&IMU1, accel1_val);
 8001550:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001554:	4619      	mov	r1, r3
 8001556:	4883      	ldr	r0, [pc, #524]	; (8001764 <main+0x344>)
 8001558:	f000 feb2 	bl	80022c0 <icm20601_read_data>

	//icm20601_read_data_raw(&IMU2, accel2_raw_buf);
	//icm20601_convert_data(&IMU2, accel2_val, accel2_raw_buf);
	icm20601_read_data(&IMU2, accel2_val);
 800155c:	f107 0310 	add.w	r3, r7, #16
 8001560:	4619      	mov	r1, r3
 8001562:	4882      	ldr	r0, [pc, #520]	; (800176c <main+0x34c>)
 8001564:	f000 feac 	bl	80022c0 <icm20601_read_data>



	if (ms5607_is_busy(&BARO1, 3, MS_TEMPERATURE_REQ))
 8001568:	2201      	movs	r2, #1
 800156a:	2103      	movs	r1, #3
 800156c:	487b      	ldr	r0, [pc, #492]	; (800175c <main+0x33c>)
 800156e:	f000 ffc6 	bl	80024fe <ms5607_is_busy>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d002      	beq.n	800157e <main+0x15e>
	{
		ms5607_prep_temp(&BARO1);
 8001578:	4878      	ldr	r0, [pc, #480]	; (800175c <main+0x33c>)
 800157a:	f001 f88d 	bl	8002698 <ms5607_prep_temp>
	}
	if (ms5607_is_busy(&BARO2, 3, MS_TEMPERATURE_REQ))
 800157e:	2201      	movs	r2, #1
 8001580:	2103      	movs	r1, #3
 8001582:	4877      	ldr	r0, [pc, #476]	; (8001760 <main+0x340>)
 8001584:	f000 ffbb 	bl	80024fe <ms5607_is_busy>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d002      	beq.n	8001594 <main+0x174>
	{
		ms5607_prep_temp(&BARO2);
 800158e:	4874      	ldr	r0, [pc, #464]	; (8001760 <main+0x340>)
 8001590:	f001 f882 	bl	8002698 <ms5607_prep_temp>
	}
	//delay 3ms

	//HAL_Delay(5);

	if (ms5607_is_busy(&BARO1, 3, MS_PRESSURE_REQ))
 8001594:	2202      	movs	r2, #2
 8001596:	2103      	movs	r1, #3
 8001598:	4870      	ldr	r0, [pc, #448]	; (800175c <main+0x33c>)
 800159a:	f000 ffb0 	bl	80024fe <ms5607_is_busy>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d005      	beq.n	80015b0 <main+0x190>
	{
		ms5607_prep_pressure(&BARO1, raw_data1);
 80015a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015a8:	4619      	mov	r1, r3
 80015aa:	486c      	ldr	r0, [pc, #432]	; (800175c <main+0x33c>)
 80015ac:	f001 f88b 	bl	80026c6 <ms5607_prep_pressure>
	}
	if (ms5607_is_busy(&BARO2, 3, MS_PRESSURE_REQ))
 80015b0:	2202      	movs	r2, #2
 80015b2:	2103      	movs	r1, #3
 80015b4:	486a      	ldr	r0, [pc, #424]	; (8001760 <main+0x340>)
 80015b6:	f000 ffa2 	bl	80024fe <ms5607_is_busy>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d005      	beq.n	80015cc <main+0x1ac>
	{
		ms5607_prep_pressure(&BARO2, raw_data2);
 80015c0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80015c4:	4619      	mov	r1, r3
 80015c6:	4866      	ldr	r0, [pc, #408]	; (8001760 <main+0x340>)
 80015c8:	f001 f87d 	bl	80026c6 <ms5607_prep_pressure>
	}
	//delay 3ms

	//HAL_Delay(5);

	if (ms5607_is_busy(&BARO1, 3, MS_DATA_READOUT)) {
 80015cc:	2203      	movs	r2, #3
 80015ce:	2103      	movs	r1, #3
 80015d0:	4862      	ldr	r0, [pc, #392]	; (800175c <main+0x33c>)
 80015d2:	f000 ff94 	bl	80024fe <ms5607_is_busy>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d00d      	beq.n	80015f8 <main+0x1d8>
		ms5607_read_pressure(&BARO1, raw_data1);
 80015dc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015e0:	4619      	mov	r1, r3
 80015e2:	485e      	ldr	r0, [pc, #376]	; (800175c <main+0x33c>)
 80015e4:	f001 f8b8 	bl	8002758 <ms5607_read_pressure>
		ms5607_convert(&BARO1, &p1, &t_p1);
 80015e8:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80015ec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80015f0:	4619      	mov	r1, r3
 80015f2:	485a      	ldr	r0, [pc, #360]	; (800175c <main+0x33c>)
 80015f4:	f001 f8ec 	bl	80027d0 <ms5607_convert>
	}
	if (ms5607_is_busy(&BARO2, 3, MS_DATA_READOUT)) {
 80015f8:	2203      	movs	r2, #3
 80015fa:	2103      	movs	r1, #3
 80015fc:	4858      	ldr	r0, [pc, #352]	; (8001760 <main+0x340>)
 80015fe:	f000 ff7e 	bl	80024fe <ms5607_is_busy>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d00d      	beq.n	8001624 <main+0x204>
		ms5607_read_pressure(&BARO2, raw_data2);
 8001608:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800160c:	4619      	mov	r1, r3
 800160e:	4854      	ldr	r0, [pc, #336]	; (8001760 <main+0x340>)
 8001610:	f001 f8a2 	bl	8002758 <ms5607_read_pressure>
		ms5607_convert(&BARO2, &p2, &t_p2);
 8001614:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001618:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800161c:	4619      	mov	r1, r3
 800161e:	4850      	ldr	r0, [pc, #320]	; (8001760 <main+0x340>)
 8001620:	f001 f8d6 	bl	80027d0 <ms5607_convert>
	}




	printf("p1 = %4.2f bar and t1 = %4.2f C \n",p1,t_p1);
 8001624:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe ff8e 	bl	8000548 <__aeabi_f2d>
 800162c:	4605      	mov	r5, r0
 800162e:	460e      	mov	r6, r1
 8001630:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001632:	4618      	mov	r0, r3
 8001634:	f7fe ff88 	bl	8000548 <__aeabi_f2d>
 8001638:	4603      	mov	r3, r0
 800163a:	460c      	mov	r4, r1
 800163c:	e9cd 3400 	strd	r3, r4, [sp]
 8001640:	462a      	mov	r2, r5
 8001642:	4633      	mov	r3, r6
 8001644:	484e      	ldr	r0, [pc, #312]	; (8001780 <main+0x360>)
 8001646:	f006 fac7 	bl	8007bd8 <iprintf>
	printf("p2 = %4.2f bar and t2 = %4.2f C \n",p2,t_p2);
 800164a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800164c:	4618      	mov	r0, r3
 800164e:	f7fe ff7b 	bl	8000548 <__aeabi_f2d>
 8001652:	4605      	mov	r5, r0
 8001654:	460e      	mov	r6, r1
 8001656:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001658:	4618      	mov	r0, r3
 800165a:	f7fe ff75 	bl	8000548 <__aeabi_f2d>
 800165e:	4603      	mov	r3, r0
 8001660:	460c      	mov	r4, r1
 8001662:	e9cd 3400 	strd	r3, r4, [sp]
 8001666:	462a      	mov	r2, r5
 8001668:	4633      	mov	r3, r6
 800166a:	4846      	ldr	r0, [pc, #280]	; (8001784 <main+0x364>)
 800166c:	f006 fab4 	bl	8007bd8 <iprintf>
	printf("T = %4.2f C and H = %4.2f perc \n",t_val[0],t_val[1]);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe ff68 	bl	8000548 <__aeabi_f2d>
 8001678:	4605      	mov	r5, r0
 800167a:	460e      	mov	r6, r1
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe ff62 	bl	8000548 <__aeabi_f2d>
 8001684:	4603      	mov	r3, r0
 8001686:	460c      	mov	r4, r1
 8001688:	e9cd 3400 	strd	r3, r4, [sp]
 800168c:	462a      	mov	r2, r5
 800168e:	4633      	mov	r3, r6
 8001690:	483d      	ldr	r0, [pc, #244]	; (8001788 <main+0x368>)
 8001692:	f006 faa1 	bl	8007bd8 <iprintf>
	printf("IMU1 T: %4.2f C \n", accel1_val[0]);
 8001696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001698:	4618      	mov	r0, r3
 800169a:	f7fe ff55 	bl	8000548 <__aeabi_f2d>
 800169e:	4603      	mov	r3, r0
 80016a0:	460c      	mov	r4, r1
 80016a2:	461a      	mov	r2, r3
 80016a4:	4623      	mov	r3, r4
 80016a6:	4839      	ldr	r0, [pc, #228]	; (800178c <main+0x36c>)
 80016a8:	f006 fa96 	bl	8007bd8 <iprintf>
	printf("IMU1 ax: %4.2f m/s2 \n", accel1_val[1]);
 80016ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7fe ff4a 	bl	8000548 <__aeabi_f2d>
 80016b4:	4603      	mov	r3, r0
 80016b6:	460c      	mov	r4, r1
 80016b8:	461a      	mov	r2, r3
 80016ba:	4623      	mov	r3, r4
 80016bc:	4834      	ldr	r0, [pc, #208]	; (8001790 <main+0x370>)
 80016be:	f006 fa8b 	bl	8007bd8 <iprintf>
	printf("IMU1 ay: %4.2f m/s2 \n", accel1_val[2]);
 80016c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe ff3f 	bl	8000548 <__aeabi_f2d>
 80016ca:	4603      	mov	r3, r0
 80016cc:	460c      	mov	r4, r1
 80016ce:	461a      	mov	r2, r3
 80016d0:	4623      	mov	r3, r4
 80016d2:	4830      	ldr	r0, [pc, #192]	; (8001794 <main+0x374>)
 80016d4:	f006 fa80 	bl	8007bd8 <iprintf>
	printf("IMU1 az: %4.2f m/s2 \n", accel1_val[3]);
 80016d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016da:	4618      	mov	r0, r3
 80016dc:	f7fe ff34 	bl	8000548 <__aeabi_f2d>
 80016e0:	4603      	mov	r3, r0
 80016e2:	460c      	mov	r4, r1
 80016e4:	461a      	mov	r2, r3
 80016e6:	4623      	mov	r3, r4
 80016e8:	482b      	ldr	r0, [pc, #172]	; (8001798 <main+0x378>)
 80016ea:	f006 fa75 	bl	8007bd8 <iprintf>
	printf("IMU2 T: %4.2f C \n", accel2_val[0]);
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7fe ff29 	bl	8000548 <__aeabi_f2d>
 80016f6:	4603      	mov	r3, r0
 80016f8:	460c      	mov	r4, r1
 80016fa:	461a      	mov	r2, r3
 80016fc:	4623      	mov	r3, r4
 80016fe:	4827      	ldr	r0, [pc, #156]	; (800179c <main+0x37c>)
 8001700:	f006 fa6a 	bl	8007bd8 <iprintf>
	printf("IMU2 ax: %4.2f m/s2 \n", accel2_val[1]);
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	4618      	mov	r0, r3
 8001708:	f7fe ff1e 	bl	8000548 <__aeabi_f2d>
 800170c:	4603      	mov	r3, r0
 800170e:	460c      	mov	r4, r1
 8001710:	461a      	mov	r2, r3
 8001712:	4623      	mov	r3, r4
 8001714:	4822      	ldr	r0, [pc, #136]	; (80017a0 <main+0x380>)
 8001716:	f006 fa5f 	bl	8007bd8 <iprintf>
	printf("IMU2 ay: %4.2f m/s2 \n", accel2_val[2]);
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	4618      	mov	r0, r3
 800171e:	f7fe ff13 	bl	8000548 <__aeabi_f2d>
 8001722:	4603      	mov	r3, r0
 8001724:	460c      	mov	r4, r1
 8001726:	461a      	mov	r2, r3
 8001728:	4623      	mov	r3, r4
 800172a:	481e      	ldr	r0, [pc, #120]	; (80017a4 <main+0x384>)
 800172c:	f006 fa54 	bl	8007bd8 <iprintf>
	printf("IMU2 az: %4.2f m/s2 \n", accel2_val[3]);
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe ff08 	bl	8000548 <__aeabi_f2d>
 8001738:	4603      	mov	r3, r0
 800173a:	460c      	mov	r4, r1
 800173c:	461a      	mov	r2, r3
 800173e:	4623      	mov	r3, r4
 8001740:	4819      	ldr	r0, [pc, #100]	; (80017a8 <main+0x388>)
 8001742:	f006 fa49 	bl	8007bd8 <iprintf>

	HAL_Delay(1000);
 8001746:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800174a:	f001 fc4b 	bl	8002fe4 <HAL_Delay>
	tick = HAL_GetTick();
 800174e:	e6c9      	b.n	80014e4 <main+0xc4>
 8001750:	20000000 	.word	0x20000000
 8001754:	20000010 	.word	0x20000010
 8001758:	20000020 	.word	0x20000020
 800175c:	20000040 	.word	0x20000040
 8001760:	20000068 	.word	0x20000068
 8001764:	20000090 	.word	0x20000090
 8001768:	08009a50 	.word	0x08009a50
 800176c:	200000a0 	.word	0x200000a0
 8001770:	08009a68 	.word	0x08009a68
 8001774:	200000b0 	.word	0x200000b0
 8001778:	200003b8 	.word	0x200003b8
 800177c:	20000030 	.word	0x20000030
 8001780:	08009a80 	.word	0x08009a80
 8001784:	08009aa4 	.word	0x08009aa4
 8001788:	08009ac8 	.word	0x08009ac8
 800178c:	08009aec 	.word	0x08009aec
 8001790:	08009b00 	.word	0x08009b00
 8001794:	08009b18 	.word	0x08009b18
 8001798:	08009b30 	.word	0x08009b30
 800179c:	08009b48 	.word	0x08009b48
 80017a0:	08009b5c 	.word	0x08009b5c
 80017a4:	08009b74 	.word	0x08009b74
 80017a8:	08009b8c 	.word	0x08009b8c

080017ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b094      	sub	sp, #80	; 0x50
 80017b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017b2:	f107 0320 	add.w	r3, r7, #32
 80017b6:	2230      	movs	r2, #48	; 0x30
 80017b8:	2100      	movs	r1, #0
 80017ba:	4618      	mov	r0, r3
 80017bc:	f005 fda8 	bl	8007310 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017c0:	f107 030c 	add.w	r3, r7, #12
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017d0:	2300      	movs	r3, #0
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	4b28      	ldr	r3, [pc, #160]	; (8001878 <SystemClock_Config+0xcc>)
 80017d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d8:	4a27      	ldr	r2, [pc, #156]	; (8001878 <SystemClock_Config+0xcc>)
 80017da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017de:	6413      	str	r3, [r2, #64]	; 0x40
 80017e0:	4b25      	ldr	r3, [pc, #148]	; (8001878 <SystemClock_Config+0xcc>)
 80017e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017ec:	2300      	movs	r3, #0
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	4b22      	ldr	r3, [pc, #136]	; (800187c <SystemClock_Config+0xd0>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a21      	ldr	r2, [pc, #132]	; (800187c <SystemClock_Config+0xd0>)
 80017f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017fa:	6013      	str	r3, [r2, #0]
 80017fc:	4b1f      	ldr	r3, [pc, #124]	; (800187c <SystemClock_Config+0xd0>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001804:	607b      	str	r3, [r7, #4]
 8001806:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001808:	2302      	movs	r3, #2
 800180a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800180c:	2301      	movs	r3, #1
 800180e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001810:	2310      	movs	r3, #16
 8001812:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001814:	2302      	movs	r3, #2
 8001816:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001818:	2300      	movs	r3, #0
 800181a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800181c:	2308      	movs	r3, #8
 800181e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001820:	23a8      	movs	r3, #168	; 0xa8
 8001822:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001824:	2302      	movs	r3, #2
 8001826:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001828:	2307      	movs	r3, #7
 800182a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800182c:	f107 0320 	add.w	r3, r7, #32
 8001830:	4618      	mov	r0, r3
 8001832:	f003 f9d3 	bl	8004bdc <HAL_RCC_OscConfig>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800183c:	f000 f820 	bl	8001880 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001840:	230f      	movs	r3, #15
 8001842:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001844:	2302      	movs	r3, #2
 8001846:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800184c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001850:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001852:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001856:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001858:	f107 030c 	add.w	r3, r7, #12
 800185c:	2105      	movs	r1, #5
 800185e:	4618      	mov	r0, r3
 8001860:	f003 fc2c 	bl	80050bc <HAL_RCC_ClockConfig>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800186a:	f000 f809 	bl	8001880 <Error_Handler>
  }
}
 800186e:	bf00      	nop
 8001870:	3750      	adds	r7, #80	; 0x50
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40023800 	.word	0x40023800
 800187c:	40007000 	.word	0x40007000

08001880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr
	...

08001890 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 8001894:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <MX_SDIO_SD_Init+0x58>)
 8001896:	4a15      	ldr	r2, [pc, #84]	; (80018ec <MX_SDIO_SD_Init+0x5c>)
 8001898:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800189a:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <MX_SDIO_SD_Init+0x58>)
 800189c:	2200      	movs	r2, #0
 800189e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80018a0:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <MX_SDIO_SD_Init+0x58>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80018a6:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <MX_SDIO_SD_Init+0x58>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80018ac:	4b0e      	ldr	r3, [pc, #56]	; (80018e8 <MX_SDIO_SD_Init+0x58>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80018b2:	4b0d      	ldr	r3, [pc, #52]	; (80018e8 <MX_SDIO_SD_Init+0x58>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80018b8:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <MX_SDIO_SD_Init+0x58>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 80018be:	480a      	ldr	r0, [pc, #40]	; (80018e8 <MX_SDIO_SD_Init+0x58>)
 80018c0:	f003 fdb4 	bl	800542c <HAL_SD_Init>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 80018ca:	f7ff ffd9 	bl	8001880 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80018ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018d2:	4805      	ldr	r0, [pc, #20]	; (80018e8 <MX_SDIO_SD_Init+0x58>)
 80018d4:	f003 ffde 	bl	8005894 <HAL_SD_ConfigWideBusOperation>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 80018de:	f7ff ffcf 	bl	8001880 <Error_Handler>
  }

}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	200003bc 	.word	0x200003bc
 80018ec:	40012c00 	.word	0x40012c00

080018f0 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b08a      	sub	sp, #40	; 0x28
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a28      	ldr	r2, [pc, #160]	; (80019b0 <HAL_SD_MspInit+0xc0>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d14a      	bne.n	80019a8 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
 8001916:	4b27      	ldr	r3, [pc, #156]	; (80019b4 <HAL_SD_MspInit+0xc4>)
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	4a26      	ldr	r2, [pc, #152]	; (80019b4 <HAL_SD_MspInit+0xc4>)
 800191c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001920:	6453      	str	r3, [r2, #68]	; 0x44
 8001922:	4b24      	ldr	r3, [pc, #144]	; (80019b4 <HAL_SD_MspInit+0xc4>)
 8001924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800192a:	613b      	str	r3, [r7, #16]
 800192c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	4b20      	ldr	r3, [pc, #128]	; (80019b4 <HAL_SD_MspInit+0xc4>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	4a1f      	ldr	r2, [pc, #124]	; (80019b4 <HAL_SD_MspInit+0xc4>)
 8001938:	f043 0304 	orr.w	r3, r3, #4
 800193c:	6313      	str	r3, [r2, #48]	; 0x30
 800193e:	4b1d      	ldr	r3, [pc, #116]	; (80019b4 <HAL_SD_MspInit+0xc4>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	f003 0304 	and.w	r3, r3, #4
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <HAL_SD_MspInit+0xc4>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a18      	ldr	r2, [pc, #96]	; (80019b4 <HAL_SD_MspInit+0xc4>)
 8001954:	f043 0308 	orr.w	r3, r3, #8
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b16      	ldr	r3, [pc, #88]	; (80019b4 <HAL_SD_MspInit+0xc4>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0308 	and.w	r3, r3, #8
 8001962:	60bb      	str	r3, [r7, #8]
 8001964:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001966:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800196a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001974:	2303      	movs	r3, #3
 8001976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001978:	230c      	movs	r3, #12
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4619      	mov	r1, r3
 8001982:	480d      	ldr	r0, [pc, #52]	; (80019b8 <HAL_SD_MspInit+0xc8>)
 8001984:	f001 fe98 	bl	80036b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001988:	2304      	movs	r3, #4
 800198a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198c:	2302      	movs	r3, #2
 800198e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001994:	2303      	movs	r3, #3
 8001996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001998:	230c      	movs	r3, #12
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	4619      	mov	r1, r3
 80019a2:	4806      	ldr	r0, [pc, #24]	; (80019bc <HAL_SD_MspInit+0xcc>)
 80019a4:	f001 fe88 	bl	80036b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80019a8:	bf00      	nop
 80019aa:	3728      	adds	r7, #40	; 0x28
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40012c00 	.word	0x40012c00
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40020800 	.word	0x40020800
 80019bc:	40020c00 	.word	0x40020c00

080019c0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80019c4:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <MX_SPI1_Init+0x64>)
 80019c6:	4a18      	ldr	r2, [pc, #96]	; (8001a28 <MX_SPI1_Init+0x68>)
 80019c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019ca:	4b16      	ldr	r3, [pc, #88]	; (8001a24 <MX_SPI1_Init+0x64>)
 80019cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019d2:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <MX_SPI1_Init+0x64>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <MX_SPI1_Init+0x64>)
 80019da:	2200      	movs	r2, #0
 80019dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019de:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <MX_SPI1_Init+0x64>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <MX_SPI1_Init+0x64>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019ea:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <MX_SPI1_Init+0x64>)
 80019ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019f0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019f2:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <MX_SPI1_Init+0x64>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019f8:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <MX_SPI1_Init+0x64>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <MX_SPI1_Init+0x64>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a04:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <MX_SPI1_Init+0x64>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a0a:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <MX_SPI1_Init+0x64>)
 8001a0c:	220a      	movs	r2, #10
 8001a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a10:	4804      	ldr	r0, [pc, #16]	; (8001a24 <MX_SPI1_Init+0x64>)
 8001a12:	f004 fa77 	bl	8005f04 <HAL_SPI_Init>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a1c:	f7ff ff30 	bl	8001880 <Error_Handler>
  }

}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20000498 	.word	0x20000498
 8001a28:	40013000 	.word	0x40013000

08001a2c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8001a30:	4b17      	ldr	r3, [pc, #92]	; (8001a90 <MX_SPI2_Init+0x64>)
 8001a32:	4a18      	ldr	r2, [pc, #96]	; (8001a94 <MX_SPI2_Init+0x68>)
 8001a34:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a36:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <MX_SPI2_Init+0x64>)
 8001a38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a3c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a3e:	4b14      	ldr	r3, [pc, #80]	; (8001a90 <MX_SPI2_Init+0x64>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a44:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <MX_SPI2_Init+0x64>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a4a:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <MX_SPI2_Init+0x64>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a50:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <MX_SPI2_Init+0x64>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a56:	4b0e      	ldr	r3, [pc, #56]	; (8001a90 <MX_SPI2_Init+0x64>)
 8001a58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a5c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a5e:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <MX_SPI2_Init+0x64>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a64:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <MX_SPI2_Init+0x64>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a6a:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <MX_SPI2_Init+0x64>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a70:	4b07      	ldr	r3, [pc, #28]	; (8001a90 <MX_SPI2_Init+0x64>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001a76:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <MX_SPI2_Init+0x64>)
 8001a78:	220a      	movs	r2, #10
 8001a7a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a7c:	4804      	ldr	r0, [pc, #16]	; (8001a90 <MX_SPI2_Init+0x64>)
 8001a7e:	f004 fa41 	bl	8005f04 <HAL_SPI_Init>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001a88:	f7ff fefa 	bl	8001880 <Error_Handler>
  }

}
 8001a8c:	bf00      	nop
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20000440 	.word	0x20000440
 8001a94:	40003800 	.word	0x40003800

08001a98 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08c      	sub	sp, #48	; 0x30
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 031c 	add.w	r3, r7, #28
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a32      	ldr	r2, [pc, #200]	; (8001b80 <HAL_SPI_MspInit+0xe8>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d12c      	bne.n	8001b14 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	61bb      	str	r3, [r7, #24]
 8001abe:	4b31      	ldr	r3, [pc, #196]	; (8001b84 <HAL_SPI_MspInit+0xec>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	4a30      	ldr	r2, [pc, #192]	; (8001b84 <HAL_SPI_MspInit+0xec>)
 8001ac4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aca:	4b2e      	ldr	r3, [pc, #184]	; (8001b84 <HAL_SPI_MspInit+0xec>)
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ad2:	61bb      	str	r3, [r7, #24]
 8001ad4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	617b      	str	r3, [r7, #20]
 8001ada:	4b2a      	ldr	r3, [pc, #168]	; (8001b84 <HAL_SPI_MspInit+0xec>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a29      	ldr	r2, [pc, #164]	; (8001b84 <HAL_SPI_MspInit+0xec>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b27      	ldr	r3, [pc, #156]	; (8001b84 <HAL_SPI_MspInit+0xec>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	617b      	str	r3, [r7, #20]
 8001af0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001af2:	23e0      	movs	r3, #224	; 0xe0
 8001af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afe:	2303      	movs	r3, #3
 8001b00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b02:	2305      	movs	r3, #5
 8001b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b06:	f107 031c 	add.w	r3, r7, #28
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	481e      	ldr	r0, [pc, #120]	; (8001b88 <HAL_SPI_MspInit+0xf0>)
 8001b0e:	f001 fdd3 	bl	80036b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001b12:	e031      	b.n	8001b78 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a1c      	ldr	r2, [pc, #112]	; (8001b8c <HAL_SPI_MspInit+0xf4>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d12c      	bne.n	8001b78 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	613b      	str	r3, [r7, #16]
 8001b22:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <HAL_SPI_MspInit+0xec>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	4a17      	ldr	r2, [pc, #92]	; (8001b84 <HAL_SPI_MspInit+0xec>)
 8001b28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b2e:	4b15      	ldr	r3, [pc, #84]	; (8001b84 <HAL_SPI_MspInit+0xec>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b36:	613b      	str	r3, [r7, #16]
 8001b38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <HAL_SPI_MspInit+0xec>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	4a10      	ldr	r2, [pc, #64]	; (8001b84 <HAL_SPI_MspInit+0xec>)
 8001b44:	f043 0302 	orr.w	r3, r3, #2
 8001b48:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <HAL_SPI_MspInit+0xec>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001b56:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b64:	2303      	movs	r3, #3
 8001b66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b68:	2305      	movs	r3, #5
 8001b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b6c:	f107 031c 	add.w	r3, r7, #28
 8001b70:	4619      	mov	r1, r3
 8001b72:	4807      	ldr	r0, [pc, #28]	; (8001b90 <HAL_SPI_MspInit+0xf8>)
 8001b74:	f001 fda0 	bl	80036b8 <HAL_GPIO_Init>
}
 8001b78:	bf00      	nop
 8001b7a:	3730      	adds	r7, #48	; 0x30
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40013000 	.word	0x40013000
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40020000 	.word	0x40020000
 8001b8c:	40003800 	.word	0x40003800
 8001b90:	40020400 	.word	0x40020400

08001b94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	607b      	str	r3, [r7, #4]
 8001b9e:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <HAL_MspInit+0x4c>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	4a0f      	ldr	r2, [pc, #60]	; (8001be0 <HAL_MspInit+0x4c>)
 8001ba4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8001baa:	4b0d      	ldr	r3, [pc, #52]	; (8001be0 <HAL_MspInit+0x4c>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bb2:	607b      	str	r3, [r7, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	603b      	str	r3, [r7, #0]
 8001bba:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <HAL_MspInit+0x4c>)
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	4a08      	ldr	r2, [pc, #32]	; (8001be0 <HAL_MspInit+0x4c>)
 8001bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_MspInit+0x4c>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bce:	603b      	str	r3, [r7, #0]
 8001bd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	40023800 	.word	0x40023800

08001be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf6:	e7fe      	b.n	8001bf6 <HardFault_Handler+0x4>

08001bf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bfc:	e7fe      	b.n	8001bfc <MemManage_Handler+0x4>

08001bfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c02:	e7fe      	b.n	8001c02 <BusFault_Handler+0x4>

08001c04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c08:	e7fe      	b.n	8001c08 <UsageFault_Handler+0x4>

08001c0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c38:	f001 f9b4 	bl	8002fa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c3c:	bf00      	nop
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001c48:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001c4c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001c50:	f003 0301 	and.w	r3, r3, #1
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d013      	beq.n	8001c80 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001c58:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001c5c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001c60:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d00b      	beq.n	8001c80 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001c68:	e000      	b.n	8001c6c <ITM_SendChar+0x2c>
    {
      __NOP();
 8001c6a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001c6c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0f9      	beq.n	8001c6a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001c76:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001c80:	687b      	ldr	r3, [r7, #4]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b086      	sub	sp, #24
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	60f8      	str	r0, [r7, #12]
 8001c96:	60b9      	str	r1, [r7, #8]
 8001c98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]
 8001c9e:	e00a      	b.n	8001cb6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ca0:	f3af 8000 	nop.w
 8001ca4:	4601      	mov	r1, r0
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	1c5a      	adds	r2, r3, #1
 8001caa:	60ba      	str	r2, [r7, #8]
 8001cac:	b2ca      	uxtb	r2, r1
 8001cae:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	dbf0      	blt.n	8001ca0 <_read+0x12>
	}

return len;
 8001cbe:	687b      	ldr	r3, [r7, #4]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	e009      	b.n	8001cee <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar((*ptr++));
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	1c5a      	adds	r2, r3, #1
 8001cde:	60ba      	str	r2, [r7, #8]
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff ffac 	bl	8001c40 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	3301      	adds	r3, #1
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	dbf1      	blt.n	8001cda <_write+0x12>
	}
	return len;
 8001cf6:	687b      	ldr	r3, [r7, #4]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <_close>:

int _close(int file)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
	return -1;
 8001d08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d28:	605a      	str	r2, [r3, #4]
	return 0;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <_isatty>:

int _isatty(int file)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
	return 1;
 8001d40:	2301      	movs	r3, #1
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b085      	sub	sp, #20
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	60f8      	str	r0, [r7, #12]
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	607a      	str	r2, [r7, #4]
	return 0;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001d70:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <_sbrk+0x50>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d102      	bne.n	8001d7e <_sbrk+0x16>
		heap_end = &end;
 8001d78:	4b0f      	ldr	r3, [pc, #60]	; (8001db8 <_sbrk+0x50>)
 8001d7a:	4a10      	ldr	r2, [pc, #64]	; (8001dbc <_sbrk+0x54>)
 8001d7c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <_sbrk+0x50>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001d84:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <_sbrk+0x50>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	466a      	mov	r2, sp
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d907      	bls.n	8001da2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001d92:	f005 fa93 	bl	80072bc <__errno>
 8001d96:	4602      	mov	r2, r0
 8001d98:	230c      	movs	r3, #12
 8001d9a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001d9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001da0:	e006      	b.n	8001db0 <_sbrk+0x48>
	}

	heap_end += incr;
 8001da2:	4b05      	ldr	r3, [pc, #20]	; (8001db8 <_sbrk+0x50>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4413      	add	r3, r2
 8001daa:	4a03      	ldr	r2, [pc, #12]	; (8001db8 <_sbrk+0x50>)
 8001dac:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001dae:	68fb      	ldr	r3, [r7, #12]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	200002bc 	.word	0x200002bc
 8001dbc:	200004f8 	.word	0x200004f8

08001dc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dc4:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <SystemInit+0x28>)
 8001dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dca:	4a07      	ldr	r2, [pc, #28]	; (8001de8 <SystemInit+0x28>)
 8001dcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001dd4:	4b04      	ldr	r3, [pc, #16]	; (8001de8 <SystemInit+0x28>)
 8001dd6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dda:	609a      	str	r2, [r3, #8]
#endif
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <_get_accel_sensitivity>:
static float temperature_sensitivity = 326.8;

// *** Local functions *** //

// Used to convert raw accelerometer readings to G-force.
float _get_accel_sensitivity(enum icm20601_accel_g accel_g) {
 8001dec:	b480      	push	{r7}
 8001dee:	b085      	sub	sp, #20
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	71fb      	strb	r3, [r7, #7]
	float f = 0.0;
 8001df6:	f04f 0300 	mov.w	r3, #0
 8001dfa:	60fb      	str	r3, [r7, #12]

  	switch (accel_g) {
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	d81a      	bhi.n	8001e38 <_get_accel_sensitivity+0x4c>
 8001e02:	a201      	add	r2, pc, #4	; (adr r2, 8001e08 <_get_accel_sensitivity+0x1c>)
 8001e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e08:	08001e19 	.word	0x08001e19
 8001e0c:	08001e21 	.word	0x08001e21
 8001e10:	08001e29 	.word	0x08001e29
 8001e14:	08001e31 	.word	0x08001e31
  	case (ICM20601_ACCEL_RANGE_4G):
    		f = 8192.0;
 8001e18:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 8001e1c:	60fb      	str	r3, [r7, #12]
    break;
 8001e1e:	e00b      	b.n	8001e38 <_get_accel_sensitivity+0x4c>
  	case (ICM20601_ACCEL_RANGE_8G):
    		f = 4096.0;
 8001e20:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 8001e24:	60fb      	str	r3, [r7, #12]
    break;
 8001e26:	e007      	b.n	8001e38 <_get_accel_sensitivity+0x4c>
  	case (ICM20601_ACCEL_RANGE_16G):
    		f = 2048.0;
 8001e28:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 8001e2c:	60fb      	str	r3, [r7, #12]
    break;
 8001e2e:	e003      	b.n	8001e38 <_get_accel_sensitivity+0x4c>
  	case (ICM20601_ACCEL_RANGE_32G):
    		f = 1024.0;
 8001e30:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 8001e34:	60fb      	str	r3, [r7, #12]
    break;
 8001e36:	bf00      	nop
  }
  return f;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	ee07 3a90 	vmov	s15, r3
}
 8001e3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <_get_gyro_sensitivity>:

// Used to convert raw gyroscope readings to degrees per second.
float _get_gyro_sensitivity(enum icm20601_gyro_dps gyro_dps) {
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	71fb      	strb	r3, [r7, #7]
	float f = 0;
 8001e56:	f04f 0300 	mov.w	r3, #0
 8001e5a:	60fb      	str	r3, [r7, #12]

	switch (gyro_dps) {
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	2b03      	cmp	r3, #3
 8001e60:	d816      	bhi.n	8001e90 <_get_gyro_sensitivity+0x44>
 8001e62:	a201      	add	r2, pc, #4	; (adr r2, 8001e68 <_get_gyro_sensitivity+0x1c>)
 8001e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e68:	08001e79 	.word	0x08001e79
 8001e6c:	08001e7f 	.word	0x08001e7f
 8001e70:	08001e85 	.word	0x08001e85
 8001e74:	08001e8b 	.word	0x08001e8b
	case (ICM20601_GYRO_RANGE_500_DPS):
    		f = 65.5;
 8001e78:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <_get_gyro_sensitivity+0x58>)
 8001e7a:	60fb      	str	r3, [r7, #12]
	break;
 8001e7c:	e008      	b.n	8001e90 <_get_gyro_sensitivity+0x44>
	case (ICM20601_GYRO_RANGE_1000_DPS):
    		f = 32.8;
 8001e7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <_get_gyro_sensitivity+0x5c>)
 8001e80:	60fb      	str	r3, [r7, #12]
    break;
 8001e82:	e005      	b.n	8001e90 <_get_gyro_sensitivity+0x44>
    case (ICM20601_GYRO_RANGE_2000_DPS):
    		f = 16.4;
 8001e84:	4b09      	ldr	r3, [pc, #36]	; (8001eac <_get_gyro_sensitivity+0x60>)
 8001e86:	60fb      	str	r3, [r7, #12]
    break;
 8001e88:	e002      	b.n	8001e90 <_get_gyro_sensitivity+0x44>
    case (ICM20601_GYRO_RANGE_4000_DPS):
    		f = 8.2;
 8001e8a:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <_get_gyro_sensitivity+0x64>)
 8001e8c:	60fb      	str	r3, [r7, #12]
    break;
 8001e8e:	bf00      	nop
  }
  return f;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	ee07 3a90 	vmov	s15, r3
}
 8001e96:	eeb0 0a67 	vmov.f32	s0, s15
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	42830000 	.word	0x42830000
 8001ea8:	42033333 	.word	0x42033333
 8001eac:	41833333 	.word	0x41833333
 8001eb0:	41033333 	.word	0x41033333

08001eb4 <_icm_read_bytes>:
  }
  return 1;
}

// Read bytes from MEMS
void _icm_read_bytes(struct icm20601_dev * dev, uint8_t reg, uint8_t* pData, uint16_t size){
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	607a      	str	r2, [r7, #4]
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	72fb      	strb	r3, [r7, #11]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	813b      	strh	r3, [r7, #8]
	reg = reg | 0x80;
 8001ec8:	7afb      	ldrb	r3, [r7, #11]
 8001eca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_RESET);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6818      	ldr	r0, [r3, #0]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	889b      	ldrh	r3, [r3, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	4619      	mov	r1, r3
 8001ede:	f001 fd85 	bl	80039ec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->spi_bus, &reg, 1, IMU20601_SPI_TIMEOUT);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6898      	ldr	r0, [r3, #8]
 8001ee6:	f107 010b 	add.w	r1, r7, #11
 8001eea:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f004 f86c 	bl	8005fcc <HAL_SPI_Transmit>
	HAL_SPI_Receive(dev->spi_bus, pData, size, IMU20601_SPI_TIMEOUT);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6898      	ldr	r0, [r3, #8]
 8001ef8:	893a      	ldrh	r2, [r7, #8]
 8001efa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	f004 f998 	bl	8006234 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_SET);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6818      	ldr	r0, [r3, #0]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	889b      	ldrh	r3, [r3, #4]
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	4619      	mov	r1, r3
 8001f10:	f001 fd6c 	bl	80039ec <HAL_GPIO_WritePin>
}
 8001f14:	bf00      	nop
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <_icm_write_bytes>:

// Write bytes to MEMS
void _icm_write_bytes(struct icm20601_dev * dev, uint8_t reg, uint8_t *pData, uint16_t size){
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	607a      	str	r2, [r7, #4]
 8001f26:	461a      	mov	r2, r3
 8001f28:	460b      	mov	r3, r1
 8001f2a:	72fb      	strb	r3, [r7, #11]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	813b      	strh	r3, [r7, #8]

	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_RESET);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6818      	ldr	r0, [r3, #0]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	889b      	ldrh	r3, [r3, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	f001 fd56 	bl	80039ec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->spi_bus, &reg, 1, IMU20601_SPI_TIMEOUT);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6898      	ldr	r0, [r3, #8]
 8001f44:	f107 010b 	add.w	r1, r7, #11
 8001f48:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f004 f83d 	bl	8005fcc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(dev->spi_bus, pData, size, IMU20601_SPI_TIMEOUT);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6898      	ldr	r0, [r3, #8]
 8001f56:	893a      	ldrh	r2, [r7, #8]
 8001f58:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	f004 f835 	bl	8005fcc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_SET);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	6818      	ldr	r0, [r3, #0]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	889b      	ldrh	r3, [r3, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f001 fd3d 	bl	80039ec <HAL_GPIO_WritePin>
}
 8001f72:	bf00      	nop
 8001f74:	3710      	adds	r7, #16
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <icm20601_init>:


// *** Global Functions *** //

int8_t icm20601_init(struct icm20601_dev * dev) {
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b084      	sub	sp, #16
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	73fb      	strb	r3, [r7, #15]
	uint8_t r [1] = {0};
 8001f86:	2300      	movs	r3, #0
 8001f88:	733b      	strb	r3, [r7, #12]
	//  4. disable fifo
	//  5. configure chip
	//  6. enable accelerometer and gyroscope

	// full reset of chip
	tmp = SENS_reset; // 0x81
 8001f8a:	2381      	movs	r3, #129	; 0x81
 8001f8c:	73fb      	strb	r3, [r7, #15]
	_icm_write_bytes(dev, REG_PWR_MGMT_1, &tmp , 1);
 8001f8e:	f107 020f 	add.w	r2, r7, #15
 8001f92:	2301      	movs	r3, #1
 8001f94:	216b      	movs	r1, #107	; 0x6b
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff ffc0 	bl	8001f1c <_icm_write_bytes>
	HAL_Delay(1);
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	f001 f821 	bl	8002fe4 <HAL_Delay>

    // set clock to internal PLL
    tmp = SENS_internalpll; //0x01
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_1, &tmp, 1);
 8001fa6:	f107 020f 	add.w	r2, r7, #15
 8001faa:	2301      	movs	r3, #1
 8001fac:	216b      	movs	r1, #107	; 0x6b
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7ff ffb4 	bl	8001f1c <_icm_write_bytes>
    HAL_Delay(1);
 8001fb4:	2001      	movs	r0, #1
 8001fb6:	f001 f815 	bl	8002fe4 <HAL_Delay>

    // verify we are able to read from the chip
    _icm_read_bytes(dev, REG_WHO_AM_I, r, 1);
 8001fba:	f107 020c 	add.w	r2, r7, #12
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	2175      	movs	r1, #117	; 0x75
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7ff ff76 	bl	8001eb4 <_icm_read_bytes>
    if (r[0] != REG_WHO_AM_I_CONST) return 0;
 8001fc8:	7b3b      	ldrb	r3, [r7, #12]
 8001fca:	2bac      	cmp	r3, #172	; 0xac
 8001fcc:	d001      	beq.n	8001fd2 <icm20601_init+0x58>
 8001fce:	2300      	movs	r3, #0
 8001fd0:	e093      	b.n	80020fa <icm20601_init+0x180>

    // place accel and gyro on standby
    tmp = SENS_standby; // 0x3F
 8001fd2:	233f      	movs	r3, #63	; 0x3f
 8001fd4:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_2, &tmp , 1);
 8001fd6:	f107 020f 	add.w	r2, r7, #15
 8001fda:	2301      	movs	r3, #1
 8001fdc:	216c      	movs	r1, #108	; 0x6c
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff ff9c 	bl	8001f1c <_icm_write_bytes>

    // disable fifo
    tmp = SENS_nofifo; //0x00
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_USER_CTRL, &tmp , 1);
 8001fe8:	f107 020f 	add.w	r2, r7, #15
 8001fec:	2301      	movs	r3, #1
 8001fee:	216a      	movs	r1, #106	; 0x6a
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f7ff ff93 	bl	8001f1c <_icm_write_bytes>

    // disable chip I2C communications
    tmp = SENS_disablei2c;	//0x41;
 8001ff6:	2341      	movs	r3, #65	; 0x41
 8001ff8:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_USER_CTRL, &tmp , 1);
 8001ffa:	f107 020f 	add.w	r2, r7, #15
 8001ffe:	2301      	movs	r3, #1
 8002000:	216a      	movs	r1, #106	; 0x6a
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff ff8a 	bl	8001f1c <_icm_write_bytes>

    // Accelerometer filtering
    if (ICM20601_ACCEL_DLPF_BYPASS_1046_HZ == dev->accel_dlpf) {
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	7b1b      	ldrb	r3, [r3, #12]
 800200c:	2b08      	cmp	r3, #8
 800200e:	d102      	bne.n	8002016 <icm20601_init+0x9c>
      tmp = (0x01 << 3);
 8002010:	2308      	movs	r3, #8
 8002012:	73fb      	strb	r3, [r7, #15]
 8002014:	e002      	b.n	800201c <icm20601_init+0xa2>
    }
    else {
      tmp = dev->accel_dlpf;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	7b1b      	ldrb	r3, [r3, #12]
 800201a:	73fb      	strb	r3, [r7, #15]
    }
    _icm_write_bytes(dev, REG_ACCEL_CONFIG_2, &tmp , 1);
 800201c:	f107 020f 	add.w	r2, r7, #15
 8002020:	2301      	movs	r3, #1
 8002022:	211d      	movs	r1, #29
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff ff79 	bl	8001f1c <_icm_write_bytes>

    // Accelerometer range
    tmp = (dev->accel_g) << 3;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	7b5b      	ldrb	r3, [r3, #13]
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	b2db      	uxtb	r3, r3
 8002032:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_ACCEL_CONFIG_1, &tmp , 1);
 8002034:	f107 020f 	add.w	r2, r7, #15
 8002038:	2301      	movs	r3, #1
 800203a:	211c      	movs	r1, #28
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff ff6d 	bl	8001f1c <_icm_write_bytes>
    // Gyro filtering
    //tmp = ((dev->gyro_dps) << 3) | SENS_gyrofilter; // filter: 0x02
    //_icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);


    if (ICM20601_GYRO_DLPF_BYPASS_3281_HZ == dev->gyro_dlpf) {
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	7b9b      	ldrb	r3, [r3, #14]
 8002046:	2b08      	cmp	r3, #8
 8002048:	d119      	bne.n	800207e <icm20601_init+0x104>
    	// bypass dpf and set dps
        tmp = 0x00;
 800204a:	2300      	movs	r3, #0
 800204c:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 800204e:	f107 020f 	add.w	r2, r7, #15
 8002052:	2301      	movs	r3, #1
 8002054:	211a      	movs	r1, #26
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7ff ff60 	bl	8001f1c <_icm_write_bytes>

        tmp = (dev->gyro_dps << 3) | 0x02;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	7bdb      	ldrb	r3, [r3, #15]
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	b25b      	sxtb	r3, r3
 8002064:	f043 0302 	orr.w	r3, r3, #2
 8002068:	b25b      	sxtb	r3, r3
 800206a:	b2db      	uxtb	r3, r3
 800206c:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 800206e:	f107 020f 	add.w	r2, r7, #15
 8002072:	2301      	movs	r3, #1
 8002074:	211b      	movs	r1, #27
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7ff ff50 	bl	8001f1c <_icm_write_bytes>
 800207c:	e033      	b.n	80020e6 <icm20601_init+0x16c>
     }
     else if (ICM20601_GYRO_DLPF_BYPASS_8173_HZ == dev->gyro_dlpf) {
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	7b9b      	ldrb	r3, [r3, #14]
 8002082:	2b09      	cmp	r3, #9
 8002084:	d119      	bne.n	80020ba <icm20601_init+0x140>
        // bypass dpf and set dps
        tmp = 0x00;
 8002086:	2300      	movs	r3, #0
 8002088:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 800208a:	f107 020f 	add.w	r2, r7, #15
 800208e:	2301      	movs	r3, #1
 8002090:	211a      	movs	r1, #26
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7ff ff42 	bl	8001f1c <_icm_write_bytes>

        tmp = (dev->gyro_dps << 3) | 0x01;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	7bdb      	ldrb	r3, [r3, #15]
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	b25b      	sxtb	r3, r3
 80020a0:	f043 0301 	orr.w	r3, r3, #1
 80020a4:	b25b      	sxtb	r3, r3
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 80020aa:	f107 020f 	add.w	r2, r7, #15
 80020ae:	2301      	movs	r3, #1
 80020b0:	211b      	movs	r1, #27
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff ff32 	bl	8001f1c <_icm_write_bytes>
 80020b8:	e015      	b.n	80020e6 <icm20601_init+0x16c>
     }
     else {
        // configure dpf and set dps
        tmp = dev->gyro_dlpf;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	7b9b      	ldrb	r3, [r3, #14]
 80020be:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 80020c0:	f107 020f 	add.w	r2, r7, #15
 80020c4:	2301      	movs	r3, #1
 80020c6:	211a      	movs	r1, #26
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff ff27 	bl	8001f1c <_icm_write_bytes>

        tmp = dev->gyro_dps << 3;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	7bdb      	ldrb	r3, [r3, #15]
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 80020d8:	f107 020f 	add.w	r2, r7, #15
 80020dc:	2301      	movs	r3, #1
 80020de:	211b      	movs	r1, #27
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7ff ff1b 	bl	8001f1c <_icm_write_bytes>
     }


    tmp = 0x00;
 80020e6:	2300      	movs	r3, #0
 80020e8:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_2, &tmp, 1);
 80020ea:	f107 020f 	add.w	r2, r7, #15
 80020ee:	2301      	movs	r3, #1
 80020f0:	216c      	movs	r1, #108	; 0x6c
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7ff ff12 	bl	8001f1c <_icm_write_bytes>


    return 1;
 80020f8:	2301      	movs	r3, #1
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <icm20601_read_accel_raw>:

// Read out raw acceleration data
void icm20601_read_accel_raw(struct icm20601_dev * dev, int16_t *accel){
 8002102:	b580      	push	{r7, lr}
 8002104:	b084      	sub	sp, #16
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	6039      	str	r1, [r7, #0]
	uint8_t accel_8bit [6] = { 0 };
 800210c:	f107 0308 	add.w	r3, r7, #8
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	809a      	strh	r2, [r3, #4]
	_icm_read_bytes(dev, REG_ACCEL_XOUT_H, accel_8bit, 6);
 8002116:	f107 0208 	add.w	r2, r7, #8
 800211a:	2306      	movs	r3, #6
 800211c:	213b      	movs	r1, #59	; 0x3b
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff fec8 	bl	8001eb4 <_icm_read_bytes>

	UINT8_TO_INT16(accel[0], accel_8bit[0], accel_8bit[1]);
 8002124:	7a3b      	ldrb	r3, [r7, #8]
 8002126:	b21a      	sxth	r2, r3
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	801a      	strh	r2, [r3, #0]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002132:	021b      	lsls	r3, r3, #8
 8002134:	b21a      	sxth	r2, r3
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	801a      	strh	r2, [r3, #0]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002140:	7a7b      	ldrb	r3, [r7, #9]
 8002142:	b21b      	sxth	r3, r3
 8002144:	4313      	orrs	r3, r2
 8002146:	b21a      	sxth	r2, r3
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(accel[1], accel_8bit[2], accel_8bit[3]);
 800214c:	7aba      	ldrb	r2, [r7, #10]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	3302      	adds	r3, #2
 8002152:	b212      	sxth	r2, r2
 8002154:	801a      	strh	r2, [r3, #0]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	3302      	adds	r3, #2
 800215a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800215e:	021a      	lsls	r2, r3, #8
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	3302      	adds	r3, #2
 8002164:	b212      	sxth	r2, r2
 8002166:	801a      	strh	r2, [r3, #0]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	3302      	adds	r3, #2
 800216c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002170:	7afb      	ldrb	r3, [r7, #11]
 8002172:	b21a      	sxth	r2, r3
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	3302      	adds	r3, #2
 8002178:	430a      	orrs	r2, r1
 800217a:	b212      	sxth	r2, r2
 800217c:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(accel[2], accel_8bit[4], accel_8bit[5]);
 800217e:	7b3a      	ldrb	r2, [r7, #12]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	3304      	adds	r3, #4
 8002184:	b212      	sxth	r2, r2
 8002186:	801a      	strh	r2, [r3, #0]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	3304      	adds	r3, #4
 800218c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002190:	021a      	lsls	r2, r3, #8
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	3304      	adds	r3, #4
 8002196:	b212      	sxth	r2, r2
 8002198:	801a      	strh	r2, [r3, #0]
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	3304      	adds	r3, #4
 800219e:	f9b3 1000 	ldrsh.w	r1, [r3]
 80021a2:	7b7b      	ldrb	r3, [r7, #13]
 80021a4:	b21a      	sxth	r2, r3
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	3304      	adds	r3, #4
 80021aa:	430a      	orrs	r2, r1
 80021ac:	b212      	sxth	r2, r2
 80021ae:	801a      	strh	r2, [r3, #0]
}
 80021b0:	bf00      	nop
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <icm20601_read_gyro_raw>:
    accel[1]  = ((float) accel_raw[1]) / accel_sensitivity;
    accel[2]  = ((float) accel_raw[2]) / accel_sensitivity;
}

// Read out raw gyro data
void icm20601_read_gyro_raw(struct icm20601_dev * dev, int16_t *gyro){
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
	uint8_t gyro_8bit [6] = { 0 };
 80021c2:	f107 0308 	add.w	r3, r7, #8
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	809a      	strh	r2, [r3, #4]
	_icm_read_bytes(dev, REG_GYRO_XOUT_H, gyro_8bit, 6);
 80021cc:	f107 0208 	add.w	r2, r7, #8
 80021d0:	2306      	movs	r3, #6
 80021d2:	2143      	movs	r1, #67	; 0x43
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7ff fe6d 	bl	8001eb4 <_icm_read_bytes>

	UINT8_TO_INT16(gyro[0], gyro_8bit[0], gyro_8bit[1]);
 80021da:	7a3b      	ldrb	r3, [r7, #8]
 80021dc:	b21a      	sxth	r2, r3
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	801a      	strh	r2, [r3, #0]
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021e8:	021b      	lsls	r3, r3, #8
 80021ea:	b21a      	sxth	r2, r3
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	801a      	strh	r2, [r3, #0]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80021f6:	7a7b      	ldrb	r3, [r7, #9]
 80021f8:	b21b      	sxth	r3, r3
 80021fa:	4313      	orrs	r3, r2
 80021fc:	b21a      	sxth	r2, r3
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(gyro[1], gyro_8bit[2], gyro_8bit[3]);
 8002202:	7aba      	ldrb	r2, [r7, #10]
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	3302      	adds	r3, #2
 8002208:	b212      	sxth	r2, r2
 800220a:	801a      	strh	r2, [r3, #0]
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	3302      	adds	r3, #2
 8002210:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002214:	021a      	lsls	r2, r3, #8
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	3302      	adds	r3, #2
 800221a:	b212      	sxth	r2, r2
 800221c:	801a      	strh	r2, [r3, #0]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	3302      	adds	r3, #2
 8002222:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002226:	7afb      	ldrb	r3, [r7, #11]
 8002228:	b21a      	sxth	r2, r3
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	3302      	adds	r3, #2
 800222e:	430a      	orrs	r2, r1
 8002230:	b212      	sxth	r2, r2
 8002232:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(gyro[2], gyro_8bit[4], gyro_8bit[5]);
 8002234:	7b3a      	ldrb	r2, [r7, #12]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	3304      	adds	r3, #4
 800223a:	b212      	sxth	r2, r2
 800223c:	801a      	strh	r2, [r3, #0]
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	3304      	adds	r3, #4
 8002242:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002246:	021a      	lsls	r2, r3, #8
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	3304      	adds	r3, #4
 800224c:	b212      	sxth	r2, r2
 800224e:	801a      	strh	r2, [r3, #0]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	3304      	adds	r3, #4
 8002254:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002258:	7b7b      	ldrb	r3, [r7, #13]
 800225a:	b21a      	sxth	r2, r3
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	3304      	adds	r3, #4
 8002260:	430a      	orrs	r2, r1
 8002262:	b212      	sxth	r2, r2
 8002264:	801a      	strh	r2, [r3, #0]
}
 8002266:	bf00      	nop
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <icm20601_read_temp_raw>:
    gyro[1]  = ((float) gyro_raw[1]) / gyro_sensitivity;
    gyro[2]  = ((float) gyro_raw[2]) / gyro_sensitivity;
}

// Read out raw temperature data
void icm20601_read_temp_raw(struct icm20601_dev * dev, int16_t *temp){
 800226e:	b580      	push	{r7, lr}
 8002270:	b084      	sub	sp, #16
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
 8002276:	6039      	str	r1, [r7, #0]
	uint8_t temp_8bit [2] = { 0 };
 8002278:	2300      	movs	r3, #0
 800227a:	81bb      	strh	r3, [r7, #12]
	_icm_read_bytes(dev, REG_TEMP_OUT_H, temp_8bit, 2);
 800227c:	f107 020c 	add.w	r2, r7, #12
 8002280:	2302      	movs	r3, #2
 8002282:	2141      	movs	r1, #65	; 0x41
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff fe15 	bl	8001eb4 <_icm_read_bytes>

	UINT8_TO_INT16(*temp, temp_8bit[0], temp_8bit[1]);
 800228a:	7b3b      	ldrb	r3, [r7, #12]
 800228c:	b21a      	sxth	r2, r3
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	801a      	strh	r2, [r3, #0]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002298:	021b      	lsls	r3, r3, #8
 800229a:	b21a      	sxth	r2, r3
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	801a      	strh	r2, [r3, #0]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80022a6:	7b7b      	ldrb	r3, [r7, #13]
 80022a8:	b21b      	sxth	r3, r3
 80022aa:	4313      	orrs	r3, r2
 80022ac:	b21a      	sxth	r2, r3
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	801a      	strh	r2, [r3, #0]
}
 80022b2:	bf00      	nop
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	0000      	movs	r0, r0
 80022bc:	0000      	movs	r0, r0
	...

080022c0 <icm20601_read_data>:

	*temp = ((float)temperature_raw) / temperature_sensitivity + 25.0; // TEMP_degC = ((TEMP_OUT – RoomTemp_Offset)/Temp_Sensitivity) + 25degC
}

void icm20601_read_data(struct icm20601_dev * dev, float * buf)
{
 80022c0:	b590      	push	{r4, r7, lr}
 80022c2:	b089      	sub	sp, #36	; 0x24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
	int16_t temperature_raw;
	icm20601_read_temp_raw(dev, &temperature_raw);
 80022ca:	f107 0316 	add.w	r3, r7, #22
 80022ce:	4619      	mov	r1, r3
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7ff ffcc 	bl	800226e <icm20601_read_temp_raw>
	buf[0] = ((float)temperature_raw) / temperature_sensitivity + 25.0;
 80022d6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80022da:	ee07 3a90 	vmov	s15, r3
 80022de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80022e2:	4b61      	ldr	r3, [pc, #388]	; (8002468 <icm20601_read_data+0x1a8>)
 80022e4:	ed93 7a00 	vldr	s14, [r3]
 80022e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022ec:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80022f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	edc3 7a00 	vstr	s15, [r3]
	float accel_sensitivity;
	int16_t accel_raw[3] = { 0 };
 80022fa:	f107 0310 	add.w	r3, r7, #16
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	809a      	strh	r2, [r3, #4]

	accel_sensitivity = _get_accel_sensitivity(dev->accel_g);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	7b5b      	ldrb	r3, [r3, #13]
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff fd6f 	bl	8001dec <_get_accel_sensitivity>
 800230e:	ed87 0a07 	vstr	s0, [r7, #28]

  	icm20601_read_accel_raw(dev, accel_raw);
 8002312:	f107 0310 	add.w	r3, r7, #16
 8002316:	4619      	mov	r1, r3
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7ff fef2 	bl	8002102 <icm20601_read_accel_raw>

    buf[1] = ((float) accel_raw[0]) / accel_sensitivity * 9.81;
 800231e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002322:	ee07 3a90 	vmov	s15, r3
 8002326:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800232a:	edd7 7a07 	vldr	s15, [r7, #28]
 800232e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002332:	ee16 0a90 	vmov	r0, s13
 8002336:	f7fe f907 	bl	8000548 <__aeabi_f2d>
 800233a:	a349      	add	r3, pc, #292	; (adr r3, 8002460 <icm20601_read_data+0x1a0>)
 800233c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002340:	f7fe f95a 	bl	80005f8 <__aeabi_dmul>
 8002344:	4603      	mov	r3, r0
 8002346:	460c      	mov	r4, r1
 8002348:	4619      	mov	r1, r3
 800234a:	4622      	mov	r2, r4
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	1d1c      	adds	r4, r3, #4
 8002350:	4608      	mov	r0, r1
 8002352:	4611      	mov	r1, r2
 8002354:	f7fe fc28 	bl	8000ba8 <__aeabi_d2f>
 8002358:	4603      	mov	r3, r0
 800235a:	6023      	str	r3, [r4, #0]
    buf[2]  = ((float) accel_raw[1]) / accel_sensitivity * 9.81;
 800235c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002360:	ee07 3a90 	vmov	s15, r3
 8002364:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002368:	edd7 7a07 	vldr	s15, [r7, #28]
 800236c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002370:	ee16 0a90 	vmov	r0, s13
 8002374:	f7fe f8e8 	bl	8000548 <__aeabi_f2d>
 8002378:	a339      	add	r3, pc, #228	; (adr r3, 8002460 <icm20601_read_data+0x1a0>)
 800237a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800237e:	f7fe f93b 	bl	80005f8 <__aeabi_dmul>
 8002382:	4603      	mov	r3, r0
 8002384:	460c      	mov	r4, r1
 8002386:	4619      	mov	r1, r3
 8002388:	4622      	mov	r2, r4
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	f103 0408 	add.w	r4, r3, #8
 8002390:	4608      	mov	r0, r1
 8002392:	4611      	mov	r1, r2
 8002394:	f7fe fc08 	bl	8000ba8 <__aeabi_d2f>
 8002398:	4603      	mov	r3, r0
 800239a:	6023      	str	r3, [r4, #0]
    buf[3]  = ((float) accel_raw[2]) / accel_sensitivity * 9.81 ;
 800239c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80023a0:	ee07 3a90 	vmov	s15, r3
 80023a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80023ac:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80023b0:	ee16 0a90 	vmov	r0, s13
 80023b4:	f7fe f8c8 	bl	8000548 <__aeabi_f2d>
 80023b8:	a329      	add	r3, pc, #164	; (adr r3, 8002460 <icm20601_read_data+0x1a0>)
 80023ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023be:	f7fe f91b 	bl	80005f8 <__aeabi_dmul>
 80023c2:	4603      	mov	r3, r0
 80023c4:	460c      	mov	r4, r1
 80023c6:	4619      	mov	r1, r3
 80023c8:	4622      	mov	r2, r4
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	f103 040c 	add.w	r4, r3, #12
 80023d0:	4608      	mov	r0, r1
 80023d2:	4611      	mov	r1, r2
 80023d4:	f7fe fbe8 	bl	8000ba8 <__aeabi_d2f>
 80023d8:	4603      	mov	r3, r0
 80023da:	6023      	str	r3, [r4, #0]

	float gyro_sensitivity;
	int16_t gyro_raw[3] = { 0 };
 80023dc:	f107 0308 	add.w	r3, r7, #8
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	809a      	strh	r2, [r3, #4]

	gyro_sensitivity = _get_gyro_sensitivity(dev->accel_g);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	7b5b      	ldrb	r3, [r3, #13]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff fd2e 	bl	8001e4c <_get_gyro_sensitivity>
 80023f0:	ed87 0a06 	vstr	s0, [r7, #24]

  	icm20601_read_gyro_raw(dev, gyro_raw);
 80023f4:	f107 0308 	add.w	r3, r7, #8
 80023f8:	4619      	mov	r1, r3
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7ff fedc 	bl	80021b8 <icm20601_read_gyro_raw>

    buf[4] = ((float) gyro_raw[0]) / gyro_sensitivity;
 8002400:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002404:	ee07 3a90 	vmov	s15, r3
 8002408:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	3310      	adds	r3, #16
 8002410:	ed97 7a06 	vldr	s14, [r7, #24]
 8002414:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002418:	edc3 7a00 	vstr	s15, [r3]
    buf[5]  = ((float) gyro_raw[1]) / gyro_sensitivity;
 800241c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002420:	ee07 3a90 	vmov	s15, r3
 8002424:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	3314      	adds	r3, #20
 800242c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002430:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002434:	edc3 7a00 	vstr	s15, [r3]
    buf[6]  = ((float) gyro_raw[2]) / gyro_sensitivity;
 8002438:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800243c:	ee07 3a90 	vmov	s15, r3
 8002440:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	3318      	adds	r3, #24
 8002448:	ed97 7a06 	vldr	s14, [r7, #24]
 800244c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002450:	edc3 7a00 	vstr	s15, [r3]
}
 8002454:	bf00      	nop
 8002456:	3724      	adds	r7, #36	; 0x24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd90      	pop	{r4, r7, pc}
 800245c:	f3af 8000 	nop.w
 8002460:	51eb851f 	.word	0x51eb851f
 8002464:	40239eb8 	.word	0x40239eb8
 8002468:	200000c4 	.word	0x200000c4

0800246c <LED_is_busy>:
 *      Author: linus
 */

#include "devices/LED.h"

uint8_t LED_is_busy(struct LED_dev * dev){
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
	uint32_t tick;
	tick = HAL_GetTick();
 8002474:	f000 fdaa 	bl	8002fcc <HAL_GetTick>
 8002478:	60f8      	str	r0, [r7, #12]
	if (tick > dev->last_call + dev->interval){
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689a      	ldr	r2, [r3, #8]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	4413      	add	r3, r2
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	429a      	cmp	r2, r3
 8002488:	d904      	bls.n	8002494 <LED_is_busy+0x28>
		dev->last_call = tick;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	609a      	str	r2, [r3, #8]
		return 1;
 8002490:	2301      	movs	r3, #1
 8002492:	e000      	b.n	8002496 <LED_is_busy+0x2a>
	}
	return 0;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <toggle>:

void toggle(struct LED_dev * ctrl){
 800249e:	b580      	push	{r7, lr}
 80024a0:	b082      	sub	sp, #8
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(ctrl->LED_port, ctrl->LED_pin);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	889b      	ldrh	r3, [r3, #4]
 80024ae:	4619      	mov	r1, r3
 80024b0:	4610      	mov	r0, r2
 80024b2:	f001 fab4 	bl	8003a1e <HAL_GPIO_TogglePin>
}
 80024b6:	bf00      	nop
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <turn_on>:

void turn_on(struct LED_dev * ctrl){
 80024be:	b580      	push	{r7, lr}
 80024c0:	b082      	sub	sp, #8
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ctrl->LED_port, ctrl->LED_pin, GPIO_PIN_SET);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6818      	ldr	r0, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	889b      	ldrh	r3, [r3, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	4619      	mov	r1, r3
 80024d2:	f001 fa8b 	bl	80039ec <HAL_GPIO_WritePin>
}
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <turn_off>:

void turn_off(struct LED_dev * ctrl){
 80024de:	b580      	push	{r7, lr}
 80024e0:	b082      	sub	sp, #8
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ctrl->LED_port, ctrl->LED_pin, GPIO_PIN_RESET);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6818      	ldr	r0, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	889b      	ldrh	r3, [r3, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	4619      	mov	r1, r3
 80024f2:	f001 fa7b 	bl	80039ec <HAL_GPIO_WritePin>
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <ms5607_is_busy>:

#include <devices/MS5607.h>



uint8_t ms5607_is_busy(struct ms5607_dev * dev, uint32_t interval, uint8_t stage){
 80024fe:	b580      	push	{r7, lr}
 8002500:	b086      	sub	sp, #24
 8002502:	af00      	add	r7, sp, #0
 8002504:	60f8      	str	r0, [r7, #12]
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	4613      	mov	r3, r2
 800250a:	71fb      	strb	r3, [r7, #7]
	uint32_t tick;
	tick = HAL_GetTick();
 800250c:	f000 fd5e 	bl	8002fcc <HAL_GetTick>
 8002510:	6178      	str	r0, [r7, #20]
	if (tick >= dev->last_call + interval){
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6a1a      	ldr	r2, [r3, #32]
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	4413      	add	r3, r2
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	429a      	cmp	r2, r3
 800251e:	d317      	bcc.n	8002550 <ms5607_is_busy+0x52>
		if (dev->last_stage + 1 == stage){
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002526:	1c5a      	adds	r2, r3, #1
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	429a      	cmp	r2, r3
 800252c:	d110      	bne.n	8002550 <ms5607_is_busy+0x52>
			dev->last_call = tick;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	621a      	str	r2, [r3, #32]
			if (stage == MS_DATA_READOUT){
 8002534:	79fb      	ldrb	r3, [r7, #7]
 8002536:	2b03      	cmp	r3, #3
 8002538:	d104      	bne.n	8002544 <ms5607_is_busy+0x46>
				dev->last_stage = MS_IDLE;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002542:	e003      	b.n	800254c <ms5607_is_busy+0x4e>
			} else {
				dev->last_stage = stage;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	79fa      	ldrb	r2, [r7, #7]
 8002548:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			}
			return 1;
 800254c:	2301      	movs	r3, #1
 800254e:	e000      	b.n	8002552 <ms5607_is_busy+0x54>
		}
	}
	return 0;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <ms5607_init>:

uint8_t ms5607_init(struct ms5607_dev * dev)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b088      	sub	sp, #32
 8002560:	af02      	add	r7, sp, #8
 8002562:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_GetState(dev->i2c_bus) != HAL_I2C_STATE_READY)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	4618      	mov	r0, r3
 800256a:	f001 fffd 	bl	8004568 <HAL_I2C_GetState>
 800256e:	4603      	mov	r3, r0
 8002570:	2b20      	cmp	r3, #32
 8002572:	d003      	beq.n	800257c <ms5607_init+0x20>
	{
		printf("i2c1 not ready!\n");
 8002574:	4842      	ldr	r0, [pc, #264]	; (8002680 <ms5607_init+0x124>)
 8002576:	f005 fba3 	bl	8007cc0 <puts>
 800257a:	e002      	b.n	8002582 <ms5607_init+0x26>
	} else {
		printf("i2c1 is ready!\n");
 800257c:	4841      	ldr	r0, [pc, #260]	; (8002684 <ms5607_init+0x128>)
 800257e:	f005 fb9f 	bl	8007cc0 <puts>
	}
	HAL_StatusTypeDef _ret;
	_ret = HAL_I2C_IsDeviceReady(dev->i2c_bus, dev->addr, 10, dev->addr);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6858      	ldr	r0, [r3, #4]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	b299      	uxth	r1, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	220a      	movs	r2, #10
 8002592:	f001 febb 	bl	800430c <HAL_I2C_IsDeviceReady>
 8002596:	4603      	mov	r3, r0
 8002598:	74fb      	strb	r3, [r7, #19]
	if ( _ret != HAL_OK )
 800259a:	7cfb      	ldrb	r3, [r7, #19]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d009      	beq.n	80025b4 <ms5607_init+0x58>
	{
		printf("BARO setup fail\n");
 80025a0:	4839      	ldr	r0, [pc, #228]	; (8002688 <ms5607_init+0x12c>)
 80025a2:	f005 fb8d 	bl	8007cc0 <puts>
		printf("Errorcode: %d\n", _ret);
 80025a6:	7cfb      	ldrb	r3, [r7, #19]
 80025a8:	4619      	mov	r1, r3
 80025aa:	4838      	ldr	r0, [pc, #224]	; (800268c <ms5607_init+0x130>)
 80025ac:	f005 fb14 	bl	8007bd8 <iprintf>
		return 0;
 80025b0:	2300      	movs	r3, #0
 80025b2:	e061      	b.n	8002678 <ms5607_init+0x11c>

	//get factory calibration data
	//reset (advised in datasheet)

	uint8_t reset_code[1];
	reset_code[0] = 0x1E;
 80025b4:	231e      	movs	r3, #30
 80025b6:	743b      	strb	r3, [r7, #16]
	_ret = HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, reset_code, 1, dev->delay);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6858      	ldr	r0, [r3, #4]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	b299      	uxth	r1, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	7a1b      	ldrb	r3, [r3, #8]
 80025c6:	f107 0210 	add.w	r2, r7, #16
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	2301      	movs	r3, #1
 80025ce:	f001 fb79 	bl	8003cc4 <HAL_I2C_Master_Transmit>
 80025d2:	4603      	mov	r3, r0
 80025d4:	74fb      	strb	r3, [r7, #19]

	HAL_Delay(100);
 80025d6:	2064      	movs	r0, #100	; 0x64
 80025d8:	f000 fd04 	bl	8002fe4 <HAL_Delay>

	//get each calibration value (c1 - c6 in datasheet)
	uint8_t get_add[1];
	uint8_t buf[2];

	for(int i = 1; i < 7; i++){
 80025dc:	2301      	movs	r3, #1
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	e043      	b.n	800266a <ms5607_init+0x10e>

		//standard commands (see datasheet)
		get_add[0] = 0b10100000;
 80025e2:	23a0      	movs	r3, #160	; 0xa0
 80025e4:	733b      	strb	r3, [r7, #12]
		get_add[0] = get_add[0] + 2*i;
 80025e6:	7b3a      	ldrb	r2, [r7, #12]
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	4413      	add	r3, r2
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	733b      	strb	r3, [r7, #12]

		_ret = HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, get_add, 1, dev->delay);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6858      	ldr	r0, [r3, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	b299      	uxth	r1, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	7a1b      	ldrb	r3, [r3, #8]
 8002604:	f107 020c 	add.w	r2, r7, #12
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	2301      	movs	r3, #1
 800260c:	f001 fb5a 	bl	8003cc4 <HAL_I2C_Master_Transmit>
 8002610:	4603      	mov	r3, r0
 8002612:	74fb      	strb	r3, [r7, #19]
		HAL_Delay(15);
 8002614:	200f      	movs	r0, #15
 8002616:	f000 fce5 	bl	8002fe4 <HAL_Delay>
		_ret = HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6858      	ldr	r0, [r3, #4]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	b299      	uxth	r1, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	7a1b      	ldrb	r3, [r3, #8]
 8002628:	f107 0208 	add.w	r2, r7, #8
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	2301      	movs	r3, #1
 8002630:	f001 fc46 	bl	8003ec0 <HAL_I2C_Master_Receive>
 8002634:	4603      	mov	r3, r0
 8002636:	74fb      	strb	r3, [r7, #19]
		dev->cal[i-1] = (uint16_t)(buf[0] << 8) | buf[1];
 8002638:	7a3b      	ldrb	r3, [r7, #8]
 800263a:	b29b      	uxth	r3, r3
 800263c:	021b      	lsls	r3, r3, #8
 800263e:	b299      	uxth	r1, r3
 8002640:	7a7b      	ldrb	r3, [r7, #9]
 8002642:	b29a      	uxth	r2, r3
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	3b01      	subs	r3, #1
 8002648:	430a      	orrs	r2, r1
 800264a:	b291      	uxth	r1, r2
 800264c:	687a      	ldr	r2, [r7, #4]
 800264e:	3304      	adds	r3, #4
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	4413      	add	r3, r2
 8002654:	460a      	mov	r2, r1
 8002656:	805a      	strh	r2, [r3, #2]

		if ( _ret != HAL_OK )
 8002658:	7cfb      	ldrb	r3, [r7, #19]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d002      	beq.n	8002664 <ms5607_init+0x108>
			{
				printf("MS5607 cal read fail\n");
 800265e:	480c      	ldr	r0, [pc, #48]	; (8002690 <ms5607_init+0x134>)
 8002660:	f005 fb2e 	bl	8007cc0 <puts>
	for(int i = 1; i < 7; i++){
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	3301      	adds	r3, #1
 8002668:	617b      	str	r3, [r7, #20]
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	2b06      	cmp	r3, #6
 800266e:	ddb8      	ble.n	80025e2 <ms5607_init+0x86>
			}
	}


	printf("BARO setup success\n");
 8002670:	4808      	ldr	r0, [pc, #32]	; (8002694 <ms5607_init+0x138>)
 8002672:	f005 fb25 	bl	8007cc0 <puts>
	return 1;
 8002676:	2301      	movs	r3, #1
}
 8002678:	4618      	mov	r0, r3
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	08009ba4 	.word	0x08009ba4
 8002684:	08009bb4 	.word	0x08009bb4
 8002688:	08009bc4 	.word	0x08009bc4
 800268c:	08009bd4 	.word	0x08009bd4
 8002690:	08009be4 	.word	0x08009be4
 8002694:	08009bfc 	.word	0x08009bfc

08002698 <ms5607_prep_temp>:

void ms5607_prep_temp(struct ms5607_dev * dev)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af02      	add	r7, sp, #8
 800269e:	6078      	str	r0, [r7, #4]
	uint8_t buf[3];
	buf[0] = 0x44;
 80026a0:	2344      	movs	r3, #68	; 0x44
 80026a2:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6858      	ldr	r0, [r3, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	b299      	uxth	r1, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	7a1b      	ldrb	r3, [r3, #8]
 80026b2:	f107 020c 	add.w	r2, r7, #12
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	2301      	movs	r3, #1
 80026ba:	f001 fb03 	bl	8003cc4 <HAL_I2C_Master_Transmit>
	// need to wait 3 ms
}
 80026be:	bf00      	nop
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <ms5607_prep_pressure>:

void ms5607_prep_pressure(struct ms5607_dev * dev, uint8_t * dat)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b086      	sub	sp, #24
 80026ca:	af02      	add	r7, sp, #8
 80026cc:	6078      	str	r0, [r7, #4]
 80026ce:	6039      	str	r1, [r7, #0]
	uint8_t buf[3];
	buf[0] = 0x00;
 80026d0:	2300      	movs	r3, #0
 80026d2:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6858      	ldr	r0, [r3, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	b299      	uxth	r1, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	7a1b      	ldrb	r3, [r3, #8]
 80026e2:	f107 020c 	add.w	r2, r7, #12
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	2301      	movs	r3, #1
 80026ea:	f001 faeb 	bl	8003cc4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 3, dev->delay);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6858      	ldr	r0, [r3, #4]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	b299      	uxth	r1, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	7a1b      	ldrb	r3, [r3, #8]
 80026fc:	f107 020c 	add.w	r2, r7, #12
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	2303      	movs	r3, #3
 8002704:	f001 fbdc 	bl	8003ec0 <HAL_I2C_Master_Receive>

	dev->D1 = (uint32_t)(buf[0] << 16) | (uint32_t)(buf[1] << 8) | (uint32_t)buf[2];
 8002708:	7b3b      	ldrb	r3, [r7, #12]
 800270a:	041b      	lsls	r3, r3, #16
 800270c:	461a      	mov	r2, r3
 800270e:	7b7b      	ldrb	r3, [r7, #13]
 8002710:	021b      	lsls	r3, r3, #8
 8002712:	4313      	orrs	r3, r2
 8002714:	7bba      	ldrb	r2, [r7, #14]
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	619a      	str	r2, [r3, #24]
	dat[0] = buf[0];
 800271c:	7b3a      	ldrb	r2, [r7, #12]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	701a      	strb	r2, [r3, #0]
	dat[1] = buf[1];
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	3301      	adds	r3, #1
 8002726:	7b7a      	ldrb	r2, [r7, #13]
 8002728:	701a      	strb	r2, [r3, #0]
	dat[2] = buf[2];
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	3302      	adds	r3, #2
 800272e:	7bba      	ldrb	r2, [r7, #14]
 8002730:	701a      	strb	r2, [r3, #0]

	buf[0] = 0x54;
 8002732:	2354      	movs	r3, #84	; 0x54
 8002734:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6858      	ldr	r0, [r3, #4]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	b299      	uxth	r1, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	7a1b      	ldrb	r3, [r3, #8]
 8002744:	f107 020c 	add.w	r2, r7, #12
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	2301      	movs	r3, #1
 800274c:	f001 faba 	bl	8003cc4 <HAL_I2C_Master_Transmit>
	// need to wait 3 ms
}
 8002750:	bf00      	nop
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <ms5607_read_pressure>:

void ms5607_read_pressure(struct ms5607_dev * dev, uint8_t * dat)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af02      	add	r7, sp, #8
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
	uint8_t buf[3];
	buf[0] = 0x00;
 8002762:	2300      	movs	r3, #0
 8002764:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6858      	ldr	r0, [r3, #4]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	b299      	uxth	r1, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	7a1b      	ldrb	r3, [r3, #8]
 8002774:	f107 020c 	add.w	r2, r7, #12
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	2301      	movs	r3, #1
 800277c:	f001 faa2 	bl	8003cc4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 3, dev->delay);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6858      	ldr	r0, [r3, #4]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	b299      	uxth	r1, r3
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	7a1b      	ldrb	r3, [r3, #8]
 800278e:	f107 020c 	add.w	r2, r7, #12
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	2303      	movs	r3, #3
 8002796:	f001 fb93 	bl	8003ec0 <HAL_I2C_Master_Receive>

	dev->D2 = (uint32_t)(buf[0] << 16) | (uint32_t)(buf[1] << 8) | (uint32_t)buf[2];
 800279a:	7b3b      	ldrb	r3, [r7, #12]
 800279c:	041b      	lsls	r3, r3, #16
 800279e:	461a      	mov	r2, r3
 80027a0:	7b7b      	ldrb	r3, [r7, #13]
 80027a2:	021b      	lsls	r3, r3, #8
 80027a4:	4313      	orrs	r3, r2
 80027a6:	7bba      	ldrb	r2, [r7, #14]
 80027a8:	431a      	orrs	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	61da      	str	r2, [r3, #28]
	dat[3] = buf[0];
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	3303      	adds	r3, #3
 80027b2:	7b3a      	ldrb	r2, [r7, #12]
 80027b4:	701a      	strb	r2, [r3, #0]
	dat[4] = buf[1];
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	3304      	adds	r3, #4
 80027ba:	7b7a      	ldrb	r2, [r7, #13]
 80027bc:	701a      	strb	r2, [r3, #0]
	dat[5] = buf[2];
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	3305      	adds	r3, #5
 80027c2:	7bba      	ldrb	r2, [r7, #14]
 80027c4:	701a      	strb	r2, [r3, #0]
}
 80027c6:	bf00      	nop
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
	...

080027d0 <ms5607_convert>:

void ms5607_convert(struct ms5607_dev * dev, float * p, float * t)
{
 80027d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80027d4:	b092      	sub	sp, #72	; 0x48
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	60f8      	str	r0, [r7, #12]
 80027da:	60b9      	str	r1, [r7, #8]
 80027dc:	607a      	str	r2, [r7, #4]
	//calculate calibration values
	uint16_t c1 = dev->cal[0];
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	895b      	ldrh	r3, [r3, #10]
 80027e2:	877b      	strh	r3, [r7, #58]	; 0x3a
	uint16_t c2 = dev->cal[1];
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	899b      	ldrh	r3, [r3, #12]
 80027e8:	873b      	strh	r3, [r7, #56]	; 0x38
	uint16_t c3 = dev->cal[2];
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	89db      	ldrh	r3, [r3, #14]
 80027ee:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint16_t c4 = dev->cal[3];
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8a1b      	ldrh	r3, [r3, #16]
 80027f4:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint16_t c5 = dev->cal[4];
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8a5b      	ldrh	r3, [r3, #18]
 80027fa:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t c6 = dev->cal[5];
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	8a9b      	ldrh	r3, [r3, #20]
 8002800:	863b      	strh	r3, [r7, #48]	; 0x30

	uint32_t D1 = dev->D1;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t D2 = dev->D2;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	62bb      	str	r3, [r7, #40]	; 0x28

	//calculations from datasheet
	float dt = (float)D2 - c5 * 256.0;
 800280e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002810:	ee07 3a90 	vmov	s15, r3
 8002814:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002818:	ee17 0a90 	vmov	r0, s15
 800281c:	f7fd fe94 	bl	8000548 <__aeabi_f2d>
 8002820:	4604      	mov	r4, r0
 8002822:	460d      	mov	r5, r1
 8002824:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002826:	4618      	mov	r0, r3
 8002828:	f7fd fe7c 	bl	8000524 <__aeabi_i2d>
 800282c:	f04f 0200 	mov.w	r2, #0
 8002830:	4bd9      	ldr	r3, [pc, #868]	; (8002b98 <ms5607_convert+0x3c8>)
 8002832:	f7fd fee1 	bl	80005f8 <__aeabi_dmul>
 8002836:	4602      	mov	r2, r0
 8002838:	460b      	mov	r3, r1
 800283a:	4620      	mov	r0, r4
 800283c:	4629      	mov	r1, r5
 800283e:	f7fd fd23 	bl	8000288 <__aeabi_dsub>
 8002842:	4603      	mov	r3, r0
 8002844:	460c      	mov	r4, r1
 8002846:	4618      	mov	r0, r3
 8002848:	4621      	mov	r1, r4
 800284a:	f7fe f9ad 	bl	8000ba8 <__aeabi_d2f>
 800284e:	4603      	mov	r3, r0
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
	float OFF = c2 * pow(2.0, 17) + (c4 * dt)/64.0;
 8002852:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002854:	4618      	mov	r0, r3
 8002856:	f7fd fe65 	bl	8000524 <__aeabi_i2d>
 800285a:	f04f 0200 	mov.w	r2, #0
 800285e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8002862:	f7fd fec9 	bl	80005f8 <__aeabi_dmul>
 8002866:	4603      	mov	r3, r0
 8002868:	460c      	mov	r4, r1
 800286a:	4625      	mov	r5, r4
 800286c:	461c      	mov	r4, r3
 800286e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002870:	ee07 3a90 	vmov	s15, r3
 8002874:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002878:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800287c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002880:	ee17 0a90 	vmov	r0, s15
 8002884:	f7fd fe60 	bl	8000548 <__aeabi_f2d>
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	4bc3      	ldr	r3, [pc, #780]	; (8002b9c <ms5607_convert+0x3cc>)
 800288e:	f7fd ffdd 	bl	800084c <__aeabi_ddiv>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4620      	mov	r0, r4
 8002898:	4629      	mov	r1, r5
 800289a:	f7fd fcf7 	bl	800028c <__adddf3>
 800289e:	4603      	mov	r3, r0
 80028a0:	460c      	mov	r4, r1
 80028a2:	4618      	mov	r0, r3
 80028a4:	4621      	mov	r1, r4
 80028a6:	f7fe f97f 	bl	8000ba8 <__aeabi_d2f>
 80028aa:	4603      	mov	r3, r0
 80028ac:	623b      	str	r3, [r7, #32]
	float SENS = c1 * pow(2.0, 16) + (c3 * dt)/128.0;
 80028ae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7fd fe37 	bl	8000524 <__aeabi_i2d>
 80028b6:	f04f 0200 	mov.w	r2, #0
 80028ba:	4bb9      	ldr	r3, [pc, #740]	; (8002ba0 <ms5607_convert+0x3d0>)
 80028bc:	f7fd fe9c 	bl	80005f8 <__aeabi_dmul>
 80028c0:	4603      	mov	r3, r0
 80028c2:	460c      	mov	r4, r1
 80028c4:	4625      	mov	r5, r4
 80028c6:	461c      	mov	r4, r3
 80028c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80028ca:	ee07 3a90 	vmov	s15, r3
 80028ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80028d2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80028d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028da:	ee17 0a90 	vmov	r0, s15
 80028de:	f7fd fe33 	bl	8000548 <__aeabi_f2d>
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	4baf      	ldr	r3, [pc, #700]	; (8002ba4 <ms5607_convert+0x3d4>)
 80028e8:	f7fd ffb0 	bl	800084c <__aeabi_ddiv>
 80028ec:	4602      	mov	r2, r0
 80028ee:	460b      	mov	r3, r1
 80028f0:	4620      	mov	r0, r4
 80028f2:	4629      	mov	r1, r5
 80028f4:	f7fd fcca 	bl	800028c <__adddf3>
 80028f8:	4603      	mov	r3, r0
 80028fa:	460c      	mov	r4, r1
 80028fc:	4618      	mov	r0, r3
 80028fe:	4621      	mov	r1, r4
 8002900:	f7fe f952 	bl	8000ba8 <__aeabi_d2f>
 8002904:	4603      	mov	r3, r0
 8002906:	61fb      	str	r3, [r7, #28]
	float TEMP = 2000.0 + dt * c6/(pow(2.0, 23));
 8002908:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800290a:	ee07 3a90 	vmov	s15, r3
 800290e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002912:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800291a:	ee17 0a90 	vmov	r0, s15
 800291e:	f7fd fe13 	bl	8000548 <__aeabi_f2d>
 8002922:	f04f 0200 	mov.w	r2, #0
 8002926:	4ba0      	ldr	r3, [pc, #640]	; (8002ba8 <ms5607_convert+0x3d8>)
 8002928:	f7fd ff90 	bl	800084c <__aeabi_ddiv>
 800292c:	4603      	mov	r3, r0
 800292e:	460c      	mov	r4, r1
 8002930:	4618      	mov	r0, r3
 8002932:	4621      	mov	r1, r4
 8002934:	f04f 0200 	mov.w	r2, #0
 8002938:	4b9c      	ldr	r3, [pc, #624]	; (8002bac <ms5607_convert+0x3dc>)
 800293a:	f7fd fca7 	bl	800028c <__adddf3>
 800293e:	4603      	mov	r3, r0
 8002940:	460c      	mov	r4, r1
 8002942:	4618      	mov	r0, r3
 8002944:	4621      	mov	r1, r4
 8002946:	f7fe f92f 	bl	8000ba8 <__aeabi_d2f>
 800294a:	4603      	mov	r3, r0
 800294c:	61bb      	str	r3, [r7, #24]
	float pressure = ((float)D1 * SENS/(pow(2.0, 21)) - OFF)/(pow(2.0, 15));
 800294e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002950:	ee07 3a90 	vmov	s15, r3
 8002954:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002958:	edd7 7a07 	vldr	s15, [r7, #28]
 800295c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002960:	ee17 0a90 	vmov	r0, s15
 8002964:	f7fd fdf0 	bl	8000548 <__aeabi_f2d>
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	4b90      	ldr	r3, [pc, #576]	; (8002bb0 <ms5607_convert+0x3e0>)
 800296e:	f7fd ff6d 	bl	800084c <__aeabi_ddiv>
 8002972:	4603      	mov	r3, r0
 8002974:	460c      	mov	r4, r1
 8002976:	4625      	mov	r5, r4
 8002978:	461c      	mov	r4, r3
 800297a:	6a38      	ldr	r0, [r7, #32]
 800297c:	f7fd fde4 	bl	8000548 <__aeabi_f2d>
 8002980:	4602      	mov	r2, r0
 8002982:	460b      	mov	r3, r1
 8002984:	4620      	mov	r0, r4
 8002986:	4629      	mov	r1, r5
 8002988:	f7fd fc7e 	bl	8000288 <__aeabi_dsub>
 800298c:	4603      	mov	r3, r0
 800298e:	460c      	mov	r4, r1
 8002990:	4618      	mov	r0, r3
 8002992:	4621      	mov	r1, r4
 8002994:	f04f 0200 	mov.w	r2, #0
 8002998:	4b86      	ldr	r3, [pc, #536]	; (8002bb4 <ms5607_convert+0x3e4>)
 800299a:	f7fd ff57 	bl	800084c <__aeabi_ddiv>
 800299e:	4603      	mov	r3, r0
 80029a0:	460c      	mov	r4, r1
 80029a2:	4618      	mov	r0, r3
 80029a4:	4621      	mov	r1, r4
 80029a6:	f7fe f8ff 	bl	8000ba8 <__aeabi_d2f>
 80029aa:	4603      	mov	r3, r0
 80029ac:	617b      	str	r3, [r7, #20]

	float T2 = 0., OFF2 = 0., SENS2 = 0.;
 80029ae:	f04f 0300 	mov.w	r3, #0
 80029b2:	647b      	str	r3, [r7, #68]	; 0x44
 80029b4:	f04f 0300 	mov.w	r3, #0
 80029b8:	643b      	str	r3, [r7, #64]	; 0x40
 80029ba:	f04f 0300 	mov.w	r3, #0
 80029be:	63fb      	str	r3, [r7, #60]	; 0x3c
	if(TEMP < 2000)
 80029c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80029c4:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8002bb8 <ms5607_convert+0x3e8>
 80029c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029d0:	f140 8104 	bpl.w	8002bdc <ms5607_convert+0x40c>
	{
	  T2 = dt * dt / pow(2.0,31);
 80029d4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80029d8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80029dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029e0:	eddf 6a76 	vldr	s13, [pc, #472]	; 8002bbc <ms5607_convert+0x3ec>
 80029e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029e8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	  OFF2 = 61.0 * (TEMP - 2000.0) * (TEMP - 2000.0)/pow(2.0,4);
 80029ec:	69b8      	ldr	r0, [r7, #24]
 80029ee:	f7fd fdab 	bl	8000548 <__aeabi_f2d>
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	4b6d      	ldr	r3, [pc, #436]	; (8002bac <ms5607_convert+0x3dc>)
 80029f8:	f7fd fc46 	bl	8000288 <__aeabi_dsub>
 80029fc:	4603      	mov	r3, r0
 80029fe:	460c      	mov	r4, r1
 8002a00:	4618      	mov	r0, r3
 8002a02:	4621      	mov	r1, r4
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	4b6d      	ldr	r3, [pc, #436]	; (8002bc0 <ms5607_convert+0x3f0>)
 8002a0a:	f7fd fdf5 	bl	80005f8 <__aeabi_dmul>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	460c      	mov	r4, r1
 8002a12:	4625      	mov	r5, r4
 8002a14:	461c      	mov	r4, r3
 8002a16:	69b8      	ldr	r0, [r7, #24]
 8002a18:	f7fd fd96 	bl	8000548 <__aeabi_f2d>
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	4b62      	ldr	r3, [pc, #392]	; (8002bac <ms5607_convert+0x3dc>)
 8002a22:	f7fd fc31 	bl	8000288 <__aeabi_dsub>
 8002a26:	4602      	mov	r2, r0
 8002a28:	460b      	mov	r3, r1
 8002a2a:	4620      	mov	r0, r4
 8002a2c:	4629      	mov	r1, r5
 8002a2e:	f7fd fde3 	bl	80005f8 <__aeabi_dmul>
 8002a32:	4603      	mov	r3, r0
 8002a34:	460c      	mov	r4, r1
 8002a36:	4618      	mov	r0, r3
 8002a38:	4621      	mov	r1, r4
 8002a3a:	f04f 0200 	mov.w	r2, #0
 8002a3e:	4b61      	ldr	r3, [pc, #388]	; (8002bc4 <ms5607_convert+0x3f4>)
 8002a40:	f7fd ff04 	bl	800084c <__aeabi_ddiv>
 8002a44:	4603      	mov	r3, r0
 8002a46:	460c      	mov	r4, r1
 8002a48:	4618      	mov	r0, r3
 8002a4a:	4621      	mov	r1, r4
 8002a4c:	f7fe f8ac 	bl	8000ba8 <__aeabi_d2f>
 8002a50:	4603      	mov	r3, r0
 8002a52:	643b      	str	r3, [r7, #64]	; 0x40
	  SENS2 = 2.0 * (TEMP - 2000.0) * (TEMP - 2000.0);
 8002a54:	69b8      	ldr	r0, [r7, #24]
 8002a56:	f7fd fd77 	bl	8000548 <__aeabi_f2d>
 8002a5a:	f04f 0200 	mov.w	r2, #0
 8002a5e:	4b53      	ldr	r3, [pc, #332]	; (8002bac <ms5607_convert+0x3dc>)
 8002a60:	f7fd fc12 	bl	8000288 <__aeabi_dsub>
 8002a64:	4603      	mov	r3, r0
 8002a66:	460c      	mov	r4, r1
 8002a68:	4618      	mov	r0, r3
 8002a6a:	4621      	mov	r1, r4
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	f7fd fc0c 	bl	800028c <__adddf3>
 8002a74:	4603      	mov	r3, r0
 8002a76:	460c      	mov	r4, r1
 8002a78:	4625      	mov	r5, r4
 8002a7a:	461c      	mov	r4, r3
 8002a7c:	69b8      	ldr	r0, [r7, #24]
 8002a7e:	f7fd fd63 	bl	8000548 <__aeabi_f2d>
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	4b49      	ldr	r3, [pc, #292]	; (8002bac <ms5607_convert+0x3dc>)
 8002a88:	f7fd fbfe 	bl	8000288 <__aeabi_dsub>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4620      	mov	r0, r4
 8002a92:	4629      	mov	r1, r5
 8002a94:	f7fd fdb0 	bl	80005f8 <__aeabi_dmul>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	460c      	mov	r4, r1
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	4621      	mov	r1, r4
 8002aa0:	f7fe f882 	bl	8000ba8 <__aeabi_d2f>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if(TEMP < -1500)
 8002aa8:	edd7 7a06 	vldr	s15, [r7, #24]
 8002aac:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8002bc8 <ms5607_convert+0x3f8>
 8002ab0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ab8:	f140 8090 	bpl.w	8002bdc <ms5607_convert+0x40c>
	  {
	    OFF2 += 15.0 * (TEMP + 1500)*(TEMP + 1500.0);
 8002abc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002abe:	f7fd fd43 	bl	8000548 <__aeabi_f2d>
 8002ac2:	4604      	mov	r4, r0
 8002ac4:	460d      	mov	r5, r1
 8002ac6:	edd7 7a06 	vldr	s15, [r7, #24]
 8002aca:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002bcc <ms5607_convert+0x3fc>
 8002ace:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ad2:	ee17 0a90 	vmov	r0, s15
 8002ad6:	f7fd fd37 	bl	8000548 <__aeabi_f2d>
 8002ada:	f04f 0200 	mov.w	r2, #0
 8002ade:	4b3c      	ldr	r3, [pc, #240]	; (8002bd0 <ms5607_convert+0x400>)
 8002ae0:	f7fd fd8a 	bl	80005f8 <__aeabi_dmul>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	4690      	mov	r8, r2
 8002aea:	4699      	mov	r9, r3
 8002aec:	69b8      	ldr	r0, [r7, #24]
 8002aee:	f7fd fd2b 	bl	8000548 <__aeabi_f2d>
 8002af2:	a327      	add	r3, pc, #156	; (adr r3, 8002b90 <ms5607_convert+0x3c0>)
 8002af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af8:	f7fd fbc8 	bl	800028c <__adddf3>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	4640      	mov	r0, r8
 8002b02:	4649      	mov	r1, r9
 8002b04:	f7fd fd78 	bl	80005f8 <__aeabi_dmul>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	4629      	mov	r1, r5
 8002b10:	f7fd fbbc 	bl	800028c <__adddf3>
 8002b14:	4603      	mov	r3, r0
 8002b16:	460c      	mov	r4, r1
 8002b18:	4618      	mov	r0, r3
 8002b1a:	4621      	mov	r1, r4
 8002b1c:	f7fe f844 	bl	8000ba8 <__aeabi_d2f>
 8002b20:	4603      	mov	r3, r0
 8002b22:	643b      	str	r3, [r7, #64]	; 0x40
	    SENS2 += 8.0 * (TEMP + 1500)*(TEMP + 1500.0);
 8002b24:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002b26:	f7fd fd0f 	bl	8000548 <__aeabi_f2d>
 8002b2a:	4604      	mov	r4, r0
 8002b2c:	460d      	mov	r5, r1
 8002b2e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b32:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002bcc <ms5607_convert+0x3fc>
 8002b36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b3a:	ee17 0a90 	vmov	r0, s15
 8002b3e:	f7fd fd03 	bl	8000548 <__aeabi_f2d>
 8002b42:	f04f 0200 	mov.w	r2, #0
 8002b46:	4b23      	ldr	r3, [pc, #140]	; (8002bd4 <ms5607_convert+0x404>)
 8002b48:	f7fd fd56 	bl	80005f8 <__aeabi_dmul>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4690      	mov	r8, r2
 8002b52:	4699      	mov	r9, r3
 8002b54:	69b8      	ldr	r0, [r7, #24]
 8002b56:	f7fd fcf7 	bl	8000548 <__aeabi_f2d>
 8002b5a:	a30d      	add	r3, pc, #52	; (adr r3, 8002b90 <ms5607_convert+0x3c0>)
 8002b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b60:	f7fd fb94 	bl	800028c <__adddf3>
 8002b64:	4602      	mov	r2, r0
 8002b66:	460b      	mov	r3, r1
 8002b68:	4640      	mov	r0, r8
 8002b6a:	4649      	mov	r1, r9
 8002b6c:	f7fd fd44 	bl	80005f8 <__aeabi_dmul>
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	4620      	mov	r0, r4
 8002b76:	4629      	mov	r1, r5
 8002b78:	f7fd fb88 	bl	800028c <__adddf3>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	460c      	mov	r4, r1
 8002b80:	4618      	mov	r0, r3
 8002b82:	4621      	mov	r1, r4
 8002b84:	f7fe f810 	bl	8000ba8 <__aeabi_d2f>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b8c:	e026      	b.n	8002bdc <ms5607_convert+0x40c>
 8002b8e:	bf00      	nop
 8002b90:	00000000 	.word	0x00000000
 8002b94:	40977000 	.word	0x40977000
 8002b98:	40700000 	.word	0x40700000
 8002b9c:	40500000 	.word	0x40500000
 8002ba0:	40f00000 	.word	0x40f00000
 8002ba4:	40600000 	.word	0x40600000
 8002ba8:	41600000 	.word	0x41600000
 8002bac:	409f4000 	.word	0x409f4000
 8002bb0:	41400000 	.word	0x41400000
 8002bb4:	40e00000 	.word	0x40e00000
 8002bb8:	44fa0000 	.word	0x44fa0000
 8002bbc:	4f000000 	.word	0x4f000000
 8002bc0:	404e8000 	.word	0x404e8000
 8002bc4:	40300000 	.word	0x40300000
 8002bc8:	c4bb8000 	.word	0xc4bb8000
 8002bcc:	44bb8000 	.word	0x44bb8000
 8002bd0:	402e0000 	.word	0x402e0000
 8002bd4:	40200000 	.word	0x40200000
 8002bd8:	42c80000 	.word	0x42c80000
	  }
	}

	TEMP-=T2;
 8002bdc:	ed97 7a06 	vldr	s14, [r7, #24]
 8002be0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002be4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002be8:	edc7 7a06 	vstr	s15, [r7, #24]
	OFF-=OFF2;
 8002bec:	ed97 7a08 	vldr	s14, [r7, #32]
 8002bf0:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002bf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bf8:	edc7 7a08 	vstr	s15, [r7, #32]
	SENS-=SENS2;
 8002bfc:	ed97 7a07 	vldr	s14, [r7, #28]
 8002c00:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002c04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c08:	edc7 7a07 	vstr	s15, [r7, #28]
	TEMP/=100;
 8002c0c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002c10:	ed5f 6a0f 	vldr	s13, [pc, #-60]	; 8002bd8 <ms5607_convert+0x408>
 8002c14:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c18:	edc7 7a06 	vstr	s15, [r7, #24]
	pressure=(((float)(D1*SENS)/pow(2,21)-OFF)/pow(2,15));
 8002c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1e:	ee07 3a90 	vmov	s15, r3
 8002c22:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c26:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c2e:	ee17 0a90 	vmov	r0, s15
 8002c32:	f7fd fc89 	bl	8000548 <__aeabi_f2d>
 8002c36:	f04f 0200 	mov.w	r2, #0
 8002c3a:	4b16      	ldr	r3, [pc, #88]	; (8002c94 <ms5607_convert+0x4c4>)
 8002c3c:	f7fd fe06 	bl	800084c <__aeabi_ddiv>
 8002c40:	4603      	mov	r3, r0
 8002c42:	460c      	mov	r4, r1
 8002c44:	4625      	mov	r5, r4
 8002c46:	461c      	mov	r4, r3
 8002c48:	6a38      	ldr	r0, [r7, #32]
 8002c4a:	f7fd fc7d 	bl	8000548 <__aeabi_f2d>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	460b      	mov	r3, r1
 8002c52:	4620      	mov	r0, r4
 8002c54:	4629      	mov	r1, r5
 8002c56:	f7fd fb17 	bl	8000288 <__aeabi_dsub>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	460c      	mov	r4, r1
 8002c5e:	4618      	mov	r0, r3
 8002c60:	4621      	mov	r1, r4
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	4b0c      	ldr	r3, [pc, #48]	; (8002c98 <ms5607_convert+0x4c8>)
 8002c68:	f7fd fdf0 	bl	800084c <__aeabi_ddiv>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	460c      	mov	r4, r1
 8002c70:	4618      	mov	r0, r3
 8002c72:	4621      	mov	r1, r4
 8002c74:	f7fd ff98 	bl	8000ba8 <__aeabi_d2f>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	617b      	str	r3, [r7, #20]

	*t = TEMP;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	601a      	str	r2, [r3, #0]
	*p = pressure;
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	601a      	str	r2, [r3, #0]

	//printf("MS pressure is %4.2f Pa\n", pressure);
	//printf("MS temp is %4.2f deg\n", TEMP);

}
 8002c88:	bf00      	nop
 8002c8a:	3748      	adds	r7, #72	; 0x48
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c92:	bf00      	nop
 8002c94:	41400000 	.word	0x41400000
 8002c98:	40e00000 	.word	0x40e00000

08002c9c <sht31_is_busy>:
#include <string.h>
#include <stdio.h>



uint8_t sht31_is_busy(struct sht31_dev * dev){
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
	uint32_t tick;
	tick = HAL_GetTick();
 8002ca4:	f000 f992 	bl	8002fcc <HAL_GetTick>
 8002ca8:	60f8      	str	r0, [r7, #12]
	if (tick >= dev->last_call + SHT_SAMPLING){
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d304      	bcc.n	8002cc2 <sht31_is_busy+0x26>
		dev->last_call = tick;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	60da      	str	r2, [r3, #12]
		return 1;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e000      	b.n	8002cc4 <sht31_is_busy+0x28>
	}
	return 0;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <sht31_init>:


int sht31_init(struct sht31_dev * dev)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af02      	add	r7, sp, #8
 8002cd2:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_GetState(dev->i2c_bus) != HAL_I2C_STATE_READY)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f001 fc45 	bl	8004568 <HAL_I2C_GetState>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b20      	cmp	r3, #32
 8002ce2:	d003      	beq.n	8002cec <sht31_init+0x20>
	{
		printf("i2c1 not ready!\n");
 8002ce4:	481f      	ldr	r0, [pc, #124]	; (8002d64 <sht31_init+0x98>)
 8002ce6:	f004 ffeb 	bl	8007cc0 <puts>
 8002cea:	e002      	b.n	8002cf2 <sht31_init+0x26>
	} else {
		printf("i2c1 is ready!\n");
 8002cec:	481e      	ldr	r0, [pc, #120]	; (8002d68 <sht31_init+0x9c>)
 8002cee:	f004 ffe7 	bl	8007cc0 <puts>
	}

	HAL_StatusTypeDef _ret;

	_ret = HAL_I2C_IsDeviceReady(dev->i2c_bus, dev->addr, 10, dev->delay);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6858      	ldr	r0, [r3, #4]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	b299      	uxth	r1, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	7a1b      	ldrb	r3, [r3, #8]
 8002d00:	220a      	movs	r2, #10
 8002d02:	f001 fb03 	bl	800430c <HAL_I2C_IsDeviceReady>
 8002d06:	4603      	mov	r3, r0
 8002d08:	73fb      	strb	r3, [r7, #15]
	if ( _ret != HAL_OK )
 8002d0a:	7bfb      	ldrb	r3, [r7, #15]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d009      	beq.n	8002d24 <sht31_init+0x58>
	{
		printf("SHT31 setup fail\n");
 8002d10:	4816      	ldr	r0, [pc, #88]	; (8002d6c <sht31_init+0xa0>)
 8002d12:	f004 ffd5 	bl	8007cc0 <puts>
		printf("Errorcode: %d\n", _ret);
 8002d16:	7bfb      	ldrb	r3, [r7, #15]
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4815      	ldr	r0, [pc, #84]	; (8002d70 <sht31_init+0xa4>)
 8002d1c:	f004 ff5c 	bl	8007bd8 <iprintf>
		return 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	e01b      	b.n	8002d5c <sht31_init+0x90>
	}

	printf("SHT31 setup success\n");
 8002d24:	4813      	ldr	r0, [pc, #76]	; (8002d74 <sht31_init+0xa8>)
 8002d26:	f004 ffcb 	bl	8007cc0 <puts>
	//request first measurement
	uint8_t buf[2];
	uint16_t REG = 0x2416;
 8002d2a:	f242 4316 	movw	r3, #9238	; 0x2416
 8002d2e:	81bb      	strh	r3, [r7, #12]
	buf[0] = (uint8_t)(REG >> 8);
 8002d30:	89bb      	ldrh	r3, [r7, #12]
 8002d32:	0a1b      	lsrs	r3, r3, #8
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	723b      	strb	r3, [r7, #8]
	buf[1] = (uint8_t)REG;
 8002d3a:	89bb      	ldrh	r3, [r7, #12]
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 2, dev->delay);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6858      	ldr	r0, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	b299      	uxth	r1, r3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	7a1b      	ldrb	r3, [r3, #8]
 8002d4e:	f107 0208 	add.w	r2, r7, #8
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	2302      	movs	r3, #2
 8002d56:	f000 ffb5 	bl	8003cc4 <HAL_I2C_Master_Transmit>
	return 1;
 8002d5a:	2301      	movs	r3, #1
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	08009c10 	.word	0x08009c10
 8002d68:	08009c20 	.word	0x08009c20
 8002d6c:	08009c30 	.word	0x08009c30
 8002d70:	08009c44 	.word	0x08009c44
 8002d74:	08009c54 	.word	0x08009c54

08002d78 <sht31_read>:

void sht31_read(struct sht31_dev * dev, float * dat, uint16_t * dat_raw)
{
 8002d78:	b590      	push	{r4, r7, lr}
 8002d7a:	b08d      	sub	sp, #52	; 0x34
 8002d7c:	af02      	add	r7, sp, #8
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
	float temp;
	float humid;
	uint8_t buf[6];

	//T MSB, T LSB, T CRC, H MSB, H LSB, H CRC
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 6, dev->delay);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6858      	ldr	r0, [r3, #4]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	b299      	uxth	r1, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	7a1b      	ldrb	r3, [r3, #8]
 8002d92:	f107 0214 	add.w	r2, r7, #20
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	2306      	movs	r3, #6
 8002d9a:	f001 f891 	bl	8003ec0 <HAL_I2C_Master_Receive>
	/*
	uint16_t rawTemp = (uint16_t)((((uint16_t)_buf[0])<<8) | (uint16_t)_buf[1]);
	uint16_t rawHum = (uint16_t)((((uint16_t)_buf[3])<<8) | (uint16_t)_buf[4]);
	*/
	uint16_t rawTemp = ((uint16_t)buf[0] << 8) | buf[1];
 8002d9e:	7d3b      	ldrb	r3, [r7, #20]
 8002da0:	021b      	lsls	r3, r3, #8
 8002da2:	b21a      	sxth	r2, r3
 8002da4:	7d7b      	ldrb	r3, [r7, #21]
 8002da6:	b21b      	sxth	r3, r3
 8002da8:	4313      	orrs	r3, r2
 8002daa:	b21b      	sxth	r3, r3
 8002dac:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t rawHum = ((uint16_t)buf[3] << 8) | buf[4];
 8002dae:	7dfb      	ldrb	r3, [r7, #23]
 8002db0:	021b      	lsls	r3, r3, #8
 8002db2:	b21a      	sxth	r2, r3
 8002db4:	7e3b      	ldrb	r3, [r7, #24]
 8002db6:	b21b      	sxth	r3, r3
 8002db8:	4313      	orrs	r3, r2
 8002dba:	b21b      	sxth	r3, r3
 8002dbc:	84bb      	strh	r3, [r7, #36]	; 0x24
	humid = 100.0 * (float)rawHum / 65535.0;
 8002dbe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002dc0:	ee07 3a90 	vmov	s15, r3
 8002dc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dc8:	ee17 0a90 	vmov	r0, s15
 8002dcc:	f7fd fbbc 	bl	8000548 <__aeabi_f2d>
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	4b32      	ldr	r3, [pc, #200]	; (8002ea0 <sht31_read+0x128>)
 8002dd6:	f7fd fc0f 	bl	80005f8 <__aeabi_dmul>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	460c      	mov	r4, r1
 8002dde:	4618      	mov	r0, r3
 8002de0:	4621      	mov	r1, r4
 8002de2:	a32d      	add	r3, pc, #180	; (adr r3, 8002e98 <sht31_read+0x120>)
 8002de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de8:	f7fd fd30 	bl	800084c <__aeabi_ddiv>
 8002dec:	4603      	mov	r3, r0
 8002dee:	460c      	mov	r4, r1
 8002df0:	4618      	mov	r0, r3
 8002df2:	4621      	mov	r1, r4
 8002df4:	f7fd fed8 	bl	8000ba8 <__aeabi_d2f>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	623b      	str	r3, [r7, #32]
	temp = -45.0 + 175 * (float)rawTemp / 65535.0;
 8002dfc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002dfe:	ee07 3a90 	vmov	s15, r3
 8002e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e06:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002ea4 <sht31_read+0x12c>
 8002e0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e0e:	ee17 0a90 	vmov	r0, s15
 8002e12:	f7fd fb99 	bl	8000548 <__aeabi_f2d>
 8002e16:	a320      	add	r3, pc, #128	; (adr r3, 8002e98 <sht31_read+0x120>)
 8002e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1c:	f7fd fd16 	bl	800084c <__aeabi_ddiv>
 8002e20:	4603      	mov	r3, r0
 8002e22:	460c      	mov	r4, r1
 8002e24:	4618      	mov	r0, r3
 8002e26:	4621      	mov	r1, r4
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	4b1e      	ldr	r3, [pc, #120]	; (8002ea8 <sht31_read+0x130>)
 8002e2e:	f7fd fa2b 	bl	8000288 <__aeabi_dsub>
 8002e32:	4603      	mov	r3, r0
 8002e34:	460c      	mov	r4, r1
 8002e36:	4618      	mov	r0, r3
 8002e38:	4621      	mov	r1, r4
 8002e3a:	f7fd feb5 	bl	8000ba8 <__aeabi_d2f>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	61fb      	str	r3, [r7, #28]
	//printf("temperature is %4.2f deg\n",temp);
	//printf("humidity is %4.2f perc\n",humid);
	dat[0] = temp;
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	69fa      	ldr	r2, [r7, #28]
 8002e46:	601a      	str	r2, [r3, #0]
	dat[1] = humid;
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	3304      	adds	r3, #4
 8002e4c:	6a3a      	ldr	r2, [r7, #32]
 8002e4e:	601a      	str	r2, [r3, #0]
	dat_raw[0] = rawTemp;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002e54:	801a      	strh	r2, [r3, #0]
	dat_raw[1] = rawHum;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	3302      	adds	r3, #2
 8002e5a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e5c:	801a      	strh	r2, [r3, #0]

	uint16_t REG = 0x2416;
 8002e5e:	f242 4316 	movw	r3, #9238	; 0x2416
 8002e62:	837b      	strh	r3, [r7, #26]
	buf[0] = (uint8_t)(REG >> 8);
 8002e64:	8b7b      	ldrh	r3, [r7, #26]
 8002e66:	0a1b      	lsrs	r3, r3, #8
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	753b      	strb	r3, [r7, #20]
	buf[1] = (uint8_t)REG;
 8002e6e:	8b7b      	ldrh	r3, [r7, #26]
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 2, dev->delay);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6858      	ldr	r0, [r3, #4]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	b299      	uxth	r1, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	7a1b      	ldrb	r3, [r3, #8]
 8002e82:	f107 0214 	add.w	r2, r7, #20
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	2302      	movs	r3, #2
 8002e8a:	f000 ff1b 	bl	8003cc4 <HAL_I2C_Master_Transmit>

};
 8002e8e:	bf00      	nop
 8002e90:	372c      	adds	r7, #44	; 0x2c
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd90      	pop	{r4, r7, pc}
 8002e96:	bf00      	nop
 8002e98:	00000000 	.word	0x00000000
 8002e9c:	40efffe0 	.word	0x40efffe0
 8002ea0:	40590000 	.word	0x40590000
 8002ea4:	432f0000 	.word	0x432f0000
 8002ea8:	40468000 	.word	0x40468000

08002eac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002eac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ee4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002eb0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002eb2:	e003      	b.n	8002ebc <LoopCopyDataInit>

08002eb4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002eb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002eb6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002eb8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002eba:	3104      	adds	r1, #4

08002ebc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002ebc:	480b      	ldr	r0, [pc, #44]	; (8002eec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002ebe:	4b0c      	ldr	r3, [pc, #48]	; (8002ef0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002ec0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002ec2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002ec4:	d3f6      	bcc.n	8002eb4 <CopyDataInit>
  ldr  r2, =_sbss
 8002ec6:	4a0b      	ldr	r2, [pc, #44]	; (8002ef4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002ec8:	e002      	b.n	8002ed0 <LoopFillZerobss>

08002eca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002eca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002ecc:	f842 3b04 	str.w	r3, [r2], #4

08002ed0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002ed0:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002ed2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002ed4:	d3f9      	bcc.n	8002eca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002ed6:	f7fe ff73 	bl	8001dc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002eda:	f004 f9f5 	bl	80072c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ede:	f7fe fa9f 	bl	8001420 <main>
  bx  lr    
 8002ee2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002ee4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002ee8:	08009f50 	.word	0x08009f50
  ldr  r0, =_sdata
 8002eec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002ef0:	200002a0 	.word	0x200002a0
  ldr  r2, =_sbss
 8002ef4:	200002a0 	.word	0x200002a0
  ldr  r3, = _ebss
 8002ef8:	200004f8 	.word	0x200004f8

08002efc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002efc:	e7fe      	b.n	8002efc <ADC_IRQHandler>
	...

08002f00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f04:	4b0e      	ldr	r3, [pc, #56]	; (8002f40 <HAL_Init+0x40>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a0d      	ldr	r2, [pc, #52]	; (8002f40 <HAL_Init+0x40>)
 8002f0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f10:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <HAL_Init+0x40>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a0a      	ldr	r2, [pc, #40]	; (8002f40 <HAL_Init+0x40>)
 8002f16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f1c:	4b08      	ldr	r3, [pc, #32]	; (8002f40 <HAL_Init+0x40>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a07      	ldr	r2, [pc, #28]	; (8002f40 <HAL_Init+0x40>)
 8002f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f28:	2003      	movs	r0, #3
 8002f2a:	f000 fb91 	bl	8003650 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f2e:	2000      	movs	r0, #0
 8002f30:	f000 f808 	bl	8002f44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f34:	f7fe fe2e 	bl	8001b94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	40023c00 	.word	0x40023c00

08002f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f4c:	4b12      	ldr	r3, [pc, #72]	; (8002f98 <HAL_InitTick+0x54>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	4b12      	ldr	r3, [pc, #72]	; (8002f9c <HAL_InitTick+0x58>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	4619      	mov	r1, r3
 8002f56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 fb9b 	bl	800369e <HAL_SYSTICK_Config>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e00e      	b.n	8002f90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b0f      	cmp	r3, #15
 8002f76:	d80a      	bhi.n	8002f8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f78:	2200      	movs	r2, #0
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f80:	f000 fb71 	bl	8003666 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f84:	4a06      	ldr	r2, [pc, #24]	; (8002fa0 <HAL_InitTick+0x5c>)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	e000      	b.n	8002f90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	200000c0 	.word	0x200000c0
 8002f9c:	200000cc 	.word	0x200000cc
 8002fa0:	200000c8 	.word	0x200000c8

08002fa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fa8:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <HAL_IncTick+0x20>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	461a      	mov	r2, r3
 8002fae:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <HAL_IncTick+0x24>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	4a04      	ldr	r2, [pc, #16]	; (8002fc8 <HAL_IncTick+0x24>)
 8002fb6:	6013      	str	r3, [r2, #0]
}
 8002fb8:	bf00      	nop
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	200000cc 	.word	0x200000cc
 8002fc8:	200004f0 	.word	0x200004f0

08002fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  return uwTick;
 8002fd0:	4b03      	ldr	r3, [pc, #12]	; (8002fe0 <HAL_GetTick+0x14>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	200004f0 	.word	0x200004f0

08002fe4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fec:	f7ff ffee 	bl	8002fcc <HAL_GetTick>
 8002ff0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ffc:	d005      	beq.n	800300a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ffe:	4b09      	ldr	r3, [pc, #36]	; (8003024 <HAL_Delay+0x40>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	461a      	mov	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4413      	add	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800300a:	bf00      	nop
 800300c:	f7ff ffde 	bl	8002fcc <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	429a      	cmp	r2, r3
 800301a:	d8f7      	bhi.n	800300c <HAL_Delay+0x28>
  {
  }
}
 800301c:	bf00      	nop
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	200000cc 	.word	0x200000cc

08003028 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003030:	2300      	movs	r3, #0
 8003032:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e033      	b.n	80030a6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	2b00      	cmp	r3, #0
 8003044:	d109      	bne.n	800305a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7fd ffd0 	bl	8000fec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	f003 0310 	and.w	r3, r3, #16
 8003062:	2b00      	cmp	r3, #0
 8003064:	d118      	bne.n	8003098 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800306e:	f023 0302 	bic.w	r3, r3, #2
 8003072:	f043 0202 	orr.w	r2, r3, #2
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f93a 	bl	80032f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	f023 0303 	bic.w	r3, r3, #3
 800308e:	f043 0201 	orr.w	r2, r3, #1
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	641a      	str	r2, [r3, #64]	; 0x40
 8003096:	e001      	b.n	800309c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80030a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
	...

080030b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b085      	sub	sp, #20
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d101      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x1c>
 80030c8:	2302      	movs	r3, #2
 80030ca:	e105      	b.n	80032d8 <HAL_ADC_ConfigChannel+0x228>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2b09      	cmp	r3, #9
 80030da:	d925      	bls.n	8003128 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68d9      	ldr	r1, [r3, #12]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	461a      	mov	r2, r3
 80030ea:	4613      	mov	r3, r2
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	4413      	add	r3, r2
 80030f0:	3b1e      	subs	r3, #30
 80030f2:	2207      	movs	r2, #7
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	43da      	mvns	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	400a      	ands	r2, r1
 8003100:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68d9      	ldr	r1, [r3, #12]
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	b29b      	uxth	r3, r3
 8003112:	4618      	mov	r0, r3
 8003114:	4603      	mov	r3, r0
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	4403      	add	r3, r0
 800311a:	3b1e      	subs	r3, #30
 800311c:	409a      	lsls	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	60da      	str	r2, [r3, #12]
 8003126:	e022      	b.n	800316e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6919      	ldr	r1, [r3, #16]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	b29b      	uxth	r3, r3
 8003134:	461a      	mov	r2, r3
 8003136:	4613      	mov	r3, r2
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	4413      	add	r3, r2
 800313c:	2207      	movs	r2, #7
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	43da      	mvns	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	400a      	ands	r2, r1
 800314a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6919      	ldr	r1, [r3, #16]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	689a      	ldr	r2, [r3, #8]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	b29b      	uxth	r3, r3
 800315c:	4618      	mov	r0, r3
 800315e:	4603      	mov	r3, r0
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	4403      	add	r3, r0
 8003164:	409a      	lsls	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b06      	cmp	r3, #6
 8003174:	d824      	bhi.n	80031c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	4613      	mov	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	3b05      	subs	r3, #5
 8003188:	221f      	movs	r2, #31
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	43da      	mvns	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	400a      	ands	r2, r1
 8003196:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	4618      	mov	r0, r3
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	4613      	mov	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	3b05      	subs	r3, #5
 80031b2:	fa00 f203 	lsl.w	r2, r0, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	635a      	str	r2, [r3, #52]	; 0x34
 80031be:	e04c      	b.n	800325a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b0c      	cmp	r3, #12
 80031c6:	d824      	bhi.n	8003212 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	3b23      	subs	r3, #35	; 0x23
 80031da:	221f      	movs	r2, #31
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	43da      	mvns	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	400a      	ands	r2, r1
 80031e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	4618      	mov	r0, r3
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	4613      	mov	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	3b23      	subs	r3, #35	; 0x23
 8003204:	fa00 f203 	lsl.w	r2, r0, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	631a      	str	r2, [r3, #48]	; 0x30
 8003210:	e023      	b.n	800325a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	4613      	mov	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	3b41      	subs	r3, #65	; 0x41
 8003224:	221f      	movs	r2, #31
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	43da      	mvns	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	400a      	ands	r2, r1
 8003232:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	b29b      	uxth	r3, r3
 8003240:	4618      	mov	r0, r3
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	3b41      	subs	r3, #65	; 0x41
 800324e:	fa00 f203 	lsl.w	r2, r0, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800325a:	4b22      	ldr	r3, [pc, #136]	; (80032e4 <HAL_ADC_ConfigChannel+0x234>)
 800325c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a21      	ldr	r2, [pc, #132]	; (80032e8 <HAL_ADC_ConfigChannel+0x238>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d109      	bne.n	800327c <HAL_ADC_ConfigChannel+0x1cc>
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2b12      	cmp	r3, #18
 800326e:	d105      	bne.n	800327c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a19      	ldr	r2, [pc, #100]	; (80032e8 <HAL_ADC_ConfigChannel+0x238>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d123      	bne.n	80032ce <HAL_ADC_ConfigChannel+0x21e>
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2b10      	cmp	r3, #16
 800328c:	d003      	beq.n	8003296 <HAL_ADC_ConfigChannel+0x1e6>
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2b11      	cmp	r3, #17
 8003294:	d11b      	bne.n	80032ce <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2b10      	cmp	r3, #16
 80032a8:	d111      	bne.n	80032ce <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032aa:	4b10      	ldr	r3, [pc, #64]	; (80032ec <HAL_ADC_ConfigChannel+0x23c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a10      	ldr	r2, [pc, #64]	; (80032f0 <HAL_ADC_ConfigChannel+0x240>)
 80032b0:	fba2 2303 	umull	r2, r3, r2, r3
 80032b4:	0c9a      	lsrs	r2, r3, #18
 80032b6:	4613      	mov	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	4413      	add	r3, r2
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80032c0:	e002      	b.n	80032c8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	3b01      	subs	r3, #1
 80032c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f9      	bne.n	80032c2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3714      	adds	r7, #20
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	40012300 	.word	0x40012300
 80032e8:	40012000 	.word	0x40012000
 80032ec:	200000c0 	.word	0x200000c0
 80032f0:	431bde83 	.word	0x431bde83

080032f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032fc:	4b79      	ldr	r3, [pc, #484]	; (80034e4 <ADC_Init+0x1f0>)
 80032fe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	431a      	orrs	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003328:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6859      	ldr	r1, [r3, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	021a      	lsls	r2, r3, #8
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800334c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	6859      	ldr	r1, [r3, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	430a      	orrs	r2, r1
 800335e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800336e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6899      	ldr	r1, [r3, #8]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003386:	4a58      	ldr	r2, [pc, #352]	; (80034e8 <ADC_Init+0x1f4>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d022      	beq.n	80033d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689a      	ldr	r2, [r3, #8]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800339a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6899      	ldr	r1, [r3, #8]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	430a      	orrs	r2, r1
 80033ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6899      	ldr	r1, [r3, #8]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	609a      	str	r2, [r3, #8]
 80033d0:	e00f      	b.n	80033f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	689a      	ldr	r2, [r3, #8]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 0202 	bic.w	r2, r2, #2
 8003400:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6899      	ldr	r1, [r3, #8]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	7e1b      	ldrb	r3, [r3, #24]
 800340c:	005a      	lsls	r2, r3, #1
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 3020 	ldrb.w	r3, [r3, #32]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d01b      	beq.n	8003458 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800342e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800343e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6859      	ldr	r1, [r3, #4]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	3b01      	subs	r3, #1
 800344c:	035a      	lsls	r2, r3, #13
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	605a      	str	r2, [r3, #4]
 8003456:	e007      	b.n	8003468 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003466:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003476:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	3b01      	subs	r3, #1
 8003484:	051a      	lsls	r2, r3, #20
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800349c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6899      	ldr	r1, [r3, #8]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034aa:	025a      	lsls	r2, r3, #9
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689a      	ldr	r2, [r3, #8]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6899      	ldr	r1, [r3, #8]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	029a      	lsls	r2, r3, #10
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	609a      	str	r2, [r3, #8]
}
 80034d8:	bf00      	nop
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	40012300 	.word	0x40012300
 80034e8:	0f000001 	.word	0x0f000001

080034ec <__NVIC_SetPriorityGrouping>:
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034fc:	4b0c      	ldr	r3, [pc, #48]	; (8003530 <__NVIC_SetPriorityGrouping+0x44>)
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003508:	4013      	ands	r3, r2
 800350a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003514:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800351c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800351e:	4a04      	ldr	r2, [pc, #16]	; (8003530 <__NVIC_SetPriorityGrouping+0x44>)
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	60d3      	str	r3, [r2, #12]
}
 8003524:	bf00      	nop
 8003526:	3714      	adds	r7, #20
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	e000ed00 	.word	0xe000ed00

08003534 <__NVIC_GetPriorityGrouping>:
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003538:	4b04      	ldr	r3, [pc, #16]	; (800354c <__NVIC_GetPriorityGrouping+0x18>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	0a1b      	lsrs	r3, r3, #8
 800353e:	f003 0307 	and.w	r3, r3, #7
}
 8003542:	4618      	mov	r0, r3
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	e000ed00 	.word	0xe000ed00

08003550 <__NVIC_SetPriority>:
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	4603      	mov	r3, r0
 8003558:	6039      	str	r1, [r7, #0]
 800355a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800355c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003560:	2b00      	cmp	r3, #0
 8003562:	db0a      	blt.n	800357a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	b2da      	uxtb	r2, r3
 8003568:	490c      	ldr	r1, [pc, #48]	; (800359c <__NVIC_SetPriority+0x4c>)
 800356a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356e:	0112      	lsls	r2, r2, #4
 8003570:	b2d2      	uxtb	r2, r2
 8003572:	440b      	add	r3, r1
 8003574:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003578:	e00a      	b.n	8003590 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	b2da      	uxtb	r2, r3
 800357e:	4908      	ldr	r1, [pc, #32]	; (80035a0 <__NVIC_SetPriority+0x50>)
 8003580:	79fb      	ldrb	r3, [r7, #7]
 8003582:	f003 030f 	and.w	r3, r3, #15
 8003586:	3b04      	subs	r3, #4
 8003588:	0112      	lsls	r2, r2, #4
 800358a:	b2d2      	uxtb	r2, r2
 800358c:	440b      	add	r3, r1
 800358e:	761a      	strb	r2, [r3, #24]
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr
 800359c:	e000e100 	.word	0xe000e100
 80035a0:	e000ed00 	.word	0xe000ed00

080035a4 <NVIC_EncodePriority>:
{
 80035a4:	b480      	push	{r7}
 80035a6:	b089      	sub	sp, #36	; 0x24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f003 0307 	and.w	r3, r3, #7
 80035b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	f1c3 0307 	rsb	r3, r3, #7
 80035be:	2b04      	cmp	r3, #4
 80035c0:	bf28      	it	cs
 80035c2:	2304      	movcs	r3, #4
 80035c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	3304      	adds	r3, #4
 80035ca:	2b06      	cmp	r3, #6
 80035cc:	d902      	bls.n	80035d4 <NVIC_EncodePriority+0x30>
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	3b03      	subs	r3, #3
 80035d2:	e000      	b.n	80035d6 <NVIC_EncodePriority+0x32>
 80035d4:	2300      	movs	r3, #0
 80035d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	fa02 f303 	lsl.w	r3, r2, r3
 80035e2:	43da      	mvns	r2, r3
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	401a      	ands	r2, r3
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	fa01 f303 	lsl.w	r3, r1, r3
 80035f6:	43d9      	mvns	r1, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035fc:	4313      	orrs	r3, r2
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3724      	adds	r7, #36	; 0x24
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
	...

0800360c <SysTick_Config>:
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3b01      	subs	r3, #1
 8003618:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800361c:	d301      	bcc.n	8003622 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800361e:	2301      	movs	r3, #1
 8003620:	e00f      	b.n	8003642 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003622:	4a0a      	ldr	r2, [pc, #40]	; (800364c <SysTick_Config+0x40>)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3b01      	subs	r3, #1
 8003628:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800362a:	210f      	movs	r1, #15
 800362c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003630:	f7ff ff8e 	bl	8003550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003634:	4b05      	ldr	r3, [pc, #20]	; (800364c <SysTick_Config+0x40>)
 8003636:	2200      	movs	r2, #0
 8003638:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800363a:	4b04      	ldr	r3, [pc, #16]	; (800364c <SysTick_Config+0x40>)
 800363c:	2207      	movs	r2, #7
 800363e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	e000e010 	.word	0xe000e010

08003650 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f7ff ff47 	bl	80034ec <__NVIC_SetPriorityGrouping>
}
 800365e:	bf00      	nop
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003666:	b580      	push	{r7, lr}
 8003668:	b086      	sub	sp, #24
 800366a:	af00      	add	r7, sp, #0
 800366c:	4603      	mov	r3, r0
 800366e:	60b9      	str	r1, [r7, #8]
 8003670:	607a      	str	r2, [r7, #4]
 8003672:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003674:	2300      	movs	r3, #0
 8003676:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003678:	f7ff ff5c 	bl	8003534 <__NVIC_GetPriorityGrouping>
 800367c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	68b9      	ldr	r1, [r7, #8]
 8003682:	6978      	ldr	r0, [r7, #20]
 8003684:	f7ff ff8e 	bl	80035a4 <NVIC_EncodePriority>
 8003688:	4602      	mov	r2, r0
 800368a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800368e:	4611      	mov	r1, r2
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff ff5d 	bl	8003550 <__NVIC_SetPriority>
}
 8003696:	bf00      	nop
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b082      	sub	sp, #8
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff ffb0 	bl	800360c <SysTick_Config>
 80036ac:	4603      	mov	r3, r0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
	...

080036b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b089      	sub	sp, #36	; 0x24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036c6:	2300      	movs	r3, #0
 80036c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036ca:	2300      	movs	r3, #0
 80036cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ce:	2300      	movs	r3, #0
 80036d0:	61fb      	str	r3, [r7, #28]
 80036d2:	e16b      	b.n	80039ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036d4:	2201      	movs	r2, #1
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	4013      	ands	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	f040 815a 	bne.w	80039a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d00b      	beq.n	8003712 <HAL_GPIO_Init+0x5a>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d007      	beq.n	8003712 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003706:	2b11      	cmp	r3, #17
 8003708:	d003      	beq.n	8003712 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2b12      	cmp	r3, #18
 8003710:	d130      	bne.n	8003774 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	2203      	movs	r2, #3
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	43db      	mvns	r3, r3
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	4013      	ands	r3, r2
 8003728:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	fa02 f303 	lsl.w	r3, r2, r3
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	4313      	orrs	r3, r2
 800373a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003748:	2201      	movs	r2, #1
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	43db      	mvns	r3, r3
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	4013      	ands	r3, r2
 8003756:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	091b      	lsrs	r3, r3, #4
 800375e:	f003 0201 	and.w	r2, r3, #1
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4313      	orrs	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	2203      	movs	r2, #3
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	43db      	mvns	r3, r3
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	4013      	ands	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4313      	orrs	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d003      	beq.n	80037b4 <HAL_GPIO_Init+0xfc>
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	2b12      	cmp	r3, #18
 80037b2:	d123      	bne.n	80037fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	08da      	lsrs	r2, r3, #3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3208      	adds	r2, #8
 80037bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	220f      	movs	r2, #15
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	43db      	mvns	r3, r3
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	4013      	ands	r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	691a      	ldr	r2, [r3, #16]
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	08da      	lsrs	r2, r3, #3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	3208      	adds	r2, #8
 80037f6:	69b9      	ldr	r1, [r7, #24]
 80037f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	2203      	movs	r2, #3
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	43db      	mvns	r3, r3
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	4013      	ands	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f003 0203 	and.w	r2, r3, #3
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	4313      	orrs	r3, r2
 8003828:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 80b4 	beq.w	80039a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800383e:	2300      	movs	r3, #0
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	4b5f      	ldr	r3, [pc, #380]	; (80039c0 <HAL_GPIO_Init+0x308>)
 8003844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003846:	4a5e      	ldr	r2, [pc, #376]	; (80039c0 <HAL_GPIO_Init+0x308>)
 8003848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800384c:	6453      	str	r3, [r2, #68]	; 0x44
 800384e:	4b5c      	ldr	r3, [pc, #368]	; (80039c0 <HAL_GPIO_Init+0x308>)
 8003850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800385a:	4a5a      	ldr	r2, [pc, #360]	; (80039c4 <HAL_GPIO_Init+0x30c>)
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	089b      	lsrs	r3, r3, #2
 8003860:	3302      	adds	r3, #2
 8003862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003866:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	220f      	movs	r2, #15
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	43db      	mvns	r3, r3
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	4013      	ands	r3, r2
 800387c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a51      	ldr	r2, [pc, #324]	; (80039c8 <HAL_GPIO_Init+0x310>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d02b      	beq.n	80038de <HAL_GPIO_Init+0x226>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a50      	ldr	r2, [pc, #320]	; (80039cc <HAL_GPIO_Init+0x314>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d025      	beq.n	80038da <HAL_GPIO_Init+0x222>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a4f      	ldr	r2, [pc, #316]	; (80039d0 <HAL_GPIO_Init+0x318>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d01f      	beq.n	80038d6 <HAL_GPIO_Init+0x21e>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a4e      	ldr	r2, [pc, #312]	; (80039d4 <HAL_GPIO_Init+0x31c>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d019      	beq.n	80038d2 <HAL_GPIO_Init+0x21a>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a4d      	ldr	r2, [pc, #308]	; (80039d8 <HAL_GPIO_Init+0x320>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d013      	beq.n	80038ce <HAL_GPIO_Init+0x216>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a4c      	ldr	r2, [pc, #304]	; (80039dc <HAL_GPIO_Init+0x324>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d00d      	beq.n	80038ca <HAL_GPIO_Init+0x212>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a4b      	ldr	r2, [pc, #300]	; (80039e0 <HAL_GPIO_Init+0x328>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d007      	beq.n	80038c6 <HAL_GPIO_Init+0x20e>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a4a      	ldr	r2, [pc, #296]	; (80039e4 <HAL_GPIO_Init+0x32c>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d101      	bne.n	80038c2 <HAL_GPIO_Init+0x20a>
 80038be:	2307      	movs	r3, #7
 80038c0:	e00e      	b.n	80038e0 <HAL_GPIO_Init+0x228>
 80038c2:	2308      	movs	r3, #8
 80038c4:	e00c      	b.n	80038e0 <HAL_GPIO_Init+0x228>
 80038c6:	2306      	movs	r3, #6
 80038c8:	e00a      	b.n	80038e0 <HAL_GPIO_Init+0x228>
 80038ca:	2305      	movs	r3, #5
 80038cc:	e008      	b.n	80038e0 <HAL_GPIO_Init+0x228>
 80038ce:	2304      	movs	r3, #4
 80038d0:	e006      	b.n	80038e0 <HAL_GPIO_Init+0x228>
 80038d2:	2303      	movs	r3, #3
 80038d4:	e004      	b.n	80038e0 <HAL_GPIO_Init+0x228>
 80038d6:	2302      	movs	r3, #2
 80038d8:	e002      	b.n	80038e0 <HAL_GPIO_Init+0x228>
 80038da:	2301      	movs	r3, #1
 80038dc:	e000      	b.n	80038e0 <HAL_GPIO_Init+0x228>
 80038de:	2300      	movs	r3, #0
 80038e0:	69fa      	ldr	r2, [r7, #28]
 80038e2:	f002 0203 	and.w	r2, r2, #3
 80038e6:	0092      	lsls	r2, r2, #2
 80038e8:	4093      	lsls	r3, r2
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038f0:	4934      	ldr	r1, [pc, #208]	; (80039c4 <HAL_GPIO_Init+0x30c>)
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	089b      	lsrs	r3, r3, #2
 80038f6:	3302      	adds	r3, #2
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038fe:	4b3a      	ldr	r3, [pc, #232]	; (80039e8 <HAL_GPIO_Init+0x330>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	43db      	mvns	r3, r3
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	4013      	ands	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003922:	4a31      	ldr	r2, [pc, #196]	; (80039e8 <HAL_GPIO_Init+0x330>)
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003928:	4b2f      	ldr	r3, [pc, #188]	; (80039e8 <HAL_GPIO_Init+0x330>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	43db      	mvns	r3, r3
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	4013      	ands	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	4313      	orrs	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800394c:	4a26      	ldr	r2, [pc, #152]	; (80039e8 <HAL_GPIO_Init+0x330>)
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003952:	4b25      	ldr	r3, [pc, #148]	; (80039e8 <HAL_GPIO_Init+0x330>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	43db      	mvns	r3, r3
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	4013      	ands	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	4313      	orrs	r3, r2
 8003974:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003976:	4a1c      	ldr	r2, [pc, #112]	; (80039e8 <HAL_GPIO_Init+0x330>)
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800397c:	4b1a      	ldr	r3, [pc, #104]	; (80039e8 <HAL_GPIO_Init+0x330>)
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	43db      	mvns	r3, r3
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	4013      	ands	r3, r2
 800398a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	4313      	orrs	r3, r2
 800399e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039a0:	4a11      	ldr	r2, [pc, #68]	; (80039e8 <HAL_GPIO_Init+0x330>)
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	3301      	adds	r3, #1
 80039aa:	61fb      	str	r3, [r7, #28]
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	2b0f      	cmp	r3, #15
 80039b0:	f67f ae90 	bls.w	80036d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039b4:	bf00      	nop
 80039b6:	3724      	adds	r7, #36	; 0x24
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	40023800 	.word	0x40023800
 80039c4:	40013800 	.word	0x40013800
 80039c8:	40020000 	.word	0x40020000
 80039cc:	40020400 	.word	0x40020400
 80039d0:	40020800 	.word	0x40020800
 80039d4:	40020c00 	.word	0x40020c00
 80039d8:	40021000 	.word	0x40021000
 80039dc:	40021400 	.word	0x40021400
 80039e0:	40021800 	.word	0x40021800
 80039e4:	40021c00 	.word	0x40021c00
 80039e8:	40013c00 	.word	0x40013c00

080039ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	460b      	mov	r3, r1
 80039f6:	807b      	strh	r3, [r7, #2]
 80039f8:	4613      	mov	r3, r2
 80039fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039fc:	787b      	ldrb	r3, [r7, #1]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a02:	887a      	ldrh	r2, [r7, #2]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a08:	e003      	b.n	8003a12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a0a:	887b      	ldrh	r3, [r7, #2]
 8003a0c:	041a      	lsls	r2, r3, #16
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	619a      	str	r2, [r3, #24]
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
 8003a26:	460b      	mov	r3, r1
 8003a28:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	695a      	ldr	r2, [r3, #20]
 8003a2e:	887b      	ldrh	r3, [r7, #2]
 8003a30:	401a      	ands	r2, r3
 8003a32:	887b      	ldrh	r3, [r7, #2]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d104      	bne.n	8003a42 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003a38:	887b      	ldrh	r3, [r7, #2]
 8003a3a:	041a      	lsls	r2, r3, #16
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003a40:	e002      	b.n	8003a48 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003a42:	887a      	ldrh	r2, [r7, #2]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	619a      	str	r2, [r3, #24]
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e11f      	b.n	8003ca6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d106      	bne.n	8003a80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7fd fc54 	bl	8001328 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2224      	movs	r2, #36	; 0x24
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0201 	bic.w	r2, r2, #1
 8003a96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003aa6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ab6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ab8:	f001 fca4 	bl	8005404 <HAL_RCC_GetPCLK1Freq>
 8003abc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	4a7b      	ldr	r2, [pc, #492]	; (8003cb0 <HAL_I2C_Init+0x25c>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d807      	bhi.n	8003ad8 <HAL_I2C_Init+0x84>
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	4a7a      	ldr	r2, [pc, #488]	; (8003cb4 <HAL_I2C_Init+0x260>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	bf94      	ite	ls
 8003ad0:	2301      	movls	r3, #1
 8003ad2:	2300      	movhi	r3, #0
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	e006      	b.n	8003ae6 <HAL_I2C_Init+0x92>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4a77      	ldr	r2, [pc, #476]	; (8003cb8 <HAL_I2C_Init+0x264>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	bf94      	ite	ls
 8003ae0:	2301      	movls	r3, #1
 8003ae2:	2300      	movhi	r3, #0
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e0db      	b.n	8003ca6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	4a72      	ldr	r2, [pc, #456]	; (8003cbc <HAL_I2C_Init+0x268>)
 8003af2:	fba2 2303 	umull	r2, r3, r2, r3
 8003af6:	0c9b      	lsrs	r3, r3, #18
 8003af8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	4a64      	ldr	r2, [pc, #400]	; (8003cb0 <HAL_I2C_Init+0x25c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d802      	bhi.n	8003b28 <HAL_I2C_Init+0xd4>
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	3301      	adds	r3, #1
 8003b26:	e009      	b.n	8003b3c <HAL_I2C_Init+0xe8>
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b2e:	fb02 f303 	mul.w	r3, r2, r3
 8003b32:	4a63      	ldr	r2, [pc, #396]	; (8003cc0 <HAL_I2C_Init+0x26c>)
 8003b34:	fba2 2303 	umull	r2, r3, r2, r3
 8003b38:	099b      	lsrs	r3, r3, #6
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6812      	ldr	r2, [r2, #0]
 8003b40:	430b      	orrs	r3, r1
 8003b42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	4956      	ldr	r1, [pc, #344]	; (8003cb0 <HAL_I2C_Init+0x25c>)
 8003b58:	428b      	cmp	r3, r1
 8003b5a:	d80d      	bhi.n	8003b78 <HAL_I2C_Init+0x124>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	1e59      	subs	r1, r3, #1
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b70:	2b04      	cmp	r3, #4
 8003b72:	bf38      	it	cc
 8003b74:	2304      	movcc	r3, #4
 8003b76:	e04f      	b.n	8003c18 <HAL_I2C_Init+0x1c4>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d111      	bne.n	8003ba4 <HAL_I2C_Init+0x150>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	1e58      	subs	r0, r3, #1
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6859      	ldr	r1, [r3, #4]
 8003b88:	460b      	mov	r3, r1
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	440b      	add	r3, r1
 8003b8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b92:	3301      	adds	r3, #1
 8003b94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	bf0c      	ite	eq
 8003b9c:	2301      	moveq	r3, #1
 8003b9e:	2300      	movne	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	e012      	b.n	8003bca <HAL_I2C_Init+0x176>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	1e58      	subs	r0, r3, #1
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6859      	ldr	r1, [r3, #4]
 8003bac:	460b      	mov	r3, r1
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	440b      	add	r3, r1
 8003bb2:	0099      	lsls	r1, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bba:	3301      	adds	r3, #1
 8003bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	bf0c      	ite	eq
 8003bc4:	2301      	moveq	r3, #1
 8003bc6:	2300      	movne	r3, #0
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <HAL_I2C_Init+0x17e>
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e022      	b.n	8003c18 <HAL_I2C_Init+0x1c4>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10e      	bne.n	8003bf8 <HAL_I2C_Init+0x1a4>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	1e58      	subs	r0, r3, #1
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6859      	ldr	r1, [r3, #4]
 8003be2:	460b      	mov	r3, r1
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	440b      	add	r3, r1
 8003be8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bec:	3301      	adds	r3, #1
 8003bee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bf6:	e00f      	b.n	8003c18 <HAL_I2C_Init+0x1c4>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	1e58      	subs	r0, r3, #1
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6859      	ldr	r1, [r3, #4]
 8003c00:	460b      	mov	r3, r1
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	0099      	lsls	r1, r3, #2
 8003c08:	440b      	add	r3, r1
 8003c0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c0e:	3301      	adds	r3, #1
 8003c10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c18:	6879      	ldr	r1, [r7, #4]
 8003c1a:	6809      	ldr	r1, [r1, #0]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	69da      	ldr	r2, [r3, #28]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	431a      	orrs	r2, r3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	430a      	orrs	r2, r1
 8003c3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	6911      	ldr	r1, [r2, #16]
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	68d2      	ldr	r2, [r2, #12]
 8003c52:	4311      	orrs	r1, r2
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6812      	ldr	r2, [r2, #0]
 8003c58:	430b      	orrs	r3, r1
 8003c5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	695a      	ldr	r2, [r3, #20]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f042 0201 	orr.w	r2, r2, #1
 8003c86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2220      	movs	r2, #32
 8003c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	000186a0 	.word	0x000186a0
 8003cb4:	001e847f 	.word	0x001e847f
 8003cb8:	003d08ff 	.word	0x003d08ff
 8003cbc:	431bde83 	.word	0x431bde83
 8003cc0:	10624dd3 	.word	0x10624dd3

08003cc4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b088      	sub	sp, #32
 8003cc8:	af02      	add	r7, sp, #8
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	607a      	str	r2, [r7, #4]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	817b      	strh	r3, [r7, #10]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cd8:	f7ff f978 	bl	8002fcc <HAL_GetTick>
 8003cdc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b20      	cmp	r3, #32
 8003ce8:	f040 80e0 	bne.w	8003eac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	2319      	movs	r3, #25
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	4970      	ldr	r1, [pc, #448]	; (8003eb8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f000 fd92 	bl	8004820 <I2C_WaitOnFlagUntilTimeout>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003d02:	2302      	movs	r3, #2
 8003d04:	e0d3      	b.n	8003eae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d101      	bne.n	8003d14 <HAL_I2C_Master_Transmit+0x50>
 8003d10:	2302      	movs	r3, #2
 8003d12:	e0cc      	b.n	8003eae <HAL_I2C_Master_Transmit+0x1ea>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d007      	beq.n	8003d3a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f042 0201 	orr.w	r2, r2, #1
 8003d38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2221      	movs	r2, #33	; 0x21
 8003d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2210      	movs	r2, #16
 8003d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	893a      	ldrh	r2, [r7, #8]
 8003d6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	4a50      	ldr	r2, [pc, #320]	; (8003ebc <HAL_I2C_Master_Transmit+0x1f8>)
 8003d7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d7c:	8979      	ldrh	r1, [r7, #10]
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	6a3a      	ldr	r2, [r7, #32]
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f000 fbfe 	bl	8004584 <I2C_MasterRequestWrite>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e08d      	b.n	8003eae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d92:	2300      	movs	r3, #0
 8003d94:	613b      	str	r3, [r7, #16]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	613b      	str	r3, [r7, #16]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	613b      	str	r3, [r7, #16]
 8003da6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003da8:	e066      	b.n	8003e78 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	6a39      	ldr	r1, [r7, #32]
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f000 fe0c 	bl	80049cc <I2C_WaitOnTXEFlagUntilTimeout>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00d      	beq.n	8003dd6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	d107      	bne.n	8003dd2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dd0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e06b      	b.n	8003eae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	781a      	ldrb	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	1c5a      	adds	r2, r3, #1
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	3b01      	subs	r3, #1
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	f003 0304 	and.w	r3, r3, #4
 8003e10:	2b04      	cmp	r3, #4
 8003e12:	d11b      	bne.n	8003e4c <HAL_I2C_Master_Transmit+0x188>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d017      	beq.n	8003e4c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	781a      	ldrb	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2c:	1c5a      	adds	r2, r3, #1
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e44:	3b01      	subs	r3, #1
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	6a39      	ldr	r1, [r7, #32]
 8003e50:	68f8      	ldr	r0, [r7, #12]
 8003e52:	f000 fdfc 	bl	8004a4e <I2C_WaitOnBTFFlagUntilTimeout>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00d      	beq.n	8003e78 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e60:	2b04      	cmp	r3, #4
 8003e62:	d107      	bne.n	8003e74 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e72:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e01a      	b.n	8003eae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d194      	bne.n	8003daa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2220      	movs	r2, #32
 8003e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	e000      	b.n	8003eae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003eac:	2302      	movs	r3, #2
  }
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	00100002 	.word	0x00100002
 8003ebc:	ffff0000 	.word	0xffff0000

08003ec0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b08c      	sub	sp, #48	; 0x30
 8003ec4:	af02      	add	r7, sp, #8
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	607a      	str	r2, [r7, #4]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	460b      	mov	r3, r1
 8003ece:	817b      	strh	r3, [r7, #10]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ed4:	f7ff f87a 	bl	8002fcc <HAL_GetTick>
 8003ed8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b20      	cmp	r3, #32
 8003ee4:	f040 820b 	bne.w	80042fe <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	2319      	movs	r3, #25
 8003eee:	2201      	movs	r2, #1
 8003ef0:	497c      	ldr	r1, [pc, #496]	; (80040e4 <HAL_I2C_Master_Receive+0x224>)
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 fc94 	bl	8004820 <I2C_WaitOnFlagUntilTimeout>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003efe:	2302      	movs	r3, #2
 8003f00:	e1fe      	b.n	8004300 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d101      	bne.n	8003f10 <HAL_I2C_Master_Receive+0x50>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	e1f7      	b.n	8004300 <HAL_I2C_Master_Receive+0x440>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d007      	beq.n	8003f36 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f042 0201 	orr.w	r2, r2, #1
 8003f34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2222      	movs	r2, #34	; 0x22
 8003f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2210      	movs	r2, #16
 8003f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	893a      	ldrh	r2, [r7, #8]
 8003f66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4a5c      	ldr	r2, [pc, #368]	; (80040e8 <HAL_I2C_Master_Receive+0x228>)
 8003f76:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f78:	8979      	ldrh	r1, [r7, #10]
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 fb82 	bl	8004688 <I2C_MasterRequestRead>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	e1b8      	b.n	8004300 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d113      	bne.n	8003fbe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f96:	2300      	movs	r3, #0
 8003f98:	623b      	str	r3, [r7, #32]
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	695b      	ldr	r3, [r3, #20]
 8003fa0:	623b      	str	r3, [r7, #32]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	699b      	ldr	r3, [r3, #24]
 8003fa8:	623b      	str	r3, [r7, #32]
 8003faa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	e18c      	b.n	80042d8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d11b      	bne.n	8003ffe <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61fb      	str	r3, [r7, #28]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	61fb      	str	r3, [r7, #28]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	61fb      	str	r3, [r7, #28]
 8003fea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ffa:	601a      	str	r2, [r3, #0]
 8003ffc:	e16c      	b.n	80042d8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004002:	2b02      	cmp	r3, #2
 8004004:	d11b      	bne.n	800403e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004014:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004024:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004026:	2300      	movs	r3, #0
 8004028:	61bb      	str	r3, [r7, #24]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	61bb      	str	r3, [r7, #24]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	61bb      	str	r3, [r7, #24]
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	e14c      	b.n	80042d8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800404c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800404e:	2300      	movs	r3, #0
 8004050:	617b      	str	r3, [r7, #20]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	617b      	str	r3, [r7, #20]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	617b      	str	r3, [r7, #20]
 8004062:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004064:	e138      	b.n	80042d8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800406a:	2b03      	cmp	r3, #3
 800406c:	f200 80f1 	bhi.w	8004252 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004074:	2b01      	cmp	r3, #1
 8004076:	d123      	bne.n	80040c0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800407a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f000 fd27 	bl	8004ad0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e139      	b.n	8004300 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	691a      	ldr	r2, [r3, #16]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	b2d2      	uxtb	r2, r2
 8004098:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	1c5a      	adds	r2, r3, #1
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a8:	3b01      	subs	r3, #1
 80040aa:	b29a      	uxth	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	3b01      	subs	r3, #1
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040be:	e10b      	b.n	80042d8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d14e      	bne.n	8004166 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ce:	2200      	movs	r2, #0
 80040d0:	4906      	ldr	r1, [pc, #24]	; (80040ec <HAL_I2C_Master_Receive+0x22c>)
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f000 fba4 	bl	8004820 <I2C_WaitOnFlagUntilTimeout>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d008      	beq.n	80040f0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e10e      	b.n	8004300 <HAL_I2C_Master_Receive+0x440>
 80040e2:	bf00      	nop
 80040e4:	00100002 	.word	0x00100002
 80040e8:	ffff0000 	.word	0xffff0000
 80040ec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	691a      	ldr	r2, [r3, #16]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410a:	b2d2      	uxtb	r2, r2
 800410c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004112:	1c5a      	adds	r2, r3, #1
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800411c:	3b01      	subs	r3, #1
 800411e:	b29a      	uxth	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004128:	b29b      	uxth	r3, r3
 800412a:	3b01      	subs	r3, #1
 800412c:	b29a      	uxth	r2, r3
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	691a      	ldr	r2, [r3, #16]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	b2d2      	uxtb	r2, r2
 800413e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	1c5a      	adds	r2, r3, #1
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800414e:	3b01      	subs	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415a:	b29b      	uxth	r3, r3
 800415c:	3b01      	subs	r3, #1
 800415e:	b29a      	uxth	r2, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004164:	e0b8      	b.n	80042d8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416c:	2200      	movs	r2, #0
 800416e:	4966      	ldr	r1, [pc, #408]	; (8004308 <HAL_I2C_Master_Receive+0x448>)
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 fb55 	bl	8004820 <I2C_WaitOnFlagUntilTimeout>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e0bf      	b.n	8004300 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800418e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	691a      	ldr	r2, [r3, #16]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	b2d2      	uxtb	r2, r2
 800419c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a2:	1c5a      	adds	r2, r3, #1
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ac:	3b01      	subs	r3, #1
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	3b01      	subs	r3, #1
 80041bc:	b29a      	uxth	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c8:	2200      	movs	r2, #0
 80041ca:	494f      	ldr	r1, [pc, #316]	; (8004308 <HAL_I2C_Master_Receive+0x448>)
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f000 fb27 	bl	8004820 <I2C_WaitOnFlagUntilTimeout>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e091      	b.n	8004300 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691a      	ldr	r2, [r3, #16]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	1c5a      	adds	r2, r3, #1
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004208:	3b01      	subs	r3, #1
 800420a:	b29a      	uxth	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004214:	b29b      	uxth	r3, r3
 8004216:	3b01      	subs	r3, #1
 8004218:	b29a      	uxth	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	691a      	ldr	r2, [r3, #16]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	b2d2      	uxtb	r2, r2
 800422a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	1c5a      	adds	r2, r3, #1
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800423a:	3b01      	subs	r3, #1
 800423c:	b29a      	uxth	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004246:	b29b      	uxth	r3, r3
 8004248:	3b01      	subs	r3, #1
 800424a:	b29a      	uxth	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004250:	e042      	b.n	80042d8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004254:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f000 fc3a 	bl	8004ad0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e04c      	b.n	8004300 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	691a      	ldr	r2, [r3, #16]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004270:	b2d2      	uxtb	r2, r2
 8004272:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	1c5a      	adds	r2, r3, #1
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004282:	3b01      	subs	r3, #1
 8004284:	b29a      	uxth	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428e:	b29b      	uxth	r3, r3
 8004290:	3b01      	subs	r3, #1
 8004292:	b29a      	uxth	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	f003 0304 	and.w	r3, r3, #4
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d118      	bne.n	80042d8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	691a      	ldr	r2, [r3, #16]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b0:	b2d2      	uxtb	r2, r2
 80042b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	1c5a      	adds	r2, r3, #1
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042c2:	3b01      	subs	r3, #1
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	3b01      	subs	r3, #1
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f47f aec2 	bne.w	8004066 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2220      	movs	r2, #32
 80042e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	e000      	b.n	8004300 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80042fe:	2302      	movs	r3, #2
  }
}
 8004300:	4618      	mov	r0, r3
 8004302:	3728      	adds	r7, #40	; 0x28
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	00010004 	.word	0x00010004

0800430c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b08a      	sub	sp, #40	; 0x28
 8004310:	af02      	add	r7, sp, #8
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	607a      	str	r2, [r7, #4]
 8004316:	603b      	str	r3, [r7, #0]
 8004318:	460b      	mov	r3, r1
 800431a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800431c:	f7fe fe56 	bl	8002fcc <HAL_GetTick>
 8004320:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004322:	2301      	movs	r3, #1
 8004324:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b20      	cmp	r3, #32
 8004330:	f040 8110 	bne.w	8004554 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	2319      	movs	r3, #25
 800433a:	2201      	movs	r2, #1
 800433c:	4988      	ldr	r1, [pc, #544]	; (8004560 <HAL_I2C_IsDeviceReady+0x254>)
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f000 fa6e 	bl	8004820 <I2C_WaitOnFlagUntilTimeout>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800434a:	2302      	movs	r3, #2
 800434c:	e103      	b.n	8004556 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004354:	2b01      	cmp	r3, #1
 8004356:	d101      	bne.n	800435c <HAL_I2C_IsDeviceReady+0x50>
 8004358:	2302      	movs	r3, #2
 800435a:	e0fc      	b.n	8004556 <HAL_I2C_IsDeviceReady+0x24a>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b01      	cmp	r3, #1
 8004370:	d007      	beq.n	8004382 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f042 0201 	orr.w	r2, r2, #1
 8004380:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004390:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2224      	movs	r2, #36	; 0x24
 8004396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	4a70      	ldr	r2, [pc, #448]	; (8004564 <HAL_I2C_IsDeviceReady+0x258>)
 80043a4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043b4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	9300      	str	r3, [sp, #0]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	2200      	movs	r2, #0
 80043be:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 fa2c 	bl	8004820 <I2C_WaitOnFlagUntilTimeout>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00c      	beq.n	80043e8 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043e2:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e0b6      	b.n	8004556 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043e8:	897b      	ldrh	r3, [r7, #10]
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	461a      	mov	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043f6:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80043f8:	f7fe fde8 	bl	8002fcc <HAL_GetTick>
 80043fc:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	695b      	ldr	r3, [r3, #20]
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b02      	cmp	r3, #2
 800440a:	bf0c      	ite	eq
 800440c:	2301      	moveq	r3, #1
 800440e:	2300      	movne	r3, #0
 8004410:	b2db      	uxtb	r3, r3
 8004412:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800441e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004422:	bf0c      	ite	eq
 8004424:	2301      	moveq	r3, #1
 8004426:	2300      	movne	r3, #0
 8004428:	b2db      	uxtb	r3, r3
 800442a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800442c:	e025      	b.n	800447a <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800442e:	f7fe fdcd 	bl	8002fcc <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	429a      	cmp	r2, r3
 800443c:	d302      	bcc.n	8004444 <HAL_I2C_IsDeviceReady+0x138>
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d103      	bne.n	800444c <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	22a0      	movs	r2, #160	; 0xa0
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b02      	cmp	r3, #2
 8004458:	bf0c      	ite	eq
 800445a:	2301      	moveq	r3, #1
 800445c:	2300      	movne	r3, #0
 800445e:	b2db      	uxtb	r3, r3
 8004460:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800446c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004470:	bf0c      	ite	eq
 8004472:	2301      	moveq	r3, #1
 8004474:	2300      	movne	r3, #0
 8004476:	b2db      	uxtb	r3, r3
 8004478:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2ba0      	cmp	r3, #160	; 0xa0
 8004484:	d005      	beq.n	8004492 <HAL_I2C_IsDeviceReady+0x186>
 8004486:	7dfb      	ldrb	r3, [r7, #23]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d102      	bne.n	8004492 <HAL_I2C_IsDeviceReady+0x186>
 800448c:	7dbb      	ldrb	r3, [r7, #22]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0cd      	beq.n	800442e <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2220      	movs	r2, #32
 8004496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d129      	bne.n	80044fc <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044b6:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044b8:	2300      	movs	r3, #0
 80044ba:	613b      	str	r3, [r7, #16]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	613b      	str	r3, [r7, #16]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	613b      	str	r3, [r7, #16]
 80044cc:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	2319      	movs	r3, #25
 80044d4:	2201      	movs	r2, #1
 80044d6:	4922      	ldr	r1, [pc, #136]	; (8004560 <HAL_I2C_IsDeviceReady+0x254>)
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f000 f9a1 	bl	8004820 <I2C_WaitOnFlagUntilTimeout>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e036      	b.n	8004556 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2220      	movs	r2, #32
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80044f8:	2300      	movs	r3, #0
 80044fa:	e02c      	b.n	8004556 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800450a:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004514:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	2319      	movs	r3, #25
 800451c:	2201      	movs	r2, #1
 800451e:	4910      	ldr	r1, [pc, #64]	; (8004560 <HAL_I2C_IsDeviceReady+0x254>)
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 f97d 	bl	8004820 <I2C_WaitOnFlagUntilTimeout>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e012      	b.n	8004556 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	3301      	adds	r3, #1
 8004534:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	429a      	cmp	r2, r3
 800453c:	f4ff af33 	bcc.w	80043a6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2220      	movs	r2, #32
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e000      	b.n	8004556 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8004554:	2302      	movs	r3, #2
  }
}
 8004556:	4618      	mov	r0, r3
 8004558:	3720      	adds	r7, #32
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	00100002 	.word	0x00100002
 8004564:	ffff0000 	.word	0xffff0000

08004568 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004576:	b2db      	uxtb	r3, r3
}
 8004578:	4618      	mov	r0, r3
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b088      	sub	sp, #32
 8004588:	af02      	add	r7, sp, #8
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	607a      	str	r2, [r7, #4]
 800458e:	603b      	str	r3, [r7, #0]
 8004590:	460b      	mov	r3, r1
 8004592:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004598:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	2b08      	cmp	r3, #8
 800459e:	d006      	beq.n	80045ae <I2C_MasterRequestWrite+0x2a>
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d003      	beq.n	80045ae <I2C_MasterRequestWrite+0x2a>
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045ac:	d108      	bne.n	80045c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045bc:	601a      	str	r2, [r3, #0]
 80045be:	e00b      	b.n	80045d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c4:	2b12      	cmp	r3, #18
 80045c6:	d107      	bne.n	80045d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f000 f91b 	bl	8004820 <I2C_WaitOnFlagUntilTimeout>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00c      	beq.n	800460a <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d003      	beq.n	8004606 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004604:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e035      	b.n	8004676 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004612:	d108      	bne.n	8004626 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004614:	897b      	ldrh	r3, [r7, #10]
 8004616:	b2db      	uxtb	r3, r3
 8004618:	461a      	mov	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004622:	611a      	str	r2, [r3, #16]
 8004624:	e01b      	b.n	800465e <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004626:	897b      	ldrh	r3, [r7, #10]
 8004628:	11db      	asrs	r3, r3, #7
 800462a:	b2db      	uxtb	r3, r3
 800462c:	f003 0306 	and.w	r3, r3, #6
 8004630:	b2db      	uxtb	r3, r3
 8004632:	f063 030f 	orn	r3, r3, #15
 8004636:	b2da      	uxtb	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	490f      	ldr	r1, [pc, #60]	; (8004680 <I2C_MasterRequestWrite+0xfc>)
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 f942 	bl	80048ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e010      	b.n	8004676 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004654:	897b      	ldrh	r3, [r7, #10]
 8004656:	b2da      	uxtb	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	4908      	ldr	r1, [pc, #32]	; (8004684 <I2C_MasterRequestWrite+0x100>)
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 f932 	bl	80048ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e000      	b.n	8004676 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3718      	adds	r7, #24
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	00010008 	.word	0x00010008
 8004684:	00010002 	.word	0x00010002

08004688 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b088      	sub	sp, #32
 800468c:	af02      	add	r7, sp, #8
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	607a      	str	r2, [r7, #4]
 8004692:	603b      	str	r3, [r7, #0]
 8004694:	460b      	mov	r3, r1
 8004696:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046ac:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	2b08      	cmp	r3, #8
 80046b2:	d006      	beq.n	80046c2 <I2C_MasterRequestRead+0x3a>
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d003      	beq.n	80046c2 <I2C_MasterRequestRead+0x3a>
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046c0:	d108      	bne.n	80046d4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046d0:	601a      	str	r2, [r3, #0]
 80046d2:	e00b      	b.n	80046ec <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d8:	2b11      	cmp	r3, #17
 80046da:	d107      	bne.n	80046ec <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	9300      	str	r3, [sp, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f000 f891 	bl	8004820 <I2C_WaitOnFlagUntilTimeout>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00c      	beq.n	800471e <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004718:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e078      	b.n	8004810 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004726:	d108      	bne.n	800473a <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004728:	897b      	ldrh	r3, [r7, #10]
 800472a:	b2db      	uxtb	r3, r3
 800472c:	f043 0301 	orr.w	r3, r3, #1
 8004730:	b2da      	uxtb	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	611a      	str	r2, [r3, #16]
 8004738:	e05e      	b.n	80047f8 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800473a:	897b      	ldrh	r3, [r7, #10]
 800473c:	11db      	asrs	r3, r3, #7
 800473e:	b2db      	uxtb	r3, r3
 8004740:	f003 0306 	and.w	r3, r3, #6
 8004744:	b2db      	uxtb	r3, r3
 8004746:	f063 030f 	orn	r3, r3, #15
 800474a:	b2da      	uxtb	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	4930      	ldr	r1, [pc, #192]	; (8004818 <I2C_MasterRequestRead+0x190>)
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f000 f8b8 	bl	80048ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e053      	b.n	8004810 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004768:	897b      	ldrh	r3, [r7, #10]
 800476a:	b2da      	uxtb	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	4929      	ldr	r1, [pc, #164]	; (800481c <I2C_MasterRequestRead+0x194>)
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	f000 f8a8 	bl	80048ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e043      	b.n	8004810 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004788:	2300      	movs	r3, #0
 800478a:	613b      	str	r3, [r7, #16]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	613b      	str	r3, [r7, #16]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	613b      	str	r3, [r7, #16]
 800479c:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047ac:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 f830 	bl	8004820 <I2C_WaitOnFlagUntilTimeout>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00c      	beq.n	80047e0 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d003      	beq.n	80047dc <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047da:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e017      	b.n	8004810 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80047e0:	897b      	ldrh	r3, [r7, #10]
 80047e2:	11db      	asrs	r3, r3, #7
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	f003 0306 	and.w	r3, r3, #6
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	f063 030e 	orn	r3, r3, #14
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	4907      	ldr	r1, [pc, #28]	; (800481c <I2C_MasterRequestRead+0x194>)
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 f865 	bl	80048ce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e000      	b.n	8004810 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3718      	adds	r7, #24
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	00010008 	.word	0x00010008
 800481c:	00010002 	.word	0x00010002

08004820 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	603b      	str	r3, [r7, #0]
 800482c:	4613      	mov	r3, r2
 800482e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004830:	e025      	b.n	800487e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004838:	d021      	beq.n	800487e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800483a:	f7fe fbc7 	bl	8002fcc <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	429a      	cmp	r2, r3
 8004848:	d302      	bcc.n	8004850 <I2C_WaitOnFlagUntilTimeout+0x30>
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d116      	bne.n	800487e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2220      	movs	r2, #32
 800485a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486a:	f043 0220 	orr.w	r2, r3, #32
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e023      	b.n	80048c6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	0c1b      	lsrs	r3, r3, #16
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b01      	cmp	r3, #1
 8004886:	d10d      	bne.n	80048a4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	43da      	mvns	r2, r3
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	4013      	ands	r3, r2
 8004894:	b29b      	uxth	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	bf0c      	ite	eq
 800489a:	2301      	moveq	r3, #1
 800489c:	2300      	movne	r3, #0
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	461a      	mov	r2, r3
 80048a2:	e00c      	b.n	80048be <I2C_WaitOnFlagUntilTimeout+0x9e>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	43da      	mvns	r2, r3
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	4013      	ands	r3, r2
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	bf0c      	ite	eq
 80048b6:	2301      	moveq	r3, #1
 80048b8:	2300      	movne	r3, #0
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	461a      	mov	r2, r3
 80048be:	79fb      	ldrb	r3, [r7, #7]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d0b6      	beq.n	8004832 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}

080048ce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80048ce:	b580      	push	{r7, lr}
 80048d0:	b084      	sub	sp, #16
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	60f8      	str	r0, [r7, #12]
 80048d6:	60b9      	str	r1, [r7, #8]
 80048d8:	607a      	str	r2, [r7, #4]
 80048da:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048dc:	e051      	b.n	8004982 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	695b      	ldr	r3, [r3, #20]
 80048e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ec:	d123      	bne.n	8004936 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048fc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004906:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2220      	movs	r2, #32
 8004912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004922:	f043 0204 	orr.w	r2, r3, #4
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e046      	b.n	80049c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800493c:	d021      	beq.n	8004982 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800493e:	f7fe fb45 	bl	8002fcc <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	429a      	cmp	r2, r3
 800494c:	d302      	bcc.n	8004954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d116      	bne.n	8004982 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2200      	movs	r2, #0
 8004958:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2220      	movs	r2, #32
 800495e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496e:	f043 0220 	orr.w	r2, r3, #32
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e020      	b.n	80049c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	0c1b      	lsrs	r3, r3, #16
 8004986:	b2db      	uxtb	r3, r3
 8004988:	2b01      	cmp	r3, #1
 800498a:	d10c      	bne.n	80049a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	43da      	mvns	r2, r3
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	4013      	ands	r3, r2
 8004998:	b29b      	uxth	r3, r3
 800499a:	2b00      	cmp	r3, #0
 800499c:	bf14      	ite	ne
 800499e:	2301      	movne	r3, #1
 80049a0:	2300      	moveq	r3, #0
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	e00b      	b.n	80049be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	699b      	ldr	r3, [r3, #24]
 80049ac:	43da      	mvns	r2, r3
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	4013      	ands	r3, r2
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	bf14      	ite	ne
 80049b8:	2301      	movne	r3, #1
 80049ba:	2300      	moveq	r3, #0
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d18d      	bne.n	80048de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049d8:	e02d      	b.n	8004a36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f000 f8ce 	bl	8004b7c <I2C_IsAcknowledgeFailed>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e02d      	b.n	8004a46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049f0:	d021      	beq.n	8004a36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049f2:	f7fe faeb 	bl	8002fcc <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d302      	bcc.n	8004a08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d116      	bne.n	8004a36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2220      	movs	r2, #32
 8004a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a22:	f043 0220 	orr.w	r2, r3, #32
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e007      	b.n	8004a46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a40:	2b80      	cmp	r3, #128	; 0x80
 8004a42:	d1ca      	bne.n	80049da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b084      	sub	sp, #16
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	60f8      	str	r0, [r7, #12]
 8004a56:	60b9      	str	r1, [r7, #8]
 8004a58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a5a:	e02d      	b.n	8004ab8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 f88d 	bl	8004b7c <I2C_IsAcknowledgeFailed>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e02d      	b.n	8004ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a72:	d021      	beq.n	8004ab8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a74:	f7fe faaa 	bl	8002fcc <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d302      	bcc.n	8004a8a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d116      	bne.n	8004ab8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2220      	movs	r2, #32
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa4:	f043 0220 	orr.w	r2, r3, #32
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e007      	b.n	8004ac8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	f003 0304 	and.w	r3, r3, #4
 8004ac2:	2b04      	cmp	r3, #4
 8004ac4:	d1ca      	bne.n	8004a5c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004adc:	e042      	b.n	8004b64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	f003 0310 	and.w	r3, r3, #16
 8004ae8:	2b10      	cmp	r3, #16
 8004aea:	d119      	bne.n	8004b20 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f06f 0210 	mvn.w	r2, #16
 8004af4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2220      	movs	r2, #32
 8004b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e029      	b.n	8004b74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b20:	f7fe fa54 	bl	8002fcc <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	1ad3      	subs	r3, r2, r3
 8004b2a:	68ba      	ldr	r2, [r7, #8]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d302      	bcc.n	8004b36 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d116      	bne.n	8004b64 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b50:	f043 0220 	orr.w	r2, r3, #32
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e007      	b.n	8004b74 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6e:	2b40      	cmp	r3, #64	; 0x40
 8004b70:	d1b5      	bne.n	8004ade <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b92:	d11b      	bne.n	8004bcc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b9c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb8:	f043 0204 	orr.w	r2, r3, #4
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e000      	b.n	8004bce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
	...

08004bdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e25b      	b.n	80050a6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0301 	and.w	r3, r3, #1
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d075      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bfa:	4ba3      	ldr	r3, [pc, #652]	; (8004e88 <HAL_RCC_OscConfig+0x2ac>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f003 030c 	and.w	r3, r3, #12
 8004c02:	2b04      	cmp	r3, #4
 8004c04:	d00c      	beq.n	8004c20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c06:	4ba0      	ldr	r3, [pc, #640]	; (8004e88 <HAL_RCC_OscConfig+0x2ac>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c0e:	2b08      	cmp	r3, #8
 8004c10:	d112      	bne.n	8004c38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c12:	4b9d      	ldr	r3, [pc, #628]	; (8004e88 <HAL_RCC_OscConfig+0x2ac>)
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c1e:	d10b      	bne.n	8004c38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c20:	4b99      	ldr	r3, [pc, #612]	; (8004e88 <HAL_RCC_OscConfig+0x2ac>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d05b      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x108>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d157      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e236      	b.n	80050a6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c40:	d106      	bne.n	8004c50 <HAL_RCC_OscConfig+0x74>
 8004c42:	4b91      	ldr	r3, [pc, #580]	; (8004e88 <HAL_RCC_OscConfig+0x2ac>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a90      	ldr	r2, [pc, #576]	; (8004e88 <HAL_RCC_OscConfig+0x2ac>)
 8004c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c4c:	6013      	str	r3, [r2, #0]
 8004c4e:	e01d      	b.n	8004c8c <HAL_RCC_OscConfig+0xb0>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c58:	d10c      	bne.n	8004c74 <HAL_RCC_OscConfig+0x98>
 8004c5a:	4b8b      	ldr	r3, [pc, #556]	; (8004e88 <HAL_RCC_OscConfig+0x2ac>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a8a      	ldr	r2, [pc, #552]	; (8004e88 <HAL_RCC_OscConfig+0x2ac>)
 8004c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c64:	6013      	str	r3, [r2, #0]
 8004c66:	4b88      	ldr	r3, [pc, #544]	; (8004e88 <HAL_RCC_OscConfig+0x2ac>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a87      	ldr	r2, [pc, #540]	; (8004e88 <HAL_RCC_OscConfig+0x2ac>)
 8004c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c70:	6013      	str	r3, [r2, #0]
 8004c72:	e00b      	b.n	8004c8c <HAL_RCC_OscConfig+0xb0>
 8004c74:	4b84      	ldr	r3, [pc, #528]	; (8004e88 <HAL_RCC_OscConfig+0x2ac>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a83      	ldr	r2, [pc, #524]	; (8004e88 <HAL_RCC_OscConfig+0x2ac>)
 8004c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c7e:	6013      	str	r3, [r2, #0]
 8004c80:	4b81      	ldr	r3, [pc, #516]	; (8004e88 <HAL_RCC_OscConfig+0x2ac>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a80      	ldr	r2, [pc, #512]	; (8004e88 <HAL_RCC_OscConfig+0x2ac>)
 8004c86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d013      	beq.n	8004cbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c94:	f7fe f99a 	bl	8002fcc <HAL_GetTick>
 8004c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c9a:	e008      	b.n	8004cae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c9c:	f7fe f996 	bl	8002fcc <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b64      	cmp	r3, #100	; 0x64
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e1fb      	b.n	80050a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cae:	4b76      	ldr	r3, [pc, #472]	; (8004e88 <HAL_RCC_OscConfig+0x2ac>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d0f0      	beq.n	8004c9c <HAL_RCC_OscConfig+0xc0>
 8004cba:	e014      	b.n	8004ce6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cbc:	f7fe f986 	bl	8002fcc <HAL_GetTick>
 8004cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cc4:	f7fe f982 	bl	8002fcc <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b64      	cmp	r3, #100	; 0x64
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e1e7      	b.n	80050a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cd6:	4b6c      	ldr	r3, [pc, #432]	; (8004e88 <HAL_RCC_OscConfig+0x2ac>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1f0      	bne.n	8004cc4 <HAL_RCC_OscConfig+0xe8>
 8004ce2:	e000      	b.n	8004ce6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ce4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0302 	and.w	r3, r3, #2
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d063      	beq.n	8004dba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cf2:	4b65      	ldr	r3, [pc, #404]	; (8004e88 <HAL_RCC_OscConfig+0x2ac>)
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f003 030c 	and.w	r3, r3, #12
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00b      	beq.n	8004d16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cfe:	4b62      	ldr	r3, [pc, #392]	; (8004e88 <HAL_RCC_OscConfig+0x2ac>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d06:	2b08      	cmp	r3, #8
 8004d08:	d11c      	bne.n	8004d44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d0a:	4b5f      	ldr	r3, [pc, #380]	; (8004e88 <HAL_RCC_OscConfig+0x2ac>)
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d116      	bne.n	8004d44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d16:	4b5c      	ldr	r3, [pc, #368]	; (8004e88 <HAL_RCC_OscConfig+0x2ac>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d005      	beq.n	8004d2e <HAL_RCC_OscConfig+0x152>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d001      	beq.n	8004d2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e1bb      	b.n	80050a6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d2e:	4b56      	ldr	r3, [pc, #344]	; (8004e88 <HAL_RCC_OscConfig+0x2ac>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	4952      	ldr	r1, [pc, #328]	; (8004e88 <HAL_RCC_OscConfig+0x2ac>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d42:	e03a      	b.n	8004dba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d020      	beq.n	8004d8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d4c:	4b4f      	ldr	r3, [pc, #316]	; (8004e8c <HAL_RCC_OscConfig+0x2b0>)
 8004d4e:	2201      	movs	r2, #1
 8004d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d52:	f7fe f93b 	bl	8002fcc <HAL_GetTick>
 8004d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d58:	e008      	b.n	8004d6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d5a:	f7fe f937 	bl	8002fcc <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d901      	bls.n	8004d6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e19c      	b.n	80050a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d6c:	4b46      	ldr	r3, [pc, #280]	; (8004e88 <HAL_RCC_OscConfig+0x2ac>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0302 	and.w	r3, r3, #2
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d0f0      	beq.n	8004d5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d78:	4b43      	ldr	r3, [pc, #268]	; (8004e88 <HAL_RCC_OscConfig+0x2ac>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	00db      	lsls	r3, r3, #3
 8004d86:	4940      	ldr	r1, [pc, #256]	; (8004e88 <HAL_RCC_OscConfig+0x2ac>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	600b      	str	r3, [r1, #0]
 8004d8c:	e015      	b.n	8004dba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d8e:	4b3f      	ldr	r3, [pc, #252]	; (8004e8c <HAL_RCC_OscConfig+0x2b0>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d94:	f7fe f91a 	bl	8002fcc <HAL_GetTick>
 8004d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d9a:	e008      	b.n	8004dae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d9c:	f7fe f916 	bl	8002fcc <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e17b      	b.n	80050a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dae:	4b36      	ldr	r3, [pc, #216]	; (8004e88 <HAL_RCC_OscConfig+0x2ac>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1f0      	bne.n	8004d9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0308 	and.w	r3, r3, #8
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d030      	beq.n	8004e28 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d016      	beq.n	8004dfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dce:	4b30      	ldr	r3, [pc, #192]	; (8004e90 <HAL_RCC_OscConfig+0x2b4>)
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dd4:	f7fe f8fa 	bl	8002fcc <HAL_GetTick>
 8004dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dda:	e008      	b.n	8004dee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ddc:	f7fe f8f6 	bl	8002fcc <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e15b      	b.n	80050a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dee:	4b26      	ldr	r3, [pc, #152]	; (8004e88 <HAL_RCC_OscConfig+0x2ac>)
 8004df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d0f0      	beq.n	8004ddc <HAL_RCC_OscConfig+0x200>
 8004dfa:	e015      	b.n	8004e28 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dfc:	4b24      	ldr	r3, [pc, #144]	; (8004e90 <HAL_RCC_OscConfig+0x2b4>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e02:	f7fe f8e3 	bl	8002fcc <HAL_GetTick>
 8004e06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e08:	e008      	b.n	8004e1c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e0a:	f7fe f8df 	bl	8002fcc <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d901      	bls.n	8004e1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e144      	b.n	80050a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e1c:	4b1a      	ldr	r3, [pc, #104]	; (8004e88 <HAL_RCC_OscConfig+0x2ac>)
 8004e1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e20:	f003 0302 	and.w	r3, r3, #2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1f0      	bne.n	8004e0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0304 	and.w	r3, r3, #4
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f000 80a0 	beq.w	8004f76 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e36:	2300      	movs	r3, #0
 8004e38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e3a:	4b13      	ldr	r3, [pc, #76]	; (8004e88 <HAL_RCC_OscConfig+0x2ac>)
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10f      	bne.n	8004e66 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e46:	2300      	movs	r3, #0
 8004e48:	60bb      	str	r3, [r7, #8]
 8004e4a:	4b0f      	ldr	r3, [pc, #60]	; (8004e88 <HAL_RCC_OscConfig+0x2ac>)
 8004e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4e:	4a0e      	ldr	r2, [pc, #56]	; (8004e88 <HAL_RCC_OscConfig+0x2ac>)
 8004e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e54:	6413      	str	r3, [r2, #64]	; 0x40
 8004e56:	4b0c      	ldr	r3, [pc, #48]	; (8004e88 <HAL_RCC_OscConfig+0x2ac>)
 8004e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e5e:	60bb      	str	r3, [r7, #8]
 8004e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e62:	2301      	movs	r3, #1
 8004e64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e66:	4b0b      	ldr	r3, [pc, #44]	; (8004e94 <HAL_RCC_OscConfig+0x2b8>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d121      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e72:	4b08      	ldr	r3, [pc, #32]	; (8004e94 <HAL_RCC_OscConfig+0x2b8>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a07      	ldr	r2, [pc, #28]	; (8004e94 <HAL_RCC_OscConfig+0x2b8>)
 8004e78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e7e:	f7fe f8a5 	bl	8002fcc <HAL_GetTick>
 8004e82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e84:	e011      	b.n	8004eaa <HAL_RCC_OscConfig+0x2ce>
 8004e86:	bf00      	nop
 8004e88:	40023800 	.word	0x40023800
 8004e8c:	42470000 	.word	0x42470000
 8004e90:	42470e80 	.word	0x42470e80
 8004e94:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e98:	f7fe f898 	bl	8002fcc <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e0fd      	b.n	80050a6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eaa:	4b81      	ldr	r3, [pc, #516]	; (80050b0 <HAL_RCC_OscConfig+0x4d4>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0f0      	beq.n	8004e98 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d106      	bne.n	8004ecc <HAL_RCC_OscConfig+0x2f0>
 8004ebe:	4b7d      	ldr	r3, [pc, #500]	; (80050b4 <HAL_RCC_OscConfig+0x4d8>)
 8004ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec2:	4a7c      	ldr	r2, [pc, #496]	; (80050b4 <HAL_RCC_OscConfig+0x4d8>)
 8004ec4:	f043 0301 	orr.w	r3, r3, #1
 8004ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8004eca:	e01c      	b.n	8004f06 <HAL_RCC_OscConfig+0x32a>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	2b05      	cmp	r3, #5
 8004ed2:	d10c      	bne.n	8004eee <HAL_RCC_OscConfig+0x312>
 8004ed4:	4b77      	ldr	r3, [pc, #476]	; (80050b4 <HAL_RCC_OscConfig+0x4d8>)
 8004ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed8:	4a76      	ldr	r2, [pc, #472]	; (80050b4 <HAL_RCC_OscConfig+0x4d8>)
 8004eda:	f043 0304 	orr.w	r3, r3, #4
 8004ede:	6713      	str	r3, [r2, #112]	; 0x70
 8004ee0:	4b74      	ldr	r3, [pc, #464]	; (80050b4 <HAL_RCC_OscConfig+0x4d8>)
 8004ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee4:	4a73      	ldr	r2, [pc, #460]	; (80050b4 <HAL_RCC_OscConfig+0x4d8>)
 8004ee6:	f043 0301 	orr.w	r3, r3, #1
 8004eea:	6713      	str	r3, [r2, #112]	; 0x70
 8004eec:	e00b      	b.n	8004f06 <HAL_RCC_OscConfig+0x32a>
 8004eee:	4b71      	ldr	r3, [pc, #452]	; (80050b4 <HAL_RCC_OscConfig+0x4d8>)
 8004ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef2:	4a70      	ldr	r2, [pc, #448]	; (80050b4 <HAL_RCC_OscConfig+0x4d8>)
 8004ef4:	f023 0301 	bic.w	r3, r3, #1
 8004ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8004efa:	4b6e      	ldr	r3, [pc, #440]	; (80050b4 <HAL_RCC_OscConfig+0x4d8>)
 8004efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efe:	4a6d      	ldr	r2, [pc, #436]	; (80050b4 <HAL_RCC_OscConfig+0x4d8>)
 8004f00:	f023 0304 	bic.w	r3, r3, #4
 8004f04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d015      	beq.n	8004f3a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f0e:	f7fe f85d 	bl	8002fcc <HAL_GetTick>
 8004f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f14:	e00a      	b.n	8004f2c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f16:	f7fe f859 	bl	8002fcc <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d901      	bls.n	8004f2c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e0bc      	b.n	80050a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f2c:	4b61      	ldr	r3, [pc, #388]	; (80050b4 <HAL_RCC_OscConfig+0x4d8>)
 8004f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d0ee      	beq.n	8004f16 <HAL_RCC_OscConfig+0x33a>
 8004f38:	e014      	b.n	8004f64 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f3a:	f7fe f847 	bl	8002fcc <HAL_GetTick>
 8004f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f40:	e00a      	b.n	8004f58 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f42:	f7fe f843 	bl	8002fcc <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d901      	bls.n	8004f58 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e0a6      	b.n	80050a6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f58:	4b56      	ldr	r3, [pc, #344]	; (80050b4 <HAL_RCC_OscConfig+0x4d8>)
 8004f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5c:	f003 0302 	and.w	r3, r3, #2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1ee      	bne.n	8004f42 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f64:	7dfb      	ldrb	r3, [r7, #23]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d105      	bne.n	8004f76 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f6a:	4b52      	ldr	r3, [pc, #328]	; (80050b4 <HAL_RCC_OscConfig+0x4d8>)
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6e:	4a51      	ldr	r2, [pc, #324]	; (80050b4 <HAL_RCC_OscConfig+0x4d8>)
 8004f70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f000 8092 	beq.w	80050a4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f80:	4b4c      	ldr	r3, [pc, #304]	; (80050b4 <HAL_RCC_OscConfig+0x4d8>)
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f003 030c 	and.w	r3, r3, #12
 8004f88:	2b08      	cmp	r3, #8
 8004f8a:	d05c      	beq.n	8005046 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	699b      	ldr	r3, [r3, #24]
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d141      	bne.n	8005018 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f94:	4b48      	ldr	r3, [pc, #288]	; (80050b8 <HAL_RCC_OscConfig+0x4dc>)
 8004f96:	2200      	movs	r2, #0
 8004f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f9a:	f7fe f817 	bl	8002fcc <HAL_GetTick>
 8004f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fa0:	e008      	b.n	8004fb4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fa2:	f7fe f813 	bl	8002fcc <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d901      	bls.n	8004fb4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e078      	b.n	80050a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fb4:	4b3f      	ldr	r3, [pc, #252]	; (80050b4 <HAL_RCC_OscConfig+0x4d8>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1f0      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	69da      	ldr	r2, [r3, #28]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a1b      	ldr	r3, [r3, #32]
 8004fc8:	431a      	orrs	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fce:	019b      	lsls	r3, r3, #6
 8004fd0:	431a      	orrs	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd6:	085b      	lsrs	r3, r3, #1
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	041b      	lsls	r3, r3, #16
 8004fdc:	431a      	orrs	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe2:	061b      	lsls	r3, r3, #24
 8004fe4:	4933      	ldr	r1, [pc, #204]	; (80050b4 <HAL_RCC_OscConfig+0x4d8>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fea:	4b33      	ldr	r3, [pc, #204]	; (80050b8 <HAL_RCC_OscConfig+0x4dc>)
 8004fec:	2201      	movs	r2, #1
 8004fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff0:	f7fd ffec 	bl	8002fcc <HAL_GetTick>
 8004ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ff6:	e008      	b.n	800500a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ff8:	f7fd ffe8 	bl	8002fcc <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b02      	cmp	r3, #2
 8005004:	d901      	bls.n	800500a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e04d      	b.n	80050a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800500a:	4b2a      	ldr	r3, [pc, #168]	; (80050b4 <HAL_RCC_OscConfig+0x4d8>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d0f0      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x41c>
 8005016:	e045      	b.n	80050a4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005018:	4b27      	ldr	r3, [pc, #156]	; (80050b8 <HAL_RCC_OscConfig+0x4dc>)
 800501a:	2200      	movs	r2, #0
 800501c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800501e:	f7fd ffd5 	bl	8002fcc <HAL_GetTick>
 8005022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005024:	e008      	b.n	8005038 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005026:	f7fd ffd1 	bl	8002fcc <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b02      	cmp	r3, #2
 8005032:	d901      	bls.n	8005038 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e036      	b.n	80050a6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005038:	4b1e      	ldr	r3, [pc, #120]	; (80050b4 <HAL_RCC_OscConfig+0x4d8>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1f0      	bne.n	8005026 <HAL_RCC_OscConfig+0x44a>
 8005044:	e02e      	b.n	80050a4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d101      	bne.n	8005052 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e029      	b.n	80050a6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005052:	4b18      	ldr	r3, [pc, #96]	; (80050b4 <HAL_RCC_OscConfig+0x4d8>)
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	69db      	ldr	r3, [r3, #28]
 8005062:	429a      	cmp	r2, r3
 8005064:	d11c      	bne.n	80050a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005070:	429a      	cmp	r2, r3
 8005072:	d115      	bne.n	80050a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800507a:	4013      	ands	r3, r2
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005080:	4293      	cmp	r3, r2
 8005082:	d10d      	bne.n	80050a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800508e:	429a      	cmp	r2, r3
 8005090:	d106      	bne.n	80050a0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800509c:	429a      	cmp	r2, r3
 800509e:	d001      	beq.n	80050a4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e000      	b.n	80050a6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3718      	adds	r7, #24
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	40007000 	.word	0x40007000
 80050b4:	40023800 	.word	0x40023800
 80050b8:	42470060 	.word	0x42470060

080050bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d101      	bne.n	80050d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e0cc      	b.n	800526a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050d0:	4b68      	ldr	r3, [pc, #416]	; (8005274 <HAL_RCC_ClockConfig+0x1b8>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 030f 	and.w	r3, r3, #15
 80050d8:	683a      	ldr	r2, [r7, #0]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d90c      	bls.n	80050f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050de:	4b65      	ldr	r3, [pc, #404]	; (8005274 <HAL_RCC_ClockConfig+0x1b8>)
 80050e0:	683a      	ldr	r2, [r7, #0]
 80050e2:	b2d2      	uxtb	r2, r2
 80050e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050e6:	4b63      	ldr	r3, [pc, #396]	; (8005274 <HAL_RCC_ClockConfig+0x1b8>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 030f 	and.w	r3, r3, #15
 80050ee:	683a      	ldr	r2, [r7, #0]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d001      	beq.n	80050f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e0b8      	b.n	800526a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0302 	and.w	r3, r3, #2
 8005100:	2b00      	cmp	r3, #0
 8005102:	d020      	beq.n	8005146 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0304 	and.w	r3, r3, #4
 800510c:	2b00      	cmp	r3, #0
 800510e:	d005      	beq.n	800511c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005110:	4b59      	ldr	r3, [pc, #356]	; (8005278 <HAL_RCC_ClockConfig+0x1bc>)
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	4a58      	ldr	r2, [pc, #352]	; (8005278 <HAL_RCC_ClockConfig+0x1bc>)
 8005116:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800511a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0308 	and.w	r3, r3, #8
 8005124:	2b00      	cmp	r3, #0
 8005126:	d005      	beq.n	8005134 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005128:	4b53      	ldr	r3, [pc, #332]	; (8005278 <HAL_RCC_ClockConfig+0x1bc>)
 800512a:	689b      	ldr	r3, [r3, #8]
 800512c:	4a52      	ldr	r2, [pc, #328]	; (8005278 <HAL_RCC_ClockConfig+0x1bc>)
 800512e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005132:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005134:	4b50      	ldr	r3, [pc, #320]	; (8005278 <HAL_RCC_ClockConfig+0x1bc>)
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	494d      	ldr	r1, [pc, #308]	; (8005278 <HAL_RCC_ClockConfig+0x1bc>)
 8005142:	4313      	orrs	r3, r2
 8005144:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	d044      	beq.n	80051dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d107      	bne.n	800516a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800515a:	4b47      	ldr	r3, [pc, #284]	; (8005278 <HAL_RCC_ClockConfig+0x1bc>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d119      	bne.n	800519a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e07f      	b.n	800526a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	2b02      	cmp	r3, #2
 8005170:	d003      	beq.n	800517a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005176:	2b03      	cmp	r3, #3
 8005178:	d107      	bne.n	800518a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800517a:	4b3f      	ldr	r3, [pc, #252]	; (8005278 <HAL_RCC_ClockConfig+0x1bc>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d109      	bne.n	800519a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e06f      	b.n	800526a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800518a:	4b3b      	ldr	r3, [pc, #236]	; (8005278 <HAL_RCC_ClockConfig+0x1bc>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b00      	cmp	r3, #0
 8005194:	d101      	bne.n	800519a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e067      	b.n	800526a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800519a:	4b37      	ldr	r3, [pc, #220]	; (8005278 <HAL_RCC_ClockConfig+0x1bc>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f023 0203 	bic.w	r2, r3, #3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	4934      	ldr	r1, [pc, #208]	; (8005278 <HAL_RCC_ClockConfig+0x1bc>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051ac:	f7fd ff0e 	bl	8002fcc <HAL_GetTick>
 80051b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051b2:	e00a      	b.n	80051ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051b4:	f7fd ff0a 	bl	8002fcc <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	f241 3288 	movw	r2, #5000	; 0x1388
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d901      	bls.n	80051ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e04f      	b.n	800526a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ca:	4b2b      	ldr	r3, [pc, #172]	; (8005278 <HAL_RCC_ClockConfig+0x1bc>)
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f003 020c 	and.w	r2, r3, #12
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	429a      	cmp	r2, r3
 80051da:	d1eb      	bne.n	80051b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051dc:	4b25      	ldr	r3, [pc, #148]	; (8005274 <HAL_RCC_ClockConfig+0x1b8>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 030f 	and.w	r3, r3, #15
 80051e4:	683a      	ldr	r2, [r7, #0]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d20c      	bcs.n	8005204 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ea:	4b22      	ldr	r3, [pc, #136]	; (8005274 <HAL_RCC_ClockConfig+0x1b8>)
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	b2d2      	uxtb	r2, r2
 80051f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051f2:	4b20      	ldr	r3, [pc, #128]	; (8005274 <HAL_RCC_ClockConfig+0x1b8>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 030f 	and.w	r3, r3, #15
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d001      	beq.n	8005204 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e032      	b.n	800526a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0304 	and.w	r3, r3, #4
 800520c:	2b00      	cmp	r3, #0
 800520e:	d008      	beq.n	8005222 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005210:	4b19      	ldr	r3, [pc, #100]	; (8005278 <HAL_RCC_ClockConfig+0x1bc>)
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	4916      	ldr	r1, [pc, #88]	; (8005278 <HAL_RCC_ClockConfig+0x1bc>)
 800521e:	4313      	orrs	r3, r2
 8005220:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0308 	and.w	r3, r3, #8
 800522a:	2b00      	cmp	r3, #0
 800522c:	d009      	beq.n	8005242 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800522e:	4b12      	ldr	r3, [pc, #72]	; (8005278 <HAL_RCC_ClockConfig+0x1bc>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	00db      	lsls	r3, r3, #3
 800523c:	490e      	ldr	r1, [pc, #56]	; (8005278 <HAL_RCC_ClockConfig+0x1bc>)
 800523e:	4313      	orrs	r3, r2
 8005240:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005242:	f000 f821 	bl	8005288 <HAL_RCC_GetSysClockFreq>
 8005246:	4601      	mov	r1, r0
 8005248:	4b0b      	ldr	r3, [pc, #44]	; (8005278 <HAL_RCC_ClockConfig+0x1bc>)
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	091b      	lsrs	r3, r3, #4
 800524e:	f003 030f 	and.w	r3, r3, #15
 8005252:	4a0a      	ldr	r2, [pc, #40]	; (800527c <HAL_RCC_ClockConfig+0x1c0>)
 8005254:	5cd3      	ldrb	r3, [r2, r3]
 8005256:	fa21 f303 	lsr.w	r3, r1, r3
 800525a:	4a09      	ldr	r2, [pc, #36]	; (8005280 <HAL_RCC_ClockConfig+0x1c4>)
 800525c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800525e:	4b09      	ldr	r3, [pc, #36]	; (8005284 <HAL_RCC_ClockConfig+0x1c8>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4618      	mov	r0, r3
 8005264:	f7fd fe6e 	bl	8002f44 <HAL_InitTick>

  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
 8005272:	bf00      	nop
 8005274:	40023c00 	.word	0x40023c00
 8005278:	40023800 	.word	0x40023800
 800527c:	08009c68 	.word	0x08009c68
 8005280:	200000c0 	.word	0x200000c0
 8005284:	200000c8 	.word	0x200000c8

08005288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800528e:	2300      	movs	r3, #0
 8005290:	607b      	str	r3, [r7, #4]
 8005292:	2300      	movs	r3, #0
 8005294:	60fb      	str	r3, [r7, #12]
 8005296:	2300      	movs	r3, #0
 8005298:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800529a:	2300      	movs	r3, #0
 800529c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800529e:	4b50      	ldr	r3, [pc, #320]	; (80053e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f003 030c 	and.w	r3, r3, #12
 80052a6:	2b04      	cmp	r3, #4
 80052a8:	d007      	beq.n	80052ba <HAL_RCC_GetSysClockFreq+0x32>
 80052aa:	2b08      	cmp	r3, #8
 80052ac:	d008      	beq.n	80052c0 <HAL_RCC_GetSysClockFreq+0x38>
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f040 808d 	bne.w	80053ce <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052b4:	4b4b      	ldr	r3, [pc, #300]	; (80053e4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80052b6:	60bb      	str	r3, [r7, #8]
       break;
 80052b8:	e08c      	b.n	80053d4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052ba:	4b4b      	ldr	r3, [pc, #300]	; (80053e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80052bc:	60bb      	str	r3, [r7, #8]
      break;
 80052be:	e089      	b.n	80053d4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052c0:	4b47      	ldr	r3, [pc, #284]	; (80053e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052c8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052ca:	4b45      	ldr	r3, [pc, #276]	; (80053e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d023      	beq.n	800531e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052d6:	4b42      	ldr	r3, [pc, #264]	; (80053e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	099b      	lsrs	r3, r3, #6
 80052dc:	f04f 0400 	mov.w	r4, #0
 80052e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80052e4:	f04f 0200 	mov.w	r2, #0
 80052e8:	ea03 0501 	and.w	r5, r3, r1
 80052ec:	ea04 0602 	and.w	r6, r4, r2
 80052f0:	4a3d      	ldr	r2, [pc, #244]	; (80053e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80052f2:	fb02 f106 	mul.w	r1, r2, r6
 80052f6:	2200      	movs	r2, #0
 80052f8:	fb02 f205 	mul.w	r2, r2, r5
 80052fc:	440a      	add	r2, r1
 80052fe:	493a      	ldr	r1, [pc, #232]	; (80053e8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005300:	fba5 0101 	umull	r0, r1, r5, r1
 8005304:	1853      	adds	r3, r2, r1
 8005306:	4619      	mov	r1, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f04f 0400 	mov.w	r4, #0
 800530e:	461a      	mov	r2, r3
 8005310:	4623      	mov	r3, r4
 8005312:	f7fb fc99 	bl	8000c48 <__aeabi_uldivmod>
 8005316:	4603      	mov	r3, r0
 8005318:	460c      	mov	r4, r1
 800531a:	60fb      	str	r3, [r7, #12]
 800531c:	e049      	b.n	80053b2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800531e:	4b30      	ldr	r3, [pc, #192]	; (80053e0 <HAL_RCC_GetSysClockFreq+0x158>)
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	099b      	lsrs	r3, r3, #6
 8005324:	f04f 0400 	mov.w	r4, #0
 8005328:	f240 11ff 	movw	r1, #511	; 0x1ff
 800532c:	f04f 0200 	mov.w	r2, #0
 8005330:	ea03 0501 	and.w	r5, r3, r1
 8005334:	ea04 0602 	and.w	r6, r4, r2
 8005338:	4629      	mov	r1, r5
 800533a:	4632      	mov	r2, r6
 800533c:	f04f 0300 	mov.w	r3, #0
 8005340:	f04f 0400 	mov.w	r4, #0
 8005344:	0154      	lsls	r4, r2, #5
 8005346:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800534a:	014b      	lsls	r3, r1, #5
 800534c:	4619      	mov	r1, r3
 800534e:	4622      	mov	r2, r4
 8005350:	1b49      	subs	r1, r1, r5
 8005352:	eb62 0206 	sbc.w	r2, r2, r6
 8005356:	f04f 0300 	mov.w	r3, #0
 800535a:	f04f 0400 	mov.w	r4, #0
 800535e:	0194      	lsls	r4, r2, #6
 8005360:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005364:	018b      	lsls	r3, r1, #6
 8005366:	1a5b      	subs	r3, r3, r1
 8005368:	eb64 0402 	sbc.w	r4, r4, r2
 800536c:	f04f 0100 	mov.w	r1, #0
 8005370:	f04f 0200 	mov.w	r2, #0
 8005374:	00e2      	lsls	r2, r4, #3
 8005376:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800537a:	00d9      	lsls	r1, r3, #3
 800537c:	460b      	mov	r3, r1
 800537e:	4614      	mov	r4, r2
 8005380:	195b      	adds	r3, r3, r5
 8005382:	eb44 0406 	adc.w	r4, r4, r6
 8005386:	f04f 0100 	mov.w	r1, #0
 800538a:	f04f 0200 	mov.w	r2, #0
 800538e:	02a2      	lsls	r2, r4, #10
 8005390:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005394:	0299      	lsls	r1, r3, #10
 8005396:	460b      	mov	r3, r1
 8005398:	4614      	mov	r4, r2
 800539a:	4618      	mov	r0, r3
 800539c:	4621      	mov	r1, r4
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f04f 0400 	mov.w	r4, #0
 80053a4:	461a      	mov	r2, r3
 80053a6:	4623      	mov	r3, r4
 80053a8:	f7fb fc4e 	bl	8000c48 <__aeabi_uldivmod>
 80053ac:	4603      	mov	r3, r0
 80053ae:	460c      	mov	r4, r1
 80053b0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80053b2:	4b0b      	ldr	r3, [pc, #44]	; (80053e0 <HAL_RCC_GetSysClockFreq+0x158>)
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	0c1b      	lsrs	r3, r3, #16
 80053b8:	f003 0303 	and.w	r3, r3, #3
 80053bc:	3301      	adds	r3, #1
 80053be:	005b      	lsls	r3, r3, #1
 80053c0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ca:	60bb      	str	r3, [r7, #8]
      break;
 80053cc:	e002      	b.n	80053d4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053ce:	4b05      	ldr	r3, [pc, #20]	; (80053e4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80053d0:	60bb      	str	r3, [r7, #8]
      break;
 80053d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053d4:	68bb      	ldr	r3, [r7, #8]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053de:	bf00      	nop
 80053e0:	40023800 	.word	0x40023800
 80053e4:	00f42400 	.word	0x00f42400
 80053e8:	017d7840 	.word	0x017d7840

080053ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053ec:	b480      	push	{r7}
 80053ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053f0:	4b03      	ldr	r3, [pc, #12]	; (8005400 <HAL_RCC_GetHCLKFreq+0x14>)
 80053f2:	681b      	ldr	r3, [r3, #0]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	200000c0 	.word	0x200000c0

08005404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005408:	f7ff fff0 	bl	80053ec <HAL_RCC_GetHCLKFreq>
 800540c:	4601      	mov	r1, r0
 800540e:	4b05      	ldr	r3, [pc, #20]	; (8005424 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	0a9b      	lsrs	r3, r3, #10
 8005414:	f003 0307 	and.w	r3, r3, #7
 8005418:	4a03      	ldr	r2, [pc, #12]	; (8005428 <HAL_RCC_GetPCLK1Freq+0x24>)
 800541a:	5cd3      	ldrb	r3, [r2, r3]
 800541c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005420:	4618      	mov	r0, r3
 8005422:	bd80      	pop	{r7, pc}
 8005424:	40023800 	.word	0x40023800
 8005428:	08009c78 	.word	0x08009c78

0800542c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e022      	b.n	8005484 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005444:	b2db      	uxtb	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d105      	bne.n	8005456 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f7fc fa4d 	bl	80018f0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2203      	movs	r2, #3
 800545a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f814 	bl	800548c <HAL_SD_InitCard>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e00a      	b.n	8005484 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3708      	adds	r7, #8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800548c:	b5b0      	push	{r4, r5, r7, lr}
 800548e:	b08e      	sub	sp, #56	; 0x38
 8005490:	af04      	add	r7, sp, #16
 8005492:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8005494:	2300      	movs	r3, #0
 8005496:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005498:	2300      	movs	r3, #0
 800549a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800549c:	2300      	movs	r3, #0
 800549e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80054a0:	2300      	movs	r3, #0
 80054a2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80054a4:	2300      	movs	r3, #0
 80054a6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80054a8:	2376      	movs	r3, #118	; 0x76
 80054aa:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681d      	ldr	r5, [r3, #0]
 80054b0:	466c      	mov	r4, sp
 80054b2:	f107 0314 	add.w	r3, r7, #20
 80054b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80054ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80054be:	f107 0308 	add.w	r3, r7, #8
 80054c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054c4:	4628      	mov	r0, r5
 80054c6:	f001 fa71 	bl	80069ac <SDIO_Init>
 80054ca:	4603      	mov	r3, r0
 80054cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80054d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d001      	beq.n	80054dc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e031      	b.n	8005540 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80054dc:	4b1a      	ldr	r3, [pc, #104]	; (8005548 <HAL_SD_InitCard+0xbc>)
 80054de:	2200      	movs	r2, #0
 80054e0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f001 fa98 	bl	8006a1c <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80054ec:	4b16      	ldr	r3, [pc, #88]	; (8005548 <HAL_SD_InitCard+0xbc>)
 80054ee:	2201      	movs	r2, #1
 80054f0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 fb18 	bl	8005b28 <SD_PowerON>
 80054f8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80054fa:	6a3b      	ldr	r3, [r7, #32]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d00b      	beq.n	8005518 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	431a      	orrs	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e013      	b.n	8005540 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 fa37 	bl	800598c <SD_InitCard>
 800551e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005520:	6a3b      	ldr	r3, [r7, #32]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00b      	beq.n	800553e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2201      	movs	r2, #1
 800552a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005532:	6a3b      	ldr	r3, [r7, #32]
 8005534:	431a      	orrs	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e000      	b.n	8005540 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800553e:	2300      	movs	r3, #0
}
 8005540:	4618      	mov	r0, r3
 8005542:	3728      	adds	r7, #40	; 0x28
 8005544:	46bd      	mov	sp, r7
 8005546:	bdb0      	pop	{r4, r5, r7, pc}
 8005548:	422580a0 	.word	0x422580a0

0800554c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800555a:	0f9b      	lsrs	r3, r3, #30
 800555c:	b2da      	uxtb	r2, r3
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005566:	0e9b      	lsrs	r3, r3, #26
 8005568:	b2db      	uxtb	r3, r3
 800556a:	f003 030f 	and.w	r3, r3, #15
 800556e:	b2da      	uxtb	r2, r3
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005578:	0e1b      	lsrs	r3, r3, #24
 800557a:	b2db      	uxtb	r3, r3
 800557c:	f003 0303 	and.w	r3, r3, #3
 8005580:	b2da      	uxtb	r2, r3
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800558a:	0c1b      	lsrs	r3, r3, #16
 800558c:	b2da      	uxtb	r2, r3
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005596:	0a1b      	lsrs	r3, r3, #8
 8005598:	b2da      	uxtb	r2, r3
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055a2:	b2da      	uxtb	r2, r3
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055ac:	0d1b      	lsrs	r3, r3, #20
 80055ae:	b29a      	uxth	r2, r3
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055b8:	0c1b      	lsrs	r3, r3, #16
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	f003 030f 	and.w	r3, r3, #15
 80055c0:	b2da      	uxtb	r2, r3
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055ca:	0bdb      	lsrs	r3, r3, #15
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	b2da      	uxtb	r2, r3
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055dc:	0b9b      	lsrs	r3, r3, #14
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055ee:	0b5b      	lsrs	r3, r3, #13
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	b2da      	uxtb	r2, r3
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005600:	0b1b      	lsrs	r3, r3, #12
 8005602:	b2db      	uxtb	r3, r3
 8005604:	f003 0301 	and.w	r3, r3, #1
 8005608:	b2da      	uxtb	r2, r3
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2200      	movs	r2, #0
 8005612:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005618:	2b00      	cmp	r3, #0
 800561a:	d163      	bne.n	80056e4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005620:	009a      	lsls	r2, r3, #2
 8005622:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005626:	4013      	ands	r3, r2
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800562c:	0f92      	lsrs	r2, r2, #30
 800562e:	431a      	orrs	r2, r3
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005638:	0edb      	lsrs	r3, r3, #27
 800563a:	b2db      	uxtb	r3, r3
 800563c:	f003 0307 	and.w	r3, r3, #7
 8005640:	b2da      	uxtb	r2, r3
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800564a:	0e1b      	lsrs	r3, r3, #24
 800564c:	b2db      	uxtb	r3, r3
 800564e:	f003 0307 	and.w	r3, r3, #7
 8005652:	b2da      	uxtb	r2, r3
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800565c:	0d5b      	lsrs	r3, r3, #21
 800565e:	b2db      	uxtb	r3, r3
 8005660:	f003 0307 	and.w	r3, r3, #7
 8005664:	b2da      	uxtb	r2, r3
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800566e:	0c9b      	lsrs	r3, r3, #18
 8005670:	b2db      	uxtb	r3, r3
 8005672:	f003 0307 	and.w	r3, r3, #7
 8005676:	b2da      	uxtb	r2, r3
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005680:	0bdb      	lsrs	r3, r3, #15
 8005682:	b2db      	uxtb	r3, r3
 8005684:	f003 0307 	and.w	r3, r3, #7
 8005688:	b2da      	uxtb	r2, r3
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	1c5a      	adds	r2, r3, #1
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	7e1b      	ldrb	r3, [r3, #24]
 800569c:	b2db      	uxtb	r3, r3
 800569e:	f003 0307 	and.w	r3, r3, #7
 80056a2:	3302      	adds	r3, #2
 80056a4:	2201      	movs	r2, #1
 80056a6:	fa02 f303 	lsl.w	r3, r2, r3
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80056ae:	fb02 f203 	mul.w	r2, r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	7a1b      	ldrb	r3, [r3, #8]
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	f003 030f 	and.w	r3, r3, #15
 80056c0:	2201      	movs	r2, #1
 80056c2:	409a      	lsls	r2, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80056d0:	0a52      	lsrs	r2, r2, #9
 80056d2:	fb02 f203 	mul.w	r2, r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056e0:	661a      	str	r2, [r3, #96]	; 0x60
 80056e2:	e031      	b.n	8005748 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d11d      	bne.n	8005728 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056f0:	041b      	lsls	r3, r3, #16
 80056f2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056fa:	0c1b      	lsrs	r3, r3, #16
 80056fc:	431a      	orrs	r2, r3
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	3301      	adds	r3, #1
 8005708:	029a      	lsls	r2, r3, #10
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f44f 7200 	mov.w	r2, #512	; 0x200
 800571c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	661a      	str	r2, [r3, #96]	; 0x60
 8005726:	e00f      	b.n	8005748 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a58      	ldr	r2, [pc, #352]	; (8005890 <HAL_SD_GetCardCSD+0x344>)
 800572e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005734:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	e09d      	b.n	8005884 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800574c:	0b9b      	lsrs	r3, r3, #14
 800574e:	b2db      	uxtb	r3, r3
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	b2da      	uxtb	r2, r3
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800575e:	09db      	lsrs	r3, r3, #7
 8005760:	b2db      	uxtb	r3, r3
 8005762:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005766:	b2da      	uxtb	r2, r3
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005770:	b2db      	uxtb	r3, r3
 8005772:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005776:	b2da      	uxtb	r2, r3
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005780:	0fdb      	lsrs	r3, r3, #31
 8005782:	b2da      	uxtb	r2, r3
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800578c:	0f5b      	lsrs	r3, r3, #29
 800578e:	b2db      	uxtb	r3, r3
 8005790:	f003 0303 	and.w	r3, r3, #3
 8005794:	b2da      	uxtb	r2, r3
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800579e:	0e9b      	lsrs	r3, r3, #26
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	f003 0307 	and.w	r3, r3, #7
 80057a6:	b2da      	uxtb	r2, r3
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b0:	0d9b      	lsrs	r3, r3, #22
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	f003 030f 	and.w	r3, r3, #15
 80057b8:	b2da      	uxtb	r2, r3
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c2:	0d5b      	lsrs	r3, r3, #21
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	f003 0301 	and.w	r3, r3, #1
 80057ca:	b2da      	uxtb	r2, r3
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057de:	0c1b      	lsrs	r3, r3, #16
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	b2da      	uxtb	r2, r3
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057f2:	0bdb      	lsrs	r3, r3, #15
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	b2da      	uxtb	r2, r3
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005806:	0b9b      	lsrs	r3, r3, #14
 8005808:	b2db      	uxtb	r3, r3
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	b2da      	uxtb	r2, r3
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800581a:	0b5b      	lsrs	r3, r3, #13
 800581c:	b2db      	uxtb	r3, r3
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	b2da      	uxtb	r2, r3
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800582e:	0b1b      	lsrs	r3, r3, #12
 8005830:	b2db      	uxtb	r3, r3
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	b2da      	uxtb	r2, r3
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005842:	0a9b      	lsrs	r3, r3, #10
 8005844:	b2db      	uxtb	r3, r3
 8005846:	f003 0303 	and.w	r3, r3, #3
 800584a:	b2da      	uxtb	r2, r3
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005856:	0a1b      	lsrs	r3, r3, #8
 8005858:	b2db      	uxtb	r3, r3
 800585a:	f003 0303 	and.w	r3, r3, #3
 800585e:	b2da      	uxtb	r2, r3
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800586a:	085b      	lsrs	r3, r3, #1
 800586c:	b2db      	uxtb	r3, r3
 800586e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005872:	b2da      	uxtb	r2, r3
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr
 8005890:	004005ff 	.word	0x004005ff

08005894 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005894:	b5b0      	push	{r4, r5, r7, lr}
 8005896:	b08e      	sub	sp, #56	; 0x38
 8005898:	af04      	add	r7, sp, #16
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2203      	movs	r2, #3
 80058a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058aa:	2b03      	cmp	r3, #3
 80058ac:	d02e      	beq.n	800590c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058b4:	d106      	bne.n	80058c4 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ba:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	639a      	str	r2, [r3, #56]	; 0x38
 80058c2:	e029      	b.n	8005918 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058ca:	d10a      	bne.n	80058e2 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 f9b9 	bl	8005c44 <SD_WideBus_Enable>
 80058d2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058da:	431a      	orrs	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	639a      	str	r2, [r3, #56]	; 0x38
 80058e0:	e01a      	b.n	8005918 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d10a      	bne.n	80058fe <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f9f6 	bl	8005cda <SD_WideBus_Disable>
 80058ee:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f6:	431a      	orrs	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	639a      	str	r2, [r3, #56]	; 0x38
 80058fc:	e00c      	b.n	8005918 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005902:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	639a      	str	r2, [r3, #56]	; 0x38
 800590a:	e005      	b.n	8005918 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005910:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591c:	2b00      	cmp	r3, #0
 800591e:	d009      	beq.n	8005934 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a18      	ldr	r2, [pc, #96]	; (8005988 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8005926:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e024      	b.n	800597e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681d      	ldr	r5, [r3, #0]
 800595a:	466c      	mov	r4, sp
 800595c:	f107 0318 	add.w	r3, r7, #24
 8005960:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005964:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005968:	f107 030c 	add.w	r3, r7, #12
 800596c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800596e:	4628      	mov	r0, r5
 8005970:	f001 f81c 	bl	80069ac <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3728      	adds	r7, #40	; 0x28
 8005982:	46bd      	mov	sp, r7
 8005984:	bdb0      	pop	{r4, r5, r7, pc}
 8005986:	bf00      	nop
 8005988:	004005ff 	.word	0x004005ff

0800598c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800598c:	b5b0      	push	{r4, r5, r7, lr}
 800598e:	b094      	sub	sp, #80	; 0x50
 8005990:	af04      	add	r7, sp, #16
 8005992:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8005994:	2301      	movs	r3, #1
 8005996:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4618      	mov	r0, r3
 800599e:	f001 f84c 	bl	8006a3a <SDIO_GetPowerState>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d102      	bne.n	80059ae <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80059a8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80059ac:	e0b7      	b.n	8005b1e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b2:	2b03      	cmp	r3, #3
 80059b4:	d02f      	beq.n	8005a16 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f001 f9cb 	bl	8006d56 <SDMMC_CmdSendCID>
 80059c0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80059c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d001      	beq.n	80059cc <SD_InitCard+0x40>
    {
      return errorstate;
 80059c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ca:	e0a8      	b.n	8005b1e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2100      	movs	r1, #0
 80059d2:	4618      	mov	r0, r3
 80059d4:	f001 f876 	bl	8006ac4 <SDIO_GetResponse>
 80059d8:	4602      	mov	r2, r0
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2104      	movs	r1, #4
 80059e4:	4618      	mov	r0, r3
 80059e6:	f001 f86d 	bl	8006ac4 <SDIO_GetResponse>
 80059ea:	4602      	mov	r2, r0
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2108      	movs	r1, #8
 80059f6:	4618      	mov	r0, r3
 80059f8:	f001 f864 	bl	8006ac4 <SDIO_GetResponse>
 80059fc:	4602      	mov	r2, r0
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	210c      	movs	r1, #12
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f001 f85b 	bl	8006ac4 <SDIO_GetResponse>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a1a:	2b03      	cmp	r3, #3
 8005a1c:	d00d      	beq.n	8005a3a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f107 020e 	add.w	r2, r7, #14
 8005a26:	4611      	mov	r1, r2
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f001 f9d1 	bl	8006dd0 <SDMMC_CmdSetRelAdd>
 8005a2e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d001      	beq.n	8005a3a <SD_InitCard+0xae>
    {
      return errorstate;
 8005a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a38:	e071      	b.n	8005b1e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a3e:	2b03      	cmp	r3, #3
 8005a40:	d036      	beq.n	8005ab0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005a42:	89fb      	ldrh	r3, [r7, #14]
 8005a44:	461a      	mov	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a52:	041b      	lsls	r3, r3, #16
 8005a54:	4619      	mov	r1, r3
 8005a56:	4610      	mov	r0, r2
 8005a58:	f001 f99b 	bl	8006d92 <SDMMC_CmdSendCSD>
 8005a5c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d001      	beq.n	8005a68 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a66:	e05a      	b.n	8005b1e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f001 f828 	bl	8006ac4 <SDIO_GetResponse>
 8005a74:	4602      	mov	r2, r0
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2104      	movs	r1, #4
 8005a80:	4618      	mov	r0, r3
 8005a82:	f001 f81f 	bl	8006ac4 <SDIO_GetResponse>
 8005a86:	4602      	mov	r2, r0
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2108      	movs	r1, #8
 8005a92:	4618      	mov	r0, r3
 8005a94:	f001 f816 	bl	8006ac4 <SDIO_GetResponse>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	210c      	movs	r1, #12
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f001 f80d 	bl	8006ac4 <SDIO_GetResponse>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2104      	movs	r1, #4
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f001 f804 	bl	8006ac4 <SDIO_GetResponse>
 8005abc:	4603      	mov	r3, r0
 8005abe:	0d1a      	lsrs	r2, r3, #20
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005ac4:	f107 0310 	add.w	r3, r7, #16
 8005ac8:	4619      	mov	r1, r3
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f7ff fd3e 	bl	800554c <HAL_SD_GetCardCSD>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d002      	beq.n	8005adc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005ad6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005ada:	e020      	b.n	8005b1e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6819      	ldr	r1, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ae4:	041b      	lsls	r3, r3, #16
 8005ae6:	f04f 0400 	mov.w	r4, #0
 8005aea:	461a      	mov	r2, r3
 8005aec:	4623      	mov	r3, r4
 8005aee:	4608      	mov	r0, r1
 8005af0:	f001 f849 	bl	8006b86 <SDMMC_CmdSelDesel>
 8005af4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d001      	beq.n	8005b00 <SD_InitCard+0x174>
  {
    return errorstate;
 8005afc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005afe:	e00e      	b.n	8005b1e <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681d      	ldr	r5, [r3, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	466c      	mov	r4, sp
 8005b08:	f103 0210 	add.w	r2, r3, #16
 8005b0c:	ca07      	ldmia	r2, {r0, r1, r2}
 8005b0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005b12:	3304      	adds	r3, #4
 8005b14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b16:	4628      	mov	r0, r5
 8005b18:	f000 ff48 	bl	80069ac <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3740      	adds	r7, #64	; 0x40
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005b28 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b086      	sub	sp, #24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b30:	2300      	movs	r3, #0
 8005b32:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005b34:	2300      	movs	r3, #0
 8005b36:	617b      	str	r3, [r7, #20]
 8005b38:	2300      	movs	r3, #0
 8005b3a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4618      	mov	r0, r3
 8005b42:	f001 f843 	bl	8006bcc <SDMMC_CmdGoIdleState>
 8005b46:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <SD_PowerON+0x2a>
  {
    return errorstate;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	e072      	b.n	8005c38 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4618      	mov	r0, r3
 8005b58:	f001 f856 	bl	8006c08 <SDMMC_CmdOperCond>
 8005b5c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00d      	beq.n	8005b80 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f001 f82c 	bl	8006bcc <SDMMC_CmdGoIdleState>
 8005b74:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d004      	beq.n	8005b86 <SD_PowerON+0x5e>
    {
      return errorstate;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	e05b      	b.n	8005c38 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d137      	bne.n	8005bfe <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2100      	movs	r1, #0
 8005b94:	4618      	mov	r0, r3
 8005b96:	f001 f856 	bl	8006c46 <SDMMC_CmdAppCommand>
 8005b9a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d02d      	beq.n	8005bfe <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005ba2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005ba6:	e047      	b.n	8005c38 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2100      	movs	r1, #0
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f001 f849 	bl	8006c46 <SDMMC_CmdAppCommand>
 8005bb4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d001      	beq.n	8005bc0 <SD_PowerON+0x98>
    {
      return errorstate;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	e03b      	b.n	8005c38 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	491e      	ldr	r1, [pc, #120]	; (8005c40 <SD_PowerON+0x118>)
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f001 f85f 	bl	8006c8a <SDMMC_CmdAppOperCommand>
 8005bcc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d002      	beq.n	8005bda <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005bd4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005bd8:	e02e      	b.n	8005c38 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2100      	movs	r1, #0
 8005be0:	4618      	mov	r0, r3
 8005be2:	f000 ff6f 	bl	8006ac4 <SDIO_GetResponse>
 8005be6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	0fdb      	lsrs	r3, r3, #31
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d101      	bne.n	8005bf4 <SD_PowerON+0xcc>
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e000      	b.n	8005bf6 <SD_PowerON+0xce>
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	613b      	str	r3, [r7, #16]

    count++;
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d802      	bhi.n	8005c0e <SD_PowerON+0xe6>
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d0cc      	beq.n	8005ba8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d902      	bls.n	8005c1e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005c18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c1c:	e00c      	b.n	8005c38 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d003      	beq.n	8005c30 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	645a      	str	r2, [r3, #68]	; 0x44
 8005c2e:	e002      	b.n	8005c36 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3718      	adds	r7, #24
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	c1100000 	.word	0xc1100000

08005c44 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	60fb      	str	r3, [r7, #12]
 8005c50:	2300      	movs	r3, #0
 8005c52:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2100      	movs	r1, #0
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 ff32 	bl	8006ac4 <SDIO_GetResponse>
 8005c60:	4603      	mov	r3, r0
 8005c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c6a:	d102      	bne.n	8005c72 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005c6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c70:	e02f      	b.n	8005cd2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005c72:	f107 030c 	add.w	r3, r7, #12
 8005c76:	4619      	mov	r1, r3
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 f879 	bl	8005d70 <SD_FindSCR>
 8005c7e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d001      	beq.n	8005c8a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	e023      	b.n	8005cd2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d01c      	beq.n	8005cce <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c9c:	041b      	lsls	r3, r3, #16
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	4610      	mov	r0, r2
 8005ca2:	f000 ffd0 	bl	8006c46 <SDMMC_CmdAppCommand>
 8005ca6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	e00f      	b.n	8005cd2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2102      	movs	r1, #2
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f001 f809 	bl	8006cd0 <SDMMC_CmdBusWidth>
 8005cbe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d001      	beq.n	8005cca <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	e003      	b.n	8005cd2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	e001      	b.n	8005cd2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005cce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3718      	adds	r7, #24
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b086      	sub	sp, #24
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	60fb      	str	r3, [r7, #12]
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2100      	movs	r1, #0
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f000 fee7 	bl	8006ac4 <SDIO_GetResponse>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cfc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d00:	d102      	bne.n	8005d08 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005d02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005d06:	e02f      	b.n	8005d68 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005d08:	f107 030c 	add.w	r3, r7, #12
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f82e 	bl	8005d70 <SD_FindSCR>
 8005d14:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d001      	beq.n	8005d20 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	e023      	b.n	8005d68 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d01c      	beq.n	8005d64 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d32:	041b      	lsls	r3, r3, #16
 8005d34:	4619      	mov	r1, r3
 8005d36:	4610      	mov	r0, r2
 8005d38:	f000 ff85 	bl	8006c46 <SDMMC_CmdAppCommand>
 8005d3c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d001      	beq.n	8005d48 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	e00f      	b.n	8005d68 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2100      	movs	r1, #0
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f000 ffbe 	bl	8006cd0 <SDMMC_CmdBusWidth>
 8005d54:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d001      	beq.n	8005d60 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	e003      	b.n	8005d68 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005d60:	2300      	movs	r3, #0
 8005d62:	e001      	b.n	8005d68 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005d64:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3718      	adds	r7, #24
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8005d70:	b590      	push	{r4, r7, lr}
 8005d72:	b08f      	sub	sp, #60	; 0x3c
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005d7a:	f7fd f927 	bl	8002fcc <HAL_GetTick>
 8005d7e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8005d80:	2300      	movs	r3, #0
 8005d82:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8005d84:	2300      	movs	r3, #0
 8005d86:	60bb      	str	r3, [r7, #8]
 8005d88:	2300      	movs	r3, #0
 8005d8a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2108      	movs	r1, #8
 8005d96:	4618      	mov	r0, r3
 8005d98:	f000 fed3 	bl	8006b42 <SDMMC_CmdBlockLength>
 8005d9c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d001      	beq.n	8005da8 <SD_FindSCR+0x38>
  {
    return errorstate;
 8005da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da6:	e0a9      	b.n	8005efc <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005db0:	041b      	lsls	r3, r3, #16
 8005db2:	4619      	mov	r1, r3
 8005db4:	4610      	mov	r0, r2
 8005db6:	f000 ff46 	bl	8006c46 <SDMMC_CmdAppCommand>
 8005dba:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d001      	beq.n	8005dc6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8005dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc4:	e09a      	b.n	8005efc <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005dc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005dca:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005dcc:	2308      	movs	r3, #8
 8005dce:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005dd0:	2330      	movs	r3, #48	; 0x30
 8005dd2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f107 0210 	add.w	r2, r7, #16
 8005de8:	4611      	mov	r1, r2
 8005dea:	4618      	mov	r0, r3
 8005dec:	f000 fe7d 	bl	8006aea <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4618      	mov	r0, r3
 8005df6:	f000 ff8d 	bl	8006d14 <SDMMC_CmdSendSCR>
 8005dfa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d022      	beq.n	8005e48 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8005e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e04:	e07a      	b.n	8005efc <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d00e      	beq.n	8005e32 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6819      	ldr	r1, [r3, #0]
 8005e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	f107 0208 	add.w	r2, r7, #8
 8005e20:	18d4      	adds	r4, r2, r3
 8005e22:	4608      	mov	r0, r1
 8005e24:	f000 fded 	bl	8006a02 <SDIO_ReadFIFO>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	6023      	str	r3, [r4, #0]
      index++;
 8005e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e2e:	3301      	adds	r3, #1
 8005e30:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005e32:	f7fd f8cb 	bl	8002fcc <HAL_GetTick>
 8005e36:	4602      	mov	r2, r0
 8005e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e40:	d102      	bne.n	8005e48 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8005e42:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005e46:	e059      	b.n	8005efc <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e4e:	f240 432a 	movw	r3, #1066	; 0x42a
 8005e52:	4013      	ands	r3, r2
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d0d6      	beq.n	8005e06 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e5e:	f003 0308 	and.w	r3, r3, #8
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d005      	beq.n	8005e72 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2208      	movs	r2, #8
 8005e6c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005e6e:	2308      	movs	r3, #8
 8005e70:	e044      	b.n	8005efc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e78:	f003 0302 	and.w	r3, r3, #2
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d005      	beq.n	8005e8c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2202      	movs	r2, #2
 8005e86:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005e88:	2302      	movs	r3, #2
 8005e8a:	e037      	b.n	8005efc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e92:	f003 0320 	and.w	r3, r3, #32
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d005      	beq.n	8005ea6 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2220      	movs	r2, #32
 8005ea0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005ea2:	2320      	movs	r3, #32
 8005ea4:	e02a      	b.n	8005efc <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f240 523a 	movw	r2, #1338	; 0x53a
 8005eae:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	061a      	lsls	r2, r3, #24
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	021b      	lsls	r3, r3, #8
 8005eb8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005ebc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	0a1b      	lsrs	r3, r3, #8
 8005ec2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005ec6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	0e1b      	lsrs	r3, r3, #24
 8005ecc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed0:	601a      	str	r2, [r3, #0]
    scr++;
 8005ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed4:	3304      	adds	r3, #4
 8005ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	061a      	lsls	r2, r3, #24
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	021b      	lsls	r3, r3, #8
 8005ee0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005ee4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	0a1b      	lsrs	r3, r3, #8
 8005eea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005eee:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	0e1b      	lsrs	r3, r3, #24
 8005ef4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	373c      	adds	r7, #60	; 0x3c
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd90      	pop	{r4, r7, pc}

08005f04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e056      	b.n	8005fc4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d106      	bne.n	8005f36 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f7fb fdb1 	bl	8001a98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2202      	movs	r2, #2
 8005f3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f4c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685a      	ldr	r2, [r3, #4]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	431a      	orrs	r2, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	431a      	orrs	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	431a      	orrs	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	695b      	ldr	r3, [r3, #20]
 8005f68:	431a      	orrs	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f72:	431a      	orrs	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	69db      	ldr	r3, [r3, #28]
 8005f78:	431a      	orrs	r2, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	ea42 0103 	orr.w	r1, r2, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	430a      	orrs	r2, r1
 8005f8c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	699b      	ldr	r3, [r3, #24]
 8005f92:	0c1b      	lsrs	r3, r3, #16
 8005f94:	f003 0104 	and.w	r1, r3, #4
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	430a      	orrs	r2, r1
 8005fa2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	69da      	ldr	r2, [r3, #28]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fb2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3708      	adds	r7, #8
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b088      	sub	sp, #32
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	603b      	str	r3, [r7, #0]
 8005fd8:	4613      	mov	r3, r2
 8005fda:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d101      	bne.n	8005fee <HAL_SPI_Transmit+0x22>
 8005fea:	2302      	movs	r3, #2
 8005fec:	e11e      	b.n	800622c <HAL_SPI_Transmit+0x260>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ff6:	f7fc ffe9 	bl	8002fcc <HAL_GetTick>
 8005ffa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005ffc:	88fb      	ldrh	r3, [r7, #6]
 8005ffe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b01      	cmp	r3, #1
 800600a:	d002      	beq.n	8006012 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800600c:	2302      	movs	r3, #2
 800600e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006010:	e103      	b.n	800621a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d002      	beq.n	800601e <HAL_SPI_Transmit+0x52>
 8006018:	88fb      	ldrh	r3, [r7, #6]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d102      	bne.n	8006024 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006022:	e0fa      	b.n	800621a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2203      	movs	r2, #3
 8006028:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	68ba      	ldr	r2, [r7, #8]
 8006036:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	88fa      	ldrh	r2, [r7, #6]
 800603c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	88fa      	ldrh	r2, [r7, #6]
 8006042:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2200      	movs	r2, #0
 8006060:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800606a:	d107      	bne.n	800607c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800607a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006086:	2b40      	cmp	r3, #64	; 0x40
 8006088:	d007      	beq.n	800609a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006098:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060a2:	d14b      	bne.n	800613c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d002      	beq.n	80060b2 <HAL_SPI_Transmit+0xe6>
 80060ac:	8afb      	ldrh	r3, [r7, #22]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d13e      	bne.n	8006130 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b6:	881a      	ldrh	r2, [r3, #0]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c2:	1c9a      	adds	r2, r3, #2
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	3b01      	subs	r3, #1
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80060d6:	e02b      	b.n	8006130 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d112      	bne.n	800610c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ea:	881a      	ldrh	r2, [r3, #0]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f6:	1c9a      	adds	r2, r3, #2
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006100:	b29b      	uxth	r3, r3
 8006102:	3b01      	subs	r3, #1
 8006104:	b29a      	uxth	r2, r3
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	86da      	strh	r2, [r3, #54]	; 0x36
 800610a:	e011      	b.n	8006130 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800610c:	f7fc ff5e 	bl	8002fcc <HAL_GetTick>
 8006110:	4602      	mov	r2, r0
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	683a      	ldr	r2, [r7, #0]
 8006118:	429a      	cmp	r2, r3
 800611a:	d803      	bhi.n	8006124 <HAL_SPI_Transmit+0x158>
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006122:	d102      	bne.n	800612a <HAL_SPI_Transmit+0x15e>
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d102      	bne.n	8006130 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800612e:	e074      	b.n	800621a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006134:	b29b      	uxth	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1ce      	bne.n	80060d8 <HAL_SPI_Transmit+0x10c>
 800613a:	e04c      	b.n	80061d6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	685b      	ldr	r3, [r3, #4]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d002      	beq.n	800614a <HAL_SPI_Transmit+0x17e>
 8006144:	8afb      	ldrh	r3, [r7, #22]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d140      	bne.n	80061cc <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	330c      	adds	r3, #12
 8006154:	7812      	ldrb	r2, [r2, #0]
 8006156:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800615c:	1c5a      	adds	r2, r3, #1
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006166:	b29b      	uxth	r3, r3
 8006168:	3b01      	subs	r3, #1
 800616a:	b29a      	uxth	r2, r3
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006170:	e02c      	b.n	80061cc <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b02      	cmp	r3, #2
 800617e:	d113      	bne.n	80061a8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	330c      	adds	r3, #12
 800618a:	7812      	ldrb	r2, [r2, #0]
 800618c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006192:	1c5a      	adds	r2, r3, #1
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800619c:	b29b      	uxth	r3, r3
 800619e:	3b01      	subs	r3, #1
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	86da      	strh	r2, [r3, #54]	; 0x36
 80061a6:	e011      	b.n	80061cc <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061a8:	f7fc ff10 	bl	8002fcc <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d803      	bhi.n	80061c0 <HAL_SPI_Transmit+0x1f4>
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061be:	d102      	bne.n	80061c6 <HAL_SPI_Transmit+0x1fa>
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d102      	bne.n	80061cc <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80061ca:	e026      	b.n	800621a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1cd      	bne.n	8006172 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80061d6:	69ba      	ldr	r2, [r7, #24]
 80061d8:	6839      	ldr	r1, [r7, #0]
 80061da:	68f8      	ldr	r0, [r7, #12]
 80061dc:	f000 fba4 	bl	8006928 <SPI_EndRxTxTransaction>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d002      	beq.n	80061ec <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2220      	movs	r2, #32
 80061ea:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10a      	bne.n	800620a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061f4:	2300      	movs	r3, #0
 80061f6:	613b      	str	r3, [r7, #16]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	613b      	str	r3, [r7, #16]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	613b      	str	r3, [r7, #16]
 8006208:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800620e:	2b00      	cmp	r3, #0
 8006210:	d002      	beq.n	8006218 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	77fb      	strb	r3, [r7, #31]
 8006216:	e000      	b.n	800621a <HAL_SPI_Transmit+0x24e>
  }

error:
 8006218:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2201      	movs	r2, #1
 800621e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800622a:	7ffb      	ldrb	r3, [r7, #31]
}
 800622c:	4618      	mov	r0, r3
 800622e:	3720      	adds	r7, #32
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b088      	sub	sp, #32
 8006238:	af02      	add	r7, sp, #8
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	603b      	str	r3, [r7, #0]
 8006240:	4613      	mov	r3, r2
 8006242:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006244:	2300      	movs	r3, #0
 8006246:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006250:	d112      	bne.n	8006278 <HAL_SPI_Receive+0x44>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d10e      	bne.n	8006278 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2204      	movs	r2, #4
 800625e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006262:	88fa      	ldrh	r2, [r7, #6]
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	4613      	mov	r3, r2
 800626a:	68ba      	ldr	r2, [r7, #8]
 800626c:	68b9      	ldr	r1, [r7, #8]
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f000 f8e9 	bl	8006446 <HAL_SPI_TransmitReceive>
 8006274:	4603      	mov	r3, r0
 8006276:	e0e2      	b.n	800643e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800627e:	2b01      	cmp	r3, #1
 8006280:	d101      	bne.n	8006286 <HAL_SPI_Receive+0x52>
 8006282:	2302      	movs	r3, #2
 8006284:	e0db      	b.n	800643e <HAL_SPI_Receive+0x20a>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800628e:	f7fc fe9d 	bl	8002fcc <HAL_GetTick>
 8006292:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b01      	cmp	r3, #1
 800629e:	d002      	beq.n	80062a6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80062a0:	2302      	movs	r3, #2
 80062a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80062a4:	e0c2      	b.n	800642c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d002      	beq.n	80062b2 <HAL_SPI_Receive+0x7e>
 80062ac:	88fb      	ldrh	r3, [r7, #6]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d102      	bne.n	80062b8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80062b6:	e0b9      	b.n	800642c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2204      	movs	r2, #4
 80062bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	88fa      	ldrh	r2, [r7, #6]
 80062d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	88fa      	ldrh	r2, [r7, #6]
 80062d6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062fe:	d107      	bne.n	8006310 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800630e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800631a:	2b40      	cmp	r3, #64	; 0x40
 800631c:	d007      	beq.n	800632e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800632c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d162      	bne.n	80063fc <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006336:	e02e      	b.n	8006396 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	f003 0301 	and.w	r3, r3, #1
 8006342:	2b01      	cmp	r3, #1
 8006344:	d115      	bne.n	8006372 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f103 020c 	add.w	r2, r3, #12
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006352:	7812      	ldrb	r2, [r2, #0]
 8006354:	b2d2      	uxtb	r2, r2
 8006356:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635c:	1c5a      	adds	r2, r3, #1
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006366:	b29b      	uxth	r3, r3
 8006368:	3b01      	subs	r3, #1
 800636a:	b29a      	uxth	r2, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006370:	e011      	b.n	8006396 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006372:	f7fc fe2b 	bl	8002fcc <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	683a      	ldr	r2, [r7, #0]
 800637e:	429a      	cmp	r2, r3
 8006380:	d803      	bhi.n	800638a <HAL_SPI_Receive+0x156>
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006388:	d102      	bne.n	8006390 <HAL_SPI_Receive+0x15c>
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d102      	bne.n	8006396 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006394:	e04a      	b.n	800642c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800639a:	b29b      	uxth	r3, r3
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1cb      	bne.n	8006338 <HAL_SPI_Receive+0x104>
 80063a0:	e031      	b.n	8006406 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	689b      	ldr	r3, [r3, #8]
 80063a8:	f003 0301 	and.w	r3, r3, #1
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d113      	bne.n	80063d8 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68da      	ldr	r2, [r3, #12]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ba:	b292      	uxth	r2, r2
 80063bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c2:	1c9a      	adds	r2, r3, #2
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	3b01      	subs	r3, #1
 80063d0:	b29a      	uxth	r2, r3
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063d6:	e011      	b.n	80063fc <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063d8:	f7fc fdf8 	bl	8002fcc <HAL_GetTick>
 80063dc:	4602      	mov	r2, r0
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	683a      	ldr	r2, [r7, #0]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d803      	bhi.n	80063f0 <HAL_SPI_Receive+0x1bc>
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063ee:	d102      	bne.n	80063f6 <HAL_SPI_Receive+0x1c2>
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d102      	bne.n	80063fc <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80063fa:	e017      	b.n	800642c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006400:	b29b      	uxth	r3, r3
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1cd      	bne.n	80063a2 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006406:	693a      	ldr	r2, [r7, #16]
 8006408:	6839      	ldr	r1, [r7, #0]
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f000 fa27 	bl	800685e <SPI_EndRxTransaction>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d002      	beq.n	800641c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2220      	movs	r2, #32
 800641a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006420:	2b00      	cmp	r3, #0
 8006422:	d002      	beq.n	800642a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	75fb      	strb	r3, [r7, #23]
 8006428:	e000      	b.n	800642c <HAL_SPI_Receive+0x1f8>
  }

error :
 800642a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800643c:	7dfb      	ldrb	r3, [r7, #23]
}
 800643e:	4618      	mov	r0, r3
 8006440:	3718      	adds	r7, #24
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}

08006446 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006446:	b580      	push	{r7, lr}
 8006448:	b08c      	sub	sp, #48	; 0x30
 800644a:	af00      	add	r7, sp, #0
 800644c:	60f8      	str	r0, [r7, #12]
 800644e:	60b9      	str	r1, [r7, #8]
 8006450:	607a      	str	r2, [r7, #4]
 8006452:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006454:	2301      	movs	r3, #1
 8006456:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006458:	2300      	movs	r3, #0
 800645a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006464:	2b01      	cmp	r3, #1
 8006466:	d101      	bne.n	800646c <HAL_SPI_TransmitReceive+0x26>
 8006468:	2302      	movs	r3, #2
 800646a:	e18a      	b.n	8006782 <HAL_SPI_TransmitReceive+0x33c>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006474:	f7fc fdaa 	bl	8002fcc <HAL_GetTick>
 8006478:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006480:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800648a:	887b      	ldrh	r3, [r7, #2]
 800648c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800648e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006492:	2b01      	cmp	r3, #1
 8006494:	d00f      	beq.n	80064b6 <HAL_SPI_TransmitReceive+0x70>
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800649c:	d107      	bne.n	80064ae <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d103      	bne.n	80064ae <HAL_SPI_TransmitReceive+0x68>
 80064a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064aa:	2b04      	cmp	r3, #4
 80064ac:	d003      	beq.n	80064b6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80064ae:	2302      	movs	r3, #2
 80064b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80064b4:	e15b      	b.n	800676e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d005      	beq.n	80064c8 <HAL_SPI_TransmitReceive+0x82>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d002      	beq.n	80064c8 <HAL_SPI_TransmitReceive+0x82>
 80064c2:	887b      	ldrh	r3, [r7, #2]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d103      	bne.n	80064d0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80064ce:	e14e      	b.n	800676e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	2b04      	cmp	r3, #4
 80064da:	d003      	beq.n	80064e4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2205      	movs	r2, #5
 80064e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	887a      	ldrh	r2, [r7, #2]
 80064f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	887a      	ldrh	r2, [r7, #2]
 80064fa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	887a      	ldrh	r2, [r7, #2]
 8006506:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	887a      	ldrh	r2, [r7, #2]
 800650c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2200      	movs	r2, #0
 8006512:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006524:	2b40      	cmp	r3, #64	; 0x40
 8006526:	d007      	beq.n	8006538 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006536:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006540:	d178      	bne.n	8006634 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d002      	beq.n	8006550 <HAL_SPI_TransmitReceive+0x10a>
 800654a:	8b7b      	ldrh	r3, [r7, #26]
 800654c:	2b01      	cmp	r3, #1
 800654e:	d166      	bne.n	800661e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006554:	881a      	ldrh	r2, [r3, #0]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006560:	1c9a      	adds	r2, r3, #2
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800656a:	b29b      	uxth	r3, r3
 800656c:	3b01      	subs	r3, #1
 800656e:	b29a      	uxth	r2, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006574:	e053      	b.n	800661e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	f003 0302 	and.w	r3, r3, #2
 8006580:	2b02      	cmp	r3, #2
 8006582:	d11b      	bne.n	80065bc <HAL_SPI_TransmitReceive+0x176>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006588:	b29b      	uxth	r3, r3
 800658a:	2b00      	cmp	r3, #0
 800658c:	d016      	beq.n	80065bc <HAL_SPI_TransmitReceive+0x176>
 800658e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006590:	2b01      	cmp	r3, #1
 8006592:	d113      	bne.n	80065bc <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006598:	881a      	ldrh	r2, [r3, #0]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a4:	1c9a      	adds	r2, r3, #2
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	3b01      	subs	r3, #1
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80065b8:	2300      	movs	r3, #0
 80065ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f003 0301 	and.w	r3, r3, #1
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d119      	bne.n	80065fe <HAL_SPI_TransmitReceive+0x1b8>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d014      	beq.n	80065fe <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	68da      	ldr	r2, [r3, #12]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065de:	b292      	uxth	r2, r2
 80065e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e6:	1c9a      	adds	r2, r3, #2
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	3b01      	subs	r3, #1
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80065fa:	2301      	movs	r3, #1
 80065fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80065fe:	f7fc fce5 	bl	8002fcc <HAL_GetTick>
 8006602:	4602      	mov	r2, r0
 8006604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800660a:	429a      	cmp	r2, r3
 800660c:	d807      	bhi.n	800661e <HAL_SPI_TransmitReceive+0x1d8>
 800660e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006610:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006614:	d003      	beq.n	800661e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800661c:	e0a7      	b.n	800676e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006622:	b29b      	uxth	r3, r3
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1a6      	bne.n	8006576 <HAL_SPI_TransmitReceive+0x130>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800662c:	b29b      	uxth	r3, r3
 800662e:	2b00      	cmp	r3, #0
 8006630:	d1a1      	bne.n	8006576 <HAL_SPI_TransmitReceive+0x130>
 8006632:	e07c      	b.n	800672e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d002      	beq.n	8006642 <HAL_SPI_TransmitReceive+0x1fc>
 800663c:	8b7b      	ldrh	r3, [r7, #26]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d16b      	bne.n	800671a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	330c      	adds	r3, #12
 800664c:	7812      	ldrb	r2, [r2, #0]
 800664e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006654:	1c5a      	adds	r2, r3, #1
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800665e:	b29b      	uxth	r3, r3
 8006660:	3b01      	subs	r3, #1
 8006662:	b29a      	uxth	r2, r3
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006668:	e057      	b.n	800671a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	f003 0302 	and.w	r3, r3, #2
 8006674:	2b02      	cmp	r3, #2
 8006676:	d11c      	bne.n	80066b2 <HAL_SPI_TransmitReceive+0x26c>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800667c:	b29b      	uxth	r3, r3
 800667e:	2b00      	cmp	r3, #0
 8006680:	d017      	beq.n	80066b2 <HAL_SPI_TransmitReceive+0x26c>
 8006682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006684:	2b01      	cmp	r3, #1
 8006686:	d114      	bne.n	80066b2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	330c      	adds	r3, #12
 8006692:	7812      	ldrb	r2, [r2, #0]
 8006694:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669a:	1c5a      	adds	r2, r3, #1
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	3b01      	subs	r3, #1
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80066ae:	2300      	movs	r3, #0
 80066b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	f003 0301 	and.w	r3, r3, #1
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d119      	bne.n	80066f4 <HAL_SPI_TransmitReceive+0x2ae>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d014      	beq.n	80066f4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	68da      	ldr	r2, [r3, #12]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d4:	b2d2      	uxtb	r2, r2
 80066d6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066dc:	1c5a      	adds	r2, r3, #1
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	3b01      	subs	r3, #1
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80066f0:	2301      	movs	r3, #1
 80066f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80066f4:	f7fc fc6a 	bl	8002fcc <HAL_GetTick>
 80066f8:	4602      	mov	r2, r0
 80066fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006700:	429a      	cmp	r2, r3
 8006702:	d803      	bhi.n	800670c <HAL_SPI_TransmitReceive+0x2c6>
 8006704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006706:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800670a:	d102      	bne.n	8006712 <HAL_SPI_TransmitReceive+0x2cc>
 800670c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670e:	2b00      	cmp	r3, #0
 8006710:	d103      	bne.n	800671a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006712:	2303      	movs	r3, #3
 8006714:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006718:	e029      	b.n	800676e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800671e:	b29b      	uxth	r3, r3
 8006720:	2b00      	cmp	r3, #0
 8006722:	d1a2      	bne.n	800666a <HAL_SPI_TransmitReceive+0x224>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006728:	b29b      	uxth	r3, r3
 800672a:	2b00      	cmp	r3, #0
 800672c:	d19d      	bne.n	800666a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800672e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006730:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f000 f8f8 	bl	8006928 <SPI_EndRxTxTransaction>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d006      	beq.n	800674c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2220      	movs	r2, #32
 8006748:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800674a:	e010      	b.n	800676e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d10b      	bne.n	800676c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006754:	2300      	movs	r3, #0
 8006756:	617b      	str	r3, [r7, #20]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	617b      	str	r3, [r7, #20]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	617b      	str	r3, [r7, #20]
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	e000      	b.n	800676e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800676c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2201      	movs	r2, #1
 8006772:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800677e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006782:	4618      	mov	r0, r3
 8006784:	3730      	adds	r7, #48	; 0x30
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b084      	sub	sp, #16
 800678e:	af00      	add	r7, sp, #0
 8006790:	60f8      	str	r0, [r7, #12]
 8006792:	60b9      	str	r1, [r7, #8]
 8006794:	603b      	str	r3, [r7, #0]
 8006796:	4613      	mov	r3, r2
 8006798:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800679a:	e04c      	b.n	8006836 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067a2:	d048      	beq.n	8006836 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80067a4:	f7fc fc12 	bl	8002fcc <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d902      	bls.n	80067ba <SPI_WaitFlagStateUntilTimeout+0x30>
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d13d      	bne.n	8006836 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	685a      	ldr	r2, [r3, #4]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80067c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067d2:	d111      	bne.n	80067f8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067dc:	d004      	beq.n	80067e8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067e6:	d107      	bne.n	80067f8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006800:	d10f      	bne.n	8006822 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681a      	ldr	r2, [r3, #0]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006810:	601a      	str	r2, [r3, #0]
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006820:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2201      	movs	r2, #1
 8006826:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e00f      	b.n	8006856 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	689a      	ldr	r2, [r3, #8]
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	4013      	ands	r3, r2
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	429a      	cmp	r2, r3
 8006844:	bf0c      	ite	eq
 8006846:	2301      	moveq	r3, #1
 8006848:	2300      	movne	r3, #0
 800684a:	b2db      	uxtb	r3, r3
 800684c:	461a      	mov	r2, r3
 800684e:	79fb      	ldrb	r3, [r7, #7]
 8006850:	429a      	cmp	r2, r3
 8006852:	d1a3      	bne.n	800679c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	3710      	adds	r7, #16
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b086      	sub	sp, #24
 8006862:	af02      	add	r7, sp, #8
 8006864:	60f8      	str	r0, [r7, #12]
 8006866:	60b9      	str	r1, [r7, #8]
 8006868:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006872:	d111      	bne.n	8006898 <SPI_EndRxTransaction+0x3a>
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800687c:	d004      	beq.n	8006888 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006886:	d107      	bne.n	8006898 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006896:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068a0:	d12a      	bne.n	80068f8 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068aa:	d012      	beq.n	80068d2 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	9300      	str	r3, [sp, #0]
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	2200      	movs	r2, #0
 80068b4:	2180      	movs	r1, #128	; 0x80
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f7ff ff67 	bl	800678a <SPI_WaitFlagStateUntilTimeout>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d02d      	beq.n	800691e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068c6:	f043 0220 	orr.w	r2, r3, #32
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e026      	b.n	8006920 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	9300      	str	r3, [sp, #0]
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	2200      	movs	r2, #0
 80068da:	2101      	movs	r1, #1
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f7ff ff54 	bl	800678a <SPI_WaitFlagStateUntilTimeout>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d01a      	beq.n	800691e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ec:	f043 0220 	orr.w	r2, r3, #32
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e013      	b.n	8006920 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	9300      	str	r3, [sp, #0]
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	2200      	movs	r2, #0
 8006900:	2101      	movs	r1, #1
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f7ff ff41 	bl	800678a <SPI_WaitFlagStateUntilTimeout>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d007      	beq.n	800691e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006912:	f043 0220 	orr.w	r2, r3, #32
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	e000      	b.n	8006920 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800691e:	2300      	movs	r3, #0
}
 8006920:	4618      	mov	r0, r3
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b088      	sub	sp, #32
 800692c:	af02      	add	r7, sp, #8
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006934:	4b1b      	ldr	r3, [pc, #108]	; (80069a4 <SPI_EndRxTxTransaction+0x7c>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a1b      	ldr	r2, [pc, #108]	; (80069a8 <SPI_EndRxTxTransaction+0x80>)
 800693a:	fba2 2303 	umull	r2, r3, r2, r3
 800693e:	0d5b      	lsrs	r3, r3, #21
 8006940:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006944:	fb02 f303 	mul.w	r3, r2, r3
 8006948:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006952:	d112      	bne.n	800697a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	9300      	str	r3, [sp, #0]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	2200      	movs	r2, #0
 800695c:	2180      	movs	r1, #128	; 0x80
 800695e:	68f8      	ldr	r0, [r7, #12]
 8006960:	f7ff ff13 	bl	800678a <SPI_WaitFlagStateUntilTimeout>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d016      	beq.n	8006998 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800696e:	f043 0220 	orr.w	r2, r3, #32
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	e00f      	b.n	800699a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00a      	beq.n	8006996 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	3b01      	subs	r3, #1
 8006984:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006990:	2b80      	cmp	r3, #128	; 0x80
 8006992:	d0f2      	beq.n	800697a <SPI_EndRxTxTransaction+0x52>
 8006994:	e000      	b.n	8006998 <SPI_EndRxTxTransaction+0x70>
        break;
 8006996:	bf00      	nop
  }

  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3718      	adds	r7, #24
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	200000c0 	.word	0x200000c0
 80069a8:	165e9f81 	.word	0x165e9f81

080069ac <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80069ac:	b084      	sub	sp, #16
 80069ae:	b480      	push	{r7}
 80069b0:	b085      	sub	sp, #20
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
 80069b6:	f107 001c 	add.w	r0, r7, #28
 80069ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80069be:	2300      	movs	r3, #0
 80069c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80069c2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80069c4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80069c6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80069c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80069ca:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80069cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80069ce:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80069d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80069d2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80069d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80069d6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	4313      	orrs	r3, r2
 80069dc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80069e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	431a      	orrs	r2, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3714      	adds	r7, #20
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	b004      	add	sp, #16
 8006a00:	4770      	bx	lr

08006a02 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006a02:	b480      	push	{r7}
 8006a04:	b083      	sub	sp, #12
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2203      	movs	r2, #3
 8006a28:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8006a2a:	2002      	movs	r0, #2
 8006a2c:	f7fc fada 	bl	8002fe4 <HAL_Delay>
  
  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3708      	adds	r7, #8
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b083      	sub	sp, #12
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 0303 	and.w	r3, r3, #3
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	370c      	adds	r7, #12
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b085      	sub	sp, #20
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
 8006a5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006a60:	2300      	movs	r3, #0
 8006a62:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006a74:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006a7a:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006a80:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006a90:	f023 030f 	bic.w	r3, r3, #15
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	431a      	orrs	r2, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3714      	adds	r7, #20
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr

08006aaa <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b083      	sub	sp, #12
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	b2db      	uxtb	r3, r3
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	3314      	adds	r3, #20
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
}  
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b085      	sub	sp, #20
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
 8006af2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006af4:	2300      	movs	r3, #0
 8006af6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	685a      	ldr	r2, [r3, #4]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006b10:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006b16:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006b1c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b28:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	431a      	orrs	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006b34:	2300      	movs	r3, #0

}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3714      	adds	r7, #20
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr

08006b42 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b088      	sub	sp, #32
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
 8006b4a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006b50:	2310      	movs	r3, #16
 8006b52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b54:	2340      	movs	r3, #64	; 0x40
 8006b56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b60:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b62:	f107 0308 	add.w	r3, r7, #8
 8006b66:	4619      	mov	r1, r3
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f7ff ff74 	bl	8006a56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b72:	2110      	movs	r1, #16
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 f975 	bl	8006e64 <SDMMC_GetCmdResp1>
 8006b7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b7c:	69fb      	ldr	r3, [r7, #28]
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3720      	adds	r7, #32
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b08a      	sub	sp, #40	; 0x28
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	60f8      	str	r0, [r7, #12]
 8006b8e:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006b96:	2307      	movs	r3, #7
 8006b98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b9a:	2340      	movs	r3, #64	; 0x40
 8006b9c:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ba2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ba6:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ba8:	f107 0310 	add.w	r3, r7, #16
 8006bac:	4619      	mov	r1, r3
 8006bae:	68f8      	ldr	r0, [r7, #12]
 8006bb0:	f7ff ff51 	bl	8006a56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bb8:	2107      	movs	r1, #7
 8006bba:	68f8      	ldr	r0, [r7, #12]
 8006bbc:	f000 f952 	bl	8006e64 <SDMMC_GetCmdResp1>
 8006bc0:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3728      	adds	r7, #40	; 0x28
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b088      	sub	sp, #32
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006be0:	2300      	movs	r3, #0
 8006be2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006be4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006be8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006bea:	f107 0308 	add.w	r3, r7, #8
 8006bee:	4619      	mov	r1, r3
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f7ff ff30 	bl	8006a56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 f90c 	bl	8006e14 <SDMMC_GetCmdError>
 8006bfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006bfe:	69fb      	ldr	r3, [r7, #28]
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3720      	adds	r7, #32
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b088      	sub	sp, #32
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006c10:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006c14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006c16:	2308      	movs	r3, #8
 8006c18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006c1a:	2340      	movs	r3, #64	; 0x40
 8006c1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c26:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c28:	f107 0308 	add.w	r3, r7, #8
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f7ff ff11 	bl	8006a56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 faf5 	bl	8007224 <SDMMC_GetCmdResp7>
 8006c3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c3c:	69fb      	ldr	r3, [r7, #28]
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3720      	adds	r7, #32
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}

08006c46 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006c46:	b580      	push	{r7, lr}
 8006c48:	b088      	sub	sp, #32
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
 8006c4e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006c54:	2337      	movs	r3, #55	; 0x37
 8006c56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006c58:	2340      	movs	r3, #64	; 0x40
 8006c5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c64:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c66:	f107 0308 	add.w	r3, r7, #8
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f7ff fef2 	bl	8006a56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c76:	2137      	movs	r1, #55	; 0x37
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 f8f3 	bl	8006e64 <SDMMC_GetCmdResp1>
 8006c7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c80:	69fb      	ldr	r3, [r7, #28]
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3720      	adds	r7, #32
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b088      	sub	sp, #32
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
 8006c92:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006ca0:	2329      	movs	r3, #41	; 0x29
 8006ca2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ca4:	2340      	movs	r3, #64	; 0x40
 8006ca6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cb0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006cb2:	f107 0308 	add.w	r3, r7, #8
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f7ff fecc 	bl	8006a56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 fa02 	bl	80070c8 <SDMMC_GetCmdResp3>
 8006cc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006cc6:	69fb      	ldr	r3, [r7, #28]
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3720      	adds	r7, #32
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b088      	sub	sp, #32
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006cde:	2306      	movs	r3, #6
 8006ce0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ce2:	2340      	movs	r3, #64	; 0x40
 8006ce4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006cf0:	f107 0308 	add.w	r3, r7, #8
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f7ff fead 	bl	8006a56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8006cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d00:	2106      	movs	r1, #6
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 f8ae 	bl	8006e64 <SDMMC_GetCmdResp1>
 8006d08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d0a:	69fb      	ldr	r3, [r7, #28]
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3720      	adds	r7, #32
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b088      	sub	sp, #32
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006d20:	2333      	movs	r3, #51	; 0x33
 8006d22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d24:	2340      	movs	r3, #64	; 0x40
 8006d26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d30:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d32:	f107 0308 	add.w	r3, r7, #8
 8006d36:	4619      	mov	r1, r3
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f7ff fe8c 	bl	8006a56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8006d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d42:	2133      	movs	r1, #51	; 0x33
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 f88d 	bl	8006e64 <SDMMC_GetCmdResp1>
 8006d4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d4c:	69fb      	ldr	r3, [r7, #28]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3720      	adds	r7, #32
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b088      	sub	sp, #32
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006d62:	2302      	movs	r3, #2
 8006d64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006d66:	23c0      	movs	r3, #192	; 0xc0
 8006d68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d72:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d74:	f107 0308 	add.w	r3, r7, #8
 8006d78:	4619      	mov	r1, r3
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f7ff fe6b 	bl	8006a56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 f95b 	bl	800703c <SDMMC_GetCmdResp2>
 8006d86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d88:	69fb      	ldr	r3, [r7, #28]
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3720      	adds	r7, #32
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b088      	sub	sp, #32
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
 8006d9a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006da0:	2309      	movs	r3, #9
 8006da2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006da4:	23c0      	movs	r3, #192	; 0xc0
 8006da6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006da8:	2300      	movs	r3, #0
 8006daa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006dac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006db0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006db2:	f107 0308 	add.w	r3, r7, #8
 8006db6:	4619      	mov	r1, r3
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f7ff fe4c 	bl	8006a56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f93c 	bl	800703c <SDMMC_GetCmdResp2>
 8006dc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006dc6:	69fb      	ldr	r3, [r7, #28]
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3720      	adds	r7, #32
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}

08006dd0 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b088      	sub	sp, #32
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006dde:	2303      	movs	r3, #3
 8006de0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006de2:	2340      	movs	r3, #64	; 0x40
 8006de4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006de6:	2300      	movs	r3, #0
 8006de8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006dea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006df0:	f107 0308 	add.w	r3, r7, #8
 8006df4:	4619      	mov	r1, r3
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f7ff fe2d 	bl	8006a56 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006dfc:	683a      	ldr	r2, [r7, #0]
 8006dfe:	2103      	movs	r1, #3
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 f99b 	bl	800713c <SDMMC_GetCmdResp6>
 8006e06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e08:	69fb      	ldr	r3, [r7, #28]
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3720      	adds	r7, #32
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
	...

08006e14 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006e14:	b490      	push	{r4, r7}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006e1c:	4b0f      	ldr	r3, [pc, #60]	; (8006e5c <SDMMC_GetCmdError+0x48>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a0f      	ldr	r2, [pc, #60]	; (8006e60 <SDMMC_GetCmdError+0x4c>)
 8006e22:	fba2 2303 	umull	r2, r3, r2, r3
 8006e26:	0a5b      	lsrs	r3, r3, #9
 8006e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e2c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006e30:	4623      	mov	r3, r4
 8006e32:	1e5c      	subs	r4, r3, #1
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d102      	bne.n	8006e3e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006e38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006e3c:	e009      	b.n	8006e52 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d0f2      	beq.n	8006e30 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	22c5      	movs	r2, #197	; 0xc5
 8006e4e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3708      	adds	r7, #8
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bc90      	pop	{r4, r7}
 8006e5a:	4770      	bx	lr
 8006e5c:	200000c0 	.word	0x200000c0
 8006e60:	10624dd3 	.word	0x10624dd3

08006e64 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006e64:	b590      	push	{r4, r7, lr}
 8006e66:	b087      	sub	sp, #28
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	607a      	str	r2, [r7, #4]
 8006e70:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006e72:	4b6f      	ldr	r3, [pc, #444]	; (8007030 <SDMMC_GetCmdResp1+0x1cc>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a6f      	ldr	r2, [pc, #444]	; (8007034 <SDMMC_GetCmdResp1+0x1d0>)
 8006e78:	fba2 2303 	umull	r2, r3, r2, r3
 8006e7c:	0a5b      	lsrs	r3, r3, #9
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006e84:	4623      	mov	r3, r4
 8006e86:	1e5c      	subs	r4, r3, #1
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d102      	bne.n	8006e92 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006e8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006e90:	e0c9      	b.n	8007026 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e96:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d0f0      	beq.n	8006e84 <SDMMC_GetCmdResp1+0x20>
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d1eb      	bne.n	8006e84 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eb0:	f003 0304 	and.w	r3, r3, #4
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d004      	beq.n	8006ec2 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2204      	movs	r2, #4
 8006ebc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006ebe:	2304      	movs	r3, #4
 8006ec0:	e0b1      	b.n	8007026 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ec6:	f003 0301 	and.w	r3, r3, #1
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d004      	beq.n	8006ed8 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	e0a6      	b.n	8007026 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	22c5      	movs	r2, #197	; 0xc5
 8006edc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006ede:	68f8      	ldr	r0, [r7, #12]
 8006ee0:	f7ff fde3 	bl	8006aaa <SDIO_GetCommandResponse>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	7afb      	ldrb	r3, [r7, #11]
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d001      	beq.n	8006ef2 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e099      	b.n	8007026 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006ef2:	2100      	movs	r1, #0
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f7ff fde5 	bl	8006ac4 <SDIO_GetResponse>
 8006efa:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006efc:	693a      	ldr	r2, [r7, #16]
 8006efe:	4b4e      	ldr	r3, [pc, #312]	; (8007038 <SDMMC_GetCmdResp1+0x1d4>)
 8006f00:	4013      	ands	r3, r2
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d101      	bne.n	8006f0a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8006f06:	2300      	movs	r3, #0
 8006f08:	e08d      	b.n	8007026 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	da02      	bge.n	8006f16 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006f10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006f14:	e087      	b.n	8007026 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d001      	beq.n	8006f24 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006f20:	2340      	movs	r3, #64	; 0x40
 8006f22:	e080      	b.n	8007026 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d001      	beq.n	8006f32 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006f2e:	2380      	movs	r3, #128	; 0x80
 8006f30:	e079      	b.n	8007026 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d002      	beq.n	8006f42 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006f3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f40:	e071      	b.n	8007026 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d002      	beq.n	8006f52 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006f4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f50:	e069      	b.n	8007026 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d002      	beq.n	8006f62 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006f5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f60:	e061      	b.n	8007026 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d002      	beq.n	8006f72 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006f6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f70:	e059      	b.n	8007026 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d002      	beq.n	8006f82 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006f7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f80:	e051      	b.n	8007026 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d002      	beq.n	8006f92 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006f8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006f90:	e049      	b.n	8007026 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d002      	beq.n	8006fa2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006f9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006fa0:	e041      	b.n	8007026 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d002      	beq.n	8006fb2 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8006fac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fb0:	e039      	b.n	8007026 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d002      	beq.n	8006fc2 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006fbc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006fc0:	e031      	b.n	8007026 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d002      	beq.n	8006fd2 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006fcc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006fd0:	e029      	b.n	8007026 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d002      	beq.n	8006fe2 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006fdc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006fe0:	e021      	b.n	8007026 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d002      	beq.n	8006ff2 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006fec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006ff0:	e019      	b.n	8007026 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006ff2:	693b      	ldr	r3, [r7, #16]
 8006ff4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d002      	beq.n	8007002 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006ffc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007000:	e011      	b.n	8007026 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d002      	beq.n	8007012 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800700c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007010:	e009      	b.n	8007026 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	f003 0308 	and.w	r3, r3, #8
 8007018:	2b00      	cmp	r3, #0
 800701a:	d002      	beq.n	8007022 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800701c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007020:	e001      	b.n	8007026 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007022:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007026:	4618      	mov	r0, r3
 8007028:	371c      	adds	r7, #28
 800702a:	46bd      	mov	sp, r7
 800702c:	bd90      	pop	{r4, r7, pc}
 800702e:	bf00      	nop
 8007030:	200000c0 	.word	0x200000c0
 8007034:	10624dd3 	.word	0x10624dd3
 8007038:	fdffe008 	.word	0xfdffe008

0800703c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800703c:	b490      	push	{r4, r7}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007044:	4b1e      	ldr	r3, [pc, #120]	; (80070c0 <SDMMC_GetCmdResp2+0x84>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a1e      	ldr	r2, [pc, #120]	; (80070c4 <SDMMC_GetCmdResp2+0x88>)
 800704a:	fba2 2303 	umull	r2, r3, r2, r3
 800704e:	0a5b      	lsrs	r3, r3, #9
 8007050:	f241 3288 	movw	r2, #5000	; 0x1388
 8007054:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007058:	4623      	mov	r3, r4
 800705a:	1e5c      	subs	r4, r3, #1
 800705c:	2b00      	cmp	r3, #0
 800705e:	d102      	bne.n	8007066 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007060:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007064:	e026      	b.n	80070b4 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800706a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007072:	2b00      	cmp	r3, #0
 8007074:	d0f0      	beq.n	8007058 <SDMMC_GetCmdResp2+0x1c>
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800707c:	2b00      	cmp	r3, #0
 800707e:	d1eb      	bne.n	8007058 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007084:	f003 0304 	and.w	r3, r3, #4
 8007088:	2b00      	cmp	r3, #0
 800708a:	d004      	beq.n	8007096 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2204      	movs	r2, #4
 8007090:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007092:	2304      	movs	r3, #4
 8007094:	e00e      	b.n	80070b4 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800709a:	f003 0301 	and.w	r3, r3, #1
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d004      	beq.n	80070ac <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2201      	movs	r2, #1
 80070a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80070a8:	2301      	movs	r3, #1
 80070aa:	e003      	b.n	80070b4 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	22c5      	movs	r2, #197	; 0xc5
 80070b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3710      	adds	r7, #16
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bc90      	pop	{r4, r7}
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop
 80070c0:	200000c0 	.word	0x200000c0
 80070c4:	10624dd3 	.word	0x10624dd3

080070c8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80070c8:	b490      	push	{r4, r7}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80070d0:	4b18      	ldr	r3, [pc, #96]	; (8007134 <SDMMC_GetCmdResp3+0x6c>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a18      	ldr	r2, [pc, #96]	; (8007138 <SDMMC_GetCmdResp3+0x70>)
 80070d6:	fba2 2303 	umull	r2, r3, r2, r3
 80070da:	0a5b      	lsrs	r3, r3, #9
 80070dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80070e0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80070e4:	4623      	mov	r3, r4
 80070e6:	1e5c      	subs	r4, r3, #1
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d102      	bne.n	80070f2 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80070ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80070f0:	e01b      	b.n	800712a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070f6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d0f0      	beq.n	80070e4 <SDMMC_GetCmdResp3+0x1c>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007108:	2b00      	cmp	r3, #0
 800710a:	d1eb      	bne.n	80070e4 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007110:	f003 0304 	and.w	r3, r3, #4
 8007114:	2b00      	cmp	r3, #0
 8007116:	d004      	beq.n	8007122 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2204      	movs	r2, #4
 800711c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800711e:	2304      	movs	r3, #4
 8007120:	e003      	b.n	800712a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	22c5      	movs	r2, #197	; 0xc5
 8007126:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bc90      	pop	{r4, r7}
 8007132:	4770      	bx	lr
 8007134:	200000c0 	.word	0x200000c0
 8007138:	10624dd3 	.word	0x10624dd3

0800713c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800713c:	b590      	push	{r4, r7, lr}
 800713e:	b087      	sub	sp, #28
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	460b      	mov	r3, r1
 8007146:	607a      	str	r2, [r7, #4]
 8007148:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800714a:	4b34      	ldr	r3, [pc, #208]	; (800721c <SDMMC_GetCmdResp6+0xe0>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a34      	ldr	r2, [pc, #208]	; (8007220 <SDMMC_GetCmdResp6+0xe4>)
 8007150:	fba2 2303 	umull	r2, r3, r2, r3
 8007154:	0a5b      	lsrs	r3, r3, #9
 8007156:	f241 3288 	movw	r2, #5000	; 0x1388
 800715a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800715e:	4623      	mov	r3, r4
 8007160:	1e5c      	subs	r4, r3, #1
 8007162:	2b00      	cmp	r3, #0
 8007164:	d102      	bne.n	800716c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007166:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800716a:	e052      	b.n	8007212 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007170:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007178:	2b00      	cmp	r3, #0
 800717a:	d0f0      	beq.n	800715e <SDMMC_GetCmdResp6+0x22>
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1eb      	bne.n	800715e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800718a:	f003 0304 	and.w	r3, r3, #4
 800718e:	2b00      	cmp	r3, #0
 8007190:	d004      	beq.n	800719c <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2204      	movs	r2, #4
 8007196:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007198:	2304      	movs	r3, #4
 800719a:	e03a      	b.n	8007212 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071a0:	f003 0301 	and.w	r3, r3, #1
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d004      	beq.n	80071b2 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2201      	movs	r2, #1
 80071ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80071ae:	2301      	movs	r3, #1
 80071b0:	e02f      	b.n	8007212 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f7ff fc79 	bl	8006aaa <SDIO_GetCommandResponse>
 80071b8:	4603      	mov	r3, r0
 80071ba:	461a      	mov	r2, r3
 80071bc:	7afb      	ldrb	r3, [r7, #11]
 80071be:	4293      	cmp	r3, r2
 80071c0:	d001      	beq.n	80071c6 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e025      	b.n	8007212 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	22c5      	movs	r2, #197	; 0xc5
 80071ca:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80071cc:	2100      	movs	r1, #0
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f7ff fc78 	bl	8006ac4 <SDIO_GetResponse>
 80071d4:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d106      	bne.n	80071ee <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	0c1b      	lsrs	r3, r3, #16
 80071e4:	b29a      	uxth	r2, r3
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80071ea:	2300      	movs	r3, #0
 80071ec:	e011      	b.n	8007212 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d002      	beq.n	80071fe <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80071f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80071fc:	e009      	b.n	8007212 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007204:	2b00      	cmp	r3, #0
 8007206:	d002      	beq.n	800720e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007208:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800720c:	e001      	b.n	8007212 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800720e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007212:	4618      	mov	r0, r3
 8007214:	371c      	adds	r7, #28
 8007216:	46bd      	mov	sp, r7
 8007218:	bd90      	pop	{r4, r7, pc}
 800721a:	bf00      	nop
 800721c:	200000c0 	.word	0x200000c0
 8007220:	10624dd3 	.word	0x10624dd3

08007224 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007224:	b490      	push	{r4, r7}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800722c:	4b21      	ldr	r3, [pc, #132]	; (80072b4 <SDMMC_GetCmdResp7+0x90>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a21      	ldr	r2, [pc, #132]	; (80072b8 <SDMMC_GetCmdResp7+0x94>)
 8007232:	fba2 2303 	umull	r2, r3, r2, r3
 8007236:	0a5b      	lsrs	r3, r3, #9
 8007238:	f241 3288 	movw	r2, #5000	; 0x1388
 800723c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007240:	4623      	mov	r3, r4
 8007242:	1e5c      	subs	r4, r3, #1
 8007244:	2b00      	cmp	r3, #0
 8007246:	d102      	bne.n	800724e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007248:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800724c:	e02c      	b.n	80072a8 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007252:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800725a:	2b00      	cmp	r3, #0
 800725c:	d0f0      	beq.n	8007240 <SDMMC_GetCmdResp7+0x1c>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007264:	2b00      	cmp	r3, #0
 8007266:	d1eb      	bne.n	8007240 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800726c:	f003 0304 	and.w	r3, r3, #4
 8007270:	2b00      	cmp	r3, #0
 8007272:	d004      	beq.n	800727e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2204      	movs	r2, #4
 8007278:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800727a:	2304      	movs	r3, #4
 800727c:	e014      	b.n	80072a8 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007282:	f003 0301 	and.w	r3, r3, #1
 8007286:	2b00      	cmp	r3, #0
 8007288:	d004      	beq.n	8007294 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2201      	movs	r2, #1
 800728e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007290:	2301      	movs	r3, #1
 8007292:	e009      	b.n	80072a8 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800729c:	2b00      	cmp	r3, #0
 800729e:	d002      	beq.n	80072a6 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2240      	movs	r2, #64	; 0x40
 80072a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80072a6:	2300      	movs	r3, #0
  
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3710      	adds	r7, #16
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bc90      	pop	{r4, r7}
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	200000c0 	.word	0x200000c0
 80072b8:	10624dd3 	.word	0x10624dd3

080072bc <__errno>:
 80072bc:	4b01      	ldr	r3, [pc, #4]	; (80072c4 <__errno+0x8>)
 80072be:	6818      	ldr	r0, [r3, #0]
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop
 80072c4:	200000d0 	.word	0x200000d0

080072c8 <__libc_init_array>:
 80072c8:	b570      	push	{r4, r5, r6, lr}
 80072ca:	4e0d      	ldr	r6, [pc, #52]	; (8007300 <__libc_init_array+0x38>)
 80072cc:	4c0d      	ldr	r4, [pc, #52]	; (8007304 <__libc_init_array+0x3c>)
 80072ce:	1ba4      	subs	r4, r4, r6
 80072d0:	10a4      	asrs	r4, r4, #2
 80072d2:	2500      	movs	r5, #0
 80072d4:	42a5      	cmp	r5, r4
 80072d6:	d109      	bne.n	80072ec <__libc_init_array+0x24>
 80072d8:	4e0b      	ldr	r6, [pc, #44]	; (8007308 <__libc_init_array+0x40>)
 80072da:	4c0c      	ldr	r4, [pc, #48]	; (800730c <__libc_init_array+0x44>)
 80072dc:	f002 fbaa 	bl	8009a34 <_init>
 80072e0:	1ba4      	subs	r4, r4, r6
 80072e2:	10a4      	asrs	r4, r4, #2
 80072e4:	2500      	movs	r5, #0
 80072e6:	42a5      	cmp	r5, r4
 80072e8:	d105      	bne.n	80072f6 <__libc_init_array+0x2e>
 80072ea:	bd70      	pop	{r4, r5, r6, pc}
 80072ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80072f0:	4798      	blx	r3
 80072f2:	3501      	adds	r5, #1
 80072f4:	e7ee      	b.n	80072d4 <__libc_init_array+0xc>
 80072f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80072fa:	4798      	blx	r3
 80072fc:	3501      	adds	r5, #1
 80072fe:	e7f2      	b.n	80072e6 <__libc_init_array+0x1e>
 8007300:	08009f48 	.word	0x08009f48
 8007304:	08009f48 	.word	0x08009f48
 8007308:	08009f48 	.word	0x08009f48
 800730c:	08009f4c 	.word	0x08009f4c

08007310 <memset>:
 8007310:	4402      	add	r2, r0
 8007312:	4603      	mov	r3, r0
 8007314:	4293      	cmp	r3, r2
 8007316:	d100      	bne.n	800731a <memset+0xa>
 8007318:	4770      	bx	lr
 800731a:	f803 1b01 	strb.w	r1, [r3], #1
 800731e:	e7f9      	b.n	8007314 <memset+0x4>

08007320 <__cvt>:
 8007320:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007324:	ec55 4b10 	vmov	r4, r5, d0
 8007328:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800732a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800732e:	2d00      	cmp	r5, #0
 8007330:	460e      	mov	r6, r1
 8007332:	4691      	mov	r9, r2
 8007334:	4619      	mov	r1, r3
 8007336:	bfb8      	it	lt
 8007338:	4622      	movlt	r2, r4
 800733a:	462b      	mov	r3, r5
 800733c:	f027 0720 	bic.w	r7, r7, #32
 8007340:	bfbb      	ittet	lt
 8007342:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007346:	461d      	movlt	r5, r3
 8007348:	2300      	movge	r3, #0
 800734a:	232d      	movlt	r3, #45	; 0x2d
 800734c:	bfb8      	it	lt
 800734e:	4614      	movlt	r4, r2
 8007350:	2f46      	cmp	r7, #70	; 0x46
 8007352:	700b      	strb	r3, [r1, #0]
 8007354:	d004      	beq.n	8007360 <__cvt+0x40>
 8007356:	2f45      	cmp	r7, #69	; 0x45
 8007358:	d100      	bne.n	800735c <__cvt+0x3c>
 800735a:	3601      	adds	r6, #1
 800735c:	2102      	movs	r1, #2
 800735e:	e000      	b.n	8007362 <__cvt+0x42>
 8007360:	2103      	movs	r1, #3
 8007362:	ab03      	add	r3, sp, #12
 8007364:	9301      	str	r3, [sp, #4]
 8007366:	ab02      	add	r3, sp, #8
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	4632      	mov	r2, r6
 800736c:	4653      	mov	r3, sl
 800736e:	ec45 4b10 	vmov	d0, r4, r5
 8007372:	f000 fdf9 	bl	8007f68 <_dtoa_r>
 8007376:	2f47      	cmp	r7, #71	; 0x47
 8007378:	4680      	mov	r8, r0
 800737a:	d102      	bne.n	8007382 <__cvt+0x62>
 800737c:	f019 0f01 	tst.w	r9, #1
 8007380:	d026      	beq.n	80073d0 <__cvt+0xb0>
 8007382:	2f46      	cmp	r7, #70	; 0x46
 8007384:	eb08 0906 	add.w	r9, r8, r6
 8007388:	d111      	bne.n	80073ae <__cvt+0x8e>
 800738a:	f898 3000 	ldrb.w	r3, [r8]
 800738e:	2b30      	cmp	r3, #48	; 0x30
 8007390:	d10a      	bne.n	80073a8 <__cvt+0x88>
 8007392:	2200      	movs	r2, #0
 8007394:	2300      	movs	r3, #0
 8007396:	4620      	mov	r0, r4
 8007398:	4629      	mov	r1, r5
 800739a:	f7f9 fb95 	bl	8000ac8 <__aeabi_dcmpeq>
 800739e:	b918      	cbnz	r0, 80073a8 <__cvt+0x88>
 80073a0:	f1c6 0601 	rsb	r6, r6, #1
 80073a4:	f8ca 6000 	str.w	r6, [sl]
 80073a8:	f8da 3000 	ldr.w	r3, [sl]
 80073ac:	4499      	add	r9, r3
 80073ae:	2200      	movs	r2, #0
 80073b0:	2300      	movs	r3, #0
 80073b2:	4620      	mov	r0, r4
 80073b4:	4629      	mov	r1, r5
 80073b6:	f7f9 fb87 	bl	8000ac8 <__aeabi_dcmpeq>
 80073ba:	b938      	cbnz	r0, 80073cc <__cvt+0xac>
 80073bc:	2230      	movs	r2, #48	; 0x30
 80073be:	9b03      	ldr	r3, [sp, #12]
 80073c0:	454b      	cmp	r3, r9
 80073c2:	d205      	bcs.n	80073d0 <__cvt+0xb0>
 80073c4:	1c59      	adds	r1, r3, #1
 80073c6:	9103      	str	r1, [sp, #12]
 80073c8:	701a      	strb	r2, [r3, #0]
 80073ca:	e7f8      	b.n	80073be <__cvt+0x9e>
 80073cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80073d0:	9b03      	ldr	r3, [sp, #12]
 80073d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80073d4:	eba3 0308 	sub.w	r3, r3, r8
 80073d8:	4640      	mov	r0, r8
 80073da:	6013      	str	r3, [r2, #0]
 80073dc:	b004      	add	sp, #16
 80073de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080073e2 <__exponent>:
 80073e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073e4:	2900      	cmp	r1, #0
 80073e6:	4604      	mov	r4, r0
 80073e8:	bfba      	itte	lt
 80073ea:	4249      	neglt	r1, r1
 80073ec:	232d      	movlt	r3, #45	; 0x2d
 80073ee:	232b      	movge	r3, #43	; 0x2b
 80073f0:	2909      	cmp	r1, #9
 80073f2:	f804 2b02 	strb.w	r2, [r4], #2
 80073f6:	7043      	strb	r3, [r0, #1]
 80073f8:	dd20      	ble.n	800743c <__exponent+0x5a>
 80073fa:	f10d 0307 	add.w	r3, sp, #7
 80073fe:	461f      	mov	r7, r3
 8007400:	260a      	movs	r6, #10
 8007402:	fb91 f5f6 	sdiv	r5, r1, r6
 8007406:	fb06 1115 	mls	r1, r6, r5, r1
 800740a:	3130      	adds	r1, #48	; 0x30
 800740c:	2d09      	cmp	r5, #9
 800740e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007412:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8007416:	4629      	mov	r1, r5
 8007418:	dc09      	bgt.n	800742e <__exponent+0x4c>
 800741a:	3130      	adds	r1, #48	; 0x30
 800741c:	3b02      	subs	r3, #2
 800741e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007422:	42bb      	cmp	r3, r7
 8007424:	4622      	mov	r2, r4
 8007426:	d304      	bcc.n	8007432 <__exponent+0x50>
 8007428:	1a10      	subs	r0, r2, r0
 800742a:	b003      	add	sp, #12
 800742c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800742e:	4613      	mov	r3, r2
 8007430:	e7e7      	b.n	8007402 <__exponent+0x20>
 8007432:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007436:	f804 2b01 	strb.w	r2, [r4], #1
 800743a:	e7f2      	b.n	8007422 <__exponent+0x40>
 800743c:	2330      	movs	r3, #48	; 0x30
 800743e:	4419      	add	r1, r3
 8007440:	7083      	strb	r3, [r0, #2]
 8007442:	1d02      	adds	r2, r0, #4
 8007444:	70c1      	strb	r1, [r0, #3]
 8007446:	e7ef      	b.n	8007428 <__exponent+0x46>

08007448 <_printf_float>:
 8007448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800744c:	b08d      	sub	sp, #52	; 0x34
 800744e:	460c      	mov	r4, r1
 8007450:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007454:	4616      	mov	r6, r2
 8007456:	461f      	mov	r7, r3
 8007458:	4605      	mov	r5, r0
 800745a:	f001 fcb7 	bl	8008dcc <_localeconv_r>
 800745e:	6803      	ldr	r3, [r0, #0]
 8007460:	9304      	str	r3, [sp, #16]
 8007462:	4618      	mov	r0, r3
 8007464:	f7f8 feb4 	bl	80001d0 <strlen>
 8007468:	2300      	movs	r3, #0
 800746a:	930a      	str	r3, [sp, #40]	; 0x28
 800746c:	f8d8 3000 	ldr.w	r3, [r8]
 8007470:	9005      	str	r0, [sp, #20]
 8007472:	3307      	adds	r3, #7
 8007474:	f023 0307 	bic.w	r3, r3, #7
 8007478:	f103 0208 	add.w	r2, r3, #8
 800747c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007480:	f8d4 b000 	ldr.w	fp, [r4]
 8007484:	f8c8 2000 	str.w	r2, [r8]
 8007488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007490:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007494:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007498:	9307      	str	r3, [sp, #28]
 800749a:	f8cd 8018 	str.w	r8, [sp, #24]
 800749e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80074a2:	4ba7      	ldr	r3, [pc, #668]	; (8007740 <_printf_float+0x2f8>)
 80074a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074a8:	f7f9 fb40 	bl	8000b2c <__aeabi_dcmpun>
 80074ac:	bb70      	cbnz	r0, 800750c <_printf_float+0xc4>
 80074ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80074b2:	4ba3      	ldr	r3, [pc, #652]	; (8007740 <_printf_float+0x2f8>)
 80074b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074b8:	f7f9 fb1a 	bl	8000af0 <__aeabi_dcmple>
 80074bc:	bb30      	cbnz	r0, 800750c <_printf_float+0xc4>
 80074be:	2200      	movs	r2, #0
 80074c0:	2300      	movs	r3, #0
 80074c2:	4640      	mov	r0, r8
 80074c4:	4649      	mov	r1, r9
 80074c6:	f7f9 fb09 	bl	8000adc <__aeabi_dcmplt>
 80074ca:	b110      	cbz	r0, 80074d2 <_printf_float+0x8a>
 80074cc:	232d      	movs	r3, #45	; 0x2d
 80074ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074d2:	4a9c      	ldr	r2, [pc, #624]	; (8007744 <_printf_float+0x2fc>)
 80074d4:	4b9c      	ldr	r3, [pc, #624]	; (8007748 <_printf_float+0x300>)
 80074d6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80074da:	bf8c      	ite	hi
 80074dc:	4690      	movhi	r8, r2
 80074de:	4698      	movls	r8, r3
 80074e0:	2303      	movs	r3, #3
 80074e2:	f02b 0204 	bic.w	r2, fp, #4
 80074e6:	6123      	str	r3, [r4, #16]
 80074e8:	6022      	str	r2, [r4, #0]
 80074ea:	f04f 0900 	mov.w	r9, #0
 80074ee:	9700      	str	r7, [sp, #0]
 80074f0:	4633      	mov	r3, r6
 80074f2:	aa0b      	add	r2, sp, #44	; 0x2c
 80074f4:	4621      	mov	r1, r4
 80074f6:	4628      	mov	r0, r5
 80074f8:	f000 f9e6 	bl	80078c8 <_printf_common>
 80074fc:	3001      	adds	r0, #1
 80074fe:	f040 808d 	bne.w	800761c <_printf_float+0x1d4>
 8007502:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007506:	b00d      	add	sp, #52	; 0x34
 8007508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800750c:	4642      	mov	r2, r8
 800750e:	464b      	mov	r3, r9
 8007510:	4640      	mov	r0, r8
 8007512:	4649      	mov	r1, r9
 8007514:	f7f9 fb0a 	bl	8000b2c <__aeabi_dcmpun>
 8007518:	b110      	cbz	r0, 8007520 <_printf_float+0xd8>
 800751a:	4a8c      	ldr	r2, [pc, #560]	; (800774c <_printf_float+0x304>)
 800751c:	4b8c      	ldr	r3, [pc, #560]	; (8007750 <_printf_float+0x308>)
 800751e:	e7da      	b.n	80074d6 <_printf_float+0x8e>
 8007520:	6861      	ldr	r1, [r4, #4]
 8007522:	1c4b      	adds	r3, r1, #1
 8007524:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8007528:	a80a      	add	r0, sp, #40	; 0x28
 800752a:	d13e      	bne.n	80075aa <_printf_float+0x162>
 800752c:	2306      	movs	r3, #6
 800752e:	6063      	str	r3, [r4, #4]
 8007530:	2300      	movs	r3, #0
 8007532:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8007536:	ab09      	add	r3, sp, #36	; 0x24
 8007538:	9300      	str	r3, [sp, #0]
 800753a:	ec49 8b10 	vmov	d0, r8, r9
 800753e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007542:	6022      	str	r2, [r4, #0]
 8007544:	f8cd a004 	str.w	sl, [sp, #4]
 8007548:	6861      	ldr	r1, [r4, #4]
 800754a:	4628      	mov	r0, r5
 800754c:	f7ff fee8 	bl	8007320 <__cvt>
 8007550:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007554:	2b47      	cmp	r3, #71	; 0x47
 8007556:	4680      	mov	r8, r0
 8007558:	d109      	bne.n	800756e <_printf_float+0x126>
 800755a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800755c:	1cd8      	adds	r0, r3, #3
 800755e:	db02      	blt.n	8007566 <_printf_float+0x11e>
 8007560:	6862      	ldr	r2, [r4, #4]
 8007562:	4293      	cmp	r3, r2
 8007564:	dd47      	ble.n	80075f6 <_printf_float+0x1ae>
 8007566:	f1aa 0a02 	sub.w	sl, sl, #2
 800756a:	fa5f fa8a 	uxtb.w	sl, sl
 800756e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007572:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007574:	d824      	bhi.n	80075c0 <_printf_float+0x178>
 8007576:	3901      	subs	r1, #1
 8007578:	4652      	mov	r2, sl
 800757a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800757e:	9109      	str	r1, [sp, #36]	; 0x24
 8007580:	f7ff ff2f 	bl	80073e2 <__exponent>
 8007584:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007586:	1813      	adds	r3, r2, r0
 8007588:	2a01      	cmp	r2, #1
 800758a:	4681      	mov	r9, r0
 800758c:	6123      	str	r3, [r4, #16]
 800758e:	dc02      	bgt.n	8007596 <_printf_float+0x14e>
 8007590:	6822      	ldr	r2, [r4, #0]
 8007592:	07d1      	lsls	r1, r2, #31
 8007594:	d501      	bpl.n	800759a <_printf_float+0x152>
 8007596:	3301      	adds	r3, #1
 8007598:	6123      	str	r3, [r4, #16]
 800759a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d0a5      	beq.n	80074ee <_printf_float+0xa6>
 80075a2:	232d      	movs	r3, #45	; 0x2d
 80075a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075a8:	e7a1      	b.n	80074ee <_printf_float+0xa6>
 80075aa:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80075ae:	f000 8177 	beq.w	80078a0 <_printf_float+0x458>
 80075b2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80075b6:	d1bb      	bne.n	8007530 <_printf_float+0xe8>
 80075b8:	2900      	cmp	r1, #0
 80075ba:	d1b9      	bne.n	8007530 <_printf_float+0xe8>
 80075bc:	2301      	movs	r3, #1
 80075be:	e7b6      	b.n	800752e <_printf_float+0xe6>
 80075c0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80075c4:	d119      	bne.n	80075fa <_printf_float+0x1b2>
 80075c6:	2900      	cmp	r1, #0
 80075c8:	6863      	ldr	r3, [r4, #4]
 80075ca:	dd0c      	ble.n	80075e6 <_printf_float+0x19e>
 80075cc:	6121      	str	r1, [r4, #16]
 80075ce:	b913      	cbnz	r3, 80075d6 <_printf_float+0x18e>
 80075d0:	6822      	ldr	r2, [r4, #0]
 80075d2:	07d2      	lsls	r2, r2, #31
 80075d4:	d502      	bpl.n	80075dc <_printf_float+0x194>
 80075d6:	3301      	adds	r3, #1
 80075d8:	440b      	add	r3, r1
 80075da:	6123      	str	r3, [r4, #16]
 80075dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075de:	65a3      	str	r3, [r4, #88]	; 0x58
 80075e0:	f04f 0900 	mov.w	r9, #0
 80075e4:	e7d9      	b.n	800759a <_printf_float+0x152>
 80075e6:	b913      	cbnz	r3, 80075ee <_printf_float+0x1a6>
 80075e8:	6822      	ldr	r2, [r4, #0]
 80075ea:	07d0      	lsls	r0, r2, #31
 80075ec:	d501      	bpl.n	80075f2 <_printf_float+0x1aa>
 80075ee:	3302      	adds	r3, #2
 80075f0:	e7f3      	b.n	80075da <_printf_float+0x192>
 80075f2:	2301      	movs	r3, #1
 80075f4:	e7f1      	b.n	80075da <_printf_float+0x192>
 80075f6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80075fa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80075fe:	4293      	cmp	r3, r2
 8007600:	db05      	blt.n	800760e <_printf_float+0x1c6>
 8007602:	6822      	ldr	r2, [r4, #0]
 8007604:	6123      	str	r3, [r4, #16]
 8007606:	07d1      	lsls	r1, r2, #31
 8007608:	d5e8      	bpl.n	80075dc <_printf_float+0x194>
 800760a:	3301      	adds	r3, #1
 800760c:	e7e5      	b.n	80075da <_printf_float+0x192>
 800760e:	2b00      	cmp	r3, #0
 8007610:	bfd4      	ite	le
 8007612:	f1c3 0302 	rsble	r3, r3, #2
 8007616:	2301      	movgt	r3, #1
 8007618:	4413      	add	r3, r2
 800761a:	e7de      	b.n	80075da <_printf_float+0x192>
 800761c:	6823      	ldr	r3, [r4, #0]
 800761e:	055a      	lsls	r2, r3, #21
 8007620:	d407      	bmi.n	8007632 <_printf_float+0x1ea>
 8007622:	6923      	ldr	r3, [r4, #16]
 8007624:	4642      	mov	r2, r8
 8007626:	4631      	mov	r1, r6
 8007628:	4628      	mov	r0, r5
 800762a:	47b8      	blx	r7
 800762c:	3001      	adds	r0, #1
 800762e:	d12b      	bne.n	8007688 <_printf_float+0x240>
 8007630:	e767      	b.n	8007502 <_printf_float+0xba>
 8007632:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007636:	f240 80dc 	bls.w	80077f2 <_printf_float+0x3aa>
 800763a:	2200      	movs	r2, #0
 800763c:	2300      	movs	r3, #0
 800763e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007642:	f7f9 fa41 	bl	8000ac8 <__aeabi_dcmpeq>
 8007646:	2800      	cmp	r0, #0
 8007648:	d033      	beq.n	80076b2 <_printf_float+0x26a>
 800764a:	2301      	movs	r3, #1
 800764c:	4a41      	ldr	r2, [pc, #260]	; (8007754 <_printf_float+0x30c>)
 800764e:	4631      	mov	r1, r6
 8007650:	4628      	mov	r0, r5
 8007652:	47b8      	blx	r7
 8007654:	3001      	adds	r0, #1
 8007656:	f43f af54 	beq.w	8007502 <_printf_float+0xba>
 800765a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800765e:	429a      	cmp	r2, r3
 8007660:	db02      	blt.n	8007668 <_printf_float+0x220>
 8007662:	6823      	ldr	r3, [r4, #0]
 8007664:	07d8      	lsls	r0, r3, #31
 8007666:	d50f      	bpl.n	8007688 <_printf_float+0x240>
 8007668:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800766c:	4631      	mov	r1, r6
 800766e:	4628      	mov	r0, r5
 8007670:	47b8      	blx	r7
 8007672:	3001      	adds	r0, #1
 8007674:	f43f af45 	beq.w	8007502 <_printf_float+0xba>
 8007678:	f04f 0800 	mov.w	r8, #0
 800767c:	f104 091a 	add.w	r9, r4, #26
 8007680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007682:	3b01      	subs	r3, #1
 8007684:	4543      	cmp	r3, r8
 8007686:	dc09      	bgt.n	800769c <_printf_float+0x254>
 8007688:	6823      	ldr	r3, [r4, #0]
 800768a:	079b      	lsls	r3, r3, #30
 800768c:	f100 8103 	bmi.w	8007896 <_printf_float+0x44e>
 8007690:	68e0      	ldr	r0, [r4, #12]
 8007692:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007694:	4298      	cmp	r0, r3
 8007696:	bfb8      	it	lt
 8007698:	4618      	movlt	r0, r3
 800769a:	e734      	b.n	8007506 <_printf_float+0xbe>
 800769c:	2301      	movs	r3, #1
 800769e:	464a      	mov	r2, r9
 80076a0:	4631      	mov	r1, r6
 80076a2:	4628      	mov	r0, r5
 80076a4:	47b8      	blx	r7
 80076a6:	3001      	adds	r0, #1
 80076a8:	f43f af2b 	beq.w	8007502 <_printf_float+0xba>
 80076ac:	f108 0801 	add.w	r8, r8, #1
 80076b0:	e7e6      	b.n	8007680 <_printf_float+0x238>
 80076b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	dc2b      	bgt.n	8007710 <_printf_float+0x2c8>
 80076b8:	2301      	movs	r3, #1
 80076ba:	4a26      	ldr	r2, [pc, #152]	; (8007754 <_printf_float+0x30c>)
 80076bc:	4631      	mov	r1, r6
 80076be:	4628      	mov	r0, r5
 80076c0:	47b8      	blx	r7
 80076c2:	3001      	adds	r0, #1
 80076c4:	f43f af1d 	beq.w	8007502 <_printf_float+0xba>
 80076c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ca:	b923      	cbnz	r3, 80076d6 <_printf_float+0x28e>
 80076cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076ce:	b913      	cbnz	r3, 80076d6 <_printf_float+0x28e>
 80076d0:	6823      	ldr	r3, [r4, #0]
 80076d2:	07d9      	lsls	r1, r3, #31
 80076d4:	d5d8      	bpl.n	8007688 <_printf_float+0x240>
 80076d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076da:	4631      	mov	r1, r6
 80076dc:	4628      	mov	r0, r5
 80076de:	47b8      	blx	r7
 80076e0:	3001      	adds	r0, #1
 80076e2:	f43f af0e 	beq.w	8007502 <_printf_float+0xba>
 80076e6:	f04f 0900 	mov.w	r9, #0
 80076ea:	f104 0a1a 	add.w	sl, r4, #26
 80076ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076f0:	425b      	negs	r3, r3
 80076f2:	454b      	cmp	r3, r9
 80076f4:	dc01      	bgt.n	80076fa <_printf_float+0x2b2>
 80076f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076f8:	e794      	b.n	8007624 <_printf_float+0x1dc>
 80076fa:	2301      	movs	r3, #1
 80076fc:	4652      	mov	r2, sl
 80076fe:	4631      	mov	r1, r6
 8007700:	4628      	mov	r0, r5
 8007702:	47b8      	blx	r7
 8007704:	3001      	adds	r0, #1
 8007706:	f43f aefc 	beq.w	8007502 <_printf_float+0xba>
 800770a:	f109 0901 	add.w	r9, r9, #1
 800770e:	e7ee      	b.n	80076ee <_printf_float+0x2a6>
 8007710:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007712:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007714:	429a      	cmp	r2, r3
 8007716:	bfa8      	it	ge
 8007718:	461a      	movge	r2, r3
 800771a:	2a00      	cmp	r2, #0
 800771c:	4691      	mov	r9, r2
 800771e:	dd07      	ble.n	8007730 <_printf_float+0x2e8>
 8007720:	4613      	mov	r3, r2
 8007722:	4631      	mov	r1, r6
 8007724:	4642      	mov	r2, r8
 8007726:	4628      	mov	r0, r5
 8007728:	47b8      	blx	r7
 800772a:	3001      	adds	r0, #1
 800772c:	f43f aee9 	beq.w	8007502 <_printf_float+0xba>
 8007730:	f104 031a 	add.w	r3, r4, #26
 8007734:	f04f 0b00 	mov.w	fp, #0
 8007738:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800773c:	9306      	str	r3, [sp, #24]
 800773e:	e015      	b.n	800776c <_printf_float+0x324>
 8007740:	7fefffff 	.word	0x7fefffff
 8007744:	08009c88 	.word	0x08009c88
 8007748:	08009c84 	.word	0x08009c84
 800774c:	08009c90 	.word	0x08009c90
 8007750:	08009c8c 	.word	0x08009c8c
 8007754:	08009c94 	.word	0x08009c94
 8007758:	2301      	movs	r3, #1
 800775a:	9a06      	ldr	r2, [sp, #24]
 800775c:	4631      	mov	r1, r6
 800775e:	4628      	mov	r0, r5
 8007760:	47b8      	blx	r7
 8007762:	3001      	adds	r0, #1
 8007764:	f43f aecd 	beq.w	8007502 <_printf_float+0xba>
 8007768:	f10b 0b01 	add.w	fp, fp, #1
 800776c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007770:	ebaa 0309 	sub.w	r3, sl, r9
 8007774:	455b      	cmp	r3, fp
 8007776:	dcef      	bgt.n	8007758 <_printf_float+0x310>
 8007778:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800777c:	429a      	cmp	r2, r3
 800777e:	44d0      	add	r8, sl
 8007780:	db15      	blt.n	80077ae <_printf_float+0x366>
 8007782:	6823      	ldr	r3, [r4, #0]
 8007784:	07da      	lsls	r2, r3, #31
 8007786:	d412      	bmi.n	80077ae <_printf_float+0x366>
 8007788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800778a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800778c:	eba3 020a 	sub.w	r2, r3, sl
 8007790:	eba3 0a01 	sub.w	sl, r3, r1
 8007794:	4592      	cmp	sl, r2
 8007796:	bfa8      	it	ge
 8007798:	4692      	movge	sl, r2
 800779a:	f1ba 0f00 	cmp.w	sl, #0
 800779e:	dc0e      	bgt.n	80077be <_printf_float+0x376>
 80077a0:	f04f 0800 	mov.w	r8, #0
 80077a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80077a8:	f104 091a 	add.w	r9, r4, #26
 80077ac:	e019      	b.n	80077e2 <_printf_float+0x39a>
 80077ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077b2:	4631      	mov	r1, r6
 80077b4:	4628      	mov	r0, r5
 80077b6:	47b8      	blx	r7
 80077b8:	3001      	adds	r0, #1
 80077ba:	d1e5      	bne.n	8007788 <_printf_float+0x340>
 80077bc:	e6a1      	b.n	8007502 <_printf_float+0xba>
 80077be:	4653      	mov	r3, sl
 80077c0:	4642      	mov	r2, r8
 80077c2:	4631      	mov	r1, r6
 80077c4:	4628      	mov	r0, r5
 80077c6:	47b8      	blx	r7
 80077c8:	3001      	adds	r0, #1
 80077ca:	d1e9      	bne.n	80077a0 <_printf_float+0x358>
 80077cc:	e699      	b.n	8007502 <_printf_float+0xba>
 80077ce:	2301      	movs	r3, #1
 80077d0:	464a      	mov	r2, r9
 80077d2:	4631      	mov	r1, r6
 80077d4:	4628      	mov	r0, r5
 80077d6:	47b8      	blx	r7
 80077d8:	3001      	adds	r0, #1
 80077da:	f43f ae92 	beq.w	8007502 <_printf_float+0xba>
 80077de:	f108 0801 	add.w	r8, r8, #1
 80077e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077e6:	1a9b      	subs	r3, r3, r2
 80077e8:	eba3 030a 	sub.w	r3, r3, sl
 80077ec:	4543      	cmp	r3, r8
 80077ee:	dcee      	bgt.n	80077ce <_printf_float+0x386>
 80077f0:	e74a      	b.n	8007688 <_printf_float+0x240>
 80077f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077f4:	2a01      	cmp	r2, #1
 80077f6:	dc01      	bgt.n	80077fc <_printf_float+0x3b4>
 80077f8:	07db      	lsls	r3, r3, #31
 80077fa:	d53a      	bpl.n	8007872 <_printf_float+0x42a>
 80077fc:	2301      	movs	r3, #1
 80077fe:	4642      	mov	r2, r8
 8007800:	4631      	mov	r1, r6
 8007802:	4628      	mov	r0, r5
 8007804:	47b8      	blx	r7
 8007806:	3001      	adds	r0, #1
 8007808:	f43f ae7b 	beq.w	8007502 <_printf_float+0xba>
 800780c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007810:	4631      	mov	r1, r6
 8007812:	4628      	mov	r0, r5
 8007814:	47b8      	blx	r7
 8007816:	3001      	adds	r0, #1
 8007818:	f108 0801 	add.w	r8, r8, #1
 800781c:	f43f ae71 	beq.w	8007502 <_printf_float+0xba>
 8007820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007822:	2200      	movs	r2, #0
 8007824:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8007828:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800782c:	2300      	movs	r3, #0
 800782e:	f7f9 f94b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007832:	b9c8      	cbnz	r0, 8007868 <_printf_float+0x420>
 8007834:	4653      	mov	r3, sl
 8007836:	4642      	mov	r2, r8
 8007838:	4631      	mov	r1, r6
 800783a:	4628      	mov	r0, r5
 800783c:	47b8      	blx	r7
 800783e:	3001      	adds	r0, #1
 8007840:	d10e      	bne.n	8007860 <_printf_float+0x418>
 8007842:	e65e      	b.n	8007502 <_printf_float+0xba>
 8007844:	2301      	movs	r3, #1
 8007846:	4652      	mov	r2, sl
 8007848:	4631      	mov	r1, r6
 800784a:	4628      	mov	r0, r5
 800784c:	47b8      	blx	r7
 800784e:	3001      	adds	r0, #1
 8007850:	f43f ae57 	beq.w	8007502 <_printf_float+0xba>
 8007854:	f108 0801 	add.w	r8, r8, #1
 8007858:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800785a:	3b01      	subs	r3, #1
 800785c:	4543      	cmp	r3, r8
 800785e:	dcf1      	bgt.n	8007844 <_printf_float+0x3fc>
 8007860:	464b      	mov	r3, r9
 8007862:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007866:	e6de      	b.n	8007626 <_printf_float+0x1de>
 8007868:	f04f 0800 	mov.w	r8, #0
 800786c:	f104 0a1a 	add.w	sl, r4, #26
 8007870:	e7f2      	b.n	8007858 <_printf_float+0x410>
 8007872:	2301      	movs	r3, #1
 8007874:	e7df      	b.n	8007836 <_printf_float+0x3ee>
 8007876:	2301      	movs	r3, #1
 8007878:	464a      	mov	r2, r9
 800787a:	4631      	mov	r1, r6
 800787c:	4628      	mov	r0, r5
 800787e:	47b8      	blx	r7
 8007880:	3001      	adds	r0, #1
 8007882:	f43f ae3e 	beq.w	8007502 <_printf_float+0xba>
 8007886:	f108 0801 	add.w	r8, r8, #1
 800788a:	68e3      	ldr	r3, [r4, #12]
 800788c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800788e:	1a9b      	subs	r3, r3, r2
 8007890:	4543      	cmp	r3, r8
 8007892:	dcf0      	bgt.n	8007876 <_printf_float+0x42e>
 8007894:	e6fc      	b.n	8007690 <_printf_float+0x248>
 8007896:	f04f 0800 	mov.w	r8, #0
 800789a:	f104 0919 	add.w	r9, r4, #25
 800789e:	e7f4      	b.n	800788a <_printf_float+0x442>
 80078a0:	2900      	cmp	r1, #0
 80078a2:	f43f ae8b 	beq.w	80075bc <_printf_float+0x174>
 80078a6:	2300      	movs	r3, #0
 80078a8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80078ac:	ab09      	add	r3, sp, #36	; 0x24
 80078ae:	9300      	str	r3, [sp, #0]
 80078b0:	ec49 8b10 	vmov	d0, r8, r9
 80078b4:	6022      	str	r2, [r4, #0]
 80078b6:	f8cd a004 	str.w	sl, [sp, #4]
 80078ba:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80078be:	4628      	mov	r0, r5
 80078c0:	f7ff fd2e 	bl	8007320 <__cvt>
 80078c4:	4680      	mov	r8, r0
 80078c6:	e648      	b.n	800755a <_printf_float+0x112>

080078c8 <_printf_common>:
 80078c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078cc:	4691      	mov	r9, r2
 80078ce:	461f      	mov	r7, r3
 80078d0:	688a      	ldr	r2, [r1, #8]
 80078d2:	690b      	ldr	r3, [r1, #16]
 80078d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078d8:	4293      	cmp	r3, r2
 80078da:	bfb8      	it	lt
 80078dc:	4613      	movlt	r3, r2
 80078de:	f8c9 3000 	str.w	r3, [r9]
 80078e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078e6:	4606      	mov	r6, r0
 80078e8:	460c      	mov	r4, r1
 80078ea:	b112      	cbz	r2, 80078f2 <_printf_common+0x2a>
 80078ec:	3301      	adds	r3, #1
 80078ee:	f8c9 3000 	str.w	r3, [r9]
 80078f2:	6823      	ldr	r3, [r4, #0]
 80078f4:	0699      	lsls	r1, r3, #26
 80078f6:	bf42      	ittt	mi
 80078f8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80078fc:	3302      	addmi	r3, #2
 80078fe:	f8c9 3000 	strmi.w	r3, [r9]
 8007902:	6825      	ldr	r5, [r4, #0]
 8007904:	f015 0506 	ands.w	r5, r5, #6
 8007908:	d107      	bne.n	800791a <_printf_common+0x52>
 800790a:	f104 0a19 	add.w	sl, r4, #25
 800790e:	68e3      	ldr	r3, [r4, #12]
 8007910:	f8d9 2000 	ldr.w	r2, [r9]
 8007914:	1a9b      	subs	r3, r3, r2
 8007916:	42ab      	cmp	r3, r5
 8007918:	dc28      	bgt.n	800796c <_printf_common+0xa4>
 800791a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800791e:	6822      	ldr	r2, [r4, #0]
 8007920:	3300      	adds	r3, #0
 8007922:	bf18      	it	ne
 8007924:	2301      	movne	r3, #1
 8007926:	0692      	lsls	r2, r2, #26
 8007928:	d42d      	bmi.n	8007986 <_printf_common+0xbe>
 800792a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800792e:	4639      	mov	r1, r7
 8007930:	4630      	mov	r0, r6
 8007932:	47c0      	blx	r8
 8007934:	3001      	adds	r0, #1
 8007936:	d020      	beq.n	800797a <_printf_common+0xb2>
 8007938:	6823      	ldr	r3, [r4, #0]
 800793a:	68e5      	ldr	r5, [r4, #12]
 800793c:	f8d9 2000 	ldr.w	r2, [r9]
 8007940:	f003 0306 	and.w	r3, r3, #6
 8007944:	2b04      	cmp	r3, #4
 8007946:	bf08      	it	eq
 8007948:	1aad      	subeq	r5, r5, r2
 800794a:	68a3      	ldr	r3, [r4, #8]
 800794c:	6922      	ldr	r2, [r4, #16]
 800794e:	bf0c      	ite	eq
 8007950:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007954:	2500      	movne	r5, #0
 8007956:	4293      	cmp	r3, r2
 8007958:	bfc4      	itt	gt
 800795a:	1a9b      	subgt	r3, r3, r2
 800795c:	18ed      	addgt	r5, r5, r3
 800795e:	f04f 0900 	mov.w	r9, #0
 8007962:	341a      	adds	r4, #26
 8007964:	454d      	cmp	r5, r9
 8007966:	d11a      	bne.n	800799e <_printf_common+0xd6>
 8007968:	2000      	movs	r0, #0
 800796a:	e008      	b.n	800797e <_printf_common+0xb6>
 800796c:	2301      	movs	r3, #1
 800796e:	4652      	mov	r2, sl
 8007970:	4639      	mov	r1, r7
 8007972:	4630      	mov	r0, r6
 8007974:	47c0      	blx	r8
 8007976:	3001      	adds	r0, #1
 8007978:	d103      	bne.n	8007982 <_printf_common+0xba>
 800797a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800797e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007982:	3501      	adds	r5, #1
 8007984:	e7c3      	b.n	800790e <_printf_common+0x46>
 8007986:	18e1      	adds	r1, r4, r3
 8007988:	1c5a      	adds	r2, r3, #1
 800798a:	2030      	movs	r0, #48	; 0x30
 800798c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007990:	4422      	add	r2, r4
 8007992:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007996:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800799a:	3302      	adds	r3, #2
 800799c:	e7c5      	b.n	800792a <_printf_common+0x62>
 800799e:	2301      	movs	r3, #1
 80079a0:	4622      	mov	r2, r4
 80079a2:	4639      	mov	r1, r7
 80079a4:	4630      	mov	r0, r6
 80079a6:	47c0      	blx	r8
 80079a8:	3001      	adds	r0, #1
 80079aa:	d0e6      	beq.n	800797a <_printf_common+0xb2>
 80079ac:	f109 0901 	add.w	r9, r9, #1
 80079b0:	e7d8      	b.n	8007964 <_printf_common+0x9c>
	...

080079b4 <_printf_i>:
 80079b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80079b8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80079bc:	460c      	mov	r4, r1
 80079be:	7e09      	ldrb	r1, [r1, #24]
 80079c0:	b085      	sub	sp, #20
 80079c2:	296e      	cmp	r1, #110	; 0x6e
 80079c4:	4617      	mov	r7, r2
 80079c6:	4606      	mov	r6, r0
 80079c8:	4698      	mov	r8, r3
 80079ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80079cc:	f000 80b3 	beq.w	8007b36 <_printf_i+0x182>
 80079d0:	d822      	bhi.n	8007a18 <_printf_i+0x64>
 80079d2:	2963      	cmp	r1, #99	; 0x63
 80079d4:	d036      	beq.n	8007a44 <_printf_i+0x90>
 80079d6:	d80a      	bhi.n	80079ee <_printf_i+0x3a>
 80079d8:	2900      	cmp	r1, #0
 80079da:	f000 80b9 	beq.w	8007b50 <_printf_i+0x19c>
 80079de:	2958      	cmp	r1, #88	; 0x58
 80079e0:	f000 8083 	beq.w	8007aea <_printf_i+0x136>
 80079e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079e8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80079ec:	e032      	b.n	8007a54 <_printf_i+0xa0>
 80079ee:	2964      	cmp	r1, #100	; 0x64
 80079f0:	d001      	beq.n	80079f6 <_printf_i+0x42>
 80079f2:	2969      	cmp	r1, #105	; 0x69
 80079f4:	d1f6      	bne.n	80079e4 <_printf_i+0x30>
 80079f6:	6820      	ldr	r0, [r4, #0]
 80079f8:	6813      	ldr	r3, [r2, #0]
 80079fa:	0605      	lsls	r5, r0, #24
 80079fc:	f103 0104 	add.w	r1, r3, #4
 8007a00:	d52a      	bpl.n	8007a58 <_printf_i+0xa4>
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	6011      	str	r1, [r2, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	da03      	bge.n	8007a12 <_printf_i+0x5e>
 8007a0a:	222d      	movs	r2, #45	; 0x2d
 8007a0c:	425b      	negs	r3, r3
 8007a0e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007a12:	486f      	ldr	r0, [pc, #444]	; (8007bd0 <_printf_i+0x21c>)
 8007a14:	220a      	movs	r2, #10
 8007a16:	e039      	b.n	8007a8c <_printf_i+0xd8>
 8007a18:	2973      	cmp	r1, #115	; 0x73
 8007a1a:	f000 809d 	beq.w	8007b58 <_printf_i+0x1a4>
 8007a1e:	d808      	bhi.n	8007a32 <_printf_i+0x7e>
 8007a20:	296f      	cmp	r1, #111	; 0x6f
 8007a22:	d020      	beq.n	8007a66 <_printf_i+0xb2>
 8007a24:	2970      	cmp	r1, #112	; 0x70
 8007a26:	d1dd      	bne.n	80079e4 <_printf_i+0x30>
 8007a28:	6823      	ldr	r3, [r4, #0]
 8007a2a:	f043 0320 	orr.w	r3, r3, #32
 8007a2e:	6023      	str	r3, [r4, #0]
 8007a30:	e003      	b.n	8007a3a <_printf_i+0x86>
 8007a32:	2975      	cmp	r1, #117	; 0x75
 8007a34:	d017      	beq.n	8007a66 <_printf_i+0xb2>
 8007a36:	2978      	cmp	r1, #120	; 0x78
 8007a38:	d1d4      	bne.n	80079e4 <_printf_i+0x30>
 8007a3a:	2378      	movs	r3, #120	; 0x78
 8007a3c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a40:	4864      	ldr	r0, [pc, #400]	; (8007bd4 <_printf_i+0x220>)
 8007a42:	e055      	b.n	8007af0 <_printf_i+0x13c>
 8007a44:	6813      	ldr	r3, [r2, #0]
 8007a46:	1d19      	adds	r1, r3, #4
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	6011      	str	r1, [r2, #0]
 8007a4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a54:	2301      	movs	r3, #1
 8007a56:	e08c      	b.n	8007b72 <_printf_i+0x1be>
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	6011      	str	r1, [r2, #0]
 8007a5c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a60:	bf18      	it	ne
 8007a62:	b21b      	sxthne	r3, r3
 8007a64:	e7cf      	b.n	8007a06 <_printf_i+0x52>
 8007a66:	6813      	ldr	r3, [r2, #0]
 8007a68:	6825      	ldr	r5, [r4, #0]
 8007a6a:	1d18      	adds	r0, r3, #4
 8007a6c:	6010      	str	r0, [r2, #0]
 8007a6e:	0628      	lsls	r0, r5, #24
 8007a70:	d501      	bpl.n	8007a76 <_printf_i+0xc2>
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	e002      	b.n	8007a7c <_printf_i+0xc8>
 8007a76:	0668      	lsls	r0, r5, #25
 8007a78:	d5fb      	bpl.n	8007a72 <_printf_i+0xbe>
 8007a7a:	881b      	ldrh	r3, [r3, #0]
 8007a7c:	4854      	ldr	r0, [pc, #336]	; (8007bd0 <_printf_i+0x21c>)
 8007a7e:	296f      	cmp	r1, #111	; 0x6f
 8007a80:	bf14      	ite	ne
 8007a82:	220a      	movne	r2, #10
 8007a84:	2208      	moveq	r2, #8
 8007a86:	2100      	movs	r1, #0
 8007a88:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a8c:	6865      	ldr	r5, [r4, #4]
 8007a8e:	60a5      	str	r5, [r4, #8]
 8007a90:	2d00      	cmp	r5, #0
 8007a92:	f2c0 8095 	blt.w	8007bc0 <_printf_i+0x20c>
 8007a96:	6821      	ldr	r1, [r4, #0]
 8007a98:	f021 0104 	bic.w	r1, r1, #4
 8007a9c:	6021      	str	r1, [r4, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d13d      	bne.n	8007b1e <_printf_i+0x16a>
 8007aa2:	2d00      	cmp	r5, #0
 8007aa4:	f040 808e 	bne.w	8007bc4 <_printf_i+0x210>
 8007aa8:	4665      	mov	r5, ip
 8007aaa:	2a08      	cmp	r2, #8
 8007aac:	d10b      	bne.n	8007ac6 <_printf_i+0x112>
 8007aae:	6823      	ldr	r3, [r4, #0]
 8007ab0:	07db      	lsls	r3, r3, #31
 8007ab2:	d508      	bpl.n	8007ac6 <_printf_i+0x112>
 8007ab4:	6923      	ldr	r3, [r4, #16]
 8007ab6:	6862      	ldr	r2, [r4, #4]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	bfde      	ittt	le
 8007abc:	2330      	movle	r3, #48	; 0x30
 8007abe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ac2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007ac6:	ebac 0305 	sub.w	r3, ip, r5
 8007aca:	6123      	str	r3, [r4, #16]
 8007acc:	f8cd 8000 	str.w	r8, [sp]
 8007ad0:	463b      	mov	r3, r7
 8007ad2:	aa03      	add	r2, sp, #12
 8007ad4:	4621      	mov	r1, r4
 8007ad6:	4630      	mov	r0, r6
 8007ad8:	f7ff fef6 	bl	80078c8 <_printf_common>
 8007adc:	3001      	adds	r0, #1
 8007ade:	d14d      	bne.n	8007b7c <_printf_i+0x1c8>
 8007ae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ae4:	b005      	add	sp, #20
 8007ae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007aea:	4839      	ldr	r0, [pc, #228]	; (8007bd0 <_printf_i+0x21c>)
 8007aec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007af0:	6813      	ldr	r3, [r2, #0]
 8007af2:	6821      	ldr	r1, [r4, #0]
 8007af4:	1d1d      	adds	r5, r3, #4
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	6015      	str	r5, [r2, #0]
 8007afa:	060a      	lsls	r2, r1, #24
 8007afc:	d50b      	bpl.n	8007b16 <_printf_i+0x162>
 8007afe:	07ca      	lsls	r2, r1, #31
 8007b00:	bf44      	itt	mi
 8007b02:	f041 0120 	orrmi.w	r1, r1, #32
 8007b06:	6021      	strmi	r1, [r4, #0]
 8007b08:	b91b      	cbnz	r3, 8007b12 <_printf_i+0x15e>
 8007b0a:	6822      	ldr	r2, [r4, #0]
 8007b0c:	f022 0220 	bic.w	r2, r2, #32
 8007b10:	6022      	str	r2, [r4, #0]
 8007b12:	2210      	movs	r2, #16
 8007b14:	e7b7      	b.n	8007a86 <_printf_i+0xd2>
 8007b16:	064d      	lsls	r5, r1, #25
 8007b18:	bf48      	it	mi
 8007b1a:	b29b      	uxthmi	r3, r3
 8007b1c:	e7ef      	b.n	8007afe <_printf_i+0x14a>
 8007b1e:	4665      	mov	r5, ip
 8007b20:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b24:	fb02 3311 	mls	r3, r2, r1, r3
 8007b28:	5cc3      	ldrb	r3, [r0, r3]
 8007b2a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007b2e:	460b      	mov	r3, r1
 8007b30:	2900      	cmp	r1, #0
 8007b32:	d1f5      	bne.n	8007b20 <_printf_i+0x16c>
 8007b34:	e7b9      	b.n	8007aaa <_printf_i+0xf6>
 8007b36:	6813      	ldr	r3, [r2, #0]
 8007b38:	6825      	ldr	r5, [r4, #0]
 8007b3a:	6961      	ldr	r1, [r4, #20]
 8007b3c:	1d18      	adds	r0, r3, #4
 8007b3e:	6010      	str	r0, [r2, #0]
 8007b40:	0628      	lsls	r0, r5, #24
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	d501      	bpl.n	8007b4a <_printf_i+0x196>
 8007b46:	6019      	str	r1, [r3, #0]
 8007b48:	e002      	b.n	8007b50 <_printf_i+0x19c>
 8007b4a:	066a      	lsls	r2, r5, #25
 8007b4c:	d5fb      	bpl.n	8007b46 <_printf_i+0x192>
 8007b4e:	8019      	strh	r1, [r3, #0]
 8007b50:	2300      	movs	r3, #0
 8007b52:	6123      	str	r3, [r4, #16]
 8007b54:	4665      	mov	r5, ip
 8007b56:	e7b9      	b.n	8007acc <_printf_i+0x118>
 8007b58:	6813      	ldr	r3, [r2, #0]
 8007b5a:	1d19      	adds	r1, r3, #4
 8007b5c:	6011      	str	r1, [r2, #0]
 8007b5e:	681d      	ldr	r5, [r3, #0]
 8007b60:	6862      	ldr	r2, [r4, #4]
 8007b62:	2100      	movs	r1, #0
 8007b64:	4628      	mov	r0, r5
 8007b66:	f7f8 fb3b 	bl	80001e0 <memchr>
 8007b6a:	b108      	cbz	r0, 8007b70 <_printf_i+0x1bc>
 8007b6c:	1b40      	subs	r0, r0, r5
 8007b6e:	6060      	str	r0, [r4, #4]
 8007b70:	6863      	ldr	r3, [r4, #4]
 8007b72:	6123      	str	r3, [r4, #16]
 8007b74:	2300      	movs	r3, #0
 8007b76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b7a:	e7a7      	b.n	8007acc <_printf_i+0x118>
 8007b7c:	6923      	ldr	r3, [r4, #16]
 8007b7e:	462a      	mov	r2, r5
 8007b80:	4639      	mov	r1, r7
 8007b82:	4630      	mov	r0, r6
 8007b84:	47c0      	blx	r8
 8007b86:	3001      	adds	r0, #1
 8007b88:	d0aa      	beq.n	8007ae0 <_printf_i+0x12c>
 8007b8a:	6823      	ldr	r3, [r4, #0]
 8007b8c:	079b      	lsls	r3, r3, #30
 8007b8e:	d413      	bmi.n	8007bb8 <_printf_i+0x204>
 8007b90:	68e0      	ldr	r0, [r4, #12]
 8007b92:	9b03      	ldr	r3, [sp, #12]
 8007b94:	4298      	cmp	r0, r3
 8007b96:	bfb8      	it	lt
 8007b98:	4618      	movlt	r0, r3
 8007b9a:	e7a3      	b.n	8007ae4 <_printf_i+0x130>
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	464a      	mov	r2, r9
 8007ba0:	4639      	mov	r1, r7
 8007ba2:	4630      	mov	r0, r6
 8007ba4:	47c0      	blx	r8
 8007ba6:	3001      	adds	r0, #1
 8007ba8:	d09a      	beq.n	8007ae0 <_printf_i+0x12c>
 8007baa:	3501      	adds	r5, #1
 8007bac:	68e3      	ldr	r3, [r4, #12]
 8007bae:	9a03      	ldr	r2, [sp, #12]
 8007bb0:	1a9b      	subs	r3, r3, r2
 8007bb2:	42ab      	cmp	r3, r5
 8007bb4:	dcf2      	bgt.n	8007b9c <_printf_i+0x1e8>
 8007bb6:	e7eb      	b.n	8007b90 <_printf_i+0x1dc>
 8007bb8:	2500      	movs	r5, #0
 8007bba:	f104 0919 	add.w	r9, r4, #25
 8007bbe:	e7f5      	b.n	8007bac <_printf_i+0x1f8>
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1ac      	bne.n	8007b1e <_printf_i+0x16a>
 8007bc4:	7803      	ldrb	r3, [r0, #0]
 8007bc6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007bca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bce:	e76c      	b.n	8007aaa <_printf_i+0xf6>
 8007bd0:	08009c96 	.word	0x08009c96
 8007bd4:	08009ca7 	.word	0x08009ca7

08007bd8 <iprintf>:
 8007bd8:	b40f      	push	{r0, r1, r2, r3}
 8007bda:	4b0a      	ldr	r3, [pc, #40]	; (8007c04 <iprintf+0x2c>)
 8007bdc:	b513      	push	{r0, r1, r4, lr}
 8007bde:	681c      	ldr	r4, [r3, #0]
 8007be0:	b124      	cbz	r4, 8007bec <iprintf+0x14>
 8007be2:	69a3      	ldr	r3, [r4, #24]
 8007be4:	b913      	cbnz	r3, 8007bec <iprintf+0x14>
 8007be6:	4620      	mov	r0, r4
 8007be8:	f001 f866 	bl	8008cb8 <__sinit>
 8007bec:	ab05      	add	r3, sp, #20
 8007bee:	9a04      	ldr	r2, [sp, #16]
 8007bf0:	68a1      	ldr	r1, [r4, #8]
 8007bf2:	9301      	str	r3, [sp, #4]
 8007bf4:	4620      	mov	r0, r4
 8007bf6:	f001 fd29 	bl	800964c <_vfiprintf_r>
 8007bfa:	b002      	add	sp, #8
 8007bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c00:	b004      	add	sp, #16
 8007c02:	4770      	bx	lr
 8007c04:	200000d0 	.word	0x200000d0

08007c08 <_puts_r>:
 8007c08:	b570      	push	{r4, r5, r6, lr}
 8007c0a:	460e      	mov	r6, r1
 8007c0c:	4605      	mov	r5, r0
 8007c0e:	b118      	cbz	r0, 8007c18 <_puts_r+0x10>
 8007c10:	6983      	ldr	r3, [r0, #24]
 8007c12:	b90b      	cbnz	r3, 8007c18 <_puts_r+0x10>
 8007c14:	f001 f850 	bl	8008cb8 <__sinit>
 8007c18:	69ab      	ldr	r3, [r5, #24]
 8007c1a:	68ac      	ldr	r4, [r5, #8]
 8007c1c:	b913      	cbnz	r3, 8007c24 <_puts_r+0x1c>
 8007c1e:	4628      	mov	r0, r5
 8007c20:	f001 f84a 	bl	8008cb8 <__sinit>
 8007c24:	4b23      	ldr	r3, [pc, #140]	; (8007cb4 <_puts_r+0xac>)
 8007c26:	429c      	cmp	r4, r3
 8007c28:	d117      	bne.n	8007c5a <_puts_r+0x52>
 8007c2a:	686c      	ldr	r4, [r5, #4]
 8007c2c:	89a3      	ldrh	r3, [r4, #12]
 8007c2e:	071b      	lsls	r3, r3, #28
 8007c30:	d51d      	bpl.n	8007c6e <_puts_r+0x66>
 8007c32:	6923      	ldr	r3, [r4, #16]
 8007c34:	b1db      	cbz	r3, 8007c6e <_puts_r+0x66>
 8007c36:	3e01      	subs	r6, #1
 8007c38:	68a3      	ldr	r3, [r4, #8]
 8007c3a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007c3e:	3b01      	subs	r3, #1
 8007c40:	60a3      	str	r3, [r4, #8]
 8007c42:	b9e9      	cbnz	r1, 8007c80 <_puts_r+0x78>
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	da2e      	bge.n	8007ca6 <_puts_r+0x9e>
 8007c48:	4622      	mov	r2, r4
 8007c4a:	210a      	movs	r1, #10
 8007c4c:	4628      	mov	r0, r5
 8007c4e:	f000 f83f 	bl	8007cd0 <__swbuf_r>
 8007c52:	3001      	adds	r0, #1
 8007c54:	d011      	beq.n	8007c7a <_puts_r+0x72>
 8007c56:	200a      	movs	r0, #10
 8007c58:	e011      	b.n	8007c7e <_puts_r+0x76>
 8007c5a:	4b17      	ldr	r3, [pc, #92]	; (8007cb8 <_puts_r+0xb0>)
 8007c5c:	429c      	cmp	r4, r3
 8007c5e:	d101      	bne.n	8007c64 <_puts_r+0x5c>
 8007c60:	68ac      	ldr	r4, [r5, #8]
 8007c62:	e7e3      	b.n	8007c2c <_puts_r+0x24>
 8007c64:	4b15      	ldr	r3, [pc, #84]	; (8007cbc <_puts_r+0xb4>)
 8007c66:	429c      	cmp	r4, r3
 8007c68:	bf08      	it	eq
 8007c6a:	68ec      	ldreq	r4, [r5, #12]
 8007c6c:	e7de      	b.n	8007c2c <_puts_r+0x24>
 8007c6e:	4621      	mov	r1, r4
 8007c70:	4628      	mov	r0, r5
 8007c72:	f000 f87f 	bl	8007d74 <__swsetup_r>
 8007c76:	2800      	cmp	r0, #0
 8007c78:	d0dd      	beq.n	8007c36 <_puts_r+0x2e>
 8007c7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c7e:	bd70      	pop	{r4, r5, r6, pc}
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	da04      	bge.n	8007c8e <_puts_r+0x86>
 8007c84:	69a2      	ldr	r2, [r4, #24]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	dc06      	bgt.n	8007c98 <_puts_r+0x90>
 8007c8a:	290a      	cmp	r1, #10
 8007c8c:	d004      	beq.n	8007c98 <_puts_r+0x90>
 8007c8e:	6823      	ldr	r3, [r4, #0]
 8007c90:	1c5a      	adds	r2, r3, #1
 8007c92:	6022      	str	r2, [r4, #0]
 8007c94:	7019      	strb	r1, [r3, #0]
 8007c96:	e7cf      	b.n	8007c38 <_puts_r+0x30>
 8007c98:	4622      	mov	r2, r4
 8007c9a:	4628      	mov	r0, r5
 8007c9c:	f000 f818 	bl	8007cd0 <__swbuf_r>
 8007ca0:	3001      	adds	r0, #1
 8007ca2:	d1c9      	bne.n	8007c38 <_puts_r+0x30>
 8007ca4:	e7e9      	b.n	8007c7a <_puts_r+0x72>
 8007ca6:	6823      	ldr	r3, [r4, #0]
 8007ca8:	200a      	movs	r0, #10
 8007caa:	1c5a      	adds	r2, r3, #1
 8007cac:	6022      	str	r2, [r4, #0]
 8007cae:	7018      	strb	r0, [r3, #0]
 8007cb0:	e7e5      	b.n	8007c7e <_puts_r+0x76>
 8007cb2:	bf00      	nop
 8007cb4:	08009ce8 	.word	0x08009ce8
 8007cb8:	08009d08 	.word	0x08009d08
 8007cbc:	08009cc8 	.word	0x08009cc8

08007cc0 <puts>:
 8007cc0:	4b02      	ldr	r3, [pc, #8]	; (8007ccc <puts+0xc>)
 8007cc2:	4601      	mov	r1, r0
 8007cc4:	6818      	ldr	r0, [r3, #0]
 8007cc6:	f7ff bf9f 	b.w	8007c08 <_puts_r>
 8007cca:	bf00      	nop
 8007ccc:	200000d0 	.word	0x200000d0

08007cd0 <__swbuf_r>:
 8007cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cd2:	460e      	mov	r6, r1
 8007cd4:	4614      	mov	r4, r2
 8007cd6:	4605      	mov	r5, r0
 8007cd8:	b118      	cbz	r0, 8007ce2 <__swbuf_r+0x12>
 8007cda:	6983      	ldr	r3, [r0, #24]
 8007cdc:	b90b      	cbnz	r3, 8007ce2 <__swbuf_r+0x12>
 8007cde:	f000 ffeb 	bl	8008cb8 <__sinit>
 8007ce2:	4b21      	ldr	r3, [pc, #132]	; (8007d68 <__swbuf_r+0x98>)
 8007ce4:	429c      	cmp	r4, r3
 8007ce6:	d12a      	bne.n	8007d3e <__swbuf_r+0x6e>
 8007ce8:	686c      	ldr	r4, [r5, #4]
 8007cea:	69a3      	ldr	r3, [r4, #24]
 8007cec:	60a3      	str	r3, [r4, #8]
 8007cee:	89a3      	ldrh	r3, [r4, #12]
 8007cf0:	071a      	lsls	r2, r3, #28
 8007cf2:	d52e      	bpl.n	8007d52 <__swbuf_r+0x82>
 8007cf4:	6923      	ldr	r3, [r4, #16]
 8007cf6:	b363      	cbz	r3, 8007d52 <__swbuf_r+0x82>
 8007cf8:	6923      	ldr	r3, [r4, #16]
 8007cfa:	6820      	ldr	r0, [r4, #0]
 8007cfc:	1ac0      	subs	r0, r0, r3
 8007cfe:	6963      	ldr	r3, [r4, #20]
 8007d00:	b2f6      	uxtb	r6, r6
 8007d02:	4283      	cmp	r3, r0
 8007d04:	4637      	mov	r7, r6
 8007d06:	dc04      	bgt.n	8007d12 <__swbuf_r+0x42>
 8007d08:	4621      	mov	r1, r4
 8007d0a:	4628      	mov	r0, r5
 8007d0c:	f000 ff6a 	bl	8008be4 <_fflush_r>
 8007d10:	bb28      	cbnz	r0, 8007d5e <__swbuf_r+0x8e>
 8007d12:	68a3      	ldr	r3, [r4, #8]
 8007d14:	3b01      	subs	r3, #1
 8007d16:	60a3      	str	r3, [r4, #8]
 8007d18:	6823      	ldr	r3, [r4, #0]
 8007d1a:	1c5a      	adds	r2, r3, #1
 8007d1c:	6022      	str	r2, [r4, #0]
 8007d1e:	701e      	strb	r6, [r3, #0]
 8007d20:	6963      	ldr	r3, [r4, #20]
 8007d22:	3001      	adds	r0, #1
 8007d24:	4283      	cmp	r3, r0
 8007d26:	d004      	beq.n	8007d32 <__swbuf_r+0x62>
 8007d28:	89a3      	ldrh	r3, [r4, #12]
 8007d2a:	07db      	lsls	r3, r3, #31
 8007d2c:	d519      	bpl.n	8007d62 <__swbuf_r+0x92>
 8007d2e:	2e0a      	cmp	r6, #10
 8007d30:	d117      	bne.n	8007d62 <__swbuf_r+0x92>
 8007d32:	4621      	mov	r1, r4
 8007d34:	4628      	mov	r0, r5
 8007d36:	f000 ff55 	bl	8008be4 <_fflush_r>
 8007d3a:	b190      	cbz	r0, 8007d62 <__swbuf_r+0x92>
 8007d3c:	e00f      	b.n	8007d5e <__swbuf_r+0x8e>
 8007d3e:	4b0b      	ldr	r3, [pc, #44]	; (8007d6c <__swbuf_r+0x9c>)
 8007d40:	429c      	cmp	r4, r3
 8007d42:	d101      	bne.n	8007d48 <__swbuf_r+0x78>
 8007d44:	68ac      	ldr	r4, [r5, #8]
 8007d46:	e7d0      	b.n	8007cea <__swbuf_r+0x1a>
 8007d48:	4b09      	ldr	r3, [pc, #36]	; (8007d70 <__swbuf_r+0xa0>)
 8007d4a:	429c      	cmp	r4, r3
 8007d4c:	bf08      	it	eq
 8007d4e:	68ec      	ldreq	r4, [r5, #12]
 8007d50:	e7cb      	b.n	8007cea <__swbuf_r+0x1a>
 8007d52:	4621      	mov	r1, r4
 8007d54:	4628      	mov	r0, r5
 8007d56:	f000 f80d 	bl	8007d74 <__swsetup_r>
 8007d5a:	2800      	cmp	r0, #0
 8007d5c:	d0cc      	beq.n	8007cf8 <__swbuf_r+0x28>
 8007d5e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007d62:	4638      	mov	r0, r7
 8007d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d66:	bf00      	nop
 8007d68:	08009ce8 	.word	0x08009ce8
 8007d6c:	08009d08 	.word	0x08009d08
 8007d70:	08009cc8 	.word	0x08009cc8

08007d74 <__swsetup_r>:
 8007d74:	4b32      	ldr	r3, [pc, #200]	; (8007e40 <__swsetup_r+0xcc>)
 8007d76:	b570      	push	{r4, r5, r6, lr}
 8007d78:	681d      	ldr	r5, [r3, #0]
 8007d7a:	4606      	mov	r6, r0
 8007d7c:	460c      	mov	r4, r1
 8007d7e:	b125      	cbz	r5, 8007d8a <__swsetup_r+0x16>
 8007d80:	69ab      	ldr	r3, [r5, #24]
 8007d82:	b913      	cbnz	r3, 8007d8a <__swsetup_r+0x16>
 8007d84:	4628      	mov	r0, r5
 8007d86:	f000 ff97 	bl	8008cb8 <__sinit>
 8007d8a:	4b2e      	ldr	r3, [pc, #184]	; (8007e44 <__swsetup_r+0xd0>)
 8007d8c:	429c      	cmp	r4, r3
 8007d8e:	d10f      	bne.n	8007db0 <__swsetup_r+0x3c>
 8007d90:	686c      	ldr	r4, [r5, #4]
 8007d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d96:	b29a      	uxth	r2, r3
 8007d98:	0715      	lsls	r5, r2, #28
 8007d9a:	d42c      	bmi.n	8007df6 <__swsetup_r+0x82>
 8007d9c:	06d0      	lsls	r0, r2, #27
 8007d9e:	d411      	bmi.n	8007dc4 <__swsetup_r+0x50>
 8007da0:	2209      	movs	r2, #9
 8007da2:	6032      	str	r2, [r6, #0]
 8007da4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007da8:	81a3      	strh	r3, [r4, #12]
 8007daa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007dae:	e03e      	b.n	8007e2e <__swsetup_r+0xba>
 8007db0:	4b25      	ldr	r3, [pc, #148]	; (8007e48 <__swsetup_r+0xd4>)
 8007db2:	429c      	cmp	r4, r3
 8007db4:	d101      	bne.n	8007dba <__swsetup_r+0x46>
 8007db6:	68ac      	ldr	r4, [r5, #8]
 8007db8:	e7eb      	b.n	8007d92 <__swsetup_r+0x1e>
 8007dba:	4b24      	ldr	r3, [pc, #144]	; (8007e4c <__swsetup_r+0xd8>)
 8007dbc:	429c      	cmp	r4, r3
 8007dbe:	bf08      	it	eq
 8007dc0:	68ec      	ldreq	r4, [r5, #12]
 8007dc2:	e7e6      	b.n	8007d92 <__swsetup_r+0x1e>
 8007dc4:	0751      	lsls	r1, r2, #29
 8007dc6:	d512      	bpl.n	8007dee <__swsetup_r+0x7a>
 8007dc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dca:	b141      	cbz	r1, 8007dde <__swsetup_r+0x6a>
 8007dcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007dd0:	4299      	cmp	r1, r3
 8007dd2:	d002      	beq.n	8007dda <__swsetup_r+0x66>
 8007dd4:	4630      	mov	r0, r6
 8007dd6:	f001 fb67 	bl	80094a8 <_free_r>
 8007dda:	2300      	movs	r3, #0
 8007ddc:	6363      	str	r3, [r4, #52]	; 0x34
 8007dde:	89a3      	ldrh	r3, [r4, #12]
 8007de0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007de4:	81a3      	strh	r3, [r4, #12]
 8007de6:	2300      	movs	r3, #0
 8007de8:	6063      	str	r3, [r4, #4]
 8007dea:	6923      	ldr	r3, [r4, #16]
 8007dec:	6023      	str	r3, [r4, #0]
 8007dee:	89a3      	ldrh	r3, [r4, #12]
 8007df0:	f043 0308 	orr.w	r3, r3, #8
 8007df4:	81a3      	strh	r3, [r4, #12]
 8007df6:	6923      	ldr	r3, [r4, #16]
 8007df8:	b94b      	cbnz	r3, 8007e0e <__swsetup_r+0x9a>
 8007dfa:	89a3      	ldrh	r3, [r4, #12]
 8007dfc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e04:	d003      	beq.n	8007e0e <__swsetup_r+0x9a>
 8007e06:	4621      	mov	r1, r4
 8007e08:	4630      	mov	r0, r6
 8007e0a:	f001 f811 	bl	8008e30 <__smakebuf_r>
 8007e0e:	89a2      	ldrh	r2, [r4, #12]
 8007e10:	f012 0301 	ands.w	r3, r2, #1
 8007e14:	d00c      	beq.n	8007e30 <__swsetup_r+0xbc>
 8007e16:	2300      	movs	r3, #0
 8007e18:	60a3      	str	r3, [r4, #8]
 8007e1a:	6963      	ldr	r3, [r4, #20]
 8007e1c:	425b      	negs	r3, r3
 8007e1e:	61a3      	str	r3, [r4, #24]
 8007e20:	6923      	ldr	r3, [r4, #16]
 8007e22:	b953      	cbnz	r3, 8007e3a <__swsetup_r+0xc6>
 8007e24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e28:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007e2c:	d1ba      	bne.n	8007da4 <__swsetup_r+0x30>
 8007e2e:	bd70      	pop	{r4, r5, r6, pc}
 8007e30:	0792      	lsls	r2, r2, #30
 8007e32:	bf58      	it	pl
 8007e34:	6963      	ldrpl	r3, [r4, #20]
 8007e36:	60a3      	str	r3, [r4, #8]
 8007e38:	e7f2      	b.n	8007e20 <__swsetup_r+0xac>
 8007e3a:	2000      	movs	r0, #0
 8007e3c:	e7f7      	b.n	8007e2e <__swsetup_r+0xba>
 8007e3e:	bf00      	nop
 8007e40:	200000d0 	.word	0x200000d0
 8007e44:	08009ce8 	.word	0x08009ce8
 8007e48:	08009d08 	.word	0x08009d08
 8007e4c:	08009cc8 	.word	0x08009cc8

08007e50 <quorem>:
 8007e50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e54:	6903      	ldr	r3, [r0, #16]
 8007e56:	690c      	ldr	r4, [r1, #16]
 8007e58:	42a3      	cmp	r3, r4
 8007e5a:	4680      	mov	r8, r0
 8007e5c:	f2c0 8082 	blt.w	8007f64 <quorem+0x114>
 8007e60:	3c01      	subs	r4, #1
 8007e62:	f101 0714 	add.w	r7, r1, #20
 8007e66:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007e6a:	f100 0614 	add.w	r6, r0, #20
 8007e6e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007e72:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007e76:	eb06 030c 	add.w	r3, r6, ip
 8007e7a:	3501      	adds	r5, #1
 8007e7c:	eb07 090c 	add.w	r9, r7, ip
 8007e80:	9301      	str	r3, [sp, #4]
 8007e82:	fbb0 f5f5 	udiv	r5, r0, r5
 8007e86:	b395      	cbz	r5, 8007eee <quorem+0x9e>
 8007e88:	f04f 0a00 	mov.w	sl, #0
 8007e8c:	4638      	mov	r0, r7
 8007e8e:	46b6      	mov	lr, r6
 8007e90:	46d3      	mov	fp, sl
 8007e92:	f850 2b04 	ldr.w	r2, [r0], #4
 8007e96:	b293      	uxth	r3, r2
 8007e98:	fb05 a303 	mla	r3, r5, r3, sl
 8007e9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	ebab 0303 	sub.w	r3, fp, r3
 8007ea6:	0c12      	lsrs	r2, r2, #16
 8007ea8:	f8de b000 	ldr.w	fp, [lr]
 8007eac:	fb05 a202 	mla	r2, r5, r2, sl
 8007eb0:	fa13 f38b 	uxtah	r3, r3, fp
 8007eb4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007eb8:	fa1f fb82 	uxth.w	fp, r2
 8007ebc:	f8de 2000 	ldr.w	r2, [lr]
 8007ec0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007ec4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ece:	4581      	cmp	r9, r0
 8007ed0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007ed4:	f84e 3b04 	str.w	r3, [lr], #4
 8007ed8:	d2db      	bcs.n	8007e92 <quorem+0x42>
 8007eda:	f856 300c 	ldr.w	r3, [r6, ip]
 8007ede:	b933      	cbnz	r3, 8007eee <quorem+0x9e>
 8007ee0:	9b01      	ldr	r3, [sp, #4]
 8007ee2:	3b04      	subs	r3, #4
 8007ee4:	429e      	cmp	r6, r3
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	d330      	bcc.n	8007f4c <quorem+0xfc>
 8007eea:	f8c8 4010 	str.w	r4, [r8, #16]
 8007eee:	4640      	mov	r0, r8
 8007ef0:	f001 fa06 	bl	8009300 <__mcmp>
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	db25      	blt.n	8007f44 <quorem+0xf4>
 8007ef8:	3501      	adds	r5, #1
 8007efa:	4630      	mov	r0, r6
 8007efc:	f04f 0c00 	mov.w	ip, #0
 8007f00:	f857 2b04 	ldr.w	r2, [r7], #4
 8007f04:	f8d0 e000 	ldr.w	lr, [r0]
 8007f08:	b293      	uxth	r3, r2
 8007f0a:	ebac 0303 	sub.w	r3, ip, r3
 8007f0e:	0c12      	lsrs	r2, r2, #16
 8007f10:	fa13 f38e 	uxtah	r3, r3, lr
 8007f14:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007f18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f22:	45b9      	cmp	r9, r7
 8007f24:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007f28:	f840 3b04 	str.w	r3, [r0], #4
 8007f2c:	d2e8      	bcs.n	8007f00 <quorem+0xb0>
 8007f2e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007f32:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007f36:	b92a      	cbnz	r2, 8007f44 <quorem+0xf4>
 8007f38:	3b04      	subs	r3, #4
 8007f3a:	429e      	cmp	r6, r3
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	d30b      	bcc.n	8007f58 <quorem+0x108>
 8007f40:	f8c8 4010 	str.w	r4, [r8, #16]
 8007f44:	4628      	mov	r0, r5
 8007f46:	b003      	add	sp, #12
 8007f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f4c:	6812      	ldr	r2, [r2, #0]
 8007f4e:	3b04      	subs	r3, #4
 8007f50:	2a00      	cmp	r2, #0
 8007f52:	d1ca      	bne.n	8007eea <quorem+0x9a>
 8007f54:	3c01      	subs	r4, #1
 8007f56:	e7c5      	b.n	8007ee4 <quorem+0x94>
 8007f58:	6812      	ldr	r2, [r2, #0]
 8007f5a:	3b04      	subs	r3, #4
 8007f5c:	2a00      	cmp	r2, #0
 8007f5e:	d1ef      	bne.n	8007f40 <quorem+0xf0>
 8007f60:	3c01      	subs	r4, #1
 8007f62:	e7ea      	b.n	8007f3a <quorem+0xea>
 8007f64:	2000      	movs	r0, #0
 8007f66:	e7ee      	b.n	8007f46 <quorem+0xf6>

08007f68 <_dtoa_r>:
 8007f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f6c:	ec57 6b10 	vmov	r6, r7, d0
 8007f70:	b097      	sub	sp, #92	; 0x5c
 8007f72:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f74:	9106      	str	r1, [sp, #24]
 8007f76:	4604      	mov	r4, r0
 8007f78:	920b      	str	r2, [sp, #44]	; 0x2c
 8007f7a:	9312      	str	r3, [sp, #72]	; 0x48
 8007f7c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007f80:	e9cd 6700 	strd	r6, r7, [sp]
 8007f84:	b93d      	cbnz	r5, 8007f96 <_dtoa_r+0x2e>
 8007f86:	2010      	movs	r0, #16
 8007f88:	f000 ff92 	bl	8008eb0 <malloc>
 8007f8c:	6260      	str	r0, [r4, #36]	; 0x24
 8007f8e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007f92:	6005      	str	r5, [r0, #0]
 8007f94:	60c5      	str	r5, [r0, #12]
 8007f96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f98:	6819      	ldr	r1, [r3, #0]
 8007f9a:	b151      	cbz	r1, 8007fb2 <_dtoa_r+0x4a>
 8007f9c:	685a      	ldr	r2, [r3, #4]
 8007f9e:	604a      	str	r2, [r1, #4]
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	4093      	lsls	r3, r2
 8007fa4:	608b      	str	r3, [r1, #8]
 8007fa6:	4620      	mov	r0, r4
 8007fa8:	f000 ffc9 	bl	8008f3e <_Bfree>
 8007fac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fae:	2200      	movs	r2, #0
 8007fb0:	601a      	str	r2, [r3, #0]
 8007fb2:	1e3b      	subs	r3, r7, #0
 8007fb4:	bfbb      	ittet	lt
 8007fb6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007fba:	9301      	strlt	r3, [sp, #4]
 8007fbc:	2300      	movge	r3, #0
 8007fbe:	2201      	movlt	r2, #1
 8007fc0:	bfac      	ite	ge
 8007fc2:	f8c8 3000 	strge.w	r3, [r8]
 8007fc6:	f8c8 2000 	strlt.w	r2, [r8]
 8007fca:	4baf      	ldr	r3, [pc, #700]	; (8008288 <_dtoa_r+0x320>)
 8007fcc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007fd0:	ea33 0308 	bics.w	r3, r3, r8
 8007fd4:	d114      	bne.n	8008000 <_dtoa_r+0x98>
 8007fd6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007fd8:	f242 730f 	movw	r3, #9999	; 0x270f
 8007fdc:	6013      	str	r3, [r2, #0]
 8007fde:	9b00      	ldr	r3, [sp, #0]
 8007fe0:	b923      	cbnz	r3, 8007fec <_dtoa_r+0x84>
 8007fe2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007fe6:	2800      	cmp	r0, #0
 8007fe8:	f000 8542 	beq.w	8008a70 <_dtoa_r+0xb08>
 8007fec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fee:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800829c <_dtoa_r+0x334>
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	f000 8544 	beq.w	8008a80 <_dtoa_r+0xb18>
 8007ff8:	f10b 0303 	add.w	r3, fp, #3
 8007ffc:	f000 bd3e 	b.w	8008a7c <_dtoa_r+0xb14>
 8008000:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008004:	2200      	movs	r2, #0
 8008006:	2300      	movs	r3, #0
 8008008:	4630      	mov	r0, r6
 800800a:	4639      	mov	r1, r7
 800800c:	f7f8 fd5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008010:	4681      	mov	r9, r0
 8008012:	b168      	cbz	r0, 8008030 <_dtoa_r+0xc8>
 8008014:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008016:	2301      	movs	r3, #1
 8008018:	6013      	str	r3, [r2, #0]
 800801a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800801c:	2b00      	cmp	r3, #0
 800801e:	f000 8524 	beq.w	8008a6a <_dtoa_r+0xb02>
 8008022:	4b9a      	ldr	r3, [pc, #616]	; (800828c <_dtoa_r+0x324>)
 8008024:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008026:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800802a:	6013      	str	r3, [r2, #0]
 800802c:	f000 bd28 	b.w	8008a80 <_dtoa_r+0xb18>
 8008030:	aa14      	add	r2, sp, #80	; 0x50
 8008032:	a915      	add	r1, sp, #84	; 0x54
 8008034:	ec47 6b10 	vmov	d0, r6, r7
 8008038:	4620      	mov	r0, r4
 800803a:	f001 f9d8 	bl	80093ee <__d2b>
 800803e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008042:	9004      	str	r0, [sp, #16]
 8008044:	2d00      	cmp	r5, #0
 8008046:	d07c      	beq.n	8008142 <_dtoa_r+0x1da>
 8008048:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800804c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8008050:	46b2      	mov	sl, r6
 8008052:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8008056:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800805a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800805e:	2200      	movs	r2, #0
 8008060:	4b8b      	ldr	r3, [pc, #556]	; (8008290 <_dtoa_r+0x328>)
 8008062:	4650      	mov	r0, sl
 8008064:	4659      	mov	r1, fp
 8008066:	f7f8 f90f 	bl	8000288 <__aeabi_dsub>
 800806a:	a381      	add	r3, pc, #516	; (adr r3, 8008270 <_dtoa_r+0x308>)
 800806c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008070:	f7f8 fac2 	bl	80005f8 <__aeabi_dmul>
 8008074:	a380      	add	r3, pc, #512	; (adr r3, 8008278 <_dtoa_r+0x310>)
 8008076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807a:	f7f8 f907 	bl	800028c <__adddf3>
 800807e:	4606      	mov	r6, r0
 8008080:	4628      	mov	r0, r5
 8008082:	460f      	mov	r7, r1
 8008084:	f7f8 fa4e 	bl	8000524 <__aeabi_i2d>
 8008088:	a37d      	add	r3, pc, #500	; (adr r3, 8008280 <_dtoa_r+0x318>)
 800808a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808e:	f7f8 fab3 	bl	80005f8 <__aeabi_dmul>
 8008092:	4602      	mov	r2, r0
 8008094:	460b      	mov	r3, r1
 8008096:	4630      	mov	r0, r6
 8008098:	4639      	mov	r1, r7
 800809a:	f7f8 f8f7 	bl	800028c <__adddf3>
 800809e:	4606      	mov	r6, r0
 80080a0:	460f      	mov	r7, r1
 80080a2:	f7f8 fd59 	bl	8000b58 <__aeabi_d2iz>
 80080a6:	2200      	movs	r2, #0
 80080a8:	4682      	mov	sl, r0
 80080aa:	2300      	movs	r3, #0
 80080ac:	4630      	mov	r0, r6
 80080ae:	4639      	mov	r1, r7
 80080b0:	f7f8 fd14 	bl	8000adc <__aeabi_dcmplt>
 80080b4:	b148      	cbz	r0, 80080ca <_dtoa_r+0x162>
 80080b6:	4650      	mov	r0, sl
 80080b8:	f7f8 fa34 	bl	8000524 <__aeabi_i2d>
 80080bc:	4632      	mov	r2, r6
 80080be:	463b      	mov	r3, r7
 80080c0:	f7f8 fd02 	bl	8000ac8 <__aeabi_dcmpeq>
 80080c4:	b908      	cbnz	r0, 80080ca <_dtoa_r+0x162>
 80080c6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80080ca:	f1ba 0f16 	cmp.w	sl, #22
 80080ce:	d859      	bhi.n	8008184 <_dtoa_r+0x21c>
 80080d0:	4970      	ldr	r1, [pc, #448]	; (8008294 <_dtoa_r+0x32c>)
 80080d2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80080d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080de:	f7f8 fd1b 	bl	8000b18 <__aeabi_dcmpgt>
 80080e2:	2800      	cmp	r0, #0
 80080e4:	d050      	beq.n	8008188 <_dtoa_r+0x220>
 80080e6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80080ea:	2300      	movs	r3, #0
 80080ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80080ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80080f0:	1b5d      	subs	r5, r3, r5
 80080f2:	f1b5 0801 	subs.w	r8, r5, #1
 80080f6:	bf49      	itett	mi
 80080f8:	f1c5 0301 	rsbmi	r3, r5, #1
 80080fc:	2300      	movpl	r3, #0
 80080fe:	9305      	strmi	r3, [sp, #20]
 8008100:	f04f 0800 	movmi.w	r8, #0
 8008104:	bf58      	it	pl
 8008106:	9305      	strpl	r3, [sp, #20]
 8008108:	f1ba 0f00 	cmp.w	sl, #0
 800810c:	db3e      	blt.n	800818c <_dtoa_r+0x224>
 800810e:	2300      	movs	r3, #0
 8008110:	44d0      	add	r8, sl
 8008112:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008116:	9307      	str	r3, [sp, #28]
 8008118:	9b06      	ldr	r3, [sp, #24]
 800811a:	2b09      	cmp	r3, #9
 800811c:	f200 8090 	bhi.w	8008240 <_dtoa_r+0x2d8>
 8008120:	2b05      	cmp	r3, #5
 8008122:	bfc4      	itt	gt
 8008124:	3b04      	subgt	r3, #4
 8008126:	9306      	strgt	r3, [sp, #24]
 8008128:	9b06      	ldr	r3, [sp, #24]
 800812a:	f1a3 0302 	sub.w	r3, r3, #2
 800812e:	bfcc      	ite	gt
 8008130:	2500      	movgt	r5, #0
 8008132:	2501      	movle	r5, #1
 8008134:	2b03      	cmp	r3, #3
 8008136:	f200 808f 	bhi.w	8008258 <_dtoa_r+0x2f0>
 800813a:	e8df f003 	tbb	[pc, r3]
 800813e:	7f7d      	.short	0x7f7d
 8008140:	7131      	.short	0x7131
 8008142:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008146:	441d      	add	r5, r3
 8008148:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800814c:	2820      	cmp	r0, #32
 800814e:	dd13      	ble.n	8008178 <_dtoa_r+0x210>
 8008150:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8008154:	9b00      	ldr	r3, [sp, #0]
 8008156:	fa08 f800 	lsl.w	r8, r8, r0
 800815a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800815e:	fa23 f000 	lsr.w	r0, r3, r0
 8008162:	ea48 0000 	orr.w	r0, r8, r0
 8008166:	f7f8 f9cd 	bl	8000504 <__aeabi_ui2d>
 800816a:	2301      	movs	r3, #1
 800816c:	4682      	mov	sl, r0
 800816e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8008172:	3d01      	subs	r5, #1
 8008174:	9313      	str	r3, [sp, #76]	; 0x4c
 8008176:	e772      	b.n	800805e <_dtoa_r+0xf6>
 8008178:	9b00      	ldr	r3, [sp, #0]
 800817a:	f1c0 0020 	rsb	r0, r0, #32
 800817e:	fa03 f000 	lsl.w	r0, r3, r0
 8008182:	e7f0      	b.n	8008166 <_dtoa_r+0x1fe>
 8008184:	2301      	movs	r3, #1
 8008186:	e7b1      	b.n	80080ec <_dtoa_r+0x184>
 8008188:	900f      	str	r0, [sp, #60]	; 0x3c
 800818a:	e7b0      	b.n	80080ee <_dtoa_r+0x186>
 800818c:	9b05      	ldr	r3, [sp, #20]
 800818e:	eba3 030a 	sub.w	r3, r3, sl
 8008192:	9305      	str	r3, [sp, #20]
 8008194:	f1ca 0300 	rsb	r3, sl, #0
 8008198:	9307      	str	r3, [sp, #28]
 800819a:	2300      	movs	r3, #0
 800819c:	930e      	str	r3, [sp, #56]	; 0x38
 800819e:	e7bb      	b.n	8008118 <_dtoa_r+0x1b0>
 80081a0:	2301      	movs	r3, #1
 80081a2:	930a      	str	r3, [sp, #40]	; 0x28
 80081a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	dd59      	ble.n	800825e <_dtoa_r+0x2f6>
 80081aa:	9302      	str	r3, [sp, #8]
 80081ac:	4699      	mov	r9, r3
 80081ae:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80081b0:	2200      	movs	r2, #0
 80081b2:	6072      	str	r2, [r6, #4]
 80081b4:	2204      	movs	r2, #4
 80081b6:	f102 0014 	add.w	r0, r2, #20
 80081ba:	4298      	cmp	r0, r3
 80081bc:	6871      	ldr	r1, [r6, #4]
 80081be:	d953      	bls.n	8008268 <_dtoa_r+0x300>
 80081c0:	4620      	mov	r0, r4
 80081c2:	f000 fe88 	bl	8008ed6 <_Balloc>
 80081c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081c8:	6030      	str	r0, [r6, #0]
 80081ca:	f1b9 0f0e 	cmp.w	r9, #14
 80081ce:	f8d3 b000 	ldr.w	fp, [r3]
 80081d2:	f200 80e6 	bhi.w	80083a2 <_dtoa_r+0x43a>
 80081d6:	2d00      	cmp	r5, #0
 80081d8:	f000 80e3 	beq.w	80083a2 <_dtoa_r+0x43a>
 80081dc:	ed9d 7b00 	vldr	d7, [sp]
 80081e0:	f1ba 0f00 	cmp.w	sl, #0
 80081e4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80081e8:	dd74      	ble.n	80082d4 <_dtoa_r+0x36c>
 80081ea:	4a2a      	ldr	r2, [pc, #168]	; (8008294 <_dtoa_r+0x32c>)
 80081ec:	f00a 030f 	and.w	r3, sl, #15
 80081f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80081f4:	ed93 7b00 	vldr	d7, [r3]
 80081f8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80081fc:	06f0      	lsls	r0, r6, #27
 80081fe:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008202:	d565      	bpl.n	80082d0 <_dtoa_r+0x368>
 8008204:	4b24      	ldr	r3, [pc, #144]	; (8008298 <_dtoa_r+0x330>)
 8008206:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800820a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800820e:	f7f8 fb1d 	bl	800084c <__aeabi_ddiv>
 8008212:	e9cd 0100 	strd	r0, r1, [sp]
 8008216:	f006 060f 	and.w	r6, r6, #15
 800821a:	2503      	movs	r5, #3
 800821c:	4f1e      	ldr	r7, [pc, #120]	; (8008298 <_dtoa_r+0x330>)
 800821e:	e04c      	b.n	80082ba <_dtoa_r+0x352>
 8008220:	2301      	movs	r3, #1
 8008222:	930a      	str	r3, [sp, #40]	; 0x28
 8008224:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008226:	4453      	add	r3, sl
 8008228:	f103 0901 	add.w	r9, r3, #1
 800822c:	9302      	str	r3, [sp, #8]
 800822e:	464b      	mov	r3, r9
 8008230:	2b01      	cmp	r3, #1
 8008232:	bfb8      	it	lt
 8008234:	2301      	movlt	r3, #1
 8008236:	e7ba      	b.n	80081ae <_dtoa_r+0x246>
 8008238:	2300      	movs	r3, #0
 800823a:	e7b2      	b.n	80081a2 <_dtoa_r+0x23a>
 800823c:	2300      	movs	r3, #0
 800823e:	e7f0      	b.n	8008222 <_dtoa_r+0x2ba>
 8008240:	2501      	movs	r5, #1
 8008242:	2300      	movs	r3, #0
 8008244:	9306      	str	r3, [sp, #24]
 8008246:	950a      	str	r5, [sp, #40]	; 0x28
 8008248:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800824c:	9302      	str	r3, [sp, #8]
 800824e:	4699      	mov	r9, r3
 8008250:	2200      	movs	r2, #0
 8008252:	2312      	movs	r3, #18
 8008254:	920b      	str	r2, [sp, #44]	; 0x2c
 8008256:	e7aa      	b.n	80081ae <_dtoa_r+0x246>
 8008258:	2301      	movs	r3, #1
 800825a:	930a      	str	r3, [sp, #40]	; 0x28
 800825c:	e7f4      	b.n	8008248 <_dtoa_r+0x2e0>
 800825e:	2301      	movs	r3, #1
 8008260:	9302      	str	r3, [sp, #8]
 8008262:	4699      	mov	r9, r3
 8008264:	461a      	mov	r2, r3
 8008266:	e7f5      	b.n	8008254 <_dtoa_r+0x2ec>
 8008268:	3101      	adds	r1, #1
 800826a:	6071      	str	r1, [r6, #4]
 800826c:	0052      	lsls	r2, r2, #1
 800826e:	e7a2      	b.n	80081b6 <_dtoa_r+0x24e>
 8008270:	636f4361 	.word	0x636f4361
 8008274:	3fd287a7 	.word	0x3fd287a7
 8008278:	8b60c8b3 	.word	0x8b60c8b3
 800827c:	3fc68a28 	.word	0x3fc68a28
 8008280:	509f79fb 	.word	0x509f79fb
 8008284:	3fd34413 	.word	0x3fd34413
 8008288:	7ff00000 	.word	0x7ff00000
 800828c:	08009c95 	.word	0x08009c95
 8008290:	3ff80000 	.word	0x3ff80000
 8008294:	08009d50 	.word	0x08009d50
 8008298:	08009d28 	.word	0x08009d28
 800829c:	08009cc1 	.word	0x08009cc1
 80082a0:	07f1      	lsls	r1, r6, #31
 80082a2:	d508      	bpl.n	80082b6 <_dtoa_r+0x34e>
 80082a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80082a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082ac:	f7f8 f9a4 	bl	80005f8 <__aeabi_dmul>
 80082b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80082b4:	3501      	adds	r5, #1
 80082b6:	1076      	asrs	r6, r6, #1
 80082b8:	3708      	adds	r7, #8
 80082ba:	2e00      	cmp	r6, #0
 80082bc:	d1f0      	bne.n	80082a0 <_dtoa_r+0x338>
 80082be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80082c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082c6:	f7f8 fac1 	bl	800084c <__aeabi_ddiv>
 80082ca:	e9cd 0100 	strd	r0, r1, [sp]
 80082ce:	e01a      	b.n	8008306 <_dtoa_r+0x39e>
 80082d0:	2502      	movs	r5, #2
 80082d2:	e7a3      	b.n	800821c <_dtoa_r+0x2b4>
 80082d4:	f000 80a0 	beq.w	8008418 <_dtoa_r+0x4b0>
 80082d8:	f1ca 0600 	rsb	r6, sl, #0
 80082dc:	4b9f      	ldr	r3, [pc, #636]	; (800855c <_dtoa_r+0x5f4>)
 80082de:	4fa0      	ldr	r7, [pc, #640]	; (8008560 <_dtoa_r+0x5f8>)
 80082e0:	f006 020f 	and.w	r2, r6, #15
 80082e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80082f0:	f7f8 f982 	bl	80005f8 <__aeabi_dmul>
 80082f4:	e9cd 0100 	strd	r0, r1, [sp]
 80082f8:	1136      	asrs	r6, r6, #4
 80082fa:	2300      	movs	r3, #0
 80082fc:	2502      	movs	r5, #2
 80082fe:	2e00      	cmp	r6, #0
 8008300:	d17f      	bne.n	8008402 <_dtoa_r+0x49a>
 8008302:	2b00      	cmp	r3, #0
 8008304:	d1e1      	bne.n	80082ca <_dtoa_r+0x362>
 8008306:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008308:	2b00      	cmp	r3, #0
 800830a:	f000 8087 	beq.w	800841c <_dtoa_r+0x4b4>
 800830e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008312:	2200      	movs	r2, #0
 8008314:	4b93      	ldr	r3, [pc, #588]	; (8008564 <_dtoa_r+0x5fc>)
 8008316:	4630      	mov	r0, r6
 8008318:	4639      	mov	r1, r7
 800831a:	f7f8 fbdf 	bl	8000adc <__aeabi_dcmplt>
 800831e:	2800      	cmp	r0, #0
 8008320:	d07c      	beq.n	800841c <_dtoa_r+0x4b4>
 8008322:	f1b9 0f00 	cmp.w	r9, #0
 8008326:	d079      	beq.n	800841c <_dtoa_r+0x4b4>
 8008328:	9b02      	ldr	r3, [sp, #8]
 800832a:	2b00      	cmp	r3, #0
 800832c:	dd35      	ble.n	800839a <_dtoa_r+0x432>
 800832e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8008332:	9308      	str	r3, [sp, #32]
 8008334:	4639      	mov	r1, r7
 8008336:	2200      	movs	r2, #0
 8008338:	4b8b      	ldr	r3, [pc, #556]	; (8008568 <_dtoa_r+0x600>)
 800833a:	4630      	mov	r0, r6
 800833c:	f7f8 f95c 	bl	80005f8 <__aeabi_dmul>
 8008340:	e9cd 0100 	strd	r0, r1, [sp]
 8008344:	9f02      	ldr	r7, [sp, #8]
 8008346:	3501      	adds	r5, #1
 8008348:	4628      	mov	r0, r5
 800834a:	f7f8 f8eb 	bl	8000524 <__aeabi_i2d>
 800834e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008352:	f7f8 f951 	bl	80005f8 <__aeabi_dmul>
 8008356:	2200      	movs	r2, #0
 8008358:	4b84      	ldr	r3, [pc, #528]	; (800856c <_dtoa_r+0x604>)
 800835a:	f7f7 ff97 	bl	800028c <__adddf3>
 800835e:	4605      	mov	r5, r0
 8008360:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008364:	2f00      	cmp	r7, #0
 8008366:	d15d      	bne.n	8008424 <_dtoa_r+0x4bc>
 8008368:	2200      	movs	r2, #0
 800836a:	4b81      	ldr	r3, [pc, #516]	; (8008570 <_dtoa_r+0x608>)
 800836c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008370:	f7f7 ff8a 	bl	8000288 <__aeabi_dsub>
 8008374:	462a      	mov	r2, r5
 8008376:	4633      	mov	r3, r6
 8008378:	e9cd 0100 	strd	r0, r1, [sp]
 800837c:	f7f8 fbcc 	bl	8000b18 <__aeabi_dcmpgt>
 8008380:	2800      	cmp	r0, #0
 8008382:	f040 8288 	bne.w	8008896 <_dtoa_r+0x92e>
 8008386:	462a      	mov	r2, r5
 8008388:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800838c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008390:	f7f8 fba4 	bl	8000adc <__aeabi_dcmplt>
 8008394:	2800      	cmp	r0, #0
 8008396:	f040 827c 	bne.w	8008892 <_dtoa_r+0x92a>
 800839a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800839e:	e9cd 2300 	strd	r2, r3, [sp]
 80083a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f2c0 8150 	blt.w	800864a <_dtoa_r+0x6e2>
 80083aa:	f1ba 0f0e 	cmp.w	sl, #14
 80083ae:	f300 814c 	bgt.w	800864a <_dtoa_r+0x6e2>
 80083b2:	4b6a      	ldr	r3, [pc, #424]	; (800855c <_dtoa_r+0x5f4>)
 80083b4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80083b8:	ed93 7b00 	vldr	d7, [r3]
 80083bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083be:	2b00      	cmp	r3, #0
 80083c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80083c4:	f280 80d8 	bge.w	8008578 <_dtoa_r+0x610>
 80083c8:	f1b9 0f00 	cmp.w	r9, #0
 80083cc:	f300 80d4 	bgt.w	8008578 <_dtoa_r+0x610>
 80083d0:	f040 825e 	bne.w	8008890 <_dtoa_r+0x928>
 80083d4:	2200      	movs	r2, #0
 80083d6:	4b66      	ldr	r3, [pc, #408]	; (8008570 <_dtoa_r+0x608>)
 80083d8:	ec51 0b17 	vmov	r0, r1, d7
 80083dc:	f7f8 f90c 	bl	80005f8 <__aeabi_dmul>
 80083e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083e4:	f7f8 fb8e 	bl	8000b04 <__aeabi_dcmpge>
 80083e8:	464f      	mov	r7, r9
 80083ea:	464e      	mov	r6, r9
 80083ec:	2800      	cmp	r0, #0
 80083ee:	f040 8234 	bne.w	800885a <_dtoa_r+0x8f2>
 80083f2:	2331      	movs	r3, #49	; 0x31
 80083f4:	f10b 0501 	add.w	r5, fp, #1
 80083f8:	f88b 3000 	strb.w	r3, [fp]
 80083fc:	f10a 0a01 	add.w	sl, sl, #1
 8008400:	e22f      	b.n	8008862 <_dtoa_r+0x8fa>
 8008402:	07f2      	lsls	r2, r6, #31
 8008404:	d505      	bpl.n	8008412 <_dtoa_r+0x4aa>
 8008406:	e9d7 2300 	ldrd	r2, r3, [r7]
 800840a:	f7f8 f8f5 	bl	80005f8 <__aeabi_dmul>
 800840e:	3501      	adds	r5, #1
 8008410:	2301      	movs	r3, #1
 8008412:	1076      	asrs	r6, r6, #1
 8008414:	3708      	adds	r7, #8
 8008416:	e772      	b.n	80082fe <_dtoa_r+0x396>
 8008418:	2502      	movs	r5, #2
 800841a:	e774      	b.n	8008306 <_dtoa_r+0x39e>
 800841c:	f8cd a020 	str.w	sl, [sp, #32]
 8008420:	464f      	mov	r7, r9
 8008422:	e791      	b.n	8008348 <_dtoa_r+0x3e0>
 8008424:	4b4d      	ldr	r3, [pc, #308]	; (800855c <_dtoa_r+0x5f4>)
 8008426:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800842a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800842e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008430:	2b00      	cmp	r3, #0
 8008432:	d047      	beq.n	80084c4 <_dtoa_r+0x55c>
 8008434:	4602      	mov	r2, r0
 8008436:	460b      	mov	r3, r1
 8008438:	2000      	movs	r0, #0
 800843a:	494e      	ldr	r1, [pc, #312]	; (8008574 <_dtoa_r+0x60c>)
 800843c:	f7f8 fa06 	bl	800084c <__aeabi_ddiv>
 8008440:	462a      	mov	r2, r5
 8008442:	4633      	mov	r3, r6
 8008444:	f7f7 ff20 	bl	8000288 <__aeabi_dsub>
 8008448:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800844c:	465d      	mov	r5, fp
 800844e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008452:	f7f8 fb81 	bl	8000b58 <__aeabi_d2iz>
 8008456:	4606      	mov	r6, r0
 8008458:	f7f8 f864 	bl	8000524 <__aeabi_i2d>
 800845c:	4602      	mov	r2, r0
 800845e:	460b      	mov	r3, r1
 8008460:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008464:	f7f7 ff10 	bl	8000288 <__aeabi_dsub>
 8008468:	3630      	adds	r6, #48	; 0x30
 800846a:	f805 6b01 	strb.w	r6, [r5], #1
 800846e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008472:	e9cd 0100 	strd	r0, r1, [sp]
 8008476:	f7f8 fb31 	bl	8000adc <__aeabi_dcmplt>
 800847a:	2800      	cmp	r0, #0
 800847c:	d163      	bne.n	8008546 <_dtoa_r+0x5de>
 800847e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008482:	2000      	movs	r0, #0
 8008484:	4937      	ldr	r1, [pc, #220]	; (8008564 <_dtoa_r+0x5fc>)
 8008486:	f7f7 feff 	bl	8000288 <__aeabi_dsub>
 800848a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800848e:	f7f8 fb25 	bl	8000adc <__aeabi_dcmplt>
 8008492:	2800      	cmp	r0, #0
 8008494:	f040 80b7 	bne.w	8008606 <_dtoa_r+0x69e>
 8008498:	eba5 030b 	sub.w	r3, r5, fp
 800849c:	429f      	cmp	r7, r3
 800849e:	f77f af7c 	ble.w	800839a <_dtoa_r+0x432>
 80084a2:	2200      	movs	r2, #0
 80084a4:	4b30      	ldr	r3, [pc, #192]	; (8008568 <_dtoa_r+0x600>)
 80084a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80084aa:	f7f8 f8a5 	bl	80005f8 <__aeabi_dmul>
 80084ae:	2200      	movs	r2, #0
 80084b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80084b4:	4b2c      	ldr	r3, [pc, #176]	; (8008568 <_dtoa_r+0x600>)
 80084b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084ba:	f7f8 f89d 	bl	80005f8 <__aeabi_dmul>
 80084be:	e9cd 0100 	strd	r0, r1, [sp]
 80084c2:	e7c4      	b.n	800844e <_dtoa_r+0x4e6>
 80084c4:	462a      	mov	r2, r5
 80084c6:	4633      	mov	r3, r6
 80084c8:	f7f8 f896 	bl	80005f8 <__aeabi_dmul>
 80084cc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80084d0:	eb0b 0507 	add.w	r5, fp, r7
 80084d4:	465e      	mov	r6, fp
 80084d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084da:	f7f8 fb3d 	bl	8000b58 <__aeabi_d2iz>
 80084de:	4607      	mov	r7, r0
 80084e0:	f7f8 f820 	bl	8000524 <__aeabi_i2d>
 80084e4:	3730      	adds	r7, #48	; 0x30
 80084e6:	4602      	mov	r2, r0
 80084e8:	460b      	mov	r3, r1
 80084ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084ee:	f7f7 fecb 	bl	8000288 <__aeabi_dsub>
 80084f2:	f806 7b01 	strb.w	r7, [r6], #1
 80084f6:	42ae      	cmp	r6, r5
 80084f8:	e9cd 0100 	strd	r0, r1, [sp]
 80084fc:	f04f 0200 	mov.w	r2, #0
 8008500:	d126      	bne.n	8008550 <_dtoa_r+0x5e8>
 8008502:	4b1c      	ldr	r3, [pc, #112]	; (8008574 <_dtoa_r+0x60c>)
 8008504:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008508:	f7f7 fec0 	bl	800028c <__adddf3>
 800850c:	4602      	mov	r2, r0
 800850e:	460b      	mov	r3, r1
 8008510:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008514:	f7f8 fb00 	bl	8000b18 <__aeabi_dcmpgt>
 8008518:	2800      	cmp	r0, #0
 800851a:	d174      	bne.n	8008606 <_dtoa_r+0x69e>
 800851c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008520:	2000      	movs	r0, #0
 8008522:	4914      	ldr	r1, [pc, #80]	; (8008574 <_dtoa_r+0x60c>)
 8008524:	f7f7 feb0 	bl	8000288 <__aeabi_dsub>
 8008528:	4602      	mov	r2, r0
 800852a:	460b      	mov	r3, r1
 800852c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008530:	f7f8 fad4 	bl	8000adc <__aeabi_dcmplt>
 8008534:	2800      	cmp	r0, #0
 8008536:	f43f af30 	beq.w	800839a <_dtoa_r+0x432>
 800853a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800853e:	2b30      	cmp	r3, #48	; 0x30
 8008540:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008544:	d002      	beq.n	800854c <_dtoa_r+0x5e4>
 8008546:	f8dd a020 	ldr.w	sl, [sp, #32]
 800854a:	e04a      	b.n	80085e2 <_dtoa_r+0x67a>
 800854c:	4615      	mov	r5, r2
 800854e:	e7f4      	b.n	800853a <_dtoa_r+0x5d2>
 8008550:	4b05      	ldr	r3, [pc, #20]	; (8008568 <_dtoa_r+0x600>)
 8008552:	f7f8 f851 	bl	80005f8 <__aeabi_dmul>
 8008556:	e9cd 0100 	strd	r0, r1, [sp]
 800855a:	e7bc      	b.n	80084d6 <_dtoa_r+0x56e>
 800855c:	08009d50 	.word	0x08009d50
 8008560:	08009d28 	.word	0x08009d28
 8008564:	3ff00000 	.word	0x3ff00000
 8008568:	40240000 	.word	0x40240000
 800856c:	401c0000 	.word	0x401c0000
 8008570:	40140000 	.word	0x40140000
 8008574:	3fe00000 	.word	0x3fe00000
 8008578:	e9dd 6700 	ldrd	r6, r7, [sp]
 800857c:	465d      	mov	r5, fp
 800857e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008582:	4630      	mov	r0, r6
 8008584:	4639      	mov	r1, r7
 8008586:	f7f8 f961 	bl	800084c <__aeabi_ddiv>
 800858a:	f7f8 fae5 	bl	8000b58 <__aeabi_d2iz>
 800858e:	4680      	mov	r8, r0
 8008590:	f7f7 ffc8 	bl	8000524 <__aeabi_i2d>
 8008594:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008598:	f7f8 f82e 	bl	80005f8 <__aeabi_dmul>
 800859c:	4602      	mov	r2, r0
 800859e:	460b      	mov	r3, r1
 80085a0:	4630      	mov	r0, r6
 80085a2:	4639      	mov	r1, r7
 80085a4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80085a8:	f7f7 fe6e 	bl	8000288 <__aeabi_dsub>
 80085ac:	f805 6b01 	strb.w	r6, [r5], #1
 80085b0:	eba5 060b 	sub.w	r6, r5, fp
 80085b4:	45b1      	cmp	r9, r6
 80085b6:	4602      	mov	r2, r0
 80085b8:	460b      	mov	r3, r1
 80085ba:	d139      	bne.n	8008630 <_dtoa_r+0x6c8>
 80085bc:	f7f7 fe66 	bl	800028c <__adddf3>
 80085c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085c4:	4606      	mov	r6, r0
 80085c6:	460f      	mov	r7, r1
 80085c8:	f7f8 faa6 	bl	8000b18 <__aeabi_dcmpgt>
 80085cc:	b9c8      	cbnz	r0, 8008602 <_dtoa_r+0x69a>
 80085ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085d2:	4630      	mov	r0, r6
 80085d4:	4639      	mov	r1, r7
 80085d6:	f7f8 fa77 	bl	8000ac8 <__aeabi_dcmpeq>
 80085da:	b110      	cbz	r0, 80085e2 <_dtoa_r+0x67a>
 80085dc:	f018 0f01 	tst.w	r8, #1
 80085e0:	d10f      	bne.n	8008602 <_dtoa_r+0x69a>
 80085e2:	9904      	ldr	r1, [sp, #16]
 80085e4:	4620      	mov	r0, r4
 80085e6:	f000 fcaa 	bl	8008f3e <_Bfree>
 80085ea:	2300      	movs	r3, #0
 80085ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80085ee:	702b      	strb	r3, [r5, #0]
 80085f0:	f10a 0301 	add.w	r3, sl, #1
 80085f4:	6013      	str	r3, [r2, #0]
 80085f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	f000 8241 	beq.w	8008a80 <_dtoa_r+0xb18>
 80085fe:	601d      	str	r5, [r3, #0]
 8008600:	e23e      	b.n	8008a80 <_dtoa_r+0xb18>
 8008602:	f8cd a020 	str.w	sl, [sp, #32]
 8008606:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800860a:	2a39      	cmp	r2, #57	; 0x39
 800860c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8008610:	d108      	bne.n	8008624 <_dtoa_r+0x6bc>
 8008612:	459b      	cmp	fp, r3
 8008614:	d10a      	bne.n	800862c <_dtoa_r+0x6c4>
 8008616:	9b08      	ldr	r3, [sp, #32]
 8008618:	3301      	adds	r3, #1
 800861a:	9308      	str	r3, [sp, #32]
 800861c:	2330      	movs	r3, #48	; 0x30
 800861e:	f88b 3000 	strb.w	r3, [fp]
 8008622:	465b      	mov	r3, fp
 8008624:	781a      	ldrb	r2, [r3, #0]
 8008626:	3201      	adds	r2, #1
 8008628:	701a      	strb	r2, [r3, #0]
 800862a:	e78c      	b.n	8008546 <_dtoa_r+0x5de>
 800862c:	461d      	mov	r5, r3
 800862e:	e7ea      	b.n	8008606 <_dtoa_r+0x69e>
 8008630:	2200      	movs	r2, #0
 8008632:	4b9b      	ldr	r3, [pc, #620]	; (80088a0 <_dtoa_r+0x938>)
 8008634:	f7f7 ffe0 	bl	80005f8 <__aeabi_dmul>
 8008638:	2200      	movs	r2, #0
 800863a:	2300      	movs	r3, #0
 800863c:	4606      	mov	r6, r0
 800863e:	460f      	mov	r7, r1
 8008640:	f7f8 fa42 	bl	8000ac8 <__aeabi_dcmpeq>
 8008644:	2800      	cmp	r0, #0
 8008646:	d09a      	beq.n	800857e <_dtoa_r+0x616>
 8008648:	e7cb      	b.n	80085e2 <_dtoa_r+0x67a>
 800864a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800864c:	2a00      	cmp	r2, #0
 800864e:	f000 808b 	beq.w	8008768 <_dtoa_r+0x800>
 8008652:	9a06      	ldr	r2, [sp, #24]
 8008654:	2a01      	cmp	r2, #1
 8008656:	dc6e      	bgt.n	8008736 <_dtoa_r+0x7ce>
 8008658:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800865a:	2a00      	cmp	r2, #0
 800865c:	d067      	beq.n	800872e <_dtoa_r+0x7c6>
 800865e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008662:	9f07      	ldr	r7, [sp, #28]
 8008664:	9d05      	ldr	r5, [sp, #20]
 8008666:	9a05      	ldr	r2, [sp, #20]
 8008668:	2101      	movs	r1, #1
 800866a:	441a      	add	r2, r3
 800866c:	4620      	mov	r0, r4
 800866e:	9205      	str	r2, [sp, #20]
 8008670:	4498      	add	r8, r3
 8008672:	f000 fd04 	bl	800907e <__i2b>
 8008676:	4606      	mov	r6, r0
 8008678:	2d00      	cmp	r5, #0
 800867a:	dd0c      	ble.n	8008696 <_dtoa_r+0x72e>
 800867c:	f1b8 0f00 	cmp.w	r8, #0
 8008680:	dd09      	ble.n	8008696 <_dtoa_r+0x72e>
 8008682:	4545      	cmp	r5, r8
 8008684:	9a05      	ldr	r2, [sp, #20]
 8008686:	462b      	mov	r3, r5
 8008688:	bfa8      	it	ge
 800868a:	4643      	movge	r3, r8
 800868c:	1ad2      	subs	r2, r2, r3
 800868e:	9205      	str	r2, [sp, #20]
 8008690:	1aed      	subs	r5, r5, r3
 8008692:	eba8 0803 	sub.w	r8, r8, r3
 8008696:	9b07      	ldr	r3, [sp, #28]
 8008698:	b1eb      	cbz	r3, 80086d6 <_dtoa_r+0x76e>
 800869a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800869c:	2b00      	cmp	r3, #0
 800869e:	d067      	beq.n	8008770 <_dtoa_r+0x808>
 80086a0:	b18f      	cbz	r7, 80086c6 <_dtoa_r+0x75e>
 80086a2:	4631      	mov	r1, r6
 80086a4:	463a      	mov	r2, r7
 80086a6:	4620      	mov	r0, r4
 80086a8:	f000 fd88 	bl	80091bc <__pow5mult>
 80086ac:	9a04      	ldr	r2, [sp, #16]
 80086ae:	4601      	mov	r1, r0
 80086b0:	4606      	mov	r6, r0
 80086b2:	4620      	mov	r0, r4
 80086b4:	f000 fcec 	bl	8009090 <__multiply>
 80086b8:	9904      	ldr	r1, [sp, #16]
 80086ba:	9008      	str	r0, [sp, #32]
 80086bc:	4620      	mov	r0, r4
 80086be:	f000 fc3e 	bl	8008f3e <_Bfree>
 80086c2:	9b08      	ldr	r3, [sp, #32]
 80086c4:	9304      	str	r3, [sp, #16]
 80086c6:	9b07      	ldr	r3, [sp, #28]
 80086c8:	1bda      	subs	r2, r3, r7
 80086ca:	d004      	beq.n	80086d6 <_dtoa_r+0x76e>
 80086cc:	9904      	ldr	r1, [sp, #16]
 80086ce:	4620      	mov	r0, r4
 80086d0:	f000 fd74 	bl	80091bc <__pow5mult>
 80086d4:	9004      	str	r0, [sp, #16]
 80086d6:	2101      	movs	r1, #1
 80086d8:	4620      	mov	r0, r4
 80086da:	f000 fcd0 	bl	800907e <__i2b>
 80086de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086e0:	4607      	mov	r7, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f000 81d0 	beq.w	8008a88 <_dtoa_r+0xb20>
 80086e8:	461a      	mov	r2, r3
 80086ea:	4601      	mov	r1, r0
 80086ec:	4620      	mov	r0, r4
 80086ee:	f000 fd65 	bl	80091bc <__pow5mult>
 80086f2:	9b06      	ldr	r3, [sp, #24]
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	4607      	mov	r7, r0
 80086f8:	dc40      	bgt.n	800877c <_dtoa_r+0x814>
 80086fa:	9b00      	ldr	r3, [sp, #0]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d139      	bne.n	8008774 <_dtoa_r+0x80c>
 8008700:	9b01      	ldr	r3, [sp, #4]
 8008702:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008706:	2b00      	cmp	r3, #0
 8008708:	d136      	bne.n	8008778 <_dtoa_r+0x810>
 800870a:	9b01      	ldr	r3, [sp, #4]
 800870c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008710:	0d1b      	lsrs	r3, r3, #20
 8008712:	051b      	lsls	r3, r3, #20
 8008714:	b12b      	cbz	r3, 8008722 <_dtoa_r+0x7ba>
 8008716:	9b05      	ldr	r3, [sp, #20]
 8008718:	3301      	adds	r3, #1
 800871a:	9305      	str	r3, [sp, #20]
 800871c:	f108 0801 	add.w	r8, r8, #1
 8008720:	2301      	movs	r3, #1
 8008722:	9307      	str	r3, [sp, #28]
 8008724:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008726:	2b00      	cmp	r3, #0
 8008728:	d12a      	bne.n	8008780 <_dtoa_r+0x818>
 800872a:	2001      	movs	r0, #1
 800872c:	e030      	b.n	8008790 <_dtoa_r+0x828>
 800872e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008730:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008734:	e795      	b.n	8008662 <_dtoa_r+0x6fa>
 8008736:	9b07      	ldr	r3, [sp, #28]
 8008738:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800873c:	42bb      	cmp	r3, r7
 800873e:	bfbf      	itttt	lt
 8008740:	9b07      	ldrlt	r3, [sp, #28]
 8008742:	9707      	strlt	r7, [sp, #28]
 8008744:	1afa      	sublt	r2, r7, r3
 8008746:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008748:	bfbb      	ittet	lt
 800874a:	189b      	addlt	r3, r3, r2
 800874c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800874e:	1bdf      	subge	r7, r3, r7
 8008750:	2700      	movlt	r7, #0
 8008752:	f1b9 0f00 	cmp.w	r9, #0
 8008756:	bfb5      	itete	lt
 8008758:	9b05      	ldrlt	r3, [sp, #20]
 800875a:	9d05      	ldrge	r5, [sp, #20]
 800875c:	eba3 0509 	sublt.w	r5, r3, r9
 8008760:	464b      	movge	r3, r9
 8008762:	bfb8      	it	lt
 8008764:	2300      	movlt	r3, #0
 8008766:	e77e      	b.n	8008666 <_dtoa_r+0x6fe>
 8008768:	9f07      	ldr	r7, [sp, #28]
 800876a:	9d05      	ldr	r5, [sp, #20]
 800876c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800876e:	e783      	b.n	8008678 <_dtoa_r+0x710>
 8008770:	9a07      	ldr	r2, [sp, #28]
 8008772:	e7ab      	b.n	80086cc <_dtoa_r+0x764>
 8008774:	2300      	movs	r3, #0
 8008776:	e7d4      	b.n	8008722 <_dtoa_r+0x7ba>
 8008778:	9b00      	ldr	r3, [sp, #0]
 800877a:	e7d2      	b.n	8008722 <_dtoa_r+0x7ba>
 800877c:	2300      	movs	r3, #0
 800877e:	9307      	str	r3, [sp, #28]
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008786:	6918      	ldr	r0, [r3, #16]
 8008788:	f000 fc2b 	bl	8008fe2 <__hi0bits>
 800878c:	f1c0 0020 	rsb	r0, r0, #32
 8008790:	4440      	add	r0, r8
 8008792:	f010 001f 	ands.w	r0, r0, #31
 8008796:	d047      	beq.n	8008828 <_dtoa_r+0x8c0>
 8008798:	f1c0 0320 	rsb	r3, r0, #32
 800879c:	2b04      	cmp	r3, #4
 800879e:	dd3b      	ble.n	8008818 <_dtoa_r+0x8b0>
 80087a0:	9b05      	ldr	r3, [sp, #20]
 80087a2:	f1c0 001c 	rsb	r0, r0, #28
 80087a6:	4403      	add	r3, r0
 80087a8:	9305      	str	r3, [sp, #20]
 80087aa:	4405      	add	r5, r0
 80087ac:	4480      	add	r8, r0
 80087ae:	9b05      	ldr	r3, [sp, #20]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	dd05      	ble.n	80087c0 <_dtoa_r+0x858>
 80087b4:	461a      	mov	r2, r3
 80087b6:	9904      	ldr	r1, [sp, #16]
 80087b8:	4620      	mov	r0, r4
 80087ba:	f000 fd4d 	bl	8009258 <__lshift>
 80087be:	9004      	str	r0, [sp, #16]
 80087c0:	f1b8 0f00 	cmp.w	r8, #0
 80087c4:	dd05      	ble.n	80087d2 <_dtoa_r+0x86a>
 80087c6:	4639      	mov	r1, r7
 80087c8:	4642      	mov	r2, r8
 80087ca:	4620      	mov	r0, r4
 80087cc:	f000 fd44 	bl	8009258 <__lshift>
 80087d0:	4607      	mov	r7, r0
 80087d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087d4:	b353      	cbz	r3, 800882c <_dtoa_r+0x8c4>
 80087d6:	4639      	mov	r1, r7
 80087d8:	9804      	ldr	r0, [sp, #16]
 80087da:	f000 fd91 	bl	8009300 <__mcmp>
 80087de:	2800      	cmp	r0, #0
 80087e0:	da24      	bge.n	800882c <_dtoa_r+0x8c4>
 80087e2:	2300      	movs	r3, #0
 80087e4:	220a      	movs	r2, #10
 80087e6:	9904      	ldr	r1, [sp, #16]
 80087e8:	4620      	mov	r0, r4
 80087ea:	f000 fbbf 	bl	8008f6c <__multadd>
 80087ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087f0:	9004      	str	r0, [sp, #16]
 80087f2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	f000 814d 	beq.w	8008a96 <_dtoa_r+0xb2e>
 80087fc:	2300      	movs	r3, #0
 80087fe:	4631      	mov	r1, r6
 8008800:	220a      	movs	r2, #10
 8008802:	4620      	mov	r0, r4
 8008804:	f000 fbb2 	bl	8008f6c <__multadd>
 8008808:	9b02      	ldr	r3, [sp, #8]
 800880a:	2b00      	cmp	r3, #0
 800880c:	4606      	mov	r6, r0
 800880e:	dc4f      	bgt.n	80088b0 <_dtoa_r+0x948>
 8008810:	9b06      	ldr	r3, [sp, #24]
 8008812:	2b02      	cmp	r3, #2
 8008814:	dd4c      	ble.n	80088b0 <_dtoa_r+0x948>
 8008816:	e011      	b.n	800883c <_dtoa_r+0x8d4>
 8008818:	d0c9      	beq.n	80087ae <_dtoa_r+0x846>
 800881a:	9a05      	ldr	r2, [sp, #20]
 800881c:	331c      	adds	r3, #28
 800881e:	441a      	add	r2, r3
 8008820:	9205      	str	r2, [sp, #20]
 8008822:	441d      	add	r5, r3
 8008824:	4498      	add	r8, r3
 8008826:	e7c2      	b.n	80087ae <_dtoa_r+0x846>
 8008828:	4603      	mov	r3, r0
 800882a:	e7f6      	b.n	800881a <_dtoa_r+0x8b2>
 800882c:	f1b9 0f00 	cmp.w	r9, #0
 8008830:	dc38      	bgt.n	80088a4 <_dtoa_r+0x93c>
 8008832:	9b06      	ldr	r3, [sp, #24]
 8008834:	2b02      	cmp	r3, #2
 8008836:	dd35      	ble.n	80088a4 <_dtoa_r+0x93c>
 8008838:	f8cd 9008 	str.w	r9, [sp, #8]
 800883c:	9b02      	ldr	r3, [sp, #8]
 800883e:	b963      	cbnz	r3, 800885a <_dtoa_r+0x8f2>
 8008840:	4639      	mov	r1, r7
 8008842:	2205      	movs	r2, #5
 8008844:	4620      	mov	r0, r4
 8008846:	f000 fb91 	bl	8008f6c <__multadd>
 800884a:	4601      	mov	r1, r0
 800884c:	4607      	mov	r7, r0
 800884e:	9804      	ldr	r0, [sp, #16]
 8008850:	f000 fd56 	bl	8009300 <__mcmp>
 8008854:	2800      	cmp	r0, #0
 8008856:	f73f adcc 	bgt.w	80083f2 <_dtoa_r+0x48a>
 800885a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800885c:	465d      	mov	r5, fp
 800885e:	ea6f 0a03 	mvn.w	sl, r3
 8008862:	f04f 0900 	mov.w	r9, #0
 8008866:	4639      	mov	r1, r7
 8008868:	4620      	mov	r0, r4
 800886a:	f000 fb68 	bl	8008f3e <_Bfree>
 800886e:	2e00      	cmp	r6, #0
 8008870:	f43f aeb7 	beq.w	80085e2 <_dtoa_r+0x67a>
 8008874:	f1b9 0f00 	cmp.w	r9, #0
 8008878:	d005      	beq.n	8008886 <_dtoa_r+0x91e>
 800887a:	45b1      	cmp	r9, r6
 800887c:	d003      	beq.n	8008886 <_dtoa_r+0x91e>
 800887e:	4649      	mov	r1, r9
 8008880:	4620      	mov	r0, r4
 8008882:	f000 fb5c 	bl	8008f3e <_Bfree>
 8008886:	4631      	mov	r1, r6
 8008888:	4620      	mov	r0, r4
 800888a:	f000 fb58 	bl	8008f3e <_Bfree>
 800888e:	e6a8      	b.n	80085e2 <_dtoa_r+0x67a>
 8008890:	2700      	movs	r7, #0
 8008892:	463e      	mov	r6, r7
 8008894:	e7e1      	b.n	800885a <_dtoa_r+0x8f2>
 8008896:	f8dd a020 	ldr.w	sl, [sp, #32]
 800889a:	463e      	mov	r6, r7
 800889c:	e5a9      	b.n	80083f2 <_dtoa_r+0x48a>
 800889e:	bf00      	nop
 80088a0:	40240000 	.word	0x40240000
 80088a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088a6:	f8cd 9008 	str.w	r9, [sp, #8]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	f000 80fa 	beq.w	8008aa4 <_dtoa_r+0xb3c>
 80088b0:	2d00      	cmp	r5, #0
 80088b2:	dd05      	ble.n	80088c0 <_dtoa_r+0x958>
 80088b4:	4631      	mov	r1, r6
 80088b6:	462a      	mov	r2, r5
 80088b8:	4620      	mov	r0, r4
 80088ba:	f000 fccd 	bl	8009258 <__lshift>
 80088be:	4606      	mov	r6, r0
 80088c0:	9b07      	ldr	r3, [sp, #28]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d04c      	beq.n	8008960 <_dtoa_r+0x9f8>
 80088c6:	6871      	ldr	r1, [r6, #4]
 80088c8:	4620      	mov	r0, r4
 80088ca:	f000 fb04 	bl	8008ed6 <_Balloc>
 80088ce:	6932      	ldr	r2, [r6, #16]
 80088d0:	3202      	adds	r2, #2
 80088d2:	4605      	mov	r5, r0
 80088d4:	0092      	lsls	r2, r2, #2
 80088d6:	f106 010c 	add.w	r1, r6, #12
 80088da:	300c      	adds	r0, #12
 80088dc:	f000 faf0 	bl	8008ec0 <memcpy>
 80088e0:	2201      	movs	r2, #1
 80088e2:	4629      	mov	r1, r5
 80088e4:	4620      	mov	r0, r4
 80088e6:	f000 fcb7 	bl	8009258 <__lshift>
 80088ea:	9b00      	ldr	r3, [sp, #0]
 80088ec:	f8cd b014 	str.w	fp, [sp, #20]
 80088f0:	f003 0301 	and.w	r3, r3, #1
 80088f4:	46b1      	mov	r9, r6
 80088f6:	9307      	str	r3, [sp, #28]
 80088f8:	4606      	mov	r6, r0
 80088fa:	4639      	mov	r1, r7
 80088fc:	9804      	ldr	r0, [sp, #16]
 80088fe:	f7ff faa7 	bl	8007e50 <quorem>
 8008902:	4649      	mov	r1, r9
 8008904:	4605      	mov	r5, r0
 8008906:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800890a:	9804      	ldr	r0, [sp, #16]
 800890c:	f000 fcf8 	bl	8009300 <__mcmp>
 8008910:	4632      	mov	r2, r6
 8008912:	9000      	str	r0, [sp, #0]
 8008914:	4639      	mov	r1, r7
 8008916:	4620      	mov	r0, r4
 8008918:	f000 fd0c 	bl	8009334 <__mdiff>
 800891c:	68c3      	ldr	r3, [r0, #12]
 800891e:	4602      	mov	r2, r0
 8008920:	bb03      	cbnz	r3, 8008964 <_dtoa_r+0x9fc>
 8008922:	4601      	mov	r1, r0
 8008924:	9008      	str	r0, [sp, #32]
 8008926:	9804      	ldr	r0, [sp, #16]
 8008928:	f000 fcea 	bl	8009300 <__mcmp>
 800892c:	9a08      	ldr	r2, [sp, #32]
 800892e:	4603      	mov	r3, r0
 8008930:	4611      	mov	r1, r2
 8008932:	4620      	mov	r0, r4
 8008934:	9308      	str	r3, [sp, #32]
 8008936:	f000 fb02 	bl	8008f3e <_Bfree>
 800893a:	9b08      	ldr	r3, [sp, #32]
 800893c:	b9a3      	cbnz	r3, 8008968 <_dtoa_r+0xa00>
 800893e:	9a06      	ldr	r2, [sp, #24]
 8008940:	b992      	cbnz	r2, 8008968 <_dtoa_r+0xa00>
 8008942:	9a07      	ldr	r2, [sp, #28]
 8008944:	b982      	cbnz	r2, 8008968 <_dtoa_r+0xa00>
 8008946:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800894a:	d029      	beq.n	80089a0 <_dtoa_r+0xa38>
 800894c:	9b00      	ldr	r3, [sp, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	dd01      	ble.n	8008956 <_dtoa_r+0x9ee>
 8008952:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008956:	9b05      	ldr	r3, [sp, #20]
 8008958:	1c5d      	adds	r5, r3, #1
 800895a:	f883 8000 	strb.w	r8, [r3]
 800895e:	e782      	b.n	8008866 <_dtoa_r+0x8fe>
 8008960:	4630      	mov	r0, r6
 8008962:	e7c2      	b.n	80088ea <_dtoa_r+0x982>
 8008964:	2301      	movs	r3, #1
 8008966:	e7e3      	b.n	8008930 <_dtoa_r+0x9c8>
 8008968:	9a00      	ldr	r2, [sp, #0]
 800896a:	2a00      	cmp	r2, #0
 800896c:	db04      	blt.n	8008978 <_dtoa_r+0xa10>
 800896e:	d125      	bne.n	80089bc <_dtoa_r+0xa54>
 8008970:	9a06      	ldr	r2, [sp, #24]
 8008972:	bb1a      	cbnz	r2, 80089bc <_dtoa_r+0xa54>
 8008974:	9a07      	ldr	r2, [sp, #28]
 8008976:	bb0a      	cbnz	r2, 80089bc <_dtoa_r+0xa54>
 8008978:	2b00      	cmp	r3, #0
 800897a:	ddec      	ble.n	8008956 <_dtoa_r+0x9ee>
 800897c:	2201      	movs	r2, #1
 800897e:	9904      	ldr	r1, [sp, #16]
 8008980:	4620      	mov	r0, r4
 8008982:	f000 fc69 	bl	8009258 <__lshift>
 8008986:	4639      	mov	r1, r7
 8008988:	9004      	str	r0, [sp, #16]
 800898a:	f000 fcb9 	bl	8009300 <__mcmp>
 800898e:	2800      	cmp	r0, #0
 8008990:	dc03      	bgt.n	800899a <_dtoa_r+0xa32>
 8008992:	d1e0      	bne.n	8008956 <_dtoa_r+0x9ee>
 8008994:	f018 0f01 	tst.w	r8, #1
 8008998:	d0dd      	beq.n	8008956 <_dtoa_r+0x9ee>
 800899a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800899e:	d1d8      	bne.n	8008952 <_dtoa_r+0x9ea>
 80089a0:	9b05      	ldr	r3, [sp, #20]
 80089a2:	9a05      	ldr	r2, [sp, #20]
 80089a4:	1c5d      	adds	r5, r3, #1
 80089a6:	2339      	movs	r3, #57	; 0x39
 80089a8:	7013      	strb	r3, [r2, #0]
 80089aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80089ae:	2b39      	cmp	r3, #57	; 0x39
 80089b0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80089b4:	d04f      	beq.n	8008a56 <_dtoa_r+0xaee>
 80089b6:	3301      	adds	r3, #1
 80089b8:	7013      	strb	r3, [r2, #0]
 80089ba:	e754      	b.n	8008866 <_dtoa_r+0x8fe>
 80089bc:	9a05      	ldr	r2, [sp, #20]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	f102 0501 	add.w	r5, r2, #1
 80089c4:	dd06      	ble.n	80089d4 <_dtoa_r+0xa6c>
 80089c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80089ca:	d0e9      	beq.n	80089a0 <_dtoa_r+0xa38>
 80089cc:	f108 0801 	add.w	r8, r8, #1
 80089d0:	9b05      	ldr	r3, [sp, #20]
 80089d2:	e7c2      	b.n	800895a <_dtoa_r+0x9f2>
 80089d4:	9a02      	ldr	r2, [sp, #8]
 80089d6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80089da:	eba5 030b 	sub.w	r3, r5, fp
 80089de:	4293      	cmp	r3, r2
 80089e0:	d021      	beq.n	8008a26 <_dtoa_r+0xabe>
 80089e2:	2300      	movs	r3, #0
 80089e4:	220a      	movs	r2, #10
 80089e6:	9904      	ldr	r1, [sp, #16]
 80089e8:	4620      	mov	r0, r4
 80089ea:	f000 fabf 	bl	8008f6c <__multadd>
 80089ee:	45b1      	cmp	r9, r6
 80089f0:	9004      	str	r0, [sp, #16]
 80089f2:	f04f 0300 	mov.w	r3, #0
 80089f6:	f04f 020a 	mov.w	r2, #10
 80089fa:	4649      	mov	r1, r9
 80089fc:	4620      	mov	r0, r4
 80089fe:	d105      	bne.n	8008a0c <_dtoa_r+0xaa4>
 8008a00:	f000 fab4 	bl	8008f6c <__multadd>
 8008a04:	4681      	mov	r9, r0
 8008a06:	4606      	mov	r6, r0
 8008a08:	9505      	str	r5, [sp, #20]
 8008a0a:	e776      	b.n	80088fa <_dtoa_r+0x992>
 8008a0c:	f000 faae 	bl	8008f6c <__multadd>
 8008a10:	4631      	mov	r1, r6
 8008a12:	4681      	mov	r9, r0
 8008a14:	2300      	movs	r3, #0
 8008a16:	220a      	movs	r2, #10
 8008a18:	4620      	mov	r0, r4
 8008a1a:	f000 faa7 	bl	8008f6c <__multadd>
 8008a1e:	4606      	mov	r6, r0
 8008a20:	e7f2      	b.n	8008a08 <_dtoa_r+0xaa0>
 8008a22:	f04f 0900 	mov.w	r9, #0
 8008a26:	2201      	movs	r2, #1
 8008a28:	9904      	ldr	r1, [sp, #16]
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	f000 fc14 	bl	8009258 <__lshift>
 8008a30:	4639      	mov	r1, r7
 8008a32:	9004      	str	r0, [sp, #16]
 8008a34:	f000 fc64 	bl	8009300 <__mcmp>
 8008a38:	2800      	cmp	r0, #0
 8008a3a:	dcb6      	bgt.n	80089aa <_dtoa_r+0xa42>
 8008a3c:	d102      	bne.n	8008a44 <_dtoa_r+0xadc>
 8008a3e:	f018 0f01 	tst.w	r8, #1
 8008a42:	d1b2      	bne.n	80089aa <_dtoa_r+0xa42>
 8008a44:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008a48:	2b30      	cmp	r3, #48	; 0x30
 8008a4a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008a4e:	f47f af0a 	bne.w	8008866 <_dtoa_r+0x8fe>
 8008a52:	4615      	mov	r5, r2
 8008a54:	e7f6      	b.n	8008a44 <_dtoa_r+0xadc>
 8008a56:	4593      	cmp	fp, r2
 8008a58:	d105      	bne.n	8008a66 <_dtoa_r+0xafe>
 8008a5a:	2331      	movs	r3, #49	; 0x31
 8008a5c:	f10a 0a01 	add.w	sl, sl, #1
 8008a60:	f88b 3000 	strb.w	r3, [fp]
 8008a64:	e6ff      	b.n	8008866 <_dtoa_r+0x8fe>
 8008a66:	4615      	mov	r5, r2
 8008a68:	e79f      	b.n	80089aa <_dtoa_r+0xa42>
 8008a6a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008ad0 <_dtoa_r+0xb68>
 8008a6e:	e007      	b.n	8008a80 <_dtoa_r+0xb18>
 8008a70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a72:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008ad4 <_dtoa_r+0xb6c>
 8008a76:	b11b      	cbz	r3, 8008a80 <_dtoa_r+0xb18>
 8008a78:	f10b 0308 	add.w	r3, fp, #8
 8008a7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a7e:	6013      	str	r3, [r2, #0]
 8008a80:	4658      	mov	r0, fp
 8008a82:	b017      	add	sp, #92	; 0x5c
 8008a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a88:	9b06      	ldr	r3, [sp, #24]
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	f77f ae35 	ble.w	80086fa <_dtoa_r+0x792>
 8008a90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a92:	9307      	str	r3, [sp, #28]
 8008a94:	e649      	b.n	800872a <_dtoa_r+0x7c2>
 8008a96:	9b02      	ldr	r3, [sp, #8]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	dc03      	bgt.n	8008aa4 <_dtoa_r+0xb3c>
 8008a9c:	9b06      	ldr	r3, [sp, #24]
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	f73f aecc 	bgt.w	800883c <_dtoa_r+0x8d4>
 8008aa4:	465d      	mov	r5, fp
 8008aa6:	4639      	mov	r1, r7
 8008aa8:	9804      	ldr	r0, [sp, #16]
 8008aaa:	f7ff f9d1 	bl	8007e50 <quorem>
 8008aae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008ab2:	f805 8b01 	strb.w	r8, [r5], #1
 8008ab6:	9a02      	ldr	r2, [sp, #8]
 8008ab8:	eba5 030b 	sub.w	r3, r5, fp
 8008abc:	429a      	cmp	r2, r3
 8008abe:	ddb0      	ble.n	8008a22 <_dtoa_r+0xaba>
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	220a      	movs	r2, #10
 8008ac4:	9904      	ldr	r1, [sp, #16]
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f000 fa50 	bl	8008f6c <__multadd>
 8008acc:	9004      	str	r0, [sp, #16]
 8008ace:	e7ea      	b.n	8008aa6 <_dtoa_r+0xb3e>
 8008ad0:	08009c94 	.word	0x08009c94
 8008ad4:	08009cb8 	.word	0x08009cb8

08008ad8 <__sflush_r>:
 8008ad8:	898a      	ldrh	r2, [r1, #12]
 8008ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ade:	4605      	mov	r5, r0
 8008ae0:	0710      	lsls	r0, r2, #28
 8008ae2:	460c      	mov	r4, r1
 8008ae4:	d458      	bmi.n	8008b98 <__sflush_r+0xc0>
 8008ae6:	684b      	ldr	r3, [r1, #4]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	dc05      	bgt.n	8008af8 <__sflush_r+0x20>
 8008aec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	dc02      	bgt.n	8008af8 <__sflush_r+0x20>
 8008af2:	2000      	movs	r0, #0
 8008af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008af8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008afa:	2e00      	cmp	r6, #0
 8008afc:	d0f9      	beq.n	8008af2 <__sflush_r+0x1a>
 8008afe:	2300      	movs	r3, #0
 8008b00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b04:	682f      	ldr	r7, [r5, #0]
 8008b06:	6a21      	ldr	r1, [r4, #32]
 8008b08:	602b      	str	r3, [r5, #0]
 8008b0a:	d032      	beq.n	8008b72 <__sflush_r+0x9a>
 8008b0c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b0e:	89a3      	ldrh	r3, [r4, #12]
 8008b10:	075a      	lsls	r2, r3, #29
 8008b12:	d505      	bpl.n	8008b20 <__sflush_r+0x48>
 8008b14:	6863      	ldr	r3, [r4, #4]
 8008b16:	1ac0      	subs	r0, r0, r3
 8008b18:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b1a:	b10b      	cbz	r3, 8008b20 <__sflush_r+0x48>
 8008b1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b1e:	1ac0      	subs	r0, r0, r3
 8008b20:	2300      	movs	r3, #0
 8008b22:	4602      	mov	r2, r0
 8008b24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b26:	6a21      	ldr	r1, [r4, #32]
 8008b28:	4628      	mov	r0, r5
 8008b2a:	47b0      	blx	r6
 8008b2c:	1c43      	adds	r3, r0, #1
 8008b2e:	89a3      	ldrh	r3, [r4, #12]
 8008b30:	d106      	bne.n	8008b40 <__sflush_r+0x68>
 8008b32:	6829      	ldr	r1, [r5, #0]
 8008b34:	291d      	cmp	r1, #29
 8008b36:	d848      	bhi.n	8008bca <__sflush_r+0xf2>
 8008b38:	4a29      	ldr	r2, [pc, #164]	; (8008be0 <__sflush_r+0x108>)
 8008b3a:	40ca      	lsrs	r2, r1
 8008b3c:	07d6      	lsls	r6, r2, #31
 8008b3e:	d544      	bpl.n	8008bca <__sflush_r+0xf2>
 8008b40:	2200      	movs	r2, #0
 8008b42:	6062      	str	r2, [r4, #4]
 8008b44:	04d9      	lsls	r1, r3, #19
 8008b46:	6922      	ldr	r2, [r4, #16]
 8008b48:	6022      	str	r2, [r4, #0]
 8008b4a:	d504      	bpl.n	8008b56 <__sflush_r+0x7e>
 8008b4c:	1c42      	adds	r2, r0, #1
 8008b4e:	d101      	bne.n	8008b54 <__sflush_r+0x7c>
 8008b50:	682b      	ldr	r3, [r5, #0]
 8008b52:	b903      	cbnz	r3, 8008b56 <__sflush_r+0x7e>
 8008b54:	6560      	str	r0, [r4, #84]	; 0x54
 8008b56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b58:	602f      	str	r7, [r5, #0]
 8008b5a:	2900      	cmp	r1, #0
 8008b5c:	d0c9      	beq.n	8008af2 <__sflush_r+0x1a>
 8008b5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b62:	4299      	cmp	r1, r3
 8008b64:	d002      	beq.n	8008b6c <__sflush_r+0x94>
 8008b66:	4628      	mov	r0, r5
 8008b68:	f000 fc9e 	bl	80094a8 <_free_r>
 8008b6c:	2000      	movs	r0, #0
 8008b6e:	6360      	str	r0, [r4, #52]	; 0x34
 8008b70:	e7c0      	b.n	8008af4 <__sflush_r+0x1c>
 8008b72:	2301      	movs	r3, #1
 8008b74:	4628      	mov	r0, r5
 8008b76:	47b0      	blx	r6
 8008b78:	1c41      	adds	r1, r0, #1
 8008b7a:	d1c8      	bne.n	8008b0e <__sflush_r+0x36>
 8008b7c:	682b      	ldr	r3, [r5, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d0c5      	beq.n	8008b0e <__sflush_r+0x36>
 8008b82:	2b1d      	cmp	r3, #29
 8008b84:	d001      	beq.n	8008b8a <__sflush_r+0xb2>
 8008b86:	2b16      	cmp	r3, #22
 8008b88:	d101      	bne.n	8008b8e <__sflush_r+0xb6>
 8008b8a:	602f      	str	r7, [r5, #0]
 8008b8c:	e7b1      	b.n	8008af2 <__sflush_r+0x1a>
 8008b8e:	89a3      	ldrh	r3, [r4, #12]
 8008b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b94:	81a3      	strh	r3, [r4, #12]
 8008b96:	e7ad      	b.n	8008af4 <__sflush_r+0x1c>
 8008b98:	690f      	ldr	r7, [r1, #16]
 8008b9a:	2f00      	cmp	r7, #0
 8008b9c:	d0a9      	beq.n	8008af2 <__sflush_r+0x1a>
 8008b9e:	0793      	lsls	r3, r2, #30
 8008ba0:	680e      	ldr	r6, [r1, #0]
 8008ba2:	bf08      	it	eq
 8008ba4:	694b      	ldreq	r3, [r1, #20]
 8008ba6:	600f      	str	r7, [r1, #0]
 8008ba8:	bf18      	it	ne
 8008baa:	2300      	movne	r3, #0
 8008bac:	eba6 0807 	sub.w	r8, r6, r7
 8008bb0:	608b      	str	r3, [r1, #8]
 8008bb2:	f1b8 0f00 	cmp.w	r8, #0
 8008bb6:	dd9c      	ble.n	8008af2 <__sflush_r+0x1a>
 8008bb8:	4643      	mov	r3, r8
 8008bba:	463a      	mov	r2, r7
 8008bbc:	6a21      	ldr	r1, [r4, #32]
 8008bbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	47b0      	blx	r6
 8008bc4:	2800      	cmp	r0, #0
 8008bc6:	dc06      	bgt.n	8008bd6 <__sflush_r+0xfe>
 8008bc8:	89a3      	ldrh	r3, [r4, #12]
 8008bca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bce:	81a3      	strh	r3, [r4, #12]
 8008bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bd4:	e78e      	b.n	8008af4 <__sflush_r+0x1c>
 8008bd6:	4407      	add	r7, r0
 8008bd8:	eba8 0800 	sub.w	r8, r8, r0
 8008bdc:	e7e9      	b.n	8008bb2 <__sflush_r+0xda>
 8008bde:	bf00      	nop
 8008be0:	20400001 	.word	0x20400001

08008be4 <_fflush_r>:
 8008be4:	b538      	push	{r3, r4, r5, lr}
 8008be6:	690b      	ldr	r3, [r1, #16]
 8008be8:	4605      	mov	r5, r0
 8008bea:	460c      	mov	r4, r1
 8008bec:	b1db      	cbz	r3, 8008c26 <_fflush_r+0x42>
 8008bee:	b118      	cbz	r0, 8008bf8 <_fflush_r+0x14>
 8008bf0:	6983      	ldr	r3, [r0, #24]
 8008bf2:	b90b      	cbnz	r3, 8008bf8 <_fflush_r+0x14>
 8008bf4:	f000 f860 	bl	8008cb8 <__sinit>
 8008bf8:	4b0c      	ldr	r3, [pc, #48]	; (8008c2c <_fflush_r+0x48>)
 8008bfa:	429c      	cmp	r4, r3
 8008bfc:	d109      	bne.n	8008c12 <_fflush_r+0x2e>
 8008bfe:	686c      	ldr	r4, [r5, #4]
 8008c00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c04:	b17b      	cbz	r3, 8008c26 <_fflush_r+0x42>
 8008c06:	4621      	mov	r1, r4
 8008c08:	4628      	mov	r0, r5
 8008c0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c0e:	f7ff bf63 	b.w	8008ad8 <__sflush_r>
 8008c12:	4b07      	ldr	r3, [pc, #28]	; (8008c30 <_fflush_r+0x4c>)
 8008c14:	429c      	cmp	r4, r3
 8008c16:	d101      	bne.n	8008c1c <_fflush_r+0x38>
 8008c18:	68ac      	ldr	r4, [r5, #8]
 8008c1a:	e7f1      	b.n	8008c00 <_fflush_r+0x1c>
 8008c1c:	4b05      	ldr	r3, [pc, #20]	; (8008c34 <_fflush_r+0x50>)
 8008c1e:	429c      	cmp	r4, r3
 8008c20:	bf08      	it	eq
 8008c22:	68ec      	ldreq	r4, [r5, #12]
 8008c24:	e7ec      	b.n	8008c00 <_fflush_r+0x1c>
 8008c26:	2000      	movs	r0, #0
 8008c28:	bd38      	pop	{r3, r4, r5, pc}
 8008c2a:	bf00      	nop
 8008c2c:	08009ce8 	.word	0x08009ce8
 8008c30:	08009d08 	.word	0x08009d08
 8008c34:	08009cc8 	.word	0x08009cc8

08008c38 <std>:
 8008c38:	2300      	movs	r3, #0
 8008c3a:	b510      	push	{r4, lr}
 8008c3c:	4604      	mov	r4, r0
 8008c3e:	e9c0 3300 	strd	r3, r3, [r0]
 8008c42:	6083      	str	r3, [r0, #8]
 8008c44:	8181      	strh	r1, [r0, #12]
 8008c46:	6643      	str	r3, [r0, #100]	; 0x64
 8008c48:	81c2      	strh	r2, [r0, #14]
 8008c4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c4e:	6183      	str	r3, [r0, #24]
 8008c50:	4619      	mov	r1, r3
 8008c52:	2208      	movs	r2, #8
 8008c54:	305c      	adds	r0, #92	; 0x5c
 8008c56:	f7fe fb5b 	bl	8007310 <memset>
 8008c5a:	4b05      	ldr	r3, [pc, #20]	; (8008c70 <std+0x38>)
 8008c5c:	6263      	str	r3, [r4, #36]	; 0x24
 8008c5e:	4b05      	ldr	r3, [pc, #20]	; (8008c74 <std+0x3c>)
 8008c60:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c62:	4b05      	ldr	r3, [pc, #20]	; (8008c78 <std+0x40>)
 8008c64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c66:	4b05      	ldr	r3, [pc, #20]	; (8008c7c <std+0x44>)
 8008c68:	6224      	str	r4, [r4, #32]
 8008c6a:	6323      	str	r3, [r4, #48]	; 0x30
 8008c6c:	bd10      	pop	{r4, pc}
 8008c6e:	bf00      	nop
 8008c70:	08009899 	.word	0x08009899
 8008c74:	080098bb 	.word	0x080098bb
 8008c78:	080098f3 	.word	0x080098f3
 8008c7c:	08009917 	.word	0x08009917

08008c80 <_cleanup_r>:
 8008c80:	4901      	ldr	r1, [pc, #4]	; (8008c88 <_cleanup_r+0x8>)
 8008c82:	f000 b885 	b.w	8008d90 <_fwalk_reent>
 8008c86:	bf00      	nop
 8008c88:	08008be5 	.word	0x08008be5

08008c8c <__sfmoreglue>:
 8008c8c:	b570      	push	{r4, r5, r6, lr}
 8008c8e:	1e4a      	subs	r2, r1, #1
 8008c90:	2568      	movs	r5, #104	; 0x68
 8008c92:	4355      	muls	r5, r2
 8008c94:	460e      	mov	r6, r1
 8008c96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008c9a:	f000 fc53 	bl	8009544 <_malloc_r>
 8008c9e:	4604      	mov	r4, r0
 8008ca0:	b140      	cbz	r0, 8008cb4 <__sfmoreglue+0x28>
 8008ca2:	2100      	movs	r1, #0
 8008ca4:	e9c0 1600 	strd	r1, r6, [r0]
 8008ca8:	300c      	adds	r0, #12
 8008caa:	60a0      	str	r0, [r4, #8]
 8008cac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008cb0:	f7fe fb2e 	bl	8007310 <memset>
 8008cb4:	4620      	mov	r0, r4
 8008cb6:	bd70      	pop	{r4, r5, r6, pc}

08008cb8 <__sinit>:
 8008cb8:	6983      	ldr	r3, [r0, #24]
 8008cba:	b510      	push	{r4, lr}
 8008cbc:	4604      	mov	r4, r0
 8008cbe:	bb33      	cbnz	r3, 8008d0e <__sinit+0x56>
 8008cc0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008cc4:	6503      	str	r3, [r0, #80]	; 0x50
 8008cc6:	4b12      	ldr	r3, [pc, #72]	; (8008d10 <__sinit+0x58>)
 8008cc8:	4a12      	ldr	r2, [pc, #72]	; (8008d14 <__sinit+0x5c>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	6282      	str	r2, [r0, #40]	; 0x28
 8008cce:	4298      	cmp	r0, r3
 8008cd0:	bf04      	itt	eq
 8008cd2:	2301      	moveq	r3, #1
 8008cd4:	6183      	streq	r3, [r0, #24]
 8008cd6:	f000 f81f 	bl	8008d18 <__sfp>
 8008cda:	6060      	str	r0, [r4, #4]
 8008cdc:	4620      	mov	r0, r4
 8008cde:	f000 f81b 	bl	8008d18 <__sfp>
 8008ce2:	60a0      	str	r0, [r4, #8]
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	f000 f817 	bl	8008d18 <__sfp>
 8008cea:	2200      	movs	r2, #0
 8008cec:	60e0      	str	r0, [r4, #12]
 8008cee:	2104      	movs	r1, #4
 8008cf0:	6860      	ldr	r0, [r4, #4]
 8008cf2:	f7ff ffa1 	bl	8008c38 <std>
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	2109      	movs	r1, #9
 8008cfa:	68a0      	ldr	r0, [r4, #8]
 8008cfc:	f7ff ff9c 	bl	8008c38 <std>
 8008d00:	2202      	movs	r2, #2
 8008d02:	2112      	movs	r1, #18
 8008d04:	68e0      	ldr	r0, [r4, #12]
 8008d06:	f7ff ff97 	bl	8008c38 <std>
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	61a3      	str	r3, [r4, #24]
 8008d0e:	bd10      	pop	{r4, pc}
 8008d10:	08009c80 	.word	0x08009c80
 8008d14:	08008c81 	.word	0x08008c81

08008d18 <__sfp>:
 8008d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d1a:	4b1b      	ldr	r3, [pc, #108]	; (8008d88 <__sfp+0x70>)
 8008d1c:	681e      	ldr	r6, [r3, #0]
 8008d1e:	69b3      	ldr	r3, [r6, #24]
 8008d20:	4607      	mov	r7, r0
 8008d22:	b913      	cbnz	r3, 8008d2a <__sfp+0x12>
 8008d24:	4630      	mov	r0, r6
 8008d26:	f7ff ffc7 	bl	8008cb8 <__sinit>
 8008d2a:	3648      	adds	r6, #72	; 0x48
 8008d2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008d30:	3b01      	subs	r3, #1
 8008d32:	d503      	bpl.n	8008d3c <__sfp+0x24>
 8008d34:	6833      	ldr	r3, [r6, #0]
 8008d36:	b133      	cbz	r3, 8008d46 <__sfp+0x2e>
 8008d38:	6836      	ldr	r6, [r6, #0]
 8008d3a:	e7f7      	b.n	8008d2c <__sfp+0x14>
 8008d3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008d40:	b16d      	cbz	r5, 8008d5e <__sfp+0x46>
 8008d42:	3468      	adds	r4, #104	; 0x68
 8008d44:	e7f4      	b.n	8008d30 <__sfp+0x18>
 8008d46:	2104      	movs	r1, #4
 8008d48:	4638      	mov	r0, r7
 8008d4a:	f7ff ff9f 	bl	8008c8c <__sfmoreglue>
 8008d4e:	6030      	str	r0, [r6, #0]
 8008d50:	2800      	cmp	r0, #0
 8008d52:	d1f1      	bne.n	8008d38 <__sfp+0x20>
 8008d54:	230c      	movs	r3, #12
 8008d56:	603b      	str	r3, [r7, #0]
 8008d58:	4604      	mov	r4, r0
 8008d5a:	4620      	mov	r0, r4
 8008d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d5e:	4b0b      	ldr	r3, [pc, #44]	; (8008d8c <__sfp+0x74>)
 8008d60:	6665      	str	r5, [r4, #100]	; 0x64
 8008d62:	e9c4 5500 	strd	r5, r5, [r4]
 8008d66:	60a5      	str	r5, [r4, #8]
 8008d68:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008d6c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008d70:	2208      	movs	r2, #8
 8008d72:	4629      	mov	r1, r5
 8008d74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008d78:	f7fe faca 	bl	8007310 <memset>
 8008d7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008d80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008d84:	e7e9      	b.n	8008d5a <__sfp+0x42>
 8008d86:	bf00      	nop
 8008d88:	08009c80 	.word	0x08009c80
 8008d8c:	ffff0001 	.word	0xffff0001

08008d90 <_fwalk_reent>:
 8008d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d94:	4680      	mov	r8, r0
 8008d96:	4689      	mov	r9, r1
 8008d98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008d9c:	2600      	movs	r6, #0
 8008d9e:	b914      	cbnz	r4, 8008da6 <_fwalk_reent+0x16>
 8008da0:	4630      	mov	r0, r6
 8008da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008da6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008daa:	3f01      	subs	r7, #1
 8008dac:	d501      	bpl.n	8008db2 <_fwalk_reent+0x22>
 8008dae:	6824      	ldr	r4, [r4, #0]
 8008db0:	e7f5      	b.n	8008d9e <_fwalk_reent+0xe>
 8008db2:	89ab      	ldrh	r3, [r5, #12]
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d907      	bls.n	8008dc8 <_fwalk_reent+0x38>
 8008db8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	d003      	beq.n	8008dc8 <_fwalk_reent+0x38>
 8008dc0:	4629      	mov	r1, r5
 8008dc2:	4640      	mov	r0, r8
 8008dc4:	47c8      	blx	r9
 8008dc6:	4306      	orrs	r6, r0
 8008dc8:	3568      	adds	r5, #104	; 0x68
 8008dca:	e7ee      	b.n	8008daa <_fwalk_reent+0x1a>

08008dcc <_localeconv_r>:
 8008dcc:	4b04      	ldr	r3, [pc, #16]	; (8008de0 <_localeconv_r+0x14>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	6a18      	ldr	r0, [r3, #32]
 8008dd2:	4b04      	ldr	r3, [pc, #16]	; (8008de4 <_localeconv_r+0x18>)
 8008dd4:	2800      	cmp	r0, #0
 8008dd6:	bf08      	it	eq
 8008dd8:	4618      	moveq	r0, r3
 8008dda:	30f0      	adds	r0, #240	; 0xf0
 8008ddc:	4770      	bx	lr
 8008dde:	bf00      	nop
 8008de0:	200000d0 	.word	0x200000d0
 8008de4:	20000134 	.word	0x20000134

08008de8 <__swhatbuf_r>:
 8008de8:	b570      	push	{r4, r5, r6, lr}
 8008dea:	460e      	mov	r6, r1
 8008dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008df0:	2900      	cmp	r1, #0
 8008df2:	b096      	sub	sp, #88	; 0x58
 8008df4:	4614      	mov	r4, r2
 8008df6:	461d      	mov	r5, r3
 8008df8:	da07      	bge.n	8008e0a <__swhatbuf_r+0x22>
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	602b      	str	r3, [r5, #0]
 8008dfe:	89b3      	ldrh	r3, [r6, #12]
 8008e00:	061a      	lsls	r2, r3, #24
 8008e02:	d410      	bmi.n	8008e26 <__swhatbuf_r+0x3e>
 8008e04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e08:	e00e      	b.n	8008e28 <__swhatbuf_r+0x40>
 8008e0a:	466a      	mov	r2, sp
 8008e0c:	f000 fdaa 	bl	8009964 <_fstat_r>
 8008e10:	2800      	cmp	r0, #0
 8008e12:	dbf2      	blt.n	8008dfa <__swhatbuf_r+0x12>
 8008e14:	9a01      	ldr	r2, [sp, #4]
 8008e16:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008e1a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008e1e:	425a      	negs	r2, r3
 8008e20:	415a      	adcs	r2, r3
 8008e22:	602a      	str	r2, [r5, #0]
 8008e24:	e7ee      	b.n	8008e04 <__swhatbuf_r+0x1c>
 8008e26:	2340      	movs	r3, #64	; 0x40
 8008e28:	2000      	movs	r0, #0
 8008e2a:	6023      	str	r3, [r4, #0]
 8008e2c:	b016      	add	sp, #88	; 0x58
 8008e2e:	bd70      	pop	{r4, r5, r6, pc}

08008e30 <__smakebuf_r>:
 8008e30:	898b      	ldrh	r3, [r1, #12]
 8008e32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e34:	079d      	lsls	r5, r3, #30
 8008e36:	4606      	mov	r6, r0
 8008e38:	460c      	mov	r4, r1
 8008e3a:	d507      	bpl.n	8008e4c <__smakebuf_r+0x1c>
 8008e3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008e40:	6023      	str	r3, [r4, #0]
 8008e42:	6123      	str	r3, [r4, #16]
 8008e44:	2301      	movs	r3, #1
 8008e46:	6163      	str	r3, [r4, #20]
 8008e48:	b002      	add	sp, #8
 8008e4a:	bd70      	pop	{r4, r5, r6, pc}
 8008e4c:	ab01      	add	r3, sp, #4
 8008e4e:	466a      	mov	r2, sp
 8008e50:	f7ff ffca 	bl	8008de8 <__swhatbuf_r>
 8008e54:	9900      	ldr	r1, [sp, #0]
 8008e56:	4605      	mov	r5, r0
 8008e58:	4630      	mov	r0, r6
 8008e5a:	f000 fb73 	bl	8009544 <_malloc_r>
 8008e5e:	b948      	cbnz	r0, 8008e74 <__smakebuf_r+0x44>
 8008e60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e64:	059a      	lsls	r2, r3, #22
 8008e66:	d4ef      	bmi.n	8008e48 <__smakebuf_r+0x18>
 8008e68:	f023 0303 	bic.w	r3, r3, #3
 8008e6c:	f043 0302 	orr.w	r3, r3, #2
 8008e70:	81a3      	strh	r3, [r4, #12]
 8008e72:	e7e3      	b.n	8008e3c <__smakebuf_r+0xc>
 8008e74:	4b0d      	ldr	r3, [pc, #52]	; (8008eac <__smakebuf_r+0x7c>)
 8008e76:	62b3      	str	r3, [r6, #40]	; 0x28
 8008e78:	89a3      	ldrh	r3, [r4, #12]
 8008e7a:	6020      	str	r0, [r4, #0]
 8008e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e80:	81a3      	strh	r3, [r4, #12]
 8008e82:	9b00      	ldr	r3, [sp, #0]
 8008e84:	6163      	str	r3, [r4, #20]
 8008e86:	9b01      	ldr	r3, [sp, #4]
 8008e88:	6120      	str	r0, [r4, #16]
 8008e8a:	b15b      	cbz	r3, 8008ea4 <__smakebuf_r+0x74>
 8008e8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e90:	4630      	mov	r0, r6
 8008e92:	f000 fd79 	bl	8009988 <_isatty_r>
 8008e96:	b128      	cbz	r0, 8008ea4 <__smakebuf_r+0x74>
 8008e98:	89a3      	ldrh	r3, [r4, #12]
 8008e9a:	f023 0303 	bic.w	r3, r3, #3
 8008e9e:	f043 0301 	orr.w	r3, r3, #1
 8008ea2:	81a3      	strh	r3, [r4, #12]
 8008ea4:	89a3      	ldrh	r3, [r4, #12]
 8008ea6:	431d      	orrs	r5, r3
 8008ea8:	81a5      	strh	r5, [r4, #12]
 8008eaa:	e7cd      	b.n	8008e48 <__smakebuf_r+0x18>
 8008eac:	08008c81 	.word	0x08008c81

08008eb0 <malloc>:
 8008eb0:	4b02      	ldr	r3, [pc, #8]	; (8008ebc <malloc+0xc>)
 8008eb2:	4601      	mov	r1, r0
 8008eb4:	6818      	ldr	r0, [r3, #0]
 8008eb6:	f000 bb45 	b.w	8009544 <_malloc_r>
 8008eba:	bf00      	nop
 8008ebc:	200000d0 	.word	0x200000d0

08008ec0 <memcpy>:
 8008ec0:	b510      	push	{r4, lr}
 8008ec2:	1e43      	subs	r3, r0, #1
 8008ec4:	440a      	add	r2, r1
 8008ec6:	4291      	cmp	r1, r2
 8008ec8:	d100      	bne.n	8008ecc <memcpy+0xc>
 8008eca:	bd10      	pop	{r4, pc}
 8008ecc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ed0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ed4:	e7f7      	b.n	8008ec6 <memcpy+0x6>

08008ed6 <_Balloc>:
 8008ed6:	b570      	push	{r4, r5, r6, lr}
 8008ed8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008eda:	4604      	mov	r4, r0
 8008edc:	460e      	mov	r6, r1
 8008ede:	b93d      	cbnz	r5, 8008ef0 <_Balloc+0x1a>
 8008ee0:	2010      	movs	r0, #16
 8008ee2:	f7ff ffe5 	bl	8008eb0 <malloc>
 8008ee6:	6260      	str	r0, [r4, #36]	; 0x24
 8008ee8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008eec:	6005      	str	r5, [r0, #0]
 8008eee:	60c5      	str	r5, [r0, #12]
 8008ef0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008ef2:	68eb      	ldr	r3, [r5, #12]
 8008ef4:	b183      	cbz	r3, 8008f18 <_Balloc+0x42>
 8008ef6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ef8:	68db      	ldr	r3, [r3, #12]
 8008efa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008efe:	b9b8      	cbnz	r0, 8008f30 <_Balloc+0x5a>
 8008f00:	2101      	movs	r1, #1
 8008f02:	fa01 f506 	lsl.w	r5, r1, r6
 8008f06:	1d6a      	adds	r2, r5, #5
 8008f08:	0092      	lsls	r2, r2, #2
 8008f0a:	4620      	mov	r0, r4
 8008f0c:	f000 fabe 	bl	800948c <_calloc_r>
 8008f10:	b160      	cbz	r0, 8008f2c <_Balloc+0x56>
 8008f12:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008f16:	e00e      	b.n	8008f36 <_Balloc+0x60>
 8008f18:	2221      	movs	r2, #33	; 0x21
 8008f1a:	2104      	movs	r1, #4
 8008f1c:	4620      	mov	r0, r4
 8008f1e:	f000 fab5 	bl	800948c <_calloc_r>
 8008f22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008f24:	60e8      	str	r0, [r5, #12]
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d1e4      	bne.n	8008ef6 <_Balloc+0x20>
 8008f2c:	2000      	movs	r0, #0
 8008f2e:	bd70      	pop	{r4, r5, r6, pc}
 8008f30:	6802      	ldr	r2, [r0, #0]
 8008f32:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008f36:	2300      	movs	r3, #0
 8008f38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008f3c:	e7f7      	b.n	8008f2e <_Balloc+0x58>

08008f3e <_Bfree>:
 8008f3e:	b570      	push	{r4, r5, r6, lr}
 8008f40:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8008f42:	4606      	mov	r6, r0
 8008f44:	460d      	mov	r5, r1
 8008f46:	b93c      	cbnz	r4, 8008f58 <_Bfree+0x1a>
 8008f48:	2010      	movs	r0, #16
 8008f4a:	f7ff ffb1 	bl	8008eb0 <malloc>
 8008f4e:	6270      	str	r0, [r6, #36]	; 0x24
 8008f50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008f54:	6004      	str	r4, [r0, #0]
 8008f56:	60c4      	str	r4, [r0, #12]
 8008f58:	b13d      	cbz	r5, 8008f6a <_Bfree+0x2c>
 8008f5a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008f5c:	686a      	ldr	r2, [r5, #4]
 8008f5e:	68db      	ldr	r3, [r3, #12]
 8008f60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f64:	6029      	str	r1, [r5, #0]
 8008f66:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008f6a:	bd70      	pop	{r4, r5, r6, pc}

08008f6c <__multadd>:
 8008f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f70:	690d      	ldr	r5, [r1, #16]
 8008f72:	461f      	mov	r7, r3
 8008f74:	4606      	mov	r6, r0
 8008f76:	460c      	mov	r4, r1
 8008f78:	f101 0c14 	add.w	ip, r1, #20
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	f8dc 0000 	ldr.w	r0, [ip]
 8008f82:	b281      	uxth	r1, r0
 8008f84:	fb02 7101 	mla	r1, r2, r1, r7
 8008f88:	0c0f      	lsrs	r7, r1, #16
 8008f8a:	0c00      	lsrs	r0, r0, #16
 8008f8c:	fb02 7000 	mla	r0, r2, r0, r7
 8008f90:	b289      	uxth	r1, r1
 8008f92:	3301      	adds	r3, #1
 8008f94:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008f98:	429d      	cmp	r5, r3
 8008f9a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8008f9e:	f84c 1b04 	str.w	r1, [ip], #4
 8008fa2:	dcec      	bgt.n	8008f7e <__multadd+0x12>
 8008fa4:	b1d7      	cbz	r7, 8008fdc <__multadd+0x70>
 8008fa6:	68a3      	ldr	r3, [r4, #8]
 8008fa8:	42ab      	cmp	r3, r5
 8008faa:	dc12      	bgt.n	8008fd2 <__multadd+0x66>
 8008fac:	6861      	ldr	r1, [r4, #4]
 8008fae:	4630      	mov	r0, r6
 8008fb0:	3101      	adds	r1, #1
 8008fb2:	f7ff ff90 	bl	8008ed6 <_Balloc>
 8008fb6:	6922      	ldr	r2, [r4, #16]
 8008fb8:	3202      	adds	r2, #2
 8008fba:	f104 010c 	add.w	r1, r4, #12
 8008fbe:	4680      	mov	r8, r0
 8008fc0:	0092      	lsls	r2, r2, #2
 8008fc2:	300c      	adds	r0, #12
 8008fc4:	f7ff ff7c 	bl	8008ec0 <memcpy>
 8008fc8:	4621      	mov	r1, r4
 8008fca:	4630      	mov	r0, r6
 8008fcc:	f7ff ffb7 	bl	8008f3e <_Bfree>
 8008fd0:	4644      	mov	r4, r8
 8008fd2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008fd6:	3501      	adds	r5, #1
 8008fd8:	615f      	str	r7, [r3, #20]
 8008fda:	6125      	str	r5, [r4, #16]
 8008fdc:	4620      	mov	r0, r4
 8008fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008fe2 <__hi0bits>:
 8008fe2:	0c02      	lsrs	r2, r0, #16
 8008fe4:	0412      	lsls	r2, r2, #16
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	b9b2      	cbnz	r2, 8009018 <__hi0bits+0x36>
 8008fea:	0403      	lsls	r3, r0, #16
 8008fec:	2010      	movs	r0, #16
 8008fee:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008ff2:	bf04      	itt	eq
 8008ff4:	021b      	lsleq	r3, r3, #8
 8008ff6:	3008      	addeq	r0, #8
 8008ff8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008ffc:	bf04      	itt	eq
 8008ffe:	011b      	lsleq	r3, r3, #4
 8009000:	3004      	addeq	r0, #4
 8009002:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009006:	bf04      	itt	eq
 8009008:	009b      	lsleq	r3, r3, #2
 800900a:	3002      	addeq	r0, #2
 800900c:	2b00      	cmp	r3, #0
 800900e:	db06      	blt.n	800901e <__hi0bits+0x3c>
 8009010:	005b      	lsls	r3, r3, #1
 8009012:	d503      	bpl.n	800901c <__hi0bits+0x3a>
 8009014:	3001      	adds	r0, #1
 8009016:	4770      	bx	lr
 8009018:	2000      	movs	r0, #0
 800901a:	e7e8      	b.n	8008fee <__hi0bits+0xc>
 800901c:	2020      	movs	r0, #32
 800901e:	4770      	bx	lr

08009020 <__lo0bits>:
 8009020:	6803      	ldr	r3, [r0, #0]
 8009022:	f013 0207 	ands.w	r2, r3, #7
 8009026:	4601      	mov	r1, r0
 8009028:	d00b      	beq.n	8009042 <__lo0bits+0x22>
 800902a:	07da      	lsls	r2, r3, #31
 800902c:	d423      	bmi.n	8009076 <__lo0bits+0x56>
 800902e:	0798      	lsls	r0, r3, #30
 8009030:	bf49      	itett	mi
 8009032:	085b      	lsrmi	r3, r3, #1
 8009034:	089b      	lsrpl	r3, r3, #2
 8009036:	2001      	movmi	r0, #1
 8009038:	600b      	strmi	r3, [r1, #0]
 800903a:	bf5c      	itt	pl
 800903c:	600b      	strpl	r3, [r1, #0]
 800903e:	2002      	movpl	r0, #2
 8009040:	4770      	bx	lr
 8009042:	b298      	uxth	r0, r3
 8009044:	b9a8      	cbnz	r0, 8009072 <__lo0bits+0x52>
 8009046:	0c1b      	lsrs	r3, r3, #16
 8009048:	2010      	movs	r0, #16
 800904a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800904e:	bf04      	itt	eq
 8009050:	0a1b      	lsreq	r3, r3, #8
 8009052:	3008      	addeq	r0, #8
 8009054:	071a      	lsls	r2, r3, #28
 8009056:	bf04      	itt	eq
 8009058:	091b      	lsreq	r3, r3, #4
 800905a:	3004      	addeq	r0, #4
 800905c:	079a      	lsls	r2, r3, #30
 800905e:	bf04      	itt	eq
 8009060:	089b      	lsreq	r3, r3, #2
 8009062:	3002      	addeq	r0, #2
 8009064:	07da      	lsls	r2, r3, #31
 8009066:	d402      	bmi.n	800906e <__lo0bits+0x4e>
 8009068:	085b      	lsrs	r3, r3, #1
 800906a:	d006      	beq.n	800907a <__lo0bits+0x5a>
 800906c:	3001      	adds	r0, #1
 800906e:	600b      	str	r3, [r1, #0]
 8009070:	4770      	bx	lr
 8009072:	4610      	mov	r0, r2
 8009074:	e7e9      	b.n	800904a <__lo0bits+0x2a>
 8009076:	2000      	movs	r0, #0
 8009078:	4770      	bx	lr
 800907a:	2020      	movs	r0, #32
 800907c:	4770      	bx	lr

0800907e <__i2b>:
 800907e:	b510      	push	{r4, lr}
 8009080:	460c      	mov	r4, r1
 8009082:	2101      	movs	r1, #1
 8009084:	f7ff ff27 	bl	8008ed6 <_Balloc>
 8009088:	2201      	movs	r2, #1
 800908a:	6144      	str	r4, [r0, #20]
 800908c:	6102      	str	r2, [r0, #16]
 800908e:	bd10      	pop	{r4, pc}

08009090 <__multiply>:
 8009090:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009094:	4614      	mov	r4, r2
 8009096:	690a      	ldr	r2, [r1, #16]
 8009098:	6923      	ldr	r3, [r4, #16]
 800909a:	429a      	cmp	r2, r3
 800909c:	bfb8      	it	lt
 800909e:	460b      	movlt	r3, r1
 80090a0:	4688      	mov	r8, r1
 80090a2:	bfbc      	itt	lt
 80090a4:	46a0      	movlt	r8, r4
 80090a6:	461c      	movlt	r4, r3
 80090a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80090ac:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80090b0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80090b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80090b8:	eb07 0609 	add.w	r6, r7, r9
 80090bc:	42b3      	cmp	r3, r6
 80090be:	bfb8      	it	lt
 80090c0:	3101      	addlt	r1, #1
 80090c2:	f7ff ff08 	bl	8008ed6 <_Balloc>
 80090c6:	f100 0514 	add.w	r5, r0, #20
 80090ca:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80090ce:	462b      	mov	r3, r5
 80090d0:	2200      	movs	r2, #0
 80090d2:	4573      	cmp	r3, lr
 80090d4:	d316      	bcc.n	8009104 <__multiply+0x74>
 80090d6:	f104 0214 	add.w	r2, r4, #20
 80090da:	f108 0114 	add.w	r1, r8, #20
 80090de:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80090e2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80090e6:	9300      	str	r3, [sp, #0]
 80090e8:	9b00      	ldr	r3, [sp, #0]
 80090ea:	9201      	str	r2, [sp, #4]
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d80c      	bhi.n	800910a <__multiply+0x7a>
 80090f0:	2e00      	cmp	r6, #0
 80090f2:	dd03      	ble.n	80090fc <__multiply+0x6c>
 80090f4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d05d      	beq.n	80091b8 <__multiply+0x128>
 80090fc:	6106      	str	r6, [r0, #16]
 80090fe:	b003      	add	sp, #12
 8009100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009104:	f843 2b04 	str.w	r2, [r3], #4
 8009108:	e7e3      	b.n	80090d2 <__multiply+0x42>
 800910a:	f8b2 b000 	ldrh.w	fp, [r2]
 800910e:	f1bb 0f00 	cmp.w	fp, #0
 8009112:	d023      	beq.n	800915c <__multiply+0xcc>
 8009114:	4689      	mov	r9, r1
 8009116:	46ac      	mov	ip, r5
 8009118:	f04f 0800 	mov.w	r8, #0
 800911c:	f859 4b04 	ldr.w	r4, [r9], #4
 8009120:	f8dc a000 	ldr.w	sl, [ip]
 8009124:	b2a3      	uxth	r3, r4
 8009126:	fa1f fa8a 	uxth.w	sl, sl
 800912a:	fb0b a303 	mla	r3, fp, r3, sl
 800912e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009132:	f8dc 4000 	ldr.w	r4, [ip]
 8009136:	4443      	add	r3, r8
 8009138:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800913c:	fb0b 840a 	mla	r4, fp, sl, r8
 8009140:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009144:	46e2      	mov	sl, ip
 8009146:	b29b      	uxth	r3, r3
 8009148:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800914c:	454f      	cmp	r7, r9
 800914e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009152:	f84a 3b04 	str.w	r3, [sl], #4
 8009156:	d82b      	bhi.n	80091b0 <__multiply+0x120>
 8009158:	f8cc 8004 	str.w	r8, [ip, #4]
 800915c:	9b01      	ldr	r3, [sp, #4]
 800915e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009162:	3204      	adds	r2, #4
 8009164:	f1ba 0f00 	cmp.w	sl, #0
 8009168:	d020      	beq.n	80091ac <__multiply+0x11c>
 800916a:	682b      	ldr	r3, [r5, #0]
 800916c:	4689      	mov	r9, r1
 800916e:	46a8      	mov	r8, r5
 8009170:	f04f 0b00 	mov.w	fp, #0
 8009174:	f8b9 c000 	ldrh.w	ip, [r9]
 8009178:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800917c:	fb0a 440c 	mla	r4, sl, ip, r4
 8009180:	445c      	add	r4, fp
 8009182:	46c4      	mov	ip, r8
 8009184:	b29b      	uxth	r3, r3
 8009186:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800918a:	f84c 3b04 	str.w	r3, [ip], #4
 800918e:	f859 3b04 	ldr.w	r3, [r9], #4
 8009192:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009196:	0c1b      	lsrs	r3, r3, #16
 8009198:	fb0a b303 	mla	r3, sl, r3, fp
 800919c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80091a0:	454f      	cmp	r7, r9
 80091a2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80091a6:	d805      	bhi.n	80091b4 <__multiply+0x124>
 80091a8:	f8c8 3004 	str.w	r3, [r8, #4]
 80091ac:	3504      	adds	r5, #4
 80091ae:	e79b      	b.n	80090e8 <__multiply+0x58>
 80091b0:	46d4      	mov	ip, sl
 80091b2:	e7b3      	b.n	800911c <__multiply+0x8c>
 80091b4:	46e0      	mov	r8, ip
 80091b6:	e7dd      	b.n	8009174 <__multiply+0xe4>
 80091b8:	3e01      	subs	r6, #1
 80091ba:	e799      	b.n	80090f0 <__multiply+0x60>

080091bc <__pow5mult>:
 80091bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091c0:	4615      	mov	r5, r2
 80091c2:	f012 0203 	ands.w	r2, r2, #3
 80091c6:	4606      	mov	r6, r0
 80091c8:	460f      	mov	r7, r1
 80091ca:	d007      	beq.n	80091dc <__pow5mult+0x20>
 80091cc:	3a01      	subs	r2, #1
 80091ce:	4c21      	ldr	r4, [pc, #132]	; (8009254 <__pow5mult+0x98>)
 80091d0:	2300      	movs	r3, #0
 80091d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80091d6:	f7ff fec9 	bl	8008f6c <__multadd>
 80091da:	4607      	mov	r7, r0
 80091dc:	10ad      	asrs	r5, r5, #2
 80091de:	d035      	beq.n	800924c <__pow5mult+0x90>
 80091e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80091e2:	b93c      	cbnz	r4, 80091f4 <__pow5mult+0x38>
 80091e4:	2010      	movs	r0, #16
 80091e6:	f7ff fe63 	bl	8008eb0 <malloc>
 80091ea:	6270      	str	r0, [r6, #36]	; 0x24
 80091ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80091f0:	6004      	str	r4, [r0, #0]
 80091f2:	60c4      	str	r4, [r0, #12]
 80091f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80091f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80091fc:	b94c      	cbnz	r4, 8009212 <__pow5mult+0x56>
 80091fe:	f240 2171 	movw	r1, #625	; 0x271
 8009202:	4630      	mov	r0, r6
 8009204:	f7ff ff3b 	bl	800907e <__i2b>
 8009208:	2300      	movs	r3, #0
 800920a:	f8c8 0008 	str.w	r0, [r8, #8]
 800920e:	4604      	mov	r4, r0
 8009210:	6003      	str	r3, [r0, #0]
 8009212:	f04f 0800 	mov.w	r8, #0
 8009216:	07eb      	lsls	r3, r5, #31
 8009218:	d50a      	bpl.n	8009230 <__pow5mult+0x74>
 800921a:	4639      	mov	r1, r7
 800921c:	4622      	mov	r2, r4
 800921e:	4630      	mov	r0, r6
 8009220:	f7ff ff36 	bl	8009090 <__multiply>
 8009224:	4639      	mov	r1, r7
 8009226:	4681      	mov	r9, r0
 8009228:	4630      	mov	r0, r6
 800922a:	f7ff fe88 	bl	8008f3e <_Bfree>
 800922e:	464f      	mov	r7, r9
 8009230:	106d      	asrs	r5, r5, #1
 8009232:	d00b      	beq.n	800924c <__pow5mult+0x90>
 8009234:	6820      	ldr	r0, [r4, #0]
 8009236:	b938      	cbnz	r0, 8009248 <__pow5mult+0x8c>
 8009238:	4622      	mov	r2, r4
 800923a:	4621      	mov	r1, r4
 800923c:	4630      	mov	r0, r6
 800923e:	f7ff ff27 	bl	8009090 <__multiply>
 8009242:	6020      	str	r0, [r4, #0]
 8009244:	f8c0 8000 	str.w	r8, [r0]
 8009248:	4604      	mov	r4, r0
 800924a:	e7e4      	b.n	8009216 <__pow5mult+0x5a>
 800924c:	4638      	mov	r0, r7
 800924e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009252:	bf00      	nop
 8009254:	08009e18 	.word	0x08009e18

08009258 <__lshift>:
 8009258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800925c:	460c      	mov	r4, r1
 800925e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009262:	6923      	ldr	r3, [r4, #16]
 8009264:	6849      	ldr	r1, [r1, #4]
 8009266:	eb0a 0903 	add.w	r9, sl, r3
 800926a:	68a3      	ldr	r3, [r4, #8]
 800926c:	4607      	mov	r7, r0
 800926e:	4616      	mov	r6, r2
 8009270:	f109 0501 	add.w	r5, r9, #1
 8009274:	42ab      	cmp	r3, r5
 8009276:	db32      	blt.n	80092de <__lshift+0x86>
 8009278:	4638      	mov	r0, r7
 800927a:	f7ff fe2c 	bl	8008ed6 <_Balloc>
 800927e:	2300      	movs	r3, #0
 8009280:	4680      	mov	r8, r0
 8009282:	f100 0114 	add.w	r1, r0, #20
 8009286:	461a      	mov	r2, r3
 8009288:	4553      	cmp	r3, sl
 800928a:	db2b      	blt.n	80092e4 <__lshift+0x8c>
 800928c:	6920      	ldr	r0, [r4, #16]
 800928e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009292:	f104 0314 	add.w	r3, r4, #20
 8009296:	f016 021f 	ands.w	r2, r6, #31
 800929a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800929e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80092a2:	d025      	beq.n	80092f0 <__lshift+0x98>
 80092a4:	f1c2 0e20 	rsb	lr, r2, #32
 80092a8:	2000      	movs	r0, #0
 80092aa:	681e      	ldr	r6, [r3, #0]
 80092ac:	468a      	mov	sl, r1
 80092ae:	4096      	lsls	r6, r2
 80092b0:	4330      	orrs	r0, r6
 80092b2:	f84a 0b04 	str.w	r0, [sl], #4
 80092b6:	f853 0b04 	ldr.w	r0, [r3], #4
 80092ba:	459c      	cmp	ip, r3
 80092bc:	fa20 f00e 	lsr.w	r0, r0, lr
 80092c0:	d814      	bhi.n	80092ec <__lshift+0x94>
 80092c2:	6048      	str	r0, [r1, #4]
 80092c4:	b108      	cbz	r0, 80092ca <__lshift+0x72>
 80092c6:	f109 0502 	add.w	r5, r9, #2
 80092ca:	3d01      	subs	r5, #1
 80092cc:	4638      	mov	r0, r7
 80092ce:	f8c8 5010 	str.w	r5, [r8, #16]
 80092d2:	4621      	mov	r1, r4
 80092d4:	f7ff fe33 	bl	8008f3e <_Bfree>
 80092d8:	4640      	mov	r0, r8
 80092da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092de:	3101      	adds	r1, #1
 80092e0:	005b      	lsls	r3, r3, #1
 80092e2:	e7c7      	b.n	8009274 <__lshift+0x1c>
 80092e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80092e8:	3301      	adds	r3, #1
 80092ea:	e7cd      	b.n	8009288 <__lshift+0x30>
 80092ec:	4651      	mov	r1, sl
 80092ee:	e7dc      	b.n	80092aa <__lshift+0x52>
 80092f0:	3904      	subs	r1, #4
 80092f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80092f6:	f841 2f04 	str.w	r2, [r1, #4]!
 80092fa:	459c      	cmp	ip, r3
 80092fc:	d8f9      	bhi.n	80092f2 <__lshift+0x9a>
 80092fe:	e7e4      	b.n	80092ca <__lshift+0x72>

08009300 <__mcmp>:
 8009300:	6903      	ldr	r3, [r0, #16]
 8009302:	690a      	ldr	r2, [r1, #16]
 8009304:	1a9b      	subs	r3, r3, r2
 8009306:	b530      	push	{r4, r5, lr}
 8009308:	d10c      	bne.n	8009324 <__mcmp+0x24>
 800930a:	0092      	lsls	r2, r2, #2
 800930c:	3014      	adds	r0, #20
 800930e:	3114      	adds	r1, #20
 8009310:	1884      	adds	r4, r0, r2
 8009312:	4411      	add	r1, r2
 8009314:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009318:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800931c:	4295      	cmp	r5, r2
 800931e:	d003      	beq.n	8009328 <__mcmp+0x28>
 8009320:	d305      	bcc.n	800932e <__mcmp+0x2e>
 8009322:	2301      	movs	r3, #1
 8009324:	4618      	mov	r0, r3
 8009326:	bd30      	pop	{r4, r5, pc}
 8009328:	42a0      	cmp	r0, r4
 800932a:	d3f3      	bcc.n	8009314 <__mcmp+0x14>
 800932c:	e7fa      	b.n	8009324 <__mcmp+0x24>
 800932e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009332:	e7f7      	b.n	8009324 <__mcmp+0x24>

08009334 <__mdiff>:
 8009334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009338:	460d      	mov	r5, r1
 800933a:	4607      	mov	r7, r0
 800933c:	4611      	mov	r1, r2
 800933e:	4628      	mov	r0, r5
 8009340:	4614      	mov	r4, r2
 8009342:	f7ff ffdd 	bl	8009300 <__mcmp>
 8009346:	1e06      	subs	r6, r0, #0
 8009348:	d108      	bne.n	800935c <__mdiff+0x28>
 800934a:	4631      	mov	r1, r6
 800934c:	4638      	mov	r0, r7
 800934e:	f7ff fdc2 	bl	8008ed6 <_Balloc>
 8009352:	2301      	movs	r3, #1
 8009354:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800935c:	bfa4      	itt	ge
 800935e:	4623      	movge	r3, r4
 8009360:	462c      	movge	r4, r5
 8009362:	4638      	mov	r0, r7
 8009364:	6861      	ldr	r1, [r4, #4]
 8009366:	bfa6      	itte	ge
 8009368:	461d      	movge	r5, r3
 800936a:	2600      	movge	r6, #0
 800936c:	2601      	movlt	r6, #1
 800936e:	f7ff fdb2 	bl	8008ed6 <_Balloc>
 8009372:	692b      	ldr	r3, [r5, #16]
 8009374:	60c6      	str	r6, [r0, #12]
 8009376:	6926      	ldr	r6, [r4, #16]
 8009378:	f105 0914 	add.w	r9, r5, #20
 800937c:	f104 0214 	add.w	r2, r4, #20
 8009380:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009384:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009388:	f100 0514 	add.w	r5, r0, #20
 800938c:	f04f 0e00 	mov.w	lr, #0
 8009390:	f852 ab04 	ldr.w	sl, [r2], #4
 8009394:	f859 4b04 	ldr.w	r4, [r9], #4
 8009398:	fa1e f18a 	uxtah	r1, lr, sl
 800939c:	b2a3      	uxth	r3, r4
 800939e:	1ac9      	subs	r1, r1, r3
 80093a0:	0c23      	lsrs	r3, r4, #16
 80093a2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80093a6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80093aa:	b289      	uxth	r1, r1
 80093ac:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80093b0:	45c8      	cmp	r8, r9
 80093b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80093b6:	4694      	mov	ip, r2
 80093b8:	f845 3b04 	str.w	r3, [r5], #4
 80093bc:	d8e8      	bhi.n	8009390 <__mdiff+0x5c>
 80093be:	45bc      	cmp	ip, r7
 80093c0:	d304      	bcc.n	80093cc <__mdiff+0x98>
 80093c2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80093c6:	b183      	cbz	r3, 80093ea <__mdiff+0xb6>
 80093c8:	6106      	str	r6, [r0, #16]
 80093ca:	e7c5      	b.n	8009358 <__mdiff+0x24>
 80093cc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80093d0:	fa1e f381 	uxtah	r3, lr, r1
 80093d4:	141a      	asrs	r2, r3, #16
 80093d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80093da:	b29b      	uxth	r3, r3
 80093dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093e0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80093e4:	f845 3b04 	str.w	r3, [r5], #4
 80093e8:	e7e9      	b.n	80093be <__mdiff+0x8a>
 80093ea:	3e01      	subs	r6, #1
 80093ec:	e7e9      	b.n	80093c2 <__mdiff+0x8e>

080093ee <__d2b>:
 80093ee:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80093f2:	460e      	mov	r6, r1
 80093f4:	2101      	movs	r1, #1
 80093f6:	ec59 8b10 	vmov	r8, r9, d0
 80093fa:	4615      	mov	r5, r2
 80093fc:	f7ff fd6b 	bl	8008ed6 <_Balloc>
 8009400:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009404:	4607      	mov	r7, r0
 8009406:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800940a:	bb34      	cbnz	r4, 800945a <__d2b+0x6c>
 800940c:	9301      	str	r3, [sp, #4]
 800940e:	f1b8 0300 	subs.w	r3, r8, #0
 8009412:	d027      	beq.n	8009464 <__d2b+0x76>
 8009414:	a802      	add	r0, sp, #8
 8009416:	f840 3d08 	str.w	r3, [r0, #-8]!
 800941a:	f7ff fe01 	bl	8009020 <__lo0bits>
 800941e:	9900      	ldr	r1, [sp, #0]
 8009420:	b1f0      	cbz	r0, 8009460 <__d2b+0x72>
 8009422:	9a01      	ldr	r2, [sp, #4]
 8009424:	f1c0 0320 	rsb	r3, r0, #32
 8009428:	fa02 f303 	lsl.w	r3, r2, r3
 800942c:	430b      	orrs	r3, r1
 800942e:	40c2      	lsrs	r2, r0
 8009430:	617b      	str	r3, [r7, #20]
 8009432:	9201      	str	r2, [sp, #4]
 8009434:	9b01      	ldr	r3, [sp, #4]
 8009436:	61bb      	str	r3, [r7, #24]
 8009438:	2b00      	cmp	r3, #0
 800943a:	bf14      	ite	ne
 800943c:	2102      	movne	r1, #2
 800943e:	2101      	moveq	r1, #1
 8009440:	6139      	str	r1, [r7, #16]
 8009442:	b1c4      	cbz	r4, 8009476 <__d2b+0x88>
 8009444:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009448:	4404      	add	r4, r0
 800944a:	6034      	str	r4, [r6, #0]
 800944c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009450:	6028      	str	r0, [r5, #0]
 8009452:	4638      	mov	r0, r7
 8009454:	b003      	add	sp, #12
 8009456:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800945a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800945e:	e7d5      	b.n	800940c <__d2b+0x1e>
 8009460:	6179      	str	r1, [r7, #20]
 8009462:	e7e7      	b.n	8009434 <__d2b+0x46>
 8009464:	a801      	add	r0, sp, #4
 8009466:	f7ff fddb 	bl	8009020 <__lo0bits>
 800946a:	9b01      	ldr	r3, [sp, #4]
 800946c:	617b      	str	r3, [r7, #20]
 800946e:	2101      	movs	r1, #1
 8009470:	6139      	str	r1, [r7, #16]
 8009472:	3020      	adds	r0, #32
 8009474:	e7e5      	b.n	8009442 <__d2b+0x54>
 8009476:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800947a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800947e:	6030      	str	r0, [r6, #0]
 8009480:	6918      	ldr	r0, [r3, #16]
 8009482:	f7ff fdae 	bl	8008fe2 <__hi0bits>
 8009486:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800948a:	e7e1      	b.n	8009450 <__d2b+0x62>

0800948c <_calloc_r>:
 800948c:	b538      	push	{r3, r4, r5, lr}
 800948e:	fb02 f401 	mul.w	r4, r2, r1
 8009492:	4621      	mov	r1, r4
 8009494:	f000 f856 	bl	8009544 <_malloc_r>
 8009498:	4605      	mov	r5, r0
 800949a:	b118      	cbz	r0, 80094a4 <_calloc_r+0x18>
 800949c:	4622      	mov	r2, r4
 800949e:	2100      	movs	r1, #0
 80094a0:	f7fd ff36 	bl	8007310 <memset>
 80094a4:	4628      	mov	r0, r5
 80094a6:	bd38      	pop	{r3, r4, r5, pc}

080094a8 <_free_r>:
 80094a8:	b538      	push	{r3, r4, r5, lr}
 80094aa:	4605      	mov	r5, r0
 80094ac:	2900      	cmp	r1, #0
 80094ae:	d045      	beq.n	800953c <_free_r+0x94>
 80094b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094b4:	1f0c      	subs	r4, r1, #4
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	bfb8      	it	lt
 80094ba:	18e4      	addlt	r4, r4, r3
 80094bc:	f000 fa98 	bl	80099f0 <__malloc_lock>
 80094c0:	4a1f      	ldr	r2, [pc, #124]	; (8009540 <_free_r+0x98>)
 80094c2:	6813      	ldr	r3, [r2, #0]
 80094c4:	4610      	mov	r0, r2
 80094c6:	b933      	cbnz	r3, 80094d6 <_free_r+0x2e>
 80094c8:	6063      	str	r3, [r4, #4]
 80094ca:	6014      	str	r4, [r2, #0]
 80094cc:	4628      	mov	r0, r5
 80094ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80094d2:	f000 ba8e 	b.w	80099f2 <__malloc_unlock>
 80094d6:	42a3      	cmp	r3, r4
 80094d8:	d90c      	bls.n	80094f4 <_free_r+0x4c>
 80094da:	6821      	ldr	r1, [r4, #0]
 80094dc:	1862      	adds	r2, r4, r1
 80094de:	4293      	cmp	r3, r2
 80094e0:	bf04      	itt	eq
 80094e2:	681a      	ldreq	r2, [r3, #0]
 80094e4:	685b      	ldreq	r3, [r3, #4]
 80094e6:	6063      	str	r3, [r4, #4]
 80094e8:	bf04      	itt	eq
 80094ea:	1852      	addeq	r2, r2, r1
 80094ec:	6022      	streq	r2, [r4, #0]
 80094ee:	6004      	str	r4, [r0, #0]
 80094f0:	e7ec      	b.n	80094cc <_free_r+0x24>
 80094f2:	4613      	mov	r3, r2
 80094f4:	685a      	ldr	r2, [r3, #4]
 80094f6:	b10a      	cbz	r2, 80094fc <_free_r+0x54>
 80094f8:	42a2      	cmp	r2, r4
 80094fa:	d9fa      	bls.n	80094f2 <_free_r+0x4a>
 80094fc:	6819      	ldr	r1, [r3, #0]
 80094fe:	1858      	adds	r0, r3, r1
 8009500:	42a0      	cmp	r0, r4
 8009502:	d10b      	bne.n	800951c <_free_r+0x74>
 8009504:	6820      	ldr	r0, [r4, #0]
 8009506:	4401      	add	r1, r0
 8009508:	1858      	adds	r0, r3, r1
 800950a:	4282      	cmp	r2, r0
 800950c:	6019      	str	r1, [r3, #0]
 800950e:	d1dd      	bne.n	80094cc <_free_r+0x24>
 8009510:	6810      	ldr	r0, [r2, #0]
 8009512:	6852      	ldr	r2, [r2, #4]
 8009514:	605a      	str	r2, [r3, #4]
 8009516:	4401      	add	r1, r0
 8009518:	6019      	str	r1, [r3, #0]
 800951a:	e7d7      	b.n	80094cc <_free_r+0x24>
 800951c:	d902      	bls.n	8009524 <_free_r+0x7c>
 800951e:	230c      	movs	r3, #12
 8009520:	602b      	str	r3, [r5, #0]
 8009522:	e7d3      	b.n	80094cc <_free_r+0x24>
 8009524:	6820      	ldr	r0, [r4, #0]
 8009526:	1821      	adds	r1, r4, r0
 8009528:	428a      	cmp	r2, r1
 800952a:	bf04      	itt	eq
 800952c:	6811      	ldreq	r1, [r2, #0]
 800952e:	6852      	ldreq	r2, [r2, #4]
 8009530:	6062      	str	r2, [r4, #4]
 8009532:	bf04      	itt	eq
 8009534:	1809      	addeq	r1, r1, r0
 8009536:	6021      	streq	r1, [r4, #0]
 8009538:	605c      	str	r4, [r3, #4]
 800953a:	e7c7      	b.n	80094cc <_free_r+0x24>
 800953c:	bd38      	pop	{r3, r4, r5, pc}
 800953e:	bf00      	nop
 8009540:	200002c0 	.word	0x200002c0

08009544 <_malloc_r>:
 8009544:	b570      	push	{r4, r5, r6, lr}
 8009546:	1ccd      	adds	r5, r1, #3
 8009548:	f025 0503 	bic.w	r5, r5, #3
 800954c:	3508      	adds	r5, #8
 800954e:	2d0c      	cmp	r5, #12
 8009550:	bf38      	it	cc
 8009552:	250c      	movcc	r5, #12
 8009554:	2d00      	cmp	r5, #0
 8009556:	4606      	mov	r6, r0
 8009558:	db01      	blt.n	800955e <_malloc_r+0x1a>
 800955a:	42a9      	cmp	r1, r5
 800955c:	d903      	bls.n	8009566 <_malloc_r+0x22>
 800955e:	230c      	movs	r3, #12
 8009560:	6033      	str	r3, [r6, #0]
 8009562:	2000      	movs	r0, #0
 8009564:	bd70      	pop	{r4, r5, r6, pc}
 8009566:	f000 fa43 	bl	80099f0 <__malloc_lock>
 800956a:	4a21      	ldr	r2, [pc, #132]	; (80095f0 <_malloc_r+0xac>)
 800956c:	6814      	ldr	r4, [r2, #0]
 800956e:	4621      	mov	r1, r4
 8009570:	b991      	cbnz	r1, 8009598 <_malloc_r+0x54>
 8009572:	4c20      	ldr	r4, [pc, #128]	; (80095f4 <_malloc_r+0xb0>)
 8009574:	6823      	ldr	r3, [r4, #0]
 8009576:	b91b      	cbnz	r3, 8009580 <_malloc_r+0x3c>
 8009578:	4630      	mov	r0, r6
 800957a:	f000 f97d 	bl	8009878 <_sbrk_r>
 800957e:	6020      	str	r0, [r4, #0]
 8009580:	4629      	mov	r1, r5
 8009582:	4630      	mov	r0, r6
 8009584:	f000 f978 	bl	8009878 <_sbrk_r>
 8009588:	1c43      	adds	r3, r0, #1
 800958a:	d124      	bne.n	80095d6 <_malloc_r+0x92>
 800958c:	230c      	movs	r3, #12
 800958e:	6033      	str	r3, [r6, #0]
 8009590:	4630      	mov	r0, r6
 8009592:	f000 fa2e 	bl	80099f2 <__malloc_unlock>
 8009596:	e7e4      	b.n	8009562 <_malloc_r+0x1e>
 8009598:	680b      	ldr	r3, [r1, #0]
 800959a:	1b5b      	subs	r3, r3, r5
 800959c:	d418      	bmi.n	80095d0 <_malloc_r+0x8c>
 800959e:	2b0b      	cmp	r3, #11
 80095a0:	d90f      	bls.n	80095c2 <_malloc_r+0x7e>
 80095a2:	600b      	str	r3, [r1, #0]
 80095a4:	50cd      	str	r5, [r1, r3]
 80095a6:	18cc      	adds	r4, r1, r3
 80095a8:	4630      	mov	r0, r6
 80095aa:	f000 fa22 	bl	80099f2 <__malloc_unlock>
 80095ae:	f104 000b 	add.w	r0, r4, #11
 80095b2:	1d23      	adds	r3, r4, #4
 80095b4:	f020 0007 	bic.w	r0, r0, #7
 80095b8:	1ac3      	subs	r3, r0, r3
 80095ba:	d0d3      	beq.n	8009564 <_malloc_r+0x20>
 80095bc:	425a      	negs	r2, r3
 80095be:	50e2      	str	r2, [r4, r3]
 80095c0:	e7d0      	b.n	8009564 <_malloc_r+0x20>
 80095c2:	428c      	cmp	r4, r1
 80095c4:	684b      	ldr	r3, [r1, #4]
 80095c6:	bf16      	itet	ne
 80095c8:	6063      	strne	r3, [r4, #4]
 80095ca:	6013      	streq	r3, [r2, #0]
 80095cc:	460c      	movne	r4, r1
 80095ce:	e7eb      	b.n	80095a8 <_malloc_r+0x64>
 80095d0:	460c      	mov	r4, r1
 80095d2:	6849      	ldr	r1, [r1, #4]
 80095d4:	e7cc      	b.n	8009570 <_malloc_r+0x2c>
 80095d6:	1cc4      	adds	r4, r0, #3
 80095d8:	f024 0403 	bic.w	r4, r4, #3
 80095dc:	42a0      	cmp	r0, r4
 80095de:	d005      	beq.n	80095ec <_malloc_r+0xa8>
 80095e0:	1a21      	subs	r1, r4, r0
 80095e2:	4630      	mov	r0, r6
 80095e4:	f000 f948 	bl	8009878 <_sbrk_r>
 80095e8:	3001      	adds	r0, #1
 80095ea:	d0cf      	beq.n	800958c <_malloc_r+0x48>
 80095ec:	6025      	str	r5, [r4, #0]
 80095ee:	e7db      	b.n	80095a8 <_malloc_r+0x64>
 80095f0:	200002c0 	.word	0x200002c0
 80095f4:	200002c4 	.word	0x200002c4

080095f8 <__sfputc_r>:
 80095f8:	6893      	ldr	r3, [r2, #8]
 80095fa:	3b01      	subs	r3, #1
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	b410      	push	{r4}
 8009600:	6093      	str	r3, [r2, #8]
 8009602:	da08      	bge.n	8009616 <__sfputc_r+0x1e>
 8009604:	6994      	ldr	r4, [r2, #24]
 8009606:	42a3      	cmp	r3, r4
 8009608:	db01      	blt.n	800960e <__sfputc_r+0x16>
 800960a:	290a      	cmp	r1, #10
 800960c:	d103      	bne.n	8009616 <__sfputc_r+0x1e>
 800960e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009612:	f7fe bb5d 	b.w	8007cd0 <__swbuf_r>
 8009616:	6813      	ldr	r3, [r2, #0]
 8009618:	1c58      	adds	r0, r3, #1
 800961a:	6010      	str	r0, [r2, #0]
 800961c:	7019      	strb	r1, [r3, #0]
 800961e:	4608      	mov	r0, r1
 8009620:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009624:	4770      	bx	lr

08009626 <__sfputs_r>:
 8009626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009628:	4606      	mov	r6, r0
 800962a:	460f      	mov	r7, r1
 800962c:	4614      	mov	r4, r2
 800962e:	18d5      	adds	r5, r2, r3
 8009630:	42ac      	cmp	r4, r5
 8009632:	d101      	bne.n	8009638 <__sfputs_r+0x12>
 8009634:	2000      	movs	r0, #0
 8009636:	e007      	b.n	8009648 <__sfputs_r+0x22>
 8009638:	463a      	mov	r2, r7
 800963a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800963e:	4630      	mov	r0, r6
 8009640:	f7ff ffda 	bl	80095f8 <__sfputc_r>
 8009644:	1c43      	adds	r3, r0, #1
 8009646:	d1f3      	bne.n	8009630 <__sfputs_r+0xa>
 8009648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800964c <_vfiprintf_r>:
 800964c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009650:	460c      	mov	r4, r1
 8009652:	b09d      	sub	sp, #116	; 0x74
 8009654:	4617      	mov	r7, r2
 8009656:	461d      	mov	r5, r3
 8009658:	4606      	mov	r6, r0
 800965a:	b118      	cbz	r0, 8009664 <_vfiprintf_r+0x18>
 800965c:	6983      	ldr	r3, [r0, #24]
 800965e:	b90b      	cbnz	r3, 8009664 <_vfiprintf_r+0x18>
 8009660:	f7ff fb2a 	bl	8008cb8 <__sinit>
 8009664:	4b7c      	ldr	r3, [pc, #496]	; (8009858 <_vfiprintf_r+0x20c>)
 8009666:	429c      	cmp	r4, r3
 8009668:	d158      	bne.n	800971c <_vfiprintf_r+0xd0>
 800966a:	6874      	ldr	r4, [r6, #4]
 800966c:	89a3      	ldrh	r3, [r4, #12]
 800966e:	0718      	lsls	r0, r3, #28
 8009670:	d55e      	bpl.n	8009730 <_vfiprintf_r+0xe4>
 8009672:	6923      	ldr	r3, [r4, #16]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d05b      	beq.n	8009730 <_vfiprintf_r+0xe4>
 8009678:	2300      	movs	r3, #0
 800967a:	9309      	str	r3, [sp, #36]	; 0x24
 800967c:	2320      	movs	r3, #32
 800967e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009682:	2330      	movs	r3, #48	; 0x30
 8009684:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009688:	9503      	str	r5, [sp, #12]
 800968a:	f04f 0b01 	mov.w	fp, #1
 800968e:	46b8      	mov	r8, r7
 8009690:	4645      	mov	r5, r8
 8009692:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009696:	b10b      	cbz	r3, 800969c <_vfiprintf_r+0x50>
 8009698:	2b25      	cmp	r3, #37	; 0x25
 800969a:	d154      	bne.n	8009746 <_vfiprintf_r+0xfa>
 800969c:	ebb8 0a07 	subs.w	sl, r8, r7
 80096a0:	d00b      	beq.n	80096ba <_vfiprintf_r+0x6e>
 80096a2:	4653      	mov	r3, sl
 80096a4:	463a      	mov	r2, r7
 80096a6:	4621      	mov	r1, r4
 80096a8:	4630      	mov	r0, r6
 80096aa:	f7ff ffbc 	bl	8009626 <__sfputs_r>
 80096ae:	3001      	adds	r0, #1
 80096b0:	f000 80c2 	beq.w	8009838 <_vfiprintf_r+0x1ec>
 80096b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096b6:	4453      	add	r3, sl
 80096b8:	9309      	str	r3, [sp, #36]	; 0x24
 80096ba:	f898 3000 	ldrb.w	r3, [r8]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	f000 80ba 	beq.w	8009838 <_vfiprintf_r+0x1ec>
 80096c4:	2300      	movs	r3, #0
 80096c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80096ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096ce:	9304      	str	r3, [sp, #16]
 80096d0:	9307      	str	r3, [sp, #28]
 80096d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096d6:	931a      	str	r3, [sp, #104]	; 0x68
 80096d8:	46a8      	mov	r8, r5
 80096da:	2205      	movs	r2, #5
 80096dc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80096e0:	485e      	ldr	r0, [pc, #376]	; (800985c <_vfiprintf_r+0x210>)
 80096e2:	f7f6 fd7d 	bl	80001e0 <memchr>
 80096e6:	9b04      	ldr	r3, [sp, #16]
 80096e8:	bb78      	cbnz	r0, 800974a <_vfiprintf_r+0xfe>
 80096ea:	06d9      	lsls	r1, r3, #27
 80096ec:	bf44      	itt	mi
 80096ee:	2220      	movmi	r2, #32
 80096f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80096f4:	071a      	lsls	r2, r3, #28
 80096f6:	bf44      	itt	mi
 80096f8:	222b      	movmi	r2, #43	; 0x2b
 80096fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80096fe:	782a      	ldrb	r2, [r5, #0]
 8009700:	2a2a      	cmp	r2, #42	; 0x2a
 8009702:	d02a      	beq.n	800975a <_vfiprintf_r+0x10e>
 8009704:	9a07      	ldr	r2, [sp, #28]
 8009706:	46a8      	mov	r8, r5
 8009708:	2000      	movs	r0, #0
 800970a:	250a      	movs	r5, #10
 800970c:	4641      	mov	r1, r8
 800970e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009712:	3b30      	subs	r3, #48	; 0x30
 8009714:	2b09      	cmp	r3, #9
 8009716:	d969      	bls.n	80097ec <_vfiprintf_r+0x1a0>
 8009718:	b360      	cbz	r0, 8009774 <_vfiprintf_r+0x128>
 800971a:	e024      	b.n	8009766 <_vfiprintf_r+0x11a>
 800971c:	4b50      	ldr	r3, [pc, #320]	; (8009860 <_vfiprintf_r+0x214>)
 800971e:	429c      	cmp	r4, r3
 8009720:	d101      	bne.n	8009726 <_vfiprintf_r+0xda>
 8009722:	68b4      	ldr	r4, [r6, #8]
 8009724:	e7a2      	b.n	800966c <_vfiprintf_r+0x20>
 8009726:	4b4f      	ldr	r3, [pc, #316]	; (8009864 <_vfiprintf_r+0x218>)
 8009728:	429c      	cmp	r4, r3
 800972a:	bf08      	it	eq
 800972c:	68f4      	ldreq	r4, [r6, #12]
 800972e:	e79d      	b.n	800966c <_vfiprintf_r+0x20>
 8009730:	4621      	mov	r1, r4
 8009732:	4630      	mov	r0, r6
 8009734:	f7fe fb1e 	bl	8007d74 <__swsetup_r>
 8009738:	2800      	cmp	r0, #0
 800973a:	d09d      	beq.n	8009678 <_vfiprintf_r+0x2c>
 800973c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009740:	b01d      	add	sp, #116	; 0x74
 8009742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009746:	46a8      	mov	r8, r5
 8009748:	e7a2      	b.n	8009690 <_vfiprintf_r+0x44>
 800974a:	4a44      	ldr	r2, [pc, #272]	; (800985c <_vfiprintf_r+0x210>)
 800974c:	1a80      	subs	r0, r0, r2
 800974e:	fa0b f000 	lsl.w	r0, fp, r0
 8009752:	4318      	orrs	r0, r3
 8009754:	9004      	str	r0, [sp, #16]
 8009756:	4645      	mov	r5, r8
 8009758:	e7be      	b.n	80096d8 <_vfiprintf_r+0x8c>
 800975a:	9a03      	ldr	r2, [sp, #12]
 800975c:	1d11      	adds	r1, r2, #4
 800975e:	6812      	ldr	r2, [r2, #0]
 8009760:	9103      	str	r1, [sp, #12]
 8009762:	2a00      	cmp	r2, #0
 8009764:	db01      	blt.n	800976a <_vfiprintf_r+0x11e>
 8009766:	9207      	str	r2, [sp, #28]
 8009768:	e004      	b.n	8009774 <_vfiprintf_r+0x128>
 800976a:	4252      	negs	r2, r2
 800976c:	f043 0302 	orr.w	r3, r3, #2
 8009770:	9207      	str	r2, [sp, #28]
 8009772:	9304      	str	r3, [sp, #16]
 8009774:	f898 3000 	ldrb.w	r3, [r8]
 8009778:	2b2e      	cmp	r3, #46	; 0x2e
 800977a:	d10e      	bne.n	800979a <_vfiprintf_r+0x14e>
 800977c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009780:	2b2a      	cmp	r3, #42	; 0x2a
 8009782:	d138      	bne.n	80097f6 <_vfiprintf_r+0x1aa>
 8009784:	9b03      	ldr	r3, [sp, #12]
 8009786:	1d1a      	adds	r2, r3, #4
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	9203      	str	r2, [sp, #12]
 800978c:	2b00      	cmp	r3, #0
 800978e:	bfb8      	it	lt
 8009790:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009794:	f108 0802 	add.w	r8, r8, #2
 8009798:	9305      	str	r3, [sp, #20]
 800979a:	4d33      	ldr	r5, [pc, #204]	; (8009868 <_vfiprintf_r+0x21c>)
 800979c:	f898 1000 	ldrb.w	r1, [r8]
 80097a0:	2203      	movs	r2, #3
 80097a2:	4628      	mov	r0, r5
 80097a4:	f7f6 fd1c 	bl	80001e0 <memchr>
 80097a8:	b140      	cbz	r0, 80097bc <_vfiprintf_r+0x170>
 80097aa:	2340      	movs	r3, #64	; 0x40
 80097ac:	1b40      	subs	r0, r0, r5
 80097ae:	fa03 f000 	lsl.w	r0, r3, r0
 80097b2:	9b04      	ldr	r3, [sp, #16]
 80097b4:	4303      	orrs	r3, r0
 80097b6:	f108 0801 	add.w	r8, r8, #1
 80097ba:	9304      	str	r3, [sp, #16]
 80097bc:	f898 1000 	ldrb.w	r1, [r8]
 80097c0:	482a      	ldr	r0, [pc, #168]	; (800986c <_vfiprintf_r+0x220>)
 80097c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097c6:	2206      	movs	r2, #6
 80097c8:	f108 0701 	add.w	r7, r8, #1
 80097cc:	f7f6 fd08 	bl	80001e0 <memchr>
 80097d0:	2800      	cmp	r0, #0
 80097d2:	d037      	beq.n	8009844 <_vfiprintf_r+0x1f8>
 80097d4:	4b26      	ldr	r3, [pc, #152]	; (8009870 <_vfiprintf_r+0x224>)
 80097d6:	bb1b      	cbnz	r3, 8009820 <_vfiprintf_r+0x1d4>
 80097d8:	9b03      	ldr	r3, [sp, #12]
 80097da:	3307      	adds	r3, #7
 80097dc:	f023 0307 	bic.w	r3, r3, #7
 80097e0:	3308      	adds	r3, #8
 80097e2:	9303      	str	r3, [sp, #12]
 80097e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097e6:	444b      	add	r3, r9
 80097e8:	9309      	str	r3, [sp, #36]	; 0x24
 80097ea:	e750      	b.n	800968e <_vfiprintf_r+0x42>
 80097ec:	fb05 3202 	mla	r2, r5, r2, r3
 80097f0:	2001      	movs	r0, #1
 80097f2:	4688      	mov	r8, r1
 80097f4:	e78a      	b.n	800970c <_vfiprintf_r+0xc0>
 80097f6:	2300      	movs	r3, #0
 80097f8:	f108 0801 	add.w	r8, r8, #1
 80097fc:	9305      	str	r3, [sp, #20]
 80097fe:	4619      	mov	r1, r3
 8009800:	250a      	movs	r5, #10
 8009802:	4640      	mov	r0, r8
 8009804:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009808:	3a30      	subs	r2, #48	; 0x30
 800980a:	2a09      	cmp	r2, #9
 800980c:	d903      	bls.n	8009816 <_vfiprintf_r+0x1ca>
 800980e:	2b00      	cmp	r3, #0
 8009810:	d0c3      	beq.n	800979a <_vfiprintf_r+0x14e>
 8009812:	9105      	str	r1, [sp, #20]
 8009814:	e7c1      	b.n	800979a <_vfiprintf_r+0x14e>
 8009816:	fb05 2101 	mla	r1, r5, r1, r2
 800981a:	2301      	movs	r3, #1
 800981c:	4680      	mov	r8, r0
 800981e:	e7f0      	b.n	8009802 <_vfiprintf_r+0x1b6>
 8009820:	ab03      	add	r3, sp, #12
 8009822:	9300      	str	r3, [sp, #0]
 8009824:	4622      	mov	r2, r4
 8009826:	4b13      	ldr	r3, [pc, #76]	; (8009874 <_vfiprintf_r+0x228>)
 8009828:	a904      	add	r1, sp, #16
 800982a:	4630      	mov	r0, r6
 800982c:	f7fd fe0c 	bl	8007448 <_printf_float>
 8009830:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009834:	4681      	mov	r9, r0
 8009836:	d1d5      	bne.n	80097e4 <_vfiprintf_r+0x198>
 8009838:	89a3      	ldrh	r3, [r4, #12]
 800983a:	065b      	lsls	r3, r3, #25
 800983c:	f53f af7e 	bmi.w	800973c <_vfiprintf_r+0xf0>
 8009840:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009842:	e77d      	b.n	8009740 <_vfiprintf_r+0xf4>
 8009844:	ab03      	add	r3, sp, #12
 8009846:	9300      	str	r3, [sp, #0]
 8009848:	4622      	mov	r2, r4
 800984a:	4b0a      	ldr	r3, [pc, #40]	; (8009874 <_vfiprintf_r+0x228>)
 800984c:	a904      	add	r1, sp, #16
 800984e:	4630      	mov	r0, r6
 8009850:	f7fe f8b0 	bl	80079b4 <_printf_i>
 8009854:	e7ec      	b.n	8009830 <_vfiprintf_r+0x1e4>
 8009856:	bf00      	nop
 8009858:	08009ce8 	.word	0x08009ce8
 800985c:	08009e24 	.word	0x08009e24
 8009860:	08009d08 	.word	0x08009d08
 8009864:	08009cc8 	.word	0x08009cc8
 8009868:	08009e2a 	.word	0x08009e2a
 800986c:	08009e2e 	.word	0x08009e2e
 8009870:	08007449 	.word	0x08007449
 8009874:	08009627 	.word	0x08009627

08009878 <_sbrk_r>:
 8009878:	b538      	push	{r3, r4, r5, lr}
 800987a:	4c06      	ldr	r4, [pc, #24]	; (8009894 <_sbrk_r+0x1c>)
 800987c:	2300      	movs	r3, #0
 800987e:	4605      	mov	r5, r0
 8009880:	4608      	mov	r0, r1
 8009882:	6023      	str	r3, [r4, #0]
 8009884:	f7f8 fa70 	bl	8001d68 <_sbrk>
 8009888:	1c43      	adds	r3, r0, #1
 800988a:	d102      	bne.n	8009892 <_sbrk_r+0x1a>
 800988c:	6823      	ldr	r3, [r4, #0]
 800988e:	b103      	cbz	r3, 8009892 <_sbrk_r+0x1a>
 8009890:	602b      	str	r3, [r5, #0]
 8009892:	bd38      	pop	{r3, r4, r5, pc}
 8009894:	200004f4 	.word	0x200004f4

08009898 <__sread>:
 8009898:	b510      	push	{r4, lr}
 800989a:	460c      	mov	r4, r1
 800989c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098a0:	f000 f8a8 	bl	80099f4 <_read_r>
 80098a4:	2800      	cmp	r0, #0
 80098a6:	bfab      	itete	ge
 80098a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80098aa:	89a3      	ldrhlt	r3, [r4, #12]
 80098ac:	181b      	addge	r3, r3, r0
 80098ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80098b2:	bfac      	ite	ge
 80098b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80098b6:	81a3      	strhlt	r3, [r4, #12]
 80098b8:	bd10      	pop	{r4, pc}

080098ba <__swrite>:
 80098ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098be:	461f      	mov	r7, r3
 80098c0:	898b      	ldrh	r3, [r1, #12]
 80098c2:	05db      	lsls	r3, r3, #23
 80098c4:	4605      	mov	r5, r0
 80098c6:	460c      	mov	r4, r1
 80098c8:	4616      	mov	r6, r2
 80098ca:	d505      	bpl.n	80098d8 <__swrite+0x1e>
 80098cc:	2302      	movs	r3, #2
 80098ce:	2200      	movs	r2, #0
 80098d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098d4:	f000 f868 	bl	80099a8 <_lseek_r>
 80098d8:	89a3      	ldrh	r3, [r4, #12]
 80098da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098e2:	81a3      	strh	r3, [r4, #12]
 80098e4:	4632      	mov	r2, r6
 80098e6:	463b      	mov	r3, r7
 80098e8:	4628      	mov	r0, r5
 80098ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098ee:	f000 b817 	b.w	8009920 <_write_r>

080098f2 <__sseek>:
 80098f2:	b510      	push	{r4, lr}
 80098f4:	460c      	mov	r4, r1
 80098f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098fa:	f000 f855 	bl	80099a8 <_lseek_r>
 80098fe:	1c43      	adds	r3, r0, #1
 8009900:	89a3      	ldrh	r3, [r4, #12]
 8009902:	bf15      	itete	ne
 8009904:	6560      	strne	r0, [r4, #84]	; 0x54
 8009906:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800990a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800990e:	81a3      	strheq	r3, [r4, #12]
 8009910:	bf18      	it	ne
 8009912:	81a3      	strhne	r3, [r4, #12]
 8009914:	bd10      	pop	{r4, pc}

08009916 <__sclose>:
 8009916:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800991a:	f000 b813 	b.w	8009944 <_close_r>
	...

08009920 <_write_r>:
 8009920:	b538      	push	{r3, r4, r5, lr}
 8009922:	4c07      	ldr	r4, [pc, #28]	; (8009940 <_write_r+0x20>)
 8009924:	4605      	mov	r5, r0
 8009926:	4608      	mov	r0, r1
 8009928:	4611      	mov	r1, r2
 800992a:	2200      	movs	r2, #0
 800992c:	6022      	str	r2, [r4, #0]
 800992e:	461a      	mov	r2, r3
 8009930:	f7f8 f9ca 	bl	8001cc8 <_write>
 8009934:	1c43      	adds	r3, r0, #1
 8009936:	d102      	bne.n	800993e <_write_r+0x1e>
 8009938:	6823      	ldr	r3, [r4, #0]
 800993a:	b103      	cbz	r3, 800993e <_write_r+0x1e>
 800993c:	602b      	str	r3, [r5, #0]
 800993e:	bd38      	pop	{r3, r4, r5, pc}
 8009940:	200004f4 	.word	0x200004f4

08009944 <_close_r>:
 8009944:	b538      	push	{r3, r4, r5, lr}
 8009946:	4c06      	ldr	r4, [pc, #24]	; (8009960 <_close_r+0x1c>)
 8009948:	2300      	movs	r3, #0
 800994a:	4605      	mov	r5, r0
 800994c:	4608      	mov	r0, r1
 800994e:	6023      	str	r3, [r4, #0]
 8009950:	f7f8 f9d6 	bl	8001d00 <_close>
 8009954:	1c43      	adds	r3, r0, #1
 8009956:	d102      	bne.n	800995e <_close_r+0x1a>
 8009958:	6823      	ldr	r3, [r4, #0]
 800995a:	b103      	cbz	r3, 800995e <_close_r+0x1a>
 800995c:	602b      	str	r3, [r5, #0]
 800995e:	bd38      	pop	{r3, r4, r5, pc}
 8009960:	200004f4 	.word	0x200004f4

08009964 <_fstat_r>:
 8009964:	b538      	push	{r3, r4, r5, lr}
 8009966:	4c07      	ldr	r4, [pc, #28]	; (8009984 <_fstat_r+0x20>)
 8009968:	2300      	movs	r3, #0
 800996a:	4605      	mov	r5, r0
 800996c:	4608      	mov	r0, r1
 800996e:	4611      	mov	r1, r2
 8009970:	6023      	str	r3, [r4, #0]
 8009972:	f7f8 f9d1 	bl	8001d18 <_fstat>
 8009976:	1c43      	adds	r3, r0, #1
 8009978:	d102      	bne.n	8009980 <_fstat_r+0x1c>
 800997a:	6823      	ldr	r3, [r4, #0]
 800997c:	b103      	cbz	r3, 8009980 <_fstat_r+0x1c>
 800997e:	602b      	str	r3, [r5, #0]
 8009980:	bd38      	pop	{r3, r4, r5, pc}
 8009982:	bf00      	nop
 8009984:	200004f4 	.word	0x200004f4

08009988 <_isatty_r>:
 8009988:	b538      	push	{r3, r4, r5, lr}
 800998a:	4c06      	ldr	r4, [pc, #24]	; (80099a4 <_isatty_r+0x1c>)
 800998c:	2300      	movs	r3, #0
 800998e:	4605      	mov	r5, r0
 8009990:	4608      	mov	r0, r1
 8009992:	6023      	str	r3, [r4, #0]
 8009994:	f7f8 f9d0 	bl	8001d38 <_isatty>
 8009998:	1c43      	adds	r3, r0, #1
 800999a:	d102      	bne.n	80099a2 <_isatty_r+0x1a>
 800999c:	6823      	ldr	r3, [r4, #0]
 800999e:	b103      	cbz	r3, 80099a2 <_isatty_r+0x1a>
 80099a0:	602b      	str	r3, [r5, #0]
 80099a2:	bd38      	pop	{r3, r4, r5, pc}
 80099a4:	200004f4 	.word	0x200004f4

080099a8 <_lseek_r>:
 80099a8:	b538      	push	{r3, r4, r5, lr}
 80099aa:	4c07      	ldr	r4, [pc, #28]	; (80099c8 <_lseek_r+0x20>)
 80099ac:	4605      	mov	r5, r0
 80099ae:	4608      	mov	r0, r1
 80099b0:	4611      	mov	r1, r2
 80099b2:	2200      	movs	r2, #0
 80099b4:	6022      	str	r2, [r4, #0]
 80099b6:	461a      	mov	r2, r3
 80099b8:	f7f8 f9c9 	bl	8001d4e <_lseek>
 80099bc:	1c43      	adds	r3, r0, #1
 80099be:	d102      	bne.n	80099c6 <_lseek_r+0x1e>
 80099c0:	6823      	ldr	r3, [r4, #0]
 80099c2:	b103      	cbz	r3, 80099c6 <_lseek_r+0x1e>
 80099c4:	602b      	str	r3, [r5, #0]
 80099c6:	bd38      	pop	{r3, r4, r5, pc}
 80099c8:	200004f4 	.word	0x200004f4

080099cc <__ascii_mbtowc>:
 80099cc:	b082      	sub	sp, #8
 80099ce:	b901      	cbnz	r1, 80099d2 <__ascii_mbtowc+0x6>
 80099d0:	a901      	add	r1, sp, #4
 80099d2:	b142      	cbz	r2, 80099e6 <__ascii_mbtowc+0x1a>
 80099d4:	b14b      	cbz	r3, 80099ea <__ascii_mbtowc+0x1e>
 80099d6:	7813      	ldrb	r3, [r2, #0]
 80099d8:	600b      	str	r3, [r1, #0]
 80099da:	7812      	ldrb	r2, [r2, #0]
 80099dc:	1c10      	adds	r0, r2, #0
 80099de:	bf18      	it	ne
 80099e0:	2001      	movne	r0, #1
 80099e2:	b002      	add	sp, #8
 80099e4:	4770      	bx	lr
 80099e6:	4610      	mov	r0, r2
 80099e8:	e7fb      	b.n	80099e2 <__ascii_mbtowc+0x16>
 80099ea:	f06f 0001 	mvn.w	r0, #1
 80099ee:	e7f8      	b.n	80099e2 <__ascii_mbtowc+0x16>

080099f0 <__malloc_lock>:
 80099f0:	4770      	bx	lr

080099f2 <__malloc_unlock>:
 80099f2:	4770      	bx	lr

080099f4 <_read_r>:
 80099f4:	b538      	push	{r3, r4, r5, lr}
 80099f6:	4c07      	ldr	r4, [pc, #28]	; (8009a14 <_read_r+0x20>)
 80099f8:	4605      	mov	r5, r0
 80099fa:	4608      	mov	r0, r1
 80099fc:	4611      	mov	r1, r2
 80099fe:	2200      	movs	r2, #0
 8009a00:	6022      	str	r2, [r4, #0]
 8009a02:	461a      	mov	r2, r3
 8009a04:	f7f8 f943 	bl	8001c8e <_read>
 8009a08:	1c43      	adds	r3, r0, #1
 8009a0a:	d102      	bne.n	8009a12 <_read_r+0x1e>
 8009a0c:	6823      	ldr	r3, [r4, #0]
 8009a0e:	b103      	cbz	r3, 8009a12 <_read_r+0x1e>
 8009a10:	602b      	str	r3, [r5, #0]
 8009a12:	bd38      	pop	{r3, r4, r5, pc}
 8009a14:	200004f4 	.word	0x200004f4

08009a18 <__ascii_wctomb>:
 8009a18:	b149      	cbz	r1, 8009a2e <__ascii_wctomb+0x16>
 8009a1a:	2aff      	cmp	r2, #255	; 0xff
 8009a1c:	bf85      	ittet	hi
 8009a1e:	238a      	movhi	r3, #138	; 0x8a
 8009a20:	6003      	strhi	r3, [r0, #0]
 8009a22:	700a      	strbls	r2, [r1, #0]
 8009a24:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009a28:	bf98      	it	ls
 8009a2a:	2001      	movls	r0, #1
 8009a2c:	4770      	bx	lr
 8009a2e:	4608      	mov	r0, r1
 8009a30:	4770      	bx	lr
	...

08009a34 <_init>:
 8009a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a36:	bf00      	nop
 8009a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a3a:	bc08      	pop	{r3}
 8009a3c:	469e      	mov	lr, r3
 8009a3e:	4770      	bx	lr

08009a40 <_fini>:
 8009a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a42:	bf00      	nop
 8009a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a46:	bc08      	pop	{r3}
 8009a48:	469e      	mov	lr, r3
 8009a4a:	4770      	bx	lr
