
aris-euler-recovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016014  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000890  080161a8  080161a8  000261a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016a38  08016a38  00030330  2**0
                  CONTENTS
  4 .ARM          00000008  08016a38  08016a38  00026a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016a40  08016a40  00030330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016a40  08016a40  00026a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016a44  08016a44  00026a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000330  20000000  08016a48  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000fed4  20000330  08016d78  00030330  2**3
                  ALLOC
 10 ._user_heap_stack 0000224c  20010204  08016d78  00040204  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030330  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027f1a  00000000  00000000  00030360  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005761  00000000  00000000  0005827a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000016e8  00000000  00000000  0005d9e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001440  00000000  00000000  0005f0c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002753d  00000000  00000000  00060508  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001ceae  00000000  00000000  00087a45  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c931d  00000000  00000000  000a48f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016dc10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007120  00000000  00000000  0016dc8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000330 	.word	0x20000330
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801618c 	.word	0x0801618c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000334 	.word	0x20000334
 80001cc:	0801618c 	.word	0x0801618c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <turn_off_HAWKs>:
void fire_HAWKs(void){
	HAL_GPIO_WritePin(HAWK1_GPIO_Port, HAWK1_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(HAWK2_GPIO_Port, HAWK2_Pin, GPIO_PIN_SET);
}

void turn_off_HAWKs(void){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HAWK1_GPIO_Port, HAWK1_Pin, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f92:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <turn_off_HAWKs+0x20>)
 8000f94:	f007 fc52 	bl	800883c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HAWK2_GPIO_Port, HAWK2_Pin, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f9e:	4802      	ldr	r0, [pc, #8]	; (8000fa8 <turn_off_HAWKs+0x20>)
 8000fa0:	f007 fc4c 	bl	800883c <HAL_GPIO_WritePin>
}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40021000 	.word	0x40021000

08000fac <turn_off_TDs>:
void fire_TDs(void){
	HAL_GPIO_WritePin(TD1_GPIO_Port, TD1_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(TD2_GPIO_Port, TD2_Pin, GPIO_PIN_SET);
}

void turn_off_TDs(void){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TD1_GPIO_Port, TD1_Pin, GPIO_PIN_RESET);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fb6:	4805      	ldr	r0, [pc, #20]	; (8000fcc <turn_off_TDs+0x20>)
 8000fb8:	f007 fc40 	bl	800883c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TD2_GPIO_Port, TD2_Pin, GPIO_PIN_RESET);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fc2:	4802      	ldr	r0, [pc, #8]	; (8000fcc <turn_off_TDs+0x20>)
 8000fc4:	f007 fc3a 	bl	800883c <HAL_GPIO_WritePin>
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <init_ADC>:

void init_ADC(void){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 8000fd4:	4804      	ldr	r0, [pc, #16]	; (8000fe8 <init_ADC+0x18>)
 8000fd6:	f006 fa59 	bl	800748c <HAL_ADC_Stop_DMA>
	HAL_ADC_Start_DMA(&hadc1, adc_buf, 8);
 8000fda:	2208      	movs	r2, #8
 8000fdc:	4903      	ldr	r1, [pc, #12]	; (8000fec <init_ADC+0x1c>)
 8000fde:	4802      	ldr	r0, [pc, #8]	; (8000fe8 <init_ADC+0x18>)
 8000fe0:	f006 f962 	bl	80072a8 <HAL_ADC_Start_DMA>
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20004974 	.word	0x20004974
 8000fec:	20000884 	.word	0x20000884

08000ff0 <read_ADC>:

void read_ADC(float * out){
 8000ff0:	b590      	push	{r4, r7, lr}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]

	float vsense = 3.3 / 4096.;
 8000ff8:	4b89      	ldr	r3, [pc, #548]	; (8001220 <read_ADC+0x230>)
 8000ffa:	60fb      	str	r3, [r7, #12]
	float scale = 16 / 3.3;
 8000ffc:	4b89      	ldr	r3, [pc, #548]	; (8001224 <read_ADC+0x234>)
 8000ffe:	60bb      	str	r3, [r7, #8]

	out[0] = (float)adc_buf[0] * vsense * scale;
 8001000:	4b89      	ldr	r3, [pc, #548]	; (8001228 <read_ADC+0x238>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	ee07 3a90 	vmov	s15, r3
 8001008:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800100c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001010:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001014:	edd7 7a02 	vldr	s15, [r7, #8]
 8001018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	edc3 7a00 	vstr	s15, [r3]
	out[1] = (float)adc_buf[1] * vsense * scale;
 8001022:	4b81      	ldr	r3, [pc, #516]	; (8001228 <read_ADC+0x238>)
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	ee07 3a90 	vmov	s15, r3
 800102a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800102e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001032:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3304      	adds	r3, #4
 800103a:	edd7 7a02 	vldr	s15, [r7, #8]
 800103e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001042:	edc3 7a00 	vstr	s15, [r3]
	out[2] = (float)adc_buf[2] * vsense * scale;
 8001046:	4b78      	ldr	r3, [pc, #480]	; (8001228 <read_ADC+0x238>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	ee07 3a90 	vmov	s15, r3
 800104e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001052:	edd7 7a03 	vldr	s15, [r7, #12]
 8001056:	ee27 7a27 	vmul.f32	s14, s14, s15
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3308      	adds	r3, #8
 800105e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001066:	edc3 7a00 	vstr	s15, [r3]

	out[3] = -( 1000 * (( 3.3 / 2.0 - (float)adc_buf[3] * vsense) ) / 0.066 );
 800106a:	4b6f      	ldr	r3, [pc, #444]	; (8001228 <read_ADC+0x238>)
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	ee07 3a90 	vmov	s15, r3
 8001072:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001076:	edd7 7a03 	vldr	s15, [r7, #12]
 800107a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800107e:	ee17 0a90 	vmov	r0, s15
 8001082:	f7ff fa61 	bl	8000548 <__aeabi_f2d>
 8001086:	4603      	mov	r3, r0
 8001088:	460c      	mov	r4, r1
 800108a:	461a      	mov	r2, r3
 800108c:	4623      	mov	r3, r4
 800108e:	a15c      	add	r1, pc, #368	; (adr r1, 8001200 <read_ADC+0x210>)
 8001090:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001094:	f7ff f8f8 	bl	8000288 <__aeabi_dsub>
 8001098:	4603      	mov	r3, r0
 800109a:	460c      	mov	r4, r1
 800109c:	4618      	mov	r0, r3
 800109e:	4621      	mov	r1, r4
 80010a0:	f04f 0200 	mov.w	r2, #0
 80010a4:	4b61      	ldr	r3, [pc, #388]	; (800122c <read_ADC+0x23c>)
 80010a6:	f7ff faa7 	bl	80005f8 <__aeabi_dmul>
 80010aa:	4603      	mov	r3, r0
 80010ac:	460c      	mov	r4, r1
 80010ae:	4618      	mov	r0, r3
 80010b0:	4621      	mov	r1, r4
 80010b2:	a355      	add	r3, pc, #340	; (adr r3, 8001208 <read_ADC+0x218>)
 80010b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b8:	f7ff fbc8 	bl	800084c <__aeabi_ddiv>
 80010bc:	4603      	mov	r3, r0
 80010be:	460c      	mov	r4, r1
 80010c0:	4618      	mov	r0, r3
 80010c2:	4621      	mov	r1, r4
 80010c4:	f7ff fd90 	bl	8000be8 <__aeabi_d2f>
 80010c8:	4602      	mov	r2, r0
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	330c      	adds	r3, #12
 80010ce:	ee07 2a90 	vmov	s15, r2
 80010d2:	eef1 7a67 	vneg.f32	s15, s15
 80010d6:	edc3 7a00 	vstr	s15, [r3]
	out[4] = -( 1000 * (( 3.3 / 2.0 - (float)adc_buf[4] * vsense) ) / 0.066 );
 80010da:	4b53      	ldr	r3, [pc, #332]	; (8001228 <read_ADC+0x238>)
 80010dc:	691b      	ldr	r3, [r3, #16]
 80010de:	ee07 3a90 	vmov	s15, r3
 80010e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80010ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ee:	ee17 0a90 	vmov	r0, s15
 80010f2:	f7ff fa29 	bl	8000548 <__aeabi_f2d>
 80010f6:	4603      	mov	r3, r0
 80010f8:	460c      	mov	r4, r1
 80010fa:	461a      	mov	r2, r3
 80010fc:	4623      	mov	r3, r4
 80010fe:	a140      	add	r1, pc, #256	; (adr r1, 8001200 <read_ADC+0x210>)
 8001100:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001104:	f7ff f8c0 	bl	8000288 <__aeabi_dsub>
 8001108:	4603      	mov	r3, r0
 800110a:	460c      	mov	r4, r1
 800110c:	4618      	mov	r0, r3
 800110e:	4621      	mov	r1, r4
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	4b45      	ldr	r3, [pc, #276]	; (800122c <read_ADC+0x23c>)
 8001116:	f7ff fa6f 	bl	80005f8 <__aeabi_dmul>
 800111a:	4603      	mov	r3, r0
 800111c:	460c      	mov	r4, r1
 800111e:	4618      	mov	r0, r3
 8001120:	4621      	mov	r1, r4
 8001122:	a339      	add	r3, pc, #228	; (adr r3, 8001208 <read_ADC+0x218>)
 8001124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001128:	f7ff fb90 	bl	800084c <__aeabi_ddiv>
 800112c:	4603      	mov	r3, r0
 800112e:	460c      	mov	r4, r1
 8001130:	4618      	mov	r0, r3
 8001132:	4621      	mov	r1, r4
 8001134:	f7ff fd58 	bl	8000be8 <__aeabi_d2f>
 8001138:	4602      	mov	r2, r0
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3310      	adds	r3, #16
 800113e:	ee07 2a90 	vmov	s15, r2
 8001142:	eef1 7a67 	vneg.f32	s15, s15
 8001146:	edc3 7a00 	vstr	s15, [r3]

	out[5] = (float)adc_buf[5] * vsense * scale;
 800114a:	4b37      	ldr	r3, [pc, #220]	; (8001228 <read_ADC+0x238>)
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	ee07 3a90 	vmov	s15, r3
 8001152:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001156:	edd7 7a03 	vldr	s15, [r7, #12]
 800115a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3314      	adds	r3, #20
 8001162:	edd7 7a02 	vldr	s15, [r7, #8]
 8001166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800116a:	edc3 7a00 	vstr	s15, [r3]
	out[6] = (float)adc_buf[6] * vsense * scale;
 800116e:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <read_ADC+0x238>)
 8001170:	699b      	ldr	r3, [r3, #24]
 8001172:	ee07 3a90 	vmov	s15, r3
 8001176:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800117a:	edd7 7a03 	vldr	s15, [r7, #12]
 800117e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3318      	adds	r3, #24
 8001186:	edd7 7a02 	vldr	s15, [r7, #8]
 800118a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800118e:	edc3 7a00 	vstr	s15, [r3]

	out[7] = ((((float)adc_buf[7] * vsense) - 0.76) / 0.0025) + 25.0;
 8001192:	4b25      	ldr	r3, [pc, #148]	; (8001228 <read_ADC+0x238>)
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	ee07 3a90 	vmov	s15, r3
 800119a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800119e:	edd7 7a03 	vldr	s15, [r7, #12]
 80011a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011a6:	ee17 0a90 	vmov	r0, s15
 80011aa:	f7ff f9cd 	bl	8000548 <__aeabi_f2d>
 80011ae:	a318      	add	r3, pc, #96	; (adr r3, 8001210 <read_ADC+0x220>)
 80011b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b4:	f7ff f868 	bl	8000288 <__aeabi_dsub>
 80011b8:	4603      	mov	r3, r0
 80011ba:	460c      	mov	r4, r1
 80011bc:	4618      	mov	r0, r3
 80011be:	4621      	mov	r1, r4
 80011c0:	a315      	add	r3, pc, #84	; (adr r3, 8001218 <read_ADC+0x228>)
 80011c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c6:	f7ff fb41 	bl	800084c <__aeabi_ddiv>
 80011ca:	4603      	mov	r3, r0
 80011cc:	460c      	mov	r4, r1
 80011ce:	4618      	mov	r0, r3
 80011d0:	4621      	mov	r1, r4
 80011d2:	f04f 0200 	mov.w	r2, #0
 80011d6:	4b16      	ldr	r3, [pc, #88]	; (8001230 <read_ADC+0x240>)
 80011d8:	f7ff f858 	bl	800028c <__adddf3>
 80011dc:	4603      	mov	r3, r0
 80011de:	460c      	mov	r4, r1
 80011e0:	4619      	mov	r1, r3
 80011e2:	4622      	mov	r2, r4
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f103 041c 	add.w	r4, r3, #28
 80011ea:	4608      	mov	r0, r1
 80011ec:	4611      	mov	r1, r2
 80011ee:	f7ff fcfb 	bl	8000be8 <__aeabi_d2f>
 80011f2:	4603      	mov	r3, r0
 80011f4:	6023      	str	r3, [r4, #0]

}
 80011f6:	bf00      	nop
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd90      	pop	{r4, r7, pc}
 80011fe:	bf00      	nop
 8001200:	66666666 	.word	0x66666666
 8001204:	3ffa6666 	.word	0x3ffa6666
 8001208:	4189374c 	.word	0x4189374c
 800120c:	3fb0e560 	.word	0x3fb0e560
 8001210:	851eb852 	.word	0x851eb852
 8001214:	3fe851eb 	.word	0x3fe851eb
 8001218:	47ae147b 	.word	0x47ae147b
 800121c:	3f647ae1 	.word	0x3f647ae1
 8001220:	3a533333 	.word	0x3a533333
 8001224:	409b26ca 	.word	0x409b26ca
 8001228:	20000884 	.word	0x20000884
 800122c:	408f4000 	.word	0x408f4000
 8001230:	40390000 	.word	0x40390000

08001234 <bufclear>:
	return i;
}


void bufclear (char * buffer)  // clear buffer
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	for (int i=0; i<BUFLEN; i++)
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	e007      	b.n	8001252 <bufclear+0x1e>
	{
		buffer[i] = '\0';
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	4413      	add	r3, r2
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<BUFLEN; i++)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	3301      	adds	r3, #1
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001258:	dbf3      	blt.n	8001242 <bufclear+0xe>
	}
}
 800125a:	bf00      	nop
 800125c:	3714      	adds	r7, #20
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <init_sd>:
		}
	return 0;
}


uint8_t init_sd(uint16_t * file_count, uint16_t * log_count){
 8001268:	b590      	push	{r4, r7, lr}
 800126a:	b09d      	sub	sp, #116	; 0x74
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
	DWORD fre_clust;
	uint32_t total, free_space;

	if (DEBUG_PRINT == 1) printf("mounting SD card...\n");

	FRESULT ret = f_mount(&fs, SDPath, 1);
 8001272:	2201      	movs	r2, #1
 8001274:	4955      	ldr	r1, [pc, #340]	; (80013cc <init_sd+0x164>)
 8001276:	4856      	ldr	r0, [pc, #344]	; (80013d0 <init_sd+0x168>)
 8001278:	f00d fec8 	bl	800f00c <f_mount>
 800127c:	4603      	mov	r3, r0
 800127e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	if (ret == FR_OK)
 8001282:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <init_sd+0x26>
	{
		if (DEBUG_PRINT == 1) printf("mounted SD card\n");
	} else {
		if (DEBUG_PRINT == 1) printf("no SD connection established\n");
	  if (DEBUG_PRINT == 1) printf("error: %d\n",ret);
	  return 0;
 800128a:	2300      	movs	r3, #0
 800128c:	e09a      	b.n	80013c4 <init_sd+0x15c>
	}

	/* Check free space */
	f_getfree(SDPath, &fre_clust, &pfs);
 800128e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001292:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001296:	4619      	mov	r1, r3
 8001298:	484c      	ldr	r0, [pc, #304]	; (80013cc <init_sd+0x164>)
 800129a:	f00e ff38 	bl	801010e <f_getfree>

	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 800129e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012a0:	699b      	ldr	r3, [r3, #24]
 80012a2:	3b02      	subs	r3, #2
 80012a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80012a6:	8952      	ldrh	r2, [r2, #10]
 80012a8:	fb02 f303 	mul.w	r3, r2, r3
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff f929 	bl	8000504 <__aeabi_ui2d>
 80012b2:	f04f 0200 	mov.w	r2, #0
 80012b6:	4b47      	ldr	r3, [pc, #284]	; (80013d4 <init_sd+0x16c>)
 80012b8:	f7ff f99e 	bl	80005f8 <__aeabi_dmul>
 80012bc:	4603      	mov	r3, r0
 80012be:	460c      	mov	r4, r1
 80012c0:	4618      	mov	r0, r3
 80012c2:	4621      	mov	r1, r4
 80012c4:	f7ff fc70 	bl	8000ba8 <__aeabi_d2uiz>
 80012c8:	4603      	mov	r3, r0
 80012ca:	667b      	str	r3, [r7, #100]	; 0x64
	if (DEBUG_PRINT == 1) printf("SD CARD Total Size: \t%lu\n",total);
	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 80012cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012ce:	895b      	ldrh	r3, [r3, #10]
 80012d0:	461a      	mov	r2, r3
 80012d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012d4:	fb03 f302 	mul.w	r3, r3, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff f913 	bl	8000504 <__aeabi_ui2d>
 80012de:	f04f 0200 	mov.w	r2, #0
 80012e2:	4b3c      	ldr	r3, [pc, #240]	; (80013d4 <init_sd+0x16c>)
 80012e4:	f7ff f988 	bl	80005f8 <__aeabi_dmul>
 80012e8:	4603      	mov	r3, r0
 80012ea:	460c      	mov	r4, r1
 80012ec:	4618      	mov	r0, r3
 80012ee:	4621      	mov	r1, r4
 80012f0:	f7ff fc5a 	bl	8000ba8 <__aeabi_d2uiz>
 80012f4:	4603      	mov	r3, r0
 80012f6:	663b      	str	r3, [r7, #96]	; 0x60

	DIR dirs;
	char *fn;
	FILINFO Finfo;

	uint16_t cnt1 = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	uint16_t cnt2 = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

	if ((fresult = f_opendir(&dirs, SDPath)) == FR_OK)
 8001304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001308:	4930      	ldr	r1, [pc, #192]	; (80013cc <init_sd+0x164>)
 800130a:	4618      	mov	r0, r3
 800130c:	f00e fe4f 	bl	800ffae <f_opendir>
 8001310:	4603      	mov	r3, r0
 8001312:	461a      	mov	r2, r3
 8001314:	4b30      	ldr	r3, [pc, #192]	; (80013d8 <init_sd+0x170>)
 8001316:	701a      	strb	r2, [r3, #0]
 8001318:	4b2f      	ldr	r3, [pc, #188]	; (80013d8 <init_sd+0x170>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d148      	bne.n	80013b2 <init_sd+0x14a>
	{
			while (((fresult = f_readdir(&dirs, &Finfo)) == FR_OK) && Finfo.fname[0])
 8001320:	e034      	b.n	800138c <init_sd+0x124>
			{
				fn = Finfo.fname;
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	3309      	adds	r3, #9
 8001328:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (_FS_RPATH && fn[0] == '.') continue;

				if ((fn[0] == 'F') & (fn[1] == 'L'))
 800132a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b46      	cmp	r3, #70	; 0x46
 8001330:	bf0c      	ite	eq
 8001332:	2301      	moveq	r3, #1
 8001334:	2300      	movne	r3, #0
 8001336:	b2da      	uxtb	r2, r3
 8001338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800133a:	3301      	adds	r3, #1
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b4c      	cmp	r3, #76	; 0x4c
 8001340:	bf0c      	ite	eq
 8001342:	2301      	moveq	r3, #1
 8001344:	2300      	movne	r3, #0
 8001346:	b2db      	uxtb	r3, r3
 8001348:	4013      	ands	r3, r2
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2b00      	cmp	r3, #0
 800134e:	d005      	beq.n	800135c <init_sd+0xf4>
				{
					if (DEBUG_PRINT == 1) printf("found flight log: %s \n",fn);
					cnt1 ++;
 8001350:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001354:	3301      	adds	r3, #1
 8001356:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 800135a:	e017      	b.n	800138c <init_sd+0x124>
				} else if ((fn[0] == 'L') & (fn[1] == 'O'))
 800135c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b4c      	cmp	r3, #76	; 0x4c
 8001362:	bf0c      	ite	eq
 8001364:	2301      	moveq	r3, #1
 8001366:	2300      	movne	r3, #0
 8001368:	b2da      	uxtb	r2, r3
 800136a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800136c:	3301      	adds	r3, #1
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b4f      	cmp	r3, #79	; 0x4f
 8001372:	bf0c      	ite	eq
 8001374:	2301      	moveq	r3, #1
 8001376:	2300      	movne	r3, #0
 8001378:	b2db      	uxtb	r3, r3
 800137a:	4013      	ands	r3, r2
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b00      	cmp	r3, #0
 8001380:	d004      	beq.n	800138c <init_sd+0x124>
				{
					if (DEBUG_PRINT == 1) printf("found log file: %s \n",fn);
					cnt2 ++;
 8001382:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8001386:	3301      	adds	r3, #1
 8001388:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
			while (((fresult = f_readdir(&dirs, &Finfo)) == FR_OK) && Finfo.fname[0])
 800138c:	f107 020c 	add.w	r2, r7, #12
 8001390:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001394:	4611      	mov	r1, r2
 8001396:	4618      	mov	r0, r3
 8001398:	f00e fe7c 	bl	8010094 <f_readdir>
 800139c:	4603      	mov	r3, r0
 800139e:	461a      	mov	r2, r3
 80013a0:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <init_sd+0x170>)
 80013a2:	701a      	strb	r2, [r3, #0]
 80013a4:	4b0c      	ldr	r3, [pc, #48]	; (80013d8 <init_sd+0x170>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d102      	bne.n	80013b2 <init_sd+0x14a>
 80013ac:	7d7b      	ldrb	r3, [r7, #21]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1b7      	bne.n	8001322 <init_sd+0xba>
				}

			}
	}
	*file_count = cnt1;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80013b8:	801a      	strh	r2, [r3, #0]
	*log_count = cnt2;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 80013c0:	801a      	strh	r2, [r3, #0]
	if (DEBUG_PRINT == 1) printf("\n this is the %hu th flight. \n", *file_count);
	if (DEBUG_PRINT == 1) printf("\n this is the %hu th log file. \n", *log_count);
	return 1;
 80013c2:	2301      	movs	r3, #1
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3774      	adds	r7, #116	; 0x74
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd90      	pop	{r4, r7, pc}
 80013cc:	2000e198 	.word	0x2000e198
 80013d0:	200008a4 	.word	0x200008a4
 80013d4:	3fe00000 	.word	0x3fe00000
 80013d8:	20003940 	.word	0x20003940

080013dc <init_file>:

uint8_t init_file(char * FILE_NAME, char * LOG_NAME){
 80013dc:	b580      	push	{r7, lr}
 80013de:	b0e4      	sub	sp, #400	; 0x190
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	6018      	str	r0, [r3, #0]
 80013e6:	463b      	mov	r3, r7
 80013e8:	6019      	str	r1, [r3, #0]


	/**************** The following operation is using f_write and f_read **************************/

	/* Create second file with read write access and open it */
	fresult = f_open(&data_file, FILE_NAME, FA_CREATE_ALWAYS | FA_WRITE );
 80013ea:	1d3b      	adds	r3, r7, #4
 80013ec:	220a      	movs	r2, #10
 80013ee:	6819      	ldr	r1, [r3, #0]
 80013f0:	483c      	ldr	r0, [pc, #240]	; (80014e4 <init_file+0x108>)
 80013f2:	f00d fe51 	bl	800f098 <f_open>
 80013f6:	4603      	mov	r3, r0
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b3b      	ldr	r3, [pc, #236]	; (80014e8 <init_file+0x10c>)
 80013fc:	701a      	strb	r2, [r3, #0]

	if (fresult != FR_OK){
 80013fe:	4b3a      	ldr	r3, [pc, #232]	; (80014e8 <init_file+0x10c>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <init_file+0x2e>
		if (DEBUG_PRINT == 1) printf("trying to open datalog file, error-code: %d \n",fresult);
		return 0;
 8001406:	2300      	movs	r3, #0
 8001408:	e067      	b.n	80014da <init_file+0xfe>
	}
	/* Writing text */
	//char myData[] = "xyx,ghj,acceleration,target position\n 1000,231.25,10,500.5";
	char myData[] = "Time,Armed,Event,State2,h,v,H_SHT,T_SHT,T_CPU,T_BARO1,T_BARO2,T_IMU1,T_IMU2,P_BARO1,P_BARO2,Ax_IMU1,Ay_IMU1,Az_IMU1,Gx_IMU1,Gy_IMU1,Gz_IMU1,Ax_IMU2,Ay_IMU2,Az_IMU2,Gx_IMU2,Gy_IMU2,Gz_IMU2,Ax_H3L,Ay_H3L,Az_H3L,I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2\n";
 800140a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800140e:	4a37      	ldr	r2, [pc, #220]	; (80014ec <init_file+0x110>)
 8001410:	4618      	mov	r0, r3
 8001412:	4611      	mov	r1, r2
 8001414:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001418:	461a      	mov	r2, r3
 800141a:	f00f f88d 	bl	8010538 <memcpy>

	fresult = f_write(&data_file, myData, sizeof(myData), &bw);
 800141e:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8001422:	4b33      	ldr	r3, [pc, #204]	; (80014f0 <init_file+0x114>)
 8001424:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001428:	482e      	ldr	r0, [pc, #184]	; (80014e4 <init_file+0x108>)
 800142a:	f00e f960 	bl	800f6ee <f_write>
 800142e:	4603      	mov	r3, r0
 8001430:	461a      	mov	r2, r3
 8001432:	4b2d      	ldr	r3, [pc, #180]	; (80014e8 <init_file+0x10c>)
 8001434:	701a      	strb	r2, [r3, #0]
	/* Close file */
	f_close(&data_file);
 8001436:	482b      	ldr	r0, [pc, #172]	; (80014e4 <init_file+0x108>)
 8001438:	f00e fb6b 	bl	800fb12 <f_close>

	if (fresult != FR_OK){
 800143c:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <init_file+0x10c>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <init_file+0x6c>
		if (DEBUG_PRINT == 1) printf ("FLIGHT FILE not created, error-code: %d \n",fresult);
		return 0;
 8001444:	2300      	movs	r3, #0
 8001446:	e048      	b.n	80014da <init_file+0xfe>
	}
	//bufclear();

	HAL_Delay(100);
 8001448:	2064      	movs	r0, #100	; 0x64
 800144a:	f005 fec7 	bl	80071dc <HAL_Delay>

	/* Open file to write/ create a file if it doesn't exist */
	fresult = f_open(&log_file, LOG_NAME, FA_CREATE_NEW | FA_WRITE );
 800144e:	463b      	mov	r3, r7
 8001450:	2206      	movs	r2, #6
 8001452:	6819      	ldr	r1, [r3, #0]
 8001454:	4827      	ldr	r0, [pc, #156]	; (80014f4 <init_file+0x118>)
 8001456:	f00d fe1f 	bl	800f098 <f_open>
 800145a:	4603      	mov	r3, r0
 800145c:	461a      	mov	r2, r3
 800145e:	4b22      	ldr	r3, [pc, #136]	; (80014e8 <init_file+0x10c>)
 8001460:	701a      	strb	r2, [r3, #0]

	if (fresult != FR_OK){
 8001462:	4b21      	ldr	r3, [pc, #132]	; (80014e8 <init_file+0x10c>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <init_file+0x92>
		if (DEBUG_PRINT == 1) printf("trying to open setuplog file, error-code: %d \n",fresult);
		return 0;
 800146a:	2300      	movs	r3, #0
 800146c:	e035      	b.n	80014da <init_file+0xfe>

	/* Writing text */

	//sprintf(buffer,"time: %ld,SHT STATE: %d\n ,BARO1 STATE: %d\n ,BARO2 STATE: %d \n ,IMU1 STATE %d\n ,IMU2 STATE %d\n, H3L STATE %d\n",HAL_GetTick(), SHT_STATE,BARO1_STATE,BARO2_STATE,IMU1_STATE,IMU2_STATE,H3L_STATE);

	bw = 0;
 800146e:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <init_file+0x114>)
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
	char myLog[128];

	for (int i=0; i<128; i++)
 8001474:	2300      	movs	r3, #0
 8001476:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800147a:	e00b      	b.n	8001494 <init_file+0xb8>
	{
		myLog[i] = '\0';
 800147c:	f107 020c 	add.w	r2, r7, #12
 8001480:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001484:	4413      	add	r3, r2
 8001486:	2200      	movs	r2, #0
 8001488:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<128; i++)
 800148a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800148e:	3301      	adds	r3, #1
 8001490:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8001494:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001498:	2b7f      	cmp	r3, #127	; 0x7f
 800149a:	ddef      	ble.n	800147c <init_file+0xa0>
	}

	sprintf(myLog, "TIMESTAMP, STATE, MSG \n %ld, SD WRITE OK, file name: %s \n", HAL_GetTick(), FILE_NAME);
 800149c:	f005 fe92 	bl	80071c4 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	f107 000c 	add.w	r0, r7, #12
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4913      	ldr	r1, [pc, #76]	; (80014f8 <init_file+0x11c>)
 80014ac:	f00f fd30 	bl	8010f10 <siprintf>
	fresult = f_write(&log_file, myLog, sizeof(myLog), &bw);
 80014b0:	f107 010c 	add.w	r1, r7, #12
 80014b4:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <init_file+0x114>)
 80014b6:	2280      	movs	r2, #128	; 0x80
 80014b8:	480e      	ldr	r0, [pc, #56]	; (80014f4 <init_file+0x118>)
 80014ba:	f00e f918 	bl	800f6ee <f_write>
 80014be:	4603      	mov	r3, r0
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <init_file+0x10c>)
 80014c4:	701a      	strb	r2, [r3, #0]

	if (fresult != FR_OK){
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <init_file+0x10c>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <init_file+0xf6>
		if (DEBUG_PRINT == 1) printf ("LOG FILE not created, error-code: %d \n",fresult);
		return 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	e003      	b.n	80014da <init_file+0xfe>
	}

	/* Close file */
	f_close(&log_file);
 80014d2:	4808      	ldr	r0, [pc, #32]	; (80014f4 <init_file+0x118>)
 80014d4:	f00e fb1d 	bl	800fb12 <f_close>

	// clearing buffer to show that result obtained is from the file
	//bufclear();

	return 1;
 80014d8:	2301      	movs	r3, #1

}
 80014da:	4618      	mov	r0, r3
 80014dc:	f507 77c8 	add.w	r7, r7, #400	; 0x190
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	200018d8 	.word	0x200018d8
 80014e8:	20003940 	.word	0x20003940
 80014ec:	080161e4 	.word	0x080161e4
 80014f0:	2000393c 	.word	0x2000393c
 80014f4:	20003944 	.word	0x20003944
 80014f8:	080161a8 	.word	0x080161a8

080014fc <extract_from_str>:

float extract_from_str(char* buffer, uint8_t *start, uint8_t *end){
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b08e      	sub	sp, #56	; 0x38
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
	uint8_t x = *start;
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t y = *end;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    char c[30];
	for (int j=0; j<30; j++) {
 8001518:	2300      	movs	r3, #0
 800151a:	633b      	str	r3, [r7, #48]	; 0x30
 800151c:	e008      	b.n	8001530 <extract_from_str+0x34>
		c[j] = '\0';
 800151e:	f107 0210 	add.w	r2, r7, #16
 8001522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001524:	4413      	add	r3, r2
 8001526:	2200      	movs	r2, #0
 8001528:	701a      	strb	r2, [r3, #0]
	for (int j=0; j<30; j++) {
 800152a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800152c:	3301      	adds	r3, #1
 800152e:	633b      	str	r3, [r7, #48]	; 0x30
 8001530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001532:	2b1d      	cmp	r3, #29
 8001534:	ddf3      	ble.n	800151e <extract_from_str+0x22>
	}
	while (buffer[y] != ','){
 8001536:	e004      	b.n	8001542 <extract_from_str+0x46>
		y ++;
 8001538:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800153c:	3301      	adds	r3, #1
 800153e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	while (buffer[y] != ','){
 8001542:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	4413      	add	r3, r2
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b2c      	cmp	r3, #44	; 0x2c
 800154e:	d1f3      	bne.n	8001538 <extract_from_str+0x3c>
	}
	*end = y;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001556:	701a      	strb	r2, [r3, #0]
	strncpy(c, buffer + x, y - x);
 8001558:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	18d1      	adds	r1, r2, r3
 8001560:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001564:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	461a      	mov	r2, r3
 800156c:	f107 0310 	add.w	r3, r7, #16
 8001570:	4618      	mov	r0, r3
 8001572:	f00f fced 	bl	8010f50 <strncpy>

	return strtof(c,NULL);
 8001576:	f107 0310 	add.w	r3, r7, #16
 800157a:	2100      	movs	r1, #0
 800157c:	4618      	mov	r0, r3
 800157e:	f010 fb0f 	bl	8011ba0 <strtof>
 8001582:	eef0 7a40 	vmov.f32	s15, s0
}
 8001586:	eeb0 0a67 	vmov.f32	s0, s15
 800158a:	3738      	adds	r7, #56	; 0x38
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <read_from_SD>:

void read_from_SD(char * FILE_NAME, float * TIME, float * P1, float * P2, float * Ax1, float * Ay1, float * Az1, float * Ax2, float * Ay2, float * Az2){
 8001590:	b590      	push	{r4, r7, lr}
 8001592:	f2ad 4d3c 	subw	sp, sp, #1084	; 0x43c
 8001596:	af00      	add	r7, sp, #0
 8001598:	f107 040c 	add.w	r4, r7, #12
 800159c:	6020      	str	r0, [r4, #0]
 800159e:	f107 0008 	add.w	r0, r7, #8
 80015a2:	6001      	str	r1, [r0, #0]
 80015a4:	1d39      	adds	r1, r7, #4
 80015a6:	600a      	str	r2, [r1, #0]
 80015a8:	463a      	mov	r2, r7
 80015aa:	6013      	str	r3, [r2, #0]

	char buffer[FAKE_LINE_LEN];

	for (int i = 0; i < FAKE_FILE_LEN; i++){
 80015ac:	2300      	movs	r3, #0
 80015ae:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 80015b2:	e164      	b.n	800187e <read_from_SD+0x2ee>
	        f_gets(buffer, f_size(&fake_file), &fake_file);
 80015b4:	4bb9      	ldr	r3, [pc, #740]	; (800189c <read_from_SD+0x30c>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	4619      	mov	r1, r3
 80015ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015be:	4ab7      	ldr	r2, [pc, #732]	; (800189c <read_from_SD+0x30c>)
 80015c0:	4618      	mov	r0, r3
 80015c2:	f00e fe59 	bl	8010278 <f_gets>
	        printf("reading line: %d  \n",i);
 80015c6:	f8d7 1434 	ldr.w	r1, [r7, #1076]	; 0x434
 80015ca:	48b5      	ldr	r0, [pc, #724]	; (80018a0 <read_from_SD+0x310>)
 80015cc:	f00f fc24 	bl	8010e18 <iprintf>
	        uint8_t x = 0;
 80015d0:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80015d4:	2200      	movs	r2, #0
 80015d6:	701a      	strb	r2, [r3, #0]
	        uint8_t y = 0;
 80015d8:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]

			TIME[i] = extract_from_str(buffer, &x, &y);
 80015e0:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	f107 0208 	add.w	r2, r7, #8
 80015ea:	6812      	ldr	r2, [r2, #0]
 80015ec:	18d4      	adds	r4, r2, r3
 80015ee:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 80015f2:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 80015f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff ff7e 	bl	80014fc <extract_from_str>
 8001600:	eef0 7a40 	vmov.f32	s15, s0
 8001604:	edc4 7a00 	vstr	s15, [r4]

			x = y + 1;
 8001608:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	3301      	adds	r3, #1
 8001610:	b2da      	uxtb	r2, r3
 8001612:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8001616:	701a      	strb	r2, [r3, #0]
			y = y + 1;
 8001618:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	3301      	adds	r3, #1
 8001620:	b2da      	uxtb	r2, r3
 8001622:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001626:	701a      	strb	r2, [r3, #0]

			P1[i] = extract_from_str(buffer, &x, &y);
 8001628:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	1d3a      	adds	r2, r7, #4
 8001630:	6812      	ldr	r2, [r2, #0]
 8001632:	18d4      	adds	r4, r2, r3
 8001634:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 8001638:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 800163c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff5b 	bl	80014fc <extract_from_str>
 8001646:	eef0 7a40 	vmov.f32	s15, s0
 800164a:	edc4 7a00 	vstr	s15, [r4]

			x = y + 1;
 800164e:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	3301      	adds	r3, #1
 8001656:	b2da      	uxtb	r2, r3
 8001658:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800165c:	701a      	strb	r2, [r3, #0]
			y = y + 1;
 800165e:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	3301      	adds	r3, #1
 8001666:	b2da      	uxtb	r2, r3
 8001668:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800166c:	701a      	strb	r2, [r3, #0]

			P2[i] = extract_from_str(buffer, &x, &y);
 800166e:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	463a      	mov	r2, r7
 8001676:	6812      	ldr	r2, [r2, #0]
 8001678:	18d4      	adds	r4, r2, r3
 800167a:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 800167e:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 8001682:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff ff38 	bl	80014fc <extract_from_str>
 800168c:	eef0 7a40 	vmov.f32	s15, s0
 8001690:	edc4 7a00 	vstr	s15, [r4]

			x = y + 1;
 8001694:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	3301      	adds	r3, #1
 800169c:	b2da      	uxtb	r2, r3
 800169e:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80016a2:	701a      	strb	r2, [r3, #0]
			y = y + 1;
 80016a4:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	3301      	adds	r3, #1
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80016b2:	701a      	strb	r2, [r3, #0]

			Ax1[i] = extract_from_str(buffer, &x, &y);
 80016b4:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 80016be:	18d4      	adds	r4, r2, r3
 80016c0:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 80016c4:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 80016c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff15 	bl	80014fc <extract_from_str>
 80016d2:	eef0 7a40 	vmov.f32	s15, s0
 80016d6:	edc4 7a00 	vstr	s15, [r4]

			x = y + 1;
 80016da:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	3301      	adds	r3, #1
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80016e8:	701a      	strb	r2, [r3, #0]
			y = y + 1;
 80016ea:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	3301      	adds	r3, #1
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80016f8:	701a      	strb	r2, [r3, #0]

	 		Ay1[i] = extract_from_str(buffer, &x, &y);
 80016fa:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 8001704:	18d4      	adds	r4, r2, r3
 8001706:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 800170a:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 800170e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fef2 	bl	80014fc <extract_from_str>
 8001718:	eef0 7a40 	vmov.f32	s15, s0
 800171c:	edc4 7a00 	vstr	s15, [r4]

	 		x = y + 1;
 8001720:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	3301      	adds	r3, #1
 8001728:	b2da      	uxtb	r2, r3
 800172a:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800172e:	701a      	strb	r2, [r3, #0]
			y = y + 1;
 8001730:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	3301      	adds	r3, #1
 8001738:	b2da      	uxtb	r2, r3
 800173a:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800173e:	701a      	strb	r2, [r3, #0]

			Az1[i] = extract_from_str(buffer, &x, &y);
 8001740:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 800174a:	18d4      	adds	r4, r2, r3
 800174c:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 8001750:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 8001754:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fecf 	bl	80014fc <extract_from_str>
 800175e:	eef0 7a40 	vmov.f32	s15, s0
 8001762:	edc4 7a00 	vstr	s15, [r4]

			x = y + 1;
 8001766:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	3301      	adds	r3, #1
 800176e:	b2da      	uxtb	r2, r3
 8001770:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8001774:	701a      	strb	r2, [r3, #0]
			y = y + 1;
 8001776:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	3301      	adds	r3, #1
 800177e:	b2da      	uxtb	r2, r3
 8001780:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001784:	701a      	strb	r2, [r3, #0]

	 		Ax2[i] = extract_from_str(buffer, &x, &y);
 8001786:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 8001790:	18d4      	adds	r4, r2, r3
 8001792:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 8001796:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 800179a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff feac 	bl	80014fc <extract_from_str>
 80017a4:	eef0 7a40 	vmov.f32	s15, s0
 80017a8:	edc4 7a00 	vstr	s15, [r4]

	 		x = y + 1;
 80017ac:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	3301      	adds	r3, #1
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80017ba:	701a      	strb	r2, [r3, #0]
			y = y + 1;
 80017bc:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	3301      	adds	r3, #1
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80017ca:	701a      	strb	r2, [r3, #0]

	 		Ay2[i] = extract_from_str(buffer, &x, &y);
 80017cc:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 80017d6:	18d4      	adds	r4, r2, r3
 80017d8:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 80017dc:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 80017e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fe89 	bl	80014fc <extract_from_str>
 80017ea:	eef0 7a40 	vmov.f32	s15, s0
 80017ee:	edc4 7a00 	vstr	s15, [r4]

	 		x = y + 1;
 80017f2:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	3301      	adds	r3, #1
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8001800:	701a      	strb	r2, [r3, #0]
			y = y + 1;
 8001802:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	3301      	adds	r3, #1
 800180a:	b2da      	uxtb	r2, r3
 800180c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001810:	701a      	strb	r2, [r3, #0]

		    char c[30];

			for (int j=0; j<30; j++) {
 8001812:	2300      	movs	r3, #0
 8001814:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 8001818:	e00b      	b.n	8001832 <read_from_SD+0x2a2>
				c[j] = '\0';
 800181a:	f107 0210 	add.w	r2, r7, #16
 800181e:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8001822:	4413      	add	r3, r2
 8001824:	2200      	movs	r2, #0
 8001826:	701a      	strb	r2, [r3, #0]
			for (int j=0; j<30; j++) {
 8001828:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 800182c:	3301      	adds	r3, #1
 800182e:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 8001832:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8001836:	2b1d      	cmp	r3, #29
 8001838:	ddef      	ble.n	800181a <read_from_SD+0x28a>
			}

			strncpy(c, buffer + x, 10);
 800183a:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	461a      	mov	r2, r3
 8001842:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001846:	1899      	adds	r1, r3, r2
 8001848:	f107 0310 	add.w	r3, r7, #16
 800184c:	220a      	movs	r2, #10
 800184e:	4618      	mov	r0, r3
 8001850:	f00f fb7e 	bl	8010f50 <strncpy>

	 		Az2[i] = strtof(c,NULL);
 8001854:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	f8d7 245c 	ldr.w	r2, [r7, #1116]	; 0x45c
 800185e:	18d4      	adds	r4, r2, r3
 8001860:	f107 0310 	add.w	r3, r7, #16
 8001864:	2100      	movs	r1, #0
 8001866:	4618      	mov	r0, r3
 8001868:	f010 f99a 	bl	8011ba0 <strtof>
 800186c:	eef0 7a40 	vmov.f32	s15, s0
 8001870:	edc4 7a00 	vstr	s15, [r4]
	for (int i = 0; i < FAKE_FILE_LEN; i++){
 8001874:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8001878:	3301      	adds	r3, #1
 800187a:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 800187e:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8001882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001886:	f6ff ae95 	blt.w	80015b4 <read_from_SD+0x24>
	    }

		// Close file
		f_close(&fake_file);
 800188a:	4804      	ldr	r0, [pc, #16]	; (800189c <read_from_SD+0x30c>)
 800188c:	f00e f941 	bl	800fb12 <f_close>


}
 8001890:	bf00      	nop
 8001892:	f207 473c 	addw	r7, r7, #1084	; 0x43c
 8001896:	46bd      	mov	sp, r7
 8001898:	bd90      	pop	{r4, r7, pc}
 800189a:	bf00      	nop
 800189c:	2000290c 	.word	0x2000290c
 80018a0:	080162e4 	.word	0x080162e4

080018a4 <write_to_SD>:


void write_to_SD(char * FILE_NAME, char * buffer){
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
	char FILE_NAME[11];
	sprintf(FILE_NAME,"FL%05d.CSV",file_count);
	*/

	// Open the file with write access
	fresult = f_open(&data_file, FILE_NAME, FA_OPEN_ALWAYS | FA_WRITE);
 80018ae:	2212      	movs	r2, #18
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	481f      	ldr	r0, [pc, #124]	; (8001930 <write_to_SD+0x8c>)
 80018b4:	f00d fbf0 	bl	800f098 <f_open>
 80018b8:	4603      	mov	r3, r0
 80018ba:	461a      	mov	r2, r3
 80018bc:	4b1d      	ldr	r3, [pc, #116]	; (8001934 <write_to_SD+0x90>)
 80018be:	701a      	strb	r2, [r3, #0]



	if (fresult == FR_OK)
 80018c0:	4b1c      	ldr	r3, [pc, #112]	; (8001934 <write_to_SD+0x90>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d016      	beq.n	80018f6 <write_to_SD+0x52>
	} else {

		if (DEBUG_PRINT == 1) printf("error opening file for writing\n");
		if (DEBUG_PRINT == 1) printf("error: %d\n",fresult);

		fresult = f_mount(NULL, SDPath, 1);
 80018c8:	2201      	movs	r2, #1
 80018ca:	491b      	ldr	r1, [pc, #108]	; (8001938 <write_to_SD+0x94>)
 80018cc:	2000      	movs	r0, #0
 80018ce:	f00d fb9d 	bl	800f00c <f_mount>
 80018d2:	4603      	mov	r3, r0
 80018d4:	461a      	mov	r2, r3
 80018d6:	4b17      	ldr	r3, [pc, #92]	; (8001934 <write_to_SD+0x90>)
 80018d8:	701a      	strb	r2, [r3, #0]
		if (fresult == FR_OK) printf ("SD CARD UNMOUNTED successfully...\n");
 80018da:	4b16      	ldr	r3, [pc, #88]	; (8001934 <write_to_SD+0x90>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d102      	bne.n	80018e8 <write_to_SD+0x44>
 80018e2:	4816      	ldr	r0, [pc, #88]	; (800193c <write_to_SD+0x98>)
 80018e4:	f00f fb0c 	bl	8010f00 <puts>

		FRESULT ret = f_mount(&fs, SDPath, 1);
 80018e8:	2201      	movs	r2, #1
 80018ea:	4913      	ldr	r1, [pc, #76]	; (8001938 <write_to_SD+0x94>)
 80018ec:	4814      	ldr	r0, [pc, #80]	; (8001940 <write_to_SD+0x9c>)
 80018ee:	f00d fb8d 	bl	800f00c <f_mount>
 80018f2:	4603      	mov	r3, r0
 80018f4:	73fb      	strb	r3, [r7, #15]
			if (DEBUG_PRINT == 1) printf("error: %d\n",ret);
		}
	}

	// Move to offset to the end of the file
	fresult = f_lseek((&data_file),f_size(&data_file));
 80018f6:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <write_to_SD+0x8c>)
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	4619      	mov	r1, r3
 80018fc:	480c      	ldr	r0, [pc, #48]	; (8001930 <write_to_SD+0x8c>)
 80018fe:	f00e f932 	bl	800fb66 <f_lseek>
 8001902:	4603      	mov	r3, r0
 8001904:	461a      	mov	r2, r3
 8001906:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <write_to_SD+0x90>)
 8001908:	701a      	strb	r2, [r3, #0]

	// write the string to the file
	fresult = f_puts(buffer, &data_file);
 800190a:	4909      	ldr	r1, [pc, #36]	; (8001930 <write_to_SD+0x8c>)
 800190c:	6838      	ldr	r0, [r7, #0]
 800190e:	f00e fd68 	bl	80103e2 <f_puts>
 8001912:	4603      	mov	r3, r0
 8001914:	b2da      	uxtb	r2, r3
 8001916:	4b07      	ldr	r3, [pc, #28]	; (8001934 <write_to_SD+0x90>)
 8001918:	701a      	strb	r2, [r3, #0]

	// Close file
	f_close(&data_file);
 800191a:	4805      	ldr	r0, [pc, #20]	; (8001930 <write_to_SD+0x8c>)
 800191c:	f00e f8f9 	bl	800fb12 <f_close>

	bufclear(buffer);
 8001920:	6838      	ldr	r0, [r7, #0]
 8001922:	f7ff fc87 	bl	8001234 <bufclear>

}
 8001926:	bf00      	nop
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	200018d8 	.word	0x200018d8
 8001934:	20003940 	.word	0x20003940
 8001938:	2000e198 	.word	0x2000e198
 800193c:	080162f8 	.word	0x080162f8
 8001940:	200008a4 	.word	0x200008a4

08001944 <log_to_SD>:

void log_to_SD(char * FILE_NAME, char * buffer){
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
	char FILE_NAME[11];
	sprintf(FILE_NAME,"FL%05d.CSV",file_count);
	*/

	// Open the file with write access
	fresult = f_open(&log_file, FILE_NAME, FA_OPEN_ALWAYS | FA_WRITE);
 800194e:	2212      	movs	r2, #18
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	481f      	ldr	r0, [pc, #124]	; (80019d0 <log_to_SD+0x8c>)
 8001954:	f00d fba0 	bl	800f098 <f_open>
 8001958:	4603      	mov	r3, r0
 800195a:	461a      	mov	r2, r3
 800195c:	4b1d      	ldr	r3, [pc, #116]	; (80019d4 <log_to_SD+0x90>)
 800195e:	701a      	strb	r2, [r3, #0]



	if (fresult == FR_OK)
 8001960:	4b1c      	ldr	r3, [pc, #112]	; (80019d4 <log_to_SD+0x90>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d016      	beq.n	8001996 <log_to_SD+0x52>
	} else {

		if (DEBUG_PRINT == 1) printf("error opening log file for writing\n");
		if (DEBUG_PRINT == 1) printf("error: %d\n",fresult);

		fresult = f_mount(NULL, SDPath, 1);
 8001968:	2201      	movs	r2, #1
 800196a:	491b      	ldr	r1, [pc, #108]	; (80019d8 <log_to_SD+0x94>)
 800196c:	2000      	movs	r0, #0
 800196e:	f00d fb4d 	bl	800f00c <f_mount>
 8001972:	4603      	mov	r3, r0
 8001974:	461a      	mov	r2, r3
 8001976:	4b17      	ldr	r3, [pc, #92]	; (80019d4 <log_to_SD+0x90>)
 8001978:	701a      	strb	r2, [r3, #0]
		if (fresult == FR_OK) printf ("SD CARD UNMOUNTED successfully...\n");
 800197a:	4b16      	ldr	r3, [pc, #88]	; (80019d4 <log_to_SD+0x90>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d102      	bne.n	8001988 <log_to_SD+0x44>
 8001982:	4816      	ldr	r0, [pc, #88]	; (80019dc <log_to_SD+0x98>)
 8001984:	f00f fabc 	bl	8010f00 <puts>

		FRESULT ret = f_mount(&fs, SDPath, 1);
 8001988:	2201      	movs	r2, #1
 800198a:	4913      	ldr	r1, [pc, #76]	; (80019d8 <log_to_SD+0x94>)
 800198c:	4814      	ldr	r0, [pc, #80]	; (80019e0 <log_to_SD+0x9c>)
 800198e:	f00d fb3d 	bl	800f00c <f_mount>
 8001992:	4603      	mov	r3, r0
 8001994:	73fb      	strb	r3, [r7, #15]
			if (DEBUG_PRINT == 1) printf("error: %d\n",ret);
		}
	}

	// Move to offset to the end of the file
	fresult = f_lseek((&log_file),f_size(&log_file));
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <log_to_SD+0x8c>)
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	4619      	mov	r1, r3
 800199c:	480c      	ldr	r0, [pc, #48]	; (80019d0 <log_to_SD+0x8c>)
 800199e:	f00e f8e2 	bl	800fb66 <f_lseek>
 80019a2:	4603      	mov	r3, r0
 80019a4:	461a      	mov	r2, r3
 80019a6:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <log_to_SD+0x90>)
 80019a8:	701a      	strb	r2, [r3, #0]

	// write the string to the file
	fresult = f_puts(buffer, &log_file);
 80019aa:	4909      	ldr	r1, [pc, #36]	; (80019d0 <log_to_SD+0x8c>)
 80019ac:	6838      	ldr	r0, [r7, #0]
 80019ae:	f00e fd18 	bl	80103e2 <f_puts>
 80019b2:	4603      	mov	r3, r0
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <log_to_SD+0x90>)
 80019b8:	701a      	strb	r2, [r3, #0]

	// Close file
	f_close(&log_file);
 80019ba:	4805      	ldr	r0, [pc, #20]	; (80019d0 <log_to_SD+0x8c>)
 80019bc:	f00e f8a9 	bl	800fb12 <f_close>

	bufclear(buffer);
 80019c0:	6838      	ldr	r0, [r7, #0]
 80019c2:	f7ff fc37 	bl	8001234 <bufclear>

}
 80019c6:	bf00      	nop
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20003944 	.word	0x20003944
 80019d4:	20003940 	.word	0x20003940
 80019d8:	2000e198 	.word	0x2000e198
 80019dc:	080162f8 	.word	0x080162f8
 80019e0:	200008a4 	.word	0x200008a4

080019e4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80019ea:	463b      	mov	r3, r7
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80019f6:	4b52      	ldr	r3, [pc, #328]	; (8001b40 <MX_ADC1_Init+0x15c>)
 80019f8:	4a52      	ldr	r2, [pc, #328]	; (8001b44 <MX_ADC1_Init+0x160>)
 80019fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80019fc:	4b50      	ldr	r3, [pc, #320]	; (8001b40 <MX_ADC1_Init+0x15c>)
 80019fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a02:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a04:	4b4e      	ldr	r3, [pc, #312]	; (8001b40 <MX_ADC1_Init+0x15c>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001a0a:	4b4d      	ldr	r3, [pc, #308]	; (8001b40 <MX_ADC1_Init+0x15c>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001a10:	4b4b      	ldr	r3, [pc, #300]	; (8001b40 <MX_ADC1_Init+0x15c>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a16:	4b4a      	ldr	r3, [pc, #296]	; (8001b40 <MX_ADC1_Init+0x15c>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a1e:	4b48      	ldr	r3, [pc, #288]	; (8001b40 <MX_ADC1_Init+0x15c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a24:	4b46      	ldr	r3, [pc, #280]	; (8001b40 <MX_ADC1_Init+0x15c>)
 8001a26:	4a48      	ldr	r2, [pc, #288]	; (8001b48 <MX_ADC1_Init+0x164>)
 8001a28:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a2a:	4b45      	ldr	r3, [pc, #276]	; (8001b40 <MX_ADC1_Init+0x15c>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8001a30:	4b43      	ldr	r3, [pc, #268]	; (8001b40 <MX_ADC1_Init+0x15c>)
 8001a32:	2208      	movs	r2, #8
 8001a34:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001a36:	4b42      	ldr	r3, [pc, #264]	; (8001b40 <MX_ADC1_Init+0x15c>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a3e:	4b40      	ldr	r3, [pc, #256]	; (8001b40 <MX_ADC1_Init+0x15c>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a44:	483e      	ldr	r0, [pc, #248]	; (8001b40 <MX_ADC1_Init+0x15c>)
 8001a46:	f005 fbeb 	bl	8007220 <HAL_ADC_Init>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001a50:	f000 fe06 	bl	8002660 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001a5c:	2307      	movs	r3, #7
 8001a5e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a60:	463b      	mov	r3, r7
 8001a62:	4619      	mov	r1, r3
 8001a64:	4836      	ldr	r0, [pc, #216]	; (8001b40 <MX_ADC1_Init+0x15c>)
 8001a66:	f005 fd79 	bl	800755c <HAL_ADC_ConfigChannel>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001a70:	f000 fdf6 	bl	8002660 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001a74:	2301      	movs	r3, #1
 8001a76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a7c:	463b      	mov	r3, r7
 8001a7e:	4619      	mov	r1, r3
 8001a80:	482f      	ldr	r0, [pc, #188]	; (8001b40 <MX_ADC1_Init+0x15c>)
 8001a82:	f005 fd6b 	bl	800755c <HAL_ADC_ConfigChannel>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001a8c:	f000 fde8 	bl	8002660 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001a90:	2302      	movs	r3, #2
 8001a92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001a94:	2303      	movs	r3, #3
 8001a96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a98:	463b      	mov	r3, r7
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4828      	ldr	r0, [pc, #160]	; (8001b40 <MX_ADC1_Init+0x15c>)
 8001a9e:	f005 fd5d 	bl	800755c <HAL_ADC_ConfigChannel>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001aa8:	f000 fdda 	bl	8002660 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001aac:	230a      	movs	r3, #10
 8001aae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001ab0:	2304      	movs	r3, #4
 8001ab2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ab4:	463b      	mov	r3, r7
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4821      	ldr	r0, [pc, #132]	; (8001b40 <MX_ADC1_Init+0x15c>)
 8001aba:	f005 fd4f 	bl	800755c <HAL_ADC_ConfigChannel>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001ac4:	f000 fdcc 	bl	8002660 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001ac8:	230b      	movs	r3, #11
 8001aca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001acc:	2305      	movs	r3, #5
 8001ace:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ad0:	463b      	mov	r3, r7
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	481a      	ldr	r0, [pc, #104]	; (8001b40 <MX_ADC1_Init+0x15c>)
 8001ad6:	f005 fd41 	bl	800755c <HAL_ADC_ConfigChannel>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001ae0:	f000 fdbe 	bl	8002660 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001ae4:	230c      	movs	r3, #12
 8001ae6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001ae8:	2306      	movs	r3, #6
 8001aea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aec:	463b      	mov	r3, r7
 8001aee:	4619      	mov	r1, r3
 8001af0:	4813      	ldr	r0, [pc, #76]	; (8001b40 <MX_ADC1_Init+0x15c>)
 8001af2:	f005 fd33 	bl	800755c <HAL_ADC_ConfigChannel>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001afc:	f000 fdb0 	bl	8002660 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001b00:	230d      	movs	r3, #13
 8001b02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001b04:	2307      	movs	r3, #7
 8001b06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b08:	463b      	mov	r3, r7
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	480c      	ldr	r0, [pc, #48]	; (8001b40 <MX_ADC1_Init+0x15c>)
 8001b0e:	f005 fd25 	bl	800755c <HAL_ADC_ConfigChannel>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001b18:	f000 fda2 	bl	8002660 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001b1c:	2310      	movs	r3, #16
 8001b1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001b20:	2308      	movs	r3, #8
 8001b22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b24:	463b      	mov	r3, r7
 8001b26:	4619      	mov	r1, r3
 8001b28:	4805      	ldr	r0, [pc, #20]	; (8001b40 <MX_ADC1_Init+0x15c>)
 8001b2a:	f005 fd17 	bl	800755c <HAL_ADC_ConfigChannel>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001b34:	f000 fd94 	bl	8002660 <Error_Handler>
  }

}
 8001b38:	bf00      	nop
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20004974 	.word	0x20004974
 8001b44:	40012000 	.word	0x40012000
 8001b48:	0f000001 	.word	0x0f000001

08001b4c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08a      	sub	sp, #40	; 0x28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
 8001b60:	60da      	str	r2, [r3, #12]
 8001b62:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a3c      	ldr	r2, [pc, #240]	; (8001c5c <HAL_ADC_MspInit+0x110>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d171      	bne.n	8001c52 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	4b3b      	ldr	r3, [pc, #236]	; (8001c60 <HAL_ADC_MspInit+0x114>)
 8001b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b76:	4a3a      	ldr	r2, [pc, #232]	; (8001c60 <HAL_ADC_MspInit+0x114>)
 8001b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b7e:	4b38      	ldr	r3, [pc, #224]	; (8001c60 <HAL_ADC_MspInit+0x114>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b86:	613b      	str	r3, [r7, #16]
 8001b88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	4b34      	ldr	r3, [pc, #208]	; (8001c60 <HAL_ADC_MspInit+0x114>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	4a33      	ldr	r2, [pc, #204]	; (8001c60 <HAL_ADC_MspInit+0x114>)
 8001b94:	f043 0304 	orr.w	r3, r3, #4
 8001b98:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9a:	4b31      	ldr	r3, [pc, #196]	; (8001c60 <HAL_ADC_MspInit+0x114>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	f003 0304 	and.w	r3, r3, #4
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60bb      	str	r3, [r7, #8]
 8001baa:	4b2d      	ldr	r3, [pc, #180]	; (8001c60 <HAL_ADC_MspInit+0x114>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	4a2c      	ldr	r2, [pc, #176]	; (8001c60 <HAL_ADC_MspInit+0x114>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb6:	4b2a      	ldr	r3, [pc, #168]	; (8001c60 <HAL_ADC_MspInit+0x114>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	60bb      	str	r3, [r7, #8]
 8001bc0:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> ADC1_IN13
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001bc2:	230f      	movs	r3, #15
 8001bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bce:	f107 0314 	add.w	r3, r7, #20
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4823      	ldr	r0, [pc, #140]	; (8001c64 <HAL_ADC_MspInit+0x118>)
 8001bd6:	f006 fc7f 	bl	80084d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001bda:	2307      	movs	r3, #7
 8001bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bde:	2303      	movs	r3, #3
 8001be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be6:	f107 0314 	add.w	r3, r7, #20
 8001bea:	4619      	mov	r1, r3
 8001bec:	481e      	ldr	r0, [pc, #120]	; (8001c68 <HAL_ADC_MspInit+0x11c>)
 8001bee:	f006 fc73 	bl	80084d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001bf2:	4b1e      	ldr	r3, [pc, #120]	; (8001c6c <HAL_ADC_MspInit+0x120>)
 8001bf4:	4a1e      	ldr	r2, [pc, #120]	; (8001c70 <HAL_ADC_MspInit+0x124>)
 8001bf6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001bf8:	4b1c      	ldr	r3, [pc, #112]	; (8001c6c <HAL_ADC_MspInit+0x120>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bfe:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <HAL_ADC_MspInit+0x120>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c04:	4b19      	ldr	r3, [pc, #100]	; (8001c6c <HAL_ADC_MspInit+0x120>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c0a:	4b18      	ldr	r3, [pc, #96]	; (8001c6c <HAL_ADC_MspInit+0x120>)
 8001c0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c10:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c12:	4b16      	ldr	r3, [pc, #88]	; (8001c6c <HAL_ADC_MspInit+0x120>)
 8001c14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c18:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c1a:	4b14      	ldr	r3, [pc, #80]	; (8001c6c <HAL_ADC_MspInit+0x120>)
 8001c1c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c20:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c22:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <HAL_ADC_MspInit+0x120>)
 8001c24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c28:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c2a:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <HAL_ADC_MspInit+0x120>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c30:	4b0e      	ldr	r3, [pc, #56]	; (8001c6c <HAL_ADC_MspInit+0x120>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c36:	480d      	ldr	r0, [pc, #52]	; (8001c6c <HAL_ADC_MspInit+0x120>)
 8001c38:	f006 f842 	bl	8007cc0 <HAL_DMA_Init>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001c42:	f000 fd0d 	bl	8002660 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a08      	ldr	r2, [pc, #32]	; (8001c6c <HAL_ADC_MspInit+0x120>)
 8001c4a:	639a      	str	r2, [r3, #56]	; 0x38
 8001c4c:	4a07      	ldr	r2, [pc, #28]	; (8001c6c <HAL_ADC_MspInit+0x120>)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001c52:	bf00      	nop
 8001c54:	3728      	adds	r7, #40	; 0x28
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40012000 	.word	0x40012000
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40020800 	.word	0x40020800
 8001c68:	40020000 	.word	0x40020000
 8001c6c:	200049bc 	.word	0x200049bc
 8001c70:	40026410 	.word	0x40026410

08001c74 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <DWT_Delay_us+0x3c>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8001c82:	f008 fadb 	bl	800a23c <HAL_RCC_GetHCLKFreq>
 8001c86:	4602      	mov	r2, r0
 8001c88:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <DWT_Delay_us+0x40>)
 8001c8a:	fba3 2302 	umull	r2, r3, r3, r2
 8001c8e:	0c9b      	lsrs	r3, r3, #18
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	fb02 f303 	mul.w	r3, r2, r3
 8001c96:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8001c98:	bf00      	nop
 8001c9a:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <DWT_Delay_us+0x3c>)
 8001c9c:	685a      	ldr	r2, [r3, #4]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	1ad2      	subs	r2, r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d3f8      	bcc.n	8001c9a <DWT_Delay_us+0x26>
}
 8001ca8:	bf00      	nop
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	e0001000 	.word	0xe0001000
 8001cb4:	431bde83 	.word	0x431bde83

08001cb8 <play>:
float eighth = 256.0;
float fourth = 512.0;


void play(float freq, float time)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	ed87 0a01 	vstr	s0, [r7, #4]
 8001cc2:	edc7 0a00 	vstr	s1, [r7]
	float value = 0.0;
 8001cc6:	f04f 0300 	mov.w	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]
	while(value < time){
 8001ccc:	e01b      	b.n	8001d06 <play+0x4e>
		HAL_GPIO_TogglePin(BUZ_GPIO_Port, BUZ_Pin);
 8001cce:	2120      	movs	r1, #32
 8001cd0:	4816      	ldr	r0, [pc, #88]	; (8001d2c <play+0x74>)
 8001cd2:	f006 fdcc 	bl	800886e <HAL_GPIO_TogglePin>
		DWT_Delay_us (1000*1000/freq);
 8001cd6:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001d30 <play+0x78>
 8001cda:	ed97 7a01 	vldr	s14, [r7, #4]
 8001cde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ce2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ce6:	ee17 0a90 	vmov	r0, s15
 8001cea:	f7ff ffc3 	bl	8001c74 <DWT_Delay_us>
		value += 1000/freq;
 8001cee:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001d34 <play+0x7c>
 8001cf2:	ed97 7a01 	vldr	s14, [r7, #4]
 8001cf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cfa:	ed97 7a03 	vldr	s14, [r7, #12]
 8001cfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d02:	edc7 7a03 	vstr	s15, [r7, #12]
	while(value < time){
 8001d06:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d0a:	edd7 7a00 	vldr	s15, [r7]
 8001d0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d16:	d4da      	bmi.n	8001cce <play+0x16>
	}
	HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	2120      	movs	r1, #32
 8001d1c:	4803      	ldr	r0, [pc, #12]	; (8001d2c <play+0x74>)
 8001d1e:	f006 fd8d 	bl	800883c <HAL_GPIO_WritePin>
};
 8001d22:	bf00      	nop
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40020800 	.word	0x40020800
 8001d30:	49742400 	.word	0x49742400
 8001d34:	447a0000 	.word	0x447a0000

08001d38 <take_on_me>:

void take_on_me(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
	play(2 * Fis,sixteenth);
 8001d3c:	4be0      	ldr	r3, [pc, #896]	; (80020c0 <take_on_me+0x388>)
 8001d3e:	edd3 7a00 	vldr	s15, [r3]
 8001d42:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d46:	4bdf      	ldr	r3, [pc, #892]	; (80020c4 <take_on_me+0x38c>)
 8001d48:	ed93 7a00 	vldr	s14, [r3]
 8001d4c:	eef0 0a47 	vmov.f32	s1, s14
 8001d50:	eeb0 0a67 	vmov.f32	s0, s15
 8001d54:	f7ff ffb0 	bl	8001cb8 <play>
	HAL_Delay(sixteenth);
 8001d58:	4bda      	ldr	r3, [pc, #872]	; (80020c4 <take_on_me+0x38c>)
 8001d5a:	edd3 7a00 	vldr	s15, [r3]
 8001d5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d62:	ee17 0a90 	vmov	r0, s15
 8001d66:	f005 fa39 	bl	80071dc <HAL_Delay>
	play(2 * Fis,sixteenth);
 8001d6a:	4bd5      	ldr	r3, [pc, #852]	; (80020c0 <take_on_me+0x388>)
 8001d6c:	edd3 7a00 	vldr	s15, [r3]
 8001d70:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d74:	4bd3      	ldr	r3, [pc, #844]	; (80020c4 <take_on_me+0x38c>)
 8001d76:	ed93 7a00 	vldr	s14, [r3]
 8001d7a:	eef0 0a47 	vmov.f32	s1, s14
 8001d7e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d82:	f7ff ff99 	bl	8001cb8 <play>
	HAL_Delay(sixteenth);
 8001d86:	4bcf      	ldr	r3, [pc, #828]	; (80020c4 <take_on_me+0x38c>)
 8001d88:	edd3 7a00 	vldr	s15, [r3]
 8001d8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d90:	ee17 0a90 	vmov	r0, s15
 8001d94:	f005 fa22 	bl	80071dc <HAL_Delay>
	play(2 * D,eighth);
 8001d98:	4bcb      	ldr	r3, [pc, #812]	; (80020c8 <take_on_me+0x390>)
 8001d9a:	edd3 7a00 	vldr	s15, [r3]
 8001d9e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001da2:	4bca      	ldr	r3, [pc, #808]	; (80020cc <take_on_me+0x394>)
 8001da4:	ed93 7a00 	vldr	s14, [r3]
 8001da8:	eef0 0a47 	vmov.f32	s1, s14
 8001dac:	eeb0 0a67 	vmov.f32	s0, s15
 8001db0:	f7ff ff82 	bl	8001cb8 <play>
	play(B,eighth);
 8001db4:	4bc6      	ldr	r3, [pc, #792]	; (80020d0 <take_on_me+0x398>)
 8001db6:	edd3 7a00 	vldr	s15, [r3]
 8001dba:	4bc4      	ldr	r3, [pc, #784]	; (80020cc <take_on_me+0x394>)
 8001dbc:	ed93 7a00 	vldr	s14, [r3]
 8001dc0:	eef0 0a47 	vmov.f32	s1, s14
 8001dc4:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc8:	f7ff ff76 	bl	8001cb8 <play>
	HAL_Delay(eighth);
 8001dcc:	4bbf      	ldr	r3, [pc, #764]	; (80020cc <take_on_me+0x394>)
 8001dce:	edd3 7a00 	vldr	s15, [r3]
 8001dd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dd6:	ee17 0a90 	vmov	r0, s15
 8001dda:	f005 f9ff 	bl	80071dc <HAL_Delay>
	play(B,eighth);
 8001dde:	4bbc      	ldr	r3, [pc, #752]	; (80020d0 <take_on_me+0x398>)
 8001de0:	edd3 7a00 	vldr	s15, [r3]
 8001de4:	4bb9      	ldr	r3, [pc, #740]	; (80020cc <take_on_me+0x394>)
 8001de6:	ed93 7a00 	vldr	s14, [r3]
 8001dea:	eef0 0a47 	vmov.f32	s1, s14
 8001dee:	eeb0 0a67 	vmov.f32	s0, s15
 8001df2:	f7ff ff61 	bl	8001cb8 <play>
	HAL_Delay(eighth);
 8001df6:	4bb5      	ldr	r3, [pc, #724]	; (80020cc <take_on_me+0x394>)
 8001df8:	edd3 7a00 	vldr	s15, [r3]
 8001dfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e00:	ee17 0a90 	vmov	r0, s15
 8001e04:	f005 f9ea 	bl	80071dc <HAL_Delay>
	play(2 * E,eighth);
 8001e08:	4bb2      	ldr	r3, [pc, #712]	; (80020d4 <take_on_me+0x39c>)
 8001e0a:	edd3 7a00 	vldr	s15, [r3]
 8001e0e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e12:	4bae      	ldr	r3, [pc, #696]	; (80020cc <take_on_me+0x394>)
 8001e14:	ed93 7a00 	vldr	s14, [r3]
 8001e18:	eef0 0a47 	vmov.f32	s1, s14
 8001e1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e20:	f7ff ff4a 	bl	8001cb8 <play>
	HAL_Delay(eighth);
 8001e24:	4ba9      	ldr	r3, [pc, #676]	; (80020cc <take_on_me+0x394>)
 8001e26:	edd3 7a00 	vldr	s15, [r3]
 8001e2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e2e:	ee17 0a90 	vmov	r0, s15
 8001e32:	f005 f9d3 	bl	80071dc <HAL_Delay>
	play(2 * E,eighth);
 8001e36:	4ba7      	ldr	r3, [pc, #668]	; (80020d4 <take_on_me+0x39c>)
 8001e38:	edd3 7a00 	vldr	s15, [r3]
 8001e3c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e40:	4ba2      	ldr	r3, [pc, #648]	; (80020cc <take_on_me+0x394>)
 8001e42:	ed93 7a00 	vldr	s14, [r3]
 8001e46:	eef0 0a47 	vmov.f32	s1, s14
 8001e4a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e4e:	f7ff ff33 	bl	8001cb8 <play>
	HAL_Delay(eighth);
 8001e52:	4b9e      	ldr	r3, [pc, #632]	; (80020cc <take_on_me+0x394>)
 8001e54:	edd3 7a00 	vldr	s15, [r3]
 8001e58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e5c:	ee17 0a90 	vmov	r0, s15
 8001e60:	f005 f9bc 	bl	80071dc <HAL_Delay>
	play(2 * E,eighth);
 8001e64:	4b9b      	ldr	r3, [pc, #620]	; (80020d4 <take_on_me+0x39c>)
 8001e66:	edd3 7a00 	vldr	s15, [r3]
 8001e6a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e6e:	4b97      	ldr	r3, [pc, #604]	; (80020cc <take_on_me+0x394>)
 8001e70:	ed93 7a00 	vldr	s14, [r3]
 8001e74:	eef0 0a47 	vmov.f32	s1, s14
 8001e78:	eeb0 0a67 	vmov.f32	s0, s15
 8001e7c:	f7ff ff1c 	bl	8001cb8 <play>
	play(2 * Gis,sixteenth);
 8001e80:	4b95      	ldr	r3, [pc, #596]	; (80020d8 <take_on_me+0x3a0>)
 8001e82:	edd3 7a00 	vldr	s15, [r3]
 8001e86:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e8a:	4b8e      	ldr	r3, [pc, #568]	; (80020c4 <take_on_me+0x38c>)
 8001e8c:	ed93 7a00 	vldr	s14, [r3]
 8001e90:	eef0 0a47 	vmov.f32	s1, s14
 8001e94:	eeb0 0a67 	vmov.f32	s0, s15
 8001e98:	f7ff ff0e 	bl	8001cb8 <play>
	HAL_Delay(sixteenth);
 8001e9c:	4b89      	ldr	r3, [pc, #548]	; (80020c4 <take_on_me+0x38c>)
 8001e9e:	edd3 7a00 	vldr	s15, [r3]
 8001ea2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ea6:	ee17 0a90 	vmov	r0, s15
 8001eaa:	f005 f997 	bl	80071dc <HAL_Delay>
	play(2 * Gis,sixteenth);
 8001eae:	4b8a      	ldr	r3, [pc, #552]	; (80020d8 <take_on_me+0x3a0>)
 8001eb0:	edd3 7a00 	vldr	s15, [r3]
 8001eb4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001eb8:	4b82      	ldr	r3, [pc, #520]	; (80020c4 <take_on_me+0x38c>)
 8001eba:	ed93 7a00 	vldr	s14, [r3]
 8001ebe:	eef0 0a47 	vmov.f32	s1, s14
 8001ec2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec6:	f7ff fef7 	bl	8001cb8 <play>
	HAL_Delay(sixteenth);
 8001eca:	4b7e      	ldr	r3, [pc, #504]	; (80020c4 <take_on_me+0x38c>)
 8001ecc:	edd3 7a00 	vldr	s15, [r3]
 8001ed0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ed4:	ee17 0a90 	vmov	r0, s15
 8001ed8:	f005 f980 	bl	80071dc <HAL_Delay>
	play(2 * A,eighth);
 8001edc:	4b7f      	ldr	r3, [pc, #508]	; (80020dc <take_on_me+0x3a4>)
 8001ede:	edd3 7a00 	vldr	s15, [r3]
 8001ee2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ee6:	4b79      	ldr	r3, [pc, #484]	; (80020cc <take_on_me+0x394>)
 8001ee8:	ed93 7a00 	vldr	s14, [r3]
 8001eec:	eef0 0a47 	vmov.f32	s1, s14
 8001ef0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ef4:	f7ff fee0 	bl	8001cb8 <play>
	play(4 * Cis,eighth);
 8001ef8:	4b79      	ldr	r3, [pc, #484]	; (80020e0 <take_on_me+0x3a8>)
 8001efa:	edd3 7a00 	vldr	s15, [r3]
 8001efe:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001f02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f06:	4b71      	ldr	r3, [pc, #452]	; (80020cc <take_on_me+0x394>)
 8001f08:	ed93 7a00 	vldr	s14, [r3]
 8001f0c:	eef0 0a47 	vmov.f32	s1, s14
 8001f10:	eeb0 0a67 	vmov.f32	s0, s15
 8001f14:	f7ff fed0 	bl	8001cb8 <play>
	play(2 * A,sixteenth);
 8001f18:	4b70      	ldr	r3, [pc, #448]	; (80020dc <take_on_me+0x3a4>)
 8001f1a:	edd3 7a00 	vldr	s15, [r3]
 8001f1e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f22:	4b68      	ldr	r3, [pc, #416]	; (80020c4 <take_on_me+0x38c>)
 8001f24:	ed93 7a00 	vldr	s14, [r3]
 8001f28:	eef0 0a47 	vmov.f32	s1, s14
 8001f2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f30:	f7ff fec2 	bl	8001cb8 <play>
	HAL_Delay(sixteenth);
 8001f34:	4b63      	ldr	r3, [pc, #396]	; (80020c4 <take_on_me+0x38c>)
 8001f36:	edd3 7a00 	vldr	s15, [r3]
 8001f3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f3e:	ee17 0a90 	vmov	r0, s15
 8001f42:	f005 f94b 	bl	80071dc <HAL_Delay>
	play(2 * A,sixteenth);
 8001f46:	4b65      	ldr	r3, [pc, #404]	; (80020dc <take_on_me+0x3a4>)
 8001f48:	edd3 7a00 	vldr	s15, [r3]
 8001f4c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f50:	4b5c      	ldr	r3, [pc, #368]	; (80020c4 <take_on_me+0x38c>)
 8001f52:	ed93 7a00 	vldr	s14, [r3]
 8001f56:	eef0 0a47 	vmov.f32	s1, s14
 8001f5a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f5e:	f7ff feab 	bl	8001cb8 <play>
	HAL_Delay(sixteenth);
 8001f62:	4b58      	ldr	r3, [pc, #352]	; (80020c4 <take_on_me+0x38c>)
 8001f64:	edd3 7a00 	vldr	s15, [r3]
 8001f68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f6c:	ee17 0a90 	vmov	r0, s15
 8001f70:	f005 f934 	bl	80071dc <HAL_Delay>
	play(2 * A,sixteenth);
 8001f74:	4b59      	ldr	r3, [pc, #356]	; (80020dc <take_on_me+0x3a4>)
 8001f76:	edd3 7a00 	vldr	s15, [r3]
 8001f7a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f7e:	4b51      	ldr	r3, [pc, #324]	; (80020c4 <take_on_me+0x38c>)
 8001f80:	ed93 7a00 	vldr	s14, [r3]
 8001f84:	eef0 0a47 	vmov.f32	s1, s14
 8001f88:	eeb0 0a67 	vmov.f32	s0, s15
 8001f8c:	f7ff fe94 	bl	8001cb8 <play>
	HAL_Delay(sixteenth);
 8001f90:	4b4c      	ldr	r3, [pc, #304]	; (80020c4 <take_on_me+0x38c>)
 8001f92:	edd3 7a00 	vldr	s15, [r3]
 8001f96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f9a:	ee17 0a90 	vmov	r0, s15
 8001f9e:	f005 f91d 	bl	80071dc <HAL_Delay>
	play(2 * E,eighth);
 8001fa2:	4b4c      	ldr	r3, [pc, #304]	; (80020d4 <take_on_me+0x39c>)
 8001fa4:	edd3 7a00 	vldr	s15, [r3]
 8001fa8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001fac:	4b47      	ldr	r3, [pc, #284]	; (80020cc <take_on_me+0x394>)
 8001fae:	ed93 7a00 	vldr	s14, [r3]
 8001fb2:	eef0 0a47 	vmov.f32	s1, s14
 8001fb6:	eeb0 0a67 	vmov.f32	s0, s15
 8001fba:	f7ff fe7d 	bl	8001cb8 <play>
	HAL_Delay(eighth);
 8001fbe:	4b43      	ldr	r3, [pc, #268]	; (80020cc <take_on_me+0x394>)
 8001fc0:	edd3 7a00 	vldr	s15, [r3]
 8001fc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fc8:	ee17 0a90 	vmov	r0, s15
 8001fcc:	f005 f906 	bl	80071dc <HAL_Delay>
	play(2 * D,eighth);
 8001fd0:	4b3d      	ldr	r3, [pc, #244]	; (80020c8 <take_on_me+0x390>)
 8001fd2:	edd3 7a00 	vldr	s15, [r3]
 8001fd6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001fda:	4b3c      	ldr	r3, [pc, #240]	; (80020cc <take_on_me+0x394>)
 8001fdc:	ed93 7a00 	vldr	s14, [r3]
 8001fe0:	eef0 0a47 	vmov.f32	s1, s14
 8001fe4:	eeb0 0a67 	vmov.f32	s0, s15
 8001fe8:	f7ff fe66 	bl	8001cb8 <play>
	HAL_Delay(eighth);
 8001fec:	4b37      	ldr	r3, [pc, #220]	; (80020cc <take_on_me+0x394>)
 8001fee:	edd3 7a00 	vldr	s15, [r3]
 8001ff2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ff6:	ee17 0a90 	vmov	r0, s15
 8001ffa:	f005 f8ef 	bl	80071dc <HAL_Delay>
	play(2 * Fis,eighth);
 8001ffe:	4b30      	ldr	r3, [pc, #192]	; (80020c0 <take_on_me+0x388>)
 8002000:	edd3 7a00 	vldr	s15, [r3]
 8002004:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002008:	4b30      	ldr	r3, [pc, #192]	; (80020cc <take_on_me+0x394>)
 800200a:	ed93 7a00 	vldr	s14, [r3]
 800200e:	eef0 0a47 	vmov.f32	s1, s14
 8002012:	eeb0 0a67 	vmov.f32	s0, s15
 8002016:	f7ff fe4f 	bl	8001cb8 <play>
	HAL_Delay(eighth);
 800201a:	4b2c      	ldr	r3, [pc, #176]	; (80020cc <take_on_me+0x394>)
 800201c:	edd3 7a00 	vldr	s15, [r3]
 8002020:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002024:	ee17 0a90 	vmov	r0, s15
 8002028:	f005 f8d8 	bl	80071dc <HAL_Delay>
	play(2 * Fis,eighth);
 800202c:	4b24      	ldr	r3, [pc, #144]	; (80020c0 <take_on_me+0x388>)
 800202e:	edd3 7a00 	vldr	s15, [r3]
 8002032:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002036:	4b25      	ldr	r3, [pc, #148]	; (80020cc <take_on_me+0x394>)
 8002038:	ed93 7a00 	vldr	s14, [r3]
 800203c:	eef0 0a47 	vmov.f32	s1, s14
 8002040:	eeb0 0a67 	vmov.f32	s0, s15
 8002044:	f7ff fe38 	bl	8001cb8 <play>
	HAL_Delay(eighth);
 8002048:	4b20      	ldr	r3, [pc, #128]	; (80020cc <take_on_me+0x394>)
 800204a:	edd3 7a00 	vldr	s15, [r3]
 800204e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002052:	ee17 0a90 	vmov	r0, s15
 8002056:	f005 f8c1 	bl	80071dc <HAL_Delay>
	play(2 * Fis,eighth);
 800205a:	4b19      	ldr	r3, [pc, #100]	; (80020c0 <take_on_me+0x388>)
 800205c:	edd3 7a00 	vldr	s15, [r3]
 8002060:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002064:	4b19      	ldr	r3, [pc, #100]	; (80020cc <take_on_me+0x394>)
 8002066:	ed93 7a00 	vldr	s14, [r3]
 800206a:	eef0 0a47 	vmov.f32	s1, s14
 800206e:	eeb0 0a67 	vmov.f32	s0, s15
 8002072:	f7ff fe21 	bl	8001cb8 <play>
	HAL_Delay(eighth);
 8002076:	4b15      	ldr	r3, [pc, #84]	; (80020cc <take_on_me+0x394>)
 8002078:	edd3 7a00 	vldr	s15, [r3]
 800207c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002080:	ee17 0a90 	vmov	r0, s15
 8002084:	f005 f8aa 	bl	80071dc <HAL_Delay>
	play(2 * Fis,eighth);
 8002088:	4b0d      	ldr	r3, [pc, #52]	; (80020c0 <take_on_me+0x388>)
 800208a:	edd3 7a00 	vldr	s15, [r3]
 800208e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002092:	4b0e      	ldr	r3, [pc, #56]	; (80020cc <take_on_me+0x394>)
 8002094:	ed93 7a00 	vldr	s14, [r3]
 8002098:	eef0 0a47 	vmov.f32	s1, s14
 800209c:	eeb0 0a67 	vmov.f32	s0, s15
 80020a0:	f7ff fe0a 	bl	8001cb8 <play>
	play(2 * E,sixteenth);
 80020a4:	4b0b      	ldr	r3, [pc, #44]	; (80020d4 <take_on_me+0x39c>)
 80020a6:	edd3 7a00 	vldr	s15, [r3]
 80020aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80020ae:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <take_on_me+0x38c>)
 80020b0:	ed93 7a00 	vldr	s14, [r3]
 80020b4:	eef0 0a47 	vmov.f32	s1, s14
 80020b8:	eeb0 0a67 	vmov.f32	s0, s15
 80020bc:	e012      	b.n	80020e4 <take_on_me+0x3ac>
 80020be:	bf00      	nop
 80020c0:	2000000c 	.word	0x2000000c
 80020c4:	2000001c 	.word	0x2000001c
 80020c8:	20000004 	.word	0x20000004
 80020cc:	20000020 	.word	0x20000020
 80020d0:	20000018 	.word	0x20000018
 80020d4:	20000008 	.word	0x20000008
 80020d8:	20000010 	.word	0x20000010
 80020dc:	20000014 	.word	0x20000014
 80020e0:	20000000 	.word	0x20000000
 80020e4:	f7ff fde8 	bl	8001cb8 <play>
	HAL_Delay(sixteenth);
 80020e8:	4b1e      	ldr	r3, [pc, #120]	; (8002164 <take_on_me+0x42c>)
 80020ea:	edd3 7a00 	vldr	s15, [r3]
 80020ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020f2:	ee17 0a90 	vmov	r0, s15
 80020f6:	f005 f871 	bl	80071dc <HAL_Delay>
	play(2 * E,sixteenth);
 80020fa:	4b1b      	ldr	r3, [pc, #108]	; (8002168 <take_on_me+0x430>)
 80020fc:	edd3 7a00 	vldr	s15, [r3]
 8002100:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002104:	4b17      	ldr	r3, [pc, #92]	; (8002164 <take_on_me+0x42c>)
 8002106:	ed93 7a00 	vldr	s14, [r3]
 800210a:	eef0 0a47 	vmov.f32	s1, s14
 800210e:	eeb0 0a67 	vmov.f32	s0, s15
 8002112:	f7ff fdd1 	bl	8001cb8 <play>
	HAL_Delay(sixteenth);
 8002116:	4b13      	ldr	r3, [pc, #76]	; (8002164 <take_on_me+0x42c>)
 8002118:	edd3 7a00 	vldr	s15, [r3]
 800211c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002120:	ee17 0a90 	vmov	r0, s15
 8002124:	f005 f85a 	bl	80071dc <HAL_Delay>
	play(2 * Fis,eighth);
 8002128:	4b10      	ldr	r3, [pc, #64]	; (800216c <take_on_me+0x434>)
 800212a:	edd3 7a00 	vldr	s15, [r3]
 800212e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002132:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <take_on_me+0x438>)
 8002134:	ed93 7a00 	vldr	s14, [r3]
 8002138:	eef0 0a47 	vmov.f32	s1, s14
 800213c:	eeb0 0a67 	vmov.f32	s0, s15
 8002140:	f7ff fdba 	bl	8001cb8 <play>
	play(2 * E,eighth);
 8002144:	4b08      	ldr	r3, [pc, #32]	; (8002168 <take_on_me+0x430>)
 8002146:	edd3 7a00 	vldr	s15, [r3]
 800214a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800214e:	4b08      	ldr	r3, [pc, #32]	; (8002170 <take_on_me+0x438>)
 8002150:	ed93 7a00 	vldr	s14, [r3]
 8002154:	eef0 0a47 	vmov.f32	s1, s14
 8002158:	eeb0 0a67 	vmov.f32	s0, s15
 800215c:	f7ff fdac 	bl	8001cb8 <play>

}
 8002160:	bf00      	nop
 8002162:	bd80      	pop	{r7, pc}
 8002164:	2000001c 	.word	0x2000001c
 8002168:	20000008 	.word	0x20000008
 800216c:	2000000c 	.word	0x2000000c
 8002170:	20000020 	.word	0x20000020

08002174 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	607b      	str	r3, [r7, #4]
 800217e:	4b14      	ldr	r3, [pc, #80]	; (80021d0 <MX_DMA_Init+0x5c>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	4a13      	ldr	r2, [pc, #76]	; (80021d0 <MX_DMA_Init+0x5c>)
 8002184:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002188:	6313      	str	r3, [r2, #48]	; 0x30
 800218a:	4b11      	ldr	r3, [pc, #68]	; (80021d0 <MX_DMA_Init+0x5c>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002192:	607b      	str	r3, [r7, #4]
 8002194:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002196:	2200      	movs	r2, #0
 8002198:	2100      	movs	r1, #0
 800219a:	2038      	movs	r0, #56	; 0x38
 800219c:	f005 fd59 	bl	8007c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80021a0:	2038      	movs	r0, #56	; 0x38
 80021a2:	f005 fd72 	bl	8007c8a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80021a6:	2200      	movs	r2, #0
 80021a8:	2100      	movs	r1, #0
 80021aa:	203b      	movs	r0, #59	; 0x3b
 80021ac:	f005 fd51 	bl	8007c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80021b0:	203b      	movs	r0, #59	; 0x3b
 80021b2:	f005 fd6a 	bl	8007c8a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80021b6:	2200      	movs	r2, #0
 80021b8:	2100      	movs	r1, #0
 80021ba:	2045      	movs	r0, #69	; 0x45
 80021bc:	f005 fd49 	bl	8007c52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80021c0:	2045      	movs	r0, #69	; 0x45
 80021c2:	f005 fd62 	bl	8007c8a <HAL_NVIC_EnableIRQ>

}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40023800 	.word	0x40023800

080021d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08a      	sub	sp, #40	; 0x28
 80021d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021da:	f107 0314 	add.w	r3, r7, #20
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	609a      	str	r2, [r3, #8]
 80021e6:	60da      	str	r2, [r3, #12]
 80021e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	613b      	str	r3, [r7, #16]
 80021ee:	4b64      	ldr	r3, [pc, #400]	; (8002380 <MX_GPIO_Init+0x1ac>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	4a63      	ldr	r2, [pc, #396]	; (8002380 <MX_GPIO_Init+0x1ac>)
 80021f4:	f043 0310 	orr.w	r3, r3, #16
 80021f8:	6313      	str	r3, [r2, #48]	; 0x30
 80021fa:	4b61      	ldr	r3, [pc, #388]	; (8002380 <MX_GPIO_Init+0x1ac>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	f003 0310 	and.w	r3, r3, #16
 8002202:	613b      	str	r3, [r7, #16]
 8002204:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	4b5d      	ldr	r3, [pc, #372]	; (8002380 <MX_GPIO_Init+0x1ac>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	4a5c      	ldr	r2, [pc, #368]	; (8002380 <MX_GPIO_Init+0x1ac>)
 8002210:	f043 0304 	orr.w	r3, r3, #4
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4b5a      	ldr	r3, [pc, #360]	; (8002380 <MX_GPIO_Init+0x1ac>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f003 0304 	and.w	r3, r3, #4
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	4b56      	ldr	r3, [pc, #344]	; (8002380 <MX_GPIO_Init+0x1ac>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	4a55      	ldr	r2, [pc, #340]	; (8002380 <MX_GPIO_Init+0x1ac>)
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	6313      	str	r3, [r2, #48]	; 0x30
 8002232:	4b53      	ldr	r3, [pc, #332]	; (8002380 <MX_GPIO_Init+0x1ac>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	60bb      	str	r3, [r7, #8]
 800223c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	607b      	str	r3, [r7, #4]
 8002242:	4b4f      	ldr	r3, [pc, #316]	; (8002380 <MX_GPIO_Init+0x1ac>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	4a4e      	ldr	r2, [pc, #312]	; (8002380 <MX_GPIO_Init+0x1ac>)
 8002248:	f043 0302 	orr.w	r3, r3, #2
 800224c:	6313      	str	r3, [r2, #48]	; 0x30
 800224e:	4b4c      	ldr	r3, [pc, #304]	; (8002380 <MX_GPIO_Init+0x1ac>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	607b      	str	r3, [r7, #4]
 8002258:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	603b      	str	r3, [r7, #0]
 800225e:	4b48      	ldr	r3, [pc, #288]	; (8002380 <MX_GPIO_Init+0x1ac>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002262:	4a47      	ldr	r2, [pc, #284]	; (8002380 <MX_GPIO_Init+0x1ac>)
 8002264:	f043 0308 	orr.w	r3, r3, #8
 8002268:	6313      	str	r3, [r2, #48]	; 0x30
 800226a:	4b45      	ldr	r3, [pc, #276]	; (8002380 <MX_GPIO_Init+0x1ac>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	603b      	str	r3, [r7, #0]
 8002274:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002276:	2200      	movs	r2, #0
 8002278:	2110      	movs	r1, #16
 800227a:	4842      	ldr	r0, [pc, #264]	; (8002384 <MX_GPIO_Init+0x1b0>)
 800227c:	f006 fade 	bl	800883c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 8002280:	2200      	movs	r2, #0
 8002282:	2120      	movs	r1, #32
 8002284:	4840      	ldr	r0, [pc, #256]	; (8002388 <MX_GPIO_Init+0x1b4>)
 8002286:	f006 fad9 	bl	800883c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_MEM_Pin|TD1_Pin|TD2_Pin|HAWK1_Pin
 800228a:	2200      	movs	r2, #0
 800228c:	f64f 7180 	movw	r1, #65408	; 0xff80
 8002290:	483e      	ldr	r0, [pc, #248]	; (800238c <MX_GPIO_Init+0x1b8>)
 8002292:	f006 fad3 	bl	800883c <HAL_GPIO_WritePin>
                          |HAWK2_Pin|RDY_Pin|STAT_Pin|SAVE_Pin
                          |PRGM_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|STAY_ALIVE_Pin, GPIO_PIN_RESET);
 8002296:	2200      	movs	r2, #0
 8002298:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 800229c:	483c      	ldr	r0, [pc, #240]	; (8002390 <MX_GPIO_Init+0x1bc>)
 800229e:	f006 facd 	bl	800883c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWR_DTCT_Pin;
 80022a2:	2308      	movs	r3, #8
 80022a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022a6:	2300      	movs	r3, #0
 80022a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PWR_DTCT_GPIO_Port, &GPIO_InitStruct);
 80022ae:	f107 0314 	add.w	r3, r7, #20
 80022b2:	4619      	mov	r1, r3
 80022b4:	4835      	ldr	r0, [pc, #212]	; (800238c <MX_GPIO_Init+0x1b8>)
 80022b6:	f006 f90f 	bl	80084d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_Pin;
 80022ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022c0:	2300      	movs	r3, #0
 80022c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 80022c8:	f107 0314 	add.w	r3, r7, #20
 80022cc:	4619      	mov	r1, r3
 80022ce:	482e      	ldr	r0, [pc, #184]	; (8002388 <MX_GPIO_Init+0x1b4>)
 80022d0:	f006 f902 	bl	80084d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80022d4:	2310      	movs	r3, #16
 80022d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d8:	2301      	movs	r3, #1
 80022da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e0:	2300      	movs	r3, #0
 80022e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80022e4:	f107 0314 	add.w	r3, r7, #20
 80022e8:	4619      	mov	r1, r3
 80022ea:	4826      	ldr	r0, [pc, #152]	; (8002384 <MX_GPIO_Init+0x1b0>)
 80022ec:	f006 f8f4 	bl	80084d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZ_Pin;
 80022f0:	2320      	movs	r3, #32
 80022f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f4:	2301      	movs	r3, #1
 80022f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fc:	2300      	movs	r3, #0
 80022fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 8002300:	f107 0314 	add.w	r3, r7, #20
 8002304:	4619      	mov	r1, r3
 8002306:	4820      	ldr	r0, [pc, #128]	; (8002388 <MX_GPIO_Init+0x1b4>)
 8002308:	f006 f8e6 	bl	80084d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = CS_MEM_Pin|TD1_Pin|TD2_Pin|HAWK1_Pin
 800230c:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002310:	617b      	str	r3, [r7, #20]
                          |HAWK2_Pin|RDY_Pin|STAT_Pin|SAVE_Pin
                          |PRGM_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002312:	2301      	movs	r3, #1
 8002314:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002316:	2300      	movs	r3, #0
 8002318:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231a:	2300      	movs	r3, #0
 800231c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800231e:	f107 0314 	add.w	r3, r7, #20
 8002322:	4619      	mov	r1, r3
 8002324:	4819      	ldr	r0, [pc, #100]	; (800238c <MX_GPIO_Init+0x1b8>)
 8002326:	f006 f8d7 	bl	80084d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin|STAY_ALIVE_Pin;
 800232a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 800232e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002330:	2301      	movs	r3, #1
 8002332:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002338:	2300      	movs	r3, #0
 800233a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800233c:	f107 0314 	add.w	r3, r7, #20
 8002340:	4619      	mov	r1, r3
 8002342:	4813      	ldr	r0, [pc, #76]	; (8002390 <MX_GPIO_Init+0x1bc>)
 8002344:	f006 f8c8 	bl	80084d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_DTCT_Pin;
 8002348:	2301      	movs	r3, #1
 800234a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800234c:	2300      	movs	r3, #0
 800234e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002350:	2300      	movs	r3, #0
 8002352:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DTCT_GPIO_Port, &GPIO_InitStruct);
 8002354:	f107 0314 	add.w	r3, r7, #20
 8002358:	4619      	mov	r1, r3
 800235a:	480e      	ldr	r0, [pc, #56]	; (8002394 <MX_GPIO_Init+0x1c0>)
 800235c:	f006 f8bc 	bl	80084d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENSE_Pin;
 8002360:	2310      	movs	r3, #16
 8002362:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002364:	2300      	movs	r3, #0
 8002366:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002368:	2300      	movs	r3, #0
 800236a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENSE_GPIO_Port, &GPIO_InitStruct);
 800236c:	f107 0314 	add.w	r3, r7, #20
 8002370:	4619      	mov	r1, r3
 8002372:	4807      	ldr	r0, [pc, #28]	; (8002390 <MX_GPIO_Init+0x1bc>)
 8002374:	f006 f8b0 	bl	80084d8 <HAL_GPIO_Init>

}
 8002378:	bf00      	nop
 800237a:	3728      	adds	r7, #40	; 0x28
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40023800 	.word	0x40023800
 8002384:	40020000 	.word	0x40020000
 8002388:	40020800 	.word	0x40020800
 800238c:	40021000 	.word	0x40021000
 8002390:	40020400 	.word	0x40020400
 8002394:	40020c00 	.word	0x40020c00

08002398 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800239c:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <MX_I2C1_Init+0x50>)
 800239e:	4a13      	ldr	r2, [pc, #76]	; (80023ec <MX_I2C1_Init+0x54>)
 80023a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80023a2:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <MX_I2C1_Init+0x50>)
 80023a4:	4a12      	ldr	r2, [pc, #72]	; (80023f0 <MX_I2C1_Init+0x58>)
 80023a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80023a8:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <MX_I2C1_Init+0x50>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80023ae:	4b0e      	ldr	r3, [pc, #56]	; (80023e8 <MX_I2C1_Init+0x50>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80023b4:	4b0c      	ldr	r3, [pc, #48]	; (80023e8 <MX_I2C1_Init+0x50>)
 80023b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80023ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80023bc:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <MX_I2C1_Init+0x50>)
 80023be:	2200      	movs	r2, #0
 80023c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80023c2:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <MX_I2C1_Init+0x50>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023c8:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <MX_I2C1_Init+0x50>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023ce:	4b06      	ldr	r3, [pc, #24]	; (80023e8 <MX_I2C1_Init+0x50>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023d4:	4804      	ldr	r0, [pc, #16]	; (80023e8 <MX_I2C1_Init+0x50>)
 80023d6:	f006 fa65 	bl	80088a4 <HAL_I2C_Init>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80023e0:	f000 f93e 	bl	8002660 <Error_Handler>
  }

}
 80023e4:	bf00      	nop
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	20004a1c 	.word	0x20004a1c
 80023ec:	40005400 	.word	0x40005400
 80023f0:	00061a80 	.word	0x00061a80

080023f4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 80023f8:	4b12      	ldr	r3, [pc, #72]	; (8002444 <MX_I2C2_Init+0x50>)
 80023fa:	4a13      	ldr	r2, [pc, #76]	; (8002448 <MX_I2C2_Init+0x54>)
 80023fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80023fe:	4b11      	ldr	r3, [pc, #68]	; (8002444 <MX_I2C2_Init+0x50>)
 8002400:	4a12      	ldr	r2, [pc, #72]	; (800244c <MX_I2C2_Init+0x58>)
 8002402:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002404:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <MX_I2C2_Init+0x50>)
 8002406:	2200      	movs	r2, #0
 8002408:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800240a:	4b0e      	ldr	r3, [pc, #56]	; (8002444 <MX_I2C2_Init+0x50>)
 800240c:	2200      	movs	r2, #0
 800240e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <MX_I2C2_Init+0x50>)
 8002412:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002416:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002418:	4b0a      	ldr	r3, [pc, #40]	; (8002444 <MX_I2C2_Init+0x50>)
 800241a:	2200      	movs	r2, #0
 800241c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800241e:	4b09      	ldr	r3, [pc, #36]	; (8002444 <MX_I2C2_Init+0x50>)
 8002420:	2200      	movs	r2, #0
 8002422:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002424:	4b07      	ldr	r3, [pc, #28]	; (8002444 <MX_I2C2_Init+0x50>)
 8002426:	2200      	movs	r2, #0
 8002428:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800242a:	4b06      	ldr	r3, [pc, #24]	; (8002444 <MX_I2C2_Init+0x50>)
 800242c:	2200      	movs	r2, #0
 800242e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002430:	4804      	ldr	r0, [pc, #16]	; (8002444 <MX_I2C2_Init+0x50>)
 8002432:	f006 fa37 	bl	80088a4 <HAL_I2C_Init>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800243c:	f000 f910 	bl	8002660 <Error_Handler>
  }

}
 8002440:	bf00      	nop
 8002442:	bd80      	pop	{r7, pc}
 8002444:	20004a70 	.word	0x20004a70
 8002448:	40005800 	.word	0x40005800
 800244c:	000186a0 	.word	0x000186a0

08002450 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b08c      	sub	sp, #48	; 0x30
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002458:	f107 031c 	add.w	r3, r7, #28
 800245c:	2200      	movs	r2, #0
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	609a      	str	r2, [r3, #8]
 8002464:	60da      	str	r2, [r3, #12]
 8002466:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a32      	ldr	r2, [pc, #200]	; (8002538 <HAL_I2C_MspInit+0xe8>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d12c      	bne.n	80024cc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	61bb      	str	r3, [r7, #24]
 8002476:	4b31      	ldr	r3, [pc, #196]	; (800253c <HAL_I2C_MspInit+0xec>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	4a30      	ldr	r2, [pc, #192]	; (800253c <HAL_I2C_MspInit+0xec>)
 800247c:	f043 0302 	orr.w	r3, r3, #2
 8002480:	6313      	str	r3, [r2, #48]	; 0x30
 8002482:	4b2e      	ldr	r3, [pc, #184]	; (800253c <HAL_I2C_MspInit+0xec>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	61bb      	str	r3, [r7, #24]
 800248c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800248e:	23c0      	movs	r3, #192	; 0xc0
 8002490:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002492:	2312      	movs	r3, #18
 8002494:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002496:	2301      	movs	r3, #1
 8002498:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800249a:	2303      	movs	r3, #3
 800249c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800249e:	2304      	movs	r3, #4
 80024a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a2:	f107 031c 	add.w	r3, r7, #28
 80024a6:	4619      	mov	r1, r3
 80024a8:	4825      	ldr	r0, [pc, #148]	; (8002540 <HAL_I2C_MspInit+0xf0>)
 80024aa:	f006 f815 	bl	80084d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]
 80024b2:	4b22      	ldr	r3, [pc, #136]	; (800253c <HAL_I2C_MspInit+0xec>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	4a21      	ldr	r2, [pc, #132]	; (800253c <HAL_I2C_MspInit+0xec>)
 80024b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024bc:	6413      	str	r3, [r2, #64]	; 0x40
 80024be:	4b1f      	ldr	r3, [pc, #124]	; (800253c <HAL_I2C_MspInit+0xec>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024c6:	617b      	str	r3, [r7, #20]
 80024c8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80024ca:	e031      	b.n	8002530 <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a1c      	ldr	r2, [pc, #112]	; (8002544 <HAL_I2C_MspInit+0xf4>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d12c      	bne.n	8002530 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	613b      	str	r3, [r7, #16]
 80024da:	4b18      	ldr	r3, [pc, #96]	; (800253c <HAL_I2C_MspInit+0xec>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	4a17      	ldr	r2, [pc, #92]	; (800253c <HAL_I2C_MspInit+0xec>)
 80024e0:	f043 0302 	orr.w	r3, r3, #2
 80024e4:	6313      	str	r3, [r2, #48]	; 0x30
 80024e6:	4b15      	ldr	r3, [pc, #84]	; (800253c <HAL_I2C_MspInit+0xec>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	613b      	str	r3, [r7, #16]
 80024f0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80024f2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80024f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024f8:	2312      	movs	r3, #18
 80024fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024fc:	2301      	movs	r3, #1
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002500:	2303      	movs	r3, #3
 8002502:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002504:	2304      	movs	r3, #4
 8002506:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002508:	f107 031c 	add.w	r3, r7, #28
 800250c:	4619      	mov	r1, r3
 800250e:	480c      	ldr	r0, [pc, #48]	; (8002540 <HAL_I2C_MspInit+0xf0>)
 8002510:	f005 ffe2 	bl	80084d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002514:	2300      	movs	r3, #0
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	4b08      	ldr	r3, [pc, #32]	; (800253c <HAL_I2C_MspInit+0xec>)
 800251a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251c:	4a07      	ldr	r2, [pc, #28]	; (800253c <HAL_I2C_MspInit+0xec>)
 800251e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002522:	6413      	str	r3, [r2, #64]	; 0x40
 8002524:	4b05      	ldr	r3, [pc, #20]	; (800253c <HAL_I2C_MspInit+0xec>)
 8002526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002528:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	68fb      	ldr	r3, [r7, #12]
}
 8002530:	bf00      	nop
 8002532:	3730      	adds	r7, #48	; 0x30
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40005400 	.word	0x40005400
 800253c:	40023800 	.word	0x40023800
 8002540:	40020400 	.word	0x40020400
 8002544:	40005800 	.word	0x40005800

08002548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800254c:	f004 fdd4 	bl	80070f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002550:	f000 f81c 	bl	800258c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002554:	f7ff fe3e 	bl	80021d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002558:	f7ff fe0c 	bl	8002174 <MX_DMA_Init>
  MX_I2C1_Init();
 800255c:	f7ff ff1c 	bl	8002398 <MX_I2C1_Init>
  MX_SPI2_Init();
 8002560:	f001 f9d6 	bl	8003910 <MX_SPI2_Init>
  MX_ADC1_Init();
 8002564:	f7ff fa3e 	bl	80019e4 <MX_ADC1_Init>
  MX_I2C2_Init();
 8002568:	f7ff ff44 	bl	80023f4 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 800256c:	f000 fdd6 	bl	800311c <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8002570:	f001 f998 	bl	80038a4 <MX_SPI1_Init>
  MX_FATFS_Init();
 8002574:	f00a fc38 	bl	800cde8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  turn_off_HAWKs();
 8002578:	f7fe fd06 	bl	8000f88 <turn_off_HAWKs>
  turn_off_TDs();
 800257c:	f7fe fd16 	bl	8000fac <turn_off_TDs>

  schedulerinit();
 8002580:	f000 f876 	bl	8002670 <schedulerinit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	scheduler();
 8002584:	f000 f992 	bl	80028ac <scheduler>
 8002588:	e7fc      	b.n	8002584 <main+0x3c>
	...

0800258c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b094      	sub	sp, #80	; 0x50
 8002590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002592:	f107 0320 	add.w	r3, r7, #32
 8002596:	2230      	movs	r2, #48	; 0x30
 8002598:	2100      	movs	r1, #0
 800259a:	4618      	mov	r0, r3
 800259c:	f00d ffd7 	bl	801054e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025a0:	f107 030c 	add.w	r3, r7, #12
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	609a      	str	r2, [r3, #8]
 80025ac:	60da      	str	r2, [r3, #12]
 80025ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80025b0:	2300      	movs	r3, #0
 80025b2:	60bb      	str	r3, [r7, #8]
 80025b4:	4b28      	ldr	r3, [pc, #160]	; (8002658 <SystemClock_Config+0xcc>)
 80025b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b8:	4a27      	ldr	r2, [pc, #156]	; (8002658 <SystemClock_Config+0xcc>)
 80025ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025be:	6413      	str	r3, [r2, #64]	; 0x40
 80025c0:	4b25      	ldr	r3, [pc, #148]	; (8002658 <SystemClock_Config+0xcc>)
 80025c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c8:	60bb      	str	r3, [r7, #8]
 80025ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025cc:	2300      	movs	r3, #0
 80025ce:	607b      	str	r3, [r7, #4]
 80025d0:	4b22      	ldr	r3, [pc, #136]	; (800265c <SystemClock_Config+0xd0>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a21      	ldr	r2, [pc, #132]	; (800265c <SystemClock_Config+0xd0>)
 80025d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025da:	6013      	str	r3, [r2, #0]
 80025dc:	4b1f      	ldr	r3, [pc, #124]	; (800265c <SystemClock_Config+0xd0>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025e4:	607b      	str	r3, [r7, #4]
 80025e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025e8:	2302      	movs	r3, #2
 80025ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025ec:	2301      	movs	r3, #1
 80025ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025f0:	2310      	movs	r3, #16
 80025f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025f4:	2302      	movs	r3, #2
 80025f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80025f8:	2300      	movs	r3, #0
 80025fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80025fc:	2308      	movs	r3, #8
 80025fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002600:	23a8      	movs	r3, #168	; 0xa8
 8002602:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002604:	2302      	movs	r3, #2
 8002606:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002608:	2307      	movs	r3, #7
 800260a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800260c:	f107 0320 	add.w	r3, r7, #32
 8002610:	4618      	mov	r0, r3
 8002612:	f007 fa0b 	bl	8009a2c <HAL_RCC_OscConfig>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800261c:	f000 f820 	bl	8002660 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002620:	230f      	movs	r3, #15
 8002622:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002624:	2302      	movs	r3, #2
 8002626:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002628:	2300      	movs	r3, #0
 800262a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800262c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002630:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002632:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002636:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002638:	f107 030c 	add.w	r3, r7, #12
 800263c:	2105      	movs	r1, #5
 800263e:	4618      	mov	r0, r3
 8002640:	f007 fc64 	bl	8009f0c <HAL_RCC_ClockConfig>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800264a:	f000 f809 	bl	8002660 <Error_Handler>
  }
}
 800264e:	bf00      	nop
 8002650:	3750      	adds	r7, #80	; 0x50
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40023800 	.word	0x40023800
 800265c:	40007000 	.word	0x40007000

08002660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002664:	bf00      	nop
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
	...

08002670 <schedulerinit>:
float Az2[FAKE_FILE_LEN];

int8_t IMU_SIGN[3] = {1,0,0};
int8_t ACC_SIGN[3] = {1,0,0};

void schedulerinit () {
 8002670:	b580      	push	{r7, lr}
 8002672:	b088      	sub	sp, #32
 8002674:	af06      	add	r7, sp, #24
	ms5607_init(&BARO1);
 8002676:	486c      	ldr	r0, [pc, #432]	; (8002828 <schedulerinit+0x1b8>)
 8002678:	f002 f8c4 	bl	8004804 <ms5607_init>
	ms5607_init(&BARO2);
 800267c:	486b      	ldr	r0, [pc, #428]	; (800282c <schedulerinit+0x1bc>)
 800267e:	f002 f8c1 	bl	8004804 <ms5607_init>
	sht31_init(&TEMP);
 8002682:	486b      	ldr	r0, [pc, #428]	; (8002830 <schedulerinit+0x1c0>)
 8002684:	f002 fc66 	bl	8004f54 <sht31_init>
	icm20601_init(&IMU1);
 8002688:	486a      	ldr	r0, [pc, #424]	; (8002834 <schedulerinit+0x1c4>)
 800268a:	f001 fe12 	bl	80042b2 <icm20601_init>
	icm20601_init(&IMU2);
 800268e:	486a      	ldr	r0, [pc, #424]	; (8002838 <schedulerinit+0x1c8>)
 8002690:	f001 fe0f 	bl	80042b2 <icm20601_init>
	h3l_init(&ACCEL);
 8002694:	4869      	ldr	r0, [pc, #420]	; (800283c <schedulerinit+0x1cc>)
 8002696:	f001 fb43 	bl	8003d20 <h3l_init>
	init_ADC();
 800269a:	f7fe fc99 	bl	8000fd0 <init_ADC>

	turn_on(&STAT);
 800269e:	4868      	ldr	r0, [pc, #416]	; (8002840 <schedulerinit+0x1d0>)
 80026a0:	f002 f890 	bl	80047c4 <turn_on>
	HAL_Delay(300);
 80026a4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80026a8:	f004 fd98 	bl	80071dc <HAL_Delay>
	turn_on(&SAVE);
 80026ac:	4865      	ldr	r0, [pc, #404]	; (8002844 <schedulerinit+0x1d4>)
 80026ae:	f002 f889 	bl	80047c4 <turn_on>
	HAL_Delay(300);
 80026b2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80026b6:	f004 fd91 	bl	80071dc <HAL_Delay>
	turn_on(&PRGM);
 80026ba:	4863      	ldr	r0, [pc, #396]	; (8002848 <schedulerinit+0x1d8>)
 80026bc:	f002 f882 	bl	80047c4 <turn_on>
	HAL_Delay(300);
 80026c0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80026c4:	f004 fd8a 	bl	80071dc <HAL_Delay>

	turn_off(&STAT);
 80026c8:	485d      	ldr	r0, [pc, #372]	; (8002840 <schedulerinit+0x1d0>)
 80026ca:	f002 f88b 	bl	80047e4 <turn_off>
	turn_off(&SAVE);
 80026ce:	485d      	ldr	r0, [pc, #372]	; (8002844 <schedulerinit+0x1d4>)
 80026d0:	f002 f888 	bl	80047e4 <turn_off>
	turn_off(&PRGM);
 80026d4:	485c      	ldr	r0, [pc, #368]	; (8002848 <schedulerinit+0x1d8>)
 80026d6:	f002 f885 	bl	80047e4 <turn_off>

	turn_on(&SAVE);
 80026da:	485a      	ldr	r0, [pc, #360]	; (8002844 <schedulerinit+0x1d4>)
 80026dc:	f002 f872 	bl	80047c4 <turn_on>
	SD_state = init_sd(&num_dat_file, &num_log_file);
 80026e0:	495a      	ldr	r1, [pc, #360]	; (800284c <schedulerinit+0x1dc>)
 80026e2:	485b      	ldr	r0, [pc, #364]	; (8002850 <schedulerinit+0x1e0>)
 80026e4:	f7fe fdc0 	bl	8001268 <init_sd>
 80026e8:	4603      	mov	r3, r0
 80026ea:	461a      	mov	r2, r3
 80026ec:	4b59      	ldr	r3, [pc, #356]	; (8002854 <schedulerinit+0x1e4>)
 80026ee:	701a      	strb	r2, [r3, #0]
	if (SD_state == 0){
 80026f0:	4b58      	ldr	r3, [pc, #352]	; (8002854 <schedulerinit+0x1e4>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d103      	bne.n	8002700 <schedulerinit+0x90>
		turn_off(&SAVE);
 80026f8:	4852      	ldr	r0, [pc, #328]	; (8002844 <schedulerinit+0x1d4>)
 80026fa:	f002 f873 	bl	80047e4 <turn_off>
 80026fe:	e00b      	b.n	8002718 <schedulerinit+0xa8>
	} else {
		turn_on(&RDY);
 8002700:	4855      	ldr	r0, [pc, #340]	; (8002858 <schedulerinit+0x1e8>)
 8002702:	f002 f85f 	bl	80047c4 <turn_on>
		HAL_Delay(100);
 8002706:	2064      	movs	r0, #100	; 0x64
 8002708:	f004 fd68 	bl	80071dc <HAL_Delay>
		turn_off(&RDY);
 800270c:	4852      	ldr	r0, [pc, #328]	; (8002858 <schedulerinit+0x1e8>)
 800270e:	f002 f869 	bl	80047e4 <turn_off>
		HAL_Delay(100);
 8002712:	2064      	movs	r0, #100	; 0x64
 8002714:	f004 fd62 	bl	80071dc <HAL_Delay>
	}
	if (DEBUG_PRINT == 1) printf("num_dat_file: %hu \n",num_dat_file);
	if (DEBUG_PRINT == 1) printf("num_log_file: %hu \n",num_log_file);

	num_log_file ++;
 8002718:	4b4c      	ldr	r3, [pc, #304]	; (800284c <schedulerinit+0x1dc>)
 800271a:	881b      	ldrh	r3, [r3, #0]
 800271c:	3301      	adds	r3, #1
 800271e:	b29a      	uxth	r2, r3
 8002720:	4b4a      	ldr	r3, [pc, #296]	; (800284c <schedulerinit+0x1dc>)
 8002722:	801a      	strh	r2, [r3, #0]
	num_dat_file ++;
 8002724:	4b4a      	ldr	r3, [pc, #296]	; (8002850 <schedulerinit+0x1e0>)
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	3301      	adds	r3, #1
 800272a:	b29a      	uxth	r2, r3
 800272c:	4b48      	ldr	r3, [pc, #288]	; (8002850 <schedulerinit+0x1e0>)
 800272e:	801a      	strh	r2, [r3, #0]

	sprintf(FILE_NAME,"FL%04u.CSV", num_dat_file);
 8002730:	4b47      	ldr	r3, [pc, #284]	; (8002850 <schedulerinit+0x1e0>)
 8002732:	881b      	ldrh	r3, [r3, #0]
 8002734:	461a      	mov	r2, r3
 8002736:	4949      	ldr	r1, [pc, #292]	; (800285c <schedulerinit+0x1ec>)
 8002738:	4849      	ldr	r0, [pc, #292]	; (8002860 <schedulerinit+0x1f0>)
 800273a:	f00e fbe9 	bl	8010f10 <siprintf>
	if (DEBUG_PRINT == 1) printf("saving %s ...",FILE_NAME);

	sprintf(LOG_NAME,"LOG%02u.CSV", num_log_file);
 800273e:	4b43      	ldr	r3, [pc, #268]	; (800284c <schedulerinit+0x1dc>)
 8002740:	881b      	ldrh	r3, [r3, #0]
 8002742:	461a      	mov	r2, r3
 8002744:	4947      	ldr	r1, [pc, #284]	; (8002864 <schedulerinit+0x1f4>)
 8002746:	4848      	ldr	r0, [pc, #288]	; (8002868 <schedulerinit+0x1f8>)
 8002748:	f00e fbe2 	bl	8010f10 <siprintf>
	if (DEBUG_PRINT == 1) printf("saving %s ...",LOG_NAME);

	SD_state = init_file(FILE_NAME, LOG_NAME);
 800274c:	4946      	ldr	r1, [pc, #280]	; (8002868 <schedulerinit+0x1f8>)
 800274e:	4844      	ldr	r0, [pc, #272]	; (8002860 <schedulerinit+0x1f0>)
 8002750:	f7fe fe44 	bl	80013dc <init_file>
 8002754:	4603      	mov	r3, r0
 8002756:	461a      	mov	r2, r3
 8002758:	4b3e      	ldr	r3, [pc, #248]	; (8002854 <schedulerinit+0x1e4>)
 800275a:	701a      	strb	r2, [r3, #0]

	if (SD_state == 0){
 800275c:	4b3d      	ldr	r3, [pc, #244]	; (8002854 <schedulerinit+0x1e4>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d103      	bne.n	800276c <schedulerinit+0xfc>
		turn_off(&SAVE);
 8002764:	4837      	ldr	r0, [pc, #220]	; (8002844 <schedulerinit+0x1d4>)
 8002766:	f002 f83d 	bl	80047e4 <turn_off>
 800276a:	e00b      	b.n	8002784 <schedulerinit+0x114>
	} else {
		turn_on(&RDY);
 800276c:	483a      	ldr	r0, [pc, #232]	; (8002858 <schedulerinit+0x1e8>)
 800276e:	f002 f829 	bl	80047c4 <turn_on>
		HAL_Delay(100);
 8002772:	2064      	movs	r0, #100	; 0x64
 8002774:	f004 fd32 	bl	80071dc <HAL_Delay>
		turn_off(&RDY);
 8002778:	4837      	ldr	r0, [pc, #220]	; (8002858 <schedulerinit+0x1e8>)
 800277a:	f002 f833 	bl	80047e4 <turn_off>
		HAL_Delay(100);
 800277e:	2064      	movs	r0, #100	; 0x64
 8002780:	f004 fd2c 	bl	80071dc <HAL_Delay>
	}
	turn_on(&RDY);
 8002784:	4834      	ldr	r0, [pc, #208]	; (8002858 <schedulerinit+0x1e8>)
 8002786:	f002 f81d 	bl	80047c4 <turn_on>
	HAL_Delay(1000);
 800278a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800278e:	f004 fd25 	bl	80071dc <HAL_Delay>

	bufclear(buffer);
 8002792:	4836      	ldr	r0, [pc, #216]	; (800286c <schedulerinit+0x1fc>)
 8002794:	f7fe fd4e 	bl	8001234 <bufclear>
	sprintf(buffer, "%ld, SCHEDULER INIT OK, - \n", HAL_GetTick());
 8002798:	f004 fd14 	bl	80071c4 <HAL_GetTick>
 800279c:	4603      	mov	r3, r0
 800279e:	461a      	mov	r2, r3
 80027a0:	4933      	ldr	r1, [pc, #204]	; (8002870 <schedulerinit+0x200>)
 80027a2:	4832      	ldr	r0, [pc, #200]	; (800286c <schedulerinit+0x1fc>)
 80027a4:	f00e fbb4 	bl	8010f10 <siprintf>
	log_to_SD(LOG_NAME, buffer);
 80027a8:	4930      	ldr	r1, [pc, #192]	; (800286c <schedulerinit+0x1fc>)
 80027aa:	482f      	ldr	r0, [pc, #188]	; (8002868 <schedulerinit+0x1f8>)
 80027ac:	f7ff f8ca 	bl	8001944 <log_to_SD>

	//coffin_dance(1);
	take_on_me();
 80027b0:	f7ff fac2 	bl	8001d38 <take_on_me>

	if (FAKE_DATA == 1)
 80027b4:	4b2f      	ldr	r3, [pc, #188]	; (8002874 <schedulerinit+0x204>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d111      	bne.n	80027e0 <schedulerinit+0x170>
	{
		read_from_SD("FAKE.CSV", TIME, P1, P2, Ax1, Ay1, Az1, Ax2, Ay2, Az2);
 80027bc:	4b2e      	ldr	r3, [pc, #184]	; (8002878 <schedulerinit+0x208>)
 80027be:	9305      	str	r3, [sp, #20]
 80027c0:	4b2e      	ldr	r3, [pc, #184]	; (800287c <schedulerinit+0x20c>)
 80027c2:	9304      	str	r3, [sp, #16]
 80027c4:	4b2e      	ldr	r3, [pc, #184]	; (8002880 <schedulerinit+0x210>)
 80027c6:	9303      	str	r3, [sp, #12]
 80027c8:	4b2e      	ldr	r3, [pc, #184]	; (8002884 <schedulerinit+0x214>)
 80027ca:	9302      	str	r3, [sp, #8]
 80027cc:	4b2e      	ldr	r3, [pc, #184]	; (8002888 <schedulerinit+0x218>)
 80027ce:	9301      	str	r3, [sp, #4]
 80027d0:	4b2e      	ldr	r3, [pc, #184]	; (800288c <schedulerinit+0x21c>)
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	4b2e      	ldr	r3, [pc, #184]	; (8002890 <schedulerinit+0x220>)
 80027d6:	4a2f      	ldr	r2, [pc, #188]	; (8002894 <schedulerinit+0x224>)
 80027d8:	492f      	ldr	r1, [pc, #188]	; (8002898 <schedulerinit+0x228>)
 80027da:	4830      	ldr	r0, [pc, #192]	; (800289c <schedulerinit+0x22c>)
 80027dc:	f7fe fed8 	bl	8001590 <read_from_SD>
	}

	float ground_pressure = 0;
 80027e0:	f04f 0300 	mov.w	r3, #0
 80027e4:	607b      	str	r3, [r7, #4]
	float ground_temperature = 0;
 80027e6:	f04f 0300 	mov.w	r3, #0
 80027ea:	603b      	str	r3, [r7, #0]

	config_baro(&TEMP, &BARO1, &BARO2, &ground_temperature, &ground_pressure);
 80027ec:	463a      	mov	r2, r7
 80027ee:	1d3b      	adds	r3, r7, #4
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	4613      	mov	r3, r2
 80027f4:	4a0d      	ldr	r2, [pc, #52]	; (800282c <schedulerinit+0x1bc>)
 80027f6:	490c      	ldr	r1, [pc, #48]	; (8002828 <schedulerinit+0x1b8>)
 80027f8:	480d      	ldr	r0, [pc, #52]	; (8002830 <schedulerinit+0x1c0>)
 80027fa:	f000 fe49 	bl	8003490 <config_baro>
	config_imu(&IMU1, &IMU2, IMU_SIGN, ACC_SIGN);
 80027fe:	4b28      	ldr	r3, [pc, #160]	; (80028a0 <schedulerinit+0x230>)
 8002800:	4a28      	ldr	r2, [pc, #160]	; (80028a4 <schedulerinit+0x234>)
 8002802:	490d      	ldr	r1, [pc, #52]	; (8002838 <schedulerinit+0x1c8>)
 8002804:	480b      	ldr	r0, [pc, #44]	; (8002834 <schedulerinit+0x1c4>)
 8002806:	f000 ff45 	bl	8003694 <config_imu>

	reset_state_est_state(ground_pressure, ground_temperature, &state_est_state);
 800280a:	edd7 7a01 	vldr	s15, [r7, #4]
 800280e:	ed97 7a00 	vldr	s14, [r7]
 8002812:	4825      	ldr	r0, [pc, #148]	; (80028a8 <schedulerinit+0x238>)
 8002814:	eef0 0a47 	vmov.f32	s1, s14
 8002818:	eeb0 0a67 	vmov.f32	s0, s15
 800281c:	f003 fa92 	bl	8005d44 <reset_state_est_state>
}
 8002820:	bf00      	nop
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	200000c4 	.word	0x200000c4
 800282c:	200000e4 	.word	0x200000e4
 8002830:	20000124 	.word	0x20000124
 8002834:	20000104 	.word	0x20000104
 8002838:	20000114 	.word	0x20000114
 800283c:	20000134 	.word	0x20000134
 8002840:	200000a4 	.word	0x200000a4
 8002844:	200000ac 	.word	0x200000ac
 8002848:	200000b4 	.word	0x200000b4
 800284c:	20000392 	.word	0x20000392
 8002850:	20000390 	.word	0x20000390
 8002854:	20000394 	.word	0x20000394
 8002858:	200000bc 	.word	0x200000bc
 800285c:	0801631c 	.word	0x0801631c
 8002860:	2000df90 	.word	0x2000df90
 8002864:	08016328 	.word	0x08016328
 8002868:	20006acc 	.word	0x20006acc
 800286c:	2000cb0c 	.word	0x2000cb0c
 8002870:	08016334 	.word	0x08016334
 8002874:	20000838 	.word	0x20000838
 8002878:	20004acc 	.word	0x20004acc
 800287c:	2000cf90 	.word	0x2000cf90
 8002880:	20009afc 	.word	0x20009afc
 8002884:	2000bb0c 	.word	0x2000bb0c
 8002888:	20006ad8 	.word	0x20006ad8
 800288c:	2000ab0c 	.word	0x2000ab0c
 8002890:	20008afc 	.word	0x20008afc
 8002894:	20007ad8 	.word	0x20007ad8
 8002898:	20005acc 	.word	0x20005acc
 800289c:	08016350 	.word	0x08016350
 80028a0:	20000148 	.word	0x20000148
 80028a4:	20000144 	.word	0x20000144
 80028a8:	200003a0 	.word	0x200003a0

080028ac <scheduler>:

void scheduler (){
 80028ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028b0:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 80028b4:	af44      	add	r7, sp, #272	; 0x110

	tick = HAL_GetTick();
 80028b6:	f004 fc85 	bl	80071c4 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	4b80      	ldr	r3, [pc, #512]	; (8002ac0 <scheduler+0x214>)
 80028be:	601a      	str	r2, [r3, #0]

	// TASK LED
	if(tick >= getNextExecution(&RDY_TASK)){
 80028c0:	4880      	ldr	r0, [pc, #512]	; (8002ac4 <scheduler+0x218>)
 80028c2:	f000 fc1b 	bl	80030fc <getNextExecution>
 80028c6:	4602      	mov	r2, r0
 80028c8:	4b7d      	ldr	r3, [pc, #500]	; (8002ac0 <scheduler+0x214>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d806      	bhi.n	80028de <scheduler+0x32>
		RDY_TASK.last_call = tick;
 80028d0:	4b7b      	ldr	r3, [pc, #492]	; (8002ac0 <scheduler+0x214>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a7b      	ldr	r2, [pc, #492]	; (8002ac4 <scheduler+0x218>)
 80028d6:	6013      	str	r3, [r2, #0]
		toggle(&RDY);
 80028d8:	487b      	ldr	r0, [pc, #492]	; (8002ac8 <scheduler+0x21c>)
 80028da:	f001 ff63 	bl	80047a4 <toggle>
	}
	if(tick >= getNextExecution(&SAVE_TASK)){
 80028de:	487b      	ldr	r0, [pc, #492]	; (8002acc <scheduler+0x220>)
 80028e0:	f000 fc0c 	bl	80030fc <getNextExecution>
 80028e4:	4602      	mov	r2, r0
 80028e6:	4b76      	ldr	r3, [pc, #472]	; (8002ac0 <scheduler+0x214>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d806      	bhi.n	80028fc <scheduler+0x50>
		SAVE_TASK.last_call = tick;
 80028ee:	4b74      	ldr	r3, [pc, #464]	; (8002ac0 <scheduler+0x214>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a76      	ldr	r2, [pc, #472]	; (8002acc <scheduler+0x220>)
 80028f4:	6013      	str	r3, [r2, #0]
		toggle(&SAVE);
 80028f6:	4876      	ldr	r0, [pc, #472]	; (8002ad0 <scheduler+0x224>)
 80028f8:	f001 ff54 	bl	80047a4 <toggle>
	}
	if(tick >= getNextExecution(&STAT_TASK)){
 80028fc:	4875      	ldr	r0, [pc, #468]	; (8002ad4 <scheduler+0x228>)
 80028fe:	f000 fbfd 	bl	80030fc <getNextExecution>
 8002902:	4602      	mov	r2, r0
 8002904:	4b6e      	ldr	r3, [pc, #440]	; (8002ac0 <scheduler+0x214>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	429a      	cmp	r2, r3
 800290a:	d806      	bhi.n	800291a <scheduler+0x6e>
		STAT_TASK.last_call = tick;
 800290c:	4b6c      	ldr	r3, [pc, #432]	; (8002ac0 <scheduler+0x214>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a70      	ldr	r2, [pc, #448]	; (8002ad4 <scheduler+0x228>)
 8002912:	6013      	str	r3, [r2, #0]
		toggle(&STAT);
 8002914:	4870      	ldr	r0, [pc, #448]	; (8002ad8 <scheduler+0x22c>)
 8002916:	f001 ff45 	bl	80047a4 <toggle>
	}
	if(tick >= getNextExecution(&PRGM_TASK)){
 800291a:	4870      	ldr	r0, [pc, #448]	; (8002adc <scheduler+0x230>)
 800291c:	f000 fbee 	bl	80030fc <getNextExecution>
 8002920:	4602      	mov	r2, r0
 8002922:	4b67      	ldr	r3, [pc, #412]	; (8002ac0 <scheduler+0x214>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	429a      	cmp	r2, r3
 8002928:	d806      	bhi.n	8002938 <scheduler+0x8c>
		PRGM_TASK.last_call = tick;
 800292a:	4b65      	ldr	r3, [pc, #404]	; (8002ac0 <scheduler+0x214>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a6b      	ldr	r2, [pc, #428]	; (8002adc <scheduler+0x230>)
 8002930:	6013      	str	r3, [r2, #0]
		toggle(&PRGM);
 8002932:	486b      	ldr	r0, [pc, #428]	; (8002ae0 <scheduler+0x234>)
 8002934:	f001 ff36 	bl	80047a4 <toggle>
	}


	// TASK SHT
	if(tick >= getNextExecution(&SHT_TASK)){
 8002938:	486a      	ldr	r0, [pc, #424]	; (8002ae4 <scheduler+0x238>)
 800293a:	f000 fbdf 	bl	80030fc <getNextExecution>
 800293e:	4602      	mov	r2, r0
 8002940:	4b5f      	ldr	r3, [pc, #380]	; (8002ac0 <scheduler+0x214>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	429a      	cmp	r2, r3
 8002946:	d808      	bhi.n	800295a <scheduler+0xae>
		SHT_TASK.last_call = tick;
 8002948:	4b5d      	ldr	r3, [pc, #372]	; (8002ac0 <scheduler+0x214>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a65      	ldr	r2, [pc, #404]	; (8002ae4 <scheduler+0x238>)
 800294e:	6013      	str	r3, [r2, #0]
		sht31_read(&TEMP, t_val, t_buf);
 8002950:	4a65      	ldr	r2, [pc, #404]	; (8002ae8 <scheduler+0x23c>)
 8002952:	4966      	ldr	r1, [pc, #408]	; (8002aec <scheduler+0x240>)
 8002954:	4866      	ldr	r0, [pc, #408]	; (8002af0 <scheduler+0x244>)
 8002956:	f002 fb53 	bl	8005000 <sht31_read>
	}

	// TASK BARO
	if(tick >= getNextExecution(&BARO_TASK)){
 800295a:	4866      	ldr	r0, [pc, #408]	; (8002af4 <scheduler+0x248>)
 800295c:	f000 fbce 	bl	80030fc <getNextExecution>
 8002960:	4602      	mov	r2, r0
 8002962:	4b57      	ldr	r3, [pc, #348]	; (8002ac0 <scheduler+0x214>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	429a      	cmp	r2, r3
 8002968:	d830      	bhi.n	80029cc <scheduler+0x120>

		switch(BARO_TASK.stage){
 800296a:	4b62      	ldr	r3, [pc, #392]	; (8002af4 <scheduler+0x248>)
 800296c:	7a1b      	ldrb	r3, [r3, #8]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d002      	beq.n	8002978 <scheduler+0xcc>
 8002972:	2b01      	cmp	r3, #1
 8002974:	d010      	beq.n	8002998 <scheduler+0xec>
 8002976:	e029      	b.n	80029cc <scheduler+0x120>
			case MS_TEMPERATURE_REQ:
				ms5607_prep_pressure(&BARO1, raw_data1);
 8002978:	495f      	ldr	r1, [pc, #380]	; (8002af8 <scheduler+0x24c>)
 800297a:	4860      	ldr	r0, [pc, #384]	; (8002afc <scheduler+0x250>)
 800297c:	f001 fff0 	bl	8004960 <ms5607_prep_pressure>
				ms5607_prep_pressure(&BARO2, raw_data2);
 8002980:	495f      	ldr	r1, [pc, #380]	; (8002b00 <scheduler+0x254>)
 8002982:	4860      	ldr	r0, [pc, #384]	; (8002b04 <scheduler+0x258>)
 8002984:	f001 ffec 	bl	8004960 <ms5607_prep_pressure>
				BARO_TASK.last_call = tick;
 8002988:	4b4d      	ldr	r3, [pc, #308]	; (8002ac0 <scheduler+0x214>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a59      	ldr	r2, [pc, #356]	; (8002af4 <scheduler+0x248>)
 800298e:	6013      	str	r3, [r2, #0]
				BARO_TASK.stage = MS_PRESSURE_REQ;
 8002990:	4b58      	ldr	r3, [pc, #352]	; (8002af4 <scheduler+0x248>)
 8002992:	2201      	movs	r2, #1
 8002994:	721a      	strb	r2, [r3, #8]
				break;
 8002996:	e019      	b.n	80029cc <scheduler+0x120>
			case MS_PRESSURE_REQ:
				ms5607_read_pressure(&BARO1, raw_data1);
 8002998:	4957      	ldr	r1, [pc, #348]	; (8002af8 <scheduler+0x24c>)
 800299a:	4858      	ldr	r0, [pc, #352]	; (8002afc <scheduler+0x250>)
 800299c:	f002 f829 	bl	80049f2 <ms5607_read_pressure>
				ms5607_read_pressure(&BARO2, raw_data2);
 80029a0:	4957      	ldr	r1, [pc, #348]	; (8002b00 <scheduler+0x254>)
 80029a2:	4858      	ldr	r0, [pc, #352]	; (8002b04 <scheduler+0x258>)
 80029a4:	f002 f825 	bl	80049f2 <ms5607_read_pressure>
				BARO_TASK.last_call = tick;
 80029a8:	4b45      	ldr	r3, [pc, #276]	; (8002ac0 <scheduler+0x214>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a51      	ldr	r2, [pc, #324]	; (8002af4 <scheduler+0x248>)
 80029ae:	6013      	str	r3, [r2, #0]
				ms5607_convert(&BARO1, &p1, &t_p1);
 80029b0:	4a55      	ldr	r2, [pc, #340]	; (8002b08 <scheduler+0x25c>)
 80029b2:	4956      	ldr	r1, [pc, #344]	; (8002b0c <scheduler+0x260>)
 80029b4:	4851      	ldr	r0, [pc, #324]	; (8002afc <scheduler+0x250>)
 80029b6:	f002 f867 	bl	8004a88 <ms5607_convert>
				ms5607_convert(&BARO2, &p2, &t_p2);
 80029ba:	4a55      	ldr	r2, [pc, #340]	; (8002b10 <scheduler+0x264>)
 80029bc:	4955      	ldr	r1, [pc, #340]	; (8002b14 <scheduler+0x268>)
 80029be:	4851      	ldr	r0, [pc, #324]	; (8002b04 <scheduler+0x258>)
 80029c0:	f002 f862 	bl	8004a88 <ms5607_convert>
				BARO_TASK.stage = MS_TEMPERATURE_REQ;
 80029c4:	4b4b      	ldr	r3, [pc, #300]	; (8002af4 <scheduler+0x248>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	721a      	strb	r2, [r3, #8]
				break;
 80029ca:	bf00      	nop
		}
	}

	// TASK IMU

	if(tick >= getNextExecution(&IMU_TASK)){
 80029cc:	4852      	ldr	r0, [pc, #328]	; (8002b18 <scheduler+0x26c>)
 80029ce:	f000 fb95 	bl	80030fc <getNextExecution>
 80029d2:	4602      	mov	r2, r0
 80029d4:	4b3a      	ldr	r3, [pc, #232]	; (8002ac0 <scheduler+0x214>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d80b      	bhi.n	80029f4 <scheduler+0x148>
		IMU_TASK.last_call = tick;
 80029dc:	4b38      	ldr	r3, [pc, #224]	; (8002ac0 <scheduler+0x214>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a4d      	ldr	r2, [pc, #308]	; (8002b18 <scheduler+0x26c>)
 80029e2:	6013      	str	r3, [r2, #0]
		//icm20601_read_data_raw(&IMU1, accel1_raw_buf);
		//icm20601_convert_data(&IMU1, accel1_val, accel1_raw_buf);
		icm20601_read_data(&IMU1, accel1_val);
 80029e4:	494d      	ldr	r1, [pc, #308]	; (8002b1c <scheduler+0x270>)
 80029e6:	484e      	ldr	r0, [pc, #312]	; (8002b20 <scheduler+0x274>)
 80029e8:	f001 fe06 	bl	80045f8 <icm20601_read_data>

		//icm20601_read_data_raw(&IMU2, accel2_raw_buf);
		//icm20601_convert_data(&IMU2, accel2_val, accel2_raw_buf);
		icm20601_read_data(&IMU2, accel2_val);
 80029ec:	494d      	ldr	r1, [pc, #308]	; (8002b24 <scheduler+0x278>)
 80029ee:	484e      	ldr	r0, [pc, #312]	; (8002b28 <scheduler+0x27c>)
 80029f0:	f001 fe02 	bl	80045f8 <icm20601_read_data>
	}

	// TASK SHOCK ACCEL

	if(tick >= getNextExecution(&ACCEL_TASK)){
 80029f4:	484d      	ldr	r0, [pc, #308]	; (8002b2c <scheduler+0x280>)
 80029f6:	f000 fb81 	bl	80030fc <getNextExecution>
 80029fa:	4602      	mov	r2, r0
 80029fc:	4b30      	ldr	r3, [pc, #192]	; (8002ac0 <scheduler+0x214>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d80b      	bhi.n	8002a1c <scheduler+0x170>
		ACCEL_TASK.last_call = tick;
 8002a04:	4b2e      	ldr	r3, [pc, #184]	; (8002ac0 <scheduler+0x214>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a48      	ldr	r2, [pc, #288]	; (8002b2c <scheduler+0x280>)
 8002a0a:	6013      	str	r3, [r2, #0]
		h3l_read_raw(&ACCEL, accel_raw);
 8002a0c:	4948      	ldr	r1, [pc, #288]	; (8002b30 <scheduler+0x284>)
 8002a0e:	4849      	ldr	r0, [pc, #292]	; (8002b34 <scheduler+0x288>)
 8002a10:	f001 f9d0 	bl	8003db4 <h3l_read_raw>
		h3l_convert(&ACCEL, accel);
 8002a14:	4948      	ldr	r1, [pc, #288]	; (8002b38 <scheduler+0x28c>)
 8002a16:	4847      	ldr	r0, [pc, #284]	; (8002b34 <scheduler+0x288>)
 8002a18:	f001 faca 	bl	8003fb0 <h3l_convert>
	}

	// TASK ADC
	if(tick >= getNextExecution(&ADC_TASK)){
 8002a1c:	4847      	ldr	r0, [pc, #284]	; (8002b3c <scheduler+0x290>)
 8002a1e:	f000 fb6d 	bl	80030fc <getNextExecution>
 8002a22:	4602      	mov	r2, r0
 8002a24:	4b26      	ldr	r3, [pc, #152]	; (8002ac0 <scheduler+0x214>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d826      	bhi.n	8002a7a <scheduler+0x1ce>
		ADC_TASK.last_call = tick;
 8002a2c:	4b24      	ldr	r3, [pc, #144]	; (8002ac0 <scheduler+0x214>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a42      	ldr	r2, [pc, #264]	; (8002b3c <scheduler+0x290>)
 8002a32:	6013      	str	r3, [r2, #0]
		read_ADC(adc_dat);
 8002a34:	4842      	ldr	r0, [pc, #264]	; (8002b40 <scheduler+0x294>)
 8002a36:	f7fe fadb 	bl	8000ff0 <read_ADC>
		if (DEBUG_PRINT == 1) printf("4 %4.2f V \n", adc_dat[3]);
		if (DEBUG_PRINT == 1) printf("5 %4.2f V \n", adc_dat[4]);
		if (DEBUG_PRINT == 1) printf("6 %4.2f V \n", adc_dat[5]);
		if (DEBUG_PRINT == 1) printf("7 %4.2f V \n", adc_dat[6]);
		if (DEBUG_PRINT == 1) printf("8 %4.2f C \n", adc_dat[7]);
		V_TD1 = adc_dat[0];
 8002a3a:	4b41      	ldr	r3, [pc, #260]	; (8002b40 <scheduler+0x294>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a41      	ldr	r2, [pc, #260]	; (8002b44 <scheduler+0x298>)
 8002a40:	6013      	str	r3, [r2, #0]
		V_TD2 = adc_dat[1];
 8002a42:	4b3f      	ldr	r3, [pc, #252]	; (8002b40 <scheduler+0x294>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	4a40      	ldr	r2, [pc, #256]	; (8002b48 <scheduler+0x29c>)
 8002a48:	6013      	str	r3, [r2, #0]
		V_LDR = adc_dat[2];
 8002a4a:	4b3d      	ldr	r3, [pc, #244]	; (8002b40 <scheduler+0x294>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	4a3f      	ldr	r2, [pc, #252]	; (8002b4c <scheduler+0x2a0>)
 8002a50:	6013      	str	r3, [r2, #0]
		I_BAT1 = adc_dat[3];
 8002a52:	4b3b      	ldr	r3, [pc, #236]	; (8002b40 <scheduler+0x294>)
 8002a54:	68db      	ldr	r3, [r3, #12]
 8002a56:	4a3e      	ldr	r2, [pc, #248]	; (8002b50 <scheduler+0x2a4>)
 8002a58:	6013      	str	r3, [r2, #0]
		I_BAT2 = adc_dat[4];
 8002a5a:	4b39      	ldr	r3, [pc, #228]	; (8002b40 <scheduler+0x294>)
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	4a3d      	ldr	r2, [pc, #244]	; (8002b54 <scheduler+0x2a8>)
 8002a60:	6013      	str	r3, [r2, #0]
		V_BAT1 = adc_dat[5];
 8002a62:	4b37      	ldr	r3, [pc, #220]	; (8002b40 <scheduler+0x294>)
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	4a3c      	ldr	r2, [pc, #240]	; (8002b58 <scheduler+0x2ac>)
 8002a68:	6013      	str	r3, [r2, #0]
		V_BAT2 = adc_dat[6];
 8002a6a:	4b35      	ldr	r3, [pc, #212]	; (8002b40 <scheduler+0x294>)
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	4a3b      	ldr	r2, [pc, #236]	; (8002b5c <scheduler+0x2b0>)
 8002a70:	6013      	str	r3, [r2, #0]
		t_cpu = adc_dat[7];
 8002a72:	4b33      	ldr	r3, [pc, #204]	; (8002b40 <scheduler+0x294>)
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	4a3a      	ldr	r2, [pc, #232]	; (8002b60 <scheduler+0x2b4>)
 8002a78:	6013      	str	r3, [r2, #0]
	}

	// TASK STATE ESTIMATION

	if(tick >= getNextExecution(&STATE_EST_TASK)){
 8002a7a:	483a      	ldr	r0, [pc, #232]	; (8002b64 <scheduler+0x2b8>)
 8002a7c:	f000 fb3e 	bl	80030fc <getNextExecution>
 8002a80:	4602      	mov	r2, r0
 8002a82:	4b0f      	ldr	r3, [pc, #60]	; (8002ac0 <scheduler+0x214>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	f200 814c 	bhi.w	8002d24 <scheduler+0x478>
		STATE_EST_TASK.last_call = tick;
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <scheduler+0x214>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a34      	ldr	r2, [pc, #208]	; (8002b64 <scheduler+0x2b8>)
 8002a92:	6013      	str	r3, [r2, #0]

		if (FAKE_DATA == 1){
 8002a94:	4b34      	ldr	r3, [pc, #208]	; (8002b68 <scheduler+0x2bc>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	f040 80c5 	bne.w	8002c28 <scheduler+0x37c>

			// if file does not exist, continue with nominal operation
			if (TIME[counter] == 0){
 8002a9e:	4b33      	ldr	r3, [pc, #204]	; (8002b6c <scheduler+0x2c0>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a33      	ldr	r2, [pc, #204]	; (8002b70 <scheduler+0x2c4>)
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	edd3 7a00 	vldr	s15, [r3]
 8002aac:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ab4:	d15e      	bne.n	8002b74 <scheduler+0x2c8>
				FAKE_DATA = 0;
 8002ab6:	4b2c      	ldr	r3, [pc, #176]	; (8002b68 <scheduler+0x2bc>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	701a      	strb	r2, [r3, #0]
 8002abc:	e0ac      	b.n	8002c18 <scheduler+0x36c>
 8002abe:	bf00      	nop
 8002ac0:	2000cf0c 	.word	0x2000cf0c
 8002ac4:	20000064 	.word	0x20000064
 8002ac8:	200000bc 	.word	0x200000bc
 8002acc:	20000084 	.word	0x20000084
 8002ad0:	200000ac 	.word	0x200000ac
 8002ad4:	20000074 	.word	0x20000074
 8002ad8:	200000a4 	.word	0x200000a4
 8002adc:	20000094 	.word	0x20000094
 8002ae0:	200000b4 	.word	0x200000b4
 8002ae4:	20000034 	.word	0x20000034
 8002ae8:	2000ab04 	.word	0x2000ab04
 8002aec:	2000cf48 	.word	0x2000cf48
 8002af0:	20000124 	.word	0x20000124
 8002af4:	20000024 	.word	0x20000024
 8002af8:	2000cf14 	.word	0x2000cf14
 8002afc:	200000c4 	.word	0x200000c4
 8002b00:	20004ac8 	.word	0x20004ac8
 8002b04:	200000e4 	.word	0x200000e4
 8002b08:	20000388 	.word	0x20000388
 8002b0c:	20000380 	.word	0x20000380
 8002b10:	2000038c 	.word	0x2000038c
 8002b14:	20000384 	.word	0x20000384
 8002b18:	2000034c 	.word	0x2000034c
 8002b1c:	2000cf50 	.word	0x2000cf50
 8002b20:	20000104 	.word	0x20000104
 8002b24:	2000cf1c 	.word	0x2000cf1c
 8002b28:	20000114 	.word	0x20000114
 8002b2c:	2000035c 	.word	0x2000035c
 8002b30:	20008ad8 	.word	0x20008ad8
 8002b34:	20000134 	.word	0x20000134
 8002b38:	20008af0 	.word	0x20008af0
 8002b3c:	20000044 	.word	0x20000044
 8002b40:	2000cf6c 	.word	0x2000cf6c
 8002b44:	20008aec 	.word	0x20008aec
 8002b48:	2000aafc 	.word	0x2000aafc
 8002b4c:	2000cf10 	.word	0x2000cf10
 8002b50:	2000ab00 	.word	0x2000ab00
 8002b54:	2000cf18 	.word	0x2000cf18
 8002b58:	2000cf38 	.word	0x2000cf38
 8002b5c:	2000ab08 	.word	0x2000ab08
 8002b60:	20004ac4 	.word	0x20004ac4
 8002b64:	20000054 	.word	0x20000054
 8002b68:	20000838 	.word	0x20000838
 8002b6c:	2000037c 	.word	0x2000037c
 8002b70:	20005acc 	.word	0x20005acc
			} else {
				// use fake/old data from SD card
				fake_tick = TIME[counter];
 8002b74:	4ba2      	ldr	r3, [pc, #648]	; (8002e00 <scheduler+0x554>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4aa2      	ldr	r2, [pc, #648]	; (8002e04 <scheduler+0x558>)
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	edd3 7a00 	vldr	s15, [r3]
 8002b82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b86:	ee17 2a90 	vmov	r2, s15
 8002b8a:	4b9f      	ldr	r3, [pc, #636]	; (8002e08 <scheduler+0x55c>)
 8002b8c:	601a      	str	r2, [r3, #0]
				p1 = P1[counter];
 8002b8e:	4b9c      	ldr	r3, [pc, #624]	; (8002e00 <scheduler+0x554>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a9e      	ldr	r2, [pc, #632]	; (8002e0c <scheduler+0x560>)
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4413      	add	r3, r2
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a9d      	ldr	r2, [pc, #628]	; (8002e10 <scheduler+0x564>)
 8002b9c:	6013      	str	r3, [r2, #0]
				p2 = P2[counter];
 8002b9e:	4b98      	ldr	r3, [pc, #608]	; (8002e00 <scheduler+0x554>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a9c      	ldr	r2, [pc, #624]	; (8002e14 <scheduler+0x568>)
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a9b      	ldr	r2, [pc, #620]	; (8002e18 <scheduler+0x56c>)
 8002bac:	6013      	str	r3, [r2, #0]
				accel1_val[1] = Ax1[counter];
 8002bae:	4b94      	ldr	r3, [pc, #592]	; (8002e00 <scheduler+0x554>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a9a      	ldr	r2, [pc, #616]	; (8002e1c <scheduler+0x570>)
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a99      	ldr	r2, [pc, #612]	; (8002e20 <scheduler+0x574>)
 8002bbc:	6053      	str	r3, [r2, #4]
				accel1_val[2] = Ay1[counter];
 8002bbe:	4b90      	ldr	r3, [pc, #576]	; (8002e00 <scheduler+0x554>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a98      	ldr	r2, [pc, #608]	; (8002e24 <scheduler+0x578>)
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a95      	ldr	r2, [pc, #596]	; (8002e20 <scheduler+0x574>)
 8002bcc:	6093      	str	r3, [r2, #8]
				accel1_val[3] = Az1[counter];
 8002bce:	4b8c      	ldr	r3, [pc, #560]	; (8002e00 <scheduler+0x554>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a95      	ldr	r2, [pc, #596]	; (8002e28 <scheduler+0x57c>)
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	4413      	add	r3, r2
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a91      	ldr	r2, [pc, #580]	; (8002e20 <scheduler+0x574>)
 8002bdc:	60d3      	str	r3, [r2, #12]
				accel2_val[1] = Ax2[counter];
 8002bde:	4b88      	ldr	r3, [pc, #544]	; (8002e00 <scheduler+0x554>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a92      	ldr	r2, [pc, #584]	; (8002e2c <scheduler+0x580>)
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a91      	ldr	r2, [pc, #580]	; (8002e30 <scheduler+0x584>)
 8002bec:	6053      	str	r3, [r2, #4]
				accel2_val[2] = Ay2[counter];
 8002bee:	4b84      	ldr	r3, [pc, #528]	; (8002e00 <scheduler+0x554>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a90      	ldr	r2, [pc, #576]	; (8002e34 <scheduler+0x588>)
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	4413      	add	r3, r2
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a8d      	ldr	r2, [pc, #564]	; (8002e30 <scheduler+0x584>)
 8002bfc:	6093      	str	r3, [r2, #8]
				accel2_val[3] = Az2[counter];
 8002bfe:	4b80      	ldr	r3, [pc, #512]	; (8002e00 <scheduler+0x554>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a8d      	ldr	r2, [pc, #564]	; (8002e38 <scheduler+0x58c>)
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a89      	ldr	r2, [pc, #548]	; (8002e30 <scheduler+0x584>)
 8002c0c:	60d3      	str	r3, [r2, #12]
				counter ++;
 8002c0e:	4b7c      	ldr	r3, [pc, #496]	; (8002e00 <scheduler+0x554>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	3301      	adds	r3, #1
 8002c14:	4a7a      	ldr	r2, [pc, #488]	; (8002e00 <scheduler+0x554>)
 8002c16:	6013      	str	r3, [r2, #0]
			}

			// if fake file ends, continue with nominal operation
			if (counter >= FAKE_FILE_LEN){
 8002c18:	4b79      	ldr	r3, [pc, #484]	; (8002e00 <scheduler+0x554>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c20:	d302      	bcc.n	8002c28 <scheduler+0x37c>
				FAKE_DATA = 0;
 8002c22:	4b86      	ldr	r3, [pc, #536]	; (8002e3c <scheduler+0x590>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	701a      	strb	r2, [r3, #0]
			}
		}

		// call state estimation

		state_est_state.state_est_meas.baro_data[0].pressure = p1;
 8002c28:	4b79      	ldr	r3, [pc, #484]	; (8002e10 <scheduler+0x564>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a84      	ldr	r2, [pc, #528]	; (8002e40 <scheduler+0x594>)
 8002c2e:	63d3      	str	r3, [r2, #60]	; 0x3c
		state_est_state.state_est_meas.baro_data[0].temperature = t_p1;
 8002c30:	4b84      	ldr	r3, [pc, #528]	; (8002e44 <scheduler+0x598>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a82      	ldr	r2, [pc, #520]	; (8002e40 <scheduler+0x594>)
 8002c36:	6413      	str	r3, [r2, #64]	; 0x40
		state_est_state.state_est_meas.baro_data[0].ts = tick;
 8002c38:	4b83      	ldr	r3, [pc, #524]	; (8002e48 <scheduler+0x59c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a80      	ldr	r2, [pc, #512]	; (8002e40 <scheduler+0x594>)
 8002c3e:	6453      	str	r3, [r2, #68]	; 0x44

		state_est_state.state_est_meas.imu_data[0].acc_x = IMU_SIGN[0]*accel1_val[0] + IMU_SIGN[1]*accel1_val[1] + IMU_SIGN[2]*accel1_val[2];
 8002c40:	4b82      	ldr	r3, [pc, #520]	; (8002e4c <scheduler+0x5a0>)
 8002c42:	f993 3000 	ldrsb.w	r3, [r3]
 8002c46:	ee07 3a90 	vmov	s15, r3
 8002c4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c4e:	4b74      	ldr	r3, [pc, #464]	; (8002e20 <scheduler+0x574>)
 8002c50:	edd3 7a00 	vldr	s15, [r3]
 8002c54:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c58:	4b7c      	ldr	r3, [pc, #496]	; (8002e4c <scheduler+0x5a0>)
 8002c5a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002c5e:	ee07 3a90 	vmov	s15, r3
 8002c62:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002c66:	4b6e      	ldr	r3, [pc, #440]	; (8002e20 <scheduler+0x574>)
 8002c68:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c74:	4b75      	ldr	r3, [pc, #468]	; (8002e4c <scheduler+0x5a0>)
 8002c76:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8002c7a:	ee07 3a90 	vmov	s15, r3
 8002c7e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002c82:	4b67      	ldr	r3, [pc, #412]	; (8002e20 <scheduler+0x574>)
 8002c84:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c90:	4b6b      	ldr	r3, [pc, #428]	; (8002e40 <scheduler+0x594>)
 8002c92:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
		state_est_state.state_est_meas.imu_data[0].ts = tick;
 8002c96:	4b6c      	ldr	r3, [pc, #432]	; (8002e48 <scheduler+0x59c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a69      	ldr	r2, [pc, #420]	; (8002e40 <scheduler+0x594>)
 8002c9c:	66d3      	str	r3, [r2, #108]	; 0x6c

		state_est_state.state_est_meas.baro_data[1].pressure = p2;
 8002c9e:	4b5e      	ldr	r3, [pc, #376]	; (8002e18 <scheduler+0x56c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a67      	ldr	r2, [pc, #412]	; (8002e40 <scheduler+0x594>)
 8002ca4:	6493      	str	r3, [r2, #72]	; 0x48
		state_est_state.state_est_meas.baro_data[1].temperature = t_p2;
 8002ca6:	4b6a      	ldr	r3, [pc, #424]	; (8002e50 <scheduler+0x5a4>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a65      	ldr	r2, [pc, #404]	; (8002e40 <scheduler+0x594>)
 8002cac:	64d3      	str	r3, [r2, #76]	; 0x4c
		state_est_state.state_est_meas.baro_data[1].ts = tick;
 8002cae:	4b66      	ldr	r3, [pc, #408]	; (8002e48 <scheduler+0x59c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a63      	ldr	r2, [pc, #396]	; (8002e40 <scheduler+0x594>)
 8002cb4:	6513      	str	r3, [r2, #80]	; 0x50

		state_est_state.state_est_meas.imu_data[1].acc_x = IMU_SIGN[0]*accel2_val[0] + IMU_SIGN[1]*accel2_val[1] + IMU_SIGN[2]*accel2_val[2];
 8002cb6:	4b65      	ldr	r3, [pc, #404]	; (8002e4c <scheduler+0x5a0>)
 8002cb8:	f993 3000 	ldrsb.w	r3, [r3]
 8002cbc:	ee07 3a90 	vmov	s15, r3
 8002cc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cc4:	4b5a      	ldr	r3, [pc, #360]	; (8002e30 <scheduler+0x584>)
 8002cc6:	edd3 7a00 	vldr	s15, [r3]
 8002cca:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cce:	4b5f      	ldr	r3, [pc, #380]	; (8002e4c <scheduler+0x5a0>)
 8002cd0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002cd4:	ee07 3a90 	vmov	s15, r3
 8002cd8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002cdc:	4b54      	ldr	r3, [pc, #336]	; (8002e30 <scheduler+0x584>)
 8002cde:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ce2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ce6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cea:	4b58      	ldr	r3, [pc, #352]	; (8002e4c <scheduler+0x5a0>)
 8002cec:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8002cf0:	ee07 3a90 	vmov	s15, r3
 8002cf4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002cf8:	4b4d      	ldr	r3, [pc, #308]	; (8002e30 <scheduler+0x584>)
 8002cfa:	edd3 7a02 	vldr	s15, [r3, #8]
 8002cfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d06:	4b4e      	ldr	r3, [pc, #312]	; (8002e40 <scheduler+0x594>)
 8002d08:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
		state_est_state.state_est_meas.imu_data[1].ts = tick;
 8002d0c:	4b4e      	ldr	r3, [pc, #312]	; (8002e48 <scheduler+0x59c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a4b      	ldr	r2, [pc, #300]	; (8002e40 <scheduler+0x594>)
 8002d12:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

		state_est_step(tick, &state_est_state, 1);
 8002d16:	4b4c      	ldr	r3, [pc, #304]	; (8002e48 <scheduler+0x59c>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	4948      	ldr	r1, [pc, #288]	; (8002e40 <scheduler+0x594>)
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f003 f870 	bl	8005e04 <state_est_step>
		// turn_off_TDs();

	}

	// TASK LOGGING
	if(tick >= getNextExecution(&LOG_TASK)){
 8002d24:	484b      	ldr	r0, [pc, #300]	; (8002e54 <scheduler+0x5a8>)
 8002d26:	f000 f9e9 	bl	80030fc <getNextExecution>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	4b46      	ldr	r3, [pc, #280]	; (8002e48 <scheduler+0x59c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	f200 81c4 	bhi.w	80030be <scheduler+0x812>
		LOG_TASK.last_call = tick;
 8002d36:	4b44      	ldr	r3, [pc, #272]	; (8002e48 <scheduler+0x59c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a46      	ldr	r2, [pc, #280]	; (8002e54 <scheduler+0x5a8>)
 8002d3c:	6013      	str	r3, [r2, #0]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002d3e:	4b42      	ldr	r3, [pc, #264]	; (8002e48 <scheduler+0x59c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002d46:	4b44      	ldr	r3, [pc, #272]	; (8002e58 <scheduler+0x5ac>)
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002d4e:	4b43      	ldr	r3, [pc, #268]	; (8002e5c <scheduler+0x5b0>)
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002d56:	4b42      	ldr	r3, [pc, #264]	; (8002e60 <scheduler+0x5b4>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002d5e:	4b41      	ldr	r3, [pc, #260]	; (8002e64 <scheduler+0x5b8>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fd fbf0 	bl	8000548 <__aeabi_f2d>
 8002d68:	e9c7 0138 	strd	r0, r1, [r7, #224]	; 0xe0
 8002d6c:	4b3e      	ldr	r3, [pc, #248]	; (8002e68 <scheduler+0x5bc>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fd fbe9 	bl	8000548 <__aeabi_f2d>
 8002d76:	e9c7 0136 	strd	r0, r1, [r7, #216]	; 0xd8
				tick,armed,event,flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002d7a:	4b3c      	ldr	r3, [pc, #240]	; (8002e6c <scheduler+0x5c0>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fd fbe2 	bl	8000548 <__aeabi_f2d>
 8002d84:	e9c7 0134 	strd	r0, r1, [r7, #208]	; 0xd0
				tick,armed,event,flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002d88:	4b38      	ldr	r3, [pc, #224]	; (8002e6c <scheduler+0x5c0>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fd fbdb 	bl	8000548 <__aeabi_f2d>
 8002d92:	e9c7 0132 	strd	r0, r1, [r7, #200]	; 0xc8
 8002d96:	4b36      	ldr	r3, [pc, #216]	; (8002e70 <scheduler+0x5c4>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7fd fbd4 	bl	8000548 <__aeabi_f2d>
 8002da0:	e9c7 0130 	strd	r0, r1, [r7, #192]	; 0xc0
 8002da4:	4b27      	ldr	r3, [pc, #156]	; (8002e44 <scheduler+0x598>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7fd fbcd 	bl	8000548 <__aeabi_f2d>
 8002dae:	e9c7 012e 	strd	r0, r1, [r7, #184]	; 0xb8
 8002db2:	4b27      	ldr	r3, [pc, #156]	; (8002e50 <scheduler+0x5a4>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7fd fbc6 	bl	8000548 <__aeabi_f2d>
 8002dbc:	e9c7 012c 	strd	r0, r1, [r7, #176]	; 0xb0
				tick,armed,event,flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002dc0:	4b17      	ldr	r3, [pc, #92]	; (8002e20 <scheduler+0x574>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7fd fbbf 	bl	8000548 <__aeabi_f2d>
 8002dca:	e9c7 012a 	strd	r0, r1, [r7, #168]	; 0xa8
				tick,armed,event,flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002dce:	4b18      	ldr	r3, [pc, #96]	; (8002e30 <scheduler+0x584>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7fd fbb8 	bl	8000548 <__aeabi_f2d>
 8002dd8:	e9c7 0128 	strd	r0, r1, [r7, #160]	; 0xa0
 8002ddc:	4b0c      	ldr	r3, [pc, #48]	; (8002e10 <scheduler+0x564>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7fd fbb1 	bl	8000548 <__aeabi_f2d>
 8002de6:	e9c7 0126 	strd	r0, r1, [r7, #152]	; 0x98
 8002dea:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <scheduler+0x56c>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fd fbaa 	bl	8000548 <__aeabi_f2d>
 8002df4:	e9c7 0124 	strd	r0, r1, [r7, #144]	; 0x90
				tick,armed,event,flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002df8:	4b09      	ldr	r3, [pc, #36]	; (8002e20 <scheduler+0x574>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	e039      	b.n	8002e74 <scheduler+0x5c8>
 8002e00:	2000037c 	.word	0x2000037c
 8002e04:	20005acc 	.word	0x20005acc
 8002e08:	2000cf8c 	.word	0x2000cf8c
 8002e0c:	20007ad8 	.word	0x20007ad8
 8002e10:	20000380 	.word	0x20000380
 8002e14:	20008afc 	.word	0x20008afc
 8002e18:	20000384 	.word	0x20000384
 8002e1c:	2000ab0c 	.word	0x2000ab0c
 8002e20:	2000cf50 	.word	0x2000cf50
 8002e24:	20006ad8 	.word	0x20006ad8
 8002e28:	2000bb0c 	.word	0x2000bb0c
 8002e2c:	20009afc 	.word	0x20009afc
 8002e30:	2000cf1c 	.word	0x2000cf1c
 8002e34:	2000cf90 	.word	0x2000cf90
 8002e38:	20004acc 	.word	0x20004acc
 8002e3c:	20000838 	.word	0x20000838
 8002e40:	200003a0 	.word	0x200003a0
 8002e44:	20000388 	.word	0x20000388
 8002e48:	2000cf0c 	.word	0x2000cf0c
 8002e4c:	20000144 	.word	0x20000144
 8002e50:	2000038c 	.word	0x2000038c
 8002e54:	2000036c 	.word	0x2000036c
 8002e58:	20000395 	.word	0x20000395
 8002e5c:	20000396 	.word	0x20000396
 8002e60:	20000397 	.word	0x20000397
 8002e64:	20000398 	.word	0x20000398
 8002e68:	2000039c 	.word	0x2000039c
 8002e6c:	2000cf48 	.word	0x2000cf48
 8002e70:	20004ac4 	.word	0x20004ac4
 8002e74:	f7fd fb68 	bl	8000548 <__aeabi_f2d>
 8002e78:	e9c7 0122 	strd	r0, r1, [r7, #136]	; 0x88
				tick,armed,event,flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002e7c:	4b92      	ldr	r3, [pc, #584]	; (80030c8 <scheduler+0x81c>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7fd fb61 	bl	8000548 <__aeabi_f2d>
 8002e86:	e9c7 0120 	strd	r0, r1, [r7, #128]	; 0x80
				tick,armed,event,flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002e8a:	4b8f      	ldr	r3, [pc, #572]	; (80030c8 <scheduler+0x81c>)
 8002e8c:	68db      	ldr	r3, [r3, #12]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fd fb5a 	bl	8000548 <__aeabi_f2d>
 8002e94:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
				tick,armed,event,flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002e98:	4b8b      	ldr	r3, [pc, #556]	; (80030c8 <scheduler+0x81c>)
 8002e9a:	691b      	ldr	r3, [r3, #16]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7fd fb53 	bl	8000548 <__aeabi_f2d>
 8002ea2:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70
				tick,armed,event,flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002ea6:	4b88      	ldr	r3, [pc, #544]	; (80030c8 <scheduler+0x81c>)
 8002ea8:	695b      	ldr	r3, [r3, #20]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fd fb4c 	bl	8000548 <__aeabi_f2d>
 8002eb0:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
				tick,armed,event,flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002eb4:	4b84      	ldr	r3, [pc, #528]	; (80030c8 <scheduler+0x81c>)
 8002eb6:	699b      	ldr	r3, [r3, #24]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7fd fb45 	bl	8000548 <__aeabi_f2d>
 8002ebe:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
				tick,armed,event,flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002ec2:	4b82      	ldr	r3, [pc, #520]	; (80030cc <scheduler+0x820>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fd fb3e 	bl	8000548 <__aeabi_f2d>
 8002ecc:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
				tick,armed,event,flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002ed0:	4b7e      	ldr	r3, [pc, #504]	; (80030cc <scheduler+0x820>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7fd fb37 	bl	8000548 <__aeabi_f2d>
 8002eda:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
				tick,armed,event,flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002ede:	4b7b      	ldr	r3, [pc, #492]	; (80030cc <scheduler+0x820>)
 8002ee0:	68db      	ldr	r3, [r3, #12]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fd fb30 	bl	8000548 <__aeabi_f2d>
 8002ee8:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
				tick,armed,event,flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002eec:	4b77      	ldr	r3, [pc, #476]	; (80030cc <scheduler+0x820>)
 8002eee:	691b      	ldr	r3, [r3, #16]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7fd fb29 	bl	8000548 <__aeabi_f2d>
 8002ef6:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
				tick,armed,event,flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002efa:	4b74      	ldr	r3, [pc, #464]	; (80030cc <scheduler+0x820>)
 8002efc:	695b      	ldr	r3, [r3, #20]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fd fb22 	bl	8000548 <__aeabi_f2d>
 8002f04:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
				tick,armed,event,flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002f08:	4b70      	ldr	r3, [pc, #448]	; (80030cc <scheduler+0x820>)
 8002f0a:	699b      	ldr	r3, [r3, #24]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7fd fb1b 	bl	8000548 <__aeabi_f2d>
 8002f12:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
				tick,armed,event,flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002f16:	4b6e      	ldr	r3, [pc, #440]	; (80030d0 <scheduler+0x824>)
 8002f18:	681b      	ldr	r3, [r3, #0]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fd fb14 	bl	8000548 <__aeabi_f2d>
 8002f20:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
				tick,armed,event,flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002f24:	4b6a      	ldr	r3, [pc, #424]	; (80030d0 <scheduler+0x824>)
 8002f26:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fd fb0d 	bl	8000548 <__aeabi_f2d>
 8002f2e:	e9c7 0108 	strd	r0, r1, [r7, #32]
				tick,armed,event,flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002f32:	4b67      	ldr	r3, [pc, #412]	; (80030d0 <scheduler+0x824>)
 8002f34:	689b      	ldr	r3, [r3, #8]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7fd fb06 	bl	8000548 <__aeabi_f2d>
 8002f3c:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002f40:	4b64      	ldr	r3, [pc, #400]	; (80030d4 <scheduler+0x828>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7fd faff 	bl	8000548 <__aeabi_f2d>
 8002f4a:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002f4e:	4b62      	ldr	r3, [pc, #392]	; (80030d8 <scheduler+0x82c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4618      	mov	r0, r3
 8002f54:	f7fd faf8 	bl	8000548 <__aeabi_f2d>
 8002f58:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002f5c:	4b5f      	ldr	r3, [pc, #380]	; (80030dc <scheduler+0x830>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7fd faf1 	bl	8000548 <__aeabi_f2d>
 8002f66:	e9c7 0100 	strd	r0, r1, [r7]
 8002f6a:	4b5d      	ldr	r3, [pc, #372]	; (80030e0 <scheduler+0x834>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fd faea 	bl	8000548 <__aeabi_f2d>
 8002f74:	4682      	mov	sl, r0
 8002f76:	468b      	mov	fp, r1
 8002f78:	4b5a      	ldr	r3, [pc, #360]	; (80030e4 <scheduler+0x838>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fd fae3 	bl	8000548 <__aeabi_f2d>
 8002f82:	4680      	mov	r8, r0
 8002f84:	4689      	mov	r9, r1
 8002f86:	4b58      	ldr	r3, [pc, #352]	; (80030e8 <scheduler+0x83c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fd fadc 	bl	8000548 <__aeabi_f2d>
 8002f90:	4605      	mov	r5, r0
 8002f92:	460e      	mov	r6, r1
 8002f94:	4b55      	ldr	r3, [pc, #340]	; (80030ec <scheduler+0x840>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7fd fad5 	bl	8000548 <__aeabi_f2d>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	460c      	mov	r4, r1
 8002fa2:	e9cd 3442 	strd	r3, r4, [sp, #264]	; 0x108
 8002fa6:	e9cd 5640 	strd	r5, r6, [sp, #256]	; 0x100
 8002faa:	e9cd 893e 	strd	r8, r9, [sp, #248]	; 0xf8
 8002fae:	e9cd ab3c 	strd	sl, fp, [sp, #240]	; 0xf0
 8002fb2:	ed97 7b00 	vldr	d7, [r7]
 8002fb6:	ed8d 7b3a 	vstr	d7, [sp, #232]	; 0xe8
 8002fba:	ed97 7b02 	vldr	d7, [r7, #8]
 8002fbe:	ed8d 7b38 	vstr	d7, [sp, #224]	; 0xe0
 8002fc2:	ed97 7b04 	vldr	d7, [r7, #16]
 8002fc6:	ed8d 7b36 	vstr	d7, [sp, #216]	; 0xd8
 8002fca:	ed97 7b06 	vldr	d7, [r7, #24]
 8002fce:	ed8d 7b34 	vstr	d7, [sp, #208]	; 0xd0
 8002fd2:	ed97 7b08 	vldr	d7, [r7, #32]
 8002fd6:	ed8d 7b32 	vstr	d7, [sp, #200]	; 0xc8
 8002fda:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002fde:	ed8d 7b30 	vstr	d7, [sp, #192]	; 0xc0
 8002fe2:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002fe6:	ed8d 7b2e 	vstr	d7, [sp, #184]	; 0xb8
 8002fea:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002fee:	ed8d 7b2c 	vstr	d7, [sp, #176]	; 0xb0
 8002ff2:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002ff6:	ed8d 7b2a 	vstr	d7, [sp, #168]	; 0xa8
 8002ffa:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8002ffe:	ed8d 7b28 	vstr	d7, [sp, #160]	; 0xa0
 8003002:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8003006:	ed8d 7b26 	vstr	d7, [sp, #152]	; 0x98
 800300a:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 800300e:	ed8d 7b24 	vstr	d7, [sp, #144]	; 0x90
 8003012:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8003016:	ed8d 7b22 	vstr	d7, [sp, #136]	; 0x88
 800301a:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 800301e:	ed8d 7b20 	vstr	d7, [sp, #128]	; 0x80
 8003022:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8003026:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 800302a:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 800302e:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8003032:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8003036:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 800303a:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 800303e:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8003042:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 8003046:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 800304a:	ed97 7b26 	vldr	d7, [r7, #152]	; 0x98
 800304e:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8003052:	ed97 7b28 	vldr	d7, [r7, #160]	; 0xa0
 8003056:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 800305a:	ed97 7b2a 	vldr	d7, [r7, #168]	; 0xa8
 800305e:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8003062:	ed97 7b2c 	vldr	d7, [r7, #176]	; 0xb0
 8003066:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800306a:	ed97 7b2e 	vldr	d7, [r7, #184]	; 0xb8
 800306e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8003072:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 8003076:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800307a:	ed97 7b32 	vldr	d7, [r7, #200]	; 0xc8
 800307e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003082:	ed97 7b34 	vldr	d7, [r7, #208]	; 0xd0
 8003086:	ed8d 7b06 	vstr	d7, [sp, #24]
 800308a:	ed97 7b36 	vldr	d7, [r7, #216]	; 0xd8
 800308e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003092:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 8003096:	ed8d 7b02 	vstr	d7, [sp, #8]
 800309a:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800309e:	9101      	str	r1, [sp, #4]
 80030a0:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80030a4:	9100      	str	r1, [sp, #0]
 80030a6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80030aa:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80030ae:	4910      	ldr	r1, [pc, #64]	; (80030f0 <scheduler+0x844>)
 80030b0:	4810      	ldr	r0, [pc, #64]	; (80030f4 <scheduler+0x848>)
 80030b2:	f00d ff2d 	bl	8010f10 <siprintf>

		write_to_SD(FILE_NAME, buffer);
 80030b6:	490f      	ldr	r1, [pc, #60]	; (80030f4 <scheduler+0x848>)
 80030b8:	480f      	ldr	r0, [pc, #60]	; (80030f8 <scheduler+0x84c>)
 80030ba:	f7fe fbf3 	bl	80018a4 <write_to_SD>
	if (DEBUG_PRINT == 1) printf("IMU2 az: %4.2f m/s2 \n", accel2_val[3]);
	if (DEBUG_PRINT == 1) printf("ACC ax: %4.2f m/s2 \n", accel[0]);
	if (DEBUG_PRINT == 1) printf("ACC ay: %4.2f m/s2 \n", accel[1]);
	if (DEBUG_PRINT == 1) printf("ACC az: %4.2f m/s2 \n", accel[2]);

}
 80030be:	bf00      	nop
 80030c0:	37fc      	adds	r7, #252	; 0xfc
 80030c2:	46bd      	mov	sp, r7
 80030c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030c8:	2000cf50 	.word	0x2000cf50
 80030cc:	2000cf1c 	.word	0x2000cf1c
 80030d0:	20008af0 	.word	0x20008af0
 80030d4:	2000ab00 	.word	0x2000ab00
 80030d8:	2000cf18 	.word	0x2000cf18
 80030dc:	2000cf38 	.word	0x2000cf38
 80030e0:	2000ab08 	.word	0x2000ab08
 80030e4:	2000cf10 	.word	0x2000cf10
 80030e8:	20008aec 	.word	0x20008aec
 80030ec:	2000aafc 	.word	0x2000aafc
 80030f0:	0801635c 	.word	0x0801635c
 80030f4:	2000cb0c 	.word	0x2000cb0c
 80030f8:	2000df90 	.word	0x2000df90

080030fc <getNextExecution>:

uint32_t getNextExecution(task_t * task){
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
	return task->last_call + task->interval;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	4413      	add	r3, r2
}
 800310e:	4618      	mov	r0, r3
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
	...

0800311c <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 8003120:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <MX_SDIO_SD_Init+0x38>)
 8003122:	4a0d      	ldr	r2, [pc, #52]	; (8003158 <MX_SDIO_SD_Init+0x3c>)
 8003124:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8003126:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <MX_SDIO_SD_Init+0x38>)
 8003128:	2200      	movs	r2, #0
 800312a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800312c:	4b09      	ldr	r3, [pc, #36]	; (8003154 <MX_SDIO_SD_Init+0x38>)
 800312e:	2200      	movs	r2, #0
 8003130:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003132:	4b08      	ldr	r3, [pc, #32]	; (8003154 <MX_SDIO_SD_Init+0x38>)
 8003134:	2200      	movs	r2, #0
 8003136:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8003138:	4b06      	ldr	r3, [pc, #24]	; (8003154 <MX_SDIO_SD_Init+0x38>)
 800313a:	2200      	movs	r2, #0
 800313c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800313e:	4b05      	ldr	r3, [pc, #20]	; (8003154 <MX_SDIO_SD_Init+0x38>)
 8003140:	2200      	movs	r2, #0
 8003142:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 3;
 8003144:	4b03      	ldr	r3, [pc, #12]	; (8003154 <MX_SDIO_SD_Init+0x38>)
 8003146:	2203      	movs	r2, #3
 8003148:	619a      	str	r2, [r3, #24]

}
 800314a:	bf00      	nop
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr
 8003154:	2000e05c 	.word	0x2000e05c
 8003158:	40012c00 	.word	0x40012c00

0800315c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b08a      	sub	sp, #40	; 0x28
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003164:	f107 0314 	add.w	r3, r7, #20
 8003168:	2200      	movs	r2, #0
 800316a:	601a      	str	r2, [r3, #0]
 800316c:	605a      	str	r2, [r3, #4]
 800316e:	609a      	str	r2, [r3, #8]
 8003170:	60da      	str	r2, [r3, #12]
 8003172:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a68      	ldr	r2, [pc, #416]	; (800331c <HAL_SD_MspInit+0x1c0>)
 800317a:	4293      	cmp	r3, r2
 800317c:	f040 80c9 	bne.w	8003312 <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003180:	2300      	movs	r3, #0
 8003182:	613b      	str	r3, [r7, #16]
 8003184:	4b66      	ldr	r3, [pc, #408]	; (8003320 <HAL_SD_MspInit+0x1c4>)
 8003186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003188:	4a65      	ldr	r2, [pc, #404]	; (8003320 <HAL_SD_MspInit+0x1c4>)
 800318a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800318e:	6453      	str	r3, [r2, #68]	; 0x44
 8003190:	4b63      	ldr	r3, [pc, #396]	; (8003320 <HAL_SD_MspInit+0x1c4>)
 8003192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003198:	613b      	str	r3, [r7, #16]
 800319a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800319c:	2300      	movs	r3, #0
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	4b5f      	ldr	r3, [pc, #380]	; (8003320 <HAL_SD_MspInit+0x1c4>)
 80031a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a4:	4a5e      	ldr	r2, [pc, #376]	; (8003320 <HAL_SD_MspInit+0x1c4>)
 80031a6:	f043 0304 	orr.w	r3, r3, #4
 80031aa:	6313      	str	r3, [r2, #48]	; 0x30
 80031ac:	4b5c      	ldr	r3, [pc, #368]	; (8003320 <HAL_SD_MspInit+0x1c4>)
 80031ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	60fb      	str	r3, [r7, #12]
 80031b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031b8:	2300      	movs	r3, #0
 80031ba:	60bb      	str	r3, [r7, #8]
 80031bc:	4b58      	ldr	r3, [pc, #352]	; (8003320 <HAL_SD_MspInit+0x1c4>)
 80031be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c0:	4a57      	ldr	r2, [pc, #348]	; (8003320 <HAL_SD_MspInit+0x1c4>)
 80031c2:	f043 0308 	orr.w	r3, r3, #8
 80031c6:	6313      	str	r3, [r2, #48]	; 0x30
 80031c8:	4b55      	ldr	r3, [pc, #340]	; (8003320 <HAL_SD_MspInit+0x1c4>)
 80031ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031cc:	f003 0308 	and.w	r3, r3, #8
 80031d0:	60bb      	str	r3, [r7, #8]
 80031d2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80031d4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80031d8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031da:	2302      	movs	r3, #2
 80031dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031de:	2300      	movs	r3, #0
 80031e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031e2:	2303      	movs	r3, #3
 80031e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80031e6:	230c      	movs	r3, #12
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031ea:	f107 0314 	add.w	r3, r7, #20
 80031ee:	4619      	mov	r1, r3
 80031f0:	484c      	ldr	r0, [pc, #304]	; (8003324 <HAL_SD_MspInit+0x1c8>)
 80031f2:	f005 f971 	bl	80084d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80031f6:	2304      	movs	r3, #4
 80031f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fa:	2302      	movs	r3, #2
 80031fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fe:	2300      	movs	r3, #0
 8003200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003202:	2303      	movs	r3, #3
 8003204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003206:	230c      	movs	r3, #12
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800320a:	f107 0314 	add.w	r3, r7, #20
 800320e:	4619      	mov	r1, r3
 8003210:	4845      	ldr	r0, [pc, #276]	; (8003328 <HAL_SD_MspInit+0x1cc>)
 8003212:	f005 f961 	bl	80084d8 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8003216:	4b45      	ldr	r3, [pc, #276]	; (800332c <HAL_SD_MspInit+0x1d0>)
 8003218:	4a45      	ldr	r2, [pc, #276]	; (8003330 <HAL_SD_MspInit+0x1d4>)
 800321a:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800321c:	4b43      	ldr	r3, [pc, #268]	; (800332c <HAL_SD_MspInit+0x1d0>)
 800321e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003222:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003224:	4b41      	ldr	r3, [pc, #260]	; (800332c <HAL_SD_MspInit+0x1d0>)
 8003226:	2200      	movs	r2, #0
 8003228:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800322a:	4b40      	ldr	r3, [pc, #256]	; (800332c <HAL_SD_MspInit+0x1d0>)
 800322c:	2200      	movs	r2, #0
 800322e:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003230:	4b3e      	ldr	r3, [pc, #248]	; (800332c <HAL_SD_MspInit+0x1d0>)
 8003232:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003236:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003238:	4b3c      	ldr	r3, [pc, #240]	; (800332c <HAL_SD_MspInit+0x1d0>)
 800323a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800323e:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003240:	4b3a      	ldr	r3, [pc, #232]	; (800332c <HAL_SD_MspInit+0x1d0>)
 8003242:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003246:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8003248:	4b38      	ldr	r3, [pc, #224]	; (800332c <HAL_SD_MspInit+0x1d0>)
 800324a:	2220      	movs	r2, #32
 800324c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800324e:	4b37      	ldr	r3, [pc, #220]	; (800332c <HAL_SD_MspInit+0x1d0>)
 8003250:	2200      	movs	r2, #0
 8003252:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003254:	4b35      	ldr	r3, [pc, #212]	; (800332c <HAL_SD_MspInit+0x1d0>)
 8003256:	2204      	movs	r2, #4
 8003258:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800325a:	4b34      	ldr	r3, [pc, #208]	; (800332c <HAL_SD_MspInit+0x1d0>)
 800325c:	2203      	movs	r2, #3
 800325e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8003260:	4b32      	ldr	r3, [pc, #200]	; (800332c <HAL_SD_MspInit+0x1d0>)
 8003262:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003266:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003268:	4b30      	ldr	r3, [pc, #192]	; (800332c <HAL_SD_MspInit+0x1d0>)
 800326a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800326e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8003270:	482e      	ldr	r0, [pc, #184]	; (800332c <HAL_SD_MspInit+0x1d0>)
 8003272:	f004 fd25 	bl	8007cc0 <HAL_DMA_Init>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 800327c:	f7ff f9f0 	bl	8002660 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a2a      	ldr	r2, [pc, #168]	; (800332c <HAL_SD_MspInit+0x1d0>)
 8003284:	641a      	str	r2, [r3, #64]	; 0x40
 8003286:	4a29      	ldr	r2, [pc, #164]	; (800332c <HAL_SD_MspInit+0x1d0>)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800328c:	4b29      	ldr	r3, [pc, #164]	; (8003334 <HAL_SD_MspInit+0x1d8>)
 800328e:	4a2a      	ldr	r2, [pc, #168]	; (8003338 <HAL_SD_MspInit+0x1dc>)
 8003290:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8003292:	4b28      	ldr	r3, [pc, #160]	; (8003334 <HAL_SD_MspInit+0x1d8>)
 8003294:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003298:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800329a:	4b26      	ldr	r3, [pc, #152]	; (8003334 <HAL_SD_MspInit+0x1d8>)
 800329c:	2240      	movs	r2, #64	; 0x40
 800329e:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032a0:	4b24      	ldr	r3, [pc, #144]	; (8003334 <HAL_SD_MspInit+0x1d8>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032a6:	4b23      	ldr	r3, [pc, #140]	; (8003334 <HAL_SD_MspInit+0x1d8>)
 80032a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032ac:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80032ae:	4b21      	ldr	r3, [pc, #132]	; (8003334 <HAL_SD_MspInit+0x1d8>)
 80032b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032b4:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80032b6:	4b1f      	ldr	r3, [pc, #124]	; (8003334 <HAL_SD_MspInit+0x1d8>)
 80032b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80032bc:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80032be:	4b1d      	ldr	r3, [pc, #116]	; (8003334 <HAL_SD_MspInit+0x1d8>)
 80032c0:	2220      	movs	r2, #32
 80032c2:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80032c4:	4b1b      	ldr	r3, [pc, #108]	; (8003334 <HAL_SD_MspInit+0x1d8>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80032ca:	4b1a      	ldr	r3, [pc, #104]	; (8003334 <HAL_SD_MspInit+0x1d8>)
 80032cc:	2204      	movs	r2, #4
 80032ce:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80032d0:	4b18      	ldr	r3, [pc, #96]	; (8003334 <HAL_SD_MspInit+0x1d8>)
 80032d2:	2203      	movs	r2, #3
 80032d4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80032d6:	4b17      	ldr	r3, [pc, #92]	; (8003334 <HAL_SD_MspInit+0x1d8>)
 80032d8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80032dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80032de:	4b15      	ldr	r3, [pc, #84]	; (8003334 <HAL_SD_MspInit+0x1d8>)
 80032e0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80032e4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80032e6:	4813      	ldr	r0, [pc, #76]	; (8003334 <HAL_SD_MspInit+0x1d8>)
 80032e8:	f004 fcea 	bl	8007cc0 <HAL_DMA_Init>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 80032f2:	f7ff f9b5 	bl	8002660 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a0e      	ldr	r2, [pc, #56]	; (8003334 <HAL_SD_MspInit+0x1d8>)
 80032fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80032fc:	4a0d      	ldr	r2, [pc, #52]	; (8003334 <HAL_SD_MspInit+0x1d8>)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8003302:	2200      	movs	r2, #0
 8003304:	2100      	movs	r1, #0
 8003306:	2031      	movs	r0, #49	; 0x31
 8003308:	f004 fca3 	bl	8007c52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800330c:	2031      	movs	r0, #49	; 0x31
 800330e:	f004 fcbc 	bl	8007c8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8003312:	bf00      	nop
 8003314:	3728      	adds	r7, #40	; 0x28
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40012c00 	.word	0x40012c00
 8003320:	40023800 	.word	0x40023800
 8003324:	40020800 	.word	0x40020800
 8003328:	40020c00 	.word	0x40020c00
 800332c:	2000df9c 	.word	0x2000df9c
 8003330:	40026458 	.word	0x40026458
 8003334:	2000dffc 	.word	0x2000dffc
 8003338:	400264a0 	.word	0x400264a0

0800333c <p_sanity_check>:
 */
#include "selftest.h"
#include "buzzer.h"
#include <stdio.h>

uint8_t p_sanity_check(float * p){
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
	if ((*p < 110000) | (*p > 80000)) {
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	edd3 7a00 	vldr	s15, [r3]
 800334a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8003394 <p_sanity_check+0x58>
 800334e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003356:	bf4c      	ite	mi
 8003358:	2301      	movmi	r3, #1
 800335a:	2300      	movpl	r3, #0
 800335c:	b2da      	uxtb	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	edd3 7a00 	vldr	s15, [r3]
 8003364:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003398 <p_sanity_check+0x5c>
 8003368:	eef4 7ac7 	vcmpe.f32	s15, s14
 800336c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003370:	bfcc      	ite	gt
 8003372:	2301      	movgt	r3, #1
 8003374:	2300      	movle	r3, #0
 8003376:	b2db      	uxtb	r3, r3
 8003378:	4313      	orrs	r3, r2
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <p_sanity_check+0x48>
		return 1;
 8003380:	2301      	movs	r3, #1
 8003382:	e000      	b.n	8003386 <p_sanity_check+0x4a>
	} else {
		return 0;
 8003384:	2300      	movs	r3, #0
	}
}
 8003386:	4618      	mov	r0, r3
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	47d6d800 	.word	0x47d6d800
 8003398:	479c4000 	.word	0x479c4000

0800339c <t_sanity_check>:

uint8_t t_sanity_check(float * t){
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
	if ((*t < 80) | (*t > 1)) {
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	edd3 7a00 	vldr	s15, [r3]
 80033aa:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80033f4 <t_sanity_check+0x58>
 80033ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b6:	bf4c      	ite	mi
 80033b8:	2301      	movmi	r3, #1
 80033ba:	2300      	movpl	r3, #0
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	edd3 7a00 	vldr	s15, [r3]
 80033c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80033c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d0:	bfcc      	ite	gt
 80033d2:	2301      	movgt	r3, #1
 80033d4:	2300      	movle	r3, #0
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	4313      	orrs	r3, r2
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <t_sanity_check+0x48>
		return 1;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e000      	b.n	80033e6 <t_sanity_check+0x4a>
	} else {
		return 0;
 80033e4:	2300      	movs	r3, #0
	}
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	42a00000 	.word	0x42a00000

080033f8 <a_sanity_check>:

int8_t a_sanity_check(float * a){
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
	if ((*a < 10) | (*a > 8)) {
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	edd3 7a00 	vldr	s15, [r3]
 8003406:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800340a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800340e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003412:	bf4c      	ite	mi
 8003414:	2301      	movmi	r3, #1
 8003416:	2300      	movpl	r3, #0
 8003418:	b2da      	uxtb	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	edd3 7a00 	vldr	s15, [r3]
 8003420:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8003424:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800342c:	bfcc      	ite	gt
 800342e:	2301      	movgt	r3, #1
 8003430:	2300      	movle	r3, #0
 8003432:	b2db      	uxtb	r3, r3
 8003434:	4313      	orrs	r3, r2
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <a_sanity_check+0x48>
		return 1;
 800343c:	2301      	movs	r3, #1
 800343e:	e021      	b.n	8003484 <a_sanity_check+0x8c>
	} else if ((*a > -10) | (*a < -8)){
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	edd3 7a00 	vldr	s15, [r3]
 8003446:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800344a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800344e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003452:	bfcc      	ite	gt
 8003454:	2301      	movgt	r3, #1
 8003456:	2300      	movle	r3, #0
 8003458:	b2da      	uxtb	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	edd3 7a00 	vldr	s15, [r3]
 8003460:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 8003464:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800346c:	bf4c      	ite	mi
 800346e:	2301      	movmi	r3, #1
 8003470:	2300      	movpl	r3, #0
 8003472:	b2db      	uxtb	r3, r3
 8003474:	4313      	orrs	r3, r2
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b00      	cmp	r3, #0
 800347a:	d002      	beq.n	8003482 <a_sanity_check+0x8a>
		return -1;
 800347c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003480:	e000      	b.n	8003484 <a_sanity_check+0x8c>
	} else {
		return 0;
 8003482:	2300      	movs	r3, #0
	}
}
 8003484:	4618      	mov	r0, r3
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <config_baro>:

uint8_t config_baro(struct sht31_dev * t_dev, struct ms5607_dev * p1_dev, struct ms5607_dev * p2_dev, float * t, float * p){
 8003490:	b580      	push	{r7, lr}
 8003492:	b092      	sub	sp, #72	; 0x48
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
 800349c:	603b      	str	r3, [r7, #0]

	float t1_sum = 0;
 800349e:	f04f 0300 	mov.w	r3, #0
 80034a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	float p1_sum = 0;
 80034a4:	f04f 0300 	mov.w	r3, #0
 80034a8:	63bb      	str	r3, [r7, #56]	; 0x38
	float t2_sum = 0;
 80034aa:	f04f 0300 	mov.w	r3, #0
 80034ae:	637b      	str	r3, [r7, #52]	; 0x34
	float p2_sum = 0;
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	633b      	str	r3, [r7, #48]	; 0x30
	float p1;
	float p2;
	float t1;
	float t2;
	// sample pressure/temperture 100 times
	for (int i = 0; i < MAX_SETUP_SAMPLE; i++)
 80034b6:	2300      	movs	r3, #0
 80034b8:	647b      	str	r3, [r7, #68]	; 0x44
 80034ba:	e050      	b.n	800355e <config_baro+0xce>
	{
		ms5607_prep_pressure(p1_dev, pbuf);
 80034bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034c0:	4619      	mov	r1, r3
 80034c2:	68b8      	ldr	r0, [r7, #8]
 80034c4:	f001 fa4c 	bl	8004960 <ms5607_prep_pressure>
		ms5607_prep_pressure(p2_dev, pbuf);
 80034c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034cc:	4619      	mov	r1, r3
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f001 fa46 	bl	8004960 <ms5607_prep_pressure>
		HAL_Delay(5);
 80034d4:	2005      	movs	r0, #5
 80034d6:	f003 fe81 	bl	80071dc <HAL_Delay>
		ms5607_read_pressure(p1_dev, pbuf);
 80034da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034de:	4619      	mov	r1, r3
 80034e0:	68b8      	ldr	r0, [r7, #8]
 80034e2:	f001 fa86 	bl	80049f2 <ms5607_read_pressure>
		ms5607_read_pressure(p2_dev, pbuf);
 80034e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034ea:	4619      	mov	r1, r3
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f001 fa80 	bl	80049f2 <ms5607_read_pressure>
		ms5607_convert(p1_dev, &p1, &t1);
 80034f2:	f107 0214 	add.w	r2, r7, #20
 80034f6:	f107 031c 	add.w	r3, r7, #28
 80034fa:	4619      	mov	r1, r3
 80034fc:	68b8      	ldr	r0, [r7, #8]
 80034fe:	f001 fac3 	bl	8004a88 <ms5607_convert>
		ms5607_convert(p2_dev, &p2, &t2);
 8003502:	f107 0210 	add.w	r2, r7, #16
 8003506:	f107 0318 	add.w	r3, r7, #24
 800350a:	4619      	mov	r1, r3
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f001 fabb 	bl	8004a88 <ms5607_convert>
		t1_sum += t1;
 8003512:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003516:	edd7 7a05 	vldr	s15, [r7, #20]
 800351a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800351e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		p1_sum += p1;
 8003522:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003526:	edd7 7a07 	vldr	s15, [r7, #28]
 800352a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800352e:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		t2_sum += t2;
 8003532:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003536:	edd7 7a04 	vldr	s15, [r7, #16]
 800353a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800353e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		p2_sum += p2;
 8003542:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003546:	edd7 7a06 	vldr	s15, [r7, #24]
 800354a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800354e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		HAL_Delay(MAX_SETUP_SAMPLE_INTERVAL + 5);
 8003552:	200f      	movs	r0, #15
 8003554:	f003 fe42 	bl	80071dc <HAL_Delay>
	for (int i = 0; i < MAX_SETUP_SAMPLE; i++)
 8003558:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800355a:	3301      	adds	r3, #1
 800355c:	647b      	str	r3, [r7, #68]	; 0x44
 800355e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003560:	2b63      	cmp	r3, #99	; 0x63
 8003562:	ddab      	ble.n	80034bc <config_baro+0x2c>
	}
	p1_sum /= MAX_SETUP_SAMPLE;
 8003564:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003568:	eddf 6a49 	vldr	s13, [pc, #292]	; 8003690 <config_baro+0x200>
 800356c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003570:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	t1_sum /= MAX_SETUP_SAMPLE;
 8003574:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003578:	eddf 6a45 	vldr	s13, [pc, #276]	; 8003690 <config_baro+0x200>
 800357c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003580:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	p2_sum /= MAX_SETUP_SAMPLE;
 8003584:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003588:	eddf 6a41 	vldr	s13, [pc, #260]	; 8003690 <config_baro+0x200>
 800358c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003590:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	t1_sum /= MAX_SETUP_SAMPLE;
 8003594:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003598:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003690 <config_baro+0x200>
 800359c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035a0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	if (!t_sanity_check(&t1_sum)){
 80035a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7ff fef7 	bl	800339c <t_sanity_check>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <config_baro+0x128>
		if (DEBUG_PRINT == 1) printf("Temperature of BARO 1 out of bounds. abort. \n");
		return 0;
 80035b4:	2300      	movs	r3, #0
 80035b6:	e066      	b.n	8003686 <config_baro+0x1f6>
	}
	if (!t_sanity_check(&t2_sum)){
 80035b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff feed 	bl	800339c <t_sanity_check>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <config_baro+0x13c>
		if (DEBUG_PRINT == 1) printf("Temperature of BARO 2 out of bounds. abort. \n");
		return 0;
 80035c8:	2300      	movs	r3, #0
 80035ca:	e05c      	b.n	8003686 <config_baro+0x1f6>
	}
	if (!p_sanity_check(&p1_sum)){
 80035cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff feb3 	bl	800333c <p_sanity_check>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <config_baro+0x150>
		if (DEBUG_PRINT == 1) printf("Pressure of BARO 1 out of bounds. abort. \n");
		return 0;
 80035dc:	2300      	movs	r3, #0
 80035de:	e052      	b.n	8003686 <config_baro+0x1f6>
	}
	if (!p_sanity_check(&p2_sum)){
 80035e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff fea9 	bl	800333c <p_sanity_check>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <config_baro+0x164>
		if (DEBUG_PRINT == 1) printf("Pressure of BARO 2 out of bounds. abort. \n");
		return 0;
 80035f0:	2300      	movs	r3, #0
 80035f2:	e048      	b.n	8003686 <config_baro+0x1f6>
	}

	// set as environement parameters
	*t = (t1_sum + t2_sum) / 2;
 80035f4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80035f8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80035fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003600:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003604:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	edc3 7a00 	vstr	s15, [r3]
	*p = (p1_sum + p2_sum) / 2;
 800360e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003612:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003616:	ee37 7a27 	vadd.f32	s14, s14, s15
 800361a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800361e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003624:	edc3 7a00 	vstr	s15, [r3]


	// sample SHT temperature 100 times

	for (int i = 0; i < MAX_SETUP_SAMPLE; i++)
 8003628:	2300      	movs	r3, #0
 800362a:	643b      	str	r3, [r7, #64]	; 0x40
 800362c:	e015      	b.n	800365a <config_baro+0x1ca>
	{
		sht31_read(t_dev, sht_val, buf);
 800362e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003632:	f107 0320 	add.w	r3, r7, #32
 8003636:	4619      	mov	r1, r3
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f001 fce1 	bl	8005000 <sht31_read>
		t1_sum += sht_val[1];
 800363e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003642:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003646:	ee77 7a27 	vadd.f32	s15, s14, s15
 800364a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		HAL_Delay(MAX_SETUP_SAMPLE_INTERVAL);
 800364e:	200a      	movs	r0, #10
 8003650:	f003 fdc4 	bl	80071dc <HAL_Delay>
	for (int i = 0; i < MAX_SETUP_SAMPLE; i++)
 8003654:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003656:	3301      	adds	r3, #1
 8003658:	643b      	str	r3, [r7, #64]	; 0x40
 800365a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800365c:	2b63      	cmp	r3, #99	; 0x63
 800365e:	dde6      	ble.n	800362e <config_baro+0x19e>
	}
	t1_sum /= MAX_SETUP_SAMPLE;
 8003660:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003664:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8003690 <config_baro+0x200>
 8003668:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800366c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	if (!t_sanity_check(&t1_sum)){
 8003670:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff fe91 	bl	800339c <t_sanity_check>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d002      	beq.n	8003686 <config_baro+0x1f6>
		if (DEBUG_PRINT == 1) printf("Temperature of SHT out of bounds. continuing anyway. \n");
		// if SHT unavailable, take BARO temperature
	} else {
		// if SHT is available, use SHT temperature value for environement
		*t = t1_sum;
 8003680:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	601a      	str	r2, [r3, #0]
	}
}
 8003686:	4618      	mov	r0, r3
 8003688:	3748      	adds	r7, #72	; 0x48
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	42c80000 	.word	0x42c80000

08003694 <config_imu>:

uint8_t config_imu(struct icm20601_dev * a1_dev, struct icm20601_dev * a2_dev, int8_t * imu_sign, int8_t * acc_sign){
 8003694:	b580      	push	{r7, lr}
 8003696:	b09c      	sub	sp, #112	; 0x70
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
 80036a0:	603b      	str	r3, [r7, #0]
	float a2_temp[7];

	float a1_sum[3];
	float a2_sum[3];

	for (int i = 0; i < MAX_SETUP_SAMPLE; i++)
 80036a2:	2300      	movs	r3, #0
 80036a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036a6:	e04e      	b.n	8003746 <config_imu+0xb2>
	{
		icm20601_read_data(a1_dev, a1_temp);
 80036a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80036ac:	4619      	mov	r1, r3
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f000 ffa2 	bl	80045f8 <icm20601_read_data>
		icm20601_read_data(a2_dev, a2_temp);
 80036b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036b8:	4619      	mov	r1, r3
 80036ba:	68b8      	ldr	r0, [r7, #8]
 80036bc:	f000 ff9c 	bl	80045f8 <icm20601_read_data>
		for (int j = 1; j < 4; j++){
 80036c0:	2301      	movs	r3, #1
 80036c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80036c4:	e036      	b.n	8003734 <config_imu+0xa0>
			a1_sum[j] += a1_temp[j];
 80036c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80036ce:	4413      	add	r3, r2
 80036d0:	3b54      	subs	r3, #84	; 0x54
 80036d2:	ed93 7a00 	vldr	s14, [r3]
 80036d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80036de:	4413      	add	r3, r2
 80036e0:	3b2c      	subs	r3, #44	; 0x2c
 80036e2:	edd3 7a00 	vldr	s15, [r3]
 80036e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80036f2:	4413      	add	r3, r2
 80036f4:	3b54      	subs	r3, #84	; 0x54
 80036f6:	edc3 7a00 	vstr	s15, [r3]
			a2_sum[j] += a2_temp[j];
 80036fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8003702:	4413      	add	r3, r2
 8003704:	3b60      	subs	r3, #96	; 0x60
 8003706:	ed93 7a00 	vldr	s14, [r3]
 800370a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8003712:	4413      	add	r3, r2
 8003714:	3b48      	subs	r3, #72	; 0x48
 8003716:	edd3 7a00 	vldr	s15, [r3]
 800371a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800371e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8003726:	4413      	add	r3, r2
 8003728:	3b60      	subs	r3, #96	; 0x60
 800372a:	edc3 7a00 	vstr	s15, [r3]
		for (int j = 1; j < 4; j++){
 800372e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003730:	3301      	adds	r3, #1
 8003732:	66bb      	str	r3, [r7, #104]	; 0x68
 8003734:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003736:	2b03      	cmp	r3, #3
 8003738:	ddc5      	ble.n	80036c6 <config_imu+0x32>
		}
		HAL_Delay(MAX_SETUP_SAMPLE_INTERVAL);
 800373a:	200a      	movs	r0, #10
 800373c:	f003 fd4e 	bl	80071dc <HAL_Delay>
	for (int i = 0; i < MAX_SETUP_SAMPLE; i++)
 8003740:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003742:	3301      	adds	r3, #1
 8003744:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003748:	2b63      	cmp	r3, #99	; 0x63
 800374a:	ddad      	ble.n	80036a8 <config_imu+0x14>
	}

	// assume rocket is in upright position, config axes accordingly

	uint8_t imu1_state = 0;
 800374c:	2300      	movs	r3, #0
 800374e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t imu2_state = 0;
 8003752:	2300      	movs	r3, #0
 8003754:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	for (int j = 0; j < 3; j++){
 8003758:	2300      	movs	r3, #0
 800375a:	663b      	str	r3, [r7, #96]	; 0x60
 800375c:	e08e      	b.n	800387c <config_imu+0x1e8>
		a1_sum[j] /= MAX_SETUP_SAMPLE;
 800375e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8003766:	4413      	add	r3, r2
 8003768:	3b54      	subs	r3, #84	; 0x54
 800376a:	ed93 7a00 	vldr	s14, [r3]
 800376e:	eddf 6a4c 	vldr	s13, [pc, #304]	; 80038a0 <config_imu+0x20c>
 8003772:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003776:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800377e:	4413      	add	r3, r2
 8003780:	3b54      	subs	r3, #84	; 0x54
 8003782:	edc3 7a00 	vstr	s15, [r3]
		a2_sum[j] /= MAX_SETUP_SAMPLE;
 8003786:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800378e:	4413      	add	r3, r2
 8003790:	3b60      	subs	r3, #96	; 0x60
 8003792:	ed93 7a00 	vldr	s14, [r3]
 8003796:	eddf 6a42 	vldr	s13, [pc, #264]	; 80038a0 <config_imu+0x20c>
 800379a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800379e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	f107 0270 	add.w	r2, r7, #112	; 0x70
 80037a6:	4413      	add	r3, r2
 80037a8:	3b60      	subs	r3, #96	; 0x60
 80037aa:	edc3 7a00 	vstr	s15, [r3]
		if (a_sanity_check(&a1_sum[j]) == 1){
 80037ae:	f107 021c 	add.w	r2, r7, #28
 80037b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7ff fe1d 	bl	80033f8 <a_sanity_check>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d10a      	bne.n	80037da <config_imu+0x146>
			imu1_state ++;
 80037c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80037c8:	3301      	adds	r3, #1
 80037ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			imu_sign[j] = 1;
 80037ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	4413      	add	r3, r2
 80037d4:	2201      	movs	r2, #1
 80037d6:	701a      	strb	r2, [r3, #0]
 80037d8:	e01b      	b.n	8003812 <config_imu+0x17e>
		} else if (a_sanity_check(&a1_sum[j]) == -1){
 80037da:	f107 021c 	add.w	r2, r7, #28
 80037de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	4413      	add	r3, r2
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7ff fe07 	bl	80033f8 <a_sanity_check>
 80037ea:	4603      	mov	r3, r0
 80037ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037f0:	d10a      	bne.n	8003808 <config_imu+0x174>
			imu1_state ++;
 80037f2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80037f6:	3301      	adds	r3, #1
 80037f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			imu_sign[j] = -1;
 80037fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	4413      	add	r3, r2
 8003802:	22ff      	movs	r2, #255	; 0xff
 8003804:	701a      	strb	r2, [r3, #0]
 8003806:	e004      	b.n	8003812 <config_imu+0x17e>
		} else {
			imu_sign[j] = 0;
 8003808:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	4413      	add	r3, r2
 800380e:	2200      	movs	r2, #0
 8003810:	701a      	strb	r2, [r3, #0]
		}
		if (a_sanity_check(&a2_sum[j]) == 1){
 8003812:	f107 0210 	add.w	r2, r7, #16
 8003816:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	4413      	add	r3, r2
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff fdeb 	bl	80033f8 <a_sanity_check>
 8003822:	4603      	mov	r3, r0
 8003824:	2b01      	cmp	r3, #1
 8003826:	d10a      	bne.n	800383e <config_imu+0x1aa>
			imu2_state ++;
 8003828:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800382c:	3301      	adds	r3, #1
 800382e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
			imu_sign[j] = 1;
 8003832:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	4413      	add	r3, r2
 8003838:	2201      	movs	r2, #1
 800383a:	701a      	strb	r2, [r3, #0]
 800383c:	e01b      	b.n	8003876 <config_imu+0x1e2>
		} else if (a_sanity_check(&a2_sum[j]) == -1){
 800383e:	f107 0210 	add.w	r2, r7, #16
 8003842:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff fdd5 	bl	80033f8 <a_sanity_check>
 800384e:	4603      	mov	r3, r0
 8003850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003854:	d10a      	bne.n	800386c <config_imu+0x1d8>
			imu1_state ++;
 8003856:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800385a:	3301      	adds	r3, #1
 800385c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			imu_sign[j] = -1;
 8003860:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	4413      	add	r3, r2
 8003866:	22ff      	movs	r2, #255	; 0xff
 8003868:	701a      	strb	r2, [r3, #0]
 800386a:	e004      	b.n	8003876 <config_imu+0x1e2>
		} else {
			imu_sign[j] = 0;
 800386c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	4413      	add	r3, r2
 8003872:	2200      	movs	r2, #0
 8003874:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 3; j++){
 8003876:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003878:	3301      	adds	r3, #1
 800387a:	663b      	str	r3, [r7, #96]	; 0x60
 800387c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800387e:	2b02      	cmp	r3, #2
 8003880:	f77f af6d 	ble.w	800375e <config_imu+0xca>
		}
	}

	if (imu1_state + imu2_state != 2){
 8003884:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8003888:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800388c:	4413      	add	r3, r2
 800388e:	2b02      	cmp	r3, #2
 8003890:	d001      	beq.n	8003896 <config_imu+0x202>
		if (DEBUG_PRINT == 1) printf("IMU axes out of bounds. abort. \n");
		if (DEBUG_PRINT == 1) printf("IMU1: %d \n", imu1_state);
		if (DEBUG_PRINT == 1) printf("IMU2: %d \n", imu2_state);
		return 0;
 8003892:	2300      	movs	r3, #0
 8003894:	e000      	b.n	8003898 <config_imu+0x204>
	}
	if (DEBUG_PRINT == 1) printf("SIGN: x = %d, y = %d, z = %d \n", imu_sign[0],imu_sign[1],imu_sign[2]);
	return 1;
 8003896:	2301      	movs	r3, #1
}
 8003898:	4618      	mov	r0, r3
 800389a:	3770      	adds	r7, #112	; 0x70
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	42c80000 	.word	0x42c80000

080038a4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80038a8:	4b17      	ldr	r3, [pc, #92]	; (8003908 <MX_SPI1_Init+0x64>)
 80038aa:	4a18      	ldr	r2, [pc, #96]	; (800390c <MX_SPI1_Init+0x68>)
 80038ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80038ae:	4b16      	ldr	r3, [pc, #88]	; (8003908 <MX_SPI1_Init+0x64>)
 80038b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80038b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80038b6:	4b14      	ldr	r3, [pc, #80]	; (8003908 <MX_SPI1_Init+0x64>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80038bc:	4b12      	ldr	r3, [pc, #72]	; (8003908 <MX_SPI1_Init+0x64>)
 80038be:	2200      	movs	r2, #0
 80038c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80038c2:	4b11      	ldr	r3, [pc, #68]	; (8003908 <MX_SPI1_Init+0x64>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80038c8:	4b0f      	ldr	r3, [pc, #60]	; (8003908 <MX_SPI1_Init+0x64>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80038ce:	4b0e      	ldr	r3, [pc, #56]	; (8003908 <MX_SPI1_Init+0x64>)
 80038d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038d6:	4b0c      	ldr	r3, [pc, #48]	; (8003908 <MX_SPI1_Init+0x64>)
 80038d8:	2200      	movs	r2, #0
 80038da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038dc:	4b0a      	ldr	r3, [pc, #40]	; (8003908 <MX_SPI1_Init+0x64>)
 80038de:	2200      	movs	r2, #0
 80038e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80038e2:	4b09      	ldr	r3, [pc, #36]	; (8003908 <MX_SPI1_Init+0x64>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038e8:	4b07      	ldr	r3, [pc, #28]	; (8003908 <MX_SPI1_Init+0x64>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80038ee:	4b06      	ldr	r3, [pc, #24]	; (8003908 <MX_SPI1_Init+0x64>)
 80038f0:	220a      	movs	r2, #10
 80038f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80038f4:	4804      	ldr	r0, [pc, #16]	; (8003908 <MX_SPI1_Init+0x64>)
 80038f6:	f007 ffbf 	bl	800b878 <HAL_SPI_Init>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003900:	f7fe feae 	bl	8002660 <Error_Handler>
  }

}
 8003904:	bf00      	nop
 8003906:	bd80      	pop	{r7, pc}
 8003908:	2000e138 	.word	0x2000e138
 800390c:	40013000 	.word	0x40013000

08003910 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8003914:	4b17      	ldr	r3, [pc, #92]	; (8003974 <MX_SPI2_Init+0x64>)
 8003916:	4a18      	ldr	r2, [pc, #96]	; (8003978 <MX_SPI2_Init+0x68>)
 8003918:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800391a:	4b16      	ldr	r3, [pc, #88]	; (8003974 <MX_SPI2_Init+0x64>)
 800391c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003920:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003922:	4b14      	ldr	r3, [pc, #80]	; (8003974 <MX_SPI2_Init+0x64>)
 8003924:	2200      	movs	r2, #0
 8003926:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003928:	4b12      	ldr	r3, [pc, #72]	; (8003974 <MX_SPI2_Init+0x64>)
 800392a:	2200      	movs	r2, #0
 800392c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800392e:	4b11      	ldr	r3, [pc, #68]	; (8003974 <MX_SPI2_Init+0x64>)
 8003930:	2200      	movs	r2, #0
 8003932:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003934:	4b0f      	ldr	r3, [pc, #60]	; (8003974 <MX_SPI2_Init+0x64>)
 8003936:	2200      	movs	r2, #0
 8003938:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800393a:	4b0e      	ldr	r3, [pc, #56]	; (8003974 <MX_SPI2_Init+0x64>)
 800393c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003940:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003942:	4b0c      	ldr	r3, [pc, #48]	; (8003974 <MX_SPI2_Init+0x64>)
 8003944:	2200      	movs	r2, #0
 8003946:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003948:	4b0a      	ldr	r3, [pc, #40]	; (8003974 <MX_SPI2_Init+0x64>)
 800394a:	2200      	movs	r2, #0
 800394c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800394e:	4b09      	ldr	r3, [pc, #36]	; (8003974 <MX_SPI2_Init+0x64>)
 8003950:	2200      	movs	r2, #0
 8003952:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003954:	4b07      	ldr	r3, [pc, #28]	; (8003974 <MX_SPI2_Init+0x64>)
 8003956:	2200      	movs	r2, #0
 8003958:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800395a:	4b06      	ldr	r3, [pc, #24]	; (8003974 <MX_SPI2_Init+0x64>)
 800395c:	220a      	movs	r2, #10
 800395e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003960:	4804      	ldr	r0, [pc, #16]	; (8003974 <MX_SPI2_Init+0x64>)
 8003962:	f007 ff89 	bl	800b878 <HAL_SPI_Init>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d001      	beq.n	8003970 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800396c:	f7fe fe78 	bl	8002660 <Error_Handler>
  }

}
 8003970:	bf00      	nop
 8003972:	bd80      	pop	{r7, pc}
 8003974:	2000e0e0 	.word	0x2000e0e0
 8003978:	40003800 	.word	0x40003800

0800397c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b08c      	sub	sp, #48	; 0x30
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003984:	f107 031c 	add.w	r3, r7, #28
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	605a      	str	r2, [r3, #4]
 800398e:	609a      	str	r2, [r3, #8]
 8003990:	60da      	str	r2, [r3, #12]
 8003992:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a32      	ldr	r2, [pc, #200]	; (8003a64 <HAL_SPI_MspInit+0xe8>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d12c      	bne.n	80039f8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800399e:	2300      	movs	r3, #0
 80039a0:	61bb      	str	r3, [r7, #24]
 80039a2:	4b31      	ldr	r3, [pc, #196]	; (8003a68 <HAL_SPI_MspInit+0xec>)
 80039a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a6:	4a30      	ldr	r2, [pc, #192]	; (8003a68 <HAL_SPI_MspInit+0xec>)
 80039a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80039ac:	6453      	str	r3, [r2, #68]	; 0x44
 80039ae:	4b2e      	ldr	r3, [pc, #184]	; (8003a68 <HAL_SPI_MspInit+0xec>)
 80039b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039b6:	61bb      	str	r3, [r7, #24]
 80039b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ba:	2300      	movs	r3, #0
 80039bc:	617b      	str	r3, [r7, #20]
 80039be:	4b2a      	ldr	r3, [pc, #168]	; (8003a68 <HAL_SPI_MspInit+0xec>)
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	4a29      	ldr	r2, [pc, #164]	; (8003a68 <HAL_SPI_MspInit+0xec>)
 80039c4:	f043 0301 	orr.w	r3, r3, #1
 80039c8:	6313      	str	r3, [r2, #48]	; 0x30
 80039ca:	4b27      	ldr	r3, [pc, #156]	; (8003a68 <HAL_SPI_MspInit+0xec>)
 80039cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	617b      	str	r3, [r7, #20]
 80039d4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80039d6:	23e0      	movs	r3, #224	; 0xe0
 80039d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039da:	2302      	movs	r3, #2
 80039dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039de:	2300      	movs	r3, #0
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039e2:	2303      	movs	r3, #3
 80039e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80039e6:	2305      	movs	r3, #5
 80039e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ea:	f107 031c 	add.w	r3, r7, #28
 80039ee:	4619      	mov	r1, r3
 80039f0:	481e      	ldr	r0, [pc, #120]	; (8003a6c <HAL_SPI_MspInit+0xf0>)
 80039f2:	f004 fd71 	bl	80084d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80039f6:	e031      	b.n	8003a5c <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a1c      	ldr	r2, [pc, #112]	; (8003a70 <HAL_SPI_MspInit+0xf4>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d12c      	bne.n	8003a5c <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003a02:	2300      	movs	r3, #0
 8003a04:	613b      	str	r3, [r7, #16]
 8003a06:	4b18      	ldr	r3, [pc, #96]	; (8003a68 <HAL_SPI_MspInit+0xec>)
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	4a17      	ldr	r2, [pc, #92]	; (8003a68 <HAL_SPI_MspInit+0xec>)
 8003a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a10:	6413      	str	r3, [r2, #64]	; 0x40
 8003a12:	4b15      	ldr	r3, [pc, #84]	; (8003a68 <HAL_SPI_MspInit+0xec>)
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a1a:	613b      	str	r3, [r7, #16]
 8003a1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	4b11      	ldr	r3, [pc, #68]	; (8003a68 <HAL_SPI_MspInit+0xec>)
 8003a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a26:	4a10      	ldr	r2, [pc, #64]	; (8003a68 <HAL_SPI_MspInit+0xec>)
 8003a28:	f043 0302 	orr.w	r3, r3, #2
 8003a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a2e:	4b0e      	ldr	r3, [pc, #56]	; (8003a68 <HAL_SPI_MspInit+0xec>)
 8003a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003a3a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a40:	2302      	movs	r3, #2
 8003a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a44:	2300      	movs	r3, #0
 8003a46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003a4c:	2305      	movs	r3, #5
 8003a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a50:	f107 031c 	add.w	r3, r7, #28
 8003a54:	4619      	mov	r1, r3
 8003a56:	4807      	ldr	r0, [pc, #28]	; (8003a74 <HAL_SPI_MspInit+0xf8>)
 8003a58:	f004 fd3e 	bl	80084d8 <HAL_GPIO_Init>
}
 8003a5c:	bf00      	nop
 8003a5e:	3730      	adds	r7, #48	; 0x30
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40013000 	.word	0x40013000
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	40020000 	.word	0x40020000
 8003a70:	40003800 	.word	0x40003800
 8003a74:	40020400 	.word	0x40020400

08003a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a7e:	2300      	movs	r3, #0
 8003a80:	607b      	str	r3, [r7, #4]
 8003a82:	4b10      	ldr	r3, [pc, #64]	; (8003ac4 <HAL_MspInit+0x4c>)
 8003a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a86:	4a0f      	ldr	r2, [pc, #60]	; (8003ac4 <HAL_MspInit+0x4c>)
 8003a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a8e:	4b0d      	ldr	r3, [pc, #52]	; (8003ac4 <HAL_MspInit+0x4c>)
 8003a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a96:	607b      	str	r3, [r7, #4]
 8003a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	603b      	str	r3, [r7, #0]
 8003a9e:	4b09      	ldr	r3, [pc, #36]	; (8003ac4 <HAL_MspInit+0x4c>)
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	4a08      	ldr	r2, [pc, #32]	; (8003ac4 <HAL_MspInit+0x4c>)
 8003aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8003aaa:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <HAL_MspInit+0x4c>)
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab2:	603b      	str	r3, [r7, #0]
 8003ab4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	40023800 	.word	0x40023800

08003ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003acc:	bf00      	nop
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr

08003ad6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ada:	e7fe      	b.n	8003ada <HardFault_Handler+0x4>

08003adc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ae0:	e7fe      	b.n	8003ae0 <MemManage_Handler+0x4>

08003ae2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ae2:	b480      	push	{r7}
 8003ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ae6:	e7fe      	b.n	8003ae6 <BusFault_Handler+0x4>

08003ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003aec:	e7fe      	b.n	8003aec <UsageFault_Handler+0x4>

08003aee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003aee:	b480      	push	{r7}
 8003af0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003af2:	bf00      	nop
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b00:	bf00      	nop
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b0a:	b480      	push	{r7}
 8003b0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b0e:	bf00      	nop
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b1c:	f003 fb3e 	bl	800719c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b20:	bf00      	nop
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8003b28:	4802      	ldr	r0, [pc, #8]	; (8003b34 <SDIO_IRQHandler+0x10>)
 8003b2a:	f006 fe11 	bl	800a750 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8003b2e:	bf00      	nop
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	2000e05c 	.word	0x2000e05c

08003b38 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003b3c:	4802      	ldr	r0, [pc, #8]	; (8003b48 <DMA2_Stream0_IRQHandler+0x10>)
 8003b3e:	f004 fa57 	bl	8007ff0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003b42:	bf00      	nop
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	200049bc 	.word	0x200049bc

08003b4c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8003b50:	4802      	ldr	r0, [pc, #8]	; (8003b5c <DMA2_Stream3_IRQHandler+0x10>)
 8003b52:	f004 fa4d 	bl	8007ff0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003b56:	bf00      	nop
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	2000df9c 	.word	0x2000df9c

08003b60 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8003b64:	4802      	ldr	r0, [pc, #8]	; (8003b70 <DMA2_Stream6_IRQHandler+0x10>)
 8003b66:	f004 fa43 	bl	8007ff0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003b6a:	bf00      	nop
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	2000dffc 	.word	0x2000dffc

08003b74 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003b7c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003b80:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d013      	beq.n	8003bb4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003b8c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003b90:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003b94:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00b      	beq.n	8003bb4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003b9c:	e000      	b.n	8003ba0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8003b9e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003ba0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0f9      	beq.n	8003b9e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003baa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	b2d2      	uxtb	r2, r2
 8003bb2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003bb4:	687b      	ldr	r3, [r7, #4]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b086      	sub	sp, #24
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	60f8      	str	r0, [r7, #12]
 8003bca:	60b9      	str	r1, [r7, #8]
 8003bcc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bce:	2300      	movs	r3, #0
 8003bd0:	617b      	str	r3, [r7, #20]
 8003bd2:	e00a      	b.n	8003bea <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003bd4:	f3af 8000 	nop.w
 8003bd8:	4601      	mov	r1, r0
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	1c5a      	adds	r2, r3, #1
 8003bde:	60ba      	str	r2, [r7, #8]
 8003be0:	b2ca      	uxtb	r2, r1
 8003be2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	3301      	adds	r3, #1
 8003be8:	617b      	str	r3, [r7, #20]
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	dbf0      	blt.n	8003bd4 <_read+0x12>
	}

return len;
 8003bf2:	687b      	ldr	r3, [r7, #4]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3718      	adds	r7, #24
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c08:	2300      	movs	r3, #0
 8003c0a:	617b      	str	r3, [r7, #20]
 8003c0c:	e009      	b.n	8003c22 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar((*ptr++));
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	1c5a      	adds	r2, r3, #1
 8003c12:	60ba      	str	r2, [r7, #8]
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7ff ffac 	bl	8003b74 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	617b      	str	r3, [r7, #20]
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	dbf1      	blt.n	8003c0e <_write+0x12>
	}
	return len;
 8003c2a:	687b      	ldr	r3, [r7, #4]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3718      	adds	r7, #24
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <_close>:

int _close(int file)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
	return -1;
 8003c3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c5c:	605a      	str	r2, [r3, #4]
	return 0;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <_isatty>:

int _isatty(int file)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
	return 1;
 8003c74:	2301      	movs	r3, #1
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b085      	sub	sp, #20
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	60f8      	str	r0, [r7, #12]
 8003c8a:	60b9      	str	r1, [r7, #8]
 8003c8c:	607a      	str	r2, [r7, #4]
	return 0;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3714      	adds	r7, #20
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003ca4:	4b11      	ldr	r3, [pc, #68]	; (8003cec <_sbrk+0x50>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d102      	bne.n	8003cb2 <_sbrk+0x16>
		heap_end = &end;
 8003cac:	4b0f      	ldr	r3, [pc, #60]	; (8003cec <_sbrk+0x50>)
 8003cae:	4a10      	ldr	r2, [pc, #64]	; (8003cf0 <_sbrk+0x54>)
 8003cb0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003cb2:	4b0e      	ldr	r3, [pc, #56]	; (8003cec <_sbrk+0x50>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003cb8:	4b0c      	ldr	r3, [pc, #48]	; (8003cec <_sbrk+0x50>)
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	466a      	mov	r2, sp
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d907      	bls.n	8003cd6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003cc6:	f00c fc0d 	bl	80104e4 <__errno>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	230c      	movs	r3, #12
 8003cce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003cd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cd4:	e006      	b.n	8003ce4 <_sbrk+0x48>
	}

	heap_end += incr;
 8003cd6:	4b05      	ldr	r3, [pc, #20]	; (8003cec <_sbrk+0x50>)
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4413      	add	r3, r2
 8003cde:	4a03      	ldr	r2, [pc, #12]	; (8003cec <_sbrk+0x50>)
 8003ce0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	2000083c 	.word	0x2000083c
 8003cf0:	20010208 	.word	0x20010208

08003cf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cf8:	4b08      	ldr	r3, [pc, #32]	; (8003d1c <SystemInit+0x28>)
 8003cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cfe:	4a07      	ldr	r2, [pc, #28]	; (8003d1c <SystemInit+0x28>)
 8003d00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d08:	4b04      	ldr	r3, [pc, #16]	; (8003d1c <SystemInit+0x28>)
 8003d0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d0e:	609a      	str	r2, [r3, #8]
#endif
}
 8003d10:	bf00      	nop
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	e000ed00 	.word	0xe000ed00

08003d20 <h3l_init>:
uint8_t _DELAY_HL = 100;
uint8_t _ADDR_HL = 0x18 << 1;

//almost copy of SHT31 drivers
uint8_t h3l_init(struct h3l_dev * dev)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef _ret;
	if (HAL_I2C_GetState(dev->i2c_bus) != HAL_I2C_STATE_READY)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f005 fb43 	bl	80093b8 <HAL_I2C_GetState>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b20      	cmp	r3, #32
 8003d36:	d003      	beq.n	8003d40 <h3l_init+0x20>
	{
		printf("i2c1 not ready!\n");
 8003d38:	481a      	ldr	r0, [pc, #104]	; (8003da4 <h3l_init+0x84>)
 8003d3a:	f00d f8e1 	bl	8010f00 <puts>
 8003d3e:	e002      	b.n	8003d46 <h3l_init+0x26>
	} else {
		printf("i2c1 is ready!\n");
 8003d40:	4819      	ldr	r0, [pc, #100]	; (8003da8 <h3l_init+0x88>)
 8003d42:	f00d f8dd 	bl	8010f00 <puts>
	}
	_ret = HAL_I2C_IsDeviceReady(dev->i2c_bus, dev->addr, 10, dev->delay);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6858      	ldr	r0, [r3, #4]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	781b      	ldrb	r3, [r3, #0]
 8003d4e:	b299      	uxth	r1, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	7a1b      	ldrb	r3, [r3, #8]
 8003d54:	220a      	movs	r2, #10
 8003d56:	f005 fa01 	bl	800915c <HAL_I2C_IsDeviceReady>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	73fb      	strb	r3, [r7, #15]
	if ( _ret != HAL_OK )
 8003d5e:	7bfb      	ldrb	r3, [r7, #15]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d009      	beq.n	8003d78 <h3l_init+0x58>
	{
		printf("H3L setup fail\n");
 8003d64:	4811      	ldr	r0, [pc, #68]	; (8003dac <h3l_init+0x8c>)
 8003d66:	f00d f8cb 	bl	8010f00 <puts>
		printf("Errorcode: %d\n", _ret);
 8003d6a:	7bfb      	ldrb	r3, [r7, #15]
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	4810      	ldr	r0, [pc, #64]	; (8003db0 <h3l_init+0x90>)
 8003d70:	f00d f852 	bl	8010e18 <iprintf>
		return 0;
 8003d74:	2300      	movs	r3, #0
 8003d76:	e010      	b.n	8003d9a <h3l_init+0x7a>
	}

	//power up
	uint8_t PWR_CONF = 0b00111111;
 8003d78:	233f      	movs	r3, #63	; 0x3f
 8003d7a:	73bb      	strb	r3, [r7, #14]
	//PWR_CONF = 0x27;

	h3l_write(dev, 0x20, PWR_CONF);
 8003d7c:	7bbb      	ldrb	r3, [r7, #14]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	2120      	movs	r1, #32
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 f9b0 	bl	80040e8 <h3l_write>


	PWR_CONF = 0b10000000;
 8003d88:	2380      	movs	r3, #128	; 0x80
 8003d8a:	73bb      	strb	r3, [r7, #14]
	h3l_write(dev, 0x23, PWR_CONF);
 8003d8c:	7bbb      	ldrb	r3, [r7, #14]
 8003d8e:	461a      	mov	r2, r3
 8003d90:	2123      	movs	r1, #35	; 0x23
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f9a8 	bl	80040e8 <h3l_write>
	//HAL_Delay(5);
	_ret = HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf, 1, dev->delay);
	printf("WHOAMI: %d \n", buf);
	*/

	return 1;
 8003d98:	2301      	movs	r3, #1
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	08016454 	.word	0x08016454
 8003da8:	08016464 	.word	0x08016464
 8003dac:	08016474 	.word	0x08016474
 8003db0:	08016484 	.word	0x08016484

08003db4 <h3l_read_raw>:


void h3l_read_raw(struct h3l_dev * dev, int16_t * dat)
{
 8003db4:	b590      	push	{r4, r7, lr}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af02      	add	r7, sp, #8
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]

	uint8_t reg;
	uint8_t buf[6];

	reg = 0x28;
 8003dbe:	2328      	movs	r3, #40	; 0x28
 8003dc0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6858      	ldr	r0, [r3, #4]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	b299      	uxth	r1, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	7a1b      	ldrb	r3, [r3, #8]
 8003dd0:	f107 020f 	add.w	r2, r7, #15
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	f004 fe9c 	bl	8008b14 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[0], 1, dev->delay);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6858      	ldr	r0, [r3, #4]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	b299      	uxth	r1, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	7a1b      	ldrb	r3, [r3, #8]
 8003dea:	f107 0208 	add.w	r2, r7, #8
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	2301      	movs	r3, #1
 8003df2:	f004 ff8d 	bl	8008d10 <HAL_I2C_Master_Receive>
	reg = 0x29;
 8003df6:	2329      	movs	r3, #41	; 0x29
 8003df8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6858      	ldr	r0, [r3, #4]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	b299      	uxth	r1, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	7a1b      	ldrb	r3, [r3, #8]
 8003e08:	f107 020f 	add.w	r2, r7, #15
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	2301      	movs	r3, #1
 8003e10:	f004 fe80 	bl	8008b14 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[1], 1, dev->delay);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6858      	ldr	r0, [r3, #4]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	b299      	uxth	r1, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	7a1b      	ldrb	r3, [r3, #8]
 8003e22:	461c      	mov	r4, r3
 8003e24:	f107 0308 	add.w	r3, r7, #8
 8003e28:	1c5a      	adds	r2, r3, #1
 8003e2a:	9400      	str	r4, [sp, #0]
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	f004 ff6f 	bl	8008d10 <HAL_I2C_Master_Receive>
	reg = 0x2A;
 8003e32:	232a      	movs	r3, #42	; 0x2a
 8003e34:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6858      	ldr	r0, [r3, #4]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	b299      	uxth	r1, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	7a1b      	ldrb	r3, [r3, #8]
 8003e44:	f107 020f 	add.w	r2, r7, #15
 8003e48:	9300      	str	r3, [sp, #0]
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	f004 fe62 	bl	8008b14 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[2], 1, dev->delay);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6858      	ldr	r0, [r3, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	b299      	uxth	r1, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	7a1b      	ldrb	r3, [r3, #8]
 8003e5e:	461c      	mov	r4, r3
 8003e60:	f107 0308 	add.w	r3, r7, #8
 8003e64:	1c9a      	adds	r2, r3, #2
 8003e66:	9400      	str	r4, [sp, #0]
 8003e68:	2301      	movs	r3, #1
 8003e6a:	f004 ff51 	bl	8008d10 <HAL_I2C_Master_Receive>
	reg = 0x2B;
 8003e6e:	232b      	movs	r3, #43	; 0x2b
 8003e70:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6858      	ldr	r0, [r3, #4]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	b299      	uxth	r1, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	7a1b      	ldrb	r3, [r3, #8]
 8003e80:	f107 020f 	add.w	r2, r7, #15
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	2301      	movs	r3, #1
 8003e88:	f004 fe44 	bl	8008b14 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[3], 1, dev->delay);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6858      	ldr	r0, [r3, #4]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	b299      	uxth	r1, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	7a1b      	ldrb	r3, [r3, #8]
 8003e9a:	461c      	mov	r4, r3
 8003e9c:	f107 0308 	add.w	r3, r7, #8
 8003ea0:	1cda      	adds	r2, r3, #3
 8003ea2:	9400      	str	r4, [sp, #0]
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	f004 ff33 	bl	8008d10 <HAL_I2C_Master_Receive>
	reg = 0x2C;
 8003eaa:	232c      	movs	r3, #44	; 0x2c
 8003eac:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6858      	ldr	r0, [r3, #4]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	b299      	uxth	r1, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	7a1b      	ldrb	r3, [r3, #8]
 8003ebc:	f107 020f 	add.w	r2, r7, #15
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	f004 fe26 	bl	8008b14 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[4], 1, dev->delay);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6858      	ldr	r0, [r3, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	b299      	uxth	r1, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	7a1b      	ldrb	r3, [r3, #8]
 8003ed6:	461c      	mov	r4, r3
 8003ed8:	f107 0308 	add.w	r3, r7, #8
 8003edc:	1d1a      	adds	r2, r3, #4
 8003ede:	9400      	str	r4, [sp, #0]
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	f004 ff15 	bl	8008d10 <HAL_I2C_Master_Receive>
	reg = 0x2D;
 8003ee6:	232d      	movs	r3, #45	; 0x2d
 8003ee8:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6858      	ldr	r0, [r3, #4]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	b299      	uxth	r1, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	7a1b      	ldrb	r3, [r3, #8]
 8003ef8:	f107 020f 	add.w	r2, r7, #15
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	2301      	movs	r3, #1
 8003f00:	f004 fe08 	bl	8008b14 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[5], 1, dev->delay);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6858      	ldr	r0, [r3, #4]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	b299      	uxth	r1, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	7a1b      	ldrb	r3, [r3, #8]
 8003f12:	461c      	mov	r4, r3
 8003f14:	f107 0308 	add.w	r3, r7, #8
 8003f18:	1d5a      	adds	r2, r3, #5
 8003f1a:	9400      	str	r4, [sp, #0]
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	f004 fef7 	bl	8008d10 <HAL_I2C_Master_Receive>

	dev->dat[0] = (buf[0]) | (int16_t)(buf[1] << 8);
 8003f22:	7a3b      	ldrb	r3, [r7, #8]
 8003f24:	b21a      	sxth	r2, r3
 8003f26:	7a7b      	ldrb	r3, [r7, #9]
 8003f28:	021b      	lsls	r3, r3, #8
 8003f2a:	b21b      	sxth	r3, r3
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	b21a      	sxth	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	815a      	strh	r2, [r3, #10]
	dev->dat[1] = (buf[2]) | (int16_t)(buf[3] << 8);
 8003f34:	7abb      	ldrb	r3, [r7, #10]
 8003f36:	b21a      	sxth	r2, r3
 8003f38:	7afb      	ldrb	r3, [r7, #11]
 8003f3a:	021b      	lsls	r3, r3, #8
 8003f3c:	b21b      	sxth	r3, r3
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	b21a      	sxth	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	819a      	strh	r2, [r3, #12]
	dev->dat[2] = (buf[4]) | (int16_t)(buf[5] << 8);
 8003f46:	7b3b      	ldrb	r3, [r7, #12]
 8003f48:	b21a      	sxth	r2, r3
 8003f4a:	7b7b      	ldrb	r3, [r7, #13]
 8003f4c:	021b      	lsls	r3, r3, #8
 8003f4e:	b21b      	sxth	r3, r3
 8003f50:	4313      	orrs	r3, r2
 8003f52:	b21a      	sxth	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	81da      	strh	r2, [r3, #14]
	dev->dat[0] = dev->dat[0] >> 4;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003f5e:	111b      	asrs	r3, r3, #4
 8003f60:	b21a      	sxth	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	815a      	strh	r2, [r3, #10]
	dev->dat[1] = dev->dat[1] >> 4;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003f6c:	111b      	asrs	r3, r3, #4
 8003f6e:	b21a      	sxth	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	819a      	strh	r2, [r3, #12]
	dev->dat[2] = dev->dat[2] >> 4;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003f7a:	111b      	asrs	r3, r3, #4
 8003f7c:	b21a      	sxth	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	81da      	strh	r2, [r3, #14]
	dat[0] = dev->dat[0];
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	801a      	strh	r2, [r3, #0]
	dat[1] = dev->dat[1];
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	3302      	adds	r3, #2
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8003f96:	801a      	strh	r2, [r3, #0]
	dat[2] = dev->dat[2];
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	3304      	adds	r3, #4
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8003fa2:	801a      	strh	r2, [r3, #0]

};
 8003fa4:	bf00      	nop
 8003fa6:	3714      	adds	r7, #20
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd90      	pop	{r4, r7, pc}
 8003fac:	0000      	movs	r0, r0
	...

08003fb0 <h3l_convert>:

void h3l_convert(struct h3l_dev * dev, float* out)
{
 8003fb0:	b590      	push	{r4, r7, lr}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]

	out[0] = (float)(dev->dat[0]) * 49. / 1000. * 9.81;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003fc0:	ee07 3a90 	vmov	s15, r3
 8003fc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fc8:	ee17 0a90 	vmov	r0, s15
 8003fcc:	f7fc fabc 	bl	8000548 <__aeabi_f2d>
 8003fd0:	f04f 0200 	mov.w	r2, #0
 8003fd4:	4b42      	ldr	r3, [pc, #264]	; (80040e0 <h3l_convert+0x130>)
 8003fd6:	f7fc fb0f 	bl	80005f8 <__aeabi_dmul>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	460c      	mov	r4, r1
 8003fde:	4618      	mov	r0, r3
 8003fe0:	4621      	mov	r1, r4
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	4b3f      	ldr	r3, [pc, #252]	; (80040e4 <h3l_convert+0x134>)
 8003fe8:	f7fc fc30 	bl	800084c <__aeabi_ddiv>
 8003fec:	4603      	mov	r3, r0
 8003fee:	460c      	mov	r4, r1
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	4621      	mov	r1, r4
 8003ff4:	a338      	add	r3, pc, #224	; (adr r3, 80040d8 <h3l_convert+0x128>)
 8003ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffa:	f7fc fafd 	bl	80005f8 <__aeabi_dmul>
 8003ffe:	4603      	mov	r3, r0
 8004000:	460c      	mov	r4, r1
 8004002:	4618      	mov	r0, r3
 8004004:	4621      	mov	r1, r4
 8004006:	f7fc fdef 	bl	8000be8 <__aeabi_d2f>
 800400a:	4602      	mov	r2, r0
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	601a      	str	r2, [r3, #0]
	out[1] = (float)(dev->dat[1]) * 49. / 1000. * 9.81;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8004016:	ee07 3a90 	vmov	s15, r3
 800401a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800401e:	ee17 0a90 	vmov	r0, s15
 8004022:	f7fc fa91 	bl	8000548 <__aeabi_f2d>
 8004026:	f04f 0200 	mov.w	r2, #0
 800402a:	4b2d      	ldr	r3, [pc, #180]	; (80040e0 <h3l_convert+0x130>)
 800402c:	f7fc fae4 	bl	80005f8 <__aeabi_dmul>
 8004030:	4603      	mov	r3, r0
 8004032:	460c      	mov	r4, r1
 8004034:	4618      	mov	r0, r3
 8004036:	4621      	mov	r1, r4
 8004038:	f04f 0200 	mov.w	r2, #0
 800403c:	4b29      	ldr	r3, [pc, #164]	; (80040e4 <h3l_convert+0x134>)
 800403e:	f7fc fc05 	bl	800084c <__aeabi_ddiv>
 8004042:	4603      	mov	r3, r0
 8004044:	460c      	mov	r4, r1
 8004046:	4618      	mov	r0, r3
 8004048:	4621      	mov	r1, r4
 800404a:	a323      	add	r3, pc, #140	; (adr r3, 80040d8 <h3l_convert+0x128>)
 800404c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004050:	f7fc fad2 	bl	80005f8 <__aeabi_dmul>
 8004054:	4603      	mov	r3, r0
 8004056:	460c      	mov	r4, r1
 8004058:	4619      	mov	r1, r3
 800405a:	4622      	mov	r2, r4
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	1d1c      	adds	r4, r3, #4
 8004060:	4608      	mov	r0, r1
 8004062:	4611      	mov	r1, r2
 8004064:	f7fc fdc0 	bl	8000be8 <__aeabi_d2f>
 8004068:	4603      	mov	r3, r0
 800406a:	6023      	str	r3, [r4, #0]
	out[2] = (float)(dev->dat[2]) * 49. / 1000. * 9.81;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8004072:	ee07 3a90 	vmov	s15, r3
 8004076:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800407a:	ee17 0a90 	vmov	r0, s15
 800407e:	f7fc fa63 	bl	8000548 <__aeabi_f2d>
 8004082:	f04f 0200 	mov.w	r2, #0
 8004086:	4b16      	ldr	r3, [pc, #88]	; (80040e0 <h3l_convert+0x130>)
 8004088:	f7fc fab6 	bl	80005f8 <__aeabi_dmul>
 800408c:	4603      	mov	r3, r0
 800408e:	460c      	mov	r4, r1
 8004090:	4618      	mov	r0, r3
 8004092:	4621      	mov	r1, r4
 8004094:	f04f 0200 	mov.w	r2, #0
 8004098:	4b12      	ldr	r3, [pc, #72]	; (80040e4 <h3l_convert+0x134>)
 800409a:	f7fc fbd7 	bl	800084c <__aeabi_ddiv>
 800409e:	4603      	mov	r3, r0
 80040a0:	460c      	mov	r4, r1
 80040a2:	4618      	mov	r0, r3
 80040a4:	4621      	mov	r1, r4
 80040a6:	a30c      	add	r3, pc, #48	; (adr r3, 80040d8 <h3l_convert+0x128>)
 80040a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ac:	f7fc faa4 	bl	80005f8 <__aeabi_dmul>
 80040b0:	4603      	mov	r3, r0
 80040b2:	460c      	mov	r4, r1
 80040b4:	4619      	mov	r1, r3
 80040b6:	4622      	mov	r2, r4
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	f103 0408 	add.w	r4, r3, #8
 80040be:	4608      	mov	r0, r1
 80040c0:	4611      	mov	r1, r2
 80040c2:	f7fc fd91 	bl	8000be8 <__aeabi_d2f>
 80040c6:	4603      	mov	r3, r0
 80040c8:	6023      	str	r3, [r4, #0]

	//printf("ax: %4.2f, ay: %4.2f, az: %4.2f\n",buffer[0],buffer[1],buffer[2]);

}
 80040ca:	bf00      	nop
 80040cc:	370c      	adds	r7, #12
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd90      	pop	{r4, r7, pc}
 80040d2:	bf00      	nop
 80040d4:	f3af 8000 	nop.w
 80040d8:	51eb851f 	.word	0x51eb851f
 80040dc:	40239eb8 	.word	0x40239eb8
 80040e0:	40488000 	.word	0x40488000
 80040e4:	408f4000 	.word	0x408f4000

080040e8 <h3l_write>:


void h3l_write(struct h3l_dev * dev, uint8_t reg, uint8_t val)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b086      	sub	sp, #24
 80040ec:	af02      	add	r7, sp, #8
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	460b      	mov	r3, r1
 80040f2:	70fb      	strb	r3, [r7, #3]
 80040f4:	4613      	mov	r3, r2
 80040f6:	70bb      	strb	r3, [r7, #2]
	uint8_t _buf[2];
	//printf("writing to h3l: %d\n",val);
	_buf[0] = reg;
 80040f8:	78fb      	ldrb	r3, [r7, #3]
 80040fa:	733b      	strb	r3, [r7, #12]
	_buf[1] = val;
 80040fc:	78bb      	ldrb	r3, [r7, #2]
 80040fe:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, _buf, 2, dev->delay);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6858      	ldr	r0, [r3, #4]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	b299      	uxth	r1, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	7a1b      	ldrb	r3, [r3, #8]
 800410e:	f107 020c 	add.w	r2, r7, #12
 8004112:	9300      	str	r3, [sp, #0]
 8004114:	2302      	movs	r3, #2
 8004116:	f004 fcfd 	bl	8008b14 <HAL_I2C_Master_Transmit>

};
 800411a:	bf00      	nop
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
	...

08004124 <_get_accel_sensitivity>:
static float temperature_sensitivity = 326.8;

// *** Local functions *** //

// Used to convert raw accelerometer readings to G-force.
float _get_accel_sensitivity(enum icm20601_accel_g accel_g) {
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	4603      	mov	r3, r0
 800412c:	71fb      	strb	r3, [r7, #7]
	float f = 0.0;
 800412e:	f04f 0300 	mov.w	r3, #0
 8004132:	60fb      	str	r3, [r7, #12]

  	switch (accel_g) {
 8004134:	79fb      	ldrb	r3, [r7, #7]
 8004136:	2b03      	cmp	r3, #3
 8004138:	d81a      	bhi.n	8004170 <_get_accel_sensitivity+0x4c>
 800413a:	a201      	add	r2, pc, #4	; (adr r2, 8004140 <_get_accel_sensitivity+0x1c>)
 800413c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004140:	08004151 	.word	0x08004151
 8004144:	08004159 	.word	0x08004159
 8004148:	08004161 	.word	0x08004161
 800414c:	08004169 	.word	0x08004169
  	case (ICM20601_ACCEL_RANGE_4G):
    		f = 8192.0;
 8004150:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 8004154:	60fb      	str	r3, [r7, #12]
    break;
 8004156:	e00b      	b.n	8004170 <_get_accel_sensitivity+0x4c>
  	case (ICM20601_ACCEL_RANGE_8G):
    		f = 4096.0;
 8004158:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 800415c:	60fb      	str	r3, [r7, #12]
    break;
 800415e:	e007      	b.n	8004170 <_get_accel_sensitivity+0x4c>
  	case (ICM20601_ACCEL_RANGE_16G):
    		f = 2048.0;
 8004160:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 8004164:	60fb      	str	r3, [r7, #12]
    break;
 8004166:	e003      	b.n	8004170 <_get_accel_sensitivity+0x4c>
  	case (ICM20601_ACCEL_RANGE_32G):
    		f = 1024.0;
 8004168:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 800416c:	60fb      	str	r3, [r7, #12]
    break;
 800416e:	bf00      	nop
  }
  return f;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	ee07 3a90 	vmov	s15, r3
}
 8004176:	eeb0 0a67 	vmov.f32	s0, s15
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <_get_gyro_sensitivity>:

// Used to convert raw gyroscope readings to degrees per second.
float _get_gyro_sensitivity(enum icm20601_gyro_dps gyro_dps) {
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	4603      	mov	r3, r0
 800418c:	71fb      	strb	r3, [r7, #7]
	float f = 0;
 800418e:	f04f 0300 	mov.w	r3, #0
 8004192:	60fb      	str	r3, [r7, #12]

	switch (gyro_dps) {
 8004194:	79fb      	ldrb	r3, [r7, #7]
 8004196:	2b03      	cmp	r3, #3
 8004198:	d816      	bhi.n	80041c8 <_get_gyro_sensitivity+0x44>
 800419a:	a201      	add	r2, pc, #4	; (adr r2, 80041a0 <_get_gyro_sensitivity+0x1c>)
 800419c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a0:	080041b1 	.word	0x080041b1
 80041a4:	080041b7 	.word	0x080041b7
 80041a8:	080041bd 	.word	0x080041bd
 80041ac:	080041c3 	.word	0x080041c3
	case (ICM20601_GYRO_RANGE_500_DPS):
    		f = 65.5;
 80041b0:	4b0a      	ldr	r3, [pc, #40]	; (80041dc <_get_gyro_sensitivity+0x58>)
 80041b2:	60fb      	str	r3, [r7, #12]
	break;
 80041b4:	e008      	b.n	80041c8 <_get_gyro_sensitivity+0x44>
	case (ICM20601_GYRO_RANGE_1000_DPS):
    		f = 32.8;
 80041b6:	4b0a      	ldr	r3, [pc, #40]	; (80041e0 <_get_gyro_sensitivity+0x5c>)
 80041b8:	60fb      	str	r3, [r7, #12]
    break;
 80041ba:	e005      	b.n	80041c8 <_get_gyro_sensitivity+0x44>
    case (ICM20601_GYRO_RANGE_2000_DPS):
    		f = 16.4;
 80041bc:	4b09      	ldr	r3, [pc, #36]	; (80041e4 <_get_gyro_sensitivity+0x60>)
 80041be:	60fb      	str	r3, [r7, #12]
    break;
 80041c0:	e002      	b.n	80041c8 <_get_gyro_sensitivity+0x44>
    case (ICM20601_GYRO_RANGE_4000_DPS):
    		f = 8.2;
 80041c2:	4b09      	ldr	r3, [pc, #36]	; (80041e8 <_get_gyro_sensitivity+0x64>)
 80041c4:	60fb      	str	r3, [r7, #12]
    break;
 80041c6:	bf00      	nop
  }
  return f;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	ee07 3a90 	vmov	s15, r3
}
 80041ce:	eeb0 0a67 	vmov.f32	s0, s15
 80041d2:	3714      	adds	r7, #20
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr
 80041dc:	42830000 	.word	0x42830000
 80041e0:	42033333 	.word	0x42033333
 80041e4:	41833333 	.word	0x41833333
 80041e8:	41033333 	.word	0x41033333

080041ec <_icm_read_bytes>:
  }
  return 1;
}

// Read bytes from MEMS
void _icm_read_bytes(struct icm20601_dev * dev, uint8_t reg, uint8_t* pData, uint16_t size){
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	607a      	str	r2, [r7, #4]
 80041f6:	461a      	mov	r2, r3
 80041f8:	460b      	mov	r3, r1
 80041fa:	72fb      	strb	r3, [r7, #11]
 80041fc:	4613      	mov	r3, r2
 80041fe:	813b      	strh	r3, [r7, #8]
	reg = reg | 0x80;
 8004200:	7afb      	ldrb	r3, [r7, #11]
 8004202:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004206:	b2db      	uxtb	r3, r3
 8004208:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_RESET);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6818      	ldr	r0, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	889b      	ldrh	r3, [r3, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	4619      	mov	r1, r3
 8004216:	f004 fb11 	bl	800883c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->spi_bus, &reg, 1, IMU20601_SPI_TIMEOUT);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6898      	ldr	r0, [r3, #8]
 800421e:	f107 010b 	add.w	r1, r7, #11
 8004222:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004226:	2201      	movs	r2, #1
 8004228:	f007 fb8a 	bl	800b940 <HAL_SPI_Transmit>
	HAL_SPI_Receive(dev->spi_bus, pData, size, IMU20601_SPI_TIMEOUT);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6898      	ldr	r0, [r3, #8]
 8004230:	893a      	ldrh	r2, [r7, #8]
 8004232:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004236:	6879      	ldr	r1, [r7, #4]
 8004238:	f007 fcb6 	bl	800bba8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_SET);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6818      	ldr	r0, [r3, #0]
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	889b      	ldrh	r3, [r3, #4]
 8004244:	2201      	movs	r2, #1
 8004246:	4619      	mov	r1, r3
 8004248:	f004 faf8 	bl	800883c <HAL_GPIO_WritePin>
}
 800424c:	bf00      	nop
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <_icm_write_bytes>:

// Write bytes to MEMS
void _icm_write_bytes(struct icm20601_dev * dev, uint8_t reg, uint8_t *pData, uint16_t size){
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	607a      	str	r2, [r7, #4]
 800425e:	461a      	mov	r2, r3
 8004260:	460b      	mov	r3, r1
 8004262:	72fb      	strb	r3, [r7, #11]
 8004264:	4613      	mov	r3, r2
 8004266:	813b      	strh	r3, [r7, #8]

	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_RESET);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6818      	ldr	r0, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	889b      	ldrh	r3, [r3, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	4619      	mov	r1, r3
 8004274:	f004 fae2 	bl	800883c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->spi_bus, &reg, 1, IMU20601_SPI_TIMEOUT);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6898      	ldr	r0, [r3, #8]
 800427c:	f107 010b 	add.w	r1, r7, #11
 8004280:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004284:	2201      	movs	r2, #1
 8004286:	f007 fb5b 	bl	800b940 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(dev->spi_bus, pData, size, IMU20601_SPI_TIMEOUT);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6898      	ldr	r0, [r3, #8]
 800428e:	893a      	ldrh	r2, [r7, #8]
 8004290:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004294:	6879      	ldr	r1, [r7, #4]
 8004296:	f007 fb53 	bl	800b940 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_SET);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6818      	ldr	r0, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	889b      	ldrh	r3, [r3, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	4619      	mov	r1, r3
 80042a6:	f004 fac9 	bl	800883c <HAL_GPIO_WritePin>
}
 80042aa:	bf00      	nop
 80042ac:	3710      	adds	r7, #16
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <icm20601_init>:


// *** Global Functions *** //

int8_t icm20601_init(struct icm20601_dev * dev) {
 80042b2:	b580      	push	{r7, lr}
 80042b4:	b084      	sub	sp, #16
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0;
 80042ba:	2300      	movs	r3, #0
 80042bc:	73fb      	strb	r3, [r7, #15]
	uint8_t r [1] = {0};
 80042be:	2300      	movs	r3, #0
 80042c0:	733b      	strb	r3, [r7, #12]
	//  4. disable fifo
	//  5. configure chip
	//  6. enable accelerometer and gyroscope

	// full reset of chip
	tmp = SENS_reset; // 0x81
 80042c2:	2381      	movs	r3, #129	; 0x81
 80042c4:	73fb      	strb	r3, [r7, #15]
	_icm_write_bytes(dev, REG_PWR_MGMT_1, &tmp , 1);
 80042c6:	f107 020f 	add.w	r2, r7, #15
 80042ca:	2301      	movs	r3, #1
 80042cc:	216b      	movs	r1, #107	; 0x6b
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7ff ffc0 	bl	8004254 <_icm_write_bytes>
	HAL_Delay(1);
 80042d4:	2001      	movs	r0, #1
 80042d6:	f002 ff81 	bl	80071dc <HAL_Delay>

    // set clock to internal PLL
    tmp = SENS_internalpll; //0x01
 80042da:	2301      	movs	r3, #1
 80042dc:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_1, &tmp, 1);
 80042de:	f107 020f 	add.w	r2, r7, #15
 80042e2:	2301      	movs	r3, #1
 80042e4:	216b      	movs	r1, #107	; 0x6b
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7ff ffb4 	bl	8004254 <_icm_write_bytes>
    HAL_Delay(1);
 80042ec:	2001      	movs	r0, #1
 80042ee:	f002 ff75 	bl	80071dc <HAL_Delay>

    // verify we are able to read from the chip
    _icm_read_bytes(dev, REG_WHO_AM_I, r, 1);
 80042f2:	f107 020c 	add.w	r2, r7, #12
 80042f6:	2301      	movs	r3, #1
 80042f8:	2175      	movs	r1, #117	; 0x75
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7ff ff76 	bl	80041ec <_icm_read_bytes>
    if (r[0] != REG_WHO_AM_I_CONST) return 0;
 8004300:	7b3b      	ldrb	r3, [r7, #12]
 8004302:	2bac      	cmp	r3, #172	; 0xac
 8004304:	d001      	beq.n	800430a <icm20601_init+0x58>
 8004306:	2300      	movs	r3, #0
 8004308:	e093      	b.n	8004432 <icm20601_init+0x180>

    // place accel and gyro on standby
    tmp = SENS_standby; // 0x3F
 800430a:	233f      	movs	r3, #63	; 0x3f
 800430c:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_2, &tmp , 1);
 800430e:	f107 020f 	add.w	r2, r7, #15
 8004312:	2301      	movs	r3, #1
 8004314:	216c      	movs	r1, #108	; 0x6c
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7ff ff9c 	bl	8004254 <_icm_write_bytes>

    // disable fifo
    tmp = SENS_nofifo; //0x00
 800431c:	2300      	movs	r3, #0
 800431e:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_USER_CTRL, &tmp , 1);
 8004320:	f107 020f 	add.w	r2, r7, #15
 8004324:	2301      	movs	r3, #1
 8004326:	216a      	movs	r1, #106	; 0x6a
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f7ff ff93 	bl	8004254 <_icm_write_bytes>

    // disable chip I2C communications
    tmp = SENS_disablei2c;	//0x41;
 800432e:	2341      	movs	r3, #65	; 0x41
 8004330:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_USER_CTRL, &tmp , 1);
 8004332:	f107 020f 	add.w	r2, r7, #15
 8004336:	2301      	movs	r3, #1
 8004338:	216a      	movs	r1, #106	; 0x6a
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7ff ff8a 	bl	8004254 <_icm_write_bytes>

    // Accelerometer filtering
    if (ICM20601_ACCEL_DLPF_BYPASS_1046_HZ == dev->accel_dlpf) {
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	7b1b      	ldrb	r3, [r3, #12]
 8004344:	2b08      	cmp	r3, #8
 8004346:	d102      	bne.n	800434e <icm20601_init+0x9c>
      tmp = (0x01 << 3);
 8004348:	2308      	movs	r3, #8
 800434a:	73fb      	strb	r3, [r7, #15]
 800434c:	e002      	b.n	8004354 <icm20601_init+0xa2>
    }
    else {
      tmp = dev->accel_dlpf;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	7b1b      	ldrb	r3, [r3, #12]
 8004352:	73fb      	strb	r3, [r7, #15]
    }
    _icm_write_bytes(dev, REG_ACCEL_CONFIG_2, &tmp , 1);
 8004354:	f107 020f 	add.w	r2, r7, #15
 8004358:	2301      	movs	r3, #1
 800435a:	211d      	movs	r1, #29
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f7ff ff79 	bl	8004254 <_icm_write_bytes>

    // Accelerometer range
    tmp = (dev->accel_g) << 3;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	7b5b      	ldrb	r3, [r3, #13]
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	b2db      	uxtb	r3, r3
 800436a:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_ACCEL_CONFIG_1, &tmp , 1);
 800436c:	f107 020f 	add.w	r2, r7, #15
 8004370:	2301      	movs	r3, #1
 8004372:	211c      	movs	r1, #28
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7ff ff6d 	bl	8004254 <_icm_write_bytes>
    // Gyro filtering
    //tmp = ((dev->gyro_dps) << 3) | SENS_gyrofilter; // filter: 0x02
    //_icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);


    if (ICM20601_GYRO_DLPF_BYPASS_3281_HZ == dev->gyro_dlpf) {
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	7b9b      	ldrb	r3, [r3, #14]
 800437e:	2b08      	cmp	r3, #8
 8004380:	d119      	bne.n	80043b6 <icm20601_init+0x104>
    	// bypass dpf and set dps
        tmp = 0x00;
 8004382:	2300      	movs	r3, #0
 8004384:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 8004386:	f107 020f 	add.w	r2, r7, #15
 800438a:	2301      	movs	r3, #1
 800438c:	211a      	movs	r1, #26
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f7ff ff60 	bl	8004254 <_icm_write_bytes>

        tmp = (dev->gyro_dps << 3) | 0x02;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	7bdb      	ldrb	r3, [r3, #15]
 8004398:	00db      	lsls	r3, r3, #3
 800439a:	b25b      	sxtb	r3, r3
 800439c:	f043 0302 	orr.w	r3, r3, #2
 80043a0:	b25b      	sxtb	r3, r3
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 80043a6:	f107 020f 	add.w	r2, r7, #15
 80043aa:	2301      	movs	r3, #1
 80043ac:	211b      	movs	r1, #27
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f7ff ff50 	bl	8004254 <_icm_write_bytes>
 80043b4:	e033      	b.n	800441e <icm20601_init+0x16c>
     }
     else if (ICM20601_GYRO_DLPF_BYPASS_8173_HZ == dev->gyro_dlpf) {
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	7b9b      	ldrb	r3, [r3, #14]
 80043ba:	2b09      	cmp	r3, #9
 80043bc:	d119      	bne.n	80043f2 <icm20601_init+0x140>
        // bypass dpf and set dps
        tmp = 0x00;
 80043be:	2300      	movs	r3, #0
 80043c0:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 80043c2:	f107 020f 	add.w	r2, r7, #15
 80043c6:	2301      	movs	r3, #1
 80043c8:	211a      	movs	r1, #26
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7ff ff42 	bl	8004254 <_icm_write_bytes>

        tmp = (dev->gyro_dps << 3) | 0x01;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	7bdb      	ldrb	r3, [r3, #15]
 80043d4:	00db      	lsls	r3, r3, #3
 80043d6:	b25b      	sxtb	r3, r3
 80043d8:	f043 0301 	orr.w	r3, r3, #1
 80043dc:	b25b      	sxtb	r3, r3
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 80043e2:	f107 020f 	add.w	r2, r7, #15
 80043e6:	2301      	movs	r3, #1
 80043e8:	211b      	movs	r1, #27
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7ff ff32 	bl	8004254 <_icm_write_bytes>
 80043f0:	e015      	b.n	800441e <icm20601_init+0x16c>
     }
     else {
        // configure dpf and set dps
        tmp = dev->gyro_dlpf;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	7b9b      	ldrb	r3, [r3, #14]
 80043f6:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 80043f8:	f107 020f 	add.w	r2, r7, #15
 80043fc:	2301      	movs	r3, #1
 80043fe:	211a      	movs	r1, #26
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7ff ff27 	bl	8004254 <_icm_write_bytes>

        tmp = dev->gyro_dps << 3;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	7bdb      	ldrb	r3, [r3, #15]
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	b2db      	uxtb	r3, r3
 800440e:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 8004410:	f107 020f 	add.w	r2, r7, #15
 8004414:	2301      	movs	r3, #1
 8004416:	211b      	movs	r1, #27
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f7ff ff1b 	bl	8004254 <_icm_write_bytes>
     }


    tmp = 0x00;
 800441e:	2300      	movs	r3, #0
 8004420:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_2, &tmp, 1);
 8004422:	f107 020f 	add.w	r2, r7, #15
 8004426:	2301      	movs	r3, #1
 8004428:	216c      	movs	r1, #108	; 0x6c
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7ff ff12 	bl	8004254 <_icm_write_bytes>


    return 1;
 8004430:	2301      	movs	r3, #1
}
 8004432:	4618      	mov	r0, r3
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <icm20601_read_accel_raw>:

// Read out raw acceleration data
void icm20601_read_accel_raw(struct icm20601_dev * dev, int16_t *accel){
 800443a:	b580      	push	{r7, lr}
 800443c:	b084      	sub	sp, #16
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
 8004442:	6039      	str	r1, [r7, #0]
	uint8_t accel_8bit [6] = { 0 };
 8004444:	f107 0308 	add.w	r3, r7, #8
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	809a      	strh	r2, [r3, #4]
	_icm_read_bytes(dev, REG_ACCEL_XOUT_H, accel_8bit, 6);
 800444e:	f107 0208 	add.w	r2, r7, #8
 8004452:	2306      	movs	r3, #6
 8004454:	213b      	movs	r1, #59	; 0x3b
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f7ff fec8 	bl	80041ec <_icm_read_bytes>

	UINT8_TO_INT16(accel[0], accel_8bit[0], accel_8bit[1]);
 800445c:	7a3b      	ldrb	r3, [r7, #8]
 800445e:	b21a      	sxth	r2, r3
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	801a      	strh	r2, [r3, #0]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	f9b3 3000 	ldrsh.w	r3, [r3]
 800446a:	021b      	lsls	r3, r3, #8
 800446c:	b21a      	sxth	r2, r3
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	801a      	strh	r2, [r3, #0]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004478:	7a7b      	ldrb	r3, [r7, #9]
 800447a:	b21b      	sxth	r3, r3
 800447c:	4313      	orrs	r3, r2
 800447e:	b21a      	sxth	r2, r3
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(accel[1], accel_8bit[2], accel_8bit[3]);
 8004484:	7aba      	ldrb	r2, [r7, #10]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	3302      	adds	r3, #2
 800448a:	b212      	sxth	r2, r2
 800448c:	801a      	strh	r2, [r3, #0]
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	3302      	adds	r3, #2
 8004492:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004496:	021a      	lsls	r2, r3, #8
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	3302      	adds	r3, #2
 800449c:	b212      	sxth	r2, r2
 800449e:	801a      	strh	r2, [r3, #0]
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	3302      	adds	r3, #2
 80044a4:	f9b3 1000 	ldrsh.w	r1, [r3]
 80044a8:	7afb      	ldrb	r3, [r7, #11]
 80044aa:	b21a      	sxth	r2, r3
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	3302      	adds	r3, #2
 80044b0:	430a      	orrs	r2, r1
 80044b2:	b212      	sxth	r2, r2
 80044b4:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(accel[2], accel_8bit[4], accel_8bit[5]);
 80044b6:	7b3a      	ldrb	r2, [r7, #12]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	3304      	adds	r3, #4
 80044bc:	b212      	sxth	r2, r2
 80044be:	801a      	strh	r2, [r3, #0]
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	3304      	adds	r3, #4
 80044c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044c8:	021a      	lsls	r2, r3, #8
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	3304      	adds	r3, #4
 80044ce:	b212      	sxth	r2, r2
 80044d0:	801a      	strh	r2, [r3, #0]
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	3304      	adds	r3, #4
 80044d6:	f9b3 1000 	ldrsh.w	r1, [r3]
 80044da:	7b7b      	ldrb	r3, [r7, #13]
 80044dc:	b21a      	sxth	r2, r3
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	3304      	adds	r3, #4
 80044e2:	430a      	orrs	r2, r1
 80044e4:	b212      	sxth	r2, r2
 80044e6:	801a      	strh	r2, [r3, #0]
}
 80044e8:	bf00      	nop
 80044ea:	3710      	adds	r7, #16
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <icm20601_read_gyro_raw>:
    accel[1]  = ((float) accel_raw[1]) / accel_sensitivity;
    accel[2]  = ((float) accel_raw[2]) / accel_sensitivity;
}

// Read out raw gyro data
void icm20601_read_gyro_raw(struct icm20601_dev * dev, int16_t *gyro){
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
	uint8_t gyro_8bit [6] = { 0 };
 80044fa:	f107 0308 	add.w	r3, r7, #8
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	809a      	strh	r2, [r3, #4]
	_icm_read_bytes(dev, REG_GYRO_XOUT_H, gyro_8bit, 6);
 8004504:	f107 0208 	add.w	r2, r7, #8
 8004508:	2306      	movs	r3, #6
 800450a:	2143      	movs	r1, #67	; 0x43
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7ff fe6d 	bl	80041ec <_icm_read_bytes>

	UINT8_TO_INT16(gyro[0], gyro_8bit[0], gyro_8bit[1]);
 8004512:	7a3b      	ldrb	r3, [r7, #8]
 8004514:	b21a      	sxth	r2, r3
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	801a      	strh	r2, [r3, #0]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004520:	021b      	lsls	r3, r3, #8
 8004522:	b21a      	sxth	r2, r3
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	801a      	strh	r2, [r3, #0]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800452e:	7a7b      	ldrb	r3, [r7, #9]
 8004530:	b21b      	sxth	r3, r3
 8004532:	4313      	orrs	r3, r2
 8004534:	b21a      	sxth	r2, r3
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(gyro[1], gyro_8bit[2], gyro_8bit[3]);
 800453a:	7aba      	ldrb	r2, [r7, #10]
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	3302      	adds	r3, #2
 8004540:	b212      	sxth	r2, r2
 8004542:	801a      	strh	r2, [r3, #0]
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	3302      	adds	r3, #2
 8004548:	f9b3 3000 	ldrsh.w	r3, [r3]
 800454c:	021a      	lsls	r2, r3, #8
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	3302      	adds	r3, #2
 8004552:	b212      	sxth	r2, r2
 8004554:	801a      	strh	r2, [r3, #0]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	3302      	adds	r3, #2
 800455a:	f9b3 1000 	ldrsh.w	r1, [r3]
 800455e:	7afb      	ldrb	r3, [r7, #11]
 8004560:	b21a      	sxth	r2, r3
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	3302      	adds	r3, #2
 8004566:	430a      	orrs	r2, r1
 8004568:	b212      	sxth	r2, r2
 800456a:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(gyro[2], gyro_8bit[4], gyro_8bit[5]);
 800456c:	7b3a      	ldrb	r2, [r7, #12]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	3304      	adds	r3, #4
 8004572:	b212      	sxth	r2, r2
 8004574:	801a      	strh	r2, [r3, #0]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	3304      	adds	r3, #4
 800457a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800457e:	021a      	lsls	r2, r3, #8
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	3304      	adds	r3, #4
 8004584:	b212      	sxth	r2, r2
 8004586:	801a      	strh	r2, [r3, #0]
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	3304      	adds	r3, #4
 800458c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004590:	7b7b      	ldrb	r3, [r7, #13]
 8004592:	b21a      	sxth	r2, r3
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	3304      	adds	r3, #4
 8004598:	430a      	orrs	r2, r1
 800459a:	b212      	sxth	r2, r2
 800459c:	801a      	strh	r2, [r3, #0]
}
 800459e:	bf00      	nop
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <icm20601_read_temp_raw>:
    gyro[1]  = ((float) gyro_raw[1]) / gyro_sensitivity;
    gyro[2]  = ((float) gyro_raw[2]) / gyro_sensitivity;
}

// Read out raw temperature data
void icm20601_read_temp_raw(struct icm20601_dev * dev, int16_t *temp){
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b084      	sub	sp, #16
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
 80045ae:	6039      	str	r1, [r7, #0]
	uint8_t temp_8bit [2] = { 0 };
 80045b0:	2300      	movs	r3, #0
 80045b2:	81bb      	strh	r3, [r7, #12]
	_icm_read_bytes(dev, REG_TEMP_OUT_H, temp_8bit, 2);
 80045b4:	f107 020c 	add.w	r2, r7, #12
 80045b8:	2302      	movs	r3, #2
 80045ba:	2141      	movs	r1, #65	; 0x41
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7ff fe15 	bl	80041ec <_icm_read_bytes>

	UINT8_TO_INT16(*temp, temp_8bit[0], temp_8bit[1]);
 80045c2:	7b3b      	ldrb	r3, [r7, #12]
 80045c4:	b21a      	sxth	r2, r3
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	801a      	strh	r2, [r3, #0]
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045d0:	021b      	lsls	r3, r3, #8
 80045d2:	b21a      	sxth	r2, r3
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	801a      	strh	r2, [r3, #0]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	f9b3 2000 	ldrsh.w	r2, [r3]
 80045de:	7b7b      	ldrb	r3, [r7, #13]
 80045e0:	b21b      	sxth	r3, r3
 80045e2:	4313      	orrs	r3, r2
 80045e4:	b21a      	sxth	r2, r3
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	801a      	strh	r2, [r3, #0]
}
 80045ea:	bf00      	nop
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	0000      	movs	r0, r0
 80045f4:	0000      	movs	r0, r0
	...

080045f8 <icm20601_read_data>:

	*temp = ((float)temperature_raw) / temperature_sensitivity + 25.0; // TEMP_degC = ((TEMP_OUT – RoomTemp_Offset)/Temp_Sensitivity) + 25degC
}

void icm20601_read_data(struct icm20601_dev * dev, float * buf)
{
 80045f8:	b590      	push	{r4, r7, lr}
 80045fa:	b089      	sub	sp, #36	; 0x24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
	int16_t temperature_raw;
	icm20601_read_temp_raw(dev, &temperature_raw);
 8004602:	f107 0316 	add.w	r3, r7, #22
 8004606:	4619      	mov	r1, r3
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f7ff ffcc 	bl	80045a6 <icm20601_read_temp_raw>
	buf[0] = ((float)temperature_raw) / temperature_sensitivity + 25.0;
 800460e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004612:	ee07 3a90 	vmov	s15, r3
 8004616:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800461a:	4b61      	ldr	r3, [pc, #388]	; (80047a0 <icm20601_read_data+0x1a8>)
 800461c:	ed93 7a00 	vldr	s14, [r3]
 8004620:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004624:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004628:	ee77 7a87 	vadd.f32	s15, s15, s14
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	edc3 7a00 	vstr	s15, [r3]
	float accel_sensitivity;
	int16_t accel_raw[3] = { 0 };
 8004632:	f107 0310 	add.w	r3, r7, #16
 8004636:	2200      	movs	r2, #0
 8004638:	601a      	str	r2, [r3, #0]
 800463a:	809a      	strh	r2, [r3, #4]

	accel_sensitivity = _get_accel_sensitivity(dev->accel_g);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	7b5b      	ldrb	r3, [r3, #13]
 8004640:	4618      	mov	r0, r3
 8004642:	f7ff fd6f 	bl	8004124 <_get_accel_sensitivity>
 8004646:	ed87 0a07 	vstr	s0, [r7, #28]

  	icm20601_read_accel_raw(dev, accel_raw);
 800464a:	f107 0310 	add.w	r3, r7, #16
 800464e:	4619      	mov	r1, r3
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f7ff fef2 	bl	800443a <icm20601_read_accel_raw>

    buf[1] = ((float) accel_raw[0]) / accel_sensitivity * 9.81;
 8004656:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800465a:	ee07 3a90 	vmov	s15, r3
 800465e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004662:	edd7 7a07 	vldr	s15, [r7, #28]
 8004666:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800466a:	ee16 0a90 	vmov	r0, s13
 800466e:	f7fb ff6b 	bl	8000548 <__aeabi_f2d>
 8004672:	a349      	add	r3, pc, #292	; (adr r3, 8004798 <icm20601_read_data+0x1a0>)
 8004674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004678:	f7fb ffbe 	bl	80005f8 <__aeabi_dmul>
 800467c:	4603      	mov	r3, r0
 800467e:	460c      	mov	r4, r1
 8004680:	4619      	mov	r1, r3
 8004682:	4622      	mov	r2, r4
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	1d1c      	adds	r4, r3, #4
 8004688:	4608      	mov	r0, r1
 800468a:	4611      	mov	r1, r2
 800468c:	f7fc faac 	bl	8000be8 <__aeabi_d2f>
 8004690:	4603      	mov	r3, r0
 8004692:	6023      	str	r3, [r4, #0]
    buf[2]  = ((float) accel_raw[1]) / accel_sensitivity * 9.81;
 8004694:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004698:	ee07 3a90 	vmov	s15, r3
 800469c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80046a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80046a4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80046a8:	ee16 0a90 	vmov	r0, s13
 80046ac:	f7fb ff4c 	bl	8000548 <__aeabi_f2d>
 80046b0:	a339      	add	r3, pc, #228	; (adr r3, 8004798 <icm20601_read_data+0x1a0>)
 80046b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b6:	f7fb ff9f 	bl	80005f8 <__aeabi_dmul>
 80046ba:	4603      	mov	r3, r0
 80046bc:	460c      	mov	r4, r1
 80046be:	4619      	mov	r1, r3
 80046c0:	4622      	mov	r2, r4
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	f103 0408 	add.w	r4, r3, #8
 80046c8:	4608      	mov	r0, r1
 80046ca:	4611      	mov	r1, r2
 80046cc:	f7fc fa8c 	bl	8000be8 <__aeabi_d2f>
 80046d0:	4603      	mov	r3, r0
 80046d2:	6023      	str	r3, [r4, #0]
    buf[3]  = ((float) accel_raw[2]) / accel_sensitivity * 9.81 ;
 80046d4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80046d8:	ee07 3a90 	vmov	s15, r3
 80046dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80046e0:	edd7 7a07 	vldr	s15, [r7, #28]
 80046e4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80046e8:	ee16 0a90 	vmov	r0, s13
 80046ec:	f7fb ff2c 	bl	8000548 <__aeabi_f2d>
 80046f0:	a329      	add	r3, pc, #164	; (adr r3, 8004798 <icm20601_read_data+0x1a0>)
 80046f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f6:	f7fb ff7f 	bl	80005f8 <__aeabi_dmul>
 80046fa:	4603      	mov	r3, r0
 80046fc:	460c      	mov	r4, r1
 80046fe:	4619      	mov	r1, r3
 8004700:	4622      	mov	r2, r4
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	f103 040c 	add.w	r4, r3, #12
 8004708:	4608      	mov	r0, r1
 800470a:	4611      	mov	r1, r2
 800470c:	f7fc fa6c 	bl	8000be8 <__aeabi_d2f>
 8004710:	4603      	mov	r3, r0
 8004712:	6023      	str	r3, [r4, #0]

	float gyro_sensitivity;
	int16_t gyro_raw[3] = { 0 };
 8004714:	f107 0308 	add.w	r3, r7, #8
 8004718:	2200      	movs	r2, #0
 800471a:	601a      	str	r2, [r3, #0]
 800471c:	809a      	strh	r2, [r3, #4]

	gyro_sensitivity = _get_gyro_sensitivity(dev->accel_g);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	7b5b      	ldrb	r3, [r3, #13]
 8004722:	4618      	mov	r0, r3
 8004724:	f7ff fd2e 	bl	8004184 <_get_gyro_sensitivity>
 8004728:	ed87 0a06 	vstr	s0, [r7, #24]

  	icm20601_read_gyro_raw(dev, gyro_raw);
 800472c:	f107 0308 	add.w	r3, r7, #8
 8004730:	4619      	mov	r1, r3
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7ff fedc 	bl	80044f0 <icm20601_read_gyro_raw>

    buf[4] = ((float) gyro_raw[0]) / gyro_sensitivity;
 8004738:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800473c:	ee07 3a90 	vmov	s15, r3
 8004740:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	3310      	adds	r3, #16
 8004748:	ed97 7a06 	vldr	s14, [r7, #24]
 800474c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004750:	edc3 7a00 	vstr	s15, [r3]
    buf[5]  = ((float) gyro_raw[1]) / gyro_sensitivity;
 8004754:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004758:	ee07 3a90 	vmov	s15, r3
 800475c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	3314      	adds	r3, #20
 8004764:	ed97 7a06 	vldr	s14, [r7, #24]
 8004768:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800476c:	edc3 7a00 	vstr	s15, [r3]
    buf[6]  = ((float) gyro_raw[2]) / gyro_sensitivity;
 8004770:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004774:	ee07 3a90 	vmov	s15, r3
 8004778:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	3318      	adds	r3, #24
 8004780:	ed97 7a06 	vldr	s14, [r7, #24]
 8004784:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004788:	edc3 7a00 	vstr	s15, [r3]
}
 800478c:	bf00      	nop
 800478e:	3724      	adds	r7, #36	; 0x24
 8004790:	46bd      	mov	sp, r7
 8004792:	bd90      	pop	{r4, r7, pc}
 8004794:	f3af 8000 	nop.w
 8004798:	51eb851f 	.word	0x51eb851f
 800479c:	40239eb8 	.word	0x40239eb8
 80047a0:	20000150 	.word	0x20000150

080047a4 <toggle>:
 *      Author: linus
 */

#include "devices/LED.h"

void toggle(struct LED_dev * ctrl){
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(ctrl->LED_port, ctrl->LED_pin);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	889b      	ldrh	r3, [r3, #4]
 80047b4:	4619      	mov	r1, r3
 80047b6:	4610      	mov	r0, r2
 80047b8:	f004 f859 	bl	800886e <HAL_GPIO_TogglePin>
}
 80047bc:	bf00      	nop
 80047be:	3708      	adds	r7, #8
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <turn_on>:

void turn_on(struct LED_dev * ctrl){
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ctrl->LED_port, ctrl->LED_pin, GPIO_PIN_SET);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6818      	ldr	r0, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	889b      	ldrh	r3, [r3, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	4619      	mov	r1, r3
 80047d8:	f004 f830 	bl	800883c <HAL_GPIO_WritePin>
}
 80047dc:	bf00      	nop
 80047de:	3708      	adds	r7, #8
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <turn_off>:

void turn_off(struct LED_dev * ctrl){
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ctrl->LED_port, ctrl->LED_pin, GPIO_PIN_RESET);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6818      	ldr	r0, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	889b      	ldrh	r3, [r3, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	4619      	mov	r1, r3
 80047f8:	f004 f820 	bl	800883c <HAL_GPIO_WritePin>
}
 80047fc:	bf00      	nop
 80047fe:	3708      	adds	r7, #8
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <ms5607_init>:
#include <stdio.h>
#include <math.h>


uint8_t ms5607_init(struct ms5607_dev * dev)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b088      	sub	sp, #32
 8004808:	af02      	add	r7, sp, #8
 800480a:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_GetState(dev->i2c_bus) != HAL_I2C_STATE_READY)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	4618      	mov	r0, r3
 8004812:	f004 fdd1 	bl	80093b8 <HAL_I2C_GetState>
 8004816:	4603      	mov	r3, r0
 8004818:	2b20      	cmp	r3, #32
 800481a:	d003      	beq.n	8004824 <ms5607_init+0x20>
	{
		printf("i2c not ready!\n");
 800481c:	484a      	ldr	r0, [pc, #296]	; (8004948 <ms5607_init+0x144>)
 800481e:	f00c fb6f 	bl	8010f00 <puts>
 8004822:	e002      	b.n	800482a <ms5607_init+0x26>
	} else {
		printf("i2c is ready!\n");
 8004824:	4849      	ldr	r0, [pc, #292]	; (800494c <ms5607_init+0x148>)
 8004826:	f00c fb6b 	bl	8010f00 <puts>
	}
	HAL_StatusTypeDef _ret;
	_ret = HAL_I2C_IsDeviceReady(dev->i2c_bus, dev->addr, 10, dev->addr);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6858      	ldr	r0, [r3, #4]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	b299      	uxth	r1, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	220a      	movs	r2, #10
 800483a:	f004 fc8f 	bl	800915c <HAL_I2C_IsDeviceReady>
 800483e:	4603      	mov	r3, r0
 8004840:	74fb      	strb	r3, [r7, #19]
	if ( _ret != HAL_OK )
 8004842:	7cfb      	ldrb	r3, [r7, #19]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d009      	beq.n	800485c <ms5607_init+0x58>
	{
		printf("BARO setup fail\n");
 8004848:	4841      	ldr	r0, [pc, #260]	; (8004950 <ms5607_init+0x14c>)
 800484a:	f00c fb59 	bl	8010f00 <puts>
		printf("Errorcode: %d\n", _ret);
 800484e:	7cfb      	ldrb	r3, [r7, #19]
 8004850:	4619      	mov	r1, r3
 8004852:	4840      	ldr	r0, [pc, #256]	; (8004954 <ms5607_init+0x150>)
 8004854:	f00c fae0 	bl	8010e18 <iprintf>
		return 0;
 8004858:	2300      	movs	r3, #0
 800485a:	e070      	b.n	800493e <ms5607_init+0x13a>

	//get factory calibration data
	//reset (advised in datasheet)

	uint8_t reset_code[1];
	reset_code[0] = 0x1E;
 800485c:	231e      	movs	r3, #30
 800485e:	743b      	strb	r3, [r7, #16]
	_ret = HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, reset_code, 1, dev->delay);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6858      	ldr	r0, [r3, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	b299      	uxth	r1, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	7a1b      	ldrb	r3, [r3, #8]
 800486e:	f107 0210 	add.w	r2, r7, #16
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	2301      	movs	r3, #1
 8004876:	f004 f94d 	bl	8008b14 <HAL_I2C_Master_Transmit>
 800487a:	4603      	mov	r3, r0
 800487c:	74fb      	strb	r3, [r7, #19]

	HAL_Delay(100);
 800487e:	2064      	movs	r0, #100	; 0x64
 8004880:	f002 fcac 	bl	80071dc <HAL_Delay>

	//get each calibration value (c1 - c6 in datasheet)
	uint8_t get_add;
	uint8_t buf[2];

	for(int i = 1; i < 7; i++){
 8004884:	2301      	movs	r3, #1
 8004886:	617b      	str	r3, [r7, #20]
 8004888:	e043      	b.n	8004912 <ms5607_init+0x10e>

		//standard commands (see datasheet)
		get_add = 0b10100000;
 800488a:	23a0      	movs	r3, #160	; 0xa0
 800488c:	73fb      	strb	r3, [r7, #15]
		get_add = get_add + 2*i;
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	b2db      	uxtb	r3, r3
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	b2da      	uxtb	r2, r3
 8004896:	7bfb      	ldrb	r3, [r7, #15]
 8004898:	4413      	add	r3, r2
 800489a:	b2db      	uxtb	r3, r3
 800489c:	73fb      	strb	r3, [r7, #15]

		_ret = HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &get_add, 1, dev->delay);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6858      	ldr	r0, [r3, #4]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	b299      	uxth	r1, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	7a1b      	ldrb	r3, [r3, #8]
 80048ac:	f107 020f 	add.w	r2, r7, #15
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	2301      	movs	r3, #1
 80048b4:	f004 f92e 	bl	8008b14 <HAL_I2C_Master_Transmit>
 80048b8:	4603      	mov	r3, r0
 80048ba:	74fb      	strb	r3, [r7, #19]
		HAL_Delay(15);
 80048bc:	200f      	movs	r0, #15
 80048be:	f002 fc8d 	bl	80071dc <HAL_Delay>
		_ret = HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 2, dev->delay);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6858      	ldr	r0, [r3, #4]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	b299      	uxth	r1, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	7a1b      	ldrb	r3, [r3, #8]
 80048d0:	f107 020c 	add.w	r2, r7, #12
 80048d4:	9300      	str	r3, [sp, #0]
 80048d6:	2302      	movs	r3, #2
 80048d8:	f004 fa1a 	bl	8008d10 <HAL_I2C_Master_Receive>
 80048dc:	4603      	mov	r3, r0
 80048de:	74fb      	strb	r3, [r7, #19]
		dev->cal[i-1] = (uint16_t)(buf[0] << 8) | buf[1];
 80048e0:	7b3b      	ldrb	r3, [r7, #12]
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	021b      	lsls	r3, r3, #8
 80048e6:	b299      	uxth	r1, r3
 80048e8:	7b7b      	ldrb	r3, [r7, #13]
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	3b01      	subs	r3, #1
 80048f0:	430a      	orrs	r2, r1
 80048f2:	b291      	uxth	r1, r2
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	3304      	adds	r3, #4
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	4413      	add	r3, r2
 80048fc:	460a      	mov	r2, r1
 80048fe:	805a      	strh	r2, [r3, #2]

		if ( _ret != HAL_OK )
 8004900:	7cfb      	ldrb	r3, [r7, #19]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d002      	beq.n	800490c <ms5607_init+0x108>
			{
				printf("MS5607 cal read fail\n");
 8004906:	4814      	ldr	r0, [pc, #80]	; (8004958 <ms5607_init+0x154>)
 8004908:	f00c fafa 	bl	8010f00 <puts>
	for(int i = 1; i < 7; i++){
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	3301      	adds	r3, #1
 8004910:	617b      	str	r3, [r7, #20]
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	2b06      	cmp	r3, #6
 8004916:	ddb8      	ble.n	800488a <ms5607_init+0x86>
			}
	}


	printf("BARO setup success\n");
 8004918:	4810      	ldr	r0, [pc, #64]	; (800495c <ms5607_init+0x158>)
 800491a:	f00c faf1 	bl	8010f00 <puts>

	buf[0] = 0x44;
 800491e:	2344      	movs	r3, #68	; 0x44
 8004920:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6858      	ldr	r0, [r3, #4]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	b299      	uxth	r1, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	7a1b      	ldrb	r3, [r3, #8]
 8004930:	f107 020c 	add.w	r2, r7, #12
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	2301      	movs	r3, #1
 8004938:	f004 f8ec 	bl	8008b14 <HAL_I2C_Master_Transmit>
	// need to wait 3 ms
	return 1;
 800493c:	2301      	movs	r3, #1
}
 800493e:	4618      	mov	r0, r3
 8004940:	3718      	adds	r7, #24
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	08016494 	.word	0x08016494
 800494c:	080164a4 	.word	0x080164a4
 8004950:	080164b4 	.word	0x080164b4
 8004954:	080164c4 	.word	0x080164c4
 8004958:	080164d4 	.word	0x080164d4
 800495c:	080164ec 	.word	0x080164ec

08004960 <ms5607_prep_pressure>:

void ms5607_prep_pressure(struct ms5607_dev * dev, uint8_t * dat)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af02      	add	r7, sp, #8
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
	uint8_t buf[3];
	buf[0] = 0x00;
 800496a:	2300      	movs	r3, #0
 800496c:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6858      	ldr	r0, [r3, #4]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	b299      	uxth	r1, r3
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	7a1b      	ldrb	r3, [r3, #8]
 800497c:	f107 020c 	add.w	r2, r7, #12
 8004980:	9300      	str	r3, [sp, #0]
 8004982:	2301      	movs	r3, #1
 8004984:	f004 f8c6 	bl	8008b14 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 3, dev->delay);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6858      	ldr	r0, [r3, #4]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	b299      	uxth	r1, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	7a1b      	ldrb	r3, [r3, #8]
 8004996:	f107 020c 	add.w	r2, r7, #12
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	2303      	movs	r3, #3
 800499e:	f004 f9b7 	bl	8008d10 <HAL_I2C_Master_Receive>

	dev->D1 = (uint32_t)(buf[0] << 16) | (uint32_t)(buf[1] << 8) | (uint32_t)buf[2];
 80049a2:	7b3b      	ldrb	r3, [r7, #12]
 80049a4:	041b      	lsls	r3, r3, #16
 80049a6:	461a      	mov	r2, r3
 80049a8:	7b7b      	ldrb	r3, [r7, #13]
 80049aa:	021b      	lsls	r3, r3, #8
 80049ac:	4313      	orrs	r3, r2
 80049ae:	7bba      	ldrb	r2, [r7, #14]
 80049b0:	431a      	orrs	r2, r3
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	619a      	str	r2, [r3, #24]
	dat[0] = buf[0];
 80049b6:	7b3a      	ldrb	r2, [r7, #12]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	701a      	strb	r2, [r3, #0]
	dat[1] = buf[1];
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	3301      	adds	r3, #1
 80049c0:	7b7a      	ldrb	r2, [r7, #13]
 80049c2:	701a      	strb	r2, [r3, #0]
	dat[2] = buf[2];
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	3302      	adds	r3, #2
 80049c8:	7bba      	ldrb	r2, [r7, #14]
 80049ca:	701a      	strb	r2, [r3, #0]

	buf[0] = 0x54;
 80049cc:	2354      	movs	r3, #84	; 0x54
 80049ce:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6858      	ldr	r0, [r3, #4]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	b299      	uxth	r1, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	7a1b      	ldrb	r3, [r3, #8]
 80049de:	f107 020c 	add.w	r2, r7, #12
 80049e2:	9300      	str	r3, [sp, #0]
 80049e4:	2301      	movs	r3, #1
 80049e6:	f004 f895 	bl	8008b14 <HAL_I2C_Master_Transmit>
	// need to wait 3 ms
}
 80049ea:	bf00      	nop
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <ms5607_read_pressure>:

void ms5607_read_pressure(struct ms5607_dev * dev, uint8_t * dat)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b086      	sub	sp, #24
 80049f6:	af02      	add	r7, sp, #8
 80049f8:	6078      	str	r0, [r7, #4]
 80049fa:	6039      	str	r1, [r7, #0]
	uint8_t buf[3];
	buf[0] = 0x00;
 80049fc:	2300      	movs	r3, #0
 80049fe:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6858      	ldr	r0, [r3, #4]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	b299      	uxth	r1, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	7a1b      	ldrb	r3, [r3, #8]
 8004a0e:	f107 020c 	add.w	r2, r7, #12
 8004a12:	9300      	str	r3, [sp, #0]
 8004a14:	2301      	movs	r3, #1
 8004a16:	f004 f87d 	bl	8008b14 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 3, dev->delay);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6858      	ldr	r0, [r3, #4]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	b299      	uxth	r1, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	7a1b      	ldrb	r3, [r3, #8]
 8004a28:	f107 020c 	add.w	r2, r7, #12
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	2303      	movs	r3, #3
 8004a30:	f004 f96e 	bl	8008d10 <HAL_I2C_Master_Receive>

	dev->D2 = (uint32_t)(buf[0] << 16) | (uint32_t)(buf[1] << 8) | (uint32_t)buf[2];
 8004a34:	7b3b      	ldrb	r3, [r7, #12]
 8004a36:	041b      	lsls	r3, r3, #16
 8004a38:	461a      	mov	r2, r3
 8004a3a:	7b7b      	ldrb	r3, [r7, #13]
 8004a3c:	021b      	lsls	r3, r3, #8
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	7bba      	ldrb	r2, [r7, #14]
 8004a42:	431a      	orrs	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	61da      	str	r2, [r3, #28]
	dat[3] = buf[0];
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	3303      	adds	r3, #3
 8004a4c:	7b3a      	ldrb	r2, [r7, #12]
 8004a4e:	701a      	strb	r2, [r3, #0]
	dat[4] = buf[1];
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	3304      	adds	r3, #4
 8004a54:	7b7a      	ldrb	r2, [r7, #13]
 8004a56:	701a      	strb	r2, [r3, #0]
	dat[5] = buf[2];
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	3305      	adds	r3, #5
 8004a5c:	7bba      	ldrb	r2, [r7, #14]
 8004a5e:	701a      	strb	r2, [r3, #0]

	buf[0] = 0x44;
 8004a60:	2344      	movs	r3, #68	; 0x44
 8004a62:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6858      	ldr	r0, [r3, #4]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	b299      	uxth	r1, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	7a1b      	ldrb	r3, [r3, #8]
 8004a72:	f107 020c 	add.w	r2, r7, #12
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	2301      	movs	r3, #1
 8004a7a:	f004 f84b 	bl	8008b14 <HAL_I2C_Master_Transmit>
	// need to wait 3 ms
}
 8004a7e:	bf00      	nop
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
	...

08004a88 <ms5607_convert>:

void ms5607_convert(struct ms5607_dev * dev, float * p, float * t)
{
 8004a88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004a8c:	b092      	sub	sp, #72	; 0x48
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	60f8      	str	r0, [r7, #12]
 8004a92:	60b9      	str	r1, [r7, #8]
 8004a94:	607a      	str	r2, [r7, #4]
	//calculate calibration values
	uint16_t c1 = dev->cal[0];
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	895b      	ldrh	r3, [r3, #10]
 8004a9a:	877b      	strh	r3, [r7, #58]	; 0x3a
	uint16_t c2 = dev->cal[1];
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	899b      	ldrh	r3, [r3, #12]
 8004aa0:	873b      	strh	r3, [r7, #56]	; 0x38
	uint16_t c3 = dev->cal[2];
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	89db      	ldrh	r3, [r3, #14]
 8004aa6:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint16_t c4 = dev->cal[3];
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	8a1b      	ldrh	r3, [r3, #16]
 8004aac:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint16_t c5 = dev->cal[4];
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8a5b      	ldrh	r3, [r3, #18]
 8004ab2:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t c6 = dev->cal[5];
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	8a9b      	ldrh	r3, [r3, #20]
 8004ab8:	863b      	strh	r3, [r7, #48]	; 0x30

	uint32_t D1 = dev->D1;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t D2 = dev->D2;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	62bb      	str	r3, [r7, #40]	; 0x28

	//calculations from datasheet
	float dt = (float)D2 - c5 * 256.0;
 8004ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac8:	ee07 3a90 	vmov	s15, r3
 8004acc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ad0:	ee17 0a90 	vmov	r0, s15
 8004ad4:	f7fb fd38 	bl	8000548 <__aeabi_f2d>
 8004ad8:	4604      	mov	r4, r0
 8004ada:	460d      	mov	r5, r1
 8004adc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7fb fd20 	bl	8000524 <__aeabi_i2d>
 8004ae4:	f04f 0200 	mov.w	r2, #0
 8004ae8:	4bd9      	ldr	r3, [pc, #868]	; (8004e50 <ms5607_convert+0x3c8>)
 8004aea:	f7fb fd85 	bl	80005f8 <__aeabi_dmul>
 8004aee:	4602      	mov	r2, r0
 8004af0:	460b      	mov	r3, r1
 8004af2:	4620      	mov	r0, r4
 8004af4:	4629      	mov	r1, r5
 8004af6:	f7fb fbc7 	bl	8000288 <__aeabi_dsub>
 8004afa:	4603      	mov	r3, r0
 8004afc:	460c      	mov	r4, r1
 8004afe:	4618      	mov	r0, r3
 8004b00:	4621      	mov	r1, r4
 8004b02:	f7fc f871 	bl	8000be8 <__aeabi_d2f>
 8004b06:	4603      	mov	r3, r0
 8004b08:	627b      	str	r3, [r7, #36]	; 0x24
	float OFF = c2 * pow(2.0, 17) + (c4 * dt)/64.0;
 8004b0a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f7fb fd09 	bl	8000524 <__aeabi_i2d>
 8004b12:	f04f 0200 	mov.w	r2, #0
 8004b16:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8004b1a:	f7fb fd6d 	bl	80005f8 <__aeabi_dmul>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	460c      	mov	r4, r1
 8004b22:	4625      	mov	r5, r4
 8004b24:	461c      	mov	r4, r3
 8004b26:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004b28:	ee07 3a90 	vmov	s15, r3
 8004b2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b30:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004b34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b38:	ee17 0a90 	vmov	r0, s15
 8004b3c:	f7fb fd04 	bl	8000548 <__aeabi_f2d>
 8004b40:	f04f 0200 	mov.w	r2, #0
 8004b44:	4bc3      	ldr	r3, [pc, #780]	; (8004e54 <ms5607_convert+0x3cc>)
 8004b46:	f7fb fe81 	bl	800084c <__aeabi_ddiv>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	4620      	mov	r0, r4
 8004b50:	4629      	mov	r1, r5
 8004b52:	f7fb fb9b 	bl	800028c <__adddf3>
 8004b56:	4603      	mov	r3, r0
 8004b58:	460c      	mov	r4, r1
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	4621      	mov	r1, r4
 8004b5e:	f7fc f843 	bl	8000be8 <__aeabi_d2f>
 8004b62:	4603      	mov	r3, r0
 8004b64:	623b      	str	r3, [r7, #32]
	float SENS = c1 * pow(2.0, 16) + (c3 * dt)/128.0;
 8004b66:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7fb fcdb 	bl	8000524 <__aeabi_i2d>
 8004b6e:	f04f 0200 	mov.w	r2, #0
 8004b72:	4bb9      	ldr	r3, [pc, #740]	; (8004e58 <ms5607_convert+0x3d0>)
 8004b74:	f7fb fd40 	bl	80005f8 <__aeabi_dmul>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	460c      	mov	r4, r1
 8004b7c:	4625      	mov	r5, r4
 8004b7e:	461c      	mov	r4, r3
 8004b80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b82:	ee07 3a90 	vmov	s15, r3
 8004b86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b8a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b92:	ee17 0a90 	vmov	r0, s15
 8004b96:	f7fb fcd7 	bl	8000548 <__aeabi_f2d>
 8004b9a:	f04f 0200 	mov.w	r2, #0
 8004b9e:	4baf      	ldr	r3, [pc, #700]	; (8004e5c <ms5607_convert+0x3d4>)
 8004ba0:	f7fb fe54 	bl	800084c <__aeabi_ddiv>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	4620      	mov	r0, r4
 8004baa:	4629      	mov	r1, r5
 8004bac:	f7fb fb6e 	bl	800028c <__adddf3>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	460c      	mov	r4, r1
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	4621      	mov	r1, r4
 8004bb8:	f7fc f816 	bl	8000be8 <__aeabi_d2f>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	61fb      	str	r3, [r7, #28]
	float TEMP = 2000.0 + dt * c6/(pow(2.0, 23));
 8004bc0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004bc2:	ee07 3a90 	vmov	s15, r3
 8004bc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004bca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bd2:	ee17 0a90 	vmov	r0, s15
 8004bd6:	f7fb fcb7 	bl	8000548 <__aeabi_f2d>
 8004bda:	f04f 0200 	mov.w	r2, #0
 8004bde:	4ba0      	ldr	r3, [pc, #640]	; (8004e60 <ms5607_convert+0x3d8>)
 8004be0:	f7fb fe34 	bl	800084c <__aeabi_ddiv>
 8004be4:	4603      	mov	r3, r0
 8004be6:	460c      	mov	r4, r1
 8004be8:	4618      	mov	r0, r3
 8004bea:	4621      	mov	r1, r4
 8004bec:	f04f 0200 	mov.w	r2, #0
 8004bf0:	4b9c      	ldr	r3, [pc, #624]	; (8004e64 <ms5607_convert+0x3dc>)
 8004bf2:	f7fb fb4b 	bl	800028c <__adddf3>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	460c      	mov	r4, r1
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	4621      	mov	r1, r4
 8004bfe:	f7fb fff3 	bl	8000be8 <__aeabi_d2f>
 8004c02:	4603      	mov	r3, r0
 8004c04:	61bb      	str	r3, [r7, #24]
	float pressure = ((float)D1 * SENS/(pow(2.0, 21)) - OFF)/(pow(2.0, 15));
 8004c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c08:	ee07 3a90 	vmov	s15, r3
 8004c0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004c10:	edd7 7a07 	vldr	s15, [r7, #28]
 8004c14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c18:	ee17 0a90 	vmov	r0, s15
 8004c1c:	f7fb fc94 	bl	8000548 <__aeabi_f2d>
 8004c20:	f04f 0200 	mov.w	r2, #0
 8004c24:	4b90      	ldr	r3, [pc, #576]	; (8004e68 <ms5607_convert+0x3e0>)
 8004c26:	f7fb fe11 	bl	800084c <__aeabi_ddiv>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	460c      	mov	r4, r1
 8004c2e:	4625      	mov	r5, r4
 8004c30:	461c      	mov	r4, r3
 8004c32:	6a38      	ldr	r0, [r7, #32]
 8004c34:	f7fb fc88 	bl	8000548 <__aeabi_f2d>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	4620      	mov	r0, r4
 8004c3e:	4629      	mov	r1, r5
 8004c40:	f7fb fb22 	bl	8000288 <__aeabi_dsub>
 8004c44:	4603      	mov	r3, r0
 8004c46:	460c      	mov	r4, r1
 8004c48:	4618      	mov	r0, r3
 8004c4a:	4621      	mov	r1, r4
 8004c4c:	f04f 0200 	mov.w	r2, #0
 8004c50:	4b86      	ldr	r3, [pc, #536]	; (8004e6c <ms5607_convert+0x3e4>)
 8004c52:	f7fb fdfb 	bl	800084c <__aeabi_ddiv>
 8004c56:	4603      	mov	r3, r0
 8004c58:	460c      	mov	r4, r1
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	4621      	mov	r1, r4
 8004c5e:	f7fb ffc3 	bl	8000be8 <__aeabi_d2f>
 8004c62:	4603      	mov	r3, r0
 8004c64:	617b      	str	r3, [r7, #20]

	float T2 = 0., OFF2 = 0., SENS2 = 0.;
 8004c66:	f04f 0300 	mov.w	r3, #0
 8004c6a:	647b      	str	r3, [r7, #68]	; 0x44
 8004c6c:	f04f 0300 	mov.w	r3, #0
 8004c70:	643b      	str	r3, [r7, #64]	; 0x40
 8004c72:	f04f 0300 	mov.w	r3, #0
 8004c76:	63fb      	str	r3, [r7, #60]	; 0x3c
	if(TEMP < 2000)
 8004c78:	edd7 7a06 	vldr	s15, [r7, #24]
 8004c7c:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8004e70 <ms5607_convert+0x3e8>
 8004c80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c88:	f140 8104 	bpl.w	8004e94 <ms5607_convert+0x40c>
	{
	  T2 = dt * dt / pow(2.0,31);
 8004c8c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004c90:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004c94:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c98:	eddf 6a76 	vldr	s13, [pc, #472]	; 8004e74 <ms5607_convert+0x3ec>
 8004c9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ca0:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	  OFF2 = 61.0 * (TEMP - 2000.0) * (TEMP - 2000.0)/pow(2.0,4);
 8004ca4:	69b8      	ldr	r0, [r7, #24]
 8004ca6:	f7fb fc4f 	bl	8000548 <__aeabi_f2d>
 8004caa:	f04f 0200 	mov.w	r2, #0
 8004cae:	4b6d      	ldr	r3, [pc, #436]	; (8004e64 <ms5607_convert+0x3dc>)
 8004cb0:	f7fb faea 	bl	8000288 <__aeabi_dsub>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	460c      	mov	r4, r1
 8004cb8:	4618      	mov	r0, r3
 8004cba:	4621      	mov	r1, r4
 8004cbc:	f04f 0200 	mov.w	r2, #0
 8004cc0:	4b6d      	ldr	r3, [pc, #436]	; (8004e78 <ms5607_convert+0x3f0>)
 8004cc2:	f7fb fc99 	bl	80005f8 <__aeabi_dmul>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	460c      	mov	r4, r1
 8004cca:	4625      	mov	r5, r4
 8004ccc:	461c      	mov	r4, r3
 8004cce:	69b8      	ldr	r0, [r7, #24]
 8004cd0:	f7fb fc3a 	bl	8000548 <__aeabi_f2d>
 8004cd4:	f04f 0200 	mov.w	r2, #0
 8004cd8:	4b62      	ldr	r3, [pc, #392]	; (8004e64 <ms5607_convert+0x3dc>)
 8004cda:	f7fb fad5 	bl	8000288 <__aeabi_dsub>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	4620      	mov	r0, r4
 8004ce4:	4629      	mov	r1, r5
 8004ce6:	f7fb fc87 	bl	80005f8 <__aeabi_dmul>
 8004cea:	4603      	mov	r3, r0
 8004cec:	460c      	mov	r4, r1
 8004cee:	4618      	mov	r0, r3
 8004cf0:	4621      	mov	r1, r4
 8004cf2:	f04f 0200 	mov.w	r2, #0
 8004cf6:	4b61      	ldr	r3, [pc, #388]	; (8004e7c <ms5607_convert+0x3f4>)
 8004cf8:	f7fb fda8 	bl	800084c <__aeabi_ddiv>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	460c      	mov	r4, r1
 8004d00:	4618      	mov	r0, r3
 8004d02:	4621      	mov	r1, r4
 8004d04:	f7fb ff70 	bl	8000be8 <__aeabi_d2f>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	643b      	str	r3, [r7, #64]	; 0x40
	  SENS2 = 2.0 * (TEMP - 2000.0) * (TEMP - 2000.0);
 8004d0c:	69b8      	ldr	r0, [r7, #24]
 8004d0e:	f7fb fc1b 	bl	8000548 <__aeabi_f2d>
 8004d12:	f04f 0200 	mov.w	r2, #0
 8004d16:	4b53      	ldr	r3, [pc, #332]	; (8004e64 <ms5607_convert+0x3dc>)
 8004d18:	f7fb fab6 	bl	8000288 <__aeabi_dsub>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	460c      	mov	r4, r1
 8004d20:	4618      	mov	r0, r3
 8004d22:	4621      	mov	r1, r4
 8004d24:	4602      	mov	r2, r0
 8004d26:	460b      	mov	r3, r1
 8004d28:	f7fb fab0 	bl	800028c <__adddf3>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	460c      	mov	r4, r1
 8004d30:	4625      	mov	r5, r4
 8004d32:	461c      	mov	r4, r3
 8004d34:	69b8      	ldr	r0, [r7, #24]
 8004d36:	f7fb fc07 	bl	8000548 <__aeabi_f2d>
 8004d3a:	f04f 0200 	mov.w	r2, #0
 8004d3e:	4b49      	ldr	r3, [pc, #292]	; (8004e64 <ms5607_convert+0x3dc>)
 8004d40:	f7fb faa2 	bl	8000288 <__aeabi_dsub>
 8004d44:	4602      	mov	r2, r0
 8004d46:	460b      	mov	r3, r1
 8004d48:	4620      	mov	r0, r4
 8004d4a:	4629      	mov	r1, r5
 8004d4c:	f7fb fc54 	bl	80005f8 <__aeabi_dmul>
 8004d50:	4603      	mov	r3, r0
 8004d52:	460c      	mov	r4, r1
 8004d54:	4618      	mov	r0, r3
 8004d56:	4621      	mov	r1, r4
 8004d58:	f7fb ff46 	bl	8000be8 <__aeabi_d2f>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if(TEMP < -1500)
 8004d60:	edd7 7a06 	vldr	s15, [r7, #24]
 8004d64:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8004e80 <ms5607_convert+0x3f8>
 8004d68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d70:	f140 8090 	bpl.w	8004e94 <ms5607_convert+0x40c>
	  {
	    OFF2 += 15.0 * (TEMP + 1500)*(TEMP + 1500.0);
 8004d74:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004d76:	f7fb fbe7 	bl	8000548 <__aeabi_f2d>
 8004d7a:	4604      	mov	r4, r0
 8004d7c:	460d      	mov	r5, r1
 8004d7e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004d82:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8004e84 <ms5607_convert+0x3fc>
 8004d86:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d8a:	ee17 0a90 	vmov	r0, s15
 8004d8e:	f7fb fbdb 	bl	8000548 <__aeabi_f2d>
 8004d92:	f04f 0200 	mov.w	r2, #0
 8004d96:	4b3c      	ldr	r3, [pc, #240]	; (8004e88 <ms5607_convert+0x400>)
 8004d98:	f7fb fc2e 	bl	80005f8 <__aeabi_dmul>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4690      	mov	r8, r2
 8004da2:	4699      	mov	r9, r3
 8004da4:	69b8      	ldr	r0, [r7, #24]
 8004da6:	f7fb fbcf 	bl	8000548 <__aeabi_f2d>
 8004daa:	a327      	add	r3, pc, #156	; (adr r3, 8004e48 <ms5607_convert+0x3c0>)
 8004dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db0:	f7fb fa6c 	bl	800028c <__adddf3>
 8004db4:	4602      	mov	r2, r0
 8004db6:	460b      	mov	r3, r1
 8004db8:	4640      	mov	r0, r8
 8004dba:	4649      	mov	r1, r9
 8004dbc:	f7fb fc1c 	bl	80005f8 <__aeabi_dmul>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	4620      	mov	r0, r4
 8004dc6:	4629      	mov	r1, r5
 8004dc8:	f7fb fa60 	bl	800028c <__adddf3>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	460c      	mov	r4, r1
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	4621      	mov	r1, r4
 8004dd4:	f7fb ff08 	bl	8000be8 <__aeabi_d2f>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	643b      	str	r3, [r7, #64]	; 0x40
	    SENS2 += 8.0 * (TEMP + 1500)*(TEMP + 1500.0);
 8004ddc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004dde:	f7fb fbb3 	bl	8000548 <__aeabi_f2d>
 8004de2:	4604      	mov	r4, r0
 8004de4:	460d      	mov	r5, r1
 8004de6:	edd7 7a06 	vldr	s15, [r7, #24]
 8004dea:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004e84 <ms5607_convert+0x3fc>
 8004dee:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004df2:	ee17 0a90 	vmov	r0, s15
 8004df6:	f7fb fba7 	bl	8000548 <__aeabi_f2d>
 8004dfa:	f04f 0200 	mov.w	r2, #0
 8004dfe:	4b23      	ldr	r3, [pc, #140]	; (8004e8c <ms5607_convert+0x404>)
 8004e00:	f7fb fbfa 	bl	80005f8 <__aeabi_dmul>
 8004e04:	4602      	mov	r2, r0
 8004e06:	460b      	mov	r3, r1
 8004e08:	4690      	mov	r8, r2
 8004e0a:	4699      	mov	r9, r3
 8004e0c:	69b8      	ldr	r0, [r7, #24]
 8004e0e:	f7fb fb9b 	bl	8000548 <__aeabi_f2d>
 8004e12:	a30d      	add	r3, pc, #52	; (adr r3, 8004e48 <ms5607_convert+0x3c0>)
 8004e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e18:	f7fb fa38 	bl	800028c <__adddf3>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	460b      	mov	r3, r1
 8004e20:	4640      	mov	r0, r8
 8004e22:	4649      	mov	r1, r9
 8004e24:	f7fb fbe8 	bl	80005f8 <__aeabi_dmul>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	4620      	mov	r0, r4
 8004e2e:	4629      	mov	r1, r5
 8004e30:	f7fb fa2c 	bl	800028c <__adddf3>
 8004e34:	4603      	mov	r3, r0
 8004e36:	460c      	mov	r4, r1
 8004e38:	4618      	mov	r0, r3
 8004e3a:	4621      	mov	r1, r4
 8004e3c:	f7fb fed4 	bl	8000be8 <__aeabi_d2f>
 8004e40:	4603      	mov	r3, r0
 8004e42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e44:	e026      	b.n	8004e94 <ms5607_convert+0x40c>
 8004e46:	bf00      	nop
 8004e48:	00000000 	.word	0x00000000
 8004e4c:	40977000 	.word	0x40977000
 8004e50:	40700000 	.word	0x40700000
 8004e54:	40500000 	.word	0x40500000
 8004e58:	40f00000 	.word	0x40f00000
 8004e5c:	40600000 	.word	0x40600000
 8004e60:	41600000 	.word	0x41600000
 8004e64:	409f4000 	.word	0x409f4000
 8004e68:	41400000 	.word	0x41400000
 8004e6c:	40e00000 	.word	0x40e00000
 8004e70:	44fa0000 	.word	0x44fa0000
 8004e74:	4f000000 	.word	0x4f000000
 8004e78:	404e8000 	.word	0x404e8000
 8004e7c:	40300000 	.word	0x40300000
 8004e80:	c4bb8000 	.word	0xc4bb8000
 8004e84:	44bb8000 	.word	0x44bb8000
 8004e88:	402e0000 	.word	0x402e0000
 8004e8c:	40200000 	.word	0x40200000
 8004e90:	42c80000 	.word	0x42c80000
	  }
	}

	TEMP-=T2;
 8004e94:	ed97 7a06 	vldr	s14, [r7, #24]
 8004e98:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004e9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ea0:	edc7 7a06 	vstr	s15, [r7, #24]
	OFF-=OFF2;
 8004ea4:	ed97 7a08 	vldr	s14, [r7, #32]
 8004ea8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8004eac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004eb0:	edc7 7a08 	vstr	s15, [r7, #32]
	SENS-=SENS2;
 8004eb4:	ed97 7a07 	vldr	s14, [r7, #28]
 8004eb8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004ebc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ec0:	edc7 7a07 	vstr	s15, [r7, #28]
	TEMP/=100;
 8004ec4:	ed97 7a06 	vldr	s14, [r7, #24]
 8004ec8:	ed5f 6a0f 	vldr	s13, [pc, #-60]	; 8004e90 <ms5607_convert+0x408>
 8004ecc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ed0:	edc7 7a06 	vstr	s15, [r7, #24]
	pressure=(((float)(D1*SENS)/pow(2,21)-OFF)/pow(2,15));
 8004ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed6:	ee07 3a90 	vmov	s15, r3
 8004eda:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ede:	edd7 7a07 	vldr	s15, [r7, #28]
 8004ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ee6:	ee17 0a90 	vmov	r0, s15
 8004eea:	f7fb fb2d 	bl	8000548 <__aeabi_f2d>
 8004eee:	f04f 0200 	mov.w	r2, #0
 8004ef2:	4b16      	ldr	r3, [pc, #88]	; (8004f4c <ms5607_convert+0x4c4>)
 8004ef4:	f7fb fcaa 	bl	800084c <__aeabi_ddiv>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	460c      	mov	r4, r1
 8004efc:	4625      	mov	r5, r4
 8004efe:	461c      	mov	r4, r3
 8004f00:	6a38      	ldr	r0, [r7, #32]
 8004f02:	f7fb fb21 	bl	8000548 <__aeabi_f2d>
 8004f06:	4602      	mov	r2, r0
 8004f08:	460b      	mov	r3, r1
 8004f0a:	4620      	mov	r0, r4
 8004f0c:	4629      	mov	r1, r5
 8004f0e:	f7fb f9bb 	bl	8000288 <__aeabi_dsub>
 8004f12:	4603      	mov	r3, r0
 8004f14:	460c      	mov	r4, r1
 8004f16:	4618      	mov	r0, r3
 8004f18:	4621      	mov	r1, r4
 8004f1a:	f04f 0200 	mov.w	r2, #0
 8004f1e:	4b0c      	ldr	r3, [pc, #48]	; (8004f50 <ms5607_convert+0x4c8>)
 8004f20:	f7fb fc94 	bl	800084c <__aeabi_ddiv>
 8004f24:	4603      	mov	r3, r0
 8004f26:	460c      	mov	r4, r1
 8004f28:	4618      	mov	r0, r3
 8004f2a:	4621      	mov	r1, r4
 8004f2c:	f7fb fe5c 	bl	8000be8 <__aeabi_d2f>
 8004f30:	4603      	mov	r3, r0
 8004f32:	617b      	str	r3, [r7, #20]

	*t = TEMP;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	601a      	str	r2, [r3, #0]
	*p = pressure;
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	601a      	str	r2, [r3, #0]

	//printf("MS pressure is %4.2f Pa\n", pressure);
	//printf("MS temp is %4.2f deg\n", TEMP);

}
 8004f40:	bf00      	nop
 8004f42:	3748      	adds	r7, #72	; 0x48
 8004f44:	46bd      	mov	sp, r7
 8004f46:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004f4a:	bf00      	nop
 8004f4c:	41400000 	.word	0x41400000
 8004f50:	40e00000 	.word	0x40e00000

08004f54 <sht31_init>:
	return 0;
}


int sht31_init(struct sht31_dev * dev)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af02      	add	r7, sp, #8
 8004f5a:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_GetState(dev->i2c_bus) != HAL_I2C_STATE_READY)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	4618      	mov	r0, r3
 8004f62:	f004 fa29 	bl	80093b8 <HAL_I2C_GetState>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b20      	cmp	r3, #32
 8004f6a:	d003      	beq.n	8004f74 <sht31_init+0x20>
	{
		printf("i2c1 not ready!\n");
 8004f6c:	481f      	ldr	r0, [pc, #124]	; (8004fec <sht31_init+0x98>)
 8004f6e:	f00b ffc7 	bl	8010f00 <puts>
 8004f72:	e002      	b.n	8004f7a <sht31_init+0x26>
	} else {
		printf("i2c1 is ready!\n");
 8004f74:	481e      	ldr	r0, [pc, #120]	; (8004ff0 <sht31_init+0x9c>)
 8004f76:	f00b ffc3 	bl	8010f00 <puts>
	}

	HAL_StatusTypeDef _ret;

	_ret = HAL_I2C_IsDeviceReady(dev->i2c_bus, dev->addr, 10, dev->delay);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6858      	ldr	r0, [r3, #4]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	b299      	uxth	r1, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	7a1b      	ldrb	r3, [r3, #8]
 8004f88:	220a      	movs	r2, #10
 8004f8a:	f004 f8e7 	bl	800915c <HAL_I2C_IsDeviceReady>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	73fb      	strb	r3, [r7, #15]
	if ( _ret != HAL_OK )
 8004f92:	7bfb      	ldrb	r3, [r7, #15]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d009      	beq.n	8004fac <sht31_init+0x58>
	{
		printf("SHT31 setup fail\n");
 8004f98:	4816      	ldr	r0, [pc, #88]	; (8004ff4 <sht31_init+0xa0>)
 8004f9a:	f00b ffb1 	bl	8010f00 <puts>
		printf("Errorcode: %d\n", _ret);
 8004f9e:	7bfb      	ldrb	r3, [r7, #15]
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	4815      	ldr	r0, [pc, #84]	; (8004ff8 <sht31_init+0xa4>)
 8004fa4:	f00b ff38 	bl	8010e18 <iprintf>
		return 0;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	e01b      	b.n	8004fe4 <sht31_init+0x90>
	}

	printf("SHT31 setup success\n");
 8004fac:	4813      	ldr	r0, [pc, #76]	; (8004ffc <sht31_init+0xa8>)
 8004fae:	f00b ffa7 	bl	8010f00 <puts>
	//request first measurement
	uint8_t buf[2];
	uint16_t REG = 0x2416;
 8004fb2:	f242 4316 	movw	r3, #9238	; 0x2416
 8004fb6:	81bb      	strh	r3, [r7, #12]
	buf[0] = (uint8_t)(REG >> 8);
 8004fb8:	89bb      	ldrh	r3, [r7, #12]
 8004fba:	0a1b      	lsrs	r3, r3, #8
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	723b      	strb	r3, [r7, #8]
	buf[1] = (uint8_t)REG;
 8004fc2:	89bb      	ldrh	r3, [r7, #12]
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 2, dev->delay);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6858      	ldr	r0, [r3, #4]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	b299      	uxth	r1, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	7a1b      	ldrb	r3, [r3, #8]
 8004fd6:	f107 0208 	add.w	r2, r7, #8
 8004fda:	9300      	str	r3, [sp, #0]
 8004fdc:	2302      	movs	r3, #2
 8004fde:	f003 fd99 	bl	8008b14 <HAL_I2C_Master_Transmit>
	return 1;
 8004fe2:	2301      	movs	r3, #1
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3710      	adds	r7, #16
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}
 8004fec:	08016500 	.word	0x08016500
 8004ff0:	08016510 	.word	0x08016510
 8004ff4:	08016520 	.word	0x08016520
 8004ff8:	08016534 	.word	0x08016534
 8004ffc:	08016544 	.word	0x08016544

08005000 <sht31_read>:

void sht31_read(struct sht31_dev * dev, float * dat, uint16_t * dat_raw)
{
 8005000:	b590      	push	{r4, r7, lr}
 8005002:	b08d      	sub	sp, #52	; 0x34
 8005004:	af02      	add	r7, sp, #8
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
	float temp;
	float humid;
	uint8_t buf[6];

	//T MSB, T LSB, T CRC, H MSB, H LSB, H CRC
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 6, dev->delay);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6858      	ldr	r0, [r3, #4]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	b299      	uxth	r1, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	7a1b      	ldrb	r3, [r3, #8]
 800501a:	f107 0214 	add.w	r2, r7, #20
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	2306      	movs	r3, #6
 8005022:	f003 fe75 	bl	8008d10 <HAL_I2C_Master_Receive>
	/*
	uint16_t rawTemp = (uint16_t)((((uint16_t)_buf[0])<<8) | (uint16_t)_buf[1]);
	uint16_t rawHum = (uint16_t)((((uint16_t)_buf[3])<<8) | (uint16_t)_buf[4]);
	*/
	uint16_t rawTemp = ((uint16_t)buf[0] << 8) | buf[1];
 8005026:	7d3b      	ldrb	r3, [r7, #20]
 8005028:	021b      	lsls	r3, r3, #8
 800502a:	b21a      	sxth	r2, r3
 800502c:	7d7b      	ldrb	r3, [r7, #21]
 800502e:	b21b      	sxth	r3, r3
 8005030:	4313      	orrs	r3, r2
 8005032:	b21b      	sxth	r3, r3
 8005034:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t rawHum = ((uint16_t)buf[3] << 8) | buf[4];
 8005036:	7dfb      	ldrb	r3, [r7, #23]
 8005038:	021b      	lsls	r3, r3, #8
 800503a:	b21a      	sxth	r2, r3
 800503c:	7e3b      	ldrb	r3, [r7, #24]
 800503e:	b21b      	sxth	r3, r3
 8005040:	4313      	orrs	r3, r2
 8005042:	b21b      	sxth	r3, r3
 8005044:	84bb      	strh	r3, [r7, #36]	; 0x24
	humid = 100.0 * (float)rawHum / 65535.0;
 8005046:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005048:	ee07 3a90 	vmov	s15, r3
 800504c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005050:	ee17 0a90 	vmov	r0, s15
 8005054:	f7fb fa78 	bl	8000548 <__aeabi_f2d>
 8005058:	f04f 0200 	mov.w	r2, #0
 800505c:	4b32      	ldr	r3, [pc, #200]	; (8005128 <sht31_read+0x128>)
 800505e:	f7fb facb 	bl	80005f8 <__aeabi_dmul>
 8005062:	4603      	mov	r3, r0
 8005064:	460c      	mov	r4, r1
 8005066:	4618      	mov	r0, r3
 8005068:	4621      	mov	r1, r4
 800506a:	a32d      	add	r3, pc, #180	; (adr r3, 8005120 <sht31_read+0x120>)
 800506c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005070:	f7fb fbec 	bl	800084c <__aeabi_ddiv>
 8005074:	4603      	mov	r3, r0
 8005076:	460c      	mov	r4, r1
 8005078:	4618      	mov	r0, r3
 800507a:	4621      	mov	r1, r4
 800507c:	f7fb fdb4 	bl	8000be8 <__aeabi_d2f>
 8005080:	4603      	mov	r3, r0
 8005082:	623b      	str	r3, [r7, #32]
	temp = -45.0 + 175 * (float)rawTemp / 65535.0;
 8005084:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005086:	ee07 3a90 	vmov	s15, r3
 800508a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800508e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800512c <sht31_read+0x12c>
 8005092:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005096:	ee17 0a90 	vmov	r0, s15
 800509a:	f7fb fa55 	bl	8000548 <__aeabi_f2d>
 800509e:	a320      	add	r3, pc, #128	; (adr r3, 8005120 <sht31_read+0x120>)
 80050a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a4:	f7fb fbd2 	bl	800084c <__aeabi_ddiv>
 80050a8:	4603      	mov	r3, r0
 80050aa:	460c      	mov	r4, r1
 80050ac:	4618      	mov	r0, r3
 80050ae:	4621      	mov	r1, r4
 80050b0:	f04f 0200 	mov.w	r2, #0
 80050b4:	4b1e      	ldr	r3, [pc, #120]	; (8005130 <sht31_read+0x130>)
 80050b6:	f7fb f8e7 	bl	8000288 <__aeabi_dsub>
 80050ba:	4603      	mov	r3, r0
 80050bc:	460c      	mov	r4, r1
 80050be:	4618      	mov	r0, r3
 80050c0:	4621      	mov	r1, r4
 80050c2:	f7fb fd91 	bl	8000be8 <__aeabi_d2f>
 80050c6:	4603      	mov	r3, r0
 80050c8:	61fb      	str	r3, [r7, #28]
	//printf("temperature is %4.2f deg\n",temp);
	//printf("humidity is %4.2f perc\n",humid);
	dat[0] = temp;
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	69fa      	ldr	r2, [r7, #28]
 80050ce:	601a      	str	r2, [r3, #0]
	dat[1] = humid;
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	3304      	adds	r3, #4
 80050d4:	6a3a      	ldr	r2, [r7, #32]
 80050d6:	601a      	str	r2, [r3, #0]
	dat_raw[0] = rawTemp;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80050dc:	801a      	strh	r2, [r3, #0]
	dat_raw[1] = rawHum;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	3302      	adds	r3, #2
 80050e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80050e4:	801a      	strh	r2, [r3, #0]

	uint16_t REG = 0x2416;
 80050e6:	f242 4316 	movw	r3, #9238	; 0x2416
 80050ea:	837b      	strh	r3, [r7, #26]
	buf[0] = (uint8_t)(REG >> 8);
 80050ec:	8b7b      	ldrh	r3, [r7, #26]
 80050ee:	0a1b      	lsrs	r3, r3, #8
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	753b      	strb	r3, [r7, #20]
	buf[1] = (uint8_t)REG;
 80050f6:	8b7b      	ldrh	r3, [r7, #26]
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 2, dev->delay);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	6858      	ldr	r0, [r3, #4]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	b299      	uxth	r1, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	7a1b      	ldrb	r3, [r3, #8]
 800510a:	f107 0214 	add.w	r2, r7, #20
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	2302      	movs	r3, #2
 8005112:	f003 fcff 	bl	8008b14 <HAL_I2C_Master_Transmit>

};
 8005116:	bf00      	nop
 8005118:	372c      	adds	r7, #44	; 0x2c
 800511a:	46bd      	mov	sp, r7
 800511c:	bd90      	pop	{r4, r7, pc}
 800511e:	bf00      	nop
 8005120:	00000000 	.word	0x00000000
 8005124:	40efffe0 	.word	0x40efffe0
 8005128:	40590000 	.word	0x40590000
 800512c:	432f0000 	.word	0x432f0000
 8005130:	40468000 	.word	0x40468000

08005134 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005134:	f8df d034 	ldr.w	sp, [pc, #52]	; 800516c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005138:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800513a:	e003      	b.n	8005144 <LoopCopyDataInit>

0800513c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800513c:	4b0c      	ldr	r3, [pc, #48]	; (8005170 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800513e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005140:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005142:	3104      	adds	r1, #4

08005144 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005144:	480b      	ldr	r0, [pc, #44]	; (8005174 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005146:	4b0c      	ldr	r3, [pc, #48]	; (8005178 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005148:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800514a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800514c:	d3f6      	bcc.n	800513c <CopyDataInit>
  ldr  r2, =_sbss
 800514e:	4a0b      	ldr	r2, [pc, #44]	; (800517c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005150:	e002      	b.n	8005158 <LoopFillZerobss>

08005152 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005152:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005154:	f842 3b04 	str.w	r3, [r2], #4

08005158 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005158:	4b09      	ldr	r3, [pc, #36]	; (8005180 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800515a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800515c:	d3f9      	bcc.n	8005152 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800515e:	f7fe fdc9 	bl	8003cf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005162:	f00b f9c5 	bl	80104f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005166:	f7fd f9ef 	bl	8002548 <main>
  bx  lr    
 800516a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800516c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005170:	08016a48 	.word	0x08016a48
  ldr  r0, =_sdata
 8005174:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005178:	20000330 	.word	0x20000330
  ldr  r2, =_sbss
 800517c:	20000330 	.word	0x20000330
  ldr  r3, = _ebss
 8005180:	20010204 	.word	0x20010204

08005184 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005184:	e7fe      	b.n	8005184 <ADC_IRQHandler>
	...

08005188 <init_env>:
#include "../../Inc/Sim_Con/env.h"

void init_env(env_t *env) {
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
	/* init constants */
	calibrate_env(env, PRESSURE_REFERENCE, TEMPERATURE_REFERENCE);
 8005190:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
 8005194:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80051b0 <init_env+0x28>
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 f80d 	bl	80051b8 <calibrate_env>
	update_env(env, TEMPERATURE_REFERENCE);
 800519e:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f82c 	bl	8005200 <update_env>
}
 80051a8:	bf00      	nop
 80051aa:	3708      	adds	r7, #8
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	47c5e680 	.word	0x47c5e680
 80051b4:	00000000 	.word	0x00000000

080051b8 <calibrate_env>:

void calibrate_env(env_t *env, float p_g, float T_g) {
 80051b8:	b590      	push	{r4, r7, lr}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80051c4:	edc7 0a01 	vstr	s1, [r7, #4]
	env->T_g = T_g + T_0; // input is temperature in °C
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f7fb f9bd 	bl	8000548 <__aeabi_f2d>
 80051ce:	a30a      	add	r3, pc, #40	; (adr r3, 80051f8 <calibrate_env+0x40>)
 80051d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d4:	f7fb f85a 	bl	800028c <__adddf3>
 80051d8:	4603      	mov	r3, r0
 80051da:	460c      	mov	r4, r1
 80051dc:	4618      	mov	r0, r3
 80051de:	4621      	mov	r1, r4
 80051e0:	f7fb fd02 	bl	8000be8 <__aeabi_d2f>
 80051e4:	4602      	mov	r2, r0
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	605a      	str	r2, [r3, #4]
	env->p_g = p_g; //
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	601a      	str	r2, [r3, #0]
}
 80051f0:	bf00      	nop
 80051f2:	3714      	adds	r7, #20
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd90      	pop	{r4, r7, pc}
 80051f8:	66666666 	.word	0x66666666
 80051fc:	40711266 	.word	0x40711266

08005200 <update_env>:

void update_env(env_t *env, float T) {
 8005200:	b590      	push	{r4, r7, lr}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	ed87 0a00 	vstr	s0, [r7]
	env->T = T + T_0; // input is temperature in °C and property is temperature in °K
 800520c:	6838      	ldr	r0, [r7, #0]
 800520e:	f7fb f99b 	bl	8000548 <__aeabi_f2d>
 8005212:	a317      	add	r3, pc, #92	; (adr r3, 8005270 <update_env+0x70>)
 8005214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005218:	f7fb f838 	bl	800028c <__adddf3>
 800521c:	4603      	mov	r3, r0
 800521e:	460c      	mov	r4, r1
 8005220:	4618      	mov	r0, r3
 8005222:	4621      	mov	r1, r4
 8005224:	f7fb fce0 	bl	8000be8 <__aeabi_d2f>
 8005228:	4602      	mov	r2, r0
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	609a      	str	r2, [r3, #8]
	env->C = powf(GAMMA * R_0 * env->T, 0.5);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	4618      	mov	r0, r3
 8005234:	f7fb f988 	bl	8000548 <__aeabi_f2d>
 8005238:	a30f      	add	r3, pc, #60	; (adr r3, 8005278 <update_env+0x78>)
 800523a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523e:	f7fb f9db 	bl	80005f8 <__aeabi_dmul>
 8005242:	4603      	mov	r3, r0
 8005244:	460c      	mov	r4, r1
 8005246:	4618      	mov	r0, r3
 8005248:	4621      	mov	r1, r4
 800524a:	f7fb fccd 	bl	8000be8 <__aeabi_d2f>
 800524e:	4603      	mov	r3, r0
 8005250:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8005254:	ee00 3a10 	vmov	s0, r3
 8005258:	f00f fb64 	bl	8014924 <powf>
 800525c:	eef0 7a40 	vmov.f32	s15, s0
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8005266:	bf00      	nop
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	bd90      	pop	{r4, r7, pc}
 800526e:	bf00      	nop
 8005270:	66666666 	.word	0x66666666
 8005274:	40711266 	.word	0x40711266
 8005278:	8c1557b7 	.word	0x8c1557b7
 800527c:	40791e2f 	.word	0x40791e2f

08005280 <mach_number>:

float mach_number(env_t *env, float V_x) {
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	ed87 0a00 	vstr	s0, [r7]
	float mach_number = fabsf(V_x) / env->C;
 800528c:	edd7 7a00 	vldr	s15, [r7]
 8005290:	eef0 6ae7 	vabs.f32	s13, s15
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	ed93 7a03 	vldr	s14, [r3, #12]
 800529a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800529e:	edc7 7a03 	vstr	s15, [r7, #12]
	return mach_number;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	ee07 3a90 	vmov	s15, r3
}
 80052a8:	eeb0 0a67 	vmov.f32	s0, s15
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
	...

080052b8 <pressure2altitudeAGL>:

void pressure2altitudeAGL(env_t *env, int n, float p[n], bool p_active[n], float h[n]) {
 80052b8:	b5b0      	push	{r4, r5, r7, lr}
 80052ba:	b086      	sub	sp, #24
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
 80052c4:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 80052c6:	2300      	movs	r3, #0
 80052c8:	617b      	str	r3, [r7, #20]
 80052ca:	e043      	b.n	8005354 <pressure2altitudeAGL+0x9c>
		if (p_active[i]) {
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	4413      	add	r3, r2
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d03a      	beq.n	800534e <pressure2altitudeAGL+0x96>
			/* original implementation */
			h[i] = env->T_g / T_GRAD * (1 - powf(p[i] / env->p_g, R_0 * T_GRAD / GRAVITATION));
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	4618      	mov	r0, r3
 80052de:	f7fb f933 	bl	8000548 <__aeabi_f2d>
 80052e2:	a322      	add	r3, pc, #136	; (adr r3, 800536c <pressure2altitudeAGL+0xb4>)
 80052e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e8:	f7fb fab0 	bl	800084c <__aeabi_ddiv>
 80052ec:	4603      	mov	r3, r0
 80052ee:	460c      	mov	r4, r1
 80052f0:	4625      	mov	r5, r4
 80052f2:	461c      	mov	r4, r3
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	4413      	add	r3, r2
 80052fc:	ed93 7a00 	vldr	s14, [r3]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	edd3 7a00 	vldr	s15, [r3]
 8005306:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800530a:	eddf 0a17 	vldr	s1, [pc, #92]	; 8005368 <pressure2altitudeAGL+0xb0>
 800530e:	eeb0 0a66 	vmov.f32	s0, s13
 8005312:	f00f fb07 	bl	8014924 <powf>
 8005316:	eeb0 7a40 	vmov.f32	s14, s0
 800531a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800531e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005322:	ee17 0a90 	vmov	r0, s15
 8005326:	f7fb f90f 	bl	8000548 <__aeabi_f2d>
 800532a:	4602      	mov	r2, r0
 800532c:	460b      	mov	r3, r1
 800532e:	4620      	mov	r0, r4
 8005330:	4629      	mov	r1, r5
 8005332:	f7fb f961 	bl	80005f8 <__aeabi_dmul>
 8005336:	4603      	mov	r3, r0
 8005338:	460c      	mov	r4, r1
 800533a:	4618      	mov	r0, r3
 800533c:	4621      	mov	r1, r4
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005344:	18d4      	adds	r4, r2, r3
 8005346:	f7fb fc4f 	bl	8000be8 <__aeabi_d2f>
 800534a:	4603      	mov	r3, r0
 800534c:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < n; i++) {
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	3301      	adds	r3, #1
 8005352:	617b      	str	r3, [r7, #20]
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	429a      	cmp	r2, r3
 800535a:	dbb7      	blt.n	80052cc <pressure2altitudeAGL+0x14>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// h[i] = env->T_g / T_GRAD * (1 - expf(logf(p[i] / env->p_g) * R_0 * env->T_grad / GRAVITATION);
		}
	}
}
 800535c:	bf00      	nop
 800535e:	3718      	adds	r7, #24
 8005360:	46bd      	mov	sp, r7
 8005362:	bdb0      	pop	{r4, r5, r7, pc}
 8005364:	f3af 8000 	nop.w
 8005368:	3e42c4dc 	.word	0x3e42c4dc
 800536c:	76c8b439 	.word	0x76c8b439
 8005370:	3f7a9fbe 	.word	0x3f7a9fbe
 8005374:	00000000 	.word	0x00000000

08005378 <altitudeAGL2pressure>:

void altitudeAGL2pressure(env_t *env, int n, float h[n], bool h_active[n], float p[n]) {
 8005378:	b5b0      	push	{r4, r5, r7, lr}
 800537a:	ed2d 8b02 	vpush	{d8}
 800537e:	b086      	sub	sp, #24
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
 8005388:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 800538a:	2300      	movs	r3, #0
 800538c:	617b      	str	r3, [r7, #20]
 800538e:	e047      	b.n	8005420 <altitudeAGL2pressure+0xa8>
		if (h_active[i]) {
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	4413      	add	r3, r2
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d03e      	beq.n	800541a <altitudeAGL2pressure+0xa2>
			/* original implementation */
			p[i] = env->p_g * powf((1 - T_GRAD * h[i] / env->T_g), GRAVITATION / (R_0 * T_GRAD));
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	ed93 8a00 	vldr	s16, [r3]
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	4413      	add	r3, r2
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7fb f8cb 	bl	8000548 <__aeabi_f2d>
 80053b2:	a323      	add	r3, pc, #140	; (adr r3, 8005440 <altitudeAGL2pressure+0xc8>)
 80053b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b8:	f7fb f91e 	bl	80005f8 <__aeabi_dmul>
 80053bc:	4603      	mov	r3, r0
 80053be:	460c      	mov	r4, r1
 80053c0:	4625      	mov	r5, r4
 80053c2:	461c      	mov	r4, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	4618      	mov	r0, r3
 80053ca:	f7fb f8bd 	bl	8000548 <__aeabi_f2d>
 80053ce:	4602      	mov	r2, r0
 80053d0:	460b      	mov	r3, r1
 80053d2:	4620      	mov	r0, r4
 80053d4:	4629      	mov	r1, r5
 80053d6:	f7fb fa39 	bl	800084c <__aeabi_ddiv>
 80053da:	4603      	mov	r3, r0
 80053dc:	460c      	mov	r4, r1
 80053de:	461a      	mov	r2, r3
 80053e0:	4623      	mov	r3, r4
 80053e2:	f04f 0000 	mov.w	r0, #0
 80053e6:	4914      	ldr	r1, [pc, #80]	; (8005438 <altitudeAGL2pressure+0xc0>)
 80053e8:	f7fa ff4e 	bl	8000288 <__aeabi_dsub>
 80053ec:	4603      	mov	r3, r0
 80053ee:	460c      	mov	r4, r1
 80053f0:	4618      	mov	r0, r3
 80053f2:	4621      	mov	r1, r4
 80053f4:	f7fb fbf8 	bl	8000be8 <__aeabi_d2f>
 80053f8:	4603      	mov	r3, r0
 80053fa:	eddf 0a10 	vldr	s1, [pc, #64]	; 800543c <altitudeAGL2pressure+0xc4>
 80053fe:	ee00 3a10 	vmov	s0, r3
 8005402:	f00f fa8f 	bl	8014924 <powf>
 8005406:	eef0 7a40 	vmov.f32	s15, s0
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	009b      	lsls	r3, r3, #2
 800540e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005410:	4413      	add	r3, r2
 8005412:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005416:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < n; i++) {
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	3301      	adds	r3, #1
 800541e:	617b      	str	r3, [r7, #20]
 8005420:	697a      	ldr	r2, [r7, #20]
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	429a      	cmp	r2, r3
 8005426:	dbb3      	blt.n	8005390 <altitudeAGL2pressure+0x18>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// p[i] = env->p_g * expf(logf(1 - env->T_grad * h[i] / env->T_g) * GRAVITATION / (R_0 * env->T_grad));
		}
	}
}
 8005428:	bf00      	nop
 800542a:	3718      	adds	r7, #24
 800542c:	46bd      	mov	sp, r7
 800542e:	ecbd 8b02 	vpop	{d8}
 8005432:	bdb0      	pop	{r4, r5, r7, pc}
 8005434:	f3af 8000 	nop.w
 8005438:	3ff00000 	.word	0x3ff00000
 800543c:	40a83d87 	.word	0x40a83d87
 8005440:	76c8b439 	.word	0x76c8b439
 8005444:	3f7a9fbe 	.word	0x3f7a9fbe

08005448 <altitude_gradient>:

float altitude_gradient(env_t *env, float p) {
 8005448:	b5b0      	push	{r4, r5, r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	ed87 0a00 	vstr	s0, [r7]
	/* computes the altitude gradient per infitesimal change in pressure (dh/dp) at a specified pressure */
	/* original implementation */
	float h_grad = -R_0 * env->T_g / (GRAVITATION * env->p_g) * powf(p / env->p_g, R_0 * T_GRAD / GRAVITATION - 1);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	4618      	mov	r0, r3
 800545a:	f7fb f875 	bl	8000548 <__aeabi_f2d>
 800545e:	a323      	add	r3, pc, #140	; (adr r3, 80054ec <altitude_gradient+0xa4>)
 8005460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005464:	f7fb f8c8 	bl	80005f8 <__aeabi_dmul>
 8005468:	4603      	mov	r3, r0
 800546a:	460c      	mov	r4, r1
 800546c:	4625      	mov	r5, r4
 800546e:	461c      	mov	r4, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4618      	mov	r0, r3
 8005476:	f7fb f867 	bl	8000548 <__aeabi_f2d>
 800547a:	a31e      	add	r3, pc, #120	; (adr r3, 80054f4 <altitude_gradient+0xac>)
 800547c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005480:	f7fb f8ba 	bl	80005f8 <__aeabi_dmul>
 8005484:	4602      	mov	r2, r0
 8005486:	460b      	mov	r3, r1
 8005488:	4620      	mov	r0, r4
 800548a:	4629      	mov	r1, r5
 800548c:	f7fb f9de 	bl	800084c <__aeabi_ddiv>
 8005490:	4603      	mov	r3, r0
 8005492:	460c      	mov	r4, r1
 8005494:	4625      	mov	r5, r4
 8005496:	461c      	mov	r4, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	edd3 7a00 	vldr	s15, [r3]
 800549e:	ed97 7a00 	vldr	s14, [r7]
 80054a2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80054a6:	eddf 0a10 	vldr	s1, [pc, #64]	; 80054e8 <altitude_gradient+0xa0>
 80054aa:	eeb0 0a66 	vmov.f32	s0, s13
 80054ae:	f00f fa39 	bl	8014924 <powf>
 80054b2:	ee10 3a10 	vmov	r3, s0
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7fb f846 	bl	8000548 <__aeabi_f2d>
 80054bc:	4602      	mov	r2, r0
 80054be:	460b      	mov	r3, r1
 80054c0:	4620      	mov	r0, r4
 80054c2:	4629      	mov	r1, r5
 80054c4:	f7fb f898 	bl	80005f8 <__aeabi_dmul>
 80054c8:	4603      	mov	r3, r0
 80054ca:	460c      	mov	r4, r1
 80054cc:	4618      	mov	r0, r3
 80054ce:	4621      	mov	r1, r4
 80054d0:	f7fb fb8a 	bl	8000be8 <__aeabi_d2f>
 80054d4:	4603      	mov	r3, r0
 80054d6:	60fb      	str	r3, [r7, #12]
	/* adapted implementation which can possibly speed up calculation and should have the same results */
	// float h_grad = - R_0 * env->T_g / (GRAVITATION * env->p_g) * expf(logf(p / env->p_g) * (R_0 * env->T_grad / GRAVITATION - 1));
	return h_grad;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	ee07 3a90 	vmov	s15, r3
}
 80054de:	eeb0 0a67 	vmov.f32	s0, s15
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bdb0      	pop	{r4, r5, r7, pc}
 80054e8:	bf4f4ec9 	.word	0xbf4f4ec9
 80054ec:	640f3ea7 	.word	0x640f3ea7
 80054f0:	c071f0fd 	.word	0xc071f0fd
 80054f4:	51eb851f 	.word	0x51eb851f
 80054f8:	40239eb8 	.word	0x40239eb8
 80054fc:	00000000 	.word	0x00000000

08005500 <detect_flight_phase>:
#include "../../Inc/Sim_Con/flight_phase_detection.h"

void detect_flight_phase(flight_phase_detection_t *flight_phase_detection, state_est_data_t *state_est_data, env_t *env)
{   
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]


    /* determine state transition events */
    switch (flight_phase_detection->flight_phase) {
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	3b01      	subs	r3, #1
 8005512:	2b05      	cmp	r3, #5
 8005514:	f200 8174 	bhi.w	8005800 <detect_flight_phase+0x300>
 8005518:	a201      	add	r2, pc, #4	; (adr r2, 8005520 <detect_flight_phase+0x20>)
 800551a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551e:	bf00      	nop
 8005520:	08005539 	.word	0x08005539
 8005524:	08005801 	.word	0x08005801
 8005528:	080055d3 	.word	0x080055d3
 800552c:	0800561f 	.word	0x0800561f
 8005530:	0800566b 	.word	0x0800566b
 8005534:	08005737 	.word	0x08005737
        case IDLE:
            if (((float)(state_est_data->acceleration_rocket[0])) / 1000 > 20) {
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	ee07 3a90 	vmov	s15, r3
 8005540:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005544:	eddf 6ab7 	vldr	s13, [pc, #732]	; 8005824 <detect_flight_phase+0x324>
 8005548:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800554c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005550:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005558:	dd13      	ble.n	8005582 <detect_flight_phase+0x82>
                flight_phase_detection->num_samples_positive += 1;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005560:	b2db      	uxtb	r3, r3
 8005562:	3301      	adds	r3, #1
 8005564:	b2db      	uxtb	r3, r3
 8005566:	b25a      	sxtb	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005572:	2b03      	cmp	r3, #3
 8005574:	dd05      	ble.n	8005582 <detect_flight_phase+0x82>
                    flight_phase_detection->flight_phase = THRUSTING;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2203      	movs	r2, #3
 800557a:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	721a      	strb	r2, [r3, #8]
                }
            }
            if (((float)(state_est_data->position_world[2])) / 1000 > 80) {
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	ee07 3a90 	vmov	s15, r3
 800558a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800558e:	eddf 6aa5 	vldr	s13, [pc, #660]	; 8005824 <detect_flight_phase+0x324>
 8005592:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005596:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8005814 <detect_flight_phase+0x314>
 800559a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800559e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055a2:	dc00      	bgt.n	80055a6 <detect_flight_phase+0xa6>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = THRUSTING;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 80055a4:	e12e      	b.n	8005804 <detect_flight_phase+0x304>
                flight_phase_detection->num_samples_positive += 1;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	3301      	adds	r3, #1
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	b25a      	sxtb	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80055be:	2b03      	cmp	r3, #3
 80055c0:	f340 8120 	ble.w	8005804 <detect_flight_phase+0x304>
                    flight_phase_detection->flight_phase = THRUSTING;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2203      	movs	r2, #3
 80055c8:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2200      	movs	r2, #0
 80055ce:	721a      	strb	r2, [r3, #8]
        break;
 80055d0:	e118      	b.n	8005804 <detect_flight_phase+0x304>

        case THRUSTING:
            if (((float)(state_est_data->acceleration_rocket[0])) / 1000 < 0) {
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	ee07 3a90 	vmov	s15, r3
 80055da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80055de:	eddf 6a91 	vldr	s13, [pc, #580]	; 8005824 <detect_flight_phase+0x324>
 80055e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80055e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80055ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055ee:	d400      	bmi.n	80055f2 <detect_flight_phase+0xf2>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = COASTING;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 80055f0:	e10a      	b.n	8005808 <detect_flight_phase+0x308>
                flight_phase_detection->num_samples_positive += 1;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	3301      	adds	r3, #1
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	b25a      	sxtb	r2, r3
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800560a:	2b03      	cmp	r3, #3
 800560c:	f340 80fc 	ble.w	8005808 <detect_flight_phase+0x308>
                    flight_phase_detection->flight_phase = COASTING;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2204      	movs	r2, #4
 8005614:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	721a      	strb	r2, [r3, #8]
        break;
 800561c:	e0f4      	b.n	8005808 <detect_flight_phase+0x308>
        
        case COASTING:
            if (((float)(state_est_data->velocity_world[2])) / 1000 < 0) {
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005622:	ee07 3a90 	vmov	s15, r3
 8005626:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800562a:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8005824 <detect_flight_phase+0x324>
 800562e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005632:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800563a:	d400      	bmi.n	800563e <detect_flight_phase+0x13e>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = DESCENT;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 800563c:	e0e6      	b.n	800580c <detect_flight_phase+0x30c>
                flight_phase_detection->num_samples_positive += 1;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005644:	b2db      	uxtb	r3, r3
 8005646:	3301      	adds	r3, #1
 8005648:	b2db      	uxtb	r3, r3
 800564a:	b25a      	sxtb	r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005656:	2b03      	cmp	r3, #3
 8005658:	f340 80d8 	ble.w	800580c <detect_flight_phase+0x30c>
                    flight_phase_detection->flight_phase = DESCENT;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2205      	movs	r2, #5
 8005660:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	721a      	strb	r2, [r3, #8]
        break;
 8005668:	e0d0      	b.n	800580c <detect_flight_phase+0x30c>

        case DESCENT:
            /* we assume a ballistic descent when the absolute velocity of the rocket in vertical direction is larger than 40 m/s */
            if (fabs(((float)(state_est_data->velocity_world[2])) / 1000) > 60) {
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566e:	ee07 3a90 	vmov	s15, r3
 8005672:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005676:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8005824 <detect_flight_phase+0x324>
 800567a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800567e:	eef0 7ae7 	vabs.f32	s15, s15
 8005682:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8005818 <detect_flight_phase+0x318>
 8005686:	eef4 7ac7 	vcmpe.f32	s15, s14
 800568a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800568e:	dd15      	ble.n	80056bc <detect_flight_phase+0x1bc>
                flight_phase_detection->num_samples_positive += 1;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005696:	b2db      	uxtb	r3, r3
 8005698:	3301      	adds	r3, #1
 800569a:	b2db      	uxtb	r3, r3
 800569c:	b25a      	sxtb	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80056a8:	2b03      	cmp	r3, #3
 80056aa:	f340 80b1 	ble.w	8005810 <detect_flight_phase+0x310>
                    flight_phase_detection->flight_phase = BALLISTIC_DESCENT;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2206      	movs	r2, #6
 80056b2:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2200      	movs	r2, #0
 80056b8:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = RECOVERY;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 80056ba:	e0a9      	b.n	8005810 <detect_flight_phase+0x310>
            else if (fabs(((float)(state_est_data->velocity_rocket[0])) / 1000) < 2 && fabs(((float)(state_est_data->position_world[2])) / 1000) < 500) {
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	ee07 3a90 	vmov	s15, r3
 80056c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056c8:	eddf 6a56 	vldr	s13, [pc, #344]	; 8005824 <detect_flight_phase+0x324>
 80056cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80056d0:	eef0 7ae7 	vabs.f32	s15, s15
 80056d4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80056d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056e0:	d400      	bmi.n	80056e4 <detect_flight_phase+0x1e4>
        break;
 80056e2:	e095      	b.n	8005810 <detect_flight_phase+0x310>
            else if (fabs(((float)(state_est_data->velocity_rocket[0])) / 1000) < 2 && fabs(((float)(state_est_data->position_world[2])) / 1000) < 500) {
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	ee07 3a90 	vmov	s15, r3
 80056ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056f0:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8005824 <detect_flight_phase+0x324>
 80056f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80056f8:	eef0 7ae7 	vabs.f32	s15, s15
 80056fc:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800581c <detect_flight_phase+0x31c>
 8005700:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005708:	d400      	bmi.n	800570c <detect_flight_phase+0x20c>
        break;
 800570a:	e081      	b.n	8005810 <detect_flight_phase+0x310>
                flight_phase_detection->num_samples_positive += 1;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005712:	b2db      	uxtb	r3, r3
 8005714:	3301      	adds	r3, #1
 8005716:	b2db      	uxtb	r3, r3
 8005718:	b25a      	sxtb	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005724:	2b03      	cmp	r3, #3
 8005726:	dd73      	ble.n	8005810 <detect_flight_phase+0x310>
                    flight_phase_detection->flight_phase = RECOVERY;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2207      	movs	r2, #7
 800572c:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	721a      	strb	r2, [r3, #8]
        break;
 8005734:	e06c      	b.n	8005810 <detect_flight_phase+0x310>

        case BALLISTIC_DESCENT:
            /* we assume a touchdown event when the absolute value of the altitude is smaller than 500m 
               and the absolute velocity of the rocket is smaller than 2 m/s */
            if (fabs(((float)(state_est_data->velocity_rocket[0])) / 1000) < 2 && fabs(((float)(state_est_data->position_world[2])) / 1000) < 500) {
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	ee07 3a90 	vmov	s15, r3
 800573e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005742:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005824 <detect_flight_phase+0x324>
 8005746:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800574a:	eef0 7ae7 	vabs.f32	s15, s15
 800574e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005752:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800575a:	d527      	bpl.n	80057ac <detect_flight_phase+0x2ac>
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	ee07 3a90 	vmov	s15, r3
 8005764:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005768:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8005824 <detect_flight_phase+0x324>
 800576c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005770:	eef0 7ae7 	vabs.f32	s15, s15
 8005774:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800581c <detect_flight_phase+0x31c>
 8005778:	eef4 7ac7 	vcmpe.f32	s15, s14
 800577c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005780:	d514      	bpl.n	80057ac <detect_flight_phase+0x2ac>
                flight_phase_detection->num_samples_positive += 1;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005788:	b2db      	uxtb	r3, r3
 800578a:	3301      	adds	r3, #1
 800578c:	b2db      	uxtb	r3, r3
 800578e:	b25a      	sxtb	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800579a:	2b03      	cmp	r3, #3
 800579c:	dd2f      	ble.n	80057fe <detect_flight_phase+0x2fe>
                    flight_phase_detection->flight_phase = RECOVERY;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2207      	movs	r2, #7
 80057a2:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 80057aa:	e028      	b.n	80057fe <detect_flight_phase+0x2fe>
                }
            }
            /* we assume a normal descent with parachute when the absolute velocity of the rocket in vertical direction is smaller than 40 m/s */
            else if (fabs(((float)(state_est_data->velocity_world[2])) / 1000) < 40) {
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b0:	ee07 3a90 	vmov	s15, r3
 80057b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057b8:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8005824 <detect_flight_phase+0x324>
 80057bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80057c0:	eef0 7ae7 	vabs.f32	s15, s15
 80057c4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8005820 <detect_flight_phase+0x320>
 80057c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057d0:	d400      	bmi.n	80057d4 <detect_flight_phase+0x2d4>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = DESCENT;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 80057d2:	e029      	b.n	8005828 <detect_flight_phase+0x328>
                flight_phase_detection->num_samples_positive += 1;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	3301      	adds	r3, #1
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	b25a      	sxtb	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80057ec:	2b03      	cmp	r3, #3
 80057ee:	dd1b      	ble.n	8005828 <detect_flight_phase+0x328>
                    flight_phase_detection->flight_phase = DESCENT;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2205      	movs	r2, #5
 80057f4:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2200      	movs	r2, #0
 80057fa:	721a      	strb	r2, [r3, #8]
        break;
 80057fc:	e014      	b.n	8005828 <detect_flight_phase+0x328>
 80057fe:	e013      	b.n	8005828 <detect_flight_phase+0x328>

        default:
        break;
 8005800:	bf00      	nop
 8005802:	e012      	b.n	800582a <detect_flight_phase+0x32a>
        break;
 8005804:	bf00      	nop
 8005806:	e010      	b.n	800582a <detect_flight_phase+0x32a>
        break;
 8005808:	bf00      	nop
 800580a:	e00e      	b.n	800582a <detect_flight_phase+0x32a>
        break;
 800580c:	bf00      	nop
 800580e:	e00c      	b.n	800582a <detect_flight_phase+0x32a>
        break;
 8005810:	bf00      	nop
 8005812:	e00a      	b.n	800582a <detect_flight_phase+0x32a>
 8005814:	42a00000 	.word	0x42a00000
 8005818:	42700000 	.word	0x42700000
 800581c:	43fa0000 	.word	0x43fa0000
 8005820:	42200000 	.word	0x42200000
 8005824:	447a0000 	.word	0x447a0000
        break;
 8005828:	bf00      	nop
    }

    flight_phase_detection->mach_number = mach_number(env, ((float) state_est_data->velocity_rocket[0]) / 1000);
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	ee07 3a90 	vmov	s15, r3
 8005832:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005836:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8005824 <detect_flight_phase+0x324>
 800583a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800583e:	eeb0 0a66 	vmov.f32	s0, s13
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7ff fd1c 	bl	8005280 <mach_number>
 8005848:	eef0 7a40 	vmov.f32	s15, s0
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	edc3 7a01 	vstr	s15, [r3, #4]

    /* determine the mach regime */
    if (flight_phase_detection->mach_number >= 1.3) {
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	4618      	mov	r0, r3
 8005858:	f7fa fe76 	bl	8000548 <__aeabi_f2d>
 800585c:	a312      	add	r3, pc, #72	; (adr r3, 80058a8 <detect_flight_phase+0x3a8>)
 800585e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005862:	f7fb f94f 	bl	8000b04 <__aeabi_dcmpge>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d003      	beq.n	8005874 <detect_flight_phase+0x374>
        flight_phase_detection->mach_regime = SUPERSONIC;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2203      	movs	r2, #3
 8005870:	705a      	strb	r2, [r3, #1]
    {
        flight_phase_detection->mach_regime = SUBSONIC;
    }
    
    
}
 8005872:	e013      	b.n	800589c <detect_flight_phase+0x39c>
    } else if (flight_phase_detection->mach_number >= 0.8)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	4618      	mov	r0, r3
 800587a:	f7fa fe65 	bl	8000548 <__aeabi_f2d>
 800587e:	a30c      	add	r3, pc, #48	; (adr r3, 80058b0 <detect_flight_phase+0x3b0>)
 8005880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005884:	f7fb f93e 	bl	8000b04 <__aeabi_dcmpge>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d003      	beq.n	8005896 <detect_flight_phase+0x396>
        flight_phase_detection->mach_regime = TRANSONIC;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2202      	movs	r2, #2
 8005892:	705a      	strb	r2, [r3, #1]
}
 8005894:	e002      	b.n	800589c <detect_flight_phase+0x39c>
        flight_phase_detection->mach_regime = SUBSONIC;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2201      	movs	r2, #1
 800589a:	705a      	strb	r2, [r3, #1]
}
 800589c:	bf00      	nop
 800589e:	3710      	adds	r7, #16
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	f3af 8000 	nop.w
 80058a8:	cccccccd 	.word	0xcccccccd
 80058ac:	3ff4cccc 	.word	0x3ff4cccc
 80058b0:	9999999a 	.word	0x9999999a
 80058b4:	3fe99999 	.word	0x3fe99999

080058b8 <reset_flight_phase_detection>:

void reset_flight_phase_detection(flight_phase_detection_t *flight_phase_detection){
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
    flight_phase_detection->flight_phase = IDLE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2201      	movs	r2, #1
 80058c4:	701a      	strb	r2, [r3, #0]
    flight_phase_detection->mach_regime = SUBSONIC;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	705a      	strb	r2, [r3, #1]
    flight_phase_detection->mach_number = 0.0;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f04f 0200 	mov.w	r2, #0
 80058d2:	605a      	str	r2, [r3, #4]
    flight_phase_detection->num_samples_positive = 0;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	721a      	strb	r2, [r3, #8]
 80058da:	bf00      	nop
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr
	...

080058e8 <reset_kf_state>:
#include "../../Inc/Sim_Con/kf.h"

void reset_kf_state(kf_state_t *kf_state){
 80058e8:	b5b0      	push	{r4, r5, r7, lr}
 80058ea:	b0bc      	sub	sp, #240	; 0xf0
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{1.25E-5}, {5.0E-3}, {0.0}};
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
    } else if (STATE_ESTIMATION_FREQUENCY == 100) { 
        float A_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-0, 1.0E-2, 5.0E-5}, {0, 1.0E-0, 1.0E-2}, {0.0, 0.0, 1.0E-0}};
 80058f0:	4b44      	ldr	r3, [pc, #272]	; (8005a04 <reset_kf_state+0x11c>)
 80058f2:	f107 040c 	add.w	r4, r7, #12
 80058f6:	461d      	mov	r5, r3
 80058f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005900:	682b      	ldr	r3, [r5, #0]
 8005902:	6023      	str	r3, [r4, #0]
        float B_init[NUMBER_STATES][NUMBER_INPUTS] = {{5.0E-5}, {1.0E-2}, {0.0}};
 8005904:	4a40      	ldr	r2, [pc, #256]	; (8005a08 <reset_kf_state+0x120>)
 8005906:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800590a:	ca07      	ldmia	r2, {r0, r1, r2}
 800590c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{5.0E-5}, {1.0E-2}, {0.0}};
 8005910:	4a3d      	ldr	r2, [pc, #244]	; (8005a08 <reset_kf_state+0x120>)
 8005912:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005916:	ca07      	ldmia	r2, {r0, r1, r2}
 8005918:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f107 010c 	add.w	r1, r7, #12
 8005922:	2224      	movs	r2, #36	; 0x24
 8005924:	4618      	mov	r0, r3
 8005926:	f00a fe07 	bl	8010538 <memcpy>
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	3348      	adds	r3, #72	; 0x48
 800592e:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8005932:	220c      	movs	r2, #12
 8005934:	4618      	mov	r0, r3
 8005936:	f00a fdff 	bl	8010538 <memcpy>
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	3354      	adds	r3, #84	; 0x54
 800593e:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8005942:	220c      	movs	r2, #12
 8005944:	4618      	mov	r0, r3
 8005946:	f00a fdf7 	bl	8010538 <memcpy>
        memset(kf_state->Ad, 0, sizeof(kf_state->Ad));
        memset(kf_state->Bd, 0, sizeof(kf_state->Bd));
        memset(kf_state->Gd, 0, sizeof(kf_state->Gd));
    }

	float x_est_init[NUMBER_STATES] = {0, 0, 0};
 800594a:	f04f 0300 	mov.w	r3, #0
 800594e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005952:	f04f 0300 	mov.w	r3, #0
 8005956:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800595a:	f04f 0300 	mov.w	r3, #0
 800595e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-9, 0, 0}, {0, 1.0E-12, 0}, {0, 0, 0}};
 8005962:	4b2a      	ldr	r3, [pc, #168]	; (8005a0c <reset_kf_state+0x124>)
 8005964:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 8005968:	461d      	mov	r5, r3
 800596a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800596c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800596e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005970:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005972:	682b      	ldr	r3, [r5, #0]
 8005974:	6023      	str	r3, [r4, #0]

    memcpy(kf_state->x_est, x_est_init, sizeof(x_est_init));
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	33c4      	adds	r3, #196	; 0xc4
 800597a:	f107 01e4 	add.w	r1, r7, #228	; 0xe4
 800597e:	220c      	movs	r2, #12
 8005980:	4618      	mov	r0, r3
 8005982:	f00a fdd9 	bl	8010538 <memcpy>
    memcpy(kf_state->P_est, P_est_init, sizeof(P_est_init));
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	33d0      	adds	r3, #208	; 0xd0
 800598a:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 800598e:	2224      	movs	r2, #36	; 0x24
 8005990:	4618      	mov	r0, r3
 8005992:	f00a fdd1 	bl	8010538 <memcpy>

    memset(kf_state->Q, 0, NUMBER_PROCESS_NOISE*NUMBER_PROCESS_NOISE*sizeof(kf_state->Q[0][0]));
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	339c      	adds	r3, #156	; 0x9c
 800599a:	2204      	movs	r2, #4
 800599c:	2100      	movs	r1, #0
 800599e:	4618      	mov	r0, r3
 80059a0:	f00a fdd5 	bl	801054e <memset>
    memset(kf_state->R, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->R[0][0]));
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	33a0      	adds	r3, #160	; 0xa0
 80059a8:	2210      	movs	r2, #16
 80059aa:	2100      	movs	r1, #0
 80059ac:	4618      	mov	r0, r3
 80059ae:	f00a fdce 	bl	801054e <memset>

    memset(kf_state->z, 0, NUMBER_MEASUREMENTS*sizeof(kf_state->z[0]));
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80059b8:	2208      	movs	r2, #8
 80059ba:	2100      	movs	r1, #0
 80059bc:	4618      	mov	r0, r3
 80059be:	f00a fdc6 	bl	801054e <memset>
    memset(kf_state->z_active, false, NUMBER_MEASUREMENTS*sizeof(kf_state->z_active[0]));
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80059c8:	2202      	movs	r2, #2
 80059ca:	2100      	movs	r1, #0
 80059cc:	4618      	mov	r0, r3
 80059ce:	f00a fdbe 	bl	801054e <memset>
    kf_state->num_z_active = 0;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194

    transpose(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->Ad_T);
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	3324      	adds	r3, #36	; 0x24
 80059e0:	2103      	movs	r1, #3
 80059e2:	2003      	movs	r0, #3
 80059e4:	f000 fe14 	bl	8006610 <transpose>
    transpose(NUMBER_STATES, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Gd_T);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	3360      	adds	r3, #96	; 0x60
 80059f2:	2101      	movs	r1, #1
 80059f4:	2003      	movs	r0, #3
 80059f6:	f000 fe0b 	bl	8006610 <transpose>
}
 80059fa:	bf00      	nop
 80059fc:	37f0      	adds	r7, #240	; 0xf0
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bdb0      	pop	{r4, r5, r7, pc}
 8005a02:	bf00      	nop
 8005a04:	08016558 	.word	0x08016558
 8005a08:	0801657c 	.word	0x0801657c
 8005a0c:	08016588 	.word	0x08016588

08005a10 <kf_prediction>:

void kf_prediction(kf_state_t *kf_state){
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af04      	add	r7, sp, #16
 8005a16:	6078      	str	r0, [r7, #4]
    /* Prediction Step */
    /* Calculation of x_priori */
    matvecprod(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->x_est, kf_state->x_priori, true);
 8005a18:	6879      	ldr	r1, [r7, #4]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	33f4      	adds	r3, #244	; 0xf4
 8005a24:	2201      	movs	r2, #1
 8005a26:	9201      	str	r2, [sp, #4]
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	460a      	mov	r2, r1
 8005a2e:	2103      	movs	r1, #3
 8005a30:	2003      	movs	r0, #3
 8005a32:	f001 f817 	bl	8006a64 <matvecprod>
    matvecprod(NUMBER_STATES, NUMBER_INPUTS, kf_state->Bd, kf_state->u, kf_state->x_priori, false);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	33f4      	adds	r3, #244	; 0xf4
 8005a46:	2200      	movs	r2, #0
 8005a48:	9201      	str	r2, [sp, #4]
 8005a4a:	9300      	str	r3, [sp, #0]
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	460a      	mov	r2, r1
 8005a50:	2101      	movs	r1, #1
 8005a52:	2003      	movs	r0, #3
 8005a54:	f001 f806 	bl	8006a64 <matvecprod>

    /* Calculation of P_priori */
    /* P_priori = Ad * P_est_prior * Ad_T + Gd * Q * Gd_T */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->P_est, kf_state->Placeholder_Ad_mult_P_est, true);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	33d0      	adds	r3, #208	; 0xd0
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	f502 72cc 	add.w	r2, r2, #408	; 0x198
 8005a64:	2101      	movs	r1, #1
 8005a66:	9102      	str	r1, [sp, #8]
 8005a68:	9201      	str	r2, [sp, #4]
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2203      	movs	r2, #3
 8005a70:	2103      	movs	r1, #3
 8005a72:	2003      	movs	r0, #3
 8005a74:	f000 ff5c 	bl	8006930 <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Q, kf_state->Placeholder_Gd_mult_Q, true);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	339c      	adds	r3, #156	; 0x9c
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8005a88:	2101      	movs	r1, #1
 8005a8a:	9102      	str	r1, [sp, #8]
 8005a8c:	9201      	str	r2, [sp, #4]
 8005a8e:	9300      	str	r3, [sp, #0]
 8005a90:	4603      	mov	r3, r0
 8005a92:	2201      	movs	r2, #1
 8005a94:	2101      	movs	r1, #1
 8005a96:	2003      	movs	r0, #3
 8005a98:	f000 ff4a 	bl	8006930 <matmul>

    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_Ad_mult_P_est, kf_state->Ad_T, kf_state->P_priori, true);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f503 70cc 	add.w	r0, r3, #408	; 0x198
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	3324      	adds	r3, #36	; 0x24
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8005aac:	2101      	movs	r1, #1
 8005aae:	9102      	str	r1, [sp, #8]
 8005ab0:	9201      	str	r2, [sp, #4]
 8005ab2:	9300      	str	r3, [sp, #0]
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2203      	movs	r2, #3
 8005ab8:	2103      	movs	r1, #3
 8005aba:	2003      	movs	r0, #3
 8005abc:	f000 ff38 	bl	8006930 <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_STATES, kf_state->Placeholder_Gd_mult_Q, kf_state->Gd_T, kf_state->P_priori, false);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f503 70de 	add.w	r0, r3, #444	; 0x1bc
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	3360      	adds	r3, #96	; 0x60
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8005ad0:	2100      	movs	r1, #0
 8005ad2:	9102      	str	r1, [sp, #8]
 8005ad4:	9201      	str	r2, [sp, #4]
 8005ad6:	9300      	str	r3, [sp, #0]
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2203      	movs	r2, #3
 8005adc:	2101      	movs	r1, #1
 8005ade:	2003      	movs	r0, #3
 8005ae0:	f000 ff26 	bl	8006930 <matmul>
}
 8005ae4:	bf00      	nop
 8005ae6:	3708      	adds	r7, #8
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <select_kf_observation_matrices>:

void select_kf_observation_matrices(kf_state_t *kf_state){
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
    memset(kf_state->H, 0, NUMBER_MEASUREMENTS*NUMBER_STATES*sizeof(kf_state->H[0][0]));
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	336c      	adds	r3, #108	; 0x6c
 8005af8:	2218      	movs	r2, #24
 8005afa:	2100      	movs	r1, #0
 8005afc:	4618      	mov	r0, r3
 8005afe:	f00a fd26 	bl	801054e <memset>

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8005b02:	2300      	movs	r3, #0
 8005b04:	60fb      	str	r3, [r7, #12]
 8005b06:	e021      	b.n	8005b4c <select_kf_observation_matrices+0x60>
        if (kf_state->z_active[i]) {
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00b      	beq.n	8005b30 <select_kf_observation_matrices+0x44>
             /* activate contribution of measurement in measurement matrix */
            kf_state->H[i][0] = 1;
 8005b18:	6879      	ldr	r1, [r7, #4]
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	005b      	lsls	r3, r3, #1
 8005b20:	4413      	add	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	440b      	add	r3, r1
 8005b26:	336c      	adds	r3, #108	; 0x6c
 8005b28:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8005b2c:	601a      	str	r2, [r3, #0]
 8005b2e:	e00a      	b.n	8005b46 <select_kf_observation_matrices+0x5a>
        } else {
            /* set contributed measurement covariance to zero */
            kf_state->R[i][i] = 0;
 8005b30:	6879      	ldr	r1, [r7, #4]
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	4613      	mov	r3, r2
 8005b36:	005b      	lsls	r3, r3, #1
 8005b38:	4413      	add	r3, r2
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	440b      	add	r3, r1
 8005b3e:	33a0      	adds	r3, #160	; 0xa0
 8005b40:	f04f 0200 	mov.w	r2, #0
 8005b44:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	3301      	adds	r3, #1
 8005b4a:	60fb      	str	r3, [r7, #12]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	ddda      	ble.n	8005b08 <select_kf_observation_matrices+0x1c>
        }
    }

    transpose(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->H_T);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	3384      	adds	r3, #132	; 0x84
 8005b5c:	2103      	movs	r1, #3
 8005b5e:	2002      	movs	r0, #2
 8005b60:	f000 fd56 	bl	8006610 <transpose>
}
 8005b64:	bf00      	nop
 8005b66:	3710      	adds	r7, #16
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <kf_update>:

void kf_update(kf_state_t *kf_state) {
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af04      	add	r7, sp, #16
 8005b72:	6078      	str	r0, [r7, #4]
    /* Update Step */
    /* y = z - H * x_priori */
    matvecprod(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->x_priori, kf_state->y, true);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b86:	2201      	movs	r2, #1
 8005b88:	9201      	str	r2, [sp, #4]
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	460a      	mov	r2, r1
 8005b90:	2103      	movs	r1, #3
 8005b92:	2002      	movs	r0, #2
 8005b94:	f000 ff66 	bl	8006a64 <matvecprod>
    vecsub(NUMBER_MEASUREMENTS, kf_state->z, kf_state->y, kf_state->y);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f503 71a4 	add.w	r1, r3, #328	; 0x148
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005baa:	2002      	movs	r0, #2
 8005bac:	f000 fdaf 	bl	800670e <vecsub>

    /* S = H * P_priori * H_T + R */
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_STATES, kf_state->H, kf_state->P_priori, kf_state->Placeholder_H_mult_P_priori, true);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	f502 72e4 	add.w	r2, r2, #456	; 0x1c8
 8005bc2:	2101      	movs	r1, #1
 8005bc4:	9102      	str	r1, [sp, #8]
 8005bc6:	9201      	str	r2, [sp, #4]
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2203      	movs	r2, #3
 8005bce:	2103      	movs	r1, #3
 8005bd0:	2002      	movs	r0, #2
 8005bd2:	f000 fead 	bl	8006930 <matmul>
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_H_mult_P_priori, kf_state->H_T, kf_state->S, true);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f503 70e4 	add.w	r0, r3, #456	; 0x1c8
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	3384      	adds	r3, #132	; 0x84
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	f502 72ac 	add.w	r2, r2, #344	; 0x158
 8005be6:	2101      	movs	r1, #1
 8005be8:	9102      	str	r1, [sp, #8]
 8005bea:	9201      	str	r2, [sp, #4]
 8005bec:	9300      	str	r3, [sp, #0]
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2202      	movs	r2, #2
 8005bf2:	2103      	movs	r1, #3
 8005bf4:	2002      	movs	r0, #2
 8005bf6:	f000 fe9b 	bl	8006930 <matmul>
    matadd(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->S, kf_state->R, kf_state->S);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f503 72ac 	add.w	r2, r3, #344	; 0x158
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	460b      	mov	r3, r1
 8005c10:	2102      	movs	r1, #2
 8005c12:	2002      	movs	r0, #2
 8005c14:	f000 fda6 	bl	8006764 <matadd>

    /* Calculate Pseudoinverse of covariance innovation */
    memset(kf_state->S_inv, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->S_inv[0][0]));
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005c1e:	2210      	movs	r2, #16
 8005c20:	2100      	movs	r1, #0
 8005c22:	4618      	mov	r0, r3
 8005c24:	f00a fc93 	bl	801054e <memset>
        matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_S_inv_3, kf_state->Placeholder_H_T_mult_R_inv, kf_state->S_inv, true);
        matsub(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->R_inv, kf_state->S_inv, kf_state->S_inv);
    } else {
        /* we use the regular inverse when the state dimension is larger than the number of measurements */
        /* the cholvesky inverse has a big O complexity of n^3 */
        cholesky_inverse(NUMBER_MEASUREMENTS, kf_state->S, kf_state->S_inv, LAMBDA);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f503 71ac 	add.w	r1, r3, #344	; 0x158
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005c34:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8005d40 <kf_update+0x1d4>
 8005c38:	461a      	mov	r2, r3
 8005c3a:	2002      	movs	r0, #2
 8005c3c:	f001 f8de 	bl	8006dfc <cholesky_inverse>
    }

    /* K  = P_priori * H_T * S_inv */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->P_priori, kf_state->H_T, kf_state->Placeholder_P_priori_mult_H_T, true);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	3384      	adds	r3, #132	; 0x84
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	f502 72ec 	add.w	r2, r2, #472	; 0x1d8
 8005c50:	2101      	movs	r1, #1
 8005c52:	9102      	str	r1, [sp, #8]
 8005c54:	9201      	str	r2, [sp, #4]
 8005c56:	9300      	str	r3, [sp, #0]
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	2103      	movs	r1, #3
 8005c5e:	2003      	movs	r0, #3
 8005c60:	f000 fe66 	bl	8006930 <matmul>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->Placeholder_P_priori_mult_H_T, kf_state->S_inv, kf_state->K, true);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	f502 72bc 	add.w	r2, r2, #376	; 0x178
 8005c76:	2101      	movs	r1, #1
 8005c78:	9102      	str	r1, [sp, #8]
 8005c7a:	9201      	str	r2, [sp, #4]
 8005c7c:	9300      	str	r3, [sp, #0]
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2202      	movs	r2, #2
 8005c82:	2102      	movs	r1, #2
 8005c84:	2003      	movs	r0, #3
 8005c86:	f000 fe53 	bl	8006930 <matmul>

    /* x_est = x_priori + K*y */
    matvecprod(NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->K, kf_state->y, kf_state->x_est, true);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f503 71bc 	add.w	r1, r3, #376	; 0x178
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f503 70a8 	add.w	r0, r3, #336	; 0x150
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	33c4      	adds	r3, #196	; 0xc4
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	9201      	str	r2, [sp, #4]
 8005c9e:	9300      	str	r3, [sp, #0]
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	460a      	mov	r2, r1
 8005ca4:	2102      	movs	r1, #2
 8005ca6:	2003      	movs	r0, #3
 8005ca8:	f000 fedc 	bl	8006a64 <matvecprod>
    vecadd(NUMBER_STATES, kf_state->x_priori, kf_state->x_est, kf_state->x_est);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f103 01f4 	add.w	r1, r3, #244	; 0xf4
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	33c4      	adds	r3, #196	; 0xc4
 8005cbc:	2003      	movs	r0, #3
 8005cbe:	f000 fcfb 	bl	80066b8 <vecadd>


    /* P_est = (eye(NUMBER_STATES) - K*H)*P_priori */
    eye(NUMBER_STATES, kf_state->Placeholder_eye);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005cc8:	4619      	mov	r1, r3
 8005cca:	2003      	movs	r0, #3
 8005ccc:	f000 fc54 	bl	8006578 <eye>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->K, kf_state->H, kf_state->Placeholder_K_mult_H, true);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f503 70bc 	add.w	r0, r3, #376	; 0x178
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	336c      	adds	r3, #108	; 0x6c
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	f502 720e 	add.w	r2, r2, #568	; 0x238
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	9102      	str	r1, [sp, #8]
 8005ce4:	9201      	str	r2, [sp, #4]
 8005ce6:	9300      	str	r3, [sp, #0]
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2203      	movs	r2, #3
 8005cec:	2102      	movs	r1, #2
 8005cee:	2003      	movs	r0, #3
 8005cf0:	f000 fe1e 	bl	8006930 <matmul>
    matsub(NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_eye, kf_state->Placeholder_K_mult_H, kf_state->Placeholder_P_est);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f503 710e 	add.w	r1, r3, #568	; 0x238
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8005d06:	9300      	str	r3, [sp, #0]
 8005d08:	460b      	mov	r3, r1
 8005d0a:	2103      	movs	r1, #3
 8005d0c:	2003      	movs	r0, #3
 8005d0e:	f000 fd9c 	bl	800684a <matsub>
    matmul(NUMBER_STATES, NUMBER_STATES,  NUMBER_STATES, kf_state->Placeholder_P_est, kf_state->P_priori, kf_state->P_est, true);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f503 70f8 	add.w	r0, r3, #496	; 0x1f0
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	32d0      	adds	r2, #208	; 0xd0
 8005d22:	2101      	movs	r1, #1
 8005d24:	9102      	str	r1, [sp, #8]
 8005d26:	9201      	str	r2, [sp, #4]
 8005d28:	9300      	str	r3, [sp, #0]
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2203      	movs	r2, #3
 8005d2e:	2103      	movs	r1, #3
 8005d30:	2003      	movs	r0, #3
 8005d32:	f000 fdfd 	bl	8006930 <matmul>
 8005d36:	bf00      	nop
 8005d38:	3708      	adds	r7, #8
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	38d1b717 	.word	0x38d1b717

08005d44 <reset_state_est_state>:
#include "../../Inc/Sim_Con/state_est.h"

void reset_state_est_state(float p_g, float T_g, state_est_state_t *state_est_state) {
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b084      	sub	sp, #16
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	ed87 0a03 	vstr	s0, [r7, #12]
 8005d4e:	edc7 0a02 	vstr	s1, [r7, #8]
 8005d52:	6078      	str	r0, [r7, #4]
    reset_flight_phase_detection(&state_est_state->flight_phase_detection);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f7ff fdac 	bl	80058b8 <reset_flight_phase_detection>

    memset(&state_est_state->state_est_data, 0, sizeof(state_est_state->state_est_data));
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	223c      	movs	r2, #60	; 0x3c
 8005d64:	2100      	movs	r1, #0
 8005d66:	4618      	mov	r0, r3
 8005d68:	f00a fbf1 	bl	801054e <memset>
    memset(&state_est_state->state_est_meas, 0, sizeof(state_est_state->state_est_meas));
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	333c      	adds	r3, #60	; 0x3c
 8005d70:	2250      	movs	r2, #80	; 0x50
 8005d72:	2100      	movs	r1, #0
 8005d74:	4618      	mov	r0, r3
 8005d76:	f00a fbea 	bl	801054e <memset>
    memset(&state_est_state->state_est_meas_prior, 0, sizeof(state_est_state->state_est_meas_prior));
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	338c      	adds	r3, #140	; 0x8c
 8005d7e:	2250      	movs	r2, #80	; 0x50
 8005d80:	2100      	movs	r1, #0
 8005d82:	4618      	mov	r0, r3
 8005d84:	f00a fbe3 	bl	801054e <memset>

    init_env(&state_est_state->env);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7ff f9fa 	bl	8005188 <init_env>
    calibrate_env(&state_est_state->env, p_g, T_g);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005d9a:	edd7 0a02 	vldr	s1, [r7, #8]
 8005d9e:	ed97 0a03 	vldr	s0, [r7, #12]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7ff fa08 	bl	80051b8 <calibrate_env>
    update_env(&state_est_state->env, T_g);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005dae:	ed97 0a02 	vldr	s0, [r7, #8]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7ff fa24 	bl	8005200 <update_env>

	reset_kf_state(&state_est_state->kf_state);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	33dc      	adds	r3, #220	; 0xdc
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7ff fd93 	bl	80058e8 <reset_kf_state>
    update_state_est_data(&state_est_state->state_est_data, &state_est_state->kf_state);
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	33dc      	adds	r3, #220	; 0xdc
 8005dc8:	4619      	mov	r1, r3
 8005dca:	4610      	mov	r0, r2
 8005dcc:	f000 f886 	bl	8005edc <update_state_est_data>

    memset(&state_est_state->baro_roll_mem, 0, sizeof(state_est_state->baro_roll_mem));
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8005dd6:	22b0      	movs	r2, #176	; 0xb0
 8005dd8:	2100      	movs	r1, #0
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f00a fbb7 	bl	801054e <memset>

	select_noise_models(&state_est_state->kf_state, &state_est_state->flight_phase_detection, 
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f103 00dc 	add.w	r0, r3, #220	; 0xdc
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f503 7272 	add.w	r2, r3, #968	; 0x3c8
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8005df8:	f000 fa2a 	bl	8006250 <select_noise_models>
                        &state_est_state->env, &state_est_state->baro_roll_mem);
}
 8005dfc:	bf00      	nop
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}

08005e04 <state_est_step>:

void state_est_step(timestamp_t t, state_est_state_t *state_est_state, bool bool_detect_flight_phase) {
 8005e04:	b590      	push	{r4, r7, lr}
 8005e06:	b087      	sub	sp, #28
 8005e08:	af02      	add	r7, sp, #8
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	71fb      	strb	r3, [r7, #7]
    /* process measurements */
	process_measurements(t, &state_est_state->kf_state, &state_est_state->state_est_meas, &state_est_state->state_est_meas_prior, 
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	f103 01dc 	add.w	r1, r3, #220	; 0xdc
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	f103 048c 	add.w	r4, r3, #140	; 0x8c
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 8005e30:	9201      	str	r2, [sp, #4]
 8005e32:	9300      	str	r3, [sp, #0]
 8005e34:	4623      	mov	r3, r4
 8005e36:	4602      	mov	r2, r0
 8005e38:	68f8      	ldr	r0, [r7, #12]
 8005e3a:	f000 f89d 	bl	8005f78 <process_measurements>
                         &state_est_state->env, &state_est_state->baro_roll_mem);

	/* select noise models (dependent on detected flight phase and updated temperature in environment) */
	select_noise_models(&state_est_state->kf_state, &state_est_state->flight_phase_detection,
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	f103 00dc 	add.w	r0, r3, #220	; 0xdc
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	f503 7272 	add.w	r2, r3, #968	; 0x3c8
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8005e56:	f000 f9fb 	bl	8006250 <select_noise_models>
                        &state_est_state->env, &state_est_state->baro_roll_mem);
	
	kf_prediction(&state_est_state->kf_state);
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	33dc      	adds	r3, #220	; 0xdc
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7ff fdd6 	bl	8005a10 <kf_prediction>

	if (state_est_state->kf_state.num_z_active > 0) {
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	dd0a      	ble.n	8005e84 <state_est_step+0x80>
		select_kf_observation_matrices(&state_est_state->kf_state);
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	33dc      	adds	r3, #220	; 0xdc
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7ff fe3a 	bl	8005aec <select_kf_observation_matrices>
		kf_update(&state_est_state->kf_state);
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	33dc      	adds	r3, #220	; 0xdc
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7ff fe75 	bl	8005b6c <kf_update>
 8005e82:	e009      	b.n	8005e98 <state_est_step+0x94>
	} else {
		memcpy(&state_est_state->kf_state.x_est, &state_est_state->kf_state.x_priori, sizeof(state_est_state->kf_state.x_priori));
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 8005e90:	220c      	movs	r2, #12
 8005e92:	4619      	mov	r1, r3
 8005e94:	f00a fb50 	bl	8010538 <memcpy>
	}

	update_state_est_data(&state_est_state->state_est_data, &state_est_state->kf_state);
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	33dc      	adds	r3, #220	; 0xdc
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	4610      	mov	r0, r2
 8005ea2:	f000 f81b 	bl	8005edc <update_state_est_data>

    if (bool_detect_flight_phase){
 8005ea6:	79fb      	ldrb	r3, [r7, #7]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d009      	beq.n	8005ec0 <state_est_step+0xbc>
        detect_flight_phase(&state_est_state->flight_phase_detection, &state_est_state->state_est_data, &state_est_state->env);
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	f503 7076 	add.w	r0, r3, #984	; 0x3d8
 8005eb2:	68b9      	ldr	r1, [r7, #8]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8005eba:	461a      	mov	r2, r3
 8005ebc:	f7ff fb20 	bl	8005500 <detect_flight_phase>
    }

	/* set measurement prior to measurements from completed state estimation step */
	memcpy(&state_est_state->state_est_meas_prior, &state_est_state->state_est_meas, sizeof(state_est_state->state_est_meas));
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	333c      	adds	r3, #60	; 0x3c
 8005eca:	2250      	movs	r2, #80	; 0x50
 8005ecc:	4619      	mov	r1, r3
 8005ece:	f00a fb33 	bl	8010538 <memcpy>
}
 8005ed2:	bf00      	nop
 8005ed4:	3714      	adds	r7, #20
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd90      	pop	{r4, r7, pc}
	...

08005edc <update_state_est_data>:

void update_state_est_data(state_est_data_t *state_est_data, kf_state_t *kf_state) {
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
    state_est_data->position_world[2] = (int32_t)(kf_state->x_est[0] * 1000);
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8005eec:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8005f74 <update_state_est_data+0x98>
 8005ef0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005ef4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ef8:	ee17 2a90 	vmov	r2, s15
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	609a      	str	r2, [r3, #8]
    state_est_data->velocity_rocket[0] = (int32_t)(kf_state->x_est[1] * 1000);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8005f06:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8005f74 <update_state_est_data+0x98>
 8005f0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f12:	ee17 2a90 	vmov	r2, s15
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	60da      	str	r2, [r3, #12]
    state_est_data->velocity_world[2] = (int32_t)(kf_state->x_est[1] * 1000);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8005f20:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005f74 <update_state_est_data+0x98>
 8005f24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f2c:	ee17 2a90 	vmov	r2, s15
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	62da      	str	r2, [r3, #44]	; 0x2c
    state_est_data->acceleration_rocket[0] = (int32_t)(kf_state->u[0] * 1000);
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 8005f3a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8005f74 <update_state_est_data+0x98>
 8005f3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f46:	ee17 2a90 	vmov	r2, s15
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	619a      	str	r2, [r3, #24]
    state_est_data->acceleration_world[2] = (int32_t)(kf_state->u[0] * 1000);
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 8005f54:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8005f74 <update_state_est_data+0x98>
 8005f58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005f5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f60:	ee17 2a90 	vmov	r2, s15
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	639a      	str	r2, [r3, #56]	; 0x38
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	447a0000 	.word	0x447a0000

08005f78 <process_measurements>:

void process_measurements(timestamp_t t, kf_state_t *kf_state, state_est_meas_t *state_est_meas, state_est_meas_t *state_est_meas_prior,
                          env_t *env, extrapolation_rolling_memory_t *baro_roll_mem) {
 8005f78:	b590      	push	{r4, r7, lr}
 8005f7a:	b093      	sub	sp, #76	; 0x4c
 8005f7c:	af02      	add	r7, sp, #8
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
 8005f84:	603b      	str	r3, [r7, #0]
    float temp_meas[NUM_SENSORBOARDS];
    bool temp_meas_active[NUM_SENSORBOARDS];
    float acc_x_meas[NUM_SENSORBOARDS];
    bool acc_x_meas_active[NUM_SENSORBOARDS];

    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 8005f86:	2300      	movs	r3, #0
 8005f88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f8a:	e09a      	b.n	80060c2 <process_measurements+0x14a>
        /* barometer */
        if (state_est_meas->baro_data[i].ts > state_est_meas_prior->baro_data[i].ts) {
 8005f8c:	6879      	ldr	r1, [r7, #4]
 8005f8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f90:	4613      	mov	r3, r2
 8005f92:	005b      	lsls	r3, r3, #1
 8005f94:	4413      	add	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	440b      	add	r3, r1
 8005f9a:	3308      	adds	r3, #8
 8005f9c:	6819      	ldr	r1, [r3, #0]
 8005f9e:	6838      	ldr	r0, [r7, #0]
 8005fa0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	005b      	lsls	r3, r3, #1
 8005fa6:	4413      	add	r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	4403      	add	r3, r0
 8005fac:	3308      	adds	r3, #8
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4299      	cmp	r1, r3
 8005fb2:	d92b      	bls.n	800600c <process_measurements+0x94>
            kf_state->z[i] = state_est_meas->baro_data[i].pressure;
 8005fb4:	6879      	ldr	r1, [r7, #4]
 8005fb6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fb8:	4613      	mov	r3, r2
 8005fba:	005b      	lsls	r3, r3, #1
 8005fbc:	4413      	add	r3, r2
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	440b      	add	r3, r1
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	68b9      	ldr	r1, [r7, #8]
 8005fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fc8:	3352      	adds	r3, #82	; 0x52
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	440b      	add	r3, r1
 8005fce:	601a      	str	r2, [r3, #0]
            kf_state->z_active[i] = true;
 8005fd0:	68ba      	ldr	r2, [r7, #8]
 8005fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8005fda:	2201      	movs	r2, #1
 8005fdc:	701a      	strb	r2, [r3, #0]

            temp_meas[i] = state_est_meas->baro_data[i].temperature;
 8005fde:	6879      	ldr	r1, [r7, #4]
 8005fe0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	005b      	lsls	r3, r3, #1
 8005fe6:	4413      	add	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	440b      	add	r3, r1
 8005fec:	3304      	adds	r3, #4
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8005ff8:	440b      	add	r3, r1
 8005ffa:	3b20      	subs	r3, #32
 8005ffc:	601a      	str	r2, [r3, #0]
            temp_meas_active[i] = true;
 8005ffe:	f107 021c 	add.w	r2, r7, #28
 8006002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006004:	4413      	add	r3, r2
 8006006:	2201      	movs	r2, #1
 8006008:	701a      	strb	r2, [r3, #0]
 800600a:	e01d      	b.n	8006048 <process_measurements+0xd0>
        } else {
            kf_state->z[i] = 0;
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006010:	3352      	adds	r3, #82	; 0x52
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4413      	add	r3, r2
 8006016:	f04f 0200 	mov.w	r2, #0
 800601a:	601a      	str	r2, [r3, #0]
            kf_state->z_active[i] = false;
 800601c:	68ba      	ldr	r2, [r7, #8]
 800601e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006020:	4413      	add	r3, r2
 8006022:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8006026:	2200      	movs	r2, #0
 8006028:	701a      	strb	r2, [r3, #0]

            temp_meas[i] = 0;
 800602a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006032:	4413      	add	r3, r2
 8006034:	3b20      	subs	r3, #32
 8006036:	f04f 0200 	mov.w	r2, #0
 800603a:	601a      	str	r2, [r3, #0]
            temp_meas_active[i] = false;
 800603c:	f107 021c 	add.w	r2, r7, #28
 8006040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006042:	4413      	add	r3, r2
 8006044:	2200      	movs	r2, #0
 8006046:	701a      	strb	r2, [r3, #0]
        }

        /* imu */
        if (state_est_meas->imu_data[i].ts > state_est_meas_prior->imu_data[i].ts) {
 8006048:	6879      	ldr	r1, [r7, #4]
 800604a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800604c:	4613      	mov	r3, r2
 800604e:	00db      	lsls	r3, r3, #3
 8006050:	1a9b      	subs	r3, r3, r2
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	440b      	add	r3, r1
 8006056:	3330      	adds	r3, #48	; 0x30
 8006058:	6819      	ldr	r1, [r3, #0]
 800605a:	6838      	ldr	r0, [r7, #0]
 800605c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800605e:	4613      	mov	r3, r2
 8006060:	00db      	lsls	r3, r3, #3
 8006062:	1a9b      	subs	r3, r3, r2
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	4403      	add	r3, r0
 8006068:	3330      	adds	r3, #48	; 0x30
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4299      	cmp	r1, r3
 800606e:	d916      	bls.n	800609e <process_measurements+0x126>
            acc_x_meas[i] = state_est_meas->imu_data[i].acc_x;
 8006070:	6879      	ldr	r1, [r7, #4]
 8006072:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006074:	4613      	mov	r3, r2
 8006076:	00db      	lsls	r3, r3, #3
 8006078:	1a9b      	subs	r3, r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	440b      	add	r3, r1
 800607e:	3324      	adds	r3, #36	; 0x24
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800608a:	440b      	add	r3, r1
 800608c:	3b2c      	subs	r3, #44	; 0x2c
 800608e:	601a      	str	r2, [r3, #0]
            acc_x_meas_active[i] = true;
 8006090:	f107 0210 	add.w	r2, r7, #16
 8006094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006096:	4413      	add	r3, r2
 8006098:	2201      	movs	r2, #1
 800609a:	701a      	strb	r2, [r3, #0]
 800609c:	e00e      	b.n	80060bc <process_measurements+0x144>
        } else {
            acc_x_meas[i] = 0;
 800609e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80060a6:	4413      	add	r3, r2
 80060a8:	3b2c      	subs	r3, #44	; 0x2c
 80060aa:	f04f 0200 	mov.w	r2, #0
 80060ae:	601a      	str	r2, [r3, #0]
            acc_x_meas_active[i] = false;
 80060b0:	f107 0210 	add.w	r2, r7, #16
 80060b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060b6:	4413      	add	r3, r2
 80060b8:	2200      	movs	r2, #0
 80060ba:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 80060bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060be:	3301      	adds	r3, #1
 80060c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	f77f af61 	ble.w	8005f8c <process_measurements+0x14>
        if (baro_roll_mem->memory_length < MAX_LENGTH_ROLLING_MEMORY) {
            sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active);
        }
        sensor_elimination_by_extrapolation(t, NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active, baro_roll_mem);
    } else {
        sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active);
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	f503 71a4 	add.w	r1, r3, #328	; 0x148
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80060d6:	461a      	mov	r2, r3
 80060d8:	2002      	movs	r0, #2
 80060da:	f000 f979 	bl	80063d0 <sensor_elimination_by_stdev>
    }

    /* eliminate temperature measurements */
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, temp_meas, temp_meas_active);
 80060de:	f107 021c 	add.w	r2, r7, #28
 80060e2:	f107 0320 	add.w	r3, r7, #32
 80060e6:	4619      	mov	r1, r3
 80060e8:	2002      	movs	r0, #2
 80060ea:	f000 f971 	bl	80063d0 <sensor_elimination_by_stdev>

    /* eliminate accelerometer in rocket x-dir measurements */
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, acc_x_meas, acc_x_meas_active);
 80060ee:	f107 0210 	add.w	r2, r7, #16
 80060f2:	f107 0314 	add.w	r3, r7, #20
 80060f6:	4619      	mov	r1, r3
 80060f8:	2002      	movs	r0, #2
 80060fa:	f000 f969 	bl	80063d0 <sensor_elimination_by_stdev>

    /* update num_z_active */
    kf_state->num_z_active = 0;
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	2200      	movs	r2, #0
 8006102:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    /* take the average of the active accelerometers in rocket-x dir as the state estimation input */
    float u = 0;
 8006106:	f04f 0300 	mov.w	r3, #0
 800610a:	637b      	str	r3, [r7, #52]	; 0x34
    int num_acc_x_meas_active = 0;
 800610c:	2300      	movs	r3, #0
 800610e:	63bb      	str	r3, [r7, #56]	; 0x38

    /* take the average of the temperature measurement  */
    float temp_meas_mean = 0;
 8006110:	f04f 0300 	mov.w	r3, #0
 8006114:	633b      	str	r3, [r7, #48]	; 0x30
    int num_temp_meas_active = 0;
 8006116:	2300      	movs	r3, #0
 8006118:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 800611a:	2300      	movs	r3, #0
 800611c:	62bb      	str	r3, [r7, #40]	; 0x28
 800611e:	e047      	b.n	80061b0 <process_measurements+0x238>
        if (kf_state->z_active[i]){
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006124:	4413      	add	r3, r2
 8006126:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d006      	beq.n	800613e <process_measurements+0x1c6>
            kf_state->num_z_active += 1;
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8006136:	1c5a      	adds	r2, r3, #1
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
        }
        if (acc_x_meas_active[i]) {
 800613e:	f107 0210 	add.w	r2, r7, #16
 8006142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006144:	4413      	add	r3, r2
 8006146:	781b      	ldrb	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d010      	beq.n	800616e <process_measurements+0x1f6>
            u += acc_x_meas[i];
 800614c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006154:	4413      	add	r3, r2
 8006156:	3b2c      	subs	r3, #44	; 0x2c
 8006158:	edd3 7a00 	vldr	s15, [r3]
 800615c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8006160:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006164:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            num_acc_x_meas_active += 1;
 8006168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800616a:	3301      	adds	r3, #1
 800616c:	63bb      	str	r3, [r7, #56]	; 0x38
        }
        if (temp_meas[i]) {
 800616e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006176:	4413      	add	r3, r2
 8006178:	3b20      	subs	r3, #32
 800617a:	edd3 7a00 	vldr	s15, [r3]
 800617e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006186:	d010      	beq.n	80061aa <process_measurements+0x232>
            temp_meas_mean += temp_meas[i];
 8006188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006190:	4413      	add	r3, r2
 8006192:	3b20      	subs	r3, #32
 8006194:	edd3 7a00 	vldr	s15, [r3]
 8006198:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800619c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061a0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            num_temp_meas_active += 1;
 80061a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a6:	3301      	adds	r3, #1
 80061a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 80061aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ac:	3301      	adds	r3, #1
 80061ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80061b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	ddb4      	ble.n	8006120 <process_measurements+0x1a8>
        }
    }

    pressure2altitudeAGL(env, NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active, kf_state->z);
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	f503 72a4 	add.w	r2, r3, #328	; 0x148
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	f503 71c8 	add.w	r1, r3, #400	; 0x190
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80061c8:	9300      	str	r3, [sp, #0]
 80061ca:	460b      	mov	r3, r1
 80061cc:	2102      	movs	r1, #2
 80061ce:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80061d0:	f7ff f872 	bl	80052b8 <pressure2altitudeAGL>

    /* we take the old acceleration from the previous timestep, if no acceleration measurements are active */
    if (num_acc_x_meas_active > 0){
 80061d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	dd1c      	ble.n	8006214 <process_measurements+0x29c>
        u /= num_acc_x_meas_active;
 80061da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061dc:	ee07 3a90 	vmov	s15, r3
 80061e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061e4:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80061e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061ec:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        /* gravity compensation for accelerometer */
        kf_state->u[0] = u - GRAVITATION;
 80061f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80061f2:	f7fa f9a9 	bl	8000548 <__aeabi_f2d>
 80061f6:	a314      	add	r3, pc, #80	; (adr r3, 8006248 <process_measurements+0x2d0>)
 80061f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fc:	f7fa f844 	bl	8000288 <__aeabi_dsub>
 8006200:	4603      	mov	r3, r0
 8006202:	460c      	mov	r4, r1
 8006204:	4618      	mov	r0, r3
 8006206:	4621      	mov	r1, r4
 8006208:	f7fa fcee 	bl	8000be8 <__aeabi_d2f>
 800620c:	4602      	mov	r2, r0
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    }
    
    if (num_temp_meas_active > 0){
 8006214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006216:	2b00      	cmp	r3, #0
 8006218:	dd0f      	ble.n	800623a <process_measurements+0x2c2>
        temp_meas_mean /= num_temp_meas_active;
 800621a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621c:	ee07 3a90 	vmov	s15, r3
 8006220:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006224:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8006228:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800622c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        update_env(env, temp_meas_mean);
 8006230:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 8006234:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006236:	f7fe ffe3 	bl	8005200 <update_env>
    }
} 
 800623a:	bf00      	nop
 800623c:	3744      	adds	r7, #68	; 0x44
 800623e:	46bd      	mov	sp, r7
 8006240:	bd90      	pop	{r4, r7, pc}
 8006242:	bf00      	nop
 8006244:	f3af 8000 	nop.w
 8006248:	51eb851f 	.word	0x51eb851f
 800624c:	40239eb8 	.word	0x40239eb8

08006250 <select_noise_models>:

void select_noise_models(kf_state_t *kf_state, flight_phase_detection_t *flight_phase_detection, env_t *env,
                        extrapolation_rolling_memory_t *baro_roll_mem){
 8006250:	b590      	push	{r4, r7, lr}
 8006252:	b091      	sub	sp, #68	; 0x44
 8006254:	af02      	add	r7, sp, #8
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
 800625c:	603b      	str	r3, [r7, #0]
    float accelerometer_x_stdev;
    float barometer_stdev;

    // TODO @maxi: add different noise models for each mach regime
    switch (flight_phase_detection->flight_phase) {
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	3b01      	subs	r3, #1
 8006264:	2b06      	cmp	r3, #6
 8006266:	d82a      	bhi.n	80062be <select_noise_models+0x6e>
 8006268:	a201      	add	r2, pc, #4	; (adr r2, 8006270 <select_noise_models+0x20>)
 800626a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626e:	bf00      	nop
 8006270:	0800628d 	.word	0x0800628d
 8006274:	0800628d 	.word	0x0800628d
 8006278:	08006297 	.word	0x08006297
 800627c:	080062a1 	.word	0x080062a1
 8006280:	080062ab 	.word	0x080062ab
 8006284:	080062b5 	.word	0x080062b5
 8006288:	0800628d 	.word	0x0800628d
        case AIRBRAKE_TEST:
        case RECOVERY:
        case IDLE:
            accelerometer_x_stdev = 0.0185409;
 800628c:	4b48      	ldr	r3, [pc, #288]	; (80063b0 <select_noise_models+0x160>)
 800628e:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 1.869;
 8006290:	4b48      	ldr	r3, [pc, #288]	; (80063b4 <select_noise_models+0x164>)
 8006292:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8006294:	e013      	b.n	80062be <select_noise_models+0x6e>
        case THRUSTING:
            accelerometer_x_stdev = 1.250775;
 8006296:	4b48      	ldr	r3, [pc, #288]	; (80063b8 <select_noise_models+0x168>)
 8006298:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 13.000;
 800629a:	4b48      	ldr	r3, [pc, #288]	; (80063bc <select_noise_models+0x16c>)
 800629c:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 800629e:	e00e      	b.n	80062be <select_noise_models+0x6e>
        case COASTING:
            accelerometer_x_stdev = 0.61803;
 80062a0:	4b47      	ldr	r3, [pc, #284]	; (80063c0 <select_noise_models+0x170>)
 80062a2:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 7.380;
 80062a4:	4b47      	ldr	r3, [pc, #284]	; (80063c4 <select_noise_models+0x174>)
 80062a6:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 80062a8:	e009      	b.n	80062be <select_noise_models+0x6e>
        case DESCENT:
            accelerometer_x_stdev = 1.955133;
 80062aa:	4b47      	ldr	r3, [pc, #284]	; (80063c8 <select_noise_models+0x178>)
 80062ac:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 3.896;
 80062ae:	4b47      	ldr	r3, [pc, #284]	; (80063cc <select_noise_models+0x17c>)
 80062b0:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 80062b2:	e004      	b.n	80062be <select_noise_models+0x6e>
        case BALLISTIC_DESCENT:
            accelerometer_x_stdev = 0.61803;
 80062b4:	4b42      	ldr	r3, [pc, #264]	; (80063c0 <select_noise_models+0x170>)
 80062b6:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 7.380;
 80062b8:	4b42      	ldr	r3, [pc, #264]	; (80063c4 <select_noise_models+0x174>)
 80062ba:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 80062bc:	bf00      	nop
    }

    for(int i = 0; i < NUMBER_PROCESS_NOISE; i++){
 80062be:	2300      	movs	r3, #0
 80062c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062c2:	e01b      	b.n	80062fc <select_noise_models+0xac>
        kf_state->Q[i][i] = pow(accelerometer_x_stdev, 2);
 80062c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80062c6:	f7fa f93f 	bl	8000548 <__aeabi_f2d>
 80062ca:	4603      	mov	r3, r0
 80062cc:	460c      	mov	r4, r1
 80062ce:	ed9f 1b36 	vldr	d1, [pc, #216]	; 80063a8 <select_noise_models+0x158>
 80062d2:	ec44 3b10 	vmov	d0, r3, r4
 80062d6:	f00e f95b 	bl	8014590 <pow>
 80062da:	ec54 3b10 	vmov	r3, r4, d0
 80062de:	4618      	mov	r0, r3
 80062e0:	4621      	mov	r1, r4
 80062e2:	f7fa fc81 	bl	8000be8 <__aeabi_d2f>
 80062e6:	4601      	mov	r1, r0
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ec:	3313      	adds	r3, #19
 80062ee:	00db      	lsls	r3, r3, #3
 80062f0:	4413      	add	r3, r2
 80062f2:	3304      	adds	r3, #4
 80062f4:	6019      	str	r1, [r3, #0]
    for(int i = 0; i < NUMBER_PROCESS_NOISE; i++){
 80062f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f8:	3301      	adds	r3, #1
 80062fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062fe:	2b00      	cmp	r3, #0
 8006300:	dde0      	ble.n	80062c4 <select_noise_models+0x74>
    }

    float p[1];
    float h[1] = {kf_state->x_est[0]};
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006308:	61bb      	str	r3, [r7, #24]
    bool h_active[1] = {true};
 800630a:	2301      	movs	r3, #1
 800630c:	753b      	strb	r3, [r7, #20]
    altitudeAGL2pressure(env, 1, h, h_active, p);
 800630e:	f107 0114 	add.w	r1, r7, #20
 8006312:	f107 0218 	add.w	r2, r7, #24
 8006316:	f107 031c 	add.w	r3, r7, #28
 800631a:	9300      	str	r3, [sp, #0]
 800631c:	460b      	mov	r3, r1
 800631e:	2101      	movs	r1, #1
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f7ff f829 	bl	8005378 <altitudeAGL2pressure>
    float h_grad = altitude_gradient(env, p[0]);
 8006326:	edd7 7a07 	vldr	s15, [r7, #28]
 800632a:	eeb0 0a67 	vmov.f32	s0, s15
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f7ff f88a 	bl	8005448 <altitude_gradient>
 8006334:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    float altitude_stdev = fabsf(barometer_stdev * h_grad);
 8006338:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800633c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8006340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006344:	eef0 7ae7 	vabs.f32	s15, s15
 8006348:	edc7 7a08 	vstr	s15, [r7, #32]

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 800634c:	2300      	movs	r3, #0
 800634e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006350:	e01c      	b.n	800638c <select_noise_models+0x13c>
        kf_state->R[i][i] = pow(altitude_stdev, 2);
 8006352:	6a38      	ldr	r0, [r7, #32]
 8006354:	f7fa f8f8 	bl	8000548 <__aeabi_f2d>
 8006358:	4603      	mov	r3, r0
 800635a:	460c      	mov	r4, r1
 800635c:	ed9f 1b12 	vldr	d1, [pc, #72]	; 80063a8 <select_noise_models+0x158>
 8006360:	ec44 3b10 	vmov	d0, r3, r4
 8006364:	f00e f914 	bl	8014590 <pow>
 8006368:	ec54 3b10 	vmov	r3, r4, d0
 800636c:	4618      	mov	r0, r3
 800636e:	4621      	mov	r1, r4
 8006370:	f7fa fc3a 	bl	8000be8 <__aeabi_d2f>
 8006374:	68f9      	ldr	r1, [r7, #12]
 8006376:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006378:	4613      	mov	r3, r2
 800637a:	005b      	lsls	r3, r3, #1
 800637c:	4413      	add	r3, r2
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	440b      	add	r3, r1
 8006382:	33a0      	adds	r3, #160	; 0xa0
 8006384:	6018      	str	r0, [r3, #0]
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8006386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006388:	3301      	adds	r3, #1
 800638a:	62bb      	str	r3, [r7, #40]	; 0x28
 800638c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638e:	2b01      	cmp	r3, #1
 8006390:	dddf      	ble.n	8006352 <select_noise_models+0x102>
    }

    baro_roll_mem->noise_stdev = barometer_stdev;
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006396:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 800639a:	bf00      	nop
 800639c:	373c      	adds	r7, #60	; 0x3c
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd90      	pop	{r4, r7, pc}
 80063a2:	bf00      	nop
 80063a4:	f3af 8000 	nop.w
 80063a8:	00000000 	.word	0x00000000
 80063ac:	40000000 	.word	0x40000000
 80063b0:	3c97e316 	.word	0x3c97e316
 80063b4:	3fef3b64 	.word	0x3fef3b64
 80063b8:	3fa01965 	.word	0x3fa01965
 80063bc:	41500000 	.word	0x41500000
 80063c0:	3f1e3737 	.word	0x3f1e3737
 80063c4:	40ec28f6 	.word	0x40ec28f6
 80063c8:	3ffa41cc 	.word	0x3ffa41cc
 80063cc:	40795810 	.word	0x40795810

080063d0 <sensor_elimination_by_stdev>:

void sensor_elimination_by_stdev(int n, float measurements[n], bool measurement_active[n]) {
 80063d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063d2:	b08b      	sub	sp, #44	; 0x2c
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
    /* calculate mean of the sample */
    int num_active = 0;
 80063dc:	2300      	movs	r3, #0
 80063de:	627b      	str	r3, [r7, #36]	; 0x24
    float mean = 0;
 80063e0:	f04f 0300 	mov.w	r3, #0
 80063e4:	623b      	str	r3, [r7, #32]
    for (int i = 0; i < n; i++){
 80063e6:	2300      	movs	r3, #0
 80063e8:	61fb      	str	r3, [r7, #28]
 80063ea:	e017      	b.n	800641c <sensor_elimination_by_stdev+0x4c>
        if (measurement_active[i]) {
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	4413      	add	r3, r2
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00e      	beq.n	8006416 <sensor_elimination_by_stdev+0x46>
            num_active += 1;
 80063f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fa:	3301      	adds	r3, #1
 80063fc:	627b      	str	r3, [r7, #36]	; 0x24
            mean += measurements[i];
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	4413      	add	r3, r2
 8006406:	edd3 7a00 	vldr	s15, [r3]
 800640a:	ed97 7a08 	vldr	s14, [r7, #32]
 800640e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006412:	edc7 7a08 	vstr	s15, [r7, #32]
    for (int i = 0; i < n; i++){
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	3301      	adds	r3, #1
 800641a:	61fb      	str	r3, [r7, #28]
 800641c:	69fa      	ldr	r2, [r7, #28]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	429a      	cmp	r2, r3
 8006422:	dbe3      	blt.n	80063ec <sensor_elimination_by_stdev+0x1c>
        }
    }
    if (num_active > 0){
 8006424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006426:	2b00      	cmp	r3, #0
 8006428:	dd0a      	ble.n	8006440 <sensor_elimination_by_stdev+0x70>
        mean /= num_active;
 800642a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642c:	ee07 3a90 	vmov	s15, r3
 8006430:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006434:	edd7 6a08 	vldr	s13, [r7, #32]
 8006438:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800643c:	edc7 7a08 	vstr	s15, [r7, #32]
    }

    /* calculate the standard deviation of the sample */
    float stdev = 0;
 8006440:	f04f 0300 	mov.w	r3, #0
 8006444:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; ++i) {
 8006446:	2300      	movs	r3, #0
 8006448:	617b      	str	r3, [r7, #20]
 800644a:	e033      	b.n	80064b4 <sensor_elimination_by_stdev+0xe4>
        if (measurement_active[i]) {
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	4413      	add	r3, r2
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d02a      	beq.n	80064ae <sensor_elimination_by_stdev+0xde>
            stdev += pow(measurements[i] - mean, 2);
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	009b      	lsls	r3, r3, #2
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	4413      	add	r3, r2
 8006460:	ed93 7a00 	vldr	s14, [r3]
 8006464:	edd7 7a08 	vldr	s15, [r7, #32]
 8006468:	ee77 7a67 	vsub.f32	s15, s14, s15
 800646c:	ee17 0a90 	vmov	r0, s15
 8006470:	f7fa f86a 	bl	8000548 <__aeabi_f2d>
 8006474:	4603      	mov	r3, r0
 8006476:	460c      	mov	r4, r1
 8006478:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 8006570 <sensor_elimination_by_stdev+0x1a0>
 800647c:	ec44 3b10 	vmov	d0, r3, r4
 8006480:	f00e f886 	bl	8014590 <pow>
 8006484:	ec56 5b10 	vmov	r5, r6, d0
 8006488:	69b8      	ldr	r0, [r7, #24]
 800648a:	f7fa f85d 	bl	8000548 <__aeabi_f2d>
 800648e:	4603      	mov	r3, r0
 8006490:	460c      	mov	r4, r1
 8006492:	461a      	mov	r2, r3
 8006494:	4623      	mov	r3, r4
 8006496:	4628      	mov	r0, r5
 8006498:	4631      	mov	r1, r6
 800649a:	f7f9 fef7 	bl	800028c <__adddf3>
 800649e:	4603      	mov	r3, r0
 80064a0:	460c      	mov	r4, r1
 80064a2:	4618      	mov	r0, r3
 80064a4:	4621      	mov	r1, r4
 80064a6:	f7fa fb9f 	bl	8000be8 <__aeabi_d2f>
 80064aa:	4603      	mov	r3, r0
 80064ac:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; ++i) {
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	3301      	adds	r3, #1
 80064b2:	617b      	str	r3, [r7, #20]
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	dbc7      	blt.n	800644c <sensor_elimination_by_stdev+0x7c>
        }
    }
    if (num_active > 0){
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064be:	2b00      	cmp	r3, #0
 80064c0:	dd1a      	ble.n	80064f8 <sensor_elimination_by_stdev+0x128>
        stdev = sqrt(stdev / num_active);
 80064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c4:	ee07 3a90 	vmov	s15, r3
 80064c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064cc:	ed97 7a06 	vldr	s14, [r7, #24]
 80064d0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80064d4:	ee16 0a90 	vmov	r0, s13
 80064d8:	f7fa f836 	bl	8000548 <__aeabi_f2d>
 80064dc:	4603      	mov	r3, r0
 80064de:	460c      	mov	r4, r1
 80064e0:	ec44 3b10 	vmov	d0, r3, r4
 80064e4:	f00e f9c4 	bl	8014870 <sqrt>
 80064e8:	ec54 3b10 	vmov	r3, r4, d0
 80064ec:	4618      	mov	r0, r3
 80064ee:	4621      	mov	r1, r4
 80064f0:	f7fa fb7a 	bl	8000be8 <__aeabi_d2f>
 80064f4:	4603      	mov	r3, r0
 80064f6:	61bb      	str	r3, [r7, #24]
    }

    /* deactivate measurements if they are too far off the mean */
    for (int i = 0; i < n; ++i) {
 80064f8:	2300      	movs	r3, #0
 80064fa:	613b      	str	r3, [r7, #16]
 80064fc:	e02f      	b.n	800655e <sensor_elimination_by_stdev+0x18e>
        if (measurement_active[i]) {
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	4413      	add	r3, r2
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d026      	beq.n	8006558 <sensor_elimination_by_stdev+0x188>
            if (fabsf(measurements[i] - mean) > 2.0 * stdev) {
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	68ba      	ldr	r2, [r7, #8]
 8006510:	4413      	add	r3, r2
 8006512:	ed93 7a00 	vldr	s14, [r3]
 8006516:	edd7 7a08 	vldr	s15, [r7, #32]
 800651a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800651e:	eef0 7ae7 	vabs.f32	s15, s15
 8006522:	ee17 0a90 	vmov	r0, s15
 8006526:	f7fa f80f 	bl	8000548 <__aeabi_f2d>
 800652a:	4604      	mov	r4, r0
 800652c:	460d      	mov	r5, r1
 800652e:	69b8      	ldr	r0, [r7, #24]
 8006530:	f7fa f80a 	bl	8000548 <__aeabi_f2d>
 8006534:	4602      	mov	r2, r0
 8006536:	460b      	mov	r3, r1
 8006538:	f7f9 fea8 	bl	800028c <__adddf3>
 800653c:	4602      	mov	r2, r0
 800653e:	460b      	mov	r3, r1
 8006540:	4620      	mov	r0, r4
 8006542:	4629      	mov	r1, r5
 8006544:	f7fa fae8 	bl	8000b18 <__aeabi_dcmpgt>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d004      	beq.n	8006558 <sensor_elimination_by_stdev+0x188>
                measurement_active[i] = false;
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	4413      	add	r3, r2
 8006554:	2200      	movs	r2, #0
 8006556:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < n; ++i) {
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	3301      	adds	r3, #1
 800655c:	613b      	str	r3, [r7, #16]
 800655e:	693a      	ldr	r2, [r7, #16]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	429a      	cmp	r2, r3
 8006564:	dbcb      	blt.n	80064fe <sensor_elimination_by_stdev+0x12e>
            }
        }
    }
}
 8006566:	bf00      	nop
 8006568:	372c      	adds	r7, #44	; 0x2c
 800656a:	46bd      	mov	sp, r7
 800656c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800656e:	bf00      	nop
 8006570:	00000000 	.word	0x00000000
 8006574:	40000000 	.word	0x40000000

08006578 <eye>:
#include "../../Inc/Util/math_utils.h"


void eye(int dim, float A[dim][dim]) {
 8006578:	b490      	push	{r4, r7}
 800657a:	b086      	sub	sp, #24
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	1e43      	subs	r3, r0, #1
 8006586:	60fb      	str	r3, [r7, #12]
 8006588:	4603      	mov	r3, r0
 800658a:	4619      	mov	r1, r3
 800658c:	f04f 0200 	mov.w	r2, #0
 8006590:	f04f 0300 	mov.w	r3, #0
 8006594:	f04f 0400 	mov.w	r4, #0
 8006598:	0154      	lsls	r4, r2, #5
 800659a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800659e:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < dim; i++){
 80065a0:	2300      	movs	r3, #0
 80065a2:	613b      	str	r3, [r7, #16]
 80065a4:	e02b      	b.n	80065fe <eye+0x86>
        for(int j = 0; j < dim; j++){
 80065a6:	2300      	movs	r3, #0
 80065a8:	617b      	str	r3, [r7, #20]
 80065aa:	e021      	b.n	80065f0 <eye+0x78>
            if (i == j){
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d10d      	bne.n	80065d0 <eye+0x58>
				A[i][j] = 1;
 80065b4:	4602      	mov	r2, r0
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	fb03 f302 	mul.w	r3, r3, r2
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	441a      	add	r2, r3
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	4413      	add	r3, r2
 80065c8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80065cc:	601a      	str	r2, [r3, #0]
 80065ce:	e00c      	b.n	80065ea <eye+0x72>
			} else {
				A[i][j] = 0;
 80065d0:	4602      	mov	r2, r0
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	fb03 f302 	mul.w	r3, r3, r2
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	683a      	ldr	r2, [r7, #0]
 80065dc:	441a      	add	r2, r3
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	4413      	add	r3, r2
 80065e4:	f04f 0200 	mov.w	r2, #0
 80065e8:	601a      	str	r2, [r3, #0]
        for(int j = 0; j < dim; j++){
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	3301      	adds	r3, #1
 80065ee:	617b      	str	r3, [r7, #20]
 80065f0:	697a      	ldr	r2, [r7, #20]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	dbd9      	blt.n	80065ac <eye+0x34>
	for(int i = 0; i < dim; i++){
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	3301      	adds	r3, #1
 80065fc:	613b      	str	r3, [r7, #16]
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	429a      	cmp	r2, r3
 8006604:	dbcf      	blt.n	80065a6 <eye+0x2e>
			}
        }
    }
}
 8006606:	bf00      	nop
 8006608:	3718      	adds	r7, #24
 800660a:	46bd      	mov	sp, r7
 800660c:	bc90      	pop	{r4, r7}
 800660e:	4770      	bx	lr

08006610 <transpose>:

void transpose(int m, int n, float A[m][n], float A_T[n][m]) {
 8006610:	b4b0      	push	{r4, r5, r7}
 8006612:	b089      	sub	sp, #36	; 0x24
 8006614:	af00      	add	r7, sp, #0
 8006616:	60f8      	str	r0, [r7, #12]
 8006618:	60b9      	str	r1, [r7, #8]
 800661a:	607a      	str	r2, [r7, #4]
 800661c:	603b      	str	r3, [r7, #0]
 800661e:	68b8      	ldr	r0, [r7, #8]
 8006620:	1e43      	subs	r3, r0, #1
 8006622:	617b      	str	r3, [r7, #20]
 8006624:	4603      	mov	r3, r0
 8006626:	4619      	mov	r1, r3
 8006628:	f04f 0200 	mov.w	r2, #0
 800662c:	f04f 0300 	mov.w	r3, #0
 8006630:	f04f 0400 	mov.w	r4, #0
 8006634:	0154      	lsls	r4, r2, #5
 8006636:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800663a:	014b      	lsls	r3, r1, #5
 800663c:	68fd      	ldr	r5, [r7, #12]
 800663e:	1e6b      	subs	r3, r5, #1
 8006640:	613b      	str	r3, [r7, #16]
 8006642:	462b      	mov	r3, r5
 8006644:	4619      	mov	r1, r3
 8006646:	f04f 0200 	mov.w	r2, #0
 800664a:	f04f 0300 	mov.w	r3, #0
 800664e:	f04f 0400 	mov.w	r4, #0
 8006652:	0154      	lsls	r4, r2, #5
 8006654:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006658:	014b      	lsls	r3, r1, #5
	/* Get Transpose */
	for(int i = 0; i < m; i++){
 800665a:	2300      	movs	r3, #0
 800665c:	61bb      	str	r3, [r7, #24]
 800665e:	e022      	b.n	80066a6 <transpose+0x96>
		for(int j = 0; j < n; j++){
 8006660:	2300      	movs	r3, #0
 8006662:	61fb      	str	r3, [r7, #28]
 8006664:	e018      	b.n	8006698 <transpose+0x88>
			A_T[j][i] = A[i][j];
 8006666:	4602      	mov	r2, r0
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	fb03 f302 	mul.w	r3, r3, r2
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	441a      	add	r2, r3
 8006674:	4629      	mov	r1, r5
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	fb03 f301 	mul.w	r3, r3, r1
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	6839      	ldr	r1, [r7, #0]
 8006680:	4419      	add	r1, r3
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4413      	add	r3, r2
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	009b      	lsls	r3, r3, #2
 800668e:	440b      	add	r3, r1
 8006690:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < n; j++){
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	3301      	adds	r3, #1
 8006696:	61fb      	str	r3, [r7, #28]
 8006698:	69fa      	ldr	r2, [r7, #28]
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	429a      	cmp	r2, r3
 800669e:	dbe2      	blt.n	8006666 <transpose+0x56>
	for(int i = 0; i < m; i++){
 80066a0:	69bb      	ldr	r3, [r7, #24]
 80066a2:	3301      	adds	r3, #1
 80066a4:	61bb      	str	r3, [r7, #24]
 80066a6:	69ba      	ldr	r2, [r7, #24]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	dbd8      	blt.n	8006660 <transpose+0x50>
		}
	}
}
 80066ae:	bf00      	nop
 80066b0:	3724      	adds	r7, #36	; 0x24
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bcb0      	pop	{r4, r5, r7}
 80066b6:	4770      	bx	lr

080066b8 <vecadd>:

void vecadd(int n, float a[n], float b[n], float c[n]) {
 80066b8:	b480      	push	{r7}
 80066ba:	b087      	sub	sp, #28
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]
 80066c4:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 80066c6:	2300      	movs	r3, #0
 80066c8:	617b      	str	r3, [r7, #20]
 80066ca:	e016      	b.n	80066fa <vecadd+0x42>
		c[i] = a[i] + b[i];
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	68ba      	ldr	r2, [r7, #8]
 80066d2:	4413      	add	r3, r2
 80066d4:	ed93 7a00 	vldr	s14, [r3]
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	4413      	add	r3, r2
 80066e0:	edd3 7a00 	vldr	s15, [r3]
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	683a      	ldr	r2, [r7, #0]
 80066ea:	4413      	add	r3, r2
 80066ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066f0:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	3301      	adds	r3, #1
 80066f8:	617b      	str	r3, [r7, #20]
 80066fa:	697a      	ldr	r2, [r7, #20]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	429a      	cmp	r2, r3
 8006700:	dbe4      	blt.n	80066cc <vecadd+0x14>
	}
}
 8006702:	bf00      	nop
 8006704:	371c      	adds	r7, #28
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <vecsub>:

void vecsub(int n, float a[n], float b[n], float c[n]) {
 800670e:	b480      	push	{r7}
 8006710:	b087      	sub	sp, #28
 8006712:	af00      	add	r7, sp, #0
 8006714:	60f8      	str	r0, [r7, #12]
 8006716:	60b9      	str	r1, [r7, #8]
 8006718:	607a      	str	r2, [r7, #4]
 800671a:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 800671c:	2300      	movs	r3, #0
 800671e:	617b      	str	r3, [r7, #20]
 8006720:	e016      	b.n	8006750 <vecsub+0x42>
		c[i] = a[i] - b[i];
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	68ba      	ldr	r2, [r7, #8]
 8006728:	4413      	add	r3, r2
 800672a:	ed93 7a00 	vldr	s14, [r3]
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	4413      	add	r3, r2
 8006736:	edd3 7a00 	vldr	s15, [r3]
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	683a      	ldr	r2, [r7, #0]
 8006740:	4413      	add	r3, r2
 8006742:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006746:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	3301      	adds	r3, #1
 800674e:	617b      	str	r3, [r7, #20]
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	429a      	cmp	r2, r3
 8006756:	dbe4      	blt.n	8006722 <vecsub+0x14>
	}
}
 8006758:	bf00      	nop
 800675a:	371c      	adds	r7, #28
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <matadd>:

void matadd(int m, int n, float A[m][n], float B[m][n], float C[m][n]) {
 8006764:	b4f0      	push	{r4, r5, r6, r7}
 8006766:	b08a      	sub	sp, #40	; 0x28
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	607a      	str	r2, [r7, #4]
 8006770:	603b      	str	r3, [r7, #0]
 8006772:	68b8      	ldr	r0, [r7, #8]
 8006774:	1e43      	subs	r3, r0, #1
 8006776:	627b      	str	r3, [r7, #36]	; 0x24
 8006778:	4603      	mov	r3, r0
 800677a:	4619      	mov	r1, r3
 800677c:	f04f 0200 	mov.w	r2, #0
 8006780:	f04f 0300 	mov.w	r3, #0
 8006784:	f04f 0400 	mov.w	r4, #0
 8006788:	0154      	lsls	r4, r2, #5
 800678a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800678e:	014b      	lsls	r3, r1, #5
 8006790:	68bd      	ldr	r5, [r7, #8]
 8006792:	1e6b      	subs	r3, r5, #1
 8006794:	61bb      	str	r3, [r7, #24]
 8006796:	462b      	mov	r3, r5
 8006798:	4619      	mov	r1, r3
 800679a:	f04f 0200 	mov.w	r2, #0
 800679e:	f04f 0300 	mov.w	r3, #0
 80067a2:	f04f 0400 	mov.w	r4, #0
 80067a6:	0154      	lsls	r4, r2, #5
 80067a8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80067ac:	014b      	lsls	r3, r1, #5
 80067ae:	68be      	ldr	r6, [r7, #8]
 80067b0:	1e73      	subs	r3, r6, #1
 80067b2:	617b      	str	r3, [r7, #20]
 80067b4:	4633      	mov	r3, r6
 80067b6:	4619      	mov	r1, r3
 80067b8:	f04f 0200 	mov.w	r2, #0
 80067bc:	f04f 0300 	mov.w	r3, #0
 80067c0:	f04f 0400 	mov.w	r4, #0
 80067c4:	0154      	lsls	r4, r2, #5
 80067c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80067ca:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 80067cc:	2300      	movs	r3, #0
 80067ce:	61fb      	str	r3, [r7, #28]
 80067d0:	e032      	b.n	8006838 <matadd+0xd4>
        for(int j = 0; j < n; j++){
 80067d2:	2300      	movs	r3, #0
 80067d4:	623b      	str	r3, [r7, #32]
 80067d6:	e028      	b.n	800682a <matadd+0xc6>
            C[i][j] =  A[i][j] + B[i][j];
 80067d8:	4602      	mov	r2, r0
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	fb03 f302 	mul.w	r3, r3, r2
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	441a      	add	r2, r3
 80067e6:	6a3b      	ldr	r3, [r7, #32]
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	4413      	add	r3, r2
 80067ec:	ed93 7a00 	vldr	s14, [r3]
 80067f0:	462a      	mov	r2, r5
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	fb03 f302 	mul.w	r3, r3, r2
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	683a      	ldr	r2, [r7, #0]
 80067fc:	441a      	add	r2, r3
 80067fe:	6a3b      	ldr	r3, [r7, #32]
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	4413      	add	r3, r2
 8006804:	edd3 7a00 	vldr	s15, [r3]
 8006808:	4632      	mov	r2, r6
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	fb03 f302 	mul.w	r3, r3, r2
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006814:	441a      	add	r2, r3
 8006816:	ee77 7a27 	vadd.f32	s15, s14, s15
 800681a:	6a3b      	ldr	r3, [r7, #32]
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	4413      	add	r3, r2
 8006820:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8006824:	6a3b      	ldr	r3, [r7, #32]
 8006826:	3301      	adds	r3, #1
 8006828:	623b      	str	r3, [r7, #32]
 800682a:	6a3a      	ldr	r2, [r7, #32]
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	429a      	cmp	r2, r3
 8006830:	dbd2      	blt.n	80067d8 <matadd+0x74>
	for(int i = 0; i < m; i++){
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	3301      	adds	r3, #1
 8006836:	61fb      	str	r3, [r7, #28]
 8006838:	69fa      	ldr	r2, [r7, #28]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	429a      	cmp	r2, r3
 800683e:	dbc8      	blt.n	80067d2 <matadd+0x6e>
        }
    }
}
 8006840:	bf00      	nop
 8006842:	3728      	adds	r7, #40	; 0x28
 8006844:	46bd      	mov	sp, r7
 8006846:	bcf0      	pop	{r4, r5, r6, r7}
 8006848:	4770      	bx	lr

0800684a <matsub>:

void matsub(int m, int n, float A[m][n], float B[m][n], float C[m][n]) {
 800684a:	b4f0      	push	{r4, r5, r6, r7}
 800684c:	b08a      	sub	sp, #40	; 0x28
 800684e:	af00      	add	r7, sp, #0
 8006850:	60f8      	str	r0, [r7, #12]
 8006852:	60b9      	str	r1, [r7, #8]
 8006854:	607a      	str	r2, [r7, #4]
 8006856:	603b      	str	r3, [r7, #0]
 8006858:	68b8      	ldr	r0, [r7, #8]
 800685a:	1e43      	subs	r3, r0, #1
 800685c:	627b      	str	r3, [r7, #36]	; 0x24
 800685e:	4603      	mov	r3, r0
 8006860:	4619      	mov	r1, r3
 8006862:	f04f 0200 	mov.w	r2, #0
 8006866:	f04f 0300 	mov.w	r3, #0
 800686a:	f04f 0400 	mov.w	r4, #0
 800686e:	0154      	lsls	r4, r2, #5
 8006870:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006874:	014b      	lsls	r3, r1, #5
 8006876:	68bd      	ldr	r5, [r7, #8]
 8006878:	1e6b      	subs	r3, r5, #1
 800687a:	61bb      	str	r3, [r7, #24]
 800687c:	462b      	mov	r3, r5
 800687e:	4619      	mov	r1, r3
 8006880:	f04f 0200 	mov.w	r2, #0
 8006884:	f04f 0300 	mov.w	r3, #0
 8006888:	f04f 0400 	mov.w	r4, #0
 800688c:	0154      	lsls	r4, r2, #5
 800688e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006892:	014b      	lsls	r3, r1, #5
 8006894:	68be      	ldr	r6, [r7, #8]
 8006896:	1e73      	subs	r3, r6, #1
 8006898:	617b      	str	r3, [r7, #20]
 800689a:	4633      	mov	r3, r6
 800689c:	4619      	mov	r1, r3
 800689e:	f04f 0200 	mov.w	r2, #0
 80068a2:	f04f 0300 	mov.w	r3, #0
 80068a6:	f04f 0400 	mov.w	r4, #0
 80068aa:	0154      	lsls	r4, r2, #5
 80068ac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80068b0:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 80068b2:	2300      	movs	r3, #0
 80068b4:	61fb      	str	r3, [r7, #28]
 80068b6:	e032      	b.n	800691e <matsub+0xd4>
        for(int j = 0; j < n; j++){
 80068b8:	2300      	movs	r3, #0
 80068ba:	623b      	str	r3, [r7, #32]
 80068bc:	e028      	b.n	8006910 <matsub+0xc6>
            C[i][j] =  A[i][j] - B[i][j];
 80068be:	4602      	mov	r2, r0
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	fb03 f302 	mul.w	r3, r3, r2
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	441a      	add	r2, r3
 80068cc:	6a3b      	ldr	r3, [r7, #32]
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	4413      	add	r3, r2
 80068d2:	ed93 7a00 	vldr	s14, [r3]
 80068d6:	462a      	mov	r2, r5
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	fb03 f302 	mul.w	r3, r3, r2
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	683a      	ldr	r2, [r7, #0]
 80068e2:	441a      	add	r2, r3
 80068e4:	6a3b      	ldr	r3, [r7, #32]
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	4413      	add	r3, r2
 80068ea:	edd3 7a00 	vldr	s15, [r3]
 80068ee:	4632      	mov	r2, r6
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	fb03 f302 	mul.w	r3, r3, r2
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068fa:	441a      	add	r2, r3
 80068fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006900:	6a3b      	ldr	r3, [r7, #32]
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4413      	add	r3, r2
 8006906:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 800690a:	6a3b      	ldr	r3, [r7, #32]
 800690c:	3301      	adds	r3, #1
 800690e:	623b      	str	r3, [r7, #32]
 8006910:	6a3a      	ldr	r2, [r7, #32]
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	429a      	cmp	r2, r3
 8006916:	dbd2      	blt.n	80068be <matsub+0x74>
	for(int i = 0; i < m; i++){
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	3301      	adds	r3, #1
 800691c:	61fb      	str	r3, [r7, #28]
 800691e:	69fa      	ldr	r2, [r7, #28]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	429a      	cmp	r2, r3
 8006924:	dbc8      	blt.n	80068b8 <matsub+0x6e>
        }
    }
}
 8006926:	bf00      	nop
 8006928:	3728      	adds	r7, #40	; 0x28
 800692a:	46bd      	mov	sp, r7
 800692c:	bcf0      	pop	{r4, r5, r6, r7}
 800692e:	4770      	bx	lr

08006930 <matmul>:

void matmul(int m, int n, int o, float A[m][n], float B[n][o], float C[m][o], bool reset) {
 8006930:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006932:	b08d      	sub	sp, #52	; 0x34
 8006934:	af00      	add	r7, sp, #0
 8006936:	6178      	str	r0, [r7, #20]
 8006938:	6139      	str	r1, [r7, #16]
 800693a:	60fa      	str	r2, [r7, #12]
 800693c:	60bb      	str	r3, [r7, #8]
 800693e:	693e      	ldr	r6, [r7, #16]
 8006940:	1e73      	subs	r3, r6, #1
 8006942:	623b      	str	r3, [r7, #32]
 8006944:	4633      	mov	r3, r6
 8006946:	4619      	mov	r1, r3
 8006948:	f04f 0200 	mov.w	r2, #0
 800694c:	f04f 0300 	mov.w	r3, #0
 8006950:	f04f 0400 	mov.w	r4, #0
 8006954:	0154      	lsls	r4, r2, #5
 8006956:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800695a:	014b      	lsls	r3, r1, #5
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	607a      	str	r2, [r7, #4]
 8006960:	4613      	mov	r3, r2
 8006962:	3b01      	subs	r3, #1
 8006964:	61fb      	str	r3, [r7, #28]
 8006966:	4613      	mov	r3, r2
 8006968:	4619      	mov	r1, r3
 800696a:	f04f 0200 	mov.w	r2, #0
 800696e:	f04f 0300 	mov.w	r3, #0
 8006972:	f04f 0400 	mov.w	r4, #0
 8006976:	0154      	lsls	r4, r2, #5
 8006978:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800697c:	014b      	lsls	r3, r1, #5
 800697e:	68fd      	ldr	r5, [r7, #12]
 8006980:	1e6b      	subs	r3, r5, #1
 8006982:	61bb      	str	r3, [r7, #24]
 8006984:	462b      	mov	r3, r5
 8006986:	4619      	mov	r1, r3
 8006988:	f04f 0200 	mov.w	r2, #0
 800698c:	f04f 0300 	mov.w	r3, #0
 8006990:	f04f 0400 	mov.w	r4, #0
 8006994:	0154      	lsls	r4, r2, #5
 8006996:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800699a:	014b      	lsls	r3, r1, #5
	if (reset) {
 800699c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d009      	beq.n	80069b8 <matmul+0x88>
		memset(C, 0, m * o * sizeof(C[0][0]));
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	fb02 f303 	mul.w	r3, r2, r3
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	461a      	mov	r2, r3
 80069b0:	2100      	movs	r1, #0
 80069b2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80069b4:	f009 fdcb 	bl	801054e <memset>
	}
	for(int i = 0; i < m; i++){
 80069b8:	2300      	movs	r3, #0
 80069ba:	627b      	str	r3, [r7, #36]	; 0x24
 80069bc:	e04a      	b.n	8006a54 <matmul+0x124>
        for(int j = 0; j < o; j++){
 80069be:	2300      	movs	r3, #0
 80069c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80069c2:	e040      	b.n	8006a46 <matmul+0x116>
            for(int k = 0; k < n; k++){
 80069c4:	2300      	movs	r3, #0
 80069c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069c8:	e036      	b.n	8006a38 <matmul+0x108>
                C[i][j] +=  A[i][k] * B[k][j];
 80069ca:	4632      	mov	r2, r6
 80069cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ce:	fb03 f302 	mul.w	r3, r3, r2
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	441a      	add	r2, r3
 80069d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4413      	add	r3, r2
 80069de:	ed93 7a00 	vldr	s14, [r3]
 80069e2:	687a      	ldr	r2, [r7, #4]
 80069e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e6:	fb03 f302 	mul.w	r3, r3, r2
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069ee:	441a      	add	r2, r3
 80069f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4413      	add	r3, r2
 80069f6:	edd3 7a00 	vldr	s15, [r3]
 80069fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80069fe:	462a      	mov	r2, r5
 8006a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a02:	fb03 f302 	mul.w	r3, r3, r2
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a0a:	441a      	add	r2, r3
 8006a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	4413      	add	r3, r2
 8006a12:	edd3 7a00 	vldr	s15, [r3]
 8006a16:	462a      	mov	r2, r5
 8006a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1a:	fb03 f302 	mul.w	r3, r3, r2
 8006a1e:	009b      	lsls	r3, r3, #2
 8006a20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a22:	441a      	add	r2, r3
 8006a24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	4413      	add	r3, r2
 8006a2e:	edc3 7a00 	vstr	s15, [r3]
            for(int k = 0; k < n; k++){
 8006a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a34:	3301      	adds	r3, #1
 8006a36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	dbc4      	blt.n	80069ca <matmul+0x9a>
        for(int j = 0; j < o; j++){
 8006a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a42:	3301      	adds	r3, #1
 8006a44:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	dbba      	blt.n	80069c4 <matmul+0x94>
	for(int i = 0; i < m; i++){
 8006a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a50:	3301      	adds	r3, #1
 8006a52:	627b      	str	r3, [r7, #36]	; 0x24
 8006a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	dbb0      	blt.n	80069be <matmul+0x8e>
            }
        }
    }
}
 8006a5c:	bf00      	nop
 8006a5e:	3734      	adds	r7, #52	; 0x34
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006a64 <matvecprod>:

void matvecprod(int m, int n, float A[m][n], float b[n], float c[m], bool reset) {
 8006a64:	b5b0      	push	{r4, r5, r7, lr}
 8006a66:	b088      	sub	sp, #32
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	60f8      	str	r0, [r7, #12]
 8006a6c:	60b9      	str	r1, [r7, #8]
 8006a6e:	607a      	str	r2, [r7, #4]
 8006a70:	603b      	str	r3, [r7, #0]
 8006a72:	68bd      	ldr	r5, [r7, #8]
 8006a74:	1e6b      	subs	r3, r5, #1
 8006a76:	617b      	str	r3, [r7, #20]
 8006a78:	462b      	mov	r3, r5
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	f04f 0200 	mov.w	r2, #0
 8006a80:	f04f 0300 	mov.w	r3, #0
 8006a84:	f04f 0400 	mov.w	r4, #0
 8006a88:	0154      	lsls	r4, r2, #5
 8006a8a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006a8e:	014b      	lsls	r3, r1, #5
	if (reset) {
 8006a90:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d006      	beq.n	8006aa6 <matvecprod+0x42>
		memset(c, 0, m * sizeof(c[0]));
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	2100      	movs	r1, #0
 8006aa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006aa2:	f009 fd54 	bl	801054e <memset>
	}
	for(int i = 0; i < m; i++){
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	61bb      	str	r3, [r7, #24]
 8006aaa:	e02e      	b.n	8006b0a <matvecprod+0xa6>
        for(int j = 0; j < n; j++){
 8006aac:	2300      	movs	r3, #0
 8006aae:	61fb      	str	r3, [r7, #28]
 8006ab0:	e024      	b.n	8006afc <matvecprod+0x98>
            c[i] += A[i][j] * b[j];
 8006ab2:	462a      	mov	r2, r5
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	fb03 f302 	mul.w	r3, r3, r2
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	441a      	add	r2, r3
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	4413      	add	r3, r2
 8006ac6:	ed93 7a00 	vldr	s14, [r3]
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	683a      	ldr	r2, [r7, #0]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	edd3 7a00 	vldr	s15, [r3]
 8006ad6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ae0:	4413      	add	r3, r2
 8006ae2:	edd3 7a00 	vldr	s15, [r3]
 8006ae6:	69bb      	ldr	r3, [r7, #24]
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aec:	4413      	add	r3, r2
 8006aee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006af2:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	3301      	adds	r3, #1
 8006afa:	61fb      	str	r3, [r7, #28]
 8006afc:	69fa      	ldr	r2, [r7, #28]
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	dbd6      	blt.n	8006ab2 <matvecprod+0x4e>
	for(int i = 0; i < m; i++){
 8006b04:	69bb      	ldr	r3, [r7, #24]
 8006b06:	3301      	adds	r3, #1
 8006b08:	61bb      	str	r3, [r7, #24]
 8006b0a:	69ba      	ldr	r2, [r7, #24]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	dbcc      	blt.n	8006aac <matvecprod+0x48>
        }
    }
}
 8006b12:	bf00      	nop
 8006b14:	3720      	adds	r7, #32
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bdb0      	pop	{r4, r5, r7, pc}

08006b1a <lower_triangular_inverse>:
	}
}

/* computes in-place the inverse of the lower triangular matrix L */
/* http://www.mymathlib.com/matrices/linearsystems/triangular.html */
int lower_triangular_inverse(int n, float *L) {
 8006b1a:	b480      	push	{r7}
 8006b1c:	b08b      	sub	sp, #44	; 0x2c
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
 8006b22:	6039      	str	r1, [r7, #0]
   int i, j, k;
   float *p_i, *p_j, *p_k;
   float sum;

    /* Invert the diagonal elements of the lower triangular matrix L. */
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 8006b24:	2300      	movs	r3, #0
 8006b26:	61fb      	str	r3, [r7, #28]
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	613b      	str	r3, [r7, #16]
 8006b2c:	e01d      	b.n	8006b6a <lower_triangular_inverse+0x50>
        if (*p_k == 0.0) return -1;
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	edd3 7a00 	vldr	s15, [r3]
 8006b34:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b3c:	d102      	bne.n	8006b44 <lower_triangular_inverse+0x2a>
 8006b3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b42:	e076      	b.n	8006c32 <lower_triangular_inverse+0x118>
        else *p_k = 1.0 / *p_k;
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	ed93 7a00 	vldr	s14, [r3]
 8006b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	edc3 7a00 	vstr	s15, [r3]
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	693a      	ldr	r2, [r7, #16]
 8006b60:	4413      	add	r3, r2
 8006b62:	613b      	str	r3, [r7, #16]
 8006b64:	69fb      	ldr	r3, [r7, #28]
 8006b66:	3301      	adds	r3, #1
 8006b68:	61fb      	str	r3, [r7, #28]
 8006b6a:	69fa      	ldr	r2, [r7, #28]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	dbdd      	blt.n	8006b2e <lower_triangular_inverse+0x14>
    }
    
    /* Invert the remaining lower triangular matrix L row by row. */
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 8006b72:	2301      	movs	r3, #1
 8006b74:	627b      	str	r3, [r7, #36]	; 0x24
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	683a      	ldr	r2, [r7, #0]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	61bb      	str	r3, [r7, #24]
 8006b80:	e052      	b.n	8006c28 <lower_triangular_inverse+0x10e>
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 8006b82:	2300      	movs	r3, #0
 8006b84:	623b      	str	r3, [r7, #32]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	617b      	str	r3, [r7, #20]
 8006b8a:	e041      	b.n	8006c10 <lower_triangular_inverse+0xf6>
            sum = 0.0;
 8006b8c:	f04f 0300 	mov.w	r3, #0
 8006b90:	60fb      	str	r3, [r7, #12]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 8006b92:	6a3b      	ldr	r3, [r7, #32]
 8006b94:	61fb      	str	r3, [r7, #28]
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	613b      	str	r3, [r7, #16]
 8006b9a:	e01b      	b.n	8006bd4 <lower_triangular_inverse+0xba>
                sum += *(p_i + k) * *(p_k + j);
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	69ba      	ldr	r2, [r7, #24]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	ed93 7a00 	vldr	s14, [r3]
 8006ba8:	6a3b      	ldr	r3, [r7, #32]
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	4413      	add	r3, r2
 8006bb0:	edd3 7a00 	vldr	s15, [r3]
 8006bb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bb8:	ed97 7a03 	vldr	s14, [r7, #12]
 8006bbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006bc0:	edc7 7a03 	vstr	s15, [r7, #12]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	61fb      	str	r3, [r7, #28]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	613b      	str	r3, [r7, #16]
 8006bd4:	69fa      	ldr	r2, [r7, #28]
 8006bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	dbdf      	blt.n	8006b9c <lower_triangular_inverse+0x82>
            *(p_i + j) = - *(p_i + i) * sum;
 8006bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	69ba      	ldr	r2, [r7, #24]
 8006be2:	4413      	add	r3, r2
 8006be4:	edd3 7a00 	vldr	s15, [r3]
 8006be8:	eeb1 7a67 	vneg.f32	s14, s15
 8006bec:	6a3b      	ldr	r3, [r7, #32]
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	69ba      	ldr	r2, [r7, #24]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	edd7 7a03 	vldr	s15, [r7, #12]
 8006bf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bfc:	edc3 7a00 	vstr	s15, [r3]
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	697a      	ldr	r2, [r7, #20]
 8006c06:	4413      	add	r3, r2
 8006c08:	617b      	str	r3, [r7, #20]
 8006c0a:	6a3b      	ldr	r3, [r7, #32]
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	623b      	str	r3, [r7, #32]
 8006c10:	6a3a      	ldr	r2, [r7, #32]
 8006c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c14:	429a      	cmp	r2, r3
 8006c16:	dbb9      	blt.n	8006b8c <lower_triangular_inverse+0x72>
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 8006c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	009b      	lsls	r3, r3, #2
 8006c22:	69ba      	ldr	r2, [r7, #24]
 8006c24:	4413      	add	r3, r2
 8006c26:	61bb      	str	r3, [r7, #24]
 8006c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	dba8      	blt.n	8006b82 <lower_triangular_inverse+0x68>
        }
    }
    
    return 0;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	372c      	adds	r7, #44	; 0x2c
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
	...

08006c40 <cholesky>:

/* computes the cholesky decomposition */
/* https://rosettacode.org/wiki/Cholesky_decomposition#C */
void cholesky(int n, float A[n][n], float L[n][n]) {
 8006c40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c44:	b08b      	sub	sp, #44	; 0x2c
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	60f8      	str	r0, [r7, #12]
 8006c4a:	60b9      	str	r1, [r7, #8]
 8006c4c:	607a      	str	r2, [r7, #4]
 8006c4e:	68fe      	ldr	r6, [r7, #12]
 8006c50:	1e73      	subs	r3, r6, #1
 8006c52:	617b      	str	r3, [r7, #20]
 8006c54:	4633      	mov	r3, r6
 8006c56:	4619      	mov	r1, r3
 8006c58:	f04f 0200 	mov.w	r2, #0
 8006c5c:	f04f 0300 	mov.w	r3, #0
 8006c60:	f04f 0400 	mov.w	r4, #0
 8006c64:	0154      	lsls	r4, r2, #5
 8006c66:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006c6a:	014b      	lsls	r3, r1, #5
 8006c6c:	68fd      	ldr	r5, [r7, #12]
 8006c6e:	1e6b      	subs	r3, r5, #1
 8006c70:	613b      	str	r3, [r7, #16]
 8006c72:	462b      	mov	r3, r5
 8006c74:	4619      	mov	r1, r3
 8006c76:	f04f 0200 	mov.w	r2, #0
 8006c7a:	f04f 0300 	mov.w	r3, #0
 8006c7e:	f04f 0400 	mov.w	r4, #0
 8006c82:	0154      	lsls	r4, r2, #5
 8006c84:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006c88:	014b      	lsls	r3, r1, #5
    memset(L, 0, n * n * sizeof(L[0][0]));
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	fb02 f303 	mul.w	r3, r2, r3
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	461a      	mov	r2, r3
 8006c96:	2100      	movs	r1, #0
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f009 fc58 	bl	801054e <memset>
    for (int i = 0; i < n; i++)
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	61bb      	str	r3, [r7, #24]
 8006ca2:	e09f      	b.n	8006de4 <cholesky+0x1a4>
        for (int j = 0; j < (i+1); j++) {
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	61fb      	str	r3, [r7, #28]
 8006ca8:	e093      	b.n	8006dd2 <cholesky+0x192>
            float s = 0;
 8006caa:	f04f 0300 	mov.w	r3, #0
 8006cae:	623b      	str	r3, [r7, #32]
            for (int k = 0; k < j; k++)
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8006cb4:	e022      	b.n	8006cfc <cholesky+0xbc>
                s += L[i][k] * L[j][k];
 8006cb6:	462a      	mov	r2, r5
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	fb03 f302 	mul.w	r3, r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	441a      	add	r2, r3
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	4413      	add	r3, r2
 8006cca:	ed93 7a00 	vldr	s14, [r3]
 8006cce:	462a      	mov	r2, r5
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	fb03 f302 	mul.w	r3, r3, r2
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	441a      	add	r2, r3
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4413      	add	r3, r2
 8006ce2:	edd3 7a00 	vldr	s15, [r3]
 8006ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cea:	ed97 7a08 	vldr	s14, [r7, #32]
 8006cee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006cf2:	edc7 7a08 	vstr	s15, [r7, #32]
            for (int k = 0; k < j; k++)
 8006cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8006cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	dbd8      	blt.n	8006cb6 <cholesky+0x76>
            L[i][j] = (i == j) ? sqrtf(A[i][i] - s) : (1.0 / L[j][j] * (A[i][j] - s));
 8006d04:	69ba      	ldr	r2, [r7, #24]
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d116      	bne.n	8006d3a <cholesky+0xfa>
 8006d0c:	4632      	mov	r2, r6
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	fb03 f302 	mul.w	r3, r3, r2
 8006d14:	009b      	lsls	r3, r3, #2
 8006d16:	68ba      	ldr	r2, [r7, #8]
 8006d18:	441a      	add	r2, r3
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	4413      	add	r3, r2
 8006d20:	ed93 7a00 	vldr	s14, [r3]
 8006d24:	edd7 7a08 	vldr	s15, [r7, #32]
 8006d28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d2c:	eeb0 0a67 	vmov.f32	s0, s15
 8006d30:	f00d ff5c 	bl	8014bec <sqrtf>
 8006d34:	ee10 1a10 	vmov	r1, s0
 8006d38:	e03d      	b.n	8006db6 <cholesky+0x176>
 8006d3a:	462a      	mov	r2, r5
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	fb03 f302 	mul.w	r3, r3, r2
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	441a      	add	r2, r3
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	4413      	add	r3, r2
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4618      	mov	r0, r3
 8006d52:	f7f9 fbf9 	bl	8000548 <__aeabi_f2d>
 8006d56:	4603      	mov	r3, r0
 8006d58:	460c      	mov	r4, r1
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	4623      	mov	r3, r4
 8006d5e:	f04f 0000 	mov.w	r0, #0
 8006d62:	4925      	ldr	r1, [pc, #148]	; (8006df8 <cholesky+0x1b8>)
 8006d64:	f7f9 fd72 	bl	800084c <__aeabi_ddiv>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	460c      	mov	r4, r1
 8006d6c:	4698      	mov	r8, r3
 8006d6e:	46a1      	mov	r9, r4
 8006d70:	4632      	mov	r2, r6
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	fb03 f302 	mul.w	r3, r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	68ba      	ldr	r2, [r7, #8]
 8006d7c:	441a      	add	r2, r3
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	4413      	add	r3, r2
 8006d84:	ed93 7a00 	vldr	s14, [r3]
 8006d88:	edd7 7a08 	vldr	s15, [r7, #32]
 8006d8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d90:	ee17 0a90 	vmov	r0, s15
 8006d94:	f7f9 fbd8 	bl	8000548 <__aeabi_f2d>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	460c      	mov	r4, r1
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	4623      	mov	r3, r4
 8006da0:	4640      	mov	r0, r8
 8006da2:	4649      	mov	r1, r9
 8006da4:	f7f9 fc28 	bl	80005f8 <__aeabi_dmul>
 8006da8:	4603      	mov	r3, r0
 8006daa:	460c      	mov	r4, r1
 8006dac:	4618      	mov	r0, r3
 8006dae:	4621      	mov	r1, r4
 8006db0:	f7f9 ff1a 	bl	8000be8 <__aeabi_d2f>
 8006db4:	4601      	mov	r1, r0
 8006db6:	462a      	mov	r2, r5
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	fb03 f302 	mul.w	r3, r3, r2
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	441a      	add	r2, r3
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	4413      	add	r3, r2
 8006dca:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < (i+1); j++) {
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	3301      	adds	r3, #1
 8006dd0:	61fb      	str	r3, [r7, #28]
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	69fa      	ldr	r2, [r7, #28]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	f6ff af66 	blt.w	8006caa <cholesky+0x6a>
    for (int i = 0; i < n; i++)
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	3301      	adds	r3, #1
 8006de2:	61bb      	str	r3, [r7, #24]
 8006de4:	69ba      	ldr	r2, [r7, #24]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	f6ff af5b 	blt.w	8006ca4 <cholesky+0x64>
        }
}
 8006dee:	bf00      	nop
 8006df0:	372c      	adds	r7, #44	; 0x2c
 8006df2:	46bd      	mov	sp, r7
 8006df4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006df8:	3ff00000 	.word	0x3ff00000

08006dfc <cholesky_inverse>:

/* computes the inverse of a Hermitian, positive-definite matrix of dimension n x n using cholesky decomposition*/
/* Krishnamoorthy, Aravindh, and Deepak Menon. "Matrix inversion using Cholesky decomposition." */
/* 2013 signal processing: Algorithms, architectures, arrangements, and applications (SPA). IEEE, 2013. */
/* the inverse has a big O complexity of n^3 */
void cholesky_inverse(int n, float A[n][n], float inverse[n][n], float lambda) {
 8006dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e00:	b090      	sub	sp, #64	; 0x40
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	60f8      	str	r0, [r7, #12]
 8006e06:	60b9      	str	r1, [r7, #8]
 8006e08:	607a      	str	r2, [r7, #4]
 8006e0a:	ed87 0a00 	vstr	s0, [r7]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	1e5a      	subs	r2, r3, #1
 8006e12:	63ba      	str	r2, [r7, #56]	; 0x38
 8006e14:	4619      	mov	r1, r3
 8006e16:	f04f 0200 	mov.w	r2, #0
 8006e1a:	f04f 0300 	mov.w	r3, #0
 8006e1e:	f04f 0400 	mov.w	r4, #0
 8006e22:	0154      	lsls	r4, r2, #5
 8006e24:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006e28:	014b      	lsls	r3, r1, #5
 8006e2a:	68fd      	ldr	r5, [r7, #12]
 8006e2c:	1e6b      	subs	r3, r5, #1
 8006e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e30:	462b      	mov	r3, r5
 8006e32:	4619      	mov	r1, r3
 8006e34:	f04f 0200 	mov.w	r2, #0
 8006e38:	f04f 0300 	mov.w	r3, #0
 8006e3c:	f04f 0400 	mov.w	r4, #0
 8006e40:	0154      	lsls	r4, r2, #5
 8006e42:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006e46:	014b      	lsls	r3, r1, #5
 8006e48:	466b      	mov	r3, sp
 8006e4a:	4699      	mov	r9, r3
    /* add damping factor to avoid singularities. */
	/* if no damping is required set lambda to 0.0 */
	float A_dash[n][n];
 8006e4c:	68f8      	ldr	r0, [r7, #12]
 8006e4e:	68fe      	ldr	r6, [r7, #12]
 8006e50:	1e43      	subs	r3, r0, #1
 8006e52:	627b      	str	r3, [r7, #36]	; 0x24
 8006e54:	4603      	mov	r3, r0
 8006e56:	4619      	mov	r1, r3
 8006e58:	f04f 0200 	mov.w	r2, #0
 8006e5c:	f04f 0300 	mov.w	r3, #0
 8006e60:	f04f 0400 	mov.w	r4, #0
 8006e64:	0154      	lsls	r4, r2, #5
 8006e66:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006e6a:	014b      	lsls	r3, r1, #5
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8006e72:	1e73      	subs	r3, r6, #1
 8006e74:	623b      	str	r3, [r7, #32]
 8006e76:	4603      	mov	r3, r0
 8006e78:	4619      	mov	r1, r3
 8006e7a:	f04f 0200 	mov.w	r2, #0
 8006e7e:	4633      	mov	r3, r6
 8006e80:	f04f 0400 	mov.w	r4, #0
 8006e84:	fb03 fe02 	mul.w	lr, r3, r2
 8006e88:	fb01 fc04 	mul.w	ip, r1, r4
 8006e8c:	44f4      	add	ip, lr
 8006e8e:	fba1 3403 	umull	r3, r4, r1, r3
 8006e92:	eb0c 0204 	add.w	r2, ip, r4
 8006e96:	4614      	mov	r4, r2
 8006e98:	f04f 0100 	mov.w	r1, #0
 8006e9c:	f04f 0200 	mov.w	r2, #0
 8006ea0:	0162      	lsls	r2, r4, #5
 8006ea2:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8006ea6:	0159      	lsls	r1, r3, #5
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	4619      	mov	r1, r3
 8006eac:	f04f 0200 	mov.w	r2, #0
 8006eb0:	4633      	mov	r3, r6
 8006eb2:	f04f 0400 	mov.w	r4, #0
 8006eb6:	fb03 fe02 	mul.w	lr, r3, r2
 8006eba:	fb01 fc04 	mul.w	ip, r1, r4
 8006ebe:	44f4      	add	ip, lr
 8006ec0:	fba1 3403 	umull	r3, r4, r1, r3
 8006ec4:	eb0c 0204 	add.w	r2, ip, r4
 8006ec8:	4614      	mov	r4, r2
 8006eca:	f04f 0100 	mov.w	r1, #0
 8006ece:	f04f 0200 	mov.w	r2, #0
 8006ed2:	0162      	lsls	r2, r4, #5
 8006ed4:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8006ed8:	0159      	lsls	r1, r3, #5
 8006eda:	4603      	mov	r3, r0
 8006edc:	4632      	mov	r2, r6
 8006ede:	fb02 f303 	mul.w	r3, r2, r3
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	3303      	adds	r3, #3
 8006ee6:	3307      	adds	r3, #7
 8006ee8:	08db      	lsrs	r3, r3, #3
 8006eea:	00db      	lsls	r3, r3, #3
 8006eec:	ebad 0d03 	sub.w	sp, sp, r3
 8006ef0:	466b      	mov	r3, sp
 8006ef2:	3303      	adds	r3, #3
 8006ef4:	089b      	lsrs	r3, r3, #2
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	61fb      	str	r3, [r7, #28]
    memcpy(A_dash, A, n * n * sizeof(A[0][0]));
 8006efa:	69f8      	ldr	r0, [r7, #28]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	fb02 f303 	mul.w	r3, r2, r3
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	461a      	mov	r2, r3
 8006f08:	68b9      	ldr	r1, [r7, #8]
 8006f0a:	f009 fb15 	bl	8010538 <memcpy>
    for (int i = 0; i < n; i++) {
 8006f0e:	2300      	movs	r3, #0
 8006f10:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f12:	e022      	b.n	8006f5a <cholesky_inverse+0x15e>
        A_dash[i][i] = A_dash[i][i] + lambda * lambda; 
 8006f14:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8006f18:	69fa      	ldr	r2, [r7, #28]
 8006f1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f1c:	fb01 f103 	mul.w	r1, r1, r3
 8006f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f22:	440b      	add	r3, r1
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	4413      	add	r3, r2
 8006f28:	ed93 7a00 	vldr	s14, [r3]
 8006f2c:	edd7 6a00 	vldr	s13, [r7]
 8006f30:	edd7 7a00 	vldr	s15, [r7]
 8006f34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006f38:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8006f3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f40:	69fa      	ldr	r2, [r7, #28]
 8006f42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f44:	fb01 f103 	mul.w	r1, r1, r3
 8006f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4a:	440b      	add	r3, r1
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	4413      	add	r3, r2
 8006f50:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < n; i++) {
 8006f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f56:	3301      	adds	r3, #1
 8006f58:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	dbd8      	blt.n	8006f14 <cholesky_inverse+0x118>
	}

    /* call cholesky decomposition to get lower triangular matrix L */
    float L[n][n];
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	68fe      	ldr	r6, [r7, #12]
 8006f66:	466b      	mov	r3, sp
 8006f68:	469a      	mov	sl, r3
 8006f6a:	1e43      	subs	r3, r0, #1
 8006f6c:	61bb      	str	r3, [r7, #24]
 8006f6e:	4603      	mov	r3, r0
 8006f70:	4619      	mov	r1, r3
 8006f72:	f04f 0200 	mov.w	r2, #0
 8006f76:	f04f 0300 	mov.w	r3, #0
 8006f7a:	f04f 0400 	mov.w	r4, #0
 8006f7e:	0154      	lsls	r4, r2, #5
 8006f80:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006f84:	014b      	lsls	r3, r1, #5
 8006f86:	4603      	mov	r3, r0
 8006f88:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8006f8c:	1e73      	subs	r3, r6, #1
 8006f8e:	617b      	str	r3, [r7, #20]
 8006f90:	4603      	mov	r3, r0
 8006f92:	4619      	mov	r1, r3
 8006f94:	f04f 0200 	mov.w	r2, #0
 8006f98:	4633      	mov	r3, r6
 8006f9a:	f04f 0400 	mov.w	r4, #0
 8006f9e:	fb03 fe02 	mul.w	lr, r3, r2
 8006fa2:	fb01 fc04 	mul.w	ip, r1, r4
 8006fa6:	44f4      	add	ip, lr
 8006fa8:	fba1 3403 	umull	r3, r4, r1, r3
 8006fac:	eb0c 0204 	add.w	r2, ip, r4
 8006fb0:	4614      	mov	r4, r2
 8006fb2:	f04f 0100 	mov.w	r1, #0
 8006fb6:	f04f 0200 	mov.w	r2, #0
 8006fba:	0162      	lsls	r2, r4, #5
 8006fbc:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8006fc0:	0159      	lsls	r1, r3, #5
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	4619      	mov	r1, r3
 8006fc6:	f04f 0200 	mov.w	r2, #0
 8006fca:	4633      	mov	r3, r6
 8006fcc:	f04f 0400 	mov.w	r4, #0
 8006fd0:	fb03 fe02 	mul.w	lr, r3, r2
 8006fd4:	fb01 fc04 	mul.w	ip, r1, r4
 8006fd8:	44f4      	add	ip, lr
 8006fda:	fba1 3403 	umull	r3, r4, r1, r3
 8006fde:	eb0c 0204 	add.w	r2, ip, r4
 8006fe2:	4614      	mov	r4, r2
 8006fe4:	f04f 0100 	mov.w	r1, #0
 8006fe8:	f04f 0200 	mov.w	r2, #0
 8006fec:	0162      	lsls	r2, r4, #5
 8006fee:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8006ff2:	0159      	lsls	r1, r3, #5
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	4632      	mov	r2, r6
 8006ff8:	fb02 f303 	mul.w	r3, r2, r3
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	3303      	adds	r3, #3
 8007000:	3307      	adds	r3, #7
 8007002:	08db      	lsrs	r3, r3, #3
 8007004:	00db      	lsls	r3, r3, #3
 8007006:	ebad 0d03 	sub.w	sp, sp, r3
 800700a:	466b      	mov	r3, sp
 800700c:	3303      	adds	r3, #3
 800700e:	089b      	lsrs	r3, r3, #2
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	613b      	str	r3, [r7, #16]
    cholesky(n, A_dash, L);
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	693a      	ldr	r2, [r7, #16]
 8007018:	4619      	mov	r1, r3
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f7ff fe10 	bl	8006c40 <cholesky>

    /* compute lower triangular inverse in-place */
    lower_triangular_inverse(n, &L[0][0]);
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	4619      	mov	r1, r3
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f7ff fd78 	bl	8006b1a <lower_triangular_inverse>

    /* compute matrix inverse A_inv = L_T^(-1) * L^(-1) */
    memset(inverse, 0, n * n * sizeof(inverse[0][0]));
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	fb02 f303 	mul.w	r3, r2, r3
 8007032:	009b      	lsls	r3, r3, #2
 8007034:	461a      	mov	r2, r3
 8007036:	2100      	movs	r1, #0
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f009 fa88 	bl	801054e <memset>
    for(int i = 0; i < n; i++){
 800703e:	2300      	movs	r3, #0
 8007040:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007042:	e04e      	b.n	80070e2 <cholesky_inverse+0x2e6>
        for(int j = 0; j < n; j++){
 8007044:	2300      	movs	r3, #0
 8007046:	633b      	str	r3, [r7, #48]	; 0x30
 8007048:	e044      	b.n	80070d4 <cholesky_inverse+0x2d8>
            for(int k = max(i, j); k < n; k++){
 800704a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800704c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704e:	4293      	cmp	r3, r2
 8007050:	bfb8      	it	lt
 8007052:	4613      	movlt	r3, r2
 8007054:	637b      	str	r3, [r7, #52]	; 0x34
 8007056:	e036      	b.n	80070c6 <cholesky_inverse+0x2ca>
                inverse[i][j] +=  L[k][i] * L[k][j];
 8007058:	462a      	mov	r2, r5
 800705a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705c:	fb03 f302 	mul.w	r3, r3, r2
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	441a      	add	r2, r3
 8007066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	4413      	add	r3, r2
 800706c:	ed93 7a00 	vldr	s14, [r3]
 8007070:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007078:	fb01 f103 	mul.w	r1, r1, r3
 800707c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800707e:	440b      	add	r3, r1
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4413      	add	r3, r2
 8007084:	edd3 6a00 	vldr	s13, [r3]
 8007088:	ea4f 0398 	mov.w	r3, r8, lsr #2
 800708c:	693a      	ldr	r2, [r7, #16]
 800708e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007090:	fb01 f103 	mul.w	r1, r1, r3
 8007094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007096:	440b      	add	r3, r1
 8007098:	009b      	lsls	r3, r3, #2
 800709a:	4413      	add	r3, r2
 800709c:	edd3 7a00 	vldr	s15, [r3]
 80070a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80070a4:	462a      	mov	r2, r5
 80070a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a8:	fb03 f302 	mul.w	r3, r3, r2
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	441a      	add	r2, r3
 80070b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	4413      	add	r3, r2
 80070bc:	edc3 7a00 	vstr	s15, [r3]
            for(int k = max(i, j); k < n; k++){
 80070c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070c2:	3301      	adds	r3, #1
 80070c4:	637b      	str	r3, [r7, #52]	; 0x34
 80070c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	dbc4      	blt.n	8007058 <cholesky_inverse+0x25c>
        for(int j = 0; j < n; j++){
 80070ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d0:	3301      	adds	r3, #1
 80070d2:	633b      	str	r3, [r7, #48]	; 0x30
 80070d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	429a      	cmp	r2, r3
 80070da:	dbb6      	blt.n	800704a <cholesky_inverse+0x24e>
    for(int i = 0; i < n; i++){
 80070dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070de:	3301      	adds	r3, #1
 80070e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	dbac      	blt.n	8007044 <cholesky_inverse+0x248>
 80070ea:	46d5      	mov	sp, sl
 80070ec:	46cd      	mov	sp, r9
            }
        }
    }
}
 80070ee:	bf00      	nop
 80070f0:	3740      	adds	r7, #64	; 0x40
 80070f2:	46bd      	mov	sp, r7
 80070f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080070f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80070fc:	4b0e      	ldr	r3, [pc, #56]	; (8007138 <HAL_Init+0x40>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a0d      	ldr	r2, [pc, #52]	; (8007138 <HAL_Init+0x40>)
 8007102:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007106:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007108:	4b0b      	ldr	r3, [pc, #44]	; (8007138 <HAL_Init+0x40>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a0a      	ldr	r2, [pc, #40]	; (8007138 <HAL_Init+0x40>)
 800710e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007112:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007114:	4b08      	ldr	r3, [pc, #32]	; (8007138 <HAL_Init+0x40>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a07      	ldr	r2, [pc, #28]	; (8007138 <HAL_Init+0x40>)
 800711a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800711e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007120:	2003      	movs	r0, #3
 8007122:	f000 fd8b 	bl	8007c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007126:	2000      	movs	r0, #0
 8007128:	f000 f808 	bl	800713c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800712c:	f7fc fca4 	bl	8003a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	40023c00 	.word	0x40023c00

0800713c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007144:	4b12      	ldr	r3, [pc, #72]	; (8007190 <HAL_InitTick+0x54>)
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	4b12      	ldr	r3, [pc, #72]	; (8007194 <HAL_InitTick+0x58>)
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	4619      	mov	r1, r3
 800714e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007152:	fbb3 f3f1 	udiv	r3, r3, r1
 8007156:	fbb2 f3f3 	udiv	r3, r2, r3
 800715a:	4618      	mov	r0, r3
 800715c:	f000 fda3 	bl	8007ca6 <HAL_SYSTICK_Config>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d001      	beq.n	800716a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007166:	2301      	movs	r3, #1
 8007168:	e00e      	b.n	8007188 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2b0f      	cmp	r3, #15
 800716e:	d80a      	bhi.n	8007186 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007170:	2200      	movs	r2, #0
 8007172:	6879      	ldr	r1, [r7, #4]
 8007174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007178:	f000 fd6b 	bl	8007c52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800717c:	4a06      	ldr	r2, [pc, #24]	; (8007198 <HAL_InitTick+0x5c>)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007182:	2300      	movs	r3, #0
 8007184:	e000      	b.n	8007188 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
}
 8007188:	4618      	mov	r0, r3
 800718a:	3708      	adds	r7, #8
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}
 8007190:	2000014c 	.word	0x2000014c
 8007194:	20000158 	.word	0x20000158
 8007198:	20000154 	.word	0x20000154

0800719c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800719c:	b480      	push	{r7}
 800719e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80071a0:	4b06      	ldr	r3, [pc, #24]	; (80071bc <HAL_IncTick+0x20>)
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	461a      	mov	r2, r3
 80071a6:	4b06      	ldr	r3, [pc, #24]	; (80071c0 <HAL_IncTick+0x24>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4413      	add	r3, r2
 80071ac:	4a04      	ldr	r2, [pc, #16]	; (80071c0 <HAL_IncTick+0x24>)
 80071ae:	6013      	str	r3, [r2, #0]
}
 80071b0:	bf00      	nop
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	20000158 	.word	0x20000158
 80071c0:	2000e190 	.word	0x2000e190

080071c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80071c4:	b480      	push	{r7}
 80071c6:	af00      	add	r7, sp, #0
  return uwTick;
 80071c8:	4b03      	ldr	r3, [pc, #12]	; (80071d8 <HAL_GetTick+0x14>)
 80071ca:	681b      	ldr	r3, [r3, #0]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	2000e190 	.word	0x2000e190

080071dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80071e4:	f7ff ffee 	bl	80071c4 <HAL_GetTick>
 80071e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071f4:	d005      	beq.n	8007202 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80071f6:	4b09      	ldr	r3, [pc, #36]	; (800721c <HAL_Delay+0x40>)
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	461a      	mov	r2, r3
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	4413      	add	r3, r2
 8007200:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007202:	bf00      	nop
 8007204:	f7ff ffde 	bl	80071c4 <HAL_GetTick>
 8007208:	4602      	mov	r2, r0
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	429a      	cmp	r2, r3
 8007212:	d8f7      	bhi.n	8007204 <HAL_Delay+0x28>
  {
  }
}
 8007214:	bf00      	nop
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	20000158 	.word	0x20000158

08007220 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007228:	2300      	movs	r3, #0
 800722a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d101      	bne.n	8007236 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	e033      	b.n	800729e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723a:	2b00      	cmp	r3, #0
 800723c:	d109      	bne.n	8007252 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f7fa fc84 	bl	8001b4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007256:	f003 0310 	and.w	r3, r3, #16
 800725a:	2b00      	cmp	r3, #0
 800725c:	d118      	bne.n	8007290 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007262:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007266:	f023 0302 	bic.w	r3, r3, #2
 800726a:	f043 0202 	orr.w	r2, r3, #2
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 fa94 	bl	80077a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007282:	f023 0303 	bic.w	r3, r3, #3
 8007286:	f043 0201 	orr.w	r2, r3, #1
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	641a      	str	r2, [r3, #64]	; 0x40
 800728e:	e001      	b.n	8007294 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800729c:	7bfb      	ldrb	r3, [r7, #15]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3710      	adds	r7, #16
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
	...

080072a8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b086      	sub	sp, #24
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80072b4:	2300      	movs	r3, #0
 80072b6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d101      	bne.n	80072c6 <HAL_ADC_Start_DMA+0x1e>
 80072c2:	2302      	movs	r3, #2
 80072c4:	e0cc      	b.n	8007460 <HAL_ADC_Start_DMA+0x1b8>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	f003 0301 	and.w	r3, r3, #1
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d018      	beq.n	800730e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	689a      	ldr	r2, [r3, #8]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f042 0201 	orr.w	r2, r2, #1
 80072ea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80072ec:	4b5e      	ldr	r3, [pc, #376]	; (8007468 <HAL_ADC_Start_DMA+0x1c0>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a5e      	ldr	r2, [pc, #376]	; (800746c <HAL_ADC_Start_DMA+0x1c4>)
 80072f2:	fba2 2303 	umull	r2, r3, r2, r3
 80072f6:	0c9a      	lsrs	r2, r3, #18
 80072f8:	4613      	mov	r3, r2
 80072fa:	005b      	lsls	r3, r3, #1
 80072fc:	4413      	add	r3, r2
 80072fe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007300:	e002      	b.n	8007308 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	3b01      	subs	r3, #1
 8007306:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d1f9      	bne.n	8007302 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	689b      	ldr	r3, [r3, #8]
 8007314:	f003 0301 	and.w	r3, r3, #1
 8007318:	2b01      	cmp	r3, #1
 800731a:	f040 80a0 	bne.w	800745e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007322:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007326:	f023 0301 	bic.w	r3, r3, #1
 800732a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800733c:	2b00      	cmp	r3, #0
 800733e:	d007      	beq.n	8007350 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007344:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007348:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007354:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800735c:	d106      	bne.n	800736c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007362:	f023 0206 	bic.w	r2, r3, #6
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	645a      	str	r2, [r3, #68]	; 0x44
 800736a:	e002      	b.n	8007372 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2200      	movs	r2, #0
 8007370:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2200      	movs	r2, #0
 8007376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800737a:	4b3d      	ldr	r3, [pc, #244]	; (8007470 <HAL_ADC_Start_DMA+0x1c8>)
 800737c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007382:	4a3c      	ldr	r2, [pc, #240]	; (8007474 <HAL_ADC_Start_DMA+0x1cc>)
 8007384:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800738a:	4a3b      	ldr	r2, [pc, #236]	; (8007478 <HAL_ADC_Start_DMA+0x1d0>)
 800738c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007392:	4a3a      	ldr	r2, [pc, #232]	; (800747c <HAL_ADC_Start_DMA+0x1d4>)
 8007394:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800739e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	685a      	ldr	r2, [r3, #4]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80073ae:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	689a      	ldr	r2, [r3, #8]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073be:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	334c      	adds	r3, #76	; 0x4c
 80073ca:	4619      	mov	r1, r3
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f000 fd24 	bl	8007e1c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	f003 031f 	and.w	r3, r3, #31
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d12a      	bne.n	8007436 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a26      	ldr	r2, [pc, #152]	; (8007480 <HAL_ADC_Start_DMA+0x1d8>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d015      	beq.n	8007416 <HAL_ADC_Start_DMA+0x16e>
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a25      	ldr	r2, [pc, #148]	; (8007484 <HAL_ADC_Start_DMA+0x1dc>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d105      	bne.n	8007400 <HAL_ADC_Start_DMA+0x158>
 80073f4:	4b1e      	ldr	r3, [pc, #120]	; (8007470 <HAL_ADC_Start_DMA+0x1c8>)
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	f003 031f 	and.w	r3, r3, #31
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00a      	beq.n	8007416 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a20      	ldr	r2, [pc, #128]	; (8007488 <HAL_ADC_Start_DMA+0x1e0>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d129      	bne.n	800745e <HAL_ADC_Start_DMA+0x1b6>
 800740a:	4b19      	ldr	r3, [pc, #100]	; (8007470 <HAL_ADC_Start_DMA+0x1c8>)
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	f003 031f 	and.w	r3, r3, #31
 8007412:	2b0f      	cmp	r3, #15
 8007414:	d823      	bhi.n	800745e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007420:	2b00      	cmp	r3, #0
 8007422:	d11c      	bne.n	800745e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	689a      	ldr	r2, [r3, #8]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007432:	609a      	str	r2, [r3, #8]
 8007434:	e013      	b.n	800745e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a11      	ldr	r2, [pc, #68]	; (8007480 <HAL_ADC_Start_DMA+0x1d8>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d10e      	bne.n	800745e <HAL_ADC_Start_DMA+0x1b6>
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800744a:	2b00      	cmp	r3, #0
 800744c:	d107      	bne.n	800745e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	689a      	ldr	r2, [r3, #8]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800745c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	3718      	adds	r7, #24
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}
 8007468:	2000014c 	.word	0x2000014c
 800746c:	431bde83 	.word	0x431bde83
 8007470:	40012300 	.word	0x40012300
 8007474:	08007999 	.word	0x08007999
 8007478:	08007a53 	.word	0x08007a53
 800747c:	08007a6f 	.word	0x08007a6f
 8007480:	40012000 	.word	0x40012000
 8007484:	40012100 	.word	0x40012100
 8007488:	40012200 	.word	0x40012200

0800748c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007494:	2300      	movs	r3, #0
 8007496:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d101      	bne.n	80074a6 <HAL_ADC_Stop_DMA+0x1a>
 80074a2:	2302      	movs	r3, #2
 80074a4:	e038      	b.n	8007518 <HAL_ADC_Stop_DMA+0x8c>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2201      	movs	r2, #1
 80074aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	689a      	ldr	r2, [r3, #8]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f022 0201 	bic.w	r2, r2, #1
 80074bc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	689b      	ldr	r3, [r3, #8]
 80074c4:	f003 0301 	and.w	r3, r3, #1
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d120      	bne.n	800750e <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	689a      	ldr	r2, [r3, #8]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074da:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e0:	4618      	mov	r0, r3
 80074e2:	f000 fcf3 	bl	8007ecc <HAL_DMA_Abort>
 80074e6:	4603      	mov	r3, r0
 80074e8:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	685a      	ldr	r2, [r3, #4]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80074f8:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007502:	f023 0301 	bic.w	r3, r3, #1
 8007506:	f043 0201 	orr.w	r2, r3, #1
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8007516:	7bfb      	ldrb	r3, [r7, #15]
}
 8007518:	4618      	mov	r0, r3
 800751a:	3710      	adds	r7, #16
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8007528:	bf00      	nop
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800753c:	bf00      	nop
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007550:	bf00      	nop
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800755c:	b480      	push	{r7}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007566:	2300      	movs	r3, #0
 8007568:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007570:	2b01      	cmp	r3, #1
 8007572:	d101      	bne.n	8007578 <HAL_ADC_ConfigChannel+0x1c>
 8007574:	2302      	movs	r3, #2
 8007576:	e105      	b.n	8007784 <HAL_ADC_ConfigChannel+0x228>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2b09      	cmp	r3, #9
 8007586:	d925      	bls.n	80075d4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68d9      	ldr	r1, [r3, #12]
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	b29b      	uxth	r3, r3
 8007594:	461a      	mov	r2, r3
 8007596:	4613      	mov	r3, r2
 8007598:	005b      	lsls	r3, r3, #1
 800759a:	4413      	add	r3, r2
 800759c:	3b1e      	subs	r3, #30
 800759e:	2207      	movs	r2, #7
 80075a0:	fa02 f303 	lsl.w	r3, r2, r3
 80075a4:	43da      	mvns	r2, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	400a      	ands	r2, r1
 80075ac:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	68d9      	ldr	r1, [r3, #12]
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	689a      	ldr	r2, [r3, #8]
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	b29b      	uxth	r3, r3
 80075be:	4618      	mov	r0, r3
 80075c0:	4603      	mov	r3, r0
 80075c2:	005b      	lsls	r3, r3, #1
 80075c4:	4403      	add	r3, r0
 80075c6:	3b1e      	subs	r3, #30
 80075c8:	409a      	lsls	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	430a      	orrs	r2, r1
 80075d0:	60da      	str	r2, [r3, #12]
 80075d2:	e022      	b.n	800761a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	6919      	ldr	r1, [r3, #16]
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	b29b      	uxth	r3, r3
 80075e0:	461a      	mov	r2, r3
 80075e2:	4613      	mov	r3, r2
 80075e4:	005b      	lsls	r3, r3, #1
 80075e6:	4413      	add	r3, r2
 80075e8:	2207      	movs	r2, #7
 80075ea:	fa02 f303 	lsl.w	r3, r2, r3
 80075ee:	43da      	mvns	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	400a      	ands	r2, r1
 80075f6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	6919      	ldr	r1, [r3, #16]
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	689a      	ldr	r2, [r3, #8]
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	b29b      	uxth	r3, r3
 8007608:	4618      	mov	r0, r3
 800760a:	4603      	mov	r3, r0
 800760c:	005b      	lsls	r3, r3, #1
 800760e:	4403      	add	r3, r0
 8007610:	409a      	lsls	r2, r3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	430a      	orrs	r2, r1
 8007618:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	2b06      	cmp	r3, #6
 8007620:	d824      	bhi.n	800766c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	685a      	ldr	r2, [r3, #4]
 800762c:	4613      	mov	r3, r2
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	4413      	add	r3, r2
 8007632:	3b05      	subs	r3, #5
 8007634:	221f      	movs	r2, #31
 8007636:	fa02 f303 	lsl.w	r3, r2, r3
 800763a:	43da      	mvns	r2, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	400a      	ands	r2, r1
 8007642:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	b29b      	uxth	r3, r3
 8007650:	4618      	mov	r0, r3
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	685a      	ldr	r2, [r3, #4]
 8007656:	4613      	mov	r3, r2
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	4413      	add	r3, r2
 800765c:	3b05      	subs	r3, #5
 800765e:	fa00 f203 	lsl.w	r2, r0, r3
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	430a      	orrs	r2, r1
 8007668:	635a      	str	r2, [r3, #52]	; 0x34
 800766a:	e04c      	b.n	8007706 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	2b0c      	cmp	r3, #12
 8007672:	d824      	bhi.n	80076be <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	685a      	ldr	r2, [r3, #4]
 800767e:	4613      	mov	r3, r2
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	4413      	add	r3, r2
 8007684:	3b23      	subs	r3, #35	; 0x23
 8007686:	221f      	movs	r2, #31
 8007688:	fa02 f303 	lsl.w	r3, r2, r3
 800768c:	43da      	mvns	r2, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	400a      	ands	r2, r1
 8007694:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	4618      	mov	r0, r3
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	685a      	ldr	r2, [r3, #4]
 80076a8:	4613      	mov	r3, r2
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	4413      	add	r3, r2
 80076ae:	3b23      	subs	r3, #35	; 0x23
 80076b0:	fa00 f203 	lsl.w	r2, r0, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	430a      	orrs	r2, r1
 80076ba:	631a      	str	r2, [r3, #48]	; 0x30
 80076bc:	e023      	b.n	8007706 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	685a      	ldr	r2, [r3, #4]
 80076c8:	4613      	mov	r3, r2
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	4413      	add	r3, r2
 80076ce:	3b41      	subs	r3, #65	; 0x41
 80076d0:	221f      	movs	r2, #31
 80076d2:	fa02 f303 	lsl.w	r3, r2, r3
 80076d6:	43da      	mvns	r2, r3
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	400a      	ands	r2, r1
 80076de:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	4618      	mov	r0, r3
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	685a      	ldr	r2, [r3, #4]
 80076f2:	4613      	mov	r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	4413      	add	r3, r2
 80076f8:	3b41      	subs	r3, #65	; 0x41
 80076fa:	fa00 f203 	lsl.w	r2, r0, r3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	430a      	orrs	r2, r1
 8007704:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007706:	4b22      	ldr	r3, [pc, #136]	; (8007790 <HAL_ADC_ConfigChannel+0x234>)
 8007708:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a21      	ldr	r2, [pc, #132]	; (8007794 <HAL_ADC_ConfigChannel+0x238>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d109      	bne.n	8007728 <HAL_ADC_ConfigChannel+0x1cc>
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2b12      	cmp	r3, #18
 800771a:	d105      	bne.n	8007728 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a19      	ldr	r2, [pc, #100]	; (8007794 <HAL_ADC_ConfigChannel+0x238>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d123      	bne.n	800777a <HAL_ADC_ConfigChannel+0x21e>
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2b10      	cmp	r3, #16
 8007738:	d003      	beq.n	8007742 <HAL_ADC_ConfigChannel+0x1e6>
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2b11      	cmp	r3, #17
 8007740:	d11b      	bne.n	800777a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2b10      	cmp	r3, #16
 8007754:	d111      	bne.n	800777a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007756:	4b10      	ldr	r3, [pc, #64]	; (8007798 <HAL_ADC_ConfigChannel+0x23c>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a10      	ldr	r2, [pc, #64]	; (800779c <HAL_ADC_ConfigChannel+0x240>)
 800775c:	fba2 2303 	umull	r2, r3, r2, r3
 8007760:	0c9a      	lsrs	r2, r3, #18
 8007762:	4613      	mov	r3, r2
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	4413      	add	r3, r2
 8007768:	005b      	lsls	r3, r3, #1
 800776a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800776c:	e002      	b.n	8007774 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	3b01      	subs	r3, #1
 8007772:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d1f9      	bne.n	800776e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3714      	adds	r7, #20
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr
 8007790:	40012300 	.word	0x40012300
 8007794:	40012000 	.word	0x40012000
 8007798:	2000014c 	.word	0x2000014c
 800779c:	431bde83 	.word	0x431bde83

080077a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80077a8:	4b79      	ldr	r3, [pc, #484]	; (8007990 <ADC_Init+0x1f0>)
 80077aa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	685a      	ldr	r2, [r3, #4]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	431a      	orrs	r2, r3
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	685a      	ldr	r2, [r3, #4]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	6859      	ldr	r1, [r3, #4]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	021a      	lsls	r2, r3, #8
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	430a      	orrs	r2, r1
 80077e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	685a      	ldr	r2, [r3, #4]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80077f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	6859      	ldr	r1, [r3, #4]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	689a      	ldr	r2, [r3, #8]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	430a      	orrs	r2, r1
 800780a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	689a      	ldr	r2, [r3, #8]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800781a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	6899      	ldr	r1, [r3, #8]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	68da      	ldr	r2, [r3, #12]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	430a      	orrs	r2, r1
 800782c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007832:	4a58      	ldr	r2, [pc, #352]	; (8007994 <ADC_Init+0x1f4>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d022      	beq.n	800787e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	689a      	ldr	r2, [r3, #8]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007846:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	6899      	ldr	r1, [r3, #8]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	430a      	orrs	r2, r1
 8007858:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	689a      	ldr	r2, [r3, #8]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007868:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	6899      	ldr	r1, [r3, #8]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	430a      	orrs	r2, r1
 800787a:	609a      	str	r2, [r3, #8]
 800787c:	e00f      	b.n	800789e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	689a      	ldr	r2, [r3, #8]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800788c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	689a      	ldr	r2, [r3, #8]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800789c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	689a      	ldr	r2, [r3, #8]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f022 0202 	bic.w	r2, r2, #2
 80078ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	6899      	ldr	r1, [r3, #8]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	7e1b      	ldrb	r3, [r3, #24]
 80078b8:	005a      	lsls	r2, r3, #1
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	430a      	orrs	r2, r1
 80078c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d01b      	beq.n	8007904 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	685a      	ldr	r2, [r3, #4]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	685a      	ldr	r2, [r3, #4]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80078ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	6859      	ldr	r1, [r3, #4]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f6:	3b01      	subs	r3, #1
 80078f8:	035a      	lsls	r2, r3, #13
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	430a      	orrs	r2, r1
 8007900:	605a      	str	r2, [r3, #4]
 8007902:	e007      	b.n	8007914 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	685a      	ldr	r2, [r3, #4]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007912:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007922:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	69db      	ldr	r3, [r3, #28]
 800792e:	3b01      	subs	r3, #1
 8007930:	051a      	lsls	r2, r3, #20
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	430a      	orrs	r2, r1
 8007938:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	689a      	ldr	r2, [r3, #8]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007948:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	6899      	ldr	r1, [r3, #8]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007956:	025a      	lsls	r2, r3, #9
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	430a      	orrs	r2, r1
 800795e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	689a      	ldr	r2, [r3, #8]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800796e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	6899      	ldr	r1, [r3, #8]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	695b      	ldr	r3, [r3, #20]
 800797a:	029a      	lsls	r2, r3, #10
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	430a      	orrs	r2, r1
 8007982:	609a      	str	r2, [r3, #8]
}
 8007984:	bf00      	nop
 8007986:	3714      	adds	r7, #20
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr
 8007990:	40012300 	.word	0x40012300
 8007994:	0f000001 	.word	0x0f000001

08007998 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079aa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d13c      	bne.n	8007a2c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d12b      	bne.n	8007a24 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d127      	bne.n	8007a24 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079da:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d006      	beq.n	80079f0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d119      	bne.n	8007a24 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	685a      	ldr	r2, [r3, #4]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f022 0220 	bic.w	r2, r2, #32
 80079fe:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d105      	bne.n	8007a24 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1c:	f043 0201 	orr.w	r2, r3, #1
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f7ff fd7b 	bl	8007520 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007a2a:	e00e      	b.n	8007a4a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a30:	f003 0310 	and.w	r3, r3, #16
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d003      	beq.n	8007a40 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f7ff fd85 	bl	8007548 <HAL_ADC_ErrorCallback>
}
 8007a3e:	e004      	b.n	8007a4a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	4798      	blx	r3
}
 8007a4a:	bf00      	nop
 8007a4c:	3710      	adds	r7, #16
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b084      	sub	sp, #16
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a5e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	f7ff fd67 	bl	8007534 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007a66:	bf00      	nop
 8007a68:	3710      	adds	r7, #16
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b084      	sub	sp, #16
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a7a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2240      	movs	r2, #64	; 0x40
 8007a80:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a86:	f043 0204 	orr.w	r2, r3, #4
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f7ff fd5a 	bl	8007548 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007a94:	bf00      	nop
 8007a96:	3710      	adds	r7, #16
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	bd80      	pop	{r7, pc}

08007a9c <__NVIC_SetPriorityGrouping>:
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b085      	sub	sp, #20
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f003 0307 	and.w	r3, r3, #7
 8007aaa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007aac:	4b0c      	ldr	r3, [pc, #48]	; (8007ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007ab2:	68ba      	ldr	r2, [r7, #8]
 8007ab4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007ab8:	4013      	ands	r3, r2
 8007aba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007ac4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007ac8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007ace:	4a04      	ldr	r2, [pc, #16]	; (8007ae0 <__NVIC_SetPriorityGrouping+0x44>)
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	60d3      	str	r3, [r2, #12]
}
 8007ad4:	bf00      	nop
 8007ad6:	3714      	adds	r7, #20
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr
 8007ae0:	e000ed00 	.word	0xe000ed00

08007ae4 <__NVIC_GetPriorityGrouping>:
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007ae8:	4b04      	ldr	r3, [pc, #16]	; (8007afc <__NVIC_GetPriorityGrouping+0x18>)
 8007aea:	68db      	ldr	r3, [r3, #12]
 8007aec:	0a1b      	lsrs	r3, r3, #8
 8007aee:	f003 0307 	and.w	r3, r3, #7
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr
 8007afc:	e000ed00 	.word	0xe000ed00

08007b00 <__NVIC_EnableIRQ>:
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	4603      	mov	r3, r0
 8007b08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	db0b      	blt.n	8007b2a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007b12:	79fb      	ldrb	r3, [r7, #7]
 8007b14:	f003 021f 	and.w	r2, r3, #31
 8007b18:	4907      	ldr	r1, [pc, #28]	; (8007b38 <__NVIC_EnableIRQ+0x38>)
 8007b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b1e:	095b      	lsrs	r3, r3, #5
 8007b20:	2001      	movs	r0, #1
 8007b22:	fa00 f202 	lsl.w	r2, r0, r2
 8007b26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007b2a:	bf00      	nop
 8007b2c:	370c      	adds	r7, #12
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
 8007b36:	bf00      	nop
 8007b38:	e000e100 	.word	0xe000e100

08007b3c <__NVIC_SetPriority>:
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	4603      	mov	r3, r0
 8007b44:	6039      	str	r1, [r7, #0]
 8007b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	db0a      	blt.n	8007b66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	b2da      	uxtb	r2, r3
 8007b54:	490c      	ldr	r1, [pc, #48]	; (8007b88 <__NVIC_SetPriority+0x4c>)
 8007b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b5a:	0112      	lsls	r2, r2, #4
 8007b5c:	b2d2      	uxtb	r2, r2
 8007b5e:	440b      	add	r3, r1
 8007b60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007b64:	e00a      	b.n	8007b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	b2da      	uxtb	r2, r3
 8007b6a:	4908      	ldr	r1, [pc, #32]	; (8007b8c <__NVIC_SetPriority+0x50>)
 8007b6c:	79fb      	ldrb	r3, [r7, #7]
 8007b6e:	f003 030f 	and.w	r3, r3, #15
 8007b72:	3b04      	subs	r3, #4
 8007b74:	0112      	lsls	r2, r2, #4
 8007b76:	b2d2      	uxtb	r2, r2
 8007b78:	440b      	add	r3, r1
 8007b7a:	761a      	strb	r2, [r3, #24]
}
 8007b7c:	bf00      	nop
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr
 8007b88:	e000e100 	.word	0xe000e100
 8007b8c:	e000ed00 	.word	0xe000ed00

08007b90 <NVIC_EncodePriority>:
{
 8007b90:	b480      	push	{r7}
 8007b92:	b089      	sub	sp, #36	; 0x24
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f003 0307 	and.w	r3, r3, #7
 8007ba2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ba4:	69fb      	ldr	r3, [r7, #28]
 8007ba6:	f1c3 0307 	rsb	r3, r3, #7
 8007baa:	2b04      	cmp	r3, #4
 8007bac:	bf28      	it	cs
 8007bae:	2304      	movcs	r3, #4
 8007bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	3304      	adds	r3, #4
 8007bb6:	2b06      	cmp	r3, #6
 8007bb8:	d902      	bls.n	8007bc0 <NVIC_EncodePriority+0x30>
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	3b03      	subs	r3, #3
 8007bbe:	e000      	b.n	8007bc2 <NVIC_EncodePriority+0x32>
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007bc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007bc8:	69bb      	ldr	r3, [r7, #24]
 8007bca:	fa02 f303 	lsl.w	r3, r2, r3
 8007bce:	43da      	mvns	r2, r3
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	401a      	ands	r2, r3
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007bd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	fa01 f303 	lsl.w	r3, r1, r3
 8007be2:	43d9      	mvns	r1, r3
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007be8:	4313      	orrs	r3, r2
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3724      	adds	r7, #36	; 0x24
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr
	...

08007bf8 <SysTick_Config>:
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	3b01      	subs	r3, #1
 8007c04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007c08:	d301      	bcc.n	8007c0e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e00f      	b.n	8007c2e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007c0e:	4a0a      	ldr	r2, [pc, #40]	; (8007c38 <SysTick_Config+0x40>)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	3b01      	subs	r3, #1
 8007c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007c16:	210f      	movs	r1, #15
 8007c18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c1c:	f7ff ff8e 	bl	8007b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007c20:	4b05      	ldr	r3, [pc, #20]	; (8007c38 <SysTick_Config+0x40>)
 8007c22:	2200      	movs	r2, #0
 8007c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007c26:	4b04      	ldr	r3, [pc, #16]	; (8007c38 <SysTick_Config+0x40>)
 8007c28:	2207      	movs	r2, #7
 8007c2a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3708      	adds	r7, #8
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop
 8007c38:	e000e010 	.word	0xe000e010

08007c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f7ff ff29 	bl	8007a9c <__NVIC_SetPriorityGrouping>
}
 8007c4a:	bf00      	nop
 8007c4c:	3708      	adds	r7, #8
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b086      	sub	sp, #24
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	4603      	mov	r3, r0
 8007c5a:	60b9      	str	r1, [r7, #8]
 8007c5c:	607a      	str	r2, [r7, #4]
 8007c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007c60:	2300      	movs	r3, #0
 8007c62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007c64:	f7ff ff3e 	bl	8007ae4 <__NVIC_GetPriorityGrouping>
 8007c68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	68b9      	ldr	r1, [r7, #8]
 8007c6e:	6978      	ldr	r0, [r7, #20]
 8007c70:	f7ff ff8e 	bl	8007b90 <NVIC_EncodePriority>
 8007c74:	4602      	mov	r2, r0
 8007c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c7a:	4611      	mov	r1, r2
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7ff ff5d 	bl	8007b3c <__NVIC_SetPriority>
}
 8007c82:	bf00      	nop
 8007c84:	3718      	adds	r7, #24
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}

08007c8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b082      	sub	sp, #8
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	4603      	mov	r3, r0
 8007c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f7ff ff31 	bl	8007b00 <__NVIC_EnableIRQ>
}
 8007c9e:	bf00      	nop
 8007ca0:	3708      	adds	r7, #8
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b082      	sub	sp, #8
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f7ff ffa2 	bl	8007bf8 <SysTick_Config>
 8007cb4:	4603      	mov	r3, r0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3708      	adds	r7, #8
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
	...

08007cc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b086      	sub	sp, #24
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007ccc:	f7ff fa7a 	bl	80071c4 <HAL_GetTick>
 8007cd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d101      	bne.n	8007cdc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e099      	b.n	8007e10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f022 0201 	bic.w	r2, r2, #1
 8007cfa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007cfc:	e00f      	b.n	8007d1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007cfe:	f7ff fa61 	bl	80071c4 <HAL_GetTick>
 8007d02:	4602      	mov	r2, r0
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	1ad3      	subs	r3, r2, r3
 8007d08:	2b05      	cmp	r3, #5
 8007d0a:	d908      	bls.n	8007d1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2220      	movs	r2, #32
 8007d10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2203      	movs	r2, #3
 8007d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007d1a:	2303      	movs	r3, #3
 8007d1c:	e078      	b.n	8007e10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 0301 	and.w	r3, r3, #1
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d1e8      	bne.n	8007cfe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007d34:	697a      	ldr	r2, [r7, #20]
 8007d36:	4b38      	ldr	r3, [pc, #224]	; (8007e18 <HAL_DMA_Init+0x158>)
 8007d38:	4013      	ands	r3, r2
 8007d3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	685a      	ldr	r2, [r3, #4]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007d4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	691b      	ldr	r3, [r3, #16]
 8007d50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	699b      	ldr	r3, [r3, #24]
 8007d5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a1b      	ldr	r3, [r3, #32]
 8007d68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007d6a:	697a      	ldr	r2, [r7, #20]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d74:	2b04      	cmp	r3, #4
 8007d76:	d107      	bne.n	8007d88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d80:	4313      	orrs	r3, r2
 8007d82:	697a      	ldr	r2, [r7, #20]
 8007d84:	4313      	orrs	r3, r2
 8007d86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	697a      	ldr	r2, [r7, #20]
 8007d8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	695b      	ldr	r3, [r3, #20]
 8007d96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	f023 0307 	bic.w	r3, r3, #7
 8007d9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da4:	697a      	ldr	r2, [r7, #20]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dae:	2b04      	cmp	r3, #4
 8007db0:	d117      	bne.n	8007de2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db6:	697a      	ldr	r2, [r7, #20]
 8007db8:	4313      	orrs	r3, r2
 8007dba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00e      	beq.n	8007de2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 fb0d 	bl	80083e4 <DMA_CheckFifoParam>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d008      	beq.n	8007de2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2240      	movs	r2, #64	; 0x40
 8007dd4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2201      	movs	r2, #1
 8007dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007dde:	2301      	movs	r3, #1
 8007de0:	e016      	b.n	8007e10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	697a      	ldr	r2, [r7, #20]
 8007de8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fac4 	bl	8008378 <DMA_CalcBaseAndBitshift>
 8007df0:	4603      	mov	r3, r0
 8007df2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007df8:	223f      	movs	r2, #63	; 0x3f
 8007dfa:	409a      	lsls	r2, r3
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007e0e:	2300      	movs	r3, #0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3718      	adds	r7, #24
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}
 8007e18:	f010803f 	.word	0xf010803f

08007e1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b086      	sub	sp, #24
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	607a      	str	r2, [r7, #4]
 8007e28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d101      	bne.n	8007e42 <HAL_DMA_Start_IT+0x26>
 8007e3e:	2302      	movs	r3, #2
 8007e40:	e040      	b.n	8007ec4 <HAL_DMA_Start_IT+0xa8>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2201      	movs	r2, #1
 8007e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d12f      	bne.n	8007eb6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2202      	movs	r2, #2
 8007e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	68b9      	ldr	r1, [r7, #8]
 8007e6a:	68f8      	ldr	r0, [r7, #12]
 8007e6c:	f000 fa56 	bl	800831c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e74:	223f      	movs	r2, #63	; 0x3f
 8007e76:	409a      	lsls	r2, r3
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f042 0216 	orr.w	r2, r2, #22
 8007e8a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d007      	beq.n	8007ea4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f042 0208 	orr.w	r2, r2, #8
 8007ea2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f042 0201 	orr.w	r2, r2, #1
 8007eb2:	601a      	str	r2, [r3, #0]
 8007eb4:	e005      	b.n	8007ec2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007ebe:	2302      	movs	r3, #2
 8007ec0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3718      	adds	r7, #24
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ed8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007eda:	f7ff f973 	bl	80071c4 <HAL_GetTick>
 8007ede:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	2b02      	cmp	r3, #2
 8007eea:	d008      	beq.n	8007efe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2280      	movs	r2, #128	; 0x80
 8007ef0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e052      	b.n	8007fa4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f022 0216 	bic.w	r2, r2, #22
 8007f0c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	695a      	ldr	r2, [r3, #20]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f1c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d103      	bne.n	8007f2e <HAL_DMA_Abort+0x62>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d007      	beq.n	8007f3e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f022 0208 	bic.w	r2, r2, #8
 8007f3c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f022 0201 	bic.w	r2, r2, #1
 8007f4c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007f4e:	e013      	b.n	8007f78 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007f50:	f7ff f938 	bl	80071c4 <HAL_GetTick>
 8007f54:	4602      	mov	r2, r0
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	1ad3      	subs	r3, r2, r3
 8007f5a:	2b05      	cmp	r3, #5
 8007f5c:	d90c      	bls.n	8007f78 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2220      	movs	r2, #32
 8007f62:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2203      	movs	r2, #3
 8007f70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8007f74:	2303      	movs	r3, #3
 8007f76:	e015      	b.n	8007fa4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f003 0301 	and.w	r3, r3, #1
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d1e4      	bne.n	8007f50 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f8a:	223f      	movs	r2, #63	; 0x3f
 8007f8c:	409a      	lsls	r2, r3
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2200      	movs	r2, #0
 8007f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8007fa2:	2300      	movs	r3, #0
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3710      	adds	r7, #16
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}

08007fac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	d004      	beq.n	8007fca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2280      	movs	r2, #128	; 0x80
 8007fc4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e00c      	b.n	8007fe4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2205      	movs	r2, #5
 8007fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f022 0201 	bic.w	r2, r2, #1
 8007fe0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b086      	sub	sp, #24
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007ffc:	4b92      	ldr	r3, [pc, #584]	; (8008248 <HAL_DMA_IRQHandler+0x258>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a92      	ldr	r2, [pc, #584]	; (800824c <HAL_DMA_IRQHandler+0x25c>)
 8008002:	fba2 2303 	umull	r2, r3, r2, r3
 8008006:	0a9b      	lsrs	r3, r3, #10
 8008008:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800800e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800801a:	2208      	movs	r2, #8
 800801c:	409a      	lsls	r2, r3
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	4013      	ands	r3, r2
 8008022:	2b00      	cmp	r3, #0
 8008024:	d01a      	beq.n	800805c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 0304 	and.w	r3, r3, #4
 8008030:	2b00      	cmp	r3, #0
 8008032:	d013      	beq.n	800805c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f022 0204 	bic.w	r2, r2, #4
 8008042:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008048:	2208      	movs	r2, #8
 800804a:	409a      	lsls	r2, r3
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008054:	f043 0201 	orr.w	r2, r3, #1
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008060:	2201      	movs	r2, #1
 8008062:	409a      	lsls	r2, r3
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	4013      	ands	r3, r2
 8008068:	2b00      	cmp	r3, #0
 800806a:	d012      	beq.n	8008092 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	695b      	ldr	r3, [r3, #20]
 8008072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008076:	2b00      	cmp	r3, #0
 8008078:	d00b      	beq.n	8008092 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800807e:	2201      	movs	r2, #1
 8008080:	409a      	lsls	r2, r3
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800808a:	f043 0202 	orr.w	r2, r3, #2
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008096:	2204      	movs	r2, #4
 8008098:	409a      	lsls	r2, r3
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	4013      	ands	r3, r2
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d012      	beq.n	80080c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 0302 	and.w	r3, r3, #2
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d00b      	beq.n	80080c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080b4:	2204      	movs	r2, #4
 80080b6:	409a      	lsls	r2, r3
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080c0:	f043 0204 	orr.w	r2, r3, #4
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080cc:	2210      	movs	r2, #16
 80080ce:	409a      	lsls	r2, r3
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	4013      	ands	r3, r2
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d043      	beq.n	8008160 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f003 0308 	and.w	r3, r3, #8
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d03c      	beq.n	8008160 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080ea:	2210      	movs	r2, #16
 80080ec:	409a      	lsls	r2, r3
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d018      	beq.n	8008132 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800810a:	2b00      	cmp	r3, #0
 800810c:	d108      	bne.n	8008120 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008112:	2b00      	cmp	r3, #0
 8008114:	d024      	beq.n	8008160 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	4798      	blx	r3
 800811e:	e01f      	b.n	8008160 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008124:	2b00      	cmp	r3, #0
 8008126:	d01b      	beq.n	8008160 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	4798      	blx	r3
 8008130:	e016      	b.n	8008160 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800813c:	2b00      	cmp	r3, #0
 800813e:	d107      	bne.n	8008150 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681a      	ldr	r2, [r3, #0]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f022 0208 	bic.w	r2, r2, #8
 800814e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008154:	2b00      	cmp	r3, #0
 8008156:	d003      	beq.n	8008160 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008164:	2220      	movs	r2, #32
 8008166:	409a      	lsls	r2, r3
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	4013      	ands	r3, r2
 800816c:	2b00      	cmp	r3, #0
 800816e:	f000 808e 	beq.w	800828e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f003 0310 	and.w	r3, r3, #16
 800817c:	2b00      	cmp	r3, #0
 800817e:	f000 8086 	beq.w	800828e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008186:	2220      	movs	r2, #32
 8008188:	409a      	lsls	r2, r3
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008194:	b2db      	uxtb	r3, r3
 8008196:	2b05      	cmp	r3, #5
 8008198:	d136      	bne.n	8008208 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f022 0216 	bic.w	r2, r2, #22
 80081a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	695a      	ldr	r2, [r3, #20]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80081b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d103      	bne.n	80081ca <HAL_DMA_IRQHandler+0x1da>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d007      	beq.n	80081da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f022 0208 	bic.w	r2, r2, #8
 80081d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081de:	223f      	movs	r2, #63	; 0x3f
 80081e0:	409a      	lsls	r2, r3
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2201      	movs	r2, #1
 80081f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d07d      	beq.n	80082fa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	4798      	blx	r3
        }
        return;
 8008206:	e078      	b.n	80082fa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008212:	2b00      	cmp	r3, #0
 8008214:	d01c      	beq.n	8008250 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008220:	2b00      	cmp	r3, #0
 8008222:	d108      	bne.n	8008236 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008228:	2b00      	cmp	r3, #0
 800822a:	d030      	beq.n	800828e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	4798      	blx	r3
 8008234:	e02b      	b.n	800828e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800823a:	2b00      	cmp	r3, #0
 800823c:	d027      	beq.n	800828e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	4798      	blx	r3
 8008246:	e022      	b.n	800828e <HAL_DMA_IRQHandler+0x29e>
 8008248:	2000014c 	.word	0x2000014c
 800824c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800825a:	2b00      	cmp	r3, #0
 800825c:	d10f      	bne.n	800827e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	681a      	ldr	r2, [r3, #0]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f022 0210 	bic.w	r2, r2, #16
 800826c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2201      	movs	r2, #1
 800827a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008282:	2b00      	cmp	r3, #0
 8008284:	d003      	beq.n	800828e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008292:	2b00      	cmp	r3, #0
 8008294:	d032      	beq.n	80082fc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800829a:	f003 0301 	and.w	r3, r3, #1
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d022      	beq.n	80082e8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2205      	movs	r2, #5
 80082a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f022 0201 	bic.w	r2, r2, #1
 80082b8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	3301      	adds	r3, #1
 80082be:	60bb      	str	r3, [r7, #8]
 80082c0:	697a      	ldr	r2, [r7, #20]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d307      	bcc.n	80082d6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f003 0301 	and.w	r3, r3, #1
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d1f2      	bne.n	80082ba <HAL_DMA_IRQHandler+0x2ca>
 80082d4:	e000      	b.n	80082d8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80082d6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2200      	movs	r2, #0
 80082dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d005      	beq.n	80082fc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	4798      	blx	r3
 80082f8:	e000      	b.n	80082fc <HAL_DMA_IRQHandler+0x30c>
        return;
 80082fa:	bf00      	nop
    }
  }
}
 80082fc:	3718      	adds	r7, #24
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop

08008304 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008310:	4618      	mov	r0, r3
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	607a      	str	r2, [r7, #4]
 8008328:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008338:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	683a      	ldr	r2, [r7, #0]
 8008340:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	2b40      	cmp	r3, #64	; 0x40
 8008348:	d108      	bne.n	800835c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	68ba      	ldr	r2, [r7, #8]
 8008358:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800835a:	e007      	b.n	800836c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	68ba      	ldr	r2, [r7, #8]
 8008362:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	60da      	str	r2, [r3, #12]
}
 800836c:	bf00      	nop
 800836e:	3714      	adds	r7, #20
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	b2db      	uxtb	r3, r3
 8008386:	3b10      	subs	r3, #16
 8008388:	4a14      	ldr	r2, [pc, #80]	; (80083dc <DMA_CalcBaseAndBitshift+0x64>)
 800838a:	fba2 2303 	umull	r2, r3, r2, r3
 800838e:	091b      	lsrs	r3, r3, #4
 8008390:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008392:	4a13      	ldr	r2, [pc, #76]	; (80083e0 <DMA_CalcBaseAndBitshift+0x68>)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	4413      	add	r3, r2
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	461a      	mov	r2, r3
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2b03      	cmp	r3, #3
 80083a4:	d909      	bls.n	80083ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80083ae:	f023 0303 	bic.w	r3, r3, #3
 80083b2:	1d1a      	adds	r2, r3, #4
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	659a      	str	r2, [r3, #88]	; 0x58
 80083b8:	e007      	b.n	80083ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80083c2:	f023 0303 	bic.w	r3, r3, #3
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3714      	adds	r7, #20
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	aaaaaaab 	.word	0xaaaaaaab
 80083e0:	08016608 	.word	0x08016608

080083e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b085      	sub	sp, #20
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083ec:	2300      	movs	r3, #0
 80083ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	699b      	ldr	r3, [r3, #24]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d11f      	bne.n	800843e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	2b03      	cmp	r3, #3
 8008402:	d855      	bhi.n	80084b0 <DMA_CheckFifoParam+0xcc>
 8008404:	a201      	add	r2, pc, #4	; (adr r2, 800840c <DMA_CheckFifoParam+0x28>)
 8008406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800840a:	bf00      	nop
 800840c:	0800841d 	.word	0x0800841d
 8008410:	0800842f 	.word	0x0800842f
 8008414:	0800841d 	.word	0x0800841d
 8008418:	080084b1 	.word	0x080084b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008420:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008424:	2b00      	cmp	r3, #0
 8008426:	d045      	beq.n	80084b4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8008428:	2301      	movs	r3, #1
 800842a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800842c:	e042      	b.n	80084b4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008432:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008436:	d13f      	bne.n	80084b8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800843c:	e03c      	b.n	80084b8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	699b      	ldr	r3, [r3, #24]
 8008442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008446:	d121      	bne.n	800848c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	2b03      	cmp	r3, #3
 800844c:	d836      	bhi.n	80084bc <DMA_CheckFifoParam+0xd8>
 800844e:	a201      	add	r2, pc, #4	; (adr r2, 8008454 <DMA_CheckFifoParam+0x70>)
 8008450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008454:	08008465 	.word	0x08008465
 8008458:	0800846b 	.word	0x0800846b
 800845c:	08008465 	.word	0x08008465
 8008460:	0800847d 	.word	0x0800847d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008464:	2301      	movs	r3, #1
 8008466:	73fb      	strb	r3, [r7, #15]
      break;
 8008468:	e02f      	b.n	80084ca <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800846e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008472:	2b00      	cmp	r3, #0
 8008474:	d024      	beq.n	80084c0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8008476:	2301      	movs	r3, #1
 8008478:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800847a:	e021      	b.n	80084c0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008480:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008484:	d11e      	bne.n	80084c4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800848a:	e01b      	b.n	80084c4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	2b02      	cmp	r3, #2
 8008490:	d902      	bls.n	8008498 <DMA_CheckFifoParam+0xb4>
 8008492:	2b03      	cmp	r3, #3
 8008494:	d003      	beq.n	800849e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008496:	e018      	b.n	80084ca <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8008498:	2301      	movs	r3, #1
 800849a:	73fb      	strb	r3, [r7, #15]
      break;
 800849c:	e015      	b.n	80084ca <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d00e      	beq.n	80084c8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80084aa:	2301      	movs	r3, #1
 80084ac:	73fb      	strb	r3, [r7, #15]
      break;
 80084ae:	e00b      	b.n	80084c8 <DMA_CheckFifoParam+0xe4>
      break;
 80084b0:	bf00      	nop
 80084b2:	e00a      	b.n	80084ca <DMA_CheckFifoParam+0xe6>
      break;
 80084b4:	bf00      	nop
 80084b6:	e008      	b.n	80084ca <DMA_CheckFifoParam+0xe6>
      break;
 80084b8:	bf00      	nop
 80084ba:	e006      	b.n	80084ca <DMA_CheckFifoParam+0xe6>
      break;
 80084bc:	bf00      	nop
 80084be:	e004      	b.n	80084ca <DMA_CheckFifoParam+0xe6>
      break;
 80084c0:	bf00      	nop
 80084c2:	e002      	b.n	80084ca <DMA_CheckFifoParam+0xe6>
      break;   
 80084c4:	bf00      	nop
 80084c6:	e000      	b.n	80084ca <DMA_CheckFifoParam+0xe6>
      break;
 80084c8:	bf00      	nop
    }
  } 
  
  return status; 
 80084ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3714      	adds	r7, #20
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80084d8:	b480      	push	{r7}
 80084da:	b089      	sub	sp, #36	; 0x24
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80084e2:	2300      	movs	r3, #0
 80084e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80084e6:	2300      	movs	r3, #0
 80084e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80084ea:	2300      	movs	r3, #0
 80084ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80084ee:	2300      	movs	r3, #0
 80084f0:	61fb      	str	r3, [r7, #28]
 80084f2:	e16b      	b.n	80087cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80084f4:	2201      	movs	r2, #1
 80084f6:	69fb      	ldr	r3, [r7, #28]
 80084f8:	fa02 f303 	lsl.w	r3, r2, r3
 80084fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	697a      	ldr	r2, [r7, #20]
 8008504:	4013      	ands	r3, r2
 8008506:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008508:	693a      	ldr	r2, [r7, #16]
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	429a      	cmp	r2, r3
 800850e:	f040 815a 	bne.w	80087c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	2b01      	cmp	r3, #1
 8008518:	d00b      	beq.n	8008532 <HAL_GPIO_Init+0x5a>
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	2b02      	cmp	r3, #2
 8008520:	d007      	beq.n	8008532 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008526:	2b11      	cmp	r3, #17
 8008528:	d003      	beq.n	8008532 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	2b12      	cmp	r3, #18
 8008530:	d130      	bne.n	8008594 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	005b      	lsls	r3, r3, #1
 800853c:	2203      	movs	r2, #3
 800853e:	fa02 f303 	lsl.w	r3, r2, r3
 8008542:	43db      	mvns	r3, r3
 8008544:	69ba      	ldr	r2, [r7, #24]
 8008546:	4013      	ands	r3, r2
 8008548:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	68da      	ldr	r2, [r3, #12]
 800854e:	69fb      	ldr	r3, [r7, #28]
 8008550:	005b      	lsls	r3, r3, #1
 8008552:	fa02 f303 	lsl.w	r3, r2, r3
 8008556:	69ba      	ldr	r2, [r7, #24]
 8008558:	4313      	orrs	r3, r2
 800855a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	69ba      	ldr	r2, [r7, #24]
 8008560:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008568:	2201      	movs	r2, #1
 800856a:	69fb      	ldr	r3, [r7, #28]
 800856c:	fa02 f303 	lsl.w	r3, r2, r3
 8008570:	43db      	mvns	r3, r3
 8008572:	69ba      	ldr	r2, [r7, #24]
 8008574:	4013      	ands	r3, r2
 8008576:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	091b      	lsrs	r3, r3, #4
 800857e:	f003 0201 	and.w	r2, r3, #1
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	fa02 f303 	lsl.w	r3, r2, r3
 8008588:	69ba      	ldr	r2, [r7, #24]
 800858a:	4313      	orrs	r3, r2
 800858c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	69ba      	ldr	r2, [r7, #24]
 8008592:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800859a:	69fb      	ldr	r3, [r7, #28]
 800859c:	005b      	lsls	r3, r3, #1
 800859e:	2203      	movs	r2, #3
 80085a0:	fa02 f303 	lsl.w	r3, r2, r3
 80085a4:	43db      	mvns	r3, r3
 80085a6:	69ba      	ldr	r2, [r7, #24]
 80085a8:	4013      	ands	r3, r2
 80085aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	689a      	ldr	r2, [r3, #8]
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	005b      	lsls	r3, r3, #1
 80085b4:	fa02 f303 	lsl.w	r3, r2, r3
 80085b8:	69ba      	ldr	r2, [r7, #24]
 80085ba:	4313      	orrs	r3, r2
 80085bc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	69ba      	ldr	r2, [r7, #24]
 80085c2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	2b02      	cmp	r3, #2
 80085ca:	d003      	beq.n	80085d4 <HAL_GPIO_Init+0xfc>
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	2b12      	cmp	r3, #18
 80085d2:	d123      	bne.n	800861c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	08da      	lsrs	r2, r3, #3
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	3208      	adds	r2, #8
 80085dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	f003 0307 	and.w	r3, r3, #7
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	220f      	movs	r2, #15
 80085ec:	fa02 f303 	lsl.w	r3, r2, r3
 80085f0:	43db      	mvns	r3, r3
 80085f2:	69ba      	ldr	r2, [r7, #24]
 80085f4:	4013      	ands	r3, r2
 80085f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	691a      	ldr	r2, [r3, #16]
 80085fc:	69fb      	ldr	r3, [r7, #28]
 80085fe:	f003 0307 	and.w	r3, r3, #7
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	fa02 f303 	lsl.w	r3, r2, r3
 8008608:	69ba      	ldr	r2, [r7, #24]
 800860a:	4313      	orrs	r3, r2
 800860c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800860e:	69fb      	ldr	r3, [r7, #28]
 8008610:	08da      	lsrs	r2, r3, #3
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	3208      	adds	r2, #8
 8008616:	69b9      	ldr	r1, [r7, #24]
 8008618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008622:	69fb      	ldr	r3, [r7, #28]
 8008624:	005b      	lsls	r3, r3, #1
 8008626:	2203      	movs	r2, #3
 8008628:	fa02 f303 	lsl.w	r3, r2, r3
 800862c:	43db      	mvns	r3, r3
 800862e:	69ba      	ldr	r2, [r7, #24]
 8008630:	4013      	ands	r3, r2
 8008632:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	f003 0203 	and.w	r2, r3, #3
 800863c:	69fb      	ldr	r3, [r7, #28]
 800863e:	005b      	lsls	r3, r3, #1
 8008640:	fa02 f303 	lsl.w	r3, r2, r3
 8008644:	69ba      	ldr	r2, [r7, #24]
 8008646:	4313      	orrs	r3, r2
 8008648:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	69ba      	ldr	r2, [r7, #24]
 800864e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008658:	2b00      	cmp	r3, #0
 800865a:	f000 80b4 	beq.w	80087c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800865e:	2300      	movs	r3, #0
 8008660:	60fb      	str	r3, [r7, #12]
 8008662:	4b5f      	ldr	r3, [pc, #380]	; (80087e0 <HAL_GPIO_Init+0x308>)
 8008664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008666:	4a5e      	ldr	r2, [pc, #376]	; (80087e0 <HAL_GPIO_Init+0x308>)
 8008668:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800866c:	6453      	str	r3, [r2, #68]	; 0x44
 800866e:	4b5c      	ldr	r3, [pc, #368]	; (80087e0 <HAL_GPIO_Init+0x308>)
 8008670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008676:	60fb      	str	r3, [r7, #12]
 8008678:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800867a:	4a5a      	ldr	r2, [pc, #360]	; (80087e4 <HAL_GPIO_Init+0x30c>)
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	089b      	lsrs	r3, r3, #2
 8008680:	3302      	adds	r3, #2
 8008682:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008686:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008688:	69fb      	ldr	r3, [r7, #28]
 800868a:	f003 0303 	and.w	r3, r3, #3
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	220f      	movs	r2, #15
 8008692:	fa02 f303 	lsl.w	r3, r2, r3
 8008696:	43db      	mvns	r3, r3
 8008698:	69ba      	ldr	r2, [r7, #24]
 800869a:	4013      	ands	r3, r2
 800869c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4a51      	ldr	r2, [pc, #324]	; (80087e8 <HAL_GPIO_Init+0x310>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d02b      	beq.n	80086fe <HAL_GPIO_Init+0x226>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	4a50      	ldr	r2, [pc, #320]	; (80087ec <HAL_GPIO_Init+0x314>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d025      	beq.n	80086fa <HAL_GPIO_Init+0x222>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	4a4f      	ldr	r2, [pc, #316]	; (80087f0 <HAL_GPIO_Init+0x318>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d01f      	beq.n	80086f6 <HAL_GPIO_Init+0x21e>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	4a4e      	ldr	r2, [pc, #312]	; (80087f4 <HAL_GPIO_Init+0x31c>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d019      	beq.n	80086f2 <HAL_GPIO_Init+0x21a>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	4a4d      	ldr	r2, [pc, #308]	; (80087f8 <HAL_GPIO_Init+0x320>)
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d013      	beq.n	80086ee <HAL_GPIO_Init+0x216>
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	4a4c      	ldr	r2, [pc, #304]	; (80087fc <HAL_GPIO_Init+0x324>)
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d00d      	beq.n	80086ea <HAL_GPIO_Init+0x212>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	4a4b      	ldr	r2, [pc, #300]	; (8008800 <HAL_GPIO_Init+0x328>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d007      	beq.n	80086e6 <HAL_GPIO_Init+0x20e>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	4a4a      	ldr	r2, [pc, #296]	; (8008804 <HAL_GPIO_Init+0x32c>)
 80086da:	4293      	cmp	r3, r2
 80086dc:	d101      	bne.n	80086e2 <HAL_GPIO_Init+0x20a>
 80086de:	2307      	movs	r3, #7
 80086e0:	e00e      	b.n	8008700 <HAL_GPIO_Init+0x228>
 80086e2:	2308      	movs	r3, #8
 80086e4:	e00c      	b.n	8008700 <HAL_GPIO_Init+0x228>
 80086e6:	2306      	movs	r3, #6
 80086e8:	e00a      	b.n	8008700 <HAL_GPIO_Init+0x228>
 80086ea:	2305      	movs	r3, #5
 80086ec:	e008      	b.n	8008700 <HAL_GPIO_Init+0x228>
 80086ee:	2304      	movs	r3, #4
 80086f0:	e006      	b.n	8008700 <HAL_GPIO_Init+0x228>
 80086f2:	2303      	movs	r3, #3
 80086f4:	e004      	b.n	8008700 <HAL_GPIO_Init+0x228>
 80086f6:	2302      	movs	r3, #2
 80086f8:	e002      	b.n	8008700 <HAL_GPIO_Init+0x228>
 80086fa:	2301      	movs	r3, #1
 80086fc:	e000      	b.n	8008700 <HAL_GPIO_Init+0x228>
 80086fe:	2300      	movs	r3, #0
 8008700:	69fa      	ldr	r2, [r7, #28]
 8008702:	f002 0203 	and.w	r2, r2, #3
 8008706:	0092      	lsls	r2, r2, #2
 8008708:	4093      	lsls	r3, r2
 800870a:	69ba      	ldr	r2, [r7, #24]
 800870c:	4313      	orrs	r3, r2
 800870e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008710:	4934      	ldr	r1, [pc, #208]	; (80087e4 <HAL_GPIO_Init+0x30c>)
 8008712:	69fb      	ldr	r3, [r7, #28]
 8008714:	089b      	lsrs	r3, r3, #2
 8008716:	3302      	adds	r3, #2
 8008718:	69ba      	ldr	r2, [r7, #24]
 800871a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800871e:	4b3a      	ldr	r3, [pc, #232]	; (8008808 <HAL_GPIO_Init+0x330>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	43db      	mvns	r3, r3
 8008728:	69ba      	ldr	r2, [r7, #24]
 800872a:	4013      	ands	r3, r2
 800872c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008736:	2b00      	cmp	r3, #0
 8008738:	d003      	beq.n	8008742 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800873a:	69ba      	ldr	r2, [r7, #24]
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	4313      	orrs	r3, r2
 8008740:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008742:	4a31      	ldr	r2, [pc, #196]	; (8008808 <HAL_GPIO_Init+0x330>)
 8008744:	69bb      	ldr	r3, [r7, #24]
 8008746:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008748:	4b2f      	ldr	r3, [pc, #188]	; (8008808 <HAL_GPIO_Init+0x330>)
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	43db      	mvns	r3, r3
 8008752:	69ba      	ldr	r2, [r7, #24]
 8008754:	4013      	ands	r3, r2
 8008756:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008760:	2b00      	cmp	r3, #0
 8008762:	d003      	beq.n	800876c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008764:	69ba      	ldr	r2, [r7, #24]
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	4313      	orrs	r3, r2
 800876a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800876c:	4a26      	ldr	r2, [pc, #152]	; (8008808 <HAL_GPIO_Init+0x330>)
 800876e:	69bb      	ldr	r3, [r7, #24]
 8008770:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008772:	4b25      	ldr	r3, [pc, #148]	; (8008808 <HAL_GPIO_Init+0x330>)
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008778:	693b      	ldr	r3, [r7, #16]
 800877a:	43db      	mvns	r3, r3
 800877c:	69ba      	ldr	r2, [r7, #24]
 800877e:	4013      	ands	r3, r2
 8008780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	685b      	ldr	r3, [r3, #4]
 8008786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800878a:	2b00      	cmp	r3, #0
 800878c:	d003      	beq.n	8008796 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800878e:	69ba      	ldr	r2, [r7, #24]
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	4313      	orrs	r3, r2
 8008794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008796:	4a1c      	ldr	r2, [pc, #112]	; (8008808 <HAL_GPIO_Init+0x330>)
 8008798:	69bb      	ldr	r3, [r7, #24]
 800879a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800879c:	4b1a      	ldr	r3, [pc, #104]	; (8008808 <HAL_GPIO_Init+0x330>)
 800879e:	68db      	ldr	r3, [r3, #12]
 80087a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	43db      	mvns	r3, r3
 80087a6:	69ba      	ldr	r2, [r7, #24]
 80087a8:	4013      	ands	r3, r2
 80087aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d003      	beq.n	80087c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80087b8:	69ba      	ldr	r2, [r7, #24]
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	4313      	orrs	r3, r2
 80087be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80087c0:	4a11      	ldr	r2, [pc, #68]	; (8008808 <HAL_GPIO_Init+0x330>)
 80087c2:	69bb      	ldr	r3, [r7, #24]
 80087c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	3301      	adds	r3, #1
 80087ca:	61fb      	str	r3, [r7, #28]
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	2b0f      	cmp	r3, #15
 80087d0:	f67f ae90 	bls.w	80084f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80087d4:	bf00      	nop
 80087d6:	3724      	adds	r7, #36	; 0x24
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr
 80087e0:	40023800 	.word	0x40023800
 80087e4:	40013800 	.word	0x40013800
 80087e8:	40020000 	.word	0x40020000
 80087ec:	40020400 	.word	0x40020400
 80087f0:	40020800 	.word	0x40020800
 80087f4:	40020c00 	.word	0x40020c00
 80087f8:	40021000 	.word	0x40021000
 80087fc:	40021400 	.word	0x40021400
 8008800:	40021800 	.word	0x40021800
 8008804:	40021c00 	.word	0x40021c00
 8008808:	40013c00 	.word	0x40013c00

0800880c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800880c:	b480      	push	{r7}
 800880e:	b085      	sub	sp, #20
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	460b      	mov	r3, r1
 8008816:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	691a      	ldr	r2, [r3, #16]
 800881c:	887b      	ldrh	r3, [r7, #2]
 800881e:	4013      	ands	r3, r2
 8008820:	2b00      	cmp	r3, #0
 8008822:	d002      	beq.n	800882a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008824:	2301      	movs	r3, #1
 8008826:	73fb      	strb	r3, [r7, #15]
 8008828:	e001      	b.n	800882e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800882a:	2300      	movs	r3, #0
 800882c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800882e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008830:	4618      	mov	r0, r3
 8008832:	3714      	adds	r7, #20
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	460b      	mov	r3, r1
 8008846:	807b      	strh	r3, [r7, #2]
 8008848:	4613      	mov	r3, r2
 800884a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800884c:	787b      	ldrb	r3, [r7, #1]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d003      	beq.n	800885a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008852:	887a      	ldrh	r2, [r7, #2]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008858:	e003      	b.n	8008862 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800885a:	887b      	ldrh	r3, [r7, #2]
 800885c:	041a      	lsls	r2, r3, #16
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	619a      	str	r2, [r3, #24]
}
 8008862:	bf00      	nop
 8008864:	370c      	adds	r7, #12
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr

0800886e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800886e:	b480      	push	{r7}
 8008870:	b083      	sub	sp, #12
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
 8008876:	460b      	mov	r3, r1
 8008878:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	695a      	ldr	r2, [r3, #20]
 800887e:	887b      	ldrh	r3, [r7, #2]
 8008880:	401a      	ands	r2, r3
 8008882:	887b      	ldrh	r3, [r7, #2]
 8008884:	429a      	cmp	r2, r3
 8008886:	d104      	bne.n	8008892 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008888:	887b      	ldrh	r3, [r7, #2]
 800888a:	041a      	lsls	r2, r3, #16
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8008890:	e002      	b.n	8008898 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8008892:	887a      	ldrh	r2, [r7, #2]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	619a      	str	r2, [r3, #24]
}
 8008898:	bf00      	nop
 800889a:	370c      	adds	r7, #12
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d101      	bne.n	80088b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	e11f      	b.n	8008af6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088bc:	b2db      	uxtb	r3, r3
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d106      	bne.n	80088d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2200      	movs	r2, #0
 80088c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f7f9 fdc0 	bl	8002450 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2224      	movs	r2, #36	; 0x24
 80088d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f022 0201 	bic.w	r2, r2, #1
 80088e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80088f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008906:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008908:	f001 fca4 	bl	800a254 <HAL_RCC_GetPCLK1Freq>
 800890c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	4a7b      	ldr	r2, [pc, #492]	; (8008b00 <HAL_I2C_Init+0x25c>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d807      	bhi.n	8008928 <HAL_I2C_Init+0x84>
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	4a7a      	ldr	r2, [pc, #488]	; (8008b04 <HAL_I2C_Init+0x260>)
 800891c:	4293      	cmp	r3, r2
 800891e:	bf94      	ite	ls
 8008920:	2301      	movls	r3, #1
 8008922:	2300      	movhi	r3, #0
 8008924:	b2db      	uxtb	r3, r3
 8008926:	e006      	b.n	8008936 <HAL_I2C_Init+0x92>
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	4a77      	ldr	r2, [pc, #476]	; (8008b08 <HAL_I2C_Init+0x264>)
 800892c:	4293      	cmp	r3, r2
 800892e:	bf94      	ite	ls
 8008930:	2301      	movls	r3, #1
 8008932:	2300      	movhi	r3, #0
 8008934:	b2db      	uxtb	r3, r3
 8008936:	2b00      	cmp	r3, #0
 8008938:	d001      	beq.n	800893e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	e0db      	b.n	8008af6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	4a72      	ldr	r2, [pc, #456]	; (8008b0c <HAL_I2C_Init+0x268>)
 8008942:	fba2 2303 	umull	r2, r3, r2, r3
 8008946:	0c9b      	lsrs	r3, r3, #18
 8008948:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	68ba      	ldr	r2, [r7, #8]
 800895a:	430a      	orrs	r2, r1
 800895c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	6a1b      	ldr	r3, [r3, #32]
 8008964:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	4a64      	ldr	r2, [pc, #400]	; (8008b00 <HAL_I2C_Init+0x25c>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d802      	bhi.n	8008978 <HAL_I2C_Init+0xd4>
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	3301      	adds	r3, #1
 8008976:	e009      	b.n	800898c <HAL_I2C_Init+0xe8>
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800897e:	fb02 f303 	mul.w	r3, r2, r3
 8008982:	4a63      	ldr	r2, [pc, #396]	; (8008b10 <HAL_I2C_Init+0x26c>)
 8008984:	fba2 2303 	umull	r2, r3, r2, r3
 8008988:	099b      	lsrs	r3, r3, #6
 800898a:	3301      	adds	r3, #1
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	6812      	ldr	r2, [r2, #0]
 8008990:	430b      	orrs	r3, r1
 8008992:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	69db      	ldr	r3, [r3, #28]
 800899a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800899e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	4956      	ldr	r1, [pc, #344]	; (8008b00 <HAL_I2C_Init+0x25c>)
 80089a8:	428b      	cmp	r3, r1
 80089aa:	d80d      	bhi.n	80089c8 <HAL_I2C_Init+0x124>
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	1e59      	subs	r1, r3, #1
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	005b      	lsls	r3, r3, #1
 80089b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80089ba:	3301      	adds	r3, #1
 80089bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089c0:	2b04      	cmp	r3, #4
 80089c2:	bf38      	it	cc
 80089c4:	2304      	movcc	r3, #4
 80089c6:	e04f      	b.n	8008a68 <HAL_I2C_Init+0x1c4>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d111      	bne.n	80089f4 <HAL_I2C_Init+0x150>
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	1e58      	subs	r0, r3, #1
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6859      	ldr	r1, [r3, #4]
 80089d8:	460b      	mov	r3, r1
 80089da:	005b      	lsls	r3, r3, #1
 80089dc:	440b      	add	r3, r1
 80089de:	fbb0 f3f3 	udiv	r3, r0, r3
 80089e2:	3301      	adds	r3, #1
 80089e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	bf0c      	ite	eq
 80089ec:	2301      	moveq	r3, #1
 80089ee:	2300      	movne	r3, #0
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	e012      	b.n	8008a1a <HAL_I2C_Init+0x176>
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	1e58      	subs	r0, r3, #1
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6859      	ldr	r1, [r3, #4]
 80089fc:	460b      	mov	r3, r1
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	440b      	add	r3, r1
 8008a02:	0099      	lsls	r1, r3, #2
 8008a04:	440b      	add	r3, r1
 8008a06:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	bf0c      	ite	eq
 8008a14:	2301      	moveq	r3, #1
 8008a16:	2300      	movne	r3, #0
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d001      	beq.n	8008a22 <HAL_I2C_Init+0x17e>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e022      	b.n	8008a68 <HAL_I2C_Init+0x1c4>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d10e      	bne.n	8008a48 <HAL_I2C_Init+0x1a4>
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	1e58      	subs	r0, r3, #1
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6859      	ldr	r1, [r3, #4]
 8008a32:	460b      	mov	r3, r1
 8008a34:	005b      	lsls	r3, r3, #1
 8008a36:	440b      	add	r3, r1
 8008a38:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a46:	e00f      	b.n	8008a68 <HAL_I2C_Init+0x1c4>
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	1e58      	subs	r0, r3, #1
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6859      	ldr	r1, [r3, #4]
 8008a50:	460b      	mov	r3, r1
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	440b      	add	r3, r1
 8008a56:	0099      	lsls	r1, r3, #2
 8008a58:	440b      	add	r3, r1
 8008a5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a5e:	3301      	adds	r3, #1
 8008a60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a68:	6879      	ldr	r1, [r7, #4]
 8008a6a:	6809      	ldr	r1, [r1, #0]
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	69da      	ldr	r2, [r3, #28]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6a1b      	ldr	r3, [r3, #32]
 8008a82:	431a      	orrs	r2, r3
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	430a      	orrs	r2, r1
 8008a8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008a96:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	6911      	ldr	r1, [r2, #16]
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	68d2      	ldr	r2, [r2, #12]
 8008aa2:	4311      	orrs	r1, r2
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	6812      	ldr	r2, [r2, #0]
 8008aa8:	430b      	orrs	r3, r1
 8008aaa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	695a      	ldr	r2, [r3, #20]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	699b      	ldr	r3, [r3, #24]
 8008abe:	431a      	orrs	r2, r3
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	430a      	orrs	r2, r1
 8008ac6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	681a      	ldr	r2, [r3, #0]
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f042 0201 	orr.w	r2, r2, #1
 8008ad6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2200      	movs	r2, #0
 8008adc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2220      	movs	r2, #32
 8008ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3710      	adds	r7, #16
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}
 8008afe:	bf00      	nop
 8008b00:	000186a0 	.word	0x000186a0
 8008b04:	001e847f 	.word	0x001e847f
 8008b08:	003d08ff 	.word	0x003d08ff
 8008b0c:	431bde83 	.word	0x431bde83
 8008b10:	10624dd3 	.word	0x10624dd3

08008b14 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b088      	sub	sp, #32
 8008b18:	af02      	add	r7, sp, #8
 8008b1a:	60f8      	str	r0, [r7, #12]
 8008b1c:	607a      	str	r2, [r7, #4]
 8008b1e:	461a      	mov	r2, r3
 8008b20:	460b      	mov	r3, r1
 8008b22:	817b      	strh	r3, [r7, #10]
 8008b24:	4613      	mov	r3, r2
 8008b26:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008b28:	f7fe fb4c 	bl	80071c4 <HAL_GetTick>
 8008b2c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	2b20      	cmp	r3, #32
 8008b38:	f040 80e0 	bne.w	8008cfc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	9300      	str	r3, [sp, #0]
 8008b40:	2319      	movs	r3, #25
 8008b42:	2201      	movs	r2, #1
 8008b44:	4970      	ldr	r1, [pc, #448]	; (8008d08 <HAL_I2C_Master_Transmit+0x1f4>)
 8008b46:	68f8      	ldr	r0, [r7, #12]
 8008b48:	f000 fd92 	bl	8009670 <I2C_WaitOnFlagUntilTimeout>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d001      	beq.n	8008b56 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008b52:	2302      	movs	r3, #2
 8008b54:	e0d3      	b.n	8008cfe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	d101      	bne.n	8008b64 <HAL_I2C_Master_Transmit+0x50>
 8008b60:	2302      	movs	r3, #2
 8008b62:	e0cc      	b.n	8008cfe <HAL_I2C_Master_Transmit+0x1ea>
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f003 0301 	and.w	r3, r3, #1
 8008b76:	2b01      	cmp	r3, #1
 8008b78:	d007      	beq.n	8008b8a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	681a      	ldr	r2, [r3, #0]
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f042 0201 	orr.w	r2, r2, #1
 8008b88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	681a      	ldr	r2, [r3, #0]
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b98:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2221      	movs	r2, #33	; 0x21
 8008b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2210      	movs	r2, #16
 8008ba6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2200      	movs	r2, #0
 8008bae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	893a      	ldrh	r2, [r7, #8]
 8008bba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bc0:	b29a      	uxth	r2, r3
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	4a50      	ldr	r2, [pc, #320]	; (8008d0c <HAL_I2C_Master_Transmit+0x1f8>)
 8008bca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008bcc:	8979      	ldrh	r1, [r7, #10]
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	6a3a      	ldr	r2, [r7, #32]
 8008bd2:	68f8      	ldr	r0, [r7, #12]
 8008bd4:	f000 fbfe 	bl	80093d4 <I2C_MasterRequestWrite>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d001      	beq.n	8008be2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	e08d      	b.n	8008cfe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008be2:	2300      	movs	r3, #0
 8008be4:	613b      	str	r3, [r7, #16]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	695b      	ldr	r3, [r3, #20]
 8008bec:	613b      	str	r3, [r7, #16]
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	699b      	ldr	r3, [r3, #24]
 8008bf4:	613b      	str	r3, [r7, #16]
 8008bf6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008bf8:	e066      	b.n	8008cc8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008bfa:	697a      	ldr	r2, [r7, #20]
 8008bfc:	6a39      	ldr	r1, [r7, #32]
 8008bfe:	68f8      	ldr	r0, [r7, #12]
 8008c00:	f000 fe0c 	bl	800981c <I2C_WaitOnTXEFlagUntilTimeout>
 8008c04:	4603      	mov	r3, r0
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d00d      	beq.n	8008c26 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c0e:	2b04      	cmp	r3, #4
 8008c10:	d107      	bne.n	8008c22 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008c22:	2301      	movs	r3, #1
 8008c24:	e06b      	b.n	8008cfe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2a:	781a      	ldrb	r2, [r3, #0]
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c36:	1c5a      	adds	r2, r3, #1
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	3b01      	subs	r3, #1
 8008c44:	b29a      	uxth	r2, r3
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c4e:	3b01      	subs	r3, #1
 8008c50:	b29a      	uxth	r2, r3
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	695b      	ldr	r3, [r3, #20]
 8008c5c:	f003 0304 	and.w	r3, r3, #4
 8008c60:	2b04      	cmp	r3, #4
 8008c62:	d11b      	bne.n	8008c9c <HAL_I2C_Master_Transmit+0x188>
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d017      	beq.n	8008c9c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c70:	781a      	ldrb	r2, [r3, #0]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7c:	1c5a      	adds	r2, r3, #1
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	3b01      	subs	r3, #1
 8008c8a:	b29a      	uxth	r2, r3
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c94:	3b01      	subs	r3, #1
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c9c:	697a      	ldr	r2, [r7, #20]
 8008c9e:	6a39      	ldr	r1, [r7, #32]
 8008ca0:	68f8      	ldr	r0, [r7, #12]
 8008ca2:	f000 fdfc 	bl	800989e <I2C_WaitOnBTFFlagUntilTimeout>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d00d      	beq.n	8008cc8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb0:	2b04      	cmp	r3, #4
 8008cb2:	d107      	bne.n	8008cc4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cc2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	e01a      	b.n	8008cfe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d194      	bne.n	8008bfa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2220      	movs	r2, #32
 8008ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2200      	movs	r2, #0
 8008cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	e000      	b.n	8008cfe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008cfc:	2302      	movs	r3, #2
  }
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3718      	adds	r7, #24
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	00100002 	.word	0x00100002
 8008d0c:	ffff0000 	.word	0xffff0000

08008d10 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b08c      	sub	sp, #48	; 0x30
 8008d14:	af02      	add	r7, sp, #8
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	607a      	str	r2, [r7, #4]
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	817b      	strh	r3, [r7, #10]
 8008d20:	4613      	mov	r3, r2
 8008d22:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008d24:	f7fe fa4e 	bl	80071c4 <HAL_GetTick>
 8008d28:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	2b20      	cmp	r3, #32
 8008d34:	f040 820b 	bne.w	800914e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3a:	9300      	str	r3, [sp, #0]
 8008d3c:	2319      	movs	r3, #25
 8008d3e:	2201      	movs	r2, #1
 8008d40:	497c      	ldr	r1, [pc, #496]	; (8008f34 <HAL_I2C_Master_Receive+0x224>)
 8008d42:	68f8      	ldr	r0, [r7, #12]
 8008d44:	f000 fc94 	bl	8009670 <I2C_WaitOnFlagUntilTimeout>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d001      	beq.n	8008d52 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8008d4e:	2302      	movs	r3, #2
 8008d50:	e1fe      	b.n	8009150 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d101      	bne.n	8008d60 <HAL_I2C_Master_Receive+0x50>
 8008d5c:	2302      	movs	r3, #2
 8008d5e:	e1f7      	b.n	8009150 <HAL_I2C_Master_Receive+0x440>
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f003 0301 	and.w	r3, r3, #1
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d007      	beq.n	8008d86 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f042 0201 	orr.w	r2, r2, #1
 8008d84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d94:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2222      	movs	r2, #34	; 0x22
 8008d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2210      	movs	r2, #16
 8008da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	2200      	movs	r2, #0
 8008daa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	893a      	ldrh	r2, [r7, #8]
 8008db6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dbc:	b29a      	uxth	r2, r3
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	4a5c      	ldr	r2, [pc, #368]	; (8008f38 <HAL_I2C_Master_Receive+0x228>)
 8008dc6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008dc8:	8979      	ldrh	r1, [r7, #10]
 8008dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dce:	68f8      	ldr	r0, [r7, #12]
 8008dd0:	f000 fb82 	bl	80094d8 <I2C_MasterRequestRead>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d001      	beq.n	8008dde <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e1b8      	b.n	8009150 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d113      	bne.n	8008e0e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008de6:	2300      	movs	r3, #0
 8008de8:	623b      	str	r3, [r7, #32]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	695b      	ldr	r3, [r3, #20]
 8008df0:	623b      	str	r3, [r7, #32]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	699b      	ldr	r3, [r3, #24]
 8008df8:	623b      	str	r3, [r7, #32]
 8008dfa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e0a:	601a      	str	r2, [r3, #0]
 8008e0c:	e18c      	b.n	8009128 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d11b      	bne.n	8008e4e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e26:	2300      	movs	r3, #0
 8008e28:	61fb      	str	r3, [r7, #28]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	695b      	ldr	r3, [r3, #20]
 8008e30:	61fb      	str	r3, [r7, #28]
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	699b      	ldr	r3, [r3, #24]
 8008e38:	61fb      	str	r3, [r7, #28]
 8008e3a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e4a:	601a      	str	r2, [r3, #0]
 8008e4c:	e16c      	b.n	8009128 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e52:	2b02      	cmp	r3, #2
 8008e54:	d11b      	bne.n	8008e8e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e64:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e76:	2300      	movs	r3, #0
 8008e78:	61bb      	str	r3, [r7, #24]
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	695b      	ldr	r3, [r3, #20]
 8008e80:	61bb      	str	r3, [r7, #24]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	699b      	ldr	r3, [r3, #24]
 8008e88:	61bb      	str	r3, [r7, #24]
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	e14c      	b.n	8009128 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	681a      	ldr	r2, [r3, #0]
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008e9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	617b      	str	r3, [r7, #20]
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	695b      	ldr	r3, [r3, #20]
 8008ea8:	617b      	str	r3, [r7, #20]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	699b      	ldr	r3, [r3, #24]
 8008eb0:	617b      	str	r3, [r7, #20]
 8008eb2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008eb4:	e138      	b.n	8009128 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008eba:	2b03      	cmp	r3, #3
 8008ebc:	f200 80f1 	bhi.w	80090a2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d123      	bne.n	8008f10 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ecc:	68f8      	ldr	r0, [r7, #12]
 8008ece:	f000 fd27 	bl	8009920 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d001      	beq.n	8008edc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	e139      	b.n	8009150 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	691a      	ldr	r2, [r3, #16]
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee6:	b2d2      	uxtb	r2, r2
 8008ee8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eee:	1c5a      	adds	r2, r3, #1
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ef8:	3b01      	subs	r3, #1
 8008efa:	b29a      	uxth	r2, r3
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	3b01      	subs	r3, #1
 8008f08:	b29a      	uxth	r2, r3
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008f0e:	e10b      	b.n	8009128 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f14:	2b02      	cmp	r3, #2
 8008f16:	d14e      	bne.n	8008fb6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1a:	9300      	str	r3, [sp, #0]
 8008f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1e:	2200      	movs	r2, #0
 8008f20:	4906      	ldr	r1, [pc, #24]	; (8008f3c <HAL_I2C_Master_Receive+0x22c>)
 8008f22:	68f8      	ldr	r0, [r7, #12]
 8008f24:	f000 fba4 	bl	8009670 <I2C_WaitOnFlagUntilTimeout>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d008      	beq.n	8008f40 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	e10e      	b.n	8009150 <HAL_I2C_Master_Receive+0x440>
 8008f32:	bf00      	nop
 8008f34:	00100002 	.word	0x00100002
 8008f38:	ffff0000 	.word	0xffff0000
 8008f3c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	691a      	ldr	r2, [r3, #16]
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5a:	b2d2      	uxtb	r2, r2
 8008f5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f62:	1c5a      	adds	r2, r3, #1
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f6c:	3b01      	subs	r3, #1
 8008f6e:	b29a      	uxth	r2, r3
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	b29a      	uxth	r2, r3
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	691a      	ldr	r2, [r3, #16]
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8c:	b2d2      	uxtb	r2, r2
 8008f8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f94:	1c5a      	adds	r2, r3, #1
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f9e:	3b01      	subs	r3, #1
 8008fa0:	b29a      	uxth	r2, r3
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	3b01      	subs	r3, #1
 8008fae:	b29a      	uxth	r2, r3
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008fb4:	e0b8      	b.n	8009128 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb8:	9300      	str	r3, [sp, #0]
 8008fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	4966      	ldr	r1, [pc, #408]	; (8009158 <HAL_I2C_Master_Receive+0x448>)
 8008fc0:	68f8      	ldr	r0, [r7, #12]
 8008fc2:	f000 fb55 	bl	8009670 <I2C_WaitOnFlagUntilTimeout>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d001      	beq.n	8008fd0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	e0bf      	b.n	8009150 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	691a      	ldr	r2, [r3, #16]
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fea:	b2d2      	uxtb	r2, r2
 8008fec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff2:	1c5a      	adds	r2, r3, #1
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ffc:	3b01      	subs	r3, #1
 8008ffe:	b29a      	uxth	r2, r3
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009008:	b29b      	uxth	r3, r3
 800900a:	3b01      	subs	r3, #1
 800900c:	b29a      	uxth	r2, r3
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009014:	9300      	str	r3, [sp, #0]
 8009016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009018:	2200      	movs	r2, #0
 800901a:	494f      	ldr	r1, [pc, #316]	; (8009158 <HAL_I2C_Master_Receive+0x448>)
 800901c:	68f8      	ldr	r0, [r7, #12]
 800901e:	f000 fb27 	bl	8009670 <I2C_WaitOnFlagUntilTimeout>
 8009022:	4603      	mov	r3, r0
 8009024:	2b00      	cmp	r3, #0
 8009026:	d001      	beq.n	800902c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8009028:	2301      	movs	r3, #1
 800902a:	e091      	b.n	8009150 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	681a      	ldr	r2, [r3, #0]
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800903a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	691a      	ldr	r2, [r3, #16]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009046:	b2d2      	uxtb	r2, r2
 8009048:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904e:	1c5a      	adds	r2, r3, #1
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009058:	3b01      	subs	r3, #1
 800905a:	b29a      	uxth	r2, r3
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009064:	b29b      	uxth	r3, r3
 8009066:	3b01      	subs	r3, #1
 8009068:	b29a      	uxth	r2, r3
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	691a      	ldr	r2, [r3, #16]
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009078:	b2d2      	uxtb	r2, r2
 800907a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009080:	1c5a      	adds	r2, r3, #1
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800908a:	3b01      	subs	r3, #1
 800908c:	b29a      	uxth	r2, r3
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009096:	b29b      	uxth	r3, r3
 8009098:	3b01      	subs	r3, #1
 800909a:	b29a      	uxth	r2, r3
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80090a0:	e042      	b.n	8009128 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80090a6:	68f8      	ldr	r0, [r7, #12]
 80090a8:	f000 fc3a 	bl	8009920 <I2C_WaitOnRXNEFlagUntilTimeout>
 80090ac:	4603      	mov	r3, r0
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d001      	beq.n	80090b6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80090b2:	2301      	movs	r3, #1
 80090b4:	e04c      	b.n	8009150 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	691a      	ldr	r2, [r3, #16]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c0:	b2d2      	uxtb	r2, r2
 80090c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c8:	1c5a      	adds	r2, r3, #1
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090d2:	3b01      	subs	r3, #1
 80090d4:	b29a      	uxth	r2, r3
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090de:	b29b      	uxth	r3, r3
 80090e0:	3b01      	subs	r3, #1
 80090e2:	b29a      	uxth	r2, r3
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	695b      	ldr	r3, [r3, #20]
 80090ee:	f003 0304 	and.w	r3, r3, #4
 80090f2:	2b04      	cmp	r3, #4
 80090f4:	d118      	bne.n	8009128 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	691a      	ldr	r2, [r3, #16]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009100:	b2d2      	uxtb	r2, r2
 8009102:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009108:	1c5a      	adds	r2, r3, #1
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009112:	3b01      	subs	r3, #1
 8009114:	b29a      	uxth	r2, r3
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800911e:	b29b      	uxth	r3, r3
 8009120:	3b01      	subs	r3, #1
 8009122:	b29a      	uxth	r2, r3
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800912c:	2b00      	cmp	r3, #0
 800912e:	f47f aec2 	bne.w	8008eb6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2220      	movs	r2, #32
 8009136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2200      	movs	r2, #0
 800913e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2200      	movs	r2, #0
 8009146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800914a:	2300      	movs	r3, #0
 800914c:	e000      	b.n	8009150 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800914e:	2302      	movs	r3, #2
  }
}
 8009150:	4618      	mov	r0, r3
 8009152:	3728      	adds	r7, #40	; 0x28
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}
 8009158:	00010004 	.word	0x00010004

0800915c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b08a      	sub	sp, #40	; 0x28
 8009160:	af02      	add	r7, sp, #8
 8009162:	60f8      	str	r0, [r7, #12]
 8009164:	607a      	str	r2, [r7, #4]
 8009166:	603b      	str	r3, [r7, #0]
 8009168:	460b      	mov	r3, r1
 800916a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800916c:	f7fe f82a 	bl	80071c4 <HAL_GetTick>
 8009170:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8009172:	2301      	movs	r3, #1
 8009174:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800917c:	b2db      	uxtb	r3, r3
 800917e:	2b20      	cmp	r3, #32
 8009180:	f040 8110 	bne.w	80093a4 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009184:	69fb      	ldr	r3, [r7, #28]
 8009186:	9300      	str	r3, [sp, #0]
 8009188:	2319      	movs	r3, #25
 800918a:	2201      	movs	r2, #1
 800918c:	4988      	ldr	r1, [pc, #544]	; (80093b0 <HAL_I2C_IsDeviceReady+0x254>)
 800918e:	68f8      	ldr	r0, [r7, #12]
 8009190:	f000 fa6e 	bl	8009670 <I2C_WaitOnFlagUntilTimeout>
 8009194:	4603      	mov	r3, r0
 8009196:	2b00      	cmp	r3, #0
 8009198:	d001      	beq.n	800919e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800919a:	2302      	movs	r3, #2
 800919c:	e103      	b.n	80093a6 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d101      	bne.n	80091ac <HAL_I2C_IsDeviceReady+0x50>
 80091a8:	2302      	movs	r3, #2
 80091aa:	e0fc      	b.n	80093a6 <HAL_I2C_IsDeviceReady+0x24a>
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2201      	movs	r2, #1
 80091b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f003 0301 	and.w	r3, r3, #1
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d007      	beq.n	80091d2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f042 0201 	orr.w	r2, r2, #1
 80091d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	681a      	ldr	r2, [r3, #0]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80091e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2224      	movs	r2, #36	; 0x24
 80091e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2200      	movs	r2, #0
 80091ee:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	4a70      	ldr	r2, [pc, #448]	; (80093b4 <HAL_I2C_IsDeviceReady+0x258>)
 80091f4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009204:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8009206:	69fb      	ldr	r3, [r7, #28]
 8009208:	9300      	str	r3, [sp, #0]
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	2200      	movs	r2, #0
 800920e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	f000 fa2c 	bl	8009670 <I2C_WaitOnFlagUntilTimeout>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d00c      	beq.n	8009238 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009228:	2b00      	cmp	r3, #0
 800922a:	d003      	beq.n	8009234 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009232:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8009234:	2303      	movs	r3, #3
 8009236:	e0b6      	b.n	80093a6 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009238:	897b      	ldrh	r3, [r7, #10]
 800923a:	b2db      	uxtb	r3, r3
 800923c:	461a      	mov	r2, r3
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009246:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8009248:	f7fd ffbc 	bl	80071c4 <HAL_GetTick>
 800924c:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	695b      	ldr	r3, [r3, #20]
 8009254:	f003 0302 	and.w	r3, r3, #2
 8009258:	2b02      	cmp	r3, #2
 800925a:	bf0c      	ite	eq
 800925c:	2301      	moveq	r3, #1
 800925e:	2300      	movne	r3, #0
 8009260:	b2db      	uxtb	r3, r3
 8009262:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	695b      	ldr	r3, [r3, #20]
 800926a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800926e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009272:	bf0c      	ite	eq
 8009274:	2301      	moveq	r3, #1
 8009276:	2300      	movne	r3, #0
 8009278:	b2db      	uxtb	r3, r3
 800927a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800927c:	e025      	b.n	80092ca <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800927e:	f7fd ffa1 	bl	80071c4 <HAL_GetTick>
 8009282:	4602      	mov	r2, r0
 8009284:	69fb      	ldr	r3, [r7, #28]
 8009286:	1ad3      	subs	r3, r2, r3
 8009288:	683a      	ldr	r2, [r7, #0]
 800928a:	429a      	cmp	r2, r3
 800928c:	d302      	bcc.n	8009294 <HAL_I2C_IsDeviceReady+0x138>
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d103      	bne.n	800929c <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	22a0      	movs	r2, #160	; 0xa0
 8009298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	695b      	ldr	r3, [r3, #20]
 80092a2:	f003 0302 	and.w	r3, r3, #2
 80092a6:	2b02      	cmp	r3, #2
 80092a8:	bf0c      	ite	eq
 80092aa:	2301      	moveq	r3, #1
 80092ac:	2300      	movne	r3, #0
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	695b      	ldr	r3, [r3, #20]
 80092b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092c0:	bf0c      	ite	eq
 80092c2:	2301      	moveq	r3, #1
 80092c4:	2300      	movne	r3, #0
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	2ba0      	cmp	r3, #160	; 0xa0
 80092d4:	d005      	beq.n	80092e2 <HAL_I2C_IsDeviceReady+0x186>
 80092d6:	7dfb      	ldrb	r3, [r7, #23]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d102      	bne.n	80092e2 <HAL_I2C_IsDeviceReady+0x186>
 80092dc:	7dbb      	ldrb	r3, [r7, #22]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d0cd      	beq.n	800927e <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	2220      	movs	r2, #32
 80092e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	695b      	ldr	r3, [r3, #20]
 80092f0:	f003 0302 	and.w	r3, r3, #2
 80092f4:	2b02      	cmp	r3, #2
 80092f6:	d129      	bne.n	800934c <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009306:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009308:	2300      	movs	r3, #0
 800930a:	613b      	str	r3, [r7, #16]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	695b      	ldr	r3, [r3, #20]
 8009312:	613b      	str	r3, [r7, #16]
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	699b      	ldr	r3, [r3, #24]
 800931a:	613b      	str	r3, [r7, #16]
 800931c:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800931e:	69fb      	ldr	r3, [r7, #28]
 8009320:	9300      	str	r3, [sp, #0]
 8009322:	2319      	movs	r3, #25
 8009324:	2201      	movs	r2, #1
 8009326:	4922      	ldr	r1, [pc, #136]	; (80093b0 <HAL_I2C_IsDeviceReady+0x254>)
 8009328:	68f8      	ldr	r0, [r7, #12]
 800932a:	f000 f9a1 	bl	8009670 <I2C_WaitOnFlagUntilTimeout>
 800932e:	4603      	mov	r3, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d001      	beq.n	8009338 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8009334:	2301      	movs	r3, #1
 8009336:	e036      	b.n	80093a6 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2220      	movs	r2, #32
 800933c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	2200      	movs	r2, #0
 8009344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8009348:	2300      	movs	r3, #0
 800934a:	e02c      	b.n	80093a6 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800935a:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009364:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009366:	69fb      	ldr	r3, [r7, #28]
 8009368:	9300      	str	r3, [sp, #0]
 800936a:	2319      	movs	r3, #25
 800936c:	2201      	movs	r2, #1
 800936e:	4910      	ldr	r1, [pc, #64]	; (80093b0 <HAL_I2C_IsDeviceReady+0x254>)
 8009370:	68f8      	ldr	r0, [r7, #12]
 8009372:	f000 f97d 	bl	8009670 <I2C_WaitOnFlagUntilTimeout>
 8009376:	4603      	mov	r3, r0
 8009378:	2b00      	cmp	r3, #0
 800937a:	d001      	beq.n	8009380 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 800937c:	2301      	movs	r3, #1
 800937e:	e012      	b.n	80093a6 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8009380:	69bb      	ldr	r3, [r7, #24]
 8009382:	3301      	adds	r3, #1
 8009384:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8009386:	69ba      	ldr	r2, [r7, #24]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	429a      	cmp	r2, r3
 800938c:	f4ff af33 	bcc.w	80091f6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2220      	movs	r2, #32
 8009394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2200      	movs	r2, #0
 800939c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80093a0:	2301      	movs	r3, #1
 80093a2:	e000      	b.n	80093a6 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 80093a4:	2302      	movs	r3, #2
  }
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3720      	adds	r7, #32
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	00100002 	.word	0x00100002
 80093b4:	ffff0000 	.word	0xffff0000

080093b8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093c6:	b2db      	uxtb	r3, r3
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	370c      	adds	r7, #12
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b088      	sub	sp, #32
 80093d8:	af02      	add	r7, sp, #8
 80093da:	60f8      	str	r0, [r7, #12]
 80093dc:	607a      	str	r2, [r7, #4]
 80093de:	603b      	str	r3, [r7, #0]
 80093e0:	460b      	mov	r3, r1
 80093e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	2b08      	cmp	r3, #8
 80093ee:	d006      	beq.n	80093fe <I2C_MasterRequestWrite+0x2a>
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d003      	beq.n	80093fe <I2C_MasterRequestWrite+0x2a>
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80093fc:	d108      	bne.n	8009410 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800940c:	601a      	str	r2, [r3, #0]
 800940e:	e00b      	b.n	8009428 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009414:	2b12      	cmp	r3, #18
 8009416:	d107      	bne.n	8009428 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009426:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	9300      	str	r3, [sp, #0]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	f000 f91b 	bl	8009670 <I2C_WaitOnFlagUntilTimeout>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d00c      	beq.n	800945a <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800944a:	2b00      	cmp	r3, #0
 800944c:	d003      	beq.n	8009456 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009454:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009456:	2303      	movs	r3, #3
 8009458:	e035      	b.n	80094c6 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	691b      	ldr	r3, [r3, #16]
 800945e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009462:	d108      	bne.n	8009476 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009464:	897b      	ldrh	r3, [r7, #10]
 8009466:	b2db      	uxtb	r3, r3
 8009468:	461a      	mov	r2, r3
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009472:	611a      	str	r2, [r3, #16]
 8009474:	e01b      	b.n	80094ae <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009476:	897b      	ldrh	r3, [r7, #10]
 8009478:	11db      	asrs	r3, r3, #7
 800947a:	b2db      	uxtb	r3, r3
 800947c:	f003 0306 	and.w	r3, r3, #6
 8009480:	b2db      	uxtb	r3, r3
 8009482:	f063 030f 	orn	r3, r3, #15
 8009486:	b2da      	uxtb	r2, r3
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	490f      	ldr	r1, [pc, #60]	; (80094d0 <I2C_MasterRequestWrite+0xfc>)
 8009494:	68f8      	ldr	r0, [r7, #12]
 8009496:	f000 f942 	bl	800971e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800949a:	4603      	mov	r3, r0
 800949c:	2b00      	cmp	r3, #0
 800949e:	d001      	beq.n	80094a4 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80094a0:	2301      	movs	r3, #1
 80094a2:	e010      	b.n	80094c6 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80094a4:	897b      	ldrh	r3, [r7, #10]
 80094a6:	b2da      	uxtb	r2, r3
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	4908      	ldr	r1, [pc, #32]	; (80094d4 <I2C_MasterRequestWrite+0x100>)
 80094b4:	68f8      	ldr	r0, [r7, #12]
 80094b6:	f000 f932 	bl	800971e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d001      	beq.n	80094c4 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80094c0:	2301      	movs	r3, #1
 80094c2:	e000      	b.n	80094c6 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80094c4:	2300      	movs	r3, #0
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3718      	adds	r7, #24
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	bf00      	nop
 80094d0:	00010008 	.word	0x00010008
 80094d4:	00010002 	.word	0x00010002

080094d8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	b088      	sub	sp, #32
 80094dc:	af02      	add	r7, sp, #8
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	607a      	str	r2, [r7, #4]
 80094e2:	603b      	str	r3, [r7, #0]
 80094e4:	460b      	mov	r3, r1
 80094e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ec:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	681a      	ldr	r2, [r3, #0]
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80094fc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	2b08      	cmp	r3, #8
 8009502:	d006      	beq.n	8009512 <I2C_MasterRequestRead+0x3a>
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	2b01      	cmp	r3, #1
 8009508:	d003      	beq.n	8009512 <I2C_MasterRequestRead+0x3a>
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009510:	d108      	bne.n	8009524 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009520:	601a      	str	r2, [r3, #0]
 8009522:	e00b      	b.n	800953c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009528:	2b11      	cmp	r3, #17
 800952a:	d107      	bne.n	800953c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800953a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	9300      	str	r3, [sp, #0]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2200      	movs	r2, #0
 8009544:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009548:	68f8      	ldr	r0, [r7, #12]
 800954a:	f000 f891 	bl	8009670 <I2C_WaitOnFlagUntilTimeout>
 800954e:	4603      	mov	r3, r0
 8009550:	2b00      	cmp	r3, #0
 8009552:	d00c      	beq.n	800956e <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800955e:	2b00      	cmp	r3, #0
 8009560:	d003      	beq.n	800956a <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009568:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800956a:	2303      	movs	r3, #3
 800956c:	e078      	b.n	8009660 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	691b      	ldr	r3, [r3, #16]
 8009572:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009576:	d108      	bne.n	800958a <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009578:	897b      	ldrh	r3, [r7, #10]
 800957a:	b2db      	uxtb	r3, r3
 800957c:	f043 0301 	orr.w	r3, r3, #1
 8009580:	b2da      	uxtb	r2, r3
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	611a      	str	r2, [r3, #16]
 8009588:	e05e      	b.n	8009648 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800958a:	897b      	ldrh	r3, [r7, #10]
 800958c:	11db      	asrs	r3, r3, #7
 800958e:	b2db      	uxtb	r3, r3
 8009590:	f003 0306 	and.w	r3, r3, #6
 8009594:	b2db      	uxtb	r3, r3
 8009596:	f063 030f 	orn	r3, r3, #15
 800959a:	b2da      	uxtb	r2, r3
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	687a      	ldr	r2, [r7, #4]
 80095a6:	4930      	ldr	r1, [pc, #192]	; (8009668 <I2C_MasterRequestRead+0x190>)
 80095a8:	68f8      	ldr	r0, [r7, #12]
 80095aa:	f000 f8b8 	bl	800971e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80095ae:	4603      	mov	r3, r0
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d001      	beq.n	80095b8 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 80095b4:	2301      	movs	r3, #1
 80095b6:	e053      	b.n	8009660 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80095b8:	897b      	ldrh	r3, [r7, #10]
 80095ba:	b2da      	uxtb	r2, r3
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	4929      	ldr	r1, [pc, #164]	; (800966c <I2C_MasterRequestRead+0x194>)
 80095c8:	68f8      	ldr	r0, [r7, #12]
 80095ca:	f000 f8a8 	bl	800971e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d001      	beq.n	80095d8 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 80095d4:	2301      	movs	r3, #1
 80095d6:	e043      	b.n	8009660 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80095d8:	2300      	movs	r3, #0
 80095da:	613b      	str	r3, [r7, #16]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	695b      	ldr	r3, [r3, #20]
 80095e2:	613b      	str	r3, [r7, #16]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	699b      	ldr	r3, [r3, #24]
 80095ea:	613b      	str	r3, [r7, #16]
 80095ec:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80095fc:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	9300      	str	r3, [sp, #0]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800960a:	68f8      	ldr	r0, [r7, #12]
 800960c:	f000 f830 	bl	8009670 <I2C_WaitOnFlagUntilTimeout>
 8009610:	4603      	mov	r3, r0
 8009612:	2b00      	cmp	r3, #0
 8009614:	d00c      	beq.n	8009630 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009620:	2b00      	cmp	r3, #0
 8009622:	d003      	beq.n	800962c <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	f44f 7200 	mov.w	r2, #512	; 0x200
 800962a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800962c:	2303      	movs	r3, #3
 800962e:	e017      	b.n	8009660 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009630:	897b      	ldrh	r3, [r7, #10]
 8009632:	11db      	asrs	r3, r3, #7
 8009634:	b2db      	uxtb	r3, r3
 8009636:	f003 0306 	and.w	r3, r3, #6
 800963a:	b2db      	uxtb	r3, r3
 800963c:	f063 030e 	orn	r3, r3, #14
 8009640:	b2da      	uxtb	r2, r3
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	4907      	ldr	r1, [pc, #28]	; (800966c <I2C_MasterRequestRead+0x194>)
 800964e:	68f8      	ldr	r0, [r7, #12]
 8009650:	f000 f865 	bl	800971e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009654:	4603      	mov	r3, r0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d001      	beq.n	800965e <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 800965a:	2301      	movs	r3, #1
 800965c:	e000      	b.n	8009660 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 800965e:	2300      	movs	r3, #0
}
 8009660:	4618      	mov	r0, r3
 8009662:	3718      	adds	r7, #24
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}
 8009668:	00010008 	.word	0x00010008
 800966c:	00010002 	.word	0x00010002

08009670 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b084      	sub	sp, #16
 8009674:	af00      	add	r7, sp, #0
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	60b9      	str	r1, [r7, #8]
 800967a:	603b      	str	r3, [r7, #0]
 800967c:	4613      	mov	r3, r2
 800967e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009680:	e025      	b.n	80096ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009688:	d021      	beq.n	80096ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800968a:	f7fd fd9b 	bl	80071c4 <HAL_GetTick>
 800968e:	4602      	mov	r2, r0
 8009690:	69bb      	ldr	r3, [r7, #24]
 8009692:	1ad3      	subs	r3, r2, r3
 8009694:	683a      	ldr	r2, [r7, #0]
 8009696:	429a      	cmp	r2, r3
 8009698:	d302      	bcc.n	80096a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d116      	bne.n	80096ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2200      	movs	r2, #0
 80096a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2220      	movs	r2, #32
 80096aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2200      	movs	r2, #0
 80096b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ba:	f043 0220 	orr.w	r2, r3, #32
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2200      	movs	r2, #0
 80096c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80096ca:	2301      	movs	r3, #1
 80096cc:	e023      	b.n	8009716 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	0c1b      	lsrs	r3, r3, #16
 80096d2:	b2db      	uxtb	r3, r3
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d10d      	bne.n	80096f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	695b      	ldr	r3, [r3, #20]
 80096de:	43da      	mvns	r2, r3
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	4013      	ands	r3, r2
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	bf0c      	ite	eq
 80096ea:	2301      	moveq	r3, #1
 80096ec:	2300      	movne	r3, #0
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	461a      	mov	r2, r3
 80096f2:	e00c      	b.n	800970e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	699b      	ldr	r3, [r3, #24]
 80096fa:	43da      	mvns	r2, r3
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	4013      	ands	r3, r2
 8009700:	b29b      	uxth	r3, r3
 8009702:	2b00      	cmp	r3, #0
 8009704:	bf0c      	ite	eq
 8009706:	2301      	moveq	r3, #1
 8009708:	2300      	movne	r3, #0
 800970a:	b2db      	uxtb	r3, r3
 800970c:	461a      	mov	r2, r3
 800970e:	79fb      	ldrb	r3, [r7, #7]
 8009710:	429a      	cmp	r2, r3
 8009712:	d0b6      	beq.n	8009682 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009714:	2300      	movs	r3, #0
}
 8009716:	4618      	mov	r0, r3
 8009718:	3710      	adds	r7, #16
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}

0800971e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800971e:	b580      	push	{r7, lr}
 8009720:	b084      	sub	sp, #16
 8009722:	af00      	add	r7, sp, #0
 8009724:	60f8      	str	r0, [r7, #12]
 8009726:	60b9      	str	r1, [r7, #8]
 8009728:	607a      	str	r2, [r7, #4]
 800972a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800972c:	e051      	b.n	80097d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	695b      	ldr	r3, [r3, #20]
 8009734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800973c:	d123      	bne.n	8009786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800974c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009756:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2200      	movs	r2, #0
 800975c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2220      	movs	r2, #32
 8009762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2200      	movs	r2, #0
 800976a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009772:	f043 0204 	orr.w	r2, r3, #4
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2200      	movs	r2, #0
 800977e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009782:	2301      	movs	r3, #1
 8009784:	e046      	b.n	8009814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800978c:	d021      	beq.n	80097d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800978e:	f7fd fd19 	bl	80071c4 <HAL_GetTick>
 8009792:	4602      	mov	r2, r0
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	1ad3      	subs	r3, r2, r3
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	429a      	cmp	r2, r3
 800979c:	d302      	bcc.n	80097a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d116      	bne.n	80097d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2200      	movs	r2, #0
 80097a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2220      	movs	r2, #32
 80097ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	2200      	movs	r2, #0
 80097b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097be:	f043 0220 	orr.w	r2, r3, #32
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2200      	movs	r2, #0
 80097ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80097ce:	2301      	movs	r3, #1
 80097d0:	e020      	b.n	8009814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	0c1b      	lsrs	r3, r3, #16
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d10c      	bne.n	80097f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	695b      	ldr	r3, [r3, #20]
 80097e2:	43da      	mvns	r2, r3
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	4013      	ands	r3, r2
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	bf14      	ite	ne
 80097ee:	2301      	movne	r3, #1
 80097f0:	2300      	moveq	r3, #0
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	e00b      	b.n	800980e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	699b      	ldr	r3, [r3, #24]
 80097fc:	43da      	mvns	r2, r3
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	4013      	ands	r3, r2
 8009802:	b29b      	uxth	r3, r3
 8009804:	2b00      	cmp	r3, #0
 8009806:	bf14      	ite	ne
 8009808:	2301      	movne	r3, #1
 800980a:	2300      	moveq	r3, #0
 800980c:	b2db      	uxtb	r3, r3
 800980e:	2b00      	cmp	r3, #0
 8009810:	d18d      	bne.n	800972e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009812:	2300      	movs	r3, #0
}
 8009814:	4618      	mov	r0, r3
 8009816:	3710      	adds	r7, #16
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}

0800981c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b084      	sub	sp, #16
 8009820:	af00      	add	r7, sp, #0
 8009822:	60f8      	str	r0, [r7, #12]
 8009824:	60b9      	str	r1, [r7, #8]
 8009826:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009828:	e02d      	b.n	8009886 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	f000 f8ce 	bl	80099cc <I2C_IsAcknowledgeFailed>
 8009830:	4603      	mov	r3, r0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d001      	beq.n	800983a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009836:	2301      	movs	r3, #1
 8009838:	e02d      	b.n	8009896 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009840:	d021      	beq.n	8009886 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009842:	f7fd fcbf 	bl	80071c4 <HAL_GetTick>
 8009846:	4602      	mov	r2, r0
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	1ad3      	subs	r3, r2, r3
 800984c:	68ba      	ldr	r2, [r7, #8]
 800984e:	429a      	cmp	r2, r3
 8009850:	d302      	bcc.n	8009858 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d116      	bne.n	8009886 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2200      	movs	r2, #0
 800985c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2220      	movs	r2, #32
 8009862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	2200      	movs	r2, #0
 800986a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009872:	f043 0220 	orr.w	r2, r3, #32
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2200      	movs	r2, #0
 800987e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009882:	2301      	movs	r3, #1
 8009884:	e007      	b.n	8009896 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	695b      	ldr	r3, [r3, #20]
 800988c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009890:	2b80      	cmp	r3, #128	; 0x80
 8009892:	d1ca      	bne.n	800982a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009894:	2300      	movs	r3, #0
}
 8009896:	4618      	mov	r0, r3
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b084      	sub	sp, #16
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	60f8      	str	r0, [r7, #12]
 80098a6:	60b9      	str	r1, [r7, #8]
 80098a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80098aa:	e02d      	b.n	8009908 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80098ac:	68f8      	ldr	r0, [r7, #12]
 80098ae:	f000 f88d 	bl	80099cc <I2C_IsAcknowledgeFailed>
 80098b2:	4603      	mov	r3, r0
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d001      	beq.n	80098bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80098b8:	2301      	movs	r3, #1
 80098ba:	e02d      	b.n	8009918 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098c2:	d021      	beq.n	8009908 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098c4:	f7fd fc7e 	bl	80071c4 <HAL_GetTick>
 80098c8:	4602      	mov	r2, r0
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	1ad3      	subs	r3, r2, r3
 80098ce:	68ba      	ldr	r2, [r7, #8]
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d302      	bcc.n	80098da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d116      	bne.n	8009908 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2200      	movs	r2, #0
 80098de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2220      	movs	r2, #32
 80098e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	2200      	movs	r2, #0
 80098ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f4:	f043 0220 	orr.w	r2, r3, #32
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	2200      	movs	r2, #0
 8009900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009904:	2301      	movs	r3, #1
 8009906:	e007      	b.n	8009918 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	695b      	ldr	r3, [r3, #20]
 800990e:	f003 0304 	and.w	r3, r3, #4
 8009912:	2b04      	cmp	r3, #4
 8009914:	d1ca      	bne.n	80098ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009916:	2300      	movs	r3, #0
}
 8009918:	4618      	mov	r0, r3
 800991a:	3710      	adds	r7, #16
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	60f8      	str	r0, [r7, #12]
 8009928:	60b9      	str	r1, [r7, #8]
 800992a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800992c:	e042      	b.n	80099b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	695b      	ldr	r3, [r3, #20]
 8009934:	f003 0310 	and.w	r3, r3, #16
 8009938:	2b10      	cmp	r3, #16
 800993a:	d119      	bne.n	8009970 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f06f 0210 	mvn.w	r2, #16
 8009944:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2200      	movs	r2, #0
 800994a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2220      	movs	r2, #32
 8009950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2200      	movs	r2, #0
 8009958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2200      	movs	r2, #0
 8009968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800996c:	2301      	movs	r3, #1
 800996e:	e029      	b.n	80099c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009970:	f7fd fc28 	bl	80071c4 <HAL_GetTick>
 8009974:	4602      	mov	r2, r0
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	1ad3      	subs	r3, r2, r3
 800997a:	68ba      	ldr	r2, [r7, #8]
 800997c:	429a      	cmp	r2, r3
 800997e:	d302      	bcc.n	8009986 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d116      	bne.n	80099b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2200      	movs	r2, #0
 800998a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2220      	movs	r2, #32
 8009990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2200      	movs	r2, #0
 8009998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099a0:	f043 0220 	orr.w	r2, r3, #32
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	2200      	movs	r2, #0
 80099ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80099b0:	2301      	movs	r3, #1
 80099b2:	e007      	b.n	80099c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	695b      	ldr	r3, [r3, #20]
 80099ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099be:	2b40      	cmp	r3, #64	; 0x40
 80099c0:	d1b5      	bne.n	800992e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80099c2:	2300      	movs	r3, #0
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3710      	adds	r7, #16
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b083      	sub	sp, #12
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	695b      	ldr	r3, [r3, #20]
 80099da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099e2:	d11b      	bne.n	8009a1c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80099ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2200      	movs	r2, #0
 80099f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2220      	movs	r2, #32
 80099f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2200      	movs	r2, #0
 8009a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a08:	f043 0204 	orr.w	r2, r3, #4
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	e000      	b.n	8009a1e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009a1c:	2300      	movs	r3, #0
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	370c      	adds	r7, #12
 8009a22:	46bd      	mov	sp, r7
 8009a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a28:	4770      	bx	lr
	...

08009a2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b086      	sub	sp, #24
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d101      	bne.n	8009a3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e25b      	b.n	8009ef6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f003 0301 	and.w	r3, r3, #1
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d075      	beq.n	8009b36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009a4a:	4ba3      	ldr	r3, [pc, #652]	; (8009cd8 <HAL_RCC_OscConfig+0x2ac>)
 8009a4c:	689b      	ldr	r3, [r3, #8]
 8009a4e:	f003 030c 	and.w	r3, r3, #12
 8009a52:	2b04      	cmp	r3, #4
 8009a54:	d00c      	beq.n	8009a70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009a56:	4ba0      	ldr	r3, [pc, #640]	; (8009cd8 <HAL_RCC_OscConfig+0x2ac>)
 8009a58:	689b      	ldr	r3, [r3, #8]
 8009a5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009a5e:	2b08      	cmp	r3, #8
 8009a60:	d112      	bne.n	8009a88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009a62:	4b9d      	ldr	r3, [pc, #628]	; (8009cd8 <HAL_RCC_OscConfig+0x2ac>)
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a6e:	d10b      	bne.n	8009a88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a70:	4b99      	ldr	r3, [pc, #612]	; (8009cd8 <HAL_RCC_OscConfig+0x2ac>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d05b      	beq.n	8009b34 <HAL_RCC_OscConfig+0x108>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d157      	bne.n	8009b34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009a84:	2301      	movs	r3, #1
 8009a86:	e236      	b.n	8009ef6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a90:	d106      	bne.n	8009aa0 <HAL_RCC_OscConfig+0x74>
 8009a92:	4b91      	ldr	r3, [pc, #580]	; (8009cd8 <HAL_RCC_OscConfig+0x2ac>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a90      	ldr	r2, [pc, #576]	; (8009cd8 <HAL_RCC_OscConfig+0x2ac>)
 8009a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a9c:	6013      	str	r3, [r2, #0]
 8009a9e:	e01d      	b.n	8009adc <HAL_RCC_OscConfig+0xb0>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009aa8:	d10c      	bne.n	8009ac4 <HAL_RCC_OscConfig+0x98>
 8009aaa:	4b8b      	ldr	r3, [pc, #556]	; (8009cd8 <HAL_RCC_OscConfig+0x2ac>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a8a      	ldr	r2, [pc, #552]	; (8009cd8 <HAL_RCC_OscConfig+0x2ac>)
 8009ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009ab4:	6013      	str	r3, [r2, #0]
 8009ab6:	4b88      	ldr	r3, [pc, #544]	; (8009cd8 <HAL_RCC_OscConfig+0x2ac>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a87      	ldr	r2, [pc, #540]	; (8009cd8 <HAL_RCC_OscConfig+0x2ac>)
 8009abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ac0:	6013      	str	r3, [r2, #0]
 8009ac2:	e00b      	b.n	8009adc <HAL_RCC_OscConfig+0xb0>
 8009ac4:	4b84      	ldr	r3, [pc, #528]	; (8009cd8 <HAL_RCC_OscConfig+0x2ac>)
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a83      	ldr	r2, [pc, #524]	; (8009cd8 <HAL_RCC_OscConfig+0x2ac>)
 8009aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ace:	6013      	str	r3, [r2, #0]
 8009ad0:	4b81      	ldr	r3, [pc, #516]	; (8009cd8 <HAL_RCC_OscConfig+0x2ac>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4a80      	ldr	r2, [pc, #512]	; (8009cd8 <HAL_RCC_OscConfig+0x2ac>)
 8009ad6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ada:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	685b      	ldr	r3, [r3, #4]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d013      	beq.n	8009b0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009ae4:	f7fd fb6e 	bl	80071c4 <HAL_GetTick>
 8009ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009aea:	e008      	b.n	8009afe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009aec:	f7fd fb6a 	bl	80071c4 <HAL_GetTick>
 8009af0:	4602      	mov	r2, r0
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	1ad3      	subs	r3, r2, r3
 8009af6:	2b64      	cmp	r3, #100	; 0x64
 8009af8:	d901      	bls.n	8009afe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009afa:	2303      	movs	r3, #3
 8009afc:	e1fb      	b.n	8009ef6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009afe:	4b76      	ldr	r3, [pc, #472]	; (8009cd8 <HAL_RCC_OscConfig+0x2ac>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d0f0      	beq.n	8009aec <HAL_RCC_OscConfig+0xc0>
 8009b0a:	e014      	b.n	8009b36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b0c:	f7fd fb5a 	bl	80071c4 <HAL_GetTick>
 8009b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009b12:	e008      	b.n	8009b26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009b14:	f7fd fb56 	bl	80071c4 <HAL_GetTick>
 8009b18:	4602      	mov	r2, r0
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	1ad3      	subs	r3, r2, r3
 8009b1e:	2b64      	cmp	r3, #100	; 0x64
 8009b20:	d901      	bls.n	8009b26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009b22:	2303      	movs	r3, #3
 8009b24:	e1e7      	b.n	8009ef6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009b26:	4b6c      	ldr	r3, [pc, #432]	; (8009cd8 <HAL_RCC_OscConfig+0x2ac>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d1f0      	bne.n	8009b14 <HAL_RCC_OscConfig+0xe8>
 8009b32:	e000      	b.n	8009b36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f003 0302 	and.w	r3, r3, #2
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d063      	beq.n	8009c0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009b42:	4b65      	ldr	r3, [pc, #404]	; (8009cd8 <HAL_RCC_OscConfig+0x2ac>)
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	f003 030c 	and.w	r3, r3, #12
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d00b      	beq.n	8009b66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009b4e:	4b62      	ldr	r3, [pc, #392]	; (8009cd8 <HAL_RCC_OscConfig+0x2ac>)
 8009b50:	689b      	ldr	r3, [r3, #8]
 8009b52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009b56:	2b08      	cmp	r3, #8
 8009b58:	d11c      	bne.n	8009b94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009b5a:	4b5f      	ldr	r3, [pc, #380]	; (8009cd8 <HAL_RCC_OscConfig+0x2ac>)
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d116      	bne.n	8009b94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009b66:	4b5c      	ldr	r3, [pc, #368]	; (8009cd8 <HAL_RCC_OscConfig+0x2ac>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f003 0302 	and.w	r3, r3, #2
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d005      	beq.n	8009b7e <HAL_RCC_OscConfig+0x152>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	68db      	ldr	r3, [r3, #12]
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	d001      	beq.n	8009b7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	e1bb      	b.n	8009ef6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b7e:	4b56      	ldr	r3, [pc, #344]	; (8009cd8 <HAL_RCC_OscConfig+0x2ac>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	691b      	ldr	r3, [r3, #16]
 8009b8a:	00db      	lsls	r3, r3, #3
 8009b8c:	4952      	ldr	r1, [pc, #328]	; (8009cd8 <HAL_RCC_OscConfig+0x2ac>)
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009b92:	e03a      	b.n	8009c0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d020      	beq.n	8009bde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009b9c:	4b4f      	ldr	r3, [pc, #316]	; (8009cdc <HAL_RCC_OscConfig+0x2b0>)
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ba2:	f7fd fb0f 	bl	80071c4 <HAL_GetTick>
 8009ba6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009ba8:	e008      	b.n	8009bbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009baa:	f7fd fb0b 	bl	80071c4 <HAL_GetTick>
 8009bae:	4602      	mov	r2, r0
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	1ad3      	subs	r3, r2, r3
 8009bb4:	2b02      	cmp	r3, #2
 8009bb6:	d901      	bls.n	8009bbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009bb8:	2303      	movs	r3, #3
 8009bba:	e19c      	b.n	8009ef6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009bbc:	4b46      	ldr	r3, [pc, #280]	; (8009cd8 <HAL_RCC_OscConfig+0x2ac>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f003 0302 	and.w	r3, r3, #2
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d0f0      	beq.n	8009baa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009bc8:	4b43      	ldr	r3, [pc, #268]	; (8009cd8 <HAL_RCC_OscConfig+0x2ac>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	691b      	ldr	r3, [r3, #16]
 8009bd4:	00db      	lsls	r3, r3, #3
 8009bd6:	4940      	ldr	r1, [pc, #256]	; (8009cd8 <HAL_RCC_OscConfig+0x2ac>)
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	600b      	str	r3, [r1, #0]
 8009bdc:	e015      	b.n	8009c0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009bde:	4b3f      	ldr	r3, [pc, #252]	; (8009cdc <HAL_RCC_OscConfig+0x2b0>)
 8009be0:	2200      	movs	r2, #0
 8009be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009be4:	f7fd faee 	bl	80071c4 <HAL_GetTick>
 8009be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009bea:	e008      	b.n	8009bfe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009bec:	f7fd faea 	bl	80071c4 <HAL_GetTick>
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	1ad3      	subs	r3, r2, r3
 8009bf6:	2b02      	cmp	r3, #2
 8009bf8:	d901      	bls.n	8009bfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009bfa:	2303      	movs	r3, #3
 8009bfc:	e17b      	b.n	8009ef6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009bfe:	4b36      	ldr	r3, [pc, #216]	; (8009cd8 <HAL_RCC_OscConfig+0x2ac>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f003 0302 	and.w	r3, r3, #2
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d1f0      	bne.n	8009bec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f003 0308 	and.w	r3, r3, #8
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d030      	beq.n	8009c78 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	695b      	ldr	r3, [r3, #20]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d016      	beq.n	8009c4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009c1e:	4b30      	ldr	r3, [pc, #192]	; (8009ce0 <HAL_RCC_OscConfig+0x2b4>)
 8009c20:	2201      	movs	r2, #1
 8009c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c24:	f7fd face 	bl	80071c4 <HAL_GetTick>
 8009c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009c2a:	e008      	b.n	8009c3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009c2c:	f7fd faca 	bl	80071c4 <HAL_GetTick>
 8009c30:	4602      	mov	r2, r0
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	1ad3      	subs	r3, r2, r3
 8009c36:	2b02      	cmp	r3, #2
 8009c38:	d901      	bls.n	8009c3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009c3a:	2303      	movs	r3, #3
 8009c3c:	e15b      	b.n	8009ef6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009c3e:	4b26      	ldr	r3, [pc, #152]	; (8009cd8 <HAL_RCC_OscConfig+0x2ac>)
 8009c40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c42:	f003 0302 	and.w	r3, r3, #2
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d0f0      	beq.n	8009c2c <HAL_RCC_OscConfig+0x200>
 8009c4a:	e015      	b.n	8009c78 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009c4c:	4b24      	ldr	r3, [pc, #144]	; (8009ce0 <HAL_RCC_OscConfig+0x2b4>)
 8009c4e:	2200      	movs	r2, #0
 8009c50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009c52:	f7fd fab7 	bl	80071c4 <HAL_GetTick>
 8009c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009c58:	e008      	b.n	8009c6c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009c5a:	f7fd fab3 	bl	80071c4 <HAL_GetTick>
 8009c5e:	4602      	mov	r2, r0
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	1ad3      	subs	r3, r2, r3
 8009c64:	2b02      	cmp	r3, #2
 8009c66:	d901      	bls.n	8009c6c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009c68:	2303      	movs	r3, #3
 8009c6a:	e144      	b.n	8009ef6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009c6c:	4b1a      	ldr	r3, [pc, #104]	; (8009cd8 <HAL_RCC_OscConfig+0x2ac>)
 8009c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c70:	f003 0302 	and.w	r3, r3, #2
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d1f0      	bne.n	8009c5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f003 0304 	and.w	r3, r3, #4
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	f000 80a0 	beq.w	8009dc6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009c86:	2300      	movs	r3, #0
 8009c88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009c8a:	4b13      	ldr	r3, [pc, #76]	; (8009cd8 <HAL_RCC_OscConfig+0x2ac>)
 8009c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d10f      	bne.n	8009cb6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009c96:	2300      	movs	r3, #0
 8009c98:	60bb      	str	r3, [r7, #8]
 8009c9a:	4b0f      	ldr	r3, [pc, #60]	; (8009cd8 <HAL_RCC_OscConfig+0x2ac>)
 8009c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c9e:	4a0e      	ldr	r2, [pc, #56]	; (8009cd8 <HAL_RCC_OscConfig+0x2ac>)
 8009ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8009ca6:	4b0c      	ldr	r3, [pc, #48]	; (8009cd8 <HAL_RCC_OscConfig+0x2ac>)
 8009ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cae:	60bb      	str	r3, [r7, #8]
 8009cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009cb6:	4b0b      	ldr	r3, [pc, #44]	; (8009ce4 <HAL_RCC_OscConfig+0x2b8>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d121      	bne.n	8009d06 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009cc2:	4b08      	ldr	r3, [pc, #32]	; (8009ce4 <HAL_RCC_OscConfig+0x2b8>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4a07      	ldr	r2, [pc, #28]	; (8009ce4 <HAL_RCC_OscConfig+0x2b8>)
 8009cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ccc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009cce:	f7fd fa79 	bl	80071c4 <HAL_GetTick>
 8009cd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009cd4:	e011      	b.n	8009cfa <HAL_RCC_OscConfig+0x2ce>
 8009cd6:	bf00      	nop
 8009cd8:	40023800 	.word	0x40023800
 8009cdc:	42470000 	.word	0x42470000
 8009ce0:	42470e80 	.word	0x42470e80
 8009ce4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ce8:	f7fd fa6c 	bl	80071c4 <HAL_GetTick>
 8009cec:	4602      	mov	r2, r0
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	1ad3      	subs	r3, r2, r3
 8009cf2:	2b02      	cmp	r3, #2
 8009cf4:	d901      	bls.n	8009cfa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009cf6:	2303      	movs	r3, #3
 8009cf8:	e0fd      	b.n	8009ef6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009cfa:	4b81      	ldr	r3, [pc, #516]	; (8009f00 <HAL_RCC_OscConfig+0x4d4>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d0f0      	beq.n	8009ce8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	689b      	ldr	r3, [r3, #8]
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d106      	bne.n	8009d1c <HAL_RCC_OscConfig+0x2f0>
 8009d0e:	4b7d      	ldr	r3, [pc, #500]	; (8009f04 <HAL_RCC_OscConfig+0x4d8>)
 8009d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d12:	4a7c      	ldr	r2, [pc, #496]	; (8009f04 <HAL_RCC_OscConfig+0x4d8>)
 8009d14:	f043 0301 	orr.w	r3, r3, #1
 8009d18:	6713      	str	r3, [r2, #112]	; 0x70
 8009d1a:	e01c      	b.n	8009d56 <HAL_RCC_OscConfig+0x32a>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	689b      	ldr	r3, [r3, #8]
 8009d20:	2b05      	cmp	r3, #5
 8009d22:	d10c      	bne.n	8009d3e <HAL_RCC_OscConfig+0x312>
 8009d24:	4b77      	ldr	r3, [pc, #476]	; (8009f04 <HAL_RCC_OscConfig+0x4d8>)
 8009d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d28:	4a76      	ldr	r2, [pc, #472]	; (8009f04 <HAL_RCC_OscConfig+0x4d8>)
 8009d2a:	f043 0304 	orr.w	r3, r3, #4
 8009d2e:	6713      	str	r3, [r2, #112]	; 0x70
 8009d30:	4b74      	ldr	r3, [pc, #464]	; (8009f04 <HAL_RCC_OscConfig+0x4d8>)
 8009d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d34:	4a73      	ldr	r2, [pc, #460]	; (8009f04 <HAL_RCC_OscConfig+0x4d8>)
 8009d36:	f043 0301 	orr.w	r3, r3, #1
 8009d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8009d3c:	e00b      	b.n	8009d56 <HAL_RCC_OscConfig+0x32a>
 8009d3e:	4b71      	ldr	r3, [pc, #452]	; (8009f04 <HAL_RCC_OscConfig+0x4d8>)
 8009d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d42:	4a70      	ldr	r2, [pc, #448]	; (8009f04 <HAL_RCC_OscConfig+0x4d8>)
 8009d44:	f023 0301 	bic.w	r3, r3, #1
 8009d48:	6713      	str	r3, [r2, #112]	; 0x70
 8009d4a:	4b6e      	ldr	r3, [pc, #440]	; (8009f04 <HAL_RCC_OscConfig+0x4d8>)
 8009d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d4e:	4a6d      	ldr	r2, [pc, #436]	; (8009f04 <HAL_RCC_OscConfig+0x4d8>)
 8009d50:	f023 0304 	bic.w	r3, r3, #4
 8009d54:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d015      	beq.n	8009d8a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d5e:	f7fd fa31 	bl	80071c4 <HAL_GetTick>
 8009d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009d64:	e00a      	b.n	8009d7c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009d66:	f7fd fa2d 	bl	80071c4 <HAL_GetTick>
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	1ad3      	subs	r3, r2, r3
 8009d70:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d901      	bls.n	8009d7c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009d78:	2303      	movs	r3, #3
 8009d7a:	e0bc      	b.n	8009ef6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009d7c:	4b61      	ldr	r3, [pc, #388]	; (8009f04 <HAL_RCC_OscConfig+0x4d8>)
 8009d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d80:	f003 0302 	and.w	r3, r3, #2
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d0ee      	beq.n	8009d66 <HAL_RCC_OscConfig+0x33a>
 8009d88:	e014      	b.n	8009db4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009d8a:	f7fd fa1b 	bl	80071c4 <HAL_GetTick>
 8009d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009d90:	e00a      	b.n	8009da8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009d92:	f7fd fa17 	bl	80071c4 <HAL_GetTick>
 8009d96:	4602      	mov	r2, r0
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	1ad3      	subs	r3, r2, r3
 8009d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d901      	bls.n	8009da8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009da4:	2303      	movs	r3, #3
 8009da6:	e0a6      	b.n	8009ef6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009da8:	4b56      	ldr	r3, [pc, #344]	; (8009f04 <HAL_RCC_OscConfig+0x4d8>)
 8009daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dac:	f003 0302 	and.w	r3, r3, #2
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d1ee      	bne.n	8009d92 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009db4:	7dfb      	ldrb	r3, [r7, #23]
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d105      	bne.n	8009dc6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009dba:	4b52      	ldr	r3, [pc, #328]	; (8009f04 <HAL_RCC_OscConfig+0x4d8>)
 8009dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dbe:	4a51      	ldr	r2, [pc, #324]	; (8009f04 <HAL_RCC_OscConfig+0x4d8>)
 8009dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009dc4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	699b      	ldr	r3, [r3, #24]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	f000 8092 	beq.w	8009ef4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009dd0:	4b4c      	ldr	r3, [pc, #304]	; (8009f04 <HAL_RCC_OscConfig+0x4d8>)
 8009dd2:	689b      	ldr	r3, [r3, #8]
 8009dd4:	f003 030c 	and.w	r3, r3, #12
 8009dd8:	2b08      	cmp	r3, #8
 8009dda:	d05c      	beq.n	8009e96 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	699b      	ldr	r3, [r3, #24]
 8009de0:	2b02      	cmp	r3, #2
 8009de2:	d141      	bne.n	8009e68 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009de4:	4b48      	ldr	r3, [pc, #288]	; (8009f08 <HAL_RCC_OscConfig+0x4dc>)
 8009de6:	2200      	movs	r2, #0
 8009de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009dea:	f7fd f9eb 	bl	80071c4 <HAL_GetTick>
 8009dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009df0:	e008      	b.n	8009e04 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009df2:	f7fd f9e7 	bl	80071c4 <HAL_GetTick>
 8009df6:	4602      	mov	r2, r0
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	1ad3      	subs	r3, r2, r3
 8009dfc:	2b02      	cmp	r3, #2
 8009dfe:	d901      	bls.n	8009e04 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009e00:	2303      	movs	r3, #3
 8009e02:	e078      	b.n	8009ef6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e04:	4b3f      	ldr	r3, [pc, #252]	; (8009f04 <HAL_RCC_OscConfig+0x4d8>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d1f0      	bne.n	8009df2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	69da      	ldr	r2, [r3, #28]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6a1b      	ldr	r3, [r3, #32]
 8009e18:	431a      	orrs	r2, r3
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1e:	019b      	lsls	r3, r3, #6
 8009e20:	431a      	orrs	r2, r3
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e26:	085b      	lsrs	r3, r3, #1
 8009e28:	3b01      	subs	r3, #1
 8009e2a:	041b      	lsls	r3, r3, #16
 8009e2c:	431a      	orrs	r2, r3
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e32:	061b      	lsls	r3, r3, #24
 8009e34:	4933      	ldr	r1, [pc, #204]	; (8009f04 <HAL_RCC_OscConfig+0x4d8>)
 8009e36:	4313      	orrs	r3, r2
 8009e38:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009e3a:	4b33      	ldr	r3, [pc, #204]	; (8009f08 <HAL_RCC_OscConfig+0x4dc>)
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e40:	f7fd f9c0 	bl	80071c4 <HAL_GetTick>
 8009e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009e46:	e008      	b.n	8009e5a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e48:	f7fd f9bc 	bl	80071c4 <HAL_GetTick>
 8009e4c:	4602      	mov	r2, r0
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	1ad3      	subs	r3, r2, r3
 8009e52:	2b02      	cmp	r3, #2
 8009e54:	d901      	bls.n	8009e5a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009e56:	2303      	movs	r3, #3
 8009e58:	e04d      	b.n	8009ef6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009e5a:	4b2a      	ldr	r3, [pc, #168]	; (8009f04 <HAL_RCC_OscConfig+0x4d8>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d0f0      	beq.n	8009e48 <HAL_RCC_OscConfig+0x41c>
 8009e66:	e045      	b.n	8009ef4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e68:	4b27      	ldr	r3, [pc, #156]	; (8009f08 <HAL_RCC_OscConfig+0x4dc>)
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e6e:	f7fd f9a9 	bl	80071c4 <HAL_GetTick>
 8009e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e74:	e008      	b.n	8009e88 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e76:	f7fd f9a5 	bl	80071c4 <HAL_GetTick>
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	1ad3      	subs	r3, r2, r3
 8009e80:	2b02      	cmp	r3, #2
 8009e82:	d901      	bls.n	8009e88 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009e84:	2303      	movs	r3, #3
 8009e86:	e036      	b.n	8009ef6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e88:	4b1e      	ldr	r3, [pc, #120]	; (8009f04 <HAL_RCC_OscConfig+0x4d8>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d1f0      	bne.n	8009e76 <HAL_RCC_OscConfig+0x44a>
 8009e94:	e02e      	b.n	8009ef4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	699b      	ldr	r3, [r3, #24]
 8009e9a:	2b01      	cmp	r3, #1
 8009e9c:	d101      	bne.n	8009ea2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	e029      	b.n	8009ef6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009ea2:	4b18      	ldr	r3, [pc, #96]	; (8009f04 <HAL_RCC_OscConfig+0x4d8>)
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	69db      	ldr	r3, [r3, #28]
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d11c      	bne.n	8009ef0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d115      	bne.n	8009ef0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009ec4:	68fa      	ldr	r2, [r7, #12]
 8009ec6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009eca:	4013      	ands	r3, r2
 8009ecc:	687a      	ldr	r2, [r7, #4]
 8009ece:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d10d      	bne.n	8009ef0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	d106      	bne.n	8009ef0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d001      	beq.n	8009ef4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	e000      	b.n	8009ef6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8009ef4:	2300      	movs	r3, #0
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	3718      	adds	r7, #24
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}
 8009efe:	bf00      	nop
 8009f00:	40007000 	.word	0x40007000
 8009f04:	40023800 	.word	0x40023800
 8009f08:	42470060 	.word	0x42470060

08009f0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b084      	sub	sp, #16
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d101      	bne.n	8009f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	e0cc      	b.n	800a0ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009f20:	4b68      	ldr	r3, [pc, #416]	; (800a0c4 <HAL_RCC_ClockConfig+0x1b8>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f003 030f 	and.w	r3, r3, #15
 8009f28:	683a      	ldr	r2, [r7, #0]
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d90c      	bls.n	8009f48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f2e:	4b65      	ldr	r3, [pc, #404]	; (800a0c4 <HAL_RCC_ClockConfig+0x1b8>)
 8009f30:	683a      	ldr	r2, [r7, #0]
 8009f32:	b2d2      	uxtb	r2, r2
 8009f34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f36:	4b63      	ldr	r3, [pc, #396]	; (800a0c4 <HAL_RCC_ClockConfig+0x1b8>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f003 030f 	and.w	r3, r3, #15
 8009f3e:	683a      	ldr	r2, [r7, #0]
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d001      	beq.n	8009f48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009f44:	2301      	movs	r3, #1
 8009f46:	e0b8      	b.n	800a0ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f003 0302 	and.w	r3, r3, #2
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d020      	beq.n	8009f96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	f003 0304 	and.w	r3, r3, #4
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d005      	beq.n	8009f6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009f60:	4b59      	ldr	r3, [pc, #356]	; (800a0c8 <HAL_RCC_ClockConfig+0x1bc>)
 8009f62:	689b      	ldr	r3, [r3, #8]
 8009f64:	4a58      	ldr	r2, [pc, #352]	; (800a0c8 <HAL_RCC_ClockConfig+0x1bc>)
 8009f66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009f6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	f003 0308 	and.w	r3, r3, #8
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d005      	beq.n	8009f84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009f78:	4b53      	ldr	r3, [pc, #332]	; (800a0c8 <HAL_RCC_ClockConfig+0x1bc>)
 8009f7a:	689b      	ldr	r3, [r3, #8]
 8009f7c:	4a52      	ldr	r2, [pc, #328]	; (800a0c8 <HAL_RCC_ClockConfig+0x1bc>)
 8009f7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009f82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009f84:	4b50      	ldr	r3, [pc, #320]	; (800a0c8 <HAL_RCC_ClockConfig+0x1bc>)
 8009f86:	689b      	ldr	r3, [r3, #8]
 8009f88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	689b      	ldr	r3, [r3, #8]
 8009f90:	494d      	ldr	r1, [pc, #308]	; (800a0c8 <HAL_RCC_ClockConfig+0x1bc>)
 8009f92:	4313      	orrs	r3, r2
 8009f94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f003 0301 	and.w	r3, r3, #1
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d044      	beq.n	800a02c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	d107      	bne.n	8009fba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009faa:	4b47      	ldr	r3, [pc, #284]	; (800a0c8 <HAL_RCC_ClockConfig+0x1bc>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d119      	bne.n	8009fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	e07f      	b.n	800a0ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	2b02      	cmp	r3, #2
 8009fc0:	d003      	beq.n	8009fca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009fc6:	2b03      	cmp	r3, #3
 8009fc8:	d107      	bne.n	8009fda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009fca:	4b3f      	ldr	r3, [pc, #252]	; (800a0c8 <HAL_RCC_ClockConfig+0x1bc>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d109      	bne.n	8009fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	e06f      	b.n	800a0ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009fda:	4b3b      	ldr	r3, [pc, #236]	; (800a0c8 <HAL_RCC_ClockConfig+0x1bc>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f003 0302 	and.w	r3, r3, #2
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d101      	bne.n	8009fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	e067      	b.n	800a0ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009fea:	4b37      	ldr	r3, [pc, #220]	; (800a0c8 <HAL_RCC_ClockConfig+0x1bc>)
 8009fec:	689b      	ldr	r3, [r3, #8]
 8009fee:	f023 0203 	bic.w	r2, r3, #3
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	4934      	ldr	r1, [pc, #208]	; (800a0c8 <HAL_RCC_ClockConfig+0x1bc>)
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009ffc:	f7fd f8e2 	bl	80071c4 <HAL_GetTick>
 800a000:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a002:	e00a      	b.n	800a01a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a004:	f7fd f8de 	bl	80071c4 <HAL_GetTick>
 800a008:	4602      	mov	r2, r0
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	1ad3      	subs	r3, r2, r3
 800a00e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a012:	4293      	cmp	r3, r2
 800a014:	d901      	bls.n	800a01a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a016:	2303      	movs	r3, #3
 800a018:	e04f      	b.n	800a0ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a01a:	4b2b      	ldr	r3, [pc, #172]	; (800a0c8 <HAL_RCC_ClockConfig+0x1bc>)
 800a01c:	689b      	ldr	r3, [r3, #8]
 800a01e:	f003 020c 	and.w	r2, r3, #12
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	009b      	lsls	r3, r3, #2
 800a028:	429a      	cmp	r2, r3
 800a02a:	d1eb      	bne.n	800a004 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a02c:	4b25      	ldr	r3, [pc, #148]	; (800a0c4 <HAL_RCC_ClockConfig+0x1b8>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f003 030f 	and.w	r3, r3, #15
 800a034:	683a      	ldr	r2, [r7, #0]
 800a036:	429a      	cmp	r2, r3
 800a038:	d20c      	bcs.n	800a054 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a03a:	4b22      	ldr	r3, [pc, #136]	; (800a0c4 <HAL_RCC_ClockConfig+0x1b8>)
 800a03c:	683a      	ldr	r2, [r7, #0]
 800a03e:	b2d2      	uxtb	r2, r2
 800a040:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a042:	4b20      	ldr	r3, [pc, #128]	; (800a0c4 <HAL_RCC_ClockConfig+0x1b8>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f003 030f 	and.w	r3, r3, #15
 800a04a:	683a      	ldr	r2, [r7, #0]
 800a04c:	429a      	cmp	r2, r3
 800a04e:	d001      	beq.n	800a054 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a050:	2301      	movs	r3, #1
 800a052:	e032      	b.n	800a0ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f003 0304 	and.w	r3, r3, #4
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d008      	beq.n	800a072 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a060:	4b19      	ldr	r3, [pc, #100]	; (800a0c8 <HAL_RCC_ClockConfig+0x1bc>)
 800a062:	689b      	ldr	r3, [r3, #8]
 800a064:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	4916      	ldr	r1, [pc, #88]	; (800a0c8 <HAL_RCC_ClockConfig+0x1bc>)
 800a06e:	4313      	orrs	r3, r2
 800a070:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f003 0308 	and.w	r3, r3, #8
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d009      	beq.n	800a092 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a07e:	4b12      	ldr	r3, [pc, #72]	; (800a0c8 <HAL_RCC_ClockConfig+0x1bc>)
 800a080:	689b      	ldr	r3, [r3, #8]
 800a082:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	691b      	ldr	r3, [r3, #16]
 800a08a:	00db      	lsls	r3, r3, #3
 800a08c:	490e      	ldr	r1, [pc, #56]	; (800a0c8 <HAL_RCC_ClockConfig+0x1bc>)
 800a08e:	4313      	orrs	r3, r2
 800a090:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a092:	f000 f821 	bl	800a0d8 <HAL_RCC_GetSysClockFreq>
 800a096:	4601      	mov	r1, r0
 800a098:	4b0b      	ldr	r3, [pc, #44]	; (800a0c8 <HAL_RCC_ClockConfig+0x1bc>)
 800a09a:	689b      	ldr	r3, [r3, #8]
 800a09c:	091b      	lsrs	r3, r3, #4
 800a09e:	f003 030f 	and.w	r3, r3, #15
 800a0a2:	4a0a      	ldr	r2, [pc, #40]	; (800a0cc <HAL_RCC_ClockConfig+0x1c0>)
 800a0a4:	5cd3      	ldrb	r3, [r2, r3]
 800a0a6:	fa21 f303 	lsr.w	r3, r1, r3
 800a0aa:	4a09      	ldr	r2, [pc, #36]	; (800a0d0 <HAL_RCC_ClockConfig+0x1c4>)
 800a0ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a0ae:	4b09      	ldr	r3, [pc, #36]	; (800a0d4 <HAL_RCC_ClockConfig+0x1c8>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f7fd f842 	bl	800713c <HAL_InitTick>

  return HAL_OK;
 800a0b8:	2300      	movs	r3, #0
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3710      	adds	r7, #16
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	40023c00 	.word	0x40023c00
 800a0c8:	40023800 	.word	0x40023800
 800a0cc:	080165f0 	.word	0x080165f0
 800a0d0:	2000014c 	.word	0x2000014c
 800a0d4:	20000154 	.word	0x20000154

0800a0d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a0d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0da:	b085      	sub	sp, #20
 800a0dc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	607b      	str	r3, [r7, #4]
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	60fb      	str	r3, [r7, #12]
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a0ee:	4b50      	ldr	r3, [pc, #320]	; (800a230 <HAL_RCC_GetSysClockFreq+0x158>)
 800a0f0:	689b      	ldr	r3, [r3, #8]
 800a0f2:	f003 030c 	and.w	r3, r3, #12
 800a0f6:	2b04      	cmp	r3, #4
 800a0f8:	d007      	beq.n	800a10a <HAL_RCC_GetSysClockFreq+0x32>
 800a0fa:	2b08      	cmp	r3, #8
 800a0fc:	d008      	beq.n	800a110 <HAL_RCC_GetSysClockFreq+0x38>
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	f040 808d 	bne.w	800a21e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a104:	4b4b      	ldr	r3, [pc, #300]	; (800a234 <HAL_RCC_GetSysClockFreq+0x15c>)
 800a106:	60bb      	str	r3, [r7, #8]
       break;
 800a108:	e08c      	b.n	800a224 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a10a:	4b4b      	ldr	r3, [pc, #300]	; (800a238 <HAL_RCC_GetSysClockFreq+0x160>)
 800a10c:	60bb      	str	r3, [r7, #8]
      break;
 800a10e:	e089      	b.n	800a224 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a110:	4b47      	ldr	r3, [pc, #284]	; (800a230 <HAL_RCC_GetSysClockFreq+0x158>)
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a118:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a11a:	4b45      	ldr	r3, [pc, #276]	; (800a230 <HAL_RCC_GetSysClockFreq+0x158>)
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a122:	2b00      	cmp	r3, #0
 800a124:	d023      	beq.n	800a16e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a126:	4b42      	ldr	r3, [pc, #264]	; (800a230 <HAL_RCC_GetSysClockFreq+0x158>)
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	099b      	lsrs	r3, r3, #6
 800a12c:	f04f 0400 	mov.w	r4, #0
 800a130:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a134:	f04f 0200 	mov.w	r2, #0
 800a138:	ea03 0501 	and.w	r5, r3, r1
 800a13c:	ea04 0602 	and.w	r6, r4, r2
 800a140:	4a3d      	ldr	r2, [pc, #244]	; (800a238 <HAL_RCC_GetSysClockFreq+0x160>)
 800a142:	fb02 f106 	mul.w	r1, r2, r6
 800a146:	2200      	movs	r2, #0
 800a148:	fb02 f205 	mul.w	r2, r2, r5
 800a14c:	440a      	add	r2, r1
 800a14e:	493a      	ldr	r1, [pc, #232]	; (800a238 <HAL_RCC_GetSysClockFreq+0x160>)
 800a150:	fba5 0101 	umull	r0, r1, r5, r1
 800a154:	1853      	adds	r3, r2, r1
 800a156:	4619      	mov	r1, r3
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	f04f 0400 	mov.w	r4, #0
 800a15e:	461a      	mov	r2, r3
 800a160:	4623      	mov	r3, r4
 800a162:	f7f6 fd91 	bl	8000c88 <__aeabi_uldivmod>
 800a166:	4603      	mov	r3, r0
 800a168:	460c      	mov	r4, r1
 800a16a:	60fb      	str	r3, [r7, #12]
 800a16c:	e049      	b.n	800a202 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a16e:	4b30      	ldr	r3, [pc, #192]	; (800a230 <HAL_RCC_GetSysClockFreq+0x158>)
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	099b      	lsrs	r3, r3, #6
 800a174:	f04f 0400 	mov.w	r4, #0
 800a178:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a17c:	f04f 0200 	mov.w	r2, #0
 800a180:	ea03 0501 	and.w	r5, r3, r1
 800a184:	ea04 0602 	and.w	r6, r4, r2
 800a188:	4629      	mov	r1, r5
 800a18a:	4632      	mov	r2, r6
 800a18c:	f04f 0300 	mov.w	r3, #0
 800a190:	f04f 0400 	mov.w	r4, #0
 800a194:	0154      	lsls	r4, r2, #5
 800a196:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a19a:	014b      	lsls	r3, r1, #5
 800a19c:	4619      	mov	r1, r3
 800a19e:	4622      	mov	r2, r4
 800a1a0:	1b49      	subs	r1, r1, r5
 800a1a2:	eb62 0206 	sbc.w	r2, r2, r6
 800a1a6:	f04f 0300 	mov.w	r3, #0
 800a1aa:	f04f 0400 	mov.w	r4, #0
 800a1ae:	0194      	lsls	r4, r2, #6
 800a1b0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a1b4:	018b      	lsls	r3, r1, #6
 800a1b6:	1a5b      	subs	r3, r3, r1
 800a1b8:	eb64 0402 	sbc.w	r4, r4, r2
 800a1bc:	f04f 0100 	mov.w	r1, #0
 800a1c0:	f04f 0200 	mov.w	r2, #0
 800a1c4:	00e2      	lsls	r2, r4, #3
 800a1c6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a1ca:	00d9      	lsls	r1, r3, #3
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	4614      	mov	r4, r2
 800a1d0:	195b      	adds	r3, r3, r5
 800a1d2:	eb44 0406 	adc.w	r4, r4, r6
 800a1d6:	f04f 0100 	mov.w	r1, #0
 800a1da:	f04f 0200 	mov.w	r2, #0
 800a1de:	02a2      	lsls	r2, r4, #10
 800a1e0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a1e4:	0299      	lsls	r1, r3, #10
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	4614      	mov	r4, r2
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	4621      	mov	r1, r4
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f04f 0400 	mov.w	r4, #0
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	4623      	mov	r3, r4
 800a1f8:	f7f6 fd46 	bl	8000c88 <__aeabi_uldivmod>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	460c      	mov	r4, r1
 800a200:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a202:	4b0b      	ldr	r3, [pc, #44]	; (800a230 <HAL_RCC_GetSysClockFreq+0x158>)
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	0c1b      	lsrs	r3, r3, #16
 800a208:	f003 0303 	and.w	r3, r3, #3
 800a20c:	3301      	adds	r3, #1
 800a20e:	005b      	lsls	r3, r3, #1
 800a210:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a212:	68fa      	ldr	r2, [r7, #12]
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	fbb2 f3f3 	udiv	r3, r2, r3
 800a21a:	60bb      	str	r3, [r7, #8]
      break;
 800a21c:	e002      	b.n	800a224 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a21e:	4b05      	ldr	r3, [pc, #20]	; (800a234 <HAL_RCC_GetSysClockFreq+0x15c>)
 800a220:	60bb      	str	r3, [r7, #8]
      break;
 800a222:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a224:	68bb      	ldr	r3, [r7, #8]
}
 800a226:	4618      	mov	r0, r3
 800a228:	3714      	adds	r7, #20
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a22e:	bf00      	nop
 800a230:	40023800 	.word	0x40023800
 800a234:	00f42400 	.word	0x00f42400
 800a238:	017d7840 	.word	0x017d7840

0800a23c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a23c:	b480      	push	{r7}
 800a23e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a240:	4b03      	ldr	r3, [pc, #12]	; (800a250 <HAL_RCC_GetHCLKFreq+0x14>)
 800a242:	681b      	ldr	r3, [r3, #0]
}
 800a244:	4618      	mov	r0, r3
 800a246:	46bd      	mov	sp, r7
 800a248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24c:	4770      	bx	lr
 800a24e:	bf00      	nop
 800a250:	2000014c 	.word	0x2000014c

0800a254 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a254:	b580      	push	{r7, lr}
 800a256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a258:	f7ff fff0 	bl	800a23c <HAL_RCC_GetHCLKFreq>
 800a25c:	4601      	mov	r1, r0
 800a25e:	4b05      	ldr	r3, [pc, #20]	; (800a274 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a260:	689b      	ldr	r3, [r3, #8]
 800a262:	0a9b      	lsrs	r3, r3, #10
 800a264:	f003 0307 	and.w	r3, r3, #7
 800a268:	4a03      	ldr	r2, [pc, #12]	; (800a278 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a26a:	5cd3      	ldrb	r3, [r2, r3]
 800a26c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a270:	4618      	mov	r0, r3
 800a272:	bd80      	pop	{r7, pc}
 800a274:	40023800 	.word	0x40023800
 800a278:	08016600 	.word	0x08016600

0800a27c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b082      	sub	sp, #8
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d101      	bne.n	800a28e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a28a:	2301      	movs	r3, #1
 800a28c:	e022      	b.n	800a2d4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a294:	b2db      	uxtb	r3, r3
 800a296:	2b00      	cmp	r3, #0
 800a298:	d105      	bne.n	800a2a6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2200      	movs	r2, #0
 800a29e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f7f8 ff5b 	bl	800315c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2203      	movs	r2, #3
 800a2aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f000 f814 	bl	800a2dc <HAL_SD_InitCard>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d001      	beq.n	800a2be <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	e00a      	b.n	800a2d4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a2d2:	2300      	movs	r3, #0
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3708      	adds	r7, #8
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a2dc:	b5b0      	push	{r4, r5, r7, lr}
 800a2de:	b08e      	sub	sp, #56	; 0x38
 800a2e0:	af04      	add	r7, sp, #16
 800a2e2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800a2f8:	2376      	movs	r3, #118	; 0x76
 800a2fa:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681d      	ldr	r5, [r3, #0]
 800a300:	466c      	mov	r4, sp
 800a302:	f107 0314 	add.w	r3, r7, #20
 800a306:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a30a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a30e:	f107 0308 	add.w	r3, r7, #8
 800a312:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a314:	4628      	mov	r0, r5
 800a316:	f002 f803 	bl	800c320 <SDIO_Init>
 800a31a:	4603      	mov	r3, r0
 800a31c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800a320:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a324:	2b00      	cmp	r3, #0
 800a326:	d001      	beq.n	800a32c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a328:	2301      	movs	r3, #1
 800a32a:	e031      	b.n	800a390 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800a32c:	4b1a      	ldr	r3, [pc, #104]	; (800a398 <HAL_SD_InitCard+0xbc>)
 800a32e:	2200      	movs	r2, #0
 800a330:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	4618      	mov	r0, r3
 800a338:	f002 f83b 	bl	800c3b2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800a33c:	4b16      	ldr	r3, [pc, #88]	; (800a398 <HAL_SD_InitCard+0xbc>)
 800a33e:	2201      	movs	r2, #1
 800a340:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 ffdc 	bl	800b300 <SD_PowerON>
 800a348:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a34a:	6a3b      	ldr	r3, [r7, #32]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d00b      	beq.n	800a368 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2201      	movs	r2, #1
 800a354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a35c:	6a3b      	ldr	r3, [r7, #32]
 800a35e:	431a      	orrs	r2, r3
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a364:	2301      	movs	r3, #1
 800a366:	e013      	b.n	800a390 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f000 fefb 	bl	800b164 <SD_InitCard>
 800a36e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a370:	6a3b      	ldr	r3, [r7, #32]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d00b      	beq.n	800a38e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2201      	movs	r2, #1
 800a37a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a382:	6a3b      	ldr	r3, [r7, #32]
 800a384:	431a      	orrs	r2, r3
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a38a:	2301      	movs	r3, #1
 800a38c:	e000      	b.n	800a390 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800a38e:	2300      	movs	r3, #0
}
 800a390:	4618      	mov	r0, r3
 800a392:	3728      	adds	r7, #40	; 0x28
 800a394:	46bd      	mov	sp, r7
 800a396:	bdb0      	pop	{r4, r5, r7, pc}
 800a398:	422580a0 	.word	0x422580a0

0800a39c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b08c      	sub	sp, #48	; 0x30
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	607a      	str	r2, [r7, #4]
 800a3a8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d107      	bne.n	800a3c4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3b8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	e0c9      	b.n	800a558 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a3ca:	b2db      	uxtb	r3, r3
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	f040 80c2 	bne.w	800a556 <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a3d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	441a      	add	r2, r3
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d907      	bls.n	800a3f6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ea:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	e0b0      	b.n	800a558 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2203      	movs	r2, #3
 800a3fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	2200      	movs	r2, #0
 800a404:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a40c:	68fa      	ldr	r2, [r7, #12]
 800a40e:	6812      	ldr	r2, [r2, #0]
 800a410:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800a414:	f043 0302 	orr.w	r3, r3, #2
 800a418:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a41e:	4a50      	ldr	r2, [pc, #320]	; (800a560 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800a420:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a426:	4a4f      	ldr	r2, [pc, #316]	; (800a564 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800a428:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a42e:	2200      	movs	r2, #0
 800a430:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	3380      	adds	r3, #128	; 0x80
 800a43c:	4619      	mov	r1, r3
 800a43e:	68ba      	ldr	r2, [r7, #8]
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	025b      	lsls	r3, r3, #9
 800a444:	089b      	lsrs	r3, r3, #2
 800a446:	f7fd fce9 	bl	8007e1c <HAL_DMA_Start_IT>
 800a44a:	4603      	mov	r3, r0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d017      	beq.n	800a480 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800a45e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	4a40      	ldr	r2, [pc, #256]	; (800a568 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800a466:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a46c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2201      	movs	r2, #1
 800a478:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a47c:	2301      	movs	r3, #1
 800a47e:	e06b      	b.n	800a558 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800a480:	4b3a      	ldr	r3, [pc, #232]	; (800a56c <HAL_SD_ReadBlocks_DMA+0x1d0>)
 800a482:	2201      	movs	r2, #1
 800a484:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	d002      	beq.n	800a494 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 800a48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a490:	025b      	lsls	r3, r3, #9
 800a492:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a49c:	4618      	mov	r0, r3
 800a49e:	f002 f81b 	bl	800c4d8 <SDMMC_CmdBlockLength>
 800a4a2:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800a4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d00f      	beq.n	800a4ca <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4a2e      	ldr	r2, [pc, #184]	; (800a568 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800a4b0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b8:	431a      	orrs	r2, r3
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e046      	b.n	800a558 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a4ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a4ce:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	025b      	lsls	r3, r3, #9
 800a4d4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a4d6:	2390      	movs	r3, #144	; 0x90
 800a4d8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a4da:	2302      	movs	r3, #2
 800a4dc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f107 0210 	add.w	r2, r7, #16
 800a4ee:	4611      	mov	r1, r2
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f001 ffc5 	bl	800c480 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	d90a      	bls.n	800a512 <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2282      	movs	r2, #130	; 0x82
 800a500:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a508:	4618      	mov	r0, r3
 800a50a:	f002 f829 	bl	800c560 <SDMMC_CmdReadMultiBlock>
 800a50e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a510:	e009      	b.n	800a526 <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	2281      	movs	r2, #129	; 0x81
 800a516:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a51e:	4618      	mov	r0, r3
 800a520:	f001 fffc 	bl	800c51c <SDMMC_CmdReadSingleBlock>
 800a524:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800a526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d012      	beq.n	800a552 <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4a0d      	ldr	r2, [pc, #52]	; (800a568 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800a532:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a53a:	431a      	orrs	r2, r3
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2201      	movs	r2, #1
 800a544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	2200      	movs	r2, #0
 800a54c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800a54e:	2301      	movs	r3, #1
 800a550:	e002      	b.n	800a558 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 800a552:	2300      	movs	r3, #0
 800a554:	e000      	b.n	800a558 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 800a556:	2302      	movs	r3, #2
  }
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3730      	adds	r7, #48	; 0x30
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	0800af73 	.word	0x0800af73
 800a564:	0800afe5 	.word	0x0800afe5
 800a568:	004005ff 	.word	0x004005ff
 800a56c:	4225858c 	.word	0x4225858c

0800a570 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b08c      	sub	sp, #48	; 0x30
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	607a      	str	r2, [r7, #4]
 800a57c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d107      	bne.n	800a598 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a58c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a594:	2301      	movs	r3, #1
 800a596:	e0ce      	b.n	800a736 <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a59e:	b2db      	uxtb	r3, r3
 800a5a0:	2b01      	cmp	r3, #1
 800a5a2:	f040 80c7 	bne.w	800a734 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a5ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	441a      	add	r2, r3
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d907      	bls.n	800a5ca <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5be:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	e0b5      	b.n	800a736 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2203      	movs	r2, #3
 800a5ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5e0:	68fa      	ldr	r2, [r7, #12]
 800a5e2:	6812      	ldr	r2, [r2, #0]
 800a5e4:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800a5e8:	f043 0302 	orr.w	r3, r3, #2
 800a5ec:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5f2:	4a53      	ldr	r2, [pc, #332]	; (800a740 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800a5f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5fa:	4a52      	ldr	r2, [pc, #328]	; (800a744 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800a5fc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a602:	2200      	movs	r2, #0
 800a604:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d002      	beq.n	800a614 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800a60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a610:	025b      	lsls	r3, r3, #9
 800a612:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a61c:	4618      	mov	r0, r3
 800a61e:	f001 ff5b 	bl	800c4d8 <SDMMC_CmdBlockLength>
 800a622:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a626:	2b00      	cmp	r3, #0
 800a628:	d00f      	beq.n	800a64a <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	4a46      	ldr	r2, [pc, #280]	; (800a748 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800a630:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a638:	431a      	orrs	r2, r3
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2201      	movs	r2, #1
 800a642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a646:	2301      	movs	r3, #1
 800a648:	e075      	b.n	800a736 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	2b01      	cmp	r3, #1
 800a64e:	d90a      	bls.n	800a666 <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	22a0      	movs	r2, #160	; 0xa0
 800a654:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a65c:	4618      	mov	r0, r3
 800a65e:	f001 ffc3 	bl	800c5e8 <SDMMC_CmdWriteMultiBlock>
 800a662:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a664:	e009      	b.n	800a67a <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2290      	movs	r2, #144	; 0x90
 800a66a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a672:	4618      	mov	r0, r3
 800a674:	f001 ff96 	bl	800c5a4 <SDMMC_CmdWriteSingleBlock>
 800a678:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d012      	beq.n	800a6a6 <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4a30      	ldr	r2, [pc, #192]	; (800a748 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800a686:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a68e:	431a      	orrs	r2, r3
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2201      	movs	r2, #1
 800a698:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	e047      	b.n	800a736 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a6a6:	4b29      	ldr	r3, [pc, #164]	; (800a74c <HAL_SD_WriteBlocks_DMA+0x1dc>)
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a6b0:	68b9      	ldr	r1, [r7, #8]
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	3380      	adds	r3, #128	; 0x80
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	025b      	lsls	r3, r3, #9
 800a6be:	089b      	lsrs	r3, r3, #2
 800a6c0:	f7fd fbac 	bl	8007e1c <HAL_DMA_Start_IT>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d01c      	beq.n	800a704 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6d0:	68fa      	ldr	r2, [r7, #12]
 800a6d2:	6812      	ldr	r2, [r2, #0]
 800a6d4:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800a6d8:	f023 0302 	bic.w	r3, r3, #2
 800a6dc:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	4a19      	ldr	r2, [pc, #100]	; (800a748 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800a6e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2201      	movs	r2, #1
 800a6f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a700:	2301      	movs	r3, #1
 800a702:	e018      	b.n	800a736 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a704:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a708:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	025b      	lsls	r3, r3, #9
 800a70e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a710:	2390      	movs	r3, #144	; 0x90
 800a712:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800a714:	2300      	movs	r3, #0
 800a716:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a718:	2300      	movs	r3, #0
 800a71a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800a71c:	2301      	movs	r3, #1
 800a71e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f107 0210 	add.w	r2, r7, #16
 800a728:	4611      	mov	r1, r2
 800a72a:	4618      	mov	r0, r3
 800a72c:	f001 fea8 	bl	800c480 <SDIO_ConfigData>

      return HAL_OK;
 800a730:	2300      	movs	r3, #0
 800a732:	e000      	b.n	800a736 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 800a734:	2302      	movs	r3, #2
  }
}
 800a736:	4618      	mov	r0, r3
 800a738:	3730      	adds	r7, #48	; 0x30
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	0800af49 	.word	0x0800af49
 800a744:	0800afe5 	.word	0x0800afe5
 800a748:	004005ff 	.word	0x004005ff
 800a74c:	4225858c 	.word	0x4225858c

0800a750 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b084      	sub	sp, #16
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a75c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a764:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d008      	beq.n	800a77e <HAL_SD_IRQHandler+0x2e>
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f003 0308 	and.w	r3, r3, #8
 800a772:	2b00      	cmp	r3, #0
 800a774:	d003      	beq.n	800a77e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 ffd8 	bl	800b72c <SD_Read_IT>
 800a77c:	e165      	b.n	800aa4a <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a788:	2b00      	cmp	r3, #0
 800a78a:	f000 808f 	beq.w	800a8ac <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a796:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	6812      	ldr	r2, [r2, #0]
 800a7a2:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800a7a6:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800a7aa:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f022 0201 	bic.w	r2, r2, #1
 800a7ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	f003 0308 	and.w	r3, r3, #8
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d039      	beq.n	800a83a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f003 0302 	and.w	r3, r3, #2
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d104      	bne.n	800a7da <HAL_SD_IRQHandler+0x8a>
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	f003 0320 	and.w	r3, r3, #32
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d011      	beq.n	800a7fe <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f001 ff24 	bl	800c62c <SDMMC_CmdStopTransfer>
 800a7e4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d008      	beq.n	800a7fe <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	431a      	orrs	r2, r3
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a7f8:	6878      	ldr	r0, [r7, #4]
 800a7fa:	f000 f92f 	bl	800aa5c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f240 523a 	movw	r2, #1338	; 0x53a
 800a806:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2201      	movs	r2, #1
 800a80c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2200      	movs	r2, #0
 800a814:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f003 0301 	and.w	r3, r3, #1
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d104      	bne.n	800a82a <HAL_SD_IRQHandler+0xda>
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f003 0302 	and.w	r3, r3, #2
 800a826:	2b00      	cmp	r3, #0
 800a828:	d003      	beq.n	800a832 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f002 fb82 	bl	800cf34 <HAL_SD_RxCpltCallback>
 800a830:	e10b      	b.n	800aa4a <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f002 fb74 	bl	800cf20 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a838:	e107      	b.n	800aa4a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a840:	2b00      	cmp	r3, #0
 800a842:	f000 8102 	beq.w	800aa4a <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f003 0320 	and.w	r3, r3, #32
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d011      	beq.n	800a874 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	4618      	mov	r0, r3
 800a856:	f001 fee9 	bl	800c62c <SDMMC_CmdStopTransfer>
 800a85a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d008      	beq.n	800a874 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	431a      	orrs	r2, r3
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f000 f8f4 	bl	800aa5c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f003 0301 	and.w	r3, r3, #1
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	f040 80e5 	bne.w	800aa4a <HAL_SD_IRQHandler+0x2fa>
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	f003 0302 	and.w	r3, r3, #2
 800a886:	2b00      	cmp	r3, #0
 800a888:	f040 80df 	bne.w	800aa4a <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f022 0208 	bic.w	r2, r2, #8
 800a89a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2201      	movs	r2, #1
 800a8a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f002 fb3b 	bl	800cf20 <HAL_SD_TxCpltCallback>
}
 800a8aa:	e0ce      	b.n	800aa4a <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d008      	beq.n	800a8cc <HAL_SD_IRQHandler+0x17c>
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f003 0308 	and.w	r3, r3, #8
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d003      	beq.n	800a8cc <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f000 ff82 	bl	800b7ce <SD_Write_IT>
 800a8ca:	e0be      	b.n	800aa4a <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8d2:	f240 233a 	movw	r3, #570	; 0x23a
 800a8d6:	4013      	ands	r3, r2
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	f000 80b6 	beq.w	800aa4a <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8e4:	f003 0302 	and.w	r3, r3, #2
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d005      	beq.n	800a8f8 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8f0:	f043 0202 	orr.w	r2, r3, #2
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8fe:	f003 0308 	and.w	r3, r3, #8
 800a902:	2b00      	cmp	r3, #0
 800a904:	d005      	beq.n	800a912 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a90a:	f043 0208 	orr.w	r2, r3, #8
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a918:	f003 0320 	and.w	r3, r3, #32
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d005      	beq.n	800a92c <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a924:	f043 0220 	orr.w	r2, r3, #32
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a932:	f003 0310 	and.w	r3, r3, #16
 800a936:	2b00      	cmp	r3, #0
 800a938:	d005      	beq.n	800a946 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a93e:	f043 0210 	orr.w	r2, r3, #16
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a94c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a950:	2b00      	cmp	r3, #0
 800a952:	d005      	beq.n	800a960 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a958:	f043 0208 	orr.w	r2, r3, #8
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f240 723a 	movw	r2, #1850	; 0x73a
 800a968:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a970:	687a      	ldr	r2, [r7, #4]
 800a972:	6812      	ldr	r2, [r2, #0]
 800a974:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800a978:	f023 0302 	bic.w	r3, r3, #2
 800a97c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	4618      	mov	r0, r3
 800a984:	f001 fe52 	bl	800c62c <SDMMC_CmdStopTransfer>
 800a988:	4602      	mov	r2, r0
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a98e:	431a      	orrs	r2, r3
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f003 0308 	and.w	r3, r3, #8
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d00a      	beq.n	800a9b4 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	f000 f855 	bl	800aa5c <HAL_SD_ErrorCallback>
}
 800a9b2:	e04a      	b.n	800aa4a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d045      	beq.n	800aa4a <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	f003 0310 	and.w	r3, r3, #16
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d104      	bne.n	800a9d2 <HAL_SD_IRQHandler+0x282>
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	f003 0320 	and.w	r3, r3, #32
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d011      	beq.n	800a9f6 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9d6:	4a1f      	ldr	r2, [pc, #124]	; (800aa54 <HAL_SD_IRQHandler+0x304>)
 800a9d8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9de:	4618      	mov	r0, r3
 800a9e0:	f7fd fae4 	bl	8007fac <HAL_DMA_Abort_IT>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d02f      	beq.n	800aa4a <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9ee:	4618      	mov	r0, r3
 800a9f0:	f000 fb4a 	bl	800b088 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a9f4:	e029      	b.n	800aa4a <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	f003 0301 	and.w	r3, r3, #1
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d104      	bne.n	800aa0a <HAL_SD_IRQHandler+0x2ba>
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f003 0302 	and.w	r3, r3, #2
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d011      	beq.n	800aa2e <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa0e:	4a12      	ldr	r2, [pc, #72]	; (800aa58 <HAL_SD_IRQHandler+0x308>)
 800aa10:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa16:	4618      	mov	r0, r3
 800aa18:	f7fd fac8 	bl	8007fac <HAL_DMA_Abort_IT>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d013      	beq.n	800aa4a <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa26:	4618      	mov	r0, r3
 800aa28:	f000 fb65 	bl	800b0f6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800aa2c:	e00d      	b.n	800aa4a <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2200      	movs	r2, #0
 800aa32:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2201      	movs	r2, #1
 800aa38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f002 fa62 	bl	800cf0c <HAL_SD_AbortCallback>
}
 800aa48:	e7ff      	b.n	800aa4a <HAL_SD_IRQHandler+0x2fa>
 800aa4a:	bf00      	nop
 800aa4c:	3710      	adds	r7, #16
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop
 800aa54:	0800b089 	.word	0x0800b089
 800aa58:	0800b0f7 	.word	0x0800b0f7

0800aa5c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b083      	sub	sp, #12
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800aa64:	bf00      	nop
 800aa66:	370c      	adds	r7, #12
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr

0800aa70 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b083      	sub	sp, #12
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa7e:	0f9b      	lsrs	r3, r3, #30
 800aa80:	b2da      	uxtb	r2, r3
 800aa82:	683b      	ldr	r3, [r7, #0]
 800aa84:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa8a:	0e9b      	lsrs	r3, r3, #26
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	f003 030f 	and.w	r3, r3, #15
 800aa92:	b2da      	uxtb	r2, r3
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa9c:	0e1b      	lsrs	r3, r3, #24
 800aa9e:	b2db      	uxtb	r3, r3
 800aaa0:	f003 0303 	and.w	r3, r3, #3
 800aaa4:	b2da      	uxtb	r2, r3
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aaae:	0c1b      	lsrs	r3, r3, #16
 800aab0:	b2da      	uxtb	r2, r3
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aaba:	0a1b      	lsrs	r3, r3, #8
 800aabc:	b2da      	uxtb	r2, r3
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aac6:	b2da      	uxtb	r2, r3
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aad0:	0d1b      	lsrs	r3, r3, #20
 800aad2:	b29a      	uxth	r2, r3
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aadc:	0c1b      	lsrs	r3, r3, #16
 800aade:	b2db      	uxtb	r3, r3
 800aae0:	f003 030f 	and.w	r3, r3, #15
 800aae4:	b2da      	uxtb	r2, r3
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aaee:	0bdb      	lsrs	r3, r3, #15
 800aaf0:	b2db      	uxtb	r3, r3
 800aaf2:	f003 0301 	and.w	r3, r3, #1
 800aaf6:	b2da      	uxtb	r2, r3
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab00:	0b9b      	lsrs	r3, r3, #14
 800ab02:	b2db      	uxtb	r3, r3
 800ab04:	f003 0301 	and.w	r3, r3, #1
 800ab08:	b2da      	uxtb	r2, r3
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab12:	0b5b      	lsrs	r3, r3, #13
 800ab14:	b2db      	uxtb	r3, r3
 800ab16:	f003 0301 	and.w	r3, r3, #1
 800ab1a:	b2da      	uxtb	r2, r3
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab24:	0b1b      	lsrs	r3, r3, #12
 800ab26:	b2db      	uxtb	r3, r3
 800ab28:	f003 0301 	and.w	r3, r3, #1
 800ab2c:	b2da      	uxtb	r2, r3
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	2200      	movs	r2, #0
 800ab36:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d163      	bne.n	800ac08 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab44:	009a      	lsls	r2, r3, #2
 800ab46:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ab4a:	4013      	ands	r3, r2
 800ab4c:	687a      	ldr	r2, [r7, #4]
 800ab4e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800ab50:	0f92      	lsrs	r2, r2, #30
 800ab52:	431a      	orrs	r2, r3
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab5c:	0edb      	lsrs	r3, r3, #27
 800ab5e:	b2db      	uxtb	r3, r3
 800ab60:	f003 0307 	and.w	r3, r3, #7
 800ab64:	b2da      	uxtb	r2, r3
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab6e:	0e1b      	lsrs	r3, r3, #24
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	f003 0307 	and.w	r3, r3, #7
 800ab76:	b2da      	uxtb	r2, r3
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab80:	0d5b      	lsrs	r3, r3, #21
 800ab82:	b2db      	uxtb	r3, r3
 800ab84:	f003 0307 	and.w	r3, r3, #7
 800ab88:	b2da      	uxtb	r2, r3
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab92:	0c9b      	lsrs	r3, r3, #18
 800ab94:	b2db      	uxtb	r3, r3
 800ab96:	f003 0307 	and.w	r3, r3, #7
 800ab9a:	b2da      	uxtb	r2, r3
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aba4:	0bdb      	lsrs	r3, r3, #15
 800aba6:	b2db      	uxtb	r3, r3
 800aba8:	f003 0307 	and.w	r3, r3, #7
 800abac:	b2da      	uxtb	r2, r3
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	691b      	ldr	r3, [r3, #16]
 800abb6:	1c5a      	adds	r2, r3, #1
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	7e1b      	ldrb	r3, [r3, #24]
 800abc0:	b2db      	uxtb	r3, r3
 800abc2:	f003 0307 	and.w	r3, r3, #7
 800abc6:	3302      	adds	r3, #2
 800abc8:	2201      	movs	r2, #1
 800abca:	fa02 f303 	lsl.w	r3, r2, r3
 800abce:	687a      	ldr	r2, [r7, #4]
 800abd0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800abd2:	fb02 f203 	mul.w	r2, r2, r3
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	7a1b      	ldrb	r3, [r3, #8]
 800abde:	b2db      	uxtb	r3, r3
 800abe0:	f003 030f 	and.w	r3, r3, #15
 800abe4:	2201      	movs	r2, #1
 800abe6:	409a      	lsls	r2, r3
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abf0:	687a      	ldr	r2, [r7, #4]
 800abf2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800abf4:	0a52      	lsrs	r2, r2, #9
 800abf6:	fb02 f203 	mul.w	r2, r2, r3
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac04:	661a      	str	r2, [r3, #96]	; 0x60
 800ac06:	e031      	b.n	800ac6c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	d11d      	bne.n	800ac4c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac14:	041b      	lsls	r3, r3, #16
 800ac16:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac1e:	0c1b      	lsrs	r3, r3, #16
 800ac20:	431a      	orrs	r2, r3
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	691b      	ldr	r3, [r3, #16]
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	029a      	lsls	r2, r3, #10
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac40:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	661a      	str	r2, [r3, #96]	; 0x60
 800ac4a:	e00f      	b.n	800ac6c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	4a58      	ldr	r2, [pc, #352]	; (800adb4 <HAL_SD_GetCardCSD+0x344>)
 800ac52:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac58:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2201      	movs	r2, #1
 800ac64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	e09d      	b.n	800ada8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac70:	0b9b      	lsrs	r3, r3, #14
 800ac72:	b2db      	uxtb	r3, r3
 800ac74:	f003 0301 	and.w	r3, r3, #1
 800ac78:	b2da      	uxtb	r2, r3
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac82:	09db      	lsrs	r3, r3, #7
 800ac84:	b2db      	uxtb	r3, r3
 800ac86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac8a:	b2da      	uxtb	r2, r3
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac94:	b2db      	uxtb	r3, r3
 800ac96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac9a:	b2da      	uxtb	r2, r3
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aca4:	0fdb      	lsrs	r3, r3, #31
 800aca6:	b2da      	uxtb	r2, r3
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acb0:	0f5b      	lsrs	r3, r3, #29
 800acb2:	b2db      	uxtb	r3, r3
 800acb4:	f003 0303 	and.w	r3, r3, #3
 800acb8:	b2da      	uxtb	r2, r3
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acc2:	0e9b      	lsrs	r3, r3, #26
 800acc4:	b2db      	uxtb	r3, r3
 800acc6:	f003 0307 	and.w	r3, r3, #7
 800acca:	b2da      	uxtb	r2, r3
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acd4:	0d9b      	lsrs	r3, r3, #22
 800acd6:	b2db      	uxtb	r3, r3
 800acd8:	f003 030f 	and.w	r3, r3, #15
 800acdc:	b2da      	uxtb	r2, r3
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ace6:	0d5b      	lsrs	r3, r3, #21
 800ace8:	b2db      	uxtb	r3, r3
 800acea:	f003 0301 	and.w	r3, r3, #1
 800acee:	b2da      	uxtb	r2, r3
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	2200      	movs	r2, #0
 800acfa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad02:	0c1b      	lsrs	r3, r3, #16
 800ad04:	b2db      	uxtb	r3, r3
 800ad06:	f003 0301 	and.w	r3, r3, #1
 800ad0a:	b2da      	uxtb	r2, r3
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad16:	0bdb      	lsrs	r3, r3, #15
 800ad18:	b2db      	uxtb	r3, r3
 800ad1a:	f003 0301 	and.w	r3, r3, #1
 800ad1e:	b2da      	uxtb	r2, r3
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad2a:	0b9b      	lsrs	r3, r3, #14
 800ad2c:	b2db      	uxtb	r3, r3
 800ad2e:	f003 0301 	and.w	r3, r3, #1
 800ad32:	b2da      	uxtb	r2, r3
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad3e:	0b5b      	lsrs	r3, r3, #13
 800ad40:	b2db      	uxtb	r3, r3
 800ad42:	f003 0301 	and.w	r3, r3, #1
 800ad46:	b2da      	uxtb	r2, r3
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad52:	0b1b      	lsrs	r3, r3, #12
 800ad54:	b2db      	uxtb	r3, r3
 800ad56:	f003 0301 	and.w	r3, r3, #1
 800ad5a:	b2da      	uxtb	r2, r3
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad66:	0a9b      	lsrs	r3, r3, #10
 800ad68:	b2db      	uxtb	r3, r3
 800ad6a:	f003 0303 	and.w	r3, r3, #3
 800ad6e:	b2da      	uxtb	r2, r3
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad7a:	0a1b      	lsrs	r3, r3, #8
 800ad7c:	b2db      	uxtb	r3, r3
 800ad7e:	f003 0303 	and.w	r3, r3, #3
 800ad82:	b2da      	uxtb	r2, r3
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad8e:	085b      	lsrs	r3, r3, #1
 800ad90:	b2db      	uxtb	r3, r3
 800ad92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad96:	b2da      	uxtb	r2, r3
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	2201      	movs	r2, #1
 800ada2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800ada6:	2300      	movs	r3, #0
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	370c      	adds	r7, #12
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr
 800adb4:	004005ff 	.word	0x004005ff

0800adb8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800adb8:	b480      	push	{r7}
 800adba:	b083      	sub	sp, #12
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ae02:	2300      	movs	r3, #0
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	370c      	adds	r7, #12
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr

0800ae10 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ae10:	b5b0      	push	{r4, r5, r7, lr}
 800ae12:	b08e      	sub	sp, #56	; 0x38
 800ae14:	af04      	add	r7, sp, #16
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2203      	movs	r2, #3
 800ae1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae26:	2b03      	cmp	r3, #3
 800ae28:	d02e      	beq.n	800ae88 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae30:	d106      	bne.n	800ae40 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae36:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	639a      	str	r2, [r3, #56]	; 0x38
 800ae3e:	e029      	b.n	800ae94 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ae46:	d10a      	bne.n	800ae5e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f000 fb0f 	bl	800b46c <SD_WideBus_Enable>
 800ae4e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae56:	431a      	orrs	r2, r3
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	639a      	str	r2, [r3, #56]	; 0x38
 800ae5c:	e01a      	b.n	800ae94 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d10a      	bne.n	800ae7a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f000 fb4c 	bl	800b502 <SD_WideBus_Disable>
 800ae6a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae72:	431a      	orrs	r2, r3
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	639a      	str	r2, [r3, #56]	; 0x38
 800ae78:	e00c      	b.n	800ae94 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae7e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	639a      	str	r2, [r3, #56]	; 0x38
 800ae86:	e005      	b.n	800ae94 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae8c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d009      	beq.n	800aeb0 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	4a18      	ldr	r2, [pc, #96]	; (800af04 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800aea2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2201      	movs	r2, #1
 800aea8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800aeac:	2301      	movs	r3, #1
 800aeae:	e024      	b.n	800aefa <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	685b      	ldr	r3, [r3, #4]
 800aeb4:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	689b      	ldr	r3, [r3, #8]
 800aeba:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	68db      	ldr	r3, [r3, #12]
 800aec0:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	695b      	ldr	r3, [r3, #20]
 800aeca:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	699b      	ldr	r3, [r3, #24]
 800aed0:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681d      	ldr	r5, [r3, #0]
 800aed6:	466c      	mov	r4, sp
 800aed8:	f107 0318 	add.w	r3, r7, #24
 800aedc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800aee0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800aee4:	f107 030c 	add.w	r3, r7, #12
 800aee8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aeea:	4628      	mov	r0, r5
 800aeec:	f001 fa18 	bl	800c320 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2201      	movs	r2, #1
 800aef4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800aef8:	2300      	movs	r3, #0
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3728      	adds	r7, #40	; 0x28
 800aefe:	46bd      	mov	sp, r7
 800af00:	bdb0      	pop	{r4, r5, r7, pc}
 800af02:	bf00      	nop
 800af04:	004005ff 	.word	0x004005ff

0800af08 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b086      	sub	sp, #24
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800af10:	2300      	movs	r3, #0
 800af12:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800af14:	f107 030c 	add.w	r3, r7, #12
 800af18:	4619      	mov	r1, r3
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 fa7e 	bl	800b41c <SD_SendStatus>
 800af20:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d005      	beq.n	800af34 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	431a      	orrs	r2, r3
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	0a5b      	lsrs	r3, r3, #9
 800af38:	f003 030f 	and.w	r3, r3, #15
 800af3c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800af3e:	693b      	ldr	r3, [r7, #16]
}
 800af40:	4618      	mov	r0, r3
 800af42:	3718      	adds	r7, #24
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800af48:	b480      	push	{r7}
 800af4a:	b085      	sub	sp, #20
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af54:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800af64:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800af66:	bf00      	nop
 800af68:	3714      	adds	r7, #20
 800af6a:	46bd      	mov	sp, r7
 800af6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af70:	4770      	bx	lr

0800af72 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800af72:	b580      	push	{r7, lr}
 800af74:	b084      	sub	sp, #16
 800af76:	af00      	add	r7, sp, #0
 800af78:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af7e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af84:	2b82      	cmp	r3, #130	; 0x82
 800af86:	d111      	bne.n	800afac <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4618      	mov	r0, r3
 800af8e:	f001 fb4d 	bl	800c62c <SDMMC_CmdStopTransfer>
 800af92:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d008      	beq.n	800afac <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	431a      	orrs	r2, r3
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800afa6:	68f8      	ldr	r0, [r7, #12]
 800afa8:	f7ff fd58 	bl	800aa5c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f022 0208 	bic.w	r2, r2, #8
 800afba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f240 523a 	movw	r2, #1338	; 0x53a
 800afc4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	2201      	movs	r2, #1
 800afca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	2200      	movs	r2, #0
 800afd2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800afd4:	68f8      	ldr	r0, [r7, #12]
 800afd6:	f001 ffad 	bl	800cf34 <HAL_SD_RxCpltCallback>
#endif
}
 800afda:	bf00      	nop
 800afdc:	3710      	adds	r7, #16
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
	...

0800afe4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b086      	sub	sp, #24
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aff0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f7fd f986 	bl	8008304 <HAL_DMA_GetError>
 800aff8:	4603      	mov	r3, r0
 800affa:	2b02      	cmp	r3, #2
 800affc:	d03e      	beq.n	800b07c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800affe:	697b      	ldr	r3, [r7, #20]
 800b000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b004:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b00a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b00c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	2b01      	cmp	r3, #1
 800b012:	d002      	beq.n	800b01a <SD_DMAError+0x36>
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2b01      	cmp	r3, #1
 800b018:	d12d      	bne.n	800b076 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	4a19      	ldr	r2, [pc, #100]	; (800b084 <SD_DMAError+0xa0>)
 800b020:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b030:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b036:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800b03e:	6978      	ldr	r0, [r7, #20]
 800b040:	f7ff ff62 	bl	800af08 <HAL_SD_GetCardState>
 800b044:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	2b06      	cmp	r3, #6
 800b04a:	d002      	beq.n	800b052 <SD_DMAError+0x6e>
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	2b05      	cmp	r3, #5
 800b050:	d10a      	bne.n	800b068 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	4618      	mov	r0, r3
 800b058:	f001 fae8 	bl	800c62c <SDMMC_CmdStopTransfer>
 800b05c:	4602      	mov	r2, r0
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b062:	431a      	orrs	r2, r3
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800b068:	697b      	ldr	r3, [r7, #20]
 800b06a:	2201      	movs	r2, #1
 800b06c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b070:	697b      	ldr	r3, [r7, #20]
 800b072:	2200      	movs	r2, #0
 800b074:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800b076:	6978      	ldr	r0, [r7, #20]
 800b078:	f7ff fcf0 	bl	800aa5c <HAL_SD_ErrorCallback>
#endif
  }
}
 800b07c:	bf00      	nop
 800b07e:	3718      	adds	r7, #24
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}
 800b084:	004005ff 	.word	0x004005ff

0800b088 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b084      	sub	sp, #16
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b094:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f240 523a 	movw	r2, #1338	; 0x53a
 800b09e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b0a0:	68f8      	ldr	r0, [r7, #12]
 800b0a2:	f7ff ff31 	bl	800af08 <HAL_SD_GetCardState>
 800b0a6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	2201      	movs	r2, #1
 800b0ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	2b06      	cmp	r3, #6
 800b0ba:	d002      	beq.n	800b0c2 <SD_DMATxAbort+0x3a>
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	2b05      	cmp	r3, #5
 800b0c0:	d10a      	bne.n	800b0d8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f001 fab0 	bl	800c62c <SDMMC_CmdStopTransfer>
 800b0cc:	4602      	mov	r2, r0
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0d2:	431a      	orrs	r2, r3
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d103      	bne.n	800b0e8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800b0e0:	68f8      	ldr	r0, [r7, #12]
 800b0e2:	f001 ff13 	bl	800cf0c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b0e6:	e002      	b.n	800b0ee <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b0e8:	68f8      	ldr	r0, [r7, #12]
 800b0ea:	f7ff fcb7 	bl	800aa5c <HAL_SD_ErrorCallback>
}
 800b0ee:	bf00      	nop
 800b0f0:	3710      	adds	r7, #16
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}

0800b0f6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800b0f6:	b580      	push	{r7, lr}
 800b0f8:	b084      	sub	sp, #16
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b102:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	f240 523a 	movw	r2, #1338	; 0x53a
 800b10c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b10e:	68f8      	ldr	r0, [r7, #12]
 800b110:	f7ff fefa 	bl	800af08 <HAL_SD_GetCardState>
 800b114:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2201      	movs	r2, #1
 800b11a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	2200      	movs	r2, #0
 800b122:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	2b06      	cmp	r3, #6
 800b128:	d002      	beq.n	800b130 <SD_DMARxAbort+0x3a>
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	2b05      	cmp	r3, #5
 800b12e:	d10a      	bne.n	800b146 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	4618      	mov	r0, r3
 800b136:	f001 fa79 	bl	800c62c <SDMMC_CmdStopTransfer>
 800b13a:	4602      	mov	r2, r0
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b140:	431a      	orrs	r2, r3
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d103      	bne.n	800b156 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800b14e:	68f8      	ldr	r0, [r7, #12]
 800b150:	f001 fedc 	bl	800cf0c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b154:	e002      	b.n	800b15c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b156:	68f8      	ldr	r0, [r7, #12]
 800b158:	f7ff fc80 	bl	800aa5c <HAL_SD_ErrorCallback>
}
 800b15c:	bf00      	nop
 800b15e:	3710      	adds	r7, #16
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}

0800b164 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b164:	b5b0      	push	{r4, r5, r7, lr}
 800b166:	b094      	sub	sp, #80	; 0x50
 800b168:	af04      	add	r7, sp, #16
 800b16a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b16c:	2301      	movs	r3, #1
 800b16e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	4618      	mov	r0, r3
 800b176:	f001 f92b 	bl	800c3d0 <SDIO_GetPowerState>
 800b17a:	4603      	mov	r3, r0
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d102      	bne.n	800b186 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b180:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b184:	e0b7      	b.n	800b2f6 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b18a:	2b03      	cmp	r3, #3
 800b18c:	d02f      	beq.n	800b1ee <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	4618      	mov	r0, r3
 800b194:	f001 fb54 	bl	800c840 <SDMMC_CmdSendCID>
 800b198:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b19a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d001      	beq.n	800b1a4 <SD_InitCard+0x40>
    {
      return errorstate;
 800b1a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1a2:	e0a8      	b.n	800b2f6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	2100      	movs	r1, #0
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f001 f955 	bl	800c45a <SDIO_GetResponse>
 800b1b0:	4602      	mov	r2, r0
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	2104      	movs	r1, #4
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f001 f94c 	bl	800c45a <SDIO_GetResponse>
 800b1c2:	4602      	mov	r2, r0
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	2108      	movs	r1, #8
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f001 f943 	bl	800c45a <SDIO_GetResponse>
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	210c      	movs	r1, #12
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f001 f93a 	bl	800c45a <SDIO_GetResponse>
 800b1e6:	4602      	mov	r2, r0
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1f2:	2b03      	cmp	r3, #3
 800b1f4:	d00d      	beq.n	800b212 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f107 020e 	add.w	r2, r7, #14
 800b1fe:	4611      	mov	r1, r2
 800b200:	4618      	mov	r0, r3
 800b202:	f001 fb5a 	bl	800c8ba <SDMMC_CmdSetRelAdd>
 800b206:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d001      	beq.n	800b212 <SD_InitCard+0xae>
    {
      return errorstate;
 800b20e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b210:	e071      	b.n	800b2f6 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b216:	2b03      	cmp	r3, #3
 800b218:	d036      	beq.n	800b288 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b21a:	89fb      	ldrh	r3, [r7, #14]
 800b21c:	461a      	mov	r2, r3
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681a      	ldr	r2, [r3, #0]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b22a:	041b      	lsls	r3, r3, #16
 800b22c:	4619      	mov	r1, r3
 800b22e:	4610      	mov	r0, r2
 800b230:	f001 fb24 	bl	800c87c <SDMMC_CmdSendCSD>
 800b234:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d001      	beq.n	800b240 <SD_InitCard+0xdc>
    {
      return errorstate;
 800b23c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b23e:	e05a      	b.n	800b2f6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	2100      	movs	r1, #0
 800b246:	4618      	mov	r0, r3
 800b248:	f001 f907 	bl	800c45a <SDIO_GetResponse>
 800b24c:	4602      	mov	r2, r0
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	2104      	movs	r1, #4
 800b258:	4618      	mov	r0, r3
 800b25a:	f001 f8fe 	bl	800c45a <SDIO_GetResponse>
 800b25e:	4602      	mov	r2, r0
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	2108      	movs	r1, #8
 800b26a:	4618      	mov	r0, r3
 800b26c:	f001 f8f5 	bl	800c45a <SDIO_GetResponse>
 800b270:	4602      	mov	r2, r0
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	210c      	movs	r1, #12
 800b27c:	4618      	mov	r0, r3
 800b27e:	f001 f8ec 	bl	800c45a <SDIO_GetResponse>
 800b282:	4602      	mov	r2, r0
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	2104      	movs	r1, #4
 800b28e:	4618      	mov	r0, r3
 800b290:	f001 f8e3 	bl	800c45a <SDIO_GetResponse>
 800b294:	4603      	mov	r3, r0
 800b296:	0d1a      	lsrs	r2, r3, #20
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b29c:	f107 0310 	add.w	r3, r7, #16
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f7ff fbe4 	bl	800aa70 <HAL_SD_GetCardCSD>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d002      	beq.n	800b2b4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b2ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b2b2:	e020      	b.n	800b2f6 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6819      	ldr	r1, [r3, #0]
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2bc:	041b      	lsls	r3, r3, #16
 800b2be:	f04f 0400 	mov.w	r4, #0
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	4623      	mov	r3, r4
 800b2c6:	4608      	mov	r0, r1
 800b2c8:	f001 f9d2 	bl	800c670 <SDMMC_CmdSelDesel>
 800b2cc:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b2ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d001      	beq.n	800b2d8 <SD_InitCard+0x174>
  {
    return errorstate;
 800b2d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2d6:	e00e      	b.n	800b2f6 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681d      	ldr	r5, [r3, #0]
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	466c      	mov	r4, sp
 800b2e0:	f103 0210 	add.w	r2, r3, #16
 800b2e4:	ca07      	ldmia	r2, {r0, r1, r2}
 800b2e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b2ea:	3304      	adds	r3, #4
 800b2ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b2ee:	4628      	mov	r0, r5
 800b2f0:	f001 f816 	bl	800c320 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b2f4:	2300      	movs	r3, #0
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3740      	adds	r7, #64	; 0x40
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b300 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b086      	sub	sp, #24
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b308:	2300      	movs	r3, #0
 800b30a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b30c:	2300      	movs	r3, #0
 800b30e:	617b      	str	r3, [r7, #20]
 800b310:	2300      	movs	r3, #0
 800b312:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	4618      	mov	r0, r3
 800b31a:	f001 f9cc 	bl	800c6b6 <SDMMC_CmdGoIdleState>
 800b31e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d001      	beq.n	800b32a <SD_PowerON+0x2a>
  {
    return errorstate;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	e072      	b.n	800b410 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	4618      	mov	r0, r3
 800b330:	f001 f9df 	bl	800c6f2 <SDMMC_CmdOperCond>
 800b334:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d00d      	beq.n	800b358 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2200      	movs	r2, #0
 800b340:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	4618      	mov	r0, r3
 800b348:	f001 f9b5 	bl	800c6b6 <SDMMC_CmdGoIdleState>
 800b34c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d004      	beq.n	800b35e <SD_PowerON+0x5e>
    {
      return errorstate;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	e05b      	b.n	800b410 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2201      	movs	r2, #1
 800b35c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b362:	2b01      	cmp	r3, #1
 800b364:	d137      	bne.n	800b3d6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	2100      	movs	r1, #0
 800b36c:	4618      	mov	r0, r3
 800b36e:	f001 f9df 	bl	800c730 <SDMMC_CmdAppCommand>
 800b372:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d02d      	beq.n	800b3d6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b37a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b37e:	e047      	b.n	800b410 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	2100      	movs	r1, #0
 800b386:	4618      	mov	r0, r3
 800b388:	f001 f9d2 	bl	800c730 <SDMMC_CmdAppCommand>
 800b38c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d001      	beq.n	800b398 <SD_PowerON+0x98>
    {
      return errorstate;
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	e03b      	b.n	800b410 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	491e      	ldr	r1, [pc, #120]	; (800b418 <SD_PowerON+0x118>)
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f001 f9e8 	bl	800c774 <SDMMC_CmdAppOperCommand>
 800b3a4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d002      	beq.n	800b3b2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b3ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b3b0:	e02e      	b.n	800b410 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	2100      	movs	r1, #0
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f001 f84e 	bl	800c45a <SDIO_GetResponse>
 800b3be:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	0fdb      	lsrs	r3, r3, #31
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	d101      	bne.n	800b3cc <SD_PowerON+0xcc>
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	e000      	b.n	800b3ce <SD_PowerON+0xce>
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	613b      	str	r3, [r7, #16]

    count++;
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	3301      	adds	r3, #1
 800b3d4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d802      	bhi.n	800b3e6 <SD_PowerON+0xe6>
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d0cc      	beq.n	800b380 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d902      	bls.n	800b3f6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b3f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b3f4:	e00c      	b.n	800b410 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d003      	beq.n	800b408 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2201      	movs	r2, #1
 800b404:	645a      	str	r2, [r3, #68]	; 0x44
 800b406:	e002      	b.n	800b40e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2200      	movs	r2, #0
 800b40c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800b40e:	2300      	movs	r3, #0
}
 800b410:	4618      	mov	r0, r3
 800b412:	3718      	adds	r7, #24
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}
 800b418:	c1100000 	.word	0xc1100000

0800b41c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b084      	sub	sp, #16
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
 800b424:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d102      	bne.n	800b432 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b42c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b430:	e018      	b.n	800b464 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681a      	ldr	r2, [r3, #0]
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b43a:	041b      	lsls	r3, r3, #16
 800b43c:	4619      	mov	r1, r3
 800b43e:	4610      	mov	r0, r2
 800b440:	f001 fa5c 	bl	800c8fc <SDMMC_CmdSendStatus>
 800b444:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d001      	beq.n	800b450 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	e009      	b.n	800b464 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	2100      	movs	r1, #0
 800b456:	4618      	mov	r0, r3
 800b458:	f000 ffff 	bl	800c45a <SDIO_GetResponse>
 800b45c:	4602      	mov	r2, r0
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b462:	2300      	movs	r3, #0
}
 800b464:	4618      	mov	r0, r3
 800b466:	3710      	adds	r7, #16
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd80      	pop	{r7, pc}

0800b46c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b086      	sub	sp, #24
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b474:	2300      	movs	r3, #0
 800b476:	60fb      	str	r3, [r7, #12]
 800b478:	2300      	movs	r3, #0
 800b47a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	2100      	movs	r1, #0
 800b482:	4618      	mov	r0, r3
 800b484:	f000 ffe9 	bl	800c45a <SDIO_GetResponse>
 800b488:	4603      	mov	r3, r0
 800b48a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b48e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b492:	d102      	bne.n	800b49a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b494:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b498:	e02f      	b.n	800b4fa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b49a:	f107 030c 	add.w	r3, r7, #12
 800b49e:	4619      	mov	r1, r3
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f000 f879 	bl	800b598 <SD_FindSCR>
 800b4a6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d001      	beq.n	800b4b2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	e023      	b.n	800b4fa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d01c      	beq.n	800b4f6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681a      	ldr	r2, [r3, #0]
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4c4:	041b      	lsls	r3, r3, #16
 800b4c6:	4619      	mov	r1, r3
 800b4c8:	4610      	mov	r0, r2
 800b4ca:	f001 f931 	bl	800c730 <SDMMC_CmdAppCommand>
 800b4ce:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d001      	beq.n	800b4da <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	e00f      	b.n	800b4fa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	2102      	movs	r1, #2
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f001 f96a 	bl	800c7ba <SDMMC_CmdBusWidth>
 800b4e6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d001      	beq.n	800b4f2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	e003      	b.n	800b4fa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	e001      	b.n	800b4fa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b4f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3718      	adds	r7, #24
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}

0800b502 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b502:	b580      	push	{r7, lr}
 800b504:	b086      	sub	sp, #24
 800b506:	af00      	add	r7, sp, #0
 800b508:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b50a:	2300      	movs	r3, #0
 800b50c:	60fb      	str	r3, [r7, #12]
 800b50e:	2300      	movs	r3, #0
 800b510:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	2100      	movs	r1, #0
 800b518:	4618      	mov	r0, r3
 800b51a:	f000 ff9e 	bl	800c45a <SDIO_GetResponse>
 800b51e:	4603      	mov	r3, r0
 800b520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b524:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b528:	d102      	bne.n	800b530 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b52a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b52e:	e02f      	b.n	800b590 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b530:	f107 030c 	add.w	r3, r7, #12
 800b534:	4619      	mov	r1, r3
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 f82e 	bl	800b598 <SD_FindSCR>
 800b53c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d001      	beq.n	800b548 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	e023      	b.n	800b590 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d01c      	beq.n	800b58c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681a      	ldr	r2, [r3, #0]
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b55a:	041b      	lsls	r3, r3, #16
 800b55c:	4619      	mov	r1, r3
 800b55e:	4610      	mov	r0, r2
 800b560:	f001 f8e6 	bl	800c730 <SDMMC_CmdAppCommand>
 800b564:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d001      	beq.n	800b570 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	e00f      	b.n	800b590 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	2100      	movs	r1, #0
 800b576:	4618      	mov	r0, r3
 800b578:	f001 f91f 	bl	800c7ba <SDMMC_CmdBusWidth>
 800b57c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b57e:	697b      	ldr	r3, [r7, #20]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d001      	beq.n	800b588 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	e003      	b.n	800b590 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b588:	2300      	movs	r3, #0
 800b58a:	e001      	b.n	800b590 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b58c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b590:	4618      	mov	r0, r3
 800b592:	3718      	adds	r7, #24
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}

0800b598 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b598:	b590      	push	{r4, r7, lr}
 800b59a:	b08f      	sub	sp, #60	; 0x3c
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b5a2:	f7fb fe0f 	bl	80071c4 <HAL_GetTick>
 800b5a6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	60bb      	str	r3, [r7, #8]
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	2108      	movs	r1, #8
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f000 ff8a 	bl	800c4d8 <SDMMC_CmdBlockLength>
 800b5c4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d001      	beq.n	800b5d0 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ce:	e0a9      	b.n	800b724 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681a      	ldr	r2, [r3, #0]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5d8:	041b      	lsls	r3, r3, #16
 800b5da:	4619      	mov	r1, r3
 800b5dc:	4610      	mov	r0, r2
 800b5de:	f001 f8a7 	bl	800c730 <SDMMC_CmdAppCommand>
 800b5e2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d001      	beq.n	800b5ee <SD_FindSCR+0x56>
  {
    return errorstate;
 800b5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ec:	e09a      	b.n	800b724 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b5ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b5f2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b5f4:	2308      	movs	r3, #8
 800b5f6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800b5f8:	2330      	movs	r3, #48	; 0x30
 800b5fa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800b5fc:	2302      	movs	r3, #2
 800b5fe:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b600:	2300      	movs	r3, #0
 800b602:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800b604:	2301      	movs	r3, #1
 800b606:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f107 0210 	add.w	r2, r7, #16
 800b610:	4611      	mov	r1, r2
 800b612:	4618      	mov	r0, r3
 800b614:	f000 ff34 	bl	800c480 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	4618      	mov	r0, r3
 800b61e:	f001 f8ee 	bl	800c7fe <SDMMC_CmdSendSCR>
 800b622:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b626:	2b00      	cmp	r3, #0
 800b628:	d022      	beq.n	800b670 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800b62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b62c:	e07a      	b.n	800b724 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b634:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d00e      	beq.n	800b65a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6819      	ldr	r1, [r3, #0]
 800b640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b642:	009b      	lsls	r3, r3, #2
 800b644:	f107 0208 	add.w	r2, r7, #8
 800b648:	18d4      	adds	r4, r2, r3
 800b64a:	4608      	mov	r0, r1
 800b64c:	f000 fe93 	bl	800c376 <SDIO_ReadFIFO>
 800b650:	4603      	mov	r3, r0
 800b652:	6023      	str	r3, [r4, #0]
      index++;
 800b654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b656:	3301      	adds	r3, #1
 800b658:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b65a:	f7fb fdb3 	bl	80071c4 <HAL_GetTick>
 800b65e:	4602      	mov	r2, r0
 800b660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b662:	1ad3      	subs	r3, r2, r3
 800b664:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b668:	d102      	bne.n	800b670 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b66a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b66e:	e059      	b.n	800b724 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b676:	f240 432a 	movw	r3, #1066	; 0x42a
 800b67a:	4013      	ands	r3, r2
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d0d6      	beq.n	800b62e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b686:	f003 0308 	and.w	r3, r3, #8
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d005      	beq.n	800b69a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	2208      	movs	r2, #8
 800b694:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b696:	2308      	movs	r3, #8
 800b698:	e044      	b.n	800b724 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6a0:	f003 0302 	and.w	r3, r3, #2
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d005      	beq.n	800b6b4 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	2202      	movs	r2, #2
 800b6ae:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b6b0:	2302      	movs	r3, #2
 800b6b2:	e037      	b.n	800b724 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6ba:	f003 0320 	and.w	r3, r3, #32
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d005      	beq.n	800b6ce <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	2220      	movs	r2, #32
 800b6c8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b6ca:	2320      	movs	r3, #32
 800b6cc:	e02a      	b.n	800b724 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f240 523a 	movw	r2, #1338	; 0x53a
 800b6d6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	061a      	lsls	r2, r3, #24
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	021b      	lsls	r3, r3, #8
 800b6e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b6e4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	0a1b      	lsrs	r3, r3, #8
 800b6ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b6ee:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	0e1b      	lsrs	r3, r3, #24
 800b6f4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6f8:	601a      	str	r2, [r3, #0]
    scr++;
 800b6fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6fc:	3304      	adds	r3, #4
 800b6fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	061a      	lsls	r2, r3, #24
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	021b      	lsls	r3, r3, #8
 800b708:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b70c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	0a1b      	lsrs	r3, r3, #8
 800b712:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b716:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	0e1b      	lsrs	r3, r3, #24
 800b71c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b720:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b722:	2300      	movs	r3, #0
}
 800b724:	4618      	mov	r0, r3
 800b726:	373c      	adds	r7, #60	; 0x3c
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd90      	pop	{r4, r7, pc}

0800b72c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b086      	sub	sp, #24
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b738:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b73e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d03f      	beq.n	800b7c6 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800b746:	2300      	movs	r3, #0
 800b748:	617b      	str	r3, [r7, #20]
 800b74a:	e033      	b.n	800b7b4 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	4618      	mov	r0, r3
 800b752:	f000 fe10 	bl	800c376 <SDIO_ReadFIFO>
 800b756:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	b2da      	uxtb	r2, r3
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	3301      	adds	r3, #1
 800b764:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	3b01      	subs	r3, #1
 800b76a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	0a1b      	lsrs	r3, r3, #8
 800b770:	b2da      	uxtb	r2, r3
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	3301      	adds	r3, #1
 800b77a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	3b01      	subs	r3, #1
 800b780:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	0c1b      	lsrs	r3, r3, #16
 800b786:	b2da      	uxtb	r2, r3
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	3301      	adds	r3, #1
 800b790:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	3b01      	subs	r3, #1
 800b796:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	0e1b      	lsrs	r3, r3, #24
 800b79c:	b2da      	uxtb	r2, r3
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	3b01      	subs	r3, #1
 800b7ac:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800b7ae:	697b      	ldr	r3, [r7, #20]
 800b7b0:	3301      	adds	r3, #1
 800b7b2:	617b      	str	r3, [r7, #20]
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	2b07      	cmp	r3, #7
 800b7b8:	d9c8      	bls.n	800b74c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	68fa      	ldr	r2, [r7, #12]
 800b7be:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	693a      	ldr	r2, [r7, #16]
 800b7c4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800b7c6:	bf00      	nop
 800b7c8:	3718      	adds	r7, #24
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}

0800b7ce <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b7ce:	b580      	push	{r7, lr}
 800b7d0:	b086      	sub	sp, #24
 800b7d2:	af00      	add	r7, sp, #0
 800b7d4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6a1b      	ldr	r3, [r3, #32]
 800b7da:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d043      	beq.n	800b870 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	617b      	str	r3, [r7, #20]
 800b7ec:	e037      	b.n	800b85e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	3301      	adds	r3, #1
 800b7f8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b7fa:	693b      	ldr	r3, [r7, #16]
 800b7fc:	3b01      	subs	r3, #1
 800b7fe:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	781b      	ldrb	r3, [r3, #0]
 800b804:	021a      	lsls	r2, r3, #8
 800b806:	68bb      	ldr	r3, [r7, #8]
 800b808:	4313      	orrs	r3, r2
 800b80a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	3301      	adds	r3, #1
 800b810:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	3b01      	subs	r3, #1
 800b816:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	781b      	ldrb	r3, [r3, #0]
 800b81c:	041a      	lsls	r2, r3, #16
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	4313      	orrs	r3, r2
 800b822:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	3301      	adds	r3, #1
 800b828:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	3b01      	subs	r3, #1
 800b82e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	061a      	lsls	r2, r3, #24
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	4313      	orrs	r3, r2
 800b83a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	3301      	adds	r3, #1
 800b840:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	3b01      	subs	r3, #1
 800b846:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f107 0208 	add.w	r2, r7, #8
 800b850:	4611      	mov	r1, r2
 800b852:	4618      	mov	r0, r3
 800b854:	f000 fd9c 	bl	800c390 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800b858:	697b      	ldr	r3, [r7, #20]
 800b85a:	3301      	adds	r3, #1
 800b85c:	617b      	str	r3, [r7, #20]
 800b85e:	697b      	ldr	r3, [r7, #20]
 800b860:	2b07      	cmp	r3, #7
 800b862:	d9c4      	bls.n	800b7ee <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	68fa      	ldr	r2, [r7, #12]
 800b868:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	693a      	ldr	r2, [r7, #16]
 800b86e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800b870:	bf00      	nop
 800b872:	3718      	adds	r7, #24
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}

0800b878 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b082      	sub	sp, #8
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d101      	bne.n	800b88a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b886:	2301      	movs	r3, #1
 800b888:	e056      	b.n	800b938 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2200      	movs	r2, #0
 800b88e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b896:	b2db      	uxtb	r3, r3
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d106      	bne.n	800b8aa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	f7f8 f869 	bl	800397c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2202      	movs	r2, #2
 800b8ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	681a      	ldr	r2, [r3, #0]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b8c0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	685a      	ldr	r2, [r3, #4]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	689b      	ldr	r3, [r3, #8]
 800b8ca:	431a      	orrs	r2, r3
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	68db      	ldr	r3, [r3, #12]
 800b8d0:	431a      	orrs	r2, r3
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	691b      	ldr	r3, [r3, #16]
 800b8d6:	431a      	orrs	r2, r3
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	695b      	ldr	r3, [r3, #20]
 800b8dc:	431a      	orrs	r2, r3
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	699b      	ldr	r3, [r3, #24]
 800b8e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b8e6:	431a      	orrs	r2, r3
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	69db      	ldr	r3, [r3, #28]
 800b8ec:	431a      	orrs	r2, r3
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6a1b      	ldr	r3, [r3, #32]
 800b8f2:	ea42 0103 	orr.w	r1, r2, r3
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	430a      	orrs	r2, r1
 800b900:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	699b      	ldr	r3, [r3, #24]
 800b906:	0c1b      	lsrs	r3, r3, #16
 800b908:	f003 0104 	and.w	r1, r3, #4
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	430a      	orrs	r2, r1
 800b916:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	69da      	ldr	r2, [r3, #28]
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b926:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2200      	movs	r2, #0
 800b92c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2201      	movs	r2, #1
 800b932:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b936:	2300      	movs	r3, #0
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3708      	adds	r7, #8
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}

0800b940 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b088      	sub	sp, #32
 800b944:	af00      	add	r7, sp, #0
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	60b9      	str	r1, [r7, #8]
 800b94a:	603b      	str	r3, [r7, #0]
 800b94c:	4613      	mov	r3, r2
 800b94e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b950:	2300      	movs	r3, #0
 800b952:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b95a:	2b01      	cmp	r3, #1
 800b95c:	d101      	bne.n	800b962 <HAL_SPI_Transmit+0x22>
 800b95e:	2302      	movs	r3, #2
 800b960:	e11e      	b.n	800bba0 <HAL_SPI_Transmit+0x260>
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	2201      	movs	r2, #1
 800b966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b96a:	f7fb fc2b 	bl	80071c4 <HAL_GetTick>
 800b96e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b970:	88fb      	ldrh	r3, [r7, #6]
 800b972:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b97a:	b2db      	uxtb	r3, r3
 800b97c:	2b01      	cmp	r3, #1
 800b97e:	d002      	beq.n	800b986 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b980:	2302      	movs	r3, #2
 800b982:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b984:	e103      	b.n	800bb8e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b986:	68bb      	ldr	r3, [r7, #8]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d002      	beq.n	800b992 <HAL_SPI_Transmit+0x52>
 800b98c:	88fb      	ldrh	r3, [r7, #6]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d102      	bne.n	800b998 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b992:	2301      	movs	r3, #1
 800b994:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b996:	e0fa      	b.n	800bb8e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	2203      	movs	r2, #3
 800b99c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	68ba      	ldr	r2, [r7, #8]
 800b9aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	88fa      	ldrh	r2, [r7, #6]
 800b9b0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	88fa      	ldrh	r2, [r7, #6]
 800b9b6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	689b      	ldr	r3, [r3, #8]
 800b9da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b9de:	d107      	bne.n	800b9f0 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	681a      	ldr	r2, [r3, #0]
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b9ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9fa:	2b40      	cmp	r3, #64	; 0x40
 800b9fc:	d007      	beq.n	800ba0e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	681a      	ldr	r2, [r3, #0]
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ba0c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	68db      	ldr	r3, [r3, #12]
 800ba12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ba16:	d14b      	bne.n	800bab0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	685b      	ldr	r3, [r3, #4]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d002      	beq.n	800ba26 <HAL_SPI_Transmit+0xe6>
 800ba20:	8afb      	ldrh	r3, [r7, #22]
 800ba22:	2b01      	cmp	r3, #1
 800ba24:	d13e      	bne.n	800baa4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba2a:	881a      	ldrh	r2, [r3, #0]
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba36:	1c9a      	adds	r2, r3, #2
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba40:	b29b      	uxth	r3, r3
 800ba42:	3b01      	subs	r3, #1
 800ba44:	b29a      	uxth	r2, r3
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ba4a:	e02b      	b.n	800baa4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	689b      	ldr	r3, [r3, #8]
 800ba52:	f003 0302 	and.w	r3, r3, #2
 800ba56:	2b02      	cmp	r3, #2
 800ba58:	d112      	bne.n	800ba80 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba5e:	881a      	ldrh	r2, [r3, #0]
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba6a:	1c9a      	adds	r2, r3, #2
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ba74:	b29b      	uxth	r3, r3
 800ba76:	3b01      	subs	r3, #1
 800ba78:	b29a      	uxth	r2, r3
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	86da      	strh	r2, [r3, #54]	; 0x36
 800ba7e:	e011      	b.n	800baa4 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ba80:	f7fb fba0 	bl	80071c4 <HAL_GetTick>
 800ba84:	4602      	mov	r2, r0
 800ba86:	69bb      	ldr	r3, [r7, #24]
 800ba88:	1ad3      	subs	r3, r2, r3
 800ba8a:	683a      	ldr	r2, [r7, #0]
 800ba8c:	429a      	cmp	r2, r3
 800ba8e:	d803      	bhi.n	800ba98 <HAL_SPI_Transmit+0x158>
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba96:	d102      	bne.n	800ba9e <HAL_SPI_Transmit+0x15e>
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d102      	bne.n	800baa4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800ba9e:	2303      	movs	r3, #3
 800baa0:	77fb      	strb	r3, [r7, #31]
          goto error;
 800baa2:	e074      	b.n	800bb8e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800baa8:	b29b      	uxth	r3, r3
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d1ce      	bne.n	800ba4c <HAL_SPI_Transmit+0x10c>
 800baae:	e04c      	b.n	800bb4a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	685b      	ldr	r3, [r3, #4]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d002      	beq.n	800babe <HAL_SPI_Transmit+0x17e>
 800bab8:	8afb      	ldrh	r3, [r7, #22]
 800baba:	2b01      	cmp	r3, #1
 800babc:	d140      	bne.n	800bb40 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	330c      	adds	r3, #12
 800bac8:	7812      	ldrb	r2, [r2, #0]
 800baca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bad0:	1c5a      	adds	r2, r3, #1
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bada:	b29b      	uxth	r3, r3
 800badc:	3b01      	subs	r3, #1
 800bade:	b29a      	uxth	r2, r3
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800bae4:	e02c      	b.n	800bb40 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	689b      	ldr	r3, [r3, #8]
 800baec:	f003 0302 	and.w	r3, r3, #2
 800baf0:	2b02      	cmp	r3, #2
 800baf2:	d113      	bne.n	800bb1c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	330c      	adds	r3, #12
 800bafe:	7812      	ldrb	r2, [r2, #0]
 800bb00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb06:	1c5a      	adds	r2, r3, #1
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb10:	b29b      	uxth	r3, r3
 800bb12:	3b01      	subs	r3, #1
 800bb14:	b29a      	uxth	r2, r3
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	86da      	strh	r2, [r3, #54]	; 0x36
 800bb1a:	e011      	b.n	800bb40 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bb1c:	f7fb fb52 	bl	80071c4 <HAL_GetTick>
 800bb20:	4602      	mov	r2, r0
 800bb22:	69bb      	ldr	r3, [r7, #24]
 800bb24:	1ad3      	subs	r3, r2, r3
 800bb26:	683a      	ldr	r2, [r7, #0]
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d803      	bhi.n	800bb34 <HAL_SPI_Transmit+0x1f4>
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bb32:	d102      	bne.n	800bb3a <HAL_SPI_Transmit+0x1fa>
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d102      	bne.n	800bb40 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800bb3a:	2303      	movs	r3, #3
 800bb3c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bb3e:	e026      	b.n	800bb8e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bb44:	b29b      	uxth	r3, r3
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d1cd      	bne.n	800bae6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bb4a:	69ba      	ldr	r2, [r7, #24]
 800bb4c:	6839      	ldr	r1, [r7, #0]
 800bb4e:	68f8      	ldr	r0, [r7, #12]
 800bb50:	f000 fba4 	bl	800c29c <SPI_EndRxTxTransaction>
 800bb54:	4603      	mov	r3, r0
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d002      	beq.n	800bb60 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	2220      	movs	r2, #32
 800bb5e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	689b      	ldr	r3, [r3, #8]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d10a      	bne.n	800bb7e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bb68:	2300      	movs	r3, #0
 800bb6a:	613b      	str	r3, [r7, #16]
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	68db      	ldr	r3, [r3, #12]
 800bb72:	613b      	str	r3, [r7, #16]
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	689b      	ldr	r3, [r3, #8]
 800bb7a:	613b      	str	r3, [r7, #16]
 800bb7c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d002      	beq.n	800bb8c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800bb86:	2301      	movs	r3, #1
 800bb88:	77fb      	strb	r3, [r7, #31]
 800bb8a:	e000      	b.n	800bb8e <HAL_SPI_Transmit+0x24e>
  }

error:
 800bb8c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	2201      	movs	r2, #1
 800bb92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bb9e:	7ffb      	ldrb	r3, [r7, #31]
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3720      	adds	r7, #32
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}

0800bba8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b088      	sub	sp, #32
 800bbac:	af02      	add	r7, sp, #8
 800bbae:	60f8      	str	r0, [r7, #12]
 800bbb0:	60b9      	str	r1, [r7, #8]
 800bbb2:	603b      	str	r3, [r7, #0]
 800bbb4:	4613      	mov	r3, r2
 800bbb6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	685b      	ldr	r3, [r3, #4]
 800bbc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bbc4:	d112      	bne.n	800bbec <HAL_SPI_Receive+0x44>
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	689b      	ldr	r3, [r3, #8]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d10e      	bne.n	800bbec <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	2204      	movs	r2, #4
 800bbd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800bbd6:	88fa      	ldrh	r2, [r7, #6]
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	9300      	str	r3, [sp, #0]
 800bbdc:	4613      	mov	r3, r2
 800bbde:	68ba      	ldr	r2, [r7, #8]
 800bbe0:	68b9      	ldr	r1, [r7, #8]
 800bbe2:	68f8      	ldr	r0, [r7, #12]
 800bbe4:	f000 f8e9 	bl	800bdba <HAL_SPI_TransmitReceive>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	e0e2      	b.n	800bdb2 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bbf2:	2b01      	cmp	r3, #1
 800bbf4:	d101      	bne.n	800bbfa <HAL_SPI_Receive+0x52>
 800bbf6:	2302      	movs	r3, #2
 800bbf8:	e0db      	b.n	800bdb2 <HAL_SPI_Receive+0x20a>
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	2201      	movs	r2, #1
 800bbfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bc02:	f7fb fadf 	bl	80071c4 <HAL_GetTick>
 800bc06:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bc0e:	b2db      	uxtb	r3, r3
 800bc10:	2b01      	cmp	r3, #1
 800bc12:	d002      	beq.n	800bc1a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800bc14:	2302      	movs	r3, #2
 800bc16:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bc18:	e0c2      	b.n	800bda0 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d002      	beq.n	800bc26 <HAL_SPI_Receive+0x7e>
 800bc20:	88fb      	ldrh	r3, [r7, #6]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d102      	bne.n	800bc2c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800bc26:	2301      	movs	r3, #1
 800bc28:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bc2a:	e0b9      	b.n	800bda0 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2204      	movs	r2, #4
 800bc30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	2200      	movs	r2, #0
 800bc38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	68ba      	ldr	r2, [r7, #8]
 800bc3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	88fa      	ldrh	r2, [r7, #6]
 800bc44:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	88fa      	ldrh	r2, [r7, #6]
 800bc4a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	2200      	movs	r2, #0
 800bc56:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	2200      	movs	r2, #0
 800bc62:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2200      	movs	r2, #0
 800bc68:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	689b      	ldr	r3, [r3, #8]
 800bc6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc72:	d107      	bne.n	800bc84 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	681a      	ldr	r2, [r3, #0]
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bc82:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc8e:	2b40      	cmp	r3, #64	; 0x40
 800bc90:	d007      	beq.n	800bca2 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	681a      	ldr	r2, [r3, #0]
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bca0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	68db      	ldr	r3, [r3, #12]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d162      	bne.n	800bd70 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800bcaa:	e02e      	b.n	800bd0a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	689b      	ldr	r3, [r3, #8]
 800bcb2:	f003 0301 	and.w	r3, r3, #1
 800bcb6:	2b01      	cmp	r3, #1
 800bcb8:	d115      	bne.n	800bce6 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f103 020c 	add.w	r2, r3, #12
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcc6:	7812      	ldrb	r2, [r2, #0]
 800bcc8:	b2d2      	uxtb	r2, r2
 800bcca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcd0:	1c5a      	adds	r2, r3, #1
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bcda:	b29b      	uxth	r3, r3
 800bcdc:	3b01      	subs	r3, #1
 800bcde:	b29a      	uxth	r2, r3
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bce4:	e011      	b.n	800bd0a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bce6:	f7fb fa6d 	bl	80071c4 <HAL_GetTick>
 800bcea:	4602      	mov	r2, r0
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	1ad3      	subs	r3, r2, r3
 800bcf0:	683a      	ldr	r2, [r7, #0]
 800bcf2:	429a      	cmp	r2, r3
 800bcf4:	d803      	bhi.n	800bcfe <HAL_SPI_Receive+0x156>
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bcfc:	d102      	bne.n	800bd04 <HAL_SPI_Receive+0x15c>
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d102      	bne.n	800bd0a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800bd04:	2303      	movs	r3, #3
 800bd06:	75fb      	strb	r3, [r7, #23]
          goto error;
 800bd08:	e04a      	b.n	800bda0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd0e:	b29b      	uxth	r3, r3
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d1cb      	bne.n	800bcac <HAL_SPI_Receive+0x104>
 800bd14:	e031      	b.n	800bd7a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	689b      	ldr	r3, [r3, #8]
 800bd1c:	f003 0301 	and.w	r3, r3, #1
 800bd20:	2b01      	cmp	r3, #1
 800bd22:	d113      	bne.n	800bd4c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	68da      	ldr	r2, [r3, #12]
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd2e:	b292      	uxth	r2, r2
 800bd30:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd36:	1c9a      	adds	r2, r3, #2
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd40:	b29b      	uxth	r3, r3
 800bd42:	3b01      	subs	r3, #1
 800bd44:	b29a      	uxth	r2, r3
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	87da      	strh	r2, [r3, #62]	; 0x3e
 800bd4a:	e011      	b.n	800bd70 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bd4c:	f7fb fa3a 	bl	80071c4 <HAL_GetTick>
 800bd50:	4602      	mov	r2, r0
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	1ad3      	subs	r3, r2, r3
 800bd56:	683a      	ldr	r2, [r7, #0]
 800bd58:	429a      	cmp	r2, r3
 800bd5a:	d803      	bhi.n	800bd64 <HAL_SPI_Receive+0x1bc>
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bd62:	d102      	bne.n	800bd6a <HAL_SPI_Receive+0x1c2>
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d102      	bne.n	800bd70 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800bd6a:	2303      	movs	r3, #3
 800bd6c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800bd6e:	e017      	b.n	800bda0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bd74:	b29b      	uxth	r3, r3
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d1cd      	bne.n	800bd16 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800bd7a:	693a      	ldr	r2, [r7, #16]
 800bd7c:	6839      	ldr	r1, [r7, #0]
 800bd7e:	68f8      	ldr	r0, [r7, #12]
 800bd80:	f000 fa27 	bl	800c1d2 <SPI_EndRxTransaction>
 800bd84:	4603      	mov	r3, r0
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d002      	beq.n	800bd90 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	2220      	movs	r2, #32
 800bd8e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d002      	beq.n	800bd9e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800bd98:	2301      	movs	r3, #1
 800bd9a:	75fb      	strb	r3, [r7, #23]
 800bd9c:	e000      	b.n	800bda0 <HAL_SPI_Receive+0x1f8>
  }

error :
 800bd9e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	2201      	movs	r2, #1
 800bda4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bdb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3718      	adds	r7, #24
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}

0800bdba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bdba:	b580      	push	{r7, lr}
 800bdbc:	b08c      	sub	sp, #48	; 0x30
 800bdbe:	af00      	add	r7, sp, #0
 800bdc0:	60f8      	str	r0, [r7, #12]
 800bdc2:	60b9      	str	r1, [r7, #8]
 800bdc4:	607a      	str	r2, [r7, #4]
 800bdc6:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800bdc8:	2301      	movs	r3, #1
 800bdca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bdd8:	2b01      	cmp	r3, #1
 800bdda:	d101      	bne.n	800bde0 <HAL_SPI_TransmitReceive+0x26>
 800bddc:	2302      	movs	r3, #2
 800bdde:	e18a      	b.n	800c0f6 <HAL_SPI_TransmitReceive+0x33c>
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	2201      	movs	r2, #1
 800bde4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bde8:	f7fb f9ec 	bl	80071c4 <HAL_GetTick>
 800bdec:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bdf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	685b      	ldr	r3, [r3, #4]
 800bdfc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800bdfe:	887b      	ldrh	r3, [r7, #2]
 800be00:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800be02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800be06:	2b01      	cmp	r3, #1
 800be08:	d00f      	beq.n	800be2a <HAL_SPI_TransmitReceive+0x70>
 800be0a:	69fb      	ldr	r3, [r7, #28]
 800be0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800be10:	d107      	bne.n	800be22 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	689b      	ldr	r3, [r3, #8]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d103      	bne.n	800be22 <HAL_SPI_TransmitReceive+0x68>
 800be1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800be1e:	2b04      	cmp	r3, #4
 800be20:	d003      	beq.n	800be2a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800be22:	2302      	movs	r3, #2
 800be24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800be28:	e15b      	b.n	800c0e2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d005      	beq.n	800be3c <HAL_SPI_TransmitReceive+0x82>
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d002      	beq.n	800be3c <HAL_SPI_TransmitReceive+0x82>
 800be36:	887b      	ldrh	r3, [r7, #2]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d103      	bne.n	800be44 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800be3c:	2301      	movs	r3, #1
 800be3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800be42:	e14e      	b.n	800c0e2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be4a:	b2db      	uxtb	r3, r3
 800be4c:	2b04      	cmp	r3, #4
 800be4e:	d003      	beq.n	800be58 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2205      	movs	r2, #5
 800be54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	2200      	movs	r2, #0
 800be5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	687a      	ldr	r2, [r7, #4]
 800be62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	887a      	ldrh	r2, [r7, #2]
 800be68:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	887a      	ldrh	r2, [r7, #2]
 800be6e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	68ba      	ldr	r2, [r7, #8]
 800be74:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	887a      	ldrh	r2, [r7, #2]
 800be7a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	887a      	ldrh	r2, [r7, #2]
 800be80:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	2200      	movs	r2, #0
 800be86:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	2200      	movs	r2, #0
 800be8c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be98:	2b40      	cmp	r3, #64	; 0x40
 800be9a:	d007      	beq.n	800beac <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	681a      	ldr	r2, [r3, #0]
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800beaa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	68db      	ldr	r3, [r3, #12]
 800beb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800beb4:	d178      	bne.n	800bfa8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	685b      	ldr	r3, [r3, #4]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d002      	beq.n	800bec4 <HAL_SPI_TransmitReceive+0x10a>
 800bebe:	8b7b      	ldrh	r3, [r7, #26]
 800bec0:	2b01      	cmp	r3, #1
 800bec2:	d166      	bne.n	800bf92 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bec8:	881a      	ldrh	r2, [r3, #0]
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bed4:	1c9a      	adds	r2, r3, #2
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bede:	b29b      	uxth	r3, r3
 800bee0:	3b01      	subs	r3, #1
 800bee2:	b29a      	uxth	r2, r3
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bee8:	e053      	b.n	800bf92 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	689b      	ldr	r3, [r3, #8]
 800bef0:	f003 0302 	and.w	r3, r3, #2
 800bef4:	2b02      	cmp	r3, #2
 800bef6:	d11b      	bne.n	800bf30 <HAL_SPI_TransmitReceive+0x176>
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800befc:	b29b      	uxth	r3, r3
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d016      	beq.n	800bf30 <HAL_SPI_TransmitReceive+0x176>
 800bf02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf04:	2b01      	cmp	r3, #1
 800bf06:	d113      	bne.n	800bf30 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf0c:	881a      	ldrh	r2, [r3, #0]
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf18:	1c9a      	adds	r2, r3, #2
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf22:	b29b      	uxth	r3, r3
 800bf24:	3b01      	subs	r3, #1
 800bf26:	b29a      	uxth	r2, r3
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	689b      	ldr	r3, [r3, #8]
 800bf36:	f003 0301 	and.w	r3, r3, #1
 800bf3a:	2b01      	cmp	r3, #1
 800bf3c:	d119      	bne.n	800bf72 <HAL_SPI_TransmitReceive+0x1b8>
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf42:	b29b      	uxth	r3, r3
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d014      	beq.n	800bf72 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	68da      	ldr	r2, [r3, #12]
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf52:	b292      	uxth	r2, r2
 800bf54:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf5a:	1c9a      	adds	r2, r3, #2
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bf64:	b29b      	uxth	r3, r3
 800bf66:	3b01      	subs	r3, #1
 800bf68:	b29a      	uxth	r2, r3
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800bf6e:	2301      	movs	r3, #1
 800bf70:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800bf72:	f7fb f927 	bl	80071c4 <HAL_GetTick>
 800bf76:	4602      	mov	r2, r0
 800bf78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf7a:	1ad3      	subs	r3, r2, r3
 800bf7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	d807      	bhi.n	800bf92 <HAL_SPI_TransmitReceive+0x1d8>
 800bf82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf88:	d003      	beq.n	800bf92 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800bf8a:	2303      	movs	r3, #3
 800bf8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800bf90:	e0a7      	b.n	800c0e2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bf96:	b29b      	uxth	r3, r3
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d1a6      	bne.n	800beea <HAL_SPI_TransmitReceive+0x130>
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800bfa0:	b29b      	uxth	r3, r3
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d1a1      	bne.n	800beea <HAL_SPI_TransmitReceive+0x130>
 800bfa6:	e07c      	b.n	800c0a2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	685b      	ldr	r3, [r3, #4]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d002      	beq.n	800bfb6 <HAL_SPI_TransmitReceive+0x1fc>
 800bfb0:	8b7b      	ldrh	r3, [r7, #26]
 800bfb2:	2b01      	cmp	r3, #1
 800bfb4:	d16b      	bne.n	800c08e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	330c      	adds	r3, #12
 800bfc0:	7812      	ldrb	r2, [r2, #0]
 800bfc2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfc8:	1c5a      	adds	r2, r3, #1
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bfd2:	b29b      	uxth	r3, r3
 800bfd4:	3b01      	subs	r3, #1
 800bfd6:	b29a      	uxth	r2, r3
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800bfdc:	e057      	b.n	800c08e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	689b      	ldr	r3, [r3, #8]
 800bfe4:	f003 0302 	and.w	r3, r3, #2
 800bfe8:	2b02      	cmp	r3, #2
 800bfea:	d11c      	bne.n	800c026 <HAL_SPI_TransmitReceive+0x26c>
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bff0:	b29b      	uxth	r3, r3
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d017      	beq.n	800c026 <HAL_SPI_TransmitReceive+0x26c>
 800bff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	d114      	bne.n	800c026 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	330c      	adds	r3, #12
 800c006:	7812      	ldrb	r2, [r2, #0]
 800c008:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c00e:	1c5a      	adds	r2, r3, #1
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c018:	b29b      	uxth	r3, r3
 800c01a:	3b01      	subs	r3, #1
 800c01c:	b29a      	uxth	r2, r3
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c022:	2300      	movs	r3, #0
 800c024:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	689b      	ldr	r3, [r3, #8]
 800c02c:	f003 0301 	and.w	r3, r3, #1
 800c030:	2b01      	cmp	r3, #1
 800c032:	d119      	bne.n	800c068 <HAL_SPI_TransmitReceive+0x2ae>
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c038:	b29b      	uxth	r3, r3
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d014      	beq.n	800c068 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	68da      	ldr	r2, [r3, #12]
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c048:	b2d2      	uxtb	r2, r2
 800c04a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c050:	1c5a      	adds	r2, r3, #1
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	3b01      	subs	r3, #1
 800c05e:	b29a      	uxth	r2, r3
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c064:	2301      	movs	r3, #1
 800c066:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c068:	f7fb f8ac 	bl	80071c4 <HAL_GetTick>
 800c06c:	4602      	mov	r2, r0
 800c06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c070:	1ad3      	subs	r3, r2, r3
 800c072:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c074:	429a      	cmp	r2, r3
 800c076:	d803      	bhi.n	800c080 <HAL_SPI_TransmitReceive+0x2c6>
 800c078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c07a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c07e:	d102      	bne.n	800c086 <HAL_SPI_TransmitReceive+0x2cc>
 800c080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c082:	2b00      	cmp	r3, #0
 800c084:	d103      	bne.n	800c08e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c086:	2303      	movs	r3, #3
 800c088:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c08c:	e029      	b.n	800c0e2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c092:	b29b      	uxth	r3, r3
 800c094:	2b00      	cmp	r3, #0
 800c096:	d1a2      	bne.n	800bfde <HAL_SPI_TransmitReceive+0x224>
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c09c:	b29b      	uxth	r3, r3
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d19d      	bne.n	800bfde <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c0a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c0a6:	68f8      	ldr	r0, [r7, #12]
 800c0a8:	f000 f8f8 	bl	800c29c <SPI_EndRxTxTransaction>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d006      	beq.n	800c0c0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800c0b2:	2301      	movs	r3, #1
 800c0b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	2220      	movs	r2, #32
 800c0bc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800c0be:	e010      	b.n	800c0e2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	689b      	ldr	r3, [r3, #8]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d10b      	bne.n	800c0e0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c0c8:	2300      	movs	r3, #0
 800c0ca:	617b      	str	r3, [r7, #20]
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	68db      	ldr	r3, [r3, #12]
 800c0d2:	617b      	str	r3, [r7, #20]
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	689b      	ldr	r3, [r3, #8]
 800c0da:	617b      	str	r3, [r7, #20]
 800c0dc:	697b      	ldr	r3, [r7, #20]
 800c0de:	e000      	b.n	800c0e2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c0e0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	2201      	movs	r2, #1
 800c0e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c0f2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	3730      	adds	r7, #48	; 0x30
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}

0800c0fe <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c0fe:	b580      	push	{r7, lr}
 800c100:	b084      	sub	sp, #16
 800c102:	af00      	add	r7, sp, #0
 800c104:	60f8      	str	r0, [r7, #12]
 800c106:	60b9      	str	r1, [r7, #8]
 800c108:	603b      	str	r3, [r7, #0]
 800c10a:	4613      	mov	r3, r2
 800c10c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c10e:	e04c      	b.n	800c1aa <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c116:	d048      	beq.n	800c1aa <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c118:	f7fb f854 	bl	80071c4 <HAL_GetTick>
 800c11c:	4602      	mov	r2, r0
 800c11e:	69bb      	ldr	r3, [r7, #24]
 800c120:	1ad3      	subs	r3, r2, r3
 800c122:	683a      	ldr	r2, [r7, #0]
 800c124:	429a      	cmp	r2, r3
 800c126:	d902      	bls.n	800c12e <SPI_WaitFlagStateUntilTimeout+0x30>
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d13d      	bne.n	800c1aa <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	685a      	ldr	r2, [r3, #4]
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c13c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	685b      	ldr	r3, [r3, #4]
 800c142:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c146:	d111      	bne.n	800c16c <SPI_WaitFlagStateUntilTimeout+0x6e>
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	689b      	ldr	r3, [r3, #8]
 800c14c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c150:	d004      	beq.n	800c15c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	689b      	ldr	r3, [r3, #8]
 800c156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c15a:	d107      	bne.n	800c16c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	681a      	ldr	r2, [r3, #0]
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c16a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c170:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c174:	d10f      	bne.n	800c196 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	681a      	ldr	r2, [r3, #0]
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c184:	601a      	str	r2, [r3, #0]
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	681a      	ldr	r2, [r3, #0]
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c194:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	2201      	movs	r2, #1
 800c19a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c1a6:	2303      	movs	r3, #3
 800c1a8:	e00f      	b.n	800c1ca <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	689a      	ldr	r2, [r3, #8]
 800c1b0:	68bb      	ldr	r3, [r7, #8]
 800c1b2:	4013      	ands	r3, r2
 800c1b4:	68ba      	ldr	r2, [r7, #8]
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	bf0c      	ite	eq
 800c1ba:	2301      	moveq	r3, #1
 800c1bc:	2300      	movne	r3, #0
 800c1be:	b2db      	uxtb	r3, r3
 800c1c0:	461a      	mov	r2, r3
 800c1c2:	79fb      	ldrb	r3, [r7, #7]
 800c1c4:	429a      	cmp	r2, r3
 800c1c6:	d1a3      	bne.n	800c110 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800c1c8:	2300      	movs	r3, #0
}
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	3710      	adds	r7, #16
 800c1ce:	46bd      	mov	sp, r7
 800c1d0:	bd80      	pop	{r7, pc}

0800c1d2 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c1d2:	b580      	push	{r7, lr}
 800c1d4:	b086      	sub	sp, #24
 800c1d6:	af02      	add	r7, sp, #8
 800c1d8:	60f8      	str	r0, [r7, #12]
 800c1da:	60b9      	str	r1, [r7, #8]
 800c1dc:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	685b      	ldr	r3, [r3, #4]
 800c1e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c1e6:	d111      	bne.n	800c20c <SPI_EndRxTransaction+0x3a>
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	689b      	ldr	r3, [r3, #8]
 800c1ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c1f0:	d004      	beq.n	800c1fc <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	689b      	ldr	r3, [r3, #8]
 800c1f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1fa:	d107      	bne.n	800c20c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	681a      	ldr	r2, [r3, #0]
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c20a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	685b      	ldr	r3, [r3, #4]
 800c210:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c214:	d12a      	bne.n	800c26c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	689b      	ldr	r3, [r3, #8]
 800c21a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c21e:	d012      	beq.n	800c246 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	9300      	str	r3, [sp, #0]
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	2200      	movs	r2, #0
 800c228:	2180      	movs	r1, #128	; 0x80
 800c22a:	68f8      	ldr	r0, [r7, #12]
 800c22c:	f7ff ff67 	bl	800c0fe <SPI_WaitFlagStateUntilTimeout>
 800c230:	4603      	mov	r3, r0
 800c232:	2b00      	cmp	r3, #0
 800c234:	d02d      	beq.n	800c292 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c23a:	f043 0220 	orr.w	r2, r3, #32
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c242:	2303      	movs	r3, #3
 800c244:	e026      	b.n	800c294 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	9300      	str	r3, [sp, #0]
 800c24a:	68bb      	ldr	r3, [r7, #8]
 800c24c:	2200      	movs	r2, #0
 800c24e:	2101      	movs	r1, #1
 800c250:	68f8      	ldr	r0, [r7, #12]
 800c252:	f7ff ff54 	bl	800c0fe <SPI_WaitFlagStateUntilTimeout>
 800c256:	4603      	mov	r3, r0
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d01a      	beq.n	800c292 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c260:	f043 0220 	orr.w	r2, r3, #32
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c268:	2303      	movs	r3, #3
 800c26a:	e013      	b.n	800c294 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	9300      	str	r3, [sp, #0]
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	2200      	movs	r2, #0
 800c274:	2101      	movs	r1, #1
 800c276:	68f8      	ldr	r0, [r7, #12]
 800c278:	f7ff ff41 	bl	800c0fe <SPI_WaitFlagStateUntilTimeout>
 800c27c:	4603      	mov	r3, r0
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d007      	beq.n	800c292 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c286:	f043 0220 	orr.w	r2, r3, #32
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c28e:	2303      	movs	r3, #3
 800c290:	e000      	b.n	800c294 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800c292:	2300      	movs	r3, #0
}
 800c294:	4618      	mov	r0, r3
 800c296:	3710      	adds	r7, #16
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}

0800c29c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b088      	sub	sp, #32
 800c2a0:	af02      	add	r7, sp, #8
 800c2a2:	60f8      	str	r0, [r7, #12]
 800c2a4:	60b9      	str	r1, [r7, #8]
 800c2a6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c2a8:	4b1b      	ldr	r3, [pc, #108]	; (800c318 <SPI_EndRxTxTransaction+0x7c>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	4a1b      	ldr	r2, [pc, #108]	; (800c31c <SPI_EndRxTxTransaction+0x80>)
 800c2ae:	fba2 2303 	umull	r2, r3, r2, r3
 800c2b2:	0d5b      	lsrs	r3, r3, #21
 800c2b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c2b8:	fb02 f303 	mul.w	r3, r2, r3
 800c2bc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	685b      	ldr	r3, [r3, #4]
 800c2c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c2c6:	d112      	bne.n	800c2ee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	9300      	str	r3, [sp, #0]
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	2180      	movs	r1, #128	; 0x80
 800c2d2:	68f8      	ldr	r0, [r7, #12]
 800c2d4:	f7ff ff13 	bl	800c0fe <SPI_WaitFlagStateUntilTimeout>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d016      	beq.n	800c30c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2e2:	f043 0220 	orr.w	r2, r3, #32
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c2ea:	2303      	movs	r3, #3
 800c2ec:	e00f      	b.n	800c30e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d00a      	beq.n	800c30a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c2f4:	697b      	ldr	r3, [r7, #20]
 800c2f6:	3b01      	subs	r3, #1
 800c2f8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	689b      	ldr	r3, [r3, #8]
 800c300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c304:	2b80      	cmp	r3, #128	; 0x80
 800c306:	d0f2      	beq.n	800c2ee <SPI_EndRxTxTransaction+0x52>
 800c308:	e000      	b.n	800c30c <SPI_EndRxTxTransaction+0x70>
        break;
 800c30a:	bf00      	nop
  }

  return HAL_OK;
 800c30c:	2300      	movs	r3, #0
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3718      	adds	r7, #24
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
 800c316:	bf00      	nop
 800c318:	2000014c 	.word	0x2000014c
 800c31c:	165e9f81 	.word	0x165e9f81

0800c320 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800c320:	b084      	sub	sp, #16
 800c322:	b480      	push	{r7}
 800c324:	b085      	sub	sp, #20
 800c326:	af00      	add	r7, sp, #0
 800c328:	6078      	str	r0, [r7, #4]
 800c32a:	f107 001c 	add.w	r0, r7, #28
 800c32e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c332:	2300      	movs	r3, #0
 800c334:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c336:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c338:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c33a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800c33e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c340:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c342:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c346:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c34a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c34c:	68fa      	ldr	r2, [r7, #12]
 800c34e:	4313      	orrs	r3, r2
 800c350:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	685b      	ldr	r3, [r3, #4]
 800c356:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800c35a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c35e:	68fa      	ldr	r2, [r7, #12]
 800c360:	431a      	orrs	r2, r3
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c366:	2300      	movs	r3, #0
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3714      	adds	r7, #20
 800c36c:	46bd      	mov	sp, r7
 800c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c372:	b004      	add	sp, #16
 800c374:	4770      	bx	lr

0800c376 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800c376:	b480      	push	{r7}
 800c378:	b083      	sub	sp, #12
 800c37a:	af00      	add	r7, sp, #0
 800c37c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c384:	4618      	mov	r0, r3
 800c386:	370c      	adds	r7, #12
 800c388:	46bd      	mov	sp, r7
 800c38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38e:	4770      	bx	lr

0800c390 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800c390:	b480      	push	{r7}
 800c392:	b083      	sub	sp, #12
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	681a      	ldr	r2, [r3, #0]
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c3a4:	2300      	movs	r3, #0
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	370c      	adds	r7, #12
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b0:	4770      	bx	lr

0800c3b2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800c3b2:	b580      	push	{r7, lr}
 800c3b4:	b082      	sub	sp, #8
 800c3b6:	af00      	add	r7, sp, #0
 800c3b8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2203      	movs	r2, #3
 800c3be:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800c3c0:	2002      	movs	r0, #2
 800c3c2:	f7fa ff0b 	bl	80071dc <HAL_Delay>
  
  return HAL_OK;
 800c3c6:	2300      	movs	r3, #0
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3708      	adds	r7, #8
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}

0800c3d0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b083      	sub	sp, #12
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f003 0303 	and.w	r3, r3, #3
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	370c      	adds	r7, #12
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ea:	4770      	bx	lr

0800c3ec <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	b085      	sub	sp, #20
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	681a      	ldr	r2, [r3, #0]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c40a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c410:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c416:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c418:	68fa      	ldr	r2, [r7, #12]
 800c41a:	4313      	orrs	r3, r2
 800c41c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	68db      	ldr	r3, [r3, #12]
 800c422:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c426:	f023 030f 	bic.w	r3, r3, #15
 800c42a:	68fa      	ldr	r2, [r7, #12]
 800c42c:	431a      	orrs	r2, r3
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c432:	2300      	movs	r3, #0
}
 800c434:	4618      	mov	r0, r3
 800c436:	3714      	adds	r7, #20
 800c438:	46bd      	mov	sp, r7
 800c43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43e:	4770      	bx	lr

0800c440 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800c440:	b480      	push	{r7}
 800c442:	b083      	sub	sp, #12
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	691b      	ldr	r3, [r3, #16]
 800c44c:	b2db      	uxtb	r3, r3
}
 800c44e:	4618      	mov	r0, r3
 800c450:	370c      	adds	r7, #12
 800c452:	46bd      	mov	sp, r7
 800c454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c458:	4770      	bx	lr

0800c45a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800c45a:	b480      	push	{r7}
 800c45c:	b085      	sub	sp, #20
 800c45e:	af00      	add	r7, sp, #0
 800c460:	6078      	str	r0, [r7, #4]
 800c462:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	3314      	adds	r3, #20
 800c468:	461a      	mov	r2, r3
 800c46a:	683b      	ldr	r3, [r7, #0]
 800c46c:	4413      	add	r3, r2
 800c46e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	681b      	ldr	r3, [r3, #0]
}  
 800c474:	4618      	mov	r0, r3
 800c476:	3714      	adds	r7, #20
 800c478:	46bd      	mov	sp, r7
 800c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47e:	4770      	bx	lr

0800c480 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800c480:	b480      	push	{r7}
 800c482:	b085      	sub	sp, #20
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
 800c488:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c48a:	2300      	movs	r3, #0
 800c48c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	681a      	ldr	r2, [r3, #0]
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	685a      	ldr	r2, [r3, #4]
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c4a6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c4ac:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c4b2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c4b4:	68fa      	ldr	r2, [r7, #12]
 800c4b6:	4313      	orrs	r3, r2
 800c4b8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4be:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	431a      	orrs	r2, r3
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c4ca:	2300      	movs	r3, #0

}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	3714      	adds	r7, #20
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d6:	4770      	bx	lr

0800c4d8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b088      	sub	sp, #32
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
 800c4e0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c4e6:	2310      	movs	r3, #16
 800c4e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c4ea:	2340      	movs	r3, #64	; 0x40
 800c4ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c4f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c4f8:	f107 0308 	add.w	r3, r7, #8
 800c4fc:	4619      	mov	r1, r3
 800c4fe:	6878      	ldr	r0, [r7, #4]
 800c500:	f7ff ff74 	bl	800c3ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800c504:	f241 3288 	movw	r2, #5000	; 0x1388
 800c508:	2110      	movs	r1, #16
 800c50a:	6878      	ldr	r0, [r7, #4]
 800c50c:	f000 fa40 	bl	800c990 <SDMMC_GetCmdResp1>
 800c510:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c512:	69fb      	ldr	r3, [r7, #28]
}
 800c514:	4618      	mov	r0, r3
 800c516:	3720      	adds	r7, #32
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}

0800c51c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b088      	sub	sp, #32
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
 800c524:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c52a:	2311      	movs	r3, #17
 800c52c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c52e:	2340      	movs	r3, #64	; 0x40
 800c530:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c532:	2300      	movs	r3, #0
 800c534:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c536:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c53a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c53c:	f107 0308 	add.w	r3, r7, #8
 800c540:	4619      	mov	r1, r3
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f7ff ff52 	bl	800c3ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c548:	f241 3288 	movw	r2, #5000	; 0x1388
 800c54c:	2111      	movs	r1, #17
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f000 fa1e 	bl	800c990 <SDMMC_GetCmdResp1>
 800c554:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c556:	69fb      	ldr	r3, [r7, #28]
}
 800c558:	4618      	mov	r0, r3
 800c55a:	3720      	adds	r7, #32
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}

0800c560 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b088      	sub	sp, #32
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
 800c568:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c56e:	2312      	movs	r3, #18
 800c570:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c572:	2340      	movs	r3, #64	; 0x40
 800c574:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c576:	2300      	movs	r3, #0
 800c578:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c57a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c57e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c580:	f107 0308 	add.w	r3, r7, #8
 800c584:	4619      	mov	r1, r3
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f7ff ff30 	bl	800c3ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c58c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c590:	2112      	movs	r1, #18
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f000 f9fc 	bl	800c990 <SDMMC_GetCmdResp1>
 800c598:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c59a:	69fb      	ldr	r3, [r7, #28]
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3720      	adds	r7, #32
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}

0800c5a4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b088      	sub	sp, #32
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c5b2:	2318      	movs	r3, #24
 800c5b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c5b6:	2340      	movs	r3, #64	; 0x40
 800c5b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c5be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c5c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c5c4:	f107 0308 	add.w	r3, r7, #8
 800c5c8:	4619      	mov	r1, r3
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f7ff ff0e 	bl	800c3ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c5d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5d4:	2118      	movs	r1, #24
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f000 f9da 	bl	800c990 <SDMMC_GetCmdResp1>
 800c5dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c5de:	69fb      	ldr	r3, [r7, #28]
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3720      	adds	r7, #32
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}

0800c5e8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b088      	sub	sp, #32
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
 800c5f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c5f6:	2319      	movs	r3, #25
 800c5f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c5fa:	2340      	movs	r3, #64	; 0x40
 800c5fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c5fe:	2300      	movs	r3, #0
 800c600:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c602:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c606:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c608:	f107 0308 	add.w	r3, r7, #8
 800c60c:	4619      	mov	r1, r3
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f7ff feec 	bl	800c3ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c614:	f241 3288 	movw	r2, #5000	; 0x1388
 800c618:	2119      	movs	r1, #25
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	f000 f9b8 	bl	800c990 <SDMMC_GetCmdResp1>
 800c620:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c622:	69fb      	ldr	r3, [r7, #28]
}
 800c624:	4618      	mov	r0, r3
 800c626:	3720      	adds	r7, #32
 800c628:	46bd      	mov	sp, r7
 800c62a:	bd80      	pop	{r7, pc}

0800c62c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b088      	sub	sp, #32
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c634:	2300      	movs	r3, #0
 800c636:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c638:	230c      	movs	r3, #12
 800c63a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c63c:	2340      	movs	r3, #64	; 0x40
 800c63e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c640:	2300      	movs	r3, #0
 800c642:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c644:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c648:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c64a:	f107 0308 	add.w	r3, r7, #8
 800c64e:	4619      	mov	r1, r3
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f7ff fecb 	bl	800c3ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800c656:	4a05      	ldr	r2, [pc, #20]	; (800c66c <SDMMC_CmdStopTransfer+0x40>)
 800c658:	210c      	movs	r1, #12
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f000 f998 	bl	800c990 <SDMMC_GetCmdResp1>
 800c660:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c662:	69fb      	ldr	r3, [r7, #28]
}
 800c664:	4618      	mov	r0, r3
 800c666:	3720      	adds	r7, #32
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}
 800c66c:	05f5e100 	.word	0x05f5e100

0800c670 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b08a      	sub	sp, #40	; 0x28
 800c674:	af00      	add	r7, sp, #0
 800c676:	60f8      	str	r0, [r7, #12]
 800c678:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c680:	2307      	movs	r3, #7
 800c682:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c684:	2340      	movs	r3, #64	; 0x40
 800c686:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c688:	2300      	movs	r3, #0
 800c68a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c68c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c690:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c692:	f107 0310 	add.w	r3, r7, #16
 800c696:	4619      	mov	r1, r3
 800c698:	68f8      	ldr	r0, [r7, #12]
 800c69a:	f7ff fea7 	bl	800c3ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800c69e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6a2:	2107      	movs	r1, #7
 800c6a4:	68f8      	ldr	r0, [r7, #12]
 800c6a6:	f000 f973 	bl	800c990 <SDMMC_GetCmdResp1>
 800c6aa:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3728      	adds	r7, #40	; 0x28
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}

0800c6b6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800c6b6:	b580      	push	{r7, lr}
 800c6b8:	b088      	sub	sp, #32
 800c6ba:	af00      	add	r7, sp, #0
 800c6bc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c6ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c6d4:	f107 0308 	add.w	r3, r7, #8
 800c6d8:	4619      	mov	r1, r3
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f7ff fe86 	bl	800c3ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f000 f92d 	bl	800c940 <SDMMC_GetCmdError>
 800c6e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c6e8:	69fb      	ldr	r3, [r7, #28]
}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	3720      	adds	r7, #32
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}

0800c6f2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800c6f2:	b580      	push	{r7, lr}
 800c6f4:	b088      	sub	sp, #32
 800c6f6:	af00      	add	r7, sp, #0
 800c6f8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c6fa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c6fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c700:	2308      	movs	r3, #8
 800c702:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c704:	2340      	movs	r3, #64	; 0x40
 800c706:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c708:	2300      	movs	r3, #0
 800c70a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c70c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c710:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c712:	f107 0308 	add.w	r3, r7, #8
 800c716:	4619      	mov	r1, r3
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f7ff fe67 	bl	800c3ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f000 fb16 	bl	800cd50 <SDMMC_GetCmdResp7>
 800c724:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c726:	69fb      	ldr	r3, [r7, #28]
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3720      	adds	r7, #32
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}

0800c730 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b088      	sub	sp, #32
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c73e:	2337      	movs	r3, #55	; 0x37
 800c740:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c742:	2340      	movs	r3, #64	; 0x40
 800c744:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c746:	2300      	movs	r3, #0
 800c748:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c74a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c74e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c750:	f107 0308 	add.w	r3, r7, #8
 800c754:	4619      	mov	r1, r3
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f7ff fe48 	bl	800c3ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800c75c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c760:	2137      	movs	r1, #55	; 0x37
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f000 f914 	bl	800c990 <SDMMC_GetCmdResp1>
 800c768:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c76a:	69fb      	ldr	r3, [r7, #28]
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3720      	adds	r7, #32
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}

0800c774 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b088      	sub	sp, #32
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
 800c77c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c784:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c788:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c78a:	2329      	movs	r3, #41	; 0x29
 800c78c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c78e:	2340      	movs	r3, #64	; 0x40
 800c790:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c792:	2300      	movs	r3, #0
 800c794:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c796:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c79a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c79c:	f107 0308 	add.w	r3, r7, #8
 800c7a0:	4619      	mov	r1, r3
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f7ff fe22 	bl	800c3ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f000 fa23 	bl	800cbf4 <SDMMC_GetCmdResp3>
 800c7ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c7b0:	69fb      	ldr	r3, [r7, #28]
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3720      	adds	r7, #32
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}

0800c7ba <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800c7ba:	b580      	push	{r7, lr}
 800c7bc:	b088      	sub	sp, #32
 800c7be:	af00      	add	r7, sp, #0
 800c7c0:	6078      	str	r0, [r7, #4]
 800c7c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c7c8:	2306      	movs	r3, #6
 800c7ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c7cc:	2340      	movs	r3, #64	; 0x40
 800c7ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c7d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c7da:	f107 0308 	add.w	r3, r7, #8
 800c7de:	4619      	mov	r1, r3
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f7ff fe03 	bl	800c3ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800c7e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7ea:	2106      	movs	r1, #6
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f000 f8cf 	bl	800c990 <SDMMC_GetCmdResp1>
 800c7f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c7f4:	69fb      	ldr	r3, [r7, #28]
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	3720      	adds	r7, #32
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}

0800c7fe <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800c7fe:	b580      	push	{r7, lr}
 800c800:	b088      	sub	sp, #32
 800c802:	af00      	add	r7, sp, #0
 800c804:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c806:	2300      	movs	r3, #0
 800c808:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c80a:	2333      	movs	r3, #51	; 0x33
 800c80c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c80e:	2340      	movs	r3, #64	; 0x40
 800c810:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c812:	2300      	movs	r3, #0
 800c814:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c816:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c81a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c81c:	f107 0308 	add.w	r3, r7, #8
 800c820:	4619      	mov	r1, r3
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f7ff fde2 	bl	800c3ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800c828:	f241 3288 	movw	r2, #5000	; 0x1388
 800c82c:	2133      	movs	r1, #51	; 0x33
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f000 f8ae 	bl	800c990 <SDMMC_GetCmdResp1>
 800c834:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c836:	69fb      	ldr	r3, [r7, #28]
}
 800c838:	4618      	mov	r0, r3
 800c83a:	3720      	adds	r7, #32
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}

0800c840 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b088      	sub	sp, #32
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c848:	2300      	movs	r3, #0
 800c84a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c84c:	2302      	movs	r3, #2
 800c84e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c850:	23c0      	movs	r3, #192	; 0xc0
 800c852:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c854:	2300      	movs	r3, #0
 800c856:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c858:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c85c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c85e:	f107 0308 	add.w	r3, r7, #8
 800c862:	4619      	mov	r1, r3
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f7ff fdc1 	bl	800c3ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f000 f97c 	bl	800cb68 <SDMMC_GetCmdResp2>
 800c870:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c872:	69fb      	ldr	r3, [r7, #28]
}
 800c874:	4618      	mov	r0, r3
 800c876:	3720      	adds	r7, #32
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}

0800c87c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b088      	sub	sp, #32
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c88a:	2309      	movs	r3, #9
 800c88c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c88e:	23c0      	movs	r3, #192	; 0xc0
 800c890:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c892:	2300      	movs	r3, #0
 800c894:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c896:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c89a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c89c:	f107 0308 	add.w	r3, r7, #8
 800c8a0:	4619      	mov	r1, r3
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	f7ff fda2 	bl	800c3ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f000 f95d 	bl	800cb68 <SDMMC_GetCmdResp2>
 800c8ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8b0:	69fb      	ldr	r3, [r7, #28]
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3720      	adds	r7, #32
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}

0800c8ba <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800c8ba:	b580      	push	{r7, lr}
 800c8bc:	b088      	sub	sp, #32
 800c8be:	af00      	add	r7, sp, #0
 800c8c0:	6078      	str	r0, [r7, #4]
 800c8c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c8c8:	2303      	movs	r3, #3
 800c8ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c8cc:	2340      	movs	r3, #64	; 0x40
 800c8ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c8d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c8da:	f107 0308 	add.w	r3, r7, #8
 800c8de:	4619      	mov	r1, r3
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f7ff fd83 	bl	800c3ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c8e6:	683a      	ldr	r2, [r7, #0]
 800c8e8:	2103      	movs	r1, #3
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f000 f9bc 	bl	800cc68 <SDMMC_GetCmdResp6>
 800c8f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8f2:	69fb      	ldr	r3, [r7, #28]
}
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	3720      	adds	r7, #32
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bd80      	pop	{r7, pc}

0800c8fc <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b088      	sub	sp, #32
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
 800c904:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c90a:	230d      	movs	r3, #13
 800c90c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c90e:	2340      	movs	r3, #64	; 0x40
 800c910:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c912:	2300      	movs	r3, #0
 800c914:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c916:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c91a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c91c:	f107 0308 	add.w	r3, r7, #8
 800c920:	4619      	mov	r1, r3
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f7ff fd62 	bl	800c3ec <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800c928:	f241 3288 	movw	r2, #5000	; 0x1388
 800c92c:	210d      	movs	r1, #13
 800c92e:	6878      	ldr	r0, [r7, #4]
 800c930:	f000 f82e 	bl	800c990 <SDMMC_GetCmdResp1>
 800c934:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c936:	69fb      	ldr	r3, [r7, #28]
}
 800c938:	4618      	mov	r0, r3
 800c93a:	3720      	adds	r7, #32
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}

0800c940 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800c940:	b490      	push	{r4, r7}
 800c942:	b082      	sub	sp, #8
 800c944:	af00      	add	r7, sp, #0
 800c946:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c948:	4b0f      	ldr	r3, [pc, #60]	; (800c988 <SDMMC_GetCmdError+0x48>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	4a0f      	ldr	r2, [pc, #60]	; (800c98c <SDMMC_GetCmdError+0x4c>)
 800c94e:	fba2 2303 	umull	r2, r3, r2, r3
 800c952:	0a5b      	lsrs	r3, r3, #9
 800c954:	f241 3288 	movw	r2, #5000	; 0x1388
 800c958:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c95c:	4623      	mov	r3, r4
 800c95e:	1e5c      	subs	r4, r3, #1
 800c960:	2b00      	cmp	r3, #0
 800c962:	d102      	bne.n	800c96a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c964:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c968:	e009      	b.n	800c97e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c96e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c972:	2b00      	cmp	r3, #0
 800c974:	d0f2      	beq.n	800c95c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	22c5      	movs	r2, #197	; 0xc5
 800c97a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800c97c:	2300      	movs	r3, #0
}
 800c97e:	4618      	mov	r0, r3
 800c980:	3708      	adds	r7, #8
 800c982:	46bd      	mov	sp, r7
 800c984:	bc90      	pop	{r4, r7}
 800c986:	4770      	bx	lr
 800c988:	2000014c 	.word	0x2000014c
 800c98c:	10624dd3 	.word	0x10624dd3

0800c990 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c990:	b590      	push	{r4, r7, lr}
 800c992:	b087      	sub	sp, #28
 800c994:	af00      	add	r7, sp, #0
 800c996:	60f8      	str	r0, [r7, #12]
 800c998:	460b      	mov	r3, r1
 800c99a:	607a      	str	r2, [r7, #4]
 800c99c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c99e:	4b6f      	ldr	r3, [pc, #444]	; (800cb5c <SDMMC_GetCmdResp1+0x1cc>)
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	4a6f      	ldr	r2, [pc, #444]	; (800cb60 <SDMMC_GetCmdResp1+0x1d0>)
 800c9a4:	fba2 2303 	umull	r2, r3, r2, r3
 800c9a8:	0a5b      	lsrs	r3, r3, #9
 800c9aa:	687a      	ldr	r2, [r7, #4]
 800c9ac:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c9b0:	4623      	mov	r3, r4
 800c9b2:	1e5c      	subs	r4, r3, #1
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d102      	bne.n	800c9be <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c9b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c9bc:	e0c9      	b.n	800cb52 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9c2:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c9c4:	697b      	ldr	r3, [r7, #20]
 800c9c6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d0f0      	beq.n	800c9b0 <SDMMC_GetCmdResp1+0x20>
 800c9ce:	697b      	ldr	r3, [r7, #20]
 800c9d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d1eb      	bne.n	800c9b0 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9dc:	f003 0304 	and.w	r3, r3, #4
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d004      	beq.n	800c9ee <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	2204      	movs	r2, #4
 800c9e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c9ea:	2304      	movs	r3, #4
 800c9ec:	e0b1      	b.n	800cb52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9f2:	f003 0301 	and.w	r3, r3, #1
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d004      	beq.n	800ca04 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	2201      	movs	r2, #1
 800c9fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ca00:	2301      	movs	r3, #1
 800ca02:	e0a6      	b.n	800cb52 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	22c5      	movs	r2, #197	; 0xc5
 800ca08:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ca0a:	68f8      	ldr	r0, [r7, #12]
 800ca0c:	f7ff fd18 	bl	800c440 <SDIO_GetCommandResponse>
 800ca10:	4603      	mov	r3, r0
 800ca12:	461a      	mov	r2, r3
 800ca14:	7afb      	ldrb	r3, [r7, #11]
 800ca16:	4293      	cmp	r3, r2
 800ca18:	d001      	beq.n	800ca1e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ca1a:	2301      	movs	r3, #1
 800ca1c:	e099      	b.n	800cb52 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ca1e:	2100      	movs	r1, #0
 800ca20:	68f8      	ldr	r0, [r7, #12]
 800ca22:	f7ff fd1a 	bl	800c45a <SDIO_GetResponse>
 800ca26:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ca28:	693a      	ldr	r2, [r7, #16]
 800ca2a:	4b4e      	ldr	r3, [pc, #312]	; (800cb64 <SDMMC_GetCmdResp1+0x1d4>)
 800ca2c:	4013      	ands	r3, r2
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d101      	bne.n	800ca36 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800ca32:	2300      	movs	r3, #0
 800ca34:	e08d      	b.n	800cb52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	da02      	bge.n	800ca42 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ca3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ca40:	e087      	b.n	800cb52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d001      	beq.n	800ca50 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ca4c:	2340      	movs	r3, #64	; 0x40
 800ca4e:	e080      	b.n	800cb52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d001      	beq.n	800ca5e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ca5a:	2380      	movs	r3, #128	; 0x80
 800ca5c:	e079      	b.n	800cb52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ca5e:	693b      	ldr	r3, [r7, #16]
 800ca60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d002      	beq.n	800ca6e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ca68:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ca6c:	e071      	b.n	800cb52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ca6e:	693b      	ldr	r3, [r7, #16]
 800ca70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d002      	beq.n	800ca7e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ca78:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca7c:	e069      	b.n	800cb52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ca7e:	693b      	ldr	r3, [r7, #16]
 800ca80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d002      	beq.n	800ca8e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ca88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca8c:	e061      	b.n	800cb52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ca8e:	693b      	ldr	r3, [r7, #16]
 800ca90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d002      	beq.n	800ca9e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ca98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ca9c:	e059      	b.n	800cb52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ca9e:	693b      	ldr	r3, [r7, #16]
 800caa0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d002      	beq.n	800caae <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800caa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800caac:	e051      	b.n	800cb52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800caae:	693b      	ldr	r3, [r7, #16]
 800cab0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d002      	beq.n	800cabe <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cab8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cabc:	e049      	b.n	800cb52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cabe:	693b      	ldr	r3, [r7, #16]
 800cac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d002      	beq.n	800cace <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cac8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cacc:	e041      	b.n	800cb52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cace:	693b      	ldr	r3, [r7, #16]
 800cad0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d002      	beq.n	800cade <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800cad8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cadc:	e039      	b.n	800cb52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cade:	693b      	ldr	r3, [r7, #16]
 800cae0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d002      	beq.n	800caee <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cae8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800caec:	e031      	b.n	800cb52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800caee:	693b      	ldr	r3, [r7, #16]
 800caf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d002      	beq.n	800cafe <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800caf8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cafc:	e029      	b.n	800cb52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cafe:	693b      	ldr	r3, [r7, #16]
 800cb00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d002      	beq.n	800cb0e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cb08:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cb0c:	e021      	b.n	800cb52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cb0e:	693b      	ldr	r3, [r7, #16]
 800cb10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d002      	beq.n	800cb1e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cb18:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cb1c:	e019      	b.n	800cb52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cb1e:	693b      	ldr	r3, [r7, #16]
 800cb20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d002      	beq.n	800cb2e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cb28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cb2c:	e011      	b.n	800cb52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cb2e:	693b      	ldr	r3, [r7, #16]
 800cb30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d002      	beq.n	800cb3e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800cb38:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cb3c:	e009      	b.n	800cb52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800cb3e:	693b      	ldr	r3, [r7, #16]
 800cb40:	f003 0308 	and.w	r3, r3, #8
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d002      	beq.n	800cb4e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cb48:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800cb4c:	e001      	b.n	800cb52 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cb4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	371c      	adds	r7, #28
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd90      	pop	{r4, r7, pc}
 800cb5a:	bf00      	nop
 800cb5c:	2000014c 	.word	0x2000014c
 800cb60:	10624dd3 	.word	0x10624dd3
 800cb64:	fdffe008 	.word	0xfdffe008

0800cb68 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800cb68:	b490      	push	{r4, r7}
 800cb6a:	b084      	sub	sp, #16
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cb70:	4b1e      	ldr	r3, [pc, #120]	; (800cbec <SDMMC_GetCmdResp2+0x84>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	4a1e      	ldr	r2, [pc, #120]	; (800cbf0 <SDMMC_GetCmdResp2+0x88>)
 800cb76:	fba2 2303 	umull	r2, r3, r2, r3
 800cb7a:	0a5b      	lsrs	r3, r3, #9
 800cb7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb80:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cb84:	4623      	mov	r3, r4
 800cb86:	1e5c      	subs	r4, r3, #1
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d102      	bne.n	800cb92 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cb8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cb90:	e026      	b.n	800cbe0 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb96:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d0f0      	beq.n	800cb84 <SDMMC_GetCmdResp2+0x1c>
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d1eb      	bne.n	800cb84 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbb0:	f003 0304 	and.w	r3, r3, #4
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d004      	beq.n	800cbc2 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2204      	movs	r2, #4
 800cbbc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cbbe:	2304      	movs	r3, #4
 800cbc0:	e00e      	b.n	800cbe0 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbc6:	f003 0301 	and.w	r3, r3, #1
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d004      	beq.n	800cbd8 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2201      	movs	r2, #1
 800cbd2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cbd4:	2301      	movs	r3, #1
 800cbd6:	e003      	b.n	800cbe0 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	22c5      	movs	r2, #197	; 0xc5
 800cbdc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800cbde:	2300      	movs	r3, #0
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	3710      	adds	r7, #16
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bc90      	pop	{r4, r7}
 800cbe8:	4770      	bx	lr
 800cbea:	bf00      	nop
 800cbec:	2000014c 	.word	0x2000014c
 800cbf0:	10624dd3 	.word	0x10624dd3

0800cbf4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800cbf4:	b490      	push	{r4, r7}
 800cbf6:	b084      	sub	sp, #16
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cbfc:	4b18      	ldr	r3, [pc, #96]	; (800cc60 <SDMMC_GetCmdResp3+0x6c>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	4a18      	ldr	r2, [pc, #96]	; (800cc64 <SDMMC_GetCmdResp3+0x70>)
 800cc02:	fba2 2303 	umull	r2, r3, r2, r3
 800cc06:	0a5b      	lsrs	r3, r3, #9
 800cc08:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc0c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cc10:	4623      	mov	r3, r4
 800cc12:	1e5c      	subs	r4, r3, #1
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d102      	bne.n	800cc1e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cc18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cc1c:	e01b      	b.n	800cc56 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc22:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d0f0      	beq.n	800cc10 <SDMMC_GetCmdResp3+0x1c>
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d1eb      	bne.n	800cc10 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc3c:	f003 0304 	and.w	r3, r3, #4
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d004      	beq.n	800cc4e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2204      	movs	r2, #4
 800cc48:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cc4a:	2304      	movs	r3, #4
 800cc4c:	e003      	b.n	800cc56 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	22c5      	movs	r2, #197	; 0xc5
 800cc52:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800cc54:	2300      	movs	r3, #0
}
 800cc56:	4618      	mov	r0, r3
 800cc58:	3710      	adds	r7, #16
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bc90      	pop	{r4, r7}
 800cc5e:	4770      	bx	lr
 800cc60:	2000014c 	.word	0x2000014c
 800cc64:	10624dd3 	.word	0x10624dd3

0800cc68 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800cc68:	b590      	push	{r4, r7, lr}
 800cc6a:	b087      	sub	sp, #28
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	60f8      	str	r0, [r7, #12]
 800cc70:	460b      	mov	r3, r1
 800cc72:	607a      	str	r2, [r7, #4]
 800cc74:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cc76:	4b34      	ldr	r3, [pc, #208]	; (800cd48 <SDMMC_GetCmdResp6+0xe0>)
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	4a34      	ldr	r2, [pc, #208]	; (800cd4c <SDMMC_GetCmdResp6+0xe4>)
 800cc7c:	fba2 2303 	umull	r2, r3, r2, r3
 800cc80:	0a5b      	lsrs	r3, r3, #9
 800cc82:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc86:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cc8a:	4623      	mov	r3, r4
 800cc8c:	1e5c      	subs	r4, r3, #1
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d102      	bne.n	800cc98 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cc92:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cc96:	e052      	b.n	800cd3e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc9c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d0f0      	beq.n	800cc8a <SDMMC_GetCmdResp6+0x22>
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d1eb      	bne.n	800cc8a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccb6:	f003 0304 	and.w	r3, r3, #4
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d004      	beq.n	800ccc8 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	2204      	movs	r2, #4
 800ccc2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ccc4:	2304      	movs	r3, #4
 800ccc6:	e03a      	b.n	800cd3e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cccc:	f003 0301 	and.w	r3, r3, #1
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d004      	beq.n	800ccde <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	2201      	movs	r2, #1
 800ccd8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ccda:	2301      	movs	r3, #1
 800ccdc:	e02f      	b.n	800cd3e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ccde:	68f8      	ldr	r0, [r7, #12]
 800cce0:	f7ff fbae 	bl	800c440 <SDIO_GetCommandResponse>
 800cce4:	4603      	mov	r3, r0
 800cce6:	461a      	mov	r2, r3
 800cce8:	7afb      	ldrb	r3, [r7, #11]
 800ccea:	4293      	cmp	r3, r2
 800ccec:	d001      	beq.n	800ccf2 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ccee:	2301      	movs	r3, #1
 800ccf0:	e025      	b.n	800cd3e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	22c5      	movs	r2, #197	; 0xc5
 800ccf6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ccf8:	2100      	movs	r1, #0
 800ccfa:	68f8      	ldr	r0, [r7, #12]
 800ccfc:	f7ff fbad 	bl	800c45a <SDIO_GetResponse>
 800cd00:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800cd02:	693b      	ldr	r3, [r7, #16]
 800cd04:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d106      	bne.n	800cd1a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	0c1b      	lsrs	r3, r3, #16
 800cd10:	b29a      	uxth	r2, r3
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800cd16:	2300      	movs	r3, #0
 800cd18:	e011      	b.n	800cd3e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800cd1a:	693b      	ldr	r3, [r7, #16]
 800cd1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d002      	beq.n	800cd2a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cd24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cd28:	e009      	b.n	800cd3e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800cd2a:	693b      	ldr	r3, [r7, #16]
 800cd2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d002      	beq.n	800cd3a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cd34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cd38:	e001      	b.n	800cd3e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cd3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	371c      	adds	r7, #28
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd90      	pop	{r4, r7, pc}
 800cd46:	bf00      	nop
 800cd48:	2000014c 	.word	0x2000014c
 800cd4c:	10624dd3 	.word	0x10624dd3

0800cd50 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800cd50:	b490      	push	{r4, r7}
 800cd52:	b084      	sub	sp, #16
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cd58:	4b21      	ldr	r3, [pc, #132]	; (800cde0 <SDMMC_GetCmdResp7+0x90>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	4a21      	ldr	r2, [pc, #132]	; (800cde4 <SDMMC_GetCmdResp7+0x94>)
 800cd5e:	fba2 2303 	umull	r2, r3, r2, r3
 800cd62:	0a5b      	lsrs	r3, r3, #9
 800cd64:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd68:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cd6c:	4623      	mov	r3, r4
 800cd6e:	1e5c      	subs	r4, r3, #1
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d102      	bne.n	800cd7a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cd74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cd78:	e02c      	b.n	800cdd4 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd7e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d0f0      	beq.n	800cd6c <SDMMC_GetCmdResp7+0x1c>
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d1eb      	bne.n	800cd6c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd98:	f003 0304 	and.w	r3, r3, #4
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d004      	beq.n	800cdaa <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2204      	movs	r2, #4
 800cda4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cda6:	2304      	movs	r3, #4
 800cda8:	e014      	b.n	800cdd4 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdae:	f003 0301 	and.w	r3, r3, #1
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d004      	beq.n	800cdc0 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	2201      	movs	r2, #1
 800cdba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	e009      	b.n	800cdd4 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d002      	beq.n	800cdd2 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2240      	movs	r2, #64	; 0x40
 800cdd0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800cdd2:	2300      	movs	r3, #0
  
}
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	3710      	adds	r7, #16
 800cdd8:	46bd      	mov	sp, r7
 800cdda:	bc90      	pop	{r4, r7}
 800cddc:	4770      	bx	lr
 800cdde:	bf00      	nop
 800cde0:	2000014c 	.word	0x2000014c
 800cde4:	10624dd3 	.word	0x10624dd3

0800cde8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800cdec:	4904      	ldr	r1, [pc, #16]	; (800ce00 <MX_FATFS_Init+0x18>)
 800cdee:	4805      	ldr	r0, [pc, #20]	; (800ce04 <MX_FATFS_Init+0x1c>)
 800cdf0:	f003 fb68 	bl	80104c4 <FATFS_LinkDriver>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	461a      	mov	r2, r3
 800cdf8:	4b03      	ldr	r3, [pc, #12]	; (800ce08 <MX_FATFS_Init+0x20>)
 800cdfa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800cdfc:	bf00      	nop
 800cdfe:	bd80      	pop	{r7, pc}
 800ce00:	2000e198 	.word	0x2000e198
 800ce04:	08016610 	.word	0x08016610
 800ce08:	2000e194 	.word	0x2000e194

0800ce0c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ce10:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	46bd      	mov	sp, r7
 800ce16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1a:	4770      	bx	lr

0800ce1c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b082      	sub	sp, #8
 800ce20:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ce22:	2300      	movs	r3, #0
 800ce24:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ce26:	f000 f896 	bl	800cf56 <BSP_SD_IsDetected>
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	2b01      	cmp	r3, #1
 800ce2e:	d001      	beq.n	800ce34 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800ce30:	2301      	movs	r3, #1
 800ce32:	e012      	b.n	800ce5a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800ce34:	480b      	ldr	r0, [pc, #44]	; (800ce64 <BSP_SD_Init+0x48>)
 800ce36:	f7fd fa21 	bl	800a27c <HAL_SD_Init>
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ce3e:	79fb      	ldrb	r3, [r7, #7]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d109      	bne.n	800ce58 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800ce44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ce48:	4806      	ldr	r0, [pc, #24]	; (800ce64 <BSP_SD_Init+0x48>)
 800ce4a:	f7fd ffe1 	bl	800ae10 <HAL_SD_ConfigWideBusOperation>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d001      	beq.n	800ce58 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ce54:	2301      	movs	r3, #1
 800ce56:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ce58:	79fb      	ldrb	r3, [r7, #7]
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	3708      	adds	r7, #8
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}
 800ce62:	bf00      	nop
 800ce64:	2000e05c 	.word	0x2000e05c

0800ce68 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b086      	sub	sp, #24
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	60f8      	str	r0, [r7, #12]
 800ce70:	60b9      	str	r1, [r7, #8]
 800ce72:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800ce74:	2300      	movs	r3, #0
 800ce76:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	68ba      	ldr	r2, [r7, #8]
 800ce7c:	68f9      	ldr	r1, [r7, #12]
 800ce7e:	4806      	ldr	r0, [pc, #24]	; (800ce98 <BSP_SD_ReadBlocks_DMA+0x30>)
 800ce80:	f7fd fa8c 	bl	800a39c <HAL_SD_ReadBlocks_DMA>
 800ce84:	4603      	mov	r3, r0
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d001      	beq.n	800ce8e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ce8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce90:	4618      	mov	r0, r3
 800ce92:	3718      	adds	r7, #24
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bd80      	pop	{r7, pc}
 800ce98:	2000e05c 	.word	0x2000e05c

0800ce9c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b086      	sub	sp, #24
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	60f8      	str	r0, [r7, #12]
 800cea4:	60b9      	str	r1, [r7, #8]
 800cea6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	68ba      	ldr	r2, [r7, #8]
 800ceb0:	68f9      	ldr	r1, [r7, #12]
 800ceb2:	4806      	ldr	r0, [pc, #24]	; (800cecc <BSP_SD_WriteBlocks_DMA+0x30>)
 800ceb4:	f7fd fb5c 	bl	800a570 <HAL_SD_WriteBlocks_DMA>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d001      	beq.n	800cec2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800cebe:	2301      	movs	r3, #1
 800cec0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cec2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cec4:	4618      	mov	r0, r3
 800cec6:	3718      	adds	r7, #24
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bd80      	pop	{r7, pc}
 800cecc:	2000e05c 	.word	0x2000e05c

0800ced0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ced4:	4805      	ldr	r0, [pc, #20]	; (800ceec <BSP_SD_GetCardState+0x1c>)
 800ced6:	f7fe f817 	bl	800af08 <HAL_SD_GetCardState>
 800ceda:	4603      	mov	r3, r0
 800cedc:	2b04      	cmp	r3, #4
 800cede:	bf14      	ite	ne
 800cee0:	2301      	movne	r3, #1
 800cee2:	2300      	moveq	r3, #0
 800cee4:	b2db      	uxtb	r3, r3
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	bd80      	pop	{r7, pc}
 800ceea:	bf00      	nop
 800ceec:	2000e05c 	.word	0x2000e05c

0800cef0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b082      	sub	sp, #8
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800cef8:	6879      	ldr	r1, [r7, #4]
 800cefa:	4803      	ldr	r0, [pc, #12]	; (800cf08 <BSP_SD_GetCardInfo+0x18>)
 800cefc:	f7fd ff5c 	bl	800adb8 <HAL_SD_GetCardInfo>
}
 800cf00:	bf00      	nop
 800cf02:	3708      	adds	r7, #8
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd80      	pop	{r7, pc}
 800cf08:	2000e05c 	.word	0x2000e05c

0800cf0c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b082      	sub	sp, #8
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800cf14:	f000 f818 	bl	800cf48 <BSP_SD_AbortCallback>
}
 800cf18:	bf00      	nop
 800cf1a:	3708      	adds	r7, #8
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}

0800cf20 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b082      	sub	sp, #8
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800cf28:	f000 f9aa 	bl	800d280 <BSP_SD_WriteCpltCallback>
}
 800cf2c:	bf00      	nop
 800cf2e:	3708      	adds	r7, #8
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}

0800cf34 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b082      	sub	sp, #8
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800cf3c:	f000 f9ac 	bl	800d298 <BSP_SD_ReadCpltCallback>
}
 800cf40:	bf00      	nop
 800cf42:	3708      	adds	r7, #8
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}

0800cf48 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800cf48:	b480      	push	{r7}
 800cf4a:	af00      	add	r7, sp, #0

}
 800cf4c:	bf00      	nop
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf54:	4770      	bx	lr

0800cf56 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800cf56:	b580      	push	{r7, lr}
 800cf58:	b082      	sub	sp, #8
 800cf5a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800cf5c:	2301      	movs	r3, #1
 800cf5e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800cf60:	f000 f80c 	bl	800cf7c <BSP_PlatformIsDetected>
 800cf64:	4603      	mov	r3, r0
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d101      	bne.n	800cf6e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800cf6e:	79fb      	ldrb	r3, [r7, #7]
 800cf70:	b2db      	uxtb	r3, r3
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	3708      	adds	r7, #8
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}
	...

0800cf7c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b082      	sub	sp, #8
 800cf80:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800cf82:	2301      	movs	r3, #1
 800cf84:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800cf86:	2101      	movs	r1, #1
 800cf88:	4807      	ldr	r0, [pc, #28]	; (800cfa8 <BSP_PlatformIsDetected+0x2c>)
 800cf8a:	f7fb fc3f 	bl	800880c <HAL_GPIO_ReadPin>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d001      	beq.n	800cf98 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800cf94:	2300      	movs	r3, #0
 800cf96:	71fb      	strb	r3, [r7, #7]
//    if (status == SD_NOT_PRESENT){
//    	status = SD_PRESENT;
//    } else {
//    	status = SD_NOT_PRESENT;
//    }
   	status = SD_PRESENT;
 800cf98:	2301      	movs	r3, #1
 800cf9a:	71fb      	strb	r3, [r7, #7]

    /* USER CODE END 1 */
    return status;
 800cf9c:	79fb      	ldrb	r3, [r7, #7]
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3708      	adds	r7, #8
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}
 800cfa6:	bf00      	nop
 800cfa8:	40020c00 	.word	0x40020c00

0800cfac <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b084      	sub	sp, #16
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800cfb4:	f7fa f906 	bl	80071c4 <HAL_GetTick>
 800cfb8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800cfba:	e006      	b.n	800cfca <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cfbc:	f7ff ff88 	bl	800ced0 <BSP_SD_GetCardState>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d101      	bne.n	800cfca <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	e009      	b.n	800cfde <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800cfca:	f7fa f8fb 	bl	80071c4 <HAL_GetTick>
 800cfce:	4602      	mov	r2, r0
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	1ad3      	subs	r3, r2, r3
 800cfd4:	687a      	ldr	r2, [r7, #4]
 800cfd6:	429a      	cmp	r2, r3
 800cfd8:	d8f0      	bhi.n	800cfbc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800cfda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3710      	adds	r7, #16
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
	...

0800cfe8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b082      	sub	sp, #8
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	4603      	mov	r3, r0
 800cff0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800cff2:	4b0b      	ldr	r3, [pc, #44]	; (800d020 <SD_CheckStatus+0x38>)
 800cff4:	2201      	movs	r2, #1
 800cff6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800cff8:	f7ff ff6a 	bl	800ced0 <BSP_SD_GetCardState>
 800cffc:	4603      	mov	r3, r0
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d107      	bne.n	800d012 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d002:	4b07      	ldr	r3, [pc, #28]	; (800d020 <SD_CheckStatus+0x38>)
 800d004:	781b      	ldrb	r3, [r3, #0]
 800d006:	b2db      	uxtb	r3, r3
 800d008:	f023 0301 	bic.w	r3, r3, #1
 800d00c:	b2da      	uxtb	r2, r3
 800d00e:	4b04      	ldr	r3, [pc, #16]	; (800d020 <SD_CheckStatus+0x38>)
 800d010:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d012:	4b03      	ldr	r3, [pc, #12]	; (800d020 <SD_CheckStatus+0x38>)
 800d014:	781b      	ldrb	r3, [r3, #0]
 800d016:	b2db      	uxtb	r3, r3
}
 800d018:	4618      	mov	r0, r3
 800d01a:	3708      	adds	r7, #8
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd80      	pop	{r7, pc}
 800d020:	20000159 	.word	0x20000159

0800d024 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b082      	sub	sp, #8
 800d028:	af00      	add	r7, sp, #0
 800d02a:	4603      	mov	r3, r0
 800d02c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d02e:	f7ff fef5 	bl	800ce1c <BSP_SD_Init>
 800d032:	4603      	mov	r3, r0
 800d034:	2b00      	cmp	r3, #0
 800d036:	d107      	bne.n	800d048 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800d038:	79fb      	ldrb	r3, [r7, #7]
 800d03a:	4618      	mov	r0, r3
 800d03c:	f7ff ffd4 	bl	800cfe8 <SD_CheckStatus>
 800d040:	4603      	mov	r3, r0
 800d042:	461a      	mov	r2, r3
 800d044:	4b04      	ldr	r3, [pc, #16]	; (800d058 <SD_initialize+0x34>)
 800d046:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d048:	4b03      	ldr	r3, [pc, #12]	; (800d058 <SD_initialize+0x34>)
 800d04a:	781b      	ldrb	r3, [r3, #0]
 800d04c:	b2db      	uxtb	r3, r3
}
 800d04e:	4618      	mov	r0, r3
 800d050:	3708      	adds	r7, #8
 800d052:	46bd      	mov	sp, r7
 800d054:	bd80      	pop	{r7, pc}
 800d056:	bf00      	nop
 800d058:	20000159 	.word	0x20000159

0800d05c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b082      	sub	sp, #8
 800d060:	af00      	add	r7, sp, #0
 800d062:	4603      	mov	r3, r0
 800d064:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d066:	79fb      	ldrb	r3, [r7, #7]
 800d068:	4618      	mov	r0, r3
 800d06a:	f7ff ffbd 	bl	800cfe8 <SD_CheckStatus>
 800d06e:	4603      	mov	r3, r0
}
 800d070:	4618      	mov	r0, r3
 800d072:	3708      	adds	r7, #8
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}

0800d078 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b086      	sub	sp, #24
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	60b9      	str	r1, [r7, #8]
 800d080:	607a      	str	r2, [r7, #4]
 800d082:	603b      	str	r3, [r7, #0]
 800d084:	4603      	mov	r3, r0
 800d086:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d088:	2301      	movs	r3, #1
 800d08a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d08c:	f247 5030 	movw	r0, #30000	; 0x7530
 800d090:	f7ff ff8c 	bl	800cfac <SD_CheckStatusWithTimeout>
 800d094:	4603      	mov	r3, r0
 800d096:	2b00      	cmp	r3, #0
 800d098:	da01      	bge.n	800d09e <SD_read+0x26>
  {
    return res;
 800d09a:	7dfb      	ldrb	r3, [r7, #23]
 800d09c:	e03b      	b.n	800d116 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800d09e:	683a      	ldr	r2, [r7, #0]
 800d0a0:	6879      	ldr	r1, [r7, #4]
 800d0a2:	68b8      	ldr	r0, [r7, #8]
 800d0a4:	f7ff fee0 	bl	800ce68 <BSP_SD_ReadBlocks_DMA>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d132      	bne.n	800d114 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800d0ae:	4b1c      	ldr	r3, [pc, #112]	; (800d120 <SD_read+0xa8>)
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800d0b4:	f7fa f886 	bl	80071c4 <HAL_GetTick>
 800d0b8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d0ba:	bf00      	nop
 800d0bc:	4b18      	ldr	r3, [pc, #96]	; (800d120 <SD_read+0xa8>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d108      	bne.n	800d0d6 <SD_read+0x5e>
 800d0c4:	f7fa f87e 	bl	80071c4 <HAL_GetTick>
 800d0c8:	4602      	mov	r2, r0
 800d0ca:	693b      	ldr	r3, [r7, #16]
 800d0cc:	1ad3      	subs	r3, r2, r3
 800d0ce:	f247 522f 	movw	r2, #29999	; 0x752f
 800d0d2:	4293      	cmp	r3, r2
 800d0d4:	d9f2      	bls.n	800d0bc <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800d0d6:	4b12      	ldr	r3, [pc, #72]	; (800d120 <SD_read+0xa8>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d102      	bne.n	800d0e4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800d0de:	2301      	movs	r3, #1
 800d0e0:	75fb      	strb	r3, [r7, #23]
 800d0e2:	e017      	b.n	800d114 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800d0e4:	4b0e      	ldr	r3, [pc, #56]	; (800d120 <SD_read+0xa8>)
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d0ea:	f7fa f86b 	bl	80071c4 <HAL_GetTick>
 800d0ee:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d0f0:	e007      	b.n	800d102 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d0f2:	f7ff feed 	bl	800ced0 <BSP_SD_GetCardState>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d102      	bne.n	800d102 <SD_read+0x8a>
          {
            res = RES_OK;
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800d100:	e008      	b.n	800d114 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d102:	f7fa f85f 	bl	80071c4 <HAL_GetTick>
 800d106:	4602      	mov	r2, r0
 800d108:	693b      	ldr	r3, [r7, #16]
 800d10a:	1ad3      	subs	r3, r2, r3
 800d10c:	f247 522f 	movw	r2, #29999	; 0x752f
 800d110:	4293      	cmp	r3, r2
 800d112:	d9ee      	bls.n	800d0f2 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800d114:	7dfb      	ldrb	r3, [r7, #23]
}
 800d116:	4618      	mov	r0, r3
 800d118:	3718      	adds	r7, #24
 800d11a:	46bd      	mov	sp, r7
 800d11c:	bd80      	pop	{r7, pc}
 800d11e:	bf00      	nop
 800d120:	20000844 	.word	0x20000844

0800d124 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b086      	sub	sp, #24
 800d128:	af00      	add	r7, sp, #0
 800d12a:	60b9      	str	r1, [r7, #8]
 800d12c:	607a      	str	r2, [r7, #4]
 800d12e:	603b      	str	r3, [r7, #0]
 800d130:	4603      	mov	r3, r0
 800d132:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d134:	2301      	movs	r3, #1
 800d136:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800d138:	4b24      	ldr	r3, [pc, #144]	; (800d1cc <SD_write+0xa8>)
 800d13a:	2200      	movs	r2, #0
 800d13c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d13e:	f247 5030 	movw	r0, #30000	; 0x7530
 800d142:	f7ff ff33 	bl	800cfac <SD_CheckStatusWithTimeout>
 800d146:	4603      	mov	r3, r0
 800d148:	2b00      	cmp	r3, #0
 800d14a:	da01      	bge.n	800d150 <SD_write+0x2c>
  {
    return res;
 800d14c:	7dfb      	ldrb	r3, [r7, #23]
 800d14e:	e038      	b.n	800d1c2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d150:	683a      	ldr	r2, [r7, #0]
 800d152:	6879      	ldr	r1, [r7, #4]
 800d154:	68b8      	ldr	r0, [r7, #8]
 800d156:	f7ff fea1 	bl	800ce9c <BSP_SD_WriteBlocks_DMA>
 800d15a:	4603      	mov	r3, r0
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d12f      	bne.n	800d1c0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800d160:	f7fa f830 	bl	80071c4 <HAL_GetTick>
 800d164:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d166:	bf00      	nop
 800d168:	4b18      	ldr	r3, [pc, #96]	; (800d1cc <SD_write+0xa8>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d108      	bne.n	800d182 <SD_write+0x5e>
 800d170:	f7fa f828 	bl	80071c4 <HAL_GetTick>
 800d174:	4602      	mov	r2, r0
 800d176:	693b      	ldr	r3, [r7, #16]
 800d178:	1ad3      	subs	r3, r2, r3
 800d17a:	f247 522f 	movw	r2, #29999	; 0x752f
 800d17e:	4293      	cmp	r3, r2
 800d180:	d9f2      	bls.n	800d168 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800d182:	4b12      	ldr	r3, [pc, #72]	; (800d1cc <SD_write+0xa8>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d102      	bne.n	800d190 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800d18a:	2301      	movs	r3, #1
 800d18c:	75fb      	strb	r3, [r7, #23]
 800d18e:	e017      	b.n	800d1c0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800d190:	4b0e      	ldr	r3, [pc, #56]	; (800d1cc <SD_write+0xa8>)
 800d192:	2200      	movs	r2, #0
 800d194:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d196:	f7fa f815 	bl	80071c4 <HAL_GetTick>
 800d19a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d19c:	e007      	b.n	800d1ae <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d19e:	f7ff fe97 	bl	800ced0 <BSP_SD_GetCardState>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d102      	bne.n	800d1ae <SD_write+0x8a>
          {
            res = RES_OK;
 800d1a8:	2300      	movs	r3, #0
 800d1aa:	75fb      	strb	r3, [r7, #23]
            break;
 800d1ac:	e008      	b.n	800d1c0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d1ae:	f7fa f809 	bl	80071c4 <HAL_GetTick>
 800d1b2:	4602      	mov	r2, r0
 800d1b4:	693b      	ldr	r3, [r7, #16]
 800d1b6:	1ad3      	subs	r3, r2, r3
 800d1b8:	f247 522f 	movw	r2, #29999	; 0x752f
 800d1bc:	4293      	cmp	r3, r2
 800d1be:	d9ee      	bls.n	800d19e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800d1c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	3718      	adds	r7, #24
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}
 800d1ca:	bf00      	nop
 800d1cc:	20000840 	.word	0x20000840

0800d1d0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b08c      	sub	sp, #48	; 0x30
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	603a      	str	r2, [r7, #0]
 800d1da:	71fb      	strb	r3, [r7, #7]
 800d1dc:	460b      	mov	r3, r1
 800d1de:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d1e6:	4b25      	ldr	r3, [pc, #148]	; (800d27c <SD_ioctl+0xac>)
 800d1e8:	781b      	ldrb	r3, [r3, #0]
 800d1ea:	b2db      	uxtb	r3, r3
 800d1ec:	f003 0301 	and.w	r3, r3, #1
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d001      	beq.n	800d1f8 <SD_ioctl+0x28>
 800d1f4:	2303      	movs	r3, #3
 800d1f6:	e03c      	b.n	800d272 <SD_ioctl+0xa2>

  switch (cmd)
 800d1f8:	79bb      	ldrb	r3, [r7, #6]
 800d1fa:	2b03      	cmp	r3, #3
 800d1fc:	d834      	bhi.n	800d268 <SD_ioctl+0x98>
 800d1fe:	a201      	add	r2, pc, #4	; (adr r2, 800d204 <SD_ioctl+0x34>)
 800d200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d204:	0800d215 	.word	0x0800d215
 800d208:	0800d21d 	.word	0x0800d21d
 800d20c:	0800d235 	.word	0x0800d235
 800d210:	0800d24f 	.word	0x0800d24f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d214:	2300      	movs	r3, #0
 800d216:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d21a:	e028      	b.n	800d26e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d21c:	f107 030c 	add.w	r3, r7, #12
 800d220:	4618      	mov	r0, r3
 800d222:	f7ff fe65 	bl	800cef0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d22c:	2300      	movs	r3, #0
 800d22e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d232:	e01c      	b.n	800d26e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d234:	f107 030c 	add.w	r3, r7, #12
 800d238:	4618      	mov	r0, r3
 800d23a:	f7ff fe59 	bl	800cef0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d240:	b29a      	uxth	r2, r3
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d246:	2300      	movs	r3, #0
 800d248:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d24c:	e00f      	b.n	800d26e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d24e:	f107 030c 	add.w	r3, r7, #12
 800d252:	4618      	mov	r0, r3
 800d254:	f7ff fe4c 	bl	800cef0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d25a:	0a5a      	lsrs	r2, r3, #9
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d260:	2300      	movs	r3, #0
 800d262:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d266:	e002      	b.n	800d26e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d268:	2304      	movs	r3, #4
 800d26a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d26e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d272:	4618      	mov	r0, r3
 800d274:	3730      	adds	r7, #48	; 0x30
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}
 800d27a:	bf00      	nop
 800d27c:	20000159 	.word	0x20000159

0800d280 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800d280:	b480      	push	{r7}
 800d282:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800d284:	4b03      	ldr	r3, [pc, #12]	; (800d294 <BSP_SD_WriteCpltCallback+0x14>)
 800d286:	2201      	movs	r2, #1
 800d288:	601a      	str	r2, [r3, #0]
}
 800d28a:	bf00      	nop
 800d28c:	46bd      	mov	sp, r7
 800d28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d292:	4770      	bx	lr
 800d294:	20000840 	.word	0x20000840

0800d298 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d298:	b480      	push	{r7}
 800d29a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800d29c:	4b03      	ldr	r3, [pc, #12]	; (800d2ac <BSP_SD_ReadCpltCallback+0x14>)
 800d29e:	2201      	movs	r2, #1
 800d2a0:	601a      	str	r2, [r3, #0]
}
 800d2a2:	bf00      	nop
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2aa:	4770      	bx	lr
 800d2ac:	20000844 	.word	0x20000844

0800d2b0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b084      	sub	sp, #16
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d2ba:	79fb      	ldrb	r3, [r7, #7]
 800d2bc:	4a08      	ldr	r2, [pc, #32]	; (800d2e0 <disk_status+0x30>)
 800d2be:	009b      	lsls	r3, r3, #2
 800d2c0:	4413      	add	r3, r2
 800d2c2:	685b      	ldr	r3, [r3, #4]
 800d2c4:	685b      	ldr	r3, [r3, #4]
 800d2c6:	79fa      	ldrb	r2, [r7, #7]
 800d2c8:	4905      	ldr	r1, [pc, #20]	; (800d2e0 <disk_status+0x30>)
 800d2ca:	440a      	add	r2, r1
 800d2cc:	7a12      	ldrb	r2, [r2, #8]
 800d2ce:	4610      	mov	r0, r2
 800d2d0:	4798      	blx	r3
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d2d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2d8:	4618      	mov	r0, r3
 800d2da:	3710      	adds	r7, #16
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bd80      	pop	{r7, pc}
 800d2e0:	20000870 	.word	0x20000870

0800d2e4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b084      	sub	sp, #16
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d2f2:	79fb      	ldrb	r3, [r7, #7]
 800d2f4:	4a0d      	ldr	r2, [pc, #52]	; (800d32c <disk_initialize+0x48>)
 800d2f6:	5cd3      	ldrb	r3, [r2, r3]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d111      	bne.n	800d320 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d2fc:	79fb      	ldrb	r3, [r7, #7]
 800d2fe:	4a0b      	ldr	r2, [pc, #44]	; (800d32c <disk_initialize+0x48>)
 800d300:	2101      	movs	r1, #1
 800d302:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d304:	79fb      	ldrb	r3, [r7, #7]
 800d306:	4a09      	ldr	r2, [pc, #36]	; (800d32c <disk_initialize+0x48>)
 800d308:	009b      	lsls	r3, r3, #2
 800d30a:	4413      	add	r3, r2
 800d30c:	685b      	ldr	r3, [r3, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	79fa      	ldrb	r2, [r7, #7]
 800d312:	4906      	ldr	r1, [pc, #24]	; (800d32c <disk_initialize+0x48>)
 800d314:	440a      	add	r2, r1
 800d316:	7a12      	ldrb	r2, [r2, #8]
 800d318:	4610      	mov	r0, r2
 800d31a:	4798      	blx	r3
 800d31c:	4603      	mov	r3, r0
 800d31e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d320:	7bfb      	ldrb	r3, [r7, #15]
}
 800d322:	4618      	mov	r0, r3
 800d324:	3710      	adds	r7, #16
 800d326:	46bd      	mov	sp, r7
 800d328:	bd80      	pop	{r7, pc}
 800d32a:	bf00      	nop
 800d32c:	20000870 	.word	0x20000870

0800d330 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d330:	b590      	push	{r4, r7, lr}
 800d332:	b087      	sub	sp, #28
 800d334:	af00      	add	r7, sp, #0
 800d336:	60b9      	str	r1, [r7, #8]
 800d338:	607a      	str	r2, [r7, #4]
 800d33a:	603b      	str	r3, [r7, #0]
 800d33c:	4603      	mov	r3, r0
 800d33e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d340:	7bfb      	ldrb	r3, [r7, #15]
 800d342:	4a0a      	ldr	r2, [pc, #40]	; (800d36c <disk_read+0x3c>)
 800d344:	009b      	lsls	r3, r3, #2
 800d346:	4413      	add	r3, r2
 800d348:	685b      	ldr	r3, [r3, #4]
 800d34a:	689c      	ldr	r4, [r3, #8]
 800d34c:	7bfb      	ldrb	r3, [r7, #15]
 800d34e:	4a07      	ldr	r2, [pc, #28]	; (800d36c <disk_read+0x3c>)
 800d350:	4413      	add	r3, r2
 800d352:	7a18      	ldrb	r0, [r3, #8]
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	687a      	ldr	r2, [r7, #4]
 800d358:	68b9      	ldr	r1, [r7, #8]
 800d35a:	47a0      	blx	r4
 800d35c:	4603      	mov	r3, r0
 800d35e:	75fb      	strb	r3, [r7, #23]
  return res;
 800d360:	7dfb      	ldrb	r3, [r7, #23]
}
 800d362:	4618      	mov	r0, r3
 800d364:	371c      	adds	r7, #28
 800d366:	46bd      	mov	sp, r7
 800d368:	bd90      	pop	{r4, r7, pc}
 800d36a:	bf00      	nop
 800d36c:	20000870 	.word	0x20000870

0800d370 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d370:	b590      	push	{r4, r7, lr}
 800d372:	b087      	sub	sp, #28
 800d374:	af00      	add	r7, sp, #0
 800d376:	60b9      	str	r1, [r7, #8]
 800d378:	607a      	str	r2, [r7, #4]
 800d37a:	603b      	str	r3, [r7, #0]
 800d37c:	4603      	mov	r3, r0
 800d37e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d380:	7bfb      	ldrb	r3, [r7, #15]
 800d382:	4a0a      	ldr	r2, [pc, #40]	; (800d3ac <disk_write+0x3c>)
 800d384:	009b      	lsls	r3, r3, #2
 800d386:	4413      	add	r3, r2
 800d388:	685b      	ldr	r3, [r3, #4]
 800d38a:	68dc      	ldr	r4, [r3, #12]
 800d38c:	7bfb      	ldrb	r3, [r7, #15]
 800d38e:	4a07      	ldr	r2, [pc, #28]	; (800d3ac <disk_write+0x3c>)
 800d390:	4413      	add	r3, r2
 800d392:	7a18      	ldrb	r0, [r3, #8]
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	687a      	ldr	r2, [r7, #4]
 800d398:	68b9      	ldr	r1, [r7, #8]
 800d39a:	47a0      	blx	r4
 800d39c:	4603      	mov	r3, r0
 800d39e:	75fb      	strb	r3, [r7, #23]
  return res;
 800d3a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	371c      	adds	r7, #28
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	bd90      	pop	{r4, r7, pc}
 800d3aa:	bf00      	nop
 800d3ac:	20000870 	.word	0x20000870

0800d3b0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d3b0:	b580      	push	{r7, lr}
 800d3b2:	b084      	sub	sp, #16
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	603a      	str	r2, [r7, #0]
 800d3ba:	71fb      	strb	r3, [r7, #7]
 800d3bc:	460b      	mov	r3, r1
 800d3be:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d3c0:	79fb      	ldrb	r3, [r7, #7]
 800d3c2:	4a09      	ldr	r2, [pc, #36]	; (800d3e8 <disk_ioctl+0x38>)
 800d3c4:	009b      	lsls	r3, r3, #2
 800d3c6:	4413      	add	r3, r2
 800d3c8:	685b      	ldr	r3, [r3, #4]
 800d3ca:	691b      	ldr	r3, [r3, #16]
 800d3cc:	79fa      	ldrb	r2, [r7, #7]
 800d3ce:	4906      	ldr	r1, [pc, #24]	; (800d3e8 <disk_ioctl+0x38>)
 800d3d0:	440a      	add	r2, r1
 800d3d2:	7a10      	ldrb	r0, [r2, #8]
 800d3d4:	79b9      	ldrb	r1, [r7, #6]
 800d3d6:	683a      	ldr	r2, [r7, #0]
 800d3d8:	4798      	blx	r3
 800d3da:	4603      	mov	r3, r0
 800d3dc:	73fb      	strb	r3, [r7, #15]
  return res;
 800d3de:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	3710      	adds	r7, #16
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd80      	pop	{r7, pc}
 800d3e8:	20000870 	.word	0x20000870

0800d3ec <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d3ec:	b480      	push	{r7}
 800d3ee:	b085      	sub	sp, #20
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	3301      	adds	r3, #1
 800d3f8:	781b      	ldrb	r3, [r3, #0]
 800d3fa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d3fc:	89fb      	ldrh	r3, [r7, #14]
 800d3fe:	021b      	lsls	r3, r3, #8
 800d400:	b21a      	sxth	r2, r3
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	781b      	ldrb	r3, [r3, #0]
 800d406:	b21b      	sxth	r3, r3
 800d408:	4313      	orrs	r3, r2
 800d40a:	b21b      	sxth	r3, r3
 800d40c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d40e:	89fb      	ldrh	r3, [r7, #14]
}
 800d410:	4618      	mov	r0, r3
 800d412:	3714      	adds	r7, #20
 800d414:	46bd      	mov	sp, r7
 800d416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41a:	4770      	bx	lr

0800d41c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d41c:	b480      	push	{r7}
 800d41e:	b085      	sub	sp, #20
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	3303      	adds	r3, #3
 800d428:	781b      	ldrb	r3, [r3, #0]
 800d42a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	021b      	lsls	r3, r3, #8
 800d430:	687a      	ldr	r2, [r7, #4]
 800d432:	3202      	adds	r2, #2
 800d434:	7812      	ldrb	r2, [r2, #0]
 800d436:	4313      	orrs	r3, r2
 800d438:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	021b      	lsls	r3, r3, #8
 800d43e:	687a      	ldr	r2, [r7, #4]
 800d440:	3201      	adds	r2, #1
 800d442:	7812      	ldrb	r2, [r2, #0]
 800d444:	4313      	orrs	r3, r2
 800d446:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	021b      	lsls	r3, r3, #8
 800d44c:	687a      	ldr	r2, [r7, #4]
 800d44e:	7812      	ldrb	r2, [r2, #0]
 800d450:	4313      	orrs	r3, r2
 800d452:	60fb      	str	r3, [r7, #12]
	return rv;
 800d454:	68fb      	ldr	r3, [r7, #12]
}
 800d456:	4618      	mov	r0, r3
 800d458:	3714      	adds	r7, #20
 800d45a:	46bd      	mov	sp, r7
 800d45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d460:	4770      	bx	lr

0800d462 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d462:	b480      	push	{r7}
 800d464:	b083      	sub	sp, #12
 800d466:	af00      	add	r7, sp, #0
 800d468:	6078      	str	r0, [r7, #4]
 800d46a:	460b      	mov	r3, r1
 800d46c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	1c5a      	adds	r2, r3, #1
 800d472:	607a      	str	r2, [r7, #4]
 800d474:	887a      	ldrh	r2, [r7, #2]
 800d476:	b2d2      	uxtb	r2, r2
 800d478:	701a      	strb	r2, [r3, #0]
 800d47a:	887b      	ldrh	r3, [r7, #2]
 800d47c:	0a1b      	lsrs	r3, r3, #8
 800d47e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	1c5a      	adds	r2, r3, #1
 800d484:	607a      	str	r2, [r7, #4]
 800d486:	887a      	ldrh	r2, [r7, #2]
 800d488:	b2d2      	uxtb	r2, r2
 800d48a:	701a      	strb	r2, [r3, #0]
}
 800d48c:	bf00      	nop
 800d48e:	370c      	adds	r7, #12
 800d490:	46bd      	mov	sp, r7
 800d492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d496:	4770      	bx	lr

0800d498 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d498:	b480      	push	{r7}
 800d49a:	b083      	sub	sp, #12
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
 800d4a0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	1c5a      	adds	r2, r3, #1
 800d4a6:	607a      	str	r2, [r7, #4]
 800d4a8:	683a      	ldr	r2, [r7, #0]
 800d4aa:	b2d2      	uxtb	r2, r2
 800d4ac:	701a      	strb	r2, [r3, #0]
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	0a1b      	lsrs	r3, r3, #8
 800d4b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	1c5a      	adds	r2, r3, #1
 800d4b8:	607a      	str	r2, [r7, #4]
 800d4ba:	683a      	ldr	r2, [r7, #0]
 800d4bc:	b2d2      	uxtb	r2, r2
 800d4be:	701a      	strb	r2, [r3, #0]
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	0a1b      	lsrs	r3, r3, #8
 800d4c4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	1c5a      	adds	r2, r3, #1
 800d4ca:	607a      	str	r2, [r7, #4]
 800d4cc:	683a      	ldr	r2, [r7, #0]
 800d4ce:	b2d2      	uxtb	r2, r2
 800d4d0:	701a      	strb	r2, [r3, #0]
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	0a1b      	lsrs	r3, r3, #8
 800d4d6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	1c5a      	adds	r2, r3, #1
 800d4dc:	607a      	str	r2, [r7, #4]
 800d4de:	683a      	ldr	r2, [r7, #0]
 800d4e0:	b2d2      	uxtb	r2, r2
 800d4e2:	701a      	strb	r2, [r3, #0]
}
 800d4e4:	bf00      	nop
 800d4e6:	370c      	adds	r7, #12
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ee:	4770      	bx	lr

0800d4f0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d4f0:	b480      	push	{r7}
 800d4f2:	b087      	sub	sp, #28
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	60f8      	str	r0, [r7, #12]
 800d4f8:	60b9      	str	r1, [r7, #8]
 800d4fa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d00d      	beq.n	800d526 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d50a:	693a      	ldr	r2, [r7, #16]
 800d50c:	1c53      	adds	r3, r2, #1
 800d50e:	613b      	str	r3, [r7, #16]
 800d510:	697b      	ldr	r3, [r7, #20]
 800d512:	1c59      	adds	r1, r3, #1
 800d514:	6179      	str	r1, [r7, #20]
 800d516:	7812      	ldrb	r2, [r2, #0]
 800d518:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	3b01      	subs	r3, #1
 800d51e:	607b      	str	r3, [r7, #4]
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d1f1      	bne.n	800d50a <mem_cpy+0x1a>
	}
}
 800d526:	bf00      	nop
 800d528:	371c      	adds	r7, #28
 800d52a:	46bd      	mov	sp, r7
 800d52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d530:	4770      	bx	lr

0800d532 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d532:	b480      	push	{r7}
 800d534:	b087      	sub	sp, #28
 800d536:	af00      	add	r7, sp, #0
 800d538:	60f8      	str	r0, [r7, #12]
 800d53a:	60b9      	str	r1, [r7, #8]
 800d53c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	1c5a      	adds	r2, r3, #1
 800d546:	617a      	str	r2, [r7, #20]
 800d548:	68ba      	ldr	r2, [r7, #8]
 800d54a:	b2d2      	uxtb	r2, r2
 800d54c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	3b01      	subs	r3, #1
 800d552:	607b      	str	r3, [r7, #4]
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d1f3      	bne.n	800d542 <mem_set+0x10>
}
 800d55a:	bf00      	nop
 800d55c:	371c      	adds	r7, #28
 800d55e:	46bd      	mov	sp, r7
 800d560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d564:	4770      	bx	lr

0800d566 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d566:	b480      	push	{r7}
 800d568:	b089      	sub	sp, #36	; 0x24
 800d56a:	af00      	add	r7, sp, #0
 800d56c:	60f8      	str	r0, [r7, #12]
 800d56e:	60b9      	str	r1, [r7, #8]
 800d570:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	61fb      	str	r3, [r7, #28]
 800d576:	68bb      	ldr	r3, [r7, #8]
 800d578:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d57a:	2300      	movs	r3, #0
 800d57c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d57e:	69fb      	ldr	r3, [r7, #28]
 800d580:	1c5a      	adds	r2, r3, #1
 800d582:	61fa      	str	r2, [r7, #28]
 800d584:	781b      	ldrb	r3, [r3, #0]
 800d586:	4619      	mov	r1, r3
 800d588:	69bb      	ldr	r3, [r7, #24]
 800d58a:	1c5a      	adds	r2, r3, #1
 800d58c:	61ba      	str	r2, [r7, #24]
 800d58e:	781b      	ldrb	r3, [r3, #0]
 800d590:	1acb      	subs	r3, r1, r3
 800d592:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	3b01      	subs	r3, #1
 800d598:	607b      	str	r3, [r7, #4]
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d002      	beq.n	800d5a6 <mem_cmp+0x40>
 800d5a0:	697b      	ldr	r3, [r7, #20]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d0eb      	beq.n	800d57e <mem_cmp+0x18>

	return r;
 800d5a6:	697b      	ldr	r3, [r7, #20]
}
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	3724      	adds	r7, #36	; 0x24
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b2:	4770      	bx	lr

0800d5b4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d5b4:	b480      	push	{r7}
 800d5b6:	b083      	sub	sp, #12
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
 800d5bc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d5be:	e002      	b.n	800d5c6 <chk_chr+0x12>
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	3301      	adds	r3, #1
 800d5c4:	607b      	str	r3, [r7, #4]
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	781b      	ldrb	r3, [r3, #0]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d005      	beq.n	800d5da <chk_chr+0x26>
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	781b      	ldrb	r3, [r3, #0]
 800d5d2:	461a      	mov	r2, r3
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	4293      	cmp	r3, r2
 800d5d8:	d1f2      	bne.n	800d5c0 <chk_chr+0xc>
	return *str;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	781b      	ldrb	r3, [r3, #0]
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	370c      	adds	r7, #12
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e8:	4770      	bx	lr
	...

0800d5ec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d5ec:	b480      	push	{r7}
 800d5ee:	b085      	sub	sp, #20
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
 800d5f4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	60bb      	str	r3, [r7, #8]
 800d5fa:	68bb      	ldr	r3, [r7, #8]
 800d5fc:	60fb      	str	r3, [r7, #12]
 800d5fe:	e029      	b.n	800d654 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d600:	4a27      	ldr	r2, [pc, #156]	; (800d6a0 <chk_lock+0xb4>)
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	011b      	lsls	r3, r3, #4
 800d606:	4413      	add	r3, r2
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d01d      	beq.n	800d64a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d60e:	4a24      	ldr	r2, [pc, #144]	; (800d6a0 <chk_lock+0xb4>)
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	011b      	lsls	r3, r3, #4
 800d614:	4413      	add	r3, r2
 800d616:	681a      	ldr	r2, [r3, #0]
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	429a      	cmp	r2, r3
 800d61e:	d116      	bne.n	800d64e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d620:	4a1f      	ldr	r2, [pc, #124]	; (800d6a0 <chk_lock+0xb4>)
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	011b      	lsls	r3, r3, #4
 800d626:	4413      	add	r3, r2
 800d628:	3304      	adds	r3, #4
 800d62a:	681a      	ldr	r2, [r3, #0]
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d630:	429a      	cmp	r2, r3
 800d632:	d10c      	bne.n	800d64e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d634:	4a1a      	ldr	r2, [pc, #104]	; (800d6a0 <chk_lock+0xb4>)
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	011b      	lsls	r3, r3, #4
 800d63a:	4413      	add	r3, r2
 800d63c:	3308      	adds	r3, #8
 800d63e:	681a      	ldr	r2, [r3, #0]
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d644:	429a      	cmp	r2, r3
 800d646:	d102      	bne.n	800d64e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d648:	e007      	b.n	800d65a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d64a:	2301      	movs	r3, #1
 800d64c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	3301      	adds	r3, #1
 800d652:	60fb      	str	r3, [r7, #12]
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	2b01      	cmp	r3, #1
 800d658:	d9d2      	bls.n	800d600 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	2b02      	cmp	r3, #2
 800d65e:	d109      	bne.n	800d674 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d102      	bne.n	800d66c <chk_lock+0x80>
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	2b02      	cmp	r3, #2
 800d66a:	d101      	bne.n	800d670 <chk_lock+0x84>
 800d66c:	2300      	movs	r3, #0
 800d66e:	e010      	b.n	800d692 <chk_lock+0xa6>
 800d670:	2312      	movs	r3, #18
 800d672:	e00e      	b.n	800d692 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d108      	bne.n	800d68c <chk_lock+0xa0>
 800d67a:	4a09      	ldr	r2, [pc, #36]	; (800d6a0 <chk_lock+0xb4>)
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	011b      	lsls	r3, r3, #4
 800d680:	4413      	add	r3, r2
 800d682:	330c      	adds	r3, #12
 800d684:	881b      	ldrh	r3, [r3, #0]
 800d686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d68a:	d101      	bne.n	800d690 <chk_lock+0xa4>
 800d68c:	2310      	movs	r3, #16
 800d68e:	e000      	b.n	800d692 <chk_lock+0xa6>
 800d690:	2300      	movs	r3, #0
}
 800d692:	4618      	mov	r0, r3
 800d694:	3714      	adds	r7, #20
 800d696:	46bd      	mov	sp, r7
 800d698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69c:	4770      	bx	lr
 800d69e:	bf00      	nop
 800d6a0:	20000850 	.word	0x20000850

0800d6a4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d6a4:	b480      	push	{r7}
 800d6a6:	b083      	sub	sp, #12
 800d6a8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	607b      	str	r3, [r7, #4]
 800d6ae:	e002      	b.n	800d6b6 <enq_lock+0x12>
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	3301      	adds	r3, #1
 800d6b4:	607b      	str	r3, [r7, #4]
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	2b01      	cmp	r3, #1
 800d6ba:	d806      	bhi.n	800d6ca <enq_lock+0x26>
 800d6bc:	4a09      	ldr	r2, [pc, #36]	; (800d6e4 <enq_lock+0x40>)
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	011b      	lsls	r3, r3, #4
 800d6c2:	4413      	add	r3, r2
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d1f2      	bne.n	800d6b0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2b02      	cmp	r3, #2
 800d6ce:	bf14      	ite	ne
 800d6d0:	2301      	movne	r3, #1
 800d6d2:	2300      	moveq	r3, #0
 800d6d4:	b2db      	uxtb	r3, r3
}
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	370c      	adds	r7, #12
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e0:	4770      	bx	lr
 800d6e2:	bf00      	nop
 800d6e4:	20000850 	.word	0x20000850

0800d6e8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d6e8:	b480      	push	{r7}
 800d6ea:	b085      	sub	sp, #20
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
 800d6f0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	60fb      	str	r3, [r7, #12]
 800d6f6:	e01f      	b.n	800d738 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d6f8:	4a41      	ldr	r2, [pc, #260]	; (800d800 <inc_lock+0x118>)
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	011b      	lsls	r3, r3, #4
 800d6fe:	4413      	add	r3, r2
 800d700:	681a      	ldr	r2, [r3, #0]
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	429a      	cmp	r2, r3
 800d708:	d113      	bne.n	800d732 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d70a:	4a3d      	ldr	r2, [pc, #244]	; (800d800 <inc_lock+0x118>)
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	011b      	lsls	r3, r3, #4
 800d710:	4413      	add	r3, r2
 800d712:	3304      	adds	r3, #4
 800d714:	681a      	ldr	r2, [r3, #0]
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d71a:	429a      	cmp	r2, r3
 800d71c:	d109      	bne.n	800d732 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d71e:	4a38      	ldr	r2, [pc, #224]	; (800d800 <inc_lock+0x118>)
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	011b      	lsls	r3, r3, #4
 800d724:	4413      	add	r3, r2
 800d726:	3308      	adds	r3, #8
 800d728:	681a      	ldr	r2, [r3, #0]
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d72e:	429a      	cmp	r2, r3
 800d730:	d006      	beq.n	800d740 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	3301      	adds	r3, #1
 800d736:	60fb      	str	r3, [r7, #12]
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	2b01      	cmp	r3, #1
 800d73c:	d9dc      	bls.n	800d6f8 <inc_lock+0x10>
 800d73e:	e000      	b.n	800d742 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d740:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	2b02      	cmp	r3, #2
 800d746:	d132      	bne.n	800d7ae <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d748:	2300      	movs	r3, #0
 800d74a:	60fb      	str	r3, [r7, #12]
 800d74c:	e002      	b.n	800d754 <inc_lock+0x6c>
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	3301      	adds	r3, #1
 800d752:	60fb      	str	r3, [r7, #12]
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	2b01      	cmp	r3, #1
 800d758:	d806      	bhi.n	800d768 <inc_lock+0x80>
 800d75a:	4a29      	ldr	r2, [pc, #164]	; (800d800 <inc_lock+0x118>)
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	011b      	lsls	r3, r3, #4
 800d760:	4413      	add	r3, r2
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d1f2      	bne.n	800d74e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	2b02      	cmp	r3, #2
 800d76c:	d101      	bne.n	800d772 <inc_lock+0x8a>
 800d76e:	2300      	movs	r3, #0
 800d770:	e040      	b.n	800d7f4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681a      	ldr	r2, [r3, #0]
 800d776:	4922      	ldr	r1, [pc, #136]	; (800d800 <inc_lock+0x118>)
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	011b      	lsls	r3, r3, #4
 800d77c:	440b      	add	r3, r1
 800d77e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	689a      	ldr	r2, [r3, #8]
 800d784:	491e      	ldr	r1, [pc, #120]	; (800d800 <inc_lock+0x118>)
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	011b      	lsls	r3, r3, #4
 800d78a:	440b      	add	r3, r1
 800d78c:	3304      	adds	r3, #4
 800d78e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	695a      	ldr	r2, [r3, #20]
 800d794:	491a      	ldr	r1, [pc, #104]	; (800d800 <inc_lock+0x118>)
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	011b      	lsls	r3, r3, #4
 800d79a:	440b      	add	r3, r1
 800d79c:	3308      	adds	r3, #8
 800d79e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d7a0:	4a17      	ldr	r2, [pc, #92]	; (800d800 <inc_lock+0x118>)
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	011b      	lsls	r3, r3, #4
 800d7a6:	4413      	add	r3, r2
 800d7a8:	330c      	adds	r3, #12
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d009      	beq.n	800d7c8 <inc_lock+0xe0>
 800d7b4:	4a12      	ldr	r2, [pc, #72]	; (800d800 <inc_lock+0x118>)
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	011b      	lsls	r3, r3, #4
 800d7ba:	4413      	add	r3, r2
 800d7bc:	330c      	adds	r3, #12
 800d7be:	881b      	ldrh	r3, [r3, #0]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d001      	beq.n	800d7c8 <inc_lock+0xe0>
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	e015      	b.n	800d7f4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d108      	bne.n	800d7e0 <inc_lock+0xf8>
 800d7ce:	4a0c      	ldr	r2, [pc, #48]	; (800d800 <inc_lock+0x118>)
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	011b      	lsls	r3, r3, #4
 800d7d4:	4413      	add	r3, r2
 800d7d6:	330c      	adds	r3, #12
 800d7d8:	881b      	ldrh	r3, [r3, #0]
 800d7da:	3301      	adds	r3, #1
 800d7dc:	b29a      	uxth	r2, r3
 800d7de:	e001      	b.n	800d7e4 <inc_lock+0xfc>
 800d7e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d7e4:	4906      	ldr	r1, [pc, #24]	; (800d800 <inc_lock+0x118>)
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	011b      	lsls	r3, r3, #4
 800d7ea:	440b      	add	r3, r1
 800d7ec:	330c      	adds	r3, #12
 800d7ee:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	3301      	adds	r3, #1
}
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	3714      	adds	r7, #20
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fe:	4770      	bx	lr
 800d800:	20000850 	.word	0x20000850

0800d804 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d804:	b480      	push	{r7}
 800d806:	b085      	sub	sp, #20
 800d808:	af00      	add	r7, sp, #0
 800d80a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	3b01      	subs	r3, #1
 800d810:	607b      	str	r3, [r7, #4]
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	2b01      	cmp	r3, #1
 800d816:	d825      	bhi.n	800d864 <dec_lock+0x60>
		n = Files[i].ctr;
 800d818:	4a17      	ldr	r2, [pc, #92]	; (800d878 <dec_lock+0x74>)
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	011b      	lsls	r3, r3, #4
 800d81e:	4413      	add	r3, r2
 800d820:	330c      	adds	r3, #12
 800d822:	881b      	ldrh	r3, [r3, #0]
 800d824:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d826:	89fb      	ldrh	r3, [r7, #14]
 800d828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d82c:	d101      	bne.n	800d832 <dec_lock+0x2e>
 800d82e:	2300      	movs	r3, #0
 800d830:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d832:	89fb      	ldrh	r3, [r7, #14]
 800d834:	2b00      	cmp	r3, #0
 800d836:	d002      	beq.n	800d83e <dec_lock+0x3a>
 800d838:	89fb      	ldrh	r3, [r7, #14]
 800d83a:	3b01      	subs	r3, #1
 800d83c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d83e:	4a0e      	ldr	r2, [pc, #56]	; (800d878 <dec_lock+0x74>)
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	011b      	lsls	r3, r3, #4
 800d844:	4413      	add	r3, r2
 800d846:	330c      	adds	r3, #12
 800d848:	89fa      	ldrh	r2, [r7, #14]
 800d84a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d84c:	89fb      	ldrh	r3, [r7, #14]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d105      	bne.n	800d85e <dec_lock+0x5a>
 800d852:	4a09      	ldr	r2, [pc, #36]	; (800d878 <dec_lock+0x74>)
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	011b      	lsls	r3, r3, #4
 800d858:	4413      	add	r3, r2
 800d85a:	2200      	movs	r2, #0
 800d85c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d85e:	2300      	movs	r3, #0
 800d860:	737b      	strb	r3, [r7, #13]
 800d862:	e001      	b.n	800d868 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d864:	2302      	movs	r3, #2
 800d866:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d868:	7b7b      	ldrb	r3, [r7, #13]
}
 800d86a:	4618      	mov	r0, r3
 800d86c:	3714      	adds	r7, #20
 800d86e:	46bd      	mov	sp, r7
 800d870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d874:	4770      	bx	lr
 800d876:	bf00      	nop
 800d878:	20000850 	.word	0x20000850

0800d87c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d87c:	b480      	push	{r7}
 800d87e:	b085      	sub	sp, #20
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d884:	2300      	movs	r3, #0
 800d886:	60fb      	str	r3, [r7, #12]
 800d888:	e010      	b.n	800d8ac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d88a:	4a0d      	ldr	r2, [pc, #52]	; (800d8c0 <clear_lock+0x44>)
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	011b      	lsls	r3, r3, #4
 800d890:	4413      	add	r3, r2
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	687a      	ldr	r2, [r7, #4]
 800d896:	429a      	cmp	r2, r3
 800d898:	d105      	bne.n	800d8a6 <clear_lock+0x2a>
 800d89a:	4a09      	ldr	r2, [pc, #36]	; (800d8c0 <clear_lock+0x44>)
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	011b      	lsls	r3, r3, #4
 800d8a0:	4413      	add	r3, r2
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	3301      	adds	r3, #1
 800d8aa:	60fb      	str	r3, [r7, #12]
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	2b01      	cmp	r3, #1
 800d8b0:	d9eb      	bls.n	800d88a <clear_lock+0xe>
	}
}
 800d8b2:	bf00      	nop
 800d8b4:	3714      	adds	r7, #20
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8bc:	4770      	bx	lr
 800d8be:	bf00      	nop
 800d8c0:	20000850 	.word	0x20000850

0800d8c4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b086      	sub	sp, #24
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	78db      	ldrb	r3, [r3, #3]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d034      	beq.n	800d942 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8dc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	7858      	ldrb	r0, [r3, #1]
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d8e8:	2301      	movs	r3, #1
 800d8ea:	697a      	ldr	r2, [r7, #20]
 800d8ec:	f7ff fd40 	bl	800d370 <disk_write>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d002      	beq.n	800d8fc <sync_window+0x38>
			res = FR_DISK_ERR;
 800d8f6:	2301      	movs	r3, #1
 800d8f8:	73fb      	strb	r3, [r7, #15]
 800d8fa:	e022      	b.n	800d942 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	2200      	movs	r2, #0
 800d900:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d906:	697a      	ldr	r2, [r7, #20]
 800d908:	1ad2      	subs	r2, r2, r3
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	69db      	ldr	r3, [r3, #28]
 800d90e:	429a      	cmp	r2, r3
 800d910:	d217      	bcs.n	800d942 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	789b      	ldrb	r3, [r3, #2]
 800d916:	613b      	str	r3, [r7, #16]
 800d918:	e010      	b.n	800d93c <sync_window+0x78>
					wsect += fs->fsize;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	69db      	ldr	r3, [r3, #28]
 800d91e:	697a      	ldr	r2, [r7, #20]
 800d920:	4413      	add	r3, r2
 800d922:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	7858      	ldrb	r0, [r3, #1]
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d92e:	2301      	movs	r3, #1
 800d930:	697a      	ldr	r2, [r7, #20]
 800d932:	f7ff fd1d 	bl	800d370 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	3b01      	subs	r3, #1
 800d93a:	613b      	str	r3, [r7, #16]
 800d93c:	693b      	ldr	r3, [r7, #16]
 800d93e:	2b01      	cmp	r3, #1
 800d940:	d8eb      	bhi.n	800d91a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d942:	7bfb      	ldrb	r3, [r7, #15]
}
 800d944:	4618      	mov	r0, r3
 800d946:	3718      	adds	r7, #24
 800d948:	46bd      	mov	sp, r7
 800d94a:	bd80      	pop	{r7, pc}

0800d94c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b084      	sub	sp, #16
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
 800d954:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d956:	2300      	movs	r3, #0
 800d958:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d95e:	683a      	ldr	r2, [r7, #0]
 800d960:	429a      	cmp	r2, r3
 800d962:	d01b      	beq.n	800d99c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d964:	6878      	ldr	r0, [r7, #4]
 800d966:	f7ff ffad 	bl	800d8c4 <sync_window>
 800d96a:	4603      	mov	r3, r0
 800d96c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d96e:	7bfb      	ldrb	r3, [r7, #15]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d113      	bne.n	800d99c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	7858      	ldrb	r0, [r3, #1]
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d97e:	2301      	movs	r3, #1
 800d980:	683a      	ldr	r2, [r7, #0]
 800d982:	f7ff fcd5 	bl	800d330 <disk_read>
 800d986:	4603      	mov	r3, r0
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d004      	beq.n	800d996 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d98c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d990:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d992:	2301      	movs	r3, #1
 800d994:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	683a      	ldr	r2, [r7, #0]
 800d99a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800d99c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d99e:	4618      	mov	r0, r3
 800d9a0:	3710      	adds	r7, #16
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bd80      	pop	{r7, pc}
	...

0800d9a8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b084      	sub	sp, #16
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f7ff ff87 	bl	800d8c4 <sync_window>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d9ba:	7bfb      	ldrb	r3, [r7, #15]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d159      	bne.n	800da74 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	781b      	ldrb	r3, [r3, #0]
 800d9c4:	2b03      	cmp	r3, #3
 800d9c6:	d149      	bne.n	800da5c <sync_fs+0xb4>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	791b      	ldrb	r3, [r3, #4]
 800d9cc:	2b01      	cmp	r3, #1
 800d9ce:	d145      	bne.n	800da5c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	899b      	ldrh	r3, [r3, #12]
 800d9da:	461a      	mov	r2, r3
 800d9dc:	2100      	movs	r1, #0
 800d9de:	f7ff fda8 	bl	800d532 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	3334      	adds	r3, #52	; 0x34
 800d9e6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d9ea:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f7ff fd37 	bl	800d462 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	3334      	adds	r3, #52	; 0x34
 800d9f8:	4921      	ldr	r1, [pc, #132]	; (800da80 <sync_fs+0xd8>)
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	f7ff fd4c 	bl	800d498 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	3334      	adds	r3, #52	; 0x34
 800da04:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800da08:	491e      	ldr	r1, [pc, #120]	; (800da84 <sync_fs+0xdc>)
 800da0a:	4618      	mov	r0, r3
 800da0c:	f7ff fd44 	bl	800d498 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	3334      	adds	r3, #52	; 0x34
 800da14:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	695b      	ldr	r3, [r3, #20]
 800da1c:	4619      	mov	r1, r3
 800da1e:	4610      	mov	r0, r2
 800da20:	f7ff fd3a 	bl	800d498 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	3334      	adds	r3, #52	; 0x34
 800da28:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	691b      	ldr	r3, [r3, #16]
 800da30:	4619      	mov	r1, r3
 800da32:	4610      	mov	r0, r2
 800da34:	f7ff fd30 	bl	800d498 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	6a1b      	ldr	r3, [r3, #32]
 800da3c:	1c5a      	adds	r2, r3, #1
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	7858      	ldrb	r0, [r3, #1]
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800da50:	2301      	movs	r3, #1
 800da52:	f7ff fc8d 	bl	800d370 <disk_write>
			fs->fsi_flag = 0;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	2200      	movs	r2, #0
 800da5a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	785b      	ldrb	r3, [r3, #1]
 800da60:	2200      	movs	r2, #0
 800da62:	2100      	movs	r1, #0
 800da64:	4618      	mov	r0, r3
 800da66:	f7ff fca3 	bl	800d3b0 <disk_ioctl>
 800da6a:	4603      	mov	r3, r0
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d001      	beq.n	800da74 <sync_fs+0xcc>
 800da70:	2301      	movs	r3, #1
 800da72:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800da74:	7bfb      	ldrb	r3, [r7, #15]
}
 800da76:	4618      	mov	r0, r3
 800da78:	3710      	adds	r7, #16
 800da7a:	46bd      	mov	sp, r7
 800da7c:	bd80      	pop	{r7, pc}
 800da7e:	bf00      	nop
 800da80:	41615252 	.word	0x41615252
 800da84:	61417272 	.word	0x61417272

0800da88 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800da88:	b480      	push	{r7}
 800da8a:	b083      	sub	sp, #12
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
 800da90:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	3b02      	subs	r3, #2
 800da96:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	699b      	ldr	r3, [r3, #24]
 800da9c:	3b02      	subs	r3, #2
 800da9e:	683a      	ldr	r2, [r7, #0]
 800daa0:	429a      	cmp	r2, r3
 800daa2:	d301      	bcc.n	800daa8 <clust2sect+0x20>
 800daa4:	2300      	movs	r3, #0
 800daa6:	e008      	b.n	800daba <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	895b      	ldrh	r3, [r3, #10]
 800daac:	461a      	mov	r2, r3
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	fb03 f202 	mul.w	r2, r3, r2
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dab8:	4413      	add	r3, r2
}
 800daba:	4618      	mov	r0, r3
 800dabc:	370c      	adds	r7, #12
 800dabe:	46bd      	mov	sp, r7
 800dac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac4:	4770      	bx	lr

0800dac6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800dac6:	b580      	push	{r7, lr}
 800dac8:	b086      	sub	sp, #24
 800daca:	af00      	add	r7, sp, #0
 800dacc:	6078      	str	r0, [r7, #4]
 800dace:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	2b01      	cmp	r3, #1
 800dada:	d904      	bls.n	800dae6 <get_fat+0x20>
 800dadc:	693b      	ldr	r3, [r7, #16]
 800dade:	699b      	ldr	r3, [r3, #24]
 800dae0:	683a      	ldr	r2, [r7, #0]
 800dae2:	429a      	cmp	r2, r3
 800dae4:	d302      	bcc.n	800daec <get_fat+0x26>
		val = 1;	/* Internal error */
 800dae6:	2301      	movs	r3, #1
 800dae8:	617b      	str	r3, [r7, #20]
 800daea:	e0b7      	b.n	800dc5c <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800daec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800daf0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800daf2:	693b      	ldr	r3, [r7, #16]
 800daf4:	781b      	ldrb	r3, [r3, #0]
 800daf6:	2b02      	cmp	r3, #2
 800daf8:	d05a      	beq.n	800dbb0 <get_fat+0xea>
 800dafa:	2b03      	cmp	r3, #3
 800dafc:	d07d      	beq.n	800dbfa <get_fat+0x134>
 800dafe:	2b01      	cmp	r3, #1
 800db00:	f040 80a2 	bne.w	800dc48 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	60fb      	str	r3, [r7, #12]
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	085b      	lsrs	r3, r3, #1
 800db0c:	68fa      	ldr	r2, [r7, #12]
 800db0e:	4413      	add	r3, r2
 800db10:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800db12:	693b      	ldr	r3, [r7, #16]
 800db14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db16:	693b      	ldr	r3, [r7, #16]
 800db18:	899b      	ldrh	r3, [r3, #12]
 800db1a:	4619      	mov	r1, r3
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	fbb3 f3f1 	udiv	r3, r3, r1
 800db22:	4413      	add	r3, r2
 800db24:	4619      	mov	r1, r3
 800db26:	6938      	ldr	r0, [r7, #16]
 800db28:	f7ff ff10 	bl	800d94c <move_window>
 800db2c:	4603      	mov	r3, r0
 800db2e:	2b00      	cmp	r3, #0
 800db30:	f040 808d 	bne.w	800dc4e <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	1c5a      	adds	r2, r3, #1
 800db38:	60fa      	str	r2, [r7, #12]
 800db3a:	693a      	ldr	r2, [r7, #16]
 800db3c:	8992      	ldrh	r2, [r2, #12]
 800db3e:	fbb3 f1f2 	udiv	r1, r3, r2
 800db42:	fb02 f201 	mul.w	r2, r2, r1
 800db46:	1a9b      	subs	r3, r3, r2
 800db48:	693a      	ldr	r2, [r7, #16]
 800db4a:	4413      	add	r3, r2
 800db4c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800db50:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800db52:	693b      	ldr	r3, [r7, #16]
 800db54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db56:	693b      	ldr	r3, [r7, #16]
 800db58:	899b      	ldrh	r3, [r3, #12]
 800db5a:	4619      	mov	r1, r3
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	fbb3 f3f1 	udiv	r3, r3, r1
 800db62:	4413      	add	r3, r2
 800db64:	4619      	mov	r1, r3
 800db66:	6938      	ldr	r0, [r7, #16]
 800db68:	f7ff fef0 	bl	800d94c <move_window>
 800db6c:	4603      	mov	r3, r0
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d16f      	bne.n	800dc52 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800db72:	693b      	ldr	r3, [r7, #16]
 800db74:	899b      	ldrh	r3, [r3, #12]
 800db76:	461a      	mov	r2, r3
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	fbb3 f1f2 	udiv	r1, r3, r2
 800db7e:	fb02 f201 	mul.w	r2, r2, r1
 800db82:	1a9b      	subs	r3, r3, r2
 800db84:	693a      	ldr	r2, [r7, #16]
 800db86:	4413      	add	r3, r2
 800db88:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800db8c:	021b      	lsls	r3, r3, #8
 800db8e:	461a      	mov	r2, r3
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	4313      	orrs	r3, r2
 800db94:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	f003 0301 	and.w	r3, r3, #1
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d002      	beq.n	800dba6 <get_fat+0xe0>
 800dba0:	68bb      	ldr	r3, [r7, #8]
 800dba2:	091b      	lsrs	r3, r3, #4
 800dba4:	e002      	b.n	800dbac <get_fat+0xe6>
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dbac:	617b      	str	r3, [r7, #20]
			break;
 800dbae:	e055      	b.n	800dc5c <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dbb0:	693b      	ldr	r3, [r7, #16]
 800dbb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dbb4:	693b      	ldr	r3, [r7, #16]
 800dbb6:	899b      	ldrh	r3, [r3, #12]
 800dbb8:	085b      	lsrs	r3, r3, #1
 800dbba:	b29b      	uxth	r3, r3
 800dbbc:	4619      	mov	r1, r3
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	fbb3 f3f1 	udiv	r3, r3, r1
 800dbc4:	4413      	add	r3, r2
 800dbc6:	4619      	mov	r1, r3
 800dbc8:	6938      	ldr	r0, [r7, #16]
 800dbca:	f7ff febf 	bl	800d94c <move_window>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d140      	bne.n	800dc56 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800dbd4:	693b      	ldr	r3, [r7, #16]
 800dbd6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dbda:	683b      	ldr	r3, [r7, #0]
 800dbdc:	005b      	lsls	r3, r3, #1
 800dbde:	693a      	ldr	r2, [r7, #16]
 800dbe0:	8992      	ldrh	r2, [r2, #12]
 800dbe2:	fbb3 f0f2 	udiv	r0, r3, r2
 800dbe6:	fb02 f200 	mul.w	r2, r2, r0
 800dbea:	1a9b      	subs	r3, r3, r2
 800dbec:	440b      	add	r3, r1
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f7ff fbfc 	bl	800d3ec <ld_word>
 800dbf4:	4603      	mov	r3, r0
 800dbf6:	617b      	str	r3, [r7, #20]
			break;
 800dbf8:	e030      	b.n	800dc5c <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dbfa:	693b      	ldr	r3, [r7, #16]
 800dbfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dbfe:	693b      	ldr	r3, [r7, #16]
 800dc00:	899b      	ldrh	r3, [r3, #12]
 800dc02:	089b      	lsrs	r3, r3, #2
 800dc04:	b29b      	uxth	r3, r3
 800dc06:	4619      	mov	r1, r3
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	fbb3 f3f1 	udiv	r3, r3, r1
 800dc0e:	4413      	add	r3, r2
 800dc10:	4619      	mov	r1, r3
 800dc12:	6938      	ldr	r0, [r7, #16]
 800dc14:	f7ff fe9a 	bl	800d94c <move_window>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d11d      	bne.n	800dc5a <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800dc1e:	693b      	ldr	r3, [r7, #16]
 800dc20:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	009b      	lsls	r3, r3, #2
 800dc28:	693a      	ldr	r2, [r7, #16]
 800dc2a:	8992      	ldrh	r2, [r2, #12]
 800dc2c:	fbb3 f0f2 	udiv	r0, r3, r2
 800dc30:	fb02 f200 	mul.w	r2, r2, r0
 800dc34:	1a9b      	subs	r3, r3, r2
 800dc36:	440b      	add	r3, r1
 800dc38:	4618      	mov	r0, r3
 800dc3a:	f7ff fbef 	bl	800d41c <ld_dword>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800dc44:	617b      	str	r3, [r7, #20]
			break;
 800dc46:	e009      	b.n	800dc5c <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800dc48:	2301      	movs	r3, #1
 800dc4a:	617b      	str	r3, [r7, #20]
 800dc4c:	e006      	b.n	800dc5c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dc4e:	bf00      	nop
 800dc50:	e004      	b.n	800dc5c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dc52:	bf00      	nop
 800dc54:	e002      	b.n	800dc5c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dc56:	bf00      	nop
 800dc58:	e000      	b.n	800dc5c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dc5a:	bf00      	nop
		}
	}

	return val;
 800dc5c:	697b      	ldr	r3, [r7, #20]
}
 800dc5e:	4618      	mov	r0, r3
 800dc60:	3718      	adds	r7, #24
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}

0800dc66 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800dc66:	b590      	push	{r4, r7, lr}
 800dc68:	b089      	sub	sp, #36	; 0x24
 800dc6a:	af00      	add	r7, sp, #0
 800dc6c:	60f8      	str	r0, [r7, #12]
 800dc6e:	60b9      	str	r1, [r7, #8]
 800dc70:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800dc72:	2302      	movs	r3, #2
 800dc74:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	2b01      	cmp	r3, #1
 800dc7a:	f240 8106 	bls.w	800de8a <put_fat+0x224>
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	699b      	ldr	r3, [r3, #24]
 800dc82:	68ba      	ldr	r2, [r7, #8]
 800dc84:	429a      	cmp	r2, r3
 800dc86:	f080 8100 	bcs.w	800de8a <put_fat+0x224>
		switch (fs->fs_type) {
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	781b      	ldrb	r3, [r3, #0]
 800dc8e:	2b02      	cmp	r3, #2
 800dc90:	f000 8088 	beq.w	800dda4 <put_fat+0x13e>
 800dc94:	2b03      	cmp	r3, #3
 800dc96:	f000 80b0 	beq.w	800ddfa <put_fat+0x194>
 800dc9a:	2b01      	cmp	r3, #1
 800dc9c:	f040 80f5 	bne.w	800de8a <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	61bb      	str	r3, [r7, #24]
 800dca4:	69bb      	ldr	r3, [r7, #24]
 800dca6:	085b      	lsrs	r3, r3, #1
 800dca8:	69ba      	ldr	r2, [r7, #24]
 800dcaa:	4413      	add	r3, r2
 800dcac:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	899b      	ldrh	r3, [r3, #12]
 800dcb6:	4619      	mov	r1, r3
 800dcb8:	69bb      	ldr	r3, [r7, #24]
 800dcba:	fbb3 f3f1 	udiv	r3, r3, r1
 800dcbe:	4413      	add	r3, r2
 800dcc0:	4619      	mov	r1, r3
 800dcc2:	68f8      	ldr	r0, [r7, #12]
 800dcc4:	f7ff fe42 	bl	800d94c <move_window>
 800dcc8:	4603      	mov	r3, r0
 800dcca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dccc:	7ffb      	ldrb	r3, [r7, #31]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	f040 80d4 	bne.w	800de7c <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dcda:	69bb      	ldr	r3, [r7, #24]
 800dcdc:	1c5a      	adds	r2, r3, #1
 800dcde:	61ba      	str	r2, [r7, #24]
 800dce0:	68fa      	ldr	r2, [r7, #12]
 800dce2:	8992      	ldrh	r2, [r2, #12]
 800dce4:	fbb3 f0f2 	udiv	r0, r3, r2
 800dce8:	fb02 f200 	mul.w	r2, r2, r0
 800dcec:	1a9b      	subs	r3, r3, r2
 800dcee:	440b      	add	r3, r1
 800dcf0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	f003 0301 	and.w	r3, r3, #1
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d00d      	beq.n	800dd18 <put_fat+0xb2>
 800dcfc:	697b      	ldr	r3, [r7, #20]
 800dcfe:	781b      	ldrb	r3, [r3, #0]
 800dd00:	b25b      	sxtb	r3, r3
 800dd02:	f003 030f 	and.w	r3, r3, #15
 800dd06:	b25a      	sxtb	r2, r3
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	b2db      	uxtb	r3, r3
 800dd0c:	011b      	lsls	r3, r3, #4
 800dd0e:	b25b      	sxtb	r3, r3
 800dd10:	4313      	orrs	r3, r2
 800dd12:	b25b      	sxtb	r3, r3
 800dd14:	b2db      	uxtb	r3, r3
 800dd16:	e001      	b.n	800dd1c <put_fat+0xb6>
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	b2db      	uxtb	r3, r3
 800dd1c:	697a      	ldr	r2, [r7, #20]
 800dd1e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	2201      	movs	r2, #1
 800dd24:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	899b      	ldrh	r3, [r3, #12]
 800dd2e:	4619      	mov	r1, r3
 800dd30:	69bb      	ldr	r3, [r7, #24]
 800dd32:	fbb3 f3f1 	udiv	r3, r3, r1
 800dd36:	4413      	add	r3, r2
 800dd38:	4619      	mov	r1, r3
 800dd3a:	68f8      	ldr	r0, [r7, #12]
 800dd3c:	f7ff fe06 	bl	800d94c <move_window>
 800dd40:	4603      	mov	r3, r0
 800dd42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dd44:	7ffb      	ldrb	r3, [r7, #31]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	f040 809a 	bne.w	800de80 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	899b      	ldrh	r3, [r3, #12]
 800dd56:	461a      	mov	r2, r3
 800dd58:	69bb      	ldr	r3, [r7, #24]
 800dd5a:	fbb3 f0f2 	udiv	r0, r3, r2
 800dd5e:	fb02 f200 	mul.w	r2, r2, r0
 800dd62:	1a9b      	subs	r3, r3, r2
 800dd64:	440b      	add	r3, r1
 800dd66:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	f003 0301 	and.w	r3, r3, #1
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d003      	beq.n	800dd7a <put_fat+0x114>
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	091b      	lsrs	r3, r3, #4
 800dd76:	b2db      	uxtb	r3, r3
 800dd78:	e00e      	b.n	800dd98 <put_fat+0x132>
 800dd7a:	697b      	ldr	r3, [r7, #20]
 800dd7c:	781b      	ldrb	r3, [r3, #0]
 800dd7e:	b25b      	sxtb	r3, r3
 800dd80:	f023 030f 	bic.w	r3, r3, #15
 800dd84:	b25a      	sxtb	r2, r3
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	0a1b      	lsrs	r3, r3, #8
 800dd8a:	b25b      	sxtb	r3, r3
 800dd8c:	f003 030f 	and.w	r3, r3, #15
 800dd90:	b25b      	sxtb	r3, r3
 800dd92:	4313      	orrs	r3, r2
 800dd94:	b25b      	sxtb	r3, r3
 800dd96:	b2db      	uxtb	r3, r3
 800dd98:	697a      	ldr	r2, [r7, #20]
 800dd9a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	2201      	movs	r2, #1
 800dda0:	70da      	strb	r2, [r3, #3]
			break;
 800dda2:	e072      	b.n	800de8a <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	899b      	ldrh	r3, [r3, #12]
 800ddac:	085b      	lsrs	r3, r3, #1
 800ddae:	b29b      	uxth	r3, r3
 800ddb0:	4619      	mov	r1, r3
 800ddb2:	68bb      	ldr	r3, [r7, #8]
 800ddb4:	fbb3 f3f1 	udiv	r3, r3, r1
 800ddb8:	4413      	add	r3, r2
 800ddba:	4619      	mov	r1, r3
 800ddbc:	68f8      	ldr	r0, [r7, #12]
 800ddbe:	f7ff fdc5 	bl	800d94c <move_window>
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ddc6:	7ffb      	ldrb	r3, [r7, #31]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d15b      	bne.n	800de84 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	005b      	lsls	r3, r3, #1
 800ddd6:	68fa      	ldr	r2, [r7, #12]
 800ddd8:	8992      	ldrh	r2, [r2, #12]
 800ddda:	fbb3 f0f2 	udiv	r0, r3, r2
 800ddde:	fb02 f200 	mul.w	r2, r2, r0
 800dde2:	1a9b      	subs	r3, r3, r2
 800dde4:	440b      	add	r3, r1
 800dde6:	687a      	ldr	r2, [r7, #4]
 800dde8:	b292      	uxth	r2, r2
 800ddea:	4611      	mov	r1, r2
 800ddec:	4618      	mov	r0, r3
 800ddee:	f7ff fb38 	bl	800d462 <st_word>
			fs->wflag = 1;
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	2201      	movs	r2, #1
 800ddf6:	70da      	strb	r2, [r3, #3]
			break;
 800ddf8:	e047      	b.n	800de8a <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	899b      	ldrh	r3, [r3, #12]
 800de02:	089b      	lsrs	r3, r3, #2
 800de04:	b29b      	uxth	r3, r3
 800de06:	4619      	mov	r1, r3
 800de08:	68bb      	ldr	r3, [r7, #8]
 800de0a:	fbb3 f3f1 	udiv	r3, r3, r1
 800de0e:	4413      	add	r3, r2
 800de10:	4619      	mov	r1, r3
 800de12:	68f8      	ldr	r0, [r7, #12]
 800de14:	f7ff fd9a 	bl	800d94c <move_window>
 800de18:	4603      	mov	r3, r0
 800de1a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800de1c:	7ffb      	ldrb	r3, [r7, #31]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d132      	bne.n	800de88 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	009b      	lsls	r3, r3, #2
 800de32:	68fa      	ldr	r2, [r7, #12]
 800de34:	8992      	ldrh	r2, [r2, #12]
 800de36:	fbb3 f0f2 	udiv	r0, r3, r2
 800de3a:	fb02 f200 	mul.w	r2, r2, r0
 800de3e:	1a9b      	subs	r3, r3, r2
 800de40:	440b      	add	r3, r1
 800de42:	4618      	mov	r0, r3
 800de44:	f7ff faea 	bl	800d41c <ld_dword>
 800de48:	4603      	mov	r3, r0
 800de4a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800de4e:	4323      	orrs	r3, r4
 800de50:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	009b      	lsls	r3, r3, #2
 800de5c:	68fa      	ldr	r2, [r7, #12]
 800de5e:	8992      	ldrh	r2, [r2, #12]
 800de60:	fbb3 f0f2 	udiv	r0, r3, r2
 800de64:	fb02 f200 	mul.w	r2, r2, r0
 800de68:	1a9b      	subs	r3, r3, r2
 800de6a:	440b      	add	r3, r1
 800de6c:	6879      	ldr	r1, [r7, #4]
 800de6e:	4618      	mov	r0, r3
 800de70:	f7ff fb12 	bl	800d498 <st_dword>
			fs->wflag = 1;
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	2201      	movs	r2, #1
 800de78:	70da      	strb	r2, [r3, #3]
			break;
 800de7a:	e006      	b.n	800de8a <put_fat+0x224>
			if (res != FR_OK) break;
 800de7c:	bf00      	nop
 800de7e:	e004      	b.n	800de8a <put_fat+0x224>
			if (res != FR_OK) break;
 800de80:	bf00      	nop
 800de82:	e002      	b.n	800de8a <put_fat+0x224>
			if (res != FR_OK) break;
 800de84:	bf00      	nop
 800de86:	e000      	b.n	800de8a <put_fat+0x224>
			if (res != FR_OK) break;
 800de88:	bf00      	nop
		}
	}
	return res;
 800de8a:	7ffb      	ldrb	r3, [r7, #31]
}
 800de8c:	4618      	mov	r0, r3
 800de8e:	3724      	adds	r7, #36	; 0x24
 800de90:	46bd      	mov	sp, r7
 800de92:	bd90      	pop	{r4, r7, pc}

0800de94 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b088      	sub	sp, #32
 800de98:	af00      	add	r7, sp, #0
 800de9a:	60f8      	str	r0, [r7, #12]
 800de9c:	60b9      	str	r1, [r7, #8]
 800de9e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800dea0:	2300      	movs	r3, #0
 800dea2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	2b01      	cmp	r3, #1
 800deae:	d904      	bls.n	800deba <remove_chain+0x26>
 800deb0:	69bb      	ldr	r3, [r7, #24]
 800deb2:	699b      	ldr	r3, [r3, #24]
 800deb4:	68ba      	ldr	r2, [r7, #8]
 800deb6:	429a      	cmp	r2, r3
 800deb8:	d301      	bcc.n	800debe <remove_chain+0x2a>
 800deba:	2302      	movs	r3, #2
 800debc:	e04b      	b.n	800df56 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d00c      	beq.n	800dede <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800dec4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dec8:	6879      	ldr	r1, [r7, #4]
 800deca:	69b8      	ldr	r0, [r7, #24]
 800decc:	f7ff fecb 	bl	800dc66 <put_fat>
 800ded0:	4603      	mov	r3, r0
 800ded2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ded4:	7ffb      	ldrb	r3, [r7, #31]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d001      	beq.n	800dede <remove_chain+0x4a>
 800deda:	7ffb      	ldrb	r3, [r7, #31]
 800dedc:	e03b      	b.n	800df56 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800dede:	68b9      	ldr	r1, [r7, #8]
 800dee0:	68f8      	ldr	r0, [r7, #12]
 800dee2:	f7ff fdf0 	bl	800dac6 <get_fat>
 800dee6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800dee8:	697b      	ldr	r3, [r7, #20]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d031      	beq.n	800df52 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800deee:	697b      	ldr	r3, [r7, #20]
 800def0:	2b01      	cmp	r3, #1
 800def2:	d101      	bne.n	800def8 <remove_chain+0x64>
 800def4:	2302      	movs	r3, #2
 800def6:	e02e      	b.n	800df56 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800def8:	697b      	ldr	r3, [r7, #20]
 800defa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800defe:	d101      	bne.n	800df04 <remove_chain+0x70>
 800df00:	2301      	movs	r3, #1
 800df02:	e028      	b.n	800df56 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800df04:	2200      	movs	r2, #0
 800df06:	68b9      	ldr	r1, [r7, #8]
 800df08:	69b8      	ldr	r0, [r7, #24]
 800df0a:	f7ff feac 	bl	800dc66 <put_fat>
 800df0e:	4603      	mov	r3, r0
 800df10:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800df12:	7ffb      	ldrb	r3, [r7, #31]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d001      	beq.n	800df1c <remove_chain+0x88>
 800df18:	7ffb      	ldrb	r3, [r7, #31]
 800df1a:	e01c      	b.n	800df56 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800df1c:	69bb      	ldr	r3, [r7, #24]
 800df1e:	695a      	ldr	r2, [r3, #20]
 800df20:	69bb      	ldr	r3, [r7, #24]
 800df22:	699b      	ldr	r3, [r3, #24]
 800df24:	3b02      	subs	r3, #2
 800df26:	429a      	cmp	r2, r3
 800df28:	d20b      	bcs.n	800df42 <remove_chain+0xae>
			fs->free_clst++;
 800df2a:	69bb      	ldr	r3, [r7, #24]
 800df2c:	695b      	ldr	r3, [r3, #20]
 800df2e:	1c5a      	adds	r2, r3, #1
 800df30:	69bb      	ldr	r3, [r7, #24]
 800df32:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800df34:	69bb      	ldr	r3, [r7, #24]
 800df36:	791b      	ldrb	r3, [r3, #4]
 800df38:	f043 0301 	orr.w	r3, r3, #1
 800df3c:	b2da      	uxtb	r2, r3
 800df3e:	69bb      	ldr	r3, [r7, #24]
 800df40:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800df42:	697b      	ldr	r3, [r7, #20]
 800df44:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800df46:	69bb      	ldr	r3, [r7, #24]
 800df48:	699b      	ldr	r3, [r3, #24]
 800df4a:	68ba      	ldr	r2, [r7, #8]
 800df4c:	429a      	cmp	r2, r3
 800df4e:	d3c6      	bcc.n	800dede <remove_chain+0x4a>
 800df50:	e000      	b.n	800df54 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800df52:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800df54:	2300      	movs	r3, #0
}
 800df56:	4618      	mov	r0, r3
 800df58:	3720      	adds	r7, #32
 800df5a:	46bd      	mov	sp, r7
 800df5c:	bd80      	pop	{r7, pc}

0800df5e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800df5e:	b580      	push	{r7, lr}
 800df60:	b088      	sub	sp, #32
 800df62:	af00      	add	r7, sp, #0
 800df64:	6078      	str	r0, [r7, #4]
 800df66:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d10d      	bne.n	800df90 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800df74:	693b      	ldr	r3, [r7, #16]
 800df76:	691b      	ldr	r3, [r3, #16]
 800df78:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800df7a:	69bb      	ldr	r3, [r7, #24]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d004      	beq.n	800df8a <create_chain+0x2c>
 800df80:	693b      	ldr	r3, [r7, #16]
 800df82:	699b      	ldr	r3, [r3, #24]
 800df84:	69ba      	ldr	r2, [r7, #24]
 800df86:	429a      	cmp	r2, r3
 800df88:	d31b      	bcc.n	800dfc2 <create_chain+0x64>
 800df8a:	2301      	movs	r3, #1
 800df8c:	61bb      	str	r3, [r7, #24]
 800df8e:	e018      	b.n	800dfc2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800df90:	6839      	ldr	r1, [r7, #0]
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f7ff fd97 	bl	800dac6 <get_fat>
 800df98:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	2b01      	cmp	r3, #1
 800df9e:	d801      	bhi.n	800dfa4 <create_chain+0x46>
 800dfa0:	2301      	movs	r3, #1
 800dfa2:	e070      	b.n	800e086 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dfaa:	d101      	bne.n	800dfb0 <create_chain+0x52>
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	e06a      	b.n	800e086 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800dfb0:	693b      	ldr	r3, [r7, #16]
 800dfb2:	699b      	ldr	r3, [r3, #24]
 800dfb4:	68fa      	ldr	r2, [r7, #12]
 800dfb6:	429a      	cmp	r2, r3
 800dfb8:	d201      	bcs.n	800dfbe <create_chain+0x60>
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	e063      	b.n	800e086 <create_chain+0x128>
		scl = clst;
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800dfc2:	69bb      	ldr	r3, [r7, #24]
 800dfc4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800dfc6:	69fb      	ldr	r3, [r7, #28]
 800dfc8:	3301      	adds	r3, #1
 800dfca:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800dfcc:	693b      	ldr	r3, [r7, #16]
 800dfce:	699b      	ldr	r3, [r3, #24]
 800dfd0:	69fa      	ldr	r2, [r7, #28]
 800dfd2:	429a      	cmp	r2, r3
 800dfd4:	d307      	bcc.n	800dfe6 <create_chain+0x88>
				ncl = 2;
 800dfd6:	2302      	movs	r3, #2
 800dfd8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800dfda:	69fa      	ldr	r2, [r7, #28]
 800dfdc:	69bb      	ldr	r3, [r7, #24]
 800dfde:	429a      	cmp	r2, r3
 800dfe0:	d901      	bls.n	800dfe6 <create_chain+0x88>
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	e04f      	b.n	800e086 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800dfe6:	69f9      	ldr	r1, [r7, #28]
 800dfe8:	6878      	ldr	r0, [r7, #4]
 800dfea:	f7ff fd6c 	bl	800dac6 <get_fat>
 800dfee:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d00e      	beq.n	800e014 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	2b01      	cmp	r3, #1
 800dffa:	d003      	beq.n	800e004 <create_chain+0xa6>
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e002:	d101      	bne.n	800e008 <create_chain+0xaa>
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	e03e      	b.n	800e086 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e008:	69fa      	ldr	r2, [r7, #28]
 800e00a:	69bb      	ldr	r3, [r7, #24]
 800e00c:	429a      	cmp	r2, r3
 800e00e:	d1da      	bne.n	800dfc6 <create_chain+0x68>
 800e010:	2300      	movs	r3, #0
 800e012:	e038      	b.n	800e086 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e014:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e016:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e01a:	69f9      	ldr	r1, [r7, #28]
 800e01c:	6938      	ldr	r0, [r7, #16]
 800e01e:	f7ff fe22 	bl	800dc66 <put_fat>
 800e022:	4603      	mov	r3, r0
 800e024:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e026:	7dfb      	ldrb	r3, [r7, #23]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d109      	bne.n	800e040 <create_chain+0xe2>
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d006      	beq.n	800e040 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e032:	69fa      	ldr	r2, [r7, #28]
 800e034:	6839      	ldr	r1, [r7, #0]
 800e036:	6938      	ldr	r0, [r7, #16]
 800e038:	f7ff fe15 	bl	800dc66 <put_fat>
 800e03c:	4603      	mov	r3, r0
 800e03e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e040:	7dfb      	ldrb	r3, [r7, #23]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d116      	bne.n	800e074 <create_chain+0x116>
		fs->last_clst = ncl;
 800e046:	693b      	ldr	r3, [r7, #16]
 800e048:	69fa      	ldr	r2, [r7, #28]
 800e04a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e04c:	693b      	ldr	r3, [r7, #16]
 800e04e:	695a      	ldr	r2, [r3, #20]
 800e050:	693b      	ldr	r3, [r7, #16]
 800e052:	699b      	ldr	r3, [r3, #24]
 800e054:	3b02      	subs	r3, #2
 800e056:	429a      	cmp	r2, r3
 800e058:	d804      	bhi.n	800e064 <create_chain+0x106>
 800e05a:	693b      	ldr	r3, [r7, #16]
 800e05c:	695b      	ldr	r3, [r3, #20]
 800e05e:	1e5a      	subs	r2, r3, #1
 800e060:	693b      	ldr	r3, [r7, #16]
 800e062:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800e064:	693b      	ldr	r3, [r7, #16]
 800e066:	791b      	ldrb	r3, [r3, #4]
 800e068:	f043 0301 	orr.w	r3, r3, #1
 800e06c:	b2da      	uxtb	r2, r3
 800e06e:	693b      	ldr	r3, [r7, #16]
 800e070:	711a      	strb	r2, [r3, #4]
 800e072:	e007      	b.n	800e084 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e074:	7dfb      	ldrb	r3, [r7, #23]
 800e076:	2b01      	cmp	r3, #1
 800e078:	d102      	bne.n	800e080 <create_chain+0x122>
 800e07a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e07e:	e000      	b.n	800e082 <create_chain+0x124>
 800e080:	2301      	movs	r3, #1
 800e082:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e084:	69fb      	ldr	r3, [r7, #28]
}
 800e086:	4618      	mov	r0, r3
 800e088:	3720      	adds	r7, #32
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}

0800e08e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e08e:	b480      	push	{r7}
 800e090:	b087      	sub	sp, #28
 800e092:	af00      	add	r7, sp, #0
 800e094:	6078      	str	r0, [r7, #4]
 800e096:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0a2:	3304      	adds	r3, #4
 800e0a4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	899b      	ldrh	r3, [r3, #12]
 800e0aa:	461a      	mov	r2, r3
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	fbb3 f3f2 	udiv	r3, r3, r2
 800e0b2:	68fa      	ldr	r2, [r7, #12]
 800e0b4:	8952      	ldrh	r2, [r2, #10]
 800e0b6:	fbb3 f3f2 	udiv	r3, r3, r2
 800e0ba:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e0bc:	693b      	ldr	r3, [r7, #16]
 800e0be:	1d1a      	adds	r2, r3, #4
 800e0c0:	613a      	str	r2, [r7, #16]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e0c6:	68bb      	ldr	r3, [r7, #8]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d101      	bne.n	800e0d0 <clmt_clust+0x42>
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	e010      	b.n	800e0f2 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800e0d0:	697a      	ldr	r2, [r7, #20]
 800e0d2:	68bb      	ldr	r3, [r7, #8]
 800e0d4:	429a      	cmp	r2, r3
 800e0d6:	d307      	bcc.n	800e0e8 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800e0d8:	697a      	ldr	r2, [r7, #20]
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	1ad3      	subs	r3, r2, r3
 800e0de:	617b      	str	r3, [r7, #20]
 800e0e0:	693b      	ldr	r3, [r7, #16]
 800e0e2:	3304      	adds	r3, #4
 800e0e4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e0e6:	e7e9      	b.n	800e0bc <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800e0e8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e0ea:	693b      	ldr	r3, [r7, #16]
 800e0ec:	681a      	ldr	r2, [r3, #0]
 800e0ee:	697b      	ldr	r3, [r7, #20]
 800e0f0:	4413      	add	r3, r2
}
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	371c      	adds	r7, #28
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fc:	4770      	bx	lr

0800e0fe <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e0fe:	b580      	push	{r7, lr}
 800e100:	b086      	sub	sp, #24
 800e102:	af00      	add	r7, sp, #0
 800e104:	6078      	str	r0, [r7, #4]
 800e106:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e114:	d204      	bcs.n	800e120 <dir_sdi+0x22>
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	f003 031f 	and.w	r3, r3, #31
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d001      	beq.n	800e124 <dir_sdi+0x26>
		return FR_INT_ERR;
 800e120:	2302      	movs	r3, #2
 800e122:	e071      	b.n	800e208 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	683a      	ldr	r2, [r7, #0]
 800e128:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	689b      	ldr	r3, [r3, #8]
 800e12e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e130:	697b      	ldr	r3, [r7, #20]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d106      	bne.n	800e144 <dir_sdi+0x46>
 800e136:	693b      	ldr	r3, [r7, #16]
 800e138:	781b      	ldrb	r3, [r3, #0]
 800e13a:	2b02      	cmp	r3, #2
 800e13c:	d902      	bls.n	800e144 <dir_sdi+0x46>
		clst = fs->dirbase;
 800e13e:	693b      	ldr	r3, [r7, #16]
 800e140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e142:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e144:	697b      	ldr	r3, [r7, #20]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d10c      	bne.n	800e164 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e14a:	683b      	ldr	r3, [r7, #0]
 800e14c:	095b      	lsrs	r3, r3, #5
 800e14e:	693a      	ldr	r2, [r7, #16]
 800e150:	8912      	ldrh	r2, [r2, #8]
 800e152:	4293      	cmp	r3, r2
 800e154:	d301      	bcc.n	800e15a <dir_sdi+0x5c>
 800e156:	2302      	movs	r3, #2
 800e158:	e056      	b.n	800e208 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800e15a:	693b      	ldr	r3, [r7, #16]
 800e15c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	61da      	str	r2, [r3, #28]
 800e162:	e02d      	b.n	800e1c0 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e164:	693b      	ldr	r3, [r7, #16]
 800e166:	895b      	ldrh	r3, [r3, #10]
 800e168:	461a      	mov	r2, r3
 800e16a:	693b      	ldr	r3, [r7, #16]
 800e16c:	899b      	ldrh	r3, [r3, #12]
 800e16e:	fb03 f302 	mul.w	r3, r3, r2
 800e172:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e174:	e019      	b.n	800e1aa <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	6979      	ldr	r1, [r7, #20]
 800e17a:	4618      	mov	r0, r3
 800e17c:	f7ff fca3 	bl	800dac6 <get_fat>
 800e180:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e182:	697b      	ldr	r3, [r7, #20]
 800e184:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e188:	d101      	bne.n	800e18e <dir_sdi+0x90>
 800e18a:	2301      	movs	r3, #1
 800e18c:	e03c      	b.n	800e208 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e18e:	697b      	ldr	r3, [r7, #20]
 800e190:	2b01      	cmp	r3, #1
 800e192:	d904      	bls.n	800e19e <dir_sdi+0xa0>
 800e194:	693b      	ldr	r3, [r7, #16]
 800e196:	699b      	ldr	r3, [r3, #24]
 800e198:	697a      	ldr	r2, [r7, #20]
 800e19a:	429a      	cmp	r2, r3
 800e19c:	d301      	bcc.n	800e1a2 <dir_sdi+0xa4>
 800e19e:	2302      	movs	r3, #2
 800e1a0:	e032      	b.n	800e208 <dir_sdi+0x10a>
			ofs -= csz;
 800e1a2:	683a      	ldr	r2, [r7, #0]
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	1ad3      	subs	r3, r2, r3
 800e1a8:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e1aa:	683a      	ldr	r2, [r7, #0]
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	429a      	cmp	r2, r3
 800e1b0:	d2e1      	bcs.n	800e176 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800e1b2:	6979      	ldr	r1, [r7, #20]
 800e1b4:	6938      	ldr	r0, [r7, #16]
 800e1b6:	f7ff fc67 	bl	800da88 <clust2sect>
 800e1ba:	4602      	mov	r2, r0
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	697a      	ldr	r2, [r7, #20]
 800e1c4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	69db      	ldr	r3, [r3, #28]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d101      	bne.n	800e1d2 <dir_sdi+0xd4>
 800e1ce:	2302      	movs	r3, #2
 800e1d0:	e01a      	b.n	800e208 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	69da      	ldr	r2, [r3, #28]
 800e1d6:	693b      	ldr	r3, [r7, #16]
 800e1d8:	899b      	ldrh	r3, [r3, #12]
 800e1da:	4619      	mov	r1, r3
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	fbb3 f3f1 	udiv	r3, r3, r1
 800e1e2:	441a      	add	r2, r3
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e1e8:	693b      	ldr	r3, [r7, #16]
 800e1ea:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e1ee:	693b      	ldr	r3, [r7, #16]
 800e1f0:	899b      	ldrh	r3, [r3, #12]
 800e1f2:	461a      	mov	r2, r3
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	fbb3 f0f2 	udiv	r0, r3, r2
 800e1fa:	fb02 f200 	mul.w	r2, r2, r0
 800e1fe:	1a9b      	subs	r3, r3, r2
 800e200:	18ca      	adds	r2, r1, r3
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e206:	2300      	movs	r3, #0
}
 800e208:	4618      	mov	r0, r3
 800e20a:	3718      	adds	r7, #24
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bd80      	pop	{r7, pc}

0800e210 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b086      	sub	sp, #24
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
 800e218:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	695b      	ldr	r3, [r3, #20]
 800e224:	3320      	adds	r3, #32
 800e226:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	69db      	ldr	r3, [r3, #28]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d003      	beq.n	800e238 <dir_next+0x28>
 800e230:	68bb      	ldr	r3, [r7, #8]
 800e232:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e236:	d301      	bcc.n	800e23c <dir_next+0x2c>
 800e238:	2304      	movs	r3, #4
 800e23a:	e0bb      	b.n	800e3b4 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	899b      	ldrh	r3, [r3, #12]
 800e240:	461a      	mov	r2, r3
 800e242:	68bb      	ldr	r3, [r7, #8]
 800e244:	fbb3 f1f2 	udiv	r1, r3, r2
 800e248:	fb02 f201 	mul.w	r2, r2, r1
 800e24c:	1a9b      	subs	r3, r3, r2
 800e24e:	2b00      	cmp	r3, #0
 800e250:	f040 809d 	bne.w	800e38e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	69db      	ldr	r3, [r3, #28]
 800e258:	1c5a      	adds	r2, r3, #1
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	699b      	ldr	r3, [r3, #24]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d10b      	bne.n	800e27e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e266:	68bb      	ldr	r3, [r7, #8]
 800e268:	095b      	lsrs	r3, r3, #5
 800e26a:	68fa      	ldr	r2, [r7, #12]
 800e26c:	8912      	ldrh	r2, [r2, #8]
 800e26e:	4293      	cmp	r3, r2
 800e270:	f0c0 808d 	bcc.w	800e38e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2200      	movs	r2, #0
 800e278:	61da      	str	r2, [r3, #28]
 800e27a:	2304      	movs	r3, #4
 800e27c:	e09a      	b.n	800e3b4 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	899b      	ldrh	r3, [r3, #12]
 800e282:	461a      	mov	r2, r3
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	fbb3 f3f2 	udiv	r3, r3, r2
 800e28a:	68fa      	ldr	r2, [r7, #12]
 800e28c:	8952      	ldrh	r2, [r2, #10]
 800e28e:	3a01      	subs	r2, #1
 800e290:	4013      	ands	r3, r2
 800e292:	2b00      	cmp	r3, #0
 800e294:	d17b      	bne.n	800e38e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e296:	687a      	ldr	r2, [r7, #4]
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	699b      	ldr	r3, [r3, #24]
 800e29c:	4619      	mov	r1, r3
 800e29e:	4610      	mov	r0, r2
 800e2a0:	f7ff fc11 	bl	800dac6 <get_fat>
 800e2a4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e2a6:	697b      	ldr	r3, [r7, #20]
 800e2a8:	2b01      	cmp	r3, #1
 800e2aa:	d801      	bhi.n	800e2b0 <dir_next+0xa0>
 800e2ac:	2302      	movs	r3, #2
 800e2ae:	e081      	b.n	800e3b4 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e2b0:	697b      	ldr	r3, [r7, #20]
 800e2b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e2b6:	d101      	bne.n	800e2bc <dir_next+0xac>
 800e2b8:	2301      	movs	r3, #1
 800e2ba:	e07b      	b.n	800e3b4 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	699b      	ldr	r3, [r3, #24]
 800e2c0:	697a      	ldr	r2, [r7, #20]
 800e2c2:	429a      	cmp	r2, r3
 800e2c4:	d359      	bcc.n	800e37a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d104      	bne.n	800e2d6 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	61da      	str	r2, [r3, #28]
 800e2d2:	2304      	movs	r3, #4
 800e2d4:	e06e      	b.n	800e3b4 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e2d6:	687a      	ldr	r2, [r7, #4]
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	699b      	ldr	r3, [r3, #24]
 800e2dc:	4619      	mov	r1, r3
 800e2de:	4610      	mov	r0, r2
 800e2e0:	f7ff fe3d 	bl	800df5e <create_chain>
 800e2e4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e2e6:	697b      	ldr	r3, [r7, #20]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d101      	bne.n	800e2f0 <dir_next+0xe0>
 800e2ec:	2307      	movs	r3, #7
 800e2ee:	e061      	b.n	800e3b4 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e2f0:	697b      	ldr	r3, [r7, #20]
 800e2f2:	2b01      	cmp	r3, #1
 800e2f4:	d101      	bne.n	800e2fa <dir_next+0xea>
 800e2f6:	2302      	movs	r3, #2
 800e2f8:	e05c      	b.n	800e3b4 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e2fa:	697b      	ldr	r3, [r7, #20]
 800e2fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e300:	d101      	bne.n	800e306 <dir_next+0xf6>
 800e302:	2301      	movs	r3, #1
 800e304:	e056      	b.n	800e3b4 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e306:	68f8      	ldr	r0, [r7, #12]
 800e308:	f7ff fadc 	bl	800d8c4 <sync_window>
 800e30c:	4603      	mov	r3, r0
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d001      	beq.n	800e316 <dir_next+0x106>
 800e312:	2301      	movs	r3, #1
 800e314:	e04e      	b.n	800e3b4 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	899b      	ldrh	r3, [r3, #12]
 800e320:	461a      	mov	r2, r3
 800e322:	2100      	movs	r1, #0
 800e324:	f7ff f905 	bl	800d532 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e328:	2300      	movs	r3, #0
 800e32a:	613b      	str	r3, [r7, #16]
 800e32c:	6979      	ldr	r1, [r7, #20]
 800e32e:	68f8      	ldr	r0, [r7, #12]
 800e330:	f7ff fbaa 	bl	800da88 <clust2sect>
 800e334:	4602      	mov	r2, r0
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	631a      	str	r2, [r3, #48]	; 0x30
 800e33a:	e012      	b.n	800e362 <dir_next+0x152>
						fs->wflag = 1;
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	2201      	movs	r2, #1
 800e340:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e342:	68f8      	ldr	r0, [r7, #12]
 800e344:	f7ff fabe 	bl	800d8c4 <sync_window>
 800e348:	4603      	mov	r3, r0
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d001      	beq.n	800e352 <dir_next+0x142>
 800e34e:	2301      	movs	r3, #1
 800e350:	e030      	b.n	800e3b4 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e352:	693b      	ldr	r3, [r7, #16]
 800e354:	3301      	adds	r3, #1
 800e356:	613b      	str	r3, [r7, #16]
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e35c:	1c5a      	adds	r2, r3, #1
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	631a      	str	r2, [r3, #48]	; 0x30
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	895b      	ldrh	r3, [r3, #10]
 800e366:	461a      	mov	r2, r3
 800e368:	693b      	ldr	r3, [r7, #16]
 800e36a:	4293      	cmp	r3, r2
 800e36c:	d3e6      	bcc.n	800e33c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e372:	693b      	ldr	r3, [r7, #16]
 800e374:	1ad2      	subs	r2, r2, r3
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	697a      	ldr	r2, [r7, #20]
 800e37e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e380:	6979      	ldr	r1, [r7, #20]
 800e382:	68f8      	ldr	r0, [r7, #12]
 800e384:	f7ff fb80 	bl	800da88 <clust2sect>
 800e388:	4602      	mov	r2, r0
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	68ba      	ldr	r2, [r7, #8]
 800e392:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	899b      	ldrh	r3, [r3, #12]
 800e39e:	461a      	mov	r2, r3
 800e3a0:	68bb      	ldr	r3, [r7, #8]
 800e3a2:	fbb3 f0f2 	udiv	r0, r3, r2
 800e3a6:	fb02 f200 	mul.w	r2, r2, r0
 800e3aa:	1a9b      	subs	r3, r3, r2
 800e3ac:	18ca      	adds	r2, r1, r3
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e3b2:	2300      	movs	r3, #0
}
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	3718      	adds	r7, #24
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bd80      	pop	{r7, pc}

0800e3bc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b086      	sub	sp, #24
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
 800e3c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e3cc:	2100      	movs	r1, #0
 800e3ce:	6878      	ldr	r0, [r7, #4]
 800e3d0:	f7ff fe95 	bl	800e0fe <dir_sdi>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e3d8:	7dfb      	ldrb	r3, [r7, #23]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d12b      	bne.n	800e436 <dir_alloc+0x7a>
		n = 0;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	69db      	ldr	r3, [r3, #28]
 800e3e6:	4619      	mov	r1, r3
 800e3e8:	68f8      	ldr	r0, [r7, #12]
 800e3ea:	f7ff faaf 	bl	800d94c <move_window>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e3f2:	7dfb      	ldrb	r3, [r7, #23]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d11d      	bne.n	800e434 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	6a1b      	ldr	r3, [r3, #32]
 800e3fc:	781b      	ldrb	r3, [r3, #0]
 800e3fe:	2be5      	cmp	r3, #229	; 0xe5
 800e400:	d004      	beq.n	800e40c <dir_alloc+0x50>
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	6a1b      	ldr	r3, [r3, #32]
 800e406:	781b      	ldrb	r3, [r3, #0]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d107      	bne.n	800e41c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e40c:	693b      	ldr	r3, [r7, #16]
 800e40e:	3301      	adds	r3, #1
 800e410:	613b      	str	r3, [r7, #16]
 800e412:	693a      	ldr	r2, [r7, #16]
 800e414:	683b      	ldr	r3, [r7, #0]
 800e416:	429a      	cmp	r2, r3
 800e418:	d102      	bne.n	800e420 <dir_alloc+0x64>
 800e41a:	e00c      	b.n	800e436 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e41c:	2300      	movs	r3, #0
 800e41e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e420:	2101      	movs	r1, #1
 800e422:	6878      	ldr	r0, [r7, #4]
 800e424:	f7ff fef4 	bl	800e210 <dir_next>
 800e428:	4603      	mov	r3, r0
 800e42a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e42c:	7dfb      	ldrb	r3, [r7, #23]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d0d7      	beq.n	800e3e2 <dir_alloc+0x26>
 800e432:	e000      	b.n	800e436 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e434:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e436:	7dfb      	ldrb	r3, [r7, #23]
 800e438:	2b04      	cmp	r3, #4
 800e43a:	d101      	bne.n	800e440 <dir_alloc+0x84>
 800e43c:	2307      	movs	r3, #7
 800e43e:	75fb      	strb	r3, [r7, #23]
	return res;
 800e440:	7dfb      	ldrb	r3, [r7, #23]
}
 800e442:	4618      	mov	r0, r3
 800e444:	3718      	adds	r7, #24
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}

0800e44a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e44a:	b580      	push	{r7, lr}
 800e44c:	b084      	sub	sp, #16
 800e44e:	af00      	add	r7, sp, #0
 800e450:	6078      	str	r0, [r7, #4]
 800e452:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	331a      	adds	r3, #26
 800e458:	4618      	mov	r0, r3
 800e45a:	f7fe ffc7 	bl	800d3ec <ld_word>
 800e45e:	4603      	mov	r3, r0
 800e460:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	781b      	ldrb	r3, [r3, #0]
 800e466:	2b03      	cmp	r3, #3
 800e468:	d109      	bne.n	800e47e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e46a:	683b      	ldr	r3, [r7, #0]
 800e46c:	3314      	adds	r3, #20
 800e46e:	4618      	mov	r0, r3
 800e470:	f7fe ffbc 	bl	800d3ec <ld_word>
 800e474:	4603      	mov	r3, r0
 800e476:	041b      	lsls	r3, r3, #16
 800e478:	68fa      	ldr	r2, [r7, #12]
 800e47a:	4313      	orrs	r3, r2
 800e47c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e47e:	68fb      	ldr	r3, [r7, #12]
}
 800e480:	4618      	mov	r0, r3
 800e482:	3710      	adds	r7, #16
 800e484:	46bd      	mov	sp, r7
 800e486:	bd80      	pop	{r7, pc}

0800e488 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b084      	sub	sp, #16
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	60f8      	str	r0, [r7, #12]
 800e490:	60b9      	str	r1, [r7, #8]
 800e492:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	331a      	adds	r3, #26
 800e498:	687a      	ldr	r2, [r7, #4]
 800e49a:	b292      	uxth	r2, r2
 800e49c:	4611      	mov	r1, r2
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f7fe ffdf 	bl	800d462 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	781b      	ldrb	r3, [r3, #0]
 800e4a8:	2b03      	cmp	r3, #3
 800e4aa:	d109      	bne.n	800e4c0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e4ac:	68bb      	ldr	r3, [r7, #8]
 800e4ae:	f103 0214 	add.w	r2, r3, #20
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	0c1b      	lsrs	r3, r3, #16
 800e4b6:	b29b      	uxth	r3, r3
 800e4b8:	4619      	mov	r1, r3
 800e4ba:	4610      	mov	r0, r2
 800e4bc:	f7fe ffd1 	bl	800d462 <st_word>
	}
}
 800e4c0:	bf00      	nop
 800e4c2:	3710      	adds	r7, #16
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd80      	pop	{r7, pc}

0800e4c8 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b086      	sub	sp, #24
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
 800e4d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800e4d2:	2304      	movs	r3, #4
 800e4d4:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800e4dc:	e03c      	b.n	800e558 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	69db      	ldr	r3, [r3, #28]
 800e4e2:	4619      	mov	r1, r3
 800e4e4:	6938      	ldr	r0, [r7, #16]
 800e4e6:	f7ff fa31 	bl	800d94c <move_window>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e4ee:	7dfb      	ldrb	r3, [r7, #23]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d136      	bne.n	800e562 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	6a1b      	ldr	r3, [r3, #32]
 800e4f8:	781b      	ldrb	r3, [r3, #0]
 800e4fa:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800e4fc:	7bfb      	ldrb	r3, [r7, #15]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d102      	bne.n	800e508 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800e502:	2304      	movs	r3, #4
 800e504:	75fb      	strb	r3, [r7, #23]
 800e506:	e031      	b.n	800e56c <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	6a1b      	ldr	r3, [r3, #32]
 800e50c:	330b      	adds	r3, #11
 800e50e:	781b      	ldrb	r3, [r3, #0]
 800e510:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e514:	73bb      	strb	r3, [r7, #14]
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	7bba      	ldrb	r2, [r7, #14]
 800e51a:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800e51c:	7bfb      	ldrb	r3, [r7, #15]
 800e51e:	2be5      	cmp	r3, #229	; 0xe5
 800e520:	d011      	beq.n	800e546 <dir_read+0x7e>
 800e522:	7bfb      	ldrb	r3, [r7, #15]
 800e524:	2b2e      	cmp	r3, #46	; 0x2e
 800e526:	d00e      	beq.n	800e546 <dir_read+0x7e>
 800e528:	7bbb      	ldrb	r3, [r7, #14]
 800e52a:	2b0f      	cmp	r3, #15
 800e52c:	d00b      	beq.n	800e546 <dir_read+0x7e>
 800e52e:	7bbb      	ldrb	r3, [r7, #14]
 800e530:	f023 0320 	bic.w	r3, r3, #32
 800e534:	2b08      	cmp	r3, #8
 800e536:	bf0c      	ite	eq
 800e538:	2301      	moveq	r3, #1
 800e53a:	2300      	movne	r3, #0
 800e53c:	b2db      	uxtb	r3, r3
 800e53e:	461a      	mov	r2, r3
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	4293      	cmp	r3, r2
 800e544:	d00f      	beq.n	800e566 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800e546:	2100      	movs	r1, #0
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	f7ff fe61 	bl	800e210 <dir_next>
 800e54e:	4603      	mov	r3, r0
 800e550:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e552:	7dfb      	ldrb	r3, [r7, #23]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d108      	bne.n	800e56a <dir_read+0xa2>
	while (dp->sect) {
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	69db      	ldr	r3, [r3, #28]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d1be      	bne.n	800e4de <dir_read+0x16>
 800e560:	e004      	b.n	800e56c <dir_read+0xa4>
		if (res != FR_OK) break;
 800e562:	bf00      	nop
 800e564:	e002      	b.n	800e56c <dir_read+0xa4>
				break;
 800e566:	bf00      	nop
 800e568:	e000      	b.n	800e56c <dir_read+0xa4>
		if (res != FR_OK) break;
 800e56a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800e56c:	7dfb      	ldrb	r3, [r7, #23]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d002      	beq.n	800e578 <dir_read+0xb0>
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	2200      	movs	r2, #0
 800e576:	61da      	str	r2, [r3, #28]
	return res;
 800e578:	7dfb      	ldrb	r3, [r7, #23]
}
 800e57a:	4618      	mov	r0, r3
 800e57c:	3718      	adds	r7, #24
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}

0800e582 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e582:	b580      	push	{r7, lr}
 800e584:	b086      	sub	sp, #24
 800e586:	af00      	add	r7, sp, #0
 800e588:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e590:	2100      	movs	r1, #0
 800e592:	6878      	ldr	r0, [r7, #4]
 800e594:	f7ff fdb3 	bl	800e0fe <dir_sdi>
 800e598:	4603      	mov	r3, r0
 800e59a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e59c:	7dfb      	ldrb	r3, [r7, #23]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d001      	beq.n	800e5a6 <dir_find+0x24>
 800e5a2:	7dfb      	ldrb	r3, [r7, #23]
 800e5a4:	e03e      	b.n	800e624 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	69db      	ldr	r3, [r3, #28]
 800e5aa:	4619      	mov	r1, r3
 800e5ac:	6938      	ldr	r0, [r7, #16]
 800e5ae:	f7ff f9cd 	bl	800d94c <move_window>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e5b6:	7dfb      	ldrb	r3, [r7, #23]
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d12f      	bne.n	800e61c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	6a1b      	ldr	r3, [r3, #32]
 800e5c0:	781b      	ldrb	r3, [r3, #0]
 800e5c2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e5c4:	7bfb      	ldrb	r3, [r7, #15]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d102      	bne.n	800e5d0 <dir_find+0x4e>
 800e5ca:	2304      	movs	r3, #4
 800e5cc:	75fb      	strb	r3, [r7, #23]
 800e5ce:	e028      	b.n	800e622 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	6a1b      	ldr	r3, [r3, #32]
 800e5d4:	330b      	adds	r3, #11
 800e5d6:	781b      	ldrb	r3, [r3, #0]
 800e5d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e5dc:	b2da      	uxtb	r2, r3
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	6a1b      	ldr	r3, [r3, #32]
 800e5e6:	330b      	adds	r3, #11
 800e5e8:	781b      	ldrb	r3, [r3, #0]
 800e5ea:	f003 0308 	and.w	r3, r3, #8
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d10a      	bne.n	800e608 <dir_find+0x86>
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	6a18      	ldr	r0, [r3, #32]
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	3324      	adds	r3, #36	; 0x24
 800e5fa:	220b      	movs	r2, #11
 800e5fc:	4619      	mov	r1, r3
 800e5fe:	f7fe ffb2 	bl	800d566 <mem_cmp>
 800e602:	4603      	mov	r3, r0
 800e604:	2b00      	cmp	r3, #0
 800e606:	d00b      	beq.n	800e620 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e608:	2100      	movs	r1, #0
 800e60a:	6878      	ldr	r0, [r7, #4]
 800e60c:	f7ff fe00 	bl	800e210 <dir_next>
 800e610:	4603      	mov	r3, r0
 800e612:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e614:	7dfb      	ldrb	r3, [r7, #23]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d0c5      	beq.n	800e5a6 <dir_find+0x24>
 800e61a:	e002      	b.n	800e622 <dir_find+0xa0>
		if (res != FR_OK) break;
 800e61c:	bf00      	nop
 800e61e:	e000      	b.n	800e622 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e620:	bf00      	nop

	return res;
 800e622:	7dfb      	ldrb	r3, [r7, #23]
}
 800e624:	4618      	mov	r0, r3
 800e626:	3718      	adds	r7, #24
 800e628:	46bd      	mov	sp, r7
 800e62a:	bd80      	pop	{r7, pc}

0800e62c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b084      	sub	sp, #16
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800e63a:	2101      	movs	r1, #1
 800e63c:	6878      	ldr	r0, [r7, #4]
 800e63e:	f7ff febd 	bl	800e3bc <dir_alloc>
 800e642:	4603      	mov	r3, r0
 800e644:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e646:	7bfb      	ldrb	r3, [r7, #15]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d11c      	bne.n	800e686 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	69db      	ldr	r3, [r3, #28]
 800e650:	4619      	mov	r1, r3
 800e652:	68b8      	ldr	r0, [r7, #8]
 800e654:	f7ff f97a 	bl	800d94c <move_window>
 800e658:	4603      	mov	r3, r0
 800e65a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e65c:	7bfb      	ldrb	r3, [r7, #15]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d111      	bne.n	800e686 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	6a1b      	ldr	r3, [r3, #32]
 800e666:	2220      	movs	r2, #32
 800e668:	2100      	movs	r1, #0
 800e66a:	4618      	mov	r0, r3
 800e66c:	f7fe ff61 	bl	800d532 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	6a18      	ldr	r0, [r3, #32]
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	3324      	adds	r3, #36	; 0x24
 800e678:	220b      	movs	r2, #11
 800e67a:	4619      	mov	r1, r3
 800e67c:	f7fe ff38 	bl	800d4f0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800e680:	68bb      	ldr	r3, [r7, #8]
 800e682:	2201      	movs	r2, #1
 800e684:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e686:	7bfb      	ldrb	r3, [r7, #15]
}
 800e688:	4618      	mov	r0, r3
 800e68a:	3710      	adds	r7, #16
 800e68c:	46bd      	mov	sp, r7
 800e68e:	bd80      	pop	{r7, pc}

0800e690 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b086      	sub	sp, #24
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
 800e698:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800e69a:	683b      	ldr	r3, [r7, #0]
 800e69c:	2200      	movs	r2, #0
 800e69e:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	69db      	ldr	r3, [r3, #28]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d04e      	beq.n	800e746 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	613b      	str	r3, [r7, #16]
 800e6ac:	693b      	ldr	r3, [r7, #16]
 800e6ae:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800e6b0:	e021      	b.n	800e6f6 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	6a1a      	ldr	r2, [r3, #32]
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	1c59      	adds	r1, r3, #1
 800e6ba:	6179      	str	r1, [r7, #20]
 800e6bc:	4413      	add	r3, r2
 800e6be:	781b      	ldrb	r3, [r3, #0]
 800e6c0:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800e6c2:	7bfb      	ldrb	r3, [r7, #15]
 800e6c4:	2b20      	cmp	r3, #32
 800e6c6:	d100      	bne.n	800e6ca <get_fileinfo+0x3a>
 800e6c8:	e015      	b.n	800e6f6 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800e6ca:	7bfb      	ldrb	r3, [r7, #15]
 800e6cc:	2b05      	cmp	r3, #5
 800e6ce:	d101      	bne.n	800e6d4 <get_fileinfo+0x44>
 800e6d0:	23e5      	movs	r3, #229	; 0xe5
 800e6d2:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800e6d4:	697b      	ldr	r3, [r7, #20]
 800e6d6:	2b09      	cmp	r3, #9
 800e6d8:	d106      	bne.n	800e6e8 <get_fileinfo+0x58>
 800e6da:	693b      	ldr	r3, [r7, #16]
 800e6dc:	1c5a      	adds	r2, r3, #1
 800e6de:	613a      	str	r2, [r7, #16]
 800e6e0:	683a      	ldr	r2, [r7, #0]
 800e6e2:	4413      	add	r3, r2
 800e6e4:	222e      	movs	r2, #46	; 0x2e
 800e6e6:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800e6e8:	693b      	ldr	r3, [r7, #16]
 800e6ea:	1c5a      	adds	r2, r3, #1
 800e6ec:	613a      	str	r2, [r7, #16]
 800e6ee:	683a      	ldr	r2, [r7, #0]
 800e6f0:	4413      	add	r3, r2
 800e6f2:	7bfa      	ldrb	r2, [r7, #15]
 800e6f4:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800e6f6:	697b      	ldr	r3, [r7, #20]
 800e6f8:	2b0a      	cmp	r3, #10
 800e6fa:	d9da      	bls.n	800e6b2 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800e6fc:	683a      	ldr	r2, [r7, #0]
 800e6fe:	693b      	ldr	r3, [r7, #16]
 800e700:	4413      	add	r3, r2
 800e702:	3309      	adds	r3, #9
 800e704:	2200      	movs	r2, #0
 800e706:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	6a1b      	ldr	r3, [r3, #32]
 800e70c:	7ada      	ldrb	r2, [r3, #11]
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	6a1b      	ldr	r3, [r3, #32]
 800e716:	331c      	adds	r3, #28
 800e718:	4618      	mov	r0, r3
 800e71a:	f7fe fe7f 	bl	800d41c <ld_dword>
 800e71e:	4602      	mov	r2, r0
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	6a1b      	ldr	r3, [r3, #32]
 800e728:	3316      	adds	r3, #22
 800e72a:	4618      	mov	r0, r3
 800e72c:	f7fe fe76 	bl	800d41c <ld_dword>
 800e730:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800e732:	68bb      	ldr	r3, [r7, #8]
 800e734:	b29a      	uxth	r2, r3
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	80da      	strh	r2, [r3, #6]
 800e73a:	68bb      	ldr	r3, [r7, #8]
 800e73c:	0c1b      	lsrs	r3, r3, #16
 800e73e:	b29a      	uxth	r2, r3
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	809a      	strh	r2, [r3, #4]
 800e744:	e000      	b.n	800e748 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800e746:	bf00      	nop
}
 800e748:	3718      	adds	r7, #24
 800e74a:	46bd      	mov	sp, r7
 800e74c:	bd80      	pop	{r7, pc}
	...

0800e750 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b088      	sub	sp, #32
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
 800e758:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800e75a:	683b      	ldr	r3, [r7, #0]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	60fb      	str	r3, [r7, #12]
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	3324      	adds	r3, #36	; 0x24
 800e764:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800e766:	220b      	movs	r2, #11
 800e768:	2120      	movs	r1, #32
 800e76a:	68b8      	ldr	r0, [r7, #8]
 800e76c:	f7fe fee1 	bl	800d532 <mem_set>
	si = i = 0; ni = 8;
 800e770:	2300      	movs	r3, #0
 800e772:	613b      	str	r3, [r7, #16]
 800e774:	693b      	ldr	r3, [r7, #16]
 800e776:	617b      	str	r3, [r7, #20]
 800e778:	2308      	movs	r3, #8
 800e77a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800e77c:	697b      	ldr	r3, [r7, #20]
 800e77e:	1c5a      	adds	r2, r3, #1
 800e780:	617a      	str	r2, [r7, #20]
 800e782:	68fa      	ldr	r2, [r7, #12]
 800e784:	4413      	add	r3, r2
 800e786:	781b      	ldrb	r3, [r3, #0]
 800e788:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e78a:	7ffb      	ldrb	r3, [r7, #31]
 800e78c:	2b20      	cmp	r3, #32
 800e78e:	d94e      	bls.n	800e82e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800e790:	7ffb      	ldrb	r3, [r7, #31]
 800e792:	2b2f      	cmp	r3, #47	; 0x2f
 800e794:	d006      	beq.n	800e7a4 <create_name+0x54>
 800e796:	7ffb      	ldrb	r3, [r7, #31]
 800e798:	2b5c      	cmp	r3, #92	; 0x5c
 800e79a:	d110      	bne.n	800e7be <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e79c:	e002      	b.n	800e7a4 <create_name+0x54>
 800e79e:	697b      	ldr	r3, [r7, #20]
 800e7a0:	3301      	adds	r3, #1
 800e7a2:	617b      	str	r3, [r7, #20]
 800e7a4:	68fa      	ldr	r2, [r7, #12]
 800e7a6:	697b      	ldr	r3, [r7, #20]
 800e7a8:	4413      	add	r3, r2
 800e7aa:	781b      	ldrb	r3, [r3, #0]
 800e7ac:	2b2f      	cmp	r3, #47	; 0x2f
 800e7ae:	d0f6      	beq.n	800e79e <create_name+0x4e>
 800e7b0:	68fa      	ldr	r2, [r7, #12]
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	4413      	add	r3, r2
 800e7b6:	781b      	ldrb	r3, [r3, #0]
 800e7b8:	2b5c      	cmp	r3, #92	; 0x5c
 800e7ba:	d0f0      	beq.n	800e79e <create_name+0x4e>
			break;
 800e7bc:	e038      	b.n	800e830 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800e7be:	7ffb      	ldrb	r3, [r7, #31]
 800e7c0:	2b2e      	cmp	r3, #46	; 0x2e
 800e7c2:	d003      	beq.n	800e7cc <create_name+0x7c>
 800e7c4:	693a      	ldr	r2, [r7, #16]
 800e7c6:	69bb      	ldr	r3, [r7, #24]
 800e7c8:	429a      	cmp	r2, r3
 800e7ca:	d30c      	bcc.n	800e7e6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800e7cc:	69bb      	ldr	r3, [r7, #24]
 800e7ce:	2b0b      	cmp	r3, #11
 800e7d0:	d002      	beq.n	800e7d8 <create_name+0x88>
 800e7d2:	7ffb      	ldrb	r3, [r7, #31]
 800e7d4:	2b2e      	cmp	r3, #46	; 0x2e
 800e7d6:	d001      	beq.n	800e7dc <create_name+0x8c>
 800e7d8:	2306      	movs	r3, #6
 800e7da:	e044      	b.n	800e866 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800e7dc:	2308      	movs	r3, #8
 800e7de:	613b      	str	r3, [r7, #16]
 800e7e0:	230b      	movs	r3, #11
 800e7e2:	61bb      	str	r3, [r7, #24]
			continue;
 800e7e4:	e022      	b.n	800e82c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800e7e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	da04      	bge.n	800e7f8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800e7ee:	7ffb      	ldrb	r3, [r7, #31]
 800e7f0:	3b80      	subs	r3, #128	; 0x80
 800e7f2:	4a1f      	ldr	r2, [pc, #124]	; (800e870 <create_name+0x120>)
 800e7f4:	5cd3      	ldrb	r3, [r2, r3]
 800e7f6:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800e7f8:	7ffb      	ldrb	r3, [r7, #31]
 800e7fa:	4619      	mov	r1, r3
 800e7fc:	481d      	ldr	r0, [pc, #116]	; (800e874 <create_name+0x124>)
 800e7fe:	f7fe fed9 	bl	800d5b4 <chk_chr>
 800e802:	4603      	mov	r3, r0
 800e804:	2b00      	cmp	r3, #0
 800e806:	d001      	beq.n	800e80c <create_name+0xbc>
 800e808:	2306      	movs	r3, #6
 800e80a:	e02c      	b.n	800e866 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800e80c:	7ffb      	ldrb	r3, [r7, #31]
 800e80e:	2b60      	cmp	r3, #96	; 0x60
 800e810:	d905      	bls.n	800e81e <create_name+0xce>
 800e812:	7ffb      	ldrb	r3, [r7, #31]
 800e814:	2b7a      	cmp	r3, #122	; 0x7a
 800e816:	d802      	bhi.n	800e81e <create_name+0xce>
 800e818:	7ffb      	ldrb	r3, [r7, #31]
 800e81a:	3b20      	subs	r3, #32
 800e81c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800e81e:	693b      	ldr	r3, [r7, #16]
 800e820:	1c5a      	adds	r2, r3, #1
 800e822:	613a      	str	r2, [r7, #16]
 800e824:	68ba      	ldr	r2, [r7, #8]
 800e826:	4413      	add	r3, r2
 800e828:	7ffa      	ldrb	r2, [r7, #31]
 800e82a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800e82c:	e7a6      	b.n	800e77c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e82e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800e830:	68fa      	ldr	r2, [r7, #12]
 800e832:	697b      	ldr	r3, [r7, #20]
 800e834:	441a      	add	r2, r3
 800e836:	683b      	ldr	r3, [r7, #0]
 800e838:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800e83a:	693b      	ldr	r3, [r7, #16]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d101      	bne.n	800e844 <create_name+0xf4>
 800e840:	2306      	movs	r3, #6
 800e842:	e010      	b.n	800e866 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e844:	68bb      	ldr	r3, [r7, #8]
 800e846:	781b      	ldrb	r3, [r3, #0]
 800e848:	2be5      	cmp	r3, #229	; 0xe5
 800e84a:	d102      	bne.n	800e852 <create_name+0x102>
 800e84c:	68bb      	ldr	r3, [r7, #8]
 800e84e:	2205      	movs	r2, #5
 800e850:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e852:	7ffb      	ldrb	r3, [r7, #31]
 800e854:	2b20      	cmp	r3, #32
 800e856:	d801      	bhi.n	800e85c <create_name+0x10c>
 800e858:	2204      	movs	r2, #4
 800e85a:	e000      	b.n	800e85e <create_name+0x10e>
 800e85c:	2200      	movs	r2, #0
 800e85e:	68bb      	ldr	r3, [r7, #8]
 800e860:	330b      	adds	r3, #11
 800e862:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800e864:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800e866:	4618      	mov	r0, r3
 800e868:	3720      	adds	r7, #32
 800e86a:	46bd      	mov	sp, r7
 800e86c:	bd80      	pop	{r7, pc}
 800e86e:	bf00      	nop
 800e870:	08016624 	.word	0x08016624
 800e874:	080165ac 	.word	0x080165ac

0800e878 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b086      	sub	sp, #24
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
 800e880:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e886:	693b      	ldr	r3, [r7, #16]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e88c:	e002      	b.n	800e894 <follow_path+0x1c>
 800e88e:	683b      	ldr	r3, [r7, #0]
 800e890:	3301      	adds	r3, #1
 800e892:	603b      	str	r3, [r7, #0]
 800e894:	683b      	ldr	r3, [r7, #0]
 800e896:	781b      	ldrb	r3, [r3, #0]
 800e898:	2b2f      	cmp	r3, #47	; 0x2f
 800e89a:	d0f8      	beq.n	800e88e <follow_path+0x16>
 800e89c:	683b      	ldr	r3, [r7, #0]
 800e89e:	781b      	ldrb	r3, [r3, #0]
 800e8a0:	2b5c      	cmp	r3, #92	; 0x5c
 800e8a2:	d0f4      	beq.n	800e88e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e8a4:	693b      	ldr	r3, [r7, #16]
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	781b      	ldrb	r3, [r3, #0]
 800e8ae:	2b1f      	cmp	r3, #31
 800e8b0:	d80a      	bhi.n	800e8c8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	2280      	movs	r2, #128	; 0x80
 800e8b6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800e8ba:	2100      	movs	r1, #0
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f7ff fc1e 	bl	800e0fe <dir_sdi>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	75fb      	strb	r3, [r7, #23]
 800e8c6:	e048      	b.n	800e95a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e8c8:	463b      	mov	r3, r7
 800e8ca:	4619      	mov	r1, r3
 800e8cc:	6878      	ldr	r0, [r7, #4]
 800e8ce:	f7ff ff3f 	bl	800e750 <create_name>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e8d6:	7dfb      	ldrb	r3, [r7, #23]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d139      	bne.n	800e950 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e8dc:	6878      	ldr	r0, [r7, #4]
 800e8de:	f7ff fe50 	bl	800e582 <dir_find>
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e8ec:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e8ee:	7dfb      	ldrb	r3, [r7, #23]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d00a      	beq.n	800e90a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e8f4:	7dfb      	ldrb	r3, [r7, #23]
 800e8f6:	2b04      	cmp	r3, #4
 800e8f8:	d12c      	bne.n	800e954 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e8fa:	7afb      	ldrb	r3, [r7, #11]
 800e8fc:	f003 0304 	and.w	r3, r3, #4
 800e900:	2b00      	cmp	r3, #0
 800e902:	d127      	bne.n	800e954 <follow_path+0xdc>
 800e904:	2305      	movs	r3, #5
 800e906:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e908:	e024      	b.n	800e954 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e90a:	7afb      	ldrb	r3, [r7, #11]
 800e90c:	f003 0304 	and.w	r3, r3, #4
 800e910:	2b00      	cmp	r3, #0
 800e912:	d121      	bne.n	800e958 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e914:	693b      	ldr	r3, [r7, #16]
 800e916:	799b      	ldrb	r3, [r3, #6]
 800e918:	f003 0310 	and.w	r3, r3, #16
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d102      	bne.n	800e926 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e920:	2305      	movs	r3, #5
 800e922:	75fb      	strb	r3, [r7, #23]
 800e924:	e019      	b.n	800e95a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	695b      	ldr	r3, [r3, #20]
 800e930:	68fa      	ldr	r2, [r7, #12]
 800e932:	8992      	ldrh	r2, [r2, #12]
 800e934:	fbb3 f0f2 	udiv	r0, r3, r2
 800e938:	fb02 f200 	mul.w	r2, r2, r0
 800e93c:	1a9b      	subs	r3, r3, r2
 800e93e:	440b      	add	r3, r1
 800e940:	4619      	mov	r1, r3
 800e942:	68f8      	ldr	r0, [r7, #12]
 800e944:	f7ff fd81 	bl	800e44a <ld_clust>
 800e948:	4602      	mov	r2, r0
 800e94a:	693b      	ldr	r3, [r7, #16]
 800e94c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e94e:	e7bb      	b.n	800e8c8 <follow_path+0x50>
			if (res != FR_OK) break;
 800e950:	bf00      	nop
 800e952:	e002      	b.n	800e95a <follow_path+0xe2>
				break;
 800e954:	bf00      	nop
 800e956:	e000      	b.n	800e95a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e958:	bf00      	nop
			}
		}
	}

	return res;
 800e95a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e95c:	4618      	mov	r0, r3
 800e95e:	3718      	adds	r7, #24
 800e960:	46bd      	mov	sp, r7
 800e962:	bd80      	pop	{r7, pc}

0800e964 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e964:	b480      	push	{r7}
 800e966:	b087      	sub	sp, #28
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e96c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e970:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	2b00      	cmp	r3, #0
 800e978:	d031      	beq.n	800e9de <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	617b      	str	r3, [r7, #20]
 800e980:	e002      	b.n	800e988 <get_ldnumber+0x24>
 800e982:	697b      	ldr	r3, [r7, #20]
 800e984:	3301      	adds	r3, #1
 800e986:	617b      	str	r3, [r7, #20]
 800e988:	697b      	ldr	r3, [r7, #20]
 800e98a:	781b      	ldrb	r3, [r3, #0]
 800e98c:	2b20      	cmp	r3, #32
 800e98e:	d903      	bls.n	800e998 <get_ldnumber+0x34>
 800e990:	697b      	ldr	r3, [r7, #20]
 800e992:	781b      	ldrb	r3, [r3, #0]
 800e994:	2b3a      	cmp	r3, #58	; 0x3a
 800e996:	d1f4      	bne.n	800e982 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e998:	697b      	ldr	r3, [r7, #20]
 800e99a:	781b      	ldrb	r3, [r3, #0]
 800e99c:	2b3a      	cmp	r3, #58	; 0x3a
 800e99e:	d11c      	bne.n	800e9da <get_ldnumber+0x76>
			tp = *path;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	1c5a      	adds	r2, r3, #1
 800e9aa:	60fa      	str	r2, [r7, #12]
 800e9ac:	781b      	ldrb	r3, [r3, #0]
 800e9ae:	3b30      	subs	r3, #48	; 0x30
 800e9b0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e9b2:	68bb      	ldr	r3, [r7, #8]
 800e9b4:	2b09      	cmp	r3, #9
 800e9b6:	d80e      	bhi.n	800e9d6 <get_ldnumber+0x72>
 800e9b8:	68fa      	ldr	r2, [r7, #12]
 800e9ba:	697b      	ldr	r3, [r7, #20]
 800e9bc:	429a      	cmp	r2, r3
 800e9be:	d10a      	bne.n	800e9d6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d107      	bne.n	800e9d6 <get_ldnumber+0x72>
					vol = (int)i;
 800e9c6:	68bb      	ldr	r3, [r7, #8]
 800e9c8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e9ca:	697b      	ldr	r3, [r7, #20]
 800e9cc:	3301      	adds	r3, #1
 800e9ce:	617b      	str	r3, [r7, #20]
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	697a      	ldr	r2, [r7, #20]
 800e9d4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e9d6:	693b      	ldr	r3, [r7, #16]
 800e9d8:	e002      	b.n	800e9e0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e9da:	2300      	movs	r3, #0
 800e9dc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e9de:	693b      	ldr	r3, [r7, #16]
}
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	371c      	adds	r7, #28
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ea:	4770      	bx	lr

0800e9ec <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b082      	sub	sp, #8
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
 800e9f4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	70da      	strb	r2, [r3, #3]
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ea02:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ea04:	6839      	ldr	r1, [r7, #0]
 800ea06:	6878      	ldr	r0, [r7, #4]
 800ea08:	f7fe ffa0 	bl	800d94c <move_window>
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d001      	beq.n	800ea16 <check_fs+0x2a>
 800ea12:	2304      	movs	r3, #4
 800ea14:	e038      	b.n	800ea88 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	3334      	adds	r3, #52	; 0x34
 800ea1a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ea1e:	4618      	mov	r0, r3
 800ea20:	f7fe fce4 	bl	800d3ec <ld_word>
 800ea24:	4603      	mov	r3, r0
 800ea26:	461a      	mov	r2, r3
 800ea28:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ea2c:	429a      	cmp	r2, r3
 800ea2e:	d001      	beq.n	800ea34 <check_fs+0x48>
 800ea30:	2303      	movs	r3, #3
 800ea32:	e029      	b.n	800ea88 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ea3a:	2be9      	cmp	r3, #233	; 0xe9
 800ea3c:	d009      	beq.n	800ea52 <check_fs+0x66>
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ea44:	2beb      	cmp	r3, #235	; 0xeb
 800ea46:	d11e      	bne.n	800ea86 <check_fs+0x9a>
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800ea4e:	2b90      	cmp	r3, #144	; 0x90
 800ea50:	d119      	bne.n	800ea86 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	3334      	adds	r3, #52	; 0x34
 800ea56:	3336      	adds	r3, #54	; 0x36
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f7fe fcdf 	bl	800d41c <ld_dword>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ea64:	4a0a      	ldr	r2, [pc, #40]	; (800ea90 <check_fs+0xa4>)
 800ea66:	4293      	cmp	r3, r2
 800ea68:	d101      	bne.n	800ea6e <check_fs+0x82>
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	e00c      	b.n	800ea88 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	3334      	adds	r3, #52	; 0x34
 800ea72:	3352      	adds	r3, #82	; 0x52
 800ea74:	4618      	mov	r0, r3
 800ea76:	f7fe fcd1 	bl	800d41c <ld_dword>
 800ea7a:	4602      	mov	r2, r0
 800ea7c:	4b05      	ldr	r3, [pc, #20]	; (800ea94 <check_fs+0xa8>)
 800ea7e:	429a      	cmp	r2, r3
 800ea80:	d101      	bne.n	800ea86 <check_fs+0x9a>
 800ea82:	2300      	movs	r3, #0
 800ea84:	e000      	b.n	800ea88 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ea86:	2302      	movs	r3, #2
}
 800ea88:	4618      	mov	r0, r3
 800ea8a:	3708      	adds	r7, #8
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}
 800ea90:	00544146 	.word	0x00544146
 800ea94:	33544146 	.word	0x33544146

0800ea98 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b096      	sub	sp, #88	; 0x58
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	60f8      	str	r0, [r7, #12]
 800eaa0:	60b9      	str	r1, [r7, #8]
 800eaa2:	4613      	mov	r3, r2
 800eaa4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800eaa6:	68bb      	ldr	r3, [r7, #8]
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800eaac:	68f8      	ldr	r0, [r7, #12]
 800eaae:	f7ff ff59 	bl	800e964 <get_ldnumber>
 800eab2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800eab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	da01      	bge.n	800eabe <find_volume+0x26>
 800eaba:	230b      	movs	r3, #11
 800eabc:	e265      	b.n	800ef8a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800eabe:	4ab0      	ldr	r2, [pc, #704]	; (800ed80 <find_volume+0x2e8>)
 800eac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eac6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800eac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d101      	bne.n	800ead2 <find_volume+0x3a>
 800eace:	230c      	movs	r3, #12
 800ead0:	e25b      	b.n	800ef8a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ead6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ead8:	79fb      	ldrb	r3, [r7, #7]
 800eada:	f023 0301 	bic.w	r3, r3, #1
 800eade:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800eae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eae2:	781b      	ldrb	r3, [r3, #0]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d01a      	beq.n	800eb1e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800eae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaea:	785b      	ldrb	r3, [r3, #1]
 800eaec:	4618      	mov	r0, r3
 800eaee:	f7fe fbdf 	bl	800d2b0 <disk_status>
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800eaf8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eafc:	f003 0301 	and.w	r3, r3, #1
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d10c      	bne.n	800eb1e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800eb04:	79fb      	ldrb	r3, [r7, #7]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d007      	beq.n	800eb1a <find_volume+0x82>
 800eb0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eb0e:	f003 0304 	and.w	r3, r3, #4
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d001      	beq.n	800eb1a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800eb16:	230a      	movs	r3, #10
 800eb18:	e237      	b.n	800ef8a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	e235      	b.n	800ef8a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800eb1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb20:	2200      	movs	r2, #0
 800eb22:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800eb24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eb26:	b2da      	uxtb	r2, r3
 800eb28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb2a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800eb2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb2e:	785b      	ldrb	r3, [r3, #1]
 800eb30:	4618      	mov	r0, r3
 800eb32:	f7fe fbd7 	bl	800d2e4 <disk_initialize>
 800eb36:	4603      	mov	r3, r0
 800eb38:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800eb3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eb40:	f003 0301 	and.w	r3, r3, #1
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d001      	beq.n	800eb4c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800eb48:	2303      	movs	r3, #3
 800eb4a:	e21e      	b.n	800ef8a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800eb4c:	79fb      	ldrb	r3, [r7, #7]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d007      	beq.n	800eb62 <find_volume+0xca>
 800eb52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eb56:	f003 0304 	and.w	r3, r3, #4
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d001      	beq.n	800eb62 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800eb5e:	230a      	movs	r3, #10
 800eb60:	e213      	b.n	800ef8a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800eb62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb64:	7858      	ldrb	r0, [r3, #1]
 800eb66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb68:	330c      	adds	r3, #12
 800eb6a:	461a      	mov	r2, r3
 800eb6c:	2102      	movs	r1, #2
 800eb6e:	f7fe fc1f 	bl	800d3b0 <disk_ioctl>
 800eb72:	4603      	mov	r3, r0
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d001      	beq.n	800eb7c <find_volume+0xe4>
 800eb78:	2301      	movs	r3, #1
 800eb7a:	e206      	b.n	800ef8a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800eb7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb7e:	899b      	ldrh	r3, [r3, #12]
 800eb80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eb84:	d80d      	bhi.n	800eba2 <find_volume+0x10a>
 800eb86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb88:	899b      	ldrh	r3, [r3, #12]
 800eb8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eb8e:	d308      	bcc.n	800eba2 <find_volume+0x10a>
 800eb90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb92:	899b      	ldrh	r3, [r3, #12]
 800eb94:	461a      	mov	r2, r3
 800eb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb98:	899b      	ldrh	r3, [r3, #12]
 800eb9a:	3b01      	subs	r3, #1
 800eb9c:	4013      	ands	r3, r2
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d001      	beq.n	800eba6 <find_volume+0x10e>
 800eba2:	2301      	movs	r3, #1
 800eba4:	e1f1      	b.n	800ef8a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800eba6:	2300      	movs	r3, #0
 800eba8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ebaa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ebac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ebae:	f7ff ff1d 	bl	800e9ec <check_fs>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ebb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ebbc:	2b02      	cmp	r3, #2
 800ebbe:	d14b      	bne.n	800ec58 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	643b      	str	r3, [r7, #64]	; 0x40
 800ebc4:	e01f      	b.n	800ec06 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ebc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebc8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ebcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebce:	011b      	lsls	r3, r3, #4
 800ebd0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ebd4:	4413      	add	r3, r2
 800ebd6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ebd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebda:	3304      	adds	r3, #4
 800ebdc:	781b      	ldrb	r3, [r3, #0]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d006      	beq.n	800ebf0 <find_volume+0x158>
 800ebe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebe4:	3308      	adds	r3, #8
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f7fe fc18 	bl	800d41c <ld_dword>
 800ebec:	4602      	mov	r2, r0
 800ebee:	e000      	b.n	800ebf2 <find_volume+0x15a>
 800ebf0:	2200      	movs	r2, #0
 800ebf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ebf4:	009b      	lsls	r3, r3, #2
 800ebf6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ebfa:	440b      	add	r3, r1
 800ebfc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ec00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec02:	3301      	adds	r3, #1
 800ec04:	643b      	str	r3, [r7, #64]	; 0x40
 800ec06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec08:	2b03      	cmp	r3, #3
 800ec0a:	d9dc      	bls.n	800ebc6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ec10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d002      	beq.n	800ec1c <find_volume+0x184>
 800ec16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec18:	3b01      	subs	r3, #1
 800ec1a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ec1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec1e:	009b      	lsls	r3, r3, #2
 800ec20:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ec24:	4413      	add	r3, r2
 800ec26:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ec2a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ec2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d005      	beq.n	800ec3e <find_volume+0x1a6>
 800ec32:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ec34:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ec36:	f7ff fed9 	bl	800e9ec <check_fs>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	e000      	b.n	800ec40 <find_volume+0x1a8>
 800ec3e:	2303      	movs	r3, #3
 800ec40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ec44:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ec48:	2b01      	cmp	r3, #1
 800ec4a:	d905      	bls.n	800ec58 <find_volume+0x1c0>
 800ec4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec4e:	3301      	adds	r3, #1
 800ec50:	643b      	str	r3, [r7, #64]	; 0x40
 800ec52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ec54:	2b03      	cmp	r3, #3
 800ec56:	d9e1      	bls.n	800ec1c <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ec58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ec5c:	2b04      	cmp	r3, #4
 800ec5e:	d101      	bne.n	800ec64 <find_volume+0x1cc>
 800ec60:	2301      	movs	r3, #1
 800ec62:	e192      	b.n	800ef8a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ec64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ec68:	2b01      	cmp	r3, #1
 800ec6a:	d901      	bls.n	800ec70 <find_volume+0x1d8>
 800ec6c:	230d      	movs	r3, #13
 800ec6e:	e18c      	b.n	800ef8a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ec70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec72:	3334      	adds	r3, #52	; 0x34
 800ec74:	330b      	adds	r3, #11
 800ec76:	4618      	mov	r0, r3
 800ec78:	f7fe fbb8 	bl	800d3ec <ld_word>
 800ec7c:	4603      	mov	r3, r0
 800ec7e:	461a      	mov	r2, r3
 800ec80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec82:	899b      	ldrh	r3, [r3, #12]
 800ec84:	429a      	cmp	r2, r3
 800ec86:	d001      	beq.n	800ec8c <find_volume+0x1f4>
 800ec88:	230d      	movs	r3, #13
 800ec8a:	e17e      	b.n	800ef8a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ec8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec8e:	3334      	adds	r3, #52	; 0x34
 800ec90:	3316      	adds	r3, #22
 800ec92:	4618      	mov	r0, r3
 800ec94:	f7fe fbaa 	bl	800d3ec <ld_word>
 800ec98:	4603      	mov	r3, r0
 800ec9a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ec9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d106      	bne.n	800ecb0 <find_volume+0x218>
 800eca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eca4:	3334      	adds	r3, #52	; 0x34
 800eca6:	3324      	adds	r3, #36	; 0x24
 800eca8:	4618      	mov	r0, r3
 800ecaa:	f7fe fbb7 	bl	800d41c <ld_dword>
 800ecae:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ecb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ecb4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ecb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecb8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ecbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecbe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ecc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecc2:	789b      	ldrb	r3, [r3, #2]
 800ecc4:	2b01      	cmp	r3, #1
 800ecc6:	d005      	beq.n	800ecd4 <find_volume+0x23c>
 800ecc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecca:	789b      	ldrb	r3, [r3, #2]
 800eccc:	2b02      	cmp	r3, #2
 800ecce:	d001      	beq.n	800ecd4 <find_volume+0x23c>
 800ecd0:	230d      	movs	r3, #13
 800ecd2:	e15a      	b.n	800ef8a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ecd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecd6:	789b      	ldrb	r3, [r3, #2]
 800ecd8:	461a      	mov	r2, r3
 800ecda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ecdc:	fb02 f303 	mul.w	r3, r2, r3
 800ece0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ece2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ece4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ece8:	b29a      	uxth	r2, r3
 800ecea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecec:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ecee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecf0:	895b      	ldrh	r3, [r3, #10]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d008      	beq.n	800ed08 <find_volume+0x270>
 800ecf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecf8:	895b      	ldrh	r3, [r3, #10]
 800ecfa:	461a      	mov	r2, r3
 800ecfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecfe:	895b      	ldrh	r3, [r3, #10]
 800ed00:	3b01      	subs	r3, #1
 800ed02:	4013      	ands	r3, r2
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d001      	beq.n	800ed0c <find_volume+0x274>
 800ed08:	230d      	movs	r3, #13
 800ed0a:	e13e      	b.n	800ef8a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ed0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed0e:	3334      	adds	r3, #52	; 0x34
 800ed10:	3311      	adds	r3, #17
 800ed12:	4618      	mov	r0, r3
 800ed14:	f7fe fb6a 	bl	800d3ec <ld_word>
 800ed18:	4603      	mov	r3, r0
 800ed1a:	461a      	mov	r2, r3
 800ed1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed1e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ed20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed22:	891b      	ldrh	r3, [r3, #8]
 800ed24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed26:	8992      	ldrh	r2, [r2, #12]
 800ed28:	0952      	lsrs	r2, r2, #5
 800ed2a:	b292      	uxth	r2, r2
 800ed2c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ed30:	fb02 f201 	mul.w	r2, r2, r1
 800ed34:	1a9b      	subs	r3, r3, r2
 800ed36:	b29b      	uxth	r3, r3
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d001      	beq.n	800ed40 <find_volume+0x2a8>
 800ed3c:	230d      	movs	r3, #13
 800ed3e:	e124      	b.n	800ef8a <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ed40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed42:	3334      	adds	r3, #52	; 0x34
 800ed44:	3313      	adds	r3, #19
 800ed46:	4618      	mov	r0, r3
 800ed48:	f7fe fb50 	bl	800d3ec <ld_word>
 800ed4c:	4603      	mov	r3, r0
 800ed4e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ed50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d106      	bne.n	800ed64 <find_volume+0x2cc>
 800ed56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed58:	3334      	adds	r3, #52	; 0x34
 800ed5a:	3320      	adds	r3, #32
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	f7fe fb5d 	bl	800d41c <ld_dword>
 800ed62:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ed64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed66:	3334      	adds	r3, #52	; 0x34
 800ed68:	330e      	adds	r3, #14
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	f7fe fb3e 	bl	800d3ec <ld_word>
 800ed70:	4603      	mov	r3, r0
 800ed72:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ed74:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d104      	bne.n	800ed84 <find_volume+0x2ec>
 800ed7a:	230d      	movs	r3, #13
 800ed7c:	e105      	b.n	800ef8a <find_volume+0x4f2>
 800ed7e:	bf00      	nop
 800ed80:	20000848 	.word	0x20000848

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ed84:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ed86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed88:	4413      	add	r3, r2
 800ed8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed8c:	8911      	ldrh	r1, [r2, #8]
 800ed8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ed90:	8992      	ldrh	r2, [r2, #12]
 800ed92:	0952      	lsrs	r2, r2, #5
 800ed94:	b292      	uxth	r2, r2
 800ed96:	fbb1 f2f2 	udiv	r2, r1, r2
 800ed9a:	b292      	uxth	r2, r2
 800ed9c:	4413      	add	r3, r2
 800ed9e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800eda0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eda4:	429a      	cmp	r2, r3
 800eda6:	d201      	bcs.n	800edac <find_volume+0x314>
 800eda8:	230d      	movs	r3, #13
 800edaa:	e0ee      	b.n	800ef8a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800edac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800edae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edb0:	1ad3      	subs	r3, r2, r3
 800edb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800edb4:	8952      	ldrh	r2, [r2, #10]
 800edb6:	fbb3 f3f2 	udiv	r3, r3, r2
 800edba:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800edbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d101      	bne.n	800edc6 <find_volume+0x32e>
 800edc2:	230d      	movs	r3, #13
 800edc4:	e0e1      	b.n	800ef8a <find_volume+0x4f2>
		fmt = FS_FAT32;
 800edc6:	2303      	movs	r3, #3
 800edc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800edcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edce:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800edd2:	4293      	cmp	r3, r2
 800edd4:	d802      	bhi.n	800eddc <find_volume+0x344>
 800edd6:	2302      	movs	r3, #2
 800edd8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800eddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edde:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ede2:	4293      	cmp	r3, r2
 800ede4:	d802      	bhi.n	800edec <find_volume+0x354>
 800ede6:	2301      	movs	r3, #1
 800ede8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800edec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edee:	1c9a      	adds	r2, r3, #2
 800edf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edf2:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800edf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edf6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800edf8:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800edfa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800edfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800edfe:	441a      	add	r2, r3
 800ee00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee02:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800ee04:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ee06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee08:	441a      	add	r2, r3
 800ee0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee0c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800ee0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ee12:	2b03      	cmp	r3, #3
 800ee14:	d11e      	bne.n	800ee54 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ee16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee18:	3334      	adds	r3, #52	; 0x34
 800ee1a:	332a      	adds	r3, #42	; 0x2a
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	f7fe fae5 	bl	800d3ec <ld_word>
 800ee22:	4603      	mov	r3, r0
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d001      	beq.n	800ee2c <find_volume+0x394>
 800ee28:	230d      	movs	r3, #13
 800ee2a:	e0ae      	b.n	800ef8a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ee2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee2e:	891b      	ldrh	r3, [r3, #8]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d001      	beq.n	800ee38 <find_volume+0x3a0>
 800ee34:	230d      	movs	r3, #13
 800ee36:	e0a8      	b.n	800ef8a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ee38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee3a:	3334      	adds	r3, #52	; 0x34
 800ee3c:	332c      	adds	r3, #44	; 0x2c
 800ee3e:	4618      	mov	r0, r3
 800ee40:	f7fe faec 	bl	800d41c <ld_dword>
 800ee44:	4602      	mov	r2, r0
 800ee46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee48:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ee4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee4c:	699b      	ldr	r3, [r3, #24]
 800ee4e:	009b      	lsls	r3, r3, #2
 800ee50:	647b      	str	r3, [r7, #68]	; 0x44
 800ee52:	e01f      	b.n	800ee94 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ee54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee56:	891b      	ldrh	r3, [r3, #8]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d101      	bne.n	800ee60 <find_volume+0x3c8>
 800ee5c:	230d      	movs	r3, #13
 800ee5e:	e094      	b.n	800ef8a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ee60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee66:	441a      	add	r2, r3
 800ee68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee6a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ee6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ee70:	2b02      	cmp	r3, #2
 800ee72:	d103      	bne.n	800ee7c <find_volume+0x3e4>
 800ee74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee76:	699b      	ldr	r3, [r3, #24]
 800ee78:	005b      	lsls	r3, r3, #1
 800ee7a:	e00a      	b.n	800ee92 <find_volume+0x3fa>
 800ee7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee7e:	699a      	ldr	r2, [r3, #24]
 800ee80:	4613      	mov	r3, r2
 800ee82:	005b      	lsls	r3, r3, #1
 800ee84:	4413      	add	r3, r2
 800ee86:	085a      	lsrs	r2, r3, #1
 800ee88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee8a:	699b      	ldr	r3, [r3, #24]
 800ee8c:	f003 0301 	and.w	r3, r3, #1
 800ee90:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ee92:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ee94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee96:	69da      	ldr	r2, [r3, #28]
 800ee98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee9a:	899b      	ldrh	r3, [r3, #12]
 800ee9c:	4619      	mov	r1, r3
 800ee9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eea0:	440b      	add	r3, r1
 800eea2:	3b01      	subs	r3, #1
 800eea4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800eea6:	8989      	ldrh	r1, [r1, #12]
 800eea8:	fbb3 f3f1 	udiv	r3, r3, r1
 800eeac:	429a      	cmp	r2, r3
 800eeae:	d201      	bcs.n	800eeb4 <find_volume+0x41c>
 800eeb0:	230d      	movs	r3, #13
 800eeb2:	e06a      	b.n	800ef8a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800eeb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eeba:	615a      	str	r2, [r3, #20]
 800eebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eebe:	695a      	ldr	r2, [r3, #20]
 800eec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eec2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800eec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eec6:	2280      	movs	r2, #128	; 0x80
 800eec8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800eeca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eece:	2b03      	cmp	r3, #3
 800eed0:	d149      	bne.n	800ef66 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800eed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eed4:	3334      	adds	r3, #52	; 0x34
 800eed6:	3330      	adds	r3, #48	; 0x30
 800eed8:	4618      	mov	r0, r3
 800eeda:	f7fe fa87 	bl	800d3ec <ld_word>
 800eede:	4603      	mov	r3, r0
 800eee0:	2b01      	cmp	r3, #1
 800eee2:	d140      	bne.n	800ef66 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800eee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eee6:	3301      	adds	r3, #1
 800eee8:	4619      	mov	r1, r3
 800eeea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800eeec:	f7fe fd2e 	bl	800d94c <move_window>
 800eef0:	4603      	mov	r3, r0
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d137      	bne.n	800ef66 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800eef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eef8:	2200      	movs	r2, #0
 800eefa:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800eefc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eefe:	3334      	adds	r3, #52	; 0x34
 800ef00:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ef04:	4618      	mov	r0, r3
 800ef06:	f7fe fa71 	bl	800d3ec <ld_word>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	461a      	mov	r2, r3
 800ef0e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ef12:	429a      	cmp	r2, r3
 800ef14:	d127      	bne.n	800ef66 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ef16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef18:	3334      	adds	r3, #52	; 0x34
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f7fe fa7e 	bl	800d41c <ld_dword>
 800ef20:	4602      	mov	r2, r0
 800ef22:	4b1c      	ldr	r3, [pc, #112]	; (800ef94 <find_volume+0x4fc>)
 800ef24:	429a      	cmp	r2, r3
 800ef26:	d11e      	bne.n	800ef66 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ef28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef2a:	3334      	adds	r3, #52	; 0x34
 800ef2c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ef30:	4618      	mov	r0, r3
 800ef32:	f7fe fa73 	bl	800d41c <ld_dword>
 800ef36:	4602      	mov	r2, r0
 800ef38:	4b17      	ldr	r3, [pc, #92]	; (800ef98 <find_volume+0x500>)
 800ef3a:	429a      	cmp	r2, r3
 800ef3c:	d113      	bne.n	800ef66 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ef3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef40:	3334      	adds	r3, #52	; 0x34
 800ef42:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ef46:	4618      	mov	r0, r3
 800ef48:	f7fe fa68 	bl	800d41c <ld_dword>
 800ef4c:	4602      	mov	r2, r0
 800ef4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef50:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ef52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef54:	3334      	adds	r3, #52	; 0x34
 800ef56:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f7fe fa5e 	bl	800d41c <ld_dword>
 800ef60:	4602      	mov	r2, r0
 800ef62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef64:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ef66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef68:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ef6c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ef6e:	4b0b      	ldr	r3, [pc, #44]	; (800ef9c <find_volume+0x504>)
 800ef70:	881b      	ldrh	r3, [r3, #0]
 800ef72:	3301      	adds	r3, #1
 800ef74:	b29a      	uxth	r2, r3
 800ef76:	4b09      	ldr	r3, [pc, #36]	; (800ef9c <find_volume+0x504>)
 800ef78:	801a      	strh	r2, [r3, #0]
 800ef7a:	4b08      	ldr	r3, [pc, #32]	; (800ef9c <find_volume+0x504>)
 800ef7c:	881a      	ldrh	r2, [r3, #0]
 800ef7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef80:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ef82:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ef84:	f7fe fc7a 	bl	800d87c <clear_lock>
#endif
	return FR_OK;
 800ef88:	2300      	movs	r3, #0
}
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	3758      	adds	r7, #88	; 0x58
 800ef8e:	46bd      	mov	sp, r7
 800ef90:	bd80      	pop	{r7, pc}
 800ef92:	bf00      	nop
 800ef94:	41615252 	.word	0x41615252
 800ef98:	61417272 	.word	0x61417272
 800ef9c:	2000084c 	.word	0x2000084c

0800efa0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b084      	sub	sp, #16
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
 800efa8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800efaa:	2309      	movs	r3, #9
 800efac:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d01c      	beq.n	800efee <validate+0x4e>
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d018      	beq.n	800efee <validate+0x4e>
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	781b      	ldrb	r3, [r3, #0]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d013      	beq.n	800efee <validate+0x4e>
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	889a      	ldrh	r2, [r3, #4]
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	88db      	ldrh	r3, [r3, #6]
 800efd0:	429a      	cmp	r2, r3
 800efd2:	d10c      	bne.n	800efee <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	785b      	ldrb	r3, [r3, #1]
 800efda:	4618      	mov	r0, r3
 800efdc:	f7fe f968 	bl	800d2b0 <disk_status>
 800efe0:	4603      	mov	r3, r0
 800efe2:	f003 0301 	and.w	r3, r3, #1
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d101      	bne.n	800efee <validate+0x4e>
			res = FR_OK;
 800efea:	2300      	movs	r3, #0
 800efec:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800efee:	7bfb      	ldrb	r3, [r7, #15]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d102      	bne.n	800effa <validate+0x5a>
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	e000      	b.n	800effc <validate+0x5c>
 800effa:	2300      	movs	r3, #0
 800effc:	683a      	ldr	r2, [r7, #0]
 800effe:	6013      	str	r3, [r2, #0]
	return res;
 800f000:	7bfb      	ldrb	r3, [r7, #15]
}
 800f002:	4618      	mov	r0, r3
 800f004:	3710      	adds	r7, #16
 800f006:	46bd      	mov	sp, r7
 800f008:	bd80      	pop	{r7, pc}
	...

0800f00c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b088      	sub	sp, #32
 800f010:	af00      	add	r7, sp, #0
 800f012:	60f8      	str	r0, [r7, #12]
 800f014:	60b9      	str	r1, [r7, #8]
 800f016:	4613      	mov	r3, r2
 800f018:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f01a:	68bb      	ldr	r3, [r7, #8]
 800f01c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f01e:	f107 0310 	add.w	r3, r7, #16
 800f022:	4618      	mov	r0, r3
 800f024:	f7ff fc9e 	bl	800e964 <get_ldnumber>
 800f028:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f02a:	69fb      	ldr	r3, [r7, #28]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	da01      	bge.n	800f034 <f_mount+0x28>
 800f030:	230b      	movs	r3, #11
 800f032:	e02b      	b.n	800f08c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f034:	4a17      	ldr	r2, [pc, #92]	; (800f094 <f_mount+0x88>)
 800f036:	69fb      	ldr	r3, [r7, #28]
 800f038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f03c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f03e:	69bb      	ldr	r3, [r7, #24]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d005      	beq.n	800f050 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f044:	69b8      	ldr	r0, [r7, #24]
 800f046:	f7fe fc19 	bl	800d87c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f04a:	69bb      	ldr	r3, [r7, #24]
 800f04c:	2200      	movs	r2, #0
 800f04e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d002      	beq.n	800f05c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	2200      	movs	r2, #0
 800f05a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f05c:	68fa      	ldr	r2, [r7, #12]
 800f05e:	490d      	ldr	r1, [pc, #52]	; (800f094 <f_mount+0x88>)
 800f060:	69fb      	ldr	r3, [r7, #28]
 800f062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d002      	beq.n	800f072 <f_mount+0x66>
 800f06c:	79fb      	ldrb	r3, [r7, #7]
 800f06e:	2b01      	cmp	r3, #1
 800f070:	d001      	beq.n	800f076 <f_mount+0x6a>
 800f072:	2300      	movs	r3, #0
 800f074:	e00a      	b.n	800f08c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f076:	f107 010c 	add.w	r1, r7, #12
 800f07a:	f107 0308 	add.w	r3, r7, #8
 800f07e:	2200      	movs	r2, #0
 800f080:	4618      	mov	r0, r3
 800f082:	f7ff fd09 	bl	800ea98 <find_volume>
 800f086:	4603      	mov	r3, r0
 800f088:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f08a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f08c:	4618      	mov	r0, r3
 800f08e:	3720      	adds	r7, #32
 800f090:	46bd      	mov	sp, r7
 800f092:	bd80      	pop	{r7, pc}
 800f094:	20000848 	.word	0x20000848

0800f098 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b098      	sub	sp, #96	; 0x60
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	60f8      	str	r0, [r7, #12]
 800f0a0:	60b9      	str	r1, [r7, #8]
 800f0a2:	4613      	mov	r3, r2
 800f0a4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d101      	bne.n	800f0b0 <f_open+0x18>
 800f0ac:	2309      	movs	r3, #9
 800f0ae:	e1bb      	b.n	800f428 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f0b0:	79fb      	ldrb	r3, [r7, #7]
 800f0b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f0b6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f0b8:	79fa      	ldrb	r2, [r7, #7]
 800f0ba:	f107 0110 	add.w	r1, r7, #16
 800f0be:	f107 0308 	add.w	r3, r7, #8
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f7ff fce8 	bl	800ea98 <find_volume>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800f0ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	f040 819f 	bne.w	800f416 <f_open+0x37e>
		dj.obj.fs = fs;
 800f0d8:	693b      	ldr	r3, [r7, #16]
 800f0da:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f0dc:	68ba      	ldr	r2, [r7, #8]
 800f0de:	f107 0314 	add.w	r3, r7, #20
 800f0e2:	4611      	mov	r1, r2
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	f7ff fbc7 	bl	800e878 <follow_path>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f0f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d11a      	bne.n	800f12e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f0f8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f0fc:	b25b      	sxtb	r3, r3
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	da03      	bge.n	800f10a <f_open+0x72>
				res = FR_INVALID_NAME;
 800f102:	2306      	movs	r3, #6
 800f104:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f108:	e011      	b.n	800f12e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f10a:	79fb      	ldrb	r3, [r7, #7]
 800f10c:	f023 0301 	bic.w	r3, r3, #1
 800f110:	2b00      	cmp	r3, #0
 800f112:	bf14      	ite	ne
 800f114:	2301      	movne	r3, #1
 800f116:	2300      	moveq	r3, #0
 800f118:	b2db      	uxtb	r3, r3
 800f11a:	461a      	mov	r2, r3
 800f11c:	f107 0314 	add.w	r3, r7, #20
 800f120:	4611      	mov	r1, r2
 800f122:	4618      	mov	r0, r3
 800f124:	f7fe fa62 	bl	800d5ec <chk_lock>
 800f128:	4603      	mov	r3, r0
 800f12a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f12e:	79fb      	ldrb	r3, [r7, #7]
 800f130:	f003 031c 	and.w	r3, r3, #28
 800f134:	2b00      	cmp	r3, #0
 800f136:	d07f      	beq.n	800f238 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800f138:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	d017      	beq.n	800f170 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f140:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f144:	2b04      	cmp	r3, #4
 800f146:	d10e      	bne.n	800f166 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f148:	f7fe faac 	bl	800d6a4 <enq_lock>
 800f14c:	4603      	mov	r3, r0
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d006      	beq.n	800f160 <f_open+0xc8>
 800f152:	f107 0314 	add.w	r3, r7, #20
 800f156:	4618      	mov	r0, r3
 800f158:	f7ff fa68 	bl	800e62c <dir_register>
 800f15c:	4603      	mov	r3, r0
 800f15e:	e000      	b.n	800f162 <f_open+0xca>
 800f160:	2312      	movs	r3, #18
 800f162:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f166:	79fb      	ldrb	r3, [r7, #7]
 800f168:	f043 0308 	orr.w	r3, r3, #8
 800f16c:	71fb      	strb	r3, [r7, #7]
 800f16e:	e010      	b.n	800f192 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f170:	7ebb      	ldrb	r3, [r7, #26]
 800f172:	f003 0311 	and.w	r3, r3, #17
 800f176:	2b00      	cmp	r3, #0
 800f178:	d003      	beq.n	800f182 <f_open+0xea>
					res = FR_DENIED;
 800f17a:	2307      	movs	r3, #7
 800f17c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f180:	e007      	b.n	800f192 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f182:	79fb      	ldrb	r3, [r7, #7]
 800f184:	f003 0304 	and.w	r3, r3, #4
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d002      	beq.n	800f192 <f_open+0xfa>
 800f18c:	2308      	movs	r3, #8
 800f18e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f192:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f196:	2b00      	cmp	r3, #0
 800f198:	d168      	bne.n	800f26c <f_open+0x1d4>
 800f19a:	79fb      	ldrb	r3, [r7, #7]
 800f19c:	f003 0308 	and.w	r3, r3, #8
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d063      	beq.n	800f26c <f_open+0x1d4>
				dw = GET_FATTIME();
 800f1a4:	f7fd fe32 	bl	800ce0c <get_fattime>
 800f1a8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f1aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1ac:	330e      	adds	r3, #14
 800f1ae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	f7fe f971 	bl	800d498 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f1b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1b8:	3316      	adds	r3, #22
 800f1ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f1bc:	4618      	mov	r0, r3
 800f1be:	f7fe f96b 	bl	800d498 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f1c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1c4:	330b      	adds	r3, #11
 800f1c6:	2220      	movs	r2, #32
 800f1c8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f1ca:	693b      	ldr	r3, [r7, #16]
 800f1cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f1ce:	4611      	mov	r1, r2
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	f7ff f93a 	bl	800e44a <ld_clust>
 800f1d6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f1d8:	693b      	ldr	r3, [r7, #16]
 800f1da:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f1dc:	2200      	movs	r2, #0
 800f1de:	4618      	mov	r0, r3
 800f1e0:	f7ff f952 	bl	800e488 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f1e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1e6:	331c      	adds	r3, #28
 800f1e8:	2100      	movs	r1, #0
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	f7fe f954 	bl	800d498 <st_dword>
					fs->wflag = 1;
 800f1f0:	693b      	ldr	r3, [r7, #16]
 800f1f2:	2201      	movs	r2, #1
 800f1f4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f1f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d037      	beq.n	800f26c <f_open+0x1d4>
						dw = fs->winsect;
 800f1fc:	693b      	ldr	r3, [r7, #16]
 800f1fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f200:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800f202:	f107 0314 	add.w	r3, r7, #20
 800f206:	2200      	movs	r2, #0
 800f208:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f20a:	4618      	mov	r0, r3
 800f20c:	f7fe fe42 	bl	800de94 <remove_chain>
 800f210:	4603      	mov	r3, r0
 800f212:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800f216:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d126      	bne.n	800f26c <f_open+0x1d4>
							res = move_window(fs, dw);
 800f21e:	693b      	ldr	r3, [r7, #16]
 800f220:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f222:	4618      	mov	r0, r3
 800f224:	f7fe fb92 	bl	800d94c <move_window>
 800f228:	4603      	mov	r3, r0
 800f22a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f22e:	693b      	ldr	r3, [r7, #16]
 800f230:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f232:	3a01      	subs	r2, #1
 800f234:	611a      	str	r2, [r3, #16]
 800f236:	e019      	b.n	800f26c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f238:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d115      	bne.n	800f26c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f240:	7ebb      	ldrb	r3, [r7, #26]
 800f242:	f003 0310 	and.w	r3, r3, #16
 800f246:	2b00      	cmp	r3, #0
 800f248:	d003      	beq.n	800f252 <f_open+0x1ba>
					res = FR_NO_FILE;
 800f24a:	2304      	movs	r3, #4
 800f24c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f250:	e00c      	b.n	800f26c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f252:	79fb      	ldrb	r3, [r7, #7]
 800f254:	f003 0302 	and.w	r3, r3, #2
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d007      	beq.n	800f26c <f_open+0x1d4>
 800f25c:	7ebb      	ldrb	r3, [r7, #26]
 800f25e:	f003 0301 	and.w	r3, r3, #1
 800f262:	2b00      	cmp	r3, #0
 800f264:	d002      	beq.n	800f26c <f_open+0x1d4>
						res = FR_DENIED;
 800f266:	2307      	movs	r3, #7
 800f268:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800f26c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f270:	2b00      	cmp	r3, #0
 800f272:	d128      	bne.n	800f2c6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f274:	79fb      	ldrb	r3, [r7, #7]
 800f276:	f003 0308 	and.w	r3, r3, #8
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d003      	beq.n	800f286 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800f27e:	79fb      	ldrb	r3, [r7, #7]
 800f280:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f284:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f286:	693b      	ldr	r3, [r7, #16]
 800f288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800f28e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f294:	79fb      	ldrb	r3, [r7, #7]
 800f296:	f023 0301 	bic.w	r3, r3, #1
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	bf14      	ite	ne
 800f29e:	2301      	movne	r3, #1
 800f2a0:	2300      	moveq	r3, #0
 800f2a2:	b2db      	uxtb	r3, r3
 800f2a4:	461a      	mov	r2, r3
 800f2a6:	f107 0314 	add.w	r3, r7, #20
 800f2aa:	4611      	mov	r1, r2
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	f7fe fa1b 	bl	800d6e8 <inc_lock>
 800f2b2:	4602      	mov	r2, r0
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	691b      	ldr	r3, [r3, #16]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d102      	bne.n	800f2c6 <f_open+0x22e>
 800f2c0:	2302      	movs	r3, #2
 800f2c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f2c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	f040 80a3 	bne.w	800f416 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f2d0:	693b      	ldr	r3, [r7, #16]
 800f2d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f2d4:	4611      	mov	r1, r2
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f7ff f8b7 	bl	800e44a <ld_clust>
 800f2dc:	4602      	mov	r2, r0
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f2e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2e4:	331c      	adds	r3, #28
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	f7fe f898 	bl	800d41c <ld_dword>
 800f2ec:	4602      	mov	r2, r0
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f2f8:	693a      	ldr	r2, [r7, #16]
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f2fe:	693b      	ldr	r3, [r7, #16]
 800f300:	88da      	ldrh	r2, [r3, #6]
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	79fa      	ldrb	r2, [r7, #7]
 800f30a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	2200      	movs	r2, #0
 800f310:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	2200      	movs	r2, #0
 800f316:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	2200      	movs	r2, #0
 800f31c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	3330      	adds	r3, #48	; 0x30
 800f322:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f326:	2100      	movs	r1, #0
 800f328:	4618      	mov	r0, r3
 800f32a:	f7fe f902 	bl	800d532 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f32e:	79fb      	ldrb	r3, [r7, #7]
 800f330:	f003 0320 	and.w	r3, r3, #32
 800f334:	2b00      	cmp	r3, #0
 800f336:	d06e      	beq.n	800f416 <f_open+0x37e>
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	68db      	ldr	r3, [r3, #12]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d06a      	beq.n	800f416 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	68da      	ldr	r2, [r3, #12]
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f348:	693b      	ldr	r3, [r7, #16]
 800f34a:	895b      	ldrh	r3, [r3, #10]
 800f34c:	461a      	mov	r2, r3
 800f34e:	693b      	ldr	r3, [r7, #16]
 800f350:	899b      	ldrh	r3, [r3, #12]
 800f352:	fb03 f302 	mul.w	r3, r3, r2
 800f356:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	689b      	ldr	r3, [r3, #8]
 800f35c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	68db      	ldr	r3, [r3, #12]
 800f362:	657b      	str	r3, [r7, #84]	; 0x54
 800f364:	e016      	b.n	800f394 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f36a:	4618      	mov	r0, r3
 800f36c:	f7fe fbab 	bl	800dac6 <get_fat>
 800f370:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800f372:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f374:	2b01      	cmp	r3, #1
 800f376:	d802      	bhi.n	800f37e <f_open+0x2e6>
 800f378:	2302      	movs	r3, #2
 800f37a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f37e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f380:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f384:	d102      	bne.n	800f38c <f_open+0x2f4>
 800f386:	2301      	movs	r3, #1
 800f388:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f38c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f38e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f390:	1ad3      	subs	r3, r2, r3
 800f392:	657b      	str	r3, [r7, #84]	; 0x54
 800f394:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d103      	bne.n	800f3a4 <f_open+0x30c>
 800f39c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f39e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f3a0:	429a      	cmp	r2, r3
 800f3a2:	d8e0      	bhi.n	800f366 <f_open+0x2ce>
				}
				fp->clust = clst;
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f3a8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f3aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d131      	bne.n	800f416 <f_open+0x37e>
 800f3b2:	693b      	ldr	r3, [r7, #16]
 800f3b4:	899b      	ldrh	r3, [r3, #12]
 800f3b6:	461a      	mov	r2, r3
 800f3b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3ba:	fbb3 f1f2 	udiv	r1, r3, r2
 800f3be:	fb02 f201 	mul.w	r2, r2, r1
 800f3c2:	1a9b      	subs	r3, r3, r2
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d026      	beq.n	800f416 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f3c8:	693b      	ldr	r3, [r7, #16]
 800f3ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	f7fe fb5b 	bl	800da88 <clust2sect>
 800f3d2:	6478      	str	r0, [r7, #68]	; 0x44
 800f3d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d103      	bne.n	800f3e2 <f_open+0x34a>
						res = FR_INT_ERR;
 800f3da:	2302      	movs	r3, #2
 800f3dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f3e0:	e019      	b.n	800f416 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f3e2:	693b      	ldr	r3, [r7, #16]
 800f3e4:	899b      	ldrh	r3, [r3, #12]
 800f3e6:	461a      	mov	r2, r3
 800f3e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3ea:	fbb3 f2f2 	udiv	r2, r3, r2
 800f3ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f3f0:	441a      	add	r2, r3
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f3f6:	693b      	ldr	r3, [r7, #16]
 800f3f8:	7858      	ldrb	r0, [r3, #1]
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	6a1a      	ldr	r2, [r3, #32]
 800f404:	2301      	movs	r3, #1
 800f406:	f7fd ff93 	bl	800d330 <disk_read>
 800f40a:	4603      	mov	r3, r0
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d002      	beq.n	800f416 <f_open+0x37e>
 800f410:	2301      	movs	r3, #1
 800f412:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f416:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d002      	beq.n	800f424 <f_open+0x38c>
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	2200      	movs	r2, #0
 800f422:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f424:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800f428:	4618      	mov	r0, r3
 800f42a:	3760      	adds	r7, #96	; 0x60
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bd80      	pop	{r7, pc}

0800f430 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b08e      	sub	sp, #56	; 0x38
 800f434:	af00      	add	r7, sp, #0
 800f436:	60f8      	str	r0, [r7, #12]
 800f438:	60b9      	str	r1, [r7, #8]
 800f43a:	607a      	str	r2, [r7, #4]
 800f43c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800f43e:	68bb      	ldr	r3, [r7, #8]
 800f440:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800f442:	683b      	ldr	r3, [r7, #0]
 800f444:	2200      	movs	r2, #0
 800f446:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	f107 0214 	add.w	r2, r7, #20
 800f44e:	4611      	mov	r1, r2
 800f450:	4618      	mov	r0, r3
 800f452:	f7ff fda5 	bl	800efa0 <validate>
 800f456:	4603      	mov	r3, r0
 800f458:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f45c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f460:	2b00      	cmp	r3, #0
 800f462:	d107      	bne.n	800f474 <f_read+0x44>
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	7d5b      	ldrb	r3, [r3, #21]
 800f468:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f46c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f470:	2b00      	cmp	r3, #0
 800f472:	d002      	beq.n	800f47a <f_read+0x4a>
 800f474:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f478:	e135      	b.n	800f6e6 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	7d1b      	ldrb	r3, [r3, #20]
 800f47e:	f003 0301 	and.w	r3, r3, #1
 800f482:	2b00      	cmp	r3, #0
 800f484:	d101      	bne.n	800f48a <f_read+0x5a>
 800f486:	2307      	movs	r3, #7
 800f488:	e12d      	b.n	800f6e6 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	68da      	ldr	r2, [r3, #12]
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	699b      	ldr	r3, [r3, #24]
 800f492:	1ad3      	subs	r3, r2, r3
 800f494:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800f496:	687a      	ldr	r2, [r7, #4]
 800f498:	6a3b      	ldr	r3, [r7, #32]
 800f49a:	429a      	cmp	r2, r3
 800f49c:	f240 811e 	bls.w	800f6dc <f_read+0x2ac>
 800f4a0:	6a3b      	ldr	r3, [r7, #32]
 800f4a2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800f4a4:	e11a      	b.n	800f6dc <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	699b      	ldr	r3, [r3, #24]
 800f4aa:	697a      	ldr	r2, [r7, #20]
 800f4ac:	8992      	ldrh	r2, [r2, #12]
 800f4ae:	fbb3 f1f2 	udiv	r1, r3, r2
 800f4b2:	fb02 f201 	mul.w	r2, r2, r1
 800f4b6:	1a9b      	subs	r3, r3, r2
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	f040 80d5 	bne.w	800f668 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	699b      	ldr	r3, [r3, #24]
 800f4c2:	697a      	ldr	r2, [r7, #20]
 800f4c4:	8992      	ldrh	r2, [r2, #12]
 800f4c6:	fbb3 f3f2 	udiv	r3, r3, r2
 800f4ca:	697a      	ldr	r2, [r7, #20]
 800f4cc:	8952      	ldrh	r2, [r2, #10]
 800f4ce:	3a01      	subs	r2, #1
 800f4d0:	4013      	ands	r3, r2
 800f4d2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800f4d4:	69fb      	ldr	r3, [r7, #28]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d12f      	bne.n	800f53a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	699b      	ldr	r3, [r3, #24]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d103      	bne.n	800f4ea <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	689b      	ldr	r3, [r3, #8]
 800f4e6:	633b      	str	r3, [r7, #48]	; 0x30
 800f4e8:	e013      	b.n	800f512 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d007      	beq.n	800f502 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	699b      	ldr	r3, [r3, #24]
 800f4f6:	4619      	mov	r1, r3
 800f4f8:	68f8      	ldr	r0, [r7, #12]
 800f4fa:	f7fe fdc8 	bl	800e08e <clmt_clust>
 800f4fe:	6338      	str	r0, [r7, #48]	; 0x30
 800f500:	e007      	b.n	800f512 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800f502:	68fa      	ldr	r2, [r7, #12]
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	69db      	ldr	r3, [r3, #28]
 800f508:	4619      	mov	r1, r3
 800f50a:	4610      	mov	r0, r2
 800f50c:	f7fe fadb 	bl	800dac6 <get_fat>
 800f510:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800f512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f514:	2b01      	cmp	r3, #1
 800f516:	d804      	bhi.n	800f522 <f_read+0xf2>
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	2202      	movs	r2, #2
 800f51c:	755a      	strb	r2, [r3, #21]
 800f51e:	2302      	movs	r3, #2
 800f520:	e0e1      	b.n	800f6e6 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f524:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f528:	d104      	bne.n	800f534 <f_read+0x104>
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	2201      	movs	r2, #1
 800f52e:	755a      	strb	r2, [r3, #21]
 800f530:	2301      	movs	r3, #1
 800f532:	e0d8      	b.n	800f6e6 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f538:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f53a:	697a      	ldr	r2, [r7, #20]
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	69db      	ldr	r3, [r3, #28]
 800f540:	4619      	mov	r1, r3
 800f542:	4610      	mov	r0, r2
 800f544:	f7fe faa0 	bl	800da88 <clust2sect>
 800f548:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f54a:	69bb      	ldr	r3, [r7, #24]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d104      	bne.n	800f55a <f_read+0x12a>
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	2202      	movs	r2, #2
 800f554:	755a      	strb	r2, [r3, #21]
 800f556:	2302      	movs	r3, #2
 800f558:	e0c5      	b.n	800f6e6 <f_read+0x2b6>
			sect += csect;
 800f55a:	69ba      	ldr	r2, [r7, #24]
 800f55c:	69fb      	ldr	r3, [r7, #28]
 800f55e:	4413      	add	r3, r2
 800f560:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800f562:	697b      	ldr	r3, [r7, #20]
 800f564:	899b      	ldrh	r3, [r3, #12]
 800f566:	461a      	mov	r2, r3
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	fbb3 f3f2 	udiv	r3, r3, r2
 800f56e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800f570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f572:	2b00      	cmp	r3, #0
 800f574:	d041      	beq.n	800f5fa <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f576:	69fa      	ldr	r2, [r7, #28]
 800f578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f57a:	4413      	add	r3, r2
 800f57c:	697a      	ldr	r2, [r7, #20]
 800f57e:	8952      	ldrh	r2, [r2, #10]
 800f580:	4293      	cmp	r3, r2
 800f582:	d905      	bls.n	800f590 <f_read+0x160>
					cc = fs->csize - csect;
 800f584:	697b      	ldr	r3, [r7, #20]
 800f586:	895b      	ldrh	r3, [r3, #10]
 800f588:	461a      	mov	r2, r3
 800f58a:	69fb      	ldr	r3, [r7, #28]
 800f58c:	1ad3      	subs	r3, r2, r3
 800f58e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f590:	697b      	ldr	r3, [r7, #20]
 800f592:	7858      	ldrb	r0, [r3, #1]
 800f594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f596:	69ba      	ldr	r2, [r7, #24]
 800f598:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f59a:	f7fd fec9 	bl	800d330 <disk_read>
 800f59e:	4603      	mov	r3, r0
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d004      	beq.n	800f5ae <f_read+0x17e>
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	2201      	movs	r2, #1
 800f5a8:	755a      	strb	r2, [r3, #21]
 800f5aa:	2301      	movs	r3, #1
 800f5ac:	e09b      	b.n	800f6e6 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	7d1b      	ldrb	r3, [r3, #20]
 800f5b2:	b25b      	sxtb	r3, r3
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	da18      	bge.n	800f5ea <f_read+0x1ba>
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	6a1a      	ldr	r2, [r3, #32]
 800f5bc:	69bb      	ldr	r3, [r7, #24]
 800f5be:	1ad3      	subs	r3, r2, r3
 800f5c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f5c2:	429a      	cmp	r2, r3
 800f5c4:	d911      	bls.n	800f5ea <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	6a1a      	ldr	r2, [r3, #32]
 800f5ca:	69bb      	ldr	r3, [r7, #24]
 800f5cc:	1ad3      	subs	r3, r2, r3
 800f5ce:	697a      	ldr	r2, [r7, #20]
 800f5d0:	8992      	ldrh	r2, [r2, #12]
 800f5d2:	fb02 f303 	mul.w	r3, r2, r3
 800f5d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5d8:	18d0      	adds	r0, r2, r3
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f5e0:	697b      	ldr	r3, [r7, #20]
 800f5e2:	899b      	ldrh	r3, [r3, #12]
 800f5e4:	461a      	mov	r2, r3
 800f5e6:	f7fd ff83 	bl	800d4f0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800f5ea:	697b      	ldr	r3, [r7, #20]
 800f5ec:	899b      	ldrh	r3, [r3, #12]
 800f5ee:	461a      	mov	r2, r3
 800f5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5f2:	fb02 f303 	mul.w	r3, r2, r3
 800f5f6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800f5f8:	e05c      	b.n	800f6b4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	6a1b      	ldr	r3, [r3, #32]
 800f5fe:	69ba      	ldr	r2, [r7, #24]
 800f600:	429a      	cmp	r2, r3
 800f602:	d02e      	beq.n	800f662 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	7d1b      	ldrb	r3, [r3, #20]
 800f608:	b25b      	sxtb	r3, r3
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	da18      	bge.n	800f640 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f60e:	697b      	ldr	r3, [r7, #20]
 800f610:	7858      	ldrb	r0, [r3, #1]
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	6a1a      	ldr	r2, [r3, #32]
 800f61c:	2301      	movs	r3, #1
 800f61e:	f7fd fea7 	bl	800d370 <disk_write>
 800f622:	4603      	mov	r3, r0
 800f624:	2b00      	cmp	r3, #0
 800f626:	d004      	beq.n	800f632 <f_read+0x202>
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	2201      	movs	r2, #1
 800f62c:	755a      	strb	r2, [r3, #21]
 800f62e:	2301      	movs	r3, #1
 800f630:	e059      	b.n	800f6e6 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	7d1b      	ldrb	r3, [r3, #20]
 800f636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f63a:	b2da      	uxtb	r2, r3
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f640:	697b      	ldr	r3, [r7, #20]
 800f642:	7858      	ldrb	r0, [r3, #1]
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f64a:	2301      	movs	r3, #1
 800f64c:	69ba      	ldr	r2, [r7, #24]
 800f64e:	f7fd fe6f 	bl	800d330 <disk_read>
 800f652:	4603      	mov	r3, r0
 800f654:	2b00      	cmp	r3, #0
 800f656:	d004      	beq.n	800f662 <f_read+0x232>
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	2201      	movs	r2, #1
 800f65c:	755a      	strb	r2, [r3, #21]
 800f65e:	2301      	movs	r3, #1
 800f660:	e041      	b.n	800f6e6 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	69ba      	ldr	r2, [r7, #24]
 800f666:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f668:	697b      	ldr	r3, [r7, #20]
 800f66a:	899b      	ldrh	r3, [r3, #12]
 800f66c:	4618      	mov	r0, r3
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	699b      	ldr	r3, [r3, #24]
 800f672:	697a      	ldr	r2, [r7, #20]
 800f674:	8992      	ldrh	r2, [r2, #12]
 800f676:	fbb3 f1f2 	udiv	r1, r3, r2
 800f67a:	fb02 f201 	mul.w	r2, r2, r1
 800f67e:	1a9b      	subs	r3, r3, r2
 800f680:	1ac3      	subs	r3, r0, r3
 800f682:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800f684:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	429a      	cmp	r2, r3
 800f68a:	d901      	bls.n	800f690 <f_read+0x260>
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	699b      	ldr	r3, [r3, #24]
 800f69a:	697a      	ldr	r2, [r7, #20]
 800f69c:	8992      	ldrh	r2, [r2, #12]
 800f69e:	fbb3 f0f2 	udiv	r0, r3, r2
 800f6a2:	fb02 f200 	mul.w	r2, r2, r0
 800f6a6:	1a9b      	subs	r3, r3, r2
 800f6a8:	440b      	add	r3, r1
 800f6aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f6ac:	4619      	mov	r1, r3
 800f6ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f6b0:	f7fd ff1e 	bl	800d4f0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800f6b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6b8:	4413      	add	r3, r2
 800f6ba:	627b      	str	r3, [r7, #36]	; 0x24
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	699a      	ldr	r2, [r3, #24]
 800f6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6c2:	441a      	add	r2, r3
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	619a      	str	r2, [r3, #24]
 800f6c8:	683b      	ldr	r3, [r7, #0]
 800f6ca:	681a      	ldr	r2, [r3, #0]
 800f6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ce:	441a      	add	r2, r3
 800f6d0:	683b      	ldr	r3, [r7, #0]
 800f6d2:	601a      	str	r2, [r3, #0]
 800f6d4:	687a      	ldr	r2, [r7, #4]
 800f6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6d8:	1ad3      	subs	r3, r2, r3
 800f6da:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	f47f aee1 	bne.w	800f4a6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800f6e4:	2300      	movs	r3, #0
}
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	3738      	adds	r7, #56	; 0x38
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	bd80      	pop	{r7, pc}

0800f6ee <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f6ee:	b580      	push	{r7, lr}
 800f6f0:	b08c      	sub	sp, #48	; 0x30
 800f6f2:	af00      	add	r7, sp, #0
 800f6f4:	60f8      	str	r0, [r7, #12]
 800f6f6:	60b9      	str	r1, [r7, #8]
 800f6f8:	607a      	str	r2, [r7, #4]
 800f6fa:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f6fc:	68bb      	ldr	r3, [r7, #8]
 800f6fe:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f700:	683b      	ldr	r3, [r7, #0]
 800f702:	2200      	movs	r2, #0
 800f704:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	f107 0210 	add.w	r2, r7, #16
 800f70c:	4611      	mov	r1, r2
 800f70e:	4618      	mov	r0, r3
 800f710:	f7ff fc46 	bl	800efa0 <validate>
 800f714:	4603      	mov	r3, r0
 800f716:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f71a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d107      	bne.n	800f732 <f_write+0x44>
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	7d5b      	ldrb	r3, [r3, #21]
 800f726:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f72a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d002      	beq.n	800f738 <f_write+0x4a>
 800f732:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f736:	e16a      	b.n	800fa0e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	7d1b      	ldrb	r3, [r3, #20]
 800f73c:	f003 0302 	and.w	r3, r3, #2
 800f740:	2b00      	cmp	r3, #0
 800f742:	d101      	bne.n	800f748 <f_write+0x5a>
 800f744:	2307      	movs	r3, #7
 800f746:	e162      	b.n	800fa0e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	699a      	ldr	r2, [r3, #24]
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	441a      	add	r2, r3
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	699b      	ldr	r3, [r3, #24]
 800f754:	429a      	cmp	r2, r3
 800f756:	f080 814c 	bcs.w	800f9f2 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	699b      	ldr	r3, [r3, #24]
 800f75e:	43db      	mvns	r3, r3
 800f760:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f762:	e146      	b.n	800f9f2 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	699b      	ldr	r3, [r3, #24]
 800f768:	693a      	ldr	r2, [r7, #16]
 800f76a:	8992      	ldrh	r2, [r2, #12]
 800f76c:	fbb3 f1f2 	udiv	r1, r3, r2
 800f770:	fb02 f201 	mul.w	r2, r2, r1
 800f774:	1a9b      	subs	r3, r3, r2
 800f776:	2b00      	cmp	r3, #0
 800f778:	f040 80f1 	bne.w	800f95e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	699b      	ldr	r3, [r3, #24]
 800f780:	693a      	ldr	r2, [r7, #16]
 800f782:	8992      	ldrh	r2, [r2, #12]
 800f784:	fbb3 f3f2 	udiv	r3, r3, r2
 800f788:	693a      	ldr	r2, [r7, #16]
 800f78a:	8952      	ldrh	r2, [r2, #10]
 800f78c:	3a01      	subs	r2, #1
 800f78e:	4013      	ands	r3, r2
 800f790:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f792:	69bb      	ldr	r3, [r7, #24]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d143      	bne.n	800f820 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	699b      	ldr	r3, [r3, #24]
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d10c      	bne.n	800f7ba <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	689b      	ldr	r3, [r3, #8]
 800f7a4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d11a      	bne.n	800f7e2 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	2100      	movs	r1, #0
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	f7fe fbd4 	bl	800df5e <create_chain>
 800f7b6:	62b8      	str	r0, [r7, #40]	; 0x28
 800f7b8:	e013      	b.n	800f7e2 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d007      	beq.n	800f7d2 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	699b      	ldr	r3, [r3, #24]
 800f7c6:	4619      	mov	r1, r3
 800f7c8:	68f8      	ldr	r0, [r7, #12]
 800f7ca:	f7fe fc60 	bl	800e08e <clmt_clust>
 800f7ce:	62b8      	str	r0, [r7, #40]	; 0x28
 800f7d0:	e007      	b.n	800f7e2 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f7d2:	68fa      	ldr	r2, [r7, #12]
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	69db      	ldr	r3, [r3, #28]
 800f7d8:	4619      	mov	r1, r3
 800f7da:	4610      	mov	r0, r2
 800f7dc:	f7fe fbbf 	bl	800df5e <create_chain>
 800f7e0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	f000 8109 	beq.w	800f9fc <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ec:	2b01      	cmp	r3, #1
 800f7ee:	d104      	bne.n	800f7fa <f_write+0x10c>
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	2202      	movs	r2, #2
 800f7f4:	755a      	strb	r2, [r3, #21]
 800f7f6:	2302      	movs	r3, #2
 800f7f8:	e109      	b.n	800fa0e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f800:	d104      	bne.n	800f80c <f_write+0x11e>
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	2201      	movs	r2, #1
 800f806:	755a      	strb	r2, [r3, #21]
 800f808:	2301      	movs	r3, #1
 800f80a:	e100      	b.n	800fa0e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f810:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	689b      	ldr	r3, [r3, #8]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d102      	bne.n	800f820 <f_write+0x132>
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f81e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	7d1b      	ldrb	r3, [r3, #20]
 800f824:	b25b      	sxtb	r3, r3
 800f826:	2b00      	cmp	r3, #0
 800f828:	da18      	bge.n	800f85c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f82a:	693b      	ldr	r3, [r7, #16]
 800f82c:	7858      	ldrb	r0, [r3, #1]
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	6a1a      	ldr	r2, [r3, #32]
 800f838:	2301      	movs	r3, #1
 800f83a:	f7fd fd99 	bl	800d370 <disk_write>
 800f83e:	4603      	mov	r3, r0
 800f840:	2b00      	cmp	r3, #0
 800f842:	d004      	beq.n	800f84e <f_write+0x160>
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	2201      	movs	r2, #1
 800f848:	755a      	strb	r2, [r3, #21]
 800f84a:	2301      	movs	r3, #1
 800f84c:	e0df      	b.n	800fa0e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	7d1b      	ldrb	r3, [r3, #20]
 800f852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f856:	b2da      	uxtb	r2, r3
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f85c:	693a      	ldr	r2, [r7, #16]
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	69db      	ldr	r3, [r3, #28]
 800f862:	4619      	mov	r1, r3
 800f864:	4610      	mov	r0, r2
 800f866:	f7fe f90f 	bl	800da88 <clust2sect>
 800f86a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f86c:	697b      	ldr	r3, [r7, #20]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d104      	bne.n	800f87c <f_write+0x18e>
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	2202      	movs	r2, #2
 800f876:	755a      	strb	r2, [r3, #21]
 800f878:	2302      	movs	r3, #2
 800f87a:	e0c8      	b.n	800fa0e <f_write+0x320>
			sect += csect;
 800f87c:	697a      	ldr	r2, [r7, #20]
 800f87e:	69bb      	ldr	r3, [r7, #24]
 800f880:	4413      	add	r3, r2
 800f882:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f884:	693b      	ldr	r3, [r7, #16]
 800f886:	899b      	ldrh	r3, [r3, #12]
 800f888:	461a      	mov	r2, r3
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f890:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f892:	6a3b      	ldr	r3, [r7, #32]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d043      	beq.n	800f920 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f898:	69ba      	ldr	r2, [r7, #24]
 800f89a:	6a3b      	ldr	r3, [r7, #32]
 800f89c:	4413      	add	r3, r2
 800f89e:	693a      	ldr	r2, [r7, #16]
 800f8a0:	8952      	ldrh	r2, [r2, #10]
 800f8a2:	4293      	cmp	r3, r2
 800f8a4:	d905      	bls.n	800f8b2 <f_write+0x1c4>
					cc = fs->csize - csect;
 800f8a6:	693b      	ldr	r3, [r7, #16]
 800f8a8:	895b      	ldrh	r3, [r3, #10]
 800f8aa:	461a      	mov	r2, r3
 800f8ac:	69bb      	ldr	r3, [r7, #24]
 800f8ae:	1ad3      	subs	r3, r2, r3
 800f8b0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f8b2:	693b      	ldr	r3, [r7, #16]
 800f8b4:	7858      	ldrb	r0, [r3, #1]
 800f8b6:	6a3b      	ldr	r3, [r7, #32]
 800f8b8:	697a      	ldr	r2, [r7, #20]
 800f8ba:	69f9      	ldr	r1, [r7, #28]
 800f8bc:	f7fd fd58 	bl	800d370 <disk_write>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d004      	beq.n	800f8d0 <f_write+0x1e2>
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	2201      	movs	r2, #1
 800f8ca:	755a      	strb	r2, [r3, #21]
 800f8cc:	2301      	movs	r3, #1
 800f8ce:	e09e      	b.n	800fa0e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	6a1a      	ldr	r2, [r3, #32]
 800f8d4:	697b      	ldr	r3, [r7, #20]
 800f8d6:	1ad3      	subs	r3, r2, r3
 800f8d8:	6a3a      	ldr	r2, [r7, #32]
 800f8da:	429a      	cmp	r2, r3
 800f8dc:	d918      	bls.n	800f910 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	6a1a      	ldr	r2, [r3, #32]
 800f8e8:	697b      	ldr	r3, [r7, #20]
 800f8ea:	1ad3      	subs	r3, r2, r3
 800f8ec:	693a      	ldr	r2, [r7, #16]
 800f8ee:	8992      	ldrh	r2, [r2, #12]
 800f8f0:	fb02 f303 	mul.w	r3, r2, r3
 800f8f4:	69fa      	ldr	r2, [r7, #28]
 800f8f6:	18d1      	adds	r1, r2, r3
 800f8f8:	693b      	ldr	r3, [r7, #16]
 800f8fa:	899b      	ldrh	r3, [r3, #12]
 800f8fc:	461a      	mov	r2, r3
 800f8fe:	f7fd fdf7 	bl	800d4f0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	7d1b      	ldrb	r3, [r3, #20]
 800f906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f90a:	b2da      	uxtb	r2, r3
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f910:	693b      	ldr	r3, [r7, #16]
 800f912:	899b      	ldrh	r3, [r3, #12]
 800f914:	461a      	mov	r2, r3
 800f916:	6a3b      	ldr	r3, [r7, #32]
 800f918:	fb02 f303 	mul.w	r3, r2, r3
 800f91c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800f91e:	e04b      	b.n	800f9b8 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	6a1b      	ldr	r3, [r3, #32]
 800f924:	697a      	ldr	r2, [r7, #20]
 800f926:	429a      	cmp	r2, r3
 800f928:	d016      	beq.n	800f958 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	699a      	ldr	r2, [r3, #24]
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f932:	429a      	cmp	r2, r3
 800f934:	d210      	bcs.n	800f958 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f936:	693b      	ldr	r3, [r7, #16]
 800f938:	7858      	ldrb	r0, [r3, #1]
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f940:	2301      	movs	r3, #1
 800f942:	697a      	ldr	r2, [r7, #20]
 800f944:	f7fd fcf4 	bl	800d330 <disk_read>
 800f948:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d004      	beq.n	800f958 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	2201      	movs	r2, #1
 800f952:	755a      	strb	r2, [r3, #21]
 800f954:	2301      	movs	r3, #1
 800f956:	e05a      	b.n	800fa0e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	697a      	ldr	r2, [r7, #20]
 800f95c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f95e:	693b      	ldr	r3, [r7, #16]
 800f960:	899b      	ldrh	r3, [r3, #12]
 800f962:	4618      	mov	r0, r3
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	699b      	ldr	r3, [r3, #24]
 800f968:	693a      	ldr	r2, [r7, #16]
 800f96a:	8992      	ldrh	r2, [r2, #12]
 800f96c:	fbb3 f1f2 	udiv	r1, r3, r2
 800f970:	fb02 f201 	mul.w	r2, r2, r1
 800f974:	1a9b      	subs	r3, r3, r2
 800f976:	1ac3      	subs	r3, r0, r3
 800f978:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f97a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	429a      	cmp	r2, r3
 800f980:	d901      	bls.n	800f986 <f_write+0x298>
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	699b      	ldr	r3, [r3, #24]
 800f990:	693a      	ldr	r2, [r7, #16]
 800f992:	8992      	ldrh	r2, [r2, #12]
 800f994:	fbb3 f0f2 	udiv	r0, r3, r2
 800f998:	fb02 f200 	mul.w	r2, r2, r0
 800f99c:	1a9b      	subs	r3, r3, r2
 800f99e:	440b      	add	r3, r1
 800f9a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9a2:	69f9      	ldr	r1, [r7, #28]
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	f7fd fda3 	bl	800d4f0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	7d1b      	ldrb	r3, [r3, #20]
 800f9ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f9b2:	b2da      	uxtb	r2, r3
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f9b8:	69fa      	ldr	r2, [r7, #28]
 800f9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9bc:	4413      	add	r3, r2
 800f9be:	61fb      	str	r3, [r7, #28]
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	699a      	ldr	r2, [r3, #24]
 800f9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9c6:	441a      	add	r2, r3
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	619a      	str	r2, [r3, #24]
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	68da      	ldr	r2, [r3, #12]
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	699b      	ldr	r3, [r3, #24]
 800f9d4:	429a      	cmp	r2, r3
 800f9d6:	bf38      	it	cc
 800f9d8:	461a      	movcc	r2, r3
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	60da      	str	r2, [r3, #12]
 800f9de:	683b      	ldr	r3, [r7, #0]
 800f9e0:	681a      	ldr	r2, [r3, #0]
 800f9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9e4:	441a      	add	r2, r3
 800f9e6:	683b      	ldr	r3, [r7, #0]
 800f9e8:	601a      	str	r2, [r3, #0]
 800f9ea:	687a      	ldr	r2, [r7, #4]
 800f9ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9ee:	1ad3      	subs	r3, r2, r3
 800f9f0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	f47f aeb5 	bne.w	800f764 <f_write+0x76>
 800f9fa:	e000      	b.n	800f9fe <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f9fc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	7d1b      	ldrb	r3, [r3, #20]
 800fa02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa06:	b2da      	uxtb	r2, r3
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800fa0c:	2300      	movs	r3, #0
}
 800fa0e:	4618      	mov	r0, r3
 800fa10:	3730      	adds	r7, #48	; 0x30
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bd80      	pop	{r7, pc}

0800fa16 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800fa16:	b580      	push	{r7, lr}
 800fa18:	b086      	sub	sp, #24
 800fa1a:	af00      	add	r7, sp, #0
 800fa1c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	f107 0208 	add.w	r2, r7, #8
 800fa24:	4611      	mov	r1, r2
 800fa26:	4618      	mov	r0, r3
 800fa28:	f7ff faba 	bl	800efa0 <validate>
 800fa2c:	4603      	mov	r3, r0
 800fa2e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fa30:	7dfb      	ldrb	r3, [r7, #23]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d168      	bne.n	800fb08 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	7d1b      	ldrb	r3, [r3, #20]
 800fa3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d062      	beq.n	800fb08 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	7d1b      	ldrb	r3, [r3, #20]
 800fa46:	b25b      	sxtb	r3, r3
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	da15      	bge.n	800fa78 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800fa4c:	68bb      	ldr	r3, [r7, #8]
 800fa4e:	7858      	ldrb	r0, [r3, #1]
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	6a1a      	ldr	r2, [r3, #32]
 800fa5a:	2301      	movs	r3, #1
 800fa5c:	f7fd fc88 	bl	800d370 <disk_write>
 800fa60:	4603      	mov	r3, r0
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d001      	beq.n	800fa6a <f_sync+0x54>
 800fa66:	2301      	movs	r3, #1
 800fa68:	e04f      	b.n	800fb0a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	7d1b      	ldrb	r3, [r3, #20]
 800fa6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa72:	b2da      	uxtb	r2, r3
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800fa78:	f7fd f9c8 	bl	800ce0c <get_fattime>
 800fa7c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800fa7e:	68ba      	ldr	r2, [r7, #8]
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa84:	4619      	mov	r1, r3
 800fa86:	4610      	mov	r0, r2
 800fa88:	f7fd ff60 	bl	800d94c <move_window>
 800fa8c:	4603      	mov	r3, r0
 800fa8e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800fa90:	7dfb      	ldrb	r3, [r7, #23]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d138      	bne.n	800fb08 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa9a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	330b      	adds	r3, #11
 800faa0:	781a      	ldrb	r2, [r3, #0]
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	330b      	adds	r3, #11
 800faa6:	f042 0220 	orr.w	r2, r2, #32
 800faaa:	b2d2      	uxtb	r2, r2
 800faac:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	6818      	ldr	r0, [r3, #0]
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	689b      	ldr	r3, [r3, #8]
 800fab6:	461a      	mov	r2, r3
 800fab8:	68f9      	ldr	r1, [r7, #12]
 800faba:	f7fe fce5 	bl	800e488 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	f103 021c 	add.w	r2, r3, #28
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	68db      	ldr	r3, [r3, #12]
 800fac8:	4619      	mov	r1, r3
 800faca:	4610      	mov	r0, r2
 800facc:	f7fd fce4 	bl	800d498 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	3316      	adds	r3, #22
 800fad4:	6939      	ldr	r1, [r7, #16]
 800fad6:	4618      	mov	r0, r3
 800fad8:	f7fd fcde 	bl	800d498 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	3312      	adds	r3, #18
 800fae0:	2100      	movs	r1, #0
 800fae2:	4618      	mov	r0, r3
 800fae4:	f7fd fcbd 	bl	800d462 <st_word>
					fs->wflag = 1;
 800fae8:	68bb      	ldr	r3, [r7, #8]
 800faea:	2201      	movs	r2, #1
 800faec:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800faee:	68bb      	ldr	r3, [r7, #8]
 800faf0:	4618      	mov	r0, r3
 800faf2:	f7fd ff59 	bl	800d9a8 <sync_fs>
 800faf6:	4603      	mov	r3, r0
 800faf8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	7d1b      	ldrb	r3, [r3, #20]
 800fafe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fb02:	b2da      	uxtb	r2, r3
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800fb08:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	3718      	adds	r7, #24
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	bd80      	pop	{r7, pc}

0800fb12 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800fb12:	b580      	push	{r7, lr}
 800fb14:	b084      	sub	sp, #16
 800fb16:	af00      	add	r7, sp, #0
 800fb18:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800fb1a:	6878      	ldr	r0, [r7, #4]
 800fb1c:	f7ff ff7b 	bl	800fa16 <f_sync>
 800fb20:	4603      	mov	r3, r0
 800fb22:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800fb24:	7bfb      	ldrb	r3, [r7, #15]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d118      	bne.n	800fb5c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	f107 0208 	add.w	r2, r7, #8
 800fb30:	4611      	mov	r1, r2
 800fb32:	4618      	mov	r0, r3
 800fb34:	f7ff fa34 	bl	800efa0 <validate>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fb3c:	7bfb      	ldrb	r3, [r7, #15]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d10c      	bne.n	800fb5c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	691b      	ldr	r3, [r3, #16]
 800fb46:	4618      	mov	r0, r3
 800fb48:	f7fd fe5c 	bl	800d804 <dec_lock>
 800fb4c:	4603      	mov	r3, r0
 800fb4e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800fb50:	7bfb      	ldrb	r3, [r7, #15]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d102      	bne.n	800fb5c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	2200      	movs	r2, #0
 800fb5a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800fb5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb5e:	4618      	mov	r0, r3
 800fb60:	3710      	adds	r7, #16
 800fb62:	46bd      	mov	sp, r7
 800fb64:	bd80      	pop	{r7, pc}

0800fb66 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800fb66:	b580      	push	{r7, lr}
 800fb68:	b090      	sub	sp, #64	; 0x40
 800fb6a:	af00      	add	r7, sp, #0
 800fb6c:	6078      	str	r0, [r7, #4]
 800fb6e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	f107 0208 	add.w	r2, r7, #8
 800fb76:	4611      	mov	r1, r2
 800fb78:	4618      	mov	r0, r3
 800fb7a:	f7ff fa11 	bl	800efa0 <validate>
 800fb7e:	4603      	mov	r3, r0
 800fb80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800fb84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d103      	bne.n	800fb94 <f_lseek+0x2e>
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	7d5b      	ldrb	r3, [r3, #21]
 800fb90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800fb94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d002      	beq.n	800fba2 <f_lseek+0x3c>
 800fb9c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fba0:	e201      	b.n	800ffa6 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	f000 80d9 	beq.w	800fd5e <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800fbac:	683b      	ldr	r3, [r7, #0]
 800fbae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fbb2:	d15a      	bne.n	800fc6a <f_lseek+0x104>
			tbl = fp->cltbl;
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbb8:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800fbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbbc:	1d1a      	adds	r2, r3, #4
 800fbbe:	627a      	str	r2, [r7, #36]	; 0x24
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	617b      	str	r3, [r7, #20]
 800fbc4:	2302      	movs	r3, #2
 800fbc6:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	689b      	ldr	r3, [r3, #8]
 800fbcc:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800fbce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d03a      	beq.n	800fc4a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800fbd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbd6:	613b      	str	r3, [r7, #16]
 800fbd8:	2300      	movs	r3, #0
 800fbda:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fbdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbde:	3302      	adds	r3, #2
 800fbe0:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800fbe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbe4:	60fb      	str	r3, [r7, #12]
 800fbe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbe8:	3301      	adds	r3, #1
 800fbea:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f7fd ff68 	bl	800dac6 <get_fat>
 800fbf6:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800fbf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbfa:	2b01      	cmp	r3, #1
 800fbfc:	d804      	bhi.n	800fc08 <f_lseek+0xa2>
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	2202      	movs	r2, #2
 800fc02:	755a      	strb	r2, [r3, #21]
 800fc04:	2302      	movs	r3, #2
 800fc06:	e1ce      	b.n	800ffa6 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fc08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fc0e:	d104      	bne.n	800fc1a <f_lseek+0xb4>
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	2201      	movs	r2, #1
 800fc14:	755a      	strb	r2, [r3, #21]
 800fc16:	2301      	movs	r3, #1
 800fc18:	e1c5      	b.n	800ffa6 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	3301      	adds	r3, #1
 800fc1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc20:	429a      	cmp	r2, r3
 800fc22:	d0de      	beq.n	800fbe2 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800fc24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc26:	697b      	ldr	r3, [r7, #20]
 800fc28:	429a      	cmp	r2, r3
 800fc2a:	d809      	bhi.n	800fc40 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800fc2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc2e:	1d1a      	adds	r2, r3, #4
 800fc30:	627a      	str	r2, [r7, #36]	; 0x24
 800fc32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc34:	601a      	str	r2, [r3, #0]
 800fc36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc38:	1d1a      	adds	r2, r3, #4
 800fc3a:	627a      	str	r2, [r7, #36]	; 0x24
 800fc3c:	693a      	ldr	r2, [r7, #16]
 800fc3e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800fc40:	68bb      	ldr	r3, [r7, #8]
 800fc42:	699b      	ldr	r3, [r3, #24]
 800fc44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc46:	429a      	cmp	r2, r3
 800fc48:	d3c4      	bcc.n	800fbd4 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc50:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800fc52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc54:	697b      	ldr	r3, [r7, #20]
 800fc56:	429a      	cmp	r2, r3
 800fc58:	d803      	bhi.n	800fc62 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800fc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc5c:	2200      	movs	r2, #0
 800fc5e:	601a      	str	r2, [r3, #0]
 800fc60:	e19f      	b.n	800ffa2 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800fc62:	2311      	movs	r3, #17
 800fc64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fc68:	e19b      	b.n	800ffa2 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	68db      	ldr	r3, [r3, #12]
 800fc6e:	683a      	ldr	r2, [r7, #0]
 800fc70:	429a      	cmp	r2, r3
 800fc72:	d902      	bls.n	800fc7a <f_lseek+0x114>
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	68db      	ldr	r3, [r3, #12]
 800fc78:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	683a      	ldr	r2, [r7, #0]
 800fc7e:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800fc80:	683b      	ldr	r3, [r7, #0]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	f000 818d 	beq.w	800ffa2 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800fc88:	683b      	ldr	r3, [r7, #0]
 800fc8a:	3b01      	subs	r3, #1
 800fc8c:	4619      	mov	r1, r3
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	f7fe f9fd 	bl	800e08e <clmt_clust>
 800fc94:	4602      	mov	r2, r0
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800fc9a:	68ba      	ldr	r2, [r7, #8]
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	69db      	ldr	r3, [r3, #28]
 800fca0:	4619      	mov	r1, r3
 800fca2:	4610      	mov	r0, r2
 800fca4:	f7fd fef0 	bl	800da88 <clust2sect>
 800fca8:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800fcaa:	69bb      	ldr	r3, [r7, #24]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d104      	bne.n	800fcba <f_lseek+0x154>
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	2202      	movs	r2, #2
 800fcb4:	755a      	strb	r2, [r3, #21]
 800fcb6:	2302      	movs	r3, #2
 800fcb8:	e175      	b.n	800ffa6 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800fcba:	683b      	ldr	r3, [r7, #0]
 800fcbc:	3b01      	subs	r3, #1
 800fcbe:	68ba      	ldr	r2, [r7, #8]
 800fcc0:	8992      	ldrh	r2, [r2, #12]
 800fcc2:	fbb3 f3f2 	udiv	r3, r3, r2
 800fcc6:	68ba      	ldr	r2, [r7, #8]
 800fcc8:	8952      	ldrh	r2, [r2, #10]
 800fcca:	3a01      	subs	r2, #1
 800fccc:	4013      	ands	r3, r2
 800fcce:	69ba      	ldr	r2, [r7, #24]
 800fcd0:	4413      	add	r3, r2
 800fcd2:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	699b      	ldr	r3, [r3, #24]
 800fcd8:	68ba      	ldr	r2, [r7, #8]
 800fcda:	8992      	ldrh	r2, [r2, #12]
 800fcdc:	fbb3 f1f2 	udiv	r1, r3, r2
 800fce0:	fb02 f201 	mul.w	r2, r2, r1
 800fce4:	1a9b      	subs	r3, r3, r2
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	f000 815b 	beq.w	800ffa2 <f_lseek+0x43c>
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	6a1b      	ldr	r3, [r3, #32]
 800fcf0:	69ba      	ldr	r2, [r7, #24]
 800fcf2:	429a      	cmp	r2, r3
 800fcf4:	f000 8155 	beq.w	800ffa2 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	7d1b      	ldrb	r3, [r3, #20]
 800fcfc:	b25b      	sxtb	r3, r3
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	da18      	bge.n	800fd34 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fd02:	68bb      	ldr	r3, [r7, #8]
 800fd04:	7858      	ldrb	r0, [r3, #1]
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	6a1a      	ldr	r2, [r3, #32]
 800fd10:	2301      	movs	r3, #1
 800fd12:	f7fd fb2d 	bl	800d370 <disk_write>
 800fd16:	4603      	mov	r3, r0
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d004      	beq.n	800fd26 <f_lseek+0x1c0>
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	2201      	movs	r2, #1
 800fd20:	755a      	strb	r2, [r3, #21]
 800fd22:	2301      	movs	r3, #1
 800fd24:	e13f      	b.n	800ffa6 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	7d1b      	ldrb	r3, [r3, #20]
 800fd2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fd2e:	b2da      	uxtb	r2, r3
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800fd34:	68bb      	ldr	r3, [r7, #8]
 800fd36:	7858      	ldrb	r0, [r3, #1]
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fd3e:	2301      	movs	r3, #1
 800fd40:	69ba      	ldr	r2, [r7, #24]
 800fd42:	f7fd faf5 	bl	800d330 <disk_read>
 800fd46:	4603      	mov	r3, r0
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d004      	beq.n	800fd56 <f_lseek+0x1f0>
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	2201      	movs	r2, #1
 800fd50:	755a      	strb	r2, [r3, #21]
 800fd52:	2301      	movs	r3, #1
 800fd54:	e127      	b.n	800ffa6 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	69ba      	ldr	r2, [r7, #24]
 800fd5a:	621a      	str	r2, [r3, #32]
 800fd5c:	e121      	b.n	800ffa2 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	68db      	ldr	r3, [r3, #12]
 800fd62:	683a      	ldr	r2, [r7, #0]
 800fd64:	429a      	cmp	r2, r3
 800fd66:	d908      	bls.n	800fd7a <f_lseek+0x214>
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	7d1b      	ldrb	r3, [r3, #20]
 800fd6c:	f003 0302 	and.w	r3, r3, #2
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d102      	bne.n	800fd7a <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	68db      	ldr	r3, [r3, #12]
 800fd78:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	699b      	ldr	r3, [r3, #24]
 800fd7e:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800fd80:	2300      	movs	r3, #0
 800fd82:	637b      	str	r3, [r7, #52]	; 0x34
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fd88:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800fd8a:	683b      	ldr	r3, [r7, #0]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	f000 80b5 	beq.w	800fefc <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800fd92:	68bb      	ldr	r3, [r7, #8]
 800fd94:	895b      	ldrh	r3, [r3, #10]
 800fd96:	461a      	mov	r2, r3
 800fd98:	68bb      	ldr	r3, [r7, #8]
 800fd9a:	899b      	ldrh	r3, [r3, #12]
 800fd9c:	fb03 f302 	mul.w	r3, r3, r2
 800fda0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800fda2:	6a3b      	ldr	r3, [r7, #32]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d01b      	beq.n	800fde0 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	1e5a      	subs	r2, r3, #1
 800fdac:	69fb      	ldr	r3, [r7, #28]
 800fdae:	fbb2 f2f3 	udiv	r2, r2, r3
 800fdb2:	6a3b      	ldr	r3, [r7, #32]
 800fdb4:	1e59      	subs	r1, r3, #1
 800fdb6:	69fb      	ldr	r3, [r7, #28]
 800fdb8:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800fdbc:	429a      	cmp	r2, r3
 800fdbe:	d30f      	bcc.n	800fde0 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800fdc0:	6a3b      	ldr	r3, [r7, #32]
 800fdc2:	1e5a      	subs	r2, r3, #1
 800fdc4:	69fb      	ldr	r3, [r7, #28]
 800fdc6:	425b      	negs	r3, r3
 800fdc8:	401a      	ands	r2, r3
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	699b      	ldr	r3, [r3, #24]
 800fdd2:	683a      	ldr	r2, [r7, #0]
 800fdd4:	1ad3      	subs	r3, r2, r3
 800fdd6:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	69db      	ldr	r3, [r3, #28]
 800fddc:	63bb      	str	r3, [r7, #56]	; 0x38
 800fdde:	e022      	b.n	800fe26 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	689b      	ldr	r3, [r3, #8]
 800fde4:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800fde6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d119      	bne.n	800fe20 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	2100      	movs	r1, #0
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	f7fe f8b4 	bl	800df5e <create_chain>
 800fdf6:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fdf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdfa:	2b01      	cmp	r3, #1
 800fdfc:	d104      	bne.n	800fe08 <f_lseek+0x2a2>
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	2202      	movs	r2, #2
 800fe02:	755a      	strb	r2, [r3, #21]
 800fe04:	2302      	movs	r3, #2
 800fe06:	e0ce      	b.n	800ffa6 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fe08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fe0e:	d104      	bne.n	800fe1a <f_lseek+0x2b4>
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	2201      	movs	r2, #1
 800fe14:	755a      	strb	r2, [r3, #21]
 800fe16:	2301      	movs	r3, #1
 800fe18:	e0c5      	b.n	800ffa6 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe1e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe24:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800fe26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d067      	beq.n	800fefc <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800fe2c:	e03a      	b.n	800fea4 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800fe2e:	683a      	ldr	r2, [r7, #0]
 800fe30:	69fb      	ldr	r3, [r7, #28]
 800fe32:	1ad3      	subs	r3, r2, r3
 800fe34:	603b      	str	r3, [r7, #0]
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	699a      	ldr	r2, [r3, #24]
 800fe3a:	69fb      	ldr	r3, [r7, #28]
 800fe3c:	441a      	add	r2, r3
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	7d1b      	ldrb	r3, [r3, #20]
 800fe46:	f003 0302 	and.w	r3, r3, #2
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d00b      	beq.n	800fe66 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fe52:	4618      	mov	r0, r3
 800fe54:	f7fe f883 	bl	800df5e <create_chain>
 800fe58:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800fe5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d108      	bne.n	800fe72 <f_lseek+0x30c>
							ofs = 0; break;
 800fe60:	2300      	movs	r3, #0
 800fe62:	603b      	str	r3, [r7, #0]
 800fe64:	e022      	b.n	800feac <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f7fd fe2b 	bl	800dac6 <get_fat>
 800fe70:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fe72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fe78:	d104      	bne.n	800fe84 <f_lseek+0x31e>
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	2201      	movs	r2, #1
 800fe7e:	755a      	strb	r2, [r3, #21]
 800fe80:	2301      	movs	r3, #1
 800fe82:	e090      	b.n	800ffa6 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800fe84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe86:	2b01      	cmp	r3, #1
 800fe88:	d904      	bls.n	800fe94 <f_lseek+0x32e>
 800fe8a:	68bb      	ldr	r3, [r7, #8]
 800fe8c:	699b      	ldr	r3, [r3, #24]
 800fe8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fe90:	429a      	cmp	r2, r3
 800fe92:	d304      	bcc.n	800fe9e <f_lseek+0x338>
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	2202      	movs	r2, #2
 800fe98:	755a      	strb	r2, [r3, #21]
 800fe9a:	2302      	movs	r3, #2
 800fe9c:	e083      	b.n	800ffa6 <f_lseek+0x440>
					fp->clust = clst;
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fea2:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800fea4:	683a      	ldr	r2, [r7, #0]
 800fea6:	69fb      	ldr	r3, [r7, #28]
 800fea8:	429a      	cmp	r2, r3
 800feaa:	d8c0      	bhi.n	800fe2e <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	699a      	ldr	r2, [r3, #24]
 800feb0:	683b      	ldr	r3, [r7, #0]
 800feb2:	441a      	add	r2, r3
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800feb8:	68bb      	ldr	r3, [r7, #8]
 800feba:	899b      	ldrh	r3, [r3, #12]
 800febc:	461a      	mov	r2, r3
 800febe:	683b      	ldr	r3, [r7, #0]
 800fec0:	fbb3 f1f2 	udiv	r1, r3, r2
 800fec4:	fb02 f201 	mul.w	r2, r2, r1
 800fec8:	1a9b      	subs	r3, r3, r2
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d016      	beq.n	800fefc <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800fece:	68bb      	ldr	r3, [r7, #8]
 800fed0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fed2:	4618      	mov	r0, r3
 800fed4:	f7fd fdd8 	bl	800da88 <clust2sect>
 800fed8:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800feda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d104      	bne.n	800feea <f_lseek+0x384>
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2202      	movs	r2, #2
 800fee4:	755a      	strb	r2, [r3, #21]
 800fee6:	2302      	movs	r3, #2
 800fee8:	e05d      	b.n	800ffa6 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800feea:	68bb      	ldr	r3, [r7, #8]
 800feec:	899b      	ldrh	r3, [r3, #12]
 800feee:	461a      	mov	r2, r3
 800fef0:	683b      	ldr	r3, [r7, #0]
 800fef2:	fbb3 f3f2 	udiv	r3, r3, r2
 800fef6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fef8:	4413      	add	r3, r2
 800fefa:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	699a      	ldr	r2, [r3, #24]
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	68db      	ldr	r3, [r3, #12]
 800ff04:	429a      	cmp	r2, r3
 800ff06:	d90a      	bls.n	800ff1e <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	699a      	ldr	r2, [r3, #24]
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	7d1b      	ldrb	r3, [r3, #20]
 800ff14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff18:	b2da      	uxtb	r2, r3
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	699b      	ldr	r3, [r3, #24]
 800ff22:	68ba      	ldr	r2, [r7, #8]
 800ff24:	8992      	ldrh	r2, [r2, #12]
 800ff26:	fbb3 f1f2 	udiv	r1, r3, r2
 800ff2a:	fb02 f201 	mul.w	r2, r2, r1
 800ff2e:	1a9b      	subs	r3, r3, r2
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d036      	beq.n	800ffa2 <f_lseek+0x43c>
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	6a1b      	ldr	r3, [r3, #32]
 800ff38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff3a:	429a      	cmp	r2, r3
 800ff3c:	d031      	beq.n	800ffa2 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	7d1b      	ldrb	r3, [r3, #20]
 800ff42:	b25b      	sxtb	r3, r3
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	da18      	bge.n	800ff7a <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ff48:	68bb      	ldr	r3, [r7, #8]
 800ff4a:	7858      	ldrb	r0, [r3, #1]
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	6a1a      	ldr	r2, [r3, #32]
 800ff56:	2301      	movs	r3, #1
 800ff58:	f7fd fa0a 	bl	800d370 <disk_write>
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d004      	beq.n	800ff6c <f_lseek+0x406>
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	2201      	movs	r2, #1
 800ff66:	755a      	strb	r2, [r3, #21]
 800ff68:	2301      	movs	r3, #1
 800ff6a:	e01c      	b.n	800ffa6 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	7d1b      	ldrb	r3, [r3, #20]
 800ff70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff74:	b2da      	uxtb	r2, r3
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ff7a:	68bb      	ldr	r3, [r7, #8]
 800ff7c:	7858      	ldrb	r0, [r3, #1]
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ff84:	2301      	movs	r3, #1
 800ff86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff88:	f7fd f9d2 	bl	800d330 <disk_read>
 800ff8c:	4603      	mov	r3, r0
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d004      	beq.n	800ff9c <f_lseek+0x436>
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	2201      	movs	r2, #1
 800ff96:	755a      	strb	r2, [r3, #21]
 800ff98:	2301      	movs	r3, #1
 800ff9a:	e004      	b.n	800ffa6 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ffa0:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800ffa2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800ffa6:	4618      	mov	r0, r3
 800ffa8:	3740      	adds	r7, #64	; 0x40
 800ffaa:	46bd      	mov	sp, r7
 800ffac:	bd80      	pop	{r7, pc}

0800ffae <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800ffae:	b580      	push	{r7, lr}
 800ffb0:	b086      	sub	sp, #24
 800ffb2:	af00      	add	r7, sp, #0
 800ffb4:	6078      	str	r0, [r7, #4]
 800ffb6:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d101      	bne.n	800ffc2 <f_opendir+0x14>
 800ffbe:	2309      	movs	r3, #9
 800ffc0:	e064      	b.n	801008c <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 800ffc6:	f107 010c 	add.w	r1, r7, #12
 800ffca:	463b      	mov	r3, r7
 800ffcc:	2200      	movs	r2, #0
 800ffce:	4618      	mov	r0, r3
 800ffd0:	f7fe fd62 	bl	800ea98 <find_volume>
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ffd8:	7dfb      	ldrb	r3, [r7, #23]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d14f      	bne.n	801007e <f_opendir+0xd0>
		obj->fs = fs;
 800ffde:	68fa      	ldr	r2, [r7, #12]
 800ffe0:	693b      	ldr	r3, [r7, #16]
 800ffe2:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800ffe4:	683b      	ldr	r3, [r7, #0]
 800ffe6:	4619      	mov	r1, r3
 800ffe8:	6878      	ldr	r0, [r7, #4]
 800ffea:	f7fe fc45 	bl	800e878 <follow_path>
 800ffee:	4603      	mov	r3, r0
 800fff0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 800fff2:	7dfb      	ldrb	r3, [r7, #23]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d13d      	bne.n	8010074 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fffe:	b25b      	sxtb	r3, r3
 8010000:	2b00      	cmp	r3, #0
 8010002:	db12      	blt.n	801002a <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8010004:	693b      	ldr	r3, [r7, #16]
 8010006:	799b      	ldrb	r3, [r3, #6]
 8010008:	f003 0310 	and.w	r3, r3, #16
 801000c:	2b00      	cmp	r3, #0
 801000e:	d00a      	beq.n	8010026 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8010010:	68fa      	ldr	r2, [r7, #12]
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	6a1b      	ldr	r3, [r3, #32]
 8010016:	4619      	mov	r1, r3
 8010018:	4610      	mov	r0, r2
 801001a:	f7fe fa16 	bl	800e44a <ld_clust>
 801001e:	4602      	mov	r2, r0
 8010020:	693b      	ldr	r3, [r7, #16]
 8010022:	609a      	str	r2, [r3, #8]
 8010024:	e001      	b.n	801002a <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8010026:	2305      	movs	r3, #5
 8010028:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 801002a:	7dfb      	ldrb	r3, [r7, #23]
 801002c:	2b00      	cmp	r3, #0
 801002e:	d121      	bne.n	8010074 <f_opendir+0xc6>
				obj->id = fs->id;
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	88da      	ldrh	r2, [r3, #6]
 8010034:	693b      	ldr	r3, [r7, #16]
 8010036:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8010038:	2100      	movs	r1, #0
 801003a:	6878      	ldr	r0, [r7, #4]
 801003c:	f7fe f85f 	bl	800e0fe <dir_sdi>
 8010040:	4603      	mov	r3, r0
 8010042:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8010044:	7dfb      	ldrb	r3, [r7, #23]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d114      	bne.n	8010074 <f_opendir+0xc6>
					if (obj->sclust) {
 801004a:	693b      	ldr	r3, [r7, #16]
 801004c:	689b      	ldr	r3, [r3, #8]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d00d      	beq.n	801006e <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8010052:	2100      	movs	r1, #0
 8010054:	6878      	ldr	r0, [r7, #4]
 8010056:	f7fd fb47 	bl	800d6e8 <inc_lock>
 801005a:	4602      	mov	r2, r0
 801005c:	693b      	ldr	r3, [r7, #16]
 801005e:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8010060:	693b      	ldr	r3, [r7, #16]
 8010062:	691b      	ldr	r3, [r3, #16]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d105      	bne.n	8010074 <f_opendir+0xc6>
 8010068:	2312      	movs	r3, #18
 801006a:	75fb      	strb	r3, [r7, #23]
 801006c:	e002      	b.n	8010074 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 801006e:	693b      	ldr	r3, [r7, #16]
 8010070:	2200      	movs	r2, #0
 8010072:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8010074:	7dfb      	ldrb	r3, [r7, #23]
 8010076:	2b04      	cmp	r3, #4
 8010078:	d101      	bne.n	801007e <f_opendir+0xd0>
 801007a:	2305      	movs	r3, #5
 801007c:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801007e:	7dfb      	ldrb	r3, [r7, #23]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d002      	beq.n	801008a <f_opendir+0xdc>
 8010084:	693b      	ldr	r3, [r7, #16]
 8010086:	2200      	movs	r2, #0
 8010088:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801008a:	7dfb      	ldrb	r3, [r7, #23]
}
 801008c:	4618      	mov	r0, r3
 801008e:	3718      	adds	r7, #24
 8010090:	46bd      	mov	sp, r7
 8010092:	bd80      	pop	{r7, pc}

08010094 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8010094:	b580      	push	{r7, lr}
 8010096:	b084      	sub	sp, #16
 8010098:	af00      	add	r7, sp, #0
 801009a:	6078      	str	r0, [r7, #4]
 801009c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	f107 0208 	add.w	r2, r7, #8
 80100a4:	4611      	mov	r1, r2
 80100a6:	4618      	mov	r0, r3
 80100a8:	f7fe ff7a 	bl	800efa0 <validate>
 80100ac:	4603      	mov	r3, r0
 80100ae:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80100b0:	7bfb      	ldrb	r3, [r7, #15]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d126      	bne.n	8010104 <f_readdir+0x70>
		if (!fno) {
 80100b6:	683b      	ldr	r3, [r7, #0]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d106      	bne.n	80100ca <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80100bc:	2100      	movs	r1, #0
 80100be:	6878      	ldr	r0, [r7, #4]
 80100c0:	f7fe f81d 	bl	800e0fe <dir_sdi>
 80100c4:	4603      	mov	r3, r0
 80100c6:	73fb      	strb	r3, [r7, #15]
 80100c8:	e01c      	b.n	8010104 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 80100ca:	2100      	movs	r1, #0
 80100cc:	6878      	ldr	r0, [r7, #4]
 80100ce:	f7fe f9fb 	bl	800e4c8 <dir_read>
 80100d2:	4603      	mov	r3, r0
 80100d4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80100d6:	7bfb      	ldrb	r3, [r7, #15]
 80100d8:	2b04      	cmp	r3, #4
 80100da:	d101      	bne.n	80100e0 <f_readdir+0x4c>
 80100dc:	2300      	movs	r3, #0
 80100de:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80100e0:	7bfb      	ldrb	r3, [r7, #15]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d10e      	bne.n	8010104 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80100e6:	6839      	ldr	r1, [r7, #0]
 80100e8:	6878      	ldr	r0, [r7, #4]
 80100ea:	f7fe fad1 	bl	800e690 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80100ee:	2100      	movs	r1, #0
 80100f0:	6878      	ldr	r0, [r7, #4]
 80100f2:	f7fe f88d 	bl	800e210 <dir_next>
 80100f6:	4603      	mov	r3, r0
 80100f8:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80100fa:	7bfb      	ldrb	r3, [r7, #15]
 80100fc:	2b04      	cmp	r3, #4
 80100fe:	d101      	bne.n	8010104 <f_readdir+0x70>
 8010100:	2300      	movs	r3, #0
 8010102:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8010104:	7bfb      	ldrb	r3, [r7, #15]
}
 8010106:	4618      	mov	r0, r3
 8010108:	3710      	adds	r7, #16
 801010a:	46bd      	mov	sp, r7
 801010c:	bd80      	pop	{r7, pc}

0801010e <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 801010e:	b580      	push	{r7, lr}
 8010110:	b092      	sub	sp, #72	; 0x48
 8010112:	af00      	add	r7, sp, #0
 8010114:	60f8      	str	r0, [r7, #12]
 8010116:	60b9      	str	r1, [r7, #8]
 8010118:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 801011a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801011e:	f107 030c 	add.w	r3, r7, #12
 8010122:	2200      	movs	r2, #0
 8010124:	4618      	mov	r0, r3
 8010126:	f7fe fcb7 	bl	800ea98 <find_volume>
 801012a:	4603      	mov	r3, r0
 801012c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8010130:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010134:	2b00      	cmp	r3, #0
 8010136:	f040 8099 	bne.w	801026c <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 801013a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8010140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010142:	695a      	ldr	r2, [r3, #20]
 8010144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010146:	699b      	ldr	r3, [r3, #24]
 8010148:	3b02      	subs	r3, #2
 801014a:	429a      	cmp	r2, r3
 801014c:	d804      	bhi.n	8010158 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 801014e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010150:	695a      	ldr	r2, [r3, #20]
 8010152:	68bb      	ldr	r3, [r7, #8]
 8010154:	601a      	str	r2, [r3, #0]
 8010156:	e089      	b.n	801026c <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8010158:	2300      	movs	r3, #0
 801015a:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 801015c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801015e:	781b      	ldrb	r3, [r3, #0]
 8010160:	2b01      	cmp	r3, #1
 8010162:	d128      	bne.n	80101b6 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8010164:	2302      	movs	r3, #2
 8010166:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801016a:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 801016c:	f107 0314 	add.w	r3, r7, #20
 8010170:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010172:	4618      	mov	r0, r3
 8010174:	f7fd fca7 	bl	800dac6 <get_fat>
 8010178:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 801017a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801017c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010180:	d103      	bne.n	801018a <f_getfree+0x7c>
 8010182:	2301      	movs	r3, #1
 8010184:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8010188:	e063      	b.n	8010252 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 801018a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801018c:	2b01      	cmp	r3, #1
 801018e:	d103      	bne.n	8010198 <f_getfree+0x8a>
 8010190:	2302      	movs	r3, #2
 8010192:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8010196:	e05c      	b.n	8010252 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8010198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801019a:	2b00      	cmp	r3, #0
 801019c:	d102      	bne.n	80101a4 <f_getfree+0x96>
 801019e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80101a0:	3301      	adds	r3, #1
 80101a2:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 80101a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101a6:	3301      	adds	r3, #1
 80101a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80101aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101ac:	699b      	ldr	r3, [r3, #24]
 80101ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80101b0:	429a      	cmp	r2, r3
 80101b2:	d3db      	bcc.n	801016c <f_getfree+0x5e>
 80101b4:	e04d      	b.n	8010252 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80101b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101b8:	699b      	ldr	r3, [r3, #24]
 80101ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80101bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101c0:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80101c2:	2300      	movs	r3, #0
 80101c4:	637b      	str	r3, [r7, #52]	; 0x34
 80101c6:	2300      	movs	r3, #0
 80101c8:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80101ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d113      	bne.n	80101f8 <f_getfree+0xea>
							res = move_window(fs, sect++);
 80101d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80101d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101d4:	1c5a      	adds	r2, r3, #1
 80101d6:	63ba      	str	r2, [r7, #56]	; 0x38
 80101d8:	4619      	mov	r1, r3
 80101da:	f7fd fbb7 	bl	800d94c <move_window>
 80101de:	4603      	mov	r3, r0
 80101e0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80101e4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d131      	bne.n	8010250 <f_getfree+0x142>
							p = fs->win;
 80101ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101ee:	3334      	adds	r3, #52	; 0x34
 80101f0:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80101f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101f4:	899b      	ldrh	r3, [r3, #12]
 80101f6:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80101f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101fa:	781b      	ldrb	r3, [r3, #0]
 80101fc:	2b02      	cmp	r3, #2
 80101fe:	d10f      	bne.n	8010220 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8010200:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010202:	f7fd f8f3 	bl	800d3ec <ld_word>
 8010206:	4603      	mov	r3, r0
 8010208:	2b00      	cmp	r3, #0
 801020a:	d102      	bne.n	8010212 <f_getfree+0x104>
 801020c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801020e:	3301      	adds	r3, #1
 8010210:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8010212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010214:	3302      	adds	r3, #2
 8010216:	633b      	str	r3, [r7, #48]	; 0x30
 8010218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801021a:	3b02      	subs	r3, #2
 801021c:	637b      	str	r3, [r7, #52]	; 0x34
 801021e:	e010      	b.n	8010242 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8010220:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010222:	f7fd f8fb 	bl	800d41c <ld_dword>
 8010226:	4603      	mov	r3, r0
 8010228:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801022c:	2b00      	cmp	r3, #0
 801022e:	d102      	bne.n	8010236 <f_getfree+0x128>
 8010230:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010232:	3301      	adds	r3, #1
 8010234:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8010236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010238:	3304      	adds	r3, #4
 801023a:	633b      	str	r3, [r7, #48]	; 0x30
 801023c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801023e:	3b04      	subs	r3, #4
 8010240:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8010242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010244:	3b01      	subs	r3, #1
 8010246:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801024a:	2b00      	cmp	r3, #0
 801024c:	d1bd      	bne.n	80101ca <f_getfree+0xbc>
 801024e:	e000      	b.n	8010252 <f_getfree+0x144>
							if (res != FR_OK) break;
 8010250:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8010252:	68bb      	ldr	r3, [r7, #8]
 8010254:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010256:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8010258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801025a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801025c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 801025e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010260:	791a      	ldrb	r2, [r3, #4]
 8010262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010264:	f042 0201 	orr.w	r2, r2, #1
 8010268:	b2d2      	uxtb	r2, r2
 801026a:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 801026c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8010270:	4618      	mov	r0, r3
 8010272:	3748      	adds	r7, #72	; 0x48
 8010274:	46bd      	mov	sp, r7
 8010276:	bd80      	pop	{r7, pc}

08010278 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b088      	sub	sp, #32
 801027c:	af00      	add	r7, sp, #0
 801027e:	60f8      	str	r0, [r7, #12]
 8010280:	60b9      	str	r1, [r7, #8]
 8010282:	607a      	str	r2, [r7, #4]
	int n = 0;
 8010284:	2300      	movs	r3, #0
 8010286:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801028c:	e01b      	b.n	80102c6 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 801028e:	f107 0310 	add.w	r3, r7, #16
 8010292:	f107 0114 	add.w	r1, r7, #20
 8010296:	2201      	movs	r2, #1
 8010298:	6878      	ldr	r0, [r7, #4]
 801029a:	f7ff f8c9 	bl	800f430 <f_read>
		if (rc != 1) break;
 801029e:	693b      	ldr	r3, [r7, #16]
 80102a0:	2b01      	cmp	r3, #1
 80102a2:	d116      	bne.n	80102d2 <f_gets+0x5a>
		c = s[0];
 80102a4:	7d3b      	ldrb	r3, [r7, #20]
 80102a6:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80102a8:	7dfb      	ldrb	r3, [r7, #23]
 80102aa:	2b0d      	cmp	r3, #13
 80102ac:	d100      	bne.n	80102b0 <f_gets+0x38>
 80102ae:	e00a      	b.n	80102c6 <f_gets+0x4e>
		*p++ = c;
 80102b0:	69bb      	ldr	r3, [r7, #24]
 80102b2:	1c5a      	adds	r2, r3, #1
 80102b4:	61ba      	str	r2, [r7, #24]
 80102b6:	7dfa      	ldrb	r2, [r7, #23]
 80102b8:	701a      	strb	r2, [r3, #0]
		n++;
 80102ba:	69fb      	ldr	r3, [r7, #28]
 80102bc:	3301      	adds	r3, #1
 80102be:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80102c0:	7dfb      	ldrb	r3, [r7, #23]
 80102c2:	2b0a      	cmp	r3, #10
 80102c4:	d007      	beq.n	80102d6 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80102c6:	68bb      	ldr	r3, [r7, #8]
 80102c8:	3b01      	subs	r3, #1
 80102ca:	69fa      	ldr	r2, [r7, #28]
 80102cc:	429a      	cmp	r2, r3
 80102ce:	dbde      	blt.n	801028e <f_gets+0x16>
 80102d0:	e002      	b.n	80102d8 <f_gets+0x60>
		if (rc != 1) break;
 80102d2:	bf00      	nop
 80102d4:	e000      	b.n	80102d8 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 80102d6:	bf00      	nop
	}
	*p = 0;
 80102d8:	69bb      	ldr	r3, [r7, #24]
 80102da:	2200      	movs	r2, #0
 80102dc:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80102de:	69fb      	ldr	r3, [r7, #28]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d001      	beq.n	80102e8 <f_gets+0x70>
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	e000      	b.n	80102ea <f_gets+0x72>
 80102e8:	2300      	movs	r3, #0
}
 80102ea:	4618      	mov	r0, r3
 80102ec:	3720      	adds	r7, #32
 80102ee:	46bd      	mov	sp, r7
 80102f0:	bd80      	pop	{r7, pc}

080102f2 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80102f2:	b580      	push	{r7, lr}
 80102f4:	b084      	sub	sp, #16
 80102f6:	af00      	add	r7, sp, #0
 80102f8:	6078      	str	r0, [r7, #4]
 80102fa:	460b      	mov	r3, r1
 80102fc:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80102fe:	78fb      	ldrb	r3, [r7, #3]
 8010300:	2b0a      	cmp	r3, #10
 8010302:	d103      	bne.n	801030c <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8010304:	210d      	movs	r1, #13
 8010306:	6878      	ldr	r0, [r7, #4]
 8010308:	f7ff fff3 	bl	80102f2 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	685b      	ldr	r3, [r3, #4]
 8010310:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	2b00      	cmp	r3, #0
 8010316:	db25      	blt.n	8010364 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	1c5a      	adds	r2, r3, #1
 801031c:	60fa      	str	r2, [r7, #12]
 801031e:	687a      	ldr	r2, [r7, #4]
 8010320:	4413      	add	r3, r2
 8010322:	78fa      	ldrb	r2, [r7, #3]
 8010324:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	2b3c      	cmp	r3, #60	; 0x3c
 801032a:	dd12      	ble.n	8010352 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	6818      	ldr	r0, [r3, #0]
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	f103 010c 	add.w	r1, r3, #12
 8010336:	68fa      	ldr	r2, [r7, #12]
 8010338:	f107 0308 	add.w	r3, r7, #8
 801033c:	f7ff f9d7 	bl	800f6ee <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8010340:	68ba      	ldr	r2, [r7, #8]
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	429a      	cmp	r2, r3
 8010346:	d101      	bne.n	801034c <putc_bfd+0x5a>
 8010348:	2300      	movs	r3, #0
 801034a:	e001      	b.n	8010350 <putc_bfd+0x5e>
 801034c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010350:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	68fa      	ldr	r2, [r7, #12]
 8010356:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	689b      	ldr	r3, [r3, #8]
 801035c:	1c5a      	adds	r2, r3, #1
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	609a      	str	r2, [r3, #8]
 8010362:	e000      	b.n	8010366 <putc_bfd+0x74>
	if (i < 0) return;
 8010364:	bf00      	nop
}
 8010366:	3710      	adds	r7, #16
 8010368:	46bd      	mov	sp, r7
 801036a:	bd80      	pop	{r7, pc}

0801036c <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b084      	sub	sp, #16
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	685b      	ldr	r3, [r3, #4]
 8010378:	2b00      	cmp	r3, #0
 801037a:	db17      	blt.n	80103ac <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	6818      	ldr	r0, [r3, #0]
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	f103 010c 	add.w	r1, r3, #12
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	685b      	ldr	r3, [r3, #4]
 801038a:	461a      	mov	r2, r3
 801038c:	f107 030c 	add.w	r3, r7, #12
 8010390:	f7ff f9ad 	bl	800f6ee <f_write>
 8010394:	4603      	mov	r3, r0
 8010396:	2b00      	cmp	r3, #0
 8010398:	d108      	bne.n	80103ac <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	685b      	ldr	r3, [r3, #4]
 801039e:	461a      	mov	r2, r3
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	429a      	cmp	r2, r3
 80103a4:	d102      	bne.n	80103ac <putc_flush+0x40>
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	689b      	ldr	r3, [r3, #8]
 80103aa:	e001      	b.n	80103b0 <putc_flush+0x44>
	return EOF;
 80103ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80103b0:	4618      	mov	r0, r3
 80103b2:	3710      	adds	r7, #16
 80103b4:	46bd      	mov	sp, r7
 80103b6:	bd80      	pop	{r7, pc}

080103b8 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 80103b8:	b480      	push	{r7}
 80103ba:	b083      	sub	sp, #12
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
 80103c0:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	683a      	ldr	r2, [r7, #0]
 80103c6:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	2200      	movs	r2, #0
 80103cc:	605a      	str	r2, [r3, #4]
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	685a      	ldr	r2, [r3, #4]
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	609a      	str	r2, [r3, #8]
}
 80103d6:	bf00      	nop
 80103d8:	370c      	adds	r7, #12
 80103da:	46bd      	mov	sp, r7
 80103dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103e0:	4770      	bx	lr

080103e2 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80103e2:	b580      	push	{r7, lr}
 80103e4:	b096      	sub	sp, #88	; 0x58
 80103e6:	af00      	add	r7, sp, #0
 80103e8:	6078      	str	r0, [r7, #4]
 80103ea:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 80103ec:	f107 030c 	add.w	r3, r7, #12
 80103f0:	6839      	ldr	r1, [r7, #0]
 80103f2:	4618      	mov	r0, r3
 80103f4:	f7ff ffe0 	bl	80103b8 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 80103f8:	e009      	b.n	801040e <f_puts+0x2c>
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	1c5a      	adds	r2, r3, #1
 80103fe:	607a      	str	r2, [r7, #4]
 8010400:	781a      	ldrb	r2, [r3, #0]
 8010402:	f107 030c 	add.w	r3, r7, #12
 8010406:	4611      	mov	r1, r2
 8010408:	4618      	mov	r0, r3
 801040a:	f7ff ff72 	bl	80102f2 <putc_bfd>
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	781b      	ldrb	r3, [r3, #0]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d1f1      	bne.n	80103fa <f_puts+0x18>
	return putc_flush(&pb);
 8010416:	f107 030c 	add.w	r3, r7, #12
 801041a:	4618      	mov	r0, r3
 801041c:	f7ff ffa6 	bl	801036c <putc_flush>
 8010420:	4603      	mov	r3, r0
}
 8010422:	4618      	mov	r0, r3
 8010424:	3758      	adds	r7, #88	; 0x58
 8010426:	46bd      	mov	sp, r7
 8010428:	bd80      	pop	{r7, pc}
	...

0801042c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801042c:	b480      	push	{r7}
 801042e:	b087      	sub	sp, #28
 8010430:	af00      	add	r7, sp, #0
 8010432:	60f8      	str	r0, [r7, #12]
 8010434:	60b9      	str	r1, [r7, #8]
 8010436:	4613      	mov	r3, r2
 8010438:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801043a:	2301      	movs	r3, #1
 801043c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801043e:	2300      	movs	r3, #0
 8010440:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010442:	4b1f      	ldr	r3, [pc, #124]	; (80104c0 <FATFS_LinkDriverEx+0x94>)
 8010444:	7a5b      	ldrb	r3, [r3, #9]
 8010446:	b2db      	uxtb	r3, r3
 8010448:	2b00      	cmp	r3, #0
 801044a:	d131      	bne.n	80104b0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801044c:	4b1c      	ldr	r3, [pc, #112]	; (80104c0 <FATFS_LinkDriverEx+0x94>)
 801044e:	7a5b      	ldrb	r3, [r3, #9]
 8010450:	b2db      	uxtb	r3, r3
 8010452:	461a      	mov	r2, r3
 8010454:	4b1a      	ldr	r3, [pc, #104]	; (80104c0 <FATFS_LinkDriverEx+0x94>)
 8010456:	2100      	movs	r1, #0
 8010458:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801045a:	4b19      	ldr	r3, [pc, #100]	; (80104c0 <FATFS_LinkDriverEx+0x94>)
 801045c:	7a5b      	ldrb	r3, [r3, #9]
 801045e:	b2db      	uxtb	r3, r3
 8010460:	4a17      	ldr	r2, [pc, #92]	; (80104c0 <FATFS_LinkDriverEx+0x94>)
 8010462:	009b      	lsls	r3, r3, #2
 8010464:	4413      	add	r3, r2
 8010466:	68fa      	ldr	r2, [r7, #12]
 8010468:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801046a:	4b15      	ldr	r3, [pc, #84]	; (80104c0 <FATFS_LinkDriverEx+0x94>)
 801046c:	7a5b      	ldrb	r3, [r3, #9]
 801046e:	b2db      	uxtb	r3, r3
 8010470:	461a      	mov	r2, r3
 8010472:	4b13      	ldr	r3, [pc, #76]	; (80104c0 <FATFS_LinkDriverEx+0x94>)
 8010474:	4413      	add	r3, r2
 8010476:	79fa      	ldrb	r2, [r7, #7]
 8010478:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801047a:	4b11      	ldr	r3, [pc, #68]	; (80104c0 <FATFS_LinkDriverEx+0x94>)
 801047c:	7a5b      	ldrb	r3, [r3, #9]
 801047e:	b2db      	uxtb	r3, r3
 8010480:	1c5a      	adds	r2, r3, #1
 8010482:	b2d1      	uxtb	r1, r2
 8010484:	4a0e      	ldr	r2, [pc, #56]	; (80104c0 <FATFS_LinkDriverEx+0x94>)
 8010486:	7251      	strb	r1, [r2, #9]
 8010488:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801048a:	7dbb      	ldrb	r3, [r7, #22]
 801048c:	3330      	adds	r3, #48	; 0x30
 801048e:	b2da      	uxtb	r2, r3
 8010490:	68bb      	ldr	r3, [r7, #8]
 8010492:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010494:	68bb      	ldr	r3, [r7, #8]
 8010496:	3301      	adds	r3, #1
 8010498:	223a      	movs	r2, #58	; 0x3a
 801049a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801049c:	68bb      	ldr	r3, [r7, #8]
 801049e:	3302      	adds	r3, #2
 80104a0:	222f      	movs	r2, #47	; 0x2f
 80104a2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80104a4:	68bb      	ldr	r3, [r7, #8]
 80104a6:	3303      	adds	r3, #3
 80104a8:	2200      	movs	r2, #0
 80104aa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80104ac:	2300      	movs	r3, #0
 80104ae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80104b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80104b2:	4618      	mov	r0, r3
 80104b4:	371c      	adds	r7, #28
 80104b6:	46bd      	mov	sp, r7
 80104b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104bc:	4770      	bx	lr
 80104be:	bf00      	nop
 80104c0:	20000870 	.word	0x20000870

080104c4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b082      	sub	sp, #8
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	6078      	str	r0, [r7, #4]
 80104cc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80104ce:	2200      	movs	r2, #0
 80104d0:	6839      	ldr	r1, [r7, #0]
 80104d2:	6878      	ldr	r0, [r7, #4]
 80104d4:	f7ff ffaa 	bl	801042c <FATFS_LinkDriverEx>
 80104d8:	4603      	mov	r3, r0
}
 80104da:	4618      	mov	r0, r3
 80104dc:	3708      	adds	r7, #8
 80104de:	46bd      	mov	sp, r7
 80104e0:	bd80      	pop	{r7, pc}
	...

080104e4 <__errno>:
 80104e4:	4b01      	ldr	r3, [pc, #4]	; (80104ec <__errno+0x8>)
 80104e6:	6818      	ldr	r0, [r3, #0]
 80104e8:	4770      	bx	lr
 80104ea:	bf00      	nop
 80104ec:	2000015c 	.word	0x2000015c

080104f0 <__libc_init_array>:
 80104f0:	b570      	push	{r4, r5, r6, lr}
 80104f2:	4e0d      	ldr	r6, [pc, #52]	; (8010528 <__libc_init_array+0x38>)
 80104f4:	4c0d      	ldr	r4, [pc, #52]	; (801052c <__libc_init_array+0x3c>)
 80104f6:	1ba4      	subs	r4, r4, r6
 80104f8:	10a4      	asrs	r4, r4, #2
 80104fa:	2500      	movs	r5, #0
 80104fc:	42a5      	cmp	r5, r4
 80104fe:	d109      	bne.n	8010514 <__libc_init_array+0x24>
 8010500:	4e0b      	ldr	r6, [pc, #44]	; (8010530 <__libc_init_array+0x40>)
 8010502:	4c0c      	ldr	r4, [pc, #48]	; (8010534 <__libc_init_array+0x44>)
 8010504:	f005 fe42 	bl	801618c <_init>
 8010508:	1ba4      	subs	r4, r4, r6
 801050a:	10a4      	asrs	r4, r4, #2
 801050c:	2500      	movs	r5, #0
 801050e:	42a5      	cmp	r5, r4
 8010510:	d105      	bne.n	801051e <__libc_init_array+0x2e>
 8010512:	bd70      	pop	{r4, r5, r6, pc}
 8010514:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010518:	4798      	blx	r3
 801051a:	3501      	adds	r5, #1
 801051c:	e7ee      	b.n	80104fc <__libc_init_array+0xc>
 801051e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010522:	4798      	blx	r3
 8010524:	3501      	adds	r5, #1
 8010526:	e7f2      	b.n	801050e <__libc_init_array+0x1e>
 8010528:	08016a40 	.word	0x08016a40
 801052c:	08016a40 	.word	0x08016a40
 8010530:	08016a40 	.word	0x08016a40
 8010534:	08016a44 	.word	0x08016a44

08010538 <memcpy>:
 8010538:	b510      	push	{r4, lr}
 801053a:	1e43      	subs	r3, r0, #1
 801053c:	440a      	add	r2, r1
 801053e:	4291      	cmp	r1, r2
 8010540:	d100      	bne.n	8010544 <memcpy+0xc>
 8010542:	bd10      	pop	{r4, pc}
 8010544:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010548:	f803 4f01 	strb.w	r4, [r3, #1]!
 801054c:	e7f7      	b.n	801053e <memcpy+0x6>

0801054e <memset>:
 801054e:	4402      	add	r2, r0
 8010550:	4603      	mov	r3, r0
 8010552:	4293      	cmp	r3, r2
 8010554:	d100      	bne.n	8010558 <memset+0xa>
 8010556:	4770      	bx	lr
 8010558:	f803 1b01 	strb.w	r1, [r3], #1
 801055c:	e7f9      	b.n	8010552 <memset+0x4>

0801055e <__cvt>:
 801055e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010562:	ec55 4b10 	vmov	r4, r5, d0
 8010566:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8010568:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801056c:	2d00      	cmp	r5, #0
 801056e:	460e      	mov	r6, r1
 8010570:	4691      	mov	r9, r2
 8010572:	4619      	mov	r1, r3
 8010574:	bfb8      	it	lt
 8010576:	4622      	movlt	r2, r4
 8010578:	462b      	mov	r3, r5
 801057a:	f027 0720 	bic.w	r7, r7, #32
 801057e:	bfbb      	ittet	lt
 8010580:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010584:	461d      	movlt	r5, r3
 8010586:	2300      	movge	r3, #0
 8010588:	232d      	movlt	r3, #45	; 0x2d
 801058a:	bfb8      	it	lt
 801058c:	4614      	movlt	r4, r2
 801058e:	2f46      	cmp	r7, #70	; 0x46
 8010590:	700b      	strb	r3, [r1, #0]
 8010592:	d004      	beq.n	801059e <__cvt+0x40>
 8010594:	2f45      	cmp	r7, #69	; 0x45
 8010596:	d100      	bne.n	801059a <__cvt+0x3c>
 8010598:	3601      	adds	r6, #1
 801059a:	2102      	movs	r1, #2
 801059c:	e000      	b.n	80105a0 <__cvt+0x42>
 801059e:	2103      	movs	r1, #3
 80105a0:	ab03      	add	r3, sp, #12
 80105a2:	9301      	str	r3, [sp, #4]
 80105a4:	ab02      	add	r3, sp, #8
 80105a6:	9300      	str	r3, [sp, #0]
 80105a8:	4632      	mov	r2, r6
 80105aa:	4653      	mov	r3, sl
 80105ac:	ec45 4b10 	vmov	d0, r4, r5
 80105b0:	f001 fc96 	bl	8011ee0 <_dtoa_r>
 80105b4:	2f47      	cmp	r7, #71	; 0x47
 80105b6:	4680      	mov	r8, r0
 80105b8:	d102      	bne.n	80105c0 <__cvt+0x62>
 80105ba:	f019 0f01 	tst.w	r9, #1
 80105be:	d026      	beq.n	801060e <__cvt+0xb0>
 80105c0:	2f46      	cmp	r7, #70	; 0x46
 80105c2:	eb08 0906 	add.w	r9, r8, r6
 80105c6:	d111      	bne.n	80105ec <__cvt+0x8e>
 80105c8:	f898 3000 	ldrb.w	r3, [r8]
 80105cc:	2b30      	cmp	r3, #48	; 0x30
 80105ce:	d10a      	bne.n	80105e6 <__cvt+0x88>
 80105d0:	2200      	movs	r2, #0
 80105d2:	2300      	movs	r3, #0
 80105d4:	4620      	mov	r0, r4
 80105d6:	4629      	mov	r1, r5
 80105d8:	f7f0 fa76 	bl	8000ac8 <__aeabi_dcmpeq>
 80105dc:	b918      	cbnz	r0, 80105e6 <__cvt+0x88>
 80105de:	f1c6 0601 	rsb	r6, r6, #1
 80105e2:	f8ca 6000 	str.w	r6, [sl]
 80105e6:	f8da 3000 	ldr.w	r3, [sl]
 80105ea:	4499      	add	r9, r3
 80105ec:	2200      	movs	r2, #0
 80105ee:	2300      	movs	r3, #0
 80105f0:	4620      	mov	r0, r4
 80105f2:	4629      	mov	r1, r5
 80105f4:	f7f0 fa68 	bl	8000ac8 <__aeabi_dcmpeq>
 80105f8:	b938      	cbnz	r0, 801060a <__cvt+0xac>
 80105fa:	2230      	movs	r2, #48	; 0x30
 80105fc:	9b03      	ldr	r3, [sp, #12]
 80105fe:	454b      	cmp	r3, r9
 8010600:	d205      	bcs.n	801060e <__cvt+0xb0>
 8010602:	1c59      	adds	r1, r3, #1
 8010604:	9103      	str	r1, [sp, #12]
 8010606:	701a      	strb	r2, [r3, #0]
 8010608:	e7f8      	b.n	80105fc <__cvt+0x9e>
 801060a:	f8cd 900c 	str.w	r9, [sp, #12]
 801060e:	9b03      	ldr	r3, [sp, #12]
 8010610:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010612:	eba3 0308 	sub.w	r3, r3, r8
 8010616:	4640      	mov	r0, r8
 8010618:	6013      	str	r3, [r2, #0]
 801061a:	b004      	add	sp, #16
 801061c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010620 <__exponent>:
 8010620:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010622:	2900      	cmp	r1, #0
 8010624:	4604      	mov	r4, r0
 8010626:	bfba      	itte	lt
 8010628:	4249      	neglt	r1, r1
 801062a:	232d      	movlt	r3, #45	; 0x2d
 801062c:	232b      	movge	r3, #43	; 0x2b
 801062e:	2909      	cmp	r1, #9
 8010630:	f804 2b02 	strb.w	r2, [r4], #2
 8010634:	7043      	strb	r3, [r0, #1]
 8010636:	dd20      	ble.n	801067a <__exponent+0x5a>
 8010638:	f10d 0307 	add.w	r3, sp, #7
 801063c:	461f      	mov	r7, r3
 801063e:	260a      	movs	r6, #10
 8010640:	fb91 f5f6 	sdiv	r5, r1, r6
 8010644:	fb06 1115 	mls	r1, r6, r5, r1
 8010648:	3130      	adds	r1, #48	; 0x30
 801064a:	2d09      	cmp	r5, #9
 801064c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010650:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8010654:	4629      	mov	r1, r5
 8010656:	dc09      	bgt.n	801066c <__exponent+0x4c>
 8010658:	3130      	adds	r1, #48	; 0x30
 801065a:	3b02      	subs	r3, #2
 801065c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010660:	42bb      	cmp	r3, r7
 8010662:	4622      	mov	r2, r4
 8010664:	d304      	bcc.n	8010670 <__exponent+0x50>
 8010666:	1a10      	subs	r0, r2, r0
 8010668:	b003      	add	sp, #12
 801066a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801066c:	4613      	mov	r3, r2
 801066e:	e7e7      	b.n	8010640 <__exponent+0x20>
 8010670:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010674:	f804 2b01 	strb.w	r2, [r4], #1
 8010678:	e7f2      	b.n	8010660 <__exponent+0x40>
 801067a:	2330      	movs	r3, #48	; 0x30
 801067c:	4419      	add	r1, r3
 801067e:	7083      	strb	r3, [r0, #2]
 8010680:	1d02      	adds	r2, r0, #4
 8010682:	70c1      	strb	r1, [r0, #3]
 8010684:	e7ef      	b.n	8010666 <__exponent+0x46>
	...

08010688 <_printf_float>:
 8010688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801068c:	b08d      	sub	sp, #52	; 0x34
 801068e:	460c      	mov	r4, r1
 8010690:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8010694:	4616      	mov	r6, r2
 8010696:	461f      	mov	r7, r3
 8010698:	4605      	mov	r5, r0
 801069a:	f002 fe7b 	bl	8013394 <_localeconv_r>
 801069e:	6803      	ldr	r3, [r0, #0]
 80106a0:	9304      	str	r3, [sp, #16]
 80106a2:	4618      	mov	r0, r3
 80106a4:	f7ef fd94 	bl	80001d0 <strlen>
 80106a8:	2300      	movs	r3, #0
 80106aa:	930a      	str	r3, [sp, #40]	; 0x28
 80106ac:	f8d8 3000 	ldr.w	r3, [r8]
 80106b0:	9005      	str	r0, [sp, #20]
 80106b2:	3307      	adds	r3, #7
 80106b4:	f023 0307 	bic.w	r3, r3, #7
 80106b8:	f103 0208 	add.w	r2, r3, #8
 80106bc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80106c0:	f8d4 b000 	ldr.w	fp, [r4]
 80106c4:	f8c8 2000 	str.w	r2, [r8]
 80106c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106cc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80106d0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80106d4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80106d8:	9307      	str	r3, [sp, #28]
 80106da:	f8cd 8018 	str.w	r8, [sp, #24]
 80106de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80106e2:	4ba7      	ldr	r3, [pc, #668]	; (8010980 <_printf_float+0x2f8>)
 80106e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80106e8:	f7f0 fa20 	bl	8000b2c <__aeabi_dcmpun>
 80106ec:	bb70      	cbnz	r0, 801074c <_printf_float+0xc4>
 80106ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80106f2:	4ba3      	ldr	r3, [pc, #652]	; (8010980 <_printf_float+0x2f8>)
 80106f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80106f8:	f7f0 f9fa 	bl	8000af0 <__aeabi_dcmple>
 80106fc:	bb30      	cbnz	r0, 801074c <_printf_float+0xc4>
 80106fe:	2200      	movs	r2, #0
 8010700:	2300      	movs	r3, #0
 8010702:	4640      	mov	r0, r8
 8010704:	4649      	mov	r1, r9
 8010706:	f7f0 f9e9 	bl	8000adc <__aeabi_dcmplt>
 801070a:	b110      	cbz	r0, 8010712 <_printf_float+0x8a>
 801070c:	232d      	movs	r3, #45	; 0x2d
 801070e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010712:	4a9c      	ldr	r2, [pc, #624]	; (8010984 <_printf_float+0x2fc>)
 8010714:	4b9c      	ldr	r3, [pc, #624]	; (8010988 <_printf_float+0x300>)
 8010716:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801071a:	bf8c      	ite	hi
 801071c:	4690      	movhi	r8, r2
 801071e:	4698      	movls	r8, r3
 8010720:	2303      	movs	r3, #3
 8010722:	f02b 0204 	bic.w	r2, fp, #4
 8010726:	6123      	str	r3, [r4, #16]
 8010728:	6022      	str	r2, [r4, #0]
 801072a:	f04f 0900 	mov.w	r9, #0
 801072e:	9700      	str	r7, [sp, #0]
 8010730:	4633      	mov	r3, r6
 8010732:	aa0b      	add	r2, sp, #44	; 0x2c
 8010734:	4621      	mov	r1, r4
 8010736:	4628      	mov	r0, r5
 8010738:	f000 f9e6 	bl	8010b08 <_printf_common>
 801073c:	3001      	adds	r0, #1
 801073e:	f040 808d 	bne.w	801085c <_printf_float+0x1d4>
 8010742:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010746:	b00d      	add	sp, #52	; 0x34
 8010748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801074c:	4642      	mov	r2, r8
 801074e:	464b      	mov	r3, r9
 8010750:	4640      	mov	r0, r8
 8010752:	4649      	mov	r1, r9
 8010754:	f7f0 f9ea 	bl	8000b2c <__aeabi_dcmpun>
 8010758:	b110      	cbz	r0, 8010760 <_printf_float+0xd8>
 801075a:	4a8c      	ldr	r2, [pc, #560]	; (801098c <_printf_float+0x304>)
 801075c:	4b8c      	ldr	r3, [pc, #560]	; (8010990 <_printf_float+0x308>)
 801075e:	e7da      	b.n	8010716 <_printf_float+0x8e>
 8010760:	6861      	ldr	r1, [r4, #4]
 8010762:	1c4b      	adds	r3, r1, #1
 8010764:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8010768:	a80a      	add	r0, sp, #40	; 0x28
 801076a:	d13e      	bne.n	80107ea <_printf_float+0x162>
 801076c:	2306      	movs	r3, #6
 801076e:	6063      	str	r3, [r4, #4]
 8010770:	2300      	movs	r3, #0
 8010772:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8010776:	ab09      	add	r3, sp, #36	; 0x24
 8010778:	9300      	str	r3, [sp, #0]
 801077a:	ec49 8b10 	vmov	d0, r8, r9
 801077e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010782:	6022      	str	r2, [r4, #0]
 8010784:	f8cd a004 	str.w	sl, [sp, #4]
 8010788:	6861      	ldr	r1, [r4, #4]
 801078a:	4628      	mov	r0, r5
 801078c:	f7ff fee7 	bl	801055e <__cvt>
 8010790:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8010794:	2b47      	cmp	r3, #71	; 0x47
 8010796:	4680      	mov	r8, r0
 8010798:	d109      	bne.n	80107ae <_printf_float+0x126>
 801079a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801079c:	1cd8      	adds	r0, r3, #3
 801079e:	db02      	blt.n	80107a6 <_printf_float+0x11e>
 80107a0:	6862      	ldr	r2, [r4, #4]
 80107a2:	4293      	cmp	r3, r2
 80107a4:	dd47      	ble.n	8010836 <_printf_float+0x1ae>
 80107a6:	f1aa 0a02 	sub.w	sl, sl, #2
 80107aa:	fa5f fa8a 	uxtb.w	sl, sl
 80107ae:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80107b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80107b4:	d824      	bhi.n	8010800 <_printf_float+0x178>
 80107b6:	3901      	subs	r1, #1
 80107b8:	4652      	mov	r2, sl
 80107ba:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80107be:	9109      	str	r1, [sp, #36]	; 0x24
 80107c0:	f7ff ff2e 	bl	8010620 <__exponent>
 80107c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80107c6:	1813      	adds	r3, r2, r0
 80107c8:	2a01      	cmp	r2, #1
 80107ca:	4681      	mov	r9, r0
 80107cc:	6123      	str	r3, [r4, #16]
 80107ce:	dc02      	bgt.n	80107d6 <_printf_float+0x14e>
 80107d0:	6822      	ldr	r2, [r4, #0]
 80107d2:	07d1      	lsls	r1, r2, #31
 80107d4:	d501      	bpl.n	80107da <_printf_float+0x152>
 80107d6:	3301      	adds	r3, #1
 80107d8:	6123      	str	r3, [r4, #16]
 80107da:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d0a5      	beq.n	801072e <_printf_float+0xa6>
 80107e2:	232d      	movs	r3, #45	; 0x2d
 80107e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80107e8:	e7a1      	b.n	801072e <_printf_float+0xa6>
 80107ea:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80107ee:	f000 8177 	beq.w	8010ae0 <_printf_float+0x458>
 80107f2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80107f6:	d1bb      	bne.n	8010770 <_printf_float+0xe8>
 80107f8:	2900      	cmp	r1, #0
 80107fa:	d1b9      	bne.n	8010770 <_printf_float+0xe8>
 80107fc:	2301      	movs	r3, #1
 80107fe:	e7b6      	b.n	801076e <_printf_float+0xe6>
 8010800:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8010804:	d119      	bne.n	801083a <_printf_float+0x1b2>
 8010806:	2900      	cmp	r1, #0
 8010808:	6863      	ldr	r3, [r4, #4]
 801080a:	dd0c      	ble.n	8010826 <_printf_float+0x19e>
 801080c:	6121      	str	r1, [r4, #16]
 801080e:	b913      	cbnz	r3, 8010816 <_printf_float+0x18e>
 8010810:	6822      	ldr	r2, [r4, #0]
 8010812:	07d2      	lsls	r2, r2, #31
 8010814:	d502      	bpl.n	801081c <_printf_float+0x194>
 8010816:	3301      	adds	r3, #1
 8010818:	440b      	add	r3, r1
 801081a:	6123      	str	r3, [r4, #16]
 801081c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801081e:	65a3      	str	r3, [r4, #88]	; 0x58
 8010820:	f04f 0900 	mov.w	r9, #0
 8010824:	e7d9      	b.n	80107da <_printf_float+0x152>
 8010826:	b913      	cbnz	r3, 801082e <_printf_float+0x1a6>
 8010828:	6822      	ldr	r2, [r4, #0]
 801082a:	07d0      	lsls	r0, r2, #31
 801082c:	d501      	bpl.n	8010832 <_printf_float+0x1aa>
 801082e:	3302      	adds	r3, #2
 8010830:	e7f3      	b.n	801081a <_printf_float+0x192>
 8010832:	2301      	movs	r3, #1
 8010834:	e7f1      	b.n	801081a <_printf_float+0x192>
 8010836:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801083a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801083e:	4293      	cmp	r3, r2
 8010840:	db05      	blt.n	801084e <_printf_float+0x1c6>
 8010842:	6822      	ldr	r2, [r4, #0]
 8010844:	6123      	str	r3, [r4, #16]
 8010846:	07d1      	lsls	r1, r2, #31
 8010848:	d5e8      	bpl.n	801081c <_printf_float+0x194>
 801084a:	3301      	adds	r3, #1
 801084c:	e7e5      	b.n	801081a <_printf_float+0x192>
 801084e:	2b00      	cmp	r3, #0
 8010850:	bfd4      	ite	le
 8010852:	f1c3 0302 	rsble	r3, r3, #2
 8010856:	2301      	movgt	r3, #1
 8010858:	4413      	add	r3, r2
 801085a:	e7de      	b.n	801081a <_printf_float+0x192>
 801085c:	6823      	ldr	r3, [r4, #0]
 801085e:	055a      	lsls	r2, r3, #21
 8010860:	d407      	bmi.n	8010872 <_printf_float+0x1ea>
 8010862:	6923      	ldr	r3, [r4, #16]
 8010864:	4642      	mov	r2, r8
 8010866:	4631      	mov	r1, r6
 8010868:	4628      	mov	r0, r5
 801086a:	47b8      	blx	r7
 801086c:	3001      	adds	r0, #1
 801086e:	d12b      	bne.n	80108c8 <_printf_float+0x240>
 8010870:	e767      	b.n	8010742 <_printf_float+0xba>
 8010872:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8010876:	f240 80dc 	bls.w	8010a32 <_printf_float+0x3aa>
 801087a:	2200      	movs	r2, #0
 801087c:	2300      	movs	r3, #0
 801087e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010882:	f7f0 f921 	bl	8000ac8 <__aeabi_dcmpeq>
 8010886:	2800      	cmp	r0, #0
 8010888:	d033      	beq.n	80108f2 <_printf_float+0x26a>
 801088a:	2301      	movs	r3, #1
 801088c:	4a41      	ldr	r2, [pc, #260]	; (8010994 <_printf_float+0x30c>)
 801088e:	4631      	mov	r1, r6
 8010890:	4628      	mov	r0, r5
 8010892:	47b8      	blx	r7
 8010894:	3001      	adds	r0, #1
 8010896:	f43f af54 	beq.w	8010742 <_printf_float+0xba>
 801089a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801089e:	429a      	cmp	r2, r3
 80108a0:	db02      	blt.n	80108a8 <_printf_float+0x220>
 80108a2:	6823      	ldr	r3, [r4, #0]
 80108a4:	07d8      	lsls	r0, r3, #31
 80108a6:	d50f      	bpl.n	80108c8 <_printf_float+0x240>
 80108a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80108ac:	4631      	mov	r1, r6
 80108ae:	4628      	mov	r0, r5
 80108b0:	47b8      	blx	r7
 80108b2:	3001      	adds	r0, #1
 80108b4:	f43f af45 	beq.w	8010742 <_printf_float+0xba>
 80108b8:	f04f 0800 	mov.w	r8, #0
 80108bc:	f104 091a 	add.w	r9, r4, #26
 80108c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80108c2:	3b01      	subs	r3, #1
 80108c4:	4543      	cmp	r3, r8
 80108c6:	dc09      	bgt.n	80108dc <_printf_float+0x254>
 80108c8:	6823      	ldr	r3, [r4, #0]
 80108ca:	079b      	lsls	r3, r3, #30
 80108cc:	f100 8103 	bmi.w	8010ad6 <_printf_float+0x44e>
 80108d0:	68e0      	ldr	r0, [r4, #12]
 80108d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80108d4:	4298      	cmp	r0, r3
 80108d6:	bfb8      	it	lt
 80108d8:	4618      	movlt	r0, r3
 80108da:	e734      	b.n	8010746 <_printf_float+0xbe>
 80108dc:	2301      	movs	r3, #1
 80108de:	464a      	mov	r2, r9
 80108e0:	4631      	mov	r1, r6
 80108e2:	4628      	mov	r0, r5
 80108e4:	47b8      	blx	r7
 80108e6:	3001      	adds	r0, #1
 80108e8:	f43f af2b 	beq.w	8010742 <_printf_float+0xba>
 80108ec:	f108 0801 	add.w	r8, r8, #1
 80108f0:	e7e6      	b.n	80108c0 <_printf_float+0x238>
 80108f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	dc2b      	bgt.n	8010950 <_printf_float+0x2c8>
 80108f8:	2301      	movs	r3, #1
 80108fa:	4a26      	ldr	r2, [pc, #152]	; (8010994 <_printf_float+0x30c>)
 80108fc:	4631      	mov	r1, r6
 80108fe:	4628      	mov	r0, r5
 8010900:	47b8      	blx	r7
 8010902:	3001      	adds	r0, #1
 8010904:	f43f af1d 	beq.w	8010742 <_printf_float+0xba>
 8010908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801090a:	b923      	cbnz	r3, 8010916 <_printf_float+0x28e>
 801090c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801090e:	b913      	cbnz	r3, 8010916 <_printf_float+0x28e>
 8010910:	6823      	ldr	r3, [r4, #0]
 8010912:	07d9      	lsls	r1, r3, #31
 8010914:	d5d8      	bpl.n	80108c8 <_printf_float+0x240>
 8010916:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801091a:	4631      	mov	r1, r6
 801091c:	4628      	mov	r0, r5
 801091e:	47b8      	blx	r7
 8010920:	3001      	adds	r0, #1
 8010922:	f43f af0e 	beq.w	8010742 <_printf_float+0xba>
 8010926:	f04f 0900 	mov.w	r9, #0
 801092a:	f104 0a1a 	add.w	sl, r4, #26
 801092e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010930:	425b      	negs	r3, r3
 8010932:	454b      	cmp	r3, r9
 8010934:	dc01      	bgt.n	801093a <_printf_float+0x2b2>
 8010936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010938:	e794      	b.n	8010864 <_printf_float+0x1dc>
 801093a:	2301      	movs	r3, #1
 801093c:	4652      	mov	r2, sl
 801093e:	4631      	mov	r1, r6
 8010940:	4628      	mov	r0, r5
 8010942:	47b8      	blx	r7
 8010944:	3001      	adds	r0, #1
 8010946:	f43f aefc 	beq.w	8010742 <_printf_float+0xba>
 801094a:	f109 0901 	add.w	r9, r9, #1
 801094e:	e7ee      	b.n	801092e <_printf_float+0x2a6>
 8010950:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010952:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010954:	429a      	cmp	r2, r3
 8010956:	bfa8      	it	ge
 8010958:	461a      	movge	r2, r3
 801095a:	2a00      	cmp	r2, #0
 801095c:	4691      	mov	r9, r2
 801095e:	dd07      	ble.n	8010970 <_printf_float+0x2e8>
 8010960:	4613      	mov	r3, r2
 8010962:	4631      	mov	r1, r6
 8010964:	4642      	mov	r2, r8
 8010966:	4628      	mov	r0, r5
 8010968:	47b8      	blx	r7
 801096a:	3001      	adds	r0, #1
 801096c:	f43f aee9 	beq.w	8010742 <_printf_float+0xba>
 8010970:	f104 031a 	add.w	r3, r4, #26
 8010974:	f04f 0b00 	mov.w	fp, #0
 8010978:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801097c:	9306      	str	r3, [sp, #24]
 801097e:	e015      	b.n	80109ac <_printf_float+0x324>
 8010980:	7fefffff 	.word	0x7fefffff
 8010984:	080166ac 	.word	0x080166ac
 8010988:	080166a8 	.word	0x080166a8
 801098c:	080166b4 	.word	0x080166b4
 8010990:	080166b0 	.word	0x080166b0
 8010994:	080166b8 	.word	0x080166b8
 8010998:	2301      	movs	r3, #1
 801099a:	9a06      	ldr	r2, [sp, #24]
 801099c:	4631      	mov	r1, r6
 801099e:	4628      	mov	r0, r5
 80109a0:	47b8      	blx	r7
 80109a2:	3001      	adds	r0, #1
 80109a4:	f43f aecd 	beq.w	8010742 <_printf_float+0xba>
 80109a8:	f10b 0b01 	add.w	fp, fp, #1
 80109ac:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80109b0:	ebaa 0309 	sub.w	r3, sl, r9
 80109b4:	455b      	cmp	r3, fp
 80109b6:	dcef      	bgt.n	8010998 <_printf_float+0x310>
 80109b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80109bc:	429a      	cmp	r2, r3
 80109be:	44d0      	add	r8, sl
 80109c0:	db15      	blt.n	80109ee <_printf_float+0x366>
 80109c2:	6823      	ldr	r3, [r4, #0]
 80109c4:	07da      	lsls	r2, r3, #31
 80109c6:	d412      	bmi.n	80109ee <_printf_float+0x366>
 80109c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80109ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80109cc:	eba3 020a 	sub.w	r2, r3, sl
 80109d0:	eba3 0a01 	sub.w	sl, r3, r1
 80109d4:	4592      	cmp	sl, r2
 80109d6:	bfa8      	it	ge
 80109d8:	4692      	movge	sl, r2
 80109da:	f1ba 0f00 	cmp.w	sl, #0
 80109de:	dc0e      	bgt.n	80109fe <_printf_float+0x376>
 80109e0:	f04f 0800 	mov.w	r8, #0
 80109e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80109e8:	f104 091a 	add.w	r9, r4, #26
 80109ec:	e019      	b.n	8010a22 <_printf_float+0x39a>
 80109ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80109f2:	4631      	mov	r1, r6
 80109f4:	4628      	mov	r0, r5
 80109f6:	47b8      	blx	r7
 80109f8:	3001      	adds	r0, #1
 80109fa:	d1e5      	bne.n	80109c8 <_printf_float+0x340>
 80109fc:	e6a1      	b.n	8010742 <_printf_float+0xba>
 80109fe:	4653      	mov	r3, sl
 8010a00:	4642      	mov	r2, r8
 8010a02:	4631      	mov	r1, r6
 8010a04:	4628      	mov	r0, r5
 8010a06:	47b8      	blx	r7
 8010a08:	3001      	adds	r0, #1
 8010a0a:	d1e9      	bne.n	80109e0 <_printf_float+0x358>
 8010a0c:	e699      	b.n	8010742 <_printf_float+0xba>
 8010a0e:	2301      	movs	r3, #1
 8010a10:	464a      	mov	r2, r9
 8010a12:	4631      	mov	r1, r6
 8010a14:	4628      	mov	r0, r5
 8010a16:	47b8      	blx	r7
 8010a18:	3001      	adds	r0, #1
 8010a1a:	f43f ae92 	beq.w	8010742 <_printf_float+0xba>
 8010a1e:	f108 0801 	add.w	r8, r8, #1
 8010a22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010a26:	1a9b      	subs	r3, r3, r2
 8010a28:	eba3 030a 	sub.w	r3, r3, sl
 8010a2c:	4543      	cmp	r3, r8
 8010a2e:	dcee      	bgt.n	8010a0e <_printf_float+0x386>
 8010a30:	e74a      	b.n	80108c8 <_printf_float+0x240>
 8010a32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010a34:	2a01      	cmp	r2, #1
 8010a36:	dc01      	bgt.n	8010a3c <_printf_float+0x3b4>
 8010a38:	07db      	lsls	r3, r3, #31
 8010a3a:	d53a      	bpl.n	8010ab2 <_printf_float+0x42a>
 8010a3c:	2301      	movs	r3, #1
 8010a3e:	4642      	mov	r2, r8
 8010a40:	4631      	mov	r1, r6
 8010a42:	4628      	mov	r0, r5
 8010a44:	47b8      	blx	r7
 8010a46:	3001      	adds	r0, #1
 8010a48:	f43f ae7b 	beq.w	8010742 <_printf_float+0xba>
 8010a4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010a50:	4631      	mov	r1, r6
 8010a52:	4628      	mov	r0, r5
 8010a54:	47b8      	blx	r7
 8010a56:	3001      	adds	r0, #1
 8010a58:	f108 0801 	add.w	r8, r8, #1
 8010a5c:	f43f ae71 	beq.w	8010742 <_printf_float+0xba>
 8010a60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a62:	2200      	movs	r2, #0
 8010a64:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8010a68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	f7f0 f82b 	bl	8000ac8 <__aeabi_dcmpeq>
 8010a72:	b9c8      	cbnz	r0, 8010aa8 <_printf_float+0x420>
 8010a74:	4653      	mov	r3, sl
 8010a76:	4642      	mov	r2, r8
 8010a78:	4631      	mov	r1, r6
 8010a7a:	4628      	mov	r0, r5
 8010a7c:	47b8      	blx	r7
 8010a7e:	3001      	adds	r0, #1
 8010a80:	d10e      	bne.n	8010aa0 <_printf_float+0x418>
 8010a82:	e65e      	b.n	8010742 <_printf_float+0xba>
 8010a84:	2301      	movs	r3, #1
 8010a86:	4652      	mov	r2, sl
 8010a88:	4631      	mov	r1, r6
 8010a8a:	4628      	mov	r0, r5
 8010a8c:	47b8      	blx	r7
 8010a8e:	3001      	adds	r0, #1
 8010a90:	f43f ae57 	beq.w	8010742 <_printf_float+0xba>
 8010a94:	f108 0801 	add.w	r8, r8, #1
 8010a98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a9a:	3b01      	subs	r3, #1
 8010a9c:	4543      	cmp	r3, r8
 8010a9e:	dcf1      	bgt.n	8010a84 <_printf_float+0x3fc>
 8010aa0:	464b      	mov	r3, r9
 8010aa2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010aa6:	e6de      	b.n	8010866 <_printf_float+0x1de>
 8010aa8:	f04f 0800 	mov.w	r8, #0
 8010aac:	f104 0a1a 	add.w	sl, r4, #26
 8010ab0:	e7f2      	b.n	8010a98 <_printf_float+0x410>
 8010ab2:	2301      	movs	r3, #1
 8010ab4:	e7df      	b.n	8010a76 <_printf_float+0x3ee>
 8010ab6:	2301      	movs	r3, #1
 8010ab8:	464a      	mov	r2, r9
 8010aba:	4631      	mov	r1, r6
 8010abc:	4628      	mov	r0, r5
 8010abe:	47b8      	blx	r7
 8010ac0:	3001      	adds	r0, #1
 8010ac2:	f43f ae3e 	beq.w	8010742 <_printf_float+0xba>
 8010ac6:	f108 0801 	add.w	r8, r8, #1
 8010aca:	68e3      	ldr	r3, [r4, #12]
 8010acc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010ace:	1a9b      	subs	r3, r3, r2
 8010ad0:	4543      	cmp	r3, r8
 8010ad2:	dcf0      	bgt.n	8010ab6 <_printf_float+0x42e>
 8010ad4:	e6fc      	b.n	80108d0 <_printf_float+0x248>
 8010ad6:	f04f 0800 	mov.w	r8, #0
 8010ada:	f104 0919 	add.w	r9, r4, #25
 8010ade:	e7f4      	b.n	8010aca <_printf_float+0x442>
 8010ae0:	2900      	cmp	r1, #0
 8010ae2:	f43f ae8b 	beq.w	80107fc <_printf_float+0x174>
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8010aec:	ab09      	add	r3, sp, #36	; 0x24
 8010aee:	9300      	str	r3, [sp, #0]
 8010af0:	ec49 8b10 	vmov	d0, r8, r9
 8010af4:	6022      	str	r2, [r4, #0]
 8010af6:	f8cd a004 	str.w	sl, [sp, #4]
 8010afa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010afe:	4628      	mov	r0, r5
 8010b00:	f7ff fd2d 	bl	801055e <__cvt>
 8010b04:	4680      	mov	r8, r0
 8010b06:	e648      	b.n	801079a <_printf_float+0x112>

08010b08 <_printf_common>:
 8010b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b0c:	4691      	mov	r9, r2
 8010b0e:	461f      	mov	r7, r3
 8010b10:	688a      	ldr	r2, [r1, #8]
 8010b12:	690b      	ldr	r3, [r1, #16]
 8010b14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010b18:	4293      	cmp	r3, r2
 8010b1a:	bfb8      	it	lt
 8010b1c:	4613      	movlt	r3, r2
 8010b1e:	f8c9 3000 	str.w	r3, [r9]
 8010b22:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010b26:	4606      	mov	r6, r0
 8010b28:	460c      	mov	r4, r1
 8010b2a:	b112      	cbz	r2, 8010b32 <_printf_common+0x2a>
 8010b2c:	3301      	adds	r3, #1
 8010b2e:	f8c9 3000 	str.w	r3, [r9]
 8010b32:	6823      	ldr	r3, [r4, #0]
 8010b34:	0699      	lsls	r1, r3, #26
 8010b36:	bf42      	ittt	mi
 8010b38:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010b3c:	3302      	addmi	r3, #2
 8010b3e:	f8c9 3000 	strmi.w	r3, [r9]
 8010b42:	6825      	ldr	r5, [r4, #0]
 8010b44:	f015 0506 	ands.w	r5, r5, #6
 8010b48:	d107      	bne.n	8010b5a <_printf_common+0x52>
 8010b4a:	f104 0a19 	add.w	sl, r4, #25
 8010b4e:	68e3      	ldr	r3, [r4, #12]
 8010b50:	f8d9 2000 	ldr.w	r2, [r9]
 8010b54:	1a9b      	subs	r3, r3, r2
 8010b56:	42ab      	cmp	r3, r5
 8010b58:	dc28      	bgt.n	8010bac <_printf_common+0xa4>
 8010b5a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010b5e:	6822      	ldr	r2, [r4, #0]
 8010b60:	3300      	adds	r3, #0
 8010b62:	bf18      	it	ne
 8010b64:	2301      	movne	r3, #1
 8010b66:	0692      	lsls	r2, r2, #26
 8010b68:	d42d      	bmi.n	8010bc6 <_printf_common+0xbe>
 8010b6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010b6e:	4639      	mov	r1, r7
 8010b70:	4630      	mov	r0, r6
 8010b72:	47c0      	blx	r8
 8010b74:	3001      	adds	r0, #1
 8010b76:	d020      	beq.n	8010bba <_printf_common+0xb2>
 8010b78:	6823      	ldr	r3, [r4, #0]
 8010b7a:	68e5      	ldr	r5, [r4, #12]
 8010b7c:	f8d9 2000 	ldr.w	r2, [r9]
 8010b80:	f003 0306 	and.w	r3, r3, #6
 8010b84:	2b04      	cmp	r3, #4
 8010b86:	bf08      	it	eq
 8010b88:	1aad      	subeq	r5, r5, r2
 8010b8a:	68a3      	ldr	r3, [r4, #8]
 8010b8c:	6922      	ldr	r2, [r4, #16]
 8010b8e:	bf0c      	ite	eq
 8010b90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010b94:	2500      	movne	r5, #0
 8010b96:	4293      	cmp	r3, r2
 8010b98:	bfc4      	itt	gt
 8010b9a:	1a9b      	subgt	r3, r3, r2
 8010b9c:	18ed      	addgt	r5, r5, r3
 8010b9e:	f04f 0900 	mov.w	r9, #0
 8010ba2:	341a      	adds	r4, #26
 8010ba4:	454d      	cmp	r5, r9
 8010ba6:	d11a      	bne.n	8010bde <_printf_common+0xd6>
 8010ba8:	2000      	movs	r0, #0
 8010baa:	e008      	b.n	8010bbe <_printf_common+0xb6>
 8010bac:	2301      	movs	r3, #1
 8010bae:	4652      	mov	r2, sl
 8010bb0:	4639      	mov	r1, r7
 8010bb2:	4630      	mov	r0, r6
 8010bb4:	47c0      	blx	r8
 8010bb6:	3001      	adds	r0, #1
 8010bb8:	d103      	bne.n	8010bc2 <_printf_common+0xba>
 8010bba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010bc2:	3501      	adds	r5, #1
 8010bc4:	e7c3      	b.n	8010b4e <_printf_common+0x46>
 8010bc6:	18e1      	adds	r1, r4, r3
 8010bc8:	1c5a      	adds	r2, r3, #1
 8010bca:	2030      	movs	r0, #48	; 0x30
 8010bcc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010bd0:	4422      	add	r2, r4
 8010bd2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010bd6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010bda:	3302      	adds	r3, #2
 8010bdc:	e7c5      	b.n	8010b6a <_printf_common+0x62>
 8010bde:	2301      	movs	r3, #1
 8010be0:	4622      	mov	r2, r4
 8010be2:	4639      	mov	r1, r7
 8010be4:	4630      	mov	r0, r6
 8010be6:	47c0      	blx	r8
 8010be8:	3001      	adds	r0, #1
 8010bea:	d0e6      	beq.n	8010bba <_printf_common+0xb2>
 8010bec:	f109 0901 	add.w	r9, r9, #1
 8010bf0:	e7d8      	b.n	8010ba4 <_printf_common+0x9c>
	...

08010bf4 <_printf_i>:
 8010bf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010bf8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010bfc:	460c      	mov	r4, r1
 8010bfe:	7e09      	ldrb	r1, [r1, #24]
 8010c00:	b085      	sub	sp, #20
 8010c02:	296e      	cmp	r1, #110	; 0x6e
 8010c04:	4617      	mov	r7, r2
 8010c06:	4606      	mov	r6, r0
 8010c08:	4698      	mov	r8, r3
 8010c0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010c0c:	f000 80b3 	beq.w	8010d76 <_printf_i+0x182>
 8010c10:	d822      	bhi.n	8010c58 <_printf_i+0x64>
 8010c12:	2963      	cmp	r1, #99	; 0x63
 8010c14:	d036      	beq.n	8010c84 <_printf_i+0x90>
 8010c16:	d80a      	bhi.n	8010c2e <_printf_i+0x3a>
 8010c18:	2900      	cmp	r1, #0
 8010c1a:	f000 80b9 	beq.w	8010d90 <_printf_i+0x19c>
 8010c1e:	2958      	cmp	r1, #88	; 0x58
 8010c20:	f000 8083 	beq.w	8010d2a <_printf_i+0x136>
 8010c24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010c28:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010c2c:	e032      	b.n	8010c94 <_printf_i+0xa0>
 8010c2e:	2964      	cmp	r1, #100	; 0x64
 8010c30:	d001      	beq.n	8010c36 <_printf_i+0x42>
 8010c32:	2969      	cmp	r1, #105	; 0x69
 8010c34:	d1f6      	bne.n	8010c24 <_printf_i+0x30>
 8010c36:	6820      	ldr	r0, [r4, #0]
 8010c38:	6813      	ldr	r3, [r2, #0]
 8010c3a:	0605      	lsls	r5, r0, #24
 8010c3c:	f103 0104 	add.w	r1, r3, #4
 8010c40:	d52a      	bpl.n	8010c98 <_printf_i+0xa4>
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	6011      	str	r1, [r2, #0]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	da03      	bge.n	8010c52 <_printf_i+0x5e>
 8010c4a:	222d      	movs	r2, #45	; 0x2d
 8010c4c:	425b      	negs	r3, r3
 8010c4e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010c52:	486f      	ldr	r0, [pc, #444]	; (8010e10 <_printf_i+0x21c>)
 8010c54:	220a      	movs	r2, #10
 8010c56:	e039      	b.n	8010ccc <_printf_i+0xd8>
 8010c58:	2973      	cmp	r1, #115	; 0x73
 8010c5a:	f000 809d 	beq.w	8010d98 <_printf_i+0x1a4>
 8010c5e:	d808      	bhi.n	8010c72 <_printf_i+0x7e>
 8010c60:	296f      	cmp	r1, #111	; 0x6f
 8010c62:	d020      	beq.n	8010ca6 <_printf_i+0xb2>
 8010c64:	2970      	cmp	r1, #112	; 0x70
 8010c66:	d1dd      	bne.n	8010c24 <_printf_i+0x30>
 8010c68:	6823      	ldr	r3, [r4, #0]
 8010c6a:	f043 0320 	orr.w	r3, r3, #32
 8010c6e:	6023      	str	r3, [r4, #0]
 8010c70:	e003      	b.n	8010c7a <_printf_i+0x86>
 8010c72:	2975      	cmp	r1, #117	; 0x75
 8010c74:	d017      	beq.n	8010ca6 <_printf_i+0xb2>
 8010c76:	2978      	cmp	r1, #120	; 0x78
 8010c78:	d1d4      	bne.n	8010c24 <_printf_i+0x30>
 8010c7a:	2378      	movs	r3, #120	; 0x78
 8010c7c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010c80:	4864      	ldr	r0, [pc, #400]	; (8010e14 <_printf_i+0x220>)
 8010c82:	e055      	b.n	8010d30 <_printf_i+0x13c>
 8010c84:	6813      	ldr	r3, [r2, #0]
 8010c86:	1d19      	adds	r1, r3, #4
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	6011      	str	r1, [r2, #0]
 8010c8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010c90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010c94:	2301      	movs	r3, #1
 8010c96:	e08c      	b.n	8010db2 <_printf_i+0x1be>
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	6011      	str	r1, [r2, #0]
 8010c9c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010ca0:	bf18      	it	ne
 8010ca2:	b21b      	sxthne	r3, r3
 8010ca4:	e7cf      	b.n	8010c46 <_printf_i+0x52>
 8010ca6:	6813      	ldr	r3, [r2, #0]
 8010ca8:	6825      	ldr	r5, [r4, #0]
 8010caa:	1d18      	adds	r0, r3, #4
 8010cac:	6010      	str	r0, [r2, #0]
 8010cae:	0628      	lsls	r0, r5, #24
 8010cb0:	d501      	bpl.n	8010cb6 <_printf_i+0xc2>
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	e002      	b.n	8010cbc <_printf_i+0xc8>
 8010cb6:	0668      	lsls	r0, r5, #25
 8010cb8:	d5fb      	bpl.n	8010cb2 <_printf_i+0xbe>
 8010cba:	881b      	ldrh	r3, [r3, #0]
 8010cbc:	4854      	ldr	r0, [pc, #336]	; (8010e10 <_printf_i+0x21c>)
 8010cbe:	296f      	cmp	r1, #111	; 0x6f
 8010cc0:	bf14      	ite	ne
 8010cc2:	220a      	movne	r2, #10
 8010cc4:	2208      	moveq	r2, #8
 8010cc6:	2100      	movs	r1, #0
 8010cc8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010ccc:	6865      	ldr	r5, [r4, #4]
 8010cce:	60a5      	str	r5, [r4, #8]
 8010cd0:	2d00      	cmp	r5, #0
 8010cd2:	f2c0 8095 	blt.w	8010e00 <_printf_i+0x20c>
 8010cd6:	6821      	ldr	r1, [r4, #0]
 8010cd8:	f021 0104 	bic.w	r1, r1, #4
 8010cdc:	6021      	str	r1, [r4, #0]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d13d      	bne.n	8010d5e <_printf_i+0x16a>
 8010ce2:	2d00      	cmp	r5, #0
 8010ce4:	f040 808e 	bne.w	8010e04 <_printf_i+0x210>
 8010ce8:	4665      	mov	r5, ip
 8010cea:	2a08      	cmp	r2, #8
 8010cec:	d10b      	bne.n	8010d06 <_printf_i+0x112>
 8010cee:	6823      	ldr	r3, [r4, #0]
 8010cf0:	07db      	lsls	r3, r3, #31
 8010cf2:	d508      	bpl.n	8010d06 <_printf_i+0x112>
 8010cf4:	6923      	ldr	r3, [r4, #16]
 8010cf6:	6862      	ldr	r2, [r4, #4]
 8010cf8:	429a      	cmp	r2, r3
 8010cfa:	bfde      	ittt	le
 8010cfc:	2330      	movle	r3, #48	; 0x30
 8010cfe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010d02:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010d06:	ebac 0305 	sub.w	r3, ip, r5
 8010d0a:	6123      	str	r3, [r4, #16]
 8010d0c:	f8cd 8000 	str.w	r8, [sp]
 8010d10:	463b      	mov	r3, r7
 8010d12:	aa03      	add	r2, sp, #12
 8010d14:	4621      	mov	r1, r4
 8010d16:	4630      	mov	r0, r6
 8010d18:	f7ff fef6 	bl	8010b08 <_printf_common>
 8010d1c:	3001      	adds	r0, #1
 8010d1e:	d14d      	bne.n	8010dbc <_printf_i+0x1c8>
 8010d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010d24:	b005      	add	sp, #20
 8010d26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d2a:	4839      	ldr	r0, [pc, #228]	; (8010e10 <_printf_i+0x21c>)
 8010d2c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010d30:	6813      	ldr	r3, [r2, #0]
 8010d32:	6821      	ldr	r1, [r4, #0]
 8010d34:	1d1d      	adds	r5, r3, #4
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	6015      	str	r5, [r2, #0]
 8010d3a:	060a      	lsls	r2, r1, #24
 8010d3c:	d50b      	bpl.n	8010d56 <_printf_i+0x162>
 8010d3e:	07ca      	lsls	r2, r1, #31
 8010d40:	bf44      	itt	mi
 8010d42:	f041 0120 	orrmi.w	r1, r1, #32
 8010d46:	6021      	strmi	r1, [r4, #0]
 8010d48:	b91b      	cbnz	r3, 8010d52 <_printf_i+0x15e>
 8010d4a:	6822      	ldr	r2, [r4, #0]
 8010d4c:	f022 0220 	bic.w	r2, r2, #32
 8010d50:	6022      	str	r2, [r4, #0]
 8010d52:	2210      	movs	r2, #16
 8010d54:	e7b7      	b.n	8010cc6 <_printf_i+0xd2>
 8010d56:	064d      	lsls	r5, r1, #25
 8010d58:	bf48      	it	mi
 8010d5a:	b29b      	uxthmi	r3, r3
 8010d5c:	e7ef      	b.n	8010d3e <_printf_i+0x14a>
 8010d5e:	4665      	mov	r5, ip
 8010d60:	fbb3 f1f2 	udiv	r1, r3, r2
 8010d64:	fb02 3311 	mls	r3, r2, r1, r3
 8010d68:	5cc3      	ldrb	r3, [r0, r3]
 8010d6a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010d6e:	460b      	mov	r3, r1
 8010d70:	2900      	cmp	r1, #0
 8010d72:	d1f5      	bne.n	8010d60 <_printf_i+0x16c>
 8010d74:	e7b9      	b.n	8010cea <_printf_i+0xf6>
 8010d76:	6813      	ldr	r3, [r2, #0]
 8010d78:	6825      	ldr	r5, [r4, #0]
 8010d7a:	6961      	ldr	r1, [r4, #20]
 8010d7c:	1d18      	adds	r0, r3, #4
 8010d7e:	6010      	str	r0, [r2, #0]
 8010d80:	0628      	lsls	r0, r5, #24
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	d501      	bpl.n	8010d8a <_printf_i+0x196>
 8010d86:	6019      	str	r1, [r3, #0]
 8010d88:	e002      	b.n	8010d90 <_printf_i+0x19c>
 8010d8a:	066a      	lsls	r2, r5, #25
 8010d8c:	d5fb      	bpl.n	8010d86 <_printf_i+0x192>
 8010d8e:	8019      	strh	r1, [r3, #0]
 8010d90:	2300      	movs	r3, #0
 8010d92:	6123      	str	r3, [r4, #16]
 8010d94:	4665      	mov	r5, ip
 8010d96:	e7b9      	b.n	8010d0c <_printf_i+0x118>
 8010d98:	6813      	ldr	r3, [r2, #0]
 8010d9a:	1d19      	adds	r1, r3, #4
 8010d9c:	6011      	str	r1, [r2, #0]
 8010d9e:	681d      	ldr	r5, [r3, #0]
 8010da0:	6862      	ldr	r2, [r4, #4]
 8010da2:	2100      	movs	r1, #0
 8010da4:	4628      	mov	r0, r5
 8010da6:	f7ef fa1b 	bl	80001e0 <memchr>
 8010daa:	b108      	cbz	r0, 8010db0 <_printf_i+0x1bc>
 8010dac:	1b40      	subs	r0, r0, r5
 8010dae:	6060      	str	r0, [r4, #4]
 8010db0:	6863      	ldr	r3, [r4, #4]
 8010db2:	6123      	str	r3, [r4, #16]
 8010db4:	2300      	movs	r3, #0
 8010db6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010dba:	e7a7      	b.n	8010d0c <_printf_i+0x118>
 8010dbc:	6923      	ldr	r3, [r4, #16]
 8010dbe:	462a      	mov	r2, r5
 8010dc0:	4639      	mov	r1, r7
 8010dc2:	4630      	mov	r0, r6
 8010dc4:	47c0      	blx	r8
 8010dc6:	3001      	adds	r0, #1
 8010dc8:	d0aa      	beq.n	8010d20 <_printf_i+0x12c>
 8010dca:	6823      	ldr	r3, [r4, #0]
 8010dcc:	079b      	lsls	r3, r3, #30
 8010dce:	d413      	bmi.n	8010df8 <_printf_i+0x204>
 8010dd0:	68e0      	ldr	r0, [r4, #12]
 8010dd2:	9b03      	ldr	r3, [sp, #12]
 8010dd4:	4298      	cmp	r0, r3
 8010dd6:	bfb8      	it	lt
 8010dd8:	4618      	movlt	r0, r3
 8010dda:	e7a3      	b.n	8010d24 <_printf_i+0x130>
 8010ddc:	2301      	movs	r3, #1
 8010dde:	464a      	mov	r2, r9
 8010de0:	4639      	mov	r1, r7
 8010de2:	4630      	mov	r0, r6
 8010de4:	47c0      	blx	r8
 8010de6:	3001      	adds	r0, #1
 8010de8:	d09a      	beq.n	8010d20 <_printf_i+0x12c>
 8010dea:	3501      	adds	r5, #1
 8010dec:	68e3      	ldr	r3, [r4, #12]
 8010dee:	9a03      	ldr	r2, [sp, #12]
 8010df0:	1a9b      	subs	r3, r3, r2
 8010df2:	42ab      	cmp	r3, r5
 8010df4:	dcf2      	bgt.n	8010ddc <_printf_i+0x1e8>
 8010df6:	e7eb      	b.n	8010dd0 <_printf_i+0x1dc>
 8010df8:	2500      	movs	r5, #0
 8010dfa:	f104 0919 	add.w	r9, r4, #25
 8010dfe:	e7f5      	b.n	8010dec <_printf_i+0x1f8>
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d1ac      	bne.n	8010d5e <_printf_i+0x16a>
 8010e04:	7803      	ldrb	r3, [r0, #0]
 8010e06:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010e0a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010e0e:	e76c      	b.n	8010cea <_printf_i+0xf6>
 8010e10:	080166ba 	.word	0x080166ba
 8010e14:	080166cb 	.word	0x080166cb

08010e18 <iprintf>:
 8010e18:	b40f      	push	{r0, r1, r2, r3}
 8010e1a:	4b0a      	ldr	r3, [pc, #40]	; (8010e44 <iprintf+0x2c>)
 8010e1c:	b513      	push	{r0, r1, r4, lr}
 8010e1e:	681c      	ldr	r4, [r3, #0]
 8010e20:	b124      	cbz	r4, 8010e2c <iprintf+0x14>
 8010e22:	69a3      	ldr	r3, [r4, #24]
 8010e24:	b913      	cbnz	r3, 8010e2c <iprintf+0x14>
 8010e26:	4620      	mov	r0, r4
 8010e28:	f001 ff02 	bl	8012c30 <__sinit>
 8010e2c:	ab05      	add	r3, sp, #20
 8010e2e:	9a04      	ldr	r2, [sp, #16]
 8010e30:	68a1      	ldr	r1, [r4, #8]
 8010e32:	9301      	str	r3, [sp, #4]
 8010e34:	4620      	mov	r0, r4
 8010e36:	f003 f96b 	bl	8014110 <_vfiprintf_r>
 8010e3a:	b002      	add	sp, #8
 8010e3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e40:	b004      	add	sp, #16
 8010e42:	4770      	bx	lr
 8010e44:	2000015c 	.word	0x2000015c

08010e48 <_puts_r>:
 8010e48:	b570      	push	{r4, r5, r6, lr}
 8010e4a:	460e      	mov	r6, r1
 8010e4c:	4605      	mov	r5, r0
 8010e4e:	b118      	cbz	r0, 8010e58 <_puts_r+0x10>
 8010e50:	6983      	ldr	r3, [r0, #24]
 8010e52:	b90b      	cbnz	r3, 8010e58 <_puts_r+0x10>
 8010e54:	f001 feec 	bl	8012c30 <__sinit>
 8010e58:	69ab      	ldr	r3, [r5, #24]
 8010e5a:	68ac      	ldr	r4, [r5, #8]
 8010e5c:	b913      	cbnz	r3, 8010e64 <_puts_r+0x1c>
 8010e5e:	4628      	mov	r0, r5
 8010e60:	f001 fee6 	bl	8012c30 <__sinit>
 8010e64:	4b23      	ldr	r3, [pc, #140]	; (8010ef4 <_puts_r+0xac>)
 8010e66:	429c      	cmp	r4, r3
 8010e68:	d117      	bne.n	8010e9a <_puts_r+0x52>
 8010e6a:	686c      	ldr	r4, [r5, #4]
 8010e6c:	89a3      	ldrh	r3, [r4, #12]
 8010e6e:	071b      	lsls	r3, r3, #28
 8010e70:	d51d      	bpl.n	8010eae <_puts_r+0x66>
 8010e72:	6923      	ldr	r3, [r4, #16]
 8010e74:	b1db      	cbz	r3, 8010eae <_puts_r+0x66>
 8010e76:	3e01      	subs	r6, #1
 8010e78:	68a3      	ldr	r3, [r4, #8]
 8010e7a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010e7e:	3b01      	subs	r3, #1
 8010e80:	60a3      	str	r3, [r4, #8]
 8010e82:	b9e9      	cbnz	r1, 8010ec0 <_puts_r+0x78>
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	da2e      	bge.n	8010ee6 <_puts_r+0x9e>
 8010e88:	4622      	mov	r2, r4
 8010e8a:	210a      	movs	r1, #10
 8010e8c:	4628      	mov	r0, r5
 8010e8e:	f000 fedb 	bl	8011c48 <__swbuf_r>
 8010e92:	3001      	adds	r0, #1
 8010e94:	d011      	beq.n	8010eba <_puts_r+0x72>
 8010e96:	200a      	movs	r0, #10
 8010e98:	e011      	b.n	8010ebe <_puts_r+0x76>
 8010e9a:	4b17      	ldr	r3, [pc, #92]	; (8010ef8 <_puts_r+0xb0>)
 8010e9c:	429c      	cmp	r4, r3
 8010e9e:	d101      	bne.n	8010ea4 <_puts_r+0x5c>
 8010ea0:	68ac      	ldr	r4, [r5, #8]
 8010ea2:	e7e3      	b.n	8010e6c <_puts_r+0x24>
 8010ea4:	4b15      	ldr	r3, [pc, #84]	; (8010efc <_puts_r+0xb4>)
 8010ea6:	429c      	cmp	r4, r3
 8010ea8:	bf08      	it	eq
 8010eaa:	68ec      	ldreq	r4, [r5, #12]
 8010eac:	e7de      	b.n	8010e6c <_puts_r+0x24>
 8010eae:	4621      	mov	r1, r4
 8010eb0:	4628      	mov	r0, r5
 8010eb2:	f000 ff1b 	bl	8011cec <__swsetup_r>
 8010eb6:	2800      	cmp	r0, #0
 8010eb8:	d0dd      	beq.n	8010e76 <_puts_r+0x2e>
 8010eba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010ebe:	bd70      	pop	{r4, r5, r6, pc}
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	da04      	bge.n	8010ece <_puts_r+0x86>
 8010ec4:	69a2      	ldr	r2, [r4, #24]
 8010ec6:	429a      	cmp	r2, r3
 8010ec8:	dc06      	bgt.n	8010ed8 <_puts_r+0x90>
 8010eca:	290a      	cmp	r1, #10
 8010ecc:	d004      	beq.n	8010ed8 <_puts_r+0x90>
 8010ece:	6823      	ldr	r3, [r4, #0]
 8010ed0:	1c5a      	adds	r2, r3, #1
 8010ed2:	6022      	str	r2, [r4, #0]
 8010ed4:	7019      	strb	r1, [r3, #0]
 8010ed6:	e7cf      	b.n	8010e78 <_puts_r+0x30>
 8010ed8:	4622      	mov	r2, r4
 8010eda:	4628      	mov	r0, r5
 8010edc:	f000 feb4 	bl	8011c48 <__swbuf_r>
 8010ee0:	3001      	adds	r0, #1
 8010ee2:	d1c9      	bne.n	8010e78 <_puts_r+0x30>
 8010ee4:	e7e9      	b.n	8010eba <_puts_r+0x72>
 8010ee6:	6823      	ldr	r3, [r4, #0]
 8010ee8:	200a      	movs	r0, #10
 8010eea:	1c5a      	adds	r2, r3, #1
 8010eec:	6022      	str	r2, [r4, #0]
 8010eee:	7018      	strb	r0, [r3, #0]
 8010ef0:	e7e5      	b.n	8010ebe <_puts_r+0x76>
 8010ef2:	bf00      	nop
 8010ef4:	08016760 	.word	0x08016760
 8010ef8:	08016780 	.word	0x08016780
 8010efc:	08016740 	.word	0x08016740

08010f00 <puts>:
 8010f00:	4b02      	ldr	r3, [pc, #8]	; (8010f0c <puts+0xc>)
 8010f02:	4601      	mov	r1, r0
 8010f04:	6818      	ldr	r0, [r3, #0]
 8010f06:	f7ff bf9f 	b.w	8010e48 <_puts_r>
 8010f0a:	bf00      	nop
 8010f0c:	2000015c 	.word	0x2000015c

08010f10 <siprintf>:
 8010f10:	b40e      	push	{r1, r2, r3}
 8010f12:	b500      	push	{lr}
 8010f14:	b09c      	sub	sp, #112	; 0x70
 8010f16:	ab1d      	add	r3, sp, #116	; 0x74
 8010f18:	9002      	str	r0, [sp, #8]
 8010f1a:	9006      	str	r0, [sp, #24]
 8010f1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010f20:	4809      	ldr	r0, [pc, #36]	; (8010f48 <siprintf+0x38>)
 8010f22:	9107      	str	r1, [sp, #28]
 8010f24:	9104      	str	r1, [sp, #16]
 8010f26:	4909      	ldr	r1, [pc, #36]	; (8010f4c <siprintf+0x3c>)
 8010f28:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f2c:	9105      	str	r1, [sp, #20]
 8010f2e:	6800      	ldr	r0, [r0, #0]
 8010f30:	9301      	str	r3, [sp, #4]
 8010f32:	a902      	add	r1, sp, #8
 8010f34:	f002 ffca 	bl	8013ecc <_svfiprintf_r>
 8010f38:	9b02      	ldr	r3, [sp, #8]
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	701a      	strb	r2, [r3, #0]
 8010f3e:	b01c      	add	sp, #112	; 0x70
 8010f40:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f44:	b003      	add	sp, #12
 8010f46:	4770      	bx	lr
 8010f48:	2000015c 	.word	0x2000015c
 8010f4c:	ffff0208 	.word	0xffff0208

08010f50 <strncpy>:
 8010f50:	b570      	push	{r4, r5, r6, lr}
 8010f52:	3901      	subs	r1, #1
 8010f54:	4604      	mov	r4, r0
 8010f56:	b902      	cbnz	r2, 8010f5a <strncpy+0xa>
 8010f58:	bd70      	pop	{r4, r5, r6, pc}
 8010f5a:	4623      	mov	r3, r4
 8010f5c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8010f60:	f803 5b01 	strb.w	r5, [r3], #1
 8010f64:	1e56      	subs	r6, r2, #1
 8010f66:	b92d      	cbnz	r5, 8010f74 <strncpy+0x24>
 8010f68:	4414      	add	r4, r2
 8010f6a:	42a3      	cmp	r3, r4
 8010f6c:	d0f4      	beq.n	8010f58 <strncpy+0x8>
 8010f6e:	f803 5b01 	strb.w	r5, [r3], #1
 8010f72:	e7fa      	b.n	8010f6a <strncpy+0x1a>
 8010f74:	461c      	mov	r4, r3
 8010f76:	4632      	mov	r2, r6
 8010f78:	e7ed      	b.n	8010f56 <strncpy+0x6>

08010f7a <sulp>:
 8010f7a:	b570      	push	{r4, r5, r6, lr}
 8010f7c:	4604      	mov	r4, r0
 8010f7e:	460d      	mov	r5, r1
 8010f80:	ec45 4b10 	vmov	d0, r4, r5
 8010f84:	4616      	mov	r6, r2
 8010f86:	f002 fd5d 	bl	8013a44 <__ulp>
 8010f8a:	ec51 0b10 	vmov	r0, r1, d0
 8010f8e:	b17e      	cbz	r6, 8010fb0 <sulp+0x36>
 8010f90:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8010f94:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	dd09      	ble.n	8010fb0 <sulp+0x36>
 8010f9c:	051b      	lsls	r3, r3, #20
 8010f9e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8010fa2:	2400      	movs	r4, #0
 8010fa4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8010fa8:	4622      	mov	r2, r4
 8010faa:	462b      	mov	r3, r5
 8010fac:	f7ef fb24 	bl	80005f8 <__aeabi_dmul>
 8010fb0:	bd70      	pop	{r4, r5, r6, pc}
 8010fb2:	0000      	movs	r0, r0
 8010fb4:	0000      	movs	r0, r0
	...

08010fb8 <_strtod_l>:
 8010fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fbc:	461f      	mov	r7, r3
 8010fbe:	b0a1      	sub	sp, #132	; 0x84
 8010fc0:	2300      	movs	r3, #0
 8010fc2:	4681      	mov	r9, r0
 8010fc4:	4638      	mov	r0, r7
 8010fc6:	460e      	mov	r6, r1
 8010fc8:	9217      	str	r2, [sp, #92]	; 0x5c
 8010fca:	931c      	str	r3, [sp, #112]	; 0x70
 8010fcc:	f002 f9e0 	bl	8013390 <__localeconv_l>
 8010fd0:	4680      	mov	r8, r0
 8010fd2:	6800      	ldr	r0, [r0, #0]
 8010fd4:	f7ef f8fc 	bl	80001d0 <strlen>
 8010fd8:	f04f 0a00 	mov.w	sl, #0
 8010fdc:	4604      	mov	r4, r0
 8010fde:	f04f 0b00 	mov.w	fp, #0
 8010fe2:	961b      	str	r6, [sp, #108]	; 0x6c
 8010fe4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010fe6:	781a      	ldrb	r2, [r3, #0]
 8010fe8:	2a0d      	cmp	r2, #13
 8010fea:	d832      	bhi.n	8011052 <_strtod_l+0x9a>
 8010fec:	2a09      	cmp	r2, #9
 8010fee:	d236      	bcs.n	801105e <_strtod_l+0xa6>
 8010ff0:	2a00      	cmp	r2, #0
 8010ff2:	d03e      	beq.n	8011072 <_strtod_l+0xba>
 8010ff4:	2300      	movs	r3, #0
 8010ff6:	930d      	str	r3, [sp, #52]	; 0x34
 8010ff8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8010ffa:	782b      	ldrb	r3, [r5, #0]
 8010ffc:	2b30      	cmp	r3, #48	; 0x30
 8010ffe:	f040 80ac 	bne.w	801115a <_strtod_l+0x1a2>
 8011002:	786b      	ldrb	r3, [r5, #1]
 8011004:	2b58      	cmp	r3, #88	; 0x58
 8011006:	d001      	beq.n	801100c <_strtod_l+0x54>
 8011008:	2b78      	cmp	r3, #120	; 0x78
 801100a:	d167      	bne.n	80110dc <_strtod_l+0x124>
 801100c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801100e:	9301      	str	r3, [sp, #4]
 8011010:	ab1c      	add	r3, sp, #112	; 0x70
 8011012:	9300      	str	r3, [sp, #0]
 8011014:	9702      	str	r7, [sp, #8]
 8011016:	ab1d      	add	r3, sp, #116	; 0x74
 8011018:	4a88      	ldr	r2, [pc, #544]	; (801123c <_strtod_l+0x284>)
 801101a:	a91b      	add	r1, sp, #108	; 0x6c
 801101c:	4648      	mov	r0, r9
 801101e:	f001 fee0 	bl	8012de2 <__gethex>
 8011022:	f010 0407 	ands.w	r4, r0, #7
 8011026:	4606      	mov	r6, r0
 8011028:	d005      	beq.n	8011036 <_strtod_l+0x7e>
 801102a:	2c06      	cmp	r4, #6
 801102c:	d12b      	bne.n	8011086 <_strtod_l+0xce>
 801102e:	3501      	adds	r5, #1
 8011030:	2300      	movs	r3, #0
 8011032:	951b      	str	r5, [sp, #108]	; 0x6c
 8011034:	930d      	str	r3, [sp, #52]	; 0x34
 8011036:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011038:	2b00      	cmp	r3, #0
 801103a:	f040 859a 	bne.w	8011b72 <_strtod_l+0xbba>
 801103e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011040:	b1e3      	cbz	r3, 801107c <_strtod_l+0xc4>
 8011042:	4652      	mov	r2, sl
 8011044:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8011048:	ec43 2b10 	vmov	d0, r2, r3
 801104c:	b021      	add	sp, #132	; 0x84
 801104e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011052:	2a2b      	cmp	r2, #43	; 0x2b
 8011054:	d015      	beq.n	8011082 <_strtod_l+0xca>
 8011056:	2a2d      	cmp	r2, #45	; 0x2d
 8011058:	d004      	beq.n	8011064 <_strtod_l+0xac>
 801105a:	2a20      	cmp	r2, #32
 801105c:	d1ca      	bne.n	8010ff4 <_strtod_l+0x3c>
 801105e:	3301      	adds	r3, #1
 8011060:	931b      	str	r3, [sp, #108]	; 0x6c
 8011062:	e7bf      	b.n	8010fe4 <_strtod_l+0x2c>
 8011064:	2201      	movs	r2, #1
 8011066:	920d      	str	r2, [sp, #52]	; 0x34
 8011068:	1c5a      	adds	r2, r3, #1
 801106a:	921b      	str	r2, [sp, #108]	; 0x6c
 801106c:	785b      	ldrb	r3, [r3, #1]
 801106e:	2b00      	cmp	r3, #0
 8011070:	d1c2      	bne.n	8010ff8 <_strtod_l+0x40>
 8011072:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011074:	961b      	str	r6, [sp, #108]	; 0x6c
 8011076:	2b00      	cmp	r3, #0
 8011078:	f040 8579 	bne.w	8011b6e <_strtod_l+0xbb6>
 801107c:	4652      	mov	r2, sl
 801107e:	465b      	mov	r3, fp
 8011080:	e7e2      	b.n	8011048 <_strtod_l+0x90>
 8011082:	2200      	movs	r2, #0
 8011084:	e7ef      	b.n	8011066 <_strtod_l+0xae>
 8011086:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011088:	b13a      	cbz	r2, 801109a <_strtod_l+0xe2>
 801108a:	2135      	movs	r1, #53	; 0x35
 801108c:	a81e      	add	r0, sp, #120	; 0x78
 801108e:	f002 fdd1 	bl	8013c34 <__copybits>
 8011092:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011094:	4648      	mov	r0, r9
 8011096:	f002 fa3d 	bl	8013514 <_Bfree>
 801109a:	3c01      	subs	r4, #1
 801109c:	2c04      	cmp	r4, #4
 801109e:	d806      	bhi.n	80110ae <_strtod_l+0xf6>
 80110a0:	e8df f004 	tbb	[pc, r4]
 80110a4:	1714030a 	.word	0x1714030a
 80110a8:	0a          	.byte	0x0a
 80110a9:	00          	.byte	0x00
 80110aa:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80110ae:	0730      	lsls	r0, r6, #28
 80110b0:	d5c1      	bpl.n	8011036 <_strtod_l+0x7e>
 80110b2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80110b6:	e7be      	b.n	8011036 <_strtod_l+0x7e>
 80110b8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80110bc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80110be:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80110c2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80110c6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80110ca:	e7f0      	b.n	80110ae <_strtod_l+0xf6>
 80110cc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8011240 <_strtod_l+0x288>
 80110d0:	e7ed      	b.n	80110ae <_strtod_l+0xf6>
 80110d2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80110d6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80110da:	e7e8      	b.n	80110ae <_strtod_l+0xf6>
 80110dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80110de:	1c5a      	adds	r2, r3, #1
 80110e0:	921b      	str	r2, [sp, #108]	; 0x6c
 80110e2:	785b      	ldrb	r3, [r3, #1]
 80110e4:	2b30      	cmp	r3, #48	; 0x30
 80110e6:	d0f9      	beq.n	80110dc <_strtod_l+0x124>
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d0a4      	beq.n	8011036 <_strtod_l+0x7e>
 80110ec:	2301      	movs	r3, #1
 80110ee:	2500      	movs	r5, #0
 80110f0:	9306      	str	r3, [sp, #24]
 80110f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80110f4:	9308      	str	r3, [sp, #32]
 80110f6:	9507      	str	r5, [sp, #28]
 80110f8:	9505      	str	r5, [sp, #20]
 80110fa:	220a      	movs	r2, #10
 80110fc:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80110fe:	7807      	ldrb	r7, [r0, #0]
 8011100:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8011104:	b2d9      	uxtb	r1, r3
 8011106:	2909      	cmp	r1, #9
 8011108:	d929      	bls.n	801115e <_strtod_l+0x1a6>
 801110a:	4622      	mov	r2, r4
 801110c:	f8d8 1000 	ldr.w	r1, [r8]
 8011110:	f003 f96d 	bl	80143ee <strncmp>
 8011114:	2800      	cmp	r0, #0
 8011116:	d031      	beq.n	801117c <_strtod_l+0x1c4>
 8011118:	2000      	movs	r0, #0
 801111a:	9c05      	ldr	r4, [sp, #20]
 801111c:	9004      	str	r0, [sp, #16]
 801111e:	463b      	mov	r3, r7
 8011120:	4602      	mov	r2, r0
 8011122:	2b65      	cmp	r3, #101	; 0x65
 8011124:	d001      	beq.n	801112a <_strtod_l+0x172>
 8011126:	2b45      	cmp	r3, #69	; 0x45
 8011128:	d114      	bne.n	8011154 <_strtod_l+0x19c>
 801112a:	b924      	cbnz	r4, 8011136 <_strtod_l+0x17e>
 801112c:	b910      	cbnz	r0, 8011134 <_strtod_l+0x17c>
 801112e:	9b06      	ldr	r3, [sp, #24]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d09e      	beq.n	8011072 <_strtod_l+0xba>
 8011134:	2400      	movs	r4, #0
 8011136:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8011138:	1c73      	adds	r3, r6, #1
 801113a:	931b      	str	r3, [sp, #108]	; 0x6c
 801113c:	7873      	ldrb	r3, [r6, #1]
 801113e:	2b2b      	cmp	r3, #43	; 0x2b
 8011140:	d078      	beq.n	8011234 <_strtod_l+0x27c>
 8011142:	2b2d      	cmp	r3, #45	; 0x2d
 8011144:	d070      	beq.n	8011228 <_strtod_l+0x270>
 8011146:	f04f 0c00 	mov.w	ip, #0
 801114a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801114e:	2f09      	cmp	r7, #9
 8011150:	d97c      	bls.n	801124c <_strtod_l+0x294>
 8011152:	961b      	str	r6, [sp, #108]	; 0x6c
 8011154:	f04f 0e00 	mov.w	lr, #0
 8011158:	e09a      	b.n	8011290 <_strtod_l+0x2d8>
 801115a:	2300      	movs	r3, #0
 801115c:	e7c7      	b.n	80110ee <_strtod_l+0x136>
 801115e:	9905      	ldr	r1, [sp, #20]
 8011160:	2908      	cmp	r1, #8
 8011162:	bfdd      	ittte	le
 8011164:	9907      	ldrle	r1, [sp, #28]
 8011166:	fb02 3301 	mlale	r3, r2, r1, r3
 801116a:	9307      	strle	r3, [sp, #28]
 801116c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8011170:	9b05      	ldr	r3, [sp, #20]
 8011172:	3001      	adds	r0, #1
 8011174:	3301      	adds	r3, #1
 8011176:	9305      	str	r3, [sp, #20]
 8011178:	901b      	str	r0, [sp, #108]	; 0x6c
 801117a:	e7bf      	b.n	80110fc <_strtod_l+0x144>
 801117c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801117e:	191a      	adds	r2, r3, r4
 8011180:	921b      	str	r2, [sp, #108]	; 0x6c
 8011182:	9a05      	ldr	r2, [sp, #20]
 8011184:	5d1b      	ldrb	r3, [r3, r4]
 8011186:	2a00      	cmp	r2, #0
 8011188:	d037      	beq.n	80111fa <_strtod_l+0x242>
 801118a:	9c05      	ldr	r4, [sp, #20]
 801118c:	4602      	mov	r2, r0
 801118e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8011192:	2909      	cmp	r1, #9
 8011194:	d913      	bls.n	80111be <_strtod_l+0x206>
 8011196:	2101      	movs	r1, #1
 8011198:	9104      	str	r1, [sp, #16]
 801119a:	e7c2      	b.n	8011122 <_strtod_l+0x16a>
 801119c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801119e:	1c5a      	adds	r2, r3, #1
 80111a0:	921b      	str	r2, [sp, #108]	; 0x6c
 80111a2:	785b      	ldrb	r3, [r3, #1]
 80111a4:	3001      	adds	r0, #1
 80111a6:	2b30      	cmp	r3, #48	; 0x30
 80111a8:	d0f8      	beq.n	801119c <_strtod_l+0x1e4>
 80111aa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80111ae:	2a08      	cmp	r2, #8
 80111b0:	f200 84e4 	bhi.w	8011b7c <_strtod_l+0xbc4>
 80111b4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80111b6:	9208      	str	r2, [sp, #32]
 80111b8:	4602      	mov	r2, r0
 80111ba:	2000      	movs	r0, #0
 80111bc:	4604      	mov	r4, r0
 80111be:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80111c2:	f100 0101 	add.w	r1, r0, #1
 80111c6:	d012      	beq.n	80111ee <_strtod_l+0x236>
 80111c8:	440a      	add	r2, r1
 80111ca:	eb00 0c04 	add.w	ip, r0, r4
 80111ce:	4621      	mov	r1, r4
 80111d0:	270a      	movs	r7, #10
 80111d2:	458c      	cmp	ip, r1
 80111d4:	d113      	bne.n	80111fe <_strtod_l+0x246>
 80111d6:	1821      	adds	r1, r4, r0
 80111d8:	2908      	cmp	r1, #8
 80111da:	f104 0401 	add.w	r4, r4, #1
 80111de:	4404      	add	r4, r0
 80111e0:	dc19      	bgt.n	8011216 <_strtod_l+0x25e>
 80111e2:	9b07      	ldr	r3, [sp, #28]
 80111e4:	210a      	movs	r1, #10
 80111e6:	fb01 e303 	mla	r3, r1, r3, lr
 80111ea:	9307      	str	r3, [sp, #28]
 80111ec:	2100      	movs	r1, #0
 80111ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80111f0:	1c58      	adds	r0, r3, #1
 80111f2:	901b      	str	r0, [sp, #108]	; 0x6c
 80111f4:	785b      	ldrb	r3, [r3, #1]
 80111f6:	4608      	mov	r0, r1
 80111f8:	e7c9      	b.n	801118e <_strtod_l+0x1d6>
 80111fa:	9805      	ldr	r0, [sp, #20]
 80111fc:	e7d3      	b.n	80111a6 <_strtod_l+0x1ee>
 80111fe:	2908      	cmp	r1, #8
 8011200:	f101 0101 	add.w	r1, r1, #1
 8011204:	dc03      	bgt.n	801120e <_strtod_l+0x256>
 8011206:	9b07      	ldr	r3, [sp, #28]
 8011208:	437b      	muls	r3, r7
 801120a:	9307      	str	r3, [sp, #28]
 801120c:	e7e1      	b.n	80111d2 <_strtod_l+0x21a>
 801120e:	2910      	cmp	r1, #16
 8011210:	bfd8      	it	le
 8011212:	437d      	mulle	r5, r7
 8011214:	e7dd      	b.n	80111d2 <_strtod_l+0x21a>
 8011216:	2c10      	cmp	r4, #16
 8011218:	bfdc      	itt	le
 801121a:	210a      	movle	r1, #10
 801121c:	fb01 e505 	mlale	r5, r1, r5, lr
 8011220:	e7e4      	b.n	80111ec <_strtod_l+0x234>
 8011222:	2301      	movs	r3, #1
 8011224:	9304      	str	r3, [sp, #16]
 8011226:	e781      	b.n	801112c <_strtod_l+0x174>
 8011228:	f04f 0c01 	mov.w	ip, #1
 801122c:	1cb3      	adds	r3, r6, #2
 801122e:	931b      	str	r3, [sp, #108]	; 0x6c
 8011230:	78b3      	ldrb	r3, [r6, #2]
 8011232:	e78a      	b.n	801114a <_strtod_l+0x192>
 8011234:	f04f 0c00 	mov.w	ip, #0
 8011238:	e7f8      	b.n	801122c <_strtod_l+0x274>
 801123a:	bf00      	nop
 801123c:	080166dc 	.word	0x080166dc
 8011240:	7ff00000 	.word	0x7ff00000
 8011244:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011246:	1c5f      	adds	r7, r3, #1
 8011248:	971b      	str	r7, [sp, #108]	; 0x6c
 801124a:	785b      	ldrb	r3, [r3, #1]
 801124c:	2b30      	cmp	r3, #48	; 0x30
 801124e:	d0f9      	beq.n	8011244 <_strtod_l+0x28c>
 8011250:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8011254:	2f08      	cmp	r7, #8
 8011256:	f63f af7d 	bhi.w	8011154 <_strtod_l+0x19c>
 801125a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801125e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011260:	930a      	str	r3, [sp, #40]	; 0x28
 8011262:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011264:	1c5f      	adds	r7, r3, #1
 8011266:	971b      	str	r7, [sp, #108]	; 0x6c
 8011268:	785b      	ldrb	r3, [r3, #1]
 801126a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801126e:	f1b8 0f09 	cmp.w	r8, #9
 8011272:	d937      	bls.n	80112e4 <_strtod_l+0x32c>
 8011274:	990a      	ldr	r1, [sp, #40]	; 0x28
 8011276:	1a7f      	subs	r7, r7, r1
 8011278:	2f08      	cmp	r7, #8
 801127a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801127e:	dc37      	bgt.n	80112f0 <_strtod_l+0x338>
 8011280:	45be      	cmp	lr, r7
 8011282:	bfa8      	it	ge
 8011284:	46be      	movge	lr, r7
 8011286:	f1bc 0f00 	cmp.w	ip, #0
 801128a:	d001      	beq.n	8011290 <_strtod_l+0x2d8>
 801128c:	f1ce 0e00 	rsb	lr, lr, #0
 8011290:	2c00      	cmp	r4, #0
 8011292:	d151      	bne.n	8011338 <_strtod_l+0x380>
 8011294:	2800      	cmp	r0, #0
 8011296:	f47f aece 	bne.w	8011036 <_strtod_l+0x7e>
 801129a:	9a06      	ldr	r2, [sp, #24]
 801129c:	2a00      	cmp	r2, #0
 801129e:	f47f aeca 	bne.w	8011036 <_strtod_l+0x7e>
 80112a2:	9a04      	ldr	r2, [sp, #16]
 80112a4:	2a00      	cmp	r2, #0
 80112a6:	f47f aee4 	bne.w	8011072 <_strtod_l+0xba>
 80112aa:	2b4e      	cmp	r3, #78	; 0x4e
 80112ac:	d027      	beq.n	80112fe <_strtod_l+0x346>
 80112ae:	dc21      	bgt.n	80112f4 <_strtod_l+0x33c>
 80112b0:	2b49      	cmp	r3, #73	; 0x49
 80112b2:	f47f aede 	bne.w	8011072 <_strtod_l+0xba>
 80112b6:	49a0      	ldr	r1, [pc, #640]	; (8011538 <_strtod_l+0x580>)
 80112b8:	a81b      	add	r0, sp, #108	; 0x6c
 80112ba:	f001 ffc5 	bl	8013248 <__match>
 80112be:	2800      	cmp	r0, #0
 80112c0:	f43f aed7 	beq.w	8011072 <_strtod_l+0xba>
 80112c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80112c6:	499d      	ldr	r1, [pc, #628]	; (801153c <_strtod_l+0x584>)
 80112c8:	3b01      	subs	r3, #1
 80112ca:	a81b      	add	r0, sp, #108	; 0x6c
 80112cc:	931b      	str	r3, [sp, #108]	; 0x6c
 80112ce:	f001 ffbb 	bl	8013248 <__match>
 80112d2:	b910      	cbnz	r0, 80112da <_strtod_l+0x322>
 80112d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80112d6:	3301      	adds	r3, #1
 80112d8:	931b      	str	r3, [sp, #108]	; 0x6c
 80112da:	f8df b274 	ldr.w	fp, [pc, #628]	; 8011550 <_strtod_l+0x598>
 80112de:	f04f 0a00 	mov.w	sl, #0
 80112e2:	e6a8      	b.n	8011036 <_strtod_l+0x7e>
 80112e4:	210a      	movs	r1, #10
 80112e6:	fb01 3e0e 	mla	lr, r1, lr, r3
 80112ea:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80112ee:	e7b8      	b.n	8011262 <_strtod_l+0x2aa>
 80112f0:	46be      	mov	lr, r7
 80112f2:	e7c8      	b.n	8011286 <_strtod_l+0x2ce>
 80112f4:	2b69      	cmp	r3, #105	; 0x69
 80112f6:	d0de      	beq.n	80112b6 <_strtod_l+0x2fe>
 80112f8:	2b6e      	cmp	r3, #110	; 0x6e
 80112fa:	f47f aeba 	bne.w	8011072 <_strtod_l+0xba>
 80112fe:	4990      	ldr	r1, [pc, #576]	; (8011540 <_strtod_l+0x588>)
 8011300:	a81b      	add	r0, sp, #108	; 0x6c
 8011302:	f001 ffa1 	bl	8013248 <__match>
 8011306:	2800      	cmp	r0, #0
 8011308:	f43f aeb3 	beq.w	8011072 <_strtod_l+0xba>
 801130c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801130e:	781b      	ldrb	r3, [r3, #0]
 8011310:	2b28      	cmp	r3, #40	; 0x28
 8011312:	d10e      	bne.n	8011332 <_strtod_l+0x37a>
 8011314:	aa1e      	add	r2, sp, #120	; 0x78
 8011316:	498b      	ldr	r1, [pc, #556]	; (8011544 <_strtod_l+0x58c>)
 8011318:	a81b      	add	r0, sp, #108	; 0x6c
 801131a:	f001 ffa9 	bl	8013270 <__hexnan>
 801131e:	2805      	cmp	r0, #5
 8011320:	d107      	bne.n	8011332 <_strtod_l+0x37a>
 8011322:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8011324:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8011328:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801132c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011330:	e681      	b.n	8011036 <_strtod_l+0x7e>
 8011332:	f8df b224 	ldr.w	fp, [pc, #548]	; 8011558 <_strtod_l+0x5a0>
 8011336:	e7d2      	b.n	80112de <_strtod_l+0x326>
 8011338:	ebae 0302 	sub.w	r3, lr, r2
 801133c:	9306      	str	r3, [sp, #24]
 801133e:	9b05      	ldr	r3, [sp, #20]
 8011340:	9807      	ldr	r0, [sp, #28]
 8011342:	2b00      	cmp	r3, #0
 8011344:	bf08      	it	eq
 8011346:	4623      	moveq	r3, r4
 8011348:	2c10      	cmp	r4, #16
 801134a:	9305      	str	r3, [sp, #20]
 801134c:	46a0      	mov	r8, r4
 801134e:	bfa8      	it	ge
 8011350:	f04f 0810 	movge.w	r8, #16
 8011354:	f7ef f8d6 	bl	8000504 <__aeabi_ui2d>
 8011358:	2c09      	cmp	r4, #9
 801135a:	4682      	mov	sl, r0
 801135c:	468b      	mov	fp, r1
 801135e:	dc13      	bgt.n	8011388 <_strtod_l+0x3d0>
 8011360:	9b06      	ldr	r3, [sp, #24]
 8011362:	2b00      	cmp	r3, #0
 8011364:	f43f ae67 	beq.w	8011036 <_strtod_l+0x7e>
 8011368:	9b06      	ldr	r3, [sp, #24]
 801136a:	dd7a      	ble.n	8011462 <_strtod_l+0x4aa>
 801136c:	2b16      	cmp	r3, #22
 801136e:	dc61      	bgt.n	8011434 <_strtod_l+0x47c>
 8011370:	4a75      	ldr	r2, [pc, #468]	; (8011548 <_strtod_l+0x590>)
 8011372:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8011376:	e9de 0100 	ldrd	r0, r1, [lr]
 801137a:	4652      	mov	r2, sl
 801137c:	465b      	mov	r3, fp
 801137e:	f7ef f93b 	bl	80005f8 <__aeabi_dmul>
 8011382:	4682      	mov	sl, r0
 8011384:	468b      	mov	fp, r1
 8011386:	e656      	b.n	8011036 <_strtod_l+0x7e>
 8011388:	4b6f      	ldr	r3, [pc, #444]	; (8011548 <_strtod_l+0x590>)
 801138a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801138e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8011392:	f7ef f931 	bl	80005f8 <__aeabi_dmul>
 8011396:	4606      	mov	r6, r0
 8011398:	4628      	mov	r0, r5
 801139a:	460f      	mov	r7, r1
 801139c:	f7ef f8b2 	bl	8000504 <__aeabi_ui2d>
 80113a0:	4602      	mov	r2, r0
 80113a2:	460b      	mov	r3, r1
 80113a4:	4630      	mov	r0, r6
 80113a6:	4639      	mov	r1, r7
 80113a8:	f7ee ff70 	bl	800028c <__adddf3>
 80113ac:	2c0f      	cmp	r4, #15
 80113ae:	4682      	mov	sl, r0
 80113b0:	468b      	mov	fp, r1
 80113b2:	ddd5      	ble.n	8011360 <_strtod_l+0x3a8>
 80113b4:	9b06      	ldr	r3, [sp, #24]
 80113b6:	eba4 0808 	sub.w	r8, r4, r8
 80113ba:	4498      	add	r8, r3
 80113bc:	f1b8 0f00 	cmp.w	r8, #0
 80113c0:	f340 8096 	ble.w	80114f0 <_strtod_l+0x538>
 80113c4:	f018 030f 	ands.w	r3, r8, #15
 80113c8:	d00a      	beq.n	80113e0 <_strtod_l+0x428>
 80113ca:	495f      	ldr	r1, [pc, #380]	; (8011548 <_strtod_l+0x590>)
 80113cc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80113d0:	4652      	mov	r2, sl
 80113d2:	465b      	mov	r3, fp
 80113d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80113d8:	f7ef f90e 	bl	80005f8 <__aeabi_dmul>
 80113dc:	4682      	mov	sl, r0
 80113de:	468b      	mov	fp, r1
 80113e0:	f038 080f 	bics.w	r8, r8, #15
 80113e4:	d073      	beq.n	80114ce <_strtod_l+0x516>
 80113e6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80113ea:	dd47      	ble.n	801147c <_strtod_l+0x4c4>
 80113ec:	2400      	movs	r4, #0
 80113ee:	46a0      	mov	r8, r4
 80113f0:	9407      	str	r4, [sp, #28]
 80113f2:	9405      	str	r4, [sp, #20]
 80113f4:	2322      	movs	r3, #34	; 0x22
 80113f6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8011550 <_strtod_l+0x598>
 80113fa:	f8c9 3000 	str.w	r3, [r9]
 80113fe:	f04f 0a00 	mov.w	sl, #0
 8011402:	9b07      	ldr	r3, [sp, #28]
 8011404:	2b00      	cmp	r3, #0
 8011406:	f43f ae16 	beq.w	8011036 <_strtod_l+0x7e>
 801140a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801140c:	4648      	mov	r0, r9
 801140e:	f002 f881 	bl	8013514 <_Bfree>
 8011412:	9905      	ldr	r1, [sp, #20]
 8011414:	4648      	mov	r0, r9
 8011416:	f002 f87d 	bl	8013514 <_Bfree>
 801141a:	4641      	mov	r1, r8
 801141c:	4648      	mov	r0, r9
 801141e:	f002 f879 	bl	8013514 <_Bfree>
 8011422:	9907      	ldr	r1, [sp, #28]
 8011424:	4648      	mov	r0, r9
 8011426:	f002 f875 	bl	8013514 <_Bfree>
 801142a:	4621      	mov	r1, r4
 801142c:	4648      	mov	r0, r9
 801142e:	f002 f871 	bl	8013514 <_Bfree>
 8011432:	e600      	b.n	8011036 <_strtod_l+0x7e>
 8011434:	9a06      	ldr	r2, [sp, #24]
 8011436:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801143a:	4293      	cmp	r3, r2
 801143c:	dbba      	blt.n	80113b4 <_strtod_l+0x3fc>
 801143e:	4d42      	ldr	r5, [pc, #264]	; (8011548 <_strtod_l+0x590>)
 8011440:	f1c4 040f 	rsb	r4, r4, #15
 8011444:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8011448:	4652      	mov	r2, sl
 801144a:	465b      	mov	r3, fp
 801144c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011450:	f7ef f8d2 	bl	80005f8 <__aeabi_dmul>
 8011454:	9b06      	ldr	r3, [sp, #24]
 8011456:	1b1c      	subs	r4, r3, r4
 8011458:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801145c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011460:	e78d      	b.n	801137e <_strtod_l+0x3c6>
 8011462:	f113 0f16 	cmn.w	r3, #22
 8011466:	dba5      	blt.n	80113b4 <_strtod_l+0x3fc>
 8011468:	4a37      	ldr	r2, [pc, #220]	; (8011548 <_strtod_l+0x590>)
 801146a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801146e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8011472:	4650      	mov	r0, sl
 8011474:	4659      	mov	r1, fp
 8011476:	f7ef f9e9 	bl	800084c <__aeabi_ddiv>
 801147a:	e782      	b.n	8011382 <_strtod_l+0x3ca>
 801147c:	2300      	movs	r3, #0
 801147e:	4e33      	ldr	r6, [pc, #204]	; (801154c <_strtod_l+0x594>)
 8011480:	ea4f 1828 	mov.w	r8, r8, asr #4
 8011484:	4650      	mov	r0, sl
 8011486:	4659      	mov	r1, fp
 8011488:	461d      	mov	r5, r3
 801148a:	f1b8 0f01 	cmp.w	r8, #1
 801148e:	dc21      	bgt.n	80114d4 <_strtod_l+0x51c>
 8011490:	b10b      	cbz	r3, 8011496 <_strtod_l+0x4de>
 8011492:	4682      	mov	sl, r0
 8011494:	468b      	mov	fp, r1
 8011496:	4b2d      	ldr	r3, [pc, #180]	; (801154c <_strtod_l+0x594>)
 8011498:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801149c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80114a0:	4652      	mov	r2, sl
 80114a2:	465b      	mov	r3, fp
 80114a4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80114a8:	f7ef f8a6 	bl	80005f8 <__aeabi_dmul>
 80114ac:	4b28      	ldr	r3, [pc, #160]	; (8011550 <_strtod_l+0x598>)
 80114ae:	460a      	mov	r2, r1
 80114b0:	400b      	ands	r3, r1
 80114b2:	4928      	ldr	r1, [pc, #160]	; (8011554 <_strtod_l+0x59c>)
 80114b4:	428b      	cmp	r3, r1
 80114b6:	4682      	mov	sl, r0
 80114b8:	d898      	bhi.n	80113ec <_strtod_l+0x434>
 80114ba:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80114be:	428b      	cmp	r3, r1
 80114c0:	bf86      	itte	hi
 80114c2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801155c <_strtod_l+0x5a4>
 80114c6:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80114ca:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80114ce:	2300      	movs	r3, #0
 80114d0:	9304      	str	r3, [sp, #16]
 80114d2:	e077      	b.n	80115c4 <_strtod_l+0x60c>
 80114d4:	f018 0f01 	tst.w	r8, #1
 80114d8:	d006      	beq.n	80114e8 <_strtod_l+0x530>
 80114da:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80114de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114e2:	f7ef f889 	bl	80005f8 <__aeabi_dmul>
 80114e6:	2301      	movs	r3, #1
 80114e8:	3501      	adds	r5, #1
 80114ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 80114ee:	e7cc      	b.n	801148a <_strtod_l+0x4d2>
 80114f0:	d0ed      	beq.n	80114ce <_strtod_l+0x516>
 80114f2:	f1c8 0800 	rsb	r8, r8, #0
 80114f6:	f018 020f 	ands.w	r2, r8, #15
 80114fa:	d00a      	beq.n	8011512 <_strtod_l+0x55a>
 80114fc:	4b12      	ldr	r3, [pc, #72]	; (8011548 <_strtod_l+0x590>)
 80114fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011502:	4650      	mov	r0, sl
 8011504:	4659      	mov	r1, fp
 8011506:	e9d3 2300 	ldrd	r2, r3, [r3]
 801150a:	f7ef f99f 	bl	800084c <__aeabi_ddiv>
 801150e:	4682      	mov	sl, r0
 8011510:	468b      	mov	fp, r1
 8011512:	ea5f 1828 	movs.w	r8, r8, asr #4
 8011516:	d0da      	beq.n	80114ce <_strtod_l+0x516>
 8011518:	f1b8 0f1f 	cmp.w	r8, #31
 801151c:	dd20      	ble.n	8011560 <_strtod_l+0x5a8>
 801151e:	2400      	movs	r4, #0
 8011520:	46a0      	mov	r8, r4
 8011522:	9407      	str	r4, [sp, #28]
 8011524:	9405      	str	r4, [sp, #20]
 8011526:	2322      	movs	r3, #34	; 0x22
 8011528:	f04f 0a00 	mov.w	sl, #0
 801152c:	f04f 0b00 	mov.w	fp, #0
 8011530:	f8c9 3000 	str.w	r3, [r9]
 8011534:	e765      	b.n	8011402 <_strtod_l+0x44a>
 8011536:	bf00      	nop
 8011538:	080166ad 	.word	0x080166ad
 801153c:	08016733 	.word	0x08016733
 8011540:	080166b5 	.word	0x080166b5
 8011544:	080166f0 	.word	0x080166f0
 8011548:	080167d8 	.word	0x080167d8
 801154c:	080167b0 	.word	0x080167b0
 8011550:	7ff00000 	.word	0x7ff00000
 8011554:	7ca00000 	.word	0x7ca00000
 8011558:	fff80000 	.word	0xfff80000
 801155c:	7fefffff 	.word	0x7fefffff
 8011560:	f018 0310 	ands.w	r3, r8, #16
 8011564:	bf18      	it	ne
 8011566:	236a      	movne	r3, #106	; 0x6a
 8011568:	4da0      	ldr	r5, [pc, #640]	; (80117ec <_strtod_l+0x834>)
 801156a:	9304      	str	r3, [sp, #16]
 801156c:	4650      	mov	r0, sl
 801156e:	4659      	mov	r1, fp
 8011570:	2300      	movs	r3, #0
 8011572:	f1b8 0f00 	cmp.w	r8, #0
 8011576:	f300 810a 	bgt.w	801178e <_strtod_l+0x7d6>
 801157a:	b10b      	cbz	r3, 8011580 <_strtod_l+0x5c8>
 801157c:	4682      	mov	sl, r0
 801157e:	468b      	mov	fp, r1
 8011580:	9b04      	ldr	r3, [sp, #16]
 8011582:	b1bb      	cbz	r3, 80115b4 <_strtod_l+0x5fc>
 8011584:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8011588:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801158c:	2b00      	cmp	r3, #0
 801158e:	4659      	mov	r1, fp
 8011590:	dd10      	ble.n	80115b4 <_strtod_l+0x5fc>
 8011592:	2b1f      	cmp	r3, #31
 8011594:	f340 8107 	ble.w	80117a6 <_strtod_l+0x7ee>
 8011598:	2b34      	cmp	r3, #52	; 0x34
 801159a:	bfde      	ittt	le
 801159c:	3b20      	suble	r3, #32
 801159e:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 80115a2:	fa02 f303 	lslle.w	r3, r2, r3
 80115a6:	f04f 0a00 	mov.w	sl, #0
 80115aa:	bfcc      	ite	gt
 80115ac:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80115b0:	ea03 0b01 	andle.w	fp, r3, r1
 80115b4:	2200      	movs	r2, #0
 80115b6:	2300      	movs	r3, #0
 80115b8:	4650      	mov	r0, sl
 80115ba:	4659      	mov	r1, fp
 80115bc:	f7ef fa84 	bl	8000ac8 <__aeabi_dcmpeq>
 80115c0:	2800      	cmp	r0, #0
 80115c2:	d1ac      	bne.n	801151e <_strtod_l+0x566>
 80115c4:	9b07      	ldr	r3, [sp, #28]
 80115c6:	9300      	str	r3, [sp, #0]
 80115c8:	9a05      	ldr	r2, [sp, #20]
 80115ca:	9908      	ldr	r1, [sp, #32]
 80115cc:	4623      	mov	r3, r4
 80115ce:	4648      	mov	r0, r9
 80115d0:	f001 fff2 	bl	80135b8 <__s2b>
 80115d4:	9007      	str	r0, [sp, #28]
 80115d6:	2800      	cmp	r0, #0
 80115d8:	f43f af08 	beq.w	80113ec <_strtod_l+0x434>
 80115dc:	9a06      	ldr	r2, [sp, #24]
 80115de:	9b06      	ldr	r3, [sp, #24]
 80115e0:	2a00      	cmp	r2, #0
 80115e2:	f1c3 0300 	rsb	r3, r3, #0
 80115e6:	bfa8      	it	ge
 80115e8:	2300      	movge	r3, #0
 80115ea:	930e      	str	r3, [sp, #56]	; 0x38
 80115ec:	2400      	movs	r4, #0
 80115ee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80115f2:	9316      	str	r3, [sp, #88]	; 0x58
 80115f4:	46a0      	mov	r8, r4
 80115f6:	9b07      	ldr	r3, [sp, #28]
 80115f8:	4648      	mov	r0, r9
 80115fa:	6859      	ldr	r1, [r3, #4]
 80115fc:	f001 ff56 	bl	80134ac <_Balloc>
 8011600:	9005      	str	r0, [sp, #20]
 8011602:	2800      	cmp	r0, #0
 8011604:	f43f aef6 	beq.w	80113f4 <_strtod_l+0x43c>
 8011608:	9b07      	ldr	r3, [sp, #28]
 801160a:	691a      	ldr	r2, [r3, #16]
 801160c:	3202      	adds	r2, #2
 801160e:	f103 010c 	add.w	r1, r3, #12
 8011612:	0092      	lsls	r2, r2, #2
 8011614:	300c      	adds	r0, #12
 8011616:	f7fe ff8f 	bl	8010538 <memcpy>
 801161a:	aa1e      	add	r2, sp, #120	; 0x78
 801161c:	a91d      	add	r1, sp, #116	; 0x74
 801161e:	ec4b ab10 	vmov	d0, sl, fp
 8011622:	4648      	mov	r0, r9
 8011624:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8011628:	f002 fa82 	bl	8013b30 <__d2b>
 801162c:	901c      	str	r0, [sp, #112]	; 0x70
 801162e:	2800      	cmp	r0, #0
 8011630:	f43f aee0 	beq.w	80113f4 <_strtod_l+0x43c>
 8011634:	2101      	movs	r1, #1
 8011636:	4648      	mov	r0, r9
 8011638:	f002 f84a 	bl	80136d0 <__i2b>
 801163c:	4680      	mov	r8, r0
 801163e:	2800      	cmp	r0, #0
 8011640:	f43f aed8 	beq.w	80113f4 <_strtod_l+0x43c>
 8011644:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8011646:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011648:	2e00      	cmp	r6, #0
 801164a:	bfab      	itete	ge
 801164c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801164e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8011650:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8011652:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8011654:	bfac      	ite	ge
 8011656:	18f7      	addge	r7, r6, r3
 8011658:	1b9d      	sublt	r5, r3, r6
 801165a:	9b04      	ldr	r3, [sp, #16]
 801165c:	1af6      	subs	r6, r6, r3
 801165e:	4416      	add	r6, r2
 8011660:	4b63      	ldr	r3, [pc, #396]	; (80117f0 <_strtod_l+0x838>)
 8011662:	3e01      	subs	r6, #1
 8011664:	429e      	cmp	r6, r3
 8011666:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801166a:	f280 80af 	bge.w	80117cc <_strtod_l+0x814>
 801166e:	1b9b      	subs	r3, r3, r6
 8011670:	2b1f      	cmp	r3, #31
 8011672:	eba2 0203 	sub.w	r2, r2, r3
 8011676:	f04f 0101 	mov.w	r1, #1
 801167a:	f300 809b 	bgt.w	80117b4 <_strtod_l+0x7fc>
 801167e:	fa01 f303 	lsl.w	r3, r1, r3
 8011682:	930f      	str	r3, [sp, #60]	; 0x3c
 8011684:	2300      	movs	r3, #0
 8011686:	930a      	str	r3, [sp, #40]	; 0x28
 8011688:	18be      	adds	r6, r7, r2
 801168a:	9b04      	ldr	r3, [sp, #16]
 801168c:	42b7      	cmp	r7, r6
 801168e:	4415      	add	r5, r2
 8011690:	441d      	add	r5, r3
 8011692:	463b      	mov	r3, r7
 8011694:	bfa8      	it	ge
 8011696:	4633      	movge	r3, r6
 8011698:	42ab      	cmp	r3, r5
 801169a:	bfa8      	it	ge
 801169c:	462b      	movge	r3, r5
 801169e:	2b00      	cmp	r3, #0
 80116a0:	bfc2      	ittt	gt
 80116a2:	1af6      	subgt	r6, r6, r3
 80116a4:	1aed      	subgt	r5, r5, r3
 80116a6:	1aff      	subgt	r7, r7, r3
 80116a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80116aa:	b1bb      	cbz	r3, 80116dc <_strtod_l+0x724>
 80116ac:	4641      	mov	r1, r8
 80116ae:	461a      	mov	r2, r3
 80116b0:	4648      	mov	r0, r9
 80116b2:	f002 f8ad 	bl	8013810 <__pow5mult>
 80116b6:	4680      	mov	r8, r0
 80116b8:	2800      	cmp	r0, #0
 80116ba:	f43f ae9b 	beq.w	80113f4 <_strtod_l+0x43c>
 80116be:	4601      	mov	r1, r0
 80116c0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80116c2:	4648      	mov	r0, r9
 80116c4:	f002 f80d 	bl	80136e2 <__multiply>
 80116c8:	900c      	str	r0, [sp, #48]	; 0x30
 80116ca:	2800      	cmp	r0, #0
 80116cc:	f43f ae92 	beq.w	80113f4 <_strtod_l+0x43c>
 80116d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80116d2:	4648      	mov	r0, r9
 80116d4:	f001 ff1e 	bl	8013514 <_Bfree>
 80116d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80116da:	931c      	str	r3, [sp, #112]	; 0x70
 80116dc:	2e00      	cmp	r6, #0
 80116de:	dc7a      	bgt.n	80117d6 <_strtod_l+0x81e>
 80116e0:	9b06      	ldr	r3, [sp, #24]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	dd08      	ble.n	80116f8 <_strtod_l+0x740>
 80116e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80116e8:	9905      	ldr	r1, [sp, #20]
 80116ea:	4648      	mov	r0, r9
 80116ec:	f002 f890 	bl	8013810 <__pow5mult>
 80116f0:	9005      	str	r0, [sp, #20]
 80116f2:	2800      	cmp	r0, #0
 80116f4:	f43f ae7e 	beq.w	80113f4 <_strtod_l+0x43c>
 80116f8:	2d00      	cmp	r5, #0
 80116fa:	dd08      	ble.n	801170e <_strtod_l+0x756>
 80116fc:	462a      	mov	r2, r5
 80116fe:	9905      	ldr	r1, [sp, #20]
 8011700:	4648      	mov	r0, r9
 8011702:	f002 f8d3 	bl	80138ac <__lshift>
 8011706:	9005      	str	r0, [sp, #20]
 8011708:	2800      	cmp	r0, #0
 801170a:	f43f ae73 	beq.w	80113f4 <_strtod_l+0x43c>
 801170e:	2f00      	cmp	r7, #0
 8011710:	dd08      	ble.n	8011724 <_strtod_l+0x76c>
 8011712:	4641      	mov	r1, r8
 8011714:	463a      	mov	r2, r7
 8011716:	4648      	mov	r0, r9
 8011718:	f002 f8c8 	bl	80138ac <__lshift>
 801171c:	4680      	mov	r8, r0
 801171e:	2800      	cmp	r0, #0
 8011720:	f43f ae68 	beq.w	80113f4 <_strtod_l+0x43c>
 8011724:	9a05      	ldr	r2, [sp, #20]
 8011726:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011728:	4648      	mov	r0, r9
 801172a:	f002 f92d 	bl	8013988 <__mdiff>
 801172e:	4604      	mov	r4, r0
 8011730:	2800      	cmp	r0, #0
 8011732:	f43f ae5f 	beq.w	80113f4 <_strtod_l+0x43c>
 8011736:	68c3      	ldr	r3, [r0, #12]
 8011738:	930c      	str	r3, [sp, #48]	; 0x30
 801173a:	2300      	movs	r3, #0
 801173c:	60c3      	str	r3, [r0, #12]
 801173e:	4641      	mov	r1, r8
 8011740:	f002 f908 	bl	8013954 <__mcmp>
 8011744:	2800      	cmp	r0, #0
 8011746:	da55      	bge.n	80117f4 <_strtod_l+0x83c>
 8011748:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801174a:	b9e3      	cbnz	r3, 8011786 <_strtod_l+0x7ce>
 801174c:	f1ba 0f00 	cmp.w	sl, #0
 8011750:	d119      	bne.n	8011786 <_strtod_l+0x7ce>
 8011752:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011756:	b9b3      	cbnz	r3, 8011786 <_strtod_l+0x7ce>
 8011758:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801175c:	0d1b      	lsrs	r3, r3, #20
 801175e:	051b      	lsls	r3, r3, #20
 8011760:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011764:	d90f      	bls.n	8011786 <_strtod_l+0x7ce>
 8011766:	6963      	ldr	r3, [r4, #20]
 8011768:	b913      	cbnz	r3, 8011770 <_strtod_l+0x7b8>
 801176a:	6923      	ldr	r3, [r4, #16]
 801176c:	2b01      	cmp	r3, #1
 801176e:	dd0a      	ble.n	8011786 <_strtod_l+0x7ce>
 8011770:	4621      	mov	r1, r4
 8011772:	2201      	movs	r2, #1
 8011774:	4648      	mov	r0, r9
 8011776:	f002 f899 	bl	80138ac <__lshift>
 801177a:	4641      	mov	r1, r8
 801177c:	4604      	mov	r4, r0
 801177e:	f002 f8e9 	bl	8013954 <__mcmp>
 8011782:	2800      	cmp	r0, #0
 8011784:	dc67      	bgt.n	8011856 <_strtod_l+0x89e>
 8011786:	9b04      	ldr	r3, [sp, #16]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d171      	bne.n	8011870 <_strtod_l+0x8b8>
 801178c:	e63d      	b.n	801140a <_strtod_l+0x452>
 801178e:	f018 0f01 	tst.w	r8, #1
 8011792:	d004      	beq.n	801179e <_strtod_l+0x7e6>
 8011794:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011798:	f7ee ff2e 	bl	80005f8 <__aeabi_dmul>
 801179c:	2301      	movs	r3, #1
 801179e:	ea4f 0868 	mov.w	r8, r8, asr #1
 80117a2:	3508      	adds	r5, #8
 80117a4:	e6e5      	b.n	8011572 <_strtod_l+0x5ba>
 80117a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80117aa:	fa02 f303 	lsl.w	r3, r2, r3
 80117ae:	ea03 0a0a 	and.w	sl, r3, sl
 80117b2:	e6ff      	b.n	80115b4 <_strtod_l+0x5fc>
 80117b4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80117b8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80117bc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80117c0:	36e2      	adds	r6, #226	; 0xe2
 80117c2:	fa01 f306 	lsl.w	r3, r1, r6
 80117c6:	930a      	str	r3, [sp, #40]	; 0x28
 80117c8:	910f      	str	r1, [sp, #60]	; 0x3c
 80117ca:	e75d      	b.n	8011688 <_strtod_l+0x6d0>
 80117cc:	2300      	movs	r3, #0
 80117ce:	930a      	str	r3, [sp, #40]	; 0x28
 80117d0:	2301      	movs	r3, #1
 80117d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80117d4:	e758      	b.n	8011688 <_strtod_l+0x6d0>
 80117d6:	4632      	mov	r2, r6
 80117d8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80117da:	4648      	mov	r0, r9
 80117dc:	f002 f866 	bl	80138ac <__lshift>
 80117e0:	901c      	str	r0, [sp, #112]	; 0x70
 80117e2:	2800      	cmp	r0, #0
 80117e4:	f47f af7c 	bne.w	80116e0 <_strtod_l+0x728>
 80117e8:	e604      	b.n	80113f4 <_strtod_l+0x43c>
 80117ea:	bf00      	nop
 80117ec:	08016708 	.word	0x08016708
 80117f0:	fffffc02 	.word	0xfffffc02
 80117f4:	465d      	mov	r5, fp
 80117f6:	f040 8086 	bne.w	8011906 <_strtod_l+0x94e>
 80117fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80117fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011800:	b32a      	cbz	r2, 801184e <_strtod_l+0x896>
 8011802:	4aaf      	ldr	r2, [pc, #700]	; (8011ac0 <_strtod_l+0xb08>)
 8011804:	4293      	cmp	r3, r2
 8011806:	d153      	bne.n	80118b0 <_strtod_l+0x8f8>
 8011808:	9b04      	ldr	r3, [sp, #16]
 801180a:	4650      	mov	r0, sl
 801180c:	b1d3      	cbz	r3, 8011844 <_strtod_l+0x88c>
 801180e:	4aad      	ldr	r2, [pc, #692]	; (8011ac4 <_strtod_l+0xb0c>)
 8011810:	402a      	ands	r2, r5
 8011812:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8011816:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801181a:	d816      	bhi.n	801184a <_strtod_l+0x892>
 801181c:	0d12      	lsrs	r2, r2, #20
 801181e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8011822:	fa01 f303 	lsl.w	r3, r1, r3
 8011826:	4298      	cmp	r0, r3
 8011828:	d142      	bne.n	80118b0 <_strtod_l+0x8f8>
 801182a:	4ba7      	ldr	r3, [pc, #668]	; (8011ac8 <_strtod_l+0xb10>)
 801182c:	429d      	cmp	r5, r3
 801182e:	d102      	bne.n	8011836 <_strtod_l+0x87e>
 8011830:	3001      	adds	r0, #1
 8011832:	f43f addf 	beq.w	80113f4 <_strtod_l+0x43c>
 8011836:	4ba3      	ldr	r3, [pc, #652]	; (8011ac4 <_strtod_l+0xb0c>)
 8011838:	402b      	ands	r3, r5
 801183a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801183e:	f04f 0a00 	mov.w	sl, #0
 8011842:	e7a0      	b.n	8011786 <_strtod_l+0x7ce>
 8011844:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011848:	e7ed      	b.n	8011826 <_strtod_l+0x86e>
 801184a:	460b      	mov	r3, r1
 801184c:	e7eb      	b.n	8011826 <_strtod_l+0x86e>
 801184e:	bb7b      	cbnz	r3, 80118b0 <_strtod_l+0x8f8>
 8011850:	f1ba 0f00 	cmp.w	sl, #0
 8011854:	d12c      	bne.n	80118b0 <_strtod_l+0x8f8>
 8011856:	9904      	ldr	r1, [sp, #16]
 8011858:	4a9a      	ldr	r2, [pc, #616]	; (8011ac4 <_strtod_l+0xb0c>)
 801185a:	465b      	mov	r3, fp
 801185c:	b1f1      	cbz	r1, 801189c <_strtod_l+0x8e4>
 801185e:	ea02 010b 	and.w	r1, r2, fp
 8011862:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011866:	dc19      	bgt.n	801189c <_strtod_l+0x8e4>
 8011868:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801186c:	f77f ae5b 	ble.w	8011526 <_strtod_l+0x56e>
 8011870:	4a96      	ldr	r2, [pc, #600]	; (8011acc <_strtod_l+0xb14>)
 8011872:	2300      	movs	r3, #0
 8011874:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8011878:	4650      	mov	r0, sl
 801187a:	4659      	mov	r1, fp
 801187c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011880:	f7ee feba 	bl	80005f8 <__aeabi_dmul>
 8011884:	4682      	mov	sl, r0
 8011886:	468b      	mov	fp, r1
 8011888:	2900      	cmp	r1, #0
 801188a:	f47f adbe 	bne.w	801140a <_strtod_l+0x452>
 801188e:	2800      	cmp	r0, #0
 8011890:	f47f adbb 	bne.w	801140a <_strtod_l+0x452>
 8011894:	2322      	movs	r3, #34	; 0x22
 8011896:	f8c9 3000 	str.w	r3, [r9]
 801189a:	e5b6      	b.n	801140a <_strtod_l+0x452>
 801189c:	4013      	ands	r3, r2
 801189e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80118a2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80118a6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80118aa:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80118ae:	e76a      	b.n	8011786 <_strtod_l+0x7ce>
 80118b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80118b2:	b193      	cbz	r3, 80118da <_strtod_l+0x922>
 80118b4:	422b      	tst	r3, r5
 80118b6:	f43f af66 	beq.w	8011786 <_strtod_l+0x7ce>
 80118ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80118bc:	9a04      	ldr	r2, [sp, #16]
 80118be:	4650      	mov	r0, sl
 80118c0:	4659      	mov	r1, fp
 80118c2:	b173      	cbz	r3, 80118e2 <_strtod_l+0x92a>
 80118c4:	f7ff fb59 	bl	8010f7a <sulp>
 80118c8:	4602      	mov	r2, r0
 80118ca:	460b      	mov	r3, r1
 80118cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80118d0:	f7ee fcdc 	bl	800028c <__adddf3>
 80118d4:	4682      	mov	sl, r0
 80118d6:	468b      	mov	fp, r1
 80118d8:	e755      	b.n	8011786 <_strtod_l+0x7ce>
 80118da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80118dc:	ea13 0f0a 	tst.w	r3, sl
 80118e0:	e7e9      	b.n	80118b6 <_strtod_l+0x8fe>
 80118e2:	f7ff fb4a 	bl	8010f7a <sulp>
 80118e6:	4602      	mov	r2, r0
 80118e8:	460b      	mov	r3, r1
 80118ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80118ee:	f7ee fccb 	bl	8000288 <__aeabi_dsub>
 80118f2:	2200      	movs	r2, #0
 80118f4:	2300      	movs	r3, #0
 80118f6:	4682      	mov	sl, r0
 80118f8:	468b      	mov	fp, r1
 80118fa:	f7ef f8e5 	bl	8000ac8 <__aeabi_dcmpeq>
 80118fe:	2800      	cmp	r0, #0
 8011900:	f47f ae11 	bne.w	8011526 <_strtod_l+0x56e>
 8011904:	e73f      	b.n	8011786 <_strtod_l+0x7ce>
 8011906:	4641      	mov	r1, r8
 8011908:	4620      	mov	r0, r4
 801190a:	f002 f960 	bl	8013bce <__ratio>
 801190e:	ec57 6b10 	vmov	r6, r7, d0
 8011912:	2200      	movs	r2, #0
 8011914:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011918:	ee10 0a10 	vmov	r0, s0
 801191c:	4639      	mov	r1, r7
 801191e:	f7ef f8e7 	bl	8000af0 <__aeabi_dcmple>
 8011922:	2800      	cmp	r0, #0
 8011924:	d077      	beq.n	8011a16 <_strtod_l+0xa5e>
 8011926:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011928:	2b00      	cmp	r3, #0
 801192a:	d04a      	beq.n	80119c2 <_strtod_l+0xa0a>
 801192c:	4b68      	ldr	r3, [pc, #416]	; (8011ad0 <_strtod_l+0xb18>)
 801192e:	2200      	movs	r2, #0
 8011930:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8011934:	4f66      	ldr	r7, [pc, #408]	; (8011ad0 <_strtod_l+0xb18>)
 8011936:	2600      	movs	r6, #0
 8011938:	4b62      	ldr	r3, [pc, #392]	; (8011ac4 <_strtod_l+0xb0c>)
 801193a:	402b      	ands	r3, r5
 801193c:	930f      	str	r3, [sp, #60]	; 0x3c
 801193e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011940:	4b64      	ldr	r3, [pc, #400]	; (8011ad4 <_strtod_l+0xb1c>)
 8011942:	429a      	cmp	r2, r3
 8011944:	f040 80ce 	bne.w	8011ae4 <_strtod_l+0xb2c>
 8011948:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801194c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011950:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8011954:	ec4b ab10 	vmov	d0, sl, fp
 8011958:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801195c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011960:	f002 f870 	bl	8013a44 <__ulp>
 8011964:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011968:	ec53 2b10 	vmov	r2, r3, d0
 801196c:	f7ee fe44 	bl	80005f8 <__aeabi_dmul>
 8011970:	4652      	mov	r2, sl
 8011972:	465b      	mov	r3, fp
 8011974:	f7ee fc8a 	bl	800028c <__adddf3>
 8011978:	460b      	mov	r3, r1
 801197a:	4952      	ldr	r1, [pc, #328]	; (8011ac4 <_strtod_l+0xb0c>)
 801197c:	4a56      	ldr	r2, [pc, #344]	; (8011ad8 <_strtod_l+0xb20>)
 801197e:	4019      	ands	r1, r3
 8011980:	4291      	cmp	r1, r2
 8011982:	4682      	mov	sl, r0
 8011984:	d95b      	bls.n	8011a3e <_strtod_l+0xa86>
 8011986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011988:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801198c:	4293      	cmp	r3, r2
 801198e:	d103      	bne.n	8011998 <_strtod_l+0x9e0>
 8011990:	9b08      	ldr	r3, [sp, #32]
 8011992:	3301      	adds	r3, #1
 8011994:	f43f ad2e 	beq.w	80113f4 <_strtod_l+0x43c>
 8011998:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8011ac8 <_strtod_l+0xb10>
 801199c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80119a0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80119a2:	4648      	mov	r0, r9
 80119a4:	f001 fdb6 	bl	8013514 <_Bfree>
 80119a8:	9905      	ldr	r1, [sp, #20]
 80119aa:	4648      	mov	r0, r9
 80119ac:	f001 fdb2 	bl	8013514 <_Bfree>
 80119b0:	4641      	mov	r1, r8
 80119b2:	4648      	mov	r0, r9
 80119b4:	f001 fdae 	bl	8013514 <_Bfree>
 80119b8:	4621      	mov	r1, r4
 80119ba:	4648      	mov	r0, r9
 80119bc:	f001 fdaa 	bl	8013514 <_Bfree>
 80119c0:	e619      	b.n	80115f6 <_strtod_l+0x63e>
 80119c2:	f1ba 0f00 	cmp.w	sl, #0
 80119c6:	d11a      	bne.n	80119fe <_strtod_l+0xa46>
 80119c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80119cc:	b9eb      	cbnz	r3, 8011a0a <_strtod_l+0xa52>
 80119ce:	2200      	movs	r2, #0
 80119d0:	4b3f      	ldr	r3, [pc, #252]	; (8011ad0 <_strtod_l+0xb18>)
 80119d2:	4630      	mov	r0, r6
 80119d4:	4639      	mov	r1, r7
 80119d6:	f7ef f881 	bl	8000adc <__aeabi_dcmplt>
 80119da:	b9c8      	cbnz	r0, 8011a10 <_strtod_l+0xa58>
 80119dc:	4630      	mov	r0, r6
 80119de:	4639      	mov	r1, r7
 80119e0:	2200      	movs	r2, #0
 80119e2:	4b3e      	ldr	r3, [pc, #248]	; (8011adc <_strtod_l+0xb24>)
 80119e4:	f7ee fe08 	bl	80005f8 <__aeabi_dmul>
 80119e8:	4606      	mov	r6, r0
 80119ea:	460f      	mov	r7, r1
 80119ec:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80119f0:	9618      	str	r6, [sp, #96]	; 0x60
 80119f2:	9319      	str	r3, [sp, #100]	; 0x64
 80119f4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80119f8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80119fc:	e79c      	b.n	8011938 <_strtod_l+0x980>
 80119fe:	f1ba 0f01 	cmp.w	sl, #1
 8011a02:	d102      	bne.n	8011a0a <_strtod_l+0xa52>
 8011a04:	2d00      	cmp	r5, #0
 8011a06:	f43f ad8e 	beq.w	8011526 <_strtod_l+0x56e>
 8011a0a:	2200      	movs	r2, #0
 8011a0c:	4b34      	ldr	r3, [pc, #208]	; (8011ae0 <_strtod_l+0xb28>)
 8011a0e:	e78f      	b.n	8011930 <_strtod_l+0x978>
 8011a10:	2600      	movs	r6, #0
 8011a12:	4f32      	ldr	r7, [pc, #200]	; (8011adc <_strtod_l+0xb24>)
 8011a14:	e7ea      	b.n	80119ec <_strtod_l+0xa34>
 8011a16:	4b31      	ldr	r3, [pc, #196]	; (8011adc <_strtod_l+0xb24>)
 8011a18:	4630      	mov	r0, r6
 8011a1a:	4639      	mov	r1, r7
 8011a1c:	2200      	movs	r2, #0
 8011a1e:	f7ee fdeb 	bl	80005f8 <__aeabi_dmul>
 8011a22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011a24:	4606      	mov	r6, r0
 8011a26:	460f      	mov	r7, r1
 8011a28:	b933      	cbnz	r3, 8011a38 <_strtod_l+0xa80>
 8011a2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011a2e:	9010      	str	r0, [sp, #64]	; 0x40
 8011a30:	9311      	str	r3, [sp, #68]	; 0x44
 8011a32:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011a36:	e7df      	b.n	80119f8 <_strtod_l+0xa40>
 8011a38:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8011a3c:	e7f9      	b.n	8011a32 <_strtod_l+0xa7a>
 8011a3e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8011a42:	9b04      	ldr	r3, [sp, #16]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d1ab      	bne.n	80119a0 <_strtod_l+0x9e8>
 8011a48:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011a4c:	0d1b      	lsrs	r3, r3, #20
 8011a4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011a50:	051b      	lsls	r3, r3, #20
 8011a52:	429a      	cmp	r2, r3
 8011a54:	465d      	mov	r5, fp
 8011a56:	d1a3      	bne.n	80119a0 <_strtod_l+0x9e8>
 8011a58:	4639      	mov	r1, r7
 8011a5a:	4630      	mov	r0, r6
 8011a5c:	f7ef f87c 	bl	8000b58 <__aeabi_d2iz>
 8011a60:	f7ee fd60 	bl	8000524 <__aeabi_i2d>
 8011a64:	460b      	mov	r3, r1
 8011a66:	4602      	mov	r2, r0
 8011a68:	4639      	mov	r1, r7
 8011a6a:	4630      	mov	r0, r6
 8011a6c:	f7ee fc0c 	bl	8000288 <__aeabi_dsub>
 8011a70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011a72:	4606      	mov	r6, r0
 8011a74:	460f      	mov	r7, r1
 8011a76:	b933      	cbnz	r3, 8011a86 <_strtod_l+0xace>
 8011a78:	f1ba 0f00 	cmp.w	sl, #0
 8011a7c:	d103      	bne.n	8011a86 <_strtod_l+0xace>
 8011a7e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8011a82:	2d00      	cmp	r5, #0
 8011a84:	d06d      	beq.n	8011b62 <_strtod_l+0xbaa>
 8011a86:	a30a      	add	r3, pc, #40	; (adr r3, 8011ab0 <_strtod_l+0xaf8>)
 8011a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a8c:	4630      	mov	r0, r6
 8011a8e:	4639      	mov	r1, r7
 8011a90:	f7ef f824 	bl	8000adc <__aeabi_dcmplt>
 8011a94:	2800      	cmp	r0, #0
 8011a96:	f47f acb8 	bne.w	801140a <_strtod_l+0x452>
 8011a9a:	a307      	add	r3, pc, #28	; (adr r3, 8011ab8 <_strtod_l+0xb00>)
 8011a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aa0:	4630      	mov	r0, r6
 8011aa2:	4639      	mov	r1, r7
 8011aa4:	f7ef f838 	bl	8000b18 <__aeabi_dcmpgt>
 8011aa8:	2800      	cmp	r0, #0
 8011aaa:	f43f af79 	beq.w	80119a0 <_strtod_l+0x9e8>
 8011aae:	e4ac      	b.n	801140a <_strtod_l+0x452>
 8011ab0:	94a03595 	.word	0x94a03595
 8011ab4:	3fdfffff 	.word	0x3fdfffff
 8011ab8:	35afe535 	.word	0x35afe535
 8011abc:	3fe00000 	.word	0x3fe00000
 8011ac0:	000fffff 	.word	0x000fffff
 8011ac4:	7ff00000 	.word	0x7ff00000
 8011ac8:	7fefffff 	.word	0x7fefffff
 8011acc:	39500000 	.word	0x39500000
 8011ad0:	3ff00000 	.word	0x3ff00000
 8011ad4:	7fe00000 	.word	0x7fe00000
 8011ad8:	7c9fffff 	.word	0x7c9fffff
 8011adc:	3fe00000 	.word	0x3fe00000
 8011ae0:	bff00000 	.word	0xbff00000
 8011ae4:	9b04      	ldr	r3, [sp, #16]
 8011ae6:	b333      	cbz	r3, 8011b36 <_strtod_l+0xb7e>
 8011ae8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011aea:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011aee:	d822      	bhi.n	8011b36 <_strtod_l+0xb7e>
 8011af0:	a327      	add	r3, pc, #156	; (adr r3, 8011b90 <_strtod_l+0xbd8>)
 8011af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011af6:	4630      	mov	r0, r6
 8011af8:	4639      	mov	r1, r7
 8011afa:	f7ee fff9 	bl	8000af0 <__aeabi_dcmple>
 8011afe:	b1a0      	cbz	r0, 8011b2a <_strtod_l+0xb72>
 8011b00:	4639      	mov	r1, r7
 8011b02:	4630      	mov	r0, r6
 8011b04:	f7ef f850 	bl	8000ba8 <__aeabi_d2uiz>
 8011b08:	2800      	cmp	r0, #0
 8011b0a:	bf08      	it	eq
 8011b0c:	2001      	moveq	r0, #1
 8011b0e:	f7ee fcf9 	bl	8000504 <__aeabi_ui2d>
 8011b12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011b14:	4606      	mov	r6, r0
 8011b16:	460f      	mov	r7, r1
 8011b18:	bb03      	cbnz	r3, 8011b5c <_strtod_l+0xba4>
 8011b1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011b1e:	9012      	str	r0, [sp, #72]	; 0x48
 8011b20:	9313      	str	r3, [sp, #76]	; 0x4c
 8011b22:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8011b26:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8011b2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011b2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011b2e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8011b32:	1a9b      	subs	r3, r3, r2
 8011b34:	930b      	str	r3, [sp, #44]	; 0x2c
 8011b36:	ed9d 0b08 	vldr	d0, [sp, #32]
 8011b3a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8011b3e:	f001 ff81 	bl	8013a44 <__ulp>
 8011b42:	4650      	mov	r0, sl
 8011b44:	ec53 2b10 	vmov	r2, r3, d0
 8011b48:	4659      	mov	r1, fp
 8011b4a:	f7ee fd55 	bl	80005f8 <__aeabi_dmul>
 8011b4e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011b52:	f7ee fb9b 	bl	800028c <__adddf3>
 8011b56:	4682      	mov	sl, r0
 8011b58:	468b      	mov	fp, r1
 8011b5a:	e772      	b.n	8011a42 <_strtod_l+0xa8a>
 8011b5c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8011b60:	e7df      	b.n	8011b22 <_strtod_l+0xb6a>
 8011b62:	a30d      	add	r3, pc, #52	; (adr r3, 8011b98 <_strtod_l+0xbe0>)
 8011b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b68:	f7ee ffb8 	bl	8000adc <__aeabi_dcmplt>
 8011b6c:	e79c      	b.n	8011aa8 <_strtod_l+0xaf0>
 8011b6e:	2300      	movs	r3, #0
 8011b70:	930d      	str	r3, [sp, #52]	; 0x34
 8011b72:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011b74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011b76:	6013      	str	r3, [r2, #0]
 8011b78:	f7ff ba61 	b.w	801103e <_strtod_l+0x86>
 8011b7c:	2b65      	cmp	r3, #101	; 0x65
 8011b7e:	f04f 0200 	mov.w	r2, #0
 8011b82:	f43f ab4e 	beq.w	8011222 <_strtod_l+0x26a>
 8011b86:	2101      	movs	r1, #1
 8011b88:	4614      	mov	r4, r2
 8011b8a:	9104      	str	r1, [sp, #16]
 8011b8c:	f7ff bacb 	b.w	8011126 <_strtod_l+0x16e>
 8011b90:	ffc00000 	.word	0xffc00000
 8011b94:	41dfffff 	.word	0x41dfffff
 8011b98:	94a03595 	.word	0x94a03595
 8011b9c:	3fcfffff 	.word	0x3fcfffff

08011ba0 <strtof>:
 8011ba0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8011ba4:	4e24      	ldr	r6, [pc, #144]	; (8011c38 <strtof+0x98>)
 8011ba6:	4a25      	ldr	r2, [pc, #148]	; (8011c3c <strtof+0x9c>)
 8011ba8:	6834      	ldr	r4, [r6, #0]
 8011baa:	6a23      	ldr	r3, [r4, #32]
 8011bac:	ed2d 8b02 	vpush	{d8}
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	bf08      	it	eq
 8011bb4:	4613      	moveq	r3, r2
 8011bb6:	460a      	mov	r2, r1
 8011bb8:	4601      	mov	r1, r0
 8011bba:	4620      	mov	r0, r4
 8011bbc:	f7ff f9fc 	bl	8010fb8 <_strtod_l>
 8011bc0:	ec55 4b10 	vmov	r4, r5, d0
 8011bc4:	ee10 2a10 	vmov	r2, s0
 8011bc8:	462b      	mov	r3, r5
 8011bca:	ee10 0a10 	vmov	r0, s0
 8011bce:	4629      	mov	r1, r5
 8011bd0:	f7ee ffac 	bl	8000b2c <__aeabi_dcmpun>
 8011bd4:	b130      	cbz	r0, 8011be4 <strtof+0x44>
 8011bd6:	ecbd 8b02 	vpop	{d8}
 8011bda:	2000      	movs	r0, #0
 8011bdc:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
 8011be0:	f002 bbbc 	b.w	801435c <nanf>
 8011be4:	4620      	mov	r0, r4
 8011be6:	4629      	mov	r1, r5
 8011be8:	f7ee fffe 	bl	8000be8 <__aeabi_d2f>
 8011bec:	ee08 0a10 	vmov	s16, r0
 8011bf0:	eddf 7a13 	vldr	s15, [pc, #76]	; 8011c40 <strtof+0xa0>
 8011bf4:	eeb0 7ac8 	vabs.f32	s14, s16
 8011bf8:	eeb4 7a67 	vcmp.f32	s14, s15
 8011bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c00:	dd14      	ble.n	8011c2c <strtof+0x8c>
 8011c02:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
 8011c06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011c0a:	4b0e      	ldr	r3, [pc, #56]	; (8011c44 <strtof+0xa4>)
 8011c0c:	4620      	mov	r0, r4
 8011c0e:	4649      	mov	r1, r9
 8011c10:	f7ee ff8c 	bl	8000b2c <__aeabi_dcmpun>
 8011c14:	b938      	cbnz	r0, 8011c26 <strtof+0x86>
 8011c16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011c1a:	4b0a      	ldr	r3, [pc, #40]	; (8011c44 <strtof+0xa4>)
 8011c1c:	4620      	mov	r0, r4
 8011c1e:	4649      	mov	r1, r9
 8011c20:	f7ee ff66 	bl	8000af0 <__aeabi_dcmple>
 8011c24:	b110      	cbz	r0, 8011c2c <strtof+0x8c>
 8011c26:	6833      	ldr	r3, [r6, #0]
 8011c28:	2222      	movs	r2, #34	; 0x22
 8011c2a:	601a      	str	r2, [r3, #0]
 8011c2c:	eeb0 0a48 	vmov.f32	s0, s16
 8011c30:	ecbd 8b02 	vpop	{d8}
 8011c34:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8011c38:	2000015c 	.word	0x2000015c
 8011c3c:	200001c0 	.word	0x200001c0
 8011c40:	7f7fffff 	.word	0x7f7fffff
 8011c44:	7fefffff 	.word	0x7fefffff

08011c48 <__swbuf_r>:
 8011c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c4a:	460e      	mov	r6, r1
 8011c4c:	4614      	mov	r4, r2
 8011c4e:	4605      	mov	r5, r0
 8011c50:	b118      	cbz	r0, 8011c5a <__swbuf_r+0x12>
 8011c52:	6983      	ldr	r3, [r0, #24]
 8011c54:	b90b      	cbnz	r3, 8011c5a <__swbuf_r+0x12>
 8011c56:	f000 ffeb 	bl	8012c30 <__sinit>
 8011c5a:	4b21      	ldr	r3, [pc, #132]	; (8011ce0 <__swbuf_r+0x98>)
 8011c5c:	429c      	cmp	r4, r3
 8011c5e:	d12a      	bne.n	8011cb6 <__swbuf_r+0x6e>
 8011c60:	686c      	ldr	r4, [r5, #4]
 8011c62:	69a3      	ldr	r3, [r4, #24]
 8011c64:	60a3      	str	r3, [r4, #8]
 8011c66:	89a3      	ldrh	r3, [r4, #12]
 8011c68:	071a      	lsls	r2, r3, #28
 8011c6a:	d52e      	bpl.n	8011cca <__swbuf_r+0x82>
 8011c6c:	6923      	ldr	r3, [r4, #16]
 8011c6e:	b363      	cbz	r3, 8011cca <__swbuf_r+0x82>
 8011c70:	6923      	ldr	r3, [r4, #16]
 8011c72:	6820      	ldr	r0, [r4, #0]
 8011c74:	1ac0      	subs	r0, r0, r3
 8011c76:	6963      	ldr	r3, [r4, #20]
 8011c78:	b2f6      	uxtb	r6, r6
 8011c7a:	4283      	cmp	r3, r0
 8011c7c:	4637      	mov	r7, r6
 8011c7e:	dc04      	bgt.n	8011c8a <__swbuf_r+0x42>
 8011c80:	4621      	mov	r1, r4
 8011c82:	4628      	mov	r0, r5
 8011c84:	f000 ff6a 	bl	8012b5c <_fflush_r>
 8011c88:	bb28      	cbnz	r0, 8011cd6 <__swbuf_r+0x8e>
 8011c8a:	68a3      	ldr	r3, [r4, #8]
 8011c8c:	3b01      	subs	r3, #1
 8011c8e:	60a3      	str	r3, [r4, #8]
 8011c90:	6823      	ldr	r3, [r4, #0]
 8011c92:	1c5a      	adds	r2, r3, #1
 8011c94:	6022      	str	r2, [r4, #0]
 8011c96:	701e      	strb	r6, [r3, #0]
 8011c98:	6963      	ldr	r3, [r4, #20]
 8011c9a:	3001      	adds	r0, #1
 8011c9c:	4283      	cmp	r3, r0
 8011c9e:	d004      	beq.n	8011caa <__swbuf_r+0x62>
 8011ca0:	89a3      	ldrh	r3, [r4, #12]
 8011ca2:	07db      	lsls	r3, r3, #31
 8011ca4:	d519      	bpl.n	8011cda <__swbuf_r+0x92>
 8011ca6:	2e0a      	cmp	r6, #10
 8011ca8:	d117      	bne.n	8011cda <__swbuf_r+0x92>
 8011caa:	4621      	mov	r1, r4
 8011cac:	4628      	mov	r0, r5
 8011cae:	f000 ff55 	bl	8012b5c <_fflush_r>
 8011cb2:	b190      	cbz	r0, 8011cda <__swbuf_r+0x92>
 8011cb4:	e00f      	b.n	8011cd6 <__swbuf_r+0x8e>
 8011cb6:	4b0b      	ldr	r3, [pc, #44]	; (8011ce4 <__swbuf_r+0x9c>)
 8011cb8:	429c      	cmp	r4, r3
 8011cba:	d101      	bne.n	8011cc0 <__swbuf_r+0x78>
 8011cbc:	68ac      	ldr	r4, [r5, #8]
 8011cbe:	e7d0      	b.n	8011c62 <__swbuf_r+0x1a>
 8011cc0:	4b09      	ldr	r3, [pc, #36]	; (8011ce8 <__swbuf_r+0xa0>)
 8011cc2:	429c      	cmp	r4, r3
 8011cc4:	bf08      	it	eq
 8011cc6:	68ec      	ldreq	r4, [r5, #12]
 8011cc8:	e7cb      	b.n	8011c62 <__swbuf_r+0x1a>
 8011cca:	4621      	mov	r1, r4
 8011ccc:	4628      	mov	r0, r5
 8011cce:	f000 f80d 	bl	8011cec <__swsetup_r>
 8011cd2:	2800      	cmp	r0, #0
 8011cd4:	d0cc      	beq.n	8011c70 <__swbuf_r+0x28>
 8011cd6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011cda:	4638      	mov	r0, r7
 8011cdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011cde:	bf00      	nop
 8011ce0:	08016760 	.word	0x08016760
 8011ce4:	08016780 	.word	0x08016780
 8011ce8:	08016740 	.word	0x08016740

08011cec <__swsetup_r>:
 8011cec:	4b32      	ldr	r3, [pc, #200]	; (8011db8 <__swsetup_r+0xcc>)
 8011cee:	b570      	push	{r4, r5, r6, lr}
 8011cf0:	681d      	ldr	r5, [r3, #0]
 8011cf2:	4606      	mov	r6, r0
 8011cf4:	460c      	mov	r4, r1
 8011cf6:	b125      	cbz	r5, 8011d02 <__swsetup_r+0x16>
 8011cf8:	69ab      	ldr	r3, [r5, #24]
 8011cfa:	b913      	cbnz	r3, 8011d02 <__swsetup_r+0x16>
 8011cfc:	4628      	mov	r0, r5
 8011cfe:	f000 ff97 	bl	8012c30 <__sinit>
 8011d02:	4b2e      	ldr	r3, [pc, #184]	; (8011dbc <__swsetup_r+0xd0>)
 8011d04:	429c      	cmp	r4, r3
 8011d06:	d10f      	bne.n	8011d28 <__swsetup_r+0x3c>
 8011d08:	686c      	ldr	r4, [r5, #4]
 8011d0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d0e:	b29a      	uxth	r2, r3
 8011d10:	0715      	lsls	r5, r2, #28
 8011d12:	d42c      	bmi.n	8011d6e <__swsetup_r+0x82>
 8011d14:	06d0      	lsls	r0, r2, #27
 8011d16:	d411      	bmi.n	8011d3c <__swsetup_r+0x50>
 8011d18:	2209      	movs	r2, #9
 8011d1a:	6032      	str	r2, [r6, #0]
 8011d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d20:	81a3      	strh	r3, [r4, #12]
 8011d22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011d26:	e03e      	b.n	8011da6 <__swsetup_r+0xba>
 8011d28:	4b25      	ldr	r3, [pc, #148]	; (8011dc0 <__swsetup_r+0xd4>)
 8011d2a:	429c      	cmp	r4, r3
 8011d2c:	d101      	bne.n	8011d32 <__swsetup_r+0x46>
 8011d2e:	68ac      	ldr	r4, [r5, #8]
 8011d30:	e7eb      	b.n	8011d0a <__swsetup_r+0x1e>
 8011d32:	4b24      	ldr	r3, [pc, #144]	; (8011dc4 <__swsetup_r+0xd8>)
 8011d34:	429c      	cmp	r4, r3
 8011d36:	bf08      	it	eq
 8011d38:	68ec      	ldreq	r4, [r5, #12]
 8011d3a:	e7e6      	b.n	8011d0a <__swsetup_r+0x1e>
 8011d3c:	0751      	lsls	r1, r2, #29
 8011d3e:	d512      	bpl.n	8011d66 <__swsetup_r+0x7a>
 8011d40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011d42:	b141      	cbz	r1, 8011d56 <__swsetup_r+0x6a>
 8011d44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011d48:	4299      	cmp	r1, r3
 8011d4a:	d002      	beq.n	8011d52 <__swsetup_r+0x66>
 8011d4c:	4630      	mov	r0, r6
 8011d4e:	f001 ffbb 	bl	8013cc8 <_free_r>
 8011d52:	2300      	movs	r3, #0
 8011d54:	6363      	str	r3, [r4, #52]	; 0x34
 8011d56:	89a3      	ldrh	r3, [r4, #12]
 8011d58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011d5c:	81a3      	strh	r3, [r4, #12]
 8011d5e:	2300      	movs	r3, #0
 8011d60:	6063      	str	r3, [r4, #4]
 8011d62:	6923      	ldr	r3, [r4, #16]
 8011d64:	6023      	str	r3, [r4, #0]
 8011d66:	89a3      	ldrh	r3, [r4, #12]
 8011d68:	f043 0308 	orr.w	r3, r3, #8
 8011d6c:	81a3      	strh	r3, [r4, #12]
 8011d6e:	6923      	ldr	r3, [r4, #16]
 8011d70:	b94b      	cbnz	r3, 8011d86 <__swsetup_r+0x9a>
 8011d72:	89a3      	ldrh	r3, [r4, #12]
 8011d74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011d7c:	d003      	beq.n	8011d86 <__swsetup_r+0x9a>
 8011d7e:	4621      	mov	r1, r4
 8011d80:	4630      	mov	r0, r6
 8011d82:	f001 fb39 	bl	80133f8 <__smakebuf_r>
 8011d86:	89a2      	ldrh	r2, [r4, #12]
 8011d88:	f012 0301 	ands.w	r3, r2, #1
 8011d8c:	d00c      	beq.n	8011da8 <__swsetup_r+0xbc>
 8011d8e:	2300      	movs	r3, #0
 8011d90:	60a3      	str	r3, [r4, #8]
 8011d92:	6963      	ldr	r3, [r4, #20]
 8011d94:	425b      	negs	r3, r3
 8011d96:	61a3      	str	r3, [r4, #24]
 8011d98:	6923      	ldr	r3, [r4, #16]
 8011d9a:	b953      	cbnz	r3, 8011db2 <__swsetup_r+0xc6>
 8011d9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011da0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8011da4:	d1ba      	bne.n	8011d1c <__swsetup_r+0x30>
 8011da6:	bd70      	pop	{r4, r5, r6, pc}
 8011da8:	0792      	lsls	r2, r2, #30
 8011daa:	bf58      	it	pl
 8011dac:	6963      	ldrpl	r3, [r4, #20]
 8011dae:	60a3      	str	r3, [r4, #8]
 8011db0:	e7f2      	b.n	8011d98 <__swsetup_r+0xac>
 8011db2:	2000      	movs	r0, #0
 8011db4:	e7f7      	b.n	8011da6 <__swsetup_r+0xba>
 8011db6:	bf00      	nop
 8011db8:	2000015c 	.word	0x2000015c
 8011dbc:	08016760 	.word	0x08016760
 8011dc0:	08016780 	.word	0x08016780
 8011dc4:	08016740 	.word	0x08016740

08011dc8 <quorem>:
 8011dc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dcc:	6903      	ldr	r3, [r0, #16]
 8011dce:	690c      	ldr	r4, [r1, #16]
 8011dd0:	42a3      	cmp	r3, r4
 8011dd2:	4680      	mov	r8, r0
 8011dd4:	f2c0 8082 	blt.w	8011edc <quorem+0x114>
 8011dd8:	3c01      	subs	r4, #1
 8011dda:	f101 0714 	add.w	r7, r1, #20
 8011dde:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8011de2:	f100 0614 	add.w	r6, r0, #20
 8011de6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8011dea:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8011dee:	eb06 030c 	add.w	r3, r6, ip
 8011df2:	3501      	adds	r5, #1
 8011df4:	eb07 090c 	add.w	r9, r7, ip
 8011df8:	9301      	str	r3, [sp, #4]
 8011dfa:	fbb0 f5f5 	udiv	r5, r0, r5
 8011dfe:	b395      	cbz	r5, 8011e66 <quorem+0x9e>
 8011e00:	f04f 0a00 	mov.w	sl, #0
 8011e04:	4638      	mov	r0, r7
 8011e06:	46b6      	mov	lr, r6
 8011e08:	46d3      	mov	fp, sl
 8011e0a:	f850 2b04 	ldr.w	r2, [r0], #4
 8011e0e:	b293      	uxth	r3, r2
 8011e10:	fb05 a303 	mla	r3, r5, r3, sl
 8011e14:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011e18:	b29b      	uxth	r3, r3
 8011e1a:	ebab 0303 	sub.w	r3, fp, r3
 8011e1e:	0c12      	lsrs	r2, r2, #16
 8011e20:	f8de b000 	ldr.w	fp, [lr]
 8011e24:	fb05 a202 	mla	r2, r5, r2, sl
 8011e28:	fa13 f38b 	uxtah	r3, r3, fp
 8011e2c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8011e30:	fa1f fb82 	uxth.w	fp, r2
 8011e34:	f8de 2000 	ldr.w	r2, [lr]
 8011e38:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8011e3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011e40:	b29b      	uxth	r3, r3
 8011e42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011e46:	4581      	cmp	r9, r0
 8011e48:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8011e4c:	f84e 3b04 	str.w	r3, [lr], #4
 8011e50:	d2db      	bcs.n	8011e0a <quorem+0x42>
 8011e52:	f856 300c 	ldr.w	r3, [r6, ip]
 8011e56:	b933      	cbnz	r3, 8011e66 <quorem+0x9e>
 8011e58:	9b01      	ldr	r3, [sp, #4]
 8011e5a:	3b04      	subs	r3, #4
 8011e5c:	429e      	cmp	r6, r3
 8011e5e:	461a      	mov	r2, r3
 8011e60:	d330      	bcc.n	8011ec4 <quorem+0xfc>
 8011e62:	f8c8 4010 	str.w	r4, [r8, #16]
 8011e66:	4640      	mov	r0, r8
 8011e68:	f001 fd74 	bl	8013954 <__mcmp>
 8011e6c:	2800      	cmp	r0, #0
 8011e6e:	db25      	blt.n	8011ebc <quorem+0xf4>
 8011e70:	3501      	adds	r5, #1
 8011e72:	4630      	mov	r0, r6
 8011e74:	f04f 0c00 	mov.w	ip, #0
 8011e78:	f857 2b04 	ldr.w	r2, [r7], #4
 8011e7c:	f8d0 e000 	ldr.w	lr, [r0]
 8011e80:	b293      	uxth	r3, r2
 8011e82:	ebac 0303 	sub.w	r3, ip, r3
 8011e86:	0c12      	lsrs	r2, r2, #16
 8011e88:	fa13 f38e 	uxtah	r3, r3, lr
 8011e8c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011e90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011e94:	b29b      	uxth	r3, r3
 8011e96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011e9a:	45b9      	cmp	r9, r7
 8011e9c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011ea0:	f840 3b04 	str.w	r3, [r0], #4
 8011ea4:	d2e8      	bcs.n	8011e78 <quorem+0xb0>
 8011ea6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8011eaa:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8011eae:	b92a      	cbnz	r2, 8011ebc <quorem+0xf4>
 8011eb0:	3b04      	subs	r3, #4
 8011eb2:	429e      	cmp	r6, r3
 8011eb4:	461a      	mov	r2, r3
 8011eb6:	d30b      	bcc.n	8011ed0 <quorem+0x108>
 8011eb8:	f8c8 4010 	str.w	r4, [r8, #16]
 8011ebc:	4628      	mov	r0, r5
 8011ebe:	b003      	add	sp, #12
 8011ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ec4:	6812      	ldr	r2, [r2, #0]
 8011ec6:	3b04      	subs	r3, #4
 8011ec8:	2a00      	cmp	r2, #0
 8011eca:	d1ca      	bne.n	8011e62 <quorem+0x9a>
 8011ecc:	3c01      	subs	r4, #1
 8011ece:	e7c5      	b.n	8011e5c <quorem+0x94>
 8011ed0:	6812      	ldr	r2, [r2, #0]
 8011ed2:	3b04      	subs	r3, #4
 8011ed4:	2a00      	cmp	r2, #0
 8011ed6:	d1ef      	bne.n	8011eb8 <quorem+0xf0>
 8011ed8:	3c01      	subs	r4, #1
 8011eda:	e7ea      	b.n	8011eb2 <quorem+0xea>
 8011edc:	2000      	movs	r0, #0
 8011ede:	e7ee      	b.n	8011ebe <quorem+0xf6>

08011ee0 <_dtoa_r>:
 8011ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ee4:	ec57 6b10 	vmov	r6, r7, d0
 8011ee8:	b097      	sub	sp, #92	; 0x5c
 8011eea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011eec:	9106      	str	r1, [sp, #24]
 8011eee:	4604      	mov	r4, r0
 8011ef0:	920b      	str	r2, [sp, #44]	; 0x2c
 8011ef2:	9312      	str	r3, [sp, #72]	; 0x48
 8011ef4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011ef8:	e9cd 6700 	strd	r6, r7, [sp]
 8011efc:	b93d      	cbnz	r5, 8011f0e <_dtoa_r+0x2e>
 8011efe:	2010      	movs	r0, #16
 8011f00:	f001 faba 	bl	8013478 <malloc>
 8011f04:	6260      	str	r0, [r4, #36]	; 0x24
 8011f06:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011f0a:	6005      	str	r5, [r0, #0]
 8011f0c:	60c5      	str	r5, [r0, #12]
 8011f0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011f10:	6819      	ldr	r1, [r3, #0]
 8011f12:	b151      	cbz	r1, 8011f2a <_dtoa_r+0x4a>
 8011f14:	685a      	ldr	r2, [r3, #4]
 8011f16:	604a      	str	r2, [r1, #4]
 8011f18:	2301      	movs	r3, #1
 8011f1a:	4093      	lsls	r3, r2
 8011f1c:	608b      	str	r3, [r1, #8]
 8011f1e:	4620      	mov	r0, r4
 8011f20:	f001 faf8 	bl	8013514 <_Bfree>
 8011f24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011f26:	2200      	movs	r2, #0
 8011f28:	601a      	str	r2, [r3, #0]
 8011f2a:	1e3b      	subs	r3, r7, #0
 8011f2c:	bfbb      	ittet	lt
 8011f2e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011f32:	9301      	strlt	r3, [sp, #4]
 8011f34:	2300      	movge	r3, #0
 8011f36:	2201      	movlt	r2, #1
 8011f38:	bfac      	ite	ge
 8011f3a:	f8c8 3000 	strge.w	r3, [r8]
 8011f3e:	f8c8 2000 	strlt.w	r2, [r8]
 8011f42:	4baf      	ldr	r3, [pc, #700]	; (8012200 <_dtoa_r+0x320>)
 8011f44:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011f48:	ea33 0308 	bics.w	r3, r3, r8
 8011f4c:	d114      	bne.n	8011f78 <_dtoa_r+0x98>
 8011f4e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011f50:	f242 730f 	movw	r3, #9999	; 0x270f
 8011f54:	6013      	str	r3, [r2, #0]
 8011f56:	9b00      	ldr	r3, [sp, #0]
 8011f58:	b923      	cbnz	r3, 8011f64 <_dtoa_r+0x84>
 8011f5a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8011f5e:	2800      	cmp	r0, #0
 8011f60:	f000 8542 	beq.w	80129e8 <_dtoa_r+0xb08>
 8011f64:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011f66:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8012214 <_dtoa_r+0x334>
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	f000 8544 	beq.w	80129f8 <_dtoa_r+0xb18>
 8011f70:	f10b 0303 	add.w	r3, fp, #3
 8011f74:	f000 bd3e 	b.w	80129f4 <_dtoa_r+0xb14>
 8011f78:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011f7c:	2200      	movs	r2, #0
 8011f7e:	2300      	movs	r3, #0
 8011f80:	4630      	mov	r0, r6
 8011f82:	4639      	mov	r1, r7
 8011f84:	f7ee fda0 	bl	8000ac8 <__aeabi_dcmpeq>
 8011f88:	4681      	mov	r9, r0
 8011f8a:	b168      	cbz	r0, 8011fa8 <_dtoa_r+0xc8>
 8011f8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011f8e:	2301      	movs	r3, #1
 8011f90:	6013      	str	r3, [r2, #0]
 8011f92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	f000 8524 	beq.w	80129e2 <_dtoa_r+0xb02>
 8011f9a:	4b9a      	ldr	r3, [pc, #616]	; (8012204 <_dtoa_r+0x324>)
 8011f9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011f9e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8011fa2:	6013      	str	r3, [r2, #0]
 8011fa4:	f000 bd28 	b.w	80129f8 <_dtoa_r+0xb18>
 8011fa8:	aa14      	add	r2, sp, #80	; 0x50
 8011faa:	a915      	add	r1, sp, #84	; 0x54
 8011fac:	ec47 6b10 	vmov	d0, r6, r7
 8011fb0:	4620      	mov	r0, r4
 8011fb2:	f001 fdbd 	bl	8013b30 <__d2b>
 8011fb6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8011fba:	9004      	str	r0, [sp, #16]
 8011fbc:	2d00      	cmp	r5, #0
 8011fbe:	d07c      	beq.n	80120ba <_dtoa_r+0x1da>
 8011fc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011fc4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8011fc8:	46b2      	mov	sl, r6
 8011fca:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8011fce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011fd2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8011fd6:	2200      	movs	r2, #0
 8011fd8:	4b8b      	ldr	r3, [pc, #556]	; (8012208 <_dtoa_r+0x328>)
 8011fda:	4650      	mov	r0, sl
 8011fdc:	4659      	mov	r1, fp
 8011fde:	f7ee f953 	bl	8000288 <__aeabi_dsub>
 8011fe2:	a381      	add	r3, pc, #516	; (adr r3, 80121e8 <_dtoa_r+0x308>)
 8011fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fe8:	f7ee fb06 	bl	80005f8 <__aeabi_dmul>
 8011fec:	a380      	add	r3, pc, #512	; (adr r3, 80121f0 <_dtoa_r+0x310>)
 8011fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ff2:	f7ee f94b 	bl	800028c <__adddf3>
 8011ff6:	4606      	mov	r6, r0
 8011ff8:	4628      	mov	r0, r5
 8011ffa:	460f      	mov	r7, r1
 8011ffc:	f7ee fa92 	bl	8000524 <__aeabi_i2d>
 8012000:	a37d      	add	r3, pc, #500	; (adr r3, 80121f8 <_dtoa_r+0x318>)
 8012002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012006:	f7ee faf7 	bl	80005f8 <__aeabi_dmul>
 801200a:	4602      	mov	r2, r0
 801200c:	460b      	mov	r3, r1
 801200e:	4630      	mov	r0, r6
 8012010:	4639      	mov	r1, r7
 8012012:	f7ee f93b 	bl	800028c <__adddf3>
 8012016:	4606      	mov	r6, r0
 8012018:	460f      	mov	r7, r1
 801201a:	f7ee fd9d 	bl	8000b58 <__aeabi_d2iz>
 801201e:	2200      	movs	r2, #0
 8012020:	4682      	mov	sl, r0
 8012022:	2300      	movs	r3, #0
 8012024:	4630      	mov	r0, r6
 8012026:	4639      	mov	r1, r7
 8012028:	f7ee fd58 	bl	8000adc <__aeabi_dcmplt>
 801202c:	b148      	cbz	r0, 8012042 <_dtoa_r+0x162>
 801202e:	4650      	mov	r0, sl
 8012030:	f7ee fa78 	bl	8000524 <__aeabi_i2d>
 8012034:	4632      	mov	r2, r6
 8012036:	463b      	mov	r3, r7
 8012038:	f7ee fd46 	bl	8000ac8 <__aeabi_dcmpeq>
 801203c:	b908      	cbnz	r0, 8012042 <_dtoa_r+0x162>
 801203e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012042:	f1ba 0f16 	cmp.w	sl, #22
 8012046:	d859      	bhi.n	80120fc <_dtoa_r+0x21c>
 8012048:	4970      	ldr	r1, [pc, #448]	; (801220c <_dtoa_r+0x32c>)
 801204a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801204e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012052:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012056:	f7ee fd5f 	bl	8000b18 <__aeabi_dcmpgt>
 801205a:	2800      	cmp	r0, #0
 801205c:	d050      	beq.n	8012100 <_dtoa_r+0x220>
 801205e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012062:	2300      	movs	r3, #0
 8012064:	930f      	str	r3, [sp, #60]	; 0x3c
 8012066:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012068:	1b5d      	subs	r5, r3, r5
 801206a:	f1b5 0801 	subs.w	r8, r5, #1
 801206e:	bf49      	itett	mi
 8012070:	f1c5 0301 	rsbmi	r3, r5, #1
 8012074:	2300      	movpl	r3, #0
 8012076:	9305      	strmi	r3, [sp, #20]
 8012078:	f04f 0800 	movmi.w	r8, #0
 801207c:	bf58      	it	pl
 801207e:	9305      	strpl	r3, [sp, #20]
 8012080:	f1ba 0f00 	cmp.w	sl, #0
 8012084:	db3e      	blt.n	8012104 <_dtoa_r+0x224>
 8012086:	2300      	movs	r3, #0
 8012088:	44d0      	add	r8, sl
 801208a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 801208e:	9307      	str	r3, [sp, #28]
 8012090:	9b06      	ldr	r3, [sp, #24]
 8012092:	2b09      	cmp	r3, #9
 8012094:	f200 8090 	bhi.w	80121b8 <_dtoa_r+0x2d8>
 8012098:	2b05      	cmp	r3, #5
 801209a:	bfc4      	itt	gt
 801209c:	3b04      	subgt	r3, #4
 801209e:	9306      	strgt	r3, [sp, #24]
 80120a0:	9b06      	ldr	r3, [sp, #24]
 80120a2:	f1a3 0302 	sub.w	r3, r3, #2
 80120a6:	bfcc      	ite	gt
 80120a8:	2500      	movgt	r5, #0
 80120aa:	2501      	movle	r5, #1
 80120ac:	2b03      	cmp	r3, #3
 80120ae:	f200 808f 	bhi.w	80121d0 <_dtoa_r+0x2f0>
 80120b2:	e8df f003 	tbb	[pc, r3]
 80120b6:	7f7d      	.short	0x7f7d
 80120b8:	7131      	.short	0x7131
 80120ba:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80120be:	441d      	add	r5, r3
 80120c0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80120c4:	2820      	cmp	r0, #32
 80120c6:	dd13      	ble.n	80120f0 <_dtoa_r+0x210>
 80120c8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80120cc:	9b00      	ldr	r3, [sp, #0]
 80120ce:	fa08 f800 	lsl.w	r8, r8, r0
 80120d2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80120d6:	fa23 f000 	lsr.w	r0, r3, r0
 80120da:	ea48 0000 	orr.w	r0, r8, r0
 80120de:	f7ee fa11 	bl	8000504 <__aeabi_ui2d>
 80120e2:	2301      	movs	r3, #1
 80120e4:	4682      	mov	sl, r0
 80120e6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80120ea:	3d01      	subs	r5, #1
 80120ec:	9313      	str	r3, [sp, #76]	; 0x4c
 80120ee:	e772      	b.n	8011fd6 <_dtoa_r+0xf6>
 80120f0:	9b00      	ldr	r3, [sp, #0]
 80120f2:	f1c0 0020 	rsb	r0, r0, #32
 80120f6:	fa03 f000 	lsl.w	r0, r3, r0
 80120fa:	e7f0      	b.n	80120de <_dtoa_r+0x1fe>
 80120fc:	2301      	movs	r3, #1
 80120fe:	e7b1      	b.n	8012064 <_dtoa_r+0x184>
 8012100:	900f      	str	r0, [sp, #60]	; 0x3c
 8012102:	e7b0      	b.n	8012066 <_dtoa_r+0x186>
 8012104:	9b05      	ldr	r3, [sp, #20]
 8012106:	eba3 030a 	sub.w	r3, r3, sl
 801210a:	9305      	str	r3, [sp, #20]
 801210c:	f1ca 0300 	rsb	r3, sl, #0
 8012110:	9307      	str	r3, [sp, #28]
 8012112:	2300      	movs	r3, #0
 8012114:	930e      	str	r3, [sp, #56]	; 0x38
 8012116:	e7bb      	b.n	8012090 <_dtoa_r+0x1b0>
 8012118:	2301      	movs	r3, #1
 801211a:	930a      	str	r3, [sp, #40]	; 0x28
 801211c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801211e:	2b00      	cmp	r3, #0
 8012120:	dd59      	ble.n	80121d6 <_dtoa_r+0x2f6>
 8012122:	9302      	str	r3, [sp, #8]
 8012124:	4699      	mov	r9, r3
 8012126:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012128:	2200      	movs	r2, #0
 801212a:	6072      	str	r2, [r6, #4]
 801212c:	2204      	movs	r2, #4
 801212e:	f102 0014 	add.w	r0, r2, #20
 8012132:	4298      	cmp	r0, r3
 8012134:	6871      	ldr	r1, [r6, #4]
 8012136:	d953      	bls.n	80121e0 <_dtoa_r+0x300>
 8012138:	4620      	mov	r0, r4
 801213a:	f001 f9b7 	bl	80134ac <_Balloc>
 801213e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012140:	6030      	str	r0, [r6, #0]
 8012142:	f1b9 0f0e 	cmp.w	r9, #14
 8012146:	f8d3 b000 	ldr.w	fp, [r3]
 801214a:	f200 80e6 	bhi.w	801231a <_dtoa_r+0x43a>
 801214e:	2d00      	cmp	r5, #0
 8012150:	f000 80e3 	beq.w	801231a <_dtoa_r+0x43a>
 8012154:	ed9d 7b00 	vldr	d7, [sp]
 8012158:	f1ba 0f00 	cmp.w	sl, #0
 801215c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8012160:	dd74      	ble.n	801224c <_dtoa_r+0x36c>
 8012162:	4a2a      	ldr	r2, [pc, #168]	; (801220c <_dtoa_r+0x32c>)
 8012164:	f00a 030f 	and.w	r3, sl, #15
 8012168:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801216c:	ed93 7b00 	vldr	d7, [r3]
 8012170:	ea4f 162a 	mov.w	r6, sl, asr #4
 8012174:	06f0      	lsls	r0, r6, #27
 8012176:	ed8d 7b08 	vstr	d7, [sp, #32]
 801217a:	d565      	bpl.n	8012248 <_dtoa_r+0x368>
 801217c:	4b24      	ldr	r3, [pc, #144]	; (8012210 <_dtoa_r+0x330>)
 801217e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012182:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012186:	f7ee fb61 	bl	800084c <__aeabi_ddiv>
 801218a:	e9cd 0100 	strd	r0, r1, [sp]
 801218e:	f006 060f 	and.w	r6, r6, #15
 8012192:	2503      	movs	r5, #3
 8012194:	4f1e      	ldr	r7, [pc, #120]	; (8012210 <_dtoa_r+0x330>)
 8012196:	e04c      	b.n	8012232 <_dtoa_r+0x352>
 8012198:	2301      	movs	r3, #1
 801219a:	930a      	str	r3, [sp, #40]	; 0x28
 801219c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801219e:	4453      	add	r3, sl
 80121a0:	f103 0901 	add.w	r9, r3, #1
 80121a4:	9302      	str	r3, [sp, #8]
 80121a6:	464b      	mov	r3, r9
 80121a8:	2b01      	cmp	r3, #1
 80121aa:	bfb8      	it	lt
 80121ac:	2301      	movlt	r3, #1
 80121ae:	e7ba      	b.n	8012126 <_dtoa_r+0x246>
 80121b0:	2300      	movs	r3, #0
 80121b2:	e7b2      	b.n	801211a <_dtoa_r+0x23a>
 80121b4:	2300      	movs	r3, #0
 80121b6:	e7f0      	b.n	801219a <_dtoa_r+0x2ba>
 80121b8:	2501      	movs	r5, #1
 80121ba:	2300      	movs	r3, #0
 80121bc:	9306      	str	r3, [sp, #24]
 80121be:	950a      	str	r5, [sp, #40]	; 0x28
 80121c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80121c4:	9302      	str	r3, [sp, #8]
 80121c6:	4699      	mov	r9, r3
 80121c8:	2200      	movs	r2, #0
 80121ca:	2312      	movs	r3, #18
 80121cc:	920b      	str	r2, [sp, #44]	; 0x2c
 80121ce:	e7aa      	b.n	8012126 <_dtoa_r+0x246>
 80121d0:	2301      	movs	r3, #1
 80121d2:	930a      	str	r3, [sp, #40]	; 0x28
 80121d4:	e7f4      	b.n	80121c0 <_dtoa_r+0x2e0>
 80121d6:	2301      	movs	r3, #1
 80121d8:	9302      	str	r3, [sp, #8]
 80121da:	4699      	mov	r9, r3
 80121dc:	461a      	mov	r2, r3
 80121de:	e7f5      	b.n	80121cc <_dtoa_r+0x2ec>
 80121e0:	3101      	adds	r1, #1
 80121e2:	6071      	str	r1, [r6, #4]
 80121e4:	0052      	lsls	r2, r2, #1
 80121e6:	e7a2      	b.n	801212e <_dtoa_r+0x24e>
 80121e8:	636f4361 	.word	0x636f4361
 80121ec:	3fd287a7 	.word	0x3fd287a7
 80121f0:	8b60c8b3 	.word	0x8b60c8b3
 80121f4:	3fc68a28 	.word	0x3fc68a28
 80121f8:	509f79fb 	.word	0x509f79fb
 80121fc:	3fd34413 	.word	0x3fd34413
 8012200:	7ff00000 	.word	0x7ff00000
 8012204:	080166b9 	.word	0x080166b9
 8012208:	3ff80000 	.word	0x3ff80000
 801220c:	080167d8 	.word	0x080167d8
 8012210:	080167b0 	.word	0x080167b0
 8012214:	08016739 	.word	0x08016739
 8012218:	07f1      	lsls	r1, r6, #31
 801221a:	d508      	bpl.n	801222e <_dtoa_r+0x34e>
 801221c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012220:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012224:	f7ee f9e8 	bl	80005f8 <__aeabi_dmul>
 8012228:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801222c:	3501      	adds	r5, #1
 801222e:	1076      	asrs	r6, r6, #1
 8012230:	3708      	adds	r7, #8
 8012232:	2e00      	cmp	r6, #0
 8012234:	d1f0      	bne.n	8012218 <_dtoa_r+0x338>
 8012236:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801223a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801223e:	f7ee fb05 	bl	800084c <__aeabi_ddiv>
 8012242:	e9cd 0100 	strd	r0, r1, [sp]
 8012246:	e01a      	b.n	801227e <_dtoa_r+0x39e>
 8012248:	2502      	movs	r5, #2
 801224a:	e7a3      	b.n	8012194 <_dtoa_r+0x2b4>
 801224c:	f000 80a0 	beq.w	8012390 <_dtoa_r+0x4b0>
 8012250:	f1ca 0600 	rsb	r6, sl, #0
 8012254:	4b9f      	ldr	r3, [pc, #636]	; (80124d4 <_dtoa_r+0x5f4>)
 8012256:	4fa0      	ldr	r7, [pc, #640]	; (80124d8 <_dtoa_r+0x5f8>)
 8012258:	f006 020f 	and.w	r2, r6, #15
 801225c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012264:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012268:	f7ee f9c6 	bl	80005f8 <__aeabi_dmul>
 801226c:	e9cd 0100 	strd	r0, r1, [sp]
 8012270:	1136      	asrs	r6, r6, #4
 8012272:	2300      	movs	r3, #0
 8012274:	2502      	movs	r5, #2
 8012276:	2e00      	cmp	r6, #0
 8012278:	d17f      	bne.n	801237a <_dtoa_r+0x49a>
 801227a:	2b00      	cmp	r3, #0
 801227c:	d1e1      	bne.n	8012242 <_dtoa_r+0x362>
 801227e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012280:	2b00      	cmp	r3, #0
 8012282:	f000 8087 	beq.w	8012394 <_dtoa_r+0x4b4>
 8012286:	e9dd 6700 	ldrd	r6, r7, [sp]
 801228a:	2200      	movs	r2, #0
 801228c:	4b93      	ldr	r3, [pc, #588]	; (80124dc <_dtoa_r+0x5fc>)
 801228e:	4630      	mov	r0, r6
 8012290:	4639      	mov	r1, r7
 8012292:	f7ee fc23 	bl	8000adc <__aeabi_dcmplt>
 8012296:	2800      	cmp	r0, #0
 8012298:	d07c      	beq.n	8012394 <_dtoa_r+0x4b4>
 801229a:	f1b9 0f00 	cmp.w	r9, #0
 801229e:	d079      	beq.n	8012394 <_dtoa_r+0x4b4>
 80122a0:	9b02      	ldr	r3, [sp, #8]
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	dd35      	ble.n	8012312 <_dtoa_r+0x432>
 80122a6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80122aa:	9308      	str	r3, [sp, #32]
 80122ac:	4639      	mov	r1, r7
 80122ae:	2200      	movs	r2, #0
 80122b0:	4b8b      	ldr	r3, [pc, #556]	; (80124e0 <_dtoa_r+0x600>)
 80122b2:	4630      	mov	r0, r6
 80122b4:	f7ee f9a0 	bl	80005f8 <__aeabi_dmul>
 80122b8:	e9cd 0100 	strd	r0, r1, [sp]
 80122bc:	9f02      	ldr	r7, [sp, #8]
 80122be:	3501      	adds	r5, #1
 80122c0:	4628      	mov	r0, r5
 80122c2:	f7ee f92f 	bl	8000524 <__aeabi_i2d>
 80122c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80122ca:	f7ee f995 	bl	80005f8 <__aeabi_dmul>
 80122ce:	2200      	movs	r2, #0
 80122d0:	4b84      	ldr	r3, [pc, #528]	; (80124e4 <_dtoa_r+0x604>)
 80122d2:	f7ed ffdb 	bl	800028c <__adddf3>
 80122d6:	4605      	mov	r5, r0
 80122d8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80122dc:	2f00      	cmp	r7, #0
 80122de:	d15d      	bne.n	801239c <_dtoa_r+0x4bc>
 80122e0:	2200      	movs	r2, #0
 80122e2:	4b81      	ldr	r3, [pc, #516]	; (80124e8 <_dtoa_r+0x608>)
 80122e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80122e8:	f7ed ffce 	bl	8000288 <__aeabi_dsub>
 80122ec:	462a      	mov	r2, r5
 80122ee:	4633      	mov	r3, r6
 80122f0:	e9cd 0100 	strd	r0, r1, [sp]
 80122f4:	f7ee fc10 	bl	8000b18 <__aeabi_dcmpgt>
 80122f8:	2800      	cmp	r0, #0
 80122fa:	f040 8288 	bne.w	801280e <_dtoa_r+0x92e>
 80122fe:	462a      	mov	r2, r5
 8012300:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8012304:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012308:	f7ee fbe8 	bl	8000adc <__aeabi_dcmplt>
 801230c:	2800      	cmp	r0, #0
 801230e:	f040 827c 	bne.w	801280a <_dtoa_r+0x92a>
 8012312:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012316:	e9cd 2300 	strd	r2, r3, [sp]
 801231a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801231c:	2b00      	cmp	r3, #0
 801231e:	f2c0 8150 	blt.w	80125c2 <_dtoa_r+0x6e2>
 8012322:	f1ba 0f0e 	cmp.w	sl, #14
 8012326:	f300 814c 	bgt.w	80125c2 <_dtoa_r+0x6e2>
 801232a:	4b6a      	ldr	r3, [pc, #424]	; (80124d4 <_dtoa_r+0x5f4>)
 801232c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012330:	ed93 7b00 	vldr	d7, [r3]
 8012334:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012336:	2b00      	cmp	r3, #0
 8012338:	ed8d 7b02 	vstr	d7, [sp, #8]
 801233c:	f280 80d8 	bge.w	80124f0 <_dtoa_r+0x610>
 8012340:	f1b9 0f00 	cmp.w	r9, #0
 8012344:	f300 80d4 	bgt.w	80124f0 <_dtoa_r+0x610>
 8012348:	f040 825e 	bne.w	8012808 <_dtoa_r+0x928>
 801234c:	2200      	movs	r2, #0
 801234e:	4b66      	ldr	r3, [pc, #408]	; (80124e8 <_dtoa_r+0x608>)
 8012350:	ec51 0b17 	vmov	r0, r1, d7
 8012354:	f7ee f950 	bl	80005f8 <__aeabi_dmul>
 8012358:	e9dd 2300 	ldrd	r2, r3, [sp]
 801235c:	f7ee fbd2 	bl	8000b04 <__aeabi_dcmpge>
 8012360:	464f      	mov	r7, r9
 8012362:	464e      	mov	r6, r9
 8012364:	2800      	cmp	r0, #0
 8012366:	f040 8234 	bne.w	80127d2 <_dtoa_r+0x8f2>
 801236a:	2331      	movs	r3, #49	; 0x31
 801236c:	f10b 0501 	add.w	r5, fp, #1
 8012370:	f88b 3000 	strb.w	r3, [fp]
 8012374:	f10a 0a01 	add.w	sl, sl, #1
 8012378:	e22f      	b.n	80127da <_dtoa_r+0x8fa>
 801237a:	07f2      	lsls	r2, r6, #31
 801237c:	d505      	bpl.n	801238a <_dtoa_r+0x4aa>
 801237e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012382:	f7ee f939 	bl	80005f8 <__aeabi_dmul>
 8012386:	3501      	adds	r5, #1
 8012388:	2301      	movs	r3, #1
 801238a:	1076      	asrs	r6, r6, #1
 801238c:	3708      	adds	r7, #8
 801238e:	e772      	b.n	8012276 <_dtoa_r+0x396>
 8012390:	2502      	movs	r5, #2
 8012392:	e774      	b.n	801227e <_dtoa_r+0x39e>
 8012394:	f8cd a020 	str.w	sl, [sp, #32]
 8012398:	464f      	mov	r7, r9
 801239a:	e791      	b.n	80122c0 <_dtoa_r+0x3e0>
 801239c:	4b4d      	ldr	r3, [pc, #308]	; (80124d4 <_dtoa_r+0x5f4>)
 801239e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80123a2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80123a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d047      	beq.n	801243c <_dtoa_r+0x55c>
 80123ac:	4602      	mov	r2, r0
 80123ae:	460b      	mov	r3, r1
 80123b0:	2000      	movs	r0, #0
 80123b2:	494e      	ldr	r1, [pc, #312]	; (80124ec <_dtoa_r+0x60c>)
 80123b4:	f7ee fa4a 	bl	800084c <__aeabi_ddiv>
 80123b8:	462a      	mov	r2, r5
 80123ba:	4633      	mov	r3, r6
 80123bc:	f7ed ff64 	bl	8000288 <__aeabi_dsub>
 80123c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80123c4:	465d      	mov	r5, fp
 80123c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80123ca:	f7ee fbc5 	bl	8000b58 <__aeabi_d2iz>
 80123ce:	4606      	mov	r6, r0
 80123d0:	f7ee f8a8 	bl	8000524 <__aeabi_i2d>
 80123d4:	4602      	mov	r2, r0
 80123d6:	460b      	mov	r3, r1
 80123d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80123dc:	f7ed ff54 	bl	8000288 <__aeabi_dsub>
 80123e0:	3630      	adds	r6, #48	; 0x30
 80123e2:	f805 6b01 	strb.w	r6, [r5], #1
 80123e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80123ea:	e9cd 0100 	strd	r0, r1, [sp]
 80123ee:	f7ee fb75 	bl	8000adc <__aeabi_dcmplt>
 80123f2:	2800      	cmp	r0, #0
 80123f4:	d163      	bne.n	80124be <_dtoa_r+0x5de>
 80123f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80123fa:	2000      	movs	r0, #0
 80123fc:	4937      	ldr	r1, [pc, #220]	; (80124dc <_dtoa_r+0x5fc>)
 80123fe:	f7ed ff43 	bl	8000288 <__aeabi_dsub>
 8012402:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012406:	f7ee fb69 	bl	8000adc <__aeabi_dcmplt>
 801240a:	2800      	cmp	r0, #0
 801240c:	f040 80b7 	bne.w	801257e <_dtoa_r+0x69e>
 8012410:	eba5 030b 	sub.w	r3, r5, fp
 8012414:	429f      	cmp	r7, r3
 8012416:	f77f af7c 	ble.w	8012312 <_dtoa_r+0x432>
 801241a:	2200      	movs	r2, #0
 801241c:	4b30      	ldr	r3, [pc, #192]	; (80124e0 <_dtoa_r+0x600>)
 801241e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012422:	f7ee f8e9 	bl	80005f8 <__aeabi_dmul>
 8012426:	2200      	movs	r2, #0
 8012428:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801242c:	4b2c      	ldr	r3, [pc, #176]	; (80124e0 <_dtoa_r+0x600>)
 801242e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012432:	f7ee f8e1 	bl	80005f8 <__aeabi_dmul>
 8012436:	e9cd 0100 	strd	r0, r1, [sp]
 801243a:	e7c4      	b.n	80123c6 <_dtoa_r+0x4e6>
 801243c:	462a      	mov	r2, r5
 801243e:	4633      	mov	r3, r6
 8012440:	f7ee f8da 	bl	80005f8 <__aeabi_dmul>
 8012444:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012448:	eb0b 0507 	add.w	r5, fp, r7
 801244c:	465e      	mov	r6, fp
 801244e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012452:	f7ee fb81 	bl	8000b58 <__aeabi_d2iz>
 8012456:	4607      	mov	r7, r0
 8012458:	f7ee f864 	bl	8000524 <__aeabi_i2d>
 801245c:	3730      	adds	r7, #48	; 0x30
 801245e:	4602      	mov	r2, r0
 8012460:	460b      	mov	r3, r1
 8012462:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012466:	f7ed ff0f 	bl	8000288 <__aeabi_dsub>
 801246a:	f806 7b01 	strb.w	r7, [r6], #1
 801246e:	42ae      	cmp	r6, r5
 8012470:	e9cd 0100 	strd	r0, r1, [sp]
 8012474:	f04f 0200 	mov.w	r2, #0
 8012478:	d126      	bne.n	80124c8 <_dtoa_r+0x5e8>
 801247a:	4b1c      	ldr	r3, [pc, #112]	; (80124ec <_dtoa_r+0x60c>)
 801247c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012480:	f7ed ff04 	bl	800028c <__adddf3>
 8012484:	4602      	mov	r2, r0
 8012486:	460b      	mov	r3, r1
 8012488:	e9dd 0100 	ldrd	r0, r1, [sp]
 801248c:	f7ee fb44 	bl	8000b18 <__aeabi_dcmpgt>
 8012490:	2800      	cmp	r0, #0
 8012492:	d174      	bne.n	801257e <_dtoa_r+0x69e>
 8012494:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012498:	2000      	movs	r0, #0
 801249a:	4914      	ldr	r1, [pc, #80]	; (80124ec <_dtoa_r+0x60c>)
 801249c:	f7ed fef4 	bl	8000288 <__aeabi_dsub>
 80124a0:	4602      	mov	r2, r0
 80124a2:	460b      	mov	r3, r1
 80124a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80124a8:	f7ee fb18 	bl	8000adc <__aeabi_dcmplt>
 80124ac:	2800      	cmp	r0, #0
 80124ae:	f43f af30 	beq.w	8012312 <_dtoa_r+0x432>
 80124b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80124b6:	2b30      	cmp	r3, #48	; 0x30
 80124b8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80124bc:	d002      	beq.n	80124c4 <_dtoa_r+0x5e4>
 80124be:	f8dd a020 	ldr.w	sl, [sp, #32]
 80124c2:	e04a      	b.n	801255a <_dtoa_r+0x67a>
 80124c4:	4615      	mov	r5, r2
 80124c6:	e7f4      	b.n	80124b2 <_dtoa_r+0x5d2>
 80124c8:	4b05      	ldr	r3, [pc, #20]	; (80124e0 <_dtoa_r+0x600>)
 80124ca:	f7ee f895 	bl	80005f8 <__aeabi_dmul>
 80124ce:	e9cd 0100 	strd	r0, r1, [sp]
 80124d2:	e7bc      	b.n	801244e <_dtoa_r+0x56e>
 80124d4:	080167d8 	.word	0x080167d8
 80124d8:	080167b0 	.word	0x080167b0
 80124dc:	3ff00000 	.word	0x3ff00000
 80124e0:	40240000 	.word	0x40240000
 80124e4:	401c0000 	.word	0x401c0000
 80124e8:	40140000 	.word	0x40140000
 80124ec:	3fe00000 	.word	0x3fe00000
 80124f0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80124f4:	465d      	mov	r5, fp
 80124f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80124fa:	4630      	mov	r0, r6
 80124fc:	4639      	mov	r1, r7
 80124fe:	f7ee f9a5 	bl	800084c <__aeabi_ddiv>
 8012502:	f7ee fb29 	bl	8000b58 <__aeabi_d2iz>
 8012506:	4680      	mov	r8, r0
 8012508:	f7ee f80c 	bl	8000524 <__aeabi_i2d>
 801250c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012510:	f7ee f872 	bl	80005f8 <__aeabi_dmul>
 8012514:	4602      	mov	r2, r0
 8012516:	460b      	mov	r3, r1
 8012518:	4630      	mov	r0, r6
 801251a:	4639      	mov	r1, r7
 801251c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8012520:	f7ed feb2 	bl	8000288 <__aeabi_dsub>
 8012524:	f805 6b01 	strb.w	r6, [r5], #1
 8012528:	eba5 060b 	sub.w	r6, r5, fp
 801252c:	45b1      	cmp	r9, r6
 801252e:	4602      	mov	r2, r0
 8012530:	460b      	mov	r3, r1
 8012532:	d139      	bne.n	80125a8 <_dtoa_r+0x6c8>
 8012534:	f7ed feaa 	bl	800028c <__adddf3>
 8012538:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801253c:	4606      	mov	r6, r0
 801253e:	460f      	mov	r7, r1
 8012540:	f7ee faea 	bl	8000b18 <__aeabi_dcmpgt>
 8012544:	b9c8      	cbnz	r0, 801257a <_dtoa_r+0x69a>
 8012546:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801254a:	4630      	mov	r0, r6
 801254c:	4639      	mov	r1, r7
 801254e:	f7ee fabb 	bl	8000ac8 <__aeabi_dcmpeq>
 8012552:	b110      	cbz	r0, 801255a <_dtoa_r+0x67a>
 8012554:	f018 0f01 	tst.w	r8, #1
 8012558:	d10f      	bne.n	801257a <_dtoa_r+0x69a>
 801255a:	9904      	ldr	r1, [sp, #16]
 801255c:	4620      	mov	r0, r4
 801255e:	f000 ffd9 	bl	8013514 <_Bfree>
 8012562:	2300      	movs	r3, #0
 8012564:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012566:	702b      	strb	r3, [r5, #0]
 8012568:	f10a 0301 	add.w	r3, sl, #1
 801256c:	6013      	str	r3, [r2, #0]
 801256e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012570:	2b00      	cmp	r3, #0
 8012572:	f000 8241 	beq.w	80129f8 <_dtoa_r+0xb18>
 8012576:	601d      	str	r5, [r3, #0]
 8012578:	e23e      	b.n	80129f8 <_dtoa_r+0xb18>
 801257a:	f8cd a020 	str.w	sl, [sp, #32]
 801257e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012582:	2a39      	cmp	r2, #57	; 0x39
 8012584:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8012588:	d108      	bne.n	801259c <_dtoa_r+0x6bc>
 801258a:	459b      	cmp	fp, r3
 801258c:	d10a      	bne.n	80125a4 <_dtoa_r+0x6c4>
 801258e:	9b08      	ldr	r3, [sp, #32]
 8012590:	3301      	adds	r3, #1
 8012592:	9308      	str	r3, [sp, #32]
 8012594:	2330      	movs	r3, #48	; 0x30
 8012596:	f88b 3000 	strb.w	r3, [fp]
 801259a:	465b      	mov	r3, fp
 801259c:	781a      	ldrb	r2, [r3, #0]
 801259e:	3201      	adds	r2, #1
 80125a0:	701a      	strb	r2, [r3, #0]
 80125a2:	e78c      	b.n	80124be <_dtoa_r+0x5de>
 80125a4:	461d      	mov	r5, r3
 80125a6:	e7ea      	b.n	801257e <_dtoa_r+0x69e>
 80125a8:	2200      	movs	r2, #0
 80125aa:	4b9b      	ldr	r3, [pc, #620]	; (8012818 <_dtoa_r+0x938>)
 80125ac:	f7ee f824 	bl	80005f8 <__aeabi_dmul>
 80125b0:	2200      	movs	r2, #0
 80125b2:	2300      	movs	r3, #0
 80125b4:	4606      	mov	r6, r0
 80125b6:	460f      	mov	r7, r1
 80125b8:	f7ee fa86 	bl	8000ac8 <__aeabi_dcmpeq>
 80125bc:	2800      	cmp	r0, #0
 80125be:	d09a      	beq.n	80124f6 <_dtoa_r+0x616>
 80125c0:	e7cb      	b.n	801255a <_dtoa_r+0x67a>
 80125c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80125c4:	2a00      	cmp	r2, #0
 80125c6:	f000 808b 	beq.w	80126e0 <_dtoa_r+0x800>
 80125ca:	9a06      	ldr	r2, [sp, #24]
 80125cc:	2a01      	cmp	r2, #1
 80125ce:	dc6e      	bgt.n	80126ae <_dtoa_r+0x7ce>
 80125d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80125d2:	2a00      	cmp	r2, #0
 80125d4:	d067      	beq.n	80126a6 <_dtoa_r+0x7c6>
 80125d6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80125da:	9f07      	ldr	r7, [sp, #28]
 80125dc:	9d05      	ldr	r5, [sp, #20]
 80125de:	9a05      	ldr	r2, [sp, #20]
 80125e0:	2101      	movs	r1, #1
 80125e2:	441a      	add	r2, r3
 80125e4:	4620      	mov	r0, r4
 80125e6:	9205      	str	r2, [sp, #20]
 80125e8:	4498      	add	r8, r3
 80125ea:	f001 f871 	bl	80136d0 <__i2b>
 80125ee:	4606      	mov	r6, r0
 80125f0:	2d00      	cmp	r5, #0
 80125f2:	dd0c      	ble.n	801260e <_dtoa_r+0x72e>
 80125f4:	f1b8 0f00 	cmp.w	r8, #0
 80125f8:	dd09      	ble.n	801260e <_dtoa_r+0x72e>
 80125fa:	4545      	cmp	r5, r8
 80125fc:	9a05      	ldr	r2, [sp, #20]
 80125fe:	462b      	mov	r3, r5
 8012600:	bfa8      	it	ge
 8012602:	4643      	movge	r3, r8
 8012604:	1ad2      	subs	r2, r2, r3
 8012606:	9205      	str	r2, [sp, #20]
 8012608:	1aed      	subs	r5, r5, r3
 801260a:	eba8 0803 	sub.w	r8, r8, r3
 801260e:	9b07      	ldr	r3, [sp, #28]
 8012610:	b1eb      	cbz	r3, 801264e <_dtoa_r+0x76e>
 8012612:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012614:	2b00      	cmp	r3, #0
 8012616:	d067      	beq.n	80126e8 <_dtoa_r+0x808>
 8012618:	b18f      	cbz	r7, 801263e <_dtoa_r+0x75e>
 801261a:	4631      	mov	r1, r6
 801261c:	463a      	mov	r2, r7
 801261e:	4620      	mov	r0, r4
 8012620:	f001 f8f6 	bl	8013810 <__pow5mult>
 8012624:	9a04      	ldr	r2, [sp, #16]
 8012626:	4601      	mov	r1, r0
 8012628:	4606      	mov	r6, r0
 801262a:	4620      	mov	r0, r4
 801262c:	f001 f859 	bl	80136e2 <__multiply>
 8012630:	9904      	ldr	r1, [sp, #16]
 8012632:	9008      	str	r0, [sp, #32]
 8012634:	4620      	mov	r0, r4
 8012636:	f000 ff6d 	bl	8013514 <_Bfree>
 801263a:	9b08      	ldr	r3, [sp, #32]
 801263c:	9304      	str	r3, [sp, #16]
 801263e:	9b07      	ldr	r3, [sp, #28]
 8012640:	1bda      	subs	r2, r3, r7
 8012642:	d004      	beq.n	801264e <_dtoa_r+0x76e>
 8012644:	9904      	ldr	r1, [sp, #16]
 8012646:	4620      	mov	r0, r4
 8012648:	f001 f8e2 	bl	8013810 <__pow5mult>
 801264c:	9004      	str	r0, [sp, #16]
 801264e:	2101      	movs	r1, #1
 8012650:	4620      	mov	r0, r4
 8012652:	f001 f83d 	bl	80136d0 <__i2b>
 8012656:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012658:	4607      	mov	r7, r0
 801265a:	2b00      	cmp	r3, #0
 801265c:	f000 81d0 	beq.w	8012a00 <_dtoa_r+0xb20>
 8012660:	461a      	mov	r2, r3
 8012662:	4601      	mov	r1, r0
 8012664:	4620      	mov	r0, r4
 8012666:	f001 f8d3 	bl	8013810 <__pow5mult>
 801266a:	9b06      	ldr	r3, [sp, #24]
 801266c:	2b01      	cmp	r3, #1
 801266e:	4607      	mov	r7, r0
 8012670:	dc40      	bgt.n	80126f4 <_dtoa_r+0x814>
 8012672:	9b00      	ldr	r3, [sp, #0]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d139      	bne.n	80126ec <_dtoa_r+0x80c>
 8012678:	9b01      	ldr	r3, [sp, #4]
 801267a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801267e:	2b00      	cmp	r3, #0
 8012680:	d136      	bne.n	80126f0 <_dtoa_r+0x810>
 8012682:	9b01      	ldr	r3, [sp, #4]
 8012684:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012688:	0d1b      	lsrs	r3, r3, #20
 801268a:	051b      	lsls	r3, r3, #20
 801268c:	b12b      	cbz	r3, 801269a <_dtoa_r+0x7ba>
 801268e:	9b05      	ldr	r3, [sp, #20]
 8012690:	3301      	adds	r3, #1
 8012692:	9305      	str	r3, [sp, #20]
 8012694:	f108 0801 	add.w	r8, r8, #1
 8012698:	2301      	movs	r3, #1
 801269a:	9307      	str	r3, [sp, #28]
 801269c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d12a      	bne.n	80126f8 <_dtoa_r+0x818>
 80126a2:	2001      	movs	r0, #1
 80126a4:	e030      	b.n	8012708 <_dtoa_r+0x828>
 80126a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80126a8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80126ac:	e795      	b.n	80125da <_dtoa_r+0x6fa>
 80126ae:	9b07      	ldr	r3, [sp, #28]
 80126b0:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 80126b4:	42bb      	cmp	r3, r7
 80126b6:	bfbf      	itttt	lt
 80126b8:	9b07      	ldrlt	r3, [sp, #28]
 80126ba:	9707      	strlt	r7, [sp, #28]
 80126bc:	1afa      	sublt	r2, r7, r3
 80126be:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80126c0:	bfbb      	ittet	lt
 80126c2:	189b      	addlt	r3, r3, r2
 80126c4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80126c6:	1bdf      	subge	r7, r3, r7
 80126c8:	2700      	movlt	r7, #0
 80126ca:	f1b9 0f00 	cmp.w	r9, #0
 80126ce:	bfb5      	itete	lt
 80126d0:	9b05      	ldrlt	r3, [sp, #20]
 80126d2:	9d05      	ldrge	r5, [sp, #20]
 80126d4:	eba3 0509 	sublt.w	r5, r3, r9
 80126d8:	464b      	movge	r3, r9
 80126da:	bfb8      	it	lt
 80126dc:	2300      	movlt	r3, #0
 80126de:	e77e      	b.n	80125de <_dtoa_r+0x6fe>
 80126e0:	9f07      	ldr	r7, [sp, #28]
 80126e2:	9d05      	ldr	r5, [sp, #20]
 80126e4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80126e6:	e783      	b.n	80125f0 <_dtoa_r+0x710>
 80126e8:	9a07      	ldr	r2, [sp, #28]
 80126ea:	e7ab      	b.n	8012644 <_dtoa_r+0x764>
 80126ec:	2300      	movs	r3, #0
 80126ee:	e7d4      	b.n	801269a <_dtoa_r+0x7ba>
 80126f0:	9b00      	ldr	r3, [sp, #0]
 80126f2:	e7d2      	b.n	801269a <_dtoa_r+0x7ba>
 80126f4:	2300      	movs	r3, #0
 80126f6:	9307      	str	r3, [sp, #28]
 80126f8:	693b      	ldr	r3, [r7, #16]
 80126fa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80126fe:	6918      	ldr	r0, [r3, #16]
 8012700:	f000 ff98 	bl	8013634 <__hi0bits>
 8012704:	f1c0 0020 	rsb	r0, r0, #32
 8012708:	4440      	add	r0, r8
 801270a:	f010 001f 	ands.w	r0, r0, #31
 801270e:	d047      	beq.n	80127a0 <_dtoa_r+0x8c0>
 8012710:	f1c0 0320 	rsb	r3, r0, #32
 8012714:	2b04      	cmp	r3, #4
 8012716:	dd3b      	ble.n	8012790 <_dtoa_r+0x8b0>
 8012718:	9b05      	ldr	r3, [sp, #20]
 801271a:	f1c0 001c 	rsb	r0, r0, #28
 801271e:	4403      	add	r3, r0
 8012720:	9305      	str	r3, [sp, #20]
 8012722:	4405      	add	r5, r0
 8012724:	4480      	add	r8, r0
 8012726:	9b05      	ldr	r3, [sp, #20]
 8012728:	2b00      	cmp	r3, #0
 801272a:	dd05      	ble.n	8012738 <_dtoa_r+0x858>
 801272c:	461a      	mov	r2, r3
 801272e:	9904      	ldr	r1, [sp, #16]
 8012730:	4620      	mov	r0, r4
 8012732:	f001 f8bb 	bl	80138ac <__lshift>
 8012736:	9004      	str	r0, [sp, #16]
 8012738:	f1b8 0f00 	cmp.w	r8, #0
 801273c:	dd05      	ble.n	801274a <_dtoa_r+0x86a>
 801273e:	4639      	mov	r1, r7
 8012740:	4642      	mov	r2, r8
 8012742:	4620      	mov	r0, r4
 8012744:	f001 f8b2 	bl	80138ac <__lshift>
 8012748:	4607      	mov	r7, r0
 801274a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801274c:	b353      	cbz	r3, 80127a4 <_dtoa_r+0x8c4>
 801274e:	4639      	mov	r1, r7
 8012750:	9804      	ldr	r0, [sp, #16]
 8012752:	f001 f8ff 	bl	8013954 <__mcmp>
 8012756:	2800      	cmp	r0, #0
 8012758:	da24      	bge.n	80127a4 <_dtoa_r+0x8c4>
 801275a:	2300      	movs	r3, #0
 801275c:	220a      	movs	r2, #10
 801275e:	9904      	ldr	r1, [sp, #16]
 8012760:	4620      	mov	r0, r4
 8012762:	f000 feee 	bl	8013542 <__multadd>
 8012766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012768:	9004      	str	r0, [sp, #16]
 801276a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801276e:	2b00      	cmp	r3, #0
 8012770:	f000 814d 	beq.w	8012a0e <_dtoa_r+0xb2e>
 8012774:	2300      	movs	r3, #0
 8012776:	4631      	mov	r1, r6
 8012778:	220a      	movs	r2, #10
 801277a:	4620      	mov	r0, r4
 801277c:	f000 fee1 	bl	8013542 <__multadd>
 8012780:	9b02      	ldr	r3, [sp, #8]
 8012782:	2b00      	cmp	r3, #0
 8012784:	4606      	mov	r6, r0
 8012786:	dc4f      	bgt.n	8012828 <_dtoa_r+0x948>
 8012788:	9b06      	ldr	r3, [sp, #24]
 801278a:	2b02      	cmp	r3, #2
 801278c:	dd4c      	ble.n	8012828 <_dtoa_r+0x948>
 801278e:	e011      	b.n	80127b4 <_dtoa_r+0x8d4>
 8012790:	d0c9      	beq.n	8012726 <_dtoa_r+0x846>
 8012792:	9a05      	ldr	r2, [sp, #20]
 8012794:	331c      	adds	r3, #28
 8012796:	441a      	add	r2, r3
 8012798:	9205      	str	r2, [sp, #20]
 801279a:	441d      	add	r5, r3
 801279c:	4498      	add	r8, r3
 801279e:	e7c2      	b.n	8012726 <_dtoa_r+0x846>
 80127a0:	4603      	mov	r3, r0
 80127a2:	e7f6      	b.n	8012792 <_dtoa_r+0x8b2>
 80127a4:	f1b9 0f00 	cmp.w	r9, #0
 80127a8:	dc38      	bgt.n	801281c <_dtoa_r+0x93c>
 80127aa:	9b06      	ldr	r3, [sp, #24]
 80127ac:	2b02      	cmp	r3, #2
 80127ae:	dd35      	ble.n	801281c <_dtoa_r+0x93c>
 80127b0:	f8cd 9008 	str.w	r9, [sp, #8]
 80127b4:	9b02      	ldr	r3, [sp, #8]
 80127b6:	b963      	cbnz	r3, 80127d2 <_dtoa_r+0x8f2>
 80127b8:	4639      	mov	r1, r7
 80127ba:	2205      	movs	r2, #5
 80127bc:	4620      	mov	r0, r4
 80127be:	f000 fec0 	bl	8013542 <__multadd>
 80127c2:	4601      	mov	r1, r0
 80127c4:	4607      	mov	r7, r0
 80127c6:	9804      	ldr	r0, [sp, #16]
 80127c8:	f001 f8c4 	bl	8013954 <__mcmp>
 80127cc:	2800      	cmp	r0, #0
 80127ce:	f73f adcc 	bgt.w	801236a <_dtoa_r+0x48a>
 80127d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80127d4:	465d      	mov	r5, fp
 80127d6:	ea6f 0a03 	mvn.w	sl, r3
 80127da:	f04f 0900 	mov.w	r9, #0
 80127de:	4639      	mov	r1, r7
 80127e0:	4620      	mov	r0, r4
 80127e2:	f000 fe97 	bl	8013514 <_Bfree>
 80127e6:	2e00      	cmp	r6, #0
 80127e8:	f43f aeb7 	beq.w	801255a <_dtoa_r+0x67a>
 80127ec:	f1b9 0f00 	cmp.w	r9, #0
 80127f0:	d005      	beq.n	80127fe <_dtoa_r+0x91e>
 80127f2:	45b1      	cmp	r9, r6
 80127f4:	d003      	beq.n	80127fe <_dtoa_r+0x91e>
 80127f6:	4649      	mov	r1, r9
 80127f8:	4620      	mov	r0, r4
 80127fa:	f000 fe8b 	bl	8013514 <_Bfree>
 80127fe:	4631      	mov	r1, r6
 8012800:	4620      	mov	r0, r4
 8012802:	f000 fe87 	bl	8013514 <_Bfree>
 8012806:	e6a8      	b.n	801255a <_dtoa_r+0x67a>
 8012808:	2700      	movs	r7, #0
 801280a:	463e      	mov	r6, r7
 801280c:	e7e1      	b.n	80127d2 <_dtoa_r+0x8f2>
 801280e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012812:	463e      	mov	r6, r7
 8012814:	e5a9      	b.n	801236a <_dtoa_r+0x48a>
 8012816:	bf00      	nop
 8012818:	40240000 	.word	0x40240000
 801281c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801281e:	f8cd 9008 	str.w	r9, [sp, #8]
 8012822:	2b00      	cmp	r3, #0
 8012824:	f000 80fa 	beq.w	8012a1c <_dtoa_r+0xb3c>
 8012828:	2d00      	cmp	r5, #0
 801282a:	dd05      	ble.n	8012838 <_dtoa_r+0x958>
 801282c:	4631      	mov	r1, r6
 801282e:	462a      	mov	r2, r5
 8012830:	4620      	mov	r0, r4
 8012832:	f001 f83b 	bl	80138ac <__lshift>
 8012836:	4606      	mov	r6, r0
 8012838:	9b07      	ldr	r3, [sp, #28]
 801283a:	2b00      	cmp	r3, #0
 801283c:	d04c      	beq.n	80128d8 <_dtoa_r+0x9f8>
 801283e:	6871      	ldr	r1, [r6, #4]
 8012840:	4620      	mov	r0, r4
 8012842:	f000 fe33 	bl	80134ac <_Balloc>
 8012846:	6932      	ldr	r2, [r6, #16]
 8012848:	3202      	adds	r2, #2
 801284a:	4605      	mov	r5, r0
 801284c:	0092      	lsls	r2, r2, #2
 801284e:	f106 010c 	add.w	r1, r6, #12
 8012852:	300c      	adds	r0, #12
 8012854:	f7fd fe70 	bl	8010538 <memcpy>
 8012858:	2201      	movs	r2, #1
 801285a:	4629      	mov	r1, r5
 801285c:	4620      	mov	r0, r4
 801285e:	f001 f825 	bl	80138ac <__lshift>
 8012862:	9b00      	ldr	r3, [sp, #0]
 8012864:	f8cd b014 	str.w	fp, [sp, #20]
 8012868:	f003 0301 	and.w	r3, r3, #1
 801286c:	46b1      	mov	r9, r6
 801286e:	9307      	str	r3, [sp, #28]
 8012870:	4606      	mov	r6, r0
 8012872:	4639      	mov	r1, r7
 8012874:	9804      	ldr	r0, [sp, #16]
 8012876:	f7ff faa7 	bl	8011dc8 <quorem>
 801287a:	4649      	mov	r1, r9
 801287c:	4605      	mov	r5, r0
 801287e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012882:	9804      	ldr	r0, [sp, #16]
 8012884:	f001 f866 	bl	8013954 <__mcmp>
 8012888:	4632      	mov	r2, r6
 801288a:	9000      	str	r0, [sp, #0]
 801288c:	4639      	mov	r1, r7
 801288e:	4620      	mov	r0, r4
 8012890:	f001 f87a 	bl	8013988 <__mdiff>
 8012894:	68c3      	ldr	r3, [r0, #12]
 8012896:	4602      	mov	r2, r0
 8012898:	bb03      	cbnz	r3, 80128dc <_dtoa_r+0x9fc>
 801289a:	4601      	mov	r1, r0
 801289c:	9008      	str	r0, [sp, #32]
 801289e:	9804      	ldr	r0, [sp, #16]
 80128a0:	f001 f858 	bl	8013954 <__mcmp>
 80128a4:	9a08      	ldr	r2, [sp, #32]
 80128a6:	4603      	mov	r3, r0
 80128a8:	4611      	mov	r1, r2
 80128aa:	4620      	mov	r0, r4
 80128ac:	9308      	str	r3, [sp, #32]
 80128ae:	f000 fe31 	bl	8013514 <_Bfree>
 80128b2:	9b08      	ldr	r3, [sp, #32]
 80128b4:	b9a3      	cbnz	r3, 80128e0 <_dtoa_r+0xa00>
 80128b6:	9a06      	ldr	r2, [sp, #24]
 80128b8:	b992      	cbnz	r2, 80128e0 <_dtoa_r+0xa00>
 80128ba:	9a07      	ldr	r2, [sp, #28]
 80128bc:	b982      	cbnz	r2, 80128e0 <_dtoa_r+0xa00>
 80128be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80128c2:	d029      	beq.n	8012918 <_dtoa_r+0xa38>
 80128c4:	9b00      	ldr	r3, [sp, #0]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	dd01      	ble.n	80128ce <_dtoa_r+0x9ee>
 80128ca:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80128ce:	9b05      	ldr	r3, [sp, #20]
 80128d0:	1c5d      	adds	r5, r3, #1
 80128d2:	f883 8000 	strb.w	r8, [r3]
 80128d6:	e782      	b.n	80127de <_dtoa_r+0x8fe>
 80128d8:	4630      	mov	r0, r6
 80128da:	e7c2      	b.n	8012862 <_dtoa_r+0x982>
 80128dc:	2301      	movs	r3, #1
 80128de:	e7e3      	b.n	80128a8 <_dtoa_r+0x9c8>
 80128e0:	9a00      	ldr	r2, [sp, #0]
 80128e2:	2a00      	cmp	r2, #0
 80128e4:	db04      	blt.n	80128f0 <_dtoa_r+0xa10>
 80128e6:	d125      	bne.n	8012934 <_dtoa_r+0xa54>
 80128e8:	9a06      	ldr	r2, [sp, #24]
 80128ea:	bb1a      	cbnz	r2, 8012934 <_dtoa_r+0xa54>
 80128ec:	9a07      	ldr	r2, [sp, #28]
 80128ee:	bb0a      	cbnz	r2, 8012934 <_dtoa_r+0xa54>
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	ddec      	ble.n	80128ce <_dtoa_r+0x9ee>
 80128f4:	2201      	movs	r2, #1
 80128f6:	9904      	ldr	r1, [sp, #16]
 80128f8:	4620      	mov	r0, r4
 80128fa:	f000 ffd7 	bl	80138ac <__lshift>
 80128fe:	4639      	mov	r1, r7
 8012900:	9004      	str	r0, [sp, #16]
 8012902:	f001 f827 	bl	8013954 <__mcmp>
 8012906:	2800      	cmp	r0, #0
 8012908:	dc03      	bgt.n	8012912 <_dtoa_r+0xa32>
 801290a:	d1e0      	bne.n	80128ce <_dtoa_r+0x9ee>
 801290c:	f018 0f01 	tst.w	r8, #1
 8012910:	d0dd      	beq.n	80128ce <_dtoa_r+0x9ee>
 8012912:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012916:	d1d8      	bne.n	80128ca <_dtoa_r+0x9ea>
 8012918:	9b05      	ldr	r3, [sp, #20]
 801291a:	9a05      	ldr	r2, [sp, #20]
 801291c:	1c5d      	adds	r5, r3, #1
 801291e:	2339      	movs	r3, #57	; 0x39
 8012920:	7013      	strb	r3, [r2, #0]
 8012922:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012926:	2b39      	cmp	r3, #57	; 0x39
 8012928:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 801292c:	d04f      	beq.n	80129ce <_dtoa_r+0xaee>
 801292e:	3301      	adds	r3, #1
 8012930:	7013      	strb	r3, [r2, #0]
 8012932:	e754      	b.n	80127de <_dtoa_r+0x8fe>
 8012934:	9a05      	ldr	r2, [sp, #20]
 8012936:	2b00      	cmp	r3, #0
 8012938:	f102 0501 	add.w	r5, r2, #1
 801293c:	dd06      	ble.n	801294c <_dtoa_r+0xa6c>
 801293e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012942:	d0e9      	beq.n	8012918 <_dtoa_r+0xa38>
 8012944:	f108 0801 	add.w	r8, r8, #1
 8012948:	9b05      	ldr	r3, [sp, #20]
 801294a:	e7c2      	b.n	80128d2 <_dtoa_r+0x9f2>
 801294c:	9a02      	ldr	r2, [sp, #8]
 801294e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8012952:	eba5 030b 	sub.w	r3, r5, fp
 8012956:	4293      	cmp	r3, r2
 8012958:	d021      	beq.n	801299e <_dtoa_r+0xabe>
 801295a:	2300      	movs	r3, #0
 801295c:	220a      	movs	r2, #10
 801295e:	9904      	ldr	r1, [sp, #16]
 8012960:	4620      	mov	r0, r4
 8012962:	f000 fdee 	bl	8013542 <__multadd>
 8012966:	45b1      	cmp	r9, r6
 8012968:	9004      	str	r0, [sp, #16]
 801296a:	f04f 0300 	mov.w	r3, #0
 801296e:	f04f 020a 	mov.w	r2, #10
 8012972:	4649      	mov	r1, r9
 8012974:	4620      	mov	r0, r4
 8012976:	d105      	bne.n	8012984 <_dtoa_r+0xaa4>
 8012978:	f000 fde3 	bl	8013542 <__multadd>
 801297c:	4681      	mov	r9, r0
 801297e:	4606      	mov	r6, r0
 8012980:	9505      	str	r5, [sp, #20]
 8012982:	e776      	b.n	8012872 <_dtoa_r+0x992>
 8012984:	f000 fddd 	bl	8013542 <__multadd>
 8012988:	4631      	mov	r1, r6
 801298a:	4681      	mov	r9, r0
 801298c:	2300      	movs	r3, #0
 801298e:	220a      	movs	r2, #10
 8012990:	4620      	mov	r0, r4
 8012992:	f000 fdd6 	bl	8013542 <__multadd>
 8012996:	4606      	mov	r6, r0
 8012998:	e7f2      	b.n	8012980 <_dtoa_r+0xaa0>
 801299a:	f04f 0900 	mov.w	r9, #0
 801299e:	2201      	movs	r2, #1
 80129a0:	9904      	ldr	r1, [sp, #16]
 80129a2:	4620      	mov	r0, r4
 80129a4:	f000 ff82 	bl	80138ac <__lshift>
 80129a8:	4639      	mov	r1, r7
 80129aa:	9004      	str	r0, [sp, #16]
 80129ac:	f000 ffd2 	bl	8013954 <__mcmp>
 80129b0:	2800      	cmp	r0, #0
 80129b2:	dcb6      	bgt.n	8012922 <_dtoa_r+0xa42>
 80129b4:	d102      	bne.n	80129bc <_dtoa_r+0xadc>
 80129b6:	f018 0f01 	tst.w	r8, #1
 80129ba:	d1b2      	bne.n	8012922 <_dtoa_r+0xa42>
 80129bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80129c0:	2b30      	cmp	r3, #48	; 0x30
 80129c2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80129c6:	f47f af0a 	bne.w	80127de <_dtoa_r+0x8fe>
 80129ca:	4615      	mov	r5, r2
 80129cc:	e7f6      	b.n	80129bc <_dtoa_r+0xadc>
 80129ce:	4593      	cmp	fp, r2
 80129d0:	d105      	bne.n	80129de <_dtoa_r+0xafe>
 80129d2:	2331      	movs	r3, #49	; 0x31
 80129d4:	f10a 0a01 	add.w	sl, sl, #1
 80129d8:	f88b 3000 	strb.w	r3, [fp]
 80129dc:	e6ff      	b.n	80127de <_dtoa_r+0x8fe>
 80129de:	4615      	mov	r5, r2
 80129e0:	e79f      	b.n	8012922 <_dtoa_r+0xa42>
 80129e2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8012a48 <_dtoa_r+0xb68>
 80129e6:	e007      	b.n	80129f8 <_dtoa_r+0xb18>
 80129e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80129ea:	f8df b060 	ldr.w	fp, [pc, #96]	; 8012a4c <_dtoa_r+0xb6c>
 80129ee:	b11b      	cbz	r3, 80129f8 <_dtoa_r+0xb18>
 80129f0:	f10b 0308 	add.w	r3, fp, #8
 80129f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80129f6:	6013      	str	r3, [r2, #0]
 80129f8:	4658      	mov	r0, fp
 80129fa:	b017      	add	sp, #92	; 0x5c
 80129fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a00:	9b06      	ldr	r3, [sp, #24]
 8012a02:	2b01      	cmp	r3, #1
 8012a04:	f77f ae35 	ble.w	8012672 <_dtoa_r+0x792>
 8012a08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012a0a:	9307      	str	r3, [sp, #28]
 8012a0c:	e649      	b.n	80126a2 <_dtoa_r+0x7c2>
 8012a0e:	9b02      	ldr	r3, [sp, #8]
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	dc03      	bgt.n	8012a1c <_dtoa_r+0xb3c>
 8012a14:	9b06      	ldr	r3, [sp, #24]
 8012a16:	2b02      	cmp	r3, #2
 8012a18:	f73f aecc 	bgt.w	80127b4 <_dtoa_r+0x8d4>
 8012a1c:	465d      	mov	r5, fp
 8012a1e:	4639      	mov	r1, r7
 8012a20:	9804      	ldr	r0, [sp, #16]
 8012a22:	f7ff f9d1 	bl	8011dc8 <quorem>
 8012a26:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012a2a:	f805 8b01 	strb.w	r8, [r5], #1
 8012a2e:	9a02      	ldr	r2, [sp, #8]
 8012a30:	eba5 030b 	sub.w	r3, r5, fp
 8012a34:	429a      	cmp	r2, r3
 8012a36:	ddb0      	ble.n	801299a <_dtoa_r+0xaba>
 8012a38:	2300      	movs	r3, #0
 8012a3a:	220a      	movs	r2, #10
 8012a3c:	9904      	ldr	r1, [sp, #16]
 8012a3e:	4620      	mov	r0, r4
 8012a40:	f000 fd7f 	bl	8013542 <__multadd>
 8012a44:	9004      	str	r0, [sp, #16]
 8012a46:	e7ea      	b.n	8012a1e <_dtoa_r+0xb3e>
 8012a48:	080166b8 	.word	0x080166b8
 8012a4c:	08016730 	.word	0x08016730

08012a50 <__sflush_r>:
 8012a50:	898a      	ldrh	r2, [r1, #12]
 8012a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a56:	4605      	mov	r5, r0
 8012a58:	0710      	lsls	r0, r2, #28
 8012a5a:	460c      	mov	r4, r1
 8012a5c:	d458      	bmi.n	8012b10 <__sflush_r+0xc0>
 8012a5e:	684b      	ldr	r3, [r1, #4]
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	dc05      	bgt.n	8012a70 <__sflush_r+0x20>
 8012a64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	dc02      	bgt.n	8012a70 <__sflush_r+0x20>
 8012a6a:	2000      	movs	r0, #0
 8012a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012a70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012a72:	2e00      	cmp	r6, #0
 8012a74:	d0f9      	beq.n	8012a6a <__sflush_r+0x1a>
 8012a76:	2300      	movs	r3, #0
 8012a78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012a7c:	682f      	ldr	r7, [r5, #0]
 8012a7e:	6a21      	ldr	r1, [r4, #32]
 8012a80:	602b      	str	r3, [r5, #0]
 8012a82:	d032      	beq.n	8012aea <__sflush_r+0x9a>
 8012a84:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012a86:	89a3      	ldrh	r3, [r4, #12]
 8012a88:	075a      	lsls	r2, r3, #29
 8012a8a:	d505      	bpl.n	8012a98 <__sflush_r+0x48>
 8012a8c:	6863      	ldr	r3, [r4, #4]
 8012a8e:	1ac0      	subs	r0, r0, r3
 8012a90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012a92:	b10b      	cbz	r3, 8012a98 <__sflush_r+0x48>
 8012a94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012a96:	1ac0      	subs	r0, r0, r3
 8012a98:	2300      	movs	r3, #0
 8012a9a:	4602      	mov	r2, r0
 8012a9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012a9e:	6a21      	ldr	r1, [r4, #32]
 8012aa0:	4628      	mov	r0, r5
 8012aa2:	47b0      	blx	r6
 8012aa4:	1c43      	adds	r3, r0, #1
 8012aa6:	89a3      	ldrh	r3, [r4, #12]
 8012aa8:	d106      	bne.n	8012ab8 <__sflush_r+0x68>
 8012aaa:	6829      	ldr	r1, [r5, #0]
 8012aac:	291d      	cmp	r1, #29
 8012aae:	d848      	bhi.n	8012b42 <__sflush_r+0xf2>
 8012ab0:	4a29      	ldr	r2, [pc, #164]	; (8012b58 <__sflush_r+0x108>)
 8012ab2:	40ca      	lsrs	r2, r1
 8012ab4:	07d6      	lsls	r6, r2, #31
 8012ab6:	d544      	bpl.n	8012b42 <__sflush_r+0xf2>
 8012ab8:	2200      	movs	r2, #0
 8012aba:	6062      	str	r2, [r4, #4]
 8012abc:	04d9      	lsls	r1, r3, #19
 8012abe:	6922      	ldr	r2, [r4, #16]
 8012ac0:	6022      	str	r2, [r4, #0]
 8012ac2:	d504      	bpl.n	8012ace <__sflush_r+0x7e>
 8012ac4:	1c42      	adds	r2, r0, #1
 8012ac6:	d101      	bne.n	8012acc <__sflush_r+0x7c>
 8012ac8:	682b      	ldr	r3, [r5, #0]
 8012aca:	b903      	cbnz	r3, 8012ace <__sflush_r+0x7e>
 8012acc:	6560      	str	r0, [r4, #84]	; 0x54
 8012ace:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012ad0:	602f      	str	r7, [r5, #0]
 8012ad2:	2900      	cmp	r1, #0
 8012ad4:	d0c9      	beq.n	8012a6a <__sflush_r+0x1a>
 8012ad6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012ada:	4299      	cmp	r1, r3
 8012adc:	d002      	beq.n	8012ae4 <__sflush_r+0x94>
 8012ade:	4628      	mov	r0, r5
 8012ae0:	f001 f8f2 	bl	8013cc8 <_free_r>
 8012ae4:	2000      	movs	r0, #0
 8012ae6:	6360      	str	r0, [r4, #52]	; 0x34
 8012ae8:	e7c0      	b.n	8012a6c <__sflush_r+0x1c>
 8012aea:	2301      	movs	r3, #1
 8012aec:	4628      	mov	r0, r5
 8012aee:	47b0      	blx	r6
 8012af0:	1c41      	adds	r1, r0, #1
 8012af2:	d1c8      	bne.n	8012a86 <__sflush_r+0x36>
 8012af4:	682b      	ldr	r3, [r5, #0]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d0c5      	beq.n	8012a86 <__sflush_r+0x36>
 8012afa:	2b1d      	cmp	r3, #29
 8012afc:	d001      	beq.n	8012b02 <__sflush_r+0xb2>
 8012afe:	2b16      	cmp	r3, #22
 8012b00:	d101      	bne.n	8012b06 <__sflush_r+0xb6>
 8012b02:	602f      	str	r7, [r5, #0]
 8012b04:	e7b1      	b.n	8012a6a <__sflush_r+0x1a>
 8012b06:	89a3      	ldrh	r3, [r4, #12]
 8012b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b0c:	81a3      	strh	r3, [r4, #12]
 8012b0e:	e7ad      	b.n	8012a6c <__sflush_r+0x1c>
 8012b10:	690f      	ldr	r7, [r1, #16]
 8012b12:	2f00      	cmp	r7, #0
 8012b14:	d0a9      	beq.n	8012a6a <__sflush_r+0x1a>
 8012b16:	0793      	lsls	r3, r2, #30
 8012b18:	680e      	ldr	r6, [r1, #0]
 8012b1a:	bf08      	it	eq
 8012b1c:	694b      	ldreq	r3, [r1, #20]
 8012b1e:	600f      	str	r7, [r1, #0]
 8012b20:	bf18      	it	ne
 8012b22:	2300      	movne	r3, #0
 8012b24:	eba6 0807 	sub.w	r8, r6, r7
 8012b28:	608b      	str	r3, [r1, #8]
 8012b2a:	f1b8 0f00 	cmp.w	r8, #0
 8012b2e:	dd9c      	ble.n	8012a6a <__sflush_r+0x1a>
 8012b30:	4643      	mov	r3, r8
 8012b32:	463a      	mov	r2, r7
 8012b34:	6a21      	ldr	r1, [r4, #32]
 8012b36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012b38:	4628      	mov	r0, r5
 8012b3a:	47b0      	blx	r6
 8012b3c:	2800      	cmp	r0, #0
 8012b3e:	dc06      	bgt.n	8012b4e <__sflush_r+0xfe>
 8012b40:	89a3      	ldrh	r3, [r4, #12]
 8012b42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b46:	81a3      	strh	r3, [r4, #12]
 8012b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012b4c:	e78e      	b.n	8012a6c <__sflush_r+0x1c>
 8012b4e:	4407      	add	r7, r0
 8012b50:	eba8 0800 	sub.w	r8, r8, r0
 8012b54:	e7e9      	b.n	8012b2a <__sflush_r+0xda>
 8012b56:	bf00      	nop
 8012b58:	20400001 	.word	0x20400001

08012b5c <_fflush_r>:
 8012b5c:	b538      	push	{r3, r4, r5, lr}
 8012b5e:	690b      	ldr	r3, [r1, #16]
 8012b60:	4605      	mov	r5, r0
 8012b62:	460c      	mov	r4, r1
 8012b64:	b1db      	cbz	r3, 8012b9e <_fflush_r+0x42>
 8012b66:	b118      	cbz	r0, 8012b70 <_fflush_r+0x14>
 8012b68:	6983      	ldr	r3, [r0, #24]
 8012b6a:	b90b      	cbnz	r3, 8012b70 <_fflush_r+0x14>
 8012b6c:	f000 f860 	bl	8012c30 <__sinit>
 8012b70:	4b0c      	ldr	r3, [pc, #48]	; (8012ba4 <_fflush_r+0x48>)
 8012b72:	429c      	cmp	r4, r3
 8012b74:	d109      	bne.n	8012b8a <_fflush_r+0x2e>
 8012b76:	686c      	ldr	r4, [r5, #4]
 8012b78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b7c:	b17b      	cbz	r3, 8012b9e <_fflush_r+0x42>
 8012b7e:	4621      	mov	r1, r4
 8012b80:	4628      	mov	r0, r5
 8012b82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b86:	f7ff bf63 	b.w	8012a50 <__sflush_r>
 8012b8a:	4b07      	ldr	r3, [pc, #28]	; (8012ba8 <_fflush_r+0x4c>)
 8012b8c:	429c      	cmp	r4, r3
 8012b8e:	d101      	bne.n	8012b94 <_fflush_r+0x38>
 8012b90:	68ac      	ldr	r4, [r5, #8]
 8012b92:	e7f1      	b.n	8012b78 <_fflush_r+0x1c>
 8012b94:	4b05      	ldr	r3, [pc, #20]	; (8012bac <_fflush_r+0x50>)
 8012b96:	429c      	cmp	r4, r3
 8012b98:	bf08      	it	eq
 8012b9a:	68ec      	ldreq	r4, [r5, #12]
 8012b9c:	e7ec      	b.n	8012b78 <_fflush_r+0x1c>
 8012b9e:	2000      	movs	r0, #0
 8012ba0:	bd38      	pop	{r3, r4, r5, pc}
 8012ba2:	bf00      	nop
 8012ba4:	08016760 	.word	0x08016760
 8012ba8:	08016780 	.word	0x08016780
 8012bac:	08016740 	.word	0x08016740

08012bb0 <std>:
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	b510      	push	{r4, lr}
 8012bb4:	4604      	mov	r4, r0
 8012bb6:	e9c0 3300 	strd	r3, r3, [r0]
 8012bba:	6083      	str	r3, [r0, #8]
 8012bbc:	8181      	strh	r1, [r0, #12]
 8012bbe:	6643      	str	r3, [r0, #100]	; 0x64
 8012bc0:	81c2      	strh	r2, [r0, #14]
 8012bc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012bc6:	6183      	str	r3, [r0, #24]
 8012bc8:	4619      	mov	r1, r3
 8012bca:	2208      	movs	r2, #8
 8012bcc:	305c      	adds	r0, #92	; 0x5c
 8012bce:	f7fd fcbe 	bl	801054e <memset>
 8012bd2:	4b05      	ldr	r3, [pc, #20]	; (8012be8 <std+0x38>)
 8012bd4:	6263      	str	r3, [r4, #36]	; 0x24
 8012bd6:	4b05      	ldr	r3, [pc, #20]	; (8012bec <std+0x3c>)
 8012bd8:	62a3      	str	r3, [r4, #40]	; 0x28
 8012bda:	4b05      	ldr	r3, [pc, #20]	; (8012bf0 <std+0x40>)
 8012bdc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012bde:	4b05      	ldr	r3, [pc, #20]	; (8012bf4 <std+0x44>)
 8012be0:	6224      	str	r4, [r4, #32]
 8012be2:	6323      	str	r3, [r4, #48]	; 0x30
 8012be4:	bd10      	pop	{r4, pc}
 8012be6:	bf00      	nop
 8012be8:	08014369 	.word	0x08014369
 8012bec:	0801438b 	.word	0x0801438b
 8012bf0:	080143c3 	.word	0x080143c3
 8012bf4:	080143e7 	.word	0x080143e7

08012bf8 <_cleanup_r>:
 8012bf8:	4901      	ldr	r1, [pc, #4]	; (8012c00 <_cleanup_r+0x8>)
 8012bfa:	f000 b885 	b.w	8012d08 <_fwalk_reent>
 8012bfe:	bf00      	nop
 8012c00:	08012b5d 	.word	0x08012b5d

08012c04 <__sfmoreglue>:
 8012c04:	b570      	push	{r4, r5, r6, lr}
 8012c06:	1e4a      	subs	r2, r1, #1
 8012c08:	2568      	movs	r5, #104	; 0x68
 8012c0a:	4355      	muls	r5, r2
 8012c0c:	460e      	mov	r6, r1
 8012c0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012c12:	f001 f8a7 	bl	8013d64 <_malloc_r>
 8012c16:	4604      	mov	r4, r0
 8012c18:	b140      	cbz	r0, 8012c2c <__sfmoreglue+0x28>
 8012c1a:	2100      	movs	r1, #0
 8012c1c:	e9c0 1600 	strd	r1, r6, [r0]
 8012c20:	300c      	adds	r0, #12
 8012c22:	60a0      	str	r0, [r4, #8]
 8012c24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012c28:	f7fd fc91 	bl	801054e <memset>
 8012c2c:	4620      	mov	r0, r4
 8012c2e:	bd70      	pop	{r4, r5, r6, pc}

08012c30 <__sinit>:
 8012c30:	6983      	ldr	r3, [r0, #24]
 8012c32:	b510      	push	{r4, lr}
 8012c34:	4604      	mov	r4, r0
 8012c36:	bb33      	cbnz	r3, 8012c86 <__sinit+0x56>
 8012c38:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8012c3c:	6503      	str	r3, [r0, #80]	; 0x50
 8012c3e:	4b12      	ldr	r3, [pc, #72]	; (8012c88 <__sinit+0x58>)
 8012c40:	4a12      	ldr	r2, [pc, #72]	; (8012c8c <__sinit+0x5c>)
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	6282      	str	r2, [r0, #40]	; 0x28
 8012c46:	4298      	cmp	r0, r3
 8012c48:	bf04      	itt	eq
 8012c4a:	2301      	moveq	r3, #1
 8012c4c:	6183      	streq	r3, [r0, #24]
 8012c4e:	f000 f81f 	bl	8012c90 <__sfp>
 8012c52:	6060      	str	r0, [r4, #4]
 8012c54:	4620      	mov	r0, r4
 8012c56:	f000 f81b 	bl	8012c90 <__sfp>
 8012c5a:	60a0      	str	r0, [r4, #8]
 8012c5c:	4620      	mov	r0, r4
 8012c5e:	f000 f817 	bl	8012c90 <__sfp>
 8012c62:	2200      	movs	r2, #0
 8012c64:	60e0      	str	r0, [r4, #12]
 8012c66:	2104      	movs	r1, #4
 8012c68:	6860      	ldr	r0, [r4, #4]
 8012c6a:	f7ff ffa1 	bl	8012bb0 <std>
 8012c6e:	2201      	movs	r2, #1
 8012c70:	2109      	movs	r1, #9
 8012c72:	68a0      	ldr	r0, [r4, #8]
 8012c74:	f7ff ff9c 	bl	8012bb0 <std>
 8012c78:	2202      	movs	r2, #2
 8012c7a:	2112      	movs	r1, #18
 8012c7c:	68e0      	ldr	r0, [r4, #12]
 8012c7e:	f7ff ff97 	bl	8012bb0 <std>
 8012c82:	2301      	movs	r3, #1
 8012c84:	61a3      	str	r3, [r4, #24]
 8012c86:	bd10      	pop	{r4, pc}
 8012c88:	080166a4 	.word	0x080166a4
 8012c8c:	08012bf9 	.word	0x08012bf9

08012c90 <__sfp>:
 8012c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c92:	4b1b      	ldr	r3, [pc, #108]	; (8012d00 <__sfp+0x70>)
 8012c94:	681e      	ldr	r6, [r3, #0]
 8012c96:	69b3      	ldr	r3, [r6, #24]
 8012c98:	4607      	mov	r7, r0
 8012c9a:	b913      	cbnz	r3, 8012ca2 <__sfp+0x12>
 8012c9c:	4630      	mov	r0, r6
 8012c9e:	f7ff ffc7 	bl	8012c30 <__sinit>
 8012ca2:	3648      	adds	r6, #72	; 0x48
 8012ca4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012ca8:	3b01      	subs	r3, #1
 8012caa:	d503      	bpl.n	8012cb4 <__sfp+0x24>
 8012cac:	6833      	ldr	r3, [r6, #0]
 8012cae:	b133      	cbz	r3, 8012cbe <__sfp+0x2e>
 8012cb0:	6836      	ldr	r6, [r6, #0]
 8012cb2:	e7f7      	b.n	8012ca4 <__sfp+0x14>
 8012cb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012cb8:	b16d      	cbz	r5, 8012cd6 <__sfp+0x46>
 8012cba:	3468      	adds	r4, #104	; 0x68
 8012cbc:	e7f4      	b.n	8012ca8 <__sfp+0x18>
 8012cbe:	2104      	movs	r1, #4
 8012cc0:	4638      	mov	r0, r7
 8012cc2:	f7ff ff9f 	bl	8012c04 <__sfmoreglue>
 8012cc6:	6030      	str	r0, [r6, #0]
 8012cc8:	2800      	cmp	r0, #0
 8012cca:	d1f1      	bne.n	8012cb0 <__sfp+0x20>
 8012ccc:	230c      	movs	r3, #12
 8012cce:	603b      	str	r3, [r7, #0]
 8012cd0:	4604      	mov	r4, r0
 8012cd2:	4620      	mov	r0, r4
 8012cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012cd6:	4b0b      	ldr	r3, [pc, #44]	; (8012d04 <__sfp+0x74>)
 8012cd8:	6665      	str	r5, [r4, #100]	; 0x64
 8012cda:	e9c4 5500 	strd	r5, r5, [r4]
 8012cde:	60a5      	str	r5, [r4, #8]
 8012ce0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8012ce4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8012ce8:	2208      	movs	r2, #8
 8012cea:	4629      	mov	r1, r5
 8012cec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012cf0:	f7fd fc2d 	bl	801054e <memset>
 8012cf4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012cf8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012cfc:	e7e9      	b.n	8012cd2 <__sfp+0x42>
 8012cfe:	bf00      	nop
 8012d00:	080166a4 	.word	0x080166a4
 8012d04:	ffff0001 	.word	0xffff0001

08012d08 <_fwalk_reent>:
 8012d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d0c:	4680      	mov	r8, r0
 8012d0e:	4689      	mov	r9, r1
 8012d10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012d14:	2600      	movs	r6, #0
 8012d16:	b914      	cbnz	r4, 8012d1e <_fwalk_reent+0x16>
 8012d18:	4630      	mov	r0, r6
 8012d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d1e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8012d22:	3f01      	subs	r7, #1
 8012d24:	d501      	bpl.n	8012d2a <_fwalk_reent+0x22>
 8012d26:	6824      	ldr	r4, [r4, #0]
 8012d28:	e7f5      	b.n	8012d16 <_fwalk_reent+0xe>
 8012d2a:	89ab      	ldrh	r3, [r5, #12]
 8012d2c:	2b01      	cmp	r3, #1
 8012d2e:	d907      	bls.n	8012d40 <_fwalk_reent+0x38>
 8012d30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012d34:	3301      	adds	r3, #1
 8012d36:	d003      	beq.n	8012d40 <_fwalk_reent+0x38>
 8012d38:	4629      	mov	r1, r5
 8012d3a:	4640      	mov	r0, r8
 8012d3c:	47c8      	blx	r9
 8012d3e:	4306      	orrs	r6, r0
 8012d40:	3568      	adds	r5, #104	; 0x68
 8012d42:	e7ee      	b.n	8012d22 <_fwalk_reent+0x1a>

08012d44 <rshift>:
 8012d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012d46:	6906      	ldr	r6, [r0, #16]
 8012d48:	114b      	asrs	r3, r1, #5
 8012d4a:	429e      	cmp	r6, r3
 8012d4c:	f100 0414 	add.w	r4, r0, #20
 8012d50:	dd30      	ble.n	8012db4 <rshift+0x70>
 8012d52:	f011 011f 	ands.w	r1, r1, #31
 8012d56:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8012d5a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8012d5e:	d108      	bne.n	8012d72 <rshift+0x2e>
 8012d60:	4621      	mov	r1, r4
 8012d62:	42b2      	cmp	r2, r6
 8012d64:	460b      	mov	r3, r1
 8012d66:	d211      	bcs.n	8012d8c <rshift+0x48>
 8012d68:	f852 3b04 	ldr.w	r3, [r2], #4
 8012d6c:	f841 3b04 	str.w	r3, [r1], #4
 8012d70:	e7f7      	b.n	8012d62 <rshift+0x1e>
 8012d72:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8012d76:	f1c1 0c20 	rsb	ip, r1, #32
 8012d7a:	40cd      	lsrs	r5, r1
 8012d7c:	3204      	adds	r2, #4
 8012d7e:	4623      	mov	r3, r4
 8012d80:	42b2      	cmp	r2, r6
 8012d82:	4617      	mov	r7, r2
 8012d84:	d30c      	bcc.n	8012da0 <rshift+0x5c>
 8012d86:	601d      	str	r5, [r3, #0]
 8012d88:	b105      	cbz	r5, 8012d8c <rshift+0x48>
 8012d8a:	3304      	adds	r3, #4
 8012d8c:	1b1a      	subs	r2, r3, r4
 8012d8e:	42a3      	cmp	r3, r4
 8012d90:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012d94:	bf08      	it	eq
 8012d96:	2300      	moveq	r3, #0
 8012d98:	6102      	str	r2, [r0, #16]
 8012d9a:	bf08      	it	eq
 8012d9c:	6143      	streq	r3, [r0, #20]
 8012d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012da0:	683f      	ldr	r7, [r7, #0]
 8012da2:	fa07 f70c 	lsl.w	r7, r7, ip
 8012da6:	433d      	orrs	r5, r7
 8012da8:	f843 5b04 	str.w	r5, [r3], #4
 8012dac:	f852 5b04 	ldr.w	r5, [r2], #4
 8012db0:	40cd      	lsrs	r5, r1
 8012db2:	e7e5      	b.n	8012d80 <rshift+0x3c>
 8012db4:	4623      	mov	r3, r4
 8012db6:	e7e9      	b.n	8012d8c <rshift+0x48>

08012db8 <__hexdig_fun>:
 8012db8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012dbc:	2b09      	cmp	r3, #9
 8012dbe:	d802      	bhi.n	8012dc6 <__hexdig_fun+0xe>
 8012dc0:	3820      	subs	r0, #32
 8012dc2:	b2c0      	uxtb	r0, r0
 8012dc4:	4770      	bx	lr
 8012dc6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012dca:	2b05      	cmp	r3, #5
 8012dcc:	d801      	bhi.n	8012dd2 <__hexdig_fun+0x1a>
 8012dce:	3847      	subs	r0, #71	; 0x47
 8012dd0:	e7f7      	b.n	8012dc2 <__hexdig_fun+0xa>
 8012dd2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012dd6:	2b05      	cmp	r3, #5
 8012dd8:	d801      	bhi.n	8012dde <__hexdig_fun+0x26>
 8012dda:	3827      	subs	r0, #39	; 0x27
 8012ddc:	e7f1      	b.n	8012dc2 <__hexdig_fun+0xa>
 8012dde:	2000      	movs	r0, #0
 8012de0:	4770      	bx	lr

08012de2 <__gethex>:
 8012de2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012de6:	b08b      	sub	sp, #44	; 0x2c
 8012de8:	468a      	mov	sl, r1
 8012dea:	9002      	str	r0, [sp, #8]
 8012dec:	9816      	ldr	r0, [sp, #88]	; 0x58
 8012dee:	9306      	str	r3, [sp, #24]
 8012df0:	4690      	mov	r8, r2
 8012df2:	f000 facd 	bl	8013390 <__localeconv_l>
 8012df6:	6803      	ldr	r3, [r0, #0]
 8012df8:	9303      	str	r3, [sp, #12]
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	f7ed f9e8 	bl	80001d0 <strlen>
 8012e00:	9b03      	ldr	r3, [sp, #12]
 8012e02:	9001      	str	r0, [sp, #4]
 8012e04:	4403      	add	r3, r0
 8012e06:	f04f 0b00 	mov.w	fp, #0
 8012e0a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8012e0e:	9307      	str	r3, [sp, #28]
 8012e10:	f8da 3000 	ldr.w	r3, [sl]
 8012e14:	3302      	adds	r3, #2
 8012e16:	461f      	mov	r7, r3
 8012e18:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012e1c:	2830      	cmp	r0, #48	; 0x30
 8012e1e:	d06c      	beq.n	8012efa <__gethex+0x118>
 8012e20:	f7ff ffca 	bl	8012db8 <__hexdig_fun>
 8012e24:	4604      	mov	r4, r0
 8012e26:	2800      	cmp	r0, #0
 8012e28:	d16a      	bne.n	8012f00 <__gethex+0x11e>
 8012e2a:	9a01      	ldr	r2, [sp, #4]
 8012e2c:	9903      	ldr	r1, [sp, #12]
 8012e2e:	4638      	mov	r0, r7
 8012e30:	f001 fadd 	bl	80143ee <strncmp>
 8012e34:	2800      	cmp	r0, #0
 8012e36:	d166      	bne.n	8012f06 <__gethex+0x124>
 8012e38:	9b01      	ldr	r3, [sp, #4]
 8012e3a:	5cf8      	ldrb	r0, [r7, r3]
 8012e3c:	18fe      	adds	r6, r7, r3
 8012e3e:	f7ff ffbb 	bl	8012db8 <__hexdig_fun>
 8012e42:	2800      	cmp	r0, #0
 8012e44:	d062      	beq.n	8012f0c <__gethex+0x12a>
 8012e46:	4633      	mov	r3, r6
 8012e48:	7818      	ldrb	r0, [r3, #0]
 8012e4a:	2830      	cmp	r0, #48	; 0x30
 8012e4c:	461f      	mov	r7, r3
 8012e4e:	f103 0301 	add.w	r3, r3, #1
 8012e52:	d0f9      	beq.n	8012e48 <__gethex+0x66>
 8012e54:	f7ff ffb0 	bl	8012db8 <__hexdig_fun>
 8012e58:	fab0 f580 	clz	r5, r0
 8012e5c:	096d      	lsrs	r5, r5, #5
 8012e5e:	4634      	mov	r4, r6
 8012e60:	f04f 0b01 	mov.w	fp, #1
 8012e64:	463a      	mov	r2, r7
 8012e66:	4616      	mov	r6, r2
 8012e68:	3201      	adds	r2, #1
 8012e6a:	7830      	ldrb	r0, [r6, #0]
 8012e6c:	f7ff ffa4 	bl	8012db8 <__hexdig_fun>
 8012e70:	2800      	cmp	r0, #0
 8012e72:	d1f8      	bne.n	8012e66 <__gethex+0x84>
 8012e74:	9a01      	ldr	r2, [sp, #4]
 8012e76:	9903      	ldr	r1, [sp, #12]
 8012e78:	4630      	mov	r0, r6
 8012e7a:	f001 fab8 	bl	80143ee <strncmp>
 8012e7e:	b950      	cbnz	r0, 8012e96 <__gethex+0xb4>
 8012e80:	b954      	cbnz	r4, 8012e98 <__gethex+0xb6>
 8012e82:	9b01      	ldr	r3, [sp, #4]
 8012e84:	18f4      	adds	r4, r6, r3
 8012e86:	4622      	mov	r2, r4
 8012e88:	4616      	mov	r6, r2
 8012e8a:	3201      	adds	r2, #1
 8012e8c:	7830      	ldrb	r0, [r6, #0]
 8012e8e:	f7ff ff93 	bl	8012db8 <__hexdig_fun>
 8012e92:	2800      	cmp	r0, #0
 8012e94:	d1f8      	bne.n	8012e88 <__gethex+0xa6>
 8012e96:	b10c      	cbz	r4, 8012e9c <__gethex+0xba>
 8012e98:	1ba4      	subs	r4, r4, r6
 8012e9a:	00a4      	lsls	r4, r4, #2
 8012e9c:	7833      	ldrb	r3, [r6, #0]
 8012e9e:	2b50      	cmp	r3, #80	; 0x50
 8012ea0:	d001      	beq.n	8012ea6 <__gethex+0xc4>
 8012ea2:	2b70      	cmp	r3, #112	; 0x70
 8012ea4:	d140      	bne.n	8012f28 <__gethex+0x146>
 8012ea6:	7873      	ldrb	r3, [r6, #1]
 8012ea8:	2b2b      	cmp	r3, #43	; 0x2b
 8012eaa:	d031      	beq.n	8012f10 <__gethex+0x12e>
 8012eac:	2b2d      	cmp	r3, #45	; 0x2d
 8012eae:	d033      	beq.n	8012f18 <__gethex+0x136>
 8012eb0:	1c71      	adds	r1, r6, #1
 8012eb2:	f04f 0900 	mov.w	r9, #0
 8012eb6:	7808      	ldrb	r0, [r1, #0]
 8012eb8:	f7ff ff7e 	bl	8012db8 <__hexdig_fun>
 8012ebc:	1e43      	subs	r3, r0, #1
 8012ebe:	b2db      	uxtb	r3, r3
 8012ec0:	2b18      	cmp	r3, #24
 8012ec2:	d831      	bhi.n	8012f28 <__gethex+0x146>
 8012ec4:	f1a0 0210 	sub.w	r2, r0, #16
 8012ec8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012ecc:	f7ff ff74 	bl	8012db8 <__hexdig_fun>
 8012ed0:	1e43      	subs	r3, r0, #1
 8012ed2:	b2db      	uxtb	r3, r3
 8012ed4:	2b18      	cmp	r3, #24
 8012ed6:	d922      	bls.n	8012f1e <__gethex+0x13c>
 8012ed8:	f1b9 0f00 	cmp.w	r9, #0
 8012edc:	d000      	beq.n	8012ee0 <__gethex+0xfe>
 8012ede:	4252      	negs	r2, r2
 8012ee0:	4414      	add	r4, r2
 8012ee2:	f8ca 1000 	str.w	r1, [sl]
 8012ee6:	b30d      	cbz	r5, 8012f2c <__gethex+0x14a>
 8012ee8:	f1bb 0f00 	cmp.w	fp, #0
 8012eec:	bf0c      	ite	eq
 8012eee:	2706      	moveq	r7, #6
 8012ef0:	2700      	movne	r7, #0
 8012ef2:	4638      	mov	r0, r7
 8012ef4:	b00b      	add	sp, #44	; 0x2c
 8012ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012efa:	f10b 0b01 	add.w	fp, fp, #1
 8012efe:	e78a      	b.n	8012e16 <__gethex+0x34>
 8012f00:	2500      	movs	r5, #0
 8012f02:	462c      	mov	r4, r5
 8012f04:	e7ae      	b.n	8012e64 <__gethex+0x82>
 8012f06:	463e      	mov	r6, r7
 8012f08:	2501      	movs	r5, #1
 8012f0a:	e7c7      	b.n	8012e9c <__gethex+0xba>
 8012f0c:	4604      	mov	r4, r0
 8012f0e:	e7fb      	b.n	8012f08 <__gethex+0x126>
 8012f10:	f04f 0900 	mov.w	r9, #0
 8012f14:	1cb1      	adds	r1, r6, #2
 8012f16:	e7ce      	b.n	8012eb6 <__gethex+0xd4>
 8012f18:	f04f 0901 	mov.w	r9, #1
 8012f1c:	e7fa      	b.n	8012f14 <__gethex+0x132>
 8012f1e:	230a      	movs	r3, #10
 8012f20:	fb03 0202 	mla	r2, r3, r2, r0
 8012f24:	3a10      	subs	r2, #16
 8012f26:	e7cf      	b.n	8012ec8 <__gethex+0xe6>
 8012f28:	4631      	mov	r1, r6
 8012f2a:	e7da      	b.n	8012ee2 <__gethex+0x100>
 8012f2c:	1bf3      	subs	r3, r6, r7
 8012f2e:	3b01      	subs	r3, #1
 8012f30:	4629      	mov	r1, r5
 8012f32:	2b07      	cmp	r3, #7
 8012f34:	dc49      	bgt.n	8012fca <__gethex+0x1e8>
 8012f36:	9802      	ldr	r0, [sp, #8]
 8012f38:	f000 fab8 	bl	80134ac <_Balloc>
 8012f3c:	9b01      	ldr	r3, [sp, #4]
 8012f3e:	f100 0914 	add.w	r9, r0, #20
 8012f42:	f04f 0b00 	mov.w	fp, #0
 8012f46:	f1c3 0301 	rsb	r3, r3, #1
 8012f4a:	4605      	mov	r5, r0
 8012f4c:	f8cd 9010 	str.w	r9, [sp, #16]
 8012f50:	46da      	mov	sl, fp
 8012f52:	9308      	str	r3, [sp, #32]
 8012f54:	42b7      	cmp	r7, r6
 8012f56:	d33b      	bcc.n	8012fd0 <__gethex+0x1ee>
 8012f58:	9804      	ldr	r0, [sp, #16]
 8012f5a:	f840 ab04 	str.w	sl, [r0], #4
 8012f5e:	eba0 0009 	sub.w	r0, r0, r9
 8012f62:	1080      	asrs	r0, r0, #2
 8012f64:	6128      	str	r0, [r5, #16]
 8012f66:	0147      	lsls	r7, r0, #5
 8012f68:	4650      	mov	r0, sl
 8012f6a:	f000 fb63 	bl	8013634 <__hi0bits>
 8012f6e:	f8d8 6000 	ldr.w	r6, [r8]
 8012f72:	1a3f      	subs	r7, r7, r0
 8012f74:	42b7      	cmp	r7, r6
 8012f76:	dd64      	ble.n	8013042 <__gethex+0x260>
 8012f78:	1bbf      	subs	r7, r7, r6
 8012f7a:	4639      	mov	r1, r7
 8012f7c:	4628      	mov	r0, r5
 8012f7e:	f000 fe73 	bl	8013c68 <__any_on>
 8012f82:	4682      	mov	sl, r0
 8012f84:	b178      	cbz	r0, 8012fa6 <__gethex+0x1c4>
 8012f86:	1e7b      	subs	r3, r7, #1
 8012f88:	1159      	asrs	r1, r3, #5
 8012f8a:	f003 021f 	and.w	r2, r3, #31
 8012f8e:	f04f 0a01 	mov.w	sl, #1
 8012f92:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012f96:	fa0a f202 	lsl.w	r2, sl, r2
 8012f9a:	420a      	tst	r2, r1
 8012f9c:	d003      	beq.n	8012fa6 <__gethex+0x1c4>
 8012f9e:	4553      	cmp	r3, sl
 8012fa0:	dc46      	bgt.n	8013030 <__gethex+0x24e>
 8012fa2:	f04f 0a02 	mov.w	sl, #2
 8012fa6:	4639      	mov	r1, r7
 8012fa8:	4628      	mov	r0, r5
 8012faa:	f7ff fecb 	bl	8012d44 <rshift>
 8012fae:	443c      	add	r4, r7
 8012fb0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012fb4:	42a3      	cmp	r3, r4
 8012fb6:	da52      	bge.n	801305e <__gethex+0x27c>
 8012fb8:	4629      	mov	r1, r5
 8012fba:	9802      	ldr	r0, [sp, #8]
 8012fbc:	f000 faaa 	bl	8013514 <_Bfree>
 8012fc0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012fc2:	2300      	movs	r3, #0
 8012fc4:	6013      	str	r3, [r2, #0]
 8012fc6:	27a3      	movs	r7, #163	; 0xa3
 8012fc8:	e793      	b.n	8012ef2 <__gethex+0x110>
 8012fca:	3101      	adds	r1, #1
 8012fcc:	105b      	asrs	r3, r3, #1
 8012fce:	e7b0      	b.n	8012f32 <__gethex+0x150>
 8012fd0:	1e73      	subs	r3, r6, #1
 8012fd2:	9305      	str	r3, [sp, #20]
 8012fd4:	9a07      	ldr	r2, [sp, #28]
 8012fd6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012fda:	4293      	cmp	r3, r2
 8012fdc:	d018      	beq.n	8013010 <__gethex+0x22e>
 8012fde:	f1bb 0f20 	cmp.w	fp, #32
 8012fe2:	d107      	bne.n	8012ff4 <__gethex+0x212>
 8012fe4:	9b04      	ldr	r3, [sp, #16]
 8012fe6:	f8c3 a000 	str.w	sl, [r3]
 8012fea:	3304      	adds	r3, #4
 8012fec:	f04f 0a00 	mov.w	sl, #0
 8012ff0:	9304      	str	r3, [sp, #16]
 8012ff2:	46d3      	mov	fp, sl
 8012ff4:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8012ff8:	f7ff fede 	bl	8012db8 <__hexdig_fun>
 8012ffc:	f000 000f 	and.w	r0, r0, #15
 8013000:	fa00 f00b 	lsl.w	r0, r0, fp
 8013004:	ea4a 0a00 	orr.w	sl, sl, r0
 8013008:	f10b 0b04 	add.w	fp, fp, #4
 801300c:	9b05      	ldr	r3, [sp, #20]
 801300e:	e00d      	b.n	801302c <__gethex+0x24a>
 8013010:	9b05      	ldr	r3, [sp, #20]
 8013012:	9a08      	ldr	r2, [sp, #32]
 8013014:	4413      	add	r3, r2
 8013016:	42bb      	cmp	r3, r7
 8013018:	d3e1      	bcc.n	8012fde <__gethex+0x1fc>
 801301a:	4618      	mov	r0, r3
 801301c:	9a01      	ldr	r2, [sp, #4]
 801301e:	9903      	ldr	r1, [sp, #12]
 8013020:	9309      	str	r3, [sp, #36]	; 0x24
 8013022:	f001 f9e4 	bl	80143ee <strncmp>
 8013026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013028:	2800      	cmp	r0, #0
 801302a:	d1d8      	bne.n	8012fde <__gethex+0x1fc>
 801302c:	461e      	mov	r6, r3
 801302e:	e791      	b.n	8012f54 <__gethex+0x172>
 8013030:	1eb9      	subs	r1, r7, #2
 8013032:	4628      	mov	r0, r5
 8013034:	f000 fe18 	bl	8013c68 <__any_on>
 8013038:	2800      	cmp	r0, #0
 801303a:	d0b2      	beq.n	8012fa2 <__gethex+0x1c0>
 801303c:	f04f 0a03 	mov.w	sl, #3
 8013040:	e7b1      	b.n	8012fa6 <__gethex+0x1c4>
 8013042:	da09      	bge.n	8013058 <__gethex+0x276>
 8013044:	1bf7      	subs	r7, r6, r7
 8013046:	4629      	mov	r1, r5
 8013048:	463a      	mov	r2, r7
 801304a:	9802      	ldr	r0, [sp, #8]
 801304c:	f000 fc2e 	bl	80138ac <__lshift>
 8013050:	1be4      	subs	r4, r4, r7
 8013052:	4605      	mov	r5, r0
 8013054:	f100 0914 	add.w	r9, r0, #20
 8013058:	f04f 0a00 	mov.w	sl, #0
 801305c:	e7a8      	b.n	8012fb0 <__gethex+0x1ce>
 801305e:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8013062:	42a0      	cmp	r0, r4
 8013064:	dd6a      	ble.n	801313c <__gethex+0x35a>
 8013066:	1b04      	subs	r4, r0, r4
 8013068:	42a6      	cmp	r6, r4
 801306a:	dc2e      	bgt.n	80130ca <__gethex+0x2e8>
 801306c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013070:	2b02      	cmp	r3, #2
 8013072:	d022      	beq.n	80130ba <__gethex+0x2d8>
 8013074:	2b03      	cmp	r3, #3
 8013076:	d024      	beq.n	80130c2 <__gethex+0x2e0>
 8013078:	2b01      	cmp	r3, #1
 801307a:	d115      	bne.n	80130a8 <__gethex+0x2c6>
 801307c:	42a6      	cmp	r6, r4
 801307e:	d113      	bne.n	80130a8 <__gethex+0x2c6>
 8013080:	2e01      	cmp	r6, #1
 8013082:	dc0b      	bgt.n	801309c <__gethex+0x2ba>
 8013084:	9a06      	ldr	r2, [sp, #24]
 8013086:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801308a:	6013      	str	r3, [r2, #0]
 801308c:	2301      	movs	r3, #1
 801308e:	612b      	str	r3, [r5, #16]
 8013090:	f8c9 3000 	str.w	r3, [r9]
 8013094:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013096:	2762      	movs	r7, #98	; 0x62
 8013098:	601d      	str	r5, [r3, #0]
 801309a:	e72a      	b.n	8012ef2 <__gethex+0x110>
 801309c:	1e71      	subs	r1, r6, #1
 801309e:	4628      	mov	r0, r5
 80130a0:	f000 fde2 	bl	8013c68 <__any_on>
 80130a4:	2800      	cmp	r0, #0
 80130a6:	d1ed      	bne.n	8013084 <__gethex+0x2a2>
 80130a8:	4629      	mov	r1, r5
 80130aa:	9802      	ldr	r0, [sp, #8]
 80130ac:	f000 fa32 	bl	8013514 <_Bfree>
 80130b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80130b2:	2300      	movs	r3, #0
 80130b4:	6013      	str	r3, [r2, #0]
 80130b6:	2750      	movs	r7, #80	; 0x50
 80130b8:	e71b      	b.n	8012ef2 <__gethex+0x110>
 80130ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d0e1      	beq.n	8013084 <__gethex+0x2a2>
 80130c0:	e7f2      	b.n	80130a8 <__gethex+0x2c6>
 80130c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d1dd      	bne.n	8013084 <__gethex+0x2a2>
 80130c8:	e7ee      	b.n	80130a8 <__gethex+0x2c6>
 80130ca:	1e67      	subs	r7, r4, #1
 80130cc:	f1ba 0f00 	cmp.w	sl, #0
 80130d0:	d131      	bne.n	8013136 <__gethex+0x354>
 80130d2:	b127      	cbz	r7, 80130de <__gethex+0x2fc>
 80130d4:	4639      	mov	r1, r7
 80130d6:	4628      	mov	r0, r5
 80130d8:	f000 fdc6 	bl	8013c68 <__any_on>
 80130dc:	4682      	mov	sl, r0
 80130de:	117a      	asrs	r2, r7, #5
 80130e0:	2301      	movs	r3, #1
 80130e2:	f007 071f 	and.w	r7, r7, #31
 80130e6:	fa03 f707 	lsl.w	r7, r3, r7
 80130ea:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80130ee:	4621      	mov	r1, r4
 80130f0:	421f      	tst	r7, r3
 80130f2:	4628      	mov	r0, r5
 80130f4:	bf18      	it	ne
 80130f6:	f04a 0a02 	orrne.w	sl, sl, #2
 80130fa:	1b36      	subs	r6, r6, r4
 80130fc:	f7ff fe22 	bl	8012d44 <rshift>
 8013100:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8013104:	2702      	movs	r7, #2
 8013106:	f1ba 0f00 	cmp.w	sl, #0
 801310a:	d048      	beq.n	801319e <__gethex+0x3bc>
 801310c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013110:	2b02      	cmp	r3, #2
 8013112:	d015      	beq.n	8013140 <__gethex+0x35e>
 8013114:	2b03      	cmp	r3, #3
 8013116:	d017      	beq.n	8013148 <__gethex+0x366>
 8013118:	2b01      	cmp	r3, #1
 801311a:	d109      	bne.n	8013130 <__gethex+0x34e>
 801311c:	f01a 0f02 	tst.w	sl, #2
 8013120:	d006      	beq.n	8013130 <__gethex+0x34e>
 8013122:	f8d9 3000 	ldr.w	r3, [r9]
 8013126:	ea4a 0a03 	orr.w	sl, sl, r3
 801312a:	f01a 0f01 	tst.w	sl, #1
 801312e:	d10e      	bne.n	801314e <__gethex+0x36c>
 8013130:	f047 0710 	orr.w	r7, r7, #16
 8013134:	e033      	b.n	801319e <__gethex+0x3bc>
 8013136:	f04f 0a01 	mov.w	sl, #1
 801313a:	e7d0      	b.n	80130de <__gethex+0x2fc>
 801313c:	2701      	movs	r7, #1
 801313e:	e7e2      	b.n	8013106 <__gethex+0x324>
 8013140:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013142:	f1c3 0301 	rsb	r3, r3, #1
 8013146:	9315      	str	r3, [sp, #84]	; 0x54
 8013148:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801314a:	2b00      	cmp	r3, #0
 801314c:	d0f0      	beq.n	8013130 <__gethex+0x34e>
 801314e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8013152:	f105 0314 	add.w	r3, r5, #20
 8013156:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801315a:	eb03 010a 	add.w	r1, r3, sl
 801315e:	f04f 0c00 	mov.w	ip, #0
 8013162:	4618      	mov	r0, r3
 8013164:	f853 2b04 	ldr.w	r2, [r3], #4
 8013168:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 801316c:	d01c      	beq.n	80131a8 <__gethex+0x3c6>
 801316e:	3201      	adds	r2, #1
 8013170:	6002      	str	r2, [r0, #0]
 8013172:	2f02      	cmp	r7, #2
 8013174:	f105 0314 	add.w	r3, r5, #20
 8013178:	d138      	bne.n	80131ec <__gethex+0x40a>
 801317a:	f8d8 2000 	ldr.w	r2, [r8]
 801317e:	3a01      	subs	r2, #1
 8013180:	42b2      	cmp	r2, r6
 8013182:	d10a      	bne.n	801319a <__gethex+0x3b8>
 8013184:	1171      	asrs	r1, r6, #5
 8013186:	2201      	movs	r2, #1
 8013188:	f006 061f 	and.w	r6, r6, #31
 801318c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013190:	fa02 f606 	lsl.w	r6, r2, r6
 8013194:	421e      	tst	r6, r3
 8013196:	bf18      	it	ne
 8013198:	4617      	movne	r7, r2
 801319a:	f047 0720 	orr.w	r7, r7, #32
 801319e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80131a0:	601d      	str	r5, [r3, #0]
 80131a2:	9b06      	ldr	r3, [sp, #24]
 80131a4:	601c      	str	r4, [r3, #0]
 80131a6:	e6a4      	b.n	8012ef2 <__gethex+0x110>
 80131a8:	4299      	cmp	r1, r3
 80131aa:	f843 cc04 	str.w	ip, [r3, #-4]
 80131ae:	d8d8      	bhi.n	8013162 <__gethex+0x380>
 80131b0:	68ab      	ldr	r3, [r5, #8]
 80131b2:	4599      	cmp	r9, r3
 80131b4:	db12      	blt.n	80131dc <__gethex+0x3fa>
 80131b6:	6869      	ldr	r1, [r5, #4]
 80131b8:	9802      	ldr	r0, [sp, #8]
 80131ba:	3101      	adds	r1, #1
 80131bc:	f000 f976 	bl	80134ac <_Balloc>
 80131c0:	692a      	ldr	r2, [r5, #16]
 80131c2:	3202      	adds	r2, #2
 80131c4:	f105 010c 	add.w	r1, r5, #12
 80131c8:	4683      	mov	fp, r0
 80131ca:	0092      	lsls	r2, r2, #2
 80131cc:	300c      	adds	r0, #12
 80131ce:	f7fd f9b3 	bl	8010538 <memcpy>
 80131d2:	4629      	mov	r1, r5
 80131d4:	9802      	ldr	r0, [sp, #8]
 80131d6:	f000 f99d 	bl	8013514 <_Bfree>
 80131da:	465d      	mov	r5, fp
 80131dc:	692b      	ldr	r3, [r5, #16]
 80131de:	1c5a      	adds	r2, r3, #1
 80131e0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80131e4:	612a      	str	r2, [r5, #16]
 80131e6:	2201      	movs	r2, #1
 80131e8:	615a      	str	r2, [r3, #20]
 80131ea:	e7c2      	b.n	8013172 <__gethex+0x390>
 80131ec:	692a      	ldr	r2, [r5, #16]
 80131ee:	454a      	cmp	r2, r9
 80131f0:	dd0b      	ble.n	801320a <__gethex+0x428>
 80131f2:	2101      	movs	r1, #1
 80131f4:	4628      	mov	r0, r5
 80131f6:	f7ff fda5 	bl	8012d44 <rshift>
 80131fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80131fe:	3401      	adds	r4, #1
 8013200:	42a3      	cmp	r3, r4
 8013202:	f6ff aed9 	blt.w	8012fb8 <__gethex+0x1d6>
 8013206:	2701      	movs	r7, #1
 8013208:	e7c7      	b.n	801319a <__gethex+0x3b8>
 801320a:	f016 061f 	ands.w	r6, r6, #31
 801320e:	d0fa      	beq.n	8013206 <__gethex+0x424>
 8013210:	449a      	add	sl, r3
 8013212:	f1c6 0620 	rsb	r6, r6, #32
 8013216:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801321a:	f000 fa0b 	bl	8013634 <__hi0bits>
 801321e:	42b0      	cmp	r0, r6
 8013220:	dbe7      	blt.n	80131f2 <__gethex+0x410>
 8013222:	e7f0      	b.n	8013206 <__gethex+0x424>

08013224 <L_shift>:
 8013224:	f1c2 0208 	rsb	r2, r2, #8
 8013228:	0092      	lsls	r2, r2, #2
 801322a:	b570      	push	{r4, r5, r6, lr}
 801322c:	f1c2 0620 	rsb	r6, r2, #32
 8013230:	6843      	ldr	r3, [r0, #4]
 8013232:	6804      	ldr	r4, [r0, #0]
 8013234:	fa03 f506 	lsl.w	r5, r3, r6
 8013238:	432c      	orrs	r4, r5
 801323a:	40d3      	lsrs	r3, r2
 801323c:	6004      	str	r4, [r0, #0]
 801323e:	f840 3f04 	str.w	r3, [r0, #4]!
 8013242:	4288      	cmp	r0, r1
 8013244:	d3f4      	bcc.n	8013230 <L_shift+0xc>
 8013246:	bd70      	pop	{r4, r5, r6, pc}

08013248 <__match>:
 8013248:	b530      	push	{r4, r5, lr}
 801324a:	6803      	ldr	r3, [r0, #0]
 801324c:	3301      	adds	r3, #1
 801324e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013252:	b914      	cbnz	r4, 801325a <__match+0x12>
 8013254:	6003      	str	r3, [r0, #0]
 8013256:	2001      	movs	r0, #1
 8013258:	bd30      	pop	{r4, r5, pc}
 801325a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801325e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8013262:	2d19      	cmp	r5, #25
 8013264:	bf98      	it	ls
 8013266:	3220      	addls	r2, #32
 8013268:	42a2      	cmp	r2, r4
 801326a:	d0f0      	beq.n	801324e <__match+0x6>
 801326c:	2000      	movs	r0, #0
 801326e:	e7f3      	b.n	8013258 <__match+0x10>

08013270 <__hexnan>:
 8013270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013274:	680b      	ldr	r3, [r1, #0]
 8013276:	6801      	ldr	r1, [r0, #0]
 8013278:	115f      	asrs	r7, r3, #5
 801327a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801327e:	f013 031f 	ands.w	r3, r3, #31
 8013282:	b087      	sub	sp, #28
 8013284:	bf18      	it	ne
 8013286:	3704      	addne	r7, #4
 8013288:	2500      	movs	r5, #0
 801328a:	1f3e      	subs	r6, r7, #4
 801328c:	4682      	mov	sl, r0
 801328e:	4690      	mov	r8, r2
 8013290:	9301      	str	r3, [sp, #4]
 8013292:	f847 5c04 	str.w	r5, [r7, #-4]
 8013296:	46b1      	mov	r9, r6
 8013298:	4634      	mov	r4, r6
 801329a:	9502      	str	r5, [sp, #8]
 801329c:	46ab      	mov	fp, r5
 801329e:	784a      	ldrb	r2, [r1, #1]
 80132a0:	1c4b      	adds	r3, r1, #1
 80132a2:	9303      	str	r3, [sp, #12]
 80132a4:	b342      	cbz	r2, 80132f8 <__hexnan+0x88>
 80132a6:	4610      	mov	r0, r2
 80132a8:	9105      	str	r1, [sp, #20]
 80132aa:	9204      	str	r2, [sp, #16]
 80132ac:	f7ff fd84 	bl	8012db8 <__hexdig_fun>
 80132b0:	2800      	cmp	r0, #0
 80132b2:	d143      	bne.n	801333c <__hexnan+0xcc>
 80132b4:	9a04      	ldr	r2, [sp, #16]
 80132b6:	9905      	ldr	r1, [sp, #20]
 80132b8:	2a20      	cmp	r2, #32
 80132ba:	d818      	bhi.n	80132ee <__hexnan+0x7e>
 80132bc:	9b02      	ldr	r3, [sp, #8]
 80132be:	459b      	cmp	fp, r3
 80132c0:	dd13      	ble.n	80132ea <__hexnan+0x7a>
 80132c2:	454c      	cmp	r4, r9
 80132c4:	d206      	bcs.n	80132d4 <__hexnan+0x64>
 80132c6:	2d07      	cmp	r5, #7
 80132c8:	dc04      	bgt.n	80132d4 <__hexnan+0x64>
 80132ca:	462a      	mov	r2, r5
 80132cc:	4649      	mov	r1, r9
 80132ce:	4620      	mov	r0, r4
 80132d0:	f7ff ffa8 	bl	8013224 <L_shift>
 80132d4:	4544      	cmp	r4, r8
 80132d6:	d944      	bls.n	8013362 <__hexnan+0xf2>
 80132d8:	2300      	movs	r3, #0
 80132da:	f1a4 0904 	sub.w	r9, r4, #4
 80132de:	f844 3c04 	str.w	r3, [r4, #-4]
 80132e2:	f8cd b008 	str.w	fp, [sp, #8]
 80132e6:	464c      	mov	r4, r9
 80132e8:	461d      	mov	r5, r3
 80132ea:	9903      	ldr	r1, [sp, #12]
 80132ec:	e7d7      	b.n	801329e <__hexnan+0x2e>
 80132ee:	2a29      	cmp	r2, #41	; 0x29
 80132f0:	d14a      	bne.n	8013388 <__hexnan+0x118>
 80132f2:	3102      	adds	r1, #2
 80132f4:	f8ca 1000 	str.w	r1, [sl]
 80132f8:	f1bb 0f00 	cmp.w	fp, #0
 80132fc:	d044      	beq.n	8013388 <__hexnan+0x118>
 80132fe:	454c      	cmp	r4, r9
 8013300:	d206      	bcs.n	8013310 <__hexnan+0xa0>
 8013302:	2d07      	cmp	r5, #7
 8013304:	dc04      	bgt.n	8013310 <__hexnan+0xa0>
 8013306:	462a      	mov	r2, r5
 8013308:	4649      	mov	r1, r9
 801330a:	4620      	mov	r0, r4
 801330c:	f7ff ff8a 	bl	8013224 <L_shift>
 8013310:	4544      	cmp	r4, r8
 8013312:	d928      	bls.n	8013366 <__hexnan+0xf6>
 8013314:	4643      	mov	r3, r8
 8013316:	f854 2b04 	ldr.w	r2, [r4], #4
 801331a:	f843 2b04 	str.w	r2, [r3], #4
 801331e:	42a6      	cmp	r6, r4
 8013320:	d2f9      	bcs.n	8013316 <__hexnan+0xa6>
 8013322:	2200      	movs	r2, #0
 8013324:	f843 2b04 	str.w	r2, [r3], #4
 8013328:	429e      	cmp	r6, r3
 801332a:	d2fb      	bcs.n	8013324 <__hexnan+0xb4>
 801332c:	6833      	ldr	r3, [r6, #0]
 801332e:	b91b      	cbnz	r3, 8013338 <__hexnan+0xc8>
 8013330:	4546      	cmp	r6, r8
 8013332:	d127      	bne.n	8013384 <__hexnan+0x114>
 8013334:	2301      	movs	r3, #1
 8013336:	6033      	str	r3, [r6, #0]
 8013338:	2005      	movs	r0, #5
 801333a:	e026      	b.n	801338a <__hexnan+0x11a>
 801333c:	3501      	adds	r5, #1
 801333e:	2d08      	cmp	r5, #8
 8013340:	f10b 0b01 	add.w	fp, fp, #1
 8013344:	dd06      	ble.n	8013354 <__hexnan+0xe4>
 8013346:	4544      	cmp	r4, r8
 8013348:	d9cf      	bls.n	80132ea <__hexnan+0x7a>
 801334a:	2300      	movs	r3, #0
 801334c:	f844 3c04 	str.w	r3, [r4, #-4]
 8013350:	2501      	movs	r5, #1
 8013352:	3c04      	subs	r4, #4
 8013354:	6822      	ldr	r2, [r4, #0]
 8013356:	f000 000f 	and.w	r0, r0, #15
 801335a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801335e:	6020      	str	r0, [r4, #0]
 8013360:	e7c3      	b.n	80132ea <__hexnan+0x7a>
 8013362:	2508      	movs	r5, #8
 8013364:	e7c1      	b.n	80132ea <__hexnan+0x7a>
 8013366:	9b01      	ldr	r3, [sp, #4]
 8013368:	2b00      	cmp	r3, #0
 801336a:	d0df      	beq.n	801332c <__hexnan+0xbc>
 801336c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013370:	f1c3 0320 	rsb	r3, r3, #32
 8013374:	fa22 f303 	lsr.w	r3, r2, r3
 8013378:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801337c:	401a      	ands	r2, r3
 801337e:	f847 2c04 	str.w	r2, [r7, #-4]
 8013382:	e7d3      	b.n	801332c <__hexnan+0xbc>
 8013384:	3e04      	subs	r6, #4
 8013386:	e7d1      	b.n	801332c <__hexnan+0xbc>
 8013388:	2004      	movs	r0, #4
 801338a:	b007      	add	sp, #28
 801338c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013390 <__localeconv_l>:
 8013390:	30f0      	adds	r0, #240	; 0xf0
 8013392:	4770      	bx	lr

08013394 <_localeconv_r>:
 8013394:	4b04      	ldr	r3, [pc, #16]	; (80133a8 <_localeconv_r+0x14>)
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	6a18      	ldr	r0, [r3, #32]
 801339a:	4b04      	ldr	r3, [pc, #16]	; (80133ac <_localeconv_r+0x18>)
 801339c:	2800      	cmp	r0, #0
 801339e:	bf08      	it	eq
 80133a0:	4618      	moveq	r0, r3
 80133a2:	30f0      	adds	r0, #240	; 0xf0
 80133a4:	4770      	bx	lr
 80133a6:	bf00      	nop
 80133a8:	2000015c 	.word	0x2000015c
 80133ac:	200001c0 	.word	0x200001c0

080133b0 <__swhatbuf_r>:
 80133b0:	b570      	push	{r4, r5, r6, lr}
 80133b2:	460e      	mov	r6, r1
 80133b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80133b8:	2900      	cmp	r1, #0
 80133ba:	b096      	sub	sp, #88	; 0x58
 80133bc:	4614      	mov	r4, r2
 80133be:	461d      	mov	r5, r3
 80133c0:	da07      	bge.n	80133d2 <__swhatbuf_r+0x22>
 80133c2:	2300      	movs	r3, #0
 80133c4:	602b      	str	r3, [r5, #0]
 80133c6:	89b3      	ldrh	r3, [r6, #12]
 80133c8:	061a      	lsls	r2, r3, #24
 80133ca:	d410      	bmi.n	80133ee <__swhatbuf_r+0x3e>
 80133cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80133d0:	e00e      	b.n	80133f0 <__swhatbuf_r+0x40>
 80133d2:	466a      	mov	r2, sp
 80133d4:	f001 f84c 	bl	8014470 <_fstat_r>
 80133d8:	2800      	cmp	r0, #0
 80133da:	dbf2      	blt.n	80133c2 <__swhatbuf_r+0x12>
 80133dc:	9a01      	ldr	r2, [sp, #4]
 80133de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80133e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80133e6:	425a      	negs	r2, r3
 80133e8:	415a      	adcs	r2, r3
 80133ea:	602a      	str	r2, [r5, #0]
 80133ec:	e7ee      	b.n	80133cc <__swhatbuf_r+0x1c>
 80133ee:	2340      	movs	r3, #64	; 0x40
 80133f0:	2000      	movs	r0, #0
 80133f2:	6023      	str	r3, [r4, #0]
 80133f4:	b016      	add	sp, #88	; 0x58
 80133f6:	bd70      	pop	{r4, r5, r6, pc}

080133f8 <__smakebuf_r>:
 80133f8:	898b      	ldrh	r3, [r1, #12]
 80133fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80133fc:	079d      	lsls	r5, r3, #30
 80133fe:	4606      	mov	r6, r0
 8013400:	460c      	mov	r4, r1
 8013402:	d507      	bpl.n	8013414 <__smakebuf_r+0x1c>
 8013404:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013408:	6023      	str	r3, [r4, #0]
 801340a:	6123      	str	r3, [r4, #16]
 801340c:	2301      	movs	r3, #1
 801340e:	6163      	str	r3, [r4, #20]
 8013410:	b002      	add	sp, #8
 8013412:	bd70      	pop	{r4, r5, r6, pc}
 8013414:	ab01      	add	r3, sp, #4
 8013416:	466a      	mov	r2, sp
 8013418:	f7ff ffca 	bl	80133b0 <__swhatbuf_r>
 801341c:	9900      	ldr	r1, [sp, #0]
 801341e:	4605      	mov	r5, r0
 8013420:	4630      	mov	r0, r6
 8013422:	f000 fc9f 	bl	8013d64 <_malloc_r>
 8013426:	b948      	cbnz	r0, 801343c <__smakebuf_r+0x44>
 8013428:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801342c:	059a      	lsls	r2, r3, #22
 801342e:	d4ef      	bmi.n	8013410 <__smakebuf_r+0x18>
 8013430:	f023 0303 	bic.w	r3, r3, #3
 8013434:	f043 0302 	orr.w	r3, r3, #2
 8013438:	81a3      	strh	r3, [r4, #12]
 801343a:	e7e3      	b.n	8013404 <__smakebuf_r+0xc>
 801343c:	4b0d      	ldr	r3, [pc, #52]	; (8013474 <__smakebuf_r+0x7c>)
 801343e:	62b3      	str	r3, [r6, #40]	; 0x28
 8013440:	89a3      	ldrh	r3, [r4, #12]
 8013442:	6020      	str	r0, [r4, #0]
 8013444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013448:	81a3      	strh	r3, [r4, #12]
 801344a:	9b00      	ldr	r3, [sp, #0]
 801344c:	6163      	str	r3, [r4, #20]
 801344e:	9b01      	ldr	r3, [sp, #4]
 8013450:	6120      	str	r0, [r4, #16]
 8013452:	b15b      	cbz	r3, 801346c <__smakebuf_r+0x74>
 8013454:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013458:	4630      	mov	r0, r6
 801345a:	f001 f81b 	bl	8014494 <_isatty_r>
 801345e:	b128      	cbz	r0, 801346c <__smakebuf_r+0x74>
 8013460:	89a3      	ldrh	r3, [r4, #12]
 8013462:	f023 0303 	bic.w	r3, r3, #3
 8013466:	f043 0301 	orr.w	r3, r3, #1
 801346a:	81a3      	strh	r3, [r4, #12]
 801346c:	89a3      	ldrh	r3, [r4, #12]
 801346e:	431d      	orrs	r5, r3
 8013470:	81a5      	strh	r5, [r4, #12]
 8013472:	e7cd      	b.n	8013410 <__smakebuf_r+0x18>
 8013474:	08012bf9 	.word	0x08012bf9

08013478 <malloc>:
 8013478:	4b02      	ldr	r3, [pc, #8]	; (8013484 <malloc+0xc>)
 801347a:	4601      	mov	r1, r0
 801347c:	6818      	ldr	r0, [r3, #0]
 801347e:	f000 bc71 	b.w	8013d64 <_malloc_r>
 8013482:	bf00      	nop
 8013484:	2000015c 	.word	0x2000015c

08013488 <__ascii_mbtowc>:
 8013488:	b082      	sub	sp, #8
 801348a:	b901      	cbnz	r1, 801348e <__ascii_mbtowc+0x6>
 801348c:	a901      	add	r1, sp, #4
 801348e:	b142      	cbz	r2, 80134a2 <__ascii_mbtowc+0x1a>
 8013490:	b14b      	cbz	r3, 80134a6 <__ascii_mbtowc+0x1e>
 8013492:	7813      	ldrb	r3, [r2, #0]
 8013494:	600b      	str	r3, [r1, #0]
 8013496:	7812      	ldrb	r2, [r2, #0]
 8013498:	1c10      	adds	r0, r2, #0
 801349a:	bf18      	it	ne
 801349c:	2001      	movne	r0, #1
 801349e:	b002      	add	sp, #8
 80134a0:	4770      	bx	lr
 80134a2:	4610      	mov	r0, r2
 80134a4:	e7fb      	b.n	801349e <__ascii_mbtowc+0x16>
 80134a6:	f06f 0001 	mvn.w	r0, #1
 80134aa:	e7f8      	b.n	801349e <__ascii_mbtowc+0x16>

080134ac <_Balloc>:
 80134ac:	b570      	push	{r4, r5, r6, lr}
 80134ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80134b0:	4604      	mov	r4, r0
 80134b2:	460e      	mov	r6, r1
 80134b4:	b93d      	cbnz	r5, 80134c6 <_Balloc+0x1a>
 80134b6:	2010      	movs	r0, #16
 80134b8:	f7ff ffde 	bl	8013478 <malloc>
 80134bc:	6260      	str	r0, [r4, #36]	; 0x24
 80134be:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80134c2:	6005      	str	r5, [r0, #0]
 80134c4:	60c5      	str	r5, [r0, #12]
 80134c6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80134c8:	68eb      	ldr	r3, [r5, #12]
 80134ca:	b183      	cbz	r3, 80134ee <_Balloc+0x42>
 80134cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80134ce:	68db      	ldr	r3, [r3, #12]
 80134d0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80134d4:	b9b8      	cbnz	r0, 8013506 <_Balloc+0x5a>
 80134d6:	2101      	movs	r1, #1
 80134d8:	fa01 f506 	lsl.w	r5, r1, r6
 80134dc:	1d6a      	adds	r2, r5, #5
 80134de:	0092      	lsls	r2, r2, #2
 80134e0:	4620      	mov	r0, r4
 80134e2:	f000 fbe2 	bl	8013caa <_calloc_r>
 80134e6:	b160      	cbz	r0, 8013502 <_Balloc+0x56>
 80134e8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80134ec:	e00e      	b.n	801350c <_Balloc+0x60>
 80134ee:	2221      	movs	r2, #33	; 0x21
 80134f0:	2104      	movs	r1, #4
 80134f2:	4620      	mov	r0, r4
 80134f4:	f000 fbd9 	bl	8013caa <_calloc_r>
 80134f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80134fa:	60e8      	str	r0, [r5, #12]
 80134fc:	68db      	ldr	r3, [r3, #12]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d1e4      	bne.n	80134cc <_Balloc+0x20>
 8013502:	2000      	movs	r0, #0
 8013504:	bd70      	pop	{r4, r5, r6, pc}
 8013506:	6802      	ldr	r2, [r0, #0]
 8013508:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801350c:	2300      	movs	r3, #0
 801350e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013512:	e7f7      	b.n	8013504 <_Balloc+0x58>

08013514 <_Bfree>:
 8013514:	b570      	push	{r4, r5, r6, lr}
 8013516:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8013518:	4606      	mov	r6, r0
 801351a:	460d      	mov	r5, r1
 801351c:	b93c      	cbnz	r4, 801352e <_Bfree+0x1a>
 801351e:	2010      	movs	r0, #16
 8013520:	f7ff ffaa 	bl	8013478 <malloc>
 8013524:	6270      	str	r0, [r6, #36]	; 0x24
 8013526:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801352a:	6004      	str	r4, [r0, #0]
 801352c:	60c4      	str	r4, [r0, #12]
 801352e:	b13d      	cbz	r5, 8013540 <_Bfree+0x2c>
 8013530:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013532:	686a      	ldr	r2, [r5, #4]
 8013534:	68db      	ldr	r3, [r3, #12]
 8013536:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801353a:	6029      	str	r1, [r5, #0]
 801353c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8013540:	bd70      	pop	{r4, r5, r6, pc}

08013542 <__multadd>:
 8013542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013546:	690d      	ldr	r5, [r1, #16]
 8013548:	461f      	mov	r7, r3
 801354a:	4606      	mov	r6, r0
 801354c:	460c      	mov	r4, r1
 801354e:	f101 0c14 	add.w	ip, r1, #20
 8013552:	2300      	movs	r3, #0
 8013554:	f8dc 0000 	ldr.w	r0, [ip]
 8013558:	b281      	uxth	r1, r0
 801355a:	fb02 7101 	mla	r1, r2, r1, r7
 801355e:	0c0f      	lsrs	r7, r1, #16
 8013560:	0c00      	lsrs	r0, r0, #16
 8013562:	fb02 7000 	mla	r0, r2, r0, r7
 8013566:	b289      	uxth	r1, r1
 8013568:	3301      	adds	r3, #1
 801356a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801356e:	429d      	cmp	r5, r3
 8013570:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8013574:	f84c 1b04 	str.w	r1, [ip], #4
 8013578:	dcec      	bgt.n	8013554 <__multadd+0x12>
 801357a:	b1d7      	cbz	r7, 80135b2 <__multadd+0x70>
 801357c:	68a3      	ldr	r3, [r4, #8]
 801357e:	42ab      	cmp	r3, r5
 8013580:	dc12      	bgt.n	80135a8 <__multadd+0x66>
 8013582:	6861      	ldr	r1, [r4, #4]
 8013584:	4630      	mov	r0, r6
 8013586:	3101      	adds	r1, #1
 8013588:	f7ff ff90 	bl	80134ac <_Balloc>
 801358c:	6922      	ldr	r2, [r4, #16]
 801358e:	3202      	adds	r2, #2
 8013590:	f104 010c 	add.w	r1, r4, #12
 8013594:	4680      	mov	r8, r0
 8013596:	0092      	lsls	r2, r2, #2
 8013598:	300c      	adds	r0, #12
 801359a:	f7fc ffcd 	bl	8010538 <memcpy>
 801359e:	4621      	mov	r1, r4
 80135a0:	4630      	mov	r0, r6
 80135a2:	f7ff ffb7 	bl	8013514 <_Bfree>
 80135a6:	4644      	mov	r4, r8
 80135a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80135ac:	3501      	adds	r5, #1
 80135ae:	615f      	str	r7, [r3, #20]
 80135b0:	6125      	str	r5, [r4, #16]
 80135b2:	4620      	mov	r0, r4
 80135b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080135b8 <__s2b>:
 80135b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80135bc:	460c      	mov	r4, r1
 80135be:	4615      	mov	r5, r2
 80135c0:	461f      	mov	r7, r3
 80135c2:	2209      	movs	r2, #9
 80135c4:	3308      	adds	r3, #8
 80135c6:	4606      	mov	r6, r0
 80135c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80135cc:	2100      	movs	r1, #0
 80135ce:	2201      	movs	r2, #1
 80135d0:	429a      	cmp	r2, r3
 80135d2:	db20      	blt.n	8013616 <__s2b+0x5e>
 80135d4:	4630      	mov	r0, r6
 80135d6:	f7ff ff69 	bl	80134ac <_Balloc>
 80135da:	9b08      	ldr	r3, [sp, #32]
 80135dc:	6143      	str	r3, [r0, #20]
 80135de:	2d09      	cmp	r5, #9
 80135e0:	f04f 0301 	mov.w	r3, #1
 80135e4:	6103      	str	r3, [r0, #16]
 80135e6:	dd19      	ble.n	801361c <__s2b+0x64>
 80135e8:	f104 0809 	add.w	r8, r4, #9
 80135ec:	46c1      	mov	r9, r8
 80135ee:	442c      	add	r4, r5
 80135f0:	f819 3b01 	ldrb.w	r3, [r9], #1
 80135f4:	4601      	mov	r1, r0
 80135f6:	3b30      	subs	r3, #48	; 0x30
 80135f8:	220a      	movs	r2, #10
 80135fa:	4630      	mov	r0, r6
 80135fc:	f7ff ffa1 	bl	8013542 <__multadd>
 8013600:	45a1      	cmp	r9, r4
 8013602:	d1f5      	bne.n	80135f0 <__s2b+0x38>
 8013604:	eb08 0405 	add.w	r4, r8, r5
 8013608:	3c08      	subs	r4, #8
 801360a:	1b2d      	subs	r5, r5, r4
 801360c:	1963      	adds	r3, r4, r5
 801360e:	42bb      	cmp	r3, r7
 8013610:	db07      	blt.n	8013622 <__s2b+0x6a>
 8013612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013616:	0052      	lsls	r2, r2, #1
 8013618:	3101      	adds	r1, #1
 801361a:	e7d9      	b.n	80135d0 <__s2b+0x18>
 801361c:	340a      	adds	r4, #10
 801361e:	2509      	movs	r5, #9
 8013620:	e7f3      	b.n	801360a <__s2b+0x52>
 8013622:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013626:	4601      	mov	r1, r0
 8013628:	3b30      	subs	r3, #48	; 0x30
 801362a:	220a      	movs	r2, #10
 801362c:	4630      	mov	r0, r6
 801362e:	f7ff ff88 	bl	8013542 <__multadd>
 8013632:	e7eb      	b.n	801360c <__s2b+0x54>

08013634 <__hi0bits>:
 8013634:	0c02      	lsrs	r2, r0, #16
 8013636:	0412      	lsls	r2, r2, #16
 8013638:	4603      	mov	r3, r0
 801363a:	b9b2      	cbnz	r2, 801366a <__hi0bits+0x36>
 801363c:	0403      	lsls	r3, r0, #16
 801363e:	2010      	movs	r0, #16
 8013640:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013644:	bf04      	itt	eq
 8013646:	021b      	lsleq	r3, r3, #8
 8013648:	3008      	addeq	r0, #8
 801364a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801364e:	bf04      	itt	eq
 8013650:	011b      	lsleq	r3, r3, #4
 8013652:	3004      	addeq	r0, #4
 8013654:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013658:	bf04      	itt	eq
 801365a:	009b      	lsleq	r3, r3, #2
 801365c:	3002      	addeq	r0, #2
 801365e:	2b00      	cmp	r3, #0
 8013660:	db06      	blt.n	8013670 <__hi0bits+0x3c>
 8013662:	005b      	lsls	r3, r3, #1
 8013664:	d503      	bpl.n	801366e <__hi0bits+0x3a>
 8013666:	3001      	adds	r0, #1
 8013668:	4770      	bx	lr
 801366a:	2000      	movs	r0, #0
 801366c:	e7e8      	b.n	8013640 <__hi0bits+0xc>
 801366e:	2020      	movs	r0, #32
 8013670:	4770      	bx	lr

08013672 <__lo0bits>:
 8013672:	6803      	ldr	r3, [r0, #0]
 8013674:	f013 0207 	ands.w	r2, r3, #7
 8013678:	4601      	mov	r1, r0
 801367a:	d00b      	beq.n	8013694 <__lo0bits+0x22>
 801367c:	07da      	lsls	r2, r3, #31
 801367e:	d423      	bmi.n	80136c8 <__lo0bits+0x56>
 8013680:	0798      	lsls	r0, r3, #30
 8013682:	bf49      	itett	mi
 8013684:	085b      	lsrmi	r3, r3, #1
 8013686:	089b      	lsrpl	r3, r3, #2
 8013688:	2001      	movmi	r0, #1
 801368a:	600b      	strmi	r3, [r1, #0]
 801368c:	bf5c      	itt	pl
 801368e:	600b      	strpl	r3, [r1, #0]
 8013690:	2002      	movpl	r0, #2
 8013692:	4770      	bx	lr
 8013694:	b298      	uxth	r0, r3
 8013696:	b9a8      	cbnz	r0, 80136c4 <__lo0bits+0x52>
 8013698:	0c1b      	lsrs	r3, r3, #16
 801369a:	2010      	movs	r0, #16
 801369c:	f013 0fff 	tst.w	r3, #255	; 0xff
 80136a0:	bf04      	itt	eq
 80136a2:	0a1b      	lsreq	r3, r3, #8
 80136a4:	3008      	addeq	r0, #8
 80136a6:	071a      	lsls	r2, r3, #28
 80136a8:	bf04      	itt	eq
 80136aa:	091b      	lsreq	r3, r3, #4
 80136ac:	3004      	addeq	r0, #4
 80136ae:	079a      	lsls	r2, r3, #30
 80136b0:	bf04      	itt	eq
 80136b2:	089b      	lsreq	r3, r3, #2
 80136b4:	3002      	addeq	r0, #2
 80136b6:	07da      	lsls	r2, r3, #31
 80136b8:	d402      	bmi.n	80136c0 <__lo0bits+0x4e>
 80136ba:	085b      	lsrs	r3, r3, #1
 80136bc:	d006      	beq.n	80136cc <__lo0bits+0x5a>
 80136be:	3001      	adds	r0, #1
 80136c0:	600b      	str	r3, [r1, #0]
 80136c2:	4770      	bx	lr
 80136c4:	4610      	mov	r0, r2
 80136c6:	e7e9      	b.n	801369c <__lo0bits+0x2a>
 80136c8:	2000      	movs	r0, #0
 80136ca:	4770      	bx	lr
 80136cc:	2020      	movs	r0, #32
 80136ce:	4770      	bx	lr

080136d0 <__i2b>:
 80136d0:	b510      	push	{r4, lr}
 80136d2:	460c      	mov	r4, r1
 80136d4:	2101      	movs	r1, #1
 80136d6:	f7ff fee9 	bl	80134ac <_Balloc>
 80136da:	2201      	movs	r2, #1
 80136dc:	6144      	str	r4, [r0, #20]
 80136de:	6102      	str	r2, [r0, #16]
 80136e0:	bd10      	pop	{r4, pc}

080136e2 <__multiply>:
 80136e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136e6:	4614      	mov	r4, r2
 80136e8:	690a      	ldr	r2, [r1, #16]
 80136ea:	6923      	ldr	r3, [r4, #16]
 80136ec:	429a      	cmp	r2, r3
 80136ee:	bfb8      	it	lt
 80136f0:	460b      	movlt	r3, r1
 80136f2:	4688      	mov	r8, r1
 80136f4:	bfbc      	itt	lt
 80136f6:	46a0      	movlt	r8, r4
 80136f8:	461c      	movlt	r4, r3
 80136fa:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80136fe:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013702:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013706:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801370a:	eb07 0609 	add.w	r6, r7, r9
 801370e:	42b3      	cmp	r3, r6
 8013710:	bfb8      	it	lt
 8013712:	3101      	addlt	r1, #1
 8013714:	f7ff feca 	bl	80134ac <_Balloc>
 8013718:	f100 0514 	add.w	r5, r0, #20
 801371c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8013720:	462b      	mov	r3, r5
 8013722:	2200      	movs	r2, #0
 8013724:	4573      	cmp	r3, lr
 8013726:	d316      	bcc.n	8013756 <__multiply+0x74>
 8013728:	f104 0214 	add.w	r2, r4, #20
 801372c:	f108 0114 	add.w	r1, r8, #20
 8013730:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8013734:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8013738:	9300      	str	r3, [sp, #0]
 801373a:	9b00      	ldr	r3, [sp, #0]
 801373c:	9201      	str	r2, [sp, #4]
 801373e:	4293      	cmp	r3, r2
 8013740:	d80c      	bhi.n	801375c <__multiply+0x7a>
 8013742:	2e00      	cmp	r6, #0
 8013744:	dd03      	ble.n	801374e <__multiply+0x6c>
 8013746:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801374a:	2b00      	cmp	r3, #0
 801374c:	d05d      	beq.n	801380a <__multiply+0x128>
 801374e:	6106      	str	r6, [r0, #16]
 8013750:	b003      	add	sp, #12
 8013752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013756:	f843 2b04 	str.w	r2, [r3], #4
 801375a:	e7e3      	b.n	8013724 <__multiply+0x42>
 801375c:	f8b2 b000 	ldrh.w	fp, [r2]
 8013760:	f1bb 0f00 	cmp.w	fp, #0
 8013764:	d023      	beq.n	80137ae <__multiply+0xcc>
 8013766:	4689      	mov	r9, r1
 8013768:	46ac      	mov	ip, r5
 801376a:	f04f 0800 	mov.w	r8, #0
 801376e:	f859 4b04 	ldr.w	r4, [r9], #4
 8013772:	f8dc a000 	ldr.w	sl, [ip]
 8013776:	b2a3      	uxth	r3, r4
 8013778:	fa1f fa8a 	uxth.w	sl, sl
 801377c:	fb0b a303 	mla	r3, fp, r3, sl
 8013780:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013784:	f8dc 4000 	ldr.w	r4, [ip]
 8013788:	4443      	add	r3, r8
 801378a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801378e:	fb0b 840a 	mla	r4, fp, sl, r8
 8013792:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8013796:	46e2      	mov	sl, ip
 8013798:	b29b      	uxth	r3, r3
 801379a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801379e:	454f      	cmp	r7, r9
 80137a0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80137a4:	f84a 3b04 	str.w	r3, [sl], #4
 80137a8:	d82b      	bhi.n	8013802 <__multiply+0x120>
 80137aa:	f8cc 8004 	str.w	r8, [ip, #4]
 80137ae:	9b01      	ldr	r3, [sp, #4]
 80137b0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80137b4:	3204      	adds	r2, #4
 80137b6:	f1ba 0f00 	cmp.w	sl, #0
 80137ba:	d020      	beq.n	80137fe <__multiply+0x11c>
 80137bc:	682b      	ldr	r3, [r5, #0]
 80137be:	4689      	mov	r9, r1
 80137c0:	46a8      	mov	r8, r5
 80137c2:	f04f 0b00 	mov.w	fp, #0
 80137c6:	f8b9 c000 	ldrh.w	ip, [r9]
 80137ca:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80137ce:	fb0a 440c 	mla	r4, sl, ip, r4
 80137d2:	445c      	add	r4, fp
 80137d4:	46c4      	mov	ip, r8
 80137d6:	b29b      	uxth	r3, r3
 80137d8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80137dc:	f84c 3b04 	str.w	r3, [ip], #4
 80137e0:	f859 3b04 	ldr.w	r3, [r9], #4
 80137e4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80137e8:	0c1b      	lsrs	r3, r3, #16
 80137ea:	fb0a b303 	mla	r3, sl, r3, fp
 80137ee:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80137f2:	454f      	cmp	r7, r9
 80137f4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80137f8:	d805      	bhi.n	8013806 <__multiply+0x124>
 80137fa:	f8c8 3004 	str.w	r3, [r8, #4]
 80137fe:	3504      	adds	r5, #4
 8013800:	e79b      	b.n	801373a <__multiply+0x58>
 8013802:	46d4      	mov	ip, sl
 8013804:	e7b3      	b.n	801376e <__multiply+0x8c>
 8013806:	46e0      	mov	r8, ip
 8013808:	e7dd      	b.n	80137c6 <__multiply+0xe4>
 801380a:	3e01      	subs	r6, #1
 801380c:	e799      	b.n	8013742 <__multiply+0x60>
	...

08013810 <__pow5mult>:
 8013810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013814:	4615      	mov	r5, r2
 8013816:	f012 0203 	ands.w	r2, r2, #3
 801381a:	4606      	mov	r6, r0
 801381c:	460f      	mov	r7, r1
 801381e:	d007      	beq.n	8013830 <__pow5mult+0x20>
 8013820:	3a01      	subs	r2, #1
 8013822:	4c21      	ldr	r4, [pc, #132]	; (80138a8 <__pow5mult+0x98>)
 8013824:	2300      	movs	r3, #0
 8013826:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801382a:	f7ff fe8a 	bl	8013542 <__multadd>
 801382e:	4607      	mov	r7, r0
 8013830:	10ad      	asrs	r5, r5, #2
 8013832:	d035      	beq.n	80138a0 <__pow5mult+0x90>
 8013834:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013836:	b93c      	cbnz	r4, 8013848 <__pow5mult+0x38>
 8013838:	2010      	movs	r0, #16
 801383a:	f7ff fe1d 	bl	8013478 <malloc>
 801383e:	6270      	str	r0, [r6, #36]	; 0x24
 8013840:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013844:	6004      	str	r4, [r0, #0]
 8013846:	60c4      	str	r4, [r0, #12]
 8013848:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801384c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013850:	b94c      	cbnz	r4, 8013866 <__pow5mult+0x56>
 8013852:	f240 2171 	movw	r1, #625	; 0x271
 8013856:	4630      	mov	r0, r6
 8013858:	f7ff ff3a 	bl	80136d0 <__i2b>
 801385c:	2300      	movs	r3, #0
 801385e:	f8c8 0008 	str.w	r0, [r8, #8]
 8013862:	4604      	mov	r4, r0
 8013864:	6003      	str	r3, [r0, #0]
 8013866:	f04f 0800 	mov.w	r8, #0
 801386a:	07eb      	lsls	r3, r5, #31
 801386c:	d50a      	bpl.n	8013884 <__pow5mult+0x74>
 801386e:	4639      	mov	r1, r7
 8013870:	4622      	mov	r2, r4
 8013872:	4630      	mov	r0, r6
 8013874:	f7ff ff35 	bl	80136e2 <__multiply>
 8013878:	4639      	mov	r1, r7
 801387a:	4681      	mov	r9, r0
 801387c:	4630      	mov	r0, r6
 801387e:	f7ff fe49 	bl	8013514 <_Bfree>
 8013882:	464f      	mov	r7, r9
 8013884:	106d      	asrs	r5, r5, #1
 8013886:	d00b      	beq.n	80138a0 <__pow5mult+0x90>
 8013888:	6820      	ldr	r0, [r4, #0]
 801388a:	b938      	cbnz	r0, 801389c <__pow5mult+0x8c>
 801388c:	4622      	mov	r2, r4
 801388e:	4621      	mov	r1, r4
 8013890:	4630      	mov	r0, r6
 8013892:	f7ff ff26 	bl	80136e2 <__multiply>
 8013896:	6020      	str	r0, [r4, #0]
 8013898:	f8c0 8000 	str.w	r8, [r0]
 801389c:	4604      	mov	r4, r0
 801389e:	e7e4      	b.n	801386a <__pow5mult+0x5a>
 80138a0:	4638      	mov	r0, r7
 80138a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80138a6:	bf00      	nop
 80138a8:	080168a0 	.word	0x080168a0

080138ac <__lshift>:
 80138ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138b0:	460c      	mov	r4, r1
 80138b2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80138b6:	6923      	ldr	r3, [r4, #16]
 80138b8:	6849      	ldr	r1, [r1, #4]
 80138ba:	eb0a 0903 	add.w	r9, sl, r3
 80138be:	68a3      	ldr	r3, [r4, #8]
 80138c0:	4607      	mov	r7, r0
 80138c2:	4616      	mov	r6, r2
 80138c4:	f109 0501 	add.w	r5, r9, #1
 80138c8:	42ab      	cmp	r3, r5
 80138ca:	db32      	blt.n	8013932 <__lshift+0x86>
 80138cc:	4638      	mov	r0, r7
 80138ce:	f7ff fded 	bl	80134ac <_Balloc>
 80138d2:	2300      	movs	r3, #0
 80138d4:	4680      	mov	r8, r0
 80138d6:	f100 0114 	add.w	r1, r0, #20
 80138da:	461a      	mov	r2, r3
 80138dc:	4553      	cmp	r3, sl
 80138de:	db2b      	blt.n	8013938 <__lshift+0x8c>
 80138e0:	6920      	ldr	r0, [r4, #16]
 80138e2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80138e6:	f104 0314 	add.w	r3, r4, #20
 80138ea:	f016 021f 	ands.w	r2, r6, #31
 80138ee:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80138f2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80138f6:	d025      	beq.n	8013944 <__lshift+0x98>
 80138f8:	f1c2 0e20 	rsb	lr, r2, #32
 80138fc:	2000      	movs	r0, #0
 80138fe:	681e      	ldr	r6, [r3, #0]
 8013900:	468a      	mov	sl, r1
 8013902:	4096      	lsls	r6, r2
 8013904:	4330      	orrs	r0, r6
 8013906:	f84a 0b04 	str.w	r0, [sl], #4
 801390a:	f853 0b04 	ldr.w	r0, [r3], #4
 801390e:	459c      	cmp	ip, r3
 8013910:	fa20 f00e 	lsr.w	r0, r0, lr
 8013914:	d814      	bhi.n	8013940 <__lshift+0x94>
 8013916:	6048      	str	r0, [r1, #4]
 8013918:	b108      	cbz	r0, 801391e <__lshift+0x72>
 801391a:	f109 0502 	add.w	r5, r9, #2
 801391e:	3d01      	subs	r5, #1
 8013920:	4638      	mov	r0, r7
 8013922:	f8c8 5010 	str.w	r5, [r8, #16]
 8013926:	4621      	mov	r1, r4
 8013928:	f7ff fdf4 	bl	8013514 <_Bfree>
 801392c:	4640      	mov	r0, r8
 801392e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013932:	3101      	adds	r1, #1
 8013934:	005b      	lsls	r3, r3, #1
 8013936:	e7c7      	b.n	80138c8 <__lshift+0x1c>
 8013938:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801393c:	3301      	adds	r3, #1
 801393e:	e7cd      	b.n	80138dc <__lshift+0x30>
 8013940:	4651      	mov	r1, sl
 8013942:	e7dc      	b.n	80138fe <__lshift+0x52>
 8013944:	3904      	subs	r1, #4
 8013946:	f853 2b04 	ldr.w	r2, [r3], #4
 801394a:	f841 2f04 	str.w	r2, [r1, #4]!
 801394e:	459c      	cmp	ip, r3
 8013950:	d8f9      	bhi.n	8013946 <__lshift+0x9a>
 8013952:	e7e4      	b.n	801391e <__lshift+0x72>

08013954 <__mcmp>:
 8013954:	6903      	ldr	r3, [r0, #16]
 8013956:	690a      	ldr	r2, [r1, #16]
 8013958:	1a9b      	subs	r3, r3, r2
 801395a:	b530      	push	{r4, r5, lr}
 801395c:	d10c      	bne.n	8013978 <__mcmp+0x24>
 801395e:	0092      	lsls	r2, r2, #2
 8013960:	3014      	adds	r0, #20
 8013962:	3114      	adds	r1, #20
 8013964:	1884      	adds	r4, r0, r2
 8013966:	4411      	add	r1, r2
 8013968:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801396c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013970:	4295      	cmp	r5, r2
 8013972:	d003      	beq.n	801397c <__mcmp+0x28>
 8013974:	d305      	bcc.n	8013982 <__mcmp+0x2e>
 8013976:	2301      	movs	r3, #1
 8013978:	4618      	mov	r0, r3
 801397a:	bd30      	pop	{r4, r5, pc}
 801397c:	42a0      	cmp	r0, r4
 801397e:	d3f3      	bcc.n	8013968 <__mcmp+0x14>
 8013980:	e7fa      	b.n	8013978 <__mcmp+0x24>
 8013982:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013986:	e7f7      	b.n	8013978 <__mcmp+0x24>

08013988 <__mdiff>:
 8013988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801398c:	460d      	mov	r5, r1
 801398e:	4607      	mov	r7, r0
 8013990:	4611      	mov	r1, r2
 8013992:	4628      	mov	r0, r5
 8013994:	4614      	mov	r4, r2
 8013996:	f7ff ffdd 	bl	8013954 <__mcmp>
 801399a:	1e06      	subs	r6, r0, #0
 801399c:	d108      	bne.n	80139b0 <__mdiff+0x28>
 801399e:	4631      	mov	r1, r6
 80139a0:	4638      	mov	r0, r7
 80139a2:	f7ff fd83 	bl	80134ac <_Balloc>
 80139a6:	2301      	movs	r3, #1
 80139a8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80139ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139b0:	bfa4      	itt	ge
 80139b2:	4623      	movge	r3, r4
 80139b4:	462c      	movge	r4, r5
 80139b6:	4638      	mov	r0, r7
 80139b8:	6861      	ldr	r1, [r4, #4]
 80139ba:	bfa6      	itte	ge
 80139bc:	461d      	movge	r5, r3
 80139be:	2600      	movge	r6, #0
 80139c0:	2601      	movlt	r6, #1
 80139c2:	f7ff fd73 	bl	80134ac <_Balloc>
 80139c6:	692b      	ldr	r3, [r5, #16]
 80139c8:	60c6      	str	r6, [r0, #12]
 80139ca:	6926      	ldr	r6, [r4, #16]
 80139cc:	f105 0914 	add.w	r9, r5, #20
 80139d0:	f104 0214 	add.w	r2, r4, #20
 80139d4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80139d8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80139dc:	f100 0514 	add.w	r5, r0, #20
 80139e0:	f04f 0e00 	mov.w	lr, #0
 80139e4:	f852 ab04 	ldr.w	sl, [r2], #4
 80139e8:	f859 4b04 	ldr.w	r4, [r9], #4
 80139ec:	fa1e f18a 	uxtah	r1, lr, sl
 80139f0:	b2a3      	uxth	r3, r4
 80139f2:	1ac9      	subs	r1, r1, r3
 80139f4:	0c23      	lsrs	r3, r4, #16
 80139f6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80139fa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80139fe:	b289      	uxth	r1, r1
 8013a00:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8013a04:	45c8      	cmp	r8, r9
 8013a06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8013a0a:	4694      	mov	ip, r2
 8013a0c:	f845 3b04 	str.w	r3, [r5], #4
 8013a10:	d8e8      	bhi.n	80139e4 <__mdiff+0x5c>
 8013a12:	45bc      	cmp	ip, r7
 8013a14:	d304      	bcc.n	8013a20 <__mdiff+0x98>
 8013a16:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8013a1a:	b183      	cbz	r3, 8013a3e <__mdiff+0xb6>
 8013a1c:	6106      	str	r6, [r0, #16]
 8013a1e:	e7c5      	b.n	80139ac <__mdiff+0x24>
 8013a20:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013a24:	fa1e f381 	uxtah	r3, lr, r1
 8013a28:	141a      	asrs	r2, r3, #16
 8013a2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013a2e:	b29b      	uxth	r3, r3
 8013a30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013a34:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8013a38:	f845 3b04 	str.w	r3, [r5], #4
 8013a3c:	e7e9      	b.n	8013a12 <__mdiff+0x8a>
 8013a3e:	3e01      	subs	r6, #1
 8013a40:	e7e9      	b.n	8013a16 <__mdiff+0x8e>
	...

08013a44 <__ulp>:
 8013a44:	4b12      	ldr	r3, [pc, #72]	; (8013a90 <__ulp+0x4c>)
 8013a46:	ee10 2a90 	vmov	r2, s1
 8013a4a:	401a      	ands	r2, r3
 8013a4c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	dd04      	ble.n	8013a5e <__ulp+0x1a>
 8013a54:	2000      	movs	r0, #0
 8013a56:	4619      	mov	r1, r3
 8013a58:	ec41 0b10 	vmov	d0, r0, r1
 8013a5c:	4770      	bx	lr
 8013a5e:	425b      	negs	r3, r3
 8013a60:	151b      	asrs	r3, r3, #20
 8013a62:	2b13      	cmp	r3, #19
 8013a64:	f04f 0000 	mov.w	r0, #0
 8013a68:	f04f 0100 	mov.w	r1, #0
 8013a6c:	dc04      	bgt.n	8013a78 <__ulp+0x34>
 8013a6e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8013a72:	fa42 f103 	asr.w	r1, r2, r3
 8013a76:	e7ef      	b.n	8013a58 <__ulp+0x14>
 8013a78:	3b14      	subs	r3, #20
 8013a7a:	2b1e      	cmp	r3, #30
 8013a7c:	f04f 0201 	mov.w	r2, #1
 8013a80:	bfda      	itte	le
 8013a82:	f1c3 031f 	rsble	r3, r3, #31
 8013a86:	fa02 f303 	lslle.w	r3, r2, r3
 8013a8a:	4613      	movgt	r3, r2
 8013a8c:	4618      	mov	r0, r3
 8013a8e:	e7e3      	b.n	8013a58 <__ulp+0x14>
 8013a90:	7ff00000 	.word	0x7ff00000

08013a94 <__b2d>:
 8013a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a96:	6905      	ldr	r5, [r0, #16]
 8013a98:	f100 0714 	add.w	r7, r0, #20
 8013a9c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8013aa0:	1f2e      	subs	r6, r5, #4
 8013aa2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8013aa6:	4620      	mov	r0, r4
 8013aa8:	f7ff fdc4 	bl	8013634 <__hi0bits>
 8013aac:	f1c0 0320 	rsb	r3, r0, #32
 8013ab0:	280a      	cmp	r0, #10
 8013ab2:	600b      	str	r3, [r1, #0]
 8013ab4:	f8df c074 	ldr.w	ip, [pc, #116]	; 8013b2c <__b2d+0x98>
 8013ab8:	dc14      	bgt.n	8013ae4 <__b2d+0x50>
 8013aba:	f1c0 0e0b 	rsb	lr, r0, #11
 8013abe:	fa24 f10e 	lsr.w	r1, r4, lr
 8013ac2:	42b7      	cmp	r7, r6
 8013ac4:	ea41 030c 	orr.w	r3, r1, ip
 8013ac8:	bf34      	ite	cc
 8013aca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013ace:	2100      	movcs	r1, #0
 8013ad0:	3015      	adds	r0, #21
 8013ad2:	fa04 f000 	lsl.w	r0, r4, r0
 8013ad6:	fa21 f10e 	lsr.w	r1, r1, lr
 8013ada:	ea40 0201 	orr.w	r2, r0, r1
 8013ade:	ec43 2b10 	vmov	d0, r2, r3
 8013ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ae4:	42b7      	cmp	r7, r6
 8013ae6:	bf3a      	itte	cc
 8013ae8:	f1a5 0608 	subcc.w	r6, r5, #8
 8013aec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013af0:	2100      	movcs	r1, #0
 8013af2:	380b      	subs	r0, #11
 8013af4:	d015      	beq.n	8013b22 <__b2d+0x8e>
 8013af6:	4084      	lsls	r4, r0
 8013af8:	f1c0 0520 	rsb	r5, r0, #32
 8013afc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8013b00:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8013b04:	42be      	cmp	r6, r7
 8013b06:	fa21 fc05 	lsr.w	ip, r1, r5
 8013b0a:	ea44 030c 	orr.w	r3, r4, ip
 8013b0e:	bf8c      	ite	hi
 8013b10:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8013b14:	2400      	movls	r4, #0
 8013b16:	fa01 f000 	lsl.w	r0, r1, r0
 8013b1a:	40ec      	lsrs	r4, r5
 8013b1c:	ea40 0204 	orr.w	r2, r0, r4
 8013b20:	e7dd      	b.n	8013ade <__b2d+0x4a>
 8013b22:	ea44 030c 	orr.w	r3, r4, ip
 8013b26:	460a      	mov	r2, r1
 8013b28:	e7d9      	b.n	8013ade <__b2d+0x4a>
 8013b2a:	bf00      	nop
 8013b2c:	3ff00000 	.word	0x3ff00000

08013b30 <__d2b>:
 8013b30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013b34:	460e      	mov	r6, r1
 8013b36:	2101      	movs	r1, #1
 8013b38:	ec59 8b10 	vmov	r8, r9, d0
 8013b3c:	4615      	mov	r5, r2
 8013b3e:	f7ff fcb5 	bl	80134ac <_Balloc>
 8013b42:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8013b46:	4607      	mov	r7, r0
 8013b48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013b4c:	bb34      	cbnz	r4, 8013b9c <__d2b+0x6c>
 8013b4e:	9301      	str	r3, [sp, #4]
 8013b50:	f1b8 0300 	subs.w	r3, r8, #0
 8013b54:	d027      	beq.n	8013ba6 <__d2b+0x76>
 8013b56:	a802      	add	r0, sp, #8
 8013b58:	f840 3d08 	str.w	r3, [r0, #-8]!
 8013b5c:	f7ff fd89 	bl	8013672 <__lo0bits>
 8013b60:	9900      	ldr	r1, [sp, #0]
 8013b62:	b1f0      	cbz	r0, 8013ba2 <__d2b+0x72>
 8013b64:	9a01      	ldr	r2, [sp, #4]
 8013b66:	f1c0 0320 	rsb	r3, r0, #32
 8013b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8013b6e:	430b      	orrs	r3, r1
 8013b70:	40c2      	lsrs	r2, r0
 8013b72:	617b      	str	r3, [r7, #20]
 8013b74:	9201      	str	r2, [sp, #4]
 8013b76:	9b01      	ldr	r3, [sp, #4]
 8013b78:	61bb      	str	r3, [r7, #24]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	bf14      	ite	ne
 8013b7e:	2102      	movne	r1, #2
 8013b80:	2101      	moveq	r1, #1
 8013b82:	6139      	str	r1, [r7, #16]
 8013b84:	b1c4      	cbz	r4, 8013bb8 <__d2b+0x88>
 8013b86:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8013b8a:	4404      	add	r4, r0
 8013b8c:	6034      	str	r4, [r6, #0]
 8013b8e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013b92:	6028      	str	r0, [r5, #0]
 8013b94:	4638      	mov	r0, r7
 8013b96:	b003      	add	sp, #12
 8013b98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013b9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013ba0:	e7d5      	b.n	8013b4e <__d2b+0x1e>
 8013ba2:	6179      	str	r1, [r7, #20]
 8013ba4:	e7e7      	b.n	8013b76 <__d2b+0x46>
 8013ba6:	a801      	add	r0, sp, #4
 8013ba8:	f7ff fd63 	bl	8013672 <__lo0bits>
 8013bac:	9b01      	ldr	r3, [sp, #4]
 8013bae:	617b      	str	r3, [r7, #20]
 8013bb0:	2101      	movs	r1, #1
 8013bb2:	6139      	str	r1, [r7, #16]
 8013bb4:	3020      	adds	r0, #32
 8013bb6:	e7e5      	b.n	8013b84 <__d2b+0x54>
 8013bb8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8013bbc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013bc0:	6030      	str	r0, [r6, #0]
 8013bc2:	6918      	ldr	r0, [r3, #16]
 8013bc4:	f7ff fd36 	bl	8013634 <__hi0bits>
 8013bc8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8013bcc:	e7e1      	b.n	8013b92 <__d2b+0x62>

08013bce <__ratio>:
 8013bce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bd2:	4688      	mov	r8, r1
 8013bd4:	4669      	mov	r1, sp
 8013bd6:	4681      	mov	r9, r0
 8013bd8:	f7ff ff5c 	bl	8013a94 <__b2d>
 8013bdc:	a901      	add	r1, sp, #4
 8013bde:	4640      	mov	r0, r8
 8013be0:	ec57 6b10 	vmov	r6, r7, d0
 8013be4:	f7ff ff56 	bl	8013a94 <__b2d>
 8013be8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013bec:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013bf0:	eba3 0c02 	sub.w	ip, r3, r2
 8013bf4:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013bf8:	1a9b      	subs	r3, r3, r2
 8013bfa:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013bfe:	ec5b ab10 	vmov	sl, fp, d0
 8013c02:	2b00      	cmp	r3, #0
 8013c04:	bfce      	itee	gt
 8013c06:	463a      	movgt	r2, r7
 8013c08:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013c0c:	465a      	movle	r2, fp
 8013c0e:	4659      	mov	r1, fp
 8013c10:	463d      	mov	r5, r7
 8013c12:	bfd4      	ite	le
 8013c14:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8013c18:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8013c1c:	4630      	mov	r0, r6
 8013c1e:	ee10 2a10 	vmov	r2, s0
 8013c22:	460b      	mov	r3, r1
 8013c24:	4629      	mov	r1, r5
 8013c26:	f7ec fe11 	bl	800084c <__aeabi_ddiv>
 8013c2a:	ec41 0b10 	vmov	d0, r0, r1
 8013c2e:	b003      	add	sp, #12
 8013c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013c34 <__copybits>:
 8013c34:	3901      	subs	r1, #1
 8013c36:	b510      	push	{r4, lr}
 8013c38:	1149      	asrs	r1, r1, #5
 8013c3a:	6914      	ldr	r4, [r2, #16]
 8013c3c:	3101      	adds	r1, #1
 8013c3e:	f102 0314 	add.w	r3, r2, #20
 8013c42:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013c46:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013c4a:	42a3      	cmp	r3, r4
 8013c4c:	4602      	mov	r2, r0
 8013c4e:	d303      	bcc.n	8013c58 <__copybits+0x24>
 8013c50:	2300      	movs	r3, #0
 8013c52:	428a      	cmp	r2, r1
 8013c54:	d305      	bcc.n	8013c62 <__copybits+0x2e>
 8013c56:	bd10      	pop	{r4, pc}
 8013c58:	f853 2b04 	ldr.w	r2, [r3], #4
 8013c5c:	f840 2b04 	str.w	r2, [r0], #4
 8013c60:	e7f3      	b.n	8013c4a <__copybits+0x16>
 8013c62:	f842 3b04 	str.w	r3, [r2], #4
 8013c66:	e7f4      	b.n	8013c52 <__copybits+0x1e>

08013c68 <__any_on>:
 8013c68:	f100 0214 	add.w	r2, r0, #20
 8013c6c:	6900      	ldr	r0, [r0, #16]
 8013c6e:	114b      	asrs	r3, r1, #5
 8013c70:	4298      	cmp	r0, r3
 8013c72:	b510      	push	{r4, lr}
 8013c74:	db11      	blt.n	8013c9a <__any_on+0x32>
 8013c76:	dd0a      	ble.n	8013c8e <__any_on+0x26>
 8013c78:	f011 011f 	ands.w	r1, r1, #31
 8013c7c:	d007      	beq.n	8013c8e <__any_on+0x26>
 8013c7e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013c82:	fa24 f001 	lsr.w	r0, r4, r1
 8013c86:	fa00 f101 	lsl.w	r1, r0, r1
 8013c8a:	428c      	cmp	r4, r1
 8013c8c:	d10b      	bne.n	8013ca6 <__any_on+0x3e>
 8013c8e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013c92:	4293      	cmp	r3, r2
 8013c94:	d803      	bhi.n	8013c9e <__any_on+0x36>
 8013c96:	2000      	movs	r0, #0
 8013c98:	bd10      	pop	{r4, pc}
 8013c9a:	4603      	mov	r3, r0
 8013c9c:	e7f7      	b.n	8013c8e <__any_on+0x26>
 8013c9e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013ca2:	2900      	cmp	r1, #0
 8013ca4:	d0f5      	beq.n	8013c92 <__any_on+0x2a>
 8013ca6:	2001      	movs	r0, #1
 8013ca8:	e7f6      	b.n	8013c98 <__any_on+0x30>

08013caa <_calloc_r>:
 8013caa:	b538      	push	{r3, r4, r5, lr}
 8013cac:	fb02 f401 	mul.w	r4, r2, r1
 8013cb0:	4621      	mov	r1, r4
 8013cb2:	f000 f857 	bl	8013d64 <_malloc_r>
 8013cb6:	4605      	mov	r5, r0
 8013cb8:	b118      	cbz	r0, 8013cc2 <_calloc_r+0x18>
 8013cba:	4622      	mov	r2, r4
 8013cbc:	2100      	movs	r1, #0
 8013cbe:	f7fc fc46 	bl	801054e <memset>
 8013cc2:	4628      	mov	r0, r5
 8013cc4:	bd38      	pop	{r3, r4, r5, pc}
	...

08013cc8 <_free_r>:
 8013cc8:	b538      	push	{r3, r4, r5, lr}
 8013cca:	4605      	mov	r5, r0
 8013ccc:	2900      	cmp	r1, #0
 8013cce:	d045      	beq.n	8013d5c <_free_r+0x94>
 8013cd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013cd4:	1f0c      	subs	r4, r1, #4
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	bfb8      	it	lt
 8013cda:	18e4      	addlt	r4, r4, r3
 8013cdc:	f000 fc15 	bl	801450a <__malloc_lock>
 8013ce0:	4a1f      	ldr	r2, [pc, #124]	; (8013d60 <_free_r+0x98>)
 8013ce2:	6813      	ldr	r3, [r2, #0]
 8013ce4:	4610      	mov	r0, r2
 8013ce6:	b933      	cbnz	r3, 8013cf6 <_free_r+0x2e>
 8013ce8:	6063      	str	r3, [r4, #4]
 8013cea:	6014      	str	r4, [r2, #0]
 8013cec:	4628      	mov	r0, r5
 8013cee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013cf2:	f000 bc0b 	b.w	801450c <__malloc_unlock>
 8013cf6:	42a3      	cmp	r3, r4
 8013cf8:	d90c      	bls.n	8013d14 <_free_r+0x4c>
 8013cfa:	6821      	ldr	r1, [r4, #0]
 8013cfc:	1862      	adds	r2, r4, r1
 8013cfe:	4293      	cmp	r3, r2
 8013d00:	bf04      	itt	eq
 8013d02:	681a      	ldreq	r2, [r3, #0]
 8013d04:	685b      	ldreq	r3, [r3, #4]
 8013d06:	6063      	str	r3, [r4, #4]
 8013d08:	bf04      	itt	eq
 8013d0a:	1852      	addeq	r2, r2, r1
 8013d0c:	6022      	streq	r2, [r4, #0]
 8013d0e:	6004      	str	r4, [r0, #0]
 8013d10:	e7ec      	b.n	8013cec <_free_r+0x24>
 8013d12:	4613      	mov	r3, r2
 8013d14:	685a      	ldr	r2, [r3, #4]
 8013d16:	b10a      	cbz	r2, 8013d1c <_free_r+0x54>
 8013d18:	42a2      	cmp	r2, r4
 8013d1a:	d9fa      	bls.n	8013d12 <_free_r+0x4a>
 8013d1c:	6819      	ldr	r1, [r3, #0]
 8013d1e:	1858      	adds	r0, r3, r1
 8013d20:	42a0      	cmp	r0, r4
 8013d22:	d10b      	bne.n	8013d3c <_free_r+0x74>
 8013d24:	6820      	ldr	r0, [r4, #0]
 8013d26:	4401      	add	r1, r0
 8013d28:	1858      	adds	r0, r3, r1
 8013d2a:	4282      	cmp	r2, r0
 8013d2c:	6019      	str	r1, [r3, #0]
 8013d2e:	d1dd      	bne.n	8013cec <_free_r+0x24>
 8013d30:	6810      	ldr	r0, [r2, #0]
 8013d32:	6852      	ldr	r2, [r2, #4]
 8013d34:	605a      	str	r2, [r3, #4]
 8013d36:	4401      	add	r1, r0
 8013d38:	6019      	str	r1, [r3, #0]
 8013d3a:	e7d7      	b.n	8013cec <_free_r+0x24>
 8013d3c:	d902      	bls.n	8013d44 <_free_r+0x7c>
 8013d3e:	230c      	movs	r3, #12
 8013d40:	602b      	str	r3, [r5, #0]
 8013d42:	e7d3      	b.n	8013cec <_free_r+0x24>
 8013d44:	6820      	ldr	r0, [r4, #0]
 8013d46:	1821      	adds	r1, r4, r0
 8013d48:	428a      	cmp	r2, r1
 8013d4a:	bf04      	itt	eq
 8013d4c:	6811      	ldreq	r1, [r2, #0]
 8013d4e:	6852      	ldreq	r2, [r2, #4]
 8013d50:	6062      	str	r2, [r4, #4]
 8013d52:	bf04      	itt	eq
 8013d54:	1809      	addeq	r1, r1, r0
 8013d56:	6021      	streq	r1, [r4, #0]
 8013d58:	605c      	str	r4, [r3, #4]
 8013d5a:	e7c7      	b.n	8013cec <_free_r+0x24>
 8013d5c:	bd38      	pop	{r3, r4, r5, pc}
 8013d5e:	bf00      	nop
 8013d60:	2000087c 	.word	0x2000087c

08013d64 <_malloc_r>:
 8013d64:	b570      	push	{r4, r5, r6, lr}
 8013d66:	1ccd      	adds	r5, r1, #3
 8013d68:	f025 0503 	bic.w	r5, r5, #3
 8013d6c:	3508      	adds	r5, #8
 8013d6e:	2d0c      	cmp	r5, #12
 8013d70:	bf38      	it	cc
 8013d72:	250c      	movcc	r5, #12
 8013d74:	2d00      	cmp	r5, #0
 8013d76:	4606      	mov	r6, r0
 8013d78:	db01      	blt.n	8013d7e <_malloc_r+0x1a>
 8013d7a:	42a9      	cmp	r1, r5
 8013d7c:	d903      	bls.n	8013d86 <_malloc_r+0x22>
 8013d7e:	230c      	movs	r3, #12
 8013d80:	6033      	str	r3, [r6, #0]
 8013d82:	2000      	movs	r0, #0
 8013d84:	bd70      	pop	{r4, r5, r6, pc}
 8013d86:	f000 fbc0 	bl	801450a <__malloc_lock>
 8013d8a:	4a21      	ldr	r2, [pc, #132]	; (8013e10 <_malloc_r+0xac>)
 8013d8c:	6814      	ldr	r4, [r2, #0]
 8013d8e:	4621      	mov	r1, r4
 8013d90:	b991      	cbnz	r1, 8013db8 <_malloc_r+0x54>
 8013d92:	4c20      	ldr	r4, [pc, #128]	; (8013e14 <_malloc_r+0xb0>)
 8013d94:	6823      	ldr	r3, [r4, #0]
 8013d96:	b91b      	cbnz	r3, 8013da0 <_malloc_r+0x3c>
 8013d98:	4630      	mov	r0, r6
 8013d9a:	f000 facf 	bl	801433c <_sbrk_r>
 8013d9e:	6020      	str	r0, [r4, #0]
 8013da0:	4629      	mov	r1, r5
 8013da2:	4630      	mov	r0, r6
 8013da4:	f000 faca 	bl	801433c <_sbrk_r>
 8013da8:	1c43      	adds	r3, r0, #1
 8013daa:	d124      	bne.n	8013df6 <_malloc_r+0x92>
 8013dac:	230c      	movs	r3, #12
 8013dae:	6033      	str	r3, [r6, #0]
 8013db0:	4630      	mov	r0, r6
 8013db2:	f000 fbab 	bl	801450c <__malloc_unlock>
 8013db6:	e7e4      	b.n	8013d82 <_malloc_r+0x1e>
 8013db8:	680b      	ldr	r3, [r1, #0]
 8013dba:	1b5b      	subs	r3, r3, r5
 8013dbc:	d418      	bmi.n	8013df0 <_malloc_r+0x8c>
 8013dbe:	2b0b      	cmp	r3, #11
 8013dc0:	d90f      	bls.n	8013de2 <_malloc_r+0x7e>
 8013dc2:	600b      	str	r3, [r1, #0]
 8013dc4:	50cd      	str	r5, [r1, r3]
 8013dc6:	18cc      	adds	r4, r1, r3
 8013dc8:	4630      	mov	r0, r6
 8013dca:	f000 fb9f 	bl	801450c <__malloc_unlock>
 8013dce:	f104 000b 	add.w	r0, r4, #11
 8013dd2:	1d23      	adds	r3, r4, #4
 8013dd4:	f020 0007 	bic.w	r0, r0, #7
 8013dd8:	1ac3      	subs	r3, r0, r3
 8013dda:	d0d3      	beq.n	8013d84 <_malloc_r+0x20>
 8013ddc:	425a      	negs	r2, r3
 8013dde:	50e2      	str	r2, [r4, r3]
 8013de0:	e7d0      	b.n	8013d84 <_malloc_r+0x20>
 8013de2:	428c      	cmp	r4, r1
 8013de4:	684b      	ldr	r3, [r1, #4]
 8013de6:	bf16      	itet	ne
 8013de8:	6063      	strne	r3, [r4, #4]
 8013dea:	6013      	streq	r3, [r2, #0]
 8013dec:	460c      	movne	r4, r1
 8013dee:	e7eb      	b.n	8013dc8 <_malloc_r+0x64>
 8013df0:	460c      	mov	r4, r1
 8013df2:	6849      	ldr	r1, [r1, #4]
 8013df4:	e7cc      	b.n	8013d90 <_malloc_r+0x2c>
 8013df6:	1cc4      	adds	r4, r0, #3
 8013df8:	f024 0403 	bic.w	r4, r4, #3
 8013dfc:	42a0      	cmp	r0, r4
 8013dfe:	d005      	beq.n	8013e0c <_malloc_r+0xa8>
 8013e00:	1a21      	subs	r1, r4, r0
 8013e02:	4630      	mov	r0, r6
 8013e04:	f000 fa9a 	bl	801433c <_sbrk_r>
 8013e08:	3001      	adds	r0, #1
 8013e0a:	d0cf      	beq.n	8013dac <_malloc_r+0x48>
 8013e0c:	6025      	str	r5, [r4, #0]
 8013e0e:	e7db      	b.n	8013dc8 <_malloc_r+0x64>
 8013e10:	2000087c 	.word	0x2000087c
 8013e14:	20000880 	.word	0x20000880

08013e18 <__ssputs_r>:
 8013e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e1c:	688e      	ldr	r6, [r1, #8]
 8013e1e:	429e      	cmp	r6, r3
 8013e20:	4682      	mov	sl, r0
 8013e22:	460c      	mov	r4, r1
 8013e24:	4690      	mov	r8, r2
 8013e26:	4699      	mov	r9, r3
 8013e28:	d837      	bhi.n	8013e9a <__ssputs_r+0x82>
 8013e2a:	898a      	ldrh	r2, [r1, #12]
 8013e2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013e30:	d031      	beq.n	8013e96 <__ssputs_r+0x7e>
 8013e32:	6825      	ldr	r5, [r4, #0]
 8013e34:	6909      	ldr	r1, [r1, #16]
 8013e36:	1a6f      	subs	r7, r5, r1
 8013e38:	6965      	ldr	r5, [r4, #20]
 8013e3a:	2302      	movs	r3, #2
 8013e3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013e40:	fb95 f5f3 	sdiv	r5, r5, r3
 8013e44:	f109 0301 	add.w	r3, r9, #1
 8013e48:	443b      	add	r3, r7
 8013e4a:	429d      	cmp	r5, r3
 8013e4c:	bf38      	it	cc
 8013e4e:	461d      	movcc	r5, r3
 8013e50:	0553      	lsls	r3, r2, #21
 8013e52:	d530      	bpl.n	8013eb6 <__ssputs_r+0x9e>
 8013e54:	4629      	mov	r1, r5
 8013e56:	f7ff ff85 	bl	8013d64 <_malloc_r>
 8013e5a:	4606      	mov	r6, r0
 8013e5c:	b950      	cbnz	r0, 8013e74 <__ssputs_r+0x5c>
 8013e5e:	230c      	movs	r3, #12
 8013e60:	f8ca 3000 	str.w	r3, [sl]
 8013e64:	89a3      	ldrh	r3, [r4, #12]
 8013e66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013e6a:	81a3      	strh	r3, [r4, #12]
 8013e6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e74:	463a      	mov	r2, r7
 8013e76:	6921      	ldr	r1, [r4, #16]
 8013e78:	f7fc fb5e 	bl	8010538 <memcpy>
 8013e7c:	89a3      	ldrh	r3, [r4, #12]
 8013e7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013e86:	81a3      	strh	r3, [r4, #12]
 8013e88:	6126      	str	r6, [r4, #16]
 8013e8a:	6165      	str	r5, [r4, #20]
 8013e8c:	443e      	add	r6, r7
 8013e8e:	1bed      	subs	r5, r5, r7
 8013e90:	6026      	str	r6, [r4, #0]
 8013e92:	60a5      	str	r5, [r4, #8]
 8013e94:	464e      	mov	r6, r9
 8013e96:	454e      	cmp	r6, r9
 8013e98:	d900      	bls.n	8013e9c <__ssputs_r+0x84>
 8013e9a:	464e      	mov	r6, r9
 8013e9c:	4632      	mov	r2, r6
 8013e9e:	4641      	mov	r1, r8
 8013ea0:	6820      	ldr	r0, [r4, #0]
 8013ea2:	f000 fb19 	bl	80144d8 <memmove>
 8013ea6:	68a3      	ldr	r3, [r4, #8]
 8013ea8:	1b9b      	subs	r3, r3, r6
 8013eaa:	60a3      	str	r3, [r4, #8]
 8013eac:	6823      	ldr	r3, [r4, #0]
 8013eae:	441e      	add	r6, r3
 8013eb0:	6026      	str	r6, [r4, #0]
 8013eb2:	2000      	movs	r0, #0
 8013eb4:	e7dc      	b.n	8013e70 <__ssputs_r+0x58>
 8013eb6:	462a      	mov	r2, r5
 8013eb8:	f000 fb29 	bl	801450e <_realloc_r>
 8013ebc:	4606      	mov	r6, r0
 8013ebe:	2800      	cmp	r0, #0
 8013ec0:	d1e2      	bne.n	8013e88 <__ssputs_r+0x70>
 8013ec2:	6921      	ldr	r1, [r4, #16]
 8013ec4:	4650      	mov	r0, sl
 8013ec6:	f7ff feff 	bl	8013cc8 <_free_r>
 8013eca:	e7c8      	b.n	8013e5e <__ssputs_r+0x46>

08013ecc <_svfiprintf_r>:
 8013ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ed0:	461d      	mov	r5, r3
 8013ed2:	898b      	ldrh	r3, [r1, #12]
 8013ed4:	061f      	lsls	r7, r3, #24
 8013ed6:	b09d      	sub	sp, #116	; 0x74
 8013ed8:	4680      	mov	r8, r0
 8013eda:	460c      	mov	r4, r1
 8013edc:	4616      	mov	r6, r2
 8013ede:	d50f      	bpl.n	8013f00 <_svfiprintf_r+0x34>
 8013ee0:	690b      	ldr	r3, [r1, #16]
 8013ee2:	b96b      	cbnz	r3, 8013f00 <_svfiprintf_r+0x34>
 8013ee4:	2140      	movs	r1, #64	; 0x40
 8013ee6:	f7ff ff3d 	bl	8013d64 <_malloc_r>
 8013eea:	6020      	str	r0, [r4, #0]
 8013eec:	6120      	str	r0, [r4, #16]
 8013eee:	b928      	cbnz	r0, 8013efc <_svfiprintf_r+0x30>
 8013ef0:	230c      	movs	r3, #12
 8013ef2:	f8c8 3000 	str.w	r3, [r8]
 8013ef6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013efa:	e0c8      	b.n	801408e <_svfiprintf_r+0x1c2>
 8013efc:	2340      	movs	r3, #64	; 0x40
 8013efe:	6163      	str	r3, [r4, #20]
 8013f00:	2300      	movs	r3, #0
 8013f02:	9309      	str	r3, [sp, #36]	; 0x24
 8013f04:	2320      	movs	r3, #32
 8013f06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013f0a:	2330      	movs	r3, #48	; 0x30
 8013f0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013f10:	9503      	str	r5, [sp, #12]
 8013f12:	f04f 0b01 	mov.w	fp, #1
 8013f16:	4637      	mov	r7, r6
 8013f18:	463d      	mov	r5, r7
 8013f1a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013f1e:	b10b      	cbz	r3, 8013f24 <_svfiprintf_r+0x58>
 8013f20:	2b25      	cmp	r3, #37	; 0x25
 8013f22:	d13e      	bne.n	8013fa2 <_svfiprintf_r+0xd6>
 8013f24:	ebb7 0a06 	subs.w	sl, r7, r6
 8013f28:	d00b      	beq.n	8013f42 <_svfiprintf_r+0x76>
 8013f2a:	4653      	mov	r3, sl
 8013f2c:	4632      	mov	r2, r6
 8013f2e:	4621      	mov	r1, r4
 8013f30:	4640      	mov	r0, r8
 8013f32:	f7ff ff71 	bl	8013e18 <__ssputs_r>
 8013f36:	3001      	adds	r0, #1
 8013f38:	f000 80a4 	beq.w	8014084 <_svfiprintf_r+0x1b8>
 8013f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f3e:	4453      	add	r3, sl
 8013f40:	9309      	str	r3, [sp, #36]	; 0x24
 8013f42:	783b      	ldrb	r3, [r7, #0]
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	f000 809d 	beq.w	8014084 <_svfiprintf_r+0x1b8>
 8013f4a:	2300      	movs	r3, #0
 8013f4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013f50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013f54:	9304      	str	r3, [sp, #16]
 8013f56:	9307      	str	r3, [sp, #28]
 8013f58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013f5c:	931a      	str	r3, [sp, #104]	; 0x68
 8013f5e:	462f      	mov	r7, r5
 8013f60:	2205      	movs	r2, #5
 8013f62:	f817 1b01 	ldrb.w	r1, [r7], #1
 8013f66:	4850      	ldr	r0, [pc, #320]	; (80140a8 <_svfiprintf_r+0x1dc>)
 8013f68:	f7ec f93a 	bl	80001e0 <memchr>
 8013f6c:	9b04      	ldr	r3, [sp, #16]
 8013f6e:	b9d0      	cbnz	r0, 8013fa6 <_svfiprintf_r+0xda>
 8013f70:	06d9      	lsls	r1, r3, #27
 8013f72:	bf44      	itt	mi
 8013f74:	2220      	movmi	r2, #32
 8013f76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013f7a:	071a      	lsls	r2, r3, #28
 8013f7c:	bf44      	itt	mi
 8013f7e:	222b      	movmi	r2, #43	; 0x2b
 8013f80:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013f84:	782a      	ldrb	r2, [r5, #0]
 8013f86:	2a2a      	cmp	r2, #42	; 0x2a
 8013f88:	d015      	beq.n	8013fb6 <_svfiprintf_r+0xea>
 8013f8a:	9a07      	ldr	r2, [sp, #28]
 8013f8c:	462f      	mov	r7, r5
 8013f8e:	2000      	movs	r0, #0
 8013f90:	250a      	movs	r5, #10
 8013f92:	4639      	mov	r1, r7
 8013f94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013f98:	3b30      	subs	r3, #48	; 0x30
 8013f9a:	2b09      	cmp	r3, #9
 8013f9c:	d94d      	bls.n	801403a <_svfiprintf_r+0x16e>
 8013f9e:	b1b8      	cbz	r0, 8013fd0 <_svfiprintf_r+0x104>
 8013fa0:	e00f      	b.n	8013fc2 <_svfiprintf_r+0xf6>
 8013fa2:	462f      	mov	r7, r5
 8013fa4:	e7b8      	b.n	8013f18 <_svfiprintf_r+0x4c>
 8013fa6:	4a40      	ldr	r2, [pc, #256]	; (80140a8 <_svfiprintf_r+0x1dc>)
 8013fa8:	1a80      	subs	r0, r0, r2
 8013faa:	fa0b f000 	lsl.w	r0, fp, r0
 8013fae:	4318      	orrs	r0, r3
 8013fb0:	9004      	str	r0, [sp, #16]
 8013fb2:	463d      	mov	r5, r7
 8013fb4:	e7d3      	b.n	8013f5e <_svfiprintf_r+0x92>
 8013fb6:	9a03      	ldr	r2, [sp, #12]
 8013fb8:	1d11      	adds	r1, r2, #4
 8013fba:	6812      	ldr	r2, [r2, #0]
 8013fbc:	9103      	str	r1, [sp, #12]
 8013fbe:	2a00      	cmp	r2, #0
 8013fc0:	db01      	blt.n	8013fc6 <_svfiprintf_r+0xfa>
 8013fc2:	9207      	str	r2, [sp, #28]
 8013fc4:	e004      	b.n	8013fd0 <_svfiprintf_r+0x104>
 8013fc6:	4252      	negs	r2, r2
 8013fc8:	f043 0302 	orr.w	r3, r3, #2
 8013fcc:	9207      	str	r2, [sp, #28]
 8013fce:	9304      	str	r3, [sp, #16]
 8013fd0:	783b      	ldrb	r3, [r7, #0]
 8013fd2:	2b2e      	cmp	r3, #46	; 0x2e
 8013fd4:	d10c      	bne.n	8013ff0 <_svfiprintf_r+0x124>
 8013fd6:	787b      	ldrb	r3, [r7, #1]
 8013fd8:	2b2a      	cmp	r3, #42	; 0x2a
 8013fda:	d133      	bne.n	8014044 <_svfiprintf_r+0x178>
 8013fdc:	9b03      	ldr	r3, [sp, #12]
 8013fde:	1d1a      	adds	r2, r3, #4
 8013fe0:	681b      	ldr	r3, [r3, #0]
 8013fe2:	9203      	str	r2, [sp, #12]
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	bfb8      	it	lt
 8013fe8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013fec:	3702      	adds	r7, #2
 8013fee:	9305      	str	r3, [sp, #20]
 8013ff0:	4d2e      	ldr	r5, [pc, #184]	; (80140ac <_svfiprintf_r+0x1e0>)
 8013ff2:	7839      	ldrb	r1, [r7, #0]
 8013ff4:	2203      	movs	r2, #3
 8013ff6:	4628      	mov	r0, r5
 8013ff8:	f7ec f8f2 	bl	80001e0 <memchr>
 8013ffc:	b138      	cbz	r0, 801400e <_svfiprintf_r+0x142>
 8013ffe:	2340      	movs	r3, #64	; 0x40
 8014000:	1b40      	subs	r0, r0, r5
 8014002:	fa03 f000 	lsl.w	r0, r3, r0
 8014006:	9b04      	ldr	r3, [sp, #16]
 8014008:	4303      	orrs	r3, r0
 801400a:	3701      	adds	r7, #1
 801400c:	9304      	str	r3, [sp, #16]
 801400e:	7839      	ldrb	r1, [r7, #0]
 8014010:	4827      	ldr	r0, [pc, #156]	; (80140b0 <_svfiprintf_r+0x1e4>)
 8014012:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014016:	2206      	movs	r2, #6
 8014018:	1c7e      	adds	r6, r7, #1
 801401a:	f7ec f8e1 	bl	80001e0 <memchr>
 801401e:	2800      	cmp	r0, #0
 8014020:	d038      	beq.n	8014094 <_svfiprintf_r+0x1c8>
 8014022:	4b24      	ldr	r3, [pc, #144]	; (80140b4 <_svfiprintf_r+0x1e8>)
 8014024:	bb13      	cbnz	r3, 801406c <_svfiprintf_r+0x1a0>
 8014026:	9b03      	ldr	r3, [sp, #12]
 8014028:	3307      	adds	r3, #7
 801402a:	f023 0307 	bic.w	r3, r3, #7
 801402e:	3308      	adds	r3, #8
 8014030:	9303      	str	r3, [sp, #12]
 8014032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014034:	444b      	add	r3, r9
 8014036:	9309      	str	r3, [sp, #36]	; 0x24
 8014038:	e76d      	b.n	8013f16 <_svfiprintf_r+0x4a>
 801403a:	fb05 3202 	mla	r2, r5, r2, r3
 801403e:	2001      	movs	r0, #1
 8014040:	460f      	mov	r7, r1
 8014042:	e7a6      	b.n	8013f92 <_svfiprintf_r+0xc6>
 8014044:	2300      	movs	r3, #0
 8014046:	3701      	adds	r7, #1
 8014048:	9305      	str	r3, [sp, #20]
 801404a:	4619      	mov	r1, r3
 801404c:	250a      	movs	r5, #10
 801404e:	4638      	mov	r0, r7
 8014050:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014054:	3a30      	subs	r2, #48	; 0x30
 8014056:	2a09      	cmp	r2, #9
 8014058:	d903      	bls.n	8014062 <_svfiprintf_r+0x196>
 801405a:	2b00      	cmp	r3, #0
 801405c:	d0c8      	beq.n	8013ff0 <_svfiprintf_r+0x124>
 801405e:	9105      	str	r1, [sp, #20]
 8014060:	e7c6      	b.n	8013ff0 <_svfiprintf_r+0x124>
 8014062:	fb05 2101 	mla	r1, r5, r1, r2
 8014066:	2301      	movs	r3, #1
 8014068:	4607      	mov	r7, r0
 801406a:	e7f0      	b.n	801404e <_svfiprintf_r+0x182>
 801406c:	ab03      	add	r3, sp, #12
 801406e:	9300      	str	r3, [sp, #0]
 8014070:	4622      	mov	r2, r4
 8014072:	4b11      	ldr	r3, [pc, #68]	; (80140b8 <_svfiprintf_r+0x1ec>)
 8014074:	a904      	add	r1, sp, #16
 8014076:	4640      	mov	r0, r8
 8014078:	f7fc fb06 	bl	8010688 <_printf_float>
 801407c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8014080:	4681      	mov	r9, r0
 8014082:	d1d6      	bne.n	8014032 <_svfiprintf_r+0x166>
 8014084:	89a3      	ldrh	r3, [r4, #12]
 8014086:	065b      	lsls	r3, r3, #25
 8014088:	f53f af35 	bmi.w	8013ef6 <_svfiprintf_r+0x2a>
 801408c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801408e:	b01d      	add	sp, #116	; 0x74
 8014090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014094:	ab03      	add	r3, sp, #12
 8014096:	9300      	str	r3, [sp, #0]
 8014098:	4622      	mov	r2, r4
 801409a:	4b07      	ldr	r3, [pc, #28]	; (80140b8 <_svfiprintf_r+0x1ec>)
 801409c:	a904      	add	r1, sp, #16
 801409e:	4640      	mov	r0, r8
 80140a0:	f7fc fda8 	bl	8010bf4 <_printf_i>
 80140a4:	e7ea      	b.n	801407c <_svfiprintf_r+0x1b0>
 80140a6:	bf00      	nop
 80140a8:	080168ac 	.word	0x080168ac
 80140ac:	080168b2 	.word	0x080168b2
 80140b0:	080168b6 	.word	0x080168b6
 80140b4:	08010689 	.word	0x08010689
 80140b8:	08013e19 	.word	0x08013e19

080140bc <__sfputc_r>:
 80140bc:	6893      	ldr	r3, [r2, #8]
 80140be:	3b01      	subs	r3, #1
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	b410      	push	{r4}
 80140c4:	6093      	str	r3, [r2, #8]
 80140c6:	da08      	bge.n	80140da <__sfputc_r+0x1e>
 80140c8:	6994      	ldr	r4, [r2, #24]
 80140ca:	42a3      	cmp	r3, r4
 80140cc:	db01      	blt.n	80140d2 <__sfputc_r+0x16>
 80140ce:	290a      	cmp	r1, #10
 80140d0:	d103      	bne.n	80140da <__sfputc_r+0x1e>
 80140d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80140d6:	f7fd bdb7 	b.w	8011c48 <__swbuf_r>
 80140da:	6813      	ldr	r3, [r2, #0]
 80140dc:	1c58      	adds	r0, r3, #1
 80140de:	6010      	str	r0, [r2, #0]
 80140e0:	7019      	strb	r1, [r3, #0]
 80140e2:	4608      	mov	r0, r1
 80140e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80140e8:	4770      	bx	lr

080140ea <__sfputs_r>:
 80140ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80140ec:	4606      	mov	r6, r0
 80140ee:	460f      	mov	r7, r1
 80140f0:	4614      	mov	r4, r2
 80140f2:	18d5      	adds	r5, r2, r3
 80140f4:	42ac      	cmp	r4, r5
 80140f6:	d101      	bne.n	80140fc <__sfputs_r+0x12>
 80140f8:	2000      	movs	r0, #0
 80140fa:	e007      	b.n	801410c <__sfputs_r+0x22>
 80140fc:	463a      	mov	r2, r7
 80140fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014102:	4630      	mov	r0, r6
 8014104:	f7ff ffda 	bl	80140bc <__sfputc_r>
 8014108:	1c43      	adds	r3, r0, #1
 801410a:	d1f3      	bne.n	80140f4 <__sfputs_r+0xa>
 801410c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014110 <_vfiprintf_r>:
 8014110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014114:	460c      	mov	r4, r1
 8014116:	b09d      	sub	sp, #116	; 0x74
 8014118:	4617      	mov	r7, r2
 801411a:	461d      	mov	r5, r3
 801411c:	4606      	mov	r6, r0
 801411e:	b118      	cbz	r0, 8014128 <_vfiprintf_r+0x18>
 8014120:	6983      	ldr	r3, [r0, #24]
 8014122:	b90b      	cbnz	r3, 8014128 <_vfiprintf_r+0x18>
 8014124:	f7fe fd84 	bl	8012c30 <__sinit>
 8014128:	4b7c      	ldr	r3, [pc, #496]	; (801431c <_vfiprintf_r+0x20c>)
 801412a:	429c      	cmp	r4, r3
 801412c:	d158      	bne.n	80141e0 <_vfiprintf_r+0xd0>
 801412e:	6874      	ldr	r4, [r6, #4]
 8014130:	89a3      	ldrh	r3, [r4, #12]
 8014132:	0718      	lsls	r0, r3, #28
 8014134:	d55e      	bpl.n	80141f4 <_vfiprintf_r+0xe4>
 8014136:	6923      	ldr	r3, [r4, #16]
 8014138:	2b00      	cmp	r3, #0
 801413a:	d05b      	beq.n	80141f4 <_vfiprintf_r+0xe4>
 801413c:	2300      	movs	r3, #0
 801413e:	9309      	str	r3, [sp, #36]	; 0x24
 8014140:	2320      	movs	r3, #32
 8014142:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014146:	2330      	movs	r3, #48	; 0x30
 8014148:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801414c:	9503      	str	r5, [sp, #12]
 801414e:	f04f 0b01 	mov.w	fp, #1
 8014152:	46b8      	mov	r8, r7
 8014154:	4645      	mov	r5, r8
 8014156:	f815 3b01 	ldrb.w	r3, [r5], #1
 801415a:	b10b      	cbz	r3, 8014160 <_vfiprintf_r+0x50>
 801415c:	2b25      	cmp	r3, #37	; 0x25
 801415e:	d154      	bne.n	801420a <_vfiprintf_r+0xfa>
 8014160:	ebb8 0a07 	subs.w	sl, r8, r7
 8014164:	d00b      	beq.n	801417e <_vfiprintf_r+0x6e>
 8014166:	4653      	mov	r3, sl
 8014168:	463a      	mov	r2, r7
 801416a:	4621      	mov	r1, r4
 801416c:	4630      	mov	r0, r6
 801416e:	f7ff ffbc 	bl	80140ea <__sfputs_r>
 8014172:	3001      	adds	r0, #1
 8014174:	f000 80c2 	beq.w	80142fc <_vfiprintf_r+0x1ec>
 8014178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801417a:	4453      	add	r3, sl
 801417c:	9309      	str	r3, [sp, #36]	; 0x24
 801417e:	f898 3000 	ldrb.w	r3, [r8]
 8014182:	2b00      	cmp	r3, #0
 8014184:	f000 80ba 	beq.w	80142fc <_vfiprintf_r+0x1ec>
 8014188:	2300      	movs	r3, #0
 801418a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801418e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014192:	9304      	str	r3, [sp, #16]
 8014194:	9307      	str	r3, [sp, #28]
 8014196:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801419a:	931a      	str	r3, [sp, #104]	; 0x68
 801419c:	46a8      	mov	r8, r5
 801419e:	2205      	movs	r2, #5
 80141a0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80141a4:	485e      	ldr	r0, [pc, #376]	; (8014320 <_vfiprintf_r+0x210>)
 80141a6:	f7ec f81b 	bl	80001e0 <memchr>
 80141aa:	9b04      	ldr	r3, [sp, #16]
 80141ac:	bb78      	cbnz	r0, 801420e <_vfiprintf_r+0xfe>
 80141ae:	06d9      	lsls	r1, r3, #27
 80141b0:	bf44      	itt	mi
 80141b2:	2220      	movmi	r2, #32
 80141b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80141b8:	071a      	lsls	r2, r3, #28
 80141ba:	bf44      	itt	mi
 80141bc:	222b      	movmi	r2, #43	; 0x2b
 80141be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80141c2:	782a      	ldrb	r2, [r5, #0]
 80141c4:	2a2a      	cmp	r2, #42	; 0x2a
 80141c6:	d02a      	beq.n	801421e <_vfiprintf_r+0x10e>
 80141c8:	9a07      	ldr	r2, [sp, #28]
 80141ca:	46a8      	mov	r8, r5
 80141cc:	2000      	movs	r0, #0
 80141ce:	250a      	movs	r5, #10
 80141d0:	4641      	mov	r1, r8
 80141d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80141d6:	3b30      	subs	r3, #48	; 0x30
 80141d8:	2b09      	cmp	r3, #9
 80141da:	d969      	bls.n	80142b0 <_vfiprintf_r+0x1a0>
 80141dc:	b360      	cbz	r0, 8014238 <_vfiprintf_r+0x128>
 80141de:	e024      	b.n	801422a <_vfiprintf_r+0x11a>
 80141e0:	4b50      	ldr	r3, [pc, #320]	; (8014324 <_vfiprintf_r+0x214>)
 80141e2:	429c      	cmp	r4, r3
 80141e4:	d101      	bne.n	80141ea <_vfiprintf_r+0xda>
 80141e6:	68b4      	ldr	r4, [r6, #8]
 80141e8:	e7a2      	b.n	8014130 <_vfiprintf_r+0x20>
 80141ea:	4b4f      	ldr	r3, [pc, #316]	; (8014328 <_vfiprintf_r+0x218>)
 80141ec:	429c      	cmp	r4, r3
 80141ee:	bf08      	it	eq
 80141f0:	68f4      	ldreq	r4, [r6, #12]
 80141f2:	e79d      	b.n	8014130 <_vfiprintf_r+0x20>
 80141f4:	4621      	mov	r1, r4
 80141f6:	4630      	mov	r0, r6
 80141f8:	f7fd fd78 	bl	8011cec <__swsetup_r>
 80141fc:	2800      	cmp	r0, #0
 80141fe:	d09d      	beq.n	801413c <_vfiprintf_r+0x2c>
 8014200:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014204:	b01d      	add	sp, #116	; 0x74
 8014206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801420a:	46a8      	mov	r8, r5
 801420c:	e7a2      	b.n	8014154 <_vfiprintf_r+0x44>
 801420e:	4a44      	ldr	r2, [pc, #272]	; (8014320 <_vfiprintf_r+0x210>)
 8014210:	1a80      	subs	r0, r0, r2
 8014212:	fa0b f000 	lsl.w	r0, fp, r0
 8014216:	4318      	orrs	r0, r3
 8014218:	9004      	str	r0, [sp, #16]
 801421a:	4645      	mov	r5, r8
 801421c:	e7be      	b.n	801419c <_vfiprintf_r+0x8c>
 801421e:	9a03      	ldr	r2, [sp, #12]
 8014220:	1d11      	adds	r1, r2, #4
 8014222:	6812      	ldr	r2, [r2, #0]
 8014224:	9103      	str	r1, [sp, #12]
 8014226:	2a00      	cmp	r2, #0
 8014228:	db01      	blt.n	801422e <_vfiprintf_r+0x11e>
 801422a:	9207      	str	r2, [sp, #28]
 801422c:	e004      	b.n	8014238 <_vfiprintf_r+0x128>
 801422e:	4252      	negs	r2, r2
 8014230:	f043 0302 	orr.w	r3, r3, #2
 8014234:	9207      	str	r2, [sp, #28]
 8014236:	9304      	str	r3, [sp, #16]
 8014238:	f898 3000 	ldrb.w	r3, [r8]
 801423c:	2b2e      	cmp	r3, #46	; 0x2e
 801423e:	d10e      	bne.n	801425e <_vfiprintf_r+0x14e>
 8014240:	f898 3001 	ldrb.w	r3, [r8, #1]
 8014244:	2b2a      	cmp	r3, #42	; 0x2a
 8014246:	d138      	bne.n	80142ba <_vfiprintf_r+0x1aa>
 8014248:	9b03      	ldr	r3, [sp, #12]
 801424a:	1d1a      	adds	r2, r3, #4
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	9203      	str	r2, [sp, #12]
 8014250:	2b00      	cmp	r3, #0
 8014252:	bfb8      	it	lt
 8014254:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014258:	f108 0802 	add.w	r8, r8, #2
 801425c:	9305      	str	r3, [sp, #20]
 801425e:	4d33      	ldr	r5, [pc, #204]	; (801432c <_vfiprintf_r+0x21c>)
 8014260:	f898 1000 	ldrb.w	r1, [r8]
 8014264:	2203      	movs	r2, #3
 8014266:	4628      	mov	r0, r5
 8014268:	f7eb ffba 	bl	80001e0 <memchr>
 801426c:	b140      	cbz	r0, 8014280 <_vfiprintf_r+0x170>
 801426e:	2340      	movs	r3, #64	; 0x40
 8014270:	1b40      	subs	r0, r0, r5
 8014272:	fa03 f000 	lsl.w	r0, r3, r0
 8014276:	9b04      	ldr	r3, [sp, #16]
 8014278:	4303      	orrs	r3, r0
 801427a:	f108 0801 	add.w	r8, r8, #1
 801427e:	9304      	str	r3, [sp, #16]
 8014280:	f898 1000 	ldrb.w	r1, [r8]
 8014284:	482a      	ldr	r0, [pc, #168]	; (8014330 <_vfiprintf_r+0x220>)
 8014286:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801428a:	2206      	movs	r2, #6
 801428c:	f108 0701 	add.w	r7, r8, #1
 8014290:	f7eb ffa6 	bl	80001e0 <memchr>
 8014294:	2800      	cmp	r0, #0
 8014296:	d037      	beq.n	8014308 <_vfiprintf_r+0x1f8>
 8014298:	4b26      	ldr	r3, [pc, #152]	; (8014334 <_vfiprintf_r+0x224>)
 801429a:	bb1b      	cbnz	r3, 80142e4 <_vfiprintf_r+0x1d4>
 801429c:	9b03      	ldr	r3, [sp, #12]
 801429e:	3307      	adds	r3, #7
 80142a0:	f023 0307 	bic.w	r3, r3, #7
 80142a4:	3308      	adds	r3, #8
 80142a6:	9303      	str	r3, [sp, #12]
 80142a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80142aa:	444b      	add	r3, r9
 80142ac:	9309      	str	r3, [sp, #36]	; 0x24
 80142ae:	e750      	b.n	8014152 <_vfiprintf_r+0x42>
 80142b0:	fb05 3202 	mla	r2, r5, r2, r3
 80142b4:	2001      	movs	r0, #1
 80142b6:	4688      	mov	r8, r1
 80142b8:	e78a      	b.n	80141d0 <_vfiprintf_r+0xc0>
 80142ba:	2300      	movs	r3, #0
 80142bc:	f108 0801 	add.w	r8, r8, #1
 80142c0:	9305      	str	r3, [sp, #20]
 80142c2:	4619      	mov	r1, r3
 80142c4:	250a      	movs	r5, #10
 80142c6:	4640      	mov	r0, r8
 80142c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80142cc:	3a30      	subs	r2, #48	; 0x30
 80142ce:	2a09      	cmp	r2, #9
 80142d0:	d903      	bls.n	80142da <_vfiprintf_r+0x1ca>
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d0c3      	beq.n	801425e <_vfiprintf_r+0x14e>
 80142d6:	9105      	str	r1, [sp, #20]
 80142d8:	e7c1      	b.n	801425e <_vfiprintf_r+0x14e>
 80142da:	fb05 2101 	mla	r1, r5, r1, r2
 80142de:	2301      	movs	r3, #1
 80142e0:	4680      	mov	r8, r0
 80142e2:	e7f0      	b.n	80142c6 <_vfiprintf_r+0x1b6>
 80142e4:	ab03      	add	r3, sp, #12
 80142e6:	9300      	str	r3, [sp, #0]
 80142e8:	4622      	mov	r2, r4
 80142ea:	4b13      	ldr	r3, [pc, #76]	; (8014338 <_vfiprintf_r+0x228>)
 80142ec:	a904      	add	r1, sp, #16
 80142ee:	4630      	mov	r0, r6
 80142f0:	f7fc f9ca 	bl	8010688 <_printf_float>
 80142f4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80142f8:	4681      	mov	r9, r0
 80142fa:	d1d5      	bne.n	80142a8 <_vfiprintf_r+0x198>
 80142fc:	89a3      	ldrh	r3, [r4, #12]
 80142fe:	065b      	lsls	r3, r3, #25
 8014300:	f53f af7e 	bmi.w	8014200 <_vfiprintf_r+0xf0>
 8014304:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014306:	e77d      	b.n	8014204 <_vfiprintf_r+0xf4>
 8014308:	ab03      	add	r3, sp, #12
 801430a:	9300      	str	r3, [sp, #0]
 801430c:	4622      	mov	r2, r4
 801430e:	4b0a      	ldr	r3, [pc, #40]	; (8014338 <_vfiprintf_r+0x228>)
 8014310:	a904      	add	r1, sp, #16
 8014312:	4630      	mov	r0, r6
 8014314:	f7fc fc6e 	bl	8010bf4 <_printf_i>
 8014318:	e7ec      	b.n	80142f4 <_vfiprintf_r+0x1e4>
 801431a:	bf00      	nop
 801431c:	08016760 	.word	0x08016760
 8014320:	080168ac 	.word	0x080168ac
 8014324:	08016780 	.word	0x08016780
 8014328:	08016740 	.word	0x08016740
 801432c:	080168b2 	.word	0x080168b2
 8014330:	080168b6 	.word	0x080168b6
 8014334:	08010689 	.word	0x08010689
 8014338:	080140eb 	.word	0x080140eb

0801433c <_sbrk_r>:
 801433c:	b538      	push	{r3, r4, r5, lr}
 801433e:	4c06      	ldr	r4, [pc, #24]	; (8014358 <_sbrk_r+0x1c>)
 8014340:	2300      	movs	r3, #0
 8014342:	4605      	mov	r5, r0
 8014344:	4608      	mov	r0, r1
 8014346:	6023      	str	r3, [r4, #0]
 8014348:	f7ef fca8 	bl	8003c9c <_sbrk>
 801434c:	1c43      	adds	r3, r0, #1
 801434e:	d102      	bne.n	8014356 <_sbrk_r+0x1a>
 8014350:	6823      	ldr	r3, [r4, #0]
 8014352:	b103      	cbz	r3, 8014356 <_sbrk_r+0x1a>
 8014354:	602b      	str	r3, [r5, #0]
 8014356:	bd38      	pop	{r3, r4, r5, pc}
 8014358:	20010200 	.word	0x20010200

0801435c <nanf>:
 801435c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014364 <nanf+0x8>
 8014360:	4770      	bx	lr
 8014362:	bf00      	nop
 8014364:	7fc00000 	.word	0x7fc00000

08014368 <__sread>:
 8014368:	b510      	push	{r4, lr}
 801436a:	460c      	mov	r4, r1
 801436c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014370:	f000 f8f4 	bl	801455c <_read_r>
 8014374:	2800      	cmp	r0, #0
 8014376:	bfab      	itete	ge
 8014378:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801437a:	89a3      	ldrhlt	r3, [r4, #12]
 801437c:	181b      	addge	r3, r3, r0
 801437e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014382:	bfac      	ite	ge
 8014384:	6563      	strge	r3, [r4, #84]	; 0x54
 8014386:	81a3      	strhlt	r3, [r4, #12]
 8014388:	bd10      	pop	{r4, pc}

0801438a <__swrite>:
 801438a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801438e:	461f      	mov	r7, r3
 8014390:	898b      	ldrh	r3, [r1, #12]
 8014392:	05db      	lsls	r3, r3, #23
 8014394:	4605      	mov	r5, r0
 8014396:	460c      	mov	r4, r1
 8014398:	4616      	mov	r6, r2
 801439a:	d505      	bpl.n	80143a8 <__swrite+0x1e>
 801439c:	2302      	movs	r3, #2
 801439e:	2200      	movs	r2, #0
 80143a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80143a4:	f000 f886 	bl	80144b4 <_lseek_r>
 80143a8:	89a3      	ldrh	r3, [r4, #12]
 80143aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80143ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80143b2:	81a3      	strh	r3, [r4, #12]
 80143b4:	4632      	mov	r2, r6
 80143b6:	463b      	mov	r3, r7
 80143b8:	4628      	mov	r0, r5
 80143ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80143be:	f000 b835 	b.w	801442c <_write_r>

080143c2 <__sseek>:
 80143c2:	b510      	push	{r4, lr}
 80143c4:	460c      	mov	r4, r1
 80143c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80143ca:	f000 f873 	bl	80144b4 <_lseek_r>
 80143ce:	1c43      	adds	r3, r0, #1
 80143d0:	89a3      	ldrh	r3, [r4, #12]
 80143d2:	bf15      	itete	ne
 80143d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80143d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80143da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80143de:	81a3      	strheq	r3, [r4, #12]
 80143e0:	bf18      	it	ne
 80143e2:	81a3      	strhne	r3, [r4, #12]
 80143e4:	bd10      	pop	{r4, pc}

080143e6 <__sclose>:
 80143e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80143ea:	f000 b831 	b.w	8014450 <_close_r>

080143ee <strncmp>:
 80143ee:	b510      	push	{r4, lr}
 80143f0:	b16a      	cbz	r2, 801440e <strncmp+0x20>
 80143f2:	3901      	subs	r1, #1
 80143f4:	1884      	adds	r4, r0, r2
 80143f6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80143fa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80143fe:	4293      	cmp	r3, r2
 8014400:	d103      	bne.n	801440a <strncmp+0x1c>
 8014402:	42a0      	cmp	r0, r4
 8014404:	d001      	beq.n	801440a <strncmp+0x1c>
 8014406:	2b00      	cmp	r3, #0
 8014408:	d1f5      	bne.n	80143f6 <strncmp+0x8>
 801440a:	1a98      	subs	r0, r3, r2
 801440c:	bd10      	pop	{r4, pc}
 801440e:	4610      	mov	r0, r2
 8014410:	e7fc      	b.n	801440c <strncmp+0x1e>

08014412 <__ascii_wctomb>:
 8014412:	b149      	cbz	r1, 8014428 <__ascii_wctomb+0x16>
 8014414:	2aff      	cmp	r2, #255	; 0xff
 8014416:	bf85      	ittet	hi
 8014418:	238a      	movhi	r3, #138	; 0x8a
 801441a:	6003      	strhi	r3, [r0, #0]
 801441c:	700a      	strbls	r2, [r1, #0]
 801441e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8014422:	bf98      	it	ls
 8014424:	2001      	movls	r0, #1
 8014426:	4770      	bx	lr
 8014428:	4608      	mov	r0, r1
 801442a:	4770      	bx	lr

0801442c <_write_r>:
 801442c:	b538      	push	{r3, r4, r5, lr}
 801442e:	4c07      	ldr	r4, [pc, #28]	; (801444c <_write_r+0x20>)
 8014430:	4605      	mov	r5, r0
 8014432:	4608      	mov	r0, r1
 8014434:	4611      	mov	r1, r2
 8014436:	2200      	movs	r2, #0
 8014438:	6022      	str	r2, [r4, #0]
 801443a:	461a      	mov	r2, r3
 801443c:	f7ef fbde 	bl	8003bfc <_write>
 8014440:	1c43      	adds	r3, r0, #1
 8014442:	d102      	bne.n	801444a <_write_r+0x1e>
 8014444:	6823      	ldr	r3, [r4, #0]
 8014446:	b103      	cbz	r3, 801444a <_write_r+0x1e>
 8014448:	602b      	str	r3, [r5, #0]
 801444a:	bd38      	pop	{r3, r4, r5, pc}
 801444c:	20010200 	.word	0x20010200

08014450 <_close_r>:
 8014450:	b538      	push	{r3, r4, r5, lr}
 8014452:	4c06      	ldr	r4, [pc, #24]	; (801446c <_close_r+0x1c>)
 8014454:	2300      	movs	r3, #0
 8014456:	4605      	mov	r5, r0
 8014458:	4608      	mov	r0, r1
 801445a:	6023      	str	r3, [r4, #0]
 801445c:	f7ef fbea 	bl	8003c34 <_close>
 8014460:	1c43      	adds	r3, r0, #1
 8014462:	d102      	bne.n	801446a <_close_r+0x1a>
 8014464:	6823      	ldr	r3, [r4, #0]
 8014466:	b103      	cbz	r3, 801446a <_close_r+0x1a>
 8014468:	602b      	str	r3, [r5, #0]
 801446a:	bd38      	pop	{r3, r4, r5, pc}
 801446c:	20010200 	.word	0x20010200

08014470 <_fstat_r>:
 8014470:	b538      	push	{r3, r4, r5, lr}
 8014472:	4c07      	ldr	r4, [pc, #28]	; (8014490 <_fstat_r+0x20>)
 8014474:	2300      	movs	r3, #0
 8014476:	4605      	mov	r5, r0
 8014478:	4608      	mov	r0, r1
 801447a:	4611      	mov	r1, r2
 801447c:	6023      	str	r3, [r4, #0]
 801447e:	f7ef fbe5 	bl	8003c4c <_fstat>
 8014482:	1c43      	adds	r3, r0, #1
 8014484:	d102      	bne.n	801448c <_fstat_r+0x1c>
 8014486:	6823      	ldr	r3, [r4, #0]
 8014488:	b103      	cbz	r3, 801448c <_fstat_r+0x1c>
 801448a:	602b      	str	r3, [r5, #0]
 801448c:	bd38      	pop	{r3, r4, r5, pc}
 801448e:	bf00      	nop
 8014490:	20010200 	.word	0x20010200

08014494 <_isatty_r>:
 8014494:	b538      	push	{r3, r4, r5, lr}
 8014496:	4c06      	ldr	r4, [pc, #24]	; (80144b0 <_isatty_r+0x1c>)
 8014498:	2300      	movs	r3, #0
 801449a:	4605      	mov	r5, r0
 801449c:	4608      	mov	r0, r1
 801449e:	6023      	str	r3, [r4, #0]
 80144a0:	f7ef fbe4 	bl	8003c6c <_isatty>
 80144a4:	1c43      	adds	r3, r0, #1
 80144a6:	d102      	bne.n	80144ae <_isatty_r+0x1a>
 80144a8:	6823      	ldr	r3, [r4, #0]
 80144aa:	b103      	cbz	r3, 80144ae <_isatty_r+0x1a>
 80144ac:	602b      	str	r3, [r5, #0]
 80144ae:	bd38      	pop	{r3, r4, r5, pc}
 80144b0:	20010200 	.word	0x20010200

080144b4 <_lseek_r>:
 80144b4:	b538      	push	{r3, r4, r5, lr}
 80144b6:	4c07      	ldr	r4, [pc, #28]	; (80144d4 <_lseek_r+0x20>)
 80144b8:	4605      	mov	r5, r0
 80144ba:	4608      	mov	r0, r1
 80144bc:	4611      	mov	r1, r2
 80144be:	2200      	movs	r2, #0
 80144c0:	6022      	str	r2, [r4, #0]
 80144c2:	461a      	mov	r2, r3
 80144c4:	f7ef fbdd 	bl	8003c82 <_lseek>
 80144c8:	1c43      	adds	r3, r0, #1
 80144ca:	d102      	bne.n	80144d2 <_lseek_r+0x1e>
 80144cc:	6823      	ldr	r3, [r4, #0]
 80144ce:	b103      	cbz	r3, 80144d2 <_lseek_r+0x1e>
 80144d0:	602b      	str	r3, [r5, #0]
 80144d2:	bd38      	pop	{r3, r4, r5, pc}
 80144d4:	20010200 	.word	0x20010200

080144d8 <memmove>:
 80144d8:	4288      	cmp	r0, r1
 80144da:	b510      	push	{r4, lr}
 80144dc:	eb01 0302 	add.w	r3, r1, r2
 80144e0:	d807      	bhi.n	80144f2 <memmove+0x1a>
 80144e2:	1e42      	subs	r2, r0, #1
 80144e4:	4299      	cmp	r1, r3
 80144e6:	d00a      	beq.n	80144fe <memmove+0x26>
 80144e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80144ec:	f802 4f01 	strb.w	r4, [r2, #1]!
 80144f0:	e7f8      	b.n	80144e4 <memmove+0xc>
 80144f2:	4283      	cmp	r3, r0
 80144f4:	d9f5      	bls.n	80144e2 <memmove+0xa>
 80144f6:	1881      	adds	r1, r0, r2
 80144f8:	1ad2      	subs	r2, r2, r3
 80144fa:	42d3      	cmn	r3, r2
 80144fc:	d100      	bne.n	8014500 <memmove+0x28>
 80144fe:	bd10      	pop	{r4, pc}
 8014500:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014504:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8014508:	e7f7      	b.n	80144fa <memmove+0x22>

0801450a <__malloc_lock>:
 801450a:	4770      	bx	lr

0801450c <__malloc_unlock>:
 801450c:	4770      	bx	lr

0801450e <_realloc_r>:
 801450e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014510:	4607      	mov	r7, r0
 8014512:	4614      	mov	r4, r2
 8014514:	460e      	mov	r6, r1
 8014516:	b921      	cbnz	r1, 8014522 <_realloc_r+0x14>
 8014518:	4611      	mov	r1, r2
 801451a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801451e:	f7ff bc21 	b.w	8013d64 <_malloc_r>
 8014522:	b922      	cbnz	r2, 801452e <_realloc_r+0x20>
 8014524:	f7ff fbd0 	bl	8013cc8 <_free_r>
 8014528:	4625      	mov	r5, r4
 801452a:	4628      	mov	r0, r5
 801452c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801452e:	f000 f827 	bl	8014580 <_malloc_usable_size_r>
 8014532:	42a0      	cmp	r0, r4
 8014534:	d20f      	bcs.n	8014556 <_realloc_r+0x48>
 8014536:	4621      	mov	r1, r4
 8014538:	4638      	mov	r0, r7
 801453a:	f7ff fc13 	bl	8013d64 <_malloc_r>
 801453e:	4605      	mov	r5, r0
 8014540:	2800      	cmp	r0, #0
 8014542:	d0f2      	beq.n	801452a <_realloc_r+0x1c>
 8014544:	4631      	mov	r1, r6
 8014546:	4622      	mov	r2, r4
 8014548:	f7fb fff6 	bl	8010538 <memcpy>
 801454c:	4631      	mov	r1, r6
 801454e:	4638      	mov	r0, r7
 8014550:	f7ff fbba 	bl	8013cc8 <_free_r>
 8014554:	e7e9      	b.n	801452a <_realloc_r+0x1c>
 8014556:	4635      	mov	r5, r6
 8014558:	e7e7      	b.n	801452a <_realloc_r+0x1c>
	...

0801455c <_read_r>:
 801455c:	b538      	push	{r3, r4, r5, lr}
 801455e:	4c07      	ldr	r4, [pc, #28]	; (801457c <_read_r+0x20>)
 8014560:	4605      	mov	r5, r0
 8014562:	4608      	mov	r0, r1
 8014564:	4611      	mov	r1, r2
 8014566:	2200      	movs	r2, #0
 8014568:	6022      	str	r2, [r4, #0]
 801456a:	461a      	mov	r2, r3
 801456c:	f7ef fb29 	bl	8003bc2 <_read>
 8014570:	1c43      	adds	r3, r0, #1
 8014572:	d102      	bne.n	801457a <_read_r+0x1e>
 8014574:	6823      	ldr	r3, [r4, #0]
 8014576:	b103      	cbz	r3, 801457a <_read_r+0x1e>
 8014578:	602b      	str	r3, [r5, #0]
 801457a:	bd38      	pop	{r3, r4, r5, pc}
 801457c:	20010200 	.word	0x20010200

08014580 <_malloc_usable_size_r>:
 8014580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014584:	1f18      	subs	r0, r3, #4
 8014586:	2b00      	cmp	r3, #0
 8014588:	bfbc      	itt	lt
 801458a:	580b      	ldrlt	r3, [r1, r0]
 801458c:	18c0      	addlt	r0, r0, r3
 801458e:	4770      	bx	lr

08014590 <pow>:
 8014590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014594:	ed2d 8b04 	vpush	{d8-d9}
 8014598:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801486c <pow+0x2dc>
 801459c:	b08d      	sub	sp, #52	; 0x34
 801459e:	ec57 6b10 	vmov	r6, r7, d0
 80145a2:	ec55 4b11 	vmov	r4, r5, d1
 80145a6:	f000 fb73 	bl	8014c90 <__ieee754_pow>
 80145aa:	f999 3000 	ldrsb.w	r3, [r9]
 80145ae:	9300      	str	r3, [sp, #0]
 80145b0:	3301      	adds	r3, #1
 80145b2:	eeb0 8a40 	vmov.f32	s16, s0
 80145b6:	eef0 8a60 	vmov.f32	s17, s1
 80145ba:	46c8      	mov	r8, r9
 80145bc:	d05f      	beq.n	801467e <pow+0xee>
 80145be:	4622      	mov	r2, r4
 80145c0:	462b      	mov	r3, r5
 80145c2:	4620      	mov	r0, r4
 80145c4:	4629      	mov	r1, r5
 80145c6:	f7ec fab1 	bl	8000b2c <__aeabi_dcmpun>
 80145ca:	4683      	mov	fp, r0
 80145cc:	2800      	cmp	r0, #0
 80145ce:	d156      	bne.n	801467e <pow+0xee>
 80145d0:	4632      	mov	r2, r6
 80145d2:	463b      	mov	r3, r7
 80145d4:	4630      	mov	r0, r6
 80145d6:	4639      	mov	r1, r7
 80145d8:	f7ec faa8 	bl	8000b2c <__aeabi_dcmpun>
 80145dc:	9001      	str	r0, [sp, #4]
 80145de:	b1e8      	cbz	r0, 801461c <pow+0x8c>
 80145e0:	2200      	movs	r2, #0
 80145e2:	2300      	movs	r3, #0
 80145e4:	4620      	mov	r0, r4
 80145e6:	4629      	mov	r1, r5
 80145e8:	f7ec fa6e 	bl	8000ac8 <__aeabi_dcmpeq>
 80145ec:	2800      	cmp	r0, #0
 80145ee:	d046      	beq.n	801467e <pow+0xee>
 80145f0:	2301      	movs	r3, #1
 80145f2:	9302      	str	r3, [sp, #8]
 80145f4:	4b96      	ldr	r3, [pc, #600]	; (8014850 <pow+0x2c0>)
 80145f6:	9303      	str	r3, [sp, #12]
 80145f8:	4b96      	ldr	r3, [pc, #600]	; (8014854 <pow+0x2c4>)
 80145fa:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80145fe:	2200      	movs	r2, #0
 8014600:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014604:	9b00      	ldr	r3, [sp, #0]
 8014606:	2b02      	cmp	r3, #2
 8014608:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801460c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014610:	d033      	beq.n	801467a <pow+0xea>
 8014612:	a802      	add	r0, sp, #8
 8014614:	f001 fbce 	bl	8015db4 <matherr>
 8014618:	bb48      	cbnz	r0, 801466e <pow+0xde>
 801461a:	e05d      	b.n	80146d8 <pow+0x148>
 801461c:	f04f 0a00 	mov.w	sl, #0
 8014620:	f04f 0b00 	mov.w	fp, #0
 8014624:	4652      	mov	r2, sl
 8014626:	465b      	mov	r3, fp
 8014628:	4630      	mov	r0, r6
 801462a:	4639      	mov	r1, r7
 801462c:	f7ec fa4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8014630:	ec4b ab19 	vmov	d9, sl, fp
 8014634:	2800      	cmp	r0, #0
 8014636:	d054      	beq.n	80146e2 <pow+0x152>
 8014638:	4652      	mov	r2, sl
 801463a:	465b      	mov	r3, fp
 801463c:	4620      	mov	r0, r4
 801463e:	4629      	mov	r1, r5
 8014640:	f7ec fa42 	bl	8000ac8 <__aeabi_dcmpeq>
 8014644:	4680      	mov	r8, r0
 8014646:	b318      	cbz	r0, 8014690 <pow+0x100>
 8014648:	2301      	movs	r3, #1
 801464a:	9302      	str	r3, [sp, #8]
 801464c:	4b80      	ldr	r3, [pc, #512]	; (8014850 <pow+0x2c0>)
 801464e:	9303      	str	r3, [sp, #12]
 8014650:	9b01      	ldr	r3, [sp, #4]
 8014652:	930a      	str	r3, [sp, #40]	; 0x28
 8014654:	9b00      	ldr	r3, [sp, #0]
 8014656:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801465a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801465e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8014662:	2b00      	cmp	r3, #0
 8014664:	d0d5      	beq.n	8014612 <pow+0x82>
 8014666:	4b7b      	ldr	r3, [pc, #492]	; (8014854 <pow+0x2c4>)
 8014668:	2200      	movs	r2, #0
 801466a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801466e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014670:	b11b      	cbz	r3, 801467a <pow+0xea>
 8014672:	f7fb ff37 	bl	80104e4 <__errno>
 8014676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014678:	6003      	str	r3, [r0, #0]
 801467a:	ed9d 8b08 	vldr	d8, [sp, #32]
 801467e:	eeb0 0a48 	vmov.f32	s0, s16
 8014682:	eef0 0a68 	vmov.f32	s1, s17
 8014686:	b00d      	add	sp, #52	; 0x34
 8014688:	ecbd 8b04 	vpop	{d8-d9}
 801468c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014690:	ec45 4b10 	vmov	d0, r4, r5
 8014694:	f001 fb86 	bl	8015da4 <finite>
 8014698:	2800      	cmp	r0, #0
 801469a:	d0f0      	beq.n	801467e <pow+0xee>
 801469c:	4652      	mov	r2, sl
 801469e:	465b      	mov	r3, fp
 80146a0:	4620      	mov	r0, r4
 80146a2:	4629      	mov	r1, r5
 80146a4:	f7ec fa1a 	bl	8000adc <__aeabi_dcmplt>
 80146a8:	2800      	cmp	r0, #0
 80146aa:	d0e8      	beq.n	801467e <pow+0xee>
 80146ac:	2301      	movs	r3, #1
 80146ae:	9302      	str	r3, [sp, #8]
 80146b0:	4b67      	ldr	r3, [pc, #412]	; (8014850 <pow+0x2c0>)
 80146b2:	9303      	str	r3, [sp, #12]
 80146b4:	f999 3000 	ldrsb.w	r3, [r9]
 80146b8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80146bc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80146c0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80146c4:	b913      	cbnz	r3, 80146cc <pow+0x13c>
 80146c6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80146ca:	e7a2      	b.n	8014612 <pow+0x82>
 80146cc:	4962      	ldr	r1, [pc, #392]	; (8014858 <pow+0x2c8>)
 80146ce:	2000      	movs	r0, #0
 80146d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80146d4:	2b02      	cmp	r3, #2
 80146d6:	d19c      	bne.n	8014612 <pow+0x82>
 80146d8:	f7fb ff04 	bl	80104e4 <__errno>
 80146dc:	2321      	movs	r3, #33	; 0x21
 80146de:	6003      	str	r3, [r0, #0]
 80146e0:	e7c5      	b.n	801466e <pow+0xde>
 80146e2:	eeb0 0a48 	vmov.f32	s0, s16
 80146e6:	eef0 0a68 	vmov.f32	s1, s17
 80146ea:	f001 fb5b 	bl	8015da4 <finite>
 80146ee:	9000      	str	r0, [sp, #0]
 80146f0:	2800      	cmp	r0, #0
 80146f2:	f040 8081 	bne.w	80147f8 <pow+0x268>
 80146f6:	ec47 6b10 	vmov	d0, r6, r7
 80146fa:	f001 fb53 	bl	8015da4 <finite>
 80146fe:	2800      	cmp	r0, #0
 8014700:	d07a      	beq.n	80147f8 <pow+0x268>
 8014702:	ec45 4b10 	vmov	d0, r4, r5
 8014706:	f001 fb4d 	bl	8015da4 <finite>
 801470a:	2800      	cmp	r0, #0
 801470c:	d074      	beq.n	80147f8 <pow+0x268>
 801470e:	ec53 2b18 	vmov	r2, r3, d8
 8014712:	ee18 0a10 	vmov	r0, s16
 8014716:	4619      	mov	r1, r3
 8014718:	f7ec fa08 	bl	8000b2c <__aeabi_dcmpun>
 801471c:	f999 9000 	ldrsb.w	r9, [r9]
 8014720:	4b4b      	ldr	r3, [pc, #300]	; (8014850 <pow+0x2c0>)
 8014722:	b1b0      	cbz	r0, 8014752 <pow+0x1c2>
 8014724:	2201      	movs	r2, #1
 8014726:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801472a:	9b00      	ldr	r3, [sp, #0]
 801472c:	930a      	str	r3, [sp, #40]	; 0x28
 801472e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014732:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014736:	f1b9 0f00 	cmp.w	r9, #0
 801473a:	d0c4      	beq.n	80146c6 <pow+0x136>
 801473c:	4652      	mov	r2, sl
 801473e:	465b      	mov	r3, fp
 8014740:	4650      	mov	r0, sl
 8014742:	4659      	mov	r1, fp
 8014744:	f7ec f882 	bl	800084c <__aeabi_ddiv>
 8014748:	f1b9 0f02 	cmp.w	r9, #2
 801474c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014750:	e7c1      	b.n	80146d6 <pow+0x146>
 8014752:	2203      	movs	r2, #3
 8014754:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014758:	900a      	str	r0, [sp, #40]	; 0x28
 801475a:	4629      	mov	r1, r5
 801475c:	4620      	mov	r0, r4
 801475e:	2200      	movs	r2, #0
 8014760:	4b3e      	ldr	r3, [pc, #248]	; (801485c <pow+0x2cc>)
 8014762:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014766:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801476a:	f7eb ff45 	bl	80005f8 <__aeabi_dmul>
 801476e:	4604      	mov	r4, r0
 8014770:	460d      	mov	r5, r1
 8014772:	f1b9 0f00 	cmp.w	r9, #0
 8014776:	d124      	bne.n	80147c2 <pow+0x232>
 8014778:	4b39      	ldr	r3, [pc, #228]	; (8014860 <pow+0x2d0>)
 801477a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801477e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014782:	4630      	mov	r0, r6
 8014784:	4652      	mov	r2, sl
 8014786:	465b      	mov	r3, fp
 8014788:	4639      	mov	r1, r7
 801478a:	f7ec f9a7 	bl	8000adc <__aeabi_dcmplt>
 801478e:	2800      	cmp	r0, #0
 8014790:	d056      	beq.n	8014840 <pow+0x2b0>
 8014792:	ec45 4b10 	vmov	d0, r4, r5
 8014796:	f001 fb17 	bl	8015dc8 <rint>
 801479a:	4622      	mov	r2, r4
 801479c:	462b      	mov	r3, r5
 801479e:	ec51 0b10 	vmov	r0, r1, d0
 80147a2:	f7ec f991 	bl	8000ac8 <__aeabi_dcmpeq>
 80147a6:	b920      	cbnz	r0, 80147b2 <pow+0x222>
 80147a8:	4b2e      	ldr	r3, [pc, #184]	; (8014864 <pow+0x2d4>)
 80147aa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80147ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80147b2:	f998 3000 	ldrsb.w	r3, [r8]
 80147b6:	2b02      	cmp	r3, #2
 80147b8:	d142      	bne.n	8014840 <pow+0x2b0>
 80147ba:	f7fb fe93 	bl	80104e4 <__errno>
 80147be:	2322      	movs	r3, #34	; 0x22
 80147c0:	e78d      	b.n	80146de <pow+0x14e>
 80147c2:	4b29      	ldr	r3, [pc, #164]	; (8014868 <pow+0x2d8>)
 80147c4:	2200      	movs	r2, #0
 80147c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80147ca:	4630      	mov	r0, r6
 80147cc:	4652      	mov	r2, sl
 80147ce:	465b      	mov	r3, fp
 80147d0:	4639      	mov	r1, r7
 80147d2:	f7ec f983 	bl	8000adc <__aeabi_dcmplt>
 80147d6:	2800      	cmp	r0, #0
 80147d8:	d0eb      	beq.n	80147b2 <pow+0x222>
 80147da:	ec45 4b10 	vmov	d0, r4, r5
 80147de:	f001 faf3 	bl	8015dc8 <rint>
 80147e2:	4622      	mov	r2, r4
 80147e4:	462b      	mov	r3, r5
 80147e6:	ec51 0b10 	vmov	r0, r1, d0
 80147ea:	f7ec f96d 	bl	8000ac8 <__aeabi_dcmpeq>
 80147ee:	2800      	cmp	r0, #0
 80147f0:	d1df      	bne.n	80147b2 <pow+0x222>
 80147f2:	2200      	movs	r2, #0
 80147f4:	4b18      	ldr	r3, [pc, #96]	; (8014858 <pow+0x2c8>)
 80147f6:	e7da      	b.n	80147ae <pow+0x21e>
 80147f8:	2200      	movs	r2, #0
 80147fa:	2300      	movs	r3, #0
 80147fc:	ec51 0b18 	vmov	r0, r1, d8
 8014800:	f7ec f962 	bl	8000ac8 <__aeabi_dcmpeq>
 8014804:	2800      	cmp	r0, #0
 8014806:	f43f af3a 	beq.w	801467e <pow+0xee>
 801480a:	ec47 6b10 	vmov	d0, r6, r7
 801480e:	f001 fac9 	bl	8015da4 <finite>
 8014812:	2800      	cmp	r0, #0
 8014814:	f43f af33 	beq.w	801467e <pow+0xee>
 8014818:	ec45 4b10 	vmov	d0, r4, r5
 801481c:	f001 fac2 	bl	8015da4 <finite>
 8014820:	2800      	cmp	r0, #0
 8014822:	f43f af2c 	beq.w	801467e <pow+0xee>
 8014826:	2304      	movs	r3, #4
 8014828:	9302      	str	r3, [sp, #8]
 801482a:	4b09      	ldr	r3, [pc, #36]	; (8014850 <pow+0x2c0>)
 801482c:	9303      	str	r3, [sp, #12]
 801482e:	2300      	movs	r3, #0
 8014830:	930a      	str	r3, [sp, #40]	; 0x28
 8014832:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014836:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801483a:	ed8d 9b08 	vstr	d9, [sp, #32]
 801483e:	e7b8      	b.n	80147b2 <pow+0x222>
 8014840:	a802      	add	r0, sp, #8
 8014842:	f001 fab7 	bl	8015db4 <matherr>
 8014846:	2800      	cmp	r0, #0
 8014848:	f47f af11 	bne.w	801466e <pow+0xde>
 801484c:	e7b5      	b.n	80147ba <pow+0x22a>
 801484e:	bf00      	nop
 8014850:	080169be 	.word	0x080169be
 8014854:	3ff00000 	.word	0x3ff00000
 8014858:	fff00000 	.word	0xfff00000
 801485c:	3fe00000 	.word	0x3fe00000
 8014860:	47efffff 	.word	0x47efffff
 8014864:	c7efffff 	.word	0xc7efffff
 8014868:	7ff00000 	.word	0x7ff00000
 801486c:	2000032c 	.word	0x2000032c

08014870 <sqrt>:
 8014870:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014874:	ed2d 8b02 	vpush	{d8}
 8014878:	b08b      	sub	sp, #44	; 0x2c
 801487a:	ec55 4b10 	vmov	r4, r5, d0
 801487e:	f000 ff15 	bl	80156ac <__ieee754_sqrt>
 8014882:	4b26      	ldr	r3, [pc, #152]	; (801491c <sqrt+0xac>)
 8014884:	eeb0 8a40 	vmov.f32	s16, s0
 8014888:	eef0 8a60 	vmov.f32	s17, s1
 801488c:	f993 6000 	ldrsb.w	r6, [r3]
 8014890:	1c73      	adds	r3, r6, #1
 8014892:	d02a      	beq.n	80148ea <sqrt+0x7a>
 8014894:	4622      	mov	r2, r4
 8014896:	462b      	mov	r3, r5
 8014898:	4620      	mov	r0, r4
 801489a:	4629      	mov	r1, r5
 801489c:	f7ec f946 	bl	8000b2c <__aeabi_dcmpun>
 80148a0:	4607      	mov	r7, r0
 80148a2:	bb10      	cbnz	r0, 80148ea <sqrt+0x7a>
 80148a4:	f04f 0800 	mov.w	r8, #0
 80148a8:	f04f 0900 	mov.w	r9, #0
 80148ac:	4642      	mov	r2, r8
 80148ae:	464b      	mov	r3, r9
 80148b0:	4620      	mov	r0, r4
 80148b2:	4629      	mov	r1, r5
 80148b4:	f7ec f912 	bl	8000adc <__aeabi_dcmplt>
 80148b8:	b1b8      	cbz	r0, 80148ea <sqrt+0x7a>
 80148ba:	2301      	movs	r3, #1
 80148bc:	9300      	str	r3, [sp, #0]
 80148be:	4b18      	ldr	r3, [pc, #96]	; (8014920 <sqrt+0xb0>)
 80148c0:	9301      	str	r3, [sp, #4]
 80148c2:	9708      	str	r7, [sp, #32]
 80148c4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80148c8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80148cc:	b9b6      	cbnz	r6, 80148fc <sqrt+0x8c>
 80148ce:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80148d2:	4668      	mov	r0, sp
 80148d4:	f001 fa6e 	bl	8015db4 <matherr>
 80148d8:	b1d0      	cbz	r0, 8014910 <sqrt+0xa0>
 80148da:	9b08      	ldr	r3, [sp, #32]
 80148dc:	b11b      	cbz	r3, 80148e6 <sqrt+0x76>
 80148de:	f7fb fe01 	bl	80104e4 <__errno>
 80148e2:	9b08      	ldr	r3, [sp, #32]
 80148e4:	6003      	str	r3, [r0, #0]
 80148e6:	ed9d 8b06 	vldr	d8, [sp, #24]
 80148ea:	eeb0 0a48 	vmov.f32	s0, s16
 80148ee:	eef0 0a68 	vmov.f32	s1, s17
 80148f2:	b00b      	add	sp, #44	; 0x2c
 80148f4:	ecbd 8b02 	vpop	{d8}
 80148f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80148fc:	4642      	mov	r2, r8
 80148fe:	464b      	mov	r3, r9
 8014900:	4640      	mov	r0, r8
 8014902:	4649      	mov	r1, r9
 8014904:	f7eb ffa2 	bl	800084c <__aeabi_ddiv>
 8014908:	2e02      	cmp	r6, #2
 801490a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801490e:	d1e0      	bne.n	80148d2 <sqrt+0x62>
 8014910:	f7fb fde8 	bl	80104e4 <__errno>
 8014914:	2321      	movs	r3, #33	; 0x21
 8014916:	6003      	str	r3, [r0, #0]
 8014918:	e7df      	b.n	80148da <sqrt+0x6a>
 801491a:	bf00      	nop
 801491c:	2000032c 	.word	0x2000032c
 8014920:	080169c2 	.word	0x080169c2

08014924 <powf>:
 8014924:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8014928:	ed2d 8b04 	vpush	{d8-d9}
 801492c:	4ca7      	ldr	r4, [pc, #668]	; (8014bcc <powf+0x2a8>)
 801492e:	b08a      	sub	sp, #40	; 0x28
 8014930:	eef0 8a40 	vmov.f32	s17, s0
 8014934:	eeb0 8a60 	vmov.f32	s16, s1
 8014938:	f000 ff68 	bl	801580c <__ieee754_powf>
 801493c:	f994 5000 	ldrsb.w	r5, [r4]
 8014940:	1c6b      	adds	r3, r5, #1
 8014942:	eeb0 9a40 	vmov.f32	s18, s0
 8014946:	4626      	mov	r6, r4
 8014948:	d05f      	beq.n	8014a0a <powf+0xe6>
 801494a:	eeb4 8a48 	vcmp.f32	s16, s16
 801494e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014952:	d65a      	bvs.n	8014a0a <powf+0xe6>
 8014954:	eef4 8a68 	vcmp.f32	s17, s17
 8014958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801495c:	d721      	bvc.n	80149a2 <powf+0x7e>
 801495e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014966:	d150      	bne.n	8014a0a <powf+0xe6>
 8014968:	2301      	movs	r3, #1
 801496a:	9300      	str	r3, [sp, #0]
 801496c:	4b98      	ldr	r3, [pc, #608]	; (8014bd0 <powf+0x2ac>)
 801496e:	9301      	str	r3, [sp, #4]
 8014970:	ee18 0a90 	vmov	r0, s17
 8014974:	2300      	movs	r3, #0
 8014976:	9308      	str	r3, [sp, #32]
 8014978:	f7eb fde6 	bl	8000548 <__aeabi_f2d>
 801497c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014980:	ee18 0a10 	vmov	r0, s16
 8014984:	f7eb fde0 	bl	8000548 <__aeabi_f2d>
 8014988:	4b92      	ldr	r3, [pc, #584]	; (8014bd4 <powf+0x2b0>)
 801498a:	2200      	movs	r2, #0
 801498c:	2d02      	cmp	r5, #2
 801498e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014992:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014996:	d032      	beq.n	80149fe <powf+0xda>
 8014998:	4668      	mov	r0, sp
 801499a:	f001 fa0b 	bl	8015db4 <matherr>
 801499e:	bb40      	cbnz	r0, 80149f2 <powf+0xce>
 80149a0:	e065      	b.n	8014a6e <powf+0x14a>
 80149a2:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8014bd8 <powf+0x2b4>
 80149a6:	eef4 8a69 	vcmp.f32	s17, s19
 80149aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149ae:	d163      	bne.n	8014a78 <powf+0x154>
 80149b0:	eeb4 8a69 	vcmp.f32	s16, s19
 80149b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149b8:	d12e      	bne.n	8014a18 <powf+0xf4>
 80149ba:	2301      	movs	r3, #1
 80149bc:	9300      	str	r3, [sp, #0]
 80149be:	4b84      	ldr	r3, [pc, #528]	; (8014bd0 <powf+0x2ac>)
 80149c0:	9301      	str	r3, [sp, #4]
 80149c2:	ee18 0a90 	vmov	r0, s17
 80149c6:	2300      	movs	r3, #0
 80149c8:	9308      	str	r3, [sp, #32]
 80149ca:	f7eb fdbd 	bl	8000548 <__aeabi_f2d>
 80149ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80149d2:	ee18 0a10 	vmov	r0, s16
 80149d6:	f7eb fdb7 	bl	8000548 <__aeabi_f2d>
 80149da:	2200      	movs	r2, #0
 80149dc:	2300      	movs	r3, #0
 80149de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80149e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80149e6:	2d00      	cmp	r5, #0
 80149e8:	d0d6      	beq.n	8014998 <powf+0x74>
 80149ea:	4b7a      	ldr	r3, [pc, #488]	; (8014bd4 <powf+0x2b0>)
 80149ec:	2200      	movs	r2, #0
 80149ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80149f2:	9b08      	ldr	r3, [sp, #32]
 80149f4:	b11b      	cbz	r3, 80149fe <powf+0xda>
 80149f6:	f7fb fd75 	bl	80104e4 <__errno>
 80149fa:	9b08      	ldr	r3, [sp, #32]
 80149fc:	6003      	str	r3, [r0, #0]
 80149fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014a02:	f7ec f8f1 	bl	8000be8 <__aeabi_d2f>
 8014a06:	ee09 0a10 	vmov	s18, r0
 8014a0a:	eeb0 0a49 	vmov.f32	s0, s18
 8014a0e:	b00a      	add	sp, #40	; 0x28
 8014a10:	ecbd 8b04 	vpop	{d8-d9}
 8014a14:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8014a18:	eeb0 0a48 	vmov.f32	s0, s16
 8014a1c:	f001 fad5 	bl	8015fca <finitef>
 8014a20:	2800      	cmp	r0, #0
 8014a22:	d0f2      	beq.n	8014a0a <powf+0xe6>
 8014a24:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a2c:	d5ed      	bpl.n	8014a0a <powf+0xe6>
 8014a2e:	2301      	movs	r3, #1
 8014a30:	9300      	str	r3, [sp, #0]
 8014a32:	4b67      	ldr	r3, [pc, #412]	; (8014bd0 <powf+0x2ac>)
 8014a34:	9301      	str	r3, [sp, #4]
 8014a36:	ee18 0a90 	vmov	r0, s17
 8014a3a:	2300      	movs	r3, #0
 8014a3c:	9308      	str	r3, [sp, #32]
 8014a3e:	f7eb fd83 	bl	8000548 <__aeabi_f2d>
 8014a42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014a46:	ee18 0a10 	vmov	r0, s16
 8014a4a:	f7eb fd7d 	bl	8000548 <__aeabi_f2d>
 8014a4e:	f994 3000 	ldrsb.w	r3, [r4]
 8014a52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014a56:	b923      	cbnz	r3, 8014a62 <powf+0x13e>
 8014a58:	2200      	movs	r2, #0
 8014a5a:	2300      	movs	r3, #0
 8014a5c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014a60:	e79a      	b.n	8014998 <powf+0x74>
 8014a62:	495e      	ldr	r1, [pc, #376]	; (8014bdc <powf+0x2b8>)
 8014a64:	2000      	movs	r0, #0
 8014a66:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014a6a:	2b02      	cmp	r3, #2
 8014a6c:	d194      	bne.n	8014998 <powf+0x74>
 8014a6e:	f7fb fd39 	bl	80104e4 <__errno>
 8014a72:	2321      	movs	r3, #33	; 0x21
 8014a74:	6003      	str	r3, [r0, #0]
 8014a76:	e7bc      	b.n	80149f2 <powf+0xce>
 8014a78:	f001 faa7 	bl	8015fca <finitef>
 8014a7c:	4605      	mov	r5, r0
 8014a7e:	2800      	cmp	r0, #0
 8014a80:	d173      	bne.n	8014b6a <powf+0x246>
 8014a82:	eeb0 0a68 	vmov.f32	s0, s17
 8014a86:	f001 faa0 	bl	8015fca <finitef>
 8014a8a:	2800      	cmp	r0, #0
 8014a8c:	d06d      	beq.n	8014b6a <powf+0x246>
 8014a8e:	eeb0 0a48 	vmov.f32	s0, s16
 8014a92:	f001 fa9a 	bl	8015fca <finitef>
 8014a96:	2800      	cmp	r0, #0
 8014a98:	d067      	beq.n	8014b6a <powf+0x246>
 8014a9a:	ee18 0a90 	vmov	r0, s17
 8014a9e:	f7eb fd53 	bl	8000548 <__aeabi_f2d>
 8014aa2:	4680      	mov	r8, r0
 8014aa4:	ee18 0a10 	vmov	r0, s16
 8014aa8:	4689      	mov	r9, r1
 8014aaa:	f7eb fd4d 	bl	8000548 <__aeabi_f2d>
 8014aae:	eeb4 9a49 	vcmp.f32	s18, s18
 8014ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ab6:	f994 4000 	ldrsb.w	r4, [r4]
 8014aba:	4b45      	ldr	r3, [pc, #276]	; (8014bd0 <powf+0x2ac>)
 8014abc:	d713      	bvc.n	8014ae6 <powf+0x1c2>
 8014abe:	2201      	movs	r2, #1
 8014ac0:	e9cd 2300 	strd	r2, r3, [sp]
 8014ac4:	9508      	str	r5, [sp, #32]
 8014ac6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8014aca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014ace:	2c00      	cmp	r4, #0
 8014ad0:	d0c2      	beq.n	8014a58 <powf+0x134>
 8014ad2:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 8014ad6:	ee17 0a90 	vmov	r0, s15
 8014ada:	f7eb fd35 	bl	8000548 <__aeabi_f2d>
 8014ade:	2c02      	cmp	r4, #2
 8014ae0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014ae4:	e7c2      	b.n	8014a6c <powf+0x148>
 8014ae6:	2203      	movs	r2, #3
 8014ae8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014aec:	e9cd 2300 	strd	r2, r3, [sp]
 8014af0:	9508      	str	r5, [sp, #32]
 8014af2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8014af6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014afa:	ee28 8a27 	vmul.f32	s16, s16, s15
 8014afe:	b9fc      	cbnz	r4, 8014b40 <powf+0x21c>
 8014b00:	4b37      	ldr	r3, [pc, #220]	; (8014be0 <powf+0x2bc>)
 8014b02:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8014b06:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8014b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b0e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014b12:	d553      	bpl.n	8014bbc <powf+0x298>
 8014b14:	eeb0 0a48 	vmov.f32	s0, s16
 8014b18:	f001 fa62 	bl	8015fe0 <rintf>
 8014b1c:	eeb4 0a48 	vcmp.f32	s0, s16
 8014b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b24:	d004      	beq.n	8014b30 <powf+0x20c>
 8014b26:	4b2f      	ldr	r3, [pc, #188]	; (8014be4 <powf+0x2c0>)
 8014b28:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8014b2c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014b30:	f996 3000 	ldrsb.w	r3, [r6]
 8014b34:	2b02      	cmp	r3, #2
 8014b36:	d141      	bne.n	8014bbc <powf+0x298>
 8014b38:	f7fb fcd4 	bl	80104e4 <__errno>
 8014b3c:	2322      	movs	r3, #34	; 0x22
 8014b3e:	e799      	b.n	8014a74 <powf+0x150>
 8014b40:	4b29      	ldr	r3, [pc, #164]	; (8014be8 <powf+0x2c4>)
 8014b42:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8014b46:	2200      	movs	r2, #0
 8014b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014b50:	d5ee      	bpl.n	8014b30 <powf+0x20c>
 8014b52:	eeb0 0a48 	vmov.f32	s0, s16
 8014b56:	f001 fa43 	bl	8015fe0 <rintf>
 8014b5a:	eeb4 0a48 	vcmp.f32	s0, s16
 8014b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b62:	d0e5      	beq.n	8014b30 <powf+0x20c>
 8014b64:	2200      	movs	r2, #0
 8014b66:	4b1d      	ldr	r3, [pc, #116]	; (8014bdc <powf+0x2b8>)
 8014b68:	e7e0      	b.n	8014b2c <powf+0x208>
 8014b6a:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8014b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b72:	f47f af4a 	bne.w	8014a0a <powf+0xe6>
 8014b76:	eeb0 0a68 	vmov.f32	s0, s17
 8014b7a:	f001 fa26 	bl	8015fca <finitef>
 8014b7e:	2800      	cmp	r0, #0
 8014b80:	f43f af43 	beq.w	8014a0a <powf+0xe6>
 8014b84:	eeb0 0a48 	vmov.f32	s0, s16
 8014b88:	f001 fa1f 	bl	8015fca <finitef>
 8014b8c:	2800      	cmp	r0, #0
 8014b8e:	f43f af3c 	beq.w	8014a0a <powf+0xe6>
 8014b92:	2304      	movs	r3, #4
 8014b94:	9300      	str	r3, [sp, #0]
 8014b96:	4b0e      	ldr	r3, [pc, #56]	; (8014bd0 <powf+0x2ac>)
 8014b98:	9301      	str	r3, [sp, #4]
 8014b9a:	ee18 0a90 	vmov	r0, s17
 8014b9e:	2300      	movs	r3, #0
 8014ba0:	9308      	str	r3, [sp, #32]
 8014ba2:	f7eb fcd1 	bl	8000548 <__aeabi_f2d>
 8014ba6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014baa:	ee18 0a10 	vmov	r0, s16
 8014bae:	f7eb fccb 	bl	8000548 <__aeabi_f2d>
 8014bb2:	2200      	movs	r2, #0
 8014bb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014bb8:	2300      	movs	r3, #0
 8014bba:	e7b7      	b.n	8014b2c <powf+0x208>
 8014bbc:	4668      	mov	r0, sp
 8014bbe:	f001 f8f9 	bl	8015db4 <matherr>
 8014bc2:	2800      	cmp	r0, #0
 8014bc4:	f47f af15 	bne.w	80149f2 <powf+0xce>
 8014bc8:	e7b6      	b.n	8014b38 <powf+0x214>
 8014bca:	bf00      	nop
 8014bcc:	2000032c 	.word	0x2000032c
 8014bd0:	080169c7 	.word	0x080169c7
 8014bd4:	3ff00000 	.word	0x3ff00000
 8014bd8:	00000000 	.word	0x00000000
 8014bdc:	fff00000 	.word	0xfff00000
 8014be0:	47efffff 	.word	0x47efffff
 8014be4:	c7efffff 	.word	0xc7efffff
 8014be8:	7ff00000 	.word	0x7ff00000

08014bec <sqrtf>:
 8014bec:	b510      	push	{r4, lr}
 8014bee:	ed2d 8b02 	vpush	{d8}
 8014bf2:	b08a      	sub	sp, #40	; 0x28
 8014bf4:	eeb0 8a40 	vmov.f32	s16, s0
 8014bf8:	f001 f8c8 	bl	8015d8c <__ieee754_sqrtf>
 8014bfc:	4b21      	ldr	r3, [pc, #132]	; (8014c84 <sqrtf+0x98>)
 8014bfe:	f993 4000 	ldrsb.w	r4, [r3]
 8014c02:	1c63      	adds	r3, r4, #1
 8014c04:	d02c      	beq.n	8014c60 <sqrtf+0x74>
 8014c06:	eeb4 8a48 	vcmp.f32	s16, s16
 8014c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c0e:	d627      	bvs.n	8014c60 <sqrtf+0x74>
 8014c10:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c18:	d522      	bpl.n	8014c60 <sqrtf+0x74>
 8014c1a:	2301      	movs	r3, #1
 8014c1c:	9300      	str	r3, [sp, #0]
 8014c1e:	4b1a      	ldr	r3, [pc, #104]	; (8014c88 <sqrtf+0x9c>)
 8014c20:	9301      	str	r3, [sp, #4]
 8014c22:	ee18 0a10 	vmov	r0, s16
 8014c26:	2300      	movs	r3, #0
 8014c28:	9308      	str	r3, [sp, #32]
 8014c2a:	f7eb fc8d 	bl	8000548 <__aeabi_f2d>
 8014c2e:	2200      	movs	r2, #0
 8014c30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014c34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014c38:	2300      	movs	r3, #0
 8014c3a:	b9ac      	cbnz	r4, 8014c68 <sqrtf+0x7c>
 8014c3c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014c40:	4668      	mov	r0, sp
 8014c42:	f001 f8b7 	bl	8015db4 <matherr>
 8014c46:	b1b8      	cbz	r0, 8014c78 <sqrtf+0x8c>
 8014c48:	9b08      	ldr	r3, [sp, #32]
 8014c4a:	b11b      	cbz	r3, 8014c54 <sqrtf+0x68>
 8014c4c:	f7fb fc4a 	bl	80104e4 <__errno>
 8014c50:	9b08      	ldr	r3, [sp, #32]
 8014c52:	6003      	str	r3, [r0, #0]
 8014c54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014c58:	f7eb ffc6 	bl	8000be8 <__aeabi_d2f>
 8014c5c:	ee00 0a10 	vmov	s0, r0
 8014c60:	b00a      	add	sp, #40	; 0x28
 8014c62:	ecbd 8b02 	vpop	{d8}
 8014c66:	bd10      	pop	{r4, pc}
 8014c68:	4610      	mov	r0, r2
 8014c6a:	4619      	mov	r1, r3
 8014c6c:	f7eb fdee 	bl	800084c <__aeabi_ddiv>
 8014c70:	2c02      	cmp	r4, #2
 8014c72:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014c76:	d1e3      	bne.n	8014c40 <sqrtf+0x54>
 8014c78:	f7fb fc34 	bl	80104e4 <__errno>
 8014c7c:	2321      	movs	r3, #33	; 0x21
 8014c7e:	6003      	str	r3, [r0, #0]
 8014c80:	e7e2      	b.n	8014c48 <sqrtf+0x5c>
 8014c82:	bf00      	nop
 8014c84:	2000032c 	.word	0x2000032c
 8014c88:	080169cc 	.word	0x080169cc
 8014c8c:	00000000 	.word	0x00000000

08014c90 <__ieee754_pow>:
 8014c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c94:	b091      	sub	sp, #68	; 0x44
 8014c96:	ed8d 1b00 	vstr	d1, [sp]
 8014c9a:	e9dd 2900 	ldrd	r2, r9, [sp]
 8014c9e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8014ca2:	ea58 0302 	orrs.w	r3, r8, r2
 8014ca6:	ec57 6b10 	vmov	r6, r7, d0
 8014caa:	f000 84be 	beq.w	801562a <__ieee754_pow+0x99a>
 8014cae:	4b7a      	ldr	r3, [pc, #488]	; (8014e98 <__ieee754_pow+0x208>)
 8014cb0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8014cb4:	429c      	cmp	r4, r3
 8014cb6:	463d      	mov	r5, r7
 8014cb8:	ee10 aa10 	vmov	sl, s0
 8014cbc:	dc09      	bgt.n	8014cd2 <__ieee754_pow+0x42>
 8014cbe:	d103      	bne.n	8014cc8 <__ieee754_pow+0x38>
 8014cc0:	b93e      	cbnz	r6, 8014cd2 <__ieee754_pow+0x42>
 8014cc2:	45a0      	cmp	r8, r4
 8014cc4:	dc0d      	bgt.n	8014ce2 <__ieee754_pow+0x52>
 8014cc6:	e001      	b.n	8014ccc <__ieee754_pow+0x3c>
 8014cc8:	4598      	cmp	r8, r3
 8014cca:	dc02      	bgt.n	8014cd2 <__ieee754_pow+0x42>
 8014ccc:	4598      	cmp	r8, r3
 8014cce:	d10e      	bne.n	8014cee <__ieee754_pow+0x5e>
 8014cd0:	b16a      	cbz	r2, 8014cee <__ieee754_pow+0x5e>
 8014cd2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8014cd6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8014cda:	ea54 030a 	orrs.w	r3, r4, sl
 8014cde:	f000 84a4 	beq.w	801562a <__ieee754_pow+0x99a>
 8014ce2:	486e      	ldr	r0, [pc, #440]	; (8014e9c <__ieee754_pow+0x20c>)
 8014ce4:	b011      	add	sp, #68	; 0x44
 8014ce6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cea:	f001 b865 	b.w	8015db8 <nan>
 8014cee:	2d00      	cmp	r5, #0
 8014cf0:	da53      	bge.n	8014d9a <__ieee754_pow+0x10a>
 8014cf2:	4b6b      	ldr	r3, [pc, #428]	; (8014ea0 <__ieee754_pow+0x210>)
 8014cf4:	4598      	cmp	r8, r3
 8014cf6:	dc4d      	bgt.n	8014d94 <__ieee754_pow+0x104>
 8014cf8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8014cfc:	4598      	cmp	r8, r3
 8014cfe:	dd4c      	ble.n	8014d9a <__ieee754_pow+0x10a>
 8014d00:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014d04:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014d08:	2b14      	cmp	r3, #20
 8014d0a:	dd26      	ble.n	8014d5a <__ieee754_pow+0xca>
 8014d0c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8014d10:	fa22 f103 	lsr.w	r1, r2, r3
 8014d14:	fa01 f303 	lsl.w	r3, r1, r3
 8014d18:	4293      	cmp	r3, r2
 8014d1a:	d13e      	bne.n	8014d9a <__ieee754_pow+0x10a>
 8014d1c:	f001 0101 	and.w	r1, r1, #1
 8014d20:	f1c1 0b02 	rsb	fp, r1, #2
 8014d24:	2a00      	cmp	r2, #0
 8014d26:	d15b      	bne.n	8014de0 <__ieee754_pow+0x150>
 8014d28:	4b5b      	ldr	r3, [pc, #364]	; (8014e98 <__ieee754_pow+0x208>)
 8014d2a:	4598      	cmp	r8, r3
 8014d2c:	d124      	bne.n	8014d78 <__ieee754_pow+0xe8>
 8014d2e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8014d32:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8014d36:	ea53 030a 	orrs.w	r3, r3, sl
 8014d3a:	f000 8476 	beq.w	801562a <__ieee754_pow+0x99a>
 8014d3e:	4b59      	ldr	r3, [pc, #356]	; (8014ea4 <__ieee754_pow+0x214>)
 8014d40:	429c      	cmp	r4, r3
 8014d42:	dd2d      	ble.n	8014da0 <__ieee754_pow+0x110>
 8014d44:	f1b9 0f00 	cmp.w	r9, #0
 8014d48:	f280 8473 	bge.w	8015632 <__ieee754_pow+0x9a2>
 8014d4c:	2000      	movs	r0, #0
 8014d4e:	2100      	movs	r1, #0
 8014d50:	ec41 0b10 	vmov	d0, r0, r1
 8014d54:	b011      	add	sp, #68	; 0x44
 8014d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d5a:	2a00      	cmp	r2, #0
 8014d5c:	d13e      	bne.n	8014ddc <__ieee754_pow+0x14c>
 8014d5e:	f1c3 0314 	rsb	r3, r3, #20
 8014d62:	fa48 f103 	asr.w	r1, r8, r3
 8014d66:	fa01 f303 	lsl.w	r3, r1, r3
 8014d6a:	4543      	cmp	r3, r8
 8014d6c:	f040 8469 	bne.w	8015642 <__ieee754_pow+0x9b2>
 8014d70:	f001 0101 	and.w	r1, r1, #1
 8014d74:	f1c1 0b02 	rsb	fp, r1, #2
 8014d78:	4b4b      	ldr	r3, [pc, #300]	; (8014ea8 <__ieee754_pow+0x218>)
 8014d7a:	4598      	cmp	r8, r3
 8014d7c:	d118      	bne.n	8014db0 <__ieee754_pow+0x120>
 8014d7e:	f1b9 0f00 	cmp.w	r9, #0
 8014d82:	f280 845a 	bge.w	801563a <__ieee754_pow+0x9aa>
 8014d86:	4948      	ldr	r1, [pc, #288]	; (8014ea8 <__ieee754_pow+0x218>)
 8014d88:	4632      	mov	r2, r6
 8014d8a:	463b      	mov	r3, r7
 8014d8c:	2000      	movs	r0, #0
 8014d8e:	f7eb fd5d 	bl	800084c <__aeabi_ddiv>
 8014d92:	e7dd      	b.n	8014d50 <__ieee754_pow+0xc0>
 8014d94:	f04f 0b02 	mov.w	fp, #2
 8014d98:	e7c4      	b.n	8014d24 <__ieee754_pow+0x94>
 8014d9a:	f04f 0b00 	mov.w	fp, #0
 8014d9e:	e7c1      	b.n	8014d24 <__ieee754_pow+0x94>
 8014da0:	f1b9 0f00 	cmp.w	r9, #0
 8014da4:	dad2      	bge.n	8014d4c <__ieee754_pow+0xbc>
 8014da6:	e9dd 0300 	ldrd	r0, r3, [sp]
 8014daa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014dae:	e7cf      	b.n	8014d50 <__ieee754_pow+0xc0>
 8014db0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8014db4:	d106      	bne.n	8014dc4 <__ieee754_pow+0x134>
 8014db6:	4632      	mov	r2, r6
 8014db8:	463b      	mov	r3, r7
 8014dba:	4610      	mov	r0, r2
 8014dbc:	4619      	mov	r1, r3
 8014dbe:	f7eb fc1b 	bl	80005f8 <__aeabi_dmul>
 8014dc2:	e7c5      	b.n	8014d50 <__ieee754_pow+0xc0>
 8014dc4:	4b39      	ldr	r3, [pc, #228]	; (8014eac <__ieee754_pow+0x21c>)
 8014dc6:	4599      	cmp	r9, r3
 8014dc8:	d10a      	bne.n	8014de0 <__ieee754_pow+0x150>
 8014dca:	2d00      	cmp	r5, #0
 8014dcc:	db08      	blt.n	8014de0 <__ieee754_pow+0x150>
 8014dce:	ec47 6b10 	vmov	d0, r6, r7
 8014dd2:	b011      	add	sp, #68	; 0x44
 8014dd4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dd8:	f000 bc68 	b.w	80156ac <__ieee754_sqrt>
 8014ddc:	f04f 0b00 	mov.w	fp, #0
 8014de0:	ec47 6b10 	vmov	d0, r6, r7
 8014de4:	f000 ffd5 	bl	8015d92 <fabs>
 8014de8:	ec51 0b10 	vmov	r0, r1, d0
 8014dec:	f1ba 0f00 	cmp.w	sl, #0
 8014df0:	d127      	bne.n	8014e42 <__ieee754_pow+0x1b2>
 8014df2:	b124      	cbz	r4, 8014dfe <__ieee754_pow+0x16e>
 8014df4:	4b2c      	ldr	r3, [pc, #176]	; (8014ea8 <__ieee754_pow+0x218>)
 8014df6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8014dfa:	429a      	cmp	r2, r3
 8014dfc:	d121      	bne.n	8014e42 <__ieee754_pow+0x1b2>
 8014dfe:	f1b9 0f00 	cmp.w	r9, #0
 8014e02:	da05      	bge.n	8014e10 <__ieee754_pow+0x180>
 8014e04:	4602      	mov	r2, r0
 8014e06:	460b      	mov	r3, r1
 8014e08:	2000      	movs	r0, #0
 8014e0a:	4927      	ldr	r1, [pc, #156]	; (8014ea8 <__ieee754_pow+0x218>)
 8014e0c:	f7eb fd1e 	bl	800084c <__aeabi_ddiv>
 8014e10:	2d00      	cmp	r5, #0
 8014e12:	da9d      	bge.n	8014d50 <__ieee754_pow+0xc0>
 8014e14:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8014e18:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8014e1c:	ea54 030b 	orrs.w	r3, r4, fp
 8014e20:	d108      	bne.n	8014e34 <__ieee754_pow+0x1a4>
 8014e22:	4602      	mov	r2, r0
 8014e24:	460b      	mov	r3, r1
 8014e26:	4610      	mov	r0, r2
 8014e28:	4619      	mov	r1, r3
 8014e2a:	f7eb fa2d 	bl	8000288 <__aeabi_dsub>
 8014e2e:	4602      	mov	r2, r0
 8014e30:	460b      	mov	r3, r1
 8014e32:	e7ac      	b.n	8014d8e <__ieee754_pow+0xfe>
 8014e34:	f1bb 0f01 	cmp.w	fp, #1
 8014e38:	d18a      	bne.n	8014d50 <__ieee754_pow+0xc0>
 8014e3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014e3e:	4619      	mov	r1, r3
 8014e40:	e786      	b.n	8014d50 <__ieee754_pow+0xc0>
 8014e42:	0fed      	lsrs	r5, r5, #31
 8014e44:	1e6b      	subs	r3, r5, #1
 8014e46:	930d      	str	r3, [sp, #52]	; 0x34
 8014e48:	ea5b 0303 	orrs.w	r3, fp, r3
 8014e4c:	d102      	bne.n	8014e54 <__ieee754_pow+0x1c4>
 8014e4e:	4632      	mov	r2, r6
 8014e50:	463b      	mov	r3, r7
 8014e52:	e7e8      	b.n	8014e26 <__ieee754_pow+0x196>
 8014e54:	4b16      	ldr	r3, [pc, #88]	; (8014eb0 <__ieee754_pow+0x220>)
 8014e56:	4598      	cmp	r8, r3
 8014e58:	f340 80fe 	ble.w	8015058 <__ieee754_pow+0x3c8>
 8014e5c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8014e60:	4598      	cmp	r8, r3
 8014e62:	dd0a      	ble.n	8014e7a <__ieee754_pow+0x1ea>
 8014e64:	4b0f      	ldr	r3, [pc, #60]	; (8014ea4 <__ieee754_pow+0x214>)
 8014e66:	429c      	cmp	r4, r3
 8014e68:	dc0d      	bgt.n	8014e86 <__ieee754_pow+0x1f6>
 8014e6a:	f1b9 0f00 	cmp.w	r9, #0
 8014e6e:	f6bf af6d 	bge.w	8014d4c <__ieee754_pow+0xbc>
 8014e72:	a307      	add	r3, pc, #28	; (adr r3, 8014e90 <__ieee754_pow+0x200>)
 8014e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e78:	e79f      	b.n	8014dba <__ieee754_pow+0x12a>
 8014e7a:	4b0e      	ldr	r3, [pc, #56]	; (8014eb4 <__ieee754_pow+0x224>)
 8014e7c:	429c      	cmp	r4, r3
 8014e7e:	ddf4      	ble.n	8014e6a <__ieee754_pow+0x1da>
 8014e80:	4b09      	ldr	r3, [pc, #36]	; (8014ea8 <__ieee754_pow+0x218>)
 8014e82:	429c      	cmp	r4, r3
 8014e84:	dd18      	ble.n	8014eb8 <__ieee754_pow+0x228>
 8014e86:	f1b9 0f00 	cmp.w	r9, #0
 8014e8a:	dcf2      	bgt.n	8014e72 <__ieee754_pow+0x1e2>
 8014e8c:	e75e      	b.n	8014d4c <__ieee754_pow+0xbc>
 8014e8e:	bf00      	nop
 8014e90:	8800759c 	.word	0x8800759c
 8014e94:	7e37e43c 	.word	0x7e37e43c
 8014e98:	7ff00000 	.word	0x7ff00000
 8014e9c:	080168b1 	.word	0x080168b1
 8014ea0:	433fffff 	.word	0x433fffff
 8014ea4:	3fefffff 	.word	0x3fefffff
 8014ea8:	3ff00000 	.word	0x3ff00000
 8014eac:	3fe00000 	.word	0x3fe00000
 8014eb0:	41e00000 	.word	0x41e00000
 8014eb4:	3feffffe 	.word	0x3feffffe
 8014eb8:	2200      	movs	r2, #0
 8014eba:	4b63      	ldr	r3, [pc, #396]	; (8015048 <__ieee754_pow+0x3b8>)
 8014ebc:	f7eb f9e4 	bl	8000288 <__aeabi_dsub>
 8014ec0:	a355      	add	r3, pc, #340	; (adr r3, 8015018 <__ieee754_pow+0x388>)
 8014ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ec6:	4604      	mov	r4, r0
 8014ec8:	460d      	mov	r5, r1
 8014eca:	f7eb fb95 	bl	80005f8 <__aeabi_dmul>
 8014ece:	a354      	add	r3, pc, #336	; (adr r3, 8015020 <__ieee754_pow+0x390>)
 8014ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ed4:	4606      	mov	r6, r0
 8014ed6:	460f      	mov	r7, r1
 8014ed8:	4620      	mov	r0, r4
 8014eda:	4629      	mov	r1, r5
 8014edc:	f7eb fb8c 	bl	80005f8 <__aeabi_dmul>
 8014ee0:	2200      	movs	r2, #0
 8014ee2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014ee6:	4b59      	ldr	r3, [pc, #356]	; (801504c <__ieee754_pow+0x3bc>)
 8014ee8:	4620      	mov	r0, r4
 8014eea:	4629      	mov	r1, r5
 8014eec:	f7eb fb84 	bl	80005f8 <__aeabi_dmul>
 8014ef0:	4602      	mov	r2, r0
 8014ef2:	460b      	mov	r3, r1
 8014ef4:	a14c      	add	r1, pc, #304	; (adr r1, 8015028 <__ieee754_pow+0x398>)
 8014ef6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014efa:	f7eb f9c5 	bl	8000288 <__aeabi_dsub>
 8014efe:	4622      	mov	r2, r4
 8014f00:	462b      	mov	r3, r5
 8014f02:	f7eb fb79 	bl	80005f8 <__aeabi_dmul>
 8014f06:	4602      	mov	r2, r0
 8014f08:	460b      	mov	r3, r1
 8014f0a:	2000      	movs	r0, #0
 8014f0c:	4950      	ldr	r1, [pc, #320]	; (8015050 <__ieee754_pow+0x3c0>)
 8014f0e:	f7eb f9bb 	bl	8000288 <__aeabi_dsub>
 8014f12:	4622      	mov	r2, r4
 8014f14:	462b      	mov	r3, r5
 8014f16:	4680      	mov	r8, r0
 8014f18:	4689      	mov	r9, r1
 8014f1a:	4620      	mov	r0, r4
 8014f1c:	4629      	mov	r1, r5
 8014f1e:	f7eb fb6b 	bl	80005f8 <__aeabi_dmul>
 8014f22:	4602      	mov	r2, r0
 8014f24:	460b      	mov	r3, r1
 8014f26:	4640      	mov	r0, r8
 8014f28:	4649      	mov	r1, r9
 8014f2a:	f7eb fb65 	bl	80005f8 <__aeabi_dmul>
 8014f2e:	a340      	add	r3, pc, #256	; (adr r3, 8015030 <__ieee754_pow+0x3a0>)
 8014f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f34:	f7eb fb60 	bl	80005f8 <__aeabi_dmul>
 8014f38:	4602      	mov	r2, r0
 8014f3a:	460b      	mov	r3, r1
 8014f3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014f40:	f7eb f9a2 	bl	8000288 <__aeabi_dsub>
 8014f44:	4602      	mov	r2, r0
 8014f46:	460b      	mov	r3, r1
 8014f48:	4604      	mov	r4, r0
 8014f4a:	460d      	mov	r5, r1
 8014f4c:	4630      	mov	r0, r6
 8014f4e:	4639      	mov	r1, r7
 8014f50:	f7eb f99c 	bl	800028c <__adddf3>
 8014f54:	2000      	movs	r0, #0
 8014f56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014f5a:	4632      	mov	r2, r6
 8014f5c:	463b      	mov	r3, r7
 8014f5e:	f7eb f993 	bl	8000288 <__aeabi_dsub>
 8014f62:	4602      	mov	r2, r0
 8014f64:	460b      	mov	r3, r1
 8014f66:	4620      	mov	r0, r4
 8014f68:	4629      	mov	r1, r5
 8014f6a:	f7eb f98d 	bl	8000288 <__aeabi_dsub>
 8014f6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014f70:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8014f74:	4313      	orrs	r3, r2
 8014f76:	4606      	mov	r6, r0
 8014f78:	460f      	mov	r7, r1
 8014f7a:	f040 81eb 	bne.w	8015354 <__ieee754_pow+0x6c4>
 8014f7e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8015038 <__ieee754_pow+0x3a8>
 8014f82:	e9dd 4500 	ldrd	r4, r5, [sp]
 8014f86:	2400      	movs	r4, #0
 8014f88:	4622      	mov	r2, r4
 8014f8a:	462b      	mov	r3, r5
 8014f8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014f90:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014f94:	f7eb f978 	bl	8000288 <__aeabi_dsub>
 8014f98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014f9c:	f7eb fb2c 	bl	80005f8 <__aeabi_dmul>
 8014fa0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014fa4:	4680      	mov	r8, r0
 8014fa6:	4689      	mov	r9, r1
 8014fa8:	4630      	mov	r0, r6
 8014faa:	4639      	mov	r1, r7
 8014fac:	f7eb fb24 	bl	80005f8 <__aeabi_dmul>
 8014fb0:	4602      	mov	r2, r0
 8014fb2:	460b      	mov	r3, r1
 8014fb4:	4640      	mov	r0, r8
 8014fb6:	4649      	mov	r1, r9
 8014fb8:	f7eb f968 	bl	800028c <__adddf3>
 8014fbc:	4622      	mov	r2, r4
 8014fbe:	462b      	mov	r3, r5
 8014fc0:	4680      	mov	r8, r0
 8014fc2:	4689      	mov	r9, r1
 8014fc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014fc8:	f7eb fb16 	bl	80005f8 <__aeabi_dmul>
 8014fcc:	460b      	mov	r3, r1
 8014fce:	4604      	mov	r4, r0
 8014fd0:	460d      	mov	r5, r1
 8014fd2:	4602      	mov	r2, r0
 8014fd4:	4649      	mov	r1, r9
 8014fd6:	4640      	mov	r0, r8
 8014fd8:	e9cd 4500 	strd	r4, r5, [sp]
 8014fdc:	f7eb f956 	bl	800028c <__adddf3>
 8014fe0:	4b1c      	ldr	r3, [pc, #112]	; (8015054 <__ieee754_pow+0x3c4>)
 8014fe2:	4299      	cmp	r1, r3
 8014fe4:	4606      	mov	r6, r0
 8014fe6:	460f      	mov	r7, r1
 8014fe8:	468b      	mov	fp, r1
 8014fea:	f340 82f7 	ble.w	80155dc <__ieee754_pow+0x94c>
 8014fee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8014ff2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8014ff6:	4303      	orrs	r3, r0
 8014ff8:	f000 81ea 	beq.w	80153d0 <__ieee754_pow+0x740>
 8014ffc:	a310      	add	r3, pc, #64	; (adr r3, 8015040 <__ieee754_pow+0x3b0>)
 8014ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015002:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015006:	f7eb faf7 	bl	80005f8 <__aeabi_dmul>
 801500a:	a30d      	add	r3, pc, #52	; (adr r3, 8015040 <__ieee754_pow+0x3b0>)
 801500c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015010:	e6d5      	b.n	8014dbe <__ieee754_pow+0x12e>
 8015012:	bf00      	nop
 8015014:	f3af 8000 	nop.w
 8015018:	60000000 	.word	0x60000000
 801501c:	3ff71547 	.word	0x3ff71547
 8015020:	f85ddf44 	.word	0xf85ddf44
 8015024:	3e54ae0b 	.word	0x3e54ae0b
 8015028:	55555555 	.word	0x55555555
 801502c:	3fd55555 	.word	0x3fd55555
 8015030:	652b82fe 	.word	0x652b82fe
 8015034:	3ff71547 	.word	0x3ff71547
 8015038:	00000000 	.word	0x00000000
 801503c:	bff00000 	.word	0xbff00000
 8015040:	8800759c 	.word	0x8800759c
 8015044:	7e37e43c 	.word	0x7e37e43c
 8015048:	3ff00000 	.word	0x3ff00000
 801504c:	3fd00000 	.word	0x3fd00000
 8015050:	3fe00000 	.word	0x3fe00000
 8015054:	408fffff 	.word	0x408fffff
 8015058:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801505c:	f04f 0200 	mov.w	r2, #0
 8015060:	da05      	bge.n	801506e <__ieee754_pow+0x3de>
 8015062:	4bd3      	ldr	r3, [pc, #844]	; (80153b0 <__ieee754_pow+0x720>)
 8015064:	f7eb fac8 	bl	80005f8 <__aeabi_dmul>
 8015068:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801506c:	460c      	mov	r4, r1
 801506e:	1523      	asrs	r3, r4, #20
 8015070:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8015074:	4413      	add	r3, r2
 8015076:	9309      	str	r3, [sp, #36]	; 0x24
 8015078:	4bce      	ldr	r3, [pc, #824]	; (80153b4 <__ieee754_pow+0x724>)
 801507a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801507e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8015082:	429c      	cmp	r4, r3
 8015084:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8015088:	dd08      	ble.n	801509c <__ieee754_pow+0x40c>
 801508a:	4bcb      	ldr	r3, [pc, #812]	; (80153b8 <__ieee754_pow+0x728>)
 801508c:	429c      	cmp	r4, r3
 801508e:	f340 815e 	ble.w	801534e <__ieee754_pow+0x6be>
 8015092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015094:	3301      	adds	r3, #1
 8015096:	9309      	str	r3, [sp, #36]	; 0x24
 8015098:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801509c:	f04f 0a00 	mov.w	sl, #0
 80150a0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80150a4:	930c      	str	r3, [sp, #48]	; 0x30
 80150a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80150a8:	4bc4      	ldr	r3, [pc, #784]	; (80153bc <__ieee754_pow+0x72c>)
 80150aa:	4413      	add	r3, r2
 80150ac:	ed93 7b00 	vldr	d7, [r3]
 80150b0:	4629      	mov	r1, r5
 80150b2:	ec53 2b17 	vmov	r2, r3, d7
 80150b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80150ba:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80150be:	f7eb f8e3 	bl	8000288 <__aeabi_dsub>
 80150c2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80150c6:	4606      	mov	r6, r0
 80150c8:	460f      	mov	r7, r1
 80150ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80150ce:	f7eb f8dd 	bl	800028c <__adddf3>
 80150d2:	4602      	mov	r2, r0
 80150d4:	460b      	mov	r3, r1
 80150d6:	2000      	movs	r0, #0
 80150d8:	49b9      	ldr	r1, [pc, #740]	; (80153c0 <__ieee754_pow+0x730>)
 80150da:	f7eb fbb7 	bl	800084c <__aeabi_ddiv>
 80150de:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80150e2:	4602      	mov	r2, r0
 80150e4:	460b      	mov	r3, r1
 80150e6:	4630      	mov	r0, r6
 80150e8:	4639      	mov	r1, r7
 80150ea:	f7eb fa85 	bl	80005f8 <__aeabi_dmul>
 80150ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80150f2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80150f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80150fa:	2300      	movs	r3, #0
 80150fc:	9302      	str	r3, [sp, #8]
 80150fe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8015102:	106d      	asrs	r5, r5, #1
 8015104:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8015108:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801510c:	2200      	movs	r2, #0
 801510e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8015112:	4640      	mov	r0, r8
 8015114:	4649      	mov	r1, r9
 8015116:	4614      	mov	r4, r2
 8015118:	461d      	mov	r5, r3
 801511a:	f7eb fa6d 	bl	80005f8 <__aeabi_dmul>
 801511e:	4602      	mov	r2, r0
 8015120:	460b      	mov	r3, r1
 8015122:	4630      	mov	r0, r6
 8015124:	4639      	mov	r1, r7
 8015126:	f7eb f8af 	bl	8000288 <__aeabi_dsub>
 801512a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801512e:	4606      	mov	r6, r0
 8015130:	460f      	mov	r7, r1
 8015132:	4620      	mov	r0, r4
 8015134:	4629      	mov	r1, r5
 8015136:	f7eb f8a7 	bl	8000288 <__aeabi_dsub>
 801513a:	4602      	mov	r2, r0
 801513c:	460b      	mov	r3, r1
 801513e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015142:	f7eb f8a1 	bl	8000288 <__aeabi_dsub>
 8015146:	4642      	mov	r2, r8
 8015148:	464b      	mov	r3, r9
 801514a:	f7eb fa55 	bl	80005f8 <__aeabi_dmul>
 801514e:	4602      	mov	r2, r0
 8015150:	460b      	mov	r3, r1
 8015152:	4630      	mov	r0, r6
 8015154:	4639      	mov	r1, r7
 8015156:	f7eb f897 	bl	8000288 <__aeabi_dsub>
 801515a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801515e:	f7eb fa4b 	bl	80005f8 <__aeabi_dmul>
 8015162:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015166:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801516a:	4610      	mov	r0, r2
 801516c:	4619      	mov	r1, r3
 801516e:	f7eb fa43 	bl	80005f8 <__aeabi_dmul>
 8015172:	a37b      	add	r3, pc, #492	; (adr r3, 8015360 <__ieee754_pow+0x6d0>)
 8015174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015178:	4604      	mov	r4, r0
 801517a:	460d      	mov	r5, r1
 801517c:	f7eb fa3c 	bl	80005f8 <__aeabi_dmul>
 8015180:	a379      	add	r3, pc, #484	; (adr r3, 8015368 <__ieee754_pow+0x6d8>)
 8015182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015186:	f7eb f881 	bl	800028c <__adddf3>
 801518a:	4622      	mov	r2, r4
 801518c:	462b      	mov	r3, r5
 801518e:	f7eb fa33 	bl	80005f8 <__aeabi_dmul>
 8015192:	a377      	add	r3, pc, #476	; (adr r3, 8015370 <__ieee754_pow+0x6e0>)
 8015194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015198:	f7eb f878 	bl	800028c <__adddf3>
 801519c:	4622      	mov	r2, r4
 801519e:	462b      	mov	r3, r5
 80151a0:	f7eb fa2a 	bl	80005f8 <__aeabi_dmul>
 80151a4:	a374      	add	r3, pc, #464	; (adr r3, 8015378 <__ieee754_pow+0x6e8>)
 80151a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151aa:	f7eb f86f 	bl	800028c <__adddf3>
 80151ae:	4622      	mov	r2, r4
 80151b0:	462b      	mov	r3, r5
 80151b2:	f7eb fa21 	bl	80005f8 <__aeabi_dmul>
 80151b6:	a372      	add	r3, pc, #456	; (adr r3, 8015380 <__ieee754_pow+0x6f0>)
 80151b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151bc:	f7eb f866 	bl	800028c <__adddf3>
 80151c0:	4622      	mov	r2, r4
 80151c2:	462b      	mov	r3, r5
 80151c4:	f7eb fa18 	bl	80005f8 <__aeabi_dmul>
 80151c8:	a36f      	add	r3, pc, #444	; (adr r3, 8015388 <__ieee754_pow+0x6f8>)
 80151ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151ce:	f7eb f85d 	bl	800028c <__adddf3>
 80151d2:	4622      	mov	r2, r4
 80151d4:	4606      	mov	r6, r0
 80151d6:	460f      	mov	r7, r1
 80151d8:	462b      	mov	r3, r5
 80151da:	4620      	mov	r0, r4
 80151dc:	4629      	mov	r1, r5
 80151de:	f7eb fa0b 	bl	80005f8 <__aeabi_dmul>
 80151e2:	4602      	mov	r2, r0
 80151e4:	460b      	mov	r3, r1
 80151e6:	4630      	mov	r0, r6
 80151e8:	4639      	mov	r1, r7
 80151ea:	f7eb fa05 	bl	80005f8 <__aeabi_dmul>
 80151ee:	4642      	mov	r2, r8
 80151f0:	4604      	mov	r4, r0
 80151f2:	460d      	mov	r5, r1
 80151f4:	464b      	mov	r3, r9
 80151f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80151fa:	f7eb f847 	bl	800028c <__adddf3>
 80151fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015202:	f7eb f9f9 	bl	80005f8 <__aeabi_dmul>
 8015206:	4622      	mov	r2, r4
 8015208:	462b      	mov	r3, r5
 801520a:	f7eb f83f 	bl	800028c <__adddf3>
 801520e:	4642      	mov	r2, r8
 8015210:	4606      	mov	r6, r0
 8015212:	460f      	mov	r7, r1
 8015214:	464b      	mov	r3, r9
 8015216:	4640      	mov	r0, r8
 8015218:	4649      	mov	r1, r9
 801521a:	f7eb f9ed 	bl	80005f8 <__aeabi_dmul>
 801521e:	2200      	movs	r2, #0
 8015220:	4b68      	ldr	r3, [pc, #416]	; (80153c4 <__ieee754_pow+0x734>)
 8015222:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015226:	f7eb f831 	bl	800028c <__adddf3>
 801522a:	4632      	mov	r2, r6
 801522c:	463b      	mov	r3, r7
 801522e:	f7eb f82d 	bl	800028c <__adddf3>
 8015232:	9802      	ldr	r0, [sp, #8]
 8015234:	460d      	mov	r5, r1
 8015236:	4604      	mov	r4, r0
 8015238:	4602      	mov	r2, r0
 801523a:	460b      	mov	r3, r1
 801523c:	4640      	mov	r0, r8
 801523e:	4649      	mov	r1, r9
 8015240:	f7eb f9da 	bl	80005f8 <__aeabi_dmul>
 8015244:	2200      	movs	r2, #0
 8015246:	4680      	mov	r8, r0
 8015248:	4689      	mov	r9, r1
 801524a:	4b5e      	ldr	r3, [pc, #376]	; (80153c4 <__ieee754_pow+0x734>)
 801524c:	4620      	mov	r0, r4
 801524e:	4629      	mov	r1, r5
 8015250:	f7eb f81a 	bl	8000288 <__aeabi_dsub>
 8015254:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015258:	f7eb f816 	bl	8000288 <__aeabi_dsub>
 801525c:	4602      	mov	r2, r0
 801525e:	460b      	mov	r3, r1
 8015260:	4630      	mov	r0, r6
 8015262:	4639      	mov	r1, r7
 8015264:	f7eb f810 	bl	8000288 <__aeabi_dsub>
 8015268:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801526c:	f7eb f9c4 	bl	80005f8 <__aeabi_dmul>
 8015270:	4622      	mov	r2, r4
 8015272:	4606      	mov	r6, r0
 8015274:	460f      	mov	r7, r1
 8015276:	462b      	mov	r3, r5
 8015278:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801527c:	f7eb f9bc 	bl	80005f8 <__aeabi_dmul>
 8015280:	4602      	mov	r2, r0
 8015282:	460b      	mov	r3, r1
 8015284:	4630      	mov	r0, r6
 8015286:	4639      	mov	r1, r7
 8015288:	f7eb f800 	bl	800028c <__adddf3>
 801528c:	4606      	mov	r6, r0
 801528e:	460f      	mov	r7, r1
 8015290:	4602      	mov	r2, r0
 8015292:	460b      	mov	r3, r1
 8015294:	4640      	mov	r0, r8
 8015296:	4649      	mov	r1, r9
 8015298:	f7ea fff8 	bl	800028c <__adddf3>
 801529c:	9802      	ldr	r0, [sp, #8]
 801529e:	a33c      	add	r3, pc, #240	; (adr r3, 8015390 <__ieee754_pow+0x700>)
 80152a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152a4:	4604      	mov	r4, r0
 80152a6:	460d      	mov	r5, r1
 80152a8:	f7eb f9a6 	bl	80005f8 <__aeabi_dmul>
 80152ac:	4642      	mov	r2, r8
 80152ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80152b2:	464b      	mov	r3, r9
 80152b4:	4620      	mov	r0, r4
 80152b6:	4629      	mov	r1, r5
 80152b8:	f7ea ffe6 	bl	8000288 <__aeabi_dsub>
 80152bc:	4602      	mov	r2, r0
 80152be:	460b      	mov	r3, r1
 80152c0:	4630      	mov	r0, r6
 80152c2:	4639      	mov	r1, r7
 80152c4:	f7ea ffe0 	bl	8000288 <__aeabi_dsub>
 80152c8:	a333      	add	r3, pc, #204	; (adr r3, 8015398 <__ieee754_pow+0x708>)
 80152ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152ce:	f7eb f993 	bl	80005f8 <__aeabi_dmul>
 80152d2:	a333      	add	r3, pc, #204	; (adr r3, 80153a0 <__ieee754_pow+0x710>)
 80152d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152d8:	4606      	mov	r6, r0
 80152da:	460f      	mov	r7, r1
 80152dc:	4620      	mov	r0, r4
 80152de:	4629      	mov	r1, r5
 80152e0:	f7eb f98a 	bl	80005f8 <__aeabi_dmul>
 80152e4:	4602      	mov	r2, r0
 80152e6:	460b      	mov	r3, r1
 80152e8:	4630      	mov	r0, r6
 80152ea:	4639      	mov	r1, r7
 80152ec:	f7ea ffce 	bl	800028c <__adddf3>
 80152f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80152f2:	4b35      	ldr	r3, [pc, #212]	; (80153c8 <__ieee754_pow+0x738>)
 80152f4:	4413      	add	r3, r2
 80152f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152fa:	f7ea ffc7 	bl	800028c <__adddf3>
 80152fe:	4604      	mov	r4, r0
 8015300:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015302:	460d      	mov	r5, r1
 8015304:	f7eb f90e 	bl	8000524 <__aeabi_i2d>
 8015308:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801530a:	4b30      	ldr	r3, [pc, #192]	; (80153cc <__ieee754_pow+0x73c>)
 801530c:	4413      	add	r3, r2
 801530e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015312:	4606      	mov	r6, r0
 8015314:	460f      	mov	r7, r1
 8015316:	4622      	mov	r2, r4
 8015318:	462b      	mov	r3, r5
 801531a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801531e:	f7ea ffb5 	bl	800028c <__adddf3>
 8015322:	4642      	mov	r2, r8
 8015324:	464b      	mov	r3, r9
 8015326:	f7ea ffb1 	bl	800028c <__adddf3>
 801532a:	4632      	mov	r2, r6
 801532c:	463b      	mov	r3, r7
 801532e:	f7ea ffad 	bl	800028c <__adddf3>
 8015332:	9802      	ldr	r0, [sp, #8]
 8015334:	4632      	mov	r2, r6
 8015336:	463b      	mov	r3, r7
 8015338:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801533c:	f7ea ffa4 	bl	8000288 <__aeabi_dsub>
 8015340:	4642      	mov	r2, r8
 8015342:	464b      	mov	r3, r9
 8015344:	f7ea ffa0 	bl	8000288 <__aeabi_dsub>
 8015348:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801534c:	e607      	b.n	8014f5e <__ieee754_pow+0x2ce>
 801534e:	f04f 0a01 	mov.w	sl, #1
 8015352:	e6a5      	b.n	80150a0 <__ieee754_pow+0x410>
 8015354:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80153a8 <__ieee754_pow+0x718>
 8015358:	e613      	b.n	8014f82 <__ieee754_pow+0x2f2>
 801535a:	bf00      	nop
 801535c:	f3af 8000 	nop.w
 8015360:	4a454eef 	.word	0x4a454eef
 8015364:	3fca7e28 	.word	0x3fca7e28
 8015368:	93c9db65 	.word	0x93c9db65
 801536c:	3fcd864a 	.word	0x3fcd864a
 8015370:	a91d4101 	.word	0xa91d4101
 8015374:	3fd17460 	.word	0x3fd17460
 8015378:	518f264d 	.word	0x518f264d
 801537c:	3fd55555 	.word	0x3fd55555
 8015380:	db6fabff 	.word	0xdb6fabff
 8015384:	3fdb6db6 	.word	0x3fdb6db6
 8015388:	33333303 	.word	0x33333303
 801538c:	3fe33333 	.word	0x3fe33333
 8015390:	e0000000 	.word	0xe0000000
 8015394:	3feec709 	.word	0x3feec709
 8015398:	dc3a03fd 	.word	0xdc3a03fd
 801539c:	3feec709 	.word	0x3feec709
 80153a0:	145b01f5 	.word	0x145b01f5
 80153a4:	be3e2fe0 	.word	0xbe3e2fe0
 80153a8:	00000000 	.word	0x00000000
 80153ac:	3ff00000 	.word	0x3ff00000
 80153b0:	43400000 	.word	0x43400000
 80153b4:	0003988e 	.word	0x0003988e
 80153b8:	000bb679 	.word	0x000bb679
 80153bc:	080169d8 	.word	0x080169d8
 80153c0:	3ff00000 	.word	0x3ff00000
 80153c4:	40080000 	.word	0x40080000
 80153c8:	080169f8 	.word	0x080169f8
 80153cc:	080169e8 	.word	0x080169e8
 80153d0:	a3b4      	add	r3, pc, #720	; (adr r3, 80156a4 <__ieee754_pow+0xa14>)
 80153d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153d6:	4640      	mov	r0, r8
 80153d8:	4649      	mov	r1, r9
 80153da:	f7ea ff57 	bl	800028c <__adddf3>
 80153de:	4622      	mov	r2, r4
 80153e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80153e4:	462b      	mov	r3, r5
 80153e6:	4630      	mov	r0, r6
 80153e8:	4639      	mov	r1, r7
 80153ea:	f7ea ff4d 	bl	8000288 <__aeabi_dsub>
 80153ee:	4602      	mov	r2, r0
 80153f0:	460b      	mov	r3, r1
 80153f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80153f6:	f7eb fb8f 	bl	8000b18 <__aeabi_dcmpgt>
 80153fa:	2800      	cmp	r0, #0
 80153fc:	f47f adfe 	bne.w	8014ffc <__ieee754_pow+0x36c>
 8015400:	4aa3      	ldr	r2, [pc, #652]	; (8015690 <__ieee754_pow+0xa00>)
 8015402:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015406:	4293      	cmp	r3, r2
 8015408:	f340 810a 	ble.w	8015620 <__ieee754_pow+0x990>
 801540c:	151b      	asrs	r3, r3, #20
 801540e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8015412:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8015416:	fa4a f303 	asr.w	r3, sl, r3
 801541a:	445b      	add	r3, fp
 801541c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8015420:	4e9c      	ldr	r6, [pc, #624]	; (8015694 <__ieee754_pow+0xa04>)
 8015422:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8015426:	4116      	asrs	r6, r2
 8015428:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801542c:	2000      	movs	r0, #0
 801542e:	ea23 0106 	bic.w	r1, r3, r6
 8015432:	f1c2 0214 	rsb	r2, r2, #20
 8015436:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801543a:	fa4a fa02 	asr.w	sl, sl, r2
 801543e:	f1bb 0f00 	cmp.w	fp, #0
 8015442:	4602      	mov	r2, r0
 8015444:	460b      	mov	r3, r1
 8015446:	4620      	mov	r0, r4
 8015448:	4629      	mov	r1, r5
 801544a:	bfb8      	it	lt
 801544c:	f1ca 0a00 	rsblt	sl, sl, #0
 8015450:	f7ea ff1a 	bl	8000288 <__aeabi_dsub>
 8015454:	e9cd 0100 	strd	r0, r1, [sp]
 8015458:	4642      	mov	r2, r8
 801545a:	464b      	mov	r3, r9
 801545c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015460:	f7ea ff14 	bl	800028c <__adddf3>
 8015464:	2000      	movs	r0, #0
 8015466:	a378      	add	r3, pc, #480	; (adr r3, 8015648 <__ieee754_pow+0x9b8>)
 8015468:	e9d3 2300 	ldrd	r2, r3, [r3]
 801546c:	4604      	mov	r4, r0
 801546e:	460d      	mov	r5, r1
 8015470:	f7eb f8c2 	bl	80005f8 <__aeabi_dmul>
 8015474:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015478:	4606      	mov	r6, r0
 801547a:	460f      	mov	r7, r1
 801547c:	4620      	mov	r0, r4
 801547e:	4629      	mov	r1, r5
 8015480:	f7ea ff02 	bl	8000288 <__aeabi_dsub>
 8015484:	4602      	mov	r2, r0
 8015486:	460b      	mov	r3, r1
 8015488:	4640      	mov	r0, r8
 801548a:	4649      	mov	r1, r9
 801548c:	f7ea fefc 	bl	8000288 <__aeabi_dsub>
 8015490:	a36f      	add	r3, pc, #444	; (adr r3, 8015650 <__ieee754_pow+0x9c0>)
 8015492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015496:	f7eb f8af 	bl	80005f8 <__aeabi_dmul>
 801549a:	a36f      	add	r3, pc, #444	; (adr r3, 8015658 <__ieee754_pow+0x9c8>)
 801549c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154a0:	4680      	mov	r8, r0
 80154a2:	4689      	mov	r9, r1
 80154a4:	4620      	mov	r0, r4
 80154a6:	4629      	mov	r1, r5
 80154a8:	f7eb f8a6 	bl	80005f8 <__aeabi_dmul>
 80154ac:	4602      	mov	r2, r0
 80154ae:	460b      	mov	r3, r1
 80154b0:	4640      	mov	r0, r8
 80154b2:	4649      	mov	r1, r9
 80154b4:	f7ea feea 	bl	800028c <__adddf3>
 80154b8:	4604      	mov	r4, r0
 80154ba:	460d      	mov	r5, r1
 80154bc:	4602      	mov	r2, r0
 80154be:	460b      	mov	r3, r1
 80154c0:	4630      	mov	r0, r6
 80154c2:	4639      	mov	r1, r7
 80154c4:	f7ea fee2 	bl	800028c <__adddf3>
 80154c8:	4632      	mov	r2, r6
 80154ca:	463b      	mov	r3, r7
 80154cc:	4680      	mov	r8, r0
 80154ce:	4689      	mov	r9, r1
 80154d0:	f7ea feda 	bl	8000288 <__aeabi_dsub>
 80154d4:	4602      	mov	r2, r0
 80154d6:	460b      	mov	r3, r1
 80154d8:	4620      	mov	r0, r4
 80154da:	4629      	mov	r1, r5
 80154dc:	f7ea fed4 	bl	8000288 <__aeabi_dsub>
 80154e0:	4642      	mov	r2, r8
 80154e2:	4606      	mov	r6, r0
 80154e4:	460f      	mov	r7, r1
 80154e6:	464b      	mov	r3, r9
 80154e8:	4640      	mov	r0, r8
 80154ea:	4649      	mov	r1, r9
 80154ec:	f7eb f884 	bl	80005f8 <__aeabi_dmul>
 80154f0:	a35b      	add	r3, pc, #364	; (adr r3, 8015660 <__ieee754_pow+0x9d0>)
 80154f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154f6:	4604      	mov	r4, r0
 80154f8:	460d      	mov	r5, r1
 80154fa:	f7eb f87d 	bl	80005f8 <__aeabi_dmul>
 80154fe:	a35a      	add	r3, pc, #360	; (adr r3, 8015668 <__ieee754_pow+0x9d8>)
 8015500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015504:	f7ea fec0 	bl	8000288 <__aeabi_dsub>
 8015508:	4622      	mov	r2, r4
 801550a:	462b      	mov	r3, r5
 801550c:	f7eb f874 	bl	80005f8 <__aeabi_dmul>
 8015510:	a357      	add	r3, pc, #348	; (adr r3, 8015670 <__ieee754_pow+0x9e0>)
 8015512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015516:	f7ea feb9 	bl	800028c <__adddf3>
 801551a:	4622      	mov	r2, r4
 801551c:	462b      	mov	r3, r5
 801551e:	f7eb f86b 	bl	80005f8 <__aeabi_dmul>
 8015522:	a355      	add	r3, pc, #340	; (adr r3, 8015678 <__ieee754_pow+0x9e8>)
 8015524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015528:	f7ea feae 	bl	8000288 <__aeabi_dsub>
 801552c:	4622      	mov	r2, r4
 801552e:	462b      	mov	r3, r5
 8015530:	f7eb f862 	bl	80005f8 <__aeabi_dmul>
 8015534:	a352      	add	r3, pc, #328	; (adr r3, 8015680 <__ieee754_pow+0x9f0>)
 8015536:	e9d3 2300 	ldrd	r2, r3, [r3]
 801553a:	f7ea fea7 	bl	800028c <__adddf3>
 801553e:	4622      	mov	r2, r4
 8015540:	462b      	mov	r3, r5
 8015542:	f7eb f859 	bl	80005f8 <__aeabi_dmul>
 8015546:	4602      	mov	r2, r0
 8015548:	460b      	mov	r3, r1
 801554a:	4640      	mov	r0, r8
 801554c:	4649      	mov	r1, r9
 801554e:	f7ea fe9b 	bl	8000288 <__aeabi_dsub>
 8015552:	4604      	mov	r4, r0
 8015554:	460d      	mov	r5, r1
 8015556:	4602      	mov	r2, r0
 8015558:	460b      	mov	r3, r1
 801555a:	4640      	mov	r0, r8
 801555c:	4649      	mov	r1, r9
 801555e:	f7eb f84b 	bl	80005f8 <__aeabi_dmul>
 8015562:	2200      	movs	r2, #0
 8015564:	e9cd 0100 	strd	r0, r1, [sp]
 8015568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801556c:	4620      	mov	r0, r4
 801556e:	4629      	mov	r1, r5
 8015570:	f7ea fe8a 	bl	8000288 <__aeabi_dsub>
 8015574:	4602      	mov	r2, r0
 8015576:	460b      	mov	r3, r1
 8015578:	e9dd 0100 	ldrd	r0, r1, [sp]
 801557c:	f7eb f966 	bl	800084c <__aeabi_ddiv>
 8015580:	4632      	mov	r2, r6
 8015582:	4604      	mov	r4, r0
 8015584:	460d      	mov	r5, r1
 8015586:	463b      	mov	r3, r7
 8015588:	4640      	mov	r0, r8
 801558a:	4649      	mov	r1, r9
 801558c:	f7eb f834 	bl	80005f8 <__aeabi_dmul>
 8015590:	4632      	mov	r2, r6
 8015592:	463b      	mov	r3, r7
 8015594:	f7ea fe7a 	bl	800028c <__adddf3>
 8015598:	4602      	mov	r2, r0
 801559a:	460b      	mov	r3, r1
 801559c:	4620      	mov	r0, r4
 801559e:	4629      	mov	r1, r5
 80155a0:	f7ea fe72 	bl	8000288 <__aeabi_dsub>
 80155a4:	4642      	mov	r2, r8
 80155a6:	464b      	mov	r3, r9
 80155a8:	f7ea fe6e 	bl	8000288 <__aeabi_dsub>
 80155ac:	4602      	mov	r2, r0
 80155ae:	460b      	mov	r3, r1
 80155b0:	2000      	movs	r0, #0
 80155b2:	4939      	ldr	r1, [pc, #228]	; (8015698 <__ieee754_pow+0xa08>)
 80155b4:	f7ea fe68 	bl	8000288 <__aeabi_dsub>
 80155b8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80155bc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80155c0:	4602      	mov	r2, r0
 80155c2:	460b      	mov	r3, r1
 80155c4:	da2f      	bge.n	8015626 <__ieee754_pow+0x996>
 80155c6:	4650      	mov	r0, sl
 80155c8:	ec43 2b10 	vmov	d0, r2, r3
 80155cc:	f000 fc80 	bl	8015ed0 <scalbn>
 80155d0:	ec51 0b10 	vmov	r0, r1, d0
 80155d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80155d8:	f7ff bbf1 	b.w	8014dbe <__ieee754_pow+0x12e>
 80155dc:	4b2f      	ldr	r3, [pc, #188]	; (801569c <__ieee754_pow+0xa0c>)
 80155de:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80155e2:	429e      	cmp	r6, r3
 80155e4:	f77f af0c 	ble.w	8015400 <__ieee754_pow+0x770>
 80155e8:	4b2d      	ldr	r3, [pc, #180]	; (80156a0 <__ieee754_pow+0xa10>)
 80155ea:	440b      	add	r3, r1
 80155ec:	4303      	orrs	r3, r0
 80155ee:	d00b      	beq.n	8015608 <__ieee754_pow+0x978>
 80155f0:	a325      	add	r3, pc, #148	; (adr r3, 8015688 <__ieee754_pow+0x9f8>)
 80155f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80155fa:	f7ea fffd 	bl	80005f8 <__aeabi_dmul>
 80155fe:	a322      	add	r3, pc, #136	; (adr r3, 8015688 <__ieee754_pow+0x9f8>)
 8015600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015604:	f7ff bbdb 	b.w	8014dbe <__ieee754_pow+0x12e>
 8015608:	4622      	mov	r2, r4
 801560a:	462b      	mov	r3, r5
 801560c:	f7ea fe3c 	bl	8000288 <__aeabi_dsub>
 8015610:	4642      	mov	r2, r8
 8015612:	464b      	mov	r3, r9
 8015614:	f7eb fa76 	bl	8000b04 <__aeabi_dcmpge>
 8015618:	2800      	cmp	r0, #0
 801561a:	f43f aef1 	beq.w	8015400 <__ieee754_pow+0x770>
 801561e:	e7e7      	b.n	80155f0 <__ieee754_pow+0x960>
 8015620:	f04f 0a00 	mov.w	sl, #0
 8015624:	e718      	b.n	8015458 <__ieee754_pow+0x7c8>
 8015626:	4621      	mov	r1, r4
 8015628:	e7d4      	b.n	80155d4 <__ieee754_pow+0x944>
 801562a:	2000      	movs	r0, #0
 801562c:	491a      	ldr	r1, [pc, #104]	; (8015698 <__ieee754_pow+0xa08>)
 801562e:	f7ff bb8f 	b.w	8014d50 <__ieee754_pow+0xc0>
 8015632:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015636:	f7ff bb8b 	b.w	8014d50 <__ieee754_pow+0xc0>
 801563a:	4630      	mov	r0, r6
 801563c:	4639      	mov	r1, r7
 801563e:	f7ff bb87 	b.w	8014d50 <__ieee754_pow+0xc0>
 8015642:	4693      	mov	fp, r2
 8015644:	f7ff bb98 	b.w	8014d78 <__ieee754_pow+0xe8>
 8015648:	00000000 	.word	0x00000000
 801564c:	3fe62e43 	.word	0x3fe62e43
 8015650:	fefa39ef 	.word	0xfefa39ef
 8015654:	3fe62e42 	.word	0x3fe62e42
 8015658:	0ca86c39 	.word	0x0ca86c39
 801565c:	be205c61 	.word	0xbe205c61
 8015660:	72bea4d0 	.word	0x72bea4d0
 8015664:	3e663769 	.word	0x3e663769
 8015668:	c5d26bf1 	.word	0xc5d26bf1
 801566c:	3ebbbd41 	.word	0x3ebbbd41
 8015670:	af25de2c 	.word	0xaf25de2c
 8015674:	3f11566a 	.word	0x3f11566a
 8015678:	16bebd93 	.word	0x16bebd93
 801567c:	3f66c16c 	.word	0x3f66c16c
 8015680:	5555553e 	.word	0x5555553e
 8015684:	3fc55555 	.word	0x3fc55555
 8015688:	c2f8f359 	.word	0xc2f8f359
 801568c:	01a56e1f 	.word	0x01a56e1f
 8015690:	3fe00000 	.word	0x3fe00000
 8015694:	000fffff 	.word	0x000fffff
 8015698:	3ff00000 	.word	0x3ff00000
 801569c:	4090cbff 	.word	0x4090cbff
 80156a0:	3f6f3400 	.word	0x3f6f3400
 80156a4:	652b82fe 	.word	0x652b82fe
 80156a8:	3c971547 	.word	0x3c971547

080156ac <__ieee754_sqrt>:
 80156ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156b0:	4955      	ldr	r1, [pc, #340]	; (8015808 <__ieee754_sqrt+0x15c>)
 80156b2:	ec55 4b10 	vmov	r4, r5, d0
 80156b6:	43a9      	bics	r1, r5
 80156b8:	462b      	mov	r3, r5
 80156ba:	462a      	mov	r2, r5
 80156bc:	d112      	bne.n	80156e4 <__ieee754_sqrt+0x38>
 80156be:	ee10 2a10 	vmov	r2, s0
 80156c2:	ee10 0a10 	vmov	r0, s0
 80156c6:	4629      	mov	r1, r5
 80156c8:	f7ea ff96 	bl	80005f8 <__aeabi_dmul>
 80156cc:	4602      	mov	r2, r0
 80156ce:	460b      	mov	r3, r1
 80156d0:	4620      	mov	r0, r4
 80156d2:	4629      	mov	r1, r5
 80156d4:	f7ea fdda 	bl	800028c <__adddf3>
 80156d8:	4604      	mov	r4, r0
 80156da:	460d      	mov	r5, r1
 80156dc:	ec45 4b10 	vmov	d0, r4, r5
 80156e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156e4:	2d00      	cmp	r5, #0
 80156e6:	ee10 0a10 	vmov	r0, s0
 80156ea:	4621      	mov	r1, r4
 80156ec:	dc0f      	bgt.n	801570e <__ieee754_sqrt+0x62>
 80156ee:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80156f2:	4330      	orrs	r0, r6
 80156f4:	d0f2      	beq.n	80156dc <__ieee754_sqrt+0x30>
 80156f6:	b155      	cbz	r5, 801570e <__ieee754_sqrt+0x62>
 80156f8:	ee10 2a10 	vmov	r2, s0
 80156fc:	4620      	mov	r0, r4
 80156fe:	4629      	mov	r1, r5
 8015700:	f7ea fdc2 	bl	8000288 <__aeabi_dsub>
 8015704:	4602      	mov	r2, r0
 8015706:	460b      	mov	r3, r1
 8015708:	f7eb f8a0 	bl	800084c <__aeabi_ddiv>
 801570c:	e7e4      	b.n	80156d8 <__ieee754_sqrt+0x2c>
 801570e:	151b      	asrs	r3, r3, #20
 8015710:	d073      	beq.n	80157fa <__ieee754_sqrt+0x14e>
 8015712:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8015716:	07dd      	lsls	r5, r3, #31
 8015718:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801571c:	bf48      	it	mi
 801571e:	0fc8      	lsrmi	r0, r1, #31
 8015720:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8015724:	bf44      	itt	mi
 8015726:	0049      	lslmi	r1, r1, #1
 8015728:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801572c:	2500      	movs	r5, #0
 801572e:	1058      	asrs	r0, r3, #1
 8015730:	0fcb      	lsrs	r3, r1, #31
 8015732:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8015736:	0049      	lsls	r1, r1, #1
 8015738:	2316      	movs	r3, #22
 801573a:	462c      	mov	r4, r5
 801573c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8015740:	19a7      	adds	r7, r4, r6
 8015742:	4297      	cmp	r7, r2
 8015744:	bfde      	ittt	le
 8015746:	19bc      	addle	r4, r7, r6
 8015748:	1bd2      	suble	r2, r2, r7
 801574a:	19ad      	addle	r5, r5, r6
 801574c:	0fcf      	lsrs	r7, r1, #31
 801574e:	3b01      	subs	r3, #1
 8015750:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8015754:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015758:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801575c:	d1f0      	bne.n	8015740 <__ieee754_sqrt+0x94>
 801575e:	f04f 0c20 	mov.w	ip, #32
 8015762:	469e      	mov	lr, r3
 8015764:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8015768:	42a2      	cmp	r2, r4
 801576a:	eb06 070e 	add.w	r7, r6, lr
 801576e:	dc02      	bgt.n	8015776 <__ieee754_sqrt+0xca>
 8015770:	d112      	bne.n	8015798 <__ieee754_sqrt+0xec>
 8015772:	428f      	cmp	r7, r1
 8015774:	d810      	bhi.n	8015798 <__ieee754_sqrt+0xec>
 8015776:	2f00      	cmp	r7, #0
 8015778:	eb07 0e06 	add.w	lr, r7, r6
 801577c:	da42      	bge.n	8015804 <__ieee754_sqrt+0x158>
 801577e:	f1be 0f00 	cmp.w	lr, #0
 8015782:	db3f      	blt.n	8015804 <__ieee754_sqrt+0x158>
 8015784:	f104 0801 	add.w	r8, r4, #1
 8015788:	1b12      	subs	r2, r2, r4
 801578a:	428f      	cmp	r7, r1
 801578c:	bf88      	it	hi
 801578e:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8015792:	1bc9      	subs	r1, r1, r7
 8015794:	4433      	add	r3, r6
 8015796:	4644      	mov	r4, r8
 8015798:	0052      	lsls	r2, r2, #1
 801579a:	f1bc 0c01 	subs.w	ip, ip, #1
 801579e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80157a2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80157a6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80157aa:	d1dd      	bne.n	8015768 <__ieee754_sqrt+0xbc>
 80157ac:	430a      	orrs	r2, r1
 80157ae:	d006      	beq.n	80157be <__ieee754_sqrt+0x112>
 80157b0:	1c5c      	adds	r4, r3, #1
 80157b2:	bf13      	iteet	ne
 80157b4:	3301      	addne	r3, #1
 80157b6:	3501      	addeq	r5, #1
 80157b8:	4663      	moveq	r3, ip
 80157ba:	f023 0301 	bicne.w	r3, r3, #1
 80157be:	106a      	asrs	r2, r5, #1
 80157c0:	085b      	lsrs	r3, r3, #1
 80157c2:	07e9      	lsls	r1, r5, #31
 80157c4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80157c8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80157cc:	bf48      	it	mi
 80157ce:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80157d2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80157d6:	461c      	mov	r4, r3
 80157d8:	e780      	b.n	80156dc <__ieee754_sqrt+0x30>
 80157da:	0aca      	lsrs	r2, r1, #11
 80157dc:	3815      	subs	r0, #21
 80157de:	0549      	lsls	r1, r1, #21
 80157e0:	2a00      	cmp	r2, #0
 80157e2:	d0fa      	beq.n	80157da <__ieee754_sqrt+0x12e>
 80157e4:	02d6      	lsls	r6, r2, #11
 80157e6:	d50a      	bpl.n	80157fe <__ieee754_sqrt+0x152>
 80157e8:	f1c3 0420 	rsb	r4, r3, #32
 80157ec:	fa21 f404 	lsr.w	r4, r1, r4
 80157f0:	1e5d      	subs	r5, r3, #1
 80157f2:	4099      	lsls	r1, r3
 80157f4:	4322      	orrs	r2, r4
 80157f6:	1b43      	subs	r3, r0, r5
 80157f8:	e78b      	b.n	8015712 <__ieee754_sqrt+0x66>
 80157fa:	4618      	mov	r0, r3
 80157fc:	e7f0      	b.n	80157e0 <__ieee754_sqrt+0x134>
 80157fe:	0052      	lsls	r2, r2, #1
 8015800:	3301      	adds	r3, #1
 8015802:	e7ef      	b.n	80157e4 <__ieee754_sqrt+0x138>
 8015804:	46a0      	mov	r8, r4
 8015806:	e7bf      	b.n	8015788 <__ieee754_sqrt+0xdc>
 8015808:	7ff00000 	.word	0x7ff00000

0801580c <__ieee754_powf>:
 801580c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015810:	ee10 5a90 	vmov	r5, s1
 8015814:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8015818:	ed2d 8b02 	vpush	{d8}
 801581c:	eeb0 8a40 	vmov.f32	s16, s0
 8015820:	eef0 8a60 	vmov.f32	s17, s1
 8015824:	f000 8293 	beq.w	8015d4e <__ieee754_powf+0x542>
 8015828:	ee10 8a10 	vmov	r8, s0
 801582c:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8015830:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8015834:	dc06      	bgt.n	8015844 <__ieee754_powf+0x38>
 8015836:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801583a:	dd0a      	ble.n	8015852 <__ieee754_powf+0x46>
 801583c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8015840:	f000 8285 	beq.w	8015d4e <__ieee754_powf+0x542>
 8015844:	ecbd 8b02 	vpop	{d8}
 8015848:	48d9      	ldr	r0, [pc, #868]	; (8015bb0 <__ieee754_powf+0x3a4>)
 801584a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801584e:	f7fe bd85 	b.w	801435c <nanf>
 8015852:	f1b8 0f00 	cmp.w	r8, #0
 8015856:	da1d      	bge.n	8015894 <__ieee754_powf+0x88>
 8015858:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 801585c:	da2c      	bge.n	80158b8 <__ieee754_powf+0xac>
 801585e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8015862:	db30      	blt.n	80158c6 <__ieee754_powf+0xba>
 8015864:	15fb      	asrs	r3, r7, #23
 8015866:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801586a:	fa47 f603 	asr.w	r6, r7, r3
 801586e:	fa06 f303 	lsl.w	r3, r6, r3
 8015872:	42bb      	cmp	r3, r7
 8015874:	d127      	bne.n	80158c6 <__ieee754_powf+0xba>
 8015876:	f006 0601 	and.w	r6, r6, #1
 801587a:	f1c6 0602 	rsb	r6, r6, #2
 801587e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8015882:	d122      	bne.n	80158ca <__ieee754_powf+0xbe>
 8015884:	2d00      	cmp	r5, #0
 8015886:	f280 8268 	bge.w	8015d5a <__ieee754_powf+0x54e>
 801588a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801588e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8015892:	e00d      	b.n	80158b0 <__ieee754_powf+0xa4>
 8015894:	2600      	movs	r6, #0
 8015896:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801589a:	d1f0      	bne.n	801587e <__ieee754_powf+0x72>
 801589c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80158a0:	f000 8255 	beq.w	8015d4e <__ieee754_powf+0x542>
 80158a4:	dd0a      	ble.n	80158bc <__ieee754_powf+0xb0>
 80158a6:	2d00      	cmp	r5, #0
 80158a8:	f280 8254 	bge.w	8015d54 <__ieee754_powf+0x548>
 80158ac:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8015bb4 <__ieee754_powf+0x3a8>
 80158b0:	ecbd 8b02 	vpop	{d8}
 80158b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80158b8:	2602      	movs	r6, #2
 80158ba:	e7ec      	b.n	8015896 <__ieee754_powf+0x8a>
 80158bc:	2d00      	cmp	r5, #0
 80158be:	daf5      	bge.n	80158ac <__ieee754_powf+0xa0>
 80158c0:	eeb1 0a68 	vneg.f32	s0, s17
 80158c4:	e7f4      	b.n	80158b0 <__ieee754_powf+0xa4>
 80158c6:	2600      	movs	r6, #0
 80158c8:	e7d9      	b.n	801587e <__ieee754_powf+0x72>
 80158ca:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 80158ce:	d102      	bne.n	80158d6 <__ieee754_powf+0xca>
 80158d0:	ee28 0a08 	vmul.f32	s0, s16, s16
 80158d4:	e7ec      	b.n	80158b0 <__ieee754_powf+0xa4>
 80158d6:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 80158da:	eeb0 0a48 	vmov.f32	s0, s16
 80158de:	d108      	bne.n	80158f2 <__ieee754_powf+0xe6>
 80158e0:	f1b8 0f00 	cmp.w	r8, #0
 80158e4:	db05      	blt.n	80158f2 <__ieee754_powf+0xe6>
 80158e6:	ecbd 8b02 	vpop	{d8}
 80158ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80158ee:	f000 ba4d 	b.w	8015d8c <__ieee754_sqrtf>
 80158f2:	f000 fb63 	bl	8015fbc <fabsf>
 80158f6:	b124      	cbz	r4, 8015902 <__ieee754_powf+0xf6>
 80158f8:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 80158fc:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8015900:	d117      	bne.n	8015932 <__ieee754_powf+0x126>
 8015902:	2d00      	cmp	r5, #0
 8015904:	bfbc      	itt	lt
 8015906:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 801590a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801590e:	f1b8 0f00 	cmp.w	r8, #0
 8015912:	dacd      	bge.n	80158b0 <__ieee754_powf+0xa4>
 8015914:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8015918:	ea54 0306 	orrs.w	r3, r4, r6
 801591c:	d104      	bne.n	8015928 <__ieee754_powf+0x11c>
 801591e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8015922:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8015926:	e7c3      	b.n	80158b0 <__ieee754_powf+0xa4>
 8015928:	2e01      	cmp	r6, #1
 801592a:	d1c1      	bne.n	80158b0 <__ieee754_powf+0xa4>
 801592c:	eeb1 0a40 	vneg.f32	s0, s0
 8015930:	e7be      	b.n	80158b0 <__ieee754_powf+0xa4>
 8015932:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8015936:	3801      	subs	r0, #1
 8015938:	ea56 0300 	orrs.w	r3, r6, r0
 801593c:	d104      	bne.n	8015948 <__ieee754_powf+0x13c>
 801593e:	ee38 8a48 	vsub.f32	s16, s16, s16
 8015942:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8015946:	e7b3      	b.n	80158b0 <__ieee754_powf+0xa4>
 8015948:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 801594c:	dd6d      	ble.n	8015a2a <__ieee754_powf+0x21e>
 801594e:	4b9a      	ldr	r3, [pc, #616]	; (8015bb8 <__ieee754_powf+0x3ac>)
 8015950:	429c      	cmp	r4, r3
 8015952:	dc06      	bgt.n	8015962 <__ieee754_powf+0x156>
 8015954:	2d00      	cmp	r5, #0
 8015956:	daa9      	bge.n	80158ac <__ieee754_powf+0xa0>
 8015958:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8015bbc <__ieee754_powf+0x3b0>
 801595c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8015960:	e7a6      	b.n	80158b0 <__ieee754_powf+0xa4>
 8015962:	4b97      	ldr	r3, [pc, #604]	; (8015bc0 <__ieee754_powf+0x3b4>)
 8015964:	429c      	cmp	r4, r3
 8015966:	dd02      	ble.n	801596e <__ieee754_powf+0x162>
 8015968:	2d00      	cmp	r5, #0
 801596a:	dcf5      	bgt.n	8015958 <__ieee754_powf+0x14c>
 801596c:	e79e      	b.n	80158ac <__ieee754_powf+0xa0>
 801596e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015972:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015976:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8015bc4 <__ieee754_powf+0x3b8>
 801597a:	eef1 6a40 	vneg.f32	s13, s0
 801597e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8015982:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015986:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801598a:	eee7 7a40 	vfms.f32	s15, s14, s0
 801598e:	ee60 0a00 	vmul.f32	s1, s0, s0
 8015992:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8015bc8 <__ieee754_powf+0x3bc>
 8015996:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801599a:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8015bcc <__ieee754_powf+0x3c0>
 801599e:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 80159a2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80159a6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8015bd0 <__ieee754_powf+0x3c4>
 80159aa:	eeb0 6a67 	vmov.f32	s12, s15
 80159ae:	eea0 6a07 	vfma.f32	s12, s0, s14
 80159b2:	ee16 3a10 	vmov	r3, s12
 80159b6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80159ba:	f023 030f 	bic.w	r3, r3, #15
 80159be:	ee00 3a90 	vmov	s1, r3
 80159c2:	eee6 0a87 	vfma.f32	s1, s13, s14
 80159c6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80159ca:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 80159ce:	f025 050f 	bic.w	r5, r5, #15
 80159d2:	ee07 5a10 	vmov	s14, r5
 80159d6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80159da:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80159de:	ee07 3a90 	vmov	s15, r3
 80159e2:	eee7 0a27 	vfma.f32	s1, s14, s15
 80159e6:	3e01      	subs	r6, #1
 80159e8:	ea56 0200 	orrs.w	r2, r6, r0
 80159ec:	ee07 5a10 	vmov	s14, r5
 80159f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80159f4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80159f8:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80159fc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8015a00:	ee17 4a10 	vmov	r4, s14
 8015a04:	bf08      	it	eq
 8015a06:	eeb0 8a40 	vmoveq.f32	s16, s0
 8015a0a:	2c00      	cmp	r4, #0
 8015a0c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8015a10:	f340 8184 	ble.w	8015d1c <__ieee754_powf+0x510>
 8015a14:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8015a18:	f340 80fc 	ble.w	8015c14 <__ieee754_powf+0x408>
 8015a1c:	eddf 7a67 	vldr	s15, [pc, #412]	; 8015bbc <__ieee754_powf+0x3b0>
 8015a20:	ee28 0a27 	vmul.f32	s0, s16, s15
 8015a24:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015a28:	e742      	b.n	80158b0 <__ieee754_powf+0xa4>
 8015a2a:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8015a2e:	bfbf      	itttt	lt
 8015a30:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8015bd4 <__ieee754_powf+0x3c8>
 8015a34:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8015a38:	f06f 0217 	mvnlt.w	r2, #23
 8015a3c:	ee17 4a90 	vmovlt	r4, s15
 8015a40:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8015a44:	bfa8      	it	ge
 8015a46:	2200      	movge	r2, #0
 8015a48:	3b7f      	subs	r3, #127	; 0x7f
 8015a4a:	4413      	add	r3, r2
 8015a4c:	4a62      	ldr	r2, [pc, #392]	; (8015bd8 <__ieee754_powf+0x3cc>)
 8015a4e:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8015a52:	4294      	cmp	r4, r2
 8015a54:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8015a58:	dd06      	ble.n	8015a68 <__ieee754_powf+0x25c>
 8015a5a:	4a60      	ldr	r2, [pc, #384]	; (8015bdc <__ieee754_powf+0x3d0>)
 8015a5c:	4294      	cmp	r4, r2
 8015a5e:	f340 80a5 	ble.w	8015bac <__ieee754_powf+0x3a0>
 8015a62:	3301      	adds	r3, #1
 8015a64:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8015a68:	2400      	movs	r4, #0
 8015a6a:	4a5d      	ldr	r2, [pc, #372]	; (8015be0 <__ieee754_powf+0x3d4>)
 8015a6c:	00a7      	lsls	r7, r4, #2
 8015a6e:	443a      	add	r2, r7
 8015a70:	ee07 1a90 	vmov	s15, r1
 8015a74:	ed92 7a00 	vldr	s14, [r2]
 8015a78:	4a5a      	ldr	r2, [pc, #360]	; (8015be4 <__ieee754_powf+0x3d8>)
 8015a7a:	ee37 6a27 	vadd.f32	s12, s14, s15
 8015a7e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8015a82:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8015a86:	1049      	asrs	r1, r1, #1
 8015a88:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8015a8c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8015a90:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8015a94:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8015a98:	ee06 1a10 	vmov	s12, r1
 8015a9c:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8015aa0:	ee14 ca90 	vmov	ip, s9
 8015aa4:	ea02 0c0c 	and.w	ip, r2, ip
 8015aa8:	ee05 ca10 	vmov	s10, ip
 8015aac:	eeb1 4a45 	vneg.f32	s8, s10
 8015ab0:	eee4 5a06 	vfma.f32	s11, s8, s12
 8015ab4:	ee36 6a47 	vsub.f32	s12, s12, s14
 8015ab8:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8015be8 <__ieee754_powf+0x3dc>
 8015abc:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8015ac0:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8015ac4:	eee4 5a06 	vfma.f32	s11, s8, s12
 8015ac8:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8015acc:	ee25 6aa6 	vmul.f32	s12, s11, s13
 8015ad0:	eddf 5a46 	vldr	s11, [pc, #280]	; 8015bec <__ieee754_powf+0x3e0>
 8015ad4:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8015ad8:	eddf 5a45 	vldr	s11, [pc, #276]	; 8015bf0 <__ieee754_powf+0x3e4>
 8015adc:	eee7 5a27 	vfma.f32	s11, s14, s15
 8015ae0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8015bc4 <__ieee754_powf+0x3b8>
 8015ae4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8015ae8:	eddf 5a42 	vldr	s11, [pc, #264]	; 8015bf4 <__ieee754_powf+0x3e8>
 8015aec:	eee7 5a27 	vfma.f32	s11, s14, s15
 8015af0:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8015bf8 <__ieee754_powf+0x3ec>
 8015af4:	ee75 6a24 	vadd.f32	s13, s10, s9
 8015af8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8015afc:	ee66 6a86 	vmul.f32	s13, s13, s12
 8015b00:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 8015b04:	eef0 7a65 	vmov.f32	s15, s11
 8015b08:	eee3 6a87 	vfma.f32	s13, s7, s14
 8015b0c:	eee5 7a05 	vfma.f32	s15, s10, s10
 8015b10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015b14:	ee17 1a90 	vmov	r1, s15
 8015b18:	4011      	ands	r1, r2
 8015b1a:	ee07 1a90 	vmov	s15, r1
 8015b1e:	ee37 7ae5 	vsub.f32	s14, s15, s11
 8015b22:	eddf 5a36 	vldr	s11, [pc, #216]	; 8015bfc <__ieee754_powf+0x3f0>
 8015b26:	eea4 7a05 	vfma.f32	s14, s8, s10
 8015b2a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8015b2e:	ee27 7a24 	vmul.f32	s14, s14, s9
 8015b32:	eea7 7a86 	vfma.f32	s14, s15, s12
 8015b36:	eeb0 6a47 	vmov.f32	s12, s14
 8015b3a:	eea5 6a27 	vfma.f32	s12, s10, s15
 8015b3e:	ee16 1a10 	vmov	r1, s12
 8015b42:	4011      	ands	r1, r2
 8015b44:	ee06 1a90 	vmov	s13, r1
 8015b48:	eee4 6a27 	vfma.f32	s13, s8, s15
 8015b4c:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8015c00 <__ieee754_powf+0x3f4>
 8015b50:	ee37 7a66 	vsub.f32	s14, s14, s13
 8015b54:	ee06 1a10 	vmov	s12, r1
 8015b58:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015b5c:	eddf 7a29 	vldr	s15, [pc, #164]	; 8015c04 <__ieee754_powf+0x3f8>
 8015b60:	4929      	ldr	r1, [pc, #164]	; (8015c08 <__ieee754_powf+0x3fc>)
 8015b62:	eea6 7a27 	vfma.f32	s14, s12, s15
 8015b66:	4439      	add	r1, r7
 8015b68:	edd1 7a00 	vldr	s15, [r1]
 8015b6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015b70:	ee07 3a90 	vmov	s15, r3
 8015b74:	eef0 0a47 	vmov.f32	s1, s14
 8015b78:	4b24      	ldr	r3, [pc, #144]	; (8015c0c <__ieee754_powf+0x400>)
 8015b7a:	eee6 0a25 	vfma.f32	s1, s12, s11
 8015b7e:	443b      	add	r3, r7
 8015b80:	ed93 5a00 	vldr	s10, [r3]
 8015b84:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8015b88:	ee70 0a85 	vadd.f32	s1, s1, s10
 8015b8c:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8015b90:	ee17 3a90 	vmov	r3, s15
 8015b94:	4013      	ands	r3, r2
 8015b96:	ee07 3a90 	vmov	s15, r3
 8015b9a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8015b9e:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8015ba2:	eee6 7a65 	vfms.f32	s15, s12, s11
 8015ba6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015baa:	e70e      	b.n	80159ca <__ieee754_powf+0x1be>
 8015bac:	2401      	movs	r4, #1
 8015bae:	e75c      	b.n	8015a6a <__ieee754_powf+0x25e>
 8015bb0:	080168b1 	.word	0x080168b1
 8015bb4:	00000000 	.word	0x00000000
 8015bb8:	3f7ffff7 	.word	0x3f7ffff7
 8015bbc:	7149f2ca 	.word	0x7149f2ca
 8015bc0:	3f800007 	.word	0x3f800007
 8015bc4:	3eaaaaab 	.word	0x3eaaaaab
 8015bc8:	36eca570 	.word	0x36eca570
 8015bcc:	3fb8aa3b 	.word	0x3fb8aa3b
 8015bd0:	3fb8aa00 	.word	0x3fb8aa00
 8015bd4:	4b800000 	.word	0x4b800000
 8015bd8:	001cc471 	.word	0x001cc471
 8015bdc:	005db3d6 	.word	0x005db3d6
 8015be0:	08016a08 	.word	0x08016a08
 8015be4:	fffff000 	.word	0xfffff000
 8015be8:	3e6c3255 	.word	0x3e6c3255
 8015bec:	3e53f142 	.word	0x3e53f142
 8015bf0:	3e8ba305 	.word	0x3e8ba305
 8015bf4:	3edb6db7 	.word	0x3edb6db7
 8015bf8:	3f19999a 	.word	0x3f19999a
 8015bfc:	3f763800 	.word	0x3f763800
 8015c00:	3f76384f 	.word	0x3f76384f
 8015c04:	369dc3a0 	.word	0x369dc3a0
 8015c08:	08016a18 	.word	0x08016a18
 8015c0c:	08016a10 	.word	0x08016a10
 8015c10:	3338aa3c 	.word	0x3338aa3c
 8015c14:	f040 8092 	bne.w	8015d3c <__ieee754_powf+0x530>
 8015c18:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8015c10 <__ieee754_powf+0x404>
 8015c1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015c20:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8015c24:	eef4 6ac7 	vcmpe.f32	s13, s14
 8015c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c2c:	f73f aef6 	bgt.w	8015a1c <__ieee754_powf+0x210>
 8015c30:	15db      	asrs	r3, r3, #23
 8015c32:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8015c36:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8015c3a:	4103      	asrs	r3, r0
 8015c3c:	4423      	add	r3, r4
 8015c3e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8015c42:	4947      	ldr	r1, [pc, #284]	; (8015d60 <__ieee754_powf+0x554>)
 8015c44:	3a7f      	subs	r2, #127	; 0x7f
 8015c46:	4111      	asrs	r1, r2
 8015c48:	ea23 0101 	bic.w	r1, r3, r1
 8015c4c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8015c50:	ee07 1a10 	vmov	s14, r1
 8015c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8015c58:	f1c2 0217 	rsb	r2, r2, #23
 8015c5c:	4110      	asrs	r0, r2
 8015c5e:	2c00      	cmp	r4, #0
 8015c60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8015c64:	bfb8      	it	lt
 8015c66:	4240      	neglt	r0, r0
 8015c68:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8015c6c:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8015d64 <__ieee754_powf+0x558>
 8015c70:	ee17 3a10 	vmov	r3, s14
 8015c74:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8015c78:	f023 030f 	bic.w	r3, r3, #15
 8015c7c:	ee07 3a10 	vmov	s14, r3
 8015c80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015c84:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8015c88:	eddf 7a37 	vldr	s15, [pc, #220]	; 8015d68 <__ieee754_powf+0x55c>
 8015c8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015c90:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8015c94:	eddf 6a35 	vldr	s13, [pc, #212]	; 8015d6c <__ieee754_powf+0x560>
 8015c98:	eeb0 0a67 	vmov.f32	s0, s15
 8015c9c:	eea7 0a26 	vfma.f32	s0, s14, s13
 8015ca0:	eeb0 6a40 	vmov.f32	s12, s0
 8015ca4:	eea7 6a66 	vfms.f32	s12, s14, s13
 8015ca8:	ee20 7a00 	vmul.f32	s14, s0, s0
 8015cac:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8015cb0:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8015d70 <__ieee754_powf+0x564>
 8015cb4:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8015d74 <__ieee754_powf+0x568>
 8015cb8:	eea7 6a26 	vfma.f32	s12, s14, s13
 8015cbc:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8015d78 <__ieee754_powf+0x56c>
 8015cc0:	eee6 6a07 	vfma.f32	s13, s12, s14
 8015cc4:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8015d7c <__ieee754_powf+0x570>
 8015cc8:	eea6 6a87 	vfma.f32	s12, s13, s14
 8015ccc:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8015d80 <__ieee754_powf+0x574>
 8015cd0:	eee6 6a07 	vfma.f32	s13, s12, s14
 8015cd4:	eeb0 6a40 	vmov.f32	s12, s0
 8015cd8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8015cdc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8015ce0:	eeb0 7a46 	vmov.f32	s14, s12
 8015ce4:	ee77 6a66 	vsub.f32	s13, s14, s13
 8015ce8:	ee20 6a06 	vmul.f32	s12, s0, s12
 8015cec:	eee0 7a27 	vfma.f32	s15, s0, s15
 8015cf0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8015cf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015cf8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8015cfc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015d00:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8015d04:	ee10 3a10 	vmov	r3, s0
 8015d08:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8015d0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8015d10:	da1a      	bge.n	8015d48 <__ieee754_powf+0x53c>
 8015d12:	f000 f9bf 	bl	8016094 <scalbnf>
 8015d16:	ee20 0a08 	vmul.f32	s0, s0, s16
 8015d1a:	e5c9      	b.n	80158b0 <__ieee754_powf+0xa4>
 8015d1c:	4a19      	ldr	r2, [pc, #100]	; (8015d84 <__ieee754_powf+0x578>)
 8015d1e:	4293      	cmp	r3, r2
 8015d20:	dd02      	ble.n	8015d28 <__ieee754_powf+0x51c>
 8015d22:	eddf 7a19 	vldr	s15, [pc, #100]	; 8015d88 <__ieee754_powf+0x57c>
 8015d26:	e67b      	b.n	8015a20 <__ieee754_powf+0x214>
 8015d28:	d108      	bne.n	8015d3c <__ieee754_powf+0x530>
 8015d2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8015d2e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8015d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015d36:	f6ff af7b 	blt.w	8015c30 <__ieee754_powf+0x424>
 8015d3a:	e7f2      	b.n	8015d22 <__ieee754_powf+0x516>
 8015d3c:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8015d40:	f73f af76 	bgt.w	8015c30 <__ieee754_powf+0x424>
 8015d44:	2000      	movs	r0, #0
 8015d46:	e78f      	b.n	8015c68 <__ieee754_powf+0x45c>
 8015d48:	ee00 3a10 	vmov	s0, r3
 8015d4c:	e7e3      	b.n	8015d16 <__ieee754_powf+0x50a>
 8015d4e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015d52:	e5ad      	b.n	80158b0 <__ieee754_powf+0xa4>
 8015d54:	eeb0 0a68 	vmov.f32	s0, s17
 8015d58:	e5aa      	b.n	80158b0 <__ieee754_powf+0xa4>
 8015d5a:	eeb0 0a48 	vmov.f32	s0, s16
 8015d5e:	e5a7      	b.n	80158b0 <__ieee754_powf+0xa4>
 8015d60:	007fffff 	.word	0x007fffff
 8015d64:	3f317218 	.word	0x3f317218
 8015d68:	35bfbe8c 	.word	0x35bfbe8c
 8015d6c:	3f317200 	.word	0x3f317200
 8015d70:	3331bb4c 	.word	0x3331bb4c
 8015d74:	b5ddea0e 	.word	0xb5ddea0e
 8015d78:	388ab355 	.word	0x388ab355
 8015d7c:	bb360b61 	.word	0xbb360b61
 8015d80:	3e2aaaab 	.word	0x3e2aaaab
 8015d84:	43160000 	.word	0x43160000
 8015d88:	0da24260 	.word	0x0da24260

08015d8c <__ieee754_sqrtf>:
 8015d8c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8015d90:	4770      	bx	lr

08015d92 <fabs>:
 8015d92:	ec51 0b10 	vmov	r0, r1, d0
 8015d96:	ee10 2a10 	vmov	r2, s0
 8015d9a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015d9e:	ec43 2b10 	vmov	d0, r2, r3
 8015da2:	4770      	bx	lr

08015da4 <finite>:
 8015da4:	ee10 3a90 	vmov	r3, s1
 8015da8:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8015dac:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8015db0:	0fc0      	lsrs	r0, r0, #31
 8015db2:	4770      	bx	lr

08015db4 <matherr>:
 8015db4:	2000      	movs	r0, #0
 8015db6:	4770      	bx	lr

08015db8 <nan>:
 8015db8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015dc0 <nan+0x8>
 8015dbc:	4770      	bx	lr
 8015dbe:	bf00      	nop
 8015dc0:	00000000 	.word	0x00000000
 8015dc4:	7ff80000 	.word	0x7ff80000

08015dc8 <rint>:
 8015dc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015dca:	ec51 0b10 	vmov	r0, r1, d0
 8015dce:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8015dd2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8015dd6:	2e13      	cmp	r6, #19
 8015dd8:	460b      	mov	r3, r1
 8015dda:	ee10 4a10 	vmov	r4, s0
 8015dde:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8015de2:	dc56      	bgt.n	8015e92 <rint+0xca>
 8015de4:	2e00      	cmp	r6, #0
 8015de6:	da2b      	bge.n	8015e40 <rint+0x78>
 8015de8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8015dec:	4302      	orrs	r2, r0
 8015dee:	d023      	beq.n	8015e38 <rint+0x70>
 8015df0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8015df4:	4302      	orrs	r2, r0
 8015df6:	4254      	negs	r4, r2
 8015df8:	4314      	orrs	r4, r2
 8015dfa:	0c4b      	lsrs	r3, r1, #17
 8015dfc:	0b24      	lsrs	r4, r4, #12
 8015dfe:	045b      	lsls	r3, r3, #17
 8015e00:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8015e04:	ea44 0103 	orr.w	r1, r4, r3
 8015e08:	460b      	mov	r3, r1
 8015e0a:	492f      	ldr	r1, [pc, #188]	; (8015ec8 <rint+0x100>)
 8015e0c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8015e10:	e9d1 6700 	ldrd	r6, r7, [r1]
 8015e14:	4602      	mov	r2, r0
 8015e16:	4639      	mov	r1, r7
 8015e18:	4630      	mov	r0, r6
 8015e1a:	f7ea fa37 	bl	800028c <__adddf3>
 8015e1e:	e9cd 0100 	strd	r0, r1, [sp]
 8015e22:	463b      	mov	r3, r7
 8015e24:	4632      	mov	r2, r6
 8015e26:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015e2a:	f7ea fa2d 	bl	8000288 <__aeabi_dsub>
 8015e2e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015e32:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8015e36:	4639      	mov	r1, r7
 8015e38:	ec41 0b10 	vmov	d0, r0, r1
 8015e3c:	b003      	add	sp, #12
 8015e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e40:	4a22      	ldr	r2, [pc, #136]	; (8015ecc <rint+0x104>)
 8015e42:	4132      	asrs	r2, r6
 8015e44:	ea01 0702 	and.w	r7, r1, r2
 8015e48:	4307      	orrs	r7, r0
 8015e4a:	d0f5      	beq.n	8015e38 <rint+0x70>
 8015e4c:	0852      	lsrs	r2, r2, #1
 8015e4e:	4011      	ands	r1, r2
 8015e50:	430c      	orrs	r4, r1
 8015e52:	d00b      	beq.n	8015e6c <rint+0xa4>
 8015e54:	ea23 0202 	bic.w	r2, r3, r2
 8015e58:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8015e5c:	2e13      	cmp	r6, #19
 8015e5e:	fa43 f306 	asr.w	r3, r3, r6
 8015e62:	bf0c      	ite	eq
 8015e64:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8015e68:	2400      	movne	r4, #0
 8015e6a:	4313      	orrs	r3, r2
 8015e6c:	4916      	ldr	r1, [pc, #88]	; (8015ec8 <rint+0x100>)
 8015e6e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8015e72:	4622      	mov	r2, r4
 8015e74:	e9d5 4500 	ldrd	r4, r5, [r5]
 8015e78:	4620      	mov	r0, r4
 8015e7a:	4629      	mov	r1, r5
 8015e7c:	f7ea fa06 	bl	800028c <__adddf3>
 8015e80:	e9cd 0100 	strd	r0, r1, [sp]
 8015e84:	4622      	mov	r2, r4
 8015e86:	462b      	mov	r3, r5
 8015e88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015e8c:	f7ea f9fc 	bl	8000288 <__aeabi_dsub>
 8015e90:	e7d2      	b.n	8015e38 <rint+0x70>
 8015e92:	2e33      	cmp	r6, #51	; 0x33
 8015e94:	dd07      	ble.n	8015ea6 <rint+0xde>
 8015e96:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015e9a:	d1cd      	bne.n	8015e38 <rint+0x70>
 8015e9c:	ee10 2a10 	vmov	r2, s0
 8015ea0:	f7ea f9f4 	bl	800028c <__adddf3>
 8015ea4:	e7c8      	b.n	8015e38 <rint+0x70>
 8015ea6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8015eaa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015eae:	40f2      	lsrs	r2, r6
 8015eb0:	4210      	tst	r0, r2
 8015eb2:	d0c1      	beq.n	8015e38 <rint+0x70>
 8015eb4:	0852      	lsrs	r2, r2, #1
 8015eb6:	4210      	tst	r0, r2
 8015eb8:	bf1f      	itttt	ne
 8015eba:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8015ebe:	ea20 0202 	bicne.w	r2, r0, r2
 8015ec2:	4134      	asrne	r4, r6
 8015ec4:	4314      	orrne	r4, r2
 8015ec6:	e7d1      	b.n	8015e6c <rint+0xa4>
 8015ec8:	08016a20 	.word	0x08016a20
 8015ecc:	000fffff 	.word	0x000fffff

08015ed0 <scalbn>:
 8015ed0:	b570      	push	{r4, r5, r6, lr}
 8015ed2:	ec55 4b10 	vmov	r4, r5, d0
 8015ed6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8015eda:	4606      	mov	r6, r0
 8015edc:	462b      	mov	r3, r5
 8015ede:	b9aa      	cbnz	r2, 8015f0c <scalbn+0x3c>
 8015ee0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015ee4:	4323      	orrs	r3, r4
 8015ee6:	d03b      	beq.n	8015f60 <scalbn+0x90>
 8015ee8:	4b31      	ldr	r3, [pc, #196]	; (8015fb0 <scalbn+0xe0>)
 8015eea:	4629      	mov	r1, r5
 8015eec:	2200      	movs	r2, #0
 8015eee:	ee10 0a10 	vmov	r0, s0
 8015ef2:	f7ea fb81 	bl	80005f8 <__aeabi_dmul>
 8015ef6:	4b2f      	ldr	r3, [pc, #188]	; (8015fb4 <scalbn+0xe4>)
 8015ef8:	429e      	cmp	r6, r3
 8015efa:	4604      	mov	r4, r0
 8015efc:	460d      	mov	r5, r1
 8015efe:	da12      	bge.n	8015f26 <scalbn+0x56>
 8015f00:	a327      	add	r3, pc, #156	; (adr r3, 8015fa0 <scalbn+0xd0>)
 8015f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f06:	f7ea fb77 	bl	80005f8 <__aeabi_dmul>
 8015f0a:	e009      	b.n	8015f20 <scalbn+0x50>
 8015f0c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8015f10:	428a      	cmp	r2, r1
 8015f12:	d10c      	bne.n	8015f2e <scalbn+0x5e>
 8015f14:	ee10 2a10 	vmov	r2, s0
 8015f18:	4620      	mov	r0, r4
 8015f1a:	4629      	mov	r1, r5
 8015f1c:	f7ea f9b6 	bl	800028c <__adddf3>
 8015f20:	4604      	mov	r4, r0
 8015f22:	460d      	mov	r5, r1
 8015f24:	e01c      	b.n	8015f60 <scalbn+0x90>
 8015f26:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8015f2a:	460b      	mov	r3, r1
 8015f2c:	3a36      	subs	r2, #54	; 0x36
 8015f2e:	4432      	add	r2, r6
 8015f30:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8015f34:	428a      	cmp	r2, r1
 8015f36:	dd0b      	ble.n	8015f50 <scalbn+0x80>
 8015f38:	ec45 4b11 	vmov	d1, r4, r5
 8015f3c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8015fa8 <scalbn+0xd8>
 8015f40:	f000 f908 	bl	8016154 <copysign>
 8015f44:	a318      	add	r3, pc, #96	; (adr r3, 8015fa8 <scalbn+0xd8>)
 8015f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f4a:	ec51 0b10 	vmov	r0, r1, d0
 8015f4e:	e7da      	b.n	8015f06 <scalbn+0x36>
 8015f50:	2a00      	cmp	r2, #0
 8015f52:	dd08      	ble.n	8015f66 <scalbn+0x96>
 8015f54:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015f58:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015f5c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015f60:	ec45 4b10 	vmov	d0, r4, r5
 8015f64:	bd70      	pop	{r4, r5, r6, pc}
 8015f66:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8015f6a:	da0d      	bge.n	8015f88 <scalbn+0xb8>
 8015f6c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015f70:	429e      	cmp	r6, r3
 8015f72:	ec45 4b11 	vmov	d1, r4, r5
 8015f76:	dce1      	bgt.n	8015f3c <scalbn+0x6c>
 8015f78:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8015fa0 <scalbn+0xd0>
 8015f7c:	f000 f8ea 	bl	8016154 <copysign>
 8015f80:	a307      	add	r3, pc, #28	; (adr r3, 8015fa0 <scalbn+0xd0>)
 8015f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f86:	e7e0      	b.n	8015f4a <scalbn+0x7a>
 8015f88:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015f8c:	3236      	adds	r2, #54	; 0x36
 8015f8e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015f92:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015f96:	4620      	mov	r0, r4
 8015f98:	4629      	mov	r1, r5
 8015f9a:	2200      	movs	r2, #0
 8015f9c:	4b06      	ldr	r3, [pc, #24]	; (8015fb8 <scalbn+0xe8>)
 8015f9e:	e7b2      	b.n	8015f06 <scalbn+0x36>
 8015fa0:	c2f8f359 	.word	0xc2f8f359
 8015fa4:	01a56e1f 	.word	0x01a56e1f
 8015fa8:	8800759c 	.word	0x8800759c
 8015fac:	7e37e43c 	.word	0x7e37e43c
 8015fb0:	43500000 	.word	0x43500000
 8015fb4:	ffff3cb0 	.word	0xffff3cb0
 8015fb8:	3c900000 	.word	0x3c900000

08015fbc <fabsf>:
 8015fbc:	ee10 3a10 	vmov	r3, s0
 8015fc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015fc4:	ee00 3a10 	vmov	s0, r3
 8015fc8:	4770      	bx	lr

08015fca <finitef>:
 8015fca:	ee10 3a10 	vmov	r3, s0
 8015fce:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8015fd2:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8015fd6:	bfac      	ite	ge
 8015fd8:	2000      	movge	r0, #0
 8015fda:	2001      	movlt	r0, #1
 8015fdc:	4770      	bx	lr
	...

08015fe0 <rintf>:
 8015fe0:	b513      	push	{r0, r1, r4, lr}
 8015fe2:	ee10 1a10 	vmov	r1, s0
 8015fe6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015fea:	0ddc      	lsrs	r4, r3, #23
 8015fec:	3c7f      	subs	r4, #127	; 0x7f
 8015fee:	2c16      	cmp	r4, #22
 8015ff0:	dc46      	bgt.n	8016080 <rintf+0xa0>
 8015ff2:	b32b      	cbz	r3, 8016040 <rintf+0x60>
 8015ff4:	2c00      	cmp	r4, #0
 8015ff6:	ee10 2a10 	vmov	r2, s0
 8015ffa:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8015ffe:	da21      	bge.n	8016044 <rintf+0x64>
 8016000:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8016004:	425b      	negs	r3, r3
 8016006:	4a21      	ldr	r2, [pc, #132]	; (801608c <rintf+0xac>)
 8016008:	0a5b      	lsrs	r3, r3, #9
 801600a:	0d09      	lsrs	r1, r1, #20
 801600c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8016010:	0509      	lsls	r1, r1, #20
 8016012:	430b      	orrs	r3, r1
 8016014:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8016018:	ee07 3a90 	vmov	s15, r3
 801601c:	edd2 6a00 	vldr	s13, [r2]
 8016020:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8016024:	ed8d 7a01 	vstr	s14, [sp, #4]
 8016028:	eddd 7a01 	vldr	s15, [sp, #4]
 801602c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016030:	ee17 3a90 	vmov	r3, s15
 8016034:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016038:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 801603c:	ee00 3a10 	vmov	s0, r3
 8016040:	b002      	add	sp, #8
 8016042:	bd10      	pop	{r4, pc}
 8016044:	4b12      	ldr	r3, [pc, #72]	; (8016090 <rintf+0xb0>)
 8016046:	4123      	asrs	r3, r4
 8016048:	4219      	tst	r1, r3
 801604a:	d0f9      	beq.n	8016040 <rintf+0x60>
 801604c:	085b      	lsrs	r3, r3, #1
 801604e:	4219      	tst	r1, r3
 8016050:	d006      	beq.n	8016060 <rintf+0x80>
 8016052:	ea21 0203 	bic.w	r2, r1, r3
 8016056:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801605a:	fa43 f404 	asr.w	r4, r3, r4
 801605e:	4322      	orrs	r2, r4
 8016060:	4b0a      	ldr	r3, [pc, #40]	; (801608c <rintf+0xac>)
 8016062:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8016066:	ed90 7a00 	vldr	s14, [r0]
 801606a:	ee07 2a90 	vmov	s15, r2
 801606e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8016072:	edcd 7a01 	vstr	s15, [sp, #4]
 8016076:	ed9d 0a01 	vldr	s0, [sp, #4]
 801607a:	ee30 0a47 	vsub.f32	s0, s0, s14
 801607e:	e7df      	b.n	8016040 <rintf+0x60>
 8016080:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8016084:	d3dc      	bcc.n	8016040 <rintf+0x60>
 8016086:	ee30 0a00 	vadd.f32	s0, s0, s0
 801608a:	e7d9      	b.n	8016040 <rintf+0x60>
 801608c:	08016a30 	.word	0x08016a30
 8016090:	007fffff 	.word	0x007fffff

08016094 <scalbnf>:
 8016094:	b508      	push	{r3, lr}
 8016096:	ee10 2a10 	vmov	r2, s0
 801609a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 801609e:	ed2d 8b02 	vpush	{d8}
 80160a2:	eef0 0a40 	vmov.f32	s1, s0
 80160a6:	d004      	beq.n	80160b2 <scalbnf+0x1e>
 80160a8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80160ac:	d306      	bcc.n	80160bc <scalbnf+0x28>
 80160ae:	ee70 0a00 	vadd.f32	s1, s0, s0
 80160b2:	ecbd 8b02 	vpop	{d8}
 80160b6:	eeb0 0a60 	vmov.f32	s0, s1
 80160ba:	bd08      	pop	{r3, pc}
 80160bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80160c0:	d21c      	bcs.n	80160fc <scalbnf+0x68>
 80160c2:	4b1f      	ldr	r3, [pc, #124]	; (8016140 <scalbnf+0xac>)
 80160c4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8016144 <scalbnf+0xb0>
 80160c8:	4298      	cmp	r0, r3
 80160ca:	ee60 0a27 	vmul.f32	s1, s0, s15
 80160ce:	db10      	blt.n	80160f2 <scalbnf+0x5e>
 80160d0:	ee10 2a90 	vmov	r2, s1
 80160d4:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 80160d8:	3b19      	subs	r3, #25
 80160da:	4403      	add	r3, r0
 80160dc:	2bfe      	cmp	r3, #254	; 0xfe
 80160de:	dd0f      	ble.n	8016100 <scalbnf+0x6c>
 80160e0:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8016148 <scalbnf+0xb4>
 80160e4:	eeb0 0a48 	vmov.f32	s0, s16
 80160e8:	f000 f843 	bl	8016172 <copysignf>
 80160ec:	ee60 0a08 	vmul.f32	s1, s0, s16
 80160f0:	e7df      	b.n	80160b2 <scalbnf+0x1e>
 80160f2:	eddf 7a16 	vldr	s15, [pc, #88]	; 801614c <scalbnf+0xb8>
 80160f6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80160fa:	e7da      	b.n	80160b2 <scalbnf+0x1e>
 80160fc:	0ddb      	lsrs	r3, r3, #23
 80160fe:	e7ec      	b.n	80160da <scalbnf+0x46>
 8016100:	2b00      	cmp	r3, #0
 8016102:	dd06      	ble.n	8016112 <scalbnf+0x7e>
 8016104:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8016108:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801610c:	ee00 3a90 	vmov	s1, r3
 8016110:	e7cf      	b.n	80160b2 <scalbnf+0x1e>
 8016112:	f113 0f16 	cmn.w	r3, #22
 8016116:	da06      	bge.n	8016126 <scalbnf+0x92>
 8016118:	f24c 3350 	movw	r3, #50000	; 0xc350
 801611c:	4298      	cmp	r0, r3
 801611e:	dcdf      	bgt.n	80160e0 <scalbnf+0x4c>
 8016120:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 801614c <scalbnf+0xb8>
 8016124:	e7de      	b.n	80160e4 <scalbnf+0x50>
 8016126:	3319      	adds	r3, #25
 8016128:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801612c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8016130:	eddf 7a07 	vldr	s15, [pc, #28]	; 8016150 <scalbnf+0xbc>
 8016134:	ee07 3a10 	vmov	s14, r3
 8016138:	ee67 0a27 	vmul.f32	s1, s14, s15
 801613c:	e7b9      	b.n	80160b2 <scalbnf+0x1e>
 801613e:	bf00      	nop
 8016140:	ffff3cb0 	.word	0xffff3cb0
 8016144:	4c000000 	.word	0x4c000000
 8016148:	7149f2ca 	.word	0x7149f2ca
 801614c:	0da24260 	.word	0x0da24260
 8016150:	33000000 	.word	0x33000000

08016154 <copysign>:
 8016154:	ec51 0b10 	vmov	r0, r1, d0
 8016158:	ee11 0a90 	vmov	r0, s3
 801615c:	ee10 2a10 	vmov	r2, s0
 8016160:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8016164:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8016168:	ea41 0300 	orr.w	r3, r1, r0
 801616c:	ec43 2b10 	vmov	d0, r2, r3
 8016170:	4770      	bx	lr

08016172 <copysignf>:
 8016172:	ee10 3a10 	vmov	r3, s0
 8016176:	ee10 2a90 	vmov	r2, s1
 801617a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801617e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8016182:	4313      	orrs	r3, r2
 8016184:	ee00 3a10 	vmov	s0, r3
 8016188:	4770      	bx	lr
	...

0801618c <_init>:
 801618c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801618e:	bf00      	nop
 8016190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016192:	bc08      	pop	{r3}
 8016194:	469e      	mov	lr, r3
 8016196:	4770      	bx	lr

08016198 <_fini>:
 8016198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801619a:	bf00      	nop
 801619c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801619e:	bc08      	pop	{r3}
 80161a0:	469e      	mov	lr, r3
 80161a2:	4770      	bx	lr
