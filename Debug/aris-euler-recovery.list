
aris-euler-recovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001657c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000890  08016710  08016710  00026710  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016fa0  08016fa0  0003034c  2**0
                  CONTENTS
  4 .ARM          00000008  08016fa0  08016fa0  00026fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016fa8  08016fa8  0003034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016fa8  08016fa8  00026fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016fac  08016fac  00026fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  20000000  08016fb0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000feec  20000350  080172fc  00030350  2**3
                  ALLOC
 10 ._user_heap_stack 0000224c  2001023c  080172fc  0004023c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028367  00000000  00000000  0003037c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005921  00000000  00000000  000586e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001728  00000000  00000000  0005e008  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001470  00000000  00000000  0005f730  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000277fc  00000000  00000000  00060ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001d780  00000000  00000000  0008839c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c9545  00000000  00000000  000a5b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016f061  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007204  00000000  00000000  0016f0dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000350 	.word	0x20000350
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080166f4 	.word	0x080166f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000354 	.word	0x20000354
 80001cc:	080166f4 	.word	0x080166f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <fire_HAWKs>:

#include "IO.h"
#include "adc.h"


void fire_HAWKs(uint8_t * armed){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	if (*armed == 1 ) HAL_GPIO_WritePin(HAWK1_GPIO_Port, HAWK1_Pin, GPIO_PIN_SET);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d105      	bne.n	8000fa4 <fire_HAWKs+0x1c>
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f9e:	4808      	ldr	r0, [pc, #32]	; (8000fc0 <fire_HAWKs+0x38>)
 8000fa0:	f007 ff00 	bl	8008da4 <HAL_GPIO_WritePin>
	if (*armed == 1 ) HAL_GPIO_WritePin(HAWK2_GPIO_Port, HAWK2_Pin, GPIO_PIN_SET);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d105      	bne.n	8000fb8 <fire_HAWKs+0x30>
 8000fac:	2201      	movs	r2, #1
 8000fae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fb2:	4803      	ldr	r0, [pc, #12]	; (8000fc0 <fire_HAWKs+0x38>)
 8000fb4:	f007 fef6 	bl	8008da4 <HAL_GPIO_WritePin>
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40021000 	.word	0x40021000

08000fc4 <turn_off_HAWKs>:

void turn_off_HAWKs(void){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HAWK1_GPIO_Port, HAWK1_Pin, GPIO_PIN_RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fce:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <turn_off_HAWKs+0x20>)
 8000fd0:	f007 fee8 	bl	8008da4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HAWK2_GPIO_Port, HAWK2_Pin, GPIO_PIN_RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fda:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <turn_off_HAWKs+0x20>)
 8000fdc:	f007 fee2 	bl	8008da4 <HAL_GPIO_WritePin>
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40021000 	.word	0x40021000

08000fe8 <fire_TDs>:

void fire_TDs(uint8_t * armed){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	if (*armed == 1 ) HAL_GPIO_WritePin(TD1_GPIO_Port, TD1_Pin, GPIO_PIN_SET);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d105      	bne.n	8001004 <fire_TDs+0x1c>
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ffe:	4808      	ldr	r0, [pc, #32]	; (8001020 <fire_TDs+0x38>)
 8001000:	f007 fed0 	bl	8008da4 <HAL_GPIO_WritePin>
	if (*armed == 1 ) HAL_GPIO_WritePin(TD2_GPIO_Port, TD2_Pin, GPIO_PIN_SET);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d105      	bne.n	8001018 <fire_TDs+0x30>
 800100c:	2201      	movs	r2, #1
 800100e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001012:	4803      	ldr	r0, [pc, #12]	; (8001020 <fire_TDs+0x38>)
 8001014:	f007 fec6 	bl	8008da4 <HAL_GPIO_WritePin>
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40021000 	.word	0x40021000

08001024 <turn_off_TDs>:

void turn_off_TDs(void){
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TD1_GPIO_Port, TD1_Pin, GPIO_PIN_RESET);
 8001028:	2200      	movs	r2, #0
 800102a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800102e:	4805      	ldr	r0, [pc, #20]	; (8001044 <turn_off_TDs+0x20>)
 8001030:	f007 feb8 	bl	8008da4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TD2_GPIO_Port, TD2_Pin, GPIO_PIN_RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	f44f 7100 	mov.w	r1, #512	; 0x200
 800103a:	4802      	ldr	r0, [pc, #8]	; (8001044 <turn_off_TDs+0x20>)
 800103c:	f007 feb2 	bl	8008da4 <HAL_GPIO_WritePin>
}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40021000 	.word	0x40021000

08001048 <init_ADC>:

void init_ADC(void){
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 800104c:	4804      	ldr	r0, [pc, #16]	; (8001060 <init_ADC+0x18>)
 800104e:	f006 fcd1 	bl	80079f4 <HAL_ADC_Stop_DMA>
	HAL_ADC_Start_DMA(&hadc1, adc_buf, 8);
 8001052:	2208      	movs	r2, #8
 8001054:	4903      	ldr	r1, [pc, #12]	; (8001064 <init_ADC+0x1c>)
 8001056:	4802      	ldr	r0, [pc, #8]	; (8001060 <init_ADC+0x18>)
 8001058:	f006 fbda 	bl	8007810 <HAL_ADC_Start_DMA>
}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20004998 	.word	0x20004998
 8001064:	200008a8 	.word	0x200008a8

08001068 <read_ADC>:

void read_ADC(float * out){
 8001068:	b590      	push	{r4, r7, lr}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]

	float vsense = 3.3 / 4096.;
 8001070:	4b89      	ldr	r3, [pc, #548]	; (8001298 <read_ADC+0x230>)
 8001072:	60fb      	str	r3, [r7, #12]
	float scale = 16 / 3.3;
 8001074:	4b89      	ldr	r3, [pc, #548]	; (800129c <read_ADC+0x234>)
 8001076:	60bb      	str	r3, [r7, #8]

	out[0] = (float)adc_buf[0] * vsense * scale;
 8001078:	4b89      	ldr	r3, [pc, #548]	; (80012a0 <read_ADC+0x238>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	ee07 3a90 	vmov	s15, r3
 8001080:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001084:	edd7 7a03 	vldr	s15, [r7, #12]
 8001088:	ee27 7a27 	vmul.f32	s14, s14, s15
 800108c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001090:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	edc3 7a00 	vstr	s15, [r3]
	out[1] = (float)adc_buf[1] * vsense * scale;
 800109a:	4b81      	ldr	r3, [pc, #516]	; (80012a0 <read_ADC+0x238>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	ee07 3a90 	vmov	s15, r3
 80010a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80010aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	3304      	adds	r3, #4
 80010b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80010b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ba:	edc3 7a00 	vstr	s15, [r3]
	out[2] = (float)adc_buf[2] * vsense * scale;
 80010be:	4b78      	ldr	r3, [pc, #480]	; (80012a0 <read_ADC+0x238>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80010ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3308      	adds	r3, #8
 80010d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80010da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010de:	edc3 7a00 	vstr	s15, [r3]

	out[3] = -( 1000 * (( 3.3 / 2.0 - (float)adc_buf[3] * vsense) ) / 0.066 );
 80010e2:	4b6f      	ldr	r3, [pc, #444]	; (80012a0 <read_ADC+0x238>)
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	ee07 3a90 	vmov	s15, r3
 80010ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80010f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f6:	ee17 0a90 	vmov	r0, s15
 80010fa:	f7ff fa25 	bl	8000548 <__aeabi_f2d>
 80010fe:	4603      	mov	r3, r0
 8001100:	460c      	mov	r4, r1
 8001102:	461a      	mov	r2, r3
 8001104:	4623      	mov	r3, r4
 8001106:	a15c      	add	r1, pc, #368	; (adr r1, 8001278 <read_ADC+0x210>)
 8001108:	e9d1 0100 	ldrd	r0, r1, [r1]
 800110c:	f7ff f8bc 	bl	8000288 <__aeabi_dsub>
 8001110:	4603      	mov	r3, r0
 8001112:	460c      	mov	r4, r1
 8001114:	4618      	mov	r0, r3
 8001116:	4621      	mov	r1, r4
 8001118:	f04f 0200 	mov.w	r2, #0
 800111c:	4b61      	ldr	r3, [pc, #388]	; (80012a4 <read_ADC+0x23c>)
 800111e:	f7ff fa6b 	bl	80005f8 <__aeabi_dmul>
 8001122:	4603      	mov	r3, r0
 8001124:	460c      	mov	r4, r1
 8001126:	4618      	mov	r0, r3
 8001128:	4621      	mov	r1, r4
 800112a:	a355      	add	r3, pc, #340	; (adr r3, 8001280 <read_ADC+0x218>)
 800112c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001130:	f7ff fb8c 	bl	800084c <__aeabi_ddiv>
 8001134:	4603      	mov	r3, r0
 8001136:	460c      	mov	r4, r1
 8001138:	4618      	mov	r0, r3
 800113a:	4621      	mov	r1, r4
 800113c:	f7ff fd54 	bl	8000be8 <__aeabi_d2f>
 8001140:	4602      	mov	r2, r0
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	330c      	adds	r3, #12
 8001146:	ee07 2a90 	vmov	s15, r2
 800114a:	eef1 7a67 	vneg.f32	s15, s15
 800114e:	edc3 7a00 	vstr	s15, [r3]
	out[4] = -( 1000 * (( 3.3 / 2.0 - (float)adc_buf[4] * vsense) ) / 0.066 );
 8001152:	4b53      	ldr	r3, [pc, #332]	; (80012a0 <read_ADC+0x238>)
 8001154:	691b      	ldr	r3, [r3, #16]
 8001156:	ee07 3a90 	vmov	s15, r3
 800115a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800115e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001166:	ee17 0a90 	vmov	r0, s15
 800116a:	f7ff f9ed 	bl	8000548 <__aeabi_f2d>
 800116e:	4603      	mov	r3, r0
 8001170:	460c      	mov	r4, r1
 8001172:	461a      	mov	r2, r3
 8001174:	4623      	mov	r3, r4
 8001176:	a140      	add	r1, pc, #256	; (adr r1, 8001278 <read_ADC+0x210>)
 8001178:	e9d1 0100 	ldrd	r0, r1, [r1]
 800117c:	f7ff f884 	bl	8000288 <__aeabi_dsub>
 8001180:	4603      	mov	r3, r0
 8001182:	460c      	mov	r4, r1
 8001184:	4618      	mov	r0, r3
 8001186:	4621      	mov	r1, r4
 8001188:	f04f 0200 	mov.w	r2, #0
 800118c:	4b45      	ldr	r3, [pc, #276]	; (80012a4 <read_ADC+0x23c>)
 800118e:	f7ff fa33 	bl	80005f8 <__aeabi_dmul>
 8001192:	4603      	mov	r3, r0
 8001194:	460c      	mov	r4, r1
 8001196:	4618      	mov	r0, r3
 8001198:	4621      	mov	r1, r4
 800119a:	a339      	add	r3, pc, #228	; (adr r3, 8001280 <read_ADC+0x218>)
 800119c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a0:	f7ff fb54 	bl	800084c <__aeabi_ddiv>
 80011a4:	4603      	mov	r3, r0
 80011a6:	460c      	mov	r4, r1
 80011a8:	4618      	mov	r0, r3
 80011aa:	4621      	mov	r1, r4
 80011ac:	f7ff fd1c 	bl	8000be8 <__aeabi_d2f>
 80011b0:	4602      	mov	r2, r0
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	3310      	adds	r3, #16
 80011b6:	ee07 2a90 	vmov	s15, r2
 80011ba:	eef1 7a67 	vneg.f32	s15, s15
 80011be:	edc3 7a00 	vstr	s15, [r3]

	out[5] = (float)adc_buf[5] * vsense * scale;
 80011c2:	4b37      	ldr	r3, [pc, #220]	; (80012a0 <read_ADC+0x238>)
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	ee07 3a90 	vmov	s15, r3
 80011ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80011d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3314      	adds	r3, #20
 80011da:	edd7 7a02 	vldr	s15, [r7, #8]
 80011de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e2:	edc3 7a00 	vstr	s15, [r3]
	out[6] = (float)adc_buf[6] * vsense * scale;
 80011e6:	4b2e      	ldr	r3, [pc, #184]	; (80012a0 <read_ADC+0x238>)
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	ee07 3a90 	vmov	s15, r3
 80011ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80011f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3318      	adds	r3, #24
 80011fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001206:	edc3 7a00 	vstr	s15, [r3]

	out[7] = ((((float)adc_buf[7] * vsense) - 0.76) / 0.0025) + 25.0;
 800120a:	4b25      	ldr	r3, [pc, #148]	; (80012a0 <read_ADC+0x238>)
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	ee07 3a90 	vmov	s15, r3
 8001212:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001216:	edd7 7a03 	vldr	s15, [r7, #12]
 800121a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800121e:	ee17 0a90 	vmov	r0, s15
 8001222:	f7ff f991 	bl	8000548 <__aeabi_f2d>
 8001226:	a318      	add	r3, pc, #96	; (adr r3, 8001288 <read_ADC+0x220>)
 8001228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122c:	f7ff f82c 	bl	8000288 <__aeabi_dsub>
 8001230:	4603      	mov	r3, r0
 8001232:	460c      	mov	r4, r1
 8001234:	4618      	mov	r0, r3
 8001236:	4621      	mov	r1, r4
 8001238:	a315      	add	r3, pc, #84	; (adr r3, 8001290 <read_ADC+0x228>)
 800123a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123e:	f7ff fb05 	bl	800084c <__aeabi_ddiv>
 8001242:	4603      	mov	r3, r0
 8001244:	460c      	mov	r4, r1
 8001246:	4618      	mov	r0, r3
 8001248:	4621      	mov	r1, r4
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <read_ADC+0x240>)
 8001250:	f7ff f81c 	bl	800028c <__adddf3>
 8001254:	4603      	mov	r3, r0
 8001256:	460c      	mov	r4, r1
 8001258:	4619      	mov	r1, r3
 800125a:	4622      	mov	r2, r4
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f103 041c 	add.w	r4, r3, #28
 8001262:	4608      	mov	r0, r1
 8001264:	4611      	mov	r1, r2
 8001266:	f7ff fcbf 	bl	8000be8 <__aeabi_d2f>
 800126a:	4603      	mov	r3, r0
 800126c:	6023      	str	r3, [r4, #0]

}
 800126e:	bf00      	nop
 8001270:	3714      	adds	r7, #20
 8001272:	46bd      	mov	sp, r7
 8001274:	bd90      	pop	{r4, r7, pc}
 8001276:	bf00      	nop
 8001278:	66666666 	.word	0x66666666
 800127c:	3ffa6666 	.word	0x3ffa6666
 8001280:	4189374c 	.word	0x4189374c
 8001284:	3fb0e560 	.word	0x3fb0e560
 8001288:	851eb852 	.word	0x851eb852
 800128c:	3fe851eb 	.word	0x3fe851eb
 8001290:	47ae147b 	.word	0x47ae147b
 8001294:	3f647ae1 	.word	0x3f647ae1
 8001298:	3a533333 	.word	0x3a533333
 800129c:	409b26ca 	.word	0x409b26ca
 80012a0:	200008a8 	.word	0x200008a8
 80012a4:	408f4000 	.word	0x408f4000
 80012a8:	40390000 	.word	0x40390000

080012ac <bufclear>:
	return i;
}


void bufclear (char * buffer)  // clear buffer
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	for (int i=0; i<BUFLEN; i++)
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	e007      	b.n	80012ca <bufclear+0x1e>
	{
		buffer[i] = '\0';
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	4413      	add	r3, r2
 80012c0:	2200      	movs	r2, #0
 80012c2:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<BUFLEN; i++)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	3301      	adds	r3, #1
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012d0:	dbf3      	blt.n	80012ba <bufclear+0xe>
	}
}
 80012d2:	bf00      	nop
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <init_sd>:
		}
	return 0;
}


uint8_t init_sd(uint16_t * file_count, uint16_t * log_count){
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b09d      	sub	sp, #116	; 0x74
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
	DWORD fre_clust;
	uint32_t total, free_space;

	if (DEBUG_PRINT == 1) printf("mounting SD card...\n");

	FRESULT ret = f_mount(&fs, SDPath, 1);
 80012ea:	2201      	movs	r2, #1
 80012ec:	4955      	ldr	r1, [pc, #340]	; (8001444 <init_sd+0x164>)
 80012ee:	4856      	ldr	r0, [pc, #344]	; (8001448 <init_sd+0x168>)
 80012f0:	f00e f940 	bl	800f574 <f_mount>
 80012f4:	4603      	mov	r3, r0
 80012f6:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	if (ret == FR_OK)
 80012fa:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <init_sd+0x26>
	{
		if (DEBUG_PRINT == 1) printf("mounted SD card\n");
	} else {
		if (DEBUG_PRINT == 1) printf("no SD connection established\n");
	  if (DEBUG_PRINT == 1) printf("error: %d\n",ret);
	  return 0;
 8001302:	2300      	movs	r3, #0
 8001304:	e09a      	b.n	800143c <init_sd+0x15c>
	}

	/* Check free space */
	f_getfree(SDPath, &fre_clust, &pfs);
 8001306:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800130a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800130e:	4619      	mov	r1, r3
 8001310:	484c      	ldr	r0, [pc, #304]	; (8001444 <init_sd+0x164>)
 8001312:	f00f f9b0 	bl	8010676 <f_getfree>

	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001316:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	3b02      	subs	r3, #2
 800131c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800131e:	8952      	ldrh	r2, [r2, #10]
 8001320:	fb02 f303 	mul.w	r3, r2, r3
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f8ed 	bl	8000504 <__aeabi_ui2d>
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	4b47      	ldr	r3, [pc, #284]	; (800144c <init_sd+0x16c>)
 8001330:	f7ff f962 	bl	80005f8 <__aeabi_dmul>
 8001334:	4603      	mov	r3, r0
 8001336:	460c      	mov	r4, r1
 8001338:	4618      	mov	r0, r3
 800133a:	4621      	mov	r1, r4
 800133c:	f7ff fc34 	bl	8000ba8 <__aeabi_d2uiz>
 8001340:	4603      	mov	r3, r0
 8001342:	667b      	str	r3, [r7, #100]	; 0x64
	if (DEBUG_PRINT == 1) printf("SD CARD Total Size: \t%lu\n",total);
	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 8001344:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001346:	895b      	ldrh	r3, [r3, #10]
 8001348:	461a      	mov	r2, r3
 800134a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800134c:	fb03 f302 	mul.w	r3, r3, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff f8d7 	bl	8000504 <__aeabi_ui2d>
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	4b3c      	ldr	r3, [pc, #240]	; (800144c <init_sd+0x16c>)
 800135c:	f7ff f94c 	bl	80005f8 <__aeabi_dmul>
 8001360:	4603      	mov	r3, r0
 8001362:	460c      	mov	r4, r1
 8001364:	4618      	mov	r0, r3
 8001366:	4621      	mov	r1, r4
 8001368:	f7ff fc1e 	bl	8000ba8 <__aeabi_d2uiz>
 800136c:	4603      	mov	r3, r0
 800136e:	663b      	str	r3, [r7, #96]	; 0x60

	DIR dirs;
	char *fn;
	FILINFO Finfo;

	uint16_t cnt1 = 0;
 8001370:	2300      	movs	r3, #0
 8001372:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	uint16_t cnt2 = 0;
 8001376:	2300      	movs	r3, #0
 8001378:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

	if ((fresult = f_opendir(&dirs, SDPath)) == FR_OK)
 800137c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001380:	4930      	ldr	r1, [pc, #192]	; (8001444 <init_sd+0x164>)
 8001382:	4618      	mov	r0, r3
 8001384:	f00f f8c7 	bl	8010516 <f_opendir>
 8001388:	4603      	mov	r3, r0
 800138a:	461a      	mov	r2, r3
 800138c:	4b30      	ldr	r3, [pc, #192]	; (8001450 <init_sd+0x170>)
 800138e:	701a      	strb	r2, [r3, #0]
 8001390:	4b2f      	ldr	r3, [pc, #188]	; (8001450 <init_sd+0x170>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d148      	bne.n	800142a <init_sd+0x14a>
	{
			while (((fresult = f_readdir(&dirs, &Finfo)) == FR_OK) && Finfo.fname[0])
 8001398:	e034      	b.n	8001404 <init_sd+0x124>
			{
				fn = Finfo.fname;
 800139a:	f107 030c 	add.w	r3, r7, #12
 800139e:	3309      	adds	r3, #9
 80013a0:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (_FS_RPATH && fn[0] == '.') continue;

				if ((fn[0] == 'F') & (fn[1] == 'L'))
 80013a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b46      	cmp	r3, #70	; 0x46
 80013a8:	bf0c      	ite	eq
 80013aa:	2301      	moveq	r3, #1
 80013ac:	2300      	movne	r3, #0
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013b2:	3301      	adds	r3, #1
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	2b4c      	cmp	r3, #76	; 0x4c
 80013b8:	bf0c      	ite	eq
 80013ba:	2301      	moveq	r3, #1
 80013bc:	2300      	movne	r3, #0
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	4013      	ands	r3, r2
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d005      	beq.n	80013d4 <init_sd+0xf4>
				{
					if (DEBUG_PRINT == 1) printf("found flight log: %s \n",fn);
					cnt1 ++;
 80013c8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80013cc:	3301      	adds	r3, #1
 80013ce:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80013d2:	e017      	b.n	8001404 <init_sd+0x124>
				} else if ((fn[0] == 'L') & (fn[1] == 'O'))
 80013d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b4c      	cmp	r3, #76	; 0x4c
 80013da:	bf0c      	ite	eq
 80013dc:	2301      	moveq	r3, #1
 80013de:	2300      	movne	r3, #0
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013e4:	3301      	adds	r3, #1
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	2b4f      	cmp	r3, #79	; 0x4f
 80013ea:	bf0c      	ite	eq
 80013ec:	2301      	moveq	r3, #1
 80013ee:	2300      	movne	r3, #0
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	4013      	ands	r3, r2
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d004      	beq.n	8001404 <init_sd+0x124>
				{
					if (DEBUG_PRINT == 1) printf("found log file: %s \n",fn);
					cnt2 ++;
 80013fa:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80013fe:	3301      	adds	r3, #1
 8001400:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
			while (((fresult = f_readdir(&dirs, &Finfo)) == FR_OK) && Finfo.fname[0])
 8001404:	f107 020c 	add.w	r2, r7, #12
 8001408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140c:	4611      	mov	r1, r2
 800140e:	4618      	mov	r0, r3
 8001410:	f00f f8f4 	bl	80105fc <f_readdir>
 8001414:	4603      	mov	r3, r0
 8001416:	461a      	mov	r2, r3
 8001418:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <init_sd+0x170>)
 800141a:	701a      	strb	r2, [r3, #0]
 800141c:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <init_sd+0x170>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d102      	bne.n	800142a <init_sd+0x14a>
 8001424:	7d7b      	ldrb	r3, [r7, #21]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1b7      	bne.n	800139a <init_sd+0xba>
				}

			}
	}
	*file_count = cnt1;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8001430:	801a      	strh	r2, [r3, #0]
	*log_count = cnt2;
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001438:	801a      	strh	r2, [r3, #0]
	if (DEBUG_PRINT == 1) printf("\n this is the %hu th flight. \n", *file_count);
	if (DEBUG_PRINT == 1) printf("\n this is the %hu th log file. \n", *log_count);
	return 1;
 800143a:	2301      	movs	r3, #1
}
 800143c:	4618      	mov	r0, r3
 800143e:	3774      	adds	r7, #116	; 0x74
 8001440:	46bd      	mov	sp, r7
 8001442:	bd90      	pop	{r4, r7, pc}
 8001444:	2000e1d0 	.word	0x2000e1d0
 8001448:	200008c8 	.word	0x200008c8
 800144c:	3fe00000 	.word	0x3fe00000
 8001450:	20003964 	.word	0x20003964

08001454 <init_file>:

uint8_t init_file(char * FILE_NAME, char * LOG_NAME){
 8001454:	b580      	push	{r7, lr}
 8001456:	b0e4      	sub	sp, #400	; 0x190
 8001458:	af00      	add	r7, sp, #0
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	6018      	str	r0, [r3, #0]
 800145e:	463b      	mov	r3, r7
 8001460:	6019      	str	r1, [r3, #0]


	/**************** The following operation is using f_write and f_read **************************/

	/* Create second file with read write access and open it */
	fresult = f_open(&data_file, FILE_NAME, FA_CREATE_ALWAYS | FA_WRITE );
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	220a      	movs	r2, #10
 8001466:	6819      	ldr	r1, [r3, #0]
 8001468:	483c      	ldr	r0, [pc, #240]	; (800155c <init_file+0x108>)
 800146a:	f00e f8c9 	bl	800f600 <f_open>
 800146e:	4603      	mov	r3, r0
 8001470:	461a      	mov	r2, r3
 8001472:	4b3b      	ldr	r3, [pc, #236]	; (8001560 <init_file+0x10c>)
 8001474:	701a      	strb	r2, [r3, #0]

	if (fresult != FR_OK){
 8001476:	4b3a      	ldr	r3, [pc, #232]	; (8001560 <init_file+0x10c>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <init_file+0x2e>
		if (DEBUG_PRINT == 1) printf("trying to open datalog file, error-code: %d \n",fresult);
		return 0;
 800147e:	2300      	movs	r3, #0
 8001480:	e067      	b.n	8001552 <init_file+0xfe>
	}
	/* Writing text */
	//char myData[] = "xyx,ghj,acceleration,target position\n 1000,231.25,10,500.5";
	char myData[] = "Time,Armed,Event,State2,h,v,H_SHT,T_SHT,T_CPU,T_BARO1,T_BARO2,T_IMU1,T_IMU2,P_BARO1,P_BARO2,Ax_IMU1,Ay_IMU1,Az_IMU1,Gx_IMU1,Gy_IMU1,Gz_IMU1,Ax_IMU2,Ay_IMU2,Az_IMU2,Gx_IMU2,Gy_IMU2,Gz_IMU2,Ax_H3L,Ay_H3L,Az_H3L,I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2\n";
 8001482:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001486:	4a37      	ldr	r2, [pc, #220]	; (8001564 <init_file+0x110>)
 8001488:	4618      	mov	r0, r3
 800148a:	4611      	mov	r1, r2
 800148c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001490:	461a      	mov	r2, r3
 8001492:	f00f fb05 	bl	8010aa0 <memcpy>

	fresult = f_write(&data_file, myData, sizeof(myData), &bw);
 8001496:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800149a:	4b33      	ldr	r3, [pc, #204]	; (8001568 <init_file+0x114>)
 800149c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014a0:	482e      	ldr	r0, [pc, #184]	; (800155c <init_file+0x108>)
 80014a2:	f00e fbd8 	bl	800fc56 <f_write>
 80014a6:	4603      	mov	r3, r0
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b2d      	ldr	r3, [pc, #180]	; (8001560 <init_file+0x10c>)
 80014ac:	701a      	strb	r2, [r3, #0]
	/* Close file */
	f_close(&data_file);
 80014ae:	482b      	ldr	r0, [pc, #172]	; (800155c <init_file+0x108>)
 80014b0:	f00e fde3 	bl	801007a <f_close>

	if (fresult != FR_OK){
 80014b4:	4b2a      	ldr	r3, [pc, #168]	; (8001560 <init_file+0x10c>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <init_file+0x6c>
		if (DEBUG_PRINT == 1) printf ("FLIGHT FILE not created, error-code: %d \n",fresult);
		return 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	e048      	b.n	8001552 <init_file+0xfe>
	}
	//bufclear();

	HAL_Delay(100);
 80014c0:	2064      	movs	r0, #100	; 0x64
 80014c2:	f006 f93f 	bl	8007744 <HAL_Delay>

	/* Open file to write/ create a file if it doesn't exist */
	fresult = f_open(&log_file, LOG_NAME, FA_CREATE_NEW | FA_WRITE );
 80014c6:	463b      	mov	r3, r7
 80014c8:	2206      	movs	r2, #6
 80014ca:	6819      	ldr	r1, [r3, #0]
 80014cc:	4827      	ldr	r0, [pc, #156]	; (800156c <init_file+0x118>)
 80014ce:	f00e f897 	bl	800f600 <f_open>
 80014d2:	4603      	mov	r3, r0
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b22      	ldr	r3, [pc, #136]	; (8001560 <init_file+0x10c>)
 80014d8:	701a      	strb	r2, [r3, #0]

	if (fresult != FR_OK){
 80014da:	4b21      	ldr	r3, [pc, #132]	; (8001560 <init_file+0x10c>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <init_file+0x92>
		if (DEBUG_PRINT == 1) printf("trying to open setuplog file, error-code: %d \n",fresult);
		return 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	e035      	b.n	8001552 <init_file+0xfe>

	/* Writing text */

	//sprintf(buffer,"time: %ld,SHT STATE: %d\n ,BARO1 STATE: %d\n ,BARO2 STATE: %d \n ,IMU1 STATE %d\n ,IMU2 STATE %d\n, H3L STATE %d\n",HAL_GetTick(), SHT_STATE,BARO1_STATE,BARO2_STATE,IMU1_STATE,IMU2_STATE,H3L_STATE);

	bw = 0;
 80014e6:	4b20      	ldr	r3, [pc, #128]	; (8001568 <init_file+0x114>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
	char myLog[128];

	for (int i=0; i<128; i++)
 80014ec:	2300      	movs	r3, #0
 80014ee:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80014f2:	e00b      	b.n	800150c <init_file+0xb8>
	{
		myLog[i] = '\0';
 80014f4:	f107 020c 	add.w	r2, r7, #12
 80014f8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80014fc:	4413      	add	r3, r2
 80014fe:	2200      	movs	r2, #0
 8001500:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<128; i++)
 8001502:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001506:	3301      	adds	r3, #1
 8001508:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800150c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001510:	2b7f      	cmp	r3, #127	; 0x7f
 8001512:	ddef      	ble.n	80014f4 <init_file+0xa0>
	}

	sprintf(myLog, "TIMESTAMP, STATE, MSG \n %ld, SD WRITE OK, file name: %s \n", HAL_GetTick(), FILE_NAME);
 8001514:	f006 f90a 	bl	800772c <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	f107 000c 	add.w	r0, r7, #12
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4913      	ldr	r1, [pc, #76]	; (8001570 <init_file+0x11c>)
 8001524:	f00f ffa8 	bl	8011478 <siprintf>
	fresult = f_write(&log_file, myLog, sizeof(myLog), &bw);
 8001528:	f107 010c 	add.w	r1, r7, #12
 800152c:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <init_file+0x114>)
 800152e:	2280      	movs	r2, #128	; 0x80
 8001530:	480e      	ldr	r0, [pc, #56]	; (800156c <init_file+0x118>)
 8001532:	f00e fb90 	bl	800fc56 <f_write>
 8001536:	4603      	mov	r3, r0
 8001538:	461a      	mov	r2, r3
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <init_file+0x10c>)
 800153c:	701a      	strb	r2, [r3, #0]

	if (fresult != FR_OK){
 800153e:	4b08      	ldr	r3, [pc, #32]	; (8001560 <init_file+0x10c>)
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <init_file+0xf6>
		if (DEBUG_PRINT == 1) printf ("LOG FILE not created, error-code: %d \n",fresult);
		return 0;
 8001546:	2300      	movs	r3, #0
 8001548:	e003      	b.n	8001552 <init_file+0xfe>
	}

	/* Close file */
	f_close(&log_file);
 800154a:	4808      	ldr	r0, [pc, #32]	; (800156c <init_file+0x118>)
 800154c:	f00e fd95 	bl	801007a <f_close>

	// clearing buffer to show that result obtained is from the file
	//bufclear();

	return 1;
 8001550:	2301      	movs	r3, #1

}
 8001552:	4618      	mov	r0, r3
 8001554:	f507 77c8 	add.w	r7, r7, #400	; 0x190
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	200018fc 	.word	0x200018fc
 8001560:	20003964 	.word	0x20003964
 8001564:	0801674c 	.word	0x0801674c
 8001568:	20003960 	.word	0x20003960
 800156c:	20003968 	.word	0x20003968
 8001570:	08016710 	.word	0x08016710

08001574 <extract_from_str>:

float extract_from_str(char* buffer, uint8_t *start, uint8_t *end){
 8001574:	b580      	push	{r7, lr}
 8001576:	b08e      	sub	sp, #56	; 0x38
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	607a      	str	r2, [r7, #4]
	uint8_t x = *start;
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t y = *end;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    char c[30];
	for (int j=0; j<30; j++) {
 8001590:	2300      	movs	r3, #0
 8001592:	633b      	str	r3, [r7, #48]	; 0x30
 8001594:	e008      	b.n	80015a8 <extract_from_str+0x34>
		c[j] = '\0';
 8001596:	f107 0210 	add.w	r2, r7, #16
 800159a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800159c:	4413      	add	r3, r2
 800159e:	2200      	movs	r2, #0
 80015a0:	701a      	strb	r2, [r3, #0]
	for (int j=0; j<30; j++) {
 80015a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015a4:	3301      	adds	r3, #1
 80015a6:	633b      	str	r3, [r7, #48]	; 0x30
 80015a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015aa:	2b1d      	cmp	r3, #29
 80015ac:	ddf3      	ble.n	8001596 <extract_from_str+0x22>
	}
	while (buffer[y] != ','){
 80015ae:	e004      	b.n	80015ba <extract_from_str+0x46>
		y ++;
 80015b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80015b4:	3301      	adds	r3, #1
 80015b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	while (buffer[y] != ','){
 80015ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	4413      	add	r3, r2
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b2c      	cmp	r3, #44	; 0x2c
 80015c6:	d1f3      	bne.n	80015b0 <extract_from_str+0x3c>
	}
	*end = y;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80015ce:	701a      	strb	r2, [r3, #0]
	strncpy(c, buffer + x, y - x);
 80015d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	18d1      	adds	r1, r2, r3
 80015d8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80015dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	461a      	mov	r2, r3
 80015e4:	f107 0310 	add.w	r3, r7, #16
 80015e8:	4618      	mov	r0, r3
 80015ea:	f00f ff65 	bl	80114b8 <strncpy>

	return strtof(c,NULL);
 80015ee:	f107 0310 	add.w	r3, r7, #16
 80015f2:	2100      	movs	r1, #0
 80015f4:	4618      	mov	r0, r3
 80015f6:	f010 fd87 	bl	8012108 <strtof>
 80015fa:	eef0 7a40 	vmov.f32	s15, s0
}
 80015fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001602:	3738      	adds	r7, #56	; 0x38
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <read_from_SD>:

void read_from_SD(char * FILE_NAME, float * TIME, float * P1, float * P2, float * Ax1, float * Ay1, float * Az1, float * Ax2, float * Ay2, float * Az2){
 8001608:	b590      	push	{r4, r7, lr}
 800160a:	f2ad 4d3c 	subw	sp, sp, #1084	; 0x43c
 800160e:	af00      	add	r7, sp, #0
 8001610:	f107 040c 	add.w	r4, r7, #12
 8001614:	6020      	str	r0, [r4, #0]
 8001616:	f107 0008 	add.w	r0, r7, #8
 800161a:	6001      	str	r1, [r0, #0]
 800161c:	1d39      	adds	r1, r7, #4
 800161e:	600a      	str	r2, [r1, #0]
 8001620:	463a      	mov	r2, r7
 8001622:	6013      	str	r3, [r2, #0]

	char buffer[FAKE_LINE_LEN];

	for (int i = 0; i < FAKE_FILE_LEN; i++){
 8001624:	2300      	movs	r3, #0
 8001626:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 800162a:	e164      	b.n	80018f6 <read_from_SD+0x2ee>
	        f_gets(buffer, f_size(&fake_file), &fake_file);
 800162c:	4bb9      	ldr	r3, [pc, #740]	; (8001914 <read_from_SD+0x30c>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	4619      	mov	r1, r3
 8001632:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001636:	4ab7      	ldr	r2, [pc, #732]	; (8001914 <read_from_SD+0x30c>)
 8001638:	4618      	mov	r0, r3
 800163a:	f00f f8d1 	bl	80107e0 <f_gets>
	        printf("reading line: %d  \n",i);
 800163e:	f8d7 1434 	ldr.w	r1, [r7, #1076]	; 0x434
 8001642:	48b5      	ldr	r0, [pc, #724]	; (8001918 <read_from_SD+0x310>)
 8001644:	f00f fe9c 	bl	8011380 <iprintf>
	        uint8_t x = 0;
 8001648:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800164c:	2200      	movs	r2, #0
 800164e:	701a      	strb	r2, [r3, #0]
	        uint8_t y = 0;
 8001650:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]

			TIME[i] = extract_from_str(buffer, &x, &y);
 8001658:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	f107 0208 	add.w	r2, r7, #8
 8001662:	6812      	ldr	r2, [r2, #0]
 8001664:	18d4      	adds	r4, r2, r3
 8001666:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 800166a:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 800166e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff ff7e 	bl	8001574 <extract_from_str>
 8001678:	eef0 7a40 	vmov.f32	s15, s0
 800167c:	edc4 7a00 	vstr	s15, [r4]

			x = y + 1;
 8001680:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	3301      	adds	r3, #1
 8001688:	b2da      	uxtb	r2, r3
 800168a:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800168e:	701a      	strb	r2, [r3, #0]
			y = y + 1;
 8001690:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	3301      	adds	r3, #1
 8001698:	b2da      	uxtb	r2, r3
 800169a:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800169e:	701a      	strb	r2, [r3, #0]

			P1[i] = extract_from_str(buffer, &x, &y);
 80016a0:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	1d3a      	adds	r2, r7, #4
 80016a8:	6812      	ldr	r2, [r2, #0]
 80016aa:	18d4      	adds	r4, r2, r3
 80016ac:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 80016b0:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 80016b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff ff5b 	bl	8001574 <extract_from_str>
 80016be:	eef0 7a40 	vmov.f32	s15, s0
 80016c2:	edc4 7a00 	vstr	s15, [r4]

			x = y + 1;
 80016c6:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	3301      	adds	r3, #1
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80016d4:	701a      	strb	r2, [r3, #0]
			y = y + 1;
 80016d6:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	3301      	adds	r3, #1
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80016e4:	701a      	strb	r2, [r3, #0]

			P2[i] = extract_from_str(buffer, &x, &y);
 80016e6:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	463a      	mov	r2, r7
 80016ee:	6812      	ldr	r2, [r2, #0]
 80016f0:	18d4      	adds	r4, r2, r3
 80016f2:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 80016f6:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 80016fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff ff38 	bl	8001574 <extract_from_str>
 8001704:	eef0 7a40 	vmov.f32	s15, s0
 8001708:	edc4 7a00 	vstr	s15, [r4]

			x = y + 1;
 800170c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	3301      	adds	r3, #1
 8001714:	b2da      	uxtb	r2, r3
 8001716:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800171a:	701a      	strb	r2, [r3, #0]
			y = y + 1;
 800171c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	3301      	adds	r3, #1
 8001724:	b2da      	uxtb	r2, r3
 8001726:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800172a:	701a      	strb	r2, [r3, #0]

			Ax1[i] = extract_from_str(buffer, &x, &y);
 800172c:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 8001736:	18d4      	adds	r4, r2, r3
 8001738:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 800173c:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 8001740:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff15 	bl	8001574 <extract_from_str>
 800174a:	eef0 7a40 	vmov.f32	s15, s0
 800174e:	edc4 7a00 	vstr	s15, [r4]

			x = y + 1;
 8001752:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	3301      	adds	r3, #1
 800175a:	b2da      	uxtb	r2, r3
 800175c:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8001760:	701a      	strb	r2, [r3, #0]
			y = y + 1;
 8001762:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	3301      	adds	r3, #1
 800176a:	b2da      	uxtb	r2, r3
 800176c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001770:	701a      	strb	r2, [r3, #0]

	 		Ay1[i] = extract_from_str(buffer, &x, &y);
 8001772:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 800177c:	18d4      	adds	r4, r2, r3
 800177e:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 8001782:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 8001786:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff fef2 	bl	8001574 <extract_from_str>
 8001790:	eef0 7a40 	vmov.f32	s15, s0
 8001794:	edc4 7a00 	vstr	s15, [r4]

	 		x = y + 1;
 8001798:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	3301      	adds	r3, #1
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80017a6:	701a      	strb	r2, [r3, #0]
			y = y + 1;
 80017a8:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	3301      	adds	r3, #1
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80017b6:	701a      	strb	r2, [r3, #0]

			Az1[i] = extract_from_str(buffer, &x, &y);
 80017b8:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 80017c2:	18d4      	adds	r4, r2, r3
 80017c4:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 80017c8:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 80017cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fecf 	bl	8001574 <extract_from_str>
 80017d6:	eef0 7a40 	vmov.f32	s15, s0
 80017da:	edc4 7a00 	vstr	s15, [r4]

			x = y + 1;
 80017de:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	3301      	adds	r3, #1
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80017ec:	701a      	strb	r2, [r3, #0]
			y = y + 1;
 80017ee:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	3301      	adds	r3, #1
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80017fc:	701a      	strb	r2, [r3, #0]

	 		Ax2[i] = extract_from_str(buffer, &x, &y);
 80017fe:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	f8d7 2454 	ldr.w	r2, [r7, #1108]	; 0x454
 8001808:	18d4      	adds	r4, r2, r3
 800180a:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 800180e:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 8001812:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff feac 	bl	8001574 <extract_from_str>
 800181c:	eef0 7a40 	vmov.f32	s15, s0
 8001820:	edc4 7a00 	vstr	s15, [r4]

	 		x = y + 1;
 8001824:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	3301      	adds	r3, #1
 800182c:	b2da      	uxtb	r2, r3
 800182e:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8001832:	701a      	strb	r2, [r3, #0]
			y = y + 1;
 8001834:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	3301      	adds	r3, #1
 800183c:	b2da      	uxtb	r2, r3
 800183e:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001842:	701a      	strb	r2, [r3, #0]

	 		Ay2[i] = extract_from_str(buffer, &x, &y);
 8001844:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	f8d7 2458 	ldr.w	r2, [r7, #1112]	; 0x458
 800184e:	18d4      	adds	r4, r2, r3
 8001850:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 8001854:	f107 012f 	add.w	r1, r7, #47	; 0x2f
 8001858:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fe89 	bl	8001574 <extract_from_str>
 8001862:	eef0 7a40 	vmov.f32	s15, s0
 8001866:	edc4 7a00 	vstr	s15, [r4]

	 		x = y + 1;
 800186a:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	3301      	adds	r3, #1
 8001872:	b2da      	uxtb	r2, r3
 8001874:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8001878:	701a      	strb	r2, [r3, #0]
			y = y + 1;
 800187a:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	3301      	adds	r3, #1
 8001882:	b2da      	uxtb	r2, r3
 8001884:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8001888:	701a      	strb	r2, [r3, #0]

		    char c[30];

			for (int j=0; j<30; j++) {
 800188a:	2300      	movs	r3, #0
 800188c:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 8001890:	e00b      	b.n	80018aa <read_from_SD+0x2a2>
				c[j] = '\0';
 8001892:	f107 0210 	add.w	r2, r7, #16
 8001896:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 800189a:	4413      	add	r3, r2
 800189c:	2200      	movs	r2, #0
 800189e:	701a      	strb	r2, [r3, #0]
			for (int j=0; j<30; j++) {
 80018a0:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 80018a4:	3301      	adds	r3, #1
 80018a6:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
 80018aa:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 80018ae:	2b1d      	cmp	r3, #29
 80018b0:	ddef      	ble.n	8001892 <read_from_SD+0x28a>
			}

			strncpy(c, buffer + x, 10);
 80018b2:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	461a      	mov	r2, r3
 80018ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018be:	1899      	adds	r1, r3, r2
 80018c0:	f107 0310 	add.w	r3, r7, #16
 80018c4:	220a      	movs	r2, #10
 80018c6:	4618      	mov	r0, r3
 80018c8:	f00f fdf6 	bl	80114b8 <strncpy>

	 		Az2[i] = strtof(c,NULL);
 80018cc:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	f8d7 245c 	ldr.w	r2, [r7, #1116]	; 0x45c
 80018d6:	18d4      	adds	r4, r2, r3
 80018d8:	f107 0310 	add.w	r3, r7, #16
 80018dc:	2100      	movs	r1, #0
 80018de:	4618      	mov	r0, r3
 80018e0:	f010 fc12 	bl	8012108 <strtof>
 80018e4:	eef0 7a40 	vmov.f32	s15, s0
 80018e8:	edc4 7a00 	vstr	s15, [r4]
	for (int i = 0; i < FAKE_FILE_LEN; i++){
 80018ec:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80018f0:	3301      	adds	r3, #1
 80018f2:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 80018f6:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 80018fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018fe:	f6ff ae95 	blt.w	800162c <read_from_SD+0x24>
	    }

		// Close file
		f_close(&fake_file);
 8001902:	4804      	ldr	r0, [pc, #16]	; (8001914 <read_from_SD+0x30c>)
 8001904:	f00e fbb9 	bl	801007a <f_close>


}
 8001908:	bf00      	nop
 800190a:	f207 473c 	addw	r7, r7, #1084	; 0x43c
 800190e:	46bd      	mov	sp, r7
 8001910:	bd90      	pop	{r4, r7, pc}
 8001912:	bf00      	nop
 8001914:	20002930 	.word	0x20002930
 8001918:	0801684c 	.word	0x0801684c

0800191c <write_to_SD>:


void write_to_SD(char * FILE_NAME, char * buffer){
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
	char FILE_NAME[11];
	sprintf(FILE_NAME,"FL%05d.CSV",file_count);
	*/

	// Open the file with write access
	fresult = f_open(&data_file, FILE_NAME, FA_OPEN_ALWAYS | FA_WRITE);
 8001926:	2212      	movs	r2, #18
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	481f      	ldr	r0, [pc, #124]	; (80019a8 <write_to_SD+0x8c>)
 800192c:	f00d fe68 	bl	800f600 <f_open>
 8001930:	4603      	mov	r3, r0
 8001932:	461a      	mov	r2, r3
 8001934:	4b1d      	ldr	r3, [pc, #116]	; (80019ac <write_to_SD+0x90>)
 8001936:	701a      	strb	r2, [r3, #0]



	if (fresult == FR_OK)
 8001938:	4b1c      	ldr	r3, [pc, #112]	; (80019ac <write_to_SD+0x90>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d016      	beq.n	800196e <write_to_SD+0x52>
	} else {

		if (DEBUG_PRINT == 1) printf("error opening file for writing\n");
		if (DEBUG_PRINT == 1) printf("error: %d\n",fresult);

		fresult = f_mount(NULL, SDPath, 1);
 8001940:	2201      	movs	r2, #1
 8001942:	491b      	ldr	r1, [pc, #108]	; (80019b0 <write_to_SD+0x94>)
 8001944:	2000      	movs	r0, #0
 8001946:	f00d fe15 	bl	800f574 <f_mount>
 800194a:	4603      	mov	r3, r0
 800194c:	461a      	mov	r2, r3
 800194e:	4b17      	ldr	r3, [pc, #92]	; (80019ac <write_to_SD+0x90>)
 8001950:	701a      	strb	r2, [r3, #0]
		if (fresult == FR_OK) printf ("SD CARD UNMOUNTED successfully...\n");
 8001952:	4b16      	ldr	r3, [pc, #88]	; (80019ac <write_to_SD+0x90>)
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d102      	bne.n	8001960 <write_to_SD+0x44>
 800195a:	4816      	ldr	r0, [pc, #88]	; (80019b4 <write_to_SD+0x98>)
 800195c:	f00f fd84 	bl	8011468 <puts>

		FRESULT ret = f_mount(&fs, SDPath, 1);
 8001960:	2201      	movs	r2, #1
 8001962:	4913      	ldr	r1, [pc, #76]	; (80019b0 <write_to_SD+0x94>)
 8001964:	4814      	ldr	r0, [pc, #80]	; (80019b8 <write_to_SD+0x9c>)
 8001966:	f00d fe05 	bl	800f574 <f_mount>
 800196a:	4603      	mov	r3, r0
 800196c:	73fb      	strb	r3, [r7, #15]
			if (DEBUG_PRINT == 1) printf("error: %d\n",ret);
		}
	}

	// Move to offset to the end of the file
	fresult = f_lseek((&data_file),f_size(&data_file));
 800196e:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <write_to_SD+0x8c>)
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	4619      	mov	r1, r3
 8001974:	480c      	ldr	r0, [pc, #48]	; (80019a8 <write_to_SD+0x8c>)
 8001976:	f00e fbaa 	bl	80100ce <f_lseek>
 800197a:	4603      	mov	r3, r0
 800197c:	461a      	mov	r2, r3
 800197e:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <write_to_SD+0x90>)
 8001980:	701a      	strb	r2, [r3, #0]

	// write the string to the file
	fresult = f_puts(buffer, &data_file);
 8001982:	4909      	ldr	r1, [pc, #36]	; (80019a8 <write_to_SD+0x8c>)
 8001984:	6838      	ldr	r0, [r7, #0]
 8001986:	f00e ffe0 	bl	801094a <f_puts>
 800198a:	4603      	mov	r3, r0
 800198c:	b2da      	uxtb	r2, r3
 800198e:	4b07      	ldr	r3, [pc, #28]	; (80019ac <write_to_SD+0x90>)
 8001990:	701a      	strb	r2, [r3, #0]

	// Close file
	f_close(&data_file);
 8001992:	4805      	ldr	r0, [pc, #20]	; (80019a8 <write_to_SD+0x8c>)
 8001994:	f00e fb71 	bl	801007a <f_close>

	bufclear(buffer);
 8001998:	6838      	ldr	r0, [r7, #0]
 800199a:	f7ff fc87 	bl	80012ac <bufclear>

}
 800199e:	bf00      	nop
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	200018fc 	.word	0x200018fc
 80019ac:	20003964 	.word	0x20003964
 80019b0:	2000e1d0 	.word	0x2000e1d0
 80019b4:	08016860 	.word	0x08016860
 80019b8:	200008c8 	.word	0x200008c8

080019bc <log_to_SD>:

void log_to_SD(char * FILE_NAME, char * buffer){
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
	char FILE_NAME[11];
	sprintf(FILE_NAME,"FL%05d.CSV",file_count);
	*/

	// Open the file with write access
	fresult = f_open(&log_file, FILE_NAME, FA_OPEN_ALWAYS | FA_WRITE);
 80019c6:	2212      	movs	r2, #18
 80019c8:	6879      	ldr	r1, [r7, #4]
 80019ca:	481f      	ldr	r0, [pc, #124]	; (8001a48 <log_to_SD+0x8c>)
 80019cc:	f00d fe18 	bl	800f600 <f_open>
 80019d0:	4603      	mov	r3, r0
 80019d2:	461a      	mov	r2, r3
 80019d4:	4b1d      	ldr	r3, [pc, #116]	; (8001a4c <log_to_SD+0x90>)
 80019d6:	701a      	strb	r2, [r3, #0]



	if (fresult == FR_OK)
 80019d8:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <log_to_SD+0x90>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d016      	beq.n	8001a0e <log_to_SD+0x52>
	} else {

		if (DEBUG_PRINT == 1) printf("error opening log file for writing\n");
		if (DEBUG_PRINT == 1) printf("error: %d\n",fresult);

		fresult = f_mount(NULL, SDPath, 1);
 80019e0:	2201      	movs	r2, #1
 80019e2:	491b      	ldr	r1, [pc, #108]	; (8001a50 <log_to_SD+0x94>)
 80019e4:	2000      	movs	r0, #0
 80019e6:	f00d fdc5 	bl	800f574 <f_mount>
 80019ea:	4603      	mov	r3, r0
 80019ec:	461a      	mov	r2, r3
 80019ee:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <log_to_SD+0x90>)
 80019f0:	701a      	strb	r2, [r3, #0]
		if (fresult == FR_OK) printf ("SD CARD UNMOUNTED successfully...\n");
 80019f2:	4b16      	ldr	r3, [pc, #88]	; (8001a4c <log_to_SD+0x90>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d102      	bne.n	8001a00 <log_to_SD+0x44>
 80019fa:	4816      	ldr	r0, [pc, #88]	; (8001a54 <log_to_SD+0x98>)
 80019fc:	f00f fd34 	bl	8011468 <puts>

		FRESULT ret = f_mount(&fs, SDPath, 1);
 8001a00:	2201      	movs	r2, #1
 8001a02:	4913      	ldr	r1, [pc, #76]	; (8001a50 <log_to_SD+0x94>)
 8001a04:	4814      	ldr	r0, [pc, #80]	; (8001a58 <log_to_SD+0x9c>)
 8001a06:	f00d fdb5 	bl	800f574 <f_mount>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	73fb      	strb	r3, [r7, #15]
			if (DEBUG_PRINT == 1) printf("error: %d\n",ret);
		}
	}

	// Move to offset to the end of the file
	fresult = f_lseek((&log_file),f_size(&log_file));
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <log_to_SD+0x8c>)
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	4619      	mov	r1, r3
 8001a14:	480c      	ldr	r0, [pc, #48]	; (8001a48 <log_to_SD+0x8c>)
 8001a16:	f00e fb5a 	bl	80100ce <f_lseek>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <log_to_SD+0x90>)
 8001a20:	701a      	strb	r2, [r3, #0]

	// write the string to the file
	fresult = f_puts(buffer, &log_file);
 8001a22:	4909      	ldr	r1, [pc, #36]	; (8001a48 <log_to_SD+0x8c>)
 8001a24:	6838      	ldr	r0, [r7, #0]
 8001a26:	f00e ff90 	bl	801094a <f_puts>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <log_to_SD+0x90>)
 8001a30:	701a      	strb	r2, [r3, #0]

	// Close file
	f_close(&log_file);
 8001a32:	4805      	ldr	r0, [pc, #20]	; (8001a48 <log_to_SD+0x8c>)
 8001a34:	f00e fb21 	bl	801007a <f_close>

	bufclear(buffer);
 8001a38:	6838      	ldr	r0, [r7, #0]
 8001a3a:	f7ff fc37 	bl	80012ac <bufclear>

}
 8001a3e:	bf00      	nop
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	20003968 	.word	0x20003968
 8001a4c:	20003964 	.word	0x20003964
 8001a50:	2000e1d0 	.word	0x2000e1d0
 8001a54:	08016860 	.word	0x08016860
 8001a58:	200008c8 	.word	0x200008c8

08001a5c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001a62:	463b      	mov	r3, r7
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001a6e:	4b52      	ldr	r3, [pc, #328]	; (8001bb8 <MX_ADC1_Init+0x15c>)
 8001a70:	4a52      	ldr	r2, [pc, #328]	; (8001bbc <MX_ADC1_Init+0x160>)
 8001a72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a74:	4b50      	ldr	r3, [pc, #320]	; (8001bb8 <MX_ADC1_Init+0x15c>)
 8001a76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a7a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a7c:	4b4e      	ldr	r3, [pc, #312]	; (8001bb8 <MX_ADC1_Init+0x15c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001a82:	4b4d      	ldr	r3, [pc, #308]	; (8001bb8 <MX_ADC1_Init+0x15c>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001a88:	4b4b      	ldr	r3, [pc, #300]	; (8001bb8 <MX_ADC1_Init+0x15c>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a8e:	4b4a      	ldr	r3, [pc, #296]	; (8001bb8 <MX_ADC1_Init+0x15c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a96:	4b48      	ldr	r3, [pc, #288]	; (8001bb8 <MX_ADC1_Init+0x15c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a9c:	4b46      	ldr	r3, [pc, #280]	; (8001bb8 <MX_ADC1_Init+0x15c>)
 8001a9e:	4a48      	ldr	r2, [pc, #288]	; (8001bc0 <MX_ADC1_Init+0x164>)
 8001aa0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001aa2:	4b45      	ldr	r3, [pc, #276]	; (8001bb8 <MX_ADC1_Init+0x15c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8001aa8:	4b43      	ldr	r3, [pc, #268]	; (8001bb8 <MX_ADC1_Init+0x15c>)
 8001aaa:	2208      	movs	r2, #8
 8001aac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001aae:	4b42      	ldr	r3, [pc, #264]	; (8001bb8 <MX_ADC1_Init+0x15c>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ab6:	4b40      	ldr	r3, [pc, #256]	; (8001bb8 <MX_ADC1_Init+0x15c>)
 8001ab8:	2201      	movs	r2, #1
 8001aba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001abc:	483e      	ldr	r0, [pc, #248]	; (8001bb8 <MX_ADC1_Init+0x15c>)
 8001abe:	f005 fe63 	bl	8007788 <HAL_ADC_Init>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001ac8:	f000 fe42 	bl	8002750 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001ad4:	2307      	movs	r3, #7
 8001ad6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ad8:	463b      	mov	r3, r7
 8001ada:	4619      	mov	r1, r3
 8001adc:	4836      	ldr	r0, [pc, #216]	; (8001bb8 <MX_ADC1_Init+0x15c>)
 8001ade:	f005 fff1 	bl	8007ac4 <HAL_ADC_ConfigChannel>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001ae8:	f000 fe32 	bl	8002750 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001aec:	2301      	movs	r3, #1
 8001aee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001af0:	2302      	movs	r3, #2
 8001af2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001af4:	463b      	mov	r3, r7
 8001af6:	4619      	mov	r1, r3
 8001af8:	482f      	ldr	r0, [pc, #188]	; (8001bb8 <MX_ADC1_Init+0x15c>)
 8001afa:	f005 ffe3 	bl	8007ac4 <HAL_ADC_ConfigChannel>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001b04:	f000 fe24 	bl	8002750 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b10:	463b      	mov	r3, r7
 8001b12:	4619      	mov	r1, r3
 8001b14:	4828      	ldr	r0, [pc, #160]	; (8001bb8 <MX_ADC1_Init+0x15c>)
 8001b16:	f005 ffd5 	bl	8007ac4 <HAL_ADC_ConfigChannel>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001b20:	f000 fe16 	bl	8002750 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001b24:	230a      	movs	r3, #10
 8001b26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001b28:	2304      	movs	r3, #4
 8001b2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b2c:	463b      	mov	r3, r7
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4821      	ldr	r0, [pc, #132]	; (8001bb8 <MX_ADC1_Init+0x15c>)
 8001b32:	f005 ffc7 	bl	8007ac4 <HAL_ADC_ConfigChannel>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001b3c:	f000 fe08 	bl	8002750 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001b40:	230b      	movs	r3, #11
 8001b42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001b44:	2305      	movs	r3, #5
 8001b46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b48:	463b      	mov	r3, r7
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	481a      	ldr	r0, [pc, #104]	; (8001bb8 <MX_ADC1_Init+0x15c>)
 8001b4e:	f005 ffb9 	bl	8007ac4 <HAL_ADC_ConfigChannel>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001b58:	f000 fdfa 	bl	8002750 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001b5c:	230c      	movs	r3, #12
 8001b5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001b60:	2306      	movs	r3, #6
 8001b62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b64:	463b      	mov	r3, r7
 8001b66:	4619      	mov	r1, r3
 8001b68:	4813      	ldr	r0, [pc, #76]	; (8001bb8 <MX_ADC1_Init+0x15c>)
 8001b6a:	f005 ffab 	bl	8007ac4 <HAL_ADC_ConfigChannel>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001b74:	f000 fdec 	bl	8002750 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001b78:	230d      	movs	r3, #13
 8001b7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001b7c:	2307      	movs	r3, #7
 8001b7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b80:	463b      	mov	r3, r7
 8001b82:	4619      	mov	r1, r3
 8001b84:	480c      	ldr	r0, [pc, #48]	; (8001bb8 <MX_ADC1_Init+0x15c>)
 8001b86:	f005 ff9d 	bl	8007ac4 <HAL_ADC_ConfigChannel>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001b90:	f000 fdde 	bl	8002750 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001b94:	2310      	movs	r3, #16
 8001b96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001b98:	2308      	movs	r3, #8
 8001b9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b9c:	463b      	mov	r3, r7
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <MX_ADC1_Init+0x15c>)
 8001ba2:	f005 ff8f 	bl	8007ac4 <HAL_ADC_ConfigChannel>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8001bac:	f000 fdd0 	bl	8002750 <Error_Handler>
  }

}
 8001bb0:	bf00      	nop
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20004998 	.word	0x20004998
 8001bbc:	40012000 	.word	0x40012000
 8001bc0:	0f000001 	.word	0x0f000001

08001bc4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08a      	sub	sp, #40	; 0x28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a3c      	ldr	r2, [pc, #240]	; (8001cd4 <HAL_ADC_MspInit+0x110>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d171      	bne.n	8001cca <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	4b3b      	ldr	r3, [pc, #236]	; (8001cd8 <HAL_ADC_MspInit+0x114>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bee:	4a3a      	ldr	r2, [pc, #232]	; (8001cd8 <HAL_ADC_MspInit+0x114>)
 8001bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8001bf6:	4b38      	ldr	r3, [pc, #224]	; (8001cd8 <HAL_ADC_MspInit+0x114>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	4b34      	ldr	r3, [pc, #208]	; (8001cd8 <HAL_ADC_MspInit+0x114>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	4a33      	ldr	r2, [pc, #204]	; (8001cd8 <HAL_ADC_MspInit+0x114>)
 8001c0c:	f043 0304 	orr.w	r3, r3, #4
 8001c10:	6313      	str	r3, [r2, #48]	; 0x30
 8001c12:	4b31      	ldr	r3, [pc, #196]	; (8001cd8 <HAL_ADC_MspInit+0x114>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	f003 0304 	and.w	r3, r3, #4
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60bb      	str	r3, [r7, #8]
 8001c22:	4b2d      	ldr	r3, [pc, #180]	; (8001cd8 <HAL_ADC_MspInit+0x114>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	4a2c      	ldr	r2, [pc, #176]	; (8001cd8 <HAL_ADC_MspInit+0x114>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2e:	4b2a      	ldr	r3, [pc, #168]	; (8001cd8 <HAL_ADC_MspInit+0x114>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> ADC1_IN13
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001c3a:	230f      	movs	r3, #15
 8001c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c46:	f107 0314 	add.w	r3, r7, #20
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4823      	ldr	r0, [pc, #140]	; (8001cdc <HAL_ADC_MspInit+0x118>)
 8001c4e:	f006 fef7 	bl	8008a40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001c52:	2307      	movs	r3, #7
 8001c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c56:	2303      	movs	r3, #3
 8001c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5e:	f107 0314 	add.w	r3, r7, #20
 8001c62:	4619      	mov	r1, r3
 8001c64:	481e      	ldr	r0, [pc, #120]	; (8001ce0 <HAL_ADC_MspInit+0x11c>)
 8001c66:	f006 feeb 	bl	8008a40 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001c6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001c6c:	4a1e      	ldr	r2, [pc, #120]	; (8001ce8 <HAL_ADC_MspInit+0x124>)
 8001c6e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001c70:	4b1c      	ldr	r3, [pc, #112]	; (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c76:	4b1b      	ldr	r3, [pc, #108]	; (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c7c:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c82:	4b18      	ldr	r3, [pc, #96]	; (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001c84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c88:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c8a:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001c8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c90:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c92:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001c94:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c98:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c9a:	4b12      	ldr	r3, [pc, #72]	; (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001c9c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ca0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ca8:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001cae:	480d      	ldr	r0, [pc, #52]	; (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001cb0:	f006 faba 	bl	8008228 <HAL_DMA_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001cba:	f000 fd49 	bl	8002750 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a08      	ldr	r2, [pc, #32]	; (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001cc2:	639a      	str	r2, [r3, #56]	; 0x38
 8001cc4:	4a07      	ldr	r2, [pc, #28]	; (8001ce4 <HAL_ADC_MspInit+0x120>)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001cca:	bf00      	nop
 8001ccc:	3728      	adds	r7, #40	; 0x28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40012000 	.word	0x40012000
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40020800 	.word	0x40020800
 8001ce0:	40020000 	.word	0x40020000
 8001ce4:	200049e0 	.word	0x200049e0
 8001ce8:	40026410 	.word	0x40026410

08001cec <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <DWT_Delay_us+0x3c>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8001cfa:	f008 fd53 	bl	800a7a4 <HAL_RCC_GetHCLKFreq>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <DWT_Delay_us+0x40>)
 8001d02:	fba3 2302 	umull	r2, r3, r3, r2
 8001d06:	0c9b      	lsrs	r3, r3, #18
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	fb02 f303 	mul.w	r3, r2, r3
 8001d0e:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8001d10:	bf00      	nop
 8001d12:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <DWT_Delay_us+0x3c>)
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	1ad2      	subs	r2, r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d3f8      	bcc.n	8001d12 <DWT_Delay_us+0x26>
}
 8001d20:	bf00      	nop
 8001d22:	3710      	adds	r7, #16
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	e0001000 	.word	0xe0001000
 8001d2c:	431bde83 	.word	0x431bde83

08001d30 <play>:
float eighth = 256.0;
float fourth = 512.0;


void play(float freq, float time)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d3a:	edc7 0a00 	vstr	s1, [r7]
	float value = 0.0;
 8001d3e:	f04f 0300 	mov.w	r3, #0
 8001d42:	60fb      	str	r3, [r7, #12]
	while(value < time){
 8001d44:	e01b      	b.n	8001d7e <play+0x4e>
		HAL_GPIO_TogglePin(BUZ_GPIO_Port, BUZ_Pin);
 8001d46:	2120      	movs	r1, #32
 8001d48:	4816      	ldr	r0, [pc, #88]	; (8001da4 <play+0x74>)
 8001d4a:	f007 f844 	bl	8008dd6 <HAL_GPIO_TogglePin>
		DWT_Delay_us (1000*1000/freq);
 8001d4e:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001da8 <play+0x78>
 8001d52:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d5e:	ee17 0a90 	vmov	r0, s15
 8001d62:	f7ff ffc3 	bl	8001cec <DWT_Delay_us>
		value += 1000/freq;
 8001d66:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001dac <play+0x7c>
 8001d6a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d72:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d7a:	edc7 7a03 	vstr	s15, [r7, #12]
	while(value < time){
 8001d7e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d82:	edd7 7a00 	vldr	s15, [r7]
 8001d86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d8e:	d4da      	bmi.n	8001d46 <play+0x16>
	}
	HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 8001d90:	2200      	movs	r2, #0
 8001d92:	2120      	movs	r1, #32
 8001d94:	4803      	ldr	r0, [pc, #12]	; (8001da4 <play+0x74>)
 8001d96:	f007 f805 	bl	8008da4 <HAL_GPIO_WritePin>
};
 8001d9a:	bf00      	nop
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40020800 	.word	0x40020800
 8001da8:	49742400 	.word	0x49742400
 8001dac:	447a0000 	.word	0x447a0000

08001db0 <take_on_me>:

void take_on_me(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
	play(2 * Fis,sixteenth);
 8001db4:	4be0      	ldr	r3, [pc, #896]	; (8002138 <take_on_me+0x388>)
 8001db6:	edd3 7a00 	vldr	s15, [r3]
 8001dba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001dbe:	4bdf      	ldr	r3, [pc, #892]	; (800213c <take_on_me+0x38c>)
 8001dc0:	ed93 7a00 	vldr	s14, [r3]
 8001dc4:	eef0 0a47 	vmov.f32	s1, s14
 8001dc8:	eeb0 0a67 	vmov.f32	s0, s15
 8001dcc:	f7ff ffb0 	bl	8001d30 <play>
	HAL_Delay(sixteenth);
 8001dd0:	4bda      	ldr	r3, [pc, #872]	; (800213c <take_on_me+0x38c>)
 8001dd2:	edd3 7a00 	vldr	s15, [r3]
 8001dd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dda:	ee17 0a90 	vmov	r0, s15
 8001dde:	f005 fcb1 	bl	8007744 <HAL_Delay>
	play(2 * Fis,sixteenth);
 8001de2:	4bd5      	ldr	r3, [pc, #852]	; (8002138 <take_on_me+0x388>)
 8001de4:	edd3 7a00 	vldr	s15, [r3]
 8001de8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001dec:	4bd3      	ldr	r3, [pc, #844]	; (800213c <take_on_me+0x38c>)
 8001dee:	ed93 7a00 	vldr	s14, [r3]
 8001df2:	eef0 0a47 	vmov.f32	s1, s14
 8001df6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dfa:	f7ff ff99 	bl	8001d30 <play>
	HAL_Delay(sixteenth);
 8001dfe:	4bcf      	ldr	r3, [pc, #828]	; (800213c <take_on_me+0x38c>)
 8001e00:	edd3 7a00 	vldr	s15, [r3]
 8001e04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e08:	ee17 0a90 	vmov	r0, s15
 8001e0c:	f005 fc9a 	bl	8007744 <HAL_Delay>
	play(2 * D,eighth);
 8001e10:	4bcb      	ldr	r3, [pc, #812]	; (8002140 <take_on_me+0x390>)
 8001e12:	edd3 7a00 	vldr	s15, [r3]
 8001e16:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e1a:	4bca      	ldr	r3, [pc, #808]	; (8002144 <take_on_me+0x394>)
 8001e1c:	ed93 7a00 	vldr	s14, [r3]
 8001e20:	eef0 0a47 	vmov.f32	s1, s14
 8001e24:	eeb0 0a67 	vmov.f32	s0, s15
 8001e28:	f7ff ff82 	bl	8001d30 <play>
	play(B,eighth);
 8001e2c:	4bc6      	ldr	r3, [pc, #792]	; (8002148 <take_on_me+0x398>)
 8001e2e:	edd3 7a00 	vldr	s15, [r3]
 8001e32:	4bc4      	ldr	r3, [pc, #784]	; (8002144 <take_on_me+0x394>)
 8001e34:	ed93 7a00 	vldr	s14, [r3]
 8001e38:	eef0 0a47 	vmov.f32	s1, s14
 8001e3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e40:	f7ff ff76 	bl	8001d30 <play>
	HAL_Delay(eighth);
 8001e44:	4bbf      	ldr	r3, [pc, #764]	; (8002144 <take_on_me+0x394>)
 8001e46:	edd3 7a00 	vldr	s15, [r3]
 8001e4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e4e:	ee17 0a90 	vmov	r0, s15
 8001e52:	f005 fc77 	bl	8007744 <HAL_Delay>
	play(B,eighth);
 8001e56:	4bbc      	ldr	r3, [pc, #752]	; (8002148 <take_on_me+0x398>)
 8001e58:	edd3 7a00 	vldr	s15, [r3]
 8001e5c:	4bb9      	ldr	r3, [pc, #740]	; (8002144 <take_on_me+0x394>)
 8001e5e:	ed93 7a00 	vldr	s14, [r3]
 8001e62:	eef0 0a47 	vmov.f32	s1, s14
 8001e66:	eeb0 0a67 	vmov.f32	s0, s15
 8001e6a:	f7ff ff61 	bl	8001d30 <play>
	HAL_Delay(eighth);
 8001e6e:	4bb5      	ldr	r3, [pc, #724]	; (8002144 <take_on_me+0x394>)
 8001e70:	edd3 7a00 	vldr	s15, [r3]
 8001e74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e78:	ee17 0a90 	vmov	r0, s15
 8001e7c:	f005 fc62 	bl	8007744 <HAL_Delay>
	play(2 * E,eighth);
 8001e80:	4bb2      	ldr	r3, [pc, #712]	; (800214c <take_on_me+0x39c>)
 8001e82:	edd3 7a00 	vldr	s15, [r3]
 8001e86:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e8a:	4bae      	ldr	r3, [pc, #696]	; (8002144 <take_on_me+0x394>)
 8001e8c:	ed93 7a00 	vldr	s14, [r3]
 8001e90:	eef0 0a47 	vmov.f32	s1, s14
 8001e94:	eeb0 0a67 	vmov.f32	s0, s15
 8001e98:	f7ff ff4a 	bl	8001d30 <play>
	HAL_Delay(eighth);
 8001e9c:	4ba9      	ldr	r3, [pc, #676]	; (8002144 <take_on_me+0x394>)
 8001e9e:	edd3 7a00 	vldr	s15, [r3]
 8001ea2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ea6:	ee17 0a90 	vmov	r0, s15
 8001eaa:	f005 fc4b 	bl	8007744 <HAL_Delay>
	play(2 * E,eighth);
 8001eae:	4ba7      	ldr	r3, [pc, #668]	; (800214c <take_on_me+0x39c>)
 8001eb0:	edd3 7a00 	vldr	s15, [r3]
 8001eb4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001eb8:	4ba2      	ldr	r3, [pc, #648]	; (8002144 <take_on_me+0x394>)
 8001eba:	ed93 7a00 	vldr	s14, [r3]
 8001ebe:	eef0 0a47 	vmov.f32	s1, s14
 8001ec2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec6:	f7ff ff33 	bl	8001d30 <play>
	HAL_Delay(eighth);
 8001eca:	4b9e      	ldr	r3, [pc, #632]	; (8002144 <take_on_me+0x394>)
 8001ecc:	edd3 7a00 	vldr	s15, [r3]
 8001ed0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ed4:	ee17 0a90 	vmov	r0, s15
 8001ed8:	f005 fc34 	bl	8007744 <HAL_Delay>
	play(2 * E,eighth);
 8001edc:	4b9b      	ldr	r3, [pc, #620]	; (800214c <take_on_me+0x39c>)
 8001ede:	edd3 7a00 	vldr	s15, [r3]
 8001ee2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ee6:	4b97      	ldr	r3, [pc, #604]	; (8002144 <take_on_me+0x394>)
 8001ee8:	ed93 7a00 	vldr	s14, [r3]
 8001eec:	eef0 0a47 	vmov.f32	s1, s14
 8001ef0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ef4:	f7ff ff1c 	bl	8001d30 <play>
	play(2 * Gis,sixteenth);
 8001ef8:	4b95      	ldr	r3, [pc, #596]	; (8002150 <take_on_me+0x3a0>)
 8001efa:	edd3 7a00 	vldr	s15, [r3]
 8001efe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f02:	4b8e      	ldr	r3, [pc, #568]	; (800213c <take_on_me+0x38c>)
 8001f04:	ed93 7a00 	vldr	s14, [r3]
 8001f08:	eef0 0a47 	vmov.f32	s1, s14
 8001f0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f10:	f7ff ff0e 	bl	8001d30 <play>
	HAL_Delay(sixteenth);
 8001f14:	4b89      	ldr	r3, [pc, #548]	; (800213c <take_on_me+0x38c>)
 8001f16:	edd3 7a00 	vldr	s15, [r3]
 8001f1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f1e:	ee17 0a90 	vmov	r0, s15
 8001f22:	f005 fc0f 	bl	8007744 <HAL_Delay>
	play(2 * Gis,sixteenth);
 8001f26:	4b8a      	ldr	r3, [pc, #552]	; (8002150 <take_on_me+0x3a0>)
 8001f28:	edd3 7a00 	vldr	s15, [r3]
 8001f2c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f30:	4b82      	ldr	r3, [pc, #520]	; (800213c <take_on_me+0x38c>)
 8001f32:	ed93 7a00 	vldr	s14, [r3]
 8001f36:	eef0 0a47 	vmov.f32	s1, s14
 8001f3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001f3e:	f7ff fef7 	bl	8001d30 <play>
	HAL_Delay(sixteenth);
 8001f42:	4b7e      	ldr	r3, [pc, #504]	; (800213c <take_on_me+0x38c>)
 8001f44:	edd3 7a00 	vldr	s15, [r3]
 8001f48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f4c:	ee17 0a90 	vmov	r0, s15
 8001f50:	f005 fbf8 	bl	8007744 <HAL_Delay>
	play(2 * A,eighth);
 8001f54:	4b7f      	ldr	r3, [pc, #508]	; (8002154 <take_on_me+0x3a4>)
 8001f56:	edd3 7a00 	vldr	s15, [r3]
 8001f5a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f5e:	4b79      	ldr	r3, [pc, #484]	; (8002144 <take_on_me+0x394>)
 8001f60:	ed93 7a00 	vldr	s14, [r3]
 8001f64:	eef0 0a47 	vmov.f32	s1, s14
 8001f68:	eeb0 0a67 	vmov.f32	s0, s15
 8001f6c:	f7ff fee0 	bl	8001d30 <play>
	play(4 * Cis,eighth);
 8001f70:	4b79      	ldr	r3, [pc, #484]	; (8002158 <take_on_me+0x3a8>)
 8001f72:	edd3 7a00 	vldr	s15, [r3]
 8001f76:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001f7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f7e:	4b71      	ldr	r3, [pc, #452]	; (8002144 <take_on_me+0x394>)
 8001f80:	ed93 7a00 	vldr	s14, [r3]
 8001f84:	eef0 0a47 	vmov.f32	s1, s14
 8001f88:	eeb0 0a67 	vmov.f32	s0, s15
 8001f8c:	f7ff fed0 	bl	8001d30 <play>
	play(2 * A,sixteenth);
 8001f90:	4b70      	ldr	r3, [pc, #448]	; (8002154 <take_on_me+0x3a4>)
 8001f92:	edd3 7a00 	vldr	s15, [r3]
 8001f96:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f9a:	4b68      	ldr	r3, [pc, #416]	; (800213c <take_on_me+0x38c>)
 8001f9c:	ed93 7a00 	vldr	s14, [r3]
 8001fa0:	eef0 0a47 	vmov.f32	s1, s14
 8001fa4:	eeb0 0a67 	vmov.f32	s0, s15
 8001fa8:	f7ff fec2 	bl	8001d30 <play>
	HAL_Delay(sixteenth);
 8001fac:	4b63      	ldr	r3, [pc, #396]	; (800213c <take_on_me+0x38c>)
 8001fae:	edd3 7a00 	vldr	s15, [r3]
 8001fb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fb6:	ee17 0a90 	vmov	r0, s15
 8001fba:	f005 fbc3 	bl	8007744 <HAL_Delay>
	play(2 * A,sixteenth);
 8001fbe:	4b65      	ldr	r3, [pc, #404]	; (8002154 <take_on_me+0x3a4>)
 8001fc0:	edd3 7a00 	vldr	s15, [r3]
 8001fc4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001fc8:	4b5c      	ldr	r3, [pc, #368]	; (800213c <take_on_me+0x38c>)
 8001fca:	ed93 7a00 	vldr	s14, [r3]
 8001fce:	eef0 0a47 	vmov.f32	s1, s14
 8001fd2:	eeb0 0a67 	vmov.f32	s0, s15
 8001fd6:	f7ff feab 	bl	8001d30 <play>
	HAL_Delay(sixteenth);
 8001fda:	4b58      	ldr	r3, [pc, #352]	; (800213c <take_on_me+0x38c>)
 8001fdc:	edd3 7a00 	vldr	s15, [r3]
 8001fe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fe4:	ee17 0a90 	vmov	r0, s15
 8001fe8:	f005 fbac 	bl	8007744 <HAL_Delay>
	play(2 * A,sixteenth);
 8001fec:	4b59      	ldr	r3, [pc, #356]	; (8002154 <take_on_me+0x3a4>)
 8001fee:	edd3 7a00 	vldr	s15, [r3]
 8001ff2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ff6:	4b51      	ldr	r3, [pc, #324]	; (800213c <take_on_me+0x38c>)
 8001ff8:	ed93 7a00 	vldr	s14, [r3]
 8001ffc:	eef0 0a47 	vmov.f32	s1, s14
 8002000:	eeb0 0a67 	vmov.f32	s0, s15
 8002004:	f7ff fe94 	bl	8001d30 <play>
	HAL_Delay(sixteenth);
 8002008:	4b4c      	ldr	r3, [pc, #304]	; (800213c <take_on_me+0x38c>)
 800200a:	edd3 7a00 	vldr	s15, [r3]
 800200e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002012:	ee17 0a90 	vmov	r0, s15
 8002016:	f005 fb95 	bl	8007744 <HAL_Delay>
	play(2 * E,eighth);
 800201a:	4b4c      	ldr	r3, [pc, #304]	; (800214c <take_on_me+0x39c>)
 800201c:	edd3 7a00 	vldr	s15, [r3]
 8002020:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002024:	4b47      	ldr	r3, [pc, #284]	; (8002144 <take_on_me+0x394>)
 8002026:	ed93 7a00 	vldr	s14, [r3]
 800202a:	eef0 0a47 	vmov.f32	s1, s14
 800202e:	eeb0 0a67 	vmov.f32	s0, s15
 8002032:	f7ff fe7d 	bl	8001d30 <play>
	HAL_Delay(eighth);
 8002036:	4b43      	ldr	r3, [pc, #268]	; (8002144 <take_on_me+0x394>)
 8002038:	edd3 7a00 	vldr	s15, [r3]
 800203c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002040:	ee17 0a90 	vmov	r0, s15
 8002044:	f005 fb7e 	bl	8007744 <HAL_Delay>
	play(2 * D,eighth);
 8002048:	4b3d      	ldr	r3, [pc, #244]	; (8002140 <take_on_me+0x390>)
 800204a:	edd3 7a00 	vldr	s15, [r3]
 800204e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002052:	4b3c      	ldr	r3, [pc, #240]	; (8002144 <take_on_me+0x394>)
 8002054:	ed93 7a00 	vldr	s14, [r3]
 8002058:	eef0 0a47 	vmov.f32	s1, s14
 800205c:	eeb0 0a67 	vmov.f32	s0, s15
 8002060:	f7ff fe66 	bl	8001d30 <play>
	HAL_Delay(eighth);
 8002064:	4b37      	ldr	r3, [pc, #220]	; (8002144 <take_on_me+0x394>)
 8002066:	edd3 7a00 	vldr	s15, [r3]
 800206a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800206e:	ee17 0a90 	vmov	r0, s15
 8002072:	f005 fb67 	bl	8007744 <HAL_Delay>
	play(2 * Fis,eighth);
 8002076:	4b30      	ldr	r3, [pc, #192]	; (8002138 <take_on_me+0x388>)
 8002078:	edd3 7a00 	vldr	s15, [r3]
 800207c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002080:	4b30      	ldr	r3, [pc, #192]	; (8002144 <take_on_me+0x394>)
 8002082:	ed93 7a00 	vldr	s14, [r3]
 8002086:	eef0 0a47 	vmov.f32	s1, s14
 800208a:	eeb0 0a67 	vmov.f32	s0, s15
 800208e:	f7ff fe4f 	bl	8001d30 <play>
	HAL_Delay(eighth);
 8002092:	4b2c      	ldr	r3, [pc, #176]	; (8002144 <take_on_me+0x394>)
 8002094:	edd3 7a00 	vldr	s15, [r3]
 8002098:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800209c:	ee17 0a90 	vmov	r0, s15
 80020a0:	f005 fb50 	bl	8007744 <HAL_Delay>
	play(2 * Fis,eighth);
 80020a4:	4b24      	ldr	r3, [pc, #144]	; (8002138 <take_on_me+0x388>)
 80020a6:	edd3 7a00 	vldr	s15, [r3]
 80020aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80020ae:	4b25      	ldr	r3, [pc, #148]	; (8002144 <take_on_me+0x394>)
 80020b0:	ed93 7a00 	vldr	s14, [r3]
 80020b4:	eef0 0a47 	vmov.f32	s1, s14
 80020b8:	eeb0 0a67 	vmov.f32	s0, s15
 80020bc:	f7ff fe38 	bl	8001d30 <play>
	HAL_Delay(eighth);
 80020c0:	4b20      	ldr	r3, [pc, #128]	; (8002144 <take_on_me+0x394>)
 80020c2:	edd3 7a00 	vldr	s15, [r3]
 80020c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020ca:	ee17 0a90 	vmov	r0, s15
 80020ce:	f005 fb39 	bl	8007744 <HAL_Delay>
	play(2 * Fis,eighth);
 80020d2:	4b19      	ldr	r3, [pc, #100]	; (8002138 <take_on_me+0x388>)
 80020d4:	edd3 7a00 	vldr	s15, [r3]
 80020d8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80020dc:	4b19      	ldr	r3, [pc, #100]	; (8002144 <take_on_me+0x394>)
 80020de:	ed93 7a00 	vldr	s14, [r3]
 80020e2:	eef0 0a47 	vmov.f32	s1, s14
 80020e6:	eeb0 0a67 	vmov.f32	s0, s15
 80020ea:	f7ff fe21 	bl	8001d30 <play>
	HAL_Delay(eighth);
 80020ee:	4b15      	ldr	r3, [pc, #84]	; (8002144 <take_on_me+0x394>)
 80020f0:	edd3 7a00 	vldr	s15, [r3]
 80020f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020f8:	ee17 0a90 	vmov	r0, s15
 80020fc:	f005 fb22 	bl	8007744 <HAL_Delay>
	play(2 * Fis,eighth);
 8002100:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <take_on_me+0x388>)
 8002102:	edd3 7a00 	vldr	s15, [r3]
 8002106:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800210a:	4b0e      	ldr	r3, [pc, #56]	; (8002144 <take_on_me+0x394>)
 800210c:	ed93 7a00 	vldr	s14, [r3]
 8002110:	eef0 0a47 	vmov.f32	s1, s14
 8002114:	eeb0 0a67 	vmov.f32	s0, s15
 8002118:	f7ff fe0a 	bl	8001d30 <play>
	play(2 * E,sixteenth);
 800211c:	4b0b      	ldr	r3, [pc, #44]	; (800214c <take_on_me+0x39c>)
 800211e:	edd3 7a00 	vldr	s15, [r3]
 8002122:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002126:	4b05      	ldr	r3, [pc, #20]	; (800213c <take_on_me+0x38c>)
 8002128:	ed93 7a00 	vldr	s14, [r3]
 800212c:	eef0 0a47 	vmov.f32	s1, s14
 8002130:	eeb0 0a67 	vmov.f32	s0, s15
 8002134:	e012      	b.n	800215c <take_on_me+0x3ac>
 8002136:	bf00      	nop
 8002138:	2000000c 	.word	0x2000000c
 800213c:	2000001c 	.word	0x2000001c
 8002140:	20000004 	.word	0x20000004
 8002144:	20000020 	.word	0x20000020
 8002148:	20000018 	.word	0x20000018
 800214c:	20000008 	.word	0x20000008
 8002150:	20000010 	.word	0x20000010
 8002154:	20000014 	.word	0x20000014
 8002158:	20000000 	.word	0x20000000
 800215c:	f7ff fde8 	bl	8001d30 <play>
	HAL_Delay(sixteenth);
 8002160:	4b1e      	ldr	r3, [pc, #120]	; (80021dc <take_on_me+0x42c>)
 8002162:	edd3 7a00 	vldr	s15, [r3]
 8002166:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800216a:	ee17 0a90 	vmov	r0, s15
 800216e:	f005 fae9 	bl	8007744 <HAL_Delay>
	play(2 * E,sixteenth);
 8002172:	4b1b      	ldr	r3, [pc, #108]	; (80021e0 <take_on_me+0x430>)
 8002174:	edd3 7a00 	vldr	s15, [r3]
 8002178:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800217c:	4b17      	ldr	r3, [pc, #92]	; (80021dc <take_on_me+0x42c>)
 800217e:	ed93 7a00 	vldr	s14, [r3]
 8002182:	eef0 0a47 	vmov.f32	s1, s14
 8002186:	eeb0 0a67 	vmov.f32	s0, s15
 800218a:	f7ff fdd1 	bl	8001d30 <play>
	HAL_Delay(sixteenth);
 800218e:	4b13      	ldr	r3, [pc, #76]	; (80021dc <take_on_me+0x42c>)
 8002190:	edd3 7a00 	vldr	s15, [r3]
 8002194:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002198:	ee17 0a90 	vmov	r0, s15
 800219c:	f005 fad2 	bl	8007744 <HAL_Delay>
	play(2 * Fis,eighth);
 80021a0:	4b10      	ldr	r3, [pc, #64]	; (80021e4 <take_on_me+0x434>)
 80021a2:	edd3 7a00 	vldr	s15, [r3]
 80021a6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80021aa:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <take_on_me+0x438>)
 80021ac:	ed93 7a00 	vldr	s14, [r3]
 80021b0:	eef0 0a47 	vmov.f32	s1, s14
 80021b4:	eeb0 0a67 	vmov.f32	s0, s15
 80021b8:	f7ff fdba 	bl	8001d30 <play>
	play(2 * E,eighth);
 80021bc:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <take_on_me+0x430>)
 80021be:	edd3 7a00 	vldr	s15, [r3]
 80021c2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80021c6:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <take_on_me+0x438>)
 80021c8:	ed93 7a00 	vldr	s14, [r3]
 80021cc:	eef0 0a47 	vmov.f32	s1, s14
 80021d0:	eeb0 0a67 	vmov.f32	s0, s15
 80021d4:	f7ff fdac 	bl	8001d30 <play>

}
 80021d8:	bf00      	nop
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	2000001c 	.word	0x2000001c
 80021e0:	20000008 	.word	0x20000008
 80021e4:	2000000c 	.word	0x2000000c
 80021e8:	20000020 	.word	0x20000020

080021ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	607b      	str	r3, [r7, #4]
 80021f6:	4b14      	ldr	r3, [pc, #80]	; (8002248 <MX_DMA_Init+0x5c>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	4a13      	ldr	r2, [pc, #76]	; (8002248 <MX_DMA_Init+0x5c>)
 80021fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002200:	6313      	str	r3, [r2, #48]	; 0x30
 8002202:	4b11      	ldr	r3, [pc, #68]	; (8002248 <MX_DMA_Init+0x5c>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800220a:	607b      	str	r3, [r7, #4]
 800220c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800220e:	2200      	movs	r2, #0
 8002210:	2100      	movs	r1, #0
 8002212:	2038      	movs	r0, #56	; 0x38
 8002214:	f005 ffd1 	bl	80081ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002218:	2038      	movs	r0, #56	; 0x38
 800221a:	f005 ffea 	bl	80081f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800221e:	2200      	movs	r2, #0
 8002220:	2100      	movs	r1, #0
 8002222:	203b      	movs	r0, #59	; 0x3b
 8002224:	f005 ffc9 	bl	80081ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002228:	203b      	movs	r0, #59	; 0x3b
 800222a:	f005 ffe2 	bl	80081f2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800222e:	2200      	movs	r2, #0
 8002230:	2100      	movs	r1, #0
 8002232:	2045      	movs	r0, #69	; 0x45
 8002234:	f005 ffc1 	bl	80081ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002238:	2045      	movs	r0, #69	; 0x45
 800223a:	f005 ffda 	bl	80081f2 <HAL_NVIC_EnableIRQ>

}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40023800 	.word	0x40023800

0800224c <start_timer>:
 *      Author: linus
 */

#include "fs_timer.h"

void start_timer(struct timer_t * t, uint32_t * tick){
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
	if (t->active == 0){
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	7a1b      	ldrb	r3, [r3, #8]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d109      	bne.n	8002272 <start_timer+0x26>
		t->end = *tick + t->value;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	441a      	add	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	605a      	str	r2, [r3, #4]
		t->active = 1;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	721a      	strb	r2, [r3, #8]
	}
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <check_timer>:

uint8_t check_timer(struct timer_t * t, uint32_t * tick){
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
 8002286:	6039      	str	r1, [r7, #0]
	if ((*tick > t->end) & (t->active == 1)) return 1;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	429a      	cmp	r2, r3
 8002292:	bf8c      	ite	hi
 8002294:	2301      	movhi	r3, #1
 8002296:	2300      	movls	r3, #0
 8002298:	b2da      	uxtb	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	7a1b      	ldrb	r3, [r3, #8]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	bf0c      	ite	eq
 80022a2:	2301      	moveq	r3, #1
 80022a4:	2300      	movne	r3, #0
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	4013      	ands	r3, r2
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <check_timer+0x36>
 80022b0:	2301      	movs	r3, #1
 80022b2:	e000      	b.n	80022b6 <check_timer+0x38>
	return 0;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
	...

080022c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b08a      	sub	sp, #40	; 0x28
 80022c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ca:	f107 0314 	add.w	r3, r7, #20
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	605a      	str	r2, [r3, #4]
 80022d4:	609a      	str	r2, [r3, #8]
 80022d6:	60da      	str	r2, [r3, #12]
 80022d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	613b      	str	r3, [r7, #16]
 80022de:	4b64      	ldr	r3, [pc, #400]	; (8002470 <MX_GPIO_Init+0x1ac>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	4a63      	ldr	r2, [pc, #396]	; (8002470 <MX_GPIO_Init+0x1ac>)
 80022e4:	f043 0310 	orr.w	r3, r3, #16
 80022e8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ea:	4b61      	ldr	r3, [pc, #388]	; (8002470 <MX_GPIO_Init+0x1ac>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	f003 0310 	and.w	r3, r3, #16
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	4b5d      	ldr	r3, [pc, #372]	; (8002470 <MX_GPIO_Init+0x1ac>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	4a5c      	ldr	r2, [pc, #368]	; (8002470 <MX_GPIO_Init+0x1ac>)
 8002300:	f043 0304 	orr.w	r3, r3, #4
 8002304:	6313      	str	r3, [r2, #48]	; 0x30
 8002306:	4b5a      	ldr	r3, [pc, #360]	; (8002470 <MX_GPIO_Init+0x1ac>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	f003 0304 	and.w	r3, r3, #4
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	4b56      	ldr	r3, [pc, #344]	; (8002470 <MX_GPIO_Init+0x1ac>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231a:	4a55      	ldr	r2, [pc, #340]	; (8002470 <MX_GPIO_Init+0x1ac>)
 800231c:	f043 0301 	orr.w	r3, r3, #1
 8002320:	6313      	str	r3, [r2, #48]	; 0x30
 8002322:	4b53      	ldr	r3, [pc, #332]	; (8002470 <MX_GPIO_Init+0x1ac>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	60bb      	str	r3, [r7, #8]
 800232c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	607b      	str	r3, [r7, #4]
 8002332:	4b4f      	ldr	r3, [pc, #316]	; (8002470 <MX_GPIO_Init+0x1ac>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	4a4e      	ldr	r2, [pc, #312]	; (8002470 <MX_GPIO_Init+0x1ac>)
 8002338:	f043 0302 	orr.w	r3, r3, #2
 800233c:	6313      	str	r3, [r2, #48]	; 0x30
 800233e:	4b4c      	ldr	r3, [pc, #304]	; (8002470 <MX_GPIO_Init+0x1ac>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	607b      	str	r3, [r7, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800234a:	2300      	movs	r3, #0
 800234c:	603b      	str	r3, [r7, #0]
 800234e:	4b48      	ldr	r3, [pc, #288]	; (8002470 <MX_GPIO_Init+0x1ac>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	4a47      	ldr	r2, [pc, #284]	; (8002470 <MX_GPIO_Init+0x1ac>)
 8002354:	f043 0308 	orr.w	r3, r3, #8
 8002358:	6313      	str	r3, [r2, #48]	; 0x30
 800235a:	4b45      	ldr	r3, [pc, #276]	; (8002470 <MX_GPIO_Init+0x1ac>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	f003 0308 	and.w	r3, r3, #8
 8002362:	603b      	str	r3, [r7, #0]
 8002364:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8002366:	2200      	movs	r2, #0
 8002368:	2110      	movs	r1, #16
 800236a:	4842      	ldr	r0, [pc, #264]	; (8002474 <MX_GPIO_Init+0x1b0>)
 800236c:	f006 fd1a 	bl	8008da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 8002370:	2200      	movs	r2, #0
 8002372:	2120      	movs	r1, #32
 8002374:	4840      	ldr	r0, [pc, #256]	; (8002478 <MX_GPIO_Init+0x1b4>)
 8002376:	f006 fd15 	bl	8008da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_MEM_Pin|TD1_Pin|TD2_Pin|HAWK1_Pin
 800237a:	2200      	movs	r2, #0
 800237c:	f64f 7180 	movw	r1, #65408	; 0xff80
 8002380:	483e      	ldr	r0, [pc, #248]	; (800247c <MX_GPIO_Init+0x1b8>)
 8002382:	f006 fd0f 	bl	8008da4 <HAL_GPIO_WritePin>
                          |HAWK2_Pin|RDY_Pin|STAT_Pin|SAVE_Pin
                          |PRGM_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|STAY_ALIVE_Pin, GPIO_PIN_RESET);
 8002386:	2200      	movs	r2, #0
 8002388:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 800238c:	483c      	ldr	r0, [pc, #240]	; (8002480 <MX_GPIO_Init+0x1bc>)
 800238e:	f006 fd09 	bl	8008da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWR_DTCT_Pin;
 8002392:	2308      	movs	r3, #8
 8002394:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002396:	2300      	movs	r3, #0
 8002398:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239a:	2300      	movs	r3, #0
 800239c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PWR_DTCT_GPIO_Port, &GPIO_InitStruct);
 800239e:	f107 0314 	add.w	r3, r7, #20
 80023a2:	4619      	mov	r1, r3
 80023a4:	4835      	ldr	r0, [pc, #212]	; (800247c <MX_GPIO_Init+0x1b8>)
 80023a6:	f006 fb4b 	bl	8008a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_Pin;
 80023aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023b0:	2300      	movs	r3, #0
 80023b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 80023b8:	f107 0314 	add.w	r3, r7, #20
 80023bc:	4619      	mov	r1, r3
 80023be:	482e      	ldr	r0, [pc, #184]	; (8002478 <MX_GPIO_Init+0x1b4>)
 80023c0:	f006 fb3e 	bl	8008a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80023c4:	2310      	movs	r3, #16
 80023c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023c8:	2301      	movs	r3, #1
 80023ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d0:	2300      	movs	r3, #0
 80023d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80023d4:	f107 0314 	add.w	r3, r7, #20
 80023d8:	4619      	mov	r1, r3
 80023da:	4826      	ldr	r0, [pc, #152]	; (8002474 <MX_GPIO_Init+0x1b0>)
 80023dc:	f006 fb30 	bl	8008a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZ_Pin;
 80023e0:	2320      	movs	r3, #32
 80023e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023e4:	2301      	movs	r3, #1
 80023e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ec:	2300      	movs	r3, #0
 80023ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 80023f0:	f107 0314 	add.w	r3, r7, #20
 80023f4:	4619      	mov	r1, r3
 80023f6:	4820      	ldr	r0, [pc, #128]	; (8002478 <MX_GPIO_Init+0x1b4>)
 80023f8:	f006 fb22 	bl	8008a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = CS_MEM_Pin|TD1_Pin|TD2_Pin|HAWK1_Pin
 80023fc:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002400:	617b      	str	r3, [r7, #20]
                          |HAWK2_Pin|RDY_Pin|STAT_Pin|SAVE_Pin
                          |PRGM_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002402:	2301      	movs	r3, #1
 8002404:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002406:	2300      	movs	r3, #0
 8002408:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240a:	2300      	movs	r3, #0
 800240c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800240e:	f107 0314 	add.w	r3, r7, #20
 8002412:	4619      	mov	r1, r3
 8002414:	4819      	ldr	r0, [pc, #100]	; (800247c <MX_GPIO_Init+0x1b8>)
 8002416:	f006 fb13 	bl	8008a40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin|STAY_ALIVE_Pin;
 800241a:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 800241e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002420:	2301      	movs	r3, #1
 8002422:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002424:	2300      	movs	r3, #0
 8002426:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002428:	2300      	movs	r3, #0
 800242a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800242c:	f107 0314 	add.w	r3, r7, #20
 8002430:	4619      	mov	r1, r3
 8002432:	4813      	ldr	r0, [pc, #76]	; (8002480 <MX_GPIO_Init+0x1bc>)
 8002434:	f006 fb04 	bl	8008a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_DTCT_Pin;
 8002438:	2301      	movs	r3, #1
 800243a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800243c:	2300      	movs	r3, #0
 800243e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002440:	2300      	movs	r3, #0
 8002442:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DTCT_GPIO_Port, &GPIO_InitStruct);
 8002444:	f107 0314 	add.w	r3, r7, #20
 8002448:	4619      	mov	r1, r3
 800244a:	480e      	ldr	r0, [pc, #56]	; (8002484 <MX_GPIO_Init+0x1c0>)
 800244c:	f006 faf8 	bl	8008a40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENSE_Pin;
 8002450:	2310      	movs	r3, #16
 8002452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002454:	2300      	movs	r3, #0
 8002456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENSE_GPIO_Port, &GPIO_InitStruct);
 800245c:	f107 0314 	add.w	r3, r7, #20
 8002460:	4619      	mov	r1, r3
 8002462:	4807      	ldr	r0, [pc, #28]	; (8002480 <MX_GPIO_Init+0x1bc>)
 8002464:	f006 faec 	bl	8008a40 <HAL_GPIO_Init>

}
 8002468:	bf00      	nop
 800246a:	3728      	adds	r7, #40	; 0x28
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	40023800 	.word	0x40023800
 8002474:	40020000 	.word	0x40020000
 8002478:	40020800 	.word	0x40020800
 800247c:	40021000 	.word	0x40021000
 8002480:	40020400 	.word	0x40020400
 8002484:	40020c00 	.word	0x40020c00

08002488 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800248c:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <MX_I2C1_Init+0x50>)
 800248e:	4a13      	ldr	r2, [pc, #76]	; (80024dc <MX_I2C1_Init+0x54>)
 8002490:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002492:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <MX_I2C1_Init+0x50>)
 8002494:	4a12      	ldr	r2, [pc, #72]	; (80024e0 <MX_I2C1_Init+0x58>)
 8002496:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002498:	4b0f      	ldr	r3, [pc, #60]	; (80024d8 <MX_I2C1_Init+0x50>)
 800249a:	2200      	movs	r2, #0
 800249c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800249e:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <MX_I2C1_Init+0x50>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024a4:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <MX_I2C1_Init+0x50>)
 80024a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80024ac:	4b0a      	ldr	r3, [pc, #40]	; (80024d8 <MX_I2C1_Init+0x50>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80024b2:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <MX_I2C1_Init+0x50>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80024b8:	4b07      	ldr	r3, [pc, #28]	; (80024d8 <MX_I2C1_Init+0x50>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80024be:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <MX_I2C1_Init+0x50>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024c4:	4804      	ldr	r0, [pc, #16]	; (80024d8 <MX_I2C1_Init+0x50>)
 80024c6:	f006 fca1 	bl	8008e0c <HAL_I2C_Init>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80024d0:	f000 f93e 	bl	8002750 <Error_Handler>
  }

}
 80024d4:	bf00      	nop
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20004a40 	.word	0x20004a40
 80024dc:	40005400 	.word	0x40005400
 80024e0:	00061a80 	.word	0x00061a80

080024e4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 80024e8:	4b12      	ldr	r3, [pc, #72]	; (8002534 <MX_I2C2_Init+0x50>)
 80024ea:	4a13      	ldr	r2, [pc, #76]	; (8002538 <MX_I2C2_Init+0x54>)
 80024ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80024ee:	4b11      	ldr	r3, [pc, #68]	; (8002534 <MX_I2C2_Init+0x50>)
 80024f0:	4a12      	ldr	r2, [pc, #72]	; (800253c <MX_I2C2_Init+0x58>)
 80024f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024f4:	4b0f      	ldr	r3, [pc, #60]	; (8002534 <MX_I2C2_Init+0x50>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80024fa:	4b0e      	ldr	r3, [pc, #56]	; (8002534 <MX_I2C2_Init+0x50>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002500:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <MX_I2C2_Init+0x50>)
 8002502:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002506:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002508:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <MX_I2C2_Init+0x50>)
 800250a:	2200      	movs	r2, #0
 800250c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800250e:	4b09      	ldr	r3, [pc, #36]	; (8002534 <MX_I2C2_Init+0x50>)
 8002510:	2200      	movs	r2, #0
 8002512:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002514:	4b07      	ldr	r3, [pc, #28]	; (8002534 <MX_I2C2_Init+0x50>)
 8002516:	2200      	movs	r2, #0
 8002518:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800251a:	4b06      	ldr	r3, [pc, #24]	; (8002534 <MX_I2C2_Init+0x50>)
 800251c:	2200      	movs	r2, #0
 800251e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002520:	4804      	ldr	r0, [pc, #16]	; (8002534 <MX_I2C2_Init+0x50>)
 8002522:	f006 fc73 	bl	8008e0c <HAL_I2C_Init>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800252c:	f000 f910 	bl	8002750 <Error_Handler>
  }

}
 8002530:	bf00      	nop
 8002532:	bd80      	pop	{r7, pc}
 8002534:	20004a94 	.word	0x20004a94
 8002538:	40005800 	.word	0x40005800
 800253c:	000186a0 	.word	0x000186a0

08002540 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b08c      	sub	sp, #48	; 0x30
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002548:	f107 031c 	add.w	r3, r7, #28
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	60da      	str	r2, [r3, #12]
 8002556:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a32      	ldr	r2, [pc, #200]	; (8002628 <HAL_I2C_MspInit+0xe8>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d12c      	bne.n	80025bc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	61bb      	str	r3, [r7, #24]
 8002566:	4b31      	ldr	r3, [pc, #196]	; (800262c <HAL_I2C_MspInit+0xec>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	4a30      	ldr	r2, [pc, #192]	; (800262c <HAL_I2C_MspInit+0xec>)
 800256c:	f043 0302 	orr.w	r3, r3, #2
 8002570:	6313      	str	r3, [r2, #48]	; 0x30
 8002572:	4b2e      	ldr	r3, [pc, #184]	; (800262c <HAL_I2C_MspInit+0xec>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	61bb      	str	r3, [r7, #24]
 800257c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800257e:	23c0      	movs	r3, #192	; 0xc0
 8002580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002582:	2312      	movs	r3, #18
 8002584:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002586:	2301      	movs	r3, #1
 8002588:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800258a:	2303      	movs	r3, #3
 800258c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800258e:	2304      	movs	r3, #4
 8002590:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002592:	f107 031c 	add.w	r3, r7, #28
 8002596:	4619      	mov	r1, r3
 8002598:	4825      	ldr	r0, [pc, #148]	; (8002630 <HAL_I2C_MspInit+0xf0>)
 800259a:	f006 fa51 	bl	8008a40 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	4b22      	ldr	r3, [pc, #136]	; (800262c <HAL_I2C_MspInit+0xec>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	4a21      	ldr	r2, [pc, #132]	; (800262c <HAL_I2C_MspInit+0xec>)
 80025a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025ac:	6413      	str	r3, [r2, #64]	; 0x40
 80025ae:	4b1f      	ldr	r3, [pc, #124]	; (800262c <HAL_I2C_MspInit+0xec>)
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80025ba:	e031      	b.n	8002620 <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a1c      	ldr	r2, [pc, #112]	; (8002634 <HAL_I2C_MspInit+0xf4>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d12c      	bne.n	8002620 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	613b      	str	r3, [r7, #16]
 80025ca:	4b18      	ldr	r3, [pc, #96]	; (800262c <HAL_I2C_MspInit+0xec>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	4a17      	ldr	r2, [pc, #92]	; (800262c <HAL_I2C_MspInit+0xec>)
 80025d0:	f043 0302 	orr.w	r3, r3, #2
 80025d4:	6313      	str	r3, [r2, #48]	; 0x30
 80025d6:	4b15      	ldr	r3, [pc, #84]	; (800262c <HAL_I2C_MspInit+0xec>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	613b      	str	r3, [r7, #16]
 80025e0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80025e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80025e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025e8:	2312      	movs	r3, #18
 80025ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025ec:	2301      	movs	r3, #1
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f0:	2303      	movs	r3, #3
 80025f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80025f4:	2304      	movs	r3, #4
 80025f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f8:	f107 031c 	add.w	r3, r7, #28
 80025fc:	4619      	mov	r1, r3
 80025fe:	480c      	ldr	r0, [pc, #48]	; (8002630 <HAL_I2C_MspInit+0xf0>)
 8002600:	f006 fa1e 	bl	8008a40 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002604:	2300      	movs	r3, #0
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	4b08      	ldr	r3, [pc, #32]	; (800262c <HAL_I2C_MspInit+0xec>)
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	4a07      	ldr	r2, [pc, #28]	; (800262c <HAL_I2C_MspInit+0xec>)
 800260e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002612:	6413      	str	r3, [r2, #64]	; 0x40
 8002614:	4b05      	ldr	r3, [pc, #20]	; (800262c <HAL_I2C_MspInit+0xec>)
 8002616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002618:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	68fb      	ldr	r3, [r7, #12]
}
 8002620:	bf00      	nop
 8002622:	3730      	adds	r7, #48	; 0x30
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40005400 	.word	0x40005400
 800262c:	40023800 	.word	0x40023800
 8002630:	40020400 	.word	0x40020400
 8002634:	40005800 	.word	0x40005800

08002638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800263c:	f005 f810 	bl	8007660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002640:	f000 f81c 	bl	800267c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002644:	f7ff fe3e 	bl	80022c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8002648:	f7ff fdd0 	bl	80021ec <MX_DMA_Init>
  MX_I2C1_Init();
 800264c:	f7ff ff1c 	bl	8002488 <MX_I2C1_Init>
  MX_SPI2_Init();
 8002650:	f001 fc14 	bl	8003e7c <MX_SPI2_Init>
  MX_ADC1_Init();
 8002654:	f7ff fa02 	bl	8001a5c <MX_ADC1_Init>
  MX_I2C2_Init();
 8002658:	f7ff ff44 	bl	80024e4 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 800265c:	f000 ffd4 	bl	8003608 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8002660:	f001 fbd6 	bl	8003e10 <MX_SPI1_Init>
  MX_FATFS_Init();
 8002664:	f00a fe74 	bl	800d350 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  turn_off_HAWKs();
 8002668:	f7fe fcac 	bl	8000fc4 <turn_off_HAWKs>
  turn_off_TDs();
 800266c:	f7fe fcda 	bl	8001024 <turn_off_TDs>

  schedulerinit();
 8002670:	f000 f936 	bl	80028e0 <schedulerinit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	scheduler();
 8002674:	f000 fa56 	bl	8002b24 <scheduler>
 8002678:	e7fc      	b.n	8002674 <main+0x3c>
	...

0800267c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b094      	sub	sp, #80	; 0x50
 8002680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002682:	f107 0320 	add.w	r3, r7, #32
 8002686:	2230      	movs	r2, #48	; 0x30
 8002688:	2100      	movs	r1, #0
 800268a:	4618      	mov	r0, r3
 800268c:	f00e fa13 	bl	8010ab6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002690:	f107 030c 	add.w	r3, r7, #12
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	605a      	str	r2, [r3, #4]
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	60da      	str	r2, [r3, #12]
 800269e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026a0:	2300      	movs	r3, #0
 80026a2:	60bb      	str	r3, [r7, #8]
 80026a4:	4b28      	ldr	r3, [pc, #160]	; (8002748 <SystemClock_Config+0xcc>)
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a8:	4a27      	ldr	r2, [pc, #156]	; (8002748 <SystemClock_Config+0xcc>)
 80026aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ae:	6413      	str	r3, [r2, #64]	; 0x40
 80026b0:	4b25      	ldr	r3, [pc, #148]	; (8002748 <SystemClock_Config+0xcc>)
 80026b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026bc:	2300      	movs	r3, #0
 80026be:	607b      	str	r3, [r7, #4]
 80026c0:	4b22      	ldr	r3, [pc, #136]	; (800274c <SystemClock_Config+0xd0>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a21      	ldr	r2, [pc, #132]	; (800274c <SystemClock_Config+0xd0>)
 80026c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	4b1f      	ldr	r3, [pc, #124]	; (800274c <SystemClock_Config+0xd0>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d4:	607b      	str	r3, [r7, #4]
 80026d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026d8:	2302      	movs	r3, #2
 80026da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026dc:	2301      	movs	r3, #1
 80026de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026e0:	2310      	movs	r3, #16
 80026e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026e4:	2302      	movs	r3, #2
 80026e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80026e8:	2300      	movs	r3, #0
 80026ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80026ec:	2308      	movs	r3, #8
 80026ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80026f0:	23a8      	movs	r3, #168	; 0xa8
 80026f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026f4:	2302      	movs	r3, #2
 80026f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80026f8:	2307      	movs	r3, #7
 80026fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026fc:	f107 0320 	add.w	r3, r7, #32
 8002700:	4618      	mov	r0, r3
 8002702:	f007 fc47 	bl	8009f94 <HAL_RCC_OscConfig>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800270c:	f000 f820 	bl	8002750 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002710:	230f      	movs	r3, #15
 8002712:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002714:	2302      	movs	r3, #2
 8002716:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800271c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002720:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002726:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002728:	f107 030c 	add.w	r3, r7, #12
 800272c:	2105      	movs	r1, #5
 800272e:	4618      	mov	r0, r3
 8002730:	f007 fea0 	bl	800a474 <HAL_RCC_ClockConfig>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800273a:	f000 f809 	bl	8002750 <Error_Handler>
  }
}
 800273e:	bf00      	nop
 8002740:	3750      	adds	r7, #80	; 0x50
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40023800 	.word	0x40023800
 800274c:	40007000 	.word	0x40007000

08002750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002754:	bf00      	nop
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
	...

08002760 <launch_detect>:
float Ay2[FAKE_FILE_LEN];
float Az2[FAKE_FILE_LEN];

float launch_detect_buffer[5];

uint8_t launch_detect(float * a1, float * a2){
 8002760:	b5b0      	push	{r4, r5, r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
	for (int i = 1; i < 5; i++){
 800276a:	2301      	movs	r3, #1
 800276c:	617b      	str	r3, [r7, #20]
 800276e:	e00d      	b.n	800278c <launch_detect+0x2c>
		launch_detect_buffer[i-1] = launch_detect_buffer[i];
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	3b01      	subs	r3, #1
 8002774:	4958      	ldr	r1, [pc, #352]	; (80028d8 <launch_detect+0x178>)
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	0092      	lsls	r2, r2, #2
 800277a:	440a      	add	r2, r1
 800277c:	6812      	ldr	r2, [r2, #0]
 800277e:	4956      	ldr	r1, [pc, #344]	; (80028d8 <launch_detect+0x178>)
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	440b      	add	r3, r1
 8002784:	601a      	str	r2, [r3, #0]
	for (int i = 1; i < 5; i++){
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	3301      	adds	r3, #1
 800278a:	617b      	str	r3, [r7, #20]
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	2b04      	cmp	r3, #4
 8002790:	ddee      	ble.n	8002770 <launch_detect+0x10>
	}
	launch_detect_buffer[4] = (sqrt(a1[1]*a1[1] + a1[2]*a1[2] + a1[3]*a1[3]) + sqrt(a2[1]*a2[1] + a2[2]*a2[2] + a2[3]*a2[3])) / 2;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	3304      	adds	r3, #4
 8002796:	ed93 7a00 	vldr	s14, [r3]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3304      	adds	r3, #4
 800279e:	edd3 7a00 	vldr	s15, [r3]
 80027a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	3308      	adds	r3, #8
 80027aa:	edd3 6a00 	vldr	s13, [r3]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3308      	adds	r3, #8
 80027b2:	edd3 7a00 	vldr	s15, [r3]
 80027b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	330c      	adds	r3, #12
 80027c2:	edd3 6a00 	vldr	s13, [r3]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	330c      	adds	r3, #12
 80027ca:	edd3 7a00 	vldr	s15, [r3]
 80027ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027d6:	ee17 0a90 	vmov	r0, s15
 80027da:	f7fd feb5 	bl	8000548 <__aeabi_f2d>
 80027de:	4603      	mov	r3, r0
 80027e0:	460c      	mov	r4, r1
 80027e2:	ec44 3b10 	vmov	d0, r3, r4
 80027e6:	f012 faf7 	bl	8014dd8 <sqrt>
 80027ea:	ec55 4b10 	vmov	r4, r5, d0
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	3304      	adds	r3, #4
 80027f2:	ed93 7a00 	vldr	s14, [r3]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	3304      	adds	r3, #4
 80027fa:	edd3 7a00 	vldr	s15, [r3]
 80027fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	3308      	adds	r3, #8
 8002806:	edd3 6a00 	vldr	s13, [r3]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	3308      	adds	r3, #8
 800280e:	edd3 7a00 	vldr	s15, [r3]
 8002812:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002816:	ee37 7a27 	vadd.f32	s14, s14, s15
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	330c      	adds	r3, #12
 800281e:	edd3 6a00 	vldr	s13, [r3]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	330c      	adds	r3, #12
 8002826:	edd3 7a00 	vldr	s15, [r3]
 800282a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800282e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002832:	ee17 0a90 	vmov	r0, s15
 8002836:	f7fd fe87 	bl	8000548 <__aeabi_f2d>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	ec43 2b10 	vmov	d0, r2, r3
 8002842:	f012 fac9 	bl	8014dd8 <sqrt>
 8002846:	ec53 2b10 	vmov	r2, r3, d0
 800284a:	4620      	mov	r0, r4
 800284c:	4629      	mov	r1, r5
 800284e:	f7fd fd1d 	bl	800028c <__adddf3>
 8002852:	4603      	mov	r3, r0
 8002854:	460c      	mov	r4, r1
 8002856:	4618      	mov	r0, r3
 8002858:	4621      	mov	r1, r4
 800285a:	f04f 0200 	mov.w	r2, #0
 800285e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002862:	f7fd fff3 	bl	800084c <__aeabi_ddiv>
 8002866:	4603      	mov	r3, r0
 8002868:	460c      	mov	r4, r1
 800286a:	4618      	mov	r0, r3
 800286c:	4621      	mov	r1, r4
 800286e:	f7fe f9bb 	bl	8000be8 <__aeabi_d2f>
 8002872:	4602      	mov	r2, r0
 8002874:	4b18      	ldr	r3, [pc, #96]	; (80028d8 <launch_detect+0x178>)
 8002876:	611a      	str	r2, [r3, #16]
	float sum_a = 0;
 8002878:	f04f 0300 	mov.w	r3, #0
 800287c:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 5; i++){
 800287e:	2300      	movs	r3, #0
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	e00e      	b.n	80028a2 <launch_detect+0x142>
		sum_a += launch_detect_buffer[i];
 8002884:	4a14      	ldr	r2, [pc, #80]	; (80028d8 <launch_detect+0x178>)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	4413      	add	r3, r2
 800288c:	edd3 7a00 	vldr	s15, [r3]
 8002890:	ed97 7a04 	vldr	s14, [r7, #16]
 8002894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002898:	edc7 7a04 	vstr	s15, [r7, #16]
	for (int i = 0; i < 5; i++){
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	3301      	adds	r3, #1
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2b04      	cmp	r3, #4
 80028a6:	dded      	ble.n	8002884 <launch_detect+0x124>
	}
	sum_a /= 5;
 80028a8:	ed97 7a04 	vldr	s14, [r7, #16]
 80028ac:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80028b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80028b4:	edc7 7a04 	vstr	s15, [r7, #16]

	// if average of acceleration over 5 measurements is higher than 4G, launch has been detected.
	if (sum_a >= 40) return 1;
 80028b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80028bc:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80028dc <launch_detect+0x17c>
 80028c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028c8:	db01      	blt.n	80028ce <launch_detect+0x16e>
 80028ca:	2301      	movs	r3, #1
 80028cc:	e000      	b.n	80028d0 <launch_detect+0x170>
	return 0;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bdb0      	pop	{r4, r5, r7, pc}
 80028d8:	2000cf38 	.word	0x2000cf38
 80028dc:	42200000 	.word	0x42200000

080028e0 <schedulerinit>:

void schedulerinit () {
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b088      	sub	sp, #32
 80028e4:	af06      	add	r7, sp, #24

	//initialize all devices
	ms5607_init(&BARO1);
 80028e6:	4870      	ldr	r0, [pc, #448]	; (8002aa8 <schedulerinit+0x1c8>)
 80028e8:	f002 fa40 	bl	8004d6c <ms5607_init>
	ms5607_init(&BARO2);
 80028ec:	486f      	ldr	r0, [pc, #444]	; (8002aac <schedulerinit+0x1cc>)
 80028ee:	f002 fa3d 	bl	8004d6c <ms5607_init>
	sht31_init(&TEMP);
 80028f2:	486f      	ldr	r0, [pc, #444]	; (8002ab0 <schedulerinit+0x1d0>)
 80028f4:	f002 fde2 	bl	80054bc <sht31_init>
	icm20601_init(&IMU1);
 80028f8:	486e      	ldr	r0, [pc, #440]	; (8002ab4 <schedulerinit+0x1d4>)
 80028fa:	f001 ff8e 	bl	800481a <icm20601_init>
	icm20601_init(&IMU2);
 80028fe:	486e      	ldr	r0, [pc, #440]	; (8002ab8 <schedulerinit+0x1d8>)
 8002900:	f001 ff8b 	bl	800481a <icm20601_init>
	h3l_init(&ACCEL);
 8002904:	486d      	ldr	r0, [pc, #436]	; (8002abc <schedulerinit+0x1dc>)
 8002906:	f001 fcc1 	bl	800428c <h3l_init>
	init_ADC();
 800290a:	f7fe fb9d 	bl	8001048 <init_ADC>

	// cycle through LEDs
	turn_on(&STAT);
 800290e:	486c      	ldr	r0, [pc, #432]	; (8002ac0 <schedulerinit+0x1e0>)
 8002910:	f002 fa0c 	bl	8004d2c <turn_on>
	HAL_Delay(300);
 8002914:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002918:	f004 ff14 	bl	8007744 <HAL_Delay>
	turn_on(&SAVE);
 800291c:	4869      	ldr	r0, [pc, #420]	; (8002ac4 <schedulerinit+0x1e4>)
 800291e:	f002 fa05 	bl	8004d2c <turn_on>
	HAL_Delay(300);
 8002922:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002926:	f004 ff0d 	bl	8007744 <HAL_Delay>
	turn_on(&PRGM);
 800292a:	4867      	ldr	r0, [pc, #412]	; (8002ac8 <schedulerinit+0x1e8>)
 800292c:	f002 f9fe 	bl	8004d2c <turn_on>
	HAL_Delay(300);
 8002930:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002934:	f004 ff06 	bl	8007744 <HAL_Delay>
	turn_on(&RDY);
 8002938:	4864      	ldr	r0, [pc, #400]	; (8002acc <schedulerinit+0x1ec>)
 800293a:	f002 f9f7 	bl	8004d2c <turn_on>
	HAL_Delay(300);
 800293e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002942:	f004 feff 	bl	8007744 <HAL_Delay>

	turn_off(&STAT);
 8002946:	485e      	ldr	r0, [pc, #376]	; (8002ac0 <schedulerinit+0x1e0>)
 8002948:	f002 fa00 	bl	8004d4c <turn_off>
	turn_off(&SAVE);
 800294c:	485d      	ldr	r0, [pc, #372]	; (8002ac4 <schedulerinit+0x1e4>)
 800294e:	f002 f9fd 	bl	8004d4c <turn_off>
	turn_off(&PRGM);
 8002952:	485d      	ldr	r0, [pc, #372]	; (8002ac8 <schedulerinit+0x1e8>)
 8002954:	f002 f9fa 	bl	8004d4c <turn_off>
	turn_off(&RDY);
 8002958:	485c      	ldr	r0, [pc, #368]	; (8002acc <schedulerinit+0x1ec>)
 800295a:	f002 f9f7 	bl	8004d4c <turn_off>

	// initialize SD card
	turn_on(&SAVE);
 800295e:	4859      	ldr	r0, [pc, #356]	; (8002ac4 <schedulerinit+0x1e4>)
 8002960:	f002 f9e4 	bl	8004d2c <turn_on>
	SD_state = init_sd(&num_dat_file, &num_log_file);
 8002964:	495a      	ldr	r1, [pc, #360]	; (8002ad0 <schedulerinit+0x1f0>)
 8002966:	485b      	ldr	r0, [pc, #364]	; (8002ad4 <schedulerinit+0x1f4>)
 8002968:	f7fe fcba 	bl	80012e0 <init_sd>
 800296c:	4603      	mov	r3, r0
 800296e:	461a      	mov	r2, r3
 8002970:	4b59      	ldr	r3, [pc, #356]	; (8002ad8 <schedulerinit+0x1f8>)
 8002972:	701a      	strb	r2, [r3, #0]
	if (SD_state == 0){
 8002974:	4b58      	ldr	r3, [pc, #352]	; (8002ad8 <schedulerinit+0x1f8>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d103      	bne.n	8002984 <schedulerinit+0xa4>
		turn_off(&SAVE);
 800297c:	4851      	ldr	r0, [pc, #324]	; (8002ac4 <schedulerinit+0x1e4>)
 800297e:	f002 f9e5 	bl	8004d4c <turn_off>
 8002982:	e00b      	b.n	800299c <schedulerinit+0xbc>
	} else {
		turn_on(&RDY);
 8002984:	4851      	ldr	r0, [pc, #324]	; (8002acc <schedulerinit+0x1ec>)
 8002986:	f002 f9d1 	bl	8004d2c <turn_on>
		HAL_Delay(100);
 800298a:	2064      	movs	r0, #100	; 0x64
 800298c:	f004 feda 	bl	8007744 <HAL_Delay>
		turn_off(&RDY);
 8002990:	484e      	ldr	r0, [pc, #312]	; (8002acc <schedulerinit+0x1ec>)
 8002992:	f002 f9db 	bl	8004d4c <turn_off>
		HAL_Delay(100);
 8002996:	2064      	movs	r0, #100	; 0x64
 8002998:	f004 fed4 	bl	8007744 <HAL_Delay>
	}
	if (DEBUG_PRINT == 1) printf("num_dat_file: %hu \n",num_dat_file);
	if (DEBUG_PRINT == 1) printf("num_log_file: %hu \n",num_log_file);

	num_log_file ++;
 800299c:	4b4c      	ldr	r3, [pc, #304]	; (8002ad0 <schedulerinit+0x1f0>)
 800299e:	881b      	ldrh	r3, [r3, #0]
 80029a0:	3301      	adds	r3, #1
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	4b4a      	ldr	r3, [pc, #296]	; (8002ad0 <schedulerinit+0x1f0>)
 80029a6:	801a      	strh	r2, [r3, #0]
	num_dat_file ++;
 80029a8:	4b4a      	ldr	r3, [pc, #296]	; (8002ad4 <schedulerinit+0x1f4>)
 80029aa:	881b      	ldrh	r3, [r3, #0]
 80029ac:	3301      	adds	r3, #1
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	4b48      	ldr	r3, [pc, #288]	; (8002ad4 <schedulerinit+0x1f4>)
 80029b2:	801a      	strh	r2, [r3, #0]

	sprintf(FILE_NAME,"FL%04u.CSV", num_dat_file);
 80029b4:	4b47      	ldr	r3, [pc, #284]	; (8002ad4 <schedulerinit+0x1f4>)
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	461a      	mov	r2, r3
 80029ba:	4948      	ldr	r1, [pc, #288]	; (8002adc <schedulerinit+0x1fc>)
 80029bc:	4848      	ldr	r0, [pc, #288]	; (8002ae0 <schedulerinit+0x200>)
 80029be:	f00e fd5b 	bl	8011478 <siprintf>
	if (DEBUG_PRINT == 1) printf("saving %s ...",FILE_NAME);

	sprintf(LOG_NAME,"LOG%02u.CSV", num_log_file);
 80029c2:	4b43      	ldr	r3, [pc, #268]	; (8002ad0 <schedulerinit+0x1f0>)
 80029c4:	881b      	ldrh	r3, [r3, #0]
 80029c6:	461a      	mov	r2, r3
 80029c8:	4946      	ldr	r1, [pc, #280]	; (8002ae4 <schedulerinit+0x204>)
 80029ca:	4847      	ldr	r0, [pc, #284]	; (8002ae8 <schedulerinit+0x208>)
 80029cc:	f00e fd54 	bl	8011478 <siprintf>
	if (DEBUG_PRINT == 1) printf("saving %s ...",LOG_NAME);

	SD_state = init_file(FILE_NAME, LOG_NAME);
 80029d0:	4945      	ldr	r1, [pc, #276]	; (8002ae8 <schedulerinit+0x208>)
 80029d2:	4843      	ldr	r0, [pc, #268]	; (8002ae0 <schedulerinit+0x200>)
 80029d4:	f7fe fd3e 	bl	8001454 <init_file>
 80029d8:	4603      	mov	r3, r0
 80029da:	461a      	mov	r2, r3
 80029dc:	4b3e      	ldr	r3, [pc, #248]	; (8002ad8 <schedulerinit+0x1f8>)
 80029de:	701a      	strb	r2, [r3, #0]

	if (SD_state == 0){
 80029e0:	4b3d      	ldr	r3, [pc, #244]	; (8002ad8 <schedulerinit+0x1f8>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d103      	bne.n	80029f0 <schedulerinit+0x110>
		turn_off(&SAVE);
 80029e8:	4836      	ldr	r0, [pc, #216]	; (8002ac4 <schedulerinit+0x1e4>)
 80029ea:	f002 f9af 	bl	8004d4c <turn_off>
 80029ee:	e00b      	b.n	8002a08 <schedulerinit+0x128>
	} else {
		turn_on(&RDY);
 80029f0:	4836      	ldr	r0, [pc, #216]	; (8002acc <schedulerinit+0x1ec>)
 80029f2:	f002 f99b 	bl	8004d2c <turn_on>
		HAL_Delay(100);
 80029f6:	2064      	movs	r0, #100	; 0x64
 80029f8:	f004 fea4 	bl	8007744 <HAL_Delay>
		turn_off(&RDY);
 80029fc:	4833      	ldr	r0, [pc, #204]	; (8002acc <schedulerinit+0x1ec>)
 80029fe:	f002 f9a5 	bl	8004d4c <turn_off>
		HAL_Delay(100);
 8002a02:	2064      	movs	r0, #100	; 0x64
 8002a04:	f004 fe9e 	bl	8007744 <HAL_Delay>
	}
	turn_on(&RDY);
 8002a08:	4830      	ldr	r0, [pc, #192]	; (8002acc <schedulerinit+0x1ec>)
 8002a0a:	f002 f98f 	bl	8004d2c <turn_on>
	HAL_Delay(1000);
 8002a0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a12:	f004 fe97 	bl	8007744 <HAL_Delay>

	bufclear(buffer);
 8002a16:	4835      	ldr	r0, [pc, #212]	; (8002aec <schedulerinit+0x20c>)
 8002a18:	f7fe fc48 	bl	80012ac <bufclear>
	sprintf(buffer, "%ld, SCHEDULER INIT OK, - \n", HAL_GetTick());
 8002a1c:	f004 fe86 	bl	800772c <HAL_GetTick>
 8002a20:	4603      	mov	r3, r0
 8002a22:	461a      	mov	r2, r3
 8002a24:	4932      	ldr	r1, [pc, #200]	; (8002af0 <schedulerinit+0x210>)
 8002a26:	4831      	ldr	r0, [pc, #196]	; (8002aec <schedulerinit+0x20c>)
 8002a28:	f00e fd26 	bl	8011478 <siprintf>
	log_to_SD(LOG_NAME, buffer);
 8002a2c:	492f      	ldr	r1, [pc, #188]	; (8002aec <schedulerinit+0x20c>)
 8002a2e:	482e      	ldr	r0, [pc, #184]	; (8002ae8 <schedulerinit+0x208>)
 8002a30:	f7fe ffc4 	bl	80019bc <log_to_SD>

	//coffin_dance(1);
	take_on_me();
 8002a34:	f7ff f9bc 	bl	8001db0 <take_on_me>

	if (FAKE_DATA == 1)
 8002a38:	4b2e      	ldr	r3, [pc, #184]	; (8002af4 <schedulerinit+0x214>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d111      	bne.n	8002a64 <schedulerinit+0x184>
	{
		// read in fake data
		read_from_SD("FAKE.CSV", TIME, P1, P2, Ax1, Ay1, Az1, Ax2, Ay2, Az2);
 8002a40:	4b2d      	ldr	r3, [pc, #180]	; (8002af8 <schedulerinit+0x218>)
 8002a42:	9305      	str	r3, [sp, #20]
 8002a44:	4b2d      	ldr	r3, [pc, #180]	; (8002afc <schedulerinit+0x21c>)
 8002a46:	9304      	str	r3, [sp, #16]
 8002a48:	4b2d      	ldr	r3, [pc, #180]	; (8002b00 <schedulerinit+0x220>)
 8002a4a:	9303      	str	r3, [sp, #12]
 8002a4c:	4b2d      	ldr	r3, [pc, #180]	; (8002b04 <schedulerinit+0x224>)
 8002a4e:	9302      	str	r3, [sp, #8]
 8002a50:	4b2d      	ldr	r3, [pc, #180]	; (8002b08 <schedulerinit+0x228>)
 8002a52:	9301      	str	r3, [sp, #4]
 8002a54:	4b2d      	ldr	r3, [pc, #180]	; (8002b0c <schedulerinit+0x22c>)
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	4b2d      	ldr	r3, [pc, #180]	; (8002b10 <schedulerinit+0x230>)
 8002a5a:	4a2e      	ldr	r2, [pc, #184]	; (8002b14 <schedulerinit+0x234>)
 8002a5c:	492e      	ldr	r1, [pc, #184]	; (8002b18 <schedulerinit+0x238>)
 8002a5e:	482f      	ldr	r0, [pc, #188]	; (8002b1c <schedulerinit+0x23c>)
 8002a60:	f7fe fdd2 	bl	8001608 <read_from_SD>
	}

	// initialize state estimation with environment values

	float ground_pressure = 0;
 8002a64:	f04f 0300 	mov.w	r3, #0
 8002a68:	607b      	str	r3, [r7, #4]
	float ground_temperature = 0;
 8002a6a:	f04f 0300 	mov.w	r3, #0
 8002a6e:	603b      	str	r3, [r7, #0]

	config_baro(&TEMP, &BARO1, &BARO2, &ground_temperature, &ground_pressure);
 8002a70:	463a      	mov	r2, r7
 8002a72:	1d3b      	adds	r3, r7, #4
 8002a74:	9300      	str	r3, [sp, #0]
 8002a76:	4613      	mov	r3, r2
 8002a78:	4a0c      	ldr	r2, [pc, #48]	; (8002aac <schedulerinit+0x1cc>)
 8002a7a:	490b      	ldr	r1, [pc, #44]	; (8002aa8 <schedulerinit+0x1c8>)
 8002a7c:	480c      	ldr	r0, [pc, #48]	; (8002ab0 <schedulerinit+0x1d0>)
 8002a7e:	f000 ffe5 	bl	8003a4c <config_baro>
	config_imu(&IMU1, &IMU2);
 8002a82:	490d      	ldr	r1, [pc, #52]	; (8002ab8 <schedulerinit+0x1d8>)
 8002a84:	480b      	ldr	r0, [pc, #44]	; (8002ab4 <schedulerinit+0x1d4>)
 8002a86:	f001 f8e9 	bl	8003c5c <config_imu>

	reset_state_est_state(ground_pressure, ground_temperature, &state_est_state);
 8002a8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a8e:	ed97 7a00 	vldr	s14, [r7]
 8002a92:	4823      	ldr	r0, [pc, #140]	; (8002b20 <schedulerinit+0x240>)
 8002a94:	eef0 0a47 	vmov.f32	s1, s14
 8002a98:	eeb0 0a67 	vmov.f32	s0, s15
 8002a9c:	f003 fc06 	bl	80062ac <reset_state_est_state>
}
 8002aa0:	bf00      	nop
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	200000e8 	.word	0x200000e8
 8002aac:	20000108 	.word	0x20000108
 8002ab0:	20000148 	.word	0x20000148
 8002ab4:	20000128 	.word	0x20000128
 8002ab8:	20000138 	.word	0x20000138
 8002abc:	20000158 	.word	0x20000158
 8002ac0:	200000c8 	.word	0x200000c8
 8002ac4:	200000d0 	.word	0x200000d0
 8002ac8:	200000d8 	.word	0x200000d8
 8002acc:	200000e0 	.word	0x200000e0
 8002ad0:	200003b2 	.word	0x200003b2
 8002ad4:	200003b0 	.word	0x200003b0
 8002ad8:	200003b4 	.word	0x200003b4
 8002adc:	08016884 	.word	0x08016884
 8002ae0:	2000dfc8 	.word	0x2000dfc8
 8002ae4:	08016890 	.word	0x08016890
 8002ae8:	20006af0 	.word	0x20006af0
 8002aec:	2000cb30 	.word	0x2000cb30
 8002af0:	0801689c 	.word	0x0801689c
 8002af4:	20000858 	.word	0x20000858
 8002af8:	20004af0 	.word	0x20004af0
 8002afc:	2000cfc8 	.word	0x2000cfc8
 8002b00:	20009b20 	.word	0x20009b20
 8002b04:	2000bb30 	.word	0x2000bb30
 8002b08:	20006afc 	.word	0x20006afc
 8002b0c:	2000ab30 	.word	0x2000ab30
 8002b10:	20008b20 	.word	0x20008b20
 8002b14:	20007afc 	.word	0x20007afc
 8002b18:	20005af0 	.word	0x20005af0
 8002b1c:	080168b8 	.word	0x080168b8
 8002b20:	200003c0 	.word	0x200003c0

08002b24 <scheduler>:

void scheduler (){
 8002b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b28:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8002b2c:	af44      	add	r7, sp, #272	; 0x110

	tick = HAL_GetTick();
 8002b2e:	f004 fdfd 	bl	800772c <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	4b80      	ldr	r3, [pc, #512]	; (8002d38 <scheduler+0x214>)
 8002b36:	601a      	str	r2, [r3, #0]

	// TASK LED
	if(tick >= getNextExecution(&RDY_TASK)){
 8002b38:	4880      	ldr	r0, [pc, #512]	; (8002d3c <scheduler+0x218>)
 8002b3a:	f000 fd55 	bl	80035e8 <getNextExecution>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	4b7d      	ldr	r3, [pc, #500]	; (8002d38 <scheduler+0x214>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d806      	bhi.n	8002b56 <scheduler+0x32>
		RDY_TASK.last_call = tick;
 8002b48:	4b7b      	ldr	r3, [pc, #492]	; (8002d38 <scheduler+0x214>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a7b      	ldr	r2, [pc, #492]	; (8002d3c <scheduler+0x218>)
 8002b4e:	6013      	str	r3, [r2, #0]
		toggle(&RDY);
 8002b50:	487b      	ldr	r0, [pc, #492]	; (8002d40 <scheduler+0x21c>)
 8002b52:	f002 f8db 	bl	8004d0c <toggle>
	}
	if(tick >= getNextExecution(&SAVE_TASK)){
 8002b56:	487b      	ldr	r0, [pc, #492]	; (8002d44 <scheduler+0x220>)
 8002b58:	f000 fd46 	bl	80035e8 <getNextExecution>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	4b76      	ldr	r3, [pc, #472]	; (8002d38 <scheduler+0x214>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d806      	bhi.n	8002b74 <scheduler+0x50>
		SAVE_TASK.last_call = tick;
 8002b66:	4b74      	ldr	r3, [pc, #464]	; (8002d38 <scheduler+0x214>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a76      	ldr	r2, [pc, #472]	; (8002d44 <scheduler+0x220>)
 8002b6c:	6013      	str	r3, [r2, #0]
		toggle(&SAVE);
 8002b6e:	4876      	ldr	r0, [pc, #472]	; (8002d48 <scheduler+0x224>)
 8002b70:	f002 f8cc 	bl	8004d0c <toggle>
	}
	if(tick >= getNextExecution(&STAT_TASK)){
 8002b74:	4875      	ldr	r0, [pc, #468]	; (8002d4c <scheduler+0x228>)
 8002b76:	f000 fd37 	bl	80035e8 <getNextExecution>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	4b6e      	ldr	r3, [pc, #440]	; (8002d38 <scheduler+0x214>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d806      	bhi.n	8002b92 <scheduler+0x6e>
		STAT_TASK.last_call = tick;
 8002b84:	4b6c      	ldr	r3, [pc, #432]	; (8002d38 <scheduler+0x214>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a70      	ldr	r2, [pc, #448]	; (8002d4c <scheduler+0x228>)
 8002b8a:	6013      	str	r3, [r2, #0]
		toggle(&STAT);
 8002b8c:	4870      	ldr	r0, [pc, #448]	; (8002d50 <scheduler+0x22c>)
 8002b8e:	f002 f8bd 	bl	8004d0c <toggle>
	}
	if(tick >= getNextExecution(&PRGM_TASK)){
 8002b92:	4870      	ldr	r0, [pc, #448]	; (8002d54 <scheduler+0x230>)
 8002b94:	f000 fd28 	bl	80035e8 <getNextExecution>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	4b67      	ldr	r3, [pc, #412]	; (8002d38 <scheduler+0x214>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d806      	bhi.n	8002bb0 <scheduler+0x8c>
		PRGM_TASK.last_call = tick;
 8002ba2:	4b65      	ldr	r3, [pc, #404]	; (8002d38 <scheduler+0x214>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a6b      	ldr	r2, [pc, #428]	; (8002d54 <scheduler+0x230>)
 8002ba8:	6013      	str	r3, [r2, #0]
		toggle(&PRGM);
 8002baa:	486b      	ldr	r0, [pc, #428]	; (8002d58 <scheduler+0x234>)
 8002bac:	f002 f8ae 	bl	8004d0c <toggle>
	}


	// TASK SHT
	if(tick >= getNextExecution(&SHT_TASK)){
 8002bb0:	486a      	ldr	r0, [pc, #424]	; (8002d5c <scheduler+0x238>)
 8002bb2:	f000 fd19 	bl	80035e8 <getNextExecution>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	4b5f      	ldr	r3, [pc, #380]	; (8002d38 <scheduler+0x214>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d808      	bhi.n	8002bd2 <scheduler+0xae>
		SHT_TASK.last_call = tick;
 8002bc0:	4b5d      	ldr	r3, [pc, #372]	; (8002d38 <scheduler+0x214>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a65      	ldr	r2, [pc, #404]	; (8002d5c <scheduler+0x238>)
 8002bc6:	6013      	str	r3, [r2, #0]
		sht31_read(&TEMP, t_val, t_buf);
 8002bc8:	4a65      	ldr	r2, [pc, #404]	; (8002d60 <scheduler+0x23c>)
 8002bca:	4966      	ldr	r1, [pc, #408]	; (8002d64 <scheduler+0x240>)
 8002bcc:	4866      	ldr	r0, [pc, #408]	; (8002d68 <scheduler+0x244>)
 8002bce:	f002 fccb 	bl	8005568 <sht31_read>
	}

	// TASK BARO
	if(tick >= getNextExecution(&BARO_TASK)){
 8002bd2:	4866      	ldr	r0, [pc, #408]	; (8002d6c <scheduler+0x248>)
 8002bd4:	f000 fd08 	bl	80035e8 <getNextExecution>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	4b57      	ldr	r3, [pc, #348]	; (8002d38 <scheduler+0x214>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d830      	bhi.n	8002c44 <scheduler+0x120>

		switch(BARO_TASK.stage){
 8002be2:	4b62      	ldr	r3, [pc, #392]	; (8002d6c <scheduler+0x248>)
 8002be4:	7a1b      	ldrb	r3, [r3, #8]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d002      	beq.n	8002bf0 <scheduler+0xcc>
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d010      	beq.n	8002c10 <scheduler+0xec>
 8002bee:	e029      	b.n	8002c44 <scheduler+0x120>
			case MS_TEMPERATURE_REQ:
				ms5607_prep_pressure(&BARO1, raw_data1);
 8002bf0:	495f      	ldr	r1, [pc, #380]	; (8002d70 <scheduler+0x24c>)
 8002bf2:	4860      	ldr	r0, [pc, #384]	; (8002d74 <scheduler+0x250>)
 8002bf4:	f002 f968 	bl	8004ec8 <ms5607_prep_pressure>
				ms5607_prep_pressure(&BARO2, raw_data2);
 8002bf8:	495f      	ldr	r1, [pc, #380]	; (8002d78 <scheduler+0x254>)
 8002bfa:	4860      	ldr	r0, [pc, #384]	; (8002d7c <scheduler+0x258>)
 8002bfc:	f002 f964 	bl	8004ec8 <ms5607_prep_pressure>
				BARO_TASK.last_call = tick;
 8002c00:	4b4d      	ldr	r3, [pc, #308]	; (8002d38 <scheduler+0x214>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a59      	ldr	r2, [pc, #356]	; (8002d6c <scheduler+0x248>)
 8002c06:	6013      	str	r3, [r2, #0]
				BARO_TASK.stage = MS_PRESSURE_REQ;
 8002c08:	4b58      	ldr	r3, [pc, #352]	; (8002d6c <scheduler+0x248>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	721a      	strb	r2, [r3, #8]
				break;
 8002c0e:	e019      	b.n	8002c44 <scheduler+0x120>
			case MS_PRESSURE_REQ:
				ms5607_read_pressure(&BARO1, raw_data1);
 8002c10:	4957      	ldr	r1, [pc, #348]	; (8002d70 <scheduler+0x24c>)
 8002c12:	4858      	ldr	r0, [pc, #352]	; (8002d74 <scheduler+0x250>)
 8002c14:	f002 f9a1 	bl	8004f5a <ms5607_read_pressure>
				ms5607_read_pressure(&BARO2, raw_data2);
 8002c18:	4957      	ldr	r1, [pc, #348]	; (8002d78 <scheduler+0x254>)
 8002c1a:	4858      	ldr	r0, [pc, #352]	; (8002d7c <scheduler+0x258>)
 8002c1c:	f002 f99d 	bl	8004f5a <ms5607_read_pressure>
				BARO_TASK.last_call = tick;
 8002c20:	4b45      	ldr	r3, [pc, #276]	; (8002d38 <scheduler+0x214>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a51      	ldr	r2, [pc, #324]	; (8002d6c <scheduler+0x248>)
 8002c26:	6013      	str	r3, [r2, #0]
				ms5607_convert(&BARO1, &p1, &t_p1);
 8002c28:	4a55      	ldr	r2, [pc, #340]	; (8002d80 <scheduler+0x25c>)
 8002c2a:	4956      	ldr	r1, [pc, #344]	; (8002d84 <scheduler+0x260>)
 8002c2c:	4851      	ldr	r0, [pc, #324]	; (8002d74 <scheduler+0x250>)
 8002c2e:	f002 f9df 	bl	8004ff0 <ms5607_convert>
				ms5607_convert(&BARO2, &p2, &t_p2);
 8002c32:	4a55      	ldr	r2, [pc, #340]	; (8002d88 <scheduler+0x264>)
 8002c34:	4955      	ldr	r1, [pc, #340]	; (8002d8c <scheduler+0x268>)
 8002c36:	4851      	ldr	r0, [pc, #324]	; (8002d7c <scheduler+0x258>)
 8002c38:	f002 f9da 	bl	8004ff0 <ms5607_convert>
				BARO_TASK.stage = MS_TEMPERATURE_REQ;
 8002c3c:	4b4b      	ldr	r3, [pc, #300]	; (8002d6c <scheduler+0x248>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	721a      	strb	r2, [r3, #8]
				break;
 8002c42:	bf00      	nop
		}
	}

	// TASK IMU

	if(tick >= getNextExecution(&IMU_TASK)){
 8002c44:	4852      	ldr	r0, [pc, #328]	; (8002d90 <scheduler+0x26c>)
 8002c46:	f000 fccf 	bl	80035e8 <getNextExecution>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	4b3a      	ldr	r3, [pc, #232]	; (8002d38 <scheduler+0x214>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d80b      	bhi.n	8002c6c <scheduler+0x148>
		IMU_TASK.last_call = tick;
 8002c54:	4b38      	ldr	r3, [pc, #224]	; (8002d38 <scheduler+0x214>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a4d      	ldr	r2, [pc, #308]	; (8002d90 <scheduler+0x26c>)
 8002c5a:	6013      	str	r3, [r2, #0]
		//icm20601_read_data_raw(&IMU1, accel1_raw_buf);
		//icm20601_convert_data(&IMU1, accel1_val, accel1_raw_buf);
		icm20601_read_data(&IMU1, accel1_val);
 8002c5c:	494d      	ldr	r1, [pc, #308]	; (8002d94 <scheduler+0x270>)
 8002c5e:	484e      	ldr	r0, [pc, #312]	; (8002d98 <scheduler+0x274>)
 8002c60:	f001 ff7e 	bl	8004b60 <icm20601_read_data>

		//icm20601_read_data_raw(&IMU2, accel2_raw_buf);
		//icm20601_convert_data(&IMU2, accel2_val, accel2_raw_buf);
		icm20601_read_data(&IMU2, accel2_val);
 8002c64:	494d      	ldr	r1, [pc, #308]	; (8002d9c <scheduler+0x278>)
 8002c66:	484e      	ldr	r0, [pc, #312]	; (8002da0 <scheduler+0x27c>)
 8002c68:	f001 ff7a 	bl	8004b60 <icm20601_read_data>
	}

	// TASK SHOCK ACCEL

	if(tick >= getNextExecution(&ACCEL_TASK)){
 8002c6c:	484d      	ldr	r0, [pc, #308]	; (8002da4 <scheduler+0x280>)
 8002c6e:	f000 fcbb 	bl	80035e8 <getNextExecution>
 8002c72:	4602      	mov	r2, r0
 8002c74:	4b30      	ldr	r3, [pc, #192]	; (8002d38 <scheduler+0x214>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d80b      	bhi.n	8002c94 <scheduler+0x170>
		ACCEL_TASK.last_call = tick;
 8002c7c:	4b2e      	ldr	r3, [pc, #184]	; (8002d38 <scheduler+0x214>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a48      	ldr	r2, [pc, #288]	; (8002da4 <scheduler+0x280>)
 8002c82:	6013      	str	r3, [r2, #0]
		h3l_read_raw(&ACCEL, accel_raw);
 8002c84:	4948      	ldr	r1, [pc, #288]	; (8002da8 <scheduler+0x284>)
 8002c86:	4849      	ldr	r0, [pc, #292]	; (8002dac <scheduler+0x288>)
 8002c88:	f001 fb4a 	bl	8004320 <h3l_read_raw>
		h3l_convert(&ACCEL, accel);
 8002c8c:	4948      	ldr	r1, [pc, #288]	; (8002db0 <scheduler+0x28c>)
 8002c8e:	4847      	ldr	r0, [pc, #284]	; (8002dac <scheduler+0x288>)
 8002c90:	f001 fc42 	bl	8004518 <h3l_convert>
	}

	// TASK ADC
	if(tick >= getNextExecution(&ADC_TASK)){
 8002c94:	4847      	ldr	r0, [pc, #284]	; (8002db4 <scheduler+0x290>)
 8002c96:	f000 fca7 	bl	80035e8 <getNextExecution>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	4b26      	ldr	r3, [pc, #152]	; (8002d38 <scheduler+0x214>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d826      	bhi.n	8002cf2 <scheduler+0x1ce>
		ADC_TASK.last_call = tick;
 8002ca4:	4b24      	ldr	r3, [pc, #144]	; (8002d38 <scheduler+0x214>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a42      	ldr	r2, [pc, #264]	; (8002db4 <scheduler+0x290>)
 8002caa:	6013      	str	r3, [r2, #0]
		read_ADC(adc_dat);
 8002cac:	4842      	ldr	r0, [pc, #264]	; (8002db8 <scheduler+0x294>)
 8002cae:	f7fe f9db 	bl	8001068 <read_ADC>
		if (DEBUG_PRINT == 1) printf("4 %4.2f V \n", adc_dat[3]);
		if (DEBUG_PRINT == 1) printf("5 %4.2f V \n", adc_dat[4]);
		if (DEBUG_PRINT == 1) printf("6 %4.2f V \n", adc_dat[5]);
		if (DEBUG_PRINT == 1) printf("7 %4.2f V \n", adc_dat[6]);
		if (DEBUG_PRINT == 1) printf("8 %4.2f C \n", adc_dat[7]);
		V_TD1 = adc_dat[0];
 8002cb2:	4b41      	ldr	r3, [pc, #260]	; (8002db8 <scheduler+0x294>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a41      	ldr	r2, [pc, #260]	; (8002dbc <scheduler+0x298>)
 8002cb8:	6013      	str	r3, [r2, #0]
		V_TD2 = adc_dat[1];
 8002cba:	4b3f      	ldr	r3, [pc, #252]	; (8002db8 <scheduler+0x294>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	4a40      	ldr	r2, [pc, #256]	; (8002dc0 <scheduler+0x29c>)
 8002cc0:	6013      	str	r3, [r2, #0]
		V_LDR = adc_dat[2];
 8002cc2:	4b3d      	ldr	r3, [pc, #244]	; (8002db8 <scheduler+0x294>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	4a3f      	ldr	r2, [pc, #252]	; (8002dc4 <scheduler+0x2a0>)
 8002cc8:	6013      	str	r3, [r2, #0]
		I_BAT1 = adc_dat[3];
 8002cca:	4b3b      	ldr	r3, [pc, #236]	; (8002db8 <scheduler+0x294>)
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	4a3e      	ldr	r2, [pc, #248]	; (8002dc8 <scheduler+0x2a4>)
 8002cd0:	6013      	str	r3, [r2, #0]
		I_BAT2 = adc_dat[4];
 8002cd2:	4b39      	ldr	r3, [pc, #228]	; (8002db8 <scheduler+0x294>)
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	4a3d      	ldr	r2, [pc, #244]	; (8002dcc <scheduler+0x2a8>)
 8002cd8:	6013      	str	r3, [r2, #0]
		V_BAT1 = adc_dat[5];
 8002cda:	4b37      	ldr	r3, [pc, #220]	; (8002db8 <scheduler+0x294>)
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	4a3c      	ldr	r2, [pc, #240]	; (8002dd0 <scheduler+0x2ac>)
 8002ce0:	6013      	str	r3, [r2, #0]
		V_BAT2 = adc_dat[6];
 8002ce2:	4b35      	ldr	r3, [pc, #212]	; (8002db8 <scheduler+0x294>)
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	4a3b      	ldr	r2, [pc, #236]	; (8002dd4 <scheduler+0x2b0>)
 8002ce8:	6013      	str	r3, [r2, #0]
		t_cpu = adc_dat[7];
 8002cea:	4b33      	ldr	r3, [pc, #204]	; (8002db8 <scheduler+0x294>)
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	4a3a      	ldr	r2, [pc, #232]	; (8002dd8 <scheduler+0x2b4>)
 8002cf0:	6013      	str	r3, [r2, #0]
	}

	// TASK STATE ESTIMATION

	if(tick >= getNextExecution(&STATE_EST_TASK)){
 8002cf2:	483a      	ldr	r0, [pc, #232]	; (8002ddc <scheduler+0x2b8>)
 8002cf4:	f000 fc78 	bl	80035e8 <getNextExecution>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	4b0f      	ldr	r3, [pc, #60]	; (8002d38 <scheduler+0x214>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	f200 8203 	bhi.w	800310a <scheduler+0x5e6>
		STATE_EST_TASK.last_call = tick;
 8002d04:	4b0c      	ldr	r3, [pc, #48]	; (8002d38 <scheduler+0x214>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a34      	ldr	r2, [pc, #208]	; (8002ddc <scheduler+0x2b8>)
 8002d0a:	6013      	str	r3, [r2, #0]

		if (FAKE_DATA == 1){
 8002d0c:	4b34      	ldr	r3, [pc, #208]	; (8002de0 <scheduler+0x2bc>)
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	f040 80c5 	bne.w	8002ea0 <scheduler+0x37c>

			// if file does not exist, continue with nominal operation
			if (TIME[counter] == 0){
 8002d16:	4b33      	ldr	r3, [pc, #204]	; (8002de4 <scheduler+0x2c0>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a33      	ldr	r2, [pc, #204]	; (8002de8 <scheduler+0x2c4>)
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	edd3 7a00 	vldr	s15, [r3]
 8002d24:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d2c:	d15e      	bne.n	8002dec <scheduler+0x2c8>
				FAKE_DATA = 0;
 8002d2e:	4b2c      	ldr	r3, [pc, #176]	; (8002de0 <scheduler+0x2bc>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	701a      	strb	r2, [r3, #0]
 8002d34:	e0ac      	b.n	8002e90 <scheduler+0x36c>
 8002d36:	bf00      	nop
 8002d38:	2000cf30 	.word	0x2000cf30
 8002d3c:	20000064 	.word	0x20000064
 8002d40:	200000e0 	.word	0x200000e0
 8002d44:	20000084 	.word	0x20000084
 8002d48:	200000d0 	.word	0x200000d0
 8002d4c:	20000074 	.word	0x20000074
 8002d50:	200000c8 	.word	0x200000c8
 8002d54:	20000094 	.word	0x20000094
 8002d58:	200000d8 	.word	0x200000d8
 8002d5c:	20000034 	.word	0x20000034
 8002d60:	2000ab28 	.word	0x2000ab28
 8002d64:	2000cf80 	.word	0x2000cf80
 8002d68:	20000148 	.word	0x20000148
 8002d6c:	20000024 	.word	0x20000024
 8002d70:	2000cf4c 	.word	0x2000cf4c
 8002d74:	200000e8 	.word	0x200000e8
 8002d78:	20004aec 	.word	0x20004aec
 8002d7c:	20000108 	.word	0x20000108
 8002d80:	200003a8 	.word	0x200003a8
 8002d84:	200003a0 	.word	0x200003a0
 8002d88:	200003ac 	.word	0x200003ac
 8002d8c:	200003a4 	.word	0x200003a4
 8002d90:	2000036c 	.word	0x2000036c
 8002d94:	2000cf88 	.word	0x2000cf88
 8002d98:	20000128 	.word	0x20000128
 8002d9c:	2000cf54 	.word	0x2000cf54
 8002da0:	20000138 	.word	0x20000138
 8002da4:	2000037c 	.word	0x2000037c
 8002da8:	20008afc 	.word	0x20008afc
 8002dac:	20000158 	.word	0x20000158
 8002db0:	20008b14 	.word	0x20008b14
 8002db4:	20000044 	.word	0x20000044
 8002db8:	2000cfa4 	.word	0x2000cfa4
 8002dbc:	20008b10 	.word	0x20008b10
 8002dc0:	2000ab20 	.word	0x2000ab20
 8002dc4:	2000cf34 	.word	0x2000cf34
 8002dc8:	2000ab24 	.word	0x2000ab24
 8002dcc:	2000cf50 	.word	0x2000cf50
 8002dd0:	2000cf70 	.word	0x2000cf70
 8002dd4:	2000ab2c 	.word	0x2000ab2c
 8002dd8:	20004ae8 	.word	0x20004ae8
 8002ddc:	20000054 	.word	0x20000054
 8002de0:	20000858 	.word	0x20000858
 8002de4:	2000039c 	.word	0x2000039c
 8002de8:	20005af0 	.word	0x20005af0
			} else {
				// use fake/old data from SD card to overwrite current sensor data
				fake_tick = TIME[counter];
 8002dec:	4b82      	ldr	r3, [pc, #520]	; (8002ff8 <scheduler+0x4d4>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a82      	ldr	r2, [pc, #520]	; (8002ffc <scheduler+0x4d8>)
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	edd3 7a00 	vldr	s15, [r3]
 8002dfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dfe:	ee17 2a90 	vmov	r2, s15
 8002e02:	4b7f      	ldr	r3, [pc, #508]	; (8003000 <scheduler+0x4dc>)
 8002e04:	601a      	str	r2, [r3, #0]
				p1 = P1[counter];
 8002e06:	4b7c      	ldr	r3, [pc, #496]	; (8002ff8 <scheduler+0x4d4>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a7e      	ldr	r2, [pc, #504]	; (8003004 <scheduler+0x4e0>)
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a7d      	ldr	r2, [pc, #500]	; (8003008 <scheduler+0x4e4>)
 8002e14:	6013      	str	r3, [r2, #0]
				p2 = P2[counter];
 8002e16:	4b78      	ldr	r3, [pc, #480]	; (8002ff8 <scheduler+0x4d4>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a7c      	ldr	r2, [pc, #496]	; (800300c <scheduler+0x4e8>)
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a7b      	ldr	r2, [pc, #492]	; (8003010 <scheduler+0x4ec>)
 8002e24:	6013      	str	r3, [r2, #0]
				accel1_val[1] = Ax1[counter];
 8002e26:	4b74      	ldr	r3, [pc, #464]	; (8002ff8 <scheduler+0x4d4>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a7a      	ldr	r2, [pc, #488]	; (8003014 <scheduler+0x4f0>)
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a79      	ldr	r2, [pc, #484]	; (8003018 <scheduler+0x4f4>)
 8002e34:	6053      	str	r3, [r2, #4]
				accel1_val[2] = Ay1[counter];
 8002e36:	4b70      	ldr	r3, [pc, #448]	; (8002ff8 <scheduler+0x4d4>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a78      	ldr	r2, [pc, #480]	; (800301c <scheduler+0x4f8>)
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a75      	ldr	r2, [pc, #468]	; (8003018 <scheduler+0x4f4>)
 8002e44:	6093      	str	r3, [r2, #8]
				accel1_val[3] = Az1[counter];
 8002e46:	4b6c      	ldr	r3, [pc, #432]	; (8002ff8 <scheduler+0x4d4>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a75      	ldr	r2, [pc, #468]	; (8003020 <scheduler+0x4fc>)
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a71      	ldr	r2, [pc, #452]	; (8003018 <scheduler+0x4f4>)
 8002e54:	60d3      	str	r3, [r2, #12]
				accel2_val[1] = Ax2[counter];
 8002e56:	4b68      	ldr	r3, [pc, #416]	; (8002ff8 <scheduler+0x4d4>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a72      	ldr	r2, [pc, #456]	; (8003024 <scheduler+0x500>)
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a71      	ldr	r2, [pc, #452]	; (8003028 <scheduler+0x504>)
 8002e64:	6053      	str	r3, [r2, #4]
				accel2_val[2] = Ay2[counter];
 8002e66:	4b64      	ldr	r3, [pc, #400]	; (8002ff8 <scheduler+0x4d4>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a70      	ldr	r2, [pc, #448]	; (800302c <scheduler+0x508>)
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a6d      	ldr	r2, [pc, #436]	; (8003028 <scheduler+0x504>)
 8002e74:	6093      	str	r3, [r2, #8]
				accel2_val[3] = Az2[counter];
 8002e76:	4b60      	ldr	r3, [pc, #384]	; (8002ff8 <scheduler+0x4d4>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a6d      	ldr	r2, [pc, #436]	; (8003030 <scheduler+0x50c>)
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a69      	ldr	r2, [pc, #420]	; (8003028 <scheduler+0x504>)
 8002e84:	60d3      	str	r3, [r2, #12]
				counter ++;
 8002e86:	4b5c      	ldr	r3, [pc, #368]	; (8002ff8 <scheduler+0x4d4>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	4a5a      	ldr	r2, [pc, #360]	; (8002ff8 <scheduler+0x4d4>)
 8002e8e:	6013      	str	r3, [r2, #0]
			}

			// if fake file ends, continue with nominal operation
			if (counter >= FAKE_FILE_LEN){
 8002e90:	4b59      	ldr	r3, [pc, #356]	; (8002ff8 <scheduler+0x4d4>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e98:	d302      	bcc.n	8002ea0 <scheduler+0x37c>
				FAKE_DATA = 0;
 8002e9a:	4b66      	ldr	r3, [pc, #408]	; (8003034 <scheduler+0x510>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	701a      	strb	r2, [r3, #0]
			}
		}

		// call state estimation
		if (state_est_state.flight_phase_detection.flight_phase < DESCENT){
 8002ea0:	4b65      	ldr	r3, [pc, #404]	; (8003038 <scheduler+0x514>)
 8002ea2:	f893 33d8 	ldrb.w	r3, [r3, #984]	; 0x3d8
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d838      	bhi.n	8002f1c <scheduler+0x3f8>

			// feed in sensor values
			state_est_state.state_est_meas.baro_data[0].pressure = p1;
 8002eaa:	4b57      	ldr	r3, [pc, #348]	; (8003008 <scheduler+0x4e4>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a62      	ldr	r2, [pc, #392]	; (8003038 <scheduler+0x514>)
 8002eb0:	63d3      	str	r3, [r2, #60]	; 0x3c
			state_est_state.state_est_meas.baro_data[0].temperature = t_p1;
 8002eb2:	4b62      	ldr	r3, [pc, #392]	; (800303c <scheduler+0x518>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a60      	ldr	r2, [pc, #384]	; (8003038 <scheduler+0x514>)
 8002eb8:	6413      	str	r3, [r2, #64]	; 0x40
			state_est_state.state_est_meas.baro_data[0].ts = tick;
 8002eba:	4b61      	ldr	r3, [pc, #388]	; (8003040 <scheduler+0x51c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a5e      	ldr	r2, [pc, #376]	; (8003038 <scheduler+0x514>)
 8002ec0:	6453      	str	r3, [r2, #68]	; 0x44

			state_est_state.state_est_meas.imu_data[0].acc_x = -accel1_val[1];
 8002ec2:	4b55      	ldr	r3, [pc, #340]	; (8003018 <scheduler+0x4f4>)
 8002ec4:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ec8:	eef1 7a67 	vneg.f32	s15, s15
 8002ecc:	4b5a      	ldr	r3, [pc, #360]	; (8003038 <scheduler+0x514>)
 8002ece:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			state_est_state.state_est_meas.imu_data[0].ts = tick;
 8002ed2:	4b5b      	ldr	r3, [pc, #364]	; (8003040 <scheduler+0x51c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a58      	ldr	r2, [pc, #352]	; (8003038 <scheduler+0x514>)
 8002ed8:	66d3      	str	r3, [r2, #108]	; 0x6c

			state_est_state.state_est_meas.baro_data[1].pressure = p2;
 8002eda:	4b4d      	ldr	r3, [pc, #308]	; (8003010 <scheduler+0x4ec>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a56      	ldr	r2, [pc, #344]	; (8003038 <scheduler+0x514>)
 8002ee0:	6493      	str	r3, [r2, #72]	; 0x48
			state_est_state.state_est_meas.baro_data[1].temperature = t_p2;
 8002ee2:	4b58      	ldr	r3, [pc, #352]	; (8003044 <scheduler+0x520>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a54      	ldr	r2, [pc, #336]	; (8003038 <scheduler+0x514>)
 8002ee8:	64d3      	str	r3, [r2, #76]	; 0x4c
			state_est_state.state_est_meas.baro_data[1].ts = tick;
 8002eea:	4b55      	ldr	r3, [pc, #340]	; (8003040 <scheduler+0x51c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a52      	ldr	r2, [pc, #328]	; (8003038 <scheduler+0x514>)
 8002ef0:	6513      	str	r3, [r2, #80]	; 0x50

			state_est_state.state_est_meas.imu_data[1].acc_x = -accel2_val[1];
 8002ef2:	4b4d      	ldr	r3, [pc, #308]	; (8003028 <scheduler+0x504>)
 8002ef4:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ef8:	eef1 7a67 	vneg.f32	s15, s15
 8002efc:	4b4e      	ldr	r3, [pc, #312]	; (8003038 <scheduler+0x514>)
 8002efe:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
			state_est_state.state_est_meas.imu_data[1].ts = tick;
 8002f02:	4b4f      	ldr	r3, [pc, #316]	; (8003040 <scheduler+0x51c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a4c      	ldr	r2, [pc, #304]	; (8003038 <scheduler+0x514>)
 8002f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

			state_est_step(tick, &state_est_state, true);
 8002f0c:	4b4c      	ldr	r3, [pc, #304]	; (8003040 <scheduler+0x51c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2201      	movs	r2, #1
 8002f12:	4949      	ldr	r1, [pc, #292]	; (8003038 <scheduler+0x514>)
 8002f14:	4618      	mov	r0, r3
 8002f16:	f003 fa29 	bl	800636c <state_est_step>
 8002f1a:	e0a1      	b.n	8003060 <scheduler+0x53c>
		} else {

			// ignore state estimation for descent, calculate altitude from barometer readings only.

			float p[2];
			float altitude[2] = {0,0};
 8002f1c:	f04f 0300 	mov.w	r3, #0
 8002f20:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002f24:	f04f 0300 	mov.w	r3, #0
 8002f28:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
			p[0] = p1;
 8002f2c:	4b36      	ldr	r3, [pc, #216]	; (8003008 <scheduler+0x4e4>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
			p[1] = p2;
 8002f34:	4b36      	ldr	r3, [pc, #216]	; (8003010 <scheduler+0x4ec>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
			bool p_active[2] = {p_descent_sanity_check(&p1), p_descent_sanity_check(&p2)};
 8002f3c:	4832      	ldr	r0, [pc, #200]	; (8003008 <scheduler+0x4e4>)
 8002f3e:	f000 fca3 	bl	8003888 <p_descent_sanity_check>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	bf14      	ite	ne
 8002f48:	2301      	movne	r3, #1
 8002f4a:	2300      	moveq	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
 8002f52:	482f      	ldr	r0, [pc, #188]	; (8003010 <scheduler+0x4ec>)
 8002f54:	f000 fc98 	bl	8003888 <p_descent_sanity_check>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	bf14      	ite	ne
 8002f5e:	2301      	movne	r3, #1
 8002f60:	2300      	moveq	r3, #0
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105

			pressure2altitudeAGL(&state_est_state.env, 2,  p, p_active, altitude);
 8002f68:	f507 7182 	add.w	r1, r7, #260	; 0x104
 8002f6c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002f70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	460b      	mov	r3, r1
 8002f78:	2102      	movs	r1, #2
 8002f7a:	4833      	ldr	r0, [pc, #204]	; (8003048 <scheduler+0x524>)
 8002f7c:	f002 fc50 	bl	8005820 <pressure2altitudeAGL>

			if (p_active[0] + p_active[1] != 0){
 8002f80:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8002f84:	461a      	mov	r2, r3
 8002f86:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8002f8a:	4413      	add	r3, r2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d013      	beq.n	8002fb8 <scheduler+0x494>
				// calculate mean altitude if both barometer readings are valid
				alt = (altitude[0] + altitude[0])/ (p_active[0] + p_active[1]);
 8002f90:	edd7 7a42 	vldr	s15, [r7, #264]	; 0x108
 8002f94:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002f98:	f897 3104 	ldrb.w	r3, [r7, #260]	; 0x104
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 8002fa2:	4413      	add	r3, r2
 8002fa4:	ee07 3a90 	vmov	s15, r3
 8002fa8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fb0:	4b26      	ldr	r3, [pc, #152]	; (800304c <scheduler+0x528>)
 8002fb2:	edc3 7a00 	vstr	s15, [r3]
 8002fb6:	e003      	b.n	8002fc0 <scheduler+0x49c>
			} else {
				// if both barometer readings are invalid
				alt = 0;
 8002fb8:	4b24      	ldr	r3, [pc, #144]	; (800304c <scheduler+0x528>)
 8002fba:	f04f 0200 	mov.w	r2, #0
 8002fbe:	601a      	str	r2, [r3, #0]
			}

			if ((alt < SECOND_EVENT_AGL) && (0 < alt)) {
 8002fc0:	4b22      	ldr	r3, [pc, #136]	; (800304c <scheduler+0x528>)
 8002fc2:	edd3 7a00 	vldr	s15, [r3]
 8002fc6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003050 <scheduler+0x52c>
 8002fca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fd2:	d545      	bpl.n	8003060 <scheduler+0x53c>
 8002fd4:	4b1d      	ldr	r3, [pc, #116]	; (800304c <scheduler+0x528>)
 8002fd6:	edd3 7a00 	vldr	s15, [r3]
 8002fda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fe2:	dd3d      	ble.n	8003060 <scheduler+0x53c>
				if (event == NOE)
 8002fe4:	4b1b      	ldr	r3, [pc, #108]	; (8003054 <scheduler+0x530>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d135      	bne.n	8003058 <scheduler+0x534>
				{
					// initiate separation if no separation has been initiated so far
					state_est_state.flight_phase_detection.flight_phase = DESCENT;
 8002fec:	4b12      	ldr	r3, [pc, #72]	; (8003038 <scheduler+0x514>)
 8002fee:	2205      	movs	r2, #5
 8002ff0:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8
 8002ff4:	e034      	b.n	8003060 <scheduler+0x53c>
 8002ff6:	bf00      	nop
 8002ff8:	2000039c 	.word	0x2000039c
 8002ffc:	20005af0 	.word	0x20005af0
 8003000:	2000cfc4 	.word	0x2000cfc4
 8003004:	20007afc 	.word	0x20007afc
 8003008:	200003a0 	.word	0x200003a0
 800300c:	20008b20 	.word	0x20008b20
 8003010:	200003a4 	.word	0x200003a4
 8003014:	2000ab30 	.word	0x2000ab30
 8003018:	2000cf88 	.word	0x2000cf88
 800301c:	20006afc 	.word	0x20006afc
 8003020:	2000bb30 	.word	0x2000bb30
 8003024:	20009b20 	.word	0x20009b20
 8003028:	2000cf54 	.word	0x2000cf54
 800302c:	2000cfc8 	.word	0x2000cfc8
 8003030:	20004af0 	.word	0x20004af0
 8003034:	20000858 	.word	0x20000858
 8003038:	200003c0 	.word	0x200003c0
 800303c:	200003a8 	.word	0x200003a8
 8003040:	2000cf30 	.word	0x2000cf30
 8003044:	200003ac 	.word	0x200003ac
 8003048:	20000788 	.word	0x20000788
 800304c:	200003b8 	.word	0x200003b8
 8003050:	43c80000 	.word	0x43c80000
 8003054:	200003b6 	.word	0x200003b6
				} else {
					// second event
					state_est_state.flight_phase_detection.flight_phase = RECOVERY;
 8003058:	4b6b      	ldr	r3, [pc, #428]	; (8003208 <scheduler+0x6e4>)
 800305a:	2207      	movs	r2, #7
 800305c:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8
				}
			}
		}

		// timer start
		if ((state_est_state.flight_phase_detection.flight_phase == THRUSTING) || (launch_detect(accel1_val, accel2_val) == 1) ){
 8003060:	4b69      	ldr	r3, [pc, #420]	; (8003208 <scheduler+0x6e4>)
 8003062:	f893 33d8 	ldrb.w	r3, [r3, #984]	; 0x3d8
 8003066:	2b03      	cmp	r3, #3
 8003068:	d006      	beq.n	8003078 <scheduler+0x554>
 800306a:	4968      	ldr	r1, [pc, #416]	; (800320c <scheduler+0x6e8>)
 800306c:	4868      	ldr	r0, [pc, #416]	; (8003210 <scheduler+0x6ec>)
 800306e:	f7ff fb77 	bl	8002760 <launch_detect>
 8003072:	4603      	mov	r3, r0
 8003074:	2b01      	cmp	r3, #1
 8003076:	d10b      	bne.n	8003090 <scheduler+0x56c>
			start_timer(&mach_timer, &tick);
 8003078:	4966      	ldr	r1, [pc, #408]	; (8003214 <scheduler+0x6f0>)
 800307a:	4867      	ldr	r0, [pc, #412]	; (8003218 <scheduler+0x6f4>)
 800307c:	f7ff f8e6 	bl	800224c <start_timer>
			start_timer(&fail_safe_timer, &tick);
 8003080:	4964      	ldr	r1, [pc, #400]	; (8003214 <scheduler+0x6f0>)
 8003082:	4866      	ldr	r0, [pc, #408]	; (800321c <scheduler+0x6f8>)
 8003084:	f7ff f8e2 	bl	800224c <start_timer>
			start_timer(&fail_safe_timer_main, &tick);
 8003088:	4962      	ldr	r1, [pc, #392]	; (8003214 <scheduler+0x6f0>)
 800308a:	4865      	ldr	r0, [pc, #404]	; (8003220 <scheduler+0x6fc>)
 800308c:	f7ff f8de 	bl	800224c <start_timer>
		}

		if ((tick > 30000) && (CHECK_FLAG == 0)){
 8003090:	4b60      	ldr	r3, [pc, #384]	; (8003214 <scheduler+0x6f0>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f247 5230 	movw	r2, #30000	; 0x7530
 8003098:	4293      	cmp	r3, r2
 800309a:	d936      	bls.n	800310a <scheduler+0x5e6>
 800309c:	4b61      	ldr	r3, [pc, #388]	; (8003224 <scheduler+0x700>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d132      	bne.n	800310a <scheduler+0x5e6>

			// Perform sanity check of state estimation 30 seconds after bootup!

			float check_a = -accel1_val[1];
 80030a4:	4b5a      	ldr	r3, [pc, #360]	; (8003210 <scheduler+0x6ec>)
 80030a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80030aa:	eef1 7a67 	vneg.f32	s15, s15
 80030ae:	edc7 7a40 	vstr	s15, [r7, #256]	; 0x100
			float check_h = state_est_state.state_est_data.position_world[2];
 80030b2:	4b55      	ldr	r3, [pc, #340]	; (8003208 <scheduler+0x6e4>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	ee07 3a90 	vmov	s15, r3
 80030ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030be:	edc7 7a3f 	vstr	s15, [r7, #252]	; 0xfc
			float check_v = state_est_state.state_est_data.velocity_rocket[0];
 80030c2:	4b51      	ldr	r3, [pc, #324]	; (8003208 <scheduler+0x6e4>)
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	ee07 3a90 	vmov	s15, r3
 80030ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030ce:	edc7 7a3e 	vstr	s15, [r7, #248]	; 0xf8
			if (state_est_sanity_check(&check_a, &check_h, &check_v) == 0){
 80030d2:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80030d6:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 80030da:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 fc5c 	bl	800399c <state_est_sanity_check>
				if (DEBUG_PRINT == 1) printf("sanity check for state estimation failed! \n");
			}

			check_a = -accel2_val[1];
 80030e4:	4b49      	ldr	r3, [pc, #292]	; (800320c <scheduler+0x6e8>)
 80030e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80030ea:	eef1 7a67 	vneg.f32	s15, s15
 80030ee:	edc7 7a40 	vstr	s15, [r7, #256]	; 0x100
			if (state_est_sanity_check(&check_a, &check_h, &check_v) == 0){
 80030f2:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 80030f6:	f107 01fc 	add.w	r1, r7, #252	; 0xfc
 80030fa:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 fc4c 	bl	800399c <state_est_sanity_check>
				if (DEBUG_PRINT == 1) printf("sanity check for state estimation failed! \n");
			}
			CHECK_FLAG = 1;
 8003104:	4b47      	ldr	r3, [pc, #284]	; (8003224 <scheduler+0x700>)
 8003106:	2201      	movs	r2, #1
 8003108:	701a      	strb	r2, [r3, #0]

	}


	// if mach timer has passed, software arm the system
	if (check_timer(&mach_timer, &tick) == 1) armed = 1;
 800310a:	4942      	ldr	r1, [pc, #264]	; (8003214 <scheduler+0x6f0>)
 800310c:	4842      	ldr	r0, [pc, #264]	; (8003218 <scheduler+0x6f4>)
 800310e:	f7ff f8b6 	bl	800227e <check_timer>
 8003112:	4603      	mov	r3, r0
 8003114:	2b01      	cmp	r3, #1
 8003116:	d102      	bne.n	800311e <scheduler+0x5fa>
 8003118:	4b43      	ldr	r3, [pc, #268]	; (8003228 <scheduler+0x704>)
 800311a:	2201      	movs	r2, #1
 800311c:	701a      	strb	r2, [r3, #0]

	// if fail_safe timer has passed, skip to descent flight phase
	if (check_timer(&fail_safe_timer, &tick) == 1) state_est_state.flight_phase_detection.flight_phase = DESCENT;
 800311e:	493d      	ldr	r1, [pc, #244]	; (8003214 <scheduler+0x6f0>)
 8003120:	483e      	ldr	r0, [pc, #248]	; (800321c <scheduler+0x6f8>)
 8003122:	f7ff f8ac 	bl	800227e <check_timer>
 8003126:	4603      	mov	r3, r0
 8003128:	2b01      	cmp	r3, #1
 800312a:	d103      	bne.n	8003134 <scheduler+0x610>
 800312c:	4b36      	ldr	r3, [pc, #216]	; (8003208 <scheduler+0x6e4>)
 800312e:	2205      	movs	r2, #5
 8003130:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8

	// if fail_safe timer has passed, skip to descent flight phase
	if (check_timer(&fail_safe_timer_main, &tick) == 1) {
 8003134:	4937      	ldr	r1, [pc, #220]	; (8003214 <scheduler+0x6f0>)
 8003136:	483a      	ldr	r0, [pc, #232]	; (8003220 <scheduler+0x6fc>)
 8003138:	f7ff f8a1 	bl	800227e <check_timer>
 800313c:	4603      	mov	r3, r0
 800313e:	2b01      	cmp	r3, #1
 8003140:	d112      	bne.n	8003168 <scheduler+0x644>
		if (state_est_state.flight_phase_detection.flight_phase < DESCENT){
 8003142:	4b31      	ldr	r3, [pc, #196]	; (8003208 <scheduler+0x6e4>)
 8003144:	f893 33d8 	ldrb.w	r3, [r3, #984]	; 0x3d8
 8003148:	2b04      	cmp	r3, #4
 800314a:	d804      	bhi.n	8003156 <scheduler+0x632>
			// if the main fail_safe_timer for some reason ends before we're in DESCENT mode
			state_est_state.flight_phase_detection.flight_phase = DESCENT;
 800314c:	4b2e      	ldr	r3, [pc, #184]	; (8003208 <scheduler+0x6e4>)
 800314e:	2205      	movs	r2, #5
 8003150:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8
 8003154:	e008      	b.n	8003168 <scheduler+0x644>
		} else if (state_est_state.flight_phase_detection.flight_phase == DESCENT) {
 8003156:	4b2c      	ldr	r3, [pc, #176]	; (8003208 <scheduler+0x6e4>)
 8003158:	f893 33d8 	ldrb.w	r3, [r3, #984]	; 0x3d8
 800315c:	2b05      	cmp	r3, #5
 800315e:	d103      	bne.n	8003168 <scheduler+0x644>
			// after main fail safe timer ends, we jump into RECOVERY mode an initiate main deploy
			// this happens for example if the barometer values are invalid during descent
			state_est_state.flight_phase_detection.flight_phase = RECOVERY;
 8003160:	4b29      	ldr	r3, [pc, #164]	; (8003208 <scheduler+0x6e4>)
 8003162:	2207      	movs	r2, #7
 8003164:	f883 23d8 	strb.w	r2, [r3, #984]	; 0x3d8
		}
	}


	// act according to flight phase
	switch(state_est_state.flight_phase_detection.flight_phase){
 8003168:	4b27      	ldr	r3, [pc, #156]	; (8003208 <scheduler+0x6e4>)
 800316a:	f893 33d8 	ldrb.w	r3, [r3, #984]	; 0x3d8
 800316e:	3b01      	subs	r3, #1
 8003170:	2b06      	cmp	r3, #6
 8003172:	d86b      	bhi.n	800324c <scheduler+0x728>
 8003174:	a201      	add	r2, pc, #4	; (adr r2, 800317c <scheduler+0x658>)
 8003176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317a:	bf00      	nop
 800317c:	0800324d 	.word	0x0800324d
 8003180:	0800324d 	.word	0x0800324d
 8003184:	0800324d 	.word	0x0800324d
 8003188:	0800324d 	.word	0x0800324d
 800318c:	08003199 	.word	0x08003199
 8003190:	080031a7 	.word	0x080031a7
 8003194:	080031b3 	.word	0x080031b3
			break;
		case COASTING:
			break;
		case DESCENT:
			// apogee
			fire_HAWKs(&armed);
 8003198:	4823      	ldr	r0, [pc, #140]	; (8003228 <scheduler+0x704>)
 800319a:	f7fd fef5 	bl	8000f88 <fire_HAWKs>
			event = HAWKS;
 800319e:	4b23      	ldr	r3, [pc, #140]	; (800322c <scheduler+0x708>)
 80031a0:	2201      	movs	r2, #1
 80031a2:	701a      	strb	r2, [r3, #0]
			break;
 80031a4:	e052      	b.n	800324c <scheduler+0x728>
		case BALLISTIC_DESCENT:
			// oh-oh...
			fire_HAWKs(&armed);
 80031a6:	4820      	ldr	r0, [pc, #128]	; (8003228 <scheduler+0x704>)
 80031a8:	f7fd feee 	bl	8000f88 <fire_HAWKs>
			event = HAWKS;
 80031ac:	4b1f      	ldr	r3, [pc, #124]	; (800322c <scheduler+0x708>)
 80031ae:	2201      	movs	r2, #1
 80031b0:	701a      	strb	r2, [r3, #0]
		case RECOVERY:
			// second event
			if (TD_fired == 0){
 80031b2:	4b1f      	ldr	r3, [pc, #124]	; (8003230 <scheduler+0x70c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d109      	bne.n	80031ce <scheduler+0x6aa>
				fire_TDs(&armed);
 80031ba:	481b      	ldr	r0, [pc, #108]	; (8003228 <scheduler+0x704>)
 80031bc:	f7fd ff14 	bl	8000fe8 <fire_TDs>
				TD_fired = tick;
 80031c0:	4b14      	ldr	r3, [pc, #80]	; (8003214 <scheduler+0x6f0>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a1a      	ldr	r2, [pc, #104]	; (8003230 <scheduler+0x70c>)
 80031c6:	6013      	str	r3, [r2, #0]
				event = TENDER;
 80031c8:	4b18      	ldr	r3, [pc, #96]	; (800322c <scheduler+0x708>)
 80031ca:	2202      	movs	r2, #2
 80031cc:	701a      	strb	r2, [r3, #0]
			}

			// allow 100ms of high-current through igniters
			// if after 100ms the current is still peaking over 1 Amp, the igniters have fused
			// this might damage the electronics and drain the battery
			if(tick >= TD_fired + 100){
 80031ce:	4b18      	ldr	r3, [pc, #96]	; (8003230 <scheduler+0x70c>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f103 0264 	add.w	r2, r3, #100	; 0x64
 80031d6:	4b0f      	ldr	r3, [pc, #60]	; (8003214 <scheduler+0x6f0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d835      	bhi.n	800324a <scheduler+0x726>
				if ((I_BAT1 >= 1000) || (I_BAT2 >= 1000)){
 80031de:	4b15      	ldr	r3, [pc, #84]	; (8003234 <scheduler+0x710>)
 80031e0:	edd3 7a00 	vldr	s15, [r3]
 80031e4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003238 <scheduler+0x714>
 80031e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f0:	da26      	bge.n	8003240 <scheduler+0x71c>
 80031f2:	4b12      	ldr	r3, [pc, #72]	; (800323c <scheduler+0x718>)
 80031f4:	edd3 7a00 	vldr	s15, [r3]
 80031f8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003238 <scheduler+0x714>
 80031fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003204:	da1c      	bge.n	8003240 <scheduler+0x71c>
					if (DEBUG_PRINT == 1) printf("fused igniters detected!! \n");
					turn_off_TDs();
					event = TENDER_DISABLE;
				}
			}
			break;
 8003206:	e020      	b.n	800324a <scheduler+0x726>
 8003208:	200003c0 	.word	0x200003c0
 800320c:	2000cf54 	.word	0x2000cf54
 8003210:	2000cf88 	.word	0x2000cf88
 8003214:	2000cf30 	.word	0x2000cf30
 8003218:	200000a4 	.word	0x200000a4
 800321c:	200000b0 	.word	0x200000b0
 8003220:	200000bc 	.word	0x200000bc
 8003224:	20000859 	.word	0x20000859
 8003228:	200003b5 	.word	0x200003b5
 800322c:	200003b6 	.word	0x200003b6
 8003230:	2000085c 	.word	0x2000085c
 8003234:	2000ab24 	.word	0x2000ab24
 8003238:	447a0000 	.word	0x447a0000
 800323c:	2000cf50 	.word	0x2000cf50
					turn_off_TDs();
 8003240:	f7fd fef0 	bl	8001024 <turn_off_TDs>
					event = TENDER_DISABLE;
 8003244:	4ba3      	ldr	r3, [pc, #652]	; (80034d4 <scheduler+0x9b0>)
 8003246:	2203      	movs	r2, #3
 8003248:	701a      	strb	r2, [r3, #0]
			break;
 800324a:	bf00      	nop
	}


	// TASK LOGGING
	if(tick >= getNextExecution(&LOG_TASK)){
 800324c:	48a2      	ldr	r0, [pc, #648]	; (80034d8 <scheduler+0x9b4>)
 800324e:	f000 f9cb 	bl	80035e8 <getNextExecution>
 8003252:	4602      	mov	r2, r0
 8003254:	4ba1      	ldr	r3, [pc, #644]	; (80034dc <scheduler+0x9b8>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	429a      	cmp	r2, r3
 800325a:	f200 81b9 	bhi.w	80035d0 <scheduler+0xaac>
		LOG_TASK.last_call = tick;
 800325e:	4b9f      	ldr	r3, [pc, #636]	; (80034dc <scheduler+0x9b8>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a9d      	ldr	r2, [pc, #628]	; (80034d8 <scheduler+0x9b4>)
 8003264:	6013      	str	r3, [r2, #0]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8003266:	4b9d      	ldr	r3, [pc, #628]	; (80034dc <scheduler+0x9b8>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800326e:	4b9c      	ldr	r3, [pc, #624]	; (80034e0 <scheduler+0x9bc>)
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003276:	4b97      	ldr	r3, [pc, #604]	; (80034d4 <scheduler+0x9b0>)
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800327e:	4b99      	ldr	r3, [pc, #612]	; (80034e4 <scheduler+0x9c0>)
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003286:	4b98      	ldr	r3, [pc, #608]	; (80034e8 <scheduler+0x9c4>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f7fd f95c 	bl	8000548 <__aeabi_f2d>
 8003290:	e9c7 0138 	strd	r0, r1, [r7, #224]	; 0xe0
 8003294:	4b95      	ldr	r3, [pc, #596]	; (80034ec <scheduler+0x9c8>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f7fd f955 	bl	8000548 <__aeabi_f2d>
 800329e:	e9c7 0136 	strd	r0, r1, [r7, #216]	; 0xd8
				tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 80032a2:	4b93      	ldr	r3, [pc, #588]	; (80034f0 <scheduler+0x9cc>)
 80032a4:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7fd f94e 	bl	8000548 <__aeabi_f2d>
 80032ac:	e9c7 0134 	strd	r0, r1, [r7, #208]	; 0xd0
				tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 80032b0:	4b8f      	ldr	r3, [pc, #572]	; (80034f0 <scheduler+0x9cc>)
 80032b2:	681b      	ldr	r3, [r3, #0]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7fd f947 	bl	8000548 <__aeabi_f2d>
 80032ba:	e9c7 0132 	strd	r0, r1, [r7, #200]	; 0xc8
 80032be:	4b8d      	ldr	r3, [pc, #564]	; (80034f4 <scheduler+0x9d0>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fd f940 	bl	8000548 <__aeabi_f2d>
 80032c8:	e9c7 0130 	strd	r0, r1, [r7, #192]	; 0xc0
 80032cc:	4b8a      	ldr	r3, [pc, #552]	; (80034f8 <scheduler+0x9d4>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7fd f939 	bl	8000548 <__aeabi_f2d>
 80032d6:	e9c7 012e 	strd	r0, r1, [r7, #184]	; 0xb8
 80032da:	4b88      	ldr	r3, [pc, #544]	; (80034fc <scheduler+0x9d8>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fd f932 	bl	8000548 <__aeabi_f2d>
 80032e4:	e9c7 012c 	strd	r0, r1, [r7, #176]	; 0xb0
				tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 80032e8:	4b85      	ldr	r3, [pc, #532]	; (8003500 <scheduler+0x9dc>)
 80032ea:	681b      	ldr	r3, [r3, #0]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fd f92b 	bl	8000548 <__aeabi_f2d>
 80032f2:	e9c7 012a 	strd	r0, r1, [r7, #168]	; 0xa8
				tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 80032f6:	4b83      	ldr	r3, [pc, #524]	; (8003504 <scheduler+0x9e0>)
 80032f8:	681b      	ldr	r3, [r3, #0]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fd f924 	bl	8000548 <__aeabi_f2d>
 8003300:	e9c7 0128 	strd	r0, r1, [r7, #160]	; 0xa0
 8003304:	4b80      	ldr	r3, [pc, #512]	; (8003508 <scheduler+0x9e4>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f7fd f91d 	bl	8000548 <__aeabi_f2d>
 800330e:	e9c7 0126 	strd	r0, r1, [r7, #152]	; 0x98
 8003312:	4b7e      	ldr	r3, [pc, #504]	; (800350c <scheduler+0x9e8>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f7fd f916 	bl	8000548 <__aeabi_f2d>
 800331c:	e9c7 0124 	strd	r0, r1, [r7, #144]	; 0x90
				tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8003320:	4b77      	ldr	r3, [pc, #476]	; (8003500 <scheduler+0x9dc>)
 8003322:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8003324:	4618      	mov	r0, r3
 8003326:	f7fd f90f 	bl	8000548 <__aeabi_f2d>
 800332a:	e9c7 0122 	strd	r0, r1, [r7, #136]	; 0x88
				tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 800332e:	4b74      	ldr	r3, [pc, #464]	; (8003500 <scheduler+0x9dc>)
 8003330:	689b      	ldr	r3, [r3, #8]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8003332:	4618      	mov	r0, r3
 8003334:	f7fd f908 	bl	8000548 <__aeabi_f2d>
 8003338:	e9c7 0120 	strd	r0, r1, [r7, #128]	; 0x80
				tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 800333c:	4b70      	ldr	r3, [pc, #448]	; (8003500 <scheduler+0x9dc>)
 800333e:	68db      	ldr	r3, [r3, #12]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8003340:	4618      	mov	r0, r3
 8003342:	f7fd f901 	bl	8000548 <__aeabi_f2d>
 8003346:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
				tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 800334a:	4b6d      	ldr	r3, [pc, #436]	; (8003500 <scheduler+0x9dc>)
 800334c:	691b      	ldr	r3, [r3, #16]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 800334e:	4618      	mov	r0, r3
 8003350:	f7fd f8fa 	bl	8000548 <__aeabi_f2d>
 8003354:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70
				tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8003358:	4b69      	ldr	r3, [pc, #420]	; (8003500 <scheduler+0x9dc>)
 800335a:	695b      	ldr	r3, [r3, #20]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 800335c:	4618      	mov	r0, r3
 800335e:	f7fd f8f3 	bl	8000548 <__aeabi_f2d>
 8003362:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
				tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8003366:	4b66      	ldr	r3, [pc, #408]	; (8003500 <scheduler+0x9dc>)
 8003368:	699b      	ldr	r3, [r3, #24]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 800336a:	4618      	mov	r0, r3
 800336c:	f7fd f8ec 	bl	8000548 <__aeabi_f2d>
 8003370:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
				tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8003374:	4b63      	ldr	r3, [pc, #396]	; (8003504 <scheduler+0x9e0>)
 8003376:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8003378:	4618      	mov	r0, r3
 800337a:	f7fd f8e5 	bl	8000548 <__aeabi_f2d>
 800337e:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
				tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8003382:	4b60      	ldr	r3, [pc, #384]	; (8003504 <scheduler+0x9e0>)
 8003384:	689b      	ldr	r3, [r3, #8]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8003386:	4618      	mov	r0, r3
 8003388:	f7fd f8de 	bl	8000548 <__aeabi_f2d>
 800338c:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
				tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8003390:	4b5c      	ldr	r3, [pc, #368]	; (8003504 <scheduler+0x9e0>)
 8003392:	68db      	ldr	r3, [r3, #12]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8003394:	4618      	mov	r0, r3
 8003396:	f7fd f8d7 	bl	8000548 <__aeabi_f2d>
 800339a:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
				tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 800339e:	4b59      	ldr	r3, [pc, #356]	; (8003504 <scheduler+0x9e0>)
 80033a0:	691b      	ldr	r3, [r3, #16]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fd f8d0 	bl	8000548 <__aeabi_f2d>
 80033a8:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
				tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 80033ac:	4b55      	ldr	r3, [pc, #340]	; (8003504 <scheduler+0x9e0>)
 80033ae:	695b      	ldr	r3, [r3, #20]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7fd f8c9 	bl	8000548 <__aeabi_f2d>
 80033b6:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
				tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 80033ba:	4b52      	ldr	r3, [pc, #328]	; (8003504 <scheduler+0x9e0>)
 80033bc:	699b      	ldr	r3, [r3, #24]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 80033be:	4618      	mov	r0, r3
 80033c0:	f7fd f8c2 	bl	8000548 <__aeabi_f2d>
 80033c4:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
				tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 80033c8:	4b51      	ldr	r3, [pc, #324]	; (8003510 <scheduler+0x9ec>)
 80033ca:	681b      	ldr	r3, [r3, #0]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7fd f8bb 	bl	8000548 <__aeabi_f2d>
 80033d2:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
				tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 80033d6:	4b4e      	ldr	r3, [pc, #312]	; (8003510 <scheduler+0x9ec>)
 80033d8:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fd f8b4 	bl	8000548 <__aeabi_f2d>
 80033e0:	e9c7 0108 	strd	r0, r1, [r7, #32]
				tick, armed, event, flight_phase, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 80033e4:	4b4a      	ldr	r3, [pc, #296]	; (8003510 <scheduler+0x9ec>)
 80033e6:	689b      	ldr	r3, [r3, #8]
		sprintf(buffer,"%ld, %d ,%d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fd f8ad 	bl	8000548 <__aeabi_f2d>
 80033ee:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80033f2:	4b48      	ldr	r3, [pc, #288]	; (8003514 <scheduler+0x9f0>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7fd f8a6 	bl	8000548 <__aeabi_f2d>
 80033fc:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003400:	4b45      	ldr	r3, [pc, #276]	; (8003518 <scheduler+0x9f4>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f7fd f89f 	bl	8000548 <__aeabi_f2d>
 800340a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800340e:	4b43      	ldr	r3, [pc, #268]	; (800351c <scheduler+0x9f8>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4618      	mov	r0, r3
 8003414:	f7fd f898 	bl	8000548 <__aeabi_f2d>
 8003418:	e9c7 0100 	strd	r0, r1, [r7]
 800341c:	4b40      	ldr	r3, [pc, #256]	; (8003520 <scheduler+0x9fc>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4618      	mov	r0, r3
 8003422:	f7fd f891 	bl	8000548 <__aeabi_f2d>
 8003426:	4682      	mov	sl, r0
 8003428:	468b      	mov	fp, r1
 800342a:	4b3e      	ldr	r3, [pc, #248]	; (8003524 <scheduler+0xa00>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f7fd f88a 	bl	8000548 <__aeabi_f2d>
 8003434:	4680      	mov	r8, r0
 8003436:	4689      	mov	r9, r1
 8003438:	4b3b      	ldr	r3, [pc, #236]	; (8003528 <scheduler+0xa04>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f7fd f883 	bl	8000548 <__aeabi_f2d>
 8003442:	4605      	mov	r5, r0
 8003444:	460e      	mov	r6, r1
 8003446:	4b39      	ldr	r3, [pc, #228]	; (800352c <scheduler+0xa08>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4618      	mov	r0, r3
 800344c:	f7fd f87c 	bl	8000548 <__aeabi_f2d>
 8003450:	4603      	mov	r3, r0
 8003452:	460c      	mov	r4, r1
 8003454:	e9cd 3442 	strd	r3, r4, [sp, #264]	; 0x108
 8003458:	e9cd 5640 	strd	r5, r6, [sp, #256]	; 0x100
 800345c:	e9cd 893e 	strd	r8, r9, [sp, #248]	; 0xf8
 8003460:	e9cd ab3c 	strd	sl, fp, [sp, #240]	; 0xf0
 8003464:	ed97 7b00 	vldr	d7, [r7]
 8003468:	ed8d 7b3a 	vstr	d7, [sp, #232]	; 0xe8
 800346c:	ed97 7b02 	vldr	d7, [r7, #8]
 8003470:	ed8d 7b38 	vstr	d7, [sp, #224]	; 0xe0
 8003474:	ed97 7b04 	vldr	d7, [r7, #16]
 8003478:	ed8d 7b36 	vstr	d7, [sp, #216]	; 0xd8
 800347c:	ed97 7b06 	vldr	d7, [r7, #24]
 8003480:	ed8d 7b34 	vstr	d7, [sp, #208]	; 0xd0
 8003484:	ed97 7b08 	vldr	d7, [r7, #32]
 8003488:	ed8d 7b32 	vstr	d7, [sp, #200]	; 0xc8
 800348c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8003490:	ed8d 7b30 	vstr	d7, [sp, #192]	; 0xc0
 8003494:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8003498:	ed8d 7b2e 	vstr	d7, [sp, #184]	; 0xb8
 800349c:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80034a0:	ed8d 7b2c 	vstr	d7, [sp, #176]	; 0xb0
 80034a4:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 80034a8:	ed8d 7b2a 	vstr	d7, [sp, #168]	; 0xa8
 80034ac:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 80034b0:	ed8d 7b28 	vstr	d7, [sp, #160]	; 0xa0
 80034b4:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 80034b8:	ed8d 7b26 	vstr	d7, [sp, #152]	; 0x98
 80034bc:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 80034c0:	ed8d 7b24 	vstr	d7, [sp, #144]	; 0x90
 80034c4:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 80034c8:	ed8d 7b22 	vstr	d7, [sp, #136]	; 0x88
 80034cc:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 80034d0:	e02e      	b.n	8003530 <scheduler+0xa0c>
 80034d2:	bf00      	nop
 80034d4:	200003b6 	.word	0x200003b6
 80034d8:	2000038c 	.word	0x2000038c
 80034dc:	2000cf30 	.word	0x2000cf30
 80034e0:	200003b5 	.word	0x200003b5
 80034e4:	200003b7 	.word	0x200003b7
 80034e8:	200003b8 	.word	0x200003b8
 80034ec:	200003bc 	.word	0x200003bc
 80034f0:	2000cf80 	.word	0x2000cf80
 80034f4:	20004ae8 	.word	0x20004ae8
 80034f8:	200003a8 	.word	0x200003a8
 80034fc:	200003ac 	.word	0x200003ac
 8003500:	2000cf88 	.word	0x2000cf88
 8003504:	2000cf54 	.word	0x2000cf54
 8003508:	200003a0 	.word	0x200003a0
 800350c:	200003a4 	.word	0x200003a4
 8003510:	20008b14 	.word	0x20008b14
 8003514:	2000ab24 	.word	0x2000ab24
 8003518:	2000cf50 	.word	0x2000cf50
 800351c:	2000cf70 	.word	0x2000cf70
 8003520:	2000ab2c 	.word	0x2000ab2c
 8003524:	2000cf34 	.word	0x2000cf34
 8003528:	20008b10 	.word	0x20008b10
 800352c:	2000ab20 	.word	0x2000ab20
 8003530:	ed8d 7b20 	vstr	d7, [sp, #128]	; 0x80
 8003534:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8003538:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 800353c:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8003540:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8003544:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8003548:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 800354c:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8003550:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8003554:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 8003558:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 800355c:	ed97 7b26 	vldr	d7, [r7, #152]	; 0x98
 8003560:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8003564:	ed97 7b28 	vldr	d7, [r7, #160]	; 0xa0
 8003568:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 800356c:	ed97 7b2a 	vldr	d7, [r7, #168]	; 0xa8
 8003570:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8003574:	ed97 7b2c 	vldr	d7, [r7, #176]	; 0xb0
 8003578:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800357c:	ed97 7b2e 	vldr	d7, [r7, #184]	; 0xb8
 8003580:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8003584:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 8003588:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800358c:	ed97 7b32 	vldr	d7, [r7, #200]	; 0xc8
 8003590:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003594:	ed97 7b34 	vldr	d7, [r7, #208]	; 0xd0
 8003598:	ed8d 7b06 	vstr	d7, [sp, #24]
 800359c:	ed97 7b36 	vldr	d7, [r7, #216]	; 0xd8
 80035a0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80035a4:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 80035a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80035ac:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80035b0:	9101      	str	r1, [sp, #4]
 80035b2:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80035b6:	9100      	str	r1, [sp, #0]
 80035b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80035bc:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80035c0:	4906      	ldr	r1, [pc, #24]	; (80035dc <scheduler+0xab8>)
 80035c2:	4807      	ldr	r0, [pc, #28]	; (80035e0 <scheduler+0xabc>)
 80035c4:	f00d ff58 	bl	8011478 <siprintf>

		write_to_SD(FILE_NAME, buffer);
 80035c8:	4905      	ldr	r1, [pc, #20]	; (80035e0 <scheduler+0xabc>)
 80035ca:	4806      	ldr	r0, [pc, #24]	; (80035e4 <scheduler+0xac0>)
 80035cc:	f7fe f9a6 	bl	800191c <write_to_SD>
	if (DEBUG_PRINT == 1) printf("IMU2 az: %4.2f m/s2 \n", accel2_val[3]);
	if (DEBUG_PRINT == 1) printf("ACC ax: %4.2f m/s2 \n", accel[0]);
	if (DEBUG_PRINT == 1) printf("ACC ay: %4.2f m/s2 \n", accel[1]);
	if (DEBUG_PRINT == 1) printf("ACC az: %4.2f m/s2 \n", accel[2]);

}
 80035d0:	bf00      	nop
 80035d2:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80035d6:	46bd      	mov	sp, r7
 80035d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035dc:	080168c4 	.word	0x080168c4
 80035e0:	2000cb30 	.word	0x2000cb30
 80035e4:	2000dfc8 	.word	0x2000dfc8

080035e8 <getNextExecution>:

uint32_t getNextExecution(task_t * task){
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
	return task->last_call + task->interval;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	4413      	add	r3, r2
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
	...

08003608 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 800360c:	4b0c      	ldr	r3, [pc, #48]	; (8003640 <MX_SDIO_SD_Init+0x38>)
 800360e:	4a0d      	ldr	r2, [pc, #52]	; (8003644 <MX_SDIO_SD_Init+0x3c>)
 8003610:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8003612:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <MX_SDIO_SD_Init+0x38>)
 8003614:	2200      	movs	r2, #0
 8003616:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8003618:	4b09      	ldr	r3, [pc, #36]	; (8003640 <MX_SDIO_SD_Init+0x38>)
 800361a:	2200      	movs	r2, #0
 800361c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800361e:	4b08      	ldr	r3, [pc, #32]	; (8003640 <MX_SDIO_SD_Init+0x38>)
 8003620:	2200      	movs	r2, #0
 8003622:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8003624:	4b06      	ldr	r3, [pc, #24]	; (8003640 <MX_SDIO_SD_Init+0x38>)
 8003626:	2200      	movs	r2, #0
 8003628:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800362a:	4b05      	ldr	r3, [pc, #20]	; (8003640 <MX_SDIO_SD_Init+0x38>)
 800362c:	2200      	movs	r2, #0
 800362e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 3;
 8003630:	4b03      	ldr	r3, [pc, #12]	; (8003640 <MX_SDIO_SD_Init+0x38>)
 8003632:	2203      	movs	r2, #3
 8003634:	619a      	str	r2, [r3, #24]

}
 8003636:	bf00      	nop
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	2000e094 	.word	0x2000e094
 8003644:	40012c00 	.word	0x40012c00

08003648 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b08a      	sub	sp, #40	; 0x28
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003650:	f107 0314 	add.w	r3, r7, #20
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	605a      	str	r2, [r3, #4]
 800365a:	609a      	str	r2, [r3, #8]
 800365c:	60da      	str	r2, [r3, #12]
 800365e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a68      	ldr	r2, [pc, #416]	; (8003808 <HAL_SD_MspInit+0x1c0>)
 8003666:	4293      	cmp	r3, r2
 8003668:	f040 80c9 	bne.w	80037fe <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800366c:	2300      	movs	r3, #0
 800366e:	613b      	str	r3, [r7, #16]
 8003670:	4b66      	ldr	r3, [pc, #408]	; (800380c <HAL_SD_MspInit+0x1c4>)
 8003672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003674:	4a65      	ldr	r2, [pc, #404]	; (800380c <HAL_SD_MspInit+0x1c4>)
 8003676:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800367a:	6453      	str	r3, [r2, #68]	; 0x44
 800367c:	4b63      	ldr	r3, [pc, #396]	; (800380c <HAL_SD_MspInit+0x1c4>)
 800367e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003680:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003684:	613b      	str	r3, [r7, #16]
 8003686:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003688:	2300      	movs	r3, #0
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	4b5f      	ldr	r3, [pc, #380]	; (800380c <HAL_SD_MspInit+0x1c4>)
 800368e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003690:	4a5e      	ldr	r2, [pc, #376]	; (800380c <HAL_SD_MspInit+0x1c4>)
 8003692:	f043 0304 	orr.w	r3, r3, #4
 8003696:	6313      	str	r3, [r2, #48]	; 0x30
 8003698:	4b5c      	ldr	r3, [pc, #368]	; (800380c <HAL_SD_MspInit+0x1c4>)
 800369a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036a4:	2300      	movs	r3, #0
 80036a6:	60bb      	str	r3, [r7, #8]
 80036a8:	4b58      	ldr	r3, [pc, #352]	; (800380c <HAL_SD_MspInit+0x1c4>)
 80036aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ac:	4a57      	ldr	r2, [pc, #348]	; (800380c <HAL_SD_MspInit+0x1c4>)
 80036ae:	f043 0308 	orr.w	r3, r3, #8
 80036b2:	6313      	str	r3, [r2, #48]	; 0x30
 80036b4:	4b55      	ldr	r3, [pc, #340]	; (800380c <HAL_SD_MspInit+0x1c4>)
 80036b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b8:	f003 0308 	and.w	r3, r3, #8
 80036bc:	60bb      	str	r3, [r7, #8]
 80036be:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80036c0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80036c4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c6:	2302      	movs	r3, #2
 80036c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ca:	2300      	movs	r3, #0
 80036cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ce:	2303      	movs	r3, #3
 80036d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80036d2:	230c      	movs	r3, #12
 80036d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036d6:	f107 0314 	add.w	r3, r7, #20
 80036da:	4619      	mov	r1, r3
 80036dc:	484c      	ldr	r0, [pc, #304]	; (8003810 <HAL_SD_MspInit+0x1c8>)
 80036de:	f005 f9af 	bl	8008a40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80036e2:	2304      	movs	r3, #4
 80036e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e6:	2302      	movs	r3, #2
 80036e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ea:	2300      	movs	r3, #0
 80036ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ee:	2303      	movs	r3, #3
 80036f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80036f2:	230c      	movs	r3, #12
 80036f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036f6:	f107 0314 	add.w	r3, r7, #20
 80036fa:	4619      	mov	r1, r3
 80036fc:	4845      	ldr	r0, [pc, #276]	; (8003814 <HAL_SD_MspInit+0x1cc>)
 80036fe:	f005 f99f 	bl	8008a40 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8003702:	4b45      	ldr	r3, [pc, #276]	; (8003818 <HAL_SD_MspInit+0x1d0>)
 8003704:	4a45      	ldr	r2, [pc, #276]	; (800381c <HAL_SD_MspInit+0x1d4>)
 8003706:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8003708:	4b43      	ldr	r3, [pc, #268]	; (8003818 <HAL_SD_MspInit+0x1d0>)
 800370a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800370e:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003710:	4b41      	ldr	r3, [pc, #260]	; (8003818 <HAL_SD_MspInit+0x1d0>)
 8003712:	2200      	movs	r2, #0
 8003714:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003716:	4b40      	ldr	r3, [pc, #256]	; (8003818 <HAL_SD_MspInit+0x1d0>)
 8003718:	2200      	movs	r2, #0
 800371a:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800371c:	4b3e      	ldr	r3, [pc, #248]	; (8003818 <HAL_SD_MspInit+0x1d0>)
 800371e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003722:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003724:	4b3c      	ldr	r3, [pc, #240]	; (8003818 <HAL_SD_MspInit+0x1d0>)
 8003726:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800372a:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800372c:	4b3a      	ldr	r3, [pc, #232]	; (8003818 <HAL_SD_MspInit+0x1d0>)
 800372e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003732:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8003734:	4b38      	ldr	r3, [pc, #224]	; (8003818 <HAL_SD_MspInit+0x1d0>)
 8003736:	2220      	movs	r2, #32
 8003738:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800373a:	4b37      	ldr	r3, [pc, #220]	; (8003818 <HAL_SD_MspInit+0x1d0>)
 800373c:	2200      	movs	r2, #0
 800373e:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003740:	4b35      	ldr	r3, [pc, #212]	; (8003818 <HAL_SD_MspInit+0x1d0>)
 8003742:	2204      	movs	r2, #4
 8003744:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003746:	4b34      	ldr	r3, [pc, #208]	; (8003818 <HAL_SD_MspInit+0x1d0>)
 8003748:	2203      	movs	r2, #3
 800374a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800374c:	4b32      	ldr	r3, [pc, #200]	; (8003818 <HAL_SD_MspInit+0x1d0>)
 800374e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003752:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003754:	4b30      	ldr	r3, [pc, #192]	; (8003818 <HAL_SD_MspInit+0x1d0>)
 8003756:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800375a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800375c:	482e      	ldr	r0, [pc, #184]	; (8003818 <HAL_SD_MspInit+0x1d0>)
 800375e:	f004 fd63 	bl	8008228 <HAL_DMA_Init>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8003768:	f7fe fff2 	bl	8002750 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a2a      	ldr	r2, [pc, #168]	; (8003818 <HAL_SD_MspInit+0x1d0>)
 8003770:	641a      	str	r2, [r3, #64]	; 0x40
 8003772:	4a29      	ldr	r2, [pc, #164]	; (8003818 <HAL_SD_MspInit+0x1d0>)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8003778:	4b29      	ldr	r3, [pc, #164]	; (8003820 <HAL_SD_MspInit+0x1d8>)
 800377a:	4a2a      	ldr	r2, [pc, #168]	; (8003824 <HAL_SD_MspInit+0x1dc>)
 800377c:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800377e:	4b28      	ldr	r3, [pc, #160]	; (8003820 <HAL_SD_MspInit+0x1d8>)
 8003780:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003784:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003786:	4b26      	ldr	r3, [pc, #152]	; (8003820 <HAL_SD_MspInit+0x1d8>)
 8003788:	2240      	movs	r2, #64	; 0x40
 800378a:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800378c:	4b24      	ldr	r3, [pc, #144]	; (8003820 <HAL_SD_MspInit+0x1d8>)
 800378e:	2200      	movs	r2, #0
 8003790:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003792:	4b23      	ldr	r3, [pc, #140]	; (8003820 <HAL_SD_MspInit+0x1d8>)
 8003794:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003798:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800379a:	4b21      	ldr	r3, [pc, #132]	; (8003820 <HAL_SD_MspInit+0x1d8>)
 800379c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037a0:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80037a2:	4b1f      	ldr	r3, [pc, #124]	; (8003820 <HAL_SD_MspInit+0x1d8>)
 80037a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037a8:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80037aa:	4b1d      	ldr	r3, [pc, #116]	; (8003820 <HAL_SD_MspInit+0x1d8>)
 80037ac:	2220      	movs	r2, #32
 80037ae:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80037b0:	4b1b      	ldr	r3, [pc, #108]	; (8003820 <HAL_SD_MspInit+0x1d8>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80037b6:	4b1a      	ldr	r3, [pc, #104]	; (8003820 <HAL_SD_MspInit+0x1d8>)
 80037b8:	2204      	movs	r2, #4
 80037ba:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80037bc:	4b18      	ldr	r3, [pc, #96]	; (8003820 <HAL_SD_MspInit+0x1d8>)
 80037be:	2203      	movs	r2, #3
 80037c0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80037c2:	4b17      	ldr	r3, [pc, #92]	; (8003820 <HAL_SD_MspInit+0x1d8>)
 80037c4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80037c8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80037ca:	4b15      	ldr	r3, [pc, #84]	; (8003820 <HAL_SD_MspInit+0x1d8>)
 80037cc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80037d0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80037d2:	4813      	ldr	r0, [pc, #76]	; (8003820 <HAL_SD_MspInit+0x1d8>)
 80037d4:	f004 fd28 	bl	8008228 <HAL_DMA_Init>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 80037de:	f7fe ffb7 	bl	8002750 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a0e      	ldr	r2, [pc, #56]	; (8003820 <HAL_SD_MspInit+0x1d8>)
 80037e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80037e8:	4a0d      	ldr	r2, [pc, #52]	; (8003820 <HAL_SD_MspInit+0x1d8>)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80037ee:	2200      	movs	r2, #0
 80037f0:	2100      	movs	r1, #0
 80037f2:	2031      	movs	r0, #49	; 0x31
 80037f4:	f004 fce1 	bl	80081ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80037f8:	2031      	movs	r0, #49	; 0x31
 80037fa:	f004 fcfa 	bl	80081f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80037fe:	bf00      	nop
 8003800:	3728      	adds	r7, #40	; 0x28
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40012c00 	.word	0x40012c00
 800380c:	40023800 	.word	0x40023800
 8003810:	40020800 	.word	0x40020800
 8003814:	40020c00 	.word	0x40020c00
 8003818:	2000dfd4 	.word	0x2000dfd4
 800381c:	40026458 	.word	0x40026458
 8003820:	2000e034 	.word	0x2000e034
 8003824:	400264a0 	.word	0x400264a0

08003828 <p_sanity_check>:
#include "buzzer.h"
#include <stdio.h>
#include <math.h>
#include <stdlib.h>

uint8_t p_sanity_check(float * p){
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
	if ((*p < 110000) | (*p > 80000)) {
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	edd3 7a00 	vldr	s15, [r3]
 8003836:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8003880 <p_sanity_check+0x58>
 800383a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800383e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003842:	bf4c      	ite	mi
 8003844:	2301      	movmi	r3, #1
 8003846:	2300      	movpl	r3, #0
 8003848:	b2da      	uxtb	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	edd3 7a00 	vldr	s15, [r3]
 8003850:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003884 <p_sanity_check+0x5c>
 8003854:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800385c:	bfcc      	ite	gt
 800385e:	2301      	movgt	r3, #1
 8003860:	2300      	movle	r3, #0
 8003862:	b2db      	uxtb	r3, r3
 8003864:	4313      	orrs	r3, r2
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <p_sanity_check+0x48>
		return 1;
 800386c:	2301      	movs	r3, #1
 800386e:	e000      	b.n	8003872 <p_sanity_check+0x4a>
	} else {
		return 0;
 8003870:	2300      	movs	r3, #0
	}
}
 8003872:	4618      	mov	r0, r3
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	47d6d800 	.word	0x47d6d800
 8003884:	479c4000 	.word	0x479c4000

08003888 <p_descent_sanity_check>:

uint8_t p_descent_sanity_check(float * p){
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
	if ((*p < 110000) | (*p > 20000)) {
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	edd3 7a00 	vldr	s15, [r3]
 8003896:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80038e0 <p_descent_sanity_check+0x58>
 800389a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800389e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038a2:	bf4c      	ite	mi
 80038a4:	2301      	movmi	r3, #1
 80038a6:	2300      	movpl	r3, #0
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	edd3 7a00 	vldr	s15, [r3]
 80038b0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80038e4 <p_descent_sanity_check+0x5c>
 80038b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038bc:	bfcc      	ite	gt
 80038be:	2301      	movgt	r3, #1
 80038c0:	2300      	movle	r3, #0
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	4313      	orrs	r3, r2
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <p_descent_sanity_check+0x48>
		return 1;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e000      	b.n	80038d2 <p_descent_sanity_check+0x4a>
	} else {
		return 0;
 80038d0:	2300      	movs	r3, #0
	}
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	370c      	adds	r7, #12
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	47d6d800 	.word	0x47d6d800
 80038e4:	469c4000 	.word	0x469c4000

080038e8 <t_sanity_check>:

uint8_t t_sanity_check(float * t){
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
	if ((*t < 80) | (*t > 1)) {
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	edd3 7a00 	vldr	s15, [r3]
 80038f6:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8003940 <t_sanity_check+0x58>
 80038fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003902:	bf4c      	ite	mi
 8003904:	2301      	movmi	r3, #1
 8003906:	2300      	movpl	r3, #0
 8003908:	b2da      	uxtb	r2, r3
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	edd3 7a00 	vldr	s15, [r3]
 8003910:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003914:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800391c:	bfcc      	ite	gt
 800391e:	2301      	movgt	r3, #1
 8003920:	2300      	movle	r3, #0
 8003922:	b2db      	uxtb	r3, r3
 8003924:	4313      	orrs	r3, r2
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <t_sanity_check+0x48>
		return 1;
 800392c:	2301      	movs	r3, #1
 800392e:	e000      	b.n	8003932 <t_sanity_check+0x4a>
	} else {
		return 0;
 8003930:	2300      	movs	r3, #0
	}
}
 8003932:	4618      	mov	r0, r3
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	42a00000 	.word	0x42a00000

08003944 <a_sanity_check>:

uint8_t a_sanity_check(float * a){
 8003944:	b480      	push	{r7}
 8003946:	b083      	sub	sp, #12
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
	if ((*a < 10) | (*a > 8)) {
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	edd3 7a00 	vldr	s15, [r3]
 8003952:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003956:	eef4 7ac7 	vcmpe.f32	s15, s14
 800395a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800395e:	bf4c      	ite	mi
 8003960:	2301      	movmi	r3, #1
 8003962:	2300      	movpl	r3, #0
 8003964:	b2da      	uxtb	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	edd3 7a00 	vldr	s15, [r3]
 800396c:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8003970:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003978:	bfcc      	ite	gt
 800397a:	2301      	movgt	r3, #1
 800397c:	2300      	movle	r3, #0
 800397e:	b2db      	uxtb	r3, r3
 8003980:	4313      	orrs	r3, r2
 8003982:	b2db      	uxtb	r3, r3
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <a_sanity_check+0x48>
		return 1;
 8003988:	2301      	movs	r3, #1
 800398a:	e000      	b.n	800398e <a_sanity_check+0x4a>
	} else {
		return 0;
 800398c:	2300      	movs	r3, #0
	}
}
 800398e:	4618      	mov	r0, r3
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
	...

0800399c <state_est_sanity_check>:

uint8_t state_est_sanity_check(float * h, float * a, float * v){
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
	if (a_sanity_check(a) == 0){
 80039a8:	68b8      	ldr	r0, [r7, #8]
 80039aa:	f7ff ffcb 	bl	8003944 <a_sanity_check>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d101      	bne.n	80039b8 <state_est_sanity_check+0x1c>
		if (DEBUG_PRINT == 1) printf("state est accel out of bounds. a = %4.2f \n",*a);
		return 0;
 80039b4:	2300      	movs	r3, #0
 80039b6:	e040      	b.n	8003a3a <state_est_sanity_check+0x9e>
	}

	if ((*h > 50) | (*h < -50)) {
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	edd3 7a00 	vldr	s15, [r3]
 80039be:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003a44 <state_est_sanity_check+0xa8>
 80039c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ca:	bfcc      	ite	gt
 80039cc:	2301      	movgt	r3, #1
 80039ce:	2300      	movle	r3, #0
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	edd3 7a00 	vldr	s15, [r3]
 80039d8:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8003a48 <state_est_sanity_check+0xac>
 80039dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039e4:	bf4c      	ite	mi
 80039e6:	2301      	movmi	r3, #1
 80039e8:	2300      	movpl	r3, #0
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	4313      	orrs	r3, r2
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d001      	beq.n	80039f8 <state_est_sanity_check+0x5c>
		if (DEBUG_PRINT == 1) printf("state est altitude out of bounds. h = %4.2f \n",*h);
		return 0;
 80039f4:	2300      	movs	r3, #0
 80039f6:	e020      	b.n	8003a3a <state_est_sanity_check+0x9e>
	}

	if ((*v > 10) | (*v < -10)) {
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	edd3 7a00 	vldr	s15, [r3]
 80039fe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003a02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a0a:	bfcc      	ite	gt
 8003a0c:	2301      	movgt	r3, #1
 8003a0e:	2300      	movle	r3, #0
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	edd3 7a00 	vldr	s15, [r3]
 8003a18:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8003a1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a24:	bf4c      	ite	mi
 8003a26:	2301      	movmi	r3, #1
 8003a28:	2300      	movpl	r3, #0
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <state_est_sanity_check+0x9c>
		if (DEBUG_PRINT == 1) printf("state est velocity out of bounds. v = %4.2f \n",*v);
		return 0;
 8003a34:	2300      	movs	r3, #0
 8003a36:	e000      	b.n	8003a3a <state_est_sanity_check+0x9e>
	}

	return 1;
 8003a38:	2301      	movs	r3, #1
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	42480000 	.word	0x42480000
 8003a48:	c2480000 	.word	0xc2480000

08003a4c <config_baro>:

uint8_t config_baro(struct sht31_dev * t_dev, struct ms5607_dev * p1_dev, struct ms5607_dev * p2_dev, float * t, float * p){
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b092      	sub	sp, #72	; 0x48
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]
 8003a58:	603b      	str	r3, [r7, #0]

	float t1_sum = 0;
 8003a5a:	f04f 0300 	mov.w	r3, #0
 8003a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
	float p1_sum = 0;
 8003a60:	f04f 0300 	mov.w	r3, #0
 8003a64:	63bb      	str	r3, [r7, #56]	; 0x38
	float t2_sum = 0;
 8003a66:	f04f 0300 	mov.w	r3, #0
 8003a6a:	637b      	str	r3, [r7, #52]	; 0x34
	float p2_sum = 0;
 8003a6c:	f04f 0300 	mov.w	r3, #0
 8003a70:	633b      	str	r3, [r7, #48]	; 0x30
	float p1;
	float p2;
	float t1;
	float t2;
	// sample pressure/temperture 100 times
	for (int i = 0; i < MAX_SETUP_SAMPLE + 10; i++)
 8003a72:	2300      	movs	r3, #0
 8003a74:	647b      	str	r3, [r7, #68]	; 0x44
 8003a76:	e053      	b.n	8003b20 <config_baro+0xd4>
	{
		ms5607_prep_pressure(p1_dev, pbuf);
 8003a78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	68b8      	ldr	r0, [r7, #8]
 8003a80:	f001 fa22 	bl	8004ec8 <ms5607_prep_pressure>
		ms5607_prep_pressure(p2_dev, pbuf);
 8003a84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a88:	4619      	mov	r1, r3
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f001 fa1c 	bl	8004ec8 <ms5607_prep_pressure>
		HAL_Delay(5);
 8003a90:	2005      	movs	r0, #5
 8003a92:	f003 fe57 	bl	8007744 <HAL_Delay>
		ms5607_read_pressure(p1_dev, pbuf);
 8003a96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	68b8      	ldr	r0, [r7, #8]
 8003a9e:	f001 fa5c 	bl	8004f5a <ms5607_read_pressure>
		ms5607_read_pressure(p2_dev, pbuf);
 8003aa2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f001 fa56 	bl	8004f5a <ms5607_read_pressure>
		ms5607_convert(p1_dev, &p1, &t1);
 8003aae:	f107 0214 	add.w	r2, r7, #20
 8003ab2:	f107 031c 	add.w	r3, r7, #28
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	68b8      	ldr	r0, [r7, #8]
 8003aba:	f001 fa99 	bl	8004ff0 <ms5607_convert>
		ms5607_convert(p2_dev, &p2, &t2);
 8003abe:	f107 0210 	add.w	r2, r7, #16
 8003ac2:	f107 0318 	add.w	r3, r7, #24
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f001 fa91 	bl	8004ff0 <ms5607_convert>
		if (i > 10) {
 8003ace:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ad0:	2b0a      	cmp	r3, #10
 8003ad2:	dd1f      	ble.n	8003b14 <config_baro+0xc8>
			// ignore the first 10 values to let the barometer "warm" up
			t1_sum += t1;
 8003ad4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003ad8:	edd7 7a05 	vldr	s15, [r7, #20]
 8003adc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ae0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			p1_sum += p1;
 8003ae4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003ae8:	edd7 7a07 	vldr	s15, [r7, #28]
 8003aec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003af0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			t2_sum += t2;
 8003af4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003af8:	edd7 7a04 	vldr	s15, [r7, #16]
 8003afc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b00:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			p2_sum += p2;
 8003b04:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003b08:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b10:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		}
		HAL_Delay(MAX_SETUP_SAMPLE_INTERVAL + 5);
 8003b14:	200f      	movs	r0, #15
 8003b16:	f003 fe15 	bl	8007744 <HAL_Delay>
	for (int i = 0; i < MAX_SETUP_SAMPLE + 10; i++)
 8003b1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	647b      	str	r3, [r7, #68]	; 0x44
 8003b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b22:	2b6d      	cmp	r3, #109	; 0x6d
 8003b24:	dda8      	ble.n	8003a78 <config_baro+0x2c>
	}
	p1_sum /= MAX_SETUP_SAMPLE;
 8003b26:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003b2a:	eddf 6a4b 	vldr	s13, [pc, #300]	; 8003c58 <config_baro+0x20c>
 8003b2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b32:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	t1_sum /= MAX_SETUP_SAMPLE;
 8003b36:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003b3a:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003c58 <config_baro+0x20c>
 8003b3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b42:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	p2_sum /= MAX_SETUP_SAMPLE;
 8003b46:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003b4a:	eddf 6a43 	vldr	s13, [pc, #268]	; 8003c58 <config_baro+0x20c>
 8003b4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b52:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	t1_sum /= MAX_SETUP_SAMPLE;
 8003b56:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003b5a:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8003c58 <config_baro+0x20c>
 8003b5e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003b62:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	if (!t_sanity_check(&t1_sum)){
 8003b66:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7ff febc 	bl	80038e8 <t_sanity_check>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <config_baro+0x12e>
		if (DEBUG_PRINT == 1) printf("Temperature of BARO 1 out of bounds. abort. \n");
		return 0;
 8003b76:	2300      	movs	r3, #0
 8003b78:	e06a      	b.n	8003c50 <config_baro+0x204>
	}
	if (!t_sanity_check(&t2_sum)){
 8003b7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7ff feb2 	bl	80038e8 <t_sanity_check>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <config_baro+0x142>
		if (DEBUG_PRINT == 1) printf("Temperature of BARO 2 out of bounds. abort. \n");
		return 0;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	e060      	b.n	8003c50 <config_baro+0x204>
	}
	if (!p_sanity_check(&p1_sum)){
 8003b8e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7ff fe48 	bl	8003828 <p_sanity_check>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <config_baro+0x156>
		if (DEBUG_PRINT == 1) printf("Pressure of BARO 1 out of bounds. abort. \n");
		return 0;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	e056      	b.n	8003c50 <config_baro+0x204>
	}
	if (!p_sanity_check(&p2_sum)){
 8003ba2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7ff fe3e 	bl	8003828 <p_sanity_check>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <config_baro+0x16a>
		if (DEBUG_PRINT == 1) printf("Pressure of BARO 2 out of bounds. abort. \n");
		return 0;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	e04c      	b.n	8003c50 <config_baro+0x204>
	}

	// set as environement parameters
	*t = (t1_sum + t2_sum) / 2;
 8003bb6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003bba:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003bbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bc2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003bc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	edc3 7a00 	vstr	s15, [r3]
	*p = (p1_sum + p2_sum) / 2;
 8003bd0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003bd4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003bd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bdc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003be0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003be6:	edc3 7a00 	vstr	s15, [r3]


	// sample SHT temperature 100 times

	for (int i = 0; i < MAX_SETUP_SAMPLE + 10; i++)
 8003bea:	2300      	movs	r3, #0
 8003bec:	643b      	str	r3, [r7, #64]	; 0x40
 8003bee:	e018      	b.n	8003c22 <config_baro+0x1d6>
	{
		sht31_read(t_dev, sht_val, buf);
 8003bf0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003bf4:	f107 0320 	add.w	r3, r7, #32
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f001 fcb4 	bl	8005568 <sht31_read>
		// ignore the first 10 measurements to let the SHT "warm" up
		if (i > 10) t1_sum += sht_val[1];
 8003c00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c02:	2b0a      	cmp	r3, #10
 8003c04:	dd07      	ble.n	8003c16 <config_baro+0x1ca>
 8003c06:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003c0a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003c0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c12:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		HAL_Delay(MAX_SETUP_SAMPLE_INTERVAL);
 8003c16:	200a      	movs	r0, #10
 8003c18:	f003 fd94 	bl	8007744 <HAL_Delay>
	for (int i = 0; i < MAX_SETUP_SAMPLE + 10; i++)
 8003c1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c1e:	3301      	adds	r3, #1
 8003c20:	643b      	str	r3, [r7, #64]	; 0x40
 8003c22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c24:	2b6d      	cmp	r3, #109	; 0x6d
 8003c26:	dde3      	ble.n	8003bf0 <config_baro+0x1a4>
	}
	t1_sum /= MAX_SETUP_SAMPLE;
 8003c28:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003c2c:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8003c58 <config_baro+0x20c>
 8003c30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003c34:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

	if (!t_sanity_check(&t1_sum)){
 8003c38:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7ff fe53 	bl	80038e8 <t_sanity_check>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d002      	beq.n	8003c4e <config_baro+0x202>
		if (DEBUG_PRINT == 1) printf("Temperature of SHT out of bounds. continuing anyway. \n");
		// if SHT unavailable, take BARO temperature
	} else {
		// if SHT is available, use SHT temperature value for environement
		*t = t1_sum;
 8003c48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	601a      	str	r2, [r3, #0]
	}

	return 1;
 8003c4e:	2301      	movs	r3, #1
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3748      	adds	r7, #72	; 0x48
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	42c80000 	.word	0x42c80000

08003c5c <config_imu>:

uint8_t config_imu(struct icm20601_dev * a1_dev, struct icm20601_dev * a2_dev){
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b09a      	sub	sp, #104	; 0x68
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
	float a2_temp[7];

	float a1_sum[3];
	float a2_sum[3];

	for (int i = 0; i < MAX_SETUP_SAMPLE + 10; i++)
 8003c66:	2300      	movs	r3, #0
 8003c68:	663b      	str	r3, [r7, #96]	; 0x60
 8003c6a:	e067      	b.n	8003d3c <config_imu+0xe0>
	{
		icm20601_read_data(a1_dev, a1_temp);
 8003c6c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003c70:	4619      	mov	r1, r3
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 ff74 	bl	8004b60 <icm20601_read_data>
		icm20601_read_data(a2_dev, a2_temp);
 8003c78:	f107 0320 	add.w	r3, r7, #32
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	6838      	ldr	r0, [r7, #0]
 8003c80:	f000 ff6e 	bl	8004b60 <icm20601_read_data>
		if (i > 10) {
 8003c84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c86:	2b0a      	cmp	r3, #10
 8003c88:	dd52      	ble.n	8003d30 <config_imu+0xd4>
			// ignore the first 10 measurements to let the accelerometer "warm" up
			for (int j = 1; j < 4; j++){
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	667b      	str	r3, [r7, #100]	; 0x64
 8003c8e:	e04c      	b.n	8003d2a <config_imu+0xce>
				a1_sum[j] += abs(a1_temp[j]);
 8003c90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003c98:	4413      	add	r3, r2
 8003c9a:	3b54      	subs	r3, #84	; 0x54
 8003c9c:	ed93 7a00 	vldr	s14, [r3]
 8003ca0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003ca8:	4413      	add	r3, r2
 8003caa:	3b2c      	subs	r3, #44	; 0x2c
 8003cac:	edd3 7a00 	vldr	s15, [r3]
 8003cb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003cb4:	ee17 3a90 	vmov	r3, s15
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	bfb8      	it	lt
 8003cbc:	425b      	neglt	r3, r3
 8003cbe:	ee07 3a90 	vmov	s15, r3
 8003cc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003cd2:	4413      	add	r3, r2
 8003cd4:	3b54      	subs	r3, #84	; 0x54
 8003cd6:	edc3 7a00 	vstr	s15, [r3]
				a2_sum[j] += abs(a2_temp[j]);
 8003cda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003ce2:	4413      	add	r3, r2
 8003ce4:	3b60      	subs	r3, #96	; 0x60
 8003ce6:	ed93 7a00 	vldr	s14, [r3]
 8003cea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003cf2:	4413      	add	r3, r2
 8003cf4:	3b48      	subs	r3, #72	; 0x48
 8003cf6:	edd3 7a00 	vldr	s15, [r3]
 8003cfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003cfe:	ee17 3a90 	vmov	r3, s15
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	bfb8      	it	lt
 8003d06:	425b      	neglt	r3, r3
 8003d08:	ee07 3a90 	vmov	s15, r3
 8003d0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003d1c:	4413      	add	r3, r2
 8003d1e:	3b60      	subs	r3, #96	; 0x60
 8003d20:	edc3 7a00 	vstr	s15, [r3]
			for (int j = 1; j < 4; j++){
 8003d24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d26:	3301      	adds	r3, #1
 8003d28:	667b      	str	r3, [r7, #100]	; 0x64
 8003d2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d2c:	2b03      	cmp	r3, #3
 8003d2e:	ddaf      	ble.n	8003c90 <config_imu+0x34>
			}
		}
		HAL_Delay(MAX_SETUP_SAMPLE_INTERVAL);
 8003d30:	200a      	movs	r0, #10
 8003d32:	f003 fd07 	bl	8007744 <HAL_Delay>
	for (int i = 0; i < MAX_SETUP_SAMPLE + 10; i++)
 8003d36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d38:	3301      	adds	r3, #1
 8003d3a:	663b      	str	r3, [r7, #96]	; 0x60
 8003d3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d3e:	2b6d      	cmp	r3, #109	; 0x6d
 8003d40:	dd94      	ble.n	8003c6c <config_imu+0x10>
	}

	// assume rocket is in upright position, config axes accordingly

	uint8_t imu1_state = 0;
 8003d42:	2300      	movs	r3, #0
 8003d44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t imu2_state = 0;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	for (int j = 0; j < 3; j++){
 8003d4e:	2300      	movs	r3, #0
 8003d50:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d52:	e04a      	b.n	8003dea <config_imu+0x18e>
		a1_sum[j] /= MAX_SETUP_SAMPLE;
 8003d54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003d5c:	4413      	add	r3, r2
 8003d5e:	3b54      	subs	r3, #84	; 0x54
 8003d60:	ed93 7a00 	vldr	s14, [r3]
 8003d64:	eddf 6a29 	vldr	s13, [pc, #164]	; 8003e0c <config_imu+0x1b0>
 8003d68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003d74:	4413      	add	r3, r2
 8003d76:	3b54      	subs	r3, #84	; 0x54
 8003d78:	edc3 7a00 	vstr	s15, [r3]
		a2_sum[j] /= MAX_SETUP_SAMPLE;
 8003d7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003d84:	4413      	add	r3, r2
 8003d86:	3b60      	subs	r3, #96	; 0x60
 8003d88:	ed93 7a00 	vldr	s14, [r3]
 8003d8c:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8003e0c <config_imu+0x1b0>
 8003d90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003d9c:	4413      	add	r3, r2
 8003d9e:	3b60      	subs	r3, #96	; 0x60
 8003da0:	edc3 7a00 	vstr	s15, [r3]
		if (a_sanity_check(&a1_sum[j]) == 1){
 8003da4:	f107 0214 	add.w	r2, r7, #20
 8003da8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff fdc8 	bl	8003944 <a_sanity_check>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d104      	bne.n	8003dc4 <config_imu+0x168>
			imu1_state ++;
 8003dba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}
		if (a_sanity_check(&a2_sum[j]) == 1){
 8003dc4:	f107 0208 	add.w	r2, r7, #8
 8003dc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	4413      	add	r3, r2
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7ff fdb8 	bl	8003944 <a_sanity_check>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d104      	bne.n	8003de4 <config_imu+0x188>
			imu2_state ++;
 8003dda:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8003dde:	3301      	adds	r3, #1
 8003de0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	for (int j = 0; j < 3; j++){
 8003de4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003de6:	3301      	adds	r3, #1
 8003de8:	65bb      	str	r3, [r7, #88]	; 0x58
 8003dea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	ddb1      	ble.n	8003d54 <config_imu+0xf8>
		}
	}

	if (imu1_state + imu2_state != 2){
 8003df0:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8003df4:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8003df8:	4413      	add	r3, r2
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d001      	beq.n	8003e02 <config_imu+0x1a6>
		if (DEBUG_PRINT == 1) printf("IMU axes out of bounds. abort. \n");
		if (DEBUG_PRINT == 1) printf("IMU1: %d \n", imu1_state);
		if (DEBUG_PRINT == 1) printf("IMU2: %d \n", imu2_state);
		return 0;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	e000      	b.n	8003e04 <config_imu+0x1a8>
	}
	return 1;
 8003e02:	2301      	movs	r3, #1
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3768      	adds	r7, #104	; 0x68
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	42c80000 	.word	0x42c80000

08003e10 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8003e14:	4b17      	ldr	r3, [pc, #92]	; (8003e74 <MX_SPI1_Init+0x64>)
 8003e16:	4a18      	ldr	r2, [pc, #96]	; (8003e78 <MX_SPI1_Init+0x68>)
 8003e18:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003e1a:	4b16      	ldr	r3, [pc, #88]	; (8003e74 <MX_SPI1_Init+0x64>)
 8003e1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003e20:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003e22:	4b14      	ldr	r3, [pc, #80]	; (8003e74 <MX_SPI1_Init+0x64>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003e28:	4b12      	ldr	r3, [pc, #72]	; (8003e74 <MX_SPI1_Init+0x64>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e2e:	4b11      	ldr	r3, [pc, #68]	; (8003e74 <MX_SPI1_Init+0x64>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003e34:	4b0f      	ldr	r3, [pc, #60]	; (8003e74 <MX_SPI1_Init+0x64>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003e3a:	4b0e      	ldr	r3, [pc, #56]	; (8003e74 <MX_SPI1_Init+0x64>)
 8003e3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e40:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e42:	4b0c      	ldr	r3, [pc, #48]	; (8003e74 <MX_SPI1_Init+0x64>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003e48:	4b0a      	ldr	r3, [pc, #40]	; (8003e74 <MX_SPI1_Init+0x64>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003e4e:	4b09      	ldr	r3, [pc, #36]	; (8003e74 <MX_SPI1_Init+0x64>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e54:	4b07      	ldr	r3, [pc, #28]	; (8003e74 <MX_SPI1_Init+0x64>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003e5a:	4b06      	ldr	r3, [pc, #24]	; (8003e74 <MX_SPI1_Init+0x64>)
 8003e5c:	220a      	movs	r2, #10
 8003e5e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003e60:	4804      	ldr	r0, [pc, #16]	; (8003e74 <MX_SPI1_Init+0x64>)
 8003e62:	f007 ffbd 	bl	800bde0 <HAL_SPI_Init>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003e6c:	f7fe fc70 	bl	8002750 <Error_Handler>
  }

}
 8003e70:	bf00      	nop
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	2000e170 	.word	0x2000e170
 8003e78:	40013000 	.word	0x40013000

08003e7c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8003e80:	4b17      	ldr	r3, [pc, #92]	; (8003ee0 <MX_SPI2_Init+0x64>)
 8003e82:	4a18      	ldr	r2, [pc, #96]	; (8003ee4 <MX_SPI2_Init+0x68>)
 8003e84:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003e86:	4b16      	ldr	r3, [pc, #88]	; (8003ee0 <MX_SPI2_Init+0x64>)
 8003e88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003e8c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003e8e:	4b14      	ldr	r3, [pc, #80]	; (8003ee0 <MX_SPI2_Init+0x64>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003e94:	4b12      	ldr	r3, [pc, #72]	; (8003ee0 <MX_SPI2_Init+0x64>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e9a:	4b11      	ldr	r3, [pc, #68]	; (8003ee0 <MX_SPI2_Init+0x64>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ea0:	4b0f      	ldr	r3, [pc, #60]	; (8003ee0 <MX_SPI2_Init+0x64>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003ea6:	4b0e      	ldr	r3, [pc, #56]	; (8003ee0 <MX_SPI2_Init+0x64>)
 8003ea8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003eae:	4b0c      	ldr	r3, [pc, #48]	; (8003ee0 <MX_SPI2_Init+0x64>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003eb4:	4b0a      	ldr	r3, [pc, #40]	; (8003ee0 <MX_SPI2_Init+0x64>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003eba:	4b09      	ldr	r3, [pc, #36]	; (8003ee0 <MX_SPI2_Init+0x64>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ec0:	4b07      	ldr	r3, [pc, #28]	; (8003ee0 <MX_SPI2_Init+0x64>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003ec6:	4b06      	ldr	r3, [pc, #24]	; (8003ee0 <MX_SPI2_Init+0x64>)
 8003ec8:	220a      	movs	r2, #10
 8003eca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003ecc:	4804      	ldr	r0, [pc, #16]	; (8003ee0 <MX_SPI2_Init+0x64>)
 8003ece:	f007 ff87 	bl	800bde0 <HAL_SPI_Init>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d001      	beq.n	8003edc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003ed8:	f7fe fc3a 	bl	8002750 <Error_Handler>
  }

}
 8003edc:	bf00      	nop
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	2000e118 	.word	0x2000e118
 8003ee4:	40003800 	.word	0x40003800

08003ee8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b08c      	sub	sp, #48	; 0x30
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ef0:	f107 031c 	add.w	r3, r7, #28
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	601a      	str	r2, [r3, #0]
 8003ef8:	605a      	str	r2, [r3, #4]
 8003efa:	609a      	str	r2, [r3, #8]
 8003efc:	60da      	str	r2, [r3, #12]
 8003efe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a32      	ldr	r2, [pc, #200]	; (8003fd0 <HAL_SPI_MspInit+0xe8>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d12c      	bne.n	8003f64 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61bb      	str	r3, [r7, #24]
 8003f0e:	4b31      	ldr	r3, [pc, #196]	; (8003fd4 <HAL_SPI_MspInit+0xec>)
 8003f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f12:	4a30      	ldr	r2, [pc, #192]	; (8003fd4 <HAL_SPI_MspInit+0xec>)
 8003f14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f18:	6453      	str	r3, [r2, #68]	; 0x44
 8003f1a:	4b2e      	ldr	r3, [pc, #184]	; (8003fd4 <HAL_SPI_MspInit+0xec>)
 8003f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f22:	61bb      	str	r3, [r7, #24]
 8003f24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f26:	2300      	movs	r3, #0
 8003f28:	617b      	str	r3, [r7, #20]
 8003f2a:	4b2a      	ldr	r3, [pc, #168]	; (8003fd4 <HAL_SPI_MspInit+0xec>)
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2e:	4a29      	ldr	r2, [pc, #164]	; (8003fd4 <HAL_SPI_MspInit+0xec>)
 8003f30:	f043 0301 	orr.w	r3, r3, #1
 8003f34:	6313      	str	r3, [r2, #48]	; 0x30
 8003f36:	4b27      	ldr	r3, [pc, #156]	; (8003fd4 <HAL_SPI_MspInit+0xec>)
 8003f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003f42:	23e0      	movs	r3, #224	; 0xe0
 8003f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f46:	2302      	movs	r3, #2
 8003f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003f52:	2305      	movs	r3, #5
 8003f54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f56:	f107 031c 	add.w	r3, r7, #28
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	481e      	ldr	r0, [pc, #120]	; (8003fd8 <HAL_SPI_MspInit+0xf0>)
 8003f5e:	f004 fd6f 	bl	8008a40 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003f62:	e031      	b.n	8003fc8 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a1c      	ldr	r2, [pc, #112]	; (8003fdc <HAL_SPI_MspInit+0xf4>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d12c      	bne.n	8003fc8 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003f6e:	2300      	movs	r3, #0
 8003f70:	613b      	str	r3, [r7, #16]
 8003f72:	4b18      	ldr	r3, [pc, #96]	; (8003fd4 <HAL_SPI_MspInit+0xec>)
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	4a17      	ldr	r2, [pc, #92]	; (8003fd4 <HAL_SPI_MspInit+0xec>)
 8003f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f7e:	4b15      	ldr	r3, [pc, #84]	; (8003fd4 <HAL_SPI_MspInit+0xec>)
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f86:	613b      	str	r3, [r7, #16]
 8003f88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60fb      	str	r3, [r7, #12]
 8003f8e:	4b11      	ldr	r3, [pc, #68]	; (8003fd4 <HAL_SPI_MspInit+0xec>)
 8003f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f92:	4a10      	ldr	r2, [pc, #64]	; (8003fd4 <HAL_SPI_MspInit+0xec>)
 8003f94:	f043 0302 	orr.w	r3, r3, #2
 8003f98:	6313      	str	r3, [r2, #48]	; 0x30
 8003f9a:	4b0e      	ldr	r3, [pc, #56]	; (8003fd4 <HAL_SPI_MspInit+0xec>)
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003fa6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003faa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fac:	2302      	movs	r3, #2
 8003fae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003fb8:	2305      	movs	r3, #5
 8003fba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fbc:	f107 031c 	add.w	r3, r7, #28
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	4807      	ldr	r0, [pc, #28]	; (8003fe0 <HAL_SPI_MspInit+0xf8>)
 8003fc4:	f004 fd3c 	bl	8008a40 <HAL_GPIO_Init>
}
 8003fc8:	bf00      	nop
 8003fca:	3730      	adds	r7, #48	; 0x30
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	40013000 	.word	0x40013000
 8003fd4:	40023800 	.word	0x40023800
 8003fd8:	40020000 	.word	0x40020000
 8003fdc:	40003800 	.word	0x40003800
 8003fe0:	40020400 	.word	0x40020400

08003fe4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fea:	2300      	movs	r3, #0
 8003fec:	607b      	str	r3, [r7, #4]
 8003fee:	4b10      	ldr	r3, [pc, #64]	; (8004030 <HAL_MspInit+0x4c>)
 8003ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff2:	4a0f      	ldr	r2, [pc, #60]	; (8004030 <HAL_MspInit+0x4c>)
 8003ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8003ffa:	4b0d      	ldr	r3, [pc, #52]	; (8004030 <HAL_MspInit+0x4c>)
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004002:	607b      	str	r3, [r7, #4]
 8004004:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004006:	2300      	movs	r3, #0
 8004008:	603b      	str	r3, [r7, #0]
 800400a:	4b09      	ldr	r3, [pc, #36]	; (8004030 <HAL_MspInit+0x4c>)
 800400c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400e:	4a08      	ldr	r2, [pc, #32]	; (8004030 <HAL_MspInit+0x4c>)
 8004010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004014:	6413      	str	r3, [r2, #64]	; 0x40
 8004016:	4b06      	ldr	r3, [pc, #24]	; (8004030 <HAL_MspInit+0x4c>)
 8004018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800401e:	603b      	str	r3, [r7, #0]
 8004020:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004022:	bf00      	nop
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	40023800 	.word	0x40023800

08004034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004034:	b480      	push	{r7}
 8004036:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004038:	bf00      	nop
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004042:	b480      	push	{r7}
 8004044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004046:	e7fe      	b.n	8004046 <HardFault_Handler+0x4>

08004048 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800404c:	e7fe      	b.n	800404c <MemManage_Handler+0x4>

0800404e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800404e:	b480      	push	{r7}
 8004050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004052:	e7fe      	b.n	8004052 <BusFault_Handler+0x4>

08004054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004058:	e7fe      	b.n	8004058 <UsageFault_Handler+0x4>

0800405a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800405a:	b480      	push	{r7}
 800405c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800405e:	bf00      	nop
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004068:	b480      	push	{r7}
 800406a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800406c:	bf00      	nop
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004076:	b480      	push	{r7}
 8004078:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800407a:	bf00      	nop
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004088:	f003 fb3c 	bl	8007704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800408c:	bf00      	nop
 800408e:	bd80      	pop	{r7, pc}

08004090 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8004094:	4802      	ldr	r0, [pc, #8]	; (80040a0 <SDIO_IRQHandler+0x10>)
 8004096:	f006 fe0f 	bl	800acb8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800409a:	bf00      	nop
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	2000e094 	.word	0x2000e094

080040a4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80040a8:	4802      	ldr	r0, [pc, #8]	; (80040b4 <DMA2_Stream0_IRQHandler+0x10>)
 80040aa:	f004 fa55 	bl	8008558 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80040ae:	bf00      	nop
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	200049e0 	.word	0x200049e0

080040b8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80040bc:	4802      	ldr	r0, [pc, #8]	; (80040c8 <DMA2_Stream3_IRQHandler+0x10>)
 80040be:	f004 fa4b 	bl	8008558 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80040c2:	bf00      	nop
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	2000dfd4 	.word	0x2000dfd4

080040cc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80040d0:	4802      	ldr	r0, [pc, #8]	; (80040dc <DMA2_Stream6_IRQHandler+0x10>)
 80040d2:	f004 fa41 	bl	8008558 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80040d6:	bf00      	nop
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	2000e034 	.word	0x2000e034

080040e0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80040e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80040ec:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d013      	beq.n	8004120 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80040f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80040fc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8004100:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00b      	beq.n	8004120 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8004108:	e000      	b.n	800410c <ITM_SendChar+0x2c>
    {
      __NOP();
 800410a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800410c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d0f9      	beq.n	800410a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8004116:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	b2d2      	uxtb	r2, r2
 800411e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8004120:	687b      	ldr	r3, [r7, #4]
}
 8004122:	4618      	mov	r0, r3
 8004124:	370c      	adds	r7, #12
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr

0800412e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b086      	sub	sp, #24
 8004132:	af00      	add	r7, sp, #0
 8004134:	60f8      	str	r0, [r7, #12]
 8004136:	60b9      	str	r1, [r7, #8]
 8004138:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800413a:	2300      	movs	r3, #0
 800413c:	617b      	str	r3, [r7, #20]
 800413e:	e00a      	b.n	8004156 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004140:	f3af 8000 	nop.w
 8004144:	4601      	mov	r1, r0
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	1c5a      	adds	r2, r3, #1
 800414a:	60ba      	str	r2, [r7, #8]
 800414c:	b2ca      	uxtb	r2, r1
 800414e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	3301      	adds	r3, #1
 8004154:	617b      	str	r3, [r7, #20]
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	429a      	cmp	r2, r3
 800415c:	dbf0      	blt.n	8004140 <_read+0x12>
	}

return len;
 800415e:	687b      	ldr	r3, [r7, #4]
}
 8004160:	4618      	mov	r0, r3
 8004162:	3718      	adds	r7, #24
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004174:	2300      	movs	r3, #0
 8004176:	617b      	str	r3, [r7, #20]
 8004178:	e009      	b.n	800418e <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar((*ptr++));
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	1c5a      	adds	r2, r3, #1
 800417e:	60ba      	str	r2, [r7, #8]
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	4618      	mov	r0, r3
 8004184:	f7ff ffac 	bl	80040e0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	3301      	adds	r3, #1
 800418c:	617b      	str	r3, [r7, #20]
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	429a      	cmp	r2, r3
 8004194:	dbf1      	blt.n	800417a <_write+0x12>
	}
	return len;
 8004196:	687b      	ldr	r3, [r7, #4]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3718      	adds	r7, #24
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <_close>:

int _close(int file)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
	return -1;
 80041a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80041c8:	605a      	str	r2, [r3, #4]
	return 0;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <_isatty>:

int _isatty(int file)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
	return 1;
 80041e0:	2301      	movs	r3, #1
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b085      	sub	sp, #20
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	60f8      	str	r0, [r7, #12]
 80041f6:	60b9      	str	r1, [r7, #8]
 80041f8:	607a      	str	r2, [r7, #4]
	return 0;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3714      	adds	r7, #20
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004210:	4b11      	ldr	r3, [pc, #68]	; (8004258 <_sbrk+0x50>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d102      	bne.n	800421e <_sbrk+0x16>
		heap_end = &end;
 8004218:	4b0f      	ldr	r3, [pc, #60]	; (8004258 <_sbrk+0x50>)
 800421a:	4a10      	ldr	r2, [pc, #64]	; (800425c <_sbrk+0x54>)
 800421c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800421e:	4b0e      	ldr	r3, [pc, #56]	; (8004258 <_sbrk+0x50>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004224:	4b0c      	ldr	r3, [pc, #48]	; (8004258 <_sbrk+0x50>)
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4413      	add	r3, r2
 800422c:	466a      	mov	r2, sp
 800422e:	4293      	cmp	r3, r2
 8004230:	d907      	bls.n	8004242 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004232:	f00c fc0b 	bl	8010a4c <__errno>
 8004236:	4602      	mov	r2, r0
 8004238:	230c      	movs	r3, #12
 800423a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800423c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004240:	e006      	b.n	8004250 <_sbrk+0x48>
	}

	heap_end += incr;
 8004242:	4b05      	ldr	r3, [pc, #20]	; (8004258 <_sbrk+0x50>)
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4413      	add	r3, r2
 800424a:	4a03      	ldr	r2, [pc, #12]	; (8004258 <_sbrk+0x50>)
 800424c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800424e:	68fb      	ldr	r3, [r7, #12]
}
 8004250:	4618      	mov	r0, r3
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}
 8004258:	20000860 	.word	0x20000860
 800425c:	20010240 	.word	0x20010240

08004260 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004260:	b480      	push	{r7}
 8004262:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004264:	4b08      	ldr	r3, [pc, #32]	; (8004288 <SystemInit+0x28>)
 8004266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426a:	4a07      	ldr	r2, [pc, #28]	; (8004288 <SystemInit+0x28>)
 800426c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004270:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004274:	4b04      	ldr	r3, [pc, #16]	; (8004288 <SystemInit+0x28>)
 8004276:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800427a:	609a      	str	r2, [r3, #8]
#endif
}
 800427c:	bf00      	nop
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	e000ed00 	.word	0xe000ed00

0800428c <h3l_init>:
uint8_t _DELAY_HL = 100;
uint8_t _ADDR_HL = 0x18 << 1;

//almost copy of SHT31 drivers
uint8_t h3l_init(struct h3l_dev * dev)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef _ret;
	if (HAL_I2C_GetState(dev->i2c_bus) != HAL_I2C_STATE_READY)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	4618      	mov	r0, r3
 800429a:	f005 fb41 	bl	8009920 <HAL_I2C_GetState>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b20      	cmp	r3, #32
 80042a2:	d003      	beq.n	80042ac <h3l_init+0x20>
	{
		printf("i2c1 not ready!\n");
 80042a4:	481a      	ldr	r0, [pc, #104]	; (8004310 <h3l_init+0x84>)
 80042a6:	f00d f8df 	bl	8011468 <puts>
 80042aa:	e002      	b.n	80042b2 <h3l_init+0x26>
	} else {
		printf("i2c1 is ready!\n");
 80042ac:	4819      	ldr	r0, [pc, #100]	; (8004314 <h3l_init+0x88>)
 80042ae:	f00d f8db 	bl	8011468 <puts>
	}
	_ret = HAL_I2C_IsDeviceReady(dev->i2c_bus, dev->addr, 10, dev->delay);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6858      	ldr	r0, [r3, #4]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	b299      	uxth	r1, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	7a1b      	ldrb	r3, [r3, #8]
 80042c0:	220a      	movs	r2, #10
 80042c2:	f005 f9ff 	bl	80096c4 <HAL_I2C_IsDeviceReady>
 80042c6:	4603      	mov	r3, r0
 80042c8:	73fb      	strb	r3, [r7, #15]
	if ( _ret != HAL_OK )
 80042ca:	7bfb      	ldrb	r3, [r7, #15]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d009      	beq.n	80042e4 <h3l_init+0x58>
	{
		printf("H3L setup fail\n");
 80042d0:	4811      	ldr	r0, [pc, #68]	; (8004318 <h3l_init+0x8c>)
 80042d2:	f00d f8c9 	bl	8011468 <puts>
		printf("Errorcode: %d\n", _ret);
 80042d6:	7bfb      	ldrb	r3, [r7, #15]
 80042d8:	4619      	mov	r1, r3
 80042da:	4810      	ldr	r0, [pc, #64]	; (800431c <h3l_init+0x90>)
 80042dc:	f00d f850 	bl	8011380 <iprintf>
		return 0;
 80042e0:	2300      	movs	r3, #0
 80042e2:	e010      	b.n	8004306 <h3l_init+0x7a>
	}

	//power up
	uint8_t PWR_CONF = 0b00111111;
 80042e4:	233f      	movs	r3, #63	; 0x3f
 80042e6:	73bb      	strb	r3, [r7, #14]
	//PWR_CONF = 0x27;

	h3l_write(dev, 0x20, PWR_CONF);
 80042e8:	7bbb      	ldrb	r3, [r7, #14]
 80042ea:	461a      	mov	r2, r3
 80042ec:	2120      	movs	r1, #32
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f9ae 	bl	8004650 <h3l_write>


	PWR_CONF = 0b10000000;
 80042f4:	2380      	movs	r3, #128	; 0x80
 80042f6:	73bb      	strb	r3, [r7, #14]
	h3l_write(dev, 0x23, PWR_CONF);
 80042f8:	7bbb      	ldrb	r3, [r7, #14]
 80042fa:	461a      	mov	r2, r3
 80042fc:	2123      	movs	r1, #35	; 0x23
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f9a6 	bl	8004650 <h3l_write>
	//HAL_Delay(5);
	_ret = HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf, 1, dev->delay);
	printf("WHOAMI: %d \n", buf);
	*/

	return 1;
 8004304:	2301      	movs	r3, #1
}
 8004306:	4618      	mov	r0, r3
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	080169bc 	.word	0x080169bc
 8004314:	080169cc 	.word	0x080169cc
 8004318:	080169dc 	.word	0x080169dc
 800431c:	080169ec 	.word	0x080169ec

08004320 <h3l_read_raw>:


void h3l_read_raw(struct h3l_dev * dev, int16_t * dat)
{
 8004320:	b590      	push	{r4, r7, lr}
 8004322:	b087      	sub	sp, #28
 8004324:	af02      	add	r7, sp, #8
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]

	uint8_t reg;
	uint8_t buf[6];

	reg = 0x28;
 800432a:	2328      	movs	r3, #40	; 0x28
 800432c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6858      	ldr	r0, [r3, #4]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	b299      	uxth	r1, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	7a1b      	ldrb	r3, [r3, #8]
 800433c:	f107 020f 	add.w	r2, r7, #15
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	2301      	movs	r3, #1
 8004344:	f004 fe9a 	bl	800907c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[0], 1, dev->delay);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6858      	ldr	r0, [r3, #4]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	b299      	uxth	r1, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	7a1b      	ldrb	r3, [r3, #8]
 8004356:	f107 0208 	add.w	r2, r7, #8
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	2301      	movs	r3, #1
 800435e:	f004 ff8b 	bl	8009278 <HAL_I2C_Master_Receive>
	reg = 0x29;
 8004362:	2329      	movs	r3, #41	; 0x29
 8004364:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6858      	ldr	r0, [r3, #4]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	b299      	uxth	r1, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	7a1b      	ldrb	r3, [r3, #8]
 8004374:	f107 020f 	add.w	r2, r7, #15
 8004378:	9300      	str	r3, [sp, #0]
 800437a:	2301      	movs	r3, #1
 800437c:	f004 fe7e 	bl	800907c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[1], 1, dev->delay);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6858      	ldr	r0, [r3, #4]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	b299      	uxth	r1, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	7a1b      	ldrb	r3, [r3, #8]
 800438e:	461c      	mov	r4, r3
 8004390:	f107 0308 	add.w	r3, r7, #8
 8004394:	1c5a      	adds	r2, r3, #1
 8004396:	9400      	str	r4, [sp, #0]
 8004398:	2301      	movs	r3, #1
 800439a:	f004 ff6d 	bl	8009278 <HAL_I2C_Master_Receive>
	reg = 0x2A;
 800439e:	232a      	movs	r3, #42	; 0x2a
 80043a0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6858      	ldr	r0, [r3, #4]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	b299      	uxth	r1, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	7a1b      	ldrb	r3, [r3, #8]
 80043b0:	f107 020f 	add.w	r2, r7, #15
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	2301      	movs	r3, #1
 80043b8:	f004 fe60 	bl	800907c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[2], 1, dev->delay);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6858      	ldr	r0, [r3, #4]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	b299      	uxth	r1, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	7a1b      	ldrb	r3, [r3, #8]
 80043ca:	461c      	mov	r4, r3
 80043cc:	f107 0308 	add.w	r3, r7, #8
 80043d0:	1c9a      	adds	r2, r3, #2
 80043d2:	9400      	str	r4, [sp, #0]
 80043d4:	2301      	movs	r3, #1
 80043d6:	f004 ff4f 	bl	8009278 <HAL_I2C_Master_Receive>
	reg = 0x2B;
 80043da:	232b      	movs	r3, #43	; 0x2b
 80043dc:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6858      	ldr	r0, [r3, #4]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	781b      	ldrb	r3, [r3, #0]
 80043e6:	b299      	uxth	r1, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	7a1b      	ldrb	r3, [r3, #8]
 80043ec:	f107 020f 	add.w	r2, r7, #15
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	2301      	movs	r3, #1
 80043f4:	f004 fe42 	bl	800907c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[3], 1, dev->delay);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6858      	ldr	r0, [r3, #4]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	b299      	uxth	r1, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	7a1b      	ldrb	r3, [r3, #8]
 8004406:	461c      	mov	r4, r3
 8004408:	f107 0308 	add.w	r3, r7, #8
 800440c:	1cda      	adds	r2, r3, #3
 800440e:	9400      	str	r4, [sp, #0]
 8004410:	2301      	movs	r3, #1
 8004412:	f004 ff31 	bl	8009278 <HAL_I2C_Master_Receive>
	reg = 0x2C;
 8004416:	232c      	movs	r3, #44	; 0x2c
 8004418:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6858      	ldr	r0, [r3, #4]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	b299      	uxth	r1, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	7a1b      	ldrb	r3, [r3, #8]
 8004428:	f107 020f 	add.w	r2, r7, #15
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	2301      	movs	r3, #1
 8004430:	f004 fe24 	bl	800907c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[4], 1, dev->delay);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6858      	ldr	r0, [r3, #4]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	b299      	uxth	r1, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	7a1b      	ldrb	r3, [r3, #8]
 8004442:	461c      	mov	r4, r3
 8004444:	f107 0308 	add.w	r3, r7, #8
 8004448:	1d1a      	adds	r2, r3, #4
 800444a:	9400      	str	r4, [sp, #0]
 800444c:	2301      	movs	r3, #1
 800444e:	f004 ff13 	bl	8009278 <HAL_I2C_Master_Receive>
	reg = 0x2D;
 8004452:	232d      	movs	r3, #45	; 0x2d
 8004454:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6858      	ldr	r0, [r3, #4]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	b299      	uxth	r1, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	7a1b      	ldrb	r3, [r3, #8]
 8004464:	f107 020f 	add.w	r2, r7, #15
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	2301      	movs	r3, #1
 800446c:	f004 fe06 	bl	800907c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[5], 1, dev->delay);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6858      	ldr	r0, [r3, #4]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	b299      	uxth	r1, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	7a1b      	ldrb	r3, [r3, #8]
 800447e:	461c      	mov	r4, r3
 8004480:	f107 0308 	add.w	r3, r7, #8
 8004484:	1d5a      	adds	r2, r3, #5
 8004486:	9400      	str	r4, [sp, #0]
 8004488:	2301      	movs	r3, #1
 800448a:	f004 fef5 	bl	8009278 <HAL_I2C_Master_Receive>

	dev->dat[0] = (buf[0]) | (int16_t)(buf[1] << 8);
 800448e:	7a3b      	ldrb	r3, [r7, #8]
 8004490:	b21a      	sxth	r2, r3
 8004492:	7a7b      	ldrb	r3, [r7, #9]
 8004494:	021b      	lsls	r3, r3, #8
 8004496:	b21b      	sxth	r3, r3
 8004498:	4313      	orrs	r3, r2
 800449a:	b21a      	sxth	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	815a      	strh	r2, [r3, #10]
	dev->dat[1] = (buf[2]) | (int16_t)(buf[3] << 8);
 80044a0:	7abb      	ldrb	r3, [r7, #10]
 80044a2:	b21a      	sxth	r2, r3
 80044a4:	7afb      	ldrb	r3, [r7, #11]
 80044a6:	021b      	lsls	r3, r3, #8
 80044a8:	b21b      	sxth	r3, r3
 80044aa:	4313      	orrs	r3, r2
 80044ac:	b21a      	sxth	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	819a      	strh	r2, [r3, #12]
	dev->dat[2] = (buf[4]) | (int16_t)(buf[5] << 8);
 80044b2:	7b3b      	ldrb	r3, [r7, #12]
 80044b4:	b21a      	sxth	r2, r3
 80044b6:	7b7b      	ldrb	r3, [r7, #13]
 80044b8:	021b      	lsls	r3, r3, #8
 80044ba:	b21b      	sxth	r3, r3
 80044bc:	4313      	orrs	r3, r2
 80044be:	b21a      	sxth	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	81da      	strh	r2, [r3, #14]
	dev->dat[0] = dev->dat[0] >> 4;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80044ca:	111b      	asrs	r3, r3, #4
 80044cc:	b21a      	sxth	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	815a      	strh	r2, [r3, #10]
	dev->dat[1] = dev->dat[1] >> 4;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80044d8:	111b      	asrs	r3, r3, #4
 80044da:	b21a      	sxth	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	819a      	strh	r2, [r3, #12]
	dev->dat[2] = dev->dat[2] >> 4;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80044e6:	111b      	asrs	r3, r3, #4
 80044e8:	b21a      	sxth	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	81da      	strh	r2, [r3, #14]
	dat[0] = dev->dat[0];
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	801a      	strh	r2, [r3, #0]
	dat[1] = dev->dat[1];
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	3302      	adds	r3, #2
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8004502:	801a      	strh	r2, [r3, #0]
	dat[2] = dev->dat[2];
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	3304      	adds	r3, #4
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 800450e:	801a      	strh	r2, [r3, #0]

};
 8004510:	bf00      	nop
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	bd90      	pop	{r4, r7, pc}

08004518 <h3l_convert>:

void h3l_convert(struct h3l_dev * dev, float* out)
{
 8004518:	b590      	push	{r4, r7, lr}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]

	out[0] = (float)(dev->dat[0]) * 49. / 1000. * 9.81;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004528:	ee07 3a90 	vmov	s15, r3
 800452c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004530:	ee17 0a90 	vmov	r0, s15
 8004534:	f7fc f808 	bl	8000548 <__aeabi_f2d>
 8004538:	f04f 0200 	mov.w	r2, #0
 800453c:	4b42      	ldr	r3, [pc, #264]	; (8004648 <h3l_convert+0x130>)
 800453e:	f7fc f85b 	bl	80005f8 <__aeabi_dmul>
 8004542:	4603      	mov	r3, r0
 8004544:	460c      	mov	r4, r1
 8004546:	4618      	mov	r0, r3
 8004548:	4621      	mov	r1, r4
 800454a:	f04f 0200 	mov.w	r2, #0
 800454e:	4b3f      	ldr	r3, [pc, #252]	; (800464c <h3l_convert+0x134>)
 8004550:	f7fc f97c 	bl	800084c <__aeabi_ddiv>
 8004554:	4603      	mov	r3, r0
 8004556:	460c      	mov	r4, r1
 8004558:	4618      	mov	r0, r3
 800455a:	4621      	mov	r1, r4
 800455c:	a338      	add	r3, pc, #224	; (adr r3, 8004640 <h3l_convert+0x128>)
 800455e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004562:	f7fc f849 	bl	80005f8 <__aeabi_dmul>
 8004566:	4603      	mov	r3, r0
 8004568:	460c      	mov	r4, r1
 800456a:	4618      	mov	r0, r3
 800456c:	4621      	mov	r1, r4
 800456e:	f7fc fb3b 	bl	8000be8 <__aeabi_d2f>
 8004572:	4602      	mov	r2, r0
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	601a      	str	r2, [r3, #0]
	out[1] = (float)(dev->dat[1]) * 49. / 1000. * 9.81;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800457e:	ee07 3a90 	vmov	s15, r3
 8004582:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004586:	ee17 0a90 	vmov	r0, s15
 800458a:	f7fb ffdd 	bl	8000548 <__aeabi_f2d>
 800458e:	f04f 0200 	mov.w	r2, #0
 8004592:	4b2d      	ldr	r3, [pc, #180]	; (8004648 <h3l_convert+0x130>)
 8004594:	f7fc f830 	bl	80005f8 <__aeabi_dmul>
 8004598:	4603      	mov	r3, r0
 800459a:	460c      	mov	r4, r1
 800459c:	4618      	mov	r0, r3
 800459e:	4621      	mov	r1, r4
 80045a0:	f04f 0200 	mov.w	r2, #0
 80045a4:	4b29      	ldr	r3, [pc, #164]	; (800464c <h3l_convert+0x134>)
 80045a6:	f7fc f951 	bl	800084c <__aeabi_ddiv>
 80045aa:	4603      	mov	r3, r0
 80045ac:	460c      	mov	r4, r1
 80045ae:	4618      	mov	r0, r3
 80045b0:	4621      	mov	r1, r4
 80045b2:	a323      	add	r3, pc, #140	; (adr r3, 8004640 <h3l_convert+0x128>)
 80045b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b8:	f7fc f81e 	bl	80005f8 <__aeabi_dmul>
 80045bc:	4603      	mov	r3, r0
 80045be:	460c      	mov	r4, r1
 80045c0:	4619      	mov	r1, r3
 80045c2:	4622      	mov	r2, r4
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	1d1c      	adds	r4, r3, #4
 80045c8:	4608      	mov	r0, r1
 80045ca:	4611      	mov	r1, r2
 80045cc:	f7fc fb0c 	bl	8000be8 <__aeabi_d2f>
 80045d0:	4603      	mov	r3, r0
 80045d2:	6023      	str	r3, [r4, #0]
	out[2] = (float)(dev->dat[2]) * 49. / 1000. * 9.81;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80045da:	ee07 3a90 	vmov	s15, r3
 80045de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045e2:	ee17 0a90 	vmov	r0, s15
 80045e6:	f7fb ffaf 	bl	8000548 <__aeabi_f2d>
 80045ea:	f04f 0200 	mov.w	r2, #0
 80045ee:	4b16      	ldr	r3, [pc, #88]	; (8004648 <h3l_convert+0x130>)
 80045f0:	f7fc f802 	bl	80005f8 <__aeabi_dmul>
 80045f4:	4603      	mov	r3, r0
 80045f6:	460c      	mov	r4, r1
 80045f8:	4618      	mov	r0, r3
 80045fa:	4621      	mov	r1, r4
 80045fc:	f04f 0200 	mov.w	r2, #0
 8004600:	4b12      	ldr	r3, [pc, #72]	; (800464c <h3l_convert+0x134>)
 8004602:	f7fc f923 	bl	800084c <__aeabi_ddiv>
 8004606:	4603      	mov	r3, r0
 8004608:	460c      	mov	r4, r1
 800460a:	4618      	mov	r0, r3
 800460c:	4621      	mov	r1, r4
 800460e:	a30c      	add	r3, pc, #48	; (adr r3, 8004640 <h3l_convert+0x128>)
 8004610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004614:	f7fb fff0 	bl	80005f8 <__aeabi_dmul>
 8004618:	4603      	mov	r3, r0
 800461a:	460c      	mov	r4, r1
 800461c:	4619      	mov	r1, r3
 800461e:	4622      	mov	r2, r4
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	f103 0408 	add.w	r4, r3, #8
 8004626:	4608      	mov	r0, r1
 8004628:	4611      	mov	r1, r2
 800462a:	f7fc fadd 	bl	8000be8 <__aeabi_d2f>
 800462e:	4603      	mov	r3, r0
 8004630:	6023      	str	r3, [r4, #0]

	//printf("ax: %4.2f, ay: %4.2f, az: %4.2f\n",buffer[0],buffer[1],buffer[2]);

}
 8004632:	bf00      	nop
 8004634:	370c      	adds	r7, #12
 8004636:	46bd      	mov	sp, r7
 8004638:	bd90      	pop	{r4, r7, pc}
 800463a:	bf00      	nop
 800463c:	f3af 8000 	nop.w
 8004640:	51eb851f 	.word	0x51eb851f
 8004644:	40239eb8 	.word	0x40239eb8
 8004648:	40488000 	.word	0x40488000
 800464c:	408f4000 	.word	0x408f4000

08004650 <h3l_write>:


void h3l_write(struct h3l_dev * dev, uint8_t reg, uint8_t val)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af02      	add	r7, sp, #8
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	460b      	mov	r3, r1
 800465a:	70fb      	strb	r3, [r7, #3]
 800465c:	4613      	mov	r3, r2
 800465e:	70bb      	strb	r3, [r7, #2]
	uint8_t _buf[2];
	//printf("writing to h3l: %d\n",val);
	_buf[0] = reg;
 8004660:	78fb      	ldrb	r3, [r7, #3]
 8004662:	733b      	strb	r3, [r7, #12]
	_buf[1] = val;
 8004664:	78bb      	ldrb	r3, [r7, #2]
 8004666:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, _buf, 2, dev->delay);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6858      	ldr	r0, [r3, #4]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	b299      	uxth	r1, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	7a1b      	ldrb	r3, [r3, #8]
 8004676:	f107 020c 	add.w	r2, r7, #12
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	2302      	movs	r3, #2
 800467e:	f004 fcfd 	bl	800907c <HAL_I2C_Master_Transmit>

};
 8004682:	bf00      	nop
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
	...

0800468c <_get_accel_sensitivity>:
static float temperature_sensitivity = 326.8;

// *** Local functions *** //

// Used to convert raw accelerometer readings to G-force.
float _get_accel_sensitivity(enum icm20601_accel_g accel_g) {
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	4603      	mov	r3, r0
 8004694:	71fb      	strb	r3, [r7, #7]
	float f = 0.0;
 8004696:	f04f 0300 	mov.w	r3, #0
 800469a:	60fb      	str	r3, [r7, #12]

  	switch (accel_g) {
 800469c:	79fb      	ldrb	r3, [r7, #7]
 800469e:	2b03      	cmp	r3, #3
 80046a0:	d81a      	bhi.n	80046d8 <_get_accel_sensitivity+0x4c>
 80046a2:	a201      	add	r2, pc, #4	; (adr r2, 80046a8 <_get_accel_sensitivity+0x1c>)
 80046a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a8:	080046b9 	.word	0x080046b9
 80046ac:	080046c1 	.word	0x080046c1
 80046b0:	080046c9 	.word	0x080046c9
 80046b4:	080046d1 	.word	0x080046d1
  	case (ICM20601_ACCEL_RANGE_4G):
    		f = 8192.0;
 80046b8:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 80046bc:	60fb      	str	r3, [r7, #12]
    break;
 80046be:	e00b      	b.n	80046d8 <_get_accel_sensitivity+0x4c>
  	case (ICM20601_ACCEL_RANGE_8G):
    		f = 4096.0;
 80046c0:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 80046c4:	60fb      	str	r3, [r7, #12]
    break;
 80046c6:	e007      	b.n	80046d8 <_get_accel_sensitivity+0x4c>
  	case (ICM20601_ACCEL_RANGE_16G):
    		f = 2048.0;
 80046c8:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 80046cc:	60fb      	str	r3, [r7, #12]
    break;
 80046ce:	e003      	b.n	80046d8 <_get_accel_sensitivity+0x4c>
  	case (ICM20601_ACCEL_RANGE_32G):
    		f = 1024.0;
 80046d0:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 80046d4:	60fb      	str	r3, [r7, #12]
    break;
 80046d6:	bf00      	nop
  }
  return f;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	ee07 3a90 	vmov	s15, r3
}
 80046de:	eeb0 0a67 	vmov.f32	s0, s15
 80046e2:	3714      	adds	r7, #20
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <_get_gyro_sensitivity>:

// Used to convert raw gyroscope readings to degrees per second.
float _get_gyro_sensitivity(enum icm20601_gyro_dps gyro_dps) {
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	4603      	mov	r3, r0
 80046f4:	71fb      	strb	r3, [r7, #7]
	float f = 0;
 80046f6:	f04f 0300 	mov.w	r3, #0
 80046fa:	60fb      	str	r3, [r7, #12]

	switch (gyro_dps) {
 80046fc:	79fb      	ldrb	r3, [r7, #7]
 80046fe:	2b03      	cmp	r3, #3
 8004700:	d816      	bhi.n	8004730 <_get_gyro_sensitivity+0x44>
 8004702:	a201      	add	r2, pc, #4	; (adr r2, 8004708 <_get_gyro_sensitivity+0x1c>)
 8004704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004708:	08004719 	.word	0x08004719
 800470c:	0800471f 	.word	0x0800471f
 8004710:	08004725 	.word	0x08004725
 8004714:	0800472b 	.word	0x0800472b
	case (ICM20601_GYRO_RANGE_500_DPS):
    		f = 65.5;
 8004718:	4b0a      	ldr	r3, [pc, #40]	; (8004744 <_get_gyro_sensitivity+0x58>)
 800471a:	60fb      	str	r3, [r7, #12]
	break;
 800471c:	e008      	b.n	8004730 <_get_gyro_sensitivity+0x44>
	case (ICM20601_GYRO_RANGE_1000_DPS):
    		f = 32.8;
 800471e:	4b0a      	ldr	r3, [pc, #40]	; (8004748 <_get_gyro_sensitivity+0x5c>)
 8004720:	60fb      	str	r3, [r7, #12]
    break;
 8004722:	e005      	b.n	8004730 <_get_gyro_sensitivity+0x44>
    case (ICM20601_GYRO_RANGE_2000_DPS):
    		f = 16.4;
 8004724:	4b09      	ldr	r3, [pc, #36]	; (800474c <_get_gyro_sensitivity+0x60>)
 8004726:	60fb      	str	r3, [r7, #12]
    break;
 8004728:	e002      	b.n	8004730 <_get_gyro_sensitivity+0x44>
    case (ICM20601_GYRO_RANGE_4000_DPS):
    		f = 8.2;
 800472a:	4b09      	ldr	r3, [pc, #36]	; (8004750 <_get_gyro_sensitivity+0x64>)
 800472c:	60fb      	str	r3, [r7, #12]
    break;
 800472e:	bf00      	nop
  }
  return f;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	ee07 3a90 	vmov	s15, r3
}
 8004736:	eeb0 0a67 	vmov.f32	s0, s15
 800473a:	3714      	adds	r7, #20
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	42830000 	.word	0x42830000
 8004748:	42033333 	.word	0x42033333
 800474c:	41833333 	.word	0x41833333
 8004750:	41033333 	.word	0x41033333

08004754 <_icm_read_bytes>:
  }
  return 1;
}

// Read bytes from MEMS
void _icm_read_bytes(struct icm20601_dev * dev, uint8_t reg, uint8_t* pData, uint16_t size){
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	607a      	str	r2, [r7, #4]
 800475e:	461a      	mov	r2, r3
 8004760:	460b      	mov	r3, r1
 8004762:	72fb      	strb	r3, [r7, #11]
 8004764:	4613      	mov	r3, r2
 8004766:	813b      	strh	r3, [r7, #8]
	reg = reg | 0x80;
 8004768:	7afb      	ldrb	r3, [r7, #11]
 800476a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800476e:	b2db      	uxtb	r3, r3
 8004770:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_RESET);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6818      	ldr	r0, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	889b      	ldrh	r3, [r3, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	4619      	mov	r1, r3
 800477e:	f004 fb11 	bl	8008da4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->spi_bus, &reg, 1, IMU20601_SPI_TIMEOUT);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6898      	ldr	r0, [r3, #8]
 8004786:	f107 010b 	add.w	r1, r7, #11
 800478a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800478e:	2201      	movs	r2, #1
 8004790:	f007 fb8a 	bl	800bea8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(dev->spi_bus, pData, size, IMU20601_SPI_TIMEOUT);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6898      	ldr	r0, [r3, #8]
 8004798:	893a      	ldrh	r2, [r7, #8]
 800479a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800479e:	6879      	ldr	r1, [r7, #4]
 80047a0:	f007 fcb6 	bl	800c110 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_SET);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6818      	ldr	r0, [r3, #0]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	889b      	ldrh	r3, [r3, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	4619      	mov	r1, r3
 80047b0:	f004 faf8 	bl	8008da4 <HAL_GPIO_WritePin>
}
 80047b4:	bf00      	nop
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <_icm_write_bytes>:

// Write bytes to MEMS
void _icm_write_bytes(struct icm20601_dev * dev, uint8_t reg, uint8_t *pData, uint16_t size){
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	607a      	str	r2, [r7, #4]
 80047c6:	461a      	mov	r2, r3
 80047c8:	460b      	mov	r3, r1
 80047ca:	72fb      	strb	r3, [r7, #11]
 80047cc:	4613      	mov	r3, r2
 80047ce:	813b      	strh	r3, [r7, #8]

	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_RESET);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6818      	ldr	r0, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	889b      	ldrh	r3, [r3, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	4619      	mov	r1, r3
 80047dc:	f004 fae2 	bl	8008da4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->spi_bus, &reg, 1, IMU20601_SPI_TIMEOUT);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6898      	ldr	r0, [r3, #8]
 80047e4:	f107 010b 	add.w	r1, r7, #11
 80047e8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80047ec:	2201      	movs	r2, #1
 80047ee:	f007 fb5b 	bl	800bea8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(dev->spi_bus, pData, size, IMU20601_SPI_TIMEOUT);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6898      	ldr	r0, [r3, #8]
 80047f6:	893a      	ldrh	r2, [r7, #8]
 80047f8:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80047fc:	6879      	ldr	r1, [r7, #4]
 80047fe:	f007 fb53 	bl	800bea8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_SET);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6818      	ldr	r0, [r3, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	889b      	ldrh	r3, [r3, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	4619      	mov	r1, r3
 800480e:	f004 fac9 	bl	8008da4 <HAL_GPIO_WritePin>
}
 8004812:	bf00      	nop
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <icm20601_init>:


// *** Global Functions *** //

int8_t icm20601_init(struct icm20601_dev * dev) {
 800481a:	b580      	push	{r7, lr}
 800481c:	b084      	sub	sp, #16
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0;
 8004822:	2300      	movs	r3, #0
 8004824:	73fb      	strb	r3, [r7, #15]
	uint8_t r [1] = {0};
 8004826:	2300      	movs	r3, #0
 8004828:	733b      	strb	r3, [r7, #12]
	//  4. disable fifo
	//  5. configure chip
	//  6. enable accelerometer and gyroscope

	// full reset of chip
	tmp = SENS_reset; // 0x81
 800482a:	2381      	movs	r3, #129	; 0x81
 800482c:	73fb      	strb	r3, [r7, #15]
	_icm_write_bytes(dev, REG_PWR_MGMT_1, &tmp , 1);
 800482e:	f107 020f 	add.w	r2, r7, #15
 8004832:	2301      	movs	r3, #1
 8004834:	216b      	movs	r1, #107	; 0x6b
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7ff ffc0 	bl	80047bc <_icm_write_bytes>
	HAL_Delay(1);
 800483c:	2001      	movs	r0, #1
 800483e:	f002 ff81 	bl	8007744 <HAL_Delay>

    // set clock to internal PLL
    tmp = SENS_internalpll; //0x01
 8004842:	2301      	movs	r3, #1
 8004844:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_1, &tmp, 1);
 8004846:	f107 020f 	add.w	r2, r7, #15
 800484a:	2301      	movs	r3, #1
 800484c:	216b      	movs	r1, #107	; 0x6b
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7ff ffb4 	bl	80047bc <_icm_write_bytes>
    HAL_Delay(1);
 8004854:	2001      	movs	r0, #1
 8004856:	f002 ff75 	bl	8007744 <HAL_Delay>

    // verify we are able to read from the chip
    _icm_read_bytes(dev, REG_WHO_AM_I, r, 1);
 800485a:	f107 020c 	add.w	r2, r7, #12
 800485e:	2301      	movs	r3, #1
 8004860:	2175      	movs	r1, #117	; 0x75
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7ff ff76 	bl	8004754 <_icm_read_bytes>
    if (r[0] != REG_WHO_AM_I_CONST) return 0;
 8004868:	7b3b      	ldrb	r3, [r7, #12]
 800486a:	2bac      	cmp	r3, #172	; 0xac
 800486c:	d001      	beq.n	8004872 <icm20601_init+0x58>
 800486e:	2300      	movs	r3, #0
 8004870:	e093      	b.n	800499a <icm20601_init+0x180>

    // place accel and gyro on standby
    tmp = SENS_standby; // 0x3F
 8004872:	233f      	movs	r3, #63	; 0x3f
 8004874:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_2, &tmp , 1);
 8004876:	f107 020f 	add.w	r2, r7, #15
 800487a:	2301      	movs	r3, #1
 800487c:	216c      	movs	r1, #108	; 0x6c
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7ff ff9c 	bl	80047bc <_icm_write_bytes>

    // disable fifo
    tmp = SENS_nofifo; //0x00
 8004884:	2300      	movs	r3, #0
 8004886:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_USER_CTRL, &tmp , 1);
 8004888:	f107 020f 	add.w	r2, r7, #15
 800488c:	2301      	movs	r3, #1
 800488e:	216a      	movs	r1, #106	; 0x6a
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f7ff ff93 	bl	80047bc <_icm_write_bytes>

    // disable chip I2C communications
    tmp = SENS_disablei2c;	//0x41;
 8004896:	2341      	movs	r3, #65	; 0x41
 8004898:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_USER_CTRL, &tmp , 1);
 800489a:	f107 020f 	add.w	r2, r7, #15
 800489e:	2301      	movs	r3, #1
 80048a0:	216a      	movs	r1, #106	; 0x6a
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7ff ff8a 	bl	80047bc <_icm_write_bytes>

    // Accelerometer filtering
    if (ICM20601_ACCEL_DLPF_BYPASS_1046_HZ == dev->accel_dlpf) {
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	7b1b      	ldrb	r3, [r3, #12]
 80048ac:	2b08      	cmp	r3, #8
 80048ae:	d102      	bne.n	80048b6 <icm20601_init+0x9c>
      tmp = (0x01 << 3);
 80048b0:	2308      	movs	r3, #8
 80048b2:	73fb      	strb	r3, [r7, #15]
 80048b4:	e002      	b.n	80048bc <icm20601_init+0xa2>
    }
    else {
      tmp = dev->accel_dlpf;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	7b1b      	ldrb	r3, [r3, #12]
 80048ba:	73fb      	strb	r3, [r7, #15]
    }
    _icm_write_bytes(dev, REG_ACCEL_CONFIG_2, &tmp , 1);
 80048bc:	f107 020f 	add.w	r2, r7, #15
 80048c0:	2301      	movs	r3, #1
 80048c2:	211d      	movs	r1, #29
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7ff ff79 	bl	80047bc <_icm_write_bytes>

    // Accelerometer range
    tmp = (dev->accel_g) << 3;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	7b5b      	ldrb	r3, [r3, #13]
 80048ce:	00db      	lsls	r3, r3, #3
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_ACCEL_CONFIG_1, &tmp , 1);
 80048d4:	f107 020f 	add.w	r2, r7, #15
 80048d8:	2301      	movs	r3, #1
 80048da:	211c      	movs	r1, #28
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f7ff ff6d 	bl	80047bc <_icm_write_bytes>
    // Gyro filtering
    //tmp = ((dev->gyro_dps) << 3) | SENS_gyrofilter; // filter: 0x02
    //_icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);


    if (ICM20601_GYRO_DLPF_BYPASS_3281_HZ == dev->gyro_dlpf) {
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	7b9b      	ldrb	r3, [r3, #14]
 80048e6:	2b08      	cmp	r3, #8
 80048e8:	d119      	bne.n	800491e <icm20601_init+0x104>
    	// bypass dpf and set dps
        tmp = 0x00;
 80048ea:	2300      	movs	r3, #0
 80048ec:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 80048ee:	f107 020f 	add.w	r2, r7, #15
 80048f2:	2301      	movs	r3, #1
 80048f4:	211a      	movs	r1, #26
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7ff ff60 	bl	80047bc <_icm_write_bytes>

        tmp = (dev->gyro_dps << 3) | 0x02;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	7bdb      	ldrb	r3, [r3, #15]
 8004900:	00db      	lsls	r3, r3, #3
 8004902:	b25b      	sxtb	r3, r3
 8004904:	f043 0302 	orr.w	r3, r3, #2
 8004908:	b25b      	sxtb	r3, r3
 800490a:	b2db      	uxtb	r3, r3
 800490c:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 800490e:	f107 020f 	add.w	r2, r7, #15
 8004912:	2301      	movs	r3, #1
 8004914:	211b      	movs	r1, #27
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7ff ff50 	bl	80047bc <_icm_write_bytes>
 800491c:	e033      	b.n	8004986 <icm20601_init+0x16c>
     }
     else if (ICM20601_GYRO_DLPF_BYPASS_8173_HZ == dev->gyro_dlpf) {
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	7b9b      	ldrb	r3, [r3, #14]
 8004922:	2b09      	cmp	r3, #9
 8004924:	d119      	bne.n	800495a <icm20601_init+0x140>
        // bypass dpf and set dps
        tmp = 0x00;
 8004926:	2300      	movs	r3, #0
 8004928:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 800492a:	f107 020f 	add.w	r2, r7, #15
 800492e:	2301      	movs	r3, #1
 8004930:	211a      	movs	r1, #26
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7ff ff42 	bl	80047bc <_icm_write_bytes>

        tmp = (dev->gyro_dps << 3) | 0x01;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	7bdb      	ldrb	r3, [r3, #15]
 800493c:	00db      	lsls	r3, r3, #3
 800493e:	b25b      	sxtb	r3, r3
 8004940:	f043 0301 	orr.w	r3, r3, #1
 8004944:	b25b      	sxtb	r3, r3
 8004946:	b2db      	uxtb	r3, r3
 8004948:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 800494a:	f107 020f 	add.w	r2, r7, #15
 800494e:	2301      	movs	r3, #1
 8004950:	211b      	movs	r1, #27
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7ff ff32 	bl	80047bc <_icm_write_bytes>
 8004958:	e015      	b.n	8004986 <icm20601_init+0x16c>
     }
     else {
        // configure dpf and set dps
        tmp = dev->gyro_dlpf;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	7b9b      	ldrb	r3, [r3, #14]
 800495e:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 8004960:	f107 020f 	add.w	r2, r7, #15
 8004964:	2301      	movs	r3, #1
 8004966:	211a      	movs	r1, #26
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f7ff ff27 	bl	80047bc <_icm_write_bytes>

        tmp = dev->gyro_dps << 3;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	7bdb      	ldrb	r3, [r3, #15]
 8004972:	00db      	lsls	r3, r3, #3
 8004974:	b2db      	uxtb	r3, r3
 8004976:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 8004978:	f107 020f 	add.w	r2, r7, #15
 800497c:	2301      	movs	r3, #1
 800497e:	211b      	movs	r1, #27
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f7ff ff1b 	bl	80047bc <_icm_write_bytes>
     }


    tmp = 0x00;
 8004986:	2300      	movs	r3, #0
 8004988:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_2, &tmp, 1);
 800498a:	f107 020f 	add.w	r2, r7, #15
 800498e:	2301      	movs	r3, #1
 8004990:	216c      	movs	r1, #108	; 0x6c
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7ff ff12 	bl	80047bc <_icm_write_bytes>


    return 1;
 8004998:	2301      	movs	r3, #1
}
 800499a:	4618      	mov	r0, r3
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <icm20601_read_accel_raw>:

// Read out raw acceleration data
void icm20601_read_accel_raw(struct icm20601_dev * dev, int16_t *accel){
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b084      	sub	sp, #16
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
 80049aa:	6039      	str	r1, [r7, #0]
	uint8_t accel_8bit [6] = { 0 };
 80049ac:	f107 0308 	add.w	r3, r7, #8
 80049b0:	2200      	movs	r2, #0
 80049b2:	601a      	str	r2, [r3, #0]
 80049b4:	809a      	strh	r2, [r3, #4]
	_icm_read_bytes(dev, REG_ACCEL_XOUT_H, accel_8bit, 6);
 80049b6:	f107 0208 	add.w	r2, r7, #8
 80049ba:	2306      	movs	r3, #6
 80049bc:	213b      	movs	r1, #59	; 0x3b
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7ff fec8 	bl	8004754 <_icm_read_bytes>

	UINT8_TO_INT16(accel[0], accel_8bit[0], accel_8bit[1]);
 80049c4:	7a3b      	ldrb	r3, [r7, #8]
 80049c6:	b21a      	sxth	r2, r3
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	801a      	strh	r2, [r3, #0]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049d2:	021b      	lsls	r3, r3, #8
 80049d4:	b21a      	sxth	r2, r3
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	801a      	strh	r2, [r3, #0]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80049e0:	7a7b      	ldrb	r3, [r7, #9]
 80049e2:	b21b      	sxth	r3, r3
 80049e4:	4313      	orrs	r3, r2
 80049e6:	b21a      	sxth	r2, r3
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(accel[1], accel_8bit[2], accel_8bit[3]);
 80049ec:	7aba      	ldrb	r2, [r7, #10]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	3302      	adds	r3, #2
 80049f2:	b212      	sxth	r2, r2
 80049f4:	801a      	strh	r2, [r3, #0]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	3302      	adds	r3, #2
 80049fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049fe:	021a      	lsls	r2, r3, #8
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	3302      	adds	r3, #2
 8004a04:	b212      	sxth	r2, r2
 8004a06:	801a      	strh	r2, [r3, #0]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	3302      	adds	r3, #2
 8004a0c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004a10:	7afb      	ldrb	r3, [r7, #11]
 8004a12:	b21a      	sxth	r2, r3
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	3302      	adds	r3, #2
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	b212      	sxth	r2, r2
 8004a1c:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(accel[2], accel_8bit[4], accel_8bit[5]);
 8004a1e:	7b3a      	ldrb	r2, [r7, #12]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	3304      	adds	r3, #4
 8004a24:	b212      	sxth	r2, r2
 8004a26:	801a      	strh	r2, [r3, #0]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	3304      	adds	r3, #4
 8004a2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a30:	021a      	lsls	r2, r3, #8
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	3304      	adds	r3, #4
 8004a36:	b212      	sxth	r2, r2
 8004a38:	801a      	strh	r2, [r3, #0]
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	3304      	adds	r3, #4
 8004a3e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004a42:	7b7b      	ldrb	r3, [r7, #13]
 8004a44:	b21a      	sxth	r2, r3
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	3304      	adds	r3, #4
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	b212      	sxth	r2, r2
 8004a4e:	801a      	strh	r2, [r3, #0]
}
 8004a50:	bf00      	nop
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <icm20601_read_gyro_raw>:
    accel[1]  = ((float) accel_raw[1]) / accel_sensitivity;
    accel[2]  = ((float) accel_raw[2]) / accel_sensitivity;
}

// Read out raw gyro data
void icm20601_read_gyro_raw(struct icm20601_dev * dev, int16_t *gyro){
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
	uint8_t gyro_8bit [6] = { 0 };
 8004a62:	f107 0308 	add.w	r3, r7, #8
 8004a66:	2200      	movs	r2, #0
 8004a68:	601a      	str	r2, [r3, #0]
 8004a6a:	809a      	strh	r2, [r3, #4]
	_icm_read_bytes(dev, REG_GYRO_XOUT_H, gyro_8bit, 6);
 8004a6c:	f107 0208 	add.w	r2, r7, #8
 8004a70:	2306      	movs	r3, #6
 8004a72:	2143      	movs	r1, #67	; 0x43
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f7ff fe6d 	bl	8004754 <_icm_read_bytes>

	UINT8_TO_INT16(gyro[0], gyro_8bit[0], gyro_8bit[1]);
 8004a7a:	7a3b      	ldrb	r3, [r7, #8]
 8004a7c:	b21a      	sxth	r2, r3
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	801a      	strh	r2, [r3, #0]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004a88:	021b      	lsls	r3, r3, #8
 8004a8a:	b21a      	sxth	r2, r3
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	801a      	strh	r2, [r3, #0]
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004a96:	7a7b      	ldrb	r3, [r7, #9]
 8004a98:	b21b      	sxth	r3, r3
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	b21a      	sxth	r2, r3
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(gyro[1], gyro_8bit[2], gyro_8bit[3]);
 8004aa2:	7aba      	ldrb	r2, [r7, #10]
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	3302      	adds	r3, #2
 8004aa8:	b212      	sxth	r2, r2
 8004aaa:	801a      	strh	r2, [r3, #0]
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	3302      	adds	r3, #2
 8004ab0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ab4:	021a      	lsls	r2, r3, #8
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	3302      	adds	r3, #2
 8004aba:	b212      	sxth	r2, r2
 8004abc:	801a      	strh	r2, [r3, #0]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	3302      	adds	r3, #2
 8004ac2:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004ac6:	7afb      	ldrb	r3, [r7, #11]
 8004ac8:	b21a      	sxth	r2, r3
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	3302      	adds	r3, #2
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	b212      	sxth	r2, r2
 8004ad2:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(gyro[2], gyro_8bit[4], gyro_8bit[5]);
 8004ad4:	7b3a      	ldrb	r2, [r7, #12]
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	3304      	adds	r3, #4
 8004ada:	b212      	sxth	r2, r2
 8004adc:	801a      	strh	r2, [r3, #0]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	3304      	adds	r3, #4
 8004ae2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ae6:	021a      	lsls	r2, r3, #8
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	3304      	adds	r3, #4
 8004aec:	b212      	sxth	r2, r2
 8004aee:	801a      	strh	r2, [r3, #0]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	3304      	adds	r3, #4
 8004af4:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004af8:	7b7b      	ldrb	r3, [r7, #13]
 8004afa:	b21a      	sxth	r2, r3
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	3304      	adds	r3, #4
 8004b00:	430a      	orrs	r2, r1
 8004b02:	b212      	sxth	r2, r2
 8004b04:	801a      	strh	r2, [r3, #0]
}
 8004b06:	bf00      	nop
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <icm20601_read_temp_raw>:
    gyro[1]  = ((float) gyro_raw[1]) / gyro_sensitivity;
    gyro[2]  = ((float) gyro_raw[2]) / gyro_sensitivity;
}

// Read out raw temperature data
void icm20601_read_temp_raw(struct icm20601_dev * dev, int16_t *temp){
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b084      	sub	sp, #16
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
 8004b16:	6039      	str	r1, [r7, #0]
	uint8_t temp_8bit [2] = { 0 };
 8004b18:	2300      	movs	r3, #0
 8004b1a:	81bb      	strh	r3, [r7, #12]
	_icm_read_bytes(dev, REG_TEMP_OUT_H, temp_8bit, 2);
 8004b1c:	f107 020c 	add.w	r2, r7, #12
 8004b20:	2302      	movs	r3, #2
 8004b22:	2141      	movs	r1, #65	; 0x41
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7ff fe15 	bl	8004754 <_icm_read_bytes>

	UINT8_TO_INT16(*temp, temp_8bit[0], temp_8bit[1]);
 8004b2a:	7b3b      	ldrb	r3, [r7, #12]
 8004b2c:	b21a      	sxth	r2, r3
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	801a      	strh	r2, [r3, #0]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b38:	021b      	lsls	r3, r3, #8
 8004b3a:	b21a      	sxth	r2, r3
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	801a      	strh	r2, [r3, #0]
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004b46:	7b7b      	ldrb	r3, [r7, #13]
 8004b48:	b21b      	sxth	r3, r3
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	b21a      	sxth	r2, r3
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	801a      	strh	r2, [r3, #0]
}
 8004b52:	bf00      	nop
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	0000      	movs	r0, r0
 8004b5c:	0000      	movs	r0, r0
	...

08004b60 <icm20601_read_data>:

	*temp = ((float)temperature_raw) / temperature_sensitivity + 25.0; // TEMP_degC = ((TEMP_OUT – RoomTemp_Offset)/Temp_Sensitivity) + 25degC
}

void icm20601_read_data(struct icm20601_dev * dev, float * buf)
{
 8004b60:	b590      	push	{r4, r7, lr}
 8004b62:	b089      	sub	sp, #36	; 0x24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
	int16_t temperature_raw;
	icm20601_read_temp_raw(dev, &temperature_raw);
 8004b6a:	f107 0316 	add.w	r3, r7, #22
 8004b6e:	4619      	mov	r1, r3
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f7ff ffcc 	bl	8004b0e <icm20601_read_temp_raw>
	buf[0] = ((float)temperature_raw) / temperature_sensitivity + 25.0;
 8004b76:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004b7a:	ee07 3a90 	vmov	s15, r3
 8004b7e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004b82:	4b61      	ldr	r3, [pc, #388]	; (8004d08 <icm20601_read_data+0x1a8>)
 8004b84:	ed93 7a00 	vldr	s14, [r3]
 8004b88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b8c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8004b90:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	edc3 7a00 	vstr	s15, [r3]
	float accel_sensitivity;
	int16_t accel_raw[3] = { 0 };
 8004b9a:	f107 0310 	add.w	r3, r7, #16
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	601a      	str	r2, [r3, #0]
 8004ba2:	809a      	strh	r2, [r3, #4]

	accel_sensitivity = _get_accel_sensitivity(dev->accel_g);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	7b5b      	ldrb	r3, [r3, #13]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7ff fd6f 	bl	800468c <_get_accel_sensitivity>
 8004bae:	ed87 0a07 	vstr	s0, [r7, #28]

  	icm20601_read_accel_raw(dev, accel_raw);
 8004bb2:	f107 0310 	add.w	r3, r7, #16
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f7ff fef2 	bl	80049a2 <icm20601_read_accel_raw>

    buf[1] = ((float) accel_raw[0]) / accel_sensitivity * 9.81;
 8004bbe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004bc2:	ee07 3a90 	vmov	s15, r3
 8004bc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004bca:	edd7 7a07 	vldr	s15, [r7, #28]
 8004bce:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004bd2:	ee16 0a90 	vmov	r0, s13
 8004bd6:	f7fb fcb7 	bl	8000548 <__aeabi_f2d>
 8004bda:	a349      	add	r3, pc, #292	; (adr r3, 8004d00 <icm20601_read_data+0x1a0>)
 8004bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be0:	f7fb fd0a 	bl	80005f8 <__aeabi_dmul>
 8004be4:	4603      	mov	r3, r0
 8004be6:	460c      	mov	r4, r1
 8004be8:	4619      	mov	r1, r3
 8004bea:	4622      	mov	r2, r4
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	1d1c      	adds	r4, r3, #4
 8004bf0:	4608      	mov	r0, r1
 8004bf2:	4611      	mov	r1, r2
 8004bf4:	f7fb fff8 	bl	8000be8 <__aeabi_d2f>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	6023      	str	r3, [r4, #0]
    buf[2]  = ((float) accel_raw[1]) / accel_sensitivity * 9.81;
 8004bfc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004c00:	ee07 3a90 	vmov	s15, r3
 8004c04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c08:	edd7 7a07 	vldr	s15, [r7, #28]
 8004c0c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004c10:	ee16 0a90 	vmov	r0, s13
 8004c14:	f7fb fc98 	bl	8000548 <__aeabi_f2d>
 8004c18:	a339      	add	r3, pc, #228	; (adr r3, 8004d00 <icm20601_read_data+0x1a0>)
 8004c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1e:	f7fb fceb 	bl	80005f8 <__aeabi_dmul>
 8004c22:	4603      	mov	r3, r0
 8004c24:	460c      	mov	r4, r1
 8004c26:	4619      	mov	r1, r3
 8004c28:	4622      	mov	r2, r4
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	f103 0408 	add.w	r4, r3, #8
 8004c30:	4608      	mov	r0, r1
 8004c32:	4611      	mov	r1, r2
 8004c34:	f7fb ffd8 	bl	8000be8 <__aeabi_d2f>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	6023      	str	r3, [r4, #0]
    buf[3]  = ((float) accel_raw[2]) / accel_sensitivity * 9.81 ;
 8004c3c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004c40:	ee07 3a90 	vmov	s15, r3
 8004c44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c48:	edd7 7a07 	vldr	s15, [r7, #28]
 8004c4c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004c50:	ee16 0a90 	vmov	r0, s13
 8004c54:	f7fb fc78 	bl	8000548 <__aeabi_f2d>
 8004c58:	a329      	add	r3, pc, #164	; (adr r3, 8004d00 <icm20601_read_data+0x1a0>)
 8004c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5e:	f7fb fccb 	bl	80005f8 <__aeabi_dmul>
 8004c62:	4603      	mov	r3, r0
 8004c64:	460c      	mov	r4, r1
 8004c66:	4619      	mov	r1, r3
 8004c68:	4622      	mov	r2, r4
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	f103 040c 	add.w	r4, r3, #12
 8004c70:	4608      	mov	r0, r1
 8004c72:	4611      	mov	r1, r2
 8004c74:	f7fb ffb8 	bl	8000be8 <__aeabi_d2f>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	6023      	str	r3, [r4, #0]

	float gyro_sensitivity;
	int16_t gyro_raw[3] = { 0 };
 8004c7c:	f107 0308 	add.w	r3, r7, #8
 8004c80:	2200      	movs	r2, #0
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	809a      	strh	r2, [r3, #4]

	gyro_sensitivity = _get_gyro_sensitivity(dev->accel_g);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	7b5b      	ldrb	r3, [r3, #13]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7ff fd2e 	bl	80046ec <_get_gyro_sensitivity>
 8004c90:	ed87 0a06 	vstr	s0, [r7, #24]

  	icm20601_read_gyro_raw(dev, gyro_raw);
 8004c94:	f107 0308 	add.w	r3, r7, #8
 8004c98:	4619      	mov	r1, r3
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7ff fedc 	bl	8004a58 <icm20601_read_gyro_raw>

    buf[4] = ((float) gyro_raw[0]) / gyro_sensitivity;
 8004ca0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8004ca4:	ee07 3a90 	vmov	s15, r3
 8004ca8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	3310      	adds	r3, #16
 8004cb0:	ed97 7a06 	vldr	s14, [r7, #24]
 8004cb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cb8:	edc3 7a00 	vstr	s15, [r3]
    buf[5]  = ((float) gyro_raw[1]) / gyro_sensitivity;
 8004cbc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8004cc0:	ee07 3a90 	vmov	s15, r3
 8004cc4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	3314      	adds	r3, #20
 8004ccc:	ed97 7a06 	vldr	s14, [r7, #24]
 8004cd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cd4:	edc3 7a00 	vstr	s15, [r3]
    buf[6]  = ((float) gyro_raw[2]) / gyro_sensitivity;
 8004cd8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004cdc:	ee07 3a90 	vmov	s15, r3
 8004ce0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	3318      	adds	r3, #24
 8004ce8:	ed97 7a06 	vldr	s14, [r7, #24]
 8004cec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cf0:	edc3 7a00 	vstr	s15, [r3]
}
 8004cf4:	bf00      	nop
 8004cf6:	3724      	adds	r7, #36	; 0x24
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd90      	pop	{r4, r7, pc}
 8004cfc:	f3af 8000 	nop.w
 8004d00:	51eb851f 	.word	0x51eb851f
 8004d04:	40239eb8 	.word	0x40239eb8
 8004d08:	2000016c 	.word	0x2000016c

08004d0c <toggle>:
 *      Author: linus
 */

#include "devices/LED.h"

void toggle(struct LED_dev * ctrl){
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(ctrl->LED_port, ctrl->LED_pin);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	889b      	ldrh	r3, [r3, #4]
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	4610      	mov	r0, r2
 8004d20:	f004 f859 	bl	8008dd6 <HAL_GPIO_TogglePin>
}
 8004d24:	bf00      	nop
 8004d26:	3708      	adds	r7, #8
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <turn_on>:

void turn_on(struct LED_dev * ctrl){
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ctrl->LED_port, ctrl->LED_pin, GPIO_PIN_SET);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6818      	ldr	r0, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	889b      	ldrh	r3, [r3, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	4619      	mov	r1, r3
 8004d40:	f004 f830 	bl	8008da4 <HAL_GPIO_WritePin>
}
 8004d44:	bf00      	nop
 8004d46:	3708      	adds	r7, #8
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}

08004d4c <turn_off>:

void turn_off(struct LED_dev * ctrl){
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ctrl->LED_port, ctrl->LED_pin, GPIO_PIN_RESET);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6818      	ldr	r0, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	889b      	ldrh	r3, [r3, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	4619      	mov	r1, r3
 8004d60:	f004 f820 	bl	8008da4 <HAL_GPIO_WritePin>
}
 8004d64:	bf00      	nop
 8004d66:	3708      	adds	r7, #8
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <ms5607_init>:
#include <stdio.h>
#include <math.h>


uint8_t ms5607_init(struct ms5607_dev * dev)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b088      	sub	sp, #32
 8004d70:	af02      	add	r7, sp, #8
 8004d72:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_GetState(dev->i2c_bus) != HAL_I2C_STATE_READY)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f004 fdd1 	bl	8009920 <HAL_I2C_GetState>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b20      	cmp	r3, #32
 8004d82:	d003      	beq.n	8004d8c <ms5607_init+0x20>
	{
		printf("i2c not ready!\n");
 8004d84:	484a      	ldr	r0, [pc, #296]	; (8004eb0 <ms5607_init+0x144>)
 8004d86:	f00c fb6f 	bl	8011468 <puts>
 8004d8a:	e002      	b.n	8004d92 <ms5607_init+0x26>
	} else {
		printf("i2c is ready!\n");
 8004d8c:	4849      	ldr	r0, [pc, #292]	; (8004eb4 <ms5607_init+0x148>)
 8004d8e:	f00c fb6b 	bl	8011468 <puts>
	}
	HAL_StatusTypeDef _ret;
	_ret = HAL_I2C_IsDeviceReady(dev->i2c_bus, dev->addr, 10, dev->addr);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6858      	ldr	r0, [r3, #4]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	b299      	uxth	r1, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	220a      	movs	r2, #10
 8004da2:	f004 fc8f 	bl	80096c4 <HAL_I2C_IsDeviceReady>
 8004da6:	4603      	mov	r3, r0
 8004da8:	74fb      	strb	r3, [r7, #19]
	if ( _ret != HAL_OK )
 8004daa:	7cfb      	ldrb	r3, [r7, #19]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d009      	beq.n	8004dc4 <ms5607_init+0x58>
	{
		printf("BARO setup fail\n");
 8004db0:	4841      	ldr	r0, [pc, #260]	; (8004eb8 <ms5607_init+0x14c>)
 8004db2:	f00c fb59 	bl	8011468 <puts>
		printf("Errorcode: %d\n", _ret);
 8004db6:	7cfb      	ldrb	r3, [r7, #19]
 8004db8:	4619      	mov	r1, r3
 8004dba:	4840      	ldr	r0, [pc, #256]	; (8004ebc <ms5607_init+0x150>)
 8004dbc:	f00c fae0 	bl	8011380 <iprintf>
		return 0;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	e070      	b.n	8004ea6 <ms5607_init+0x13a>

	//get factory calibration data
	//reset (advised in datasheet)

	uint8_t reset_code[1];
	reset_code[0] = 0x1E;
 8004dc4:	231e      	movs	r3, #30
 8004dc6:	743b      	strb	r3, [r7, #16]
	_ret = HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, reset_code, 1, dev->delay);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6858      	ldr	r0, [r3, #4]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	b299      	uxth	r1, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	7a1b      	ldrb	r3, [r3, #8]
 8004dd6:	f107 0210 	add.w	r2, r7, #16
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	2301      	movs	r3, #1
 8004dde:	f004 f94d 	bl	800907c <HAL_I2C_Master_Transmit>
 8004de2:	4603      	mov	r3, r0
 8004de4:	74fb      	strb	r3, [r7, #19]

	HAL_Delay(100);
 8004de6:	2064      	movs	r0, #100	; 0x64
 8004de8:	f002 fcac 	bl	8007744 <HAL_Delay>

	//get each calibration value (c1 - c6 in datasheet)
	uint8_t get_add;
	uint8_t buf[2];

	for(int i = 1; i < 7; i++){
 8004dec:	2301      	movs	r3, #1
 8004dee:	617b      	str	r3, [r7, #20]
 8004df0:	e043      	b.n	8004e7a <ms5607_init+0x10e>

		//standard commands (see datasheet)
		get_add = 0b10100000;
 8004df2:	23a0      	movs	r3, #160	; 0xa0
 8004df4:	73fb      	strb	r3, [r7, #15]
		get_add = get_add + 2*i;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	005b      	lsls	r3, r3, #1
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	7bfb      	ldrb	r3, [r7, #15]
 8004e00:	4413      	add	r3, r2
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	73fb      	strb	r3, [r7, #15]

		_ret = HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &get_add, 1, dev->delay);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6858      	ldr	r0, [r3, #4]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	b299      	uxth	r1, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	7a1b      	ldrb	r3, [r3, #8]
 8004e14:	f107 020f 	add.w	r2, r7, #15
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	f004 f92e 	bl	800907c <HAL_I2C_Master_Transmit>
 8004e20:	4603      	mov	r3, r0
 8004e22:	74fb      	strb	r3, [r7, #19]
		HAL_Delay(15);
 8004e24:	200f      	movs	r0, #15
 8004e26:	f002 fc8d 	bl	8007744 <HAL_Delay>
		_ret = HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 2, dev->delay);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6858      	ldr	r0, [r3, #4]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	b299      	uxth	r1, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	7a1b      	ldrb	r3, [r3, #8]
 8004e38:	f107 020c 	add.w	r2, r7, #12
 8004e3c:	9300      	str	r3, [sp, #0]
 8004e3e:	2302      	movs	r3, #2
 8004e40:	f004 fa1a 	bl	8009278 <HAL_I2C_Master_Receive>
 8004e44:	4603      	mov	r3, r0
 8004e46:	74fb      	strb	r3, [r7, #19]
		dev->cal[i-1] = (uint16_t)(buf[0] << 8) | buf[1];
 8004e48:	7b3b      	ldrb	r3, [r7, #12]
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	021b      	lsls	r3, r3, #8
 8004e4e:	b299      	uxth	r1, r3
 8004e50:	7b7b      	ldrb	r3, [r7, #13]
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	3b01      	subs	r3, #1
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	b291      	uxth	r1, r2
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	3304      	adds	r3, #4
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	4413      	add	r3, r2
 8004e64:	460a      	mov	r2, r1
 8004e66:	805a      	strh	r2, [r3, #2]

		if ( _ret != HAL_OK )
 8004e68:	7cfb      	ldrb	r3, [r7, #19]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d002      	beq.n	8004e74 <ms5607_init+0x108>
			{
				printf("MS5607 cal read fail\n");
 8004e6e:	4814      	ldr	r0, [pc, #80]	; (8004ec0 <ms5607_init+0x154>)
 8004e70:	f00c fafa 	bl	8011468 <puts>
	for(int i = 1; i < 7; i++){
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	3301      	adds	r3, #1
 8004e78:	617b      	str	r3, [r7, #20]
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	2b06      	cmp	r3, #6
 8004e7e:	ddb8      	ble.n	8004df2 <ms5607_init+0x86>
			}
	}


	printf("BARO setup success\n");
 8004e80:	4810      	ldr	r0, [pc, #64]	; (8004ec4 <ms5607_init+0x158>)
 8004e82:	f00c faf1 	bl	8011468 <puts>

	buf[0] = 0x44;
 8004e86:	2344      	movs	r3, #68	; 0x44
 8004e88:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6858      	ldr	r0, [r3, #4]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	b299      	uxth	r1, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	7a1b      	ldrb	r3, [r3, #8]
 8004e98:	f107 020c 	add.w	r2, r7, #12
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	f004 f8ec 	bl	800907c <HAL_I2C_Master_Transmit>
	// need to wait 3 ms
	return 1;
 8004ea4:	2301      	movs	r3, #1
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3718      	adds	r7, #24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	080169fc 	.word	0x080169fc
 8004eb4:	08016a0c 	.word	0x08016a0c
 8004eb8:	08016a1c 	.word	0x08016a1c
 8004ebc:	08016a2c 	.word	0x08016a2c
 8004ec0:	08016a3c 	.word	0x08016a3c
 8004ec4:	08016a54 	.word	0x08016a54

08004ec8 <ms5607_prep_pressure>:

void ms5607_prep_pressure(struct ms5607_dev * dev, uint8_t * dat)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b086      	sub	sp, #24
 8004ecc:	af02      	add	r7, sp, #8
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
	uint8_t buf[3];
	buf[0] = 0x00;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6858      	ldr	r0, [r3, #4]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	b299      	uxth	r1, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	7a1b      	ldrb	r3, [r3, #8]
 8004ee4:	f107 020c 	add.w	r2, r7, #12
 8004ee8:	9300      	str	r3, [sp, #0]
 8004eea:	2301      	movs	r3, #1
 8004eec:	f004 f8c6 	bl	800907c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 3, dev->delay);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6858      	ldr	r0, [r3, #4]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	b299      	uxth	r1, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	7a1b      	ldrb	r3, [r3, #8]
 8004efe:	f107 020c 	add.w	r2, r7, #12
 8004f02:	9300      	str	r3, [sp, #0]
 8004f04:	2303      	movs	r3, #3
 8004f06:	f004 f9b7 	bl	8009278 <HAL_I2C_Master_Receive>

	dev->D1 = (uint32_t)(buf[0] << 16) | (uint32_t)(buf[1] << 8) | (uint32_t)buf[2];
 8004f0a:	7b3b      	ldrb	r3, [r7, #12]
 8004f0c:	041b      	lsls	r3, r3, #16
 8004f0e:	461a      	mov	r2, r3
 8004f10:	7b7b      	ldrb	r3, [r7, #13]
 8004f12:	021b      	lsls	r3, r3, #8
 8004f14:	4313      	orrs	r3, r2
 8004f16:	7bba      	ldrb	r2, [r7, #14]
 8004f18:	431a      	orrs	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	619a      	str	r2, [r3, #24]
	dat[0] = buf[0];
 8004f1e:	7b3a      	ldrb	r2, [r7, #12]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	701a      	strb	r2, [r3, #0]
	dat[1] = buf[1];
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	3301      	adds	r3, #1
 8004f28:	7b7a      	ldrb	r2, [r7, #13]
 8004f2a:	701a      	strb	r2, [r3, #0]
	dat[2] = buf[2];
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	3302      	adds	r3, #2
 8004f30:	7bba      	ldrb	r2, [r7, #14]
 8004f32:	701a      	strb	r2, [r3, #0]

	buf[0] = 0x54;
 8004f34:	2354      	movs	r3, #84	; 0x54
 8004f36:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6858      	ldr	r0, [r3, #4]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	781b      	ldrb	r3, [r3, #0]
 8004f40:	b299      	uxth	r1, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	7a1b      	ldrb	r3, [r3, #8]
 8004f46:	f107 020c 	add.w	r2, r7, #12
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	f004 f895 	bl	800907c <HAL_I2C_Master_Transmit>
	// need to wait 3 ms
}
 8004f52:	bf00      	nop
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}

08004f5a <ms5607_read_pressure>:

void ms5607_read_pressure(struct ms5607_dev * dev, uint8_t * dat)
{
 8004f5a:	b580      	push	{r7, lr}
 8004f5c:	b086      	sub	sp, #24
 8004f5e:	af02      	add	r7, sp, #8
 8004f60:	6078      	str	r0, [r7, #4]
 8004f62:	6039      	str	r1, [r7, #0]
	uint8_t buf[3];
	buf[0] = 0x00;
 8004f64:	2300      	movs	r3, #0
 8004f66:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6858      	ldr	r0, [r3, #4]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	b299      	uxth	r1, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	7a1b      	ldrb	r3, [r3, #8]
 8004f76:	f107 020c 	add.w	r2, r7, #12
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	f004 f87d 	bl	800907c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 3, dev->delay);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6858      	ldr	r0, [r3, #4]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	b299      	uxth	r1, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	7a1b      	ldrb	r3, [r3, #8]
 8004f90:	f107 020c 	add.w	r2, r7, #12
 8004f94:	9300      	str	r3, [sp, #0]
 8004f96:	2303      	movs	r3, #3
 8004f98:	f004 f96e 	bl	8009278 <HAL_I2C_Master_Receive>

	dev->D2 = (uint32_t)(buf[0] << 16) | (uint32_t)(buf[1] << 8) | (uint32_t)buf[2];
 8004f9c:	7b3b      	ldrb	r3, [r7, #12]
 8004f9e:	041b      	lsls	r3, r3, #16
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	7b7b      	ldrb	r3, [r7, #13]
 8004fa4:	021b      	lsls	r3, r3, #8
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	7bba      	ldrb	r2, [r7, #14]
 8004faa:	431a      	orrs	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	61da      	str	r2, [r3, #28]
	dat[3] = buf[0];
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	3303      	adds	r3, #3
 8004fb4:	7b3a      	ldrb	r2, [r7, #12]
 8004fb6:	701a      	strb	r2, [r3, #0]
	dat[4] = buf[1];
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	3304      	adds	r3, #4
 8004fbc:	7b7a      	ldrb	r2, [r7, #13]
 8004fbe:	701a      	strb	r2, [r3, #0]
	dat[5] = buf[2];
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	3305      	adds	r3, #5
 8004fc4:	7bba      	ldrb	r2, [r7, #14]
 8004fc6:	701a      	strb	r2, [r3, #0]

	buf[0] = 0x44;
 8004fc8:	2344      	movs	r3, #68	; 0x44
 8004fca:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6858      	ldr	r0, [r3, #4]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	781b      	ldrb	r3, [r3, #0]
 8004fd4:	b299      	uxth	r1, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	7a1b      	ldrb	r3, [r3, #8]
 8004fda:	f107 020c 	add.w	r2, r7, #12
 8004fde:	9300      	str	r3, [sp, #0]
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	f004 f84b 	bl	800907c <HAL_I2C_Master_Transmit>
	// need to wait 3 ms
}
 8004fe6:	bf00      	nop
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
	...

08004ff0 <ms5607_convert>:

void ms5607_convert(struct ms5607_dev * dev, float * p, float * t)
{
 8004ff0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004ff4:	b092      	sub	sp, #72	; 0x48
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	60f8      	str	r0, [r7, #12]
 8004ffa:	60b9      	str	r1, [r7, #8]
 8004ffc:	607a      	str	r2, [r7, #4]
	//calculate calibration values
	uint16_t c1 = dev->cal[0];
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	895b      	ldrh	r3, [r3, #10]
 8005002:	877b      	strh	r3, [r7, #58]	; 0x3a
	uint16_t c2 = dev->cal[1];
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	899b      	ldrh	r3, [r3, #12]
 8005008:	873b      	strh	r3, [r7, #56]	; 0x38
	uint16_t c3 = dev->cal[2];
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	89db      	ldrh	r3, [r3, #14]
 800500e:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint16_t c4 = dev->cal[3];
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	8a1b      	ldrh	r3, [r3, #16]
 8005014:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint16_t c5 = dev->cal[4];
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	8a5b      	ldrh	r3, [r3, #18]
 800501a:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t c6 = dev->cal[5];
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8a9b      	ldrh	r3, [r3, #20]
 8005020:	863b      	strh	r3, [r7, #48]	; 0x30

	uint32_t D1 = dev->D1;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t D2 = dev->D2;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	69db      	ldr	r3, [r3, #28]
 800502c:	62bb      	str	r3, [r7, #40]	; 0x28

	//calculations from datasheet
	float dt = (float)D2 - c5 * 256.0;
 800502e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005030:	ee07 3a90 	vmov	s15, r3
 8005034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005038:	ee17 0a90 	vmov	r0, s15
 800503c:	f7fb fa84 	bl	8000548 <__aeabi_f2d>
 8005040:	4604      	mov	r4, r0
 8005042:	460d      	mov	r5, r1
 8005044:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005046:	4618      	mov	r0, r3
 8005048:	f7fb fa6c 	bl	8000524 <__aeabi_i2d>
 800504c:	f04f 0200 	mov.w	r2, #0
 8005050:	4bd9      	ldr	r3, [pc, #868]	; (80053b8 <ms5607_convert+0x3c8>)
 8005052:	f7fb fad1 	bl	80005f8 <__aeabi_dmul>
 8005056:	4602      	mov	r2, r0
 8005058:	460b      	mov	r3, r1
 800505a:	4620      	mov	r0, r4
 800505c:	4629      	mov	r1, r5
 800505e:	f7fb f913 	bl	8000288 <__aeabi_dsub>
 8005062:	4603      	mov	r3, r0
 8005064:	460c      	mov	r4, r1
 8005066:	4618      	mov	r0, r3
 8005068:	4621      	mov	r1, r4
 800506a:	f7fb fdbd 	bl	8000be8 <__aeabi_d2f>
 800506e:	4603      	mov	r3, r0
 8005070:	627b      	str	r3, [r7, #36]	; 0x24
	float OFF = c2 * pow(2.0, 17) + (c4 * dt)/64.0;
 8005072:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005074:	4618      	mov	r0, r3
 8005076:	f7fb fa55 	bl	8000524 <__aeabi_i2d>
 800507a:	f04f 0200 	mov.w	r2, #0
 800507e:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8005082:	f7fb fab9 	bl	80005f8 <__aeabi_dmul>
 8005086:	4603      	mov	r3, r0
 8005088:	460c      	mov	r4, r1
 800508a:	4625      	mov	r5, r4
 800508c:	461c      	mov	r4, r3
 800508e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005090:	ee07 3a90 	vmov	s15, r3
 8005094:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005098:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800509c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050a0:	ee17 0a90 	vmov	r0, s15
 80050a4:	f7fb fa50 	bl	8000548 <__aeabi_f2d>
 80050a8:	f04f 0200 	mov.w	r2, #0
 80050ac:	4bc3      	ldr	r3, [pc, #780]	; (80053bc <ms5607_convert+0x3cc>)
 80050ae:	f7fb fbcd 	bl	800084c <__aeabi_ddiv>
 80050b2:	4602      	mov	r2, r0
 80050b4:	460b      	mov	r3, r1
 80050b6:	4620      	mov	r0, r4
 80050b8:	4629      	mov	r1, r5
 80050ba:	f7fb f8e7 	bl	800028c <__adddf3>
 80050be:	4603      	mov	r3, r0
 80050c0:	460c      	mov	r4, r1
 80050c2:	4618      	mov	r0, r3
 80050c4:	4621      	mov	r1, r4
 80050c6:	f7fb fd8f 	bl	8000be8 <__aeabi_d2f>
 80050ca:	4603      	mov	r3, r0
 80050cc:	623b      	str	r3, [r7, #32]
	float SENS = c1 * pow(2.0, 16) + (c3 * dt)/128.0;
 80050ce:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7fb fa27 	bl	8000524 <__aeabi_i2d>
 80050d6:	f04f 0200 	mov.w	r2, #0
 80050da:	4bb9      	ldr	r3, [pc, #740]	; (80053c0 <ms5607_convert+0x3d0>)
 80050dc:	f7fb fa8c 	bl	80005f8 <__aeabi_dmul>
 80050e0:	4603      	mov	r3, r0
 80050e2:	460c      	mov	r4, r1
 80050e4:	4625      	mov	r5, r4
 80050e6:	461c      	mov	r4, r3
 80050e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80050ea:	ee07 3a90 	vmov	s15, r3
 80050ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80050f2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80050f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050fa:	ee17 0a90 	vmov	r0, s15
 80050fe:	f7fb fa23 	bl	8000548 <__aeabi_f2d>
 8005102:	f04f 0200 	mov.w	r2, #0
 8005106:	4baf      	ldr	r3, [pc, #700]	; (80053c4 <ms5607_convert+0x3d4>)
 8005108:	f7fb fba0 	bl	800084c <__aeabi_ddiv>
 800510c:	4602      	mov	r2, r0
 800510e:	460b      	mov	r3, r1
 8005110:	4620      	mov	r0, r4
 8005112:	4629      	mov	r1, r5
 8005114:	f7fb f8ba 	bl	800028c <__adddf3>
 8005118:	4603      	mov	r3, r0
 800511a:	460c      	mov	r4, r1
 800511c:	4618      	mov	r0, r3
 800511e:	4621      	mov	r1, r4
 8005120:	f7fb fd62 	bl	8000be8 <__aeabi_d2f>
 8005124:	4603      	mov	r3, r0
 8005126:	61fb      	str	r3, [r7, #28]
	float TEMP = 2000.0 + dt * c6/(pow(2.0, 23));
 8005128:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800512a:	ee07 3a90 	vmov	s15, r3
 800512e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005132:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800513a:	ee17 0a90 	vmov	r0, s15
 800513e:	f7fb fa03 	bl	8000548 <__aeabi_f2d>
 8005142:	f04f 0200 	mov.w	r2, #0
 8005146:	4ba0      	ldr	r3, [pc, #640]	; (80053c8 <ms5607_convert+0x3d8>)
 8005148:	f7fb fb80 	bl	800084c <__aeabi_ddiv>
 800514c:	4603      	mov	r3, r0
 800514e:	460c      	mov	r4, r1
 8005150:	4618      	mov	r0, r3
 8005152:	4621      	mov	r1, r4
 8005154:	f04f 0200 	mov.w	r2, #0
 8005158:	4b9c      	ldr	r3, [pc, #624]	; (80053cc <ms5607_convert+0x3dc>)
 800515a:	f7fb f897 	bl	800028c <__adddf3>
 800515e:	4603      	mov	r3, r0
 8005160:	460c      	mov	r4, r1
 8005162:	4618      	mov	r0, r3
 8005164:	4621      	mov	r1, r4
 8005166:	f7fb fd3f 	bl	8000be8 <__aeabi_d2f>
 800516a:	4603      	mov	r3, r0
 800516c:	61bb      	str	r3, [r7, #24]
	float pressure = ((float)D1 * SENS/(pow(2.0, 21)) - OFF)/(pow(2.0, 15));
 800516e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005170:	ee07 3a90 	vmov	s15, r3
 8005174:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005178:	edd7 7a07 	vldr	s15, [r7, #28]
 800517c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005180:	ee17 0a90 	vmov	r0, s15
 8005184:	f7fb f9e0 	bl	8000548 <__aeabi_f2d>
 8005188:	f04f 0200 	mov.w	r2, #0
 800518c:	4b90      	ldr	r3, [pc, #576]	; (80053d0 <ms5607_convert+0x3e0>)
 800518e:	f7fb fb5d 	bl	800084c <__aeabi_ddiv>
 8005192:	4603      	mov	r3, r0
 8005194:	460c      	mov	r4, r1
 8005196:	4625      	mov	r5, r4
 8005198:	461c      	mov	r4, r3
 800519a:	6a38      	ldr	r0, [r7, #32]
 800519c:	f7fb f9d4 	bl	8000548 <__aeabi_f2d>
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	4620      	mov	r0, r4
 80051a6:	4629      	mov	r1, r5
 80051a8:	f7fb f86e 	bl	8000288 <__aeabi_dsub>
 80051ac:	4603      	mov	r3, r0
 80051ae:	460c      	mov	r4, r1
 80051b0:	4618      	mov	r0, r3
 80051b2:	4621      	mov	r1, r4
 80051b4:	f04f 0200 	mov.w	r2, #0
 80051b8:	4b86      	ldr	r3, [pc, #536]	; (80053d4 <ms5607_convert+0x3e4>)
 80051ba:	f7fb fb47 	bl	800084c <__aeabi_ddiv>
 80051be:	4603      	mov	r3, r0
 80051c0:	460c      	mov	r4, r1
 80051c2:	4618      	mov	r0, r3
 80051c4:	4621      	mov	r1, r4
 80051c6:	f7fb fd0f 	bl	8000be8 <__aeabi_d2f>
 80051ca:	4603      	mov	r3, r0
 80051cc:	617b      	str	r3, [r7, #20]

	float T2 = 0., OFF2 = 0., SENS2 = 0.;
 80051ce:	f04f 0300 	mov.w	r3, #0
 80051d2:	647b      	str	r3, [r7, #68]	; 0x44
 80051d4:	f04f 0300 	mov.w	r3, #0
 80051d8:	643b      	str	r3, [r7, #64]	; 0x40
 80051da:	f04f 0300 	mov.w	r3, #0
 80051de:	63fb      	str	r3, [r7, #60]	; 0x3c
	if(TEMP < 2000)
 80051e0:	edd7 7a06 	vldr	s15, [r7, #24]
 80051e4:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 80053d8 <ms5607_convert+0x3e8>
 80051e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051f0:	f140 8104 	bpl.w	80053fc <ms5607_convert+0x40c>
	{
	  T2 = dt * dt / pow(2.0,31);
 80051f4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80051f8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80051fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005200:	eddf 6a76 	vldr	s13, [pc, #472]	; 80053dc <ms5607_convert+0x3ec>
 8005204:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005208:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	  OFF2 = 61.0 * (TEMP - 2000.0) * (TEMP - 2000.0)/pow(2.0,4);
 800520c:	69b8      	ldr	r0, [r7, #24]
 800520e:	f7fb f99b 	bl	8000548 <__aeabi_f2d>
 8005212:	f04f 0200 	mov.w	r2, #0
 8005216:	4b6d      	ldr	r3, [pc, #436]	; (80053cc <ms5607_convert+0x3dc>)
 8005218:	f7fb f836 	bl	8000288 <__aeabi_dsub>
 800521c:	4603      	mov	r3, r0
 800521e:	460c      	mov	r4, r1
 8005220:	4618      	mov	r0, r3
 8005222:	4621      	mov	r1, r4
 8005224:	f04f 0200 	mov.w	r2, #0
 8005228:	4b6d      	ldr	r3, [pc, #436]	; (80053e0 <ms5607_convert+0x3f0>)
 800522a:	f7fb f9e5 	bl	80005f8 <__aeabi_dmul>
 800522e:	4603      	mov	r3, r0
 8005230:	460c      	mov	r4, r1
 8005232:	4625      	mov	r5, r4
 8005234:	461c      	mov	r4, r3
 8005236:	69b8      	ldr	r0, [r7, #24]
 8005238:	f7fb f986 	bl	8000548 <__aeabi_f2d>
 800523c:	f04f 0200 	mov.w	r2, #0
 8005240:	4b62      	ldr	r3, [pc, #392]	; (80053cc <ms5607_convert+0x3dc>)
 8005242:	f7fb f821 	bl	8000288 <__aeabi_dsub>
 8005246:	4602      	mov	r2, r0
 8005248:	460b      	mov	r3, r1
 800524a:	4620      	mov	r0, r4
 800524c:	4629      	mov	r1, r5
 800524e:	f7fb f9d3 	bl	80005f8 <__aeabi_dmul>
 8005252:	4603      	mov	r3, r0
 8005254:	460c      	mov	r4, r1
 8005256:	4618      	mov	r0, r3
 8005258:	4621      	mov	r1, r4
 800525a:	f04f 0200 	mov.w	r2, #0
 800525e:	4b61      	ldr	r3, [pc, #388]	; (80053e4 <ms5607_convert+0x3f4>)
 8005260:	f7fb faf4 	bl	800084c <__aeabi_ddiv>
 8005264:	4603      	mov	r3, r0
 8005266:	460c      	mov	r4, r1
 8005268:	4618      	mov	r0, r3
 800526a:	4621      	mov	r1, r4
 800526c:	f7fb fcbc 	bl	8000be8 <__aeabi_d2f>
 8005270:	4603      	mov	r3, r0
 8005272:	643b      	str	r3, [r7, #64]	; 0x40
	  SENS2 = 2.0 * (TEMP - 2000.0) * (TEMP - 2000.0);
 8005274:	69b8      	ldr	r0, [r7, #24]
 8005276:	f7fb f967 	bl	8000548 <__aeabi_f2d>
 800527a:	f04f 0200 	mov.w	r2, #0
 800527e:	4b53      	ldr	r3, [pc, #332]	; (80053cc <ms5607_convert+0x3dc>)
 8005280:	f7fb f802 	bl	8000288 <__aeabi_dsub>
 8005284:	4603      	mov	r3, r0
 8005286:	460c      	mov	r4, r1
 8005288:	4618      	mov	r0, r3
 800528a:	4621      	mov	r1, r4
 800528c:	4602      	mov	r2, r0
 800528e:	460b      	mov	r3, r1
 8005290:	f7fa fffc 	bl	800028c <__adddf3>
 8005294:	4603      	mov	r3, r0
 8005296:	460c      	mov	r4, r1
 8005298:	4625      	mov	r5, r4
 800529a:	461c      	mov	r4, r3
 800529c:	69b8      	ldr	r0, [r7, #24]
 800529e:	f7fb f953 	bl	8000548 <__aeabi_f2d>
 80052a2:	f04f 0200 	mov.w	r2, #0
 80052a6:	4b49      	ldr	r3, [pc, #292]	; (80053cc <ms5607_convert+0x3dc>)
 80052a8:	f7fa ffee 	bl	8000288 <__aeabi_dsub>
 80052ac:	4602      	mov	r2, r0
 80052ae:	460b      	mov	r3, r1
 80052b0:	4620      	mov	r0, r4
 80052b2:	4629      	mov	r1, r5
 80052b4:	f7fb f9a0 	bl	80005f8 <__aeabi_dmul>
 80052b8:	4603      	mov	r3, r0
 80052ba:	460c      	mov	r4, r1
 80052bc:	4618      	mov	r0, r3
 80052be:	4621      	mov	r1, r4
 80052c0:	f7fb fc92 	bl	8000be8 <__aeabi_d2f>
 80052c4:	4603      	mov	r3, r0
 80052c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if(TEMP < -1500)
 80052c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80052cc:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80053e8 <ms5607_convert+0x3f8>
 80052d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052d8:	f140 8090 	bpl.w	80053fc <ms5607_convert+0x40c>
	  {
	    OFF2 += 15.0 * (TEMP + 1500)*(TEMP + 1500.0);
 80052dc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80052de:	f7fb f933 	bl	8000548 <__aeabi_f2d>
 80052e2:	4604      	mov	r4, r0
 80052e4:	460d      	mov	r5, r1
 80052e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80052ea:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80053ec <ms5607_convert+0x3fc>
 80052ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80052f2:	ee17 0a90 	vmov	r0, s15
 80052f6:	f7fb f927 	bl	8000548 <__aeabi_f2d>
 80052fa:	f04f 0200 	mov.w	r2, #0
 80052fe:	4b3c      	ldr	r3, [pc, #240]	; (80053f0 <ms5607_convert+0x400>)
 8005300:	f7fb f97a 	bl	80005f8 <__aeabi_dmul>
 8005304:	4602      	mov	r2, r0
 8005306:	460b      	mov	r3, r1
 8005308:	4690      	mov	r8, r2
 800530a:	4699      	mov	r9, r3
 800530c:	69b8      	ldr	r0, [r7, #24]
 800530e:	f7fb f91b 	bl	8000548 <__aeabi_f2d>
 8005312:	a327      	add	r3, pc, #156	; (adr r3, 80053b0 <ms5607_convert+0x3c0>)
 8005314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005318:	f7fa ffb8 	bl	800028c <__adddf3>
 800531c:	4602      	mov	r2, r0
 800531e:	460b      	mov	r3, r1
 8005320:	4640      	mov	r0, r8
 8005322:	4649      	mov	r1, r9
 8005324:	f7fb f968 	bl	80005f8 <__aeabi_dmul>
 8005328:	4602      	mov	r2, r0
 800532a:	460b      	mov	r3, r1
 800532c:	4620      	mov	r0, r4
 800532e:	4629      	mov	r1, r5
 8005330:	f7fa ffac 	bl	800028c <__adddf3>
 8005334:	4603      	mov	r3, r0
 8005336:	460c      	mov	r4, r1
 8005338:	4618      	mov	r0, r3
 800533a:	4621      	mov	r1, r4
 800533c:	f7fb fc54 	bl	8000be8 <__aeabi_d2f>
 8005340:	4603      	mov	r3, r0
 8005342:	643b      	str	r3, [r7, #64]	; 0x40
	    SENS2 += 8.0 * (TEMP + 1500)*(TEMP + 1500.0);
 8005344:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005346:	f7fb f8ff 	bl	8000548 <__aeabi_f2d>
 800534a:	4604      	mov	r4, r0
 800534c:	460d      	mov	r5, r1
 800534e:	edd7 7a06 	vldr	s15, [r7, #24]
 8005352:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80053ec <ms5607_convert+0x3fc>
 8005356:	ee77 7a87 	vadd.f32	s15, s15, s14
 800535a:	ee17 0a90 	vmov	r0, s15
 800535e:	f7fb f8f3 	bl	8000548 <__aeabi_f2d>
 8005362:	f04f 0200 	mov.w	r2, #0
 8005366:	4b23      	ldr	r3, [pc, #140]	; (80053f4 <ms5607_convert+0x404>)
 8005368:	f7fb f946 	bl	80005f8 <__aeabi_dmul>
 800536c:	4602      	mov	r2, r0
 800536e:	460b      	mov	r3, r1
 8005370:	4690      	mov	r8, r2
 8005372:	4699      	mov	r9, r3
 8005374:	69b8      	ldr	r0, [r7, #24]
 8005376:	f7fb f8e7 	bl	8000548 <__aeabi_f2d>
 800537a:	a30d      	add	r3, pc, #52	; (adr r3, 80053b0 <ms5607_convert+0x3c0>)
 800537c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005380:	f7fa ff84 	bl	800028c <__adddf3>
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	4640      	mov	r0, r8
 800538a:	4649      	mov	r1, r9
 800538c:	f7fb f934 	bl	80005f8 <__aeabi_dmul>
 8005390:	4602      	mov	r2, r0
 8005392:	460b      	mov	r3, r1
 8005394:	4620      	mov	r0, r4
 8005396:	4629      	mov	r1, r5
 8005398:	f7fa ff78 	bl	800028c <__adddf3>
 800539c:	4603      	mov	r3, r0
 800539e:	460c      	mov	r4, r1
 80053a0:	4618      	mov	r0, r3
 80053a2:	4621      	mov	r1, r4
 80053a4:	f7fb fc20 	bl	8000be8 <__aeabi_d2f>
 80053a8:	4603      	mov	r3, r0
 80053aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053ac:	e026      	b.n	80053fc <ms5607_convert+0x40c>
 80053ae:	bf00      	nop
 80053b0:	00000000 	.word	0x00000000
 80053b4:	40977000 	.word	0x40977000
 80053b8:	40700000 	.word	0x40700000
 80053bc:	40500000 	.word	0x40500000
 80053c0:	40f00000 	.word	0x40f00000
 80053c4:	40600000 	.word	0x40600000
 80053c8:	41600000 	.word	0x41600000
 80053cc:	409f4000 	.word	0x409f4000
 80053d0:	41400000 	.word	0x41400000
 80053d4:	40e00000 	.word	0x40e00000
 80053d8:	44fa0000 	.word	0x44fa0000
 80053dc:	4f000000 	.word	0x4f000000
 80053e0:	404e8000 	.word	0x404e8000
 80053e4:	40300000 	.word	0x40300000
 80053e8:	c4bb8000 	.word	0xc4bb8000
 80053ec:	44bb8000 	.word	0x44bb8000
 80053f0:	402e0000 	.word	0x402e0000
 80053f4:	40200000 	.word	0x40200000
 80053f8:	42c80000 	.word	0x42c80000
	  }
	}

	TEMP-=T2;
 80053fc:	ed97 7a06 	vldr	s14, [r7, #24]
 8005400:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005404:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005408:	edc7 7a06 	vstr	s15, [r7, #24]
	OFF-=OFF2;
 800540c:	ed97 7a08 	vldr	s14, [r7, #32]
 8005410:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8005414:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005418:	edc7 7a08 	vstr	s15, [r7, #32]
	SENS-=SENS2;
 800541c:	ed97 7a07 	vldr	s14, [r7, #28]
 8005420:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005424:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005428:	edc7 7a07 	vstr	s15, [r7, #28]
	TEMP/=100;
 800542c:	ed97 7a06 	vldr	s14, [r7, #24]
 8005430:	ed5f 6a0f 	vldr	s13, [pc, #-60]	; 80053f8 <ms5607_convert+0x408>
 8005434:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005438:	edc7 7a06 	vstr	s15, [r7, #24]
	pressure=(((float)(D1*SENS)/pow(2,21)-OFF)/pow(2,15));
 800543c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543e:	ee07 3a90 	vmov	s15, r3
 8005442:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005446:	edd7 7a07 	vldr	s15, [r7, #28]
 800544a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800544e:	ee17 0a90 	vmov	r0, s15
 8005452:	f7fb f879 	bl	8000548 <__aeabi_f2d>
 8005456:	f04f 0200 	mov.w	r2, #0
 800545a:	4b16      	ldr	r3, [pc, #88]	; (80054b4 <ms5607_convert+0x4c4>)
 800545c:	f7fb f9f6 	bl	800084c <__aeabi_ddiv>
 8005460:	4603      	mov	r3, r0
 8005462:	460c      	mov	r4, r1
 8005464:	4625      	mov	r5, r4
 8005466:	461c      	mov	r4, r3
 8005468:	6a38      	ldr	r0, [r7, #32]
 800546a:	f7fb f86d 	bl	8000548 <__aeabi_f2d>
 800546e:	4602      	mov	r2, r0
 8005470:	460b      	mov	r3, r1
 8005472:	4620      	mov	r0, r4
 8005474:	4629      	mov	r1, r5
 8005476:	f7fa ff07 	bl	8000288 <__aeabi_dsub>
 800547a:	4603      	mov	r3, r0
 800547c:	460c      	mov	r4, r1
 800547e:	4618      	mov	r0, r3
 8005480:	4621      	mov	r1, r4
 8005482:	f04f 0200 	mov.w	r2, #0
 8005486:	4b0c      	ldr	r3, [pc, #48]	; (80054b8 <ms5607_convert+0x4c8>)
 8005488:	f7fb f9e0 	bl	800084c <__aeabi_ddiv>
 800548c:	4603      	mov	r3, r0
 800548e:	460c      	mov	r4, r1
 8005490:	4618      	mov	r0, r3
 8005492:	4621      	mov	r1, r4
 8005494:	f7fb fba8 	bl	8000be8 <__aeabi_d2f>
 8005498:	4603      	mov	r3, r0
 800549a:	617b      	str	r3, [r7, #20]

	*t = TEMP;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	69ba      	ldr	r2, [r7, #24]
 80054a0:	601a      	str	r2, [r3, #0]
	*p = pressure;
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	601a      	str	r2, [r3, #0]

	//printf("MS pressure is %4.2f Pa\n", pressure);
	//printf("MS temp is %4.2f deg\n", TEMP);

}
 80054a8:	bf00      	nop
 80054aa:	3748      	adds	r7, #72	; 0x48
 80054ac:	46bd      	mov	sp, r7
 80054ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80054b2:	bf00      	nop
 80054b4:	41400000 	.word	0x41400000
 80054b8:	40e00000 	.word	0x40e00000

080054bc <sht31_init>:
	return 0;
}


int sht31_init(struct sht31_dev * dev)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b086      	sub	sp, #24
 80054c0:	af02      	add	r7, sp, #8
 80054c2:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_GetState(dev->i2c_bus) != HAL_I2C_STATE_READY)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	4618      	mov	r0, r3
 80054ca:	f004 fa29 	bl	8009920 <HAL_I2C_GetState>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b20      	cmp	r3, #32
 80054d2:	d003      	beq.n	80054dc <sht31_init+0x20>
	{
		printf("i2c1 not ready!\n");
 80054d4:	481f      	ldr	r0, [pc, #124]	; (8005554 <sht31_init+0x98>)
 80054d6:	f00b ffc7 	bl	8011468 <puts>
 80054da:	e002      	b.n	80054e2 <sht31_init+0x26>
	} else {
		printf("i2c1 is ready!\n");
 80054dc:	481e      	ldr	r0, [pc, #120]	; (8005558 <sht31_init+0x9c>)
 80054de:	f00b ffc3 	bl	8011468 <puts>
	}

	HAL_StatusTypeDef _ret;

	_ret = HAL_I2C_IsDeviceReady(dev->i2c_bus, dev->addr, 10, dev->delay);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6858      	ldr	r0, [r3, #4]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	b299      	uxth	r1, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	7a1b      	ldrb	r3, [r3, #8]
 80054f0:	220a      	movs	r2, #10
 80054f2:	f004 f8e7 	bl	80096c4 <HAL_I2C_IsDeviceReady>
 80054f6:	4603      	mov	r3, r0
 80054f8:	73fb      	strb	r3, [r7, #15]
	if ( _ret != HAL_OK )
 80054fa:	7bfb      	ldrb	r3, [r7, #15]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d009      	beq.n	8005514 <sht31_init+0x58>
	{
		printf("SHT31 setup fail\n");
 8005500:	4816      	ldr	r0, [pc, #88]	; (800555c <sht31_init+0xa0>)
 8005502:	f00b ffb1 	bl	8011468 <puts>
		printf("Errorcode: %d\n", _ret);
 8005506:	7bfb      	ldrb	r3, [r7, #15]
 8005508:	4619      	mov	r1, r3
 800550a:	4815      	ldr	r0, [pc, #84]	; (8005560 <sht31_init+0xa4>)
 800550c:	f00b ff38 	bl	8011380 <iprintf>
		return 0;
 8005510:	2300      	movs	r3, #0
 8005512:	e01b      	b.n	800554c <sht31_init+0x90>
	}

	printf("SHT31 setup success\n");
 8005514:	4813      	ldr	r0, [pc, #76]	; (8005564 <sht31_init+0xa8>)
 8005516:	f00b ffa7 	bl	8011468 <puts>
	//request first measurement
	uint8_t buf[2];
	uint16_t REG = 0x2416;
 800551a:	f242 4316 	movw	r3, #9238	; 0x2416
 800551e:	81bb      	strh	r3, [r7, #12]
	buf[0] = (uint8_t)(REG >> 8);
 8005520:	89bb      	ldrh	r3, [r7, #12]
 8005522:	0a1b      	lsrs	r3, r3, #8
 8005524:	b29b      	uxth	r3, r3
 8005526:	b2db      	uxtb	r3, r3
 8005528:	723b      	strb	r3, [r7, #8]
	buf[1] = (uint8_t)REG;
 800552a:	89bb      	ldrh	r3, [r7, #12]
 800552c:	b2db      	uxtb	r3, r3
 800552e:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 2, dev->delay);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6858      	ldr	r0, [r3, #4]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	b299      	uxth	r1, r3
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	7a1b      	ldrb	r3, [r3, #8]
 800553e:	f107 0208 	add.w	r2, r7, #8
 8005542:	9300      	str	r3, [sp, #0]
 8005544:	2302      	movs	r3, #2
 8005546:	f003 fd99 	bl	800907c <HAL_I2C_Master_Transmit>
	return 1;
 800554a:	2301      	movs	r3, #1
}
 800554c:	4618      	mov	r0, r3
 800554e:	3710      	adds	r7, #16
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	08016a68 	.word	0x08016a68
 8005558:	08016a78 	.word	0x08016a78
 800555c:	08016a88 	.word	0x08016a88
 8005560:	08016a9c 	.word	0x08016a9c
 8005564:	08016aac 	.word	0x08016aac

08005568 <sht31_read>:

void sht31_read(struct sht31_dev * dev, float * dat, uint16_t * dat_raw)
{
 8005568:	b590      	push	{r4, r7, lr}
 800556a:	b08d      	sub	sp, #52	; 0x34
 800556c:	af02      	add	r7, sp, #8
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
	float temp;
	float humid;
	uint8_t buf[6];

	//T MSB, T LSB, T CRC, H MSB, H LSB, H CRC
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 6, dev->delay);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6858      	ldr	r0, [r3, #4]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	b299      	uxth	r1, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	7a1b      	ldrb	r3, [r3, #8]
 8005582:	f107 0214 	add.w	r2, r7, #20
 8005586:	9300      	str	r3, [sp, #0]
 8005588:	2306      	movs	r3, #6
 800558a:	f003 fe75 	bl	8009278 <HAL_I2C_Master_Receive>
	/*
	uint16_t rawTemp = (uint16_t)((((uint16_t)_buf[0])<<8) | (uint16_t)_buf[1]);
	uint16_t rawHum = (uint16_t)((((uint16_t)_buf[3])<<8) | (uint16_t)_buf[4]);
	*/
	uint16_t rawTemp = ((uint16_t)buf[0] << 8) | buf[1];
 800558e:	7d3b      	ldrb	r3, [r7, #20]
 8005590:	021b      	lsls	r3, r3, #8
 8005592:	b21a      	sxth	r2, r3
 8005594:	7d7b      	ldrb	r3, [r7, #21]
 8005596:	b21b      	sxth	r3, r3
 8005598:	4313      	orrs	r3, r2
 800559a:	b21b      	sxth	r3, r3
 800559c:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t rawHum = ((uint16_t)buf[3] << 8) | buf[4];
 800559e:	7dfb      	ldrb	r3, [r7, #23]
 80055a0:	021b      	lsls	r3, r3, #8
 80055a2:	b21a      	sxth	r2, r3
 80055a4:	7e3b      	ldrb	r3, [r7, #24]
 80055a6:	b21b      	sxth	r3, r3
 80055a8:	4313      	orrs	r3, r2
 80055aa:	b21b      	sxth	r3, r3
 80055ac:	84bb      	strh	r3, [r7, #36]	; 0x24
	humid = 100.0 * (float)rawHum / 65535.0;
 80055ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055b0:	ee07 3a90 	vmov	s15, r3
 80055b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055b8:	ee17 0a90 	vmov	r0, s15
 80055bc:	f7fa ffc4 	bl	8000548 <__aeabi_f2d>
 80055c0:	f04f 0200 	mov.w	r2, #0
 80055c4:	4b32      	ldr	r3, [pc, #200]	; (8005690 <sht31_read+0x128>)
 80055c6:	f7fb f817 	bl	80005f8 <__aeabi_dmul>
 80055ca:	4603      	mov	r3, r0
 80055cc:	460c      	mov	r4, r1
 80055ce:	4618      	mov	r0, r3
 80055d0:	4621      	mov	r1, r4
 80055d2:	a32d      	add	r3, pc, #180	; (adr r3, 8005688 <sht31_read+0x120>)
 80055d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d8:	f7fb f938 	bl	800084c <__aeabi_ddiv>
 80055dc:	4603      	mov	r3, r0
 80055de:	460c      	mov	r4, r1
 80055e0:	4618      	mov	r0, r3
 80055e2:	4621      	mov	r1, r4
 80055e4:	f7fb fb00 	bl	8000be8 <__aeabi_d2f>
 80055e8:	4603      	mov	r3, r0
 80055ea:	623b      	str	r3, [r7, #32]
	temp = -45.0 + 175 * (float)rawTemp / 65535.0;
 80055ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80055ee:	ee07 3a90 	vmov	s15, r3
 80055f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055f6:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8005694 <sht31_read+0x12c>
 80055fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055fe:	ee17 0a90 	vmov	r0, s15
 8005602:	f7fa ffa1 	bl	8000548 <__aeabi_f2d>
 8005606:	a320      	add	r3, pc, #128	; (adr r3, 8005688 <sht31_read+0x120>)
 8005608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560c:	f7fb f91e 	bl	800084c <__aeabi_ddiv>
 8005610:	4603      	mov	r3, r0
 8005612:	460c      	mov	r4, r1
 8005614:	4618      	mov	r0, r3
 8005616:	4621      	mov	r1, r4
 8005618:	f04f 0200 	mov.w	r2, #0
 800561c:	4b1e      	ldr	r3, [pc, #120]	; (8005698 <sht31_read+0x130>)
 800561e:	f7fa fe33 	bl	8000288 <__aeabi_dsub>
 8005622:	4603      	mov	r3, r0
 8005624:	460c      	mov	r4, r1
 8005626:	4618      	mov	r0, r3
 8005628:	4621      	mov	r1, r4
 800562a:	f7fb fadd 	bl	8000be8 <__aeabi_d2f>
 800562e:	4603      	mov	r3, r0
 8005630:	61fb      	str	r3, [r7, #28]
	//printf("temperature is %4.2f deg\n",temp);
	//printf("humidity is %4.2f perc\n",humid);
	dat[0] = temp;
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	69fa      	ldr	r2, [r7, #28]
 8005636:	601a      	str	r2, [r3, #0]
	dat[1] = humid;
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	3304      	adds	r3, #4
 800563c:	6a3a      	ldr	r2, [r7, #32]
 800563e:	601a      	str	r2, [r3, #0]
	dat_raw[0] = rawTemp;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005644:	801a      	strh	r2, [r3, #0]
	dat_raw[1] = rawHum;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	3302      	adds	r3, #2
 800564a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800564c:	801a      	strh	r2, [r3, #0]

	uint16_t REG = 0x2416;
 800564e:	f242 4316 	movw	r3, #9238	; 0x2416
 8005652:	837b      	strh	r3, [r7, #26]
	buf[0] = (uint8_t)(REG >> 8);
 8005654:	8b7b      	ldrh	r3, [r7, #26]
 8005656:	0a1b      	lsrs	r3, r3, #8
 8005658:	b29b      	uxth	r3, r3
 800565a:	b2db      	uxtb	r3, r3
 800565c:	753b      	strb	r3, [r7, #20]
	buf[1] = (uint8_t)REG;
 800565e:	8b7b      	ldrh	r3, [r7, #26]
 8005660:	b2db      	uxtb	r3, r3
 8005662:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 2, dev->delay);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6858      	ldr	r0, [r3, #4]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	b299      	uxth	r1, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	7a1b      	ldrb	r3, [r3, #8]
 8005672:	f107 0214 	add.w	r2, r7, #20
 8005676:	9300      	str	r3, [sp, #0]
 8005678:	2302      	movs	r3, #2
 800567a:	f003 fcff 	bl	800907c <HAL_I2C_Master_Transmit>

};
 800567e:	bf00      	nop
 8005680:	372c      	adds	r7, #44	; 0x2c
 8005682:	46bd      	mov	sp, r7
 8005684:	bd90      	pop	{r4, r7, pc}
 8005686:	bf00      	nop
 8005688:	00000000 	.word	0x00000000
 800568c:	40efffe0 	.word	0x40efffe0
 8005690:	40590000 	.word	0x40590000
 8005694:	432f0000 	.word	0x432f0000
 8005698:	40468000 	.word	0x40468000

0800569c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800569c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80056d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80056a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80056a2:	e003      	b.n	80056ac <LoopCopyDataInit>

080056a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80056a4:	4b0c      	ldr	r3, [pc, #48]	; (80056d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80056a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80056a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80056aa:	3104      	adds	r1, #4

080056ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80056ac:	480b      	ldr	r0, [pc, #44]	; (80056dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80056ae:	4b0c      	ldr	r3, [pc, #48]	; (80056e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80056b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80056b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80056b4:	d3f6      	bcc.n	80056a4 <CopyDataInit>
  ldr  r2, =_sbss
 80056b6:	4a0b      	ldr	r2, [pc, #44]	; (80056e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80056b8:	e002      	b.n	80056c0 <LoopFillZerobss>

080056ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80056ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80056bc:	f842 3b04 	str.w	r3, [r2], #4

080056c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80056c0:	4b09      	ldr	r3, [pc, #36]	; (80056e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80056c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80056c4:	d3f9      	bcc.n	80056ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80056c6:	f7fe fdcb 	bl	8004260 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80056ca:	f00b f9c5 	bl	8010a58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80056ce:	f7fc ffb3 	bl	8002638 <main>
  bx  lr    
 80056d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80056d4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80056d8:	08016fb0 	.word	0x08016fb0
  ldr  r0, =_sdata
 80056dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80056e0:	2000034c 	.word	0x2000034c
  ldr  r2, =_sbss
 80056e4:	20000350 	.word	0x20000350
  ldr  r3, = _ebss
 80056e8:	2001023c 	.word	0x2001023c

080056ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80056ec:	e7fe      	b.n	80056ec <ADC_IRQHandler>
	...

080056f0 <init_env>:
#include "../../Inc/Sim_Con/env.h"

void init_env(env_t *env) {
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
	/* init constants */
	calibrate_env(env, PRESSURE_REFERENCE, TEMPERATURE_REFERENCE);
 80056f8:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
 80056fc:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8005718 <init_env+0x28>
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 f80d 	bl	8005720 <calibrate_env>
	update_env(env, TEMPERATURE_REFERENCE);
 8005706:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f82c 	bl	8005768 <update_env>
}
 8005710:	bf00      	nop
 8005712:	3708      	adds	r7, #8
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	47c5e680 	.word	0x47c5e680
 800571c:	00000000 	.word	0x00000000

08005720 <calibrate_env>:

void calibrate_env(env_t *env, float p_g, float T_g) {
 8005720:	b590      	push	{r4, r7, lr}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	ed87 0a02 	vstr	s0, [r7, #8]
 800572c:	edc7 0a01 	vstr	s1, [r7, #4]
	env->T_g = T_g + T_0; // input is temperature in °C
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f7fa ff09 	bl	8000548 <__aeabi_f2d>
 8005736:	a30a      	add	r3, pc, #40	; (adr r3, 8005760 <calibrate_env+0x40>)
 8005738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573c:	f7fa fda6 	bl	800028c <__adddf3>
 8005740:	4603      	mov	r3, r0
 8005742:	460c      	mov	r4, r1
 8005744:	4618      	mov	r0, r3
 8005746:	4621      	mov	r1, r4
 8005748:	f7fb fa4e 	bl	8000be8 <__aeabi_d2f>
 800574c:	4602      	mov	r2, r0
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	605a      	str	r2, [r3, #4]
	env->p_g = p_g; //
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	601a      	str	r2, [r3, #0]
}
 8005758:	bf00      	nop
 800575a:	3714      	adds	r7, #20
 800575c:	46bd      	mov	sp, r7
 800575e:	bd90      	pop	{r4, r7, pc}
 8005760:	66666666 	.word	0x66666666
 8005764:	40711266 	.word	0x40711266

08005768 <update_env>:

void update_env(env_t *env, float T) {
 8005768:	b590      	push	{r4, r7, lr}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	ed87 0a00 	vstr	s0, [r7]
	env->T = T + T_0; // input is temperature in °C and property is temperature in °K
 8005774:	6838      	ldr	r0, [r7, #0]
 8005776:	f7fa fee7 	bl	8000548 <__aeabi_f2d>
 800577a:	a317      	add	r3, pc, #92	; (adr r3, 80057d8 <update_env+0x70>)
 800577c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005780:	f7fa fd84 	bl	800028c <__adddf3>
 8005784:	4603      	mov	r3, r0
 8005786:	460c      	mov	r4, r1
 8005788:	4618      	mov	r0, r3
 800578a:	4621      	mov	r1, r4
 800578c:	f7fb fa2c 	bl	8000be8 <__aeabi_d2f>
 8005790:	4602      	mov	r2, r0
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	609a      	str	r2, [r3, #8]
	env->C = powf(GAMMA * R_0 * env->T, 0.5);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	4618      	mov	r0, r3
 800579c:	f7fa fed4 	bl	8000548 <__aeabi_f2d>
 80057a0:	a30f      	add	r3, pc, #60	; (adr r3, 80057e0 <update_env+0x78>)
 80057a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a6:	f7fa ff27 	bl	80005f8 <__aeabi_dmul>
 80057aa:	4603      	mov	r3, r0
 80057ac:	460c      	mov	r4, r1
 80057ae:	4618      	mov	r0, r3
 80057b0:	4621      	mov	r1, r4
 80057b2:	f7fb fa19 	bl	8000be8 <__aeabi_d2f>
 80057b6:	4603      	mov	r3, r0
 80057b8:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80057bc:	ee00 3a10 	vmov	s0, r3
 80057c0:	f00f fb64 	bl	8014e8c <powf>
 80057c4:	eef0 7a40 	vmov.f32	s15, s0
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80057ce:	bf00      	nop
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd90      	pop	{r4, r7, pc}
 80057d6:	bf00      	nop
 80057d8:	66666666 	.word	0x66666666
 80057dc:	40711266 	.word	0x40711266
 80057e0:	8c1557b7 	.word	0x8c1557b7
 80057e4:	40791e2f 	.word	0x40791e2f

080057e8 <mach_number>:

float mach_number(env_t *env, float V_x) {
 80057e8:	b480      	push	{r7}
 80057ea:	b085      	sub	sp, #20
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	ed87 0a00 	vstr	s0, [r7]
	float mach_number = fabsf(V_x) / env->C;
 80057f4:	edd7 7a00 	vldr	s15, [r7]
 80057f8:	eef0 6ae7 	vabs.f32	s13, s15
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	ed93 7a03 	vldr	s14, [r3, #12]
 8005802:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005806:	edc7 7a03 	vstr	s15, [r7, #12]
	return mach_number;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	ee07 3a90 	vmov	s15, r3
}
 8005810:	eeb0 0a67 	vmov.f32	s0, s15
 8005814:	3714      	adds	r7, #20
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
	...

08005820 <pressure2altitudeAGL>:

void pressure2altitudeAGL(env_t *env, int n, float p[n], bool p_active[n], float h[n]) {
 8005820:	b5b0      	push	{r4, r5, r7, lr}
 8005822:	b086      	sub	sp, #24
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
 800582c:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 800582e:	2300      	movs	r3, #0
 8005830:	617b      	str	r3, [r7, #20]
 8005832:	e043      	b.n	80058bc <pressure2altitudeAGL+0x9c>
		if (p_active[i]) {
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	683a      	ldr	r2, [r7, #0]
 8005838:	4413      	add	r3, r2
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d03a      	beq.n	80058b6 <pressure2altitudeAGL+0x96>
			/* original implementation */
			h[i] = env->T_g / T_GRAD * (1 - powf(p[i] / env->p_g, R_0 * T_GRAD / GRAVITATION));
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	4618      	mov	r0, r3
 8005846:	f7fa fe7f 	bl	8000548 <__aeabi_f2d>
 800584a:	a322      	add	r3, pc, #136	; (adr r3, 80058d4 <pressure2altitudeAGL+0xb4>)
 800584c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005850:	f7fa fffc 	bl	800084c <__aeabi_ddiv>
 8005854:	4603      	mov	r3, r0
 8005856:	460c      	mov	r4, r1
 8005858:	4625      	mov	r5, r4
 800585a:	461c      	mov	r4, r3
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	4413      	add	r3, r2
 8005864:	ed93 7a00 	vldr	s14, [r3]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	edd3 7a00 	vldr	s15, [r3]
 800586e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005872:	eddf 0a17 	vldr	s1, [pc, #92]	; 80058d0 <pressure2altitudeAGL+0xb0>
 8005876:	eeb0 0a66 	vmov.f32	s0, s13
 800587a:	f00f fb07 	bl	8014e8c <powf>
 800587e:	eeb0 7a40 	vmov.f32	s14, s0
 8005882:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005886:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800588a:	ee17 0a90 	vmov	r0, s15
 800588e:	f7fa fe5b 	bl	8000548 <__aeabi_f2d>
 8005892:	4602      	mov	r2, r0
 8005894:	460b      	mov	r3, r1
 8005896:	4620      	mov	r0, r4
 8005898:	4629      	mov	r1, r5
 800589a:	f7fa fead 	bl	80005f8 <__aeabi_dmul>
 800589e:	4603      	mov	r3, r0
 80058a0:	460c      	mov	r4, r1
 80058a2:	4618      	mov	r0, r3
 80058a4:	4621      	mov	r1, r4
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058ac:	18d4      	adds	r4, r2, r3
 80058ae:	f7fb f99b 	bl	8000be8 <__aeabi_d2f>
 80058b2:	4603      	mov	r3, r0
 80058b4:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < n; i++) {
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	3301      	adds	r3, #1
 80058ba:	617b      	str	r3, [r7, #20]
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	dbb7      	blt.n	8005834 <pressure2altitudeAGL+0x14>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// h[i] = env->T_g / T_GRAD * (1 - expf(logf(p[i] / env->p_g) * R_0 * env->T_grad / GRAVITATION);
		}
	}
}
 80058c4:	bf00      	nop
 80058c6:	3718      	adds	r7, #24
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bdb0      	pop	{r4, r5, r7, pc}
 80058cc:	f3af 8000 	nop.w
 80058d0:	3e42c4dc 	.word	0x3e42c4dc
 80058d4:	76c8b439 	.word	0x76c8b439
 80058d8:	3f7a9fbe 	.word	0x3f7a9fbe
 80058dc:	00000000 	.word	0x00000000

080058e0 <altitudeAGL2pressure>:

void altitudeAGL2pressure(env_t *env, int n, float h[n], bool h_active[n], float p[n]) {
 80058e0:	b5b0      	push	{r4, r5, r7, lr}
 80058e2:	ed2d 8b02 	vpush	{d8}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
 80058f0:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 80058f2:	2300      	movs	r3, #0
 80058f4:	617b      	str	r3, [r7, #20]
 80058f6:	e047      	b.n	8005988 <altitudeAGL2pressure+0xa8>
		if (h_active[i]) {
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	683a      	ldr	r2, [r7, #0]
 80058fc:	4413      	add	r3, r2
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d03e      	beq.n	8005982 <altitudeAGL2pressure+0xa2>
			/* original implementation */
			p[i] = env->p_g * powf((1 - T_GRAD * h[i] / env->T_g), GRAVITATION / (R_0 * T_GRAD));
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	ed93 8a00 	vldr	s16, [r3]
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	4413      	add	r3, r2
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4618      	mov	r0, r3
 8005916:	f7fa fe17 	bl	8000548 <__aeabi_f2d>
 800591a:	a323      	add	r3, pc, #140	; (adr r3, 80059a8 <altitudeAGL2pressure+0xc8>)
 800591c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005920:	f7fa fe6a 	bl	80005f8 <__aeabi_dmul>
 8005924:	4603      	mov	r3, r0
 8005926:	460c      	mov	r4, r1
 8005928:	4625      	mov	r5, r4
 800592a:	461c      	mov	r4, r3
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	4618      	mov	r0, r3
 8005932:	f7fa fe09 	bl	8000548 <__aeabi_f2d>
 8005936:	4602      	mov	r2, r0
 8005938:	460b      	mov	r3, r1
 800593a:	4620      	mov	r0, r4
 800593c:	4629      	mov	r1, r5
 800593e:	f7fa ff85 	bl	800084c <__aeabi_ddiv>
 8005942:	4603      	mov	r3, r0
 8005944:	460c      	mov	r4, r1
 8005946:	461a      	mov	r2, r3
 8005948:	4623      	mov	r3, r4
 800594a:	f04f 0000 	mov.w	r0, #0
 800594e:	4914      	ldr	r1, [pc, #80]	; (80059a0 <altitudeAGL2pressure+0xc0>)
 8005950:	f7fa fc9a 	bl	8000288 <__aeabi_dsub>
 8005954:	4603      	mov	r3, r0
 8005956:	460c      	mov	r4, r1
 8005958:	4618      	mov	r0, r3
 800595a:	4621      	mov	r1, r4
 800595c:	f7fb f944 	bl	8000be8 <__aeabi_d2f>
 8005960:	4603      	mov	r3, r0
 8005962:	eddf 0a10 	vldr	s1, [pc, #64]	; 80059a4 <altitudeAGL2pressure+0xc4>
 8005966:	ee00 3a10 	vmov	s0, r3
 800596a:	f00f fa8f 	bl	8014e8c <powf>
 800596e:	eef0 7a40 	vmov.f32	s15, s0
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005978:	4413      	add	r3, r2
 800597a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800597e:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < n; i++) {
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	3301      	adds	r3, #1
 8005986:	617b      	str	r3, [r7, #20]
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	429a      	cmp	r2, r3
 800598e:	dbb3      	blt.n	80058f8 <altitudeAGL2pressure+0x18>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// p[i] = env->p_g * expf(logf(1 - env->T_grad * h[i] / env->T_g) * GRAVITATION / (R_0 * env->T_grad));
		}
	}
}
 8005990:	bf00      	nop
 8005992:	3718      	adds	r7, #24
 8005994:	46bd      	mov	sp, r7
 8005996:	ecbd 8b02 	vpop	{d8}
 800599a:	bdb0      	pop	{r4, r5, r7, pc}
 800599c:	f3af 8000 	nop.w
 80059a0:	3ff00000 	.word	0x3ff00000
 80059a4:	40a83d87 	.word	0x40a83d87
 80059a8:	76c8b439 	.word	0x76c8b439
 80059ac:	3f7a9fbe 	.word	0x3f7a9fbe

080059b0 <altitude_gradient>:

float altitude_gradient(env_t *env, float p) {
 80059b0:	b5b0      	push	{r4, r5, r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	ed87 0a00 	vstr	s0, [r7]
	/* computes the altitude gradient per infitesimal change in pressure (dh/dp) at a specified pressure */
	/* original implementation */
	float h_grad = -R_0 * env->T_g / (GRAVITATION * env->p_g) * powf(p / env->p_g, R_0 * T_GRAD / GRAVITATION - 1);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7fa fdc1 	bl	8000548 <__aeabi_f2d>
 80059c6:	a323      	add	r3, pc, #140	; (adr r3, 8005a54 <altitude_gradient+0xa4>)
 80059c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059cc:	f7fa fe14 	bl	80005f8 <__aeabi_dmul>
 80059d0:	4603      	mov	r3, r0
 80059d2:	460c      	mov	r4, r1
 80059d4:	4625      	mov	r5, r4
 80059d6:	461c      	mov	r4, r3
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4618      	mov	r0, r3
 80059de:	f7fa fdb3 	bl	8000548 <__aeabi_f2d>
 80059e2:	a31e      	add	r3, pc, #120	; (adr r3, 8005a5c <altitude_gradient+0xac>)
 80059e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e8:	f7fa fe06 	bl	80005f8 <__aeabi_dmul>
 80059ec:	4602      	mov	r2, r0
 80059ee:	460b      	mov	r3, r1
 80059f0:	4620      	mov	r0, r4
 80059f2:	4629      	mov	r1, r5
 80059f4:	f7fa ff2a 	bl	800084c <__aeabi_ddiv>
 80059f8:	4603      	mov	r3, r0
 80059fa:	460c      	mov	r4, r1
 80059fc:	4625      	mov	r5, r4
 80059fe:	461c      	mov	r4, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	edd3 7a00 	vldr	s15, [r3]
 8005a06:	ed97 7a00 	vldr	s14, [r7]
 8005a0a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005a0e:	eddf 0a10 	vldr	s1, [pc, #64]	; 8005a50 <altitude_gradient+0xa0>
 8005a12:	eeb0 0a66 	vmov.f32	s0, s13
 8005a16:	f00f fa39 	bl	8014e8c <powf>
 8005a1a:	ee10 3a10 	vmov	r3, s0
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7fa fd92 	bl	8000548 <__aeabi_f2d>
 8005a24:	4602      	mov	r2, r0
 8005a26:	460b      	mov	r3, r1
 8005a28:	4620      	mov	r0, r4
 8005a2a:	4629      	mov	r1, r5
 8005a2c:	f7fa fde4 	bl	80005f8 <__aeabi_dmul>
 8005a30:	4603      	mov	r3, r0
 8005a32:	460c      	mov	r4, r1
 8005a34:	4618      	mov	r0, r3
 8005a36:	4621      	mov	r1, r4
 8005a38:	f7fb f8d6 	bl	8000be8 <__aeabi_d2f>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	60fb      	str	r3, [r7, #12]
	/* adapted implementation which can possibly speed up calculation and should have the same results */
	// float h_grad = - R_0 * env->T_g / (GRAVITATION * env->p_g) * expf(logf(p / env->p_g) * (R_0 * env->T_grad / GRAVITATION - 1));
	return h_grad;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	ee07 3a90 	vmov	s15, r3
}
 8005a46:	eeb0 0a67 	vmov.f32	s0, s15
 8005a4a:	3710      	adds	r7, #16
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bdb0      	pop	{r4, r5, r7, pc}
 8005a50:	bf4f4ec9 	.word	0xbf4f4ec9
 8005a54:	640f3ea7 	.word	0x640f3ea7
 8005a58:	c071f0fd 	.word	0xc071f0fd
 8005a5c:	51eb851f 	.word	0x51eb851f
 8005a60:	40239eb8 	.word	0x40239eb8
 8005a64:	00000000 	.word	0x00000000

08005a68 <detect_flight_phase>:
#include "../../Inc/Sim_Con/flight_phase_detection.h"

void detect_flight_phase(flight_phase_detection_t *flight_phase_detection, state_est_data_t *state_est_data, env_t *env)
{   
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]


    /* determine state transition events */
    switch (flight_phase_detection->flight_phase) {
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	2b05      	cmp	r3, #5
 8005a7c:	f200 8174 	bhi.w	8005d68 <detect_flight_phase+0x300>
 8005a80:	a201      	add	r2, pc, #4	; (adr r2, 8005a88 <detect_flight_phase+0x20>)
 8005a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a86:	bf00      	nop
 8005a88:	08005aa1 	.word	0x08005aa1
 8005a8c:	08005d69 	.word	0x08005d69
 8005a90:	08005b3b 	.word	0x08005b3b
 8005a94:	08005b87 	.word	0x08005b87
 8005a98:	08005bd3 	.word	0x08005bd3
 8005a9c:	08005c9f 	.word	0x08005c9f
        case IDLE:
            if (((float)(state_est_data->acceleration_rocket[0])) / 1000 > 20) {
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	ee07 3a90 	vmov	s15, r3
 8005aa8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005aac:	eddf 6ab7 	vldr	s13, [pc, #732]	; 8005d8c <detect_flight_phase+0x324>
 8005ab0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ab4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005ab8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ac0:	dd13      	ble.n	8005aea <detect_flight_phase+0x82>
                flight_phase_detection->num_samples_positive += 1;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	3301      	adds	r3, #1
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	b25a      	sxtb	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005ada:	2b03      	cmp	r3, #3
 8005adc:	dd05      	ble.n	8005aea <detect_flight_phase+0x82>
                    flight_phase_detection->flight_phase = THRUSTING;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2203      	movs	r2, #3
 8005ae2:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	721a      	strb	r2, [r3, #8]
                }
            }
            if (((float)(state_est_data->position_world[2])) / 1000 > 80) {
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	ee07 3a90 	vmov	s15, r3
 8005af2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005af6:	eddf 6aa5 	vldr	s13, [pc, #660]	; 8005d8c <detect_flight_phase+0x324>
 8005afa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005afe:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8005d7c <detect_flight_phase+0x314>
 8005b02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b0a:	dc00      	bgt.n	8005b0e <detect_flight_phase+0xa6>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = THRUSTING;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8005b0c:	e12e      	b.n	8005d6c <detect_flight_phase+0x304>
                flight_phase_detection->num_samples_positive += 1;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	3301      	adds	r3, #1
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	b25a      	sxtb	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005b26:	2b03      	cmp	r3, #3
 8005b28:	f340 8120 	ble.w	8005d6c <detect_flight_phase+0x304>
                    flight_phase_detection->flight_phase = THRUSTING;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2203      	movs	r2, #3
 8005b30:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	721a      	strb	r2, [r3, #8]
        break;
 8005b38:	e118      	b.n	8005d6c <detect_flight_phase+0x304>

        case THRUSTING:
            if (((float)(state_est_data->acceleration_rocket[0])) / 1000 < 0) {
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	ee07 3a90 	vmov	s15, r3
 8005b42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b46:	eddf 6a91 	vldr	s13, [pc, #580]	; 8005d8c <detect_flight_phase+0x324>
 8005b4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b56:	d400      	bmi.n	8005b5a <detect_flight_phase+0xf2>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = COASTING;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8005b58:	e10a      	b.n	8005d70 <detect_flight_phase+0x308>
                flight_phase_detection->num_samples_positive += 1;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	3301      	adds	r3, #1
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	b25a      	sxtb	r2, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005b72:	2b03      	cmp	r3, #3
 8005b74:	f340 80fc 	ble.w	8005d70 <detect_flight_phase+0x308>
                    flight_phase_detection->flight_phase = COASTING;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2204      	movs	r2, #4
 8005b7c:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	721a      	strb	r2, [r3, #8]
        break;
 8005b84:	e0f4      	b.n	8005d70 <detect_flight_phase+0x308>
        
        case COASTING:
            if (((float)(state_est_data->velocity_world[2])) / 1000 < 0) {
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8a:	ee07 3a90 	vmov	s15, r3
 8005b8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b92:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8005d8c <detect_flight_phase+0x324>
 8005b96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ba2:	d400      	bmi.n	8005ba6 <detect_flight_phase+0x13e>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = DESCENT;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8005ba4:	e0e6      	b.n	8005d74 <detect_flight_phase+0x30c>
                flight_phase_detection->num_samples_positive += 1;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	3301      	adds	r3, #1
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	b25a      	sxtb	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005bbe:	2b03      	cmp	r3, #3
 8005bc0:	f340 80d8 	ble.w	8005d74 <detect_flight_phase+0x30c>
                    flight_phase_detection->flight_phase = DESCENT;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2205      	movs	r2, #5
 8005bc8:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	721a      	strb	r2, [r3, #8]
        break;
 8005bd0:	e0d0      	b.n	8005d74 <detect_flight_phase+0x30c>

        case DESCENT:
            /* we assume a ballistic descent when the absolute velocity of the rocket in vertical direction is larger than 40 m/s */
            if (fabs(((float)(state_est_data->velocity_world[2])) / 1000) > 60) {
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd6:	ee07 3a90 	vmov	s15, r3
 8005bda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005bde:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8005d8c <detect_flight_phase+0x324>
 8005be2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005be6:	eef0 7ae7 	vabs.f32	s15, s15
 8005bea:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8005d80 <detect_flight_phase+0x318>
 8005bee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bf6:	dd15      	ble.n	8005c24 <detect_flight_phase+0x1bc>
                flight_phase_detection->num_samples_positive += 1;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	3301      	adds	r3, #1
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	b25a      	sxtb	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005c10:	2b03      	cmp	r3, #3
 8005c12:	f340 80b1 	ble.w	8005d78 <detect_flight_phase+0x310>
                    flight_phase_detection->flight_phase = BALLISTIC_DESCENT;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2206      	movs	r2, #6
 8005c1a:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = RECOVERY;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8005c22:	e0a9      	b.n	8005d78 <detect_flight_phase+0x310>
            else if (fabs(((float)(state_est_data->velocity_rocket[0])) / 1000) < 2 && fabs(((float)(state_est_data->position_world[2])) / 1000) < 500) {
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	ee07 3a90 	vmov	s15, r3
 8005c2c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c30:	eddf 6a56 	vldr	s13, [pc, #344]	; 8005d8c <detect_flight_phase+0x324>
 8005c34:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c38:	eef0 7ae7 	vabs.f32	s15, s15
 8005c3c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005c40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c48:	d400      	bmi.n	8005c4c <detect_flight_phase+0x1e4>
        break;
 8005c4a:	e095      	b.n	8005d78 <detect_flight_phase+0x310>
            else if (fabs(((float)(state_est_data->velocity_rocket[0])) / 1000) < 2 && fabs(((float)(state_est_data->position_world[2])) / 1000) < 500) {
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	ee07 3a90 	vmov	s15, r3
 8005c54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c58:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8005d8c <detect_flight_phase+0x324>
 8005c5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c60:	eef0 7ae7 	vabs.f32	s15, s15
 8005c64:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8005d84 <detect_flight_phase+0x31c>
 8005c68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c70:	d400      	bmi.n	8005c74 <detect_flight_phase+0x20c>
        break;
 8005c72:	e081      	b.n	8005d78 <detect_flight_phase+0x310>
                flight_phase_detection->num_samples_positive += 1;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	3301      	adds	r3, #1
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	b25a      	sxtb	r2, r3
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005c8c:	2b03      	cmp	r3, #3
 8005c8e:	dd73      	ble.n	8005d78 <detect_flight_phase+0x310>
                    flight_phase_detection->flight_phase = RECOVERY;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2207      	movs	r2, #7
 8005c94:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	721a      	strb	r2, [r3, #8]
        break;
 8005c9c:	e06c      	b.n	8005d78 <detect_flight_phase+0x310>

        case BALLISTIC_DESCENT:
            /* we assume a touchdown event when the absolute value of the altitude is smaller than 500m 
               and the absolute velocity of the rocket is smaller than 2 m/s */
            if (fabs(((float)(state_est_data->velocity_rocket[0])) / 1000) < 2 && fabs(((float)(state_est_data->position_world[2])) / 1000) < 500) {
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	ee07 3a90 	vmov	s15, r3
 8005ca6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005caa:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005d8c <detect_flight_phase+0x324>
 8005cae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005cb2:	eef0 7ae7 	vabs.f32	s15, s15
 8005cb6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005cba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cc2:	d527      	bpl.n	8005d14 <detect_flight_phase+0x2ac>
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	ee07 3a90 	vmov	s15, r3
 8005ccc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cd0:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8005d8c <detect_flight_phase+0x324>
 8005cd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005cd8:	eef0 7ae7 	vabs.f32	s15, s15
 8005cdc:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8005d84 <detect_flight_phase+0x31c>
 8005ce0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ce8:	d514      	bpl.n	8005d14 <detect_flight_phase+0x2ac>
                flight_phase_detection->num_samples_positive += 1;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	b25a      	sxtb	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005d02:	2b03      	cmp	r3, #3
 8005d04:	dd2f      	ble.n	8005d66 <detect_flight_phase+0x2fe>
                    flight_phase_detection->flight_phase = RECOVERY;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2207      	movs	r2, #7
 8005d0a:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8005d12:	e028      	b.n	8005d66 <detect_flight_phase+0x2fe>
                }
            }
            /* we assume a normal descent with parachute when the absolute velocity of the rocket in vertical direction is smaller than 40 m/s */
            else if (fabs(((float)(state_est_data->velocity_world[2])) / 1000) < 40) {
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d18:	ee07 3a90 	vmov	s15, r3
 8005d1c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d20:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8005d8c <detect_flight_phase+0x324>
 8005d24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005d28:	eef0 7ae7 	vabs.f32	s15, s15
 8005d2c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8005d88 <detect_flight_phase+0x320>
 8005d30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d38:	d400      	bmi.n	8005d3c <detect_flight_phase+0x2d4>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = DESCENT;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8005d3a:	e029      	b.n	8005d90 <detect_flight_phase+0x328>
                flight_phase_detection->num_samples_positive += 1;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	3301      	adds	r3, #1
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	b25a      	sxtb	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005d54:	2b03      	cmp	r3, #3
 8005d56:	dd1b      	ble.n	8005d90 <detect_flight_phase+0x328>
                    flight_phase_detection->flight_phase = DESCENT;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2205      	movs	r2, #5
 8005d5c:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	721a      	strb	r2, [r3, #8]
        break;
 8005d64:	e014      	b.n	8005d90 <detect_flight_phase+0x328>
 8005d66:	e013      	b.n	8005d90 <detect_flight_phase+0x328>

        default:
        break;
 8005d68:	bf00      	nop
 8005d6a:	e012      	b.n	8005d92 <detect_flight_phase+0x32a>
        break;
 8005d6c:	bf00      	nop
 8005d6e:	e010      	b.n	8005d92 <detect_flight_phase+0x32a>
        break;
 8005d70:	bf00      	nop
 8005d72:	e00e      	b.n	8005d92 <detect_flight_phase+0x32a>
        break;
 8005d74:	bf00      	nop
 8005d76:	e00c      	b.n	8005d92 <detect_flight_phase+0x32a>
        break;
 8005d78:	bf00      	nop
 8005d7a:	e00a      	b.n	8005d92 <detect_flight_phase+0x32a>
 8005d7c:	42a00000 	.word	0x42a00000
 8005d80:	42700000 	.word	0x42700000
 8005d84:	43fa0000 	.word	0x43fa0000
 8005d88:	42200000 	.word	0x42200000
 8005d8c:	447a0000 	.word	0x447a0000
        break;
 8005d90:	bf00      	nop
    }

    flight_phase_detection->mach_number = mach_number(env, ((float) state_est_data->velocity_rocket[0]) / 1000);
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	ee07 3a90 	vmov	s15, r3
 8005d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d9e:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8005d8c <detect_flight_phase+0x324>
 8005da2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005da6:	eeb0 0a66 	vmov.f32	s0, s13
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7ff fd1c 	bl	80057e8 <mach_number>
 8005db0:	eef0 7a40 	vmov.f32	s15, s0
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	edc3 7a01 	vstr	s15, [r3, #4]

    /* determine the mach regime */
    if (flight_phase_detection->mach_number >= 1.3) {
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7fa fbc2 	bl	8000548 <__aeabi_f2d>
 8005dc4:	a312      	add	r3, pc, #72	; (adr r3, 8005e10 <detect_flight_phase+0x3a8>)
 8005dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dca:	f7fa fe9b 	bl	8000b04 <__aeabi_dcmpge>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d003      	beq.n	8005ddc <detect_flight_phase+0x374>
        flight_phase_detection->mach_regime = SUPERSONIC;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2203      	movs	r2, #3
 8005dd8:	705a      	strb	r2, [r3, #1]
    {
        flight_phase_detection->mach_regime = SUBSONIC;
    }
    
    
}
 8005dda:	e013      	b.n	8005e04 <detect_flight_phase+0x39c>
    } else if (flight_phase_detection->mach_number >= 0.8)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7fa fbb1 	bl	8000548 <__aeabi_f2d>
 8005de6:	a30c      	add	r3, pc, #48	; (adr r3, 8005e18 <detect_flight_phase+0x3b0>)
 8005de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dec:	f7fa fe8a 	bl	8000b04 <__aeabi_dcmpge>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d003      	beq.n	8005dfe <detect_flight_phase+0x396>
        flight_phase_detection->mach_regime = TRANSONIC;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2202      	movs	r2, #2
 8005dfa:	705a      	strb	r2, [r3, #1]
}
 8005dfc:	e002      	b.n	8005e04 <detect_flight_phase+0x39c>
        flight_phase_detection->mach_regime = SUBSONIC;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2201      	movs	r2, #1
 8005e02:	705a      	strb	r2, [r3, #1]
}
 8005e04:	bf00      	nop
 8005e06:	3710      	adds	r7, #16
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	f3af 8000 	nop.w
 8005e10:	cccccccd 	.word	0xcccccccd
 8005e14:	3ff4cccc 	.word	0x3ff4cccc
 8005e18:	9999999a 	.word	0x9999999a
 8005e1c:	3fe99999 	.word	0x3fe99999

08005e20 <reset_flight_phase_detection>:

void reset_flight_phase_detection(flight_phase_detection_t *flight_phase_detection){
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
    flight_phase_detection->flight_phase = IDLE;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	701a      	strb	r2, [r3, #0]
    flight_phase_detection->mach_regime = SUBSONIC;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	705a      	strb	r2, [r3, #1]
    flight_phase_detection->mach_number = 0.0;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f04f 0200 	mov.w	r2, #0
 8005e3a:	605a      	str	r2, [r3, #4]
    flight_phase_detection->num_samples_positive = 0;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	721a      	strb	r2, [r3, #8]
 8005e42:	bf00      	nop
 8005e44:	370c      	adds	r7, #12
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
	...

08005e50 <reset_kf_state>:
#include "../../Inc/Sim_Con/kf.h"

void reset_kf_state(kf_state_t *kf_state){
 8005e50:	b5b0      	push	{r4, r5, r7, lr}
 8005e52:	b0bc      	sub	sp, #240	; 0xf0
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{1.25E-5}, {5.0E-3}, {0.0}};
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
    } else if (STATE_ESTIMATION_FREQUENCY == 100) { 
        float A_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-0, 1.0E-2, 5.0E-5}, {0, 1.0E-0, 1.0E-2}, {0.0, 0.0, 1.0E-0}};
 8005e58:	4b44      	ldr	r3, [pc, #272]	; (8005f6c <reset_kf_state+0x11c>)
 8005e5a:	f107 040c 	add.w	r4, r7, #12
 8005e5e:	461d      	mov	r5, r3
 8005e60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e68:	682b      	ldr	r3, [r5, #0]
 8005e6a:	6023      	str	r3, [r4, #0]
        float B_init[NUMBER_STATES][NUMBER_INPUTS] = {{5.0E-5}, {1.0E-2}, {0.0}};
 8005e6c:	4a40      	ldr	r2, [pc, #256]	; (8005f70 <reset_kf_state+0x120>)
 8005e6e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8005e72:	ca07      	ldmia	r2, {r0, r1, r2}
 8005e74:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{5.0E-5}, {1.0E-2}, {0.0}};
 8005e78:	4a3d      	ldr	r2, [pc, #244]	; (8005f70 <reset_kf_state+0x120>)
 8005e7a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8005e7e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005e80:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f107 010c 	add.w	r1, r7, #12
 8005e8a:	2224      	movs	r2, #36	; 0x24
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f00a fe07 	bl	8010aa0 <memcpy>
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	3348      	adds	r3, #72	; 0x48
 8005e96:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8005e9a:	220c      	movs	r2, #12
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f00a fdff 	bl	8010aa0 <memcpy>
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	3354      	adds	r3, #84	; 0x54
 8005ea6:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8005eaa:	220c      	movs	r2, #12
 8005eac:	4618      	mov	r0, r3
 8005eae:	f00a fdf7 	bl	8010aa0 <memcpy>
        memset(kf_state->Ad, 0, sizeof(kf_state->Ad));
        memset(kf_state->Bd, 0, sizeof(kf_state->Bd));
        memset(kf_state->Gd, 0, sizeof(kf_state->Gd));
    }

	float x_est_init[NUMBER_STATES] = {0, 0, 0};
 8005eb2:	f04f 0300 	mov.w	r3, #0
 8005eb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005eba:	f04f 0300 	mov.w	r3, #0
 8005ebe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ec2:	f04f 0300 	mov.w	r3, #0
 8005ec6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-9, 0, 0}, {0, 1.0E-12, 0}, {0, 0, 0}};
 8005eca:	4b2a      	ldr	r3, [pc, #168]	; (8005f74 <reset_kf_state+0x124>)
 8005ecc:	f107 04c0 	add.w	r4, r7, #192	; 0xc0
 8005ed0:	461d      	mov	r5, r3
 8005ed2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ed4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ed6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005ed8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005eda:	682b      	ldr	r3, [r5, #0]
 8005edc:	6023      	str	r3, [r4, #0]

    memcpy(kf_state->x_est, x_est_init, sizeof(x_est_init));
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	33c4      	adds	r3, #196	; 0xc4
 8005ee2:	f107 01e4 	add.w	r1, r7, #228	; 0xe4
 8005ee6:	220c      	movs	r2, #12
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f00a fdd9 	bl	8010aa0 <memcpy>
    memcpy(kf_state->P_est, P_est_init, sizeof(P_est_init));
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	33d0      	adds	r3, #208	; 0xd0
 8005ef2:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8005ef6:	2224      	movs	r2, #36	; 0x24
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f00a fdd1 	bl	8010aa0 <memcpy>

    memset(kf_state->Q, 0, NUMBER_PROCESS_NOISE*NUMBER_PROCESS_NOISE*sizeof(kf_state->Q[0][0]));
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	339c      	adds	r3, #156	; 0x9c
 8005f02:	2204      	movs	r2, #4
 8005f04:	2100      	movs	r1, #0
 8005f06:	4618      	mov	r0, r3
 8005f08:	f00a fdd5 	bl	8010ab6 <memset>
    memset(kf_state->R, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->R[0][0]));
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	33a0      	adds	r3, #160	; 0xa0
 8005f10:	2210      	movs	r2, #16
 8005f12:	2100      	movs	r1, #0
 8005f14:	4618      	mov	r0, r3
 8005f16:	f00a fdce 	bl	8010ab6 <memset>

    memset(kf_state->z, 0, NUMBER_MEASUREMENTS*sizeof(kf_state->z[0]));
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8005f20:	2208      	movs	r2, #8
 8005f22:	2100      	movs	r1, #0
 8005f24:	4618      	mov	r0, r3
 8005f26:	f00a fdc6 	bl	8010ab6 <memset>
    memset(kf_state->z_active, false, NUMBER_MEASUREMENTS*sizeof(kf_state->z_active[0]));
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8005f30:	2202      	movs	r2, #2
 8005f32:	2100      	movs	r1, #0
 8005f34:	4618      	mov	r0, r3
 8005f36:	f00a fdbe 	bl	8010ab6 <memset>
    kf_state->num_z_active = 0;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194

    transpose(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->Ad_T);
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	3324      	adds	r3, #36	; 0x24
 8005f48:	2103      	movs	r1, #3
 8005f4a:	2003      	movs	r0, #3
 8005f4c:	f000 fe14 	bl	8006b78 <transpose>
    transpose(NUMBER_STATES, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Gd_T);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	3360      	adds	r3, #96	; 0x60
 8005f5a:	2101      	movs	r1, #1
 8005f5c:	2003      	movs	r0, #3
 8005f5e:	f000 fe0b 	bl	8006b78 <transpose>
}
 8005f62:	bf00      	nop
 8005f64:	37f0      	adds	r7, #240	; 0xf0
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bdb0      	pop	{r4, r5, r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	08016ac0 	.word	0x08016ac0
 8005f70:	08016ae4 	.word	0x08016ae4
 8005f74:	08016af0 	.word	0x08016af0

08005f78 <kf_prediction>:

void kf_prediction(kf_state_t *kf_state){
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b086      	sub	sp, #24
 8005f7c:	af04      	add	r7, sp, #16
 8005f7e:	6078      	str	r0, [r7, #4]
    /* Prediction Step */
    /* Calculation of x_priori */
    matvecprod(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->x_est, kf_state->x_priori, true);
 8005f80:	6879      	ldr	r1, [r7, #4]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	33f4      	adds	r3, #244	; 0xf4
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	9201      	str	r2, [sp, #4]
 8005f90:	9300      	str	r3, [sp, #0]
 8005f92:	4603      	mov	r3, r0
 8005f94:	460a      	mov	r2, r1
 8005f96:	2103      	movs	r1, #3
 8005f98:	2003      	movs	r0, #3
 8005f9a:	f001 f817 	bl	8006fcc <matvecprod>
    matvecprod(NUMBER_STATES, NUMBER_INPUTS, kf_state->Bd, kf_state->u, kf_state->x_priori, false);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	33f4      	adds	r3, #244	; 0xf4
 8005fae:	2200      	movs	r2, #0
 8005fb0:	9201      	str	r2, [sp, #4]
 8005fb2:	9300      	str	r3, [sp, #0]
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	460a      	mov	r2, r1
 8005fb8:	2101      	movs	r1, #1
 8005fba:	2003      	movs	r0, #3
 8005fbc:	f001 f806 	bl	8006fcc <matvecprod>

    /* Calculation of P_priori */
    /* P_priori = Ad * P_est_prior * Ad_T + Gd * Q * Gd_T */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->P_est, kf_state->Placeholder_Ad_mult_P_est, true);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	33d0      	adds	r3, #208	; 0xd0
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	f502 72cc 	add.w	r2, r2, #408	; 0x198
 8005fcc:	2101      	movs	r1, #1
 8005fce:	9102      	str	r1, [sp, #8]
 8005fd0:	9201      	str	r2, [sp, #4]
 8005fd2:	9300      	str	r3, [sp, #0]
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2203      	movs	r2, #3
 8005fd8:	2103      	movs	r1, #3
 8005fda:	2003      	movs	r0, #3
 8005fdc:	f000 ff5c 	bl	8006e98 <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Q, kf_state->Placeholder_Gd_mult_Q, true);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	339c      	adds	r3, #156	; 0x9c
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8005ff0:	2101      	movs	r1, #1
 8005ff2:	9102      	str	r1, [sp, #8]
 8005ff4:	9201      	str	r2, [sp, #4]
 8005ff6:	9300      	str	r3, [sp, #0]
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	2101      	movs	r1, #1
 8005ffe:	2003      	movs	r0, #3
 8006000:	f000 ff4a 	bl	8006e98 <matmul>

    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_Ad_mult_P_est, kf_state->Ad_T, kf_state->P_priori, true);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f503 70cc 	add.w	r0, r3, #408	; 0x198
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	3324      	adds	r3, #36	; 0x24
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006014:	2101      	movs	r1, #1
 8006016:	9102      	str	r1, [sp, #8]
 8006018:	9201      	str	r2, [sp, #4]
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	4603      	mov	r3, r0
 800601e:	2203      	movs	r2, #3
 8006020:	2103      	movs	r1, #3
 8006022:	2003      	movs	r0, #3
 8006024:	f000 ff38 	bl	8006e98 <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_STATES, kf_state->Placeholder_Gd_mult_Q, kf_state->Gd_T, kf_state->P_priori, false);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f503 70de 	add.w	r0, r3, #444	; 0x1bc
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	3360      	adds	r3, #96	; 0x60
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006038:	2100      	movs	r1, #0
 800603a:	9102      	str	r1, [sp, #8]
 800603c:	9201      	str	r2, [sp, #4]
 800603e:	9300      	str	r3, [sp, #0]
 8006040:	4603      	mov	r3, r0
 8006042:	2203      	movs	r2, #3
 8006044:	2101      	movs	r1, #1
 8006046:	2003      	movs	r0, #3
 8006048:	f000 ff26 	bl	8006e98 <matmul>
}
 800604c:	bf00      	nop
 800604e:	3708      	adds	r7, #8
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <select_kf_observation_matrices>:

void select_kf_observation_matrices(kf_state_t *kf_state){
 8006054:	b580      	push	{r7, lr}
 8006056:	b084      	sub	sp, #16
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
    memset(kf_state->H, 0, NUMBER_MEASUREMENTS*NUMBER_STATES*sizeof(kf_state->H[0][0]));
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	336c      	adds	r3, #108	; 0x6c
 8006060:	2218      	movs	r2, #24
 8006062:	2100      	movs	r1, #0
 8006064:	4618      	mov	r0, r3
 8006066:	f00a fd26 	bl	8010ab6 <memset>

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 800606a:	2300      	movs	r3, #0
 800606c:	60fb      	str	r3, [r7, #12]
 800606e:	e021      	b.n	80060b4 <select_kf_observation_matrices+0x60>
        if (kf_state->z_active[i]) {
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	4413      	add	r3, r2
 8006076:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00b      	beq.n	8006098 <select_kf_observation_matrices+0x44>
             /* activate contribution of measurement in measurement matrix */
            kf_state->H[i][0] = 1;
 8006080:	6879      	ldr	r1, [r7, #4]
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	4613      	mov	r3, r2
 8006086:	005b      	lsls	r3, r3, #1
 8006088:	4413      	add	r3, r2
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	440b      	add	r3, r1
 800608e:	336c      	adds	r3, #108	; 0x6c
 8006090:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006094:	601a      	str	r2, [r3, #0]
 8006096:	e00a      	b.n	80060ae <select_kf_observation_matrices+0x5a>
        } else {
            /* set contributed measurement covariance to zero */
            kf_state->R[i][i] = 0;
 8006098:	6879      	ldr	r1, [r7, #4]
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	4613      	mov	r3, r2
 800609e:	005b      	lsls	r3, r3, #1
 80060a0:	4413      	add	r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	440b      	add	r3, r1
 80060a6:	33a0      	adds	r3, #160	; 0xa0
 80060a8:	f04f 0200 	mov.w	r2, #0
 80060ac:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	3301      	adds	r3, #1
 80060b2:	60fb      	str	r3, [r7, #12]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	ddda      	ble.n	8006070 <select_kf_observation_matrices+0x1c>
        }
    }

    transpose(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->H_T);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	3384      	adds	r3, #132	; 0x84
 80060c4:	2103      	movs	r1, #3
 80060c6:	2002      	movs	r0, #2
 80060c8:	f000 fd56 	bl	8006b78 <transpose>
}
 80060cc:	bf00      	nop
 80060ce:	3710      	adds	r7, #16
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <kf_update>:

void kf_update(kf_state_t *kf_state) {
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af04      	add	r7, sp, #16
 80060da:	6078      	str	r0, [r7, #4]
    /* Update Step */
    /* y = z - H * x_priori */
    matvecprod(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->x_priori, kf_state->y, true);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80060ee:	2201      	movs	r2, #1
 80060f0:	9201      	str	r2, [sp, #4]
 80060f2:	9300      	str	r3, [sp, #0]
 80060f4:	4603      	mov	r3, r0
 80060f6:	460a      	mov	r2, r1
 80060f8:	2103      	movs	r1, #3
 80060fa:	2002      	movs	r0, #2
 80060fc:	f000 ff66 	bl	8006fcc <matvecprod>
    vecsub(NUMBER_MEASUREMENTS, kf_state->z, kf_state->y, kf_state->y);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f503 71a4 	add.w	r1, r3, #328	; 0x148
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006112:	2002      	movs	r0, #2
 8006114:	f000 fdaf 	bl	8006c76 <vecsub>

    /* S = H * P_priori * H_T + R */
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_STATES, kf_state->H, kf_state->P_priori, kf_state->Placeholder_H_mult_P_priori, true);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	f502 72e4 	add.w	r2, r2, #456	; 0x1c8
 800612a:	2101      	movs	r1, #1
 800612c:	9102      	str	r1, [sp, #8]
 800612e:	9201      	str	r2, [sp, #4]
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	4603      	mov	r3, r0
 8006134:	2203      	movs	r2, #3
 8006136:	2103      	movs	r1, #3
 8006138:	2002      	movs	r0, #2
 800613a:	f000 fead 	bl	8006e98 <matmul>
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_H_mult_P_priori, kf_state->H_T, kf_state->S, true);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f503 70e4 	add.w	r0, r3, #456	; 0x1c8
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	3384      	adds	r3, #132	; 0x84
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	f502 72ac 	add.w	r2, r2, #344	; 0x158
 800614e:	2101      	movs	r1, #1
 8006150:	9102      	str	r1, [sp, #8]
 8006152:	9201      	str	r2, [sp, #4]
 8006154:	9300      	str	r3, [sp, #0]
 8006156:	4603      	mov	r3, r0
 8006158:	2202      	movs	r2, #2
 800615a:	2103      	movs	r1, #3
 800615c:	2002      	movs	r0, #2
 800615e:	f000 fe9b 	bl	8006e98 <matmul>
    matadd(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->S, kf_state->R, kf_state->S);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f503 72ac 	add.w	r2, r3, #344	; 0x158
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006174:	9300      	str	r3, [sp, #0]
 8006176:	460b      	mov	r3, r1
 8006178:	2102      	movs	r1, #2
 800617a:	2002      	movs	r0, #2
 800617c:	f000 fda6 	bl	8006ccc <matadd>

    /* Calculate Pseudoinverse of covariance innovation */
    memset(kf_state->S_inv, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->S_inv[0][0]));
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006186:	2210      	movs	r2, #16
 8006188:	2100      	movs	r1, #0
 800618a:	4618      	mov	r0, r3
 800618c:	f00a fc93 	bl	8010ab6 <memset>
        matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_S_inv_3, kf_state->Placeholder_H_T_mult_R_inv, kf_state->S_inv, true);
        matsub(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->R_inv, kf_state->S_inv, kf_state->S_inv);
    } else {
        /* we use the regular inverse when the state dimension is larger than the number of measurements */
        /* the cholvesky inverse has a big O complexity of n^3 */
        cholesky_inverse(NUMBER_MEASUREMENTS, kf_state->S, kf_state->S_inv, LAMBDA);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f503 71ac 	add.w	r1, r3, #344	; 0x158
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800619c:	ed9f 0a42 	vldr	s0, [pc, #264]	; 80062a8 <kf_update+0x1d4>
 80061a0:	461a      	mov	r2, r3
 80061a2:	2002      	movs	r0, #2
 80061a4:	f001 f8de 	bl	8007364 <cholesky_inverse>
    }

    /* K  = P_priori * H_T * S_inv */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->P_priori, kf_state->H_T, kf_state->Placeholder_P_priori_mult_H_T, true);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f503 7080 	add.w	r0, r3, #256	; 0x100
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	3384      	adds	r3, #132	; 0x84
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	f502 72ec 	add.w	r2, r2, #472	; 0x1d8
 80061b8:	2101      	movs	r1, #1
 80061ba:	9102      	str	r1, [sp, #8]
 80061bc:	9201      	str	r2, [sp, #4]
 80061be:	9300      	str	r3, [sp, #0]
 80061c0:	4603      	mov	r3, r0
 80061c2:	2202      	movs	r2, #2
 80061c4:	2103      	movs	r1, #3
 80061c6:	2003      	movs	r0, #3
 80061c8:	f000 fe66 	bl	8006e98 <matmul>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->Placeholder_P_priori_mult_H_T, kf_state->S_inv, kf_state->K, true);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	f502 72bc 	add.w	r2, r2, #376	; 0x178
 80061de:	2101      	movs	r1, #1
 80061e0:	9102      	str	r1, [sp, #8]
 80061e2:	9201      	str	r2, [sp, #4]
 80061e4:	9300      	str	r3, [sp, #0]
 80061e6:	4603      	mov	r3, r0
 80061e8:	2202      	movs	r2, #2
 80061ea:	2102      	movs	r1, #2
 80061ec:	2003      	movs	r0, #3
 80061ee:	f000 fe53 	bl	8006e98 <matmul>

    /* x_est = x_priori + K*y */
    matvecprod(NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->K, kf_state->y, kf_state->x_est, true);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f503 71bc 	add.w	r1, r3, #376	; 0x178
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f503 70a8 	add.w	r0, r3, #336	; 0x150
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	33c4      	adds	r3, #196	; 0xc4
 8006202:	2201      	movs	r2, #1
 8006204:	9201      	str	r2, [sp, #4]
 8006206:	9300      	str	r3, [sp, #0]
 8006208:	4603      	mov	r3, r0
 800620a:	460a      	mov	r2, r1
 800620c:	2102      	movs	r1, #2
 800620e:	2003      	movs	r0, #3
 8006210:	f000 fedc 	bl	8006fcc <matvecprod>
    vecadd(NUMBER_STATES, kf_state->x_priori, kf_state->x_est, kf_state->x_est);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f103 01f4 	add.w	r1, r3, #244	; 0xf4
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	33c4      	adds	r3, #196	; 0xc4
 8006224:	2003      	movs	r0, #3
 8006226:	f000 fcfb 	bl	8006c20 <vecadd>


    /* P_est = (eye(NUMBER_STATES) - K*H)*P_priori */
    eye(NUMBER_STATES, kf_state->Placeholder_eye);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006230:	4619      	mov	r1, r3
 8006232:	2003      	movs	r0, #3
 8006234:	f000 fc54 	bl	8006ae0 <eye>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->K, kf_state->H, kf_state->Placeholder_K_mult_H, true);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f503 70bc 	add.w	r0, r3, #376	; 0x178
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	336c      	adds	r3, #108	; 0x6c
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	f502 720e 	add.w	r2, r2, #568	; 0x238
 8006248:	2101      	movs	r1, #1
 800624a:	9102      	str	r1, [sp, #8]
 800624c:	9201      	str	r2, [sp, #4]
 800624e:	9300      	str	r3, [sp, #0]
 8006250:	4603      	mov	r3, r0
 8006252:	2203      	movs	r2, #3
 8006254:	2102      	movs	r1, #2
 8006256:	2003      	movs	r0, #3
 8006258:	f000 fe1e 	bl	8006e98 <matmul>
    matsub(NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_eye, kf_state->Placeholder_K_mult_H, kf_state->Placeholder_P_est);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f503 710e 	add.w	r1, r3, #568	; 0x238
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 800626e:	9300      	str	r3, [sp, #0]
 8006270:	460b      	mov	r3, r1
 8006272:	2103      	movs	r1, #3
 8006274:	2003      	movs	r0, #3
 8006276:	f000 fd9c 	bl	8006db2 <matsub>
    matmul(NUMBER_STATES, NUMBER_STATES,  NUMBER_STATES, kf_state->Placeholder_P_est, kf_state->P_priori, kf_state->P_est, true);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f503 70f8 	add.w	r0, r3, #496	; 0x1f0
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	32d0      	adds	r2, #208	; 0xd0
 800628a:	2101      	movs	r1, #1
 800628c:	9102      	str	r1, [sp, #8]
 800628e:	9201      	str	r2, [sp, #4]
 8006290:	9300      	str	r3, [sp, #0]
 8006292:	4603      	mov	r3, r0
 8006294:	2203      	movs	r2, #3
 8006296:	2103      	movs	r1, #3
 8006298:	2003      	movs	r0, #3
 800629a:	f000 fdfd 	bl	8006e98 <matmul>
 800629e:	bf00      	nop
 80062a0:	3708      	adds	r7, #8
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	38d1b717 	.word	0x38d1b717

080062ac <reset_state_est_state>:
#include "../../Inc/Sim_Con/state_est.h"

void reset_state_est_state(float p_g, float T_g, state_est_state_t *state_est_state) {
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	ed87 0a03 	vstr	s0, [r7, #12]
 80062b6:	edc7 0a02 	vstr	s1, [r7, #8]
 80062ba:	6078      	str	r0, [r7, #4]
    reset_flight_phase_detection(&state_est_state->flight_phase_detection);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f503 7376 	add.w	r3, r3, #984	; 0x3d8
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7ff fdac 	bl	8005e20 <reset_flight_phase_detection>

    memset(&state_est_state->state_est_data, 0, sizeof(state_est_state->state_est_data));
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	223c      	movs	r2, #60	; 0x3c
 80062cc:	2100      	movs	r1, #0
 80062ce:	4618      	mov	r0, r3
 80062d0:	f00a fbf1 	bl	8010ab6 <memset>
    memset(&state_est_state->state_est_meas, 0, sizeof(state_est_state->state_est_meas));
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	333c      	adds	r3, #60	; 0x3c
 80062d8:	2250      	movs	r2, #80	; 0x50
 80062da:	2100      	movs	r1, #0
 80062dc:	4618      	mov	r0, r3
 80062de:	f00a fbea 	bl	8010ab6 <memset>
    memset(&state_est_state->state_est_meas_prior, 0, sizeof(state_est_state->state_est_meas_prior));
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	338c      	adds	r3, #140	; 0x8c
 80062e6:	2250      	movs	r2, #80	; 0x50
 80062e8:	2100      	movs	r1, #0
 80062ea:	4618      	mov	r0, r3
 80062ec:	f00a fbe3 	bl	8010ab6 <memset>

    init_env(&state_est_state->env);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7ff f9fa 	bl	80056f0 <init_env>
    calibrate_env(&state_est_state->env, p_g, T_g);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8006302:	edd7 0a02 	vldr	s1, [r7, #8]
 8006306:	ed97 0a03 	vldr	s0, [r7, #12]
 800630a:	4618      	mov	r0, r3
 800630c:	f7ff fa08 	bl	8005720 <calibrate_env>
    update_env(&state_est_state->env, T_g);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8006316:	ed97 0a02 	vldr	s0, [r7, #8]
 800631a:	4618      	mov	r0, r3
 800631c:	f7ff fa24 	bl	8005768 <update_env>

	reset_kf_state(&state_est_state->kf_state);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	33dc      	adds	r3, #220	; 0xdc
 8006324:	4618      	mov	r0, r3
 8006326:	f7ff fd93 	bl	8005e50 <reset_kf_state>
    update_state_est_data(&state_est_state->state_est_data, &state_est_state->kf_state);
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	33dc      	adds	r3, #220	; 0xdc
 8006330:	4619      	mov	r1, r3
 8006332:	4610      	mov	r0, r2
 8006334:	f000 f886 	bl	8006444 <update_state_est_data>

    memset(&state_est_state->baro_roll_mem, 0, sizeof(state_est_state->baro_roll_mem));
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800633e:	22b0      	movs	r2, #176	; 0xb0
 8006340:	2100      	movs	r1, #0
 8006342:	4618      	mov	r0, r3
 8006344:	f00a fbb7 	bl	8010ab6 <memset>

	select_noise_models(&state_est_state->kf_state, &state_est_state->flight_phase_detection, 
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f103 00dc 	add.w	r0, r3, #220	; 0xdc
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f503 7272 	add.w	r2, r3, #968	; 0x3c8
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8006360:	f000 fa2a 	bl	80067b8 <select_noise_models>
                        &state_est_state->env, &state_est_state->baro_roll_mem);
}
 8006364:	bf00      	nop
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <state_est_step>:

void state_est_step(timestamp_t t, state_est_state_t *state_est_state, bool bool_detect_flight_phase) {
 800636c:	b590      	push	{r4, r7, lr}
 800636e:	b087      	sub	sp, #28
 8006370:	af02      	add	r7, sp, #8
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	4613      	mov	r3, r2
 8006378:	71fb      	strb	r3, [r7, #7]
    /* process measurements */
	process_measurements(t, &state_est_state->kf_state, &state_est_state->state_est_meas, &state_est_state->state_est_meas_prior, 
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	f103 01dc 	add.w	r1, r3, #220	; 0xdc
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	f103 048c 	add.w	r4, r3, #140	; 0x8c
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8006392:	68ba      	ldr	r2, [r7, #8]
 8006394:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 8006398:	9201      	str	r2, [sp, #4]
 800639a:	9300      	str	r3, [sp, #0]
 800639c:	4623      	mov	r3, r4
 800639e:	4602      	mov	r2, r0
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f000 f89d 	bl	80064e0 <process_measurements>
                         &state_est_state->env, &state_est_state->baro_roll_mem);

	/* select noise models (dependent on detected flight phase and updated temperature in environment) */
	select_noise_models(&state_est_state->kf_state, &state_est_state->flight_phase_detection,
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	f103 00dc 	add.w	r0, r3, #220	; 0xdc
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	f503 7176 	add.w	r1, r3, #984	; 0x3d8
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	f503 7272 	add.w	r2, r3, #968	; 0x3c8
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80063be:	f000 f9fb 	bl	80067b8 <select_noise_models>
                        &state_est_state->env, &state_est_state->baro_roll_mem);
	
	kf_prediction(&state_est_state->kf_state);
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	33dc      	adds	r3, #220	; 0xdc
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7ff fdd6 	bl	8005f78 <kf_prediction>

	if (state_est_state->kf_state.num_z_active > 0) {
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	dd0a      	ble.n	80063ec <state_est_step+0x80>
		select_kf_observation_matrices(&state_est_state->kf_state);
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	33dc      	adds	r3, #220	; 0xdc
 80063da:	4618      	mov	r0, r3
 80063dc:	f7ff fe3a 	bl	8006054 <select_kf_observation_matrices>
		kf_update(&state_est_state->kf_state);
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	33dc      	adds	r3, #220	; 0xdc
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7ff fe75 	bl	80060d4 <kf_update>
 80063ea:	e009      	b.n	8006400 <state_est_step+0x94>
	} else {
		memcpy(&state_est_state->kf_state.x_est, &state_est_state->kf_state.x_priori, sizeof(state_est_state->kf_state.x_priori));
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	f503 70d0 	add.w	r0, r3, #416	; 0x1a0
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	f503 73e8 	add.w	r3, r3, #464	; 0x1d0
 80063f8:	220c      	movs	r2, #12
 80063fa:	4619      	mov	r1, r3
 80063fc:	f00a fb50 	bl	8010aa0 <memcpy>
	}

	update_state_est_data(&state_est_state->state_est_data, &state_est_state->kf_state);
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	33dc      	adds	r3, #220	; 0xdc
 8006406:	4619      	mov	r1, r3
 8006408:	4610      	mov	r0, r2
 800640a:	f000 f81b 	bl	8006444 <update_state_est_data>

    if (bool_detect_flight_phase){
 800640e:	79fb      	ldrb	r3, [r7, #7]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d009      	beq.n	8006428 <state_est_step+0xbc>
        detect_flight_phase(&state_est_state->flight_phase_detection, &state_est_state->state_est_data, &state_est_state->env);
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	f503 7076 	add.w	r0, r3, #984	; 0x3d8
 800641a:	68b9      	ldr	r1, [r7, #8]
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 8006422:	461a      	mov	r2, r3
 8006424:	f7ff fb20 	bl	8005a68 <detect_flight_phase>
    }

	/* set measurement prior to measurements from completed state estimation step */
	memcpy(&state_est_state->state_est_meas_prior, &state_est_state->state_est_meas, sizeof(state_est_state->state_est_meas));
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	f103 008c 	add.w	r0, r3, #140	; 0x8c
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	333c      	adds	r3, #60	; 0x3c
 8006432:	2250      	movs	r2, #80	; 0x50
 8006434:	4619      	mov	r1, r3
 8006436:	f00a fb33 	bl	8010aa0 <memcpy>
}
 800643a:	bf00      	nop
 800643c:	3714      	adds	r7, #20
 800643e:	46bd      	mov	sp, r7
 8006440:	bd90      	pop	{r4, r7, pc}
	...

08006444 <update_state_est_data>:

void update_state_est_data(state_est_data_t *state_est_data, kf_state_t *kf_state) {
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
    state_est_data->position_world[2] = (int32_t)(kf_state->x_est[0] * 1000);
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	edd3 7a31 	vldr	s15, [r3, #196]	; 0xc4
 8006454:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80064dc <update_state_est_data+0x98>
 8006458:	ee67 7a87 	vmul.f32	s15, s15, s14
 800645c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006460:	ee17 2a90 	vmov	r2, s15
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	609a      	str	r2, [r3, #8]
    state_est_data->velocity_rocket[0] = (int32_t)(kf_state->x_est[1] * 1000);
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 800646e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80064dc <update_state_est_data+0x98>
 8006472:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006476:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800647a:	ee17 2a90 	vmov	r2, s15
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	60da      	str	r2, [r3, #12]
    state_est_data->velocity_world[2] = (int32_t)(kf_state->x_est[1] * 1000);
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	edd3 7a32 	vldr	s15, [r3, #200]	; 0xc8
 8006488:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80064dc <update_state_est_data+0x98>
 800648c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006490:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006494:	ee17 2a90 	vmov	r2, s15
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	62da      	str	r2, [r3, #44]	; 0x2c
    state_est_data->acceleration_rocket[0] = (int32_t)(kf_state->u[0] * 1000);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 80064a2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80064dc <update_state_est_data+0x98>
 80064a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064ae:	ee17 2a90 	vmov	r2, s15
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	619a      	str	r2, [r3, #24]
    state_est_data->acceleration_world[2] = (int32_t)(kf_state->u[0] * 1000);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	edd3 7a30 	vldr	s15, [r3, #192]	; 0xc0
 80064bc:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80064dc <update_state_est_data+0x98>
 80064c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80064c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80064c8:	ee17 2a90 	vmov	r2, s15
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	639a      	str	r2, [r3, #56]	; 0x38
}
 80064d0:	bf00      	nop
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr
 80064dc:	447a0000 	.word	0x447a0000

080064e0 <process_measurements>:

void process_measurements(timestamp_t t, kf_state_t *kf_state, state_est_meas_t *state_est_meas, state_est_meas_t *state_est_meas_prior,
                          env_t *env, extrapolation_rolling_memory_t *baro_roll_mem) {
 80064e0:	b590      	push	{r4, r7, lr}
 80064e2:	b093      	sub	sp, #76	; 0x4c
 80064e4:	af02      	add	r7, sp, #8
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
 80064ec:	603b      	str	r3, [r7, #0]
    float temp_meas[NUM_SENSORBOARDS];
    bool temp_meas_active[NUM_SENSORBOARDS];
    float acc_x_meas[NUM_SENSORBOARDS];
    bool acc_x_meas_active[NUM_SENSORBOARDS];

    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 80064ee:	2300      	movs	r3, #0
 80064f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064f2:	e09a      	b.n	800662a <process_measurements+0x14a>
        /* barometer */
        if (state_est_meas->baro_data[i].ts > state_est_meas_prior->baro_data[i].ts) {
 80064f4:	6879      	ldr	r1, [r7, #4]
 80064f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80064f8:	4613      	mov	r3, r2
 80064fa:	005b      	lsls	r3, r3, #1
 80064fc:	4413      	add	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	440b      	add	r3, r1
 8006502:	3308      	adds	r3, #8
 8006504:	6819      	ldr	r1, [r3, #0]
 8006506:	6838      	ldr	r0, [r7, #0]
 8006508:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800650a:	4613      	mov	r3, r2
 800650c:	005b      	lsls	r3, r3, #1
 800650e:	4413      	add	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4403      	add	r3, r0
 8006514:	3308      	adds	r3, #8
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	4299      	cmp	r1, r3
 800651a:	d92b      	bls.n	8006574 <process_measurements+0x94>
            kf_state->z[i] = state_est_meas->baro_data[i].pressure;
 800651c:	6879      	ldr	r1, [r7, #4]
 800651e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006520:	4613      	mov	r3, r2
 8006522:	005b      	lsls	r3, r3, #1
 8006524:	4413      	add	r3, r2
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	440b      	add	r3, r1
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	68b9      	ldr	r1, [r7, #8]
 800652e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006530:	3352      	adds	r3, #82	; 0x52
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	440b      	add	r3, r1
 8006536:	601a      	str	r2, [r3, #0]
            kf_state->z_active[i] = true;
 8006538:	68ba      	ldr	r2, [r7, #8]
 800653a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800653c:	4413      	add	r3, r2
 800653e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8006542:	2201      	movs	r2, #1
 8006544:	701a      	strb	r2, [r3, #0]

            temp_meas[i] = state_est_meas->baro_data[i].temperature;
 8006546:	6879      	ldr	r1, [r7, #4]
 8006548:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800654a:	4613      	mov	r3, r2
 800654c:	005b      	lsls	r3, r3, #1
 800654e:	4413      	add	r3, r2
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	440b      	add	r3, r1
 8006554:	3304      	adds	r3, #4
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8006560:	440b      	add	r3, r1
 8006562:	3b20      	subs	r3, #32
 8006564:	601a      	str	r2, [r3, #0]
            temp_meas_active[i] = true;
 8006566:	f107 021c 	add.w	r2, r7, #28
 800656a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800656c:	4413      	add	r3, r2
 800656e:	2201      	movs	r2, #1
 8006570:	701a      	strb	r2, [r3, #0]
 8006572:	e01d      	b.n	80065b0 <process_measurements+0xd0>
        } else {
            kf_state->z[i] = 0;
 8006574:	68ba      	ldr	r2, [r7, #8]
 8006576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006578:	3352      	adds	r3, #82	; 0x52
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4413      	add	r3, r2
 800657e:	f04f 0200 	mov.w	r2, #0
 8006582:	601a      	str	r2, [r3, #0]
            kf_state->z_active[i] = false;
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006588:	4413      	add	r3, r2
 800658a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800658e:	2200      	movs	r2, #0
 8006590:	701a      	strb	r2, [r3, #0]

            temp_meas[i] = 0;
 8006592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800659a:	4413      	add	r3, r2
 800659c:	3b20      	subs	r3, #32
 800659e:	f04f 0200 	mov.w	r2, #0
 80065a2:	601a      	str	r2, [r3, #0]
            temp_meas_active[i] = false;
 80065a4:	f107 021c 	add.w	r2, r7, #28
 80065a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065aa:	4413      	add	r3, r2
 80065ac:	2200      	movs	r2, #0
 80065ae:	701a      	strb	r2, [r3, #0]
        }

        /* imu */
        if (state_est_meas->imu_data[i].ts > state_est_meas_prior->imu_data[i].ts) {
 80065b0:	6879      	ldr	r1, [r7, #4]
 80065b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80065b4:	4613      	mov	r3, r2
 80065b6:	00db      	lsls	r3, r3, #3
 80065b8:	1a9b      	subs	r3, r3, r2
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	440b      	add	r3, r1
 80065be:	3330      	adds	r3, #48	; 0x30
 80065c0:	6819      	ldr	r1, [r3, #0]
 80065c2:	6838      	ldr	r0, [r7, #0]
 80065c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80065c6:	4613      	mov	r3, r2
 80065c8:	00db      	lsls	r3, r3, #3
 80065ca:	1a9b      	subs	r3, r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4403      	add	r3, r0
 80065d0:	3330      	adds	r3, #48	; 0x30
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4299      	cmp	r1, r3
 80065d6:	d916      	bls.n	8006606 <process_measurements+0x126>
            acc_x_meas[i] = state_est_meas->imu_data[i].acc_x;
 80065d8:	6879      	ldr	r1, [r7, #4]
 80065da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80065dc:	4613      	mov	r3, r2
 80065de:	00db      	lsls	r3, r3, #3
 80065e0:	1a9b      	subs	r3, r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	440b      	add	r3, r1
 80065e6:	3324      	adds	r3, #36	; 0x24
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80065f2:	440b      	add	r3, r1
 80065f4:	3b2c      	subs	r3, #44	; 0x2c
 80065f6:	601a      	str	r2, [r3, #0]
            acc_x_meas_active[i] = true;
 80065f8:	f107 0210 	add.w	r2, r7, #16
 80065fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065fe:	4413      	add	r3, r2
 8006600:	2201      	movs	r2, #1
 8006602:	701a      	strb	r2, [r3, #0]
 8006604:	e00e      	b.n	8006624 <process_measurements+0x144>
        } else {
            acc_x_meas[i] = 0;
 8006606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800660e:	4413      	add	r3, r2
 8006610:	3b2c      	subs	r3, #44	; 0x2c
 8006612:	f04f 0200 	mov.w	r2, #0
 8006616:	601a      	str	r2, [r3, #0]
            acc_x_meas_active[i] = false;
 8006618:	f107 0210 	add.w	r2, r7, #16
 800661c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800661e:	4413      	add	r3, r2
 8006620:	2200      	movs	r2, #0
 8006622:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 8006624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006626:	3301      	adds	r3, #1
 8006628:	63fb      	str	r3, [r7, #60]	; 0x3c
 800662a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800662c:	2b01      	cmp	r3, #1
 800662e:	f77f af61 	ble.w	80064f4 <process_measurements+0x14>
        if (baro_roll_mem->memory_length < MAX_LENGTH_ROLLING_MEMORY) {
            sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active);
        }
        sensor_elimination_by_extrapolation(t, NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active, baro_roll_mem);
    } else {
        sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active);
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	f503 71a4 	add.w	r1, r3, #328	; 0x148
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800663e:	461a      	mov	r2, r3
 8006640:	2002      	movs	r0, #2
 8006642:	f000 f979 	bl	8006938 <sensor_elimination_by_stdev>
    }

    /* eliminate temperature measurements */
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, temp_meas, temp_meas_active);
 8006646:	f107 021c 	add.w	r2, r7, #28
 800664a:	f107 0320 	add.w	r3, r7, #32
 800664e:	4619      	mov	r1, r3
 8006650:	2002      	movs	r0, #2
 8006652:	f000 f971 	bl	8006938 <sensor_elimination_by_stdev>

    /* eliminate accelerometer in rocket x-dir measurements */
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, acc_x_meas, acc_x_meas_active);
 8006656:	f107 0210 	add.w	r2, r7, #16
 800665a:	f107 0314 	add.w	r3, r7, #20
 800665e:	4619      	mov	r1, r3
 8006660:	2002      	movs	r0, #2
 8006662:	f000 f969 	bl	8006938 <sensor_elimination_by_stdev>

    /* update num_z_active */
    kf_state->num_z_active = 0;
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	2200      	movs	r2, #0
 800666a:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    /* take the average of the active accelerometers in rocket-x dir as the state estimation input */
    float u = 0;
 800666e:	f04f 0300 	mov.w	r3, #0
 8006672:	637b      	str	r3, [r7, #52]	; 0x34
    int num_acc_x_meas_active = 0;
 8006674:	2300      	movs	r3, #0
 8006676:	63bb      	str	r3, [r7, #56]	; 0x38

    /* take the average of the temperature measurement  */
    float temp_meas_mean = 0;
 8006678:	f04f 0300 	mov.w	r3, #0
 800667c:	633b      	str	r3, [r7, #48]	; 0x30
    int num_temp_meas_active = 0;
 800667e:	2300      	movs	r3, #0
 8006680:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8006682:	2300      	movs	r3, #0
 8006684:	62bb      	str	r3, [r7, #40]	; 0x28
 8006686:	e047      	b.n	8006718 <process_measurements+0x238>
        if (kf_state->z_active[i]){
 8006688:	68ba      	ldr	r2, [r7, #8]
 800668a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668c:	4413      	add	r3, r2
 800668e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d006      	beq.n	80066a6 <process_measurements+0x1c6>
            kf_state->num_z_active += 1;
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800669e:	1c5a      	adds	r2, r3, #1
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
        }
        if (acc_x_meas_active[i]) {
 80066a6:	f107 0210 	add.w	r2, r7, #16
 80066aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ac:	4413      	add	r3, r2
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d010      	beq.n	80066d6 <process_measurements+0x1f6>
            u += acc_x_meas[i];
 80066b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80066bc:	4413      	add	r3, r2
 80066be:	3b2c      	subs	r3, #44	; 0x2c
 80066c0:	edd3 7a00 	vldr	s15, [r3]
 80066c4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80066c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066cc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
            num_acc_x_meas_active += 1;
 80066d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d2:	3301      	adds	r3, #1
 80066d4:	63bb      	str	r3, [r7, #56]	; 0x38
        }
        if (temp_meas[i]) {
 80066d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80066de:	4413      	add	r3, r2
 80066e0:	3b20      	subs	r3, #32
 80066e2:	edd3 7a00 	vldr	s15, [r3]
 80066e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80066ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066ee:	d010      	beq.n	8006712 <process_measurements+0x232>
            temp_meas_mean += temp_meas[i];
 80066f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80066f8:	4413      	add	r3, r2
 80066fa:	3b20      	subs	r3, #32
 80066fc:	edd3 7a00 	vldr	s15, [r3]
 8006700:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8006704:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006708:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
            num_temp_meas_active += 1;
 800670c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670e:	3301      	adds	r3, #1
 8006710:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8006712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006714:	3301      	adds	r3, #1
 8006716:	62bb      	str	r3, [r7, #40]	; 0x28
 8006718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671a:	2b01      	cmp	r3, #1
 800671c:	ddb4      	ble.n	8006688 <process_measurements+0x1a8>
        }
    }

    pressure2altitudeAGL(env, NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active, kf_state->z);
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	f503 72a4 	add.w	r2, r3, #328	; 0x148
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	f503 71c8 	add.w	r1, r3, #400	; 0x190
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8006730:	9300      	str	r3, [sp, #0]
 8006732:	460b      	mov	r3, r1
 8006734:	2102      	movs	r1, #2
 8006736:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8006738:	f7ff f872 	bl	8005820 <pressure2altitudeAGL>

    /* we take the old acceleration from the previous timestep, if no acceleration measurements are active */
    if (num_acc_x_meas_active > 0){
 800673c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800673e:	2b00      	cmp	r3, #0
 8006740:	dd1c      	ble.n	800677c <process_measurements+0x29c>
        u /= num_acc_x_meas_active;
 8006742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006744:	ee07 3a90 	vmov	s15, r3
 8006748:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800674c:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8006750:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006754:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        /* gravity compensation for accelerometer */
        kf_state->u[0] = u - GRAVITATION;
 8006758:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800675a:	f7f9 fef5 	bl	8000548 <__aeabi_f2d>
 800675e:	a314      	add	r3, pc, #80	; (adr r3, 80067b0 <process_measurements+0x2d0>)
 8006760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006764:	f7f9 fd90 	bl	8000288 <__aeabi_dsub>
 8006768:	4603      	mov	r3, r0
 800676a:	460c      	mov	r4, r1
 800676c:	4618      	mov	r0, r3
 800676e:	4621      	mov	r1, r4
 8006770:	f7fa fa3a 	bl	8000be8 <__aeabi_d2f>
 8006774:	4602      	mov	r2, r0
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
    }
    
    if (num_temp_meas_active > 0){
 800677c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677e:	2b00      	cmp	r3, #0
 8006780:	dd0f      	ble.n	80067a2 <process_measurements+0x2c2>
        temp_meas_mean /= num_temp_meas_active;
 8006782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006784:	ee07 3a90 	vmov	s15, r3
 8006788:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800678c:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8006790:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006794:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        update_env(env, temp_meas_mean);
 8006798:	ed97 0a0c 	vldr	s0, [r7, #48]	; 0x30
 800679c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800679e:	f7fe ffe3 	bl	8005768 <update_env>
    }
} 
 80067a2:	bf00      	nop
 80067a4:	3744      	adds	r7, #68	; 0x44
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd90      	pop	{r4, r7, pc}
 80067aa:	bf00      	nop
 80067ac:	f3af 8000 	nop.w
 80067b0:	51eb851f 	.word	0x51eb851f
 80067b4:	40239eb8 	.word	0x40239eb8

080067b8 <select_noise_models>:

void select_noise_models(kf_state_t *kf_state, flight_phase_detection_t *flight_phase_detection, env_t *env,
                        extrapolation_rolling_memory_t *baro_roll_mem){
 80067b8:	b590      	push	{r4, r7, lr}
 80067ba:	b091      	sub	sp, #68	; 0x44
 80067bc:	af02      	add	r7, sp, #8
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]
 80067c4:	603b      	str	r3, [r7, #0]
    float accelerometer_x_stdev;
    float barometer_stdev;

    // TODO @maxi: add different noise models for each mach regime
    switch (flight_phase_detection->flight_phase) {
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	3b01      	subs	r3, #1
 80067cc:	2b06      	cmp	r3, #6
 80067ce:	d82a      	bhi.n	8006826 <select_noise_models+0x6e>
 80067d0:	a201      	add	r2, pc, #4	; (adr r2, 80067d8 <select_noise_models+0x20>)
 80067d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d6:	bf00      	nop
 80067d8:	080067f5 	.word	0x080067f5
 80067dc:	080067f5 	.word	0x080067f5
 80067e0:	080067ff 	.word	0x080067ff
 80067e4:	08006809 	.word	0x08006809
 80067e8:	08006813 	.word	0x08006813
 80067ec:	0800681d 	.word	0x0800681d
 80067f0:	080067f5 	.word	0x080067f5
        case AIRBRAKE_TEST:
        case RECOVERY:
        case IDLE:
            accelerometer_x_stdev = 0.0185409;
 80067f4:	4b48      	ldr	r3, [pc, #288]	; (8006918 <select_noise_models+0x160>)
 80067f6:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 1.869;
 80067f8:	4b48      	ldr	r3, [pc, #288]	; (800691c <select_noise_models+0x164>)
 80067fa:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 80067fc:	e013      	b.n	8006826 <select_noise_models+0x6e>
        case THRUSTING:
            accelerometer_x_stdev = 1.250775;
 80067fe:	4b48      	ldr	r3, [pc, #288]	; (8006920 <select_noise_models+0x168>)
 8006800:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 13.000;
 8006802:	4b48      	ldr	r3, [pc, #288]	; (8006924 <select_noise_models+0x16c>)
 8006804:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8006806:	e00e      	b.n	8006826 <select_noise_models+0x6e>
        case COASTING:
            accelerometer_x_stdev = 0.61803;
 8006808:	4b47      	ldr	r3, [pc, #284]	; (8006928 <select_noise_models+0x170>)
 800680a:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 7.380;
 800680c:	4b47      	ldr	r3, [pc, #284]	; (800692c <select_noise_models+0x174>)
 800680e:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8006810:	e009      	b.n	8006826 <select_noise_models+0x6e>
        case DESCENT:
            accelerometer_x_stdev = 1.955133;
 8006812:	4b47      	ldr	r3, [pc, #284]	; (8006930 <select_noise_models+0x178>)
 8006814:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 3.896;
 8006816:	4b47      	ldr	r3, [pc, #284]	; (8006934 <select_noise_models+0x17c>)
 8006818:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 800681a:	e004      	b.n	8006826 <select_noise_models+0x6e>
        case BALLISTIC_DESCENT:
            accelerometer_x_stdev = 0.61803;
 800681c:	4b42      	ldr	r3, [pc, #264]	; (8006928 <select_noise_models+0x170>)
 800681e:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 7.380;
 8006820:	4b42      	ldr	r3, [pc, #264]	; (800692c <select_noise_models+0x174>)
 8006822:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8006824:	bf00      	nop
    }

    for(int i = 0; i < NUMBER_PROCESS_NOISE; i++){
 8006826:	2300      	movs	r3, #0
 8006828:	62fb      	str	r3, [r7, #44]	; 0x2c
 800682a:	e01b      	b.n	8006864 <select_noise_models+0xac>
        kf_state->Q[i][i] = pow(accelerometer_x_stdev, 2);
 800682c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800682e:	f7f9 fe8b 	bl	8000548 <__aeabi_f2d>
 8006832:	4603      	mov	r3, r0
 8006834:	460c      	mov	r4, r1
 8006836:	ed9f 1b36 	vldr	d1, [pc, #216]	; 8006910 <select_noise_models+0x158>
 800683a:	ec44 3b10 	vmov	d0, r3, r4
 800683e:	f00e f95b 	bl	8014af8 <pow>
 8006842:	ec54 3b10 	vmov	r3, r4, d0
 8006846:	4618      	mov	r0, r3
 8006848:	4621      	mov	r1, r4
 800684a:	f7fa f9cd 	bl	8000be8 <__aeabi_d2f>
 800684e:	4601      	mov	r1, r0
 8006850:	68fa      	ldr	r2, [r7, #12]
 8006852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006854:	3313      	adds	r3, #19
 8006856:	00db      	lsls	r3, r3, #3
 8006858:	4413      	add	r3, r2
 800685a:	3304      	adds	r3, #4
 800685c:	6019      	str	r1, [r3, #0]
    for(int i = 0; i < NUMBER_PROCESS_NOISE; i++){
 800685e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006860:	3301      	adds	r3, #1
 8006862:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006866:	2b00      	cmp	r3, #0
 8006868:	dde0      	ble.n	800682c <select_noise_models+0x74>
    }

    float p[1];
    float h[1] = {kf_state->x_est[0]};
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006870:	61bb      	str	r3, [r7, #24]
    bool h_active[1] = {true};
 8006872:	2301      	movs	r3, #1
 8006874:	753b      	strb	r3, [r7, #20]
    altitudeAGL2pressure(env, 1, h, h_active, p);
 8006876:	f107 0114 	add.w	r1, r7, #20
 800687a:	f107 0218 	add.w	r2, r7, #24
 800687e:	f107 031c 	add.w	r3, r7, #28
 8006882:	9300      	str	r3, [sp, #0]
 8006884:	460b      	mov	r3, r1
 8006886:	2101      	movs	r1, #1
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f7ff f829 	bl	80058e0 <altitudeAGL2pressure>
    float h_grad = altitude_gradient(env, p[0]);
 800688e:	edd7 7a07 	vldr	s15, [r7, #28]
 8006892:	eeb0 0a67 	vmov.f32	s0, s15
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f7ff f88a 	bl	80059b0 <altitude_gradient>
 800689c:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    float altitude_stdev = fabsf(barometer_stdev * h_grad);
 80068a0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80068a4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80068a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068ac:	eef0 7ae7 	vabs.f32	s15, s15
 80068b0:	edc7 7a08 	vstr	s15, [r7, #32]

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 80068b4:	2300      	movs	r3, #0
 80068b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80068b8:	e01c      	b.n	80068f4 <select_noise_models+0x13c>
        kf_state->R[i][i] = pow(altitude_stdev, 2);
 80068ba:	6a38      	ldr	r0, [r7, #32]
 80068bc:	f7f9 fe44 	bl	8000548 <__aeabi_f2d>
 80068c0:	4603      	mov	r3, r0
 80068c2:	460c      	mov	r4, r1
 80068c4:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8006910 <select_noise_models+0x158>
 80068c8:	ec44 3b10 	vmov	d0, r3, r4
 80068cc:	f00e f914 	bl	8014af8 <pow>
 80068d0:	ec54 3b10 	vmov	r3, r4, d0
 80068d4:	4618      	mov	r0, r3
 80068d6:	4621      	mov	r1, r4
 80068d8:	f7fa f986 	bl	8000be8 <__aeabi_d2f>
 80068dc:	68f9      	ldr	r1, [r7, #12]
 80068de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80068e0:	4613      	mov	r3, r2
 80068e2:	005b      	lsls	r3, r3, #1
 80068e4:	4413      	add	r3, r2
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	440b      	add	r3, r1
 80068ea:	33a0      	adds	r3, #160	; 0xa0
 80068ec:	6018      	str	r0, [r3, #0]
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 80068ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f0:	3301      	adds	r3, #1
 80068f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80068f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	dddf      	ble.n	80068ba <select_noise_models+0x102>
    }

    baro_roll_mem->noise_stdev = barometer_stdev;
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068fe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8006902:	bf00      	nop
 8006904:	373c      	adds	r7, #60	; 0x3c
 8006906:	46bd      	mov	sp, r7
 8006908:	bd90      	pop	{r4, r7, pc}
 800690a:	bf00      	nop
 800690c:	f3af 8000 	nop.w
 8006910:	00000000 	.word	0x00000000
 8006914:	40000000 	.word	0x40000000
 8006918:	3c97e316 	.word	0x3c97e316
 800691c:	3fef3b64 	.word	0x3fef3b64
 8006920:	3fa01965 	.word	0x3fa01965
 8006924:	41500000 	.word	0x41500000
 8006928:	3f1e3737 	.word	0x3f1e3737
 800692c:	40ec28f6 	.word	0x40ec28f6
 8006930:	3ffa41cc 	.word	0x3ffa41cc
 8006934:	40795810 	.word	0x40795810

08006938 <sensor_elimination_by_stdev>:

void sensor_elimination_by_stdev(int n, float measurements[n], bool measurement_active[n]) {
 8006938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800693a:	b08b      	sub	sp, #44	; 0x2c
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
    /* calculate mean of the sample */
    int num_active = 0;
 8006944:	2300      	movs	r3, #0
 8006946:	627b      	str	r3, [r7, #36]	; 0x24
    float mean = 0;
 8006948:	f04f 0300 	mov.w	r3, #0
 800694c:	623b      	str	r3, [r7, #32]
    for (int i = 0; i < n; i++){
 800694e:	2300      	movs	r3, #0
 8006950:	61fb      	str	r3, [r7, #28]
 8006952:	e017      	b.n	8006984 <sensor_elimination_by_stdev+0x4c>
        if (measurement_active[i]) {
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	4413      	add	r3, r2
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00e      	beq.n	800697e <sensor_elimination_by_stdev+0x46>
            num_active += 1;
 8006960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006962:	3301      	adds	r3, #1
 8006964:	627b      	str	r3, [r7, #36]	; 0x24
            mean += measurements[i];
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	68ba      	ldr	r2, [r7, #8]
 800696c:	4413      	add	r3, r2
 800696e:	edd3 7a00 	vldr	s15, [r3]
 8006972:	ed97 7a08 	vldr	s14, [r7, #32]
 8006976:	ee77 7a27 	vadd.f32	s15, s14, s15
 800697a:	edc7 7a08 	vstr	s15, [r7, #32]
    for (int i = 0; i < n; i++){
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	3301      	adds	r3, #1
 8006982:	61fb      	str	r3, [r7, #28]
 8006984:	69fa      	ldr	r2, [r7, #28]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	429a      	cmp	r2, r3
 800698a:	dbe3      	blt.n	8006954 <sensor_elimination_by_stdev+0x1c>
        }
    }
    if (num_active > 0){
 800698c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698e:	2b00      	cmp	r3, #0
 8006990:	dd0a      	ble.n	80069a8 <sensor_elimination_by_stdev+0x70>
        mean /= num_active;
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	ee07 3a90 	vmov	s15, r3
 8006998:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800699c:	edd7 6a08 	vldr	s13, [r7, #32]
 80069a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069a4:	edc7 7a08 	vstr	s15, [r7, #32]
    }

    /* calculate the standard deviation of the sample */
    float stdev = 0;
 80069a8:	f04f 0300 	mov.w	r3, #0
 80069ac:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; ++i) {
 80069ae:	2300      	movs	r3, #0
 80069b0:	617b      	str	r3, [r7, #20]
 80069b2:	e033      	b.n	8006a1c <sensor_elimination_by_stdev+0xe4>
        if (measurement_active[i]) {
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	4413      	add	r3, r2
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d02a      	beq.n	8006a16 <sensor_elimination_by_stdev+0xde>
            stdev += pow(measurements[i] - mean, 2);
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	68ba      	ldr	r2, [r7, #8]
 80069c6:	4413      	add	r3, r2
 80069c8:	ed93 7a00 	vldr	s14, [r3]
 80069cc:	edd7 7a08 	vldr	s15, [r7, #32]
 80069d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80069d4:	ee17 0a90 	vmov	r0, s15
 80069d8:	f7f9 fdb6 	bl	8000548 <__aeabi_f2d>
 80069dc:	4603      	mov	r3, r0
 80069de:	460c      	mov	r4, r1
 80069e0:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 8006ad8 <sensor_elimination_by_stdev+0x1a0>
 80069e4:	ec44 3b10 	vmov	d0, r3, r4
 80069e8:	f00e f886 	bl	8014af8 <pow>
 80069ec:	ec56 5b10 	vmov	r5, r6, d0
 80069f0:	69b8      	ldr	r0, [r7, #24]
 80069f2:	f7f9 fda9 	bl	8000548 <__aeabi_f2d>
 80069f6:	4603      	mov	r3, r0
 80069f8:	460c      	mov	r4, r1
 80069fa:	461a      	mov	r2, r3
 80069fc:	4623      	mov	r3, r4
 80069fe:	4628      	mov	r0, r5
 8006a00:	4631      	mov	r1, r6
 8006a02:	f7f9 fc43 	bl	800028c <__adddf3>
 8006a06:	4603      	mov	r3, r0
 8006a08:	460c      	mov	r4, r1
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	4621      	mov	r1, r4
 8006a0e:	f7fa f8eb 	bl	8000be8 <__aeabi_d2f>
 8006a12:	4603      	mov	r3, r0
 8006a14:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; ++i) {
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	617b      	str	r3, [r7, #20]
 8006a1c:	697a      	ldr	r2, [r7, #20]
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	dbc7      	blt.n	80069b4 <sensor_elimination_by_stdev+0x7c>
        }
    }
    if (num_active > 0){
 8006a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	dd1a      	ble.n	8006a60 <sensor_elimination_by_stdev+0x128>
        stdev = sqrt(stdev / num_active);
 8006a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2c:	ee07 3a90 	vmov	s15, r3
 8006a30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a34:	ed97 7a06 	vldr	s14, [r7, #24]
 8006a38:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006a3c:	ee16 0a90 	vmov	r0, s13
 8006a40:	f7f9 fd82 	bl	8000548 <__aeabi_f2d>
 8006a44:	4603      	mov	r3, r0
 8006a46:	460c      	mov	r4, r1
 8006a48:	ec44 3b10 	vmov	d0, r3, r4
 8006a4c:	f00e f9c4 	bl	8014dd8 <sqrt>
 8006a50:	ec54 3b10 	vmov	r3, r4, d0
 8006a54:	4618      	mov	r0, r3
 8006a56:	4621      	mov	r1, r4
 8006a58:	f7fa f8c6 	bl	8000be8 <__aeabi_d2f>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	61bb      	str	r3, [r7, #24]
    }

    /* deactivate measurements if they are too far off the mean */
    for (int i = 0; i < n; ++i) {
 8006a60:	2300      	movs	r3, #0
 8006a62:	613b      	str	r3, [r7, #16]
 8006a64:	e02f      	b.n	8006ac6 <sensor_elimination_by_stdev+0x18e>
        if (measurement_active[i]) {
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d026      	beq.n	8006ac0 <sensor_elimination_by_stdev+0x188>
            if (fabsf(measurements[i] - mean) > 2.0 * stdev) {
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	68ba      	ldr	r2, [r7, #8]
 8006a78:	4413      	add	r3, r2
 8006a7a:	ed93 7a00 	vldr	s14, [r3]
 8006a7e:	edd7 7a08 	vldr	s15, [r7, #32]
 8006a82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a86:	eef0 7ae7 	vabs.f32	s15, s15
 8006a8a:	ee17 0a90 	vmov	r0, s15
 8006a8e:	f7f9 fd5b 	bl	8000548 <__aeabi_f2d>
 8006a92:	4604      	mov	r4, r0
 8006a94:	460d      	mov	r5, r1
 8006a96:	69b8      	ldr	r0, [r7, #24]
 8006a98:	f7f9 fd56 	bl	8000548 <__aeabi_f2d>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	f7f9 fbf4 	bl	800028c <__adddf3>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	4629      	mov	r1, r5
 8006aac:	f7fa f834 	bl	8000b18 <__aeabi_dcmpgt>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d004      	beq.n	8006ac0 <sensor_elimination_by_stdev+0x188>
                measurement_active[i] = false;
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	4413      	add	r3, r2
 8006abc:	2200      	movs	r2, #0
 8006abe:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < n; ++i) {
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	613b      	str	r3, [r7, #16]
 8006ac6:	693a      	ldr	r2, [r7, #16]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	dbcb      	blt.n	8006a66 <sensor_elimination_by_stdev+0x12e>
            }
        }
    }
}
 8006ace:	bf00      	nop
 8006ad0:	372c      	adds	r7, #44	; 0x2c
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	00000000 	.word	0x00000000
 8006adc:	40000000 	.word	0x40000000

08006ae0 <eye>:
#include "../../Inc/Util/math_utils.h"


void eye(int dim, float A[dim][dim]) {
 8006ae0:	b490      	push	{r4, r7}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	1e43      	subs	r3, r0, #1
 8006aee:	60fb      	str	r3, [r7, #12]
 8006af0:	4603      	mov	r3, r0
 8006af2:	4619      	mov	r1, r3
 8006af4:	f04f 0200 	mov.w	r2, #0
 8006af8:	f04f 0300 	mov.w	r3, #0
 8006afc:	f04f 0400 	mov.w	r4, #0
 8006b00:	0154      	lsls	r4, r2, #5
 8006b02:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006b06:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < dim; i++){
 8006b08:	2300      	movs	r3, #0
 8006b0a:	613b      	str	r3, [r7, #16]
 8006b0c:	e02b      	b.n	8006b66 <eye+0x86>
        for(int j = 0; j < dim; j++){
 8006b0e:	2300      	movs	r3, #0
 8006b10:	617b      	str	r3, [r7, #20]
 8006b12:	e021      	b.n	8006b58 <eye+0x78>
            if (i == j){
 8006b14:	693a      	ldr	r2, [r7, #16]
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d10d      	bne.n	8006b38 <eye+0x58>
				A[i][j] = 1;
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	fb03 f302 	mul.w	r3, r3, r2
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	683a      	ldr	r2, [r7, #0]
 8006b28:	441a      	add	r2, r3
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	4413      	add	r3, r2
 8006b30:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006b34:	601a      	str	r2, [r3, #0]
 8006b36:	e00c      	b.n	8006b52 <eye+0x72>
			} else {
				A[i][j] = 0;
 8006b38:	4602      	mov	r2, r0
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	fb03 f302 	mul.w	r3, r3, r2
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	441a      	add	r2, r3
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f04f 0200 	mov.w	r2, #0
 8006b50:	601a      	str	r2, [r3, #0]
        for(int j = 0; j < dim; j++){
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	3301      	adds	r3, #1
 8006b56:	617b      	str	r3, [r7, #20]
 8006b58:	697a      	ldr	r2, [r7, #20]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	dbd9      	blt.n	8006b14 <eye+0x34>
	for(int i = 0; i < dim; i++){
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	3301      	adds	r3, #1
 8006b64:	613b      	str	r3, [r7, #16]
 8006b66:	693a      	ldr	r2, [r7, #16]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	dbcf      	blt.n	8006b0e <eye+0x2e>
			}
        }
    }
}
 8006b6e:	bf00      	nop
 8006b70:	3718      	adds	r7, #24
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bc90      	pop	{r4, r7}
 8006b76:	4770      	bx	lr

08006b78 <transpose>:

void transpose(int m, int n, float A[m][n], float A_T[n][m]) {
 8006b78:	b4b0      	push	{r4, r5, r7}
 8006b7a:	b089      	sub	sp, #36	; 0x24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
 8006b84:	603b      	str	r3, [r7, #0]
 8006b86:	68b8      	ldr	r0, [r7, #8]
 8006b88:	1e43      	subs	r3, r0, #1
 8006b8a:	617b      	str	r3, [r7, #20]
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	4619      	mov	r1, r3
 8006b90:	f04f 0200 	mov.w	r2, #0
 8006b94:	f04f 0300 	mov.w	r3, #0
 8006b98:	f04f 0400 	mov.w	r4, #0
 8006b9c:	0154      	lsls	r4, r2, #5
 8006b9e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006ba2:	014b      	lsls	r3, r1, #5
 8006ba4:	68fd      	ldr	r5, [r7, #12]
 8006ba6:	1e6b      	subs	r3, r5, #1
 8006ba8:	613b      	str	r3, [r7, #16]
 8006baa:	462b      	mov	r3, r5
 8006bac:	4619      	mov	r1, r3
 8006bae:	f04f 0200 	mov.w	r2, #0
 8006bb2:	f04f 0300 	mov.w	r3, #0
 8006bb6:	f04f 0400 	mov.w	r4, #0
 8006bba:	0154      	lsls	r4, r2, #5
 8006bbc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006bc0:	014b      	lsls	r3, r1, #5
	/* Get Transpose */
	for(int i = 0; i < m; i++){
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	61bb      	str	r3, [r7, #24]
 8006bc6:	e022      	b.n	8006c0e <transpose+0x96>
		for(int j = 0; j < n; j++){
 8006bc8:	2300      	movs	r3, #0
 8006bca:	61fb      	str	r3, [r7, #28]
 8006bcc:	e018      	b.n	8006c00 <transpose+0x88>
			A_T[j][i] = A[i][j];
 8006bce:	4602      	mov	r2, r0
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	fb03 f302 	mul.w	r3, r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	441a      	add	r2, r3
 8006bdc:	4629      	mov	r1, r5
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	fb03 f301 	mul.w	r3, r3, r1
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	6839      	ldr	r1, [r7, #0]
 8006be8:	4419      	add	r1, r3
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4413      	add	r3, r2
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	440b      	add	r3, r1
 8006bf8:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < n; j++){
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	61fb      	str	r3, [r7, #28]
 8006c00:	69fa      	ldr	r2, [r7, #28]
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	dbe2      	blt.n	8006bce <transpose+0x56>
	for(int i = 0; i < m; i++){
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	61bb      	str	r3, [r7, #24]
 8006c0e:	69ba      	ldr	r2, [r7, #24]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	dbd8      	blt.n	8006bc8 <transpose+0x50>
		}
	}
}
 8006c16:	bf00      	nop
 8006c18:	3724      	adds	r7, #36	; 0x24
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bcb0      	pop	{r4, r5, r7}
 8006c1e:	4770      	bx	lr

08006c20 <vecadd>:

void vecadd(int n, float a[n], float b[n], float c[n]) {
 8006c20:	b480      	push	{r7}
 8006c22:	b087      	sub	sp, #28
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
 8006c2c:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 8006c2e:	2300      	movs	r3, #0
 8006c30:	617b      	str	r3, [r7, #20]
 8006c32:	e016      	b.n	8006c62 <vecadd+0x42>
		c[i] = a[i] + b[i];
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	68ba      	ldr	r2, [r7, #8]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	ed93 7a00 	vldr	s14, [r3]
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	4413      	add	r3, r2
 8006c48:	edd3 7a00 	vldr	s15, [r3]
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	683a      	ldr	r2, [r7, #0]
 8006c52:	4413      	add	r3, r2
 8006c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c58:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	3301      	adds	r3, #1
 8006c60:	617b      	str	r3, [r7, #20]
 8006c62:	697a      	ldr	r2, [r7, #20]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	dbe4      	blt.n	8006c34 <vecadd+0x14>
	}
}
 8006c6a:	bf00      	nop
 8006c6c:	371c      	adds	r7, #28
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr

08006c76 <vecsub>:

void vecsub(int n, float a[n], float b[n], float c[n]) {
 8006c76:	b480      	push	{r7}
 8006c78:	b087      	sub	sp, #28
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	60f8      	str	r0, [r7, #12]
 8006c7e:	60b9      	str	r1, [r7, #8]
 8006c80:	607a      	str	r2, [r7, #4]
 8006c82:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 8006c84:	2300      	movs	r3, #0
 8006c86:	617b      	str	r3, [r7, #20]
 8006c88:	e016      	b.n	8006cb8 <vecsub+0x42>
		c[i] = a[i] - b[i];
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	009b      	lsls	r3, r3, #2
 8006c8e:	68ba      	ldr	r2, [r7, #8]
 8006c90:	4413      	add	r3, r2
 8006c92:	ed93 7a00 	vldr	s14, [r3]
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	687a      	ldr	r2, [r7, #4]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	edd3 7a00 	vldr	s15, [r3]
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	683a      	ldr	r2, [r7, #0]
 8006ca8:	4413      	add	r3, r2
 8006caa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006cae:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	617b      	str	r3, [r7, #20]
 8006cb8:	697a      	ldr	r2, [r7, #20]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	dbe4      	blt.n	8006c8a <vecsub+0x14>
	}
}
 8006cc0:	bf00      	nop
 8006cc2:	371c      	adds	r7, #28
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <matadd>:

void matadd(int m, int n, float A[m][n], float B[m][n], float C[m][n]) {
 8006ccc:	b4f0      	push	{r4, r5, r6, r7}
 8006cce:	b08a      	sub	sp, #40	; 0x28
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
 8006cd8:	603b      	str	r3, [r7, #0]
 8006cda:	68b8      	ldr	r0, [r7, #8]
 8006cdc:	1e43      	subs	r3, r0, #1
 8006cde:	627b      	str	r3, [r7, #36]	; 0x24
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	f04f 0200 	mov.w	r2, #0
 8006ce8:	f04f 0300 	mov.w	r3, #0
 8006cec:	f04f 0400 	mov.w	r4, #0
 8006cf0:	0154      	lsls	r4, r2, #5
 8006cf2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006cf6:	014b      	lsls	r3, r1, #5
 8006cf8:	68bd      	ldr	r5, [r7, #8]
 8006cfa:	1e6b      	subs	r3, r5, #1
 8006cfc:	61bb      	str	r3, [r7, #24]
 8006cfe:	462b      	mov	r3, r5
 8006d00:	4619      	mov	r1, r3
 8006d02:	f04f 0200 	mov.w	r2, #0
 8006d06:	f04f 0300 	mov.w	r3, #0
 8006d0a:	f04f 0400 	mov.w	r4, #0
 8006d0e:	0154      	lsls	r4, r2, #5
 8006d10:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006d14:	014b      	lsls	r3, r1, #5
 8006d16:	68be      	ldr	r6, [r7, #8]
 8006d18:	1e73      	subs	r3, r6, #1
 8006d1a:	617b      	str	r3, [r7, #20]
 8006d1c:	4633      	mov	r3, r6
 8006d1e:	4619      	mov	r1, r3
 8006d20:	f04f 0200 	mov.w	r2, #0
 8006d24:	f04f 0300 	mov.w	r3, #0
 8006d28:	f04f 0400 	mov.w	r4, #0
 8006d2c:	0154      	lsls	r4, r2, #5
 8006d2e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006d32:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 8006d34:	2300      	movs	r3, #0
 8006d36:	61fb      	str	r3, [r7, #28]
 8006d38:	e032      	b.n	8006da0 <matadd+0xd4>
        for(int j = 0; j < n; j++){
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	623b      	str	r3, [r7, #32]
 8006d3e:	e028      	b.n	8006d92 <matadd+0xc6>
            C[i][j] =  A[i][j] + B[i][j];
 8006d40:	4602      	mov	r2, r0
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	fb03 f302 	mul.w	r3, r3, r2
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	441a      	add	r2, r3
 8006d4e:	6a3b      	ldr	r3, [r7, #32]
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	4413      	add	r3, r2
 8006d54:	ed93 7a00 	vldr	s14, [r3]
 8006d58:	462a      	mov	r2, r5
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	fb03 f302 	mul.w	r3, r3, r2
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	683a      	ldr	r2, [r7, #0]
 8006d64:	441a      	add	r2, r3
 8006d66:	6a3b      	ldr	r3, [r7, #32]
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	edd3 7a00 	vldr	s15, [r3]
 8006d70:	4632      	mov	r2, r6
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	fb03 f302 	mul.w	r3, r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d7c:	441a      	add	r2, r3
 8006d7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d82:	6a3b      	ldr	r3, [r7, #32]
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4413      	add	r3, r2
 8006d88:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8006d8c:	6a3b      	ldr	r3, [r7, #32]
 8006d8e:	3301      	adds	r3, #1
 8006d90:	623b      	str	r3, [r7, #32]
 8006d92:	6a3a      	ldr	r2, [r7, #32]
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	dbd2      	blt.n	8006d40 <matadd+0x74>
	for(int i = 0; i < m; i++){
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	61fb      	str	r3, [r7, #28]
 8006da0:	69fa      	ldr	r2, [r7, #28]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	dbc8      	blt.n	8006d3a <matadd+0x6e>
        }
    }
}
 8006da8:	bf00      	nop
 8006daa:	3728      	adds	r7, #40	; 0x28
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bcf0      	pop	{r4, r5, r6, r7}
 8006db0:	4770      	bx	lr

08006db2 <matsub>:

void matsub(int m, int n, float A[m][n], float B[m][n], float C[m][n]) {
 8006db2:	b4f0      	push	{r4, r5, r6, r7}
 8006db4:	b08a      	sub	sp, #40	; 0x28
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	60f8      	str	r0, [r7, #12]
 8006dba:	60b9      	str	r1, [r7, #8]
 8006dbc:	607a      	str	r2, [r7, #4]
 8006dbe:	603b      	str	r3, [r7, #0]
 8006dc0:	68b8      	ldr	r0, [r7, #8]
 8006dc2:	1e43      	subs	r3, r0, #1
 8006dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	4619      	mov	r1, r3
 8006dca:	f04f 0200 	mov.w	r2, #0
 8006dce:	f04f 0300 	mov.w	r3, #0
 8006dd2:	f04f 0400 	mov.w	r4, #0
 8006dd6:	0154      	lsls	r4, r2, #5
 8006dd8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006ddc:	014b      	lsls	r3, r1, #5
 8006dde:	68bd      	ldr	r5, [r7, #8]
 8006de0:	1e6b      	subs	r3, r5, #1
 8006de2:	61bb      	str	r3, [r7, #24]
 8006de4:	462b      	mov	r3, r5
 8006de6:	4619      	mov	r1, r3
 8006de8:	f04f 0200 	mov.w	r2, #0
 8006dec:	f04f 0300 	mov.w	r3, #0
 8006df0:	f04f 0400 	mov.w	r4, #0
 8006df4:	0154      	lsls	r4, r2, #5
 8006df6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006dfa:	014b      	lsls	r3, r1, #5
 8006dfc:	68be      	ldr	r6, [r7, #8]
 8006dfe:	1e73      	subs	r3, r6, #1
 8006e00:	617b      	str	r3, [r7, #20]
 8006e02:	4633      	mov	r3, r6
 8006e04:	4619      	mov	r1, r3
 8006e06:	f04f 0200 	mov.w	r2, #0
 8006e0a:	f04f 0300 	mov.w	r3, #0
 8006e0e:	f04f 0400 	mov.w	r4, #0
 8006e12:	0154      	lsls	r4, r2, #5
 8006e14:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006e18:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	61fb      	str	r3, [r7, #28]
 8006e1e:	e032      	b.n	8006e86 <matsub+0xd4>
        for(int j = 0; j < n; j++){
 8006e20:	2300      	movs	r3, #0
 8006e22:	623b      	str	r3, [r7, #32]
 8006e24:	e028      	b.n	8006e78 <matsub+0xc6>
            C[i][j] =  A[i][j] - B[i][j];
 8006e26:	4602      	mov	r2, r0
 8006e28:	69fb      	ldr	r3, [r7, #28]
 8006e2a:	fb03 f302 	mul.w	r3, r3, r2
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	441a      	add	r2, r3
 8006e34:	6a3b      	ldr	r3, [r7, #32]
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	ed93 7a00 	vldr	s14, [r3]
 8006e3e:	462a      	mov	r2, r5
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	fb03 f302 	mul.w	r3, r3, r2
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	683a      	ldr	r2, [r7, #0]
 8006e4a:	441a      	add	r2, r3
 8006e4c:	6a3b      	ldr	r3, [r7, #32]
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	4413      	add	r3, r2
 8006e52:	edd3 7a00 	vldr	s15, [r3]
 8006e56:	4632      	mov	r2, r6
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	fb03 f302 	mul.w	r3, r3, r2
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e62:	441a      	add	r2, r3
 8006e64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e68:	6a3b      	ldr	r3, [r7, #32]
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	4413      	add	r3, r2
 8006e6e:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8006e72:	6a3b      	ldr	r3, [r7, #32]
 8006e74:	3301      	adds	r3, #1
 8006e76:	623b      	str	r3, [r7, #32]
 8006e78:	6a3a      	ldr	r2, [r7, #32]
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	dbd2      	blt.n	8006e26 <matsub+0x74>
	for(int i = 0; i < m; i++){
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	3301      	adds	r3, #1
 8006e84:	61fb      	str	r3, [r7, #28]
 8006e86:	69fa      	ldr	r2, [r7, #28]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	dbc8      	blt.n	8006e20 <matsub+0x6e>
        }
    }
}
 8006e8e:	bf00      	nop
 8006e90:	3728      	adds	r7, #40	; 0x28
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bcf0      	pop	{r4, r5, r6, r7}
 8006e96:	4770      	bx	lr

08006e98 <matmul>:

void matmul(int m, int n, int o, float A[m][n], float B[n][o], float C[m][o], bool reset) {
 8006e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e9a:	b08d      	sub	sp, #52	; 0x34
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6178      	str	r0, [r7, #20]
 8006ea0:	6139      	str	r1, [r7, #16]
 8006ea2:	60fa      	str	r2, [r7, #12]
 8006ea4:	60bb      	str	r3, [r7, #8]
 8006ea6:	693e      	ldr	r6, [r7, #16]
 8006ea8:	1e73      	subs	r3, r6, #1
 8006eaa:	623b      	str	r3, [r7, #32]
 8006eac:	4633      	mov	r3, r6
 8006eae:	4619      	mov	r1, r3
 8006eb0:	f04f 0200 	mov.w	r2, #0
 8006eb4:	f04f 0300 	mov.w	r3, #0
 8006eb8:	f04f 0400 	mov.w	r4, #0
 8006ebc:	0154      	lsls	r4, r2, #5
 8006ebe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006ec2:	014b      	lsls	r3, r1, #5
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	607a      	str	r2, [r7, #4]
 8006ec8:	4613      	mov	r3, r2
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	61fb      	str	r3, [r7, #28]
 8006ece:	4613      	mov	r3, r2
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	f04f 0200 	mov.w	r2, #0
 8006ed6:	f04f 0300 	mov.w	r3, #0
 8006eda:	f04f 0400 	mov.w	r4, #0
 8006ede:	0154      	lsls	r4, r2, #5
 8006ee0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006ee4:	014b      	lsls	r3, r1, #5
 8006ee6:	68fd      	ldr	r5, [r7, #12]
 8006ee8:	1e6b      	subs	r3, r5, #1
 8006eea:	61bb      	str	r3, [r7, #24]
 8006eec:	462b      	mov	r3, r5
 8006eee:	4619      	mov	r1, r3
 8006ef0:	f04f 0200 	mov.w	r2, #0
 8006ef4:	f04f 0300 	mov.w	r3, #0
 8006ef8:	f04f 0400 	mov.w	r4, #0
 8006efc:	0154      	lsls	r4, r2, #5
 8006efe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006f02:	014b      	lsls	r3, r1, #5
	if (reset) {
 8006f04:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d009      	beq.n	8006f20 <matmul+0x88>
		memset(C, 0, m * o * sizeof(C[0][0]));
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	fb02 f303 	mul.w	r3, r2, r3
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	461a      	mov	r2, r3
 8006f18:	2100      	movs	r1, #0
 8006f1a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8006f1c:	f009 fdcb 	bl	8010ab6 <memset>
	}
	for(int i = 0; i < m; i++){
 8006f20:	2300      	movs	r3, #0
 8006f22:	627b      	str	r3, [r7, #36]	; 0x24
 8006f24:	e04a      	b.n	8006fbc <matmul+0x124>
        for(int j = 0; j < o; j++){
 8006f26:	2300      	movs	r3, #0
 8006f28:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f2a:	e040      	b.n	8006fae <matmul+0x116>
            for(int k = 0; k < n; k++){
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f30:	e036      	b.n	8006fa0 <matmul+0x108>
                C[i][j] +=  A[i][k] * B[k][j];
 8006f32:	4632      	mov	r2, r6
 8006f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f36:	fb03 f302 	mul.w	r3, r3, r2
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	68ba      	ldr	r2, [r7, #8]
 8006f3e:	441a      	add	r2, r3
 8006f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	4413      	add	r3, r2
 8006f46:	ed93 7a00 	vldr	s14, [r3]
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f4e:	fb03 f302 	mul.w	r3, r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f56:	441a      	add	r2, r3
 8006f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	4413      	add	r3, r2
 8006f5e:	edd3 7a00 	vldr	s15, [r3]
 8006f62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006f66:	462a      	mov	r2, r5
 8006f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6a:	fb03 f302 	mul.w	r3, r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f72:	441a      	add	r2, r3
 8006f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	4413      	add	r3, r2
 8006f7a:	edd3 7a00 	vldr	s15, [r3]
 8006f7e:	462a      	mov	r2, r5
 8006f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f82:	fb03 f302 	mul.w	r3, r3, r2
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f8a:	441a      	add	r2, r3
 8006f8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	4413      	add	r3, r2
 8006f96:	edc3 7a00 	vstr	s15, [r3]
            for(int k = 0; k < n; k++){
 8006f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	dbc4      	blt.n	8006f32 <matmul+0x9a>
        for(int j = 0; j < o; j++){
 8006fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006faa:	3301      	adds	r3, #1
 8006fac:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	dbba      	blt.n	8006f2c <matmul+0x94>
	for(int i = 0; i < m; i++){
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb8:	3301      	adds	r3, #1
 8006fba:	627b      	str	r3, [r7, #36]	; 0x24
 8006fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	dbb0      	blt.n	8006f26 <matmul+0x8e>
            }
        }
    }
}
 8006fc4:	bf00      	nop
 8006fc6:	3734      	adds	r7, #52	; 0x34
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006fcc <matvecprod>:

void matvecprod(int m, int n, float A[m][n], float b[n], float c[m], bool reset) {
 8006fcc:	b5b0      	push	{r4, r5, r7, lr}
 8006fce:	b088      	sub	sp, #32
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	607a      	str	r2, [r7, #4]
 8006fd8:	603b      	str	r3, [r7, #0]
 8006fda:	68bd      	ldr	r5, [r7, #8]
 8006fdc:	1e6b      	subs	r3, r5, #1
 8006fde:	617b      	str	r3, [r7, #20]
 8006fe0:	462b      	mov	r3, r5
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	f04f 0200 	mov.w	r2, #0
 8006fe8:	f04f 0300 	mov.w	r3, #0
 8006fec:	f04f 0400 	mov.w	r4, #0
 8006ff0:	0154      	lsls	r4, r2, #5
 8006ff2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006ff6:	014b      	lsls	r3, r1, #5
	if (reset) {
 8006ff8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d006      	beq.n	800700e <matvecprod+0x42>
		memset(c, 0, m * sizeof(c[0]));
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	461a      	mov	r2, r3
 8007006:	2100      	movs	r1, #0
 8007008:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800700a:	f009 fd54 	bl	8010ab6 <memset>
	}
	for(int i = 0; i < m; i++){
 800700e:	2300      	movs	r3, #0
 8007010:	61bb      	str	r3, [r7, #24]
 8007012:	e02e      	b.n	8007072 <matvecprod+0xa6>
        for(int j = 0; j < n; j++){
 8007014:	2300      	movs	r3, #0
 8007016:	61fb      	str	r3, [r7, #28]
 8007018:	e024      	b.n	8007064 <matvecprod+0x98>
            c[i] += A[i][j] * b[j];
 800701a:	462a      	mov	r2, r5
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	fb03 f302 	mul.w	r3, r3, r2
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	441a      	add	r2, r3
 8007028:	69fb      	ldr	r3, [r7, #28]
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	4413      	add	r3, r2
 800702e:	ed93 7a00 	vldr	s14, [r3]
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	683a      	ldr	r2, [r7, #0]
 8007038:	4413      	add	r3, r2
 800703a:	edd3 7a00 	vldr	s15, [r3]
 800703e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	009b      	lsls	r3, r3, #2
 8007046:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007048:	4413      	add	r3, r2
 800704a:	edd3 7a00 	vldr	s15, [r3]
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007054:	4413      	add	r3, r2
 8007056:	ee77 7a27 	vadd.f32	s15, s14, s15
 800705a:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	3301      	adds	r3, #1
 8007062:	61fb      	str	r3, [r7, #28]
 8007064:	69fa      	ldr	r2, [r7, #28]
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	429a      	cmp	r2, r3
 800706a:	dbd6      	blt.n	800701a <matvecprod+0x4e>
	for(int i = 0; i < m; i++){
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	3301      	adds	r3, #1
 8007070:	61bb      	str	r3, [r7, #24]
 8007072:	69ba      	ldr	r2, [r7, #24]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	429a      	cmp	r2, r3
 8007078:	dbcc      	blt.n	8007014 <matvecprod+0x48>
        }
    }
}
 800707a:	bf00      	nop
 800707c:	3720      	adds	r7, #32
 800707e:	46bd      	mov	sp, r7
 8007080:	bdb0      	pop	{r4, r5, r7, pc}

08007082 <lower_triangular_inverse>:
	}
}

/* computes in-place the inverse of the lower triangular matrix L */
/* http://www.mymathlib.com/matrices/linearsystems/triangular.html */
int lower_triangular_inverse(int n, float *L) {
 8007082:	b480      	push	{r7}
 8007084:	b08b      	sub	sp, #44	; 0x2c
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
 800708a:	6039      	str	r1, [r7, #0]
   int i, j, k;
   float *p_i, *p_j, *p_k;
   float sum;

    /* Invert the diagonal elements of the lower triangular matrix L. */
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 800708c:	2300      	movs	r3, #0
 800708e:	61fb      	str	r3, [r7, #28]
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	613b      	str	r3, [r7, #16]
 8007094:	e01d      	b.n	80070d2 <lower_triangular_inverse+0x50>
        if (*p_k == 0.0) return -1;
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	edd3 7a00 	vldr	s15, [r3]
 800709c:	eef5 7a40 	vcmp.f32	s15, #0.0
 80070a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070a4:	d102      	bne.n	80070ac <lower_triangular_inverse+0x2a>
 80070a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070aa:	e076      	b.n	800719a <lower_triangular_inverse+0x118>
        else *p_k = 1.0 / *p_k;
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	ed93 7a00 	vldr	s14, [r3]
 80070b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	edc3 7a00 	vstr	s15, [r3]
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	3301      	adds	r3, #1
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	693a      	ldr	r2, [r7, #16]
 80070c8:	4413      	add	r3, r2
 80070ca:	613b      	str	r3, [r7, #16]
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	3301      	adds	r3, #1
 80070d0:	61fb      	str	r3, [r7, #28]
 80070d2:	69fa      	ldr	r2, [r7, #28]
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	dbdd      	blt.n	8007096 <lower_triangular_inverse+0x14>
    }
    
    /* Invert the remaining lower triangular matrix L row by row. */
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 80070da:	2301      	movs	r3, #1
 80070dc:	627b      	str	r3, [r7, #36]	; 0x24
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	683a      	ldr	r2, [r7, #0]
 80070e4:	4413      	add	r3, r2
 80070e6:	61bb      	str	r3, [r7, #24]
 80070e8:	e052      	b.n	8007190 <lower_triangular_inverse+0x10e>
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 80070ea:	2300      	movs	r3, #0
 80070ec:	623b      	str	r3, [r7, #32]
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	617b      	str	r3, [r7, #20]
 80070f2:	e041      	b.n	8007178 <lower_triangular_inverse+0xf6>
            sum = 0.0;
 80070f4:	f04f 0300 	mov.w	r3, #0
 80070f8:	60fb      	str	r3, [r7, #12]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 80070fa:	6a3b      	ldr	r3, [r7, #32]
 80070fc:	61fb      	str	r3, [r7, #28]
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	613b      	str	r3, [r7, #16]
 8007102:	e01b      	b.n	800713c <lower_triangular_inverse+0xba>
                sum += *(p_i + k) * *(p_k + j);
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	69ba      	ldr	r2, [r7, #24]
 800710a:	4413      	add	r3, r2
 800710c:	ed93 7a00 	vldr	s14, [r3]
 8007110:	6a3b      	ldr	r3, [r7, #32]
 8007112:	009b      	lsls	r3, r3, #2
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	4413      	add	r3, r2
 8007118:	edd3 7a00 	vldr	s15, [r3]
 800711c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007120:	ed97 7a03 	vldr	s14, [r7, #12]
 8007124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007128:	edc7 7a03 	vstr	s15, [r7, #12]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	3301      	adds	r3, #1
 8007130:	61fb      	str	r3, [r7, #28]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	693a      	ldr	r2, [r7, #16]
 8007138:	4413      	add	r3, r2
 800713a:	613b      	str	r3, [r7, #16]
 800713c:	69fa      	ldr	r2, [r7, #28]
 800713e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007140:	429a      	cmp	r2, r3
 8007142:	dbdf      	blt.n	8007104 <lower_triangular_inverse+0x82>
            *(p_i + j) = - *(p_i + i) * sum;
 8007144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	69ba      	ldr	r2, [r7, #24]
 800714a:	4413      	add	r3, r2
 800714c:	edd3 7a00 	vldr	s15, [r3]
 8007150:	eeb1 7a67 	vneg.f32	s14, s15
 8007154:	6a3b      	ldr	r3, [r7, #32]
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	69ba      	ldr	r2, [r7, #24]
 800715a:	4413      	add	r3, r2
 800715c:	edd7 7a03 	vldr	s15, [r7, #12]
 8007160:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007164:	edc3 7a00 	vstr	s15, [r3]
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	697a      	ldr	r2, [r7, #20]
 800716e:	4413      	add	r3, r2
 8007170:	617b      	str	r3, [r7, #20]
 8007172:	6a3b      	ldr	r3, [r7, #32]
 8007174:	3301      	adds	r3, #1
 8007176:	623b      	str	r3, [r7, #32]
 8007178:	6a3a      	ldr	r2, [r7, #32]
 800717a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717c:	429a      	cmp	r2, r3
 800717e:	dbb9      	blt.n	80070f4 <lower_triangular_inverse+0x72>
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 8007180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007182:	3301      	adds	r3, #1
 8007184:	627b      	str	r3, [r7, #36]	; 0x24
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	009b      	lsls	r3, r3, #2
 800718a:	69ba      	ldr	r2, [r7, #24]
 800718c:	4413      	add	r3, r2
 800718e:	61bb      	str	r3, [r7, #24]
 8007190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	429a      	cmp	r2, r3
 8007196:	dba8      	blt.n	80070ea <lower_triangular_inverse+0x68>
        }
    }
    
    return 0;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	372c      	adds	r7, #44	; 0x2c
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr
	...

080071a8 <cholesky>:

/* computes the cholesky decomposition */
/* https://rosettacode.org/wiki/Cholesky_decomposition#C */
void cholesky(int n, float A[n][n], float L[n][n]) {
 80071a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80071ac:	b08b      	sub	sp, #44	; 0x2c
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	60f8      	str	r0, [r7, #12]
 80071b2:	60b9      	str	r1, [r7, #8]
 80071b4:	607a      	str	r2, [r7, #4]
 80071b6:	68fe      	ldr	r6, [r7, #12]
 80071b8:	1e73      	subs	r3, r6, #1
 80071ba:	617b      	str	r3, [r7, #20]
 80071bc:	4633      	mov	r3, r6
 80071be:	4619      	mov	r1, r3
 80071c0:	f04f 0200 	mov.w	r2, #0
 80071c4:	f04f 0300 	mov.w	r3, #0
 80071c8:	f04f 0400 	mov.w	r4, #0
 80071cc:	0154      	lsls	r4, r2, #5
 80071ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80071d2:	014b      	lsls	r3, r1, #5
 80071d4:	68fd      	ldr	r5, [r7, #12]
 80071d6:	1e6b      	subs	r3, r5, #1
 80071d8:	613b      	str	r3, [r7, #16]
 80071da:	462b      	mov	r3, r5
 80071dc:	4619      	mov	r1, r3
 80071de:	f04f 0200 	mov.w	r2, #0
 80071e2:	f04f 0300 	mov.w	r3, #0
 80071e6:	f04f 0400 	mov.w	r4, #0
 80071ea:	0154      	lsls	r4, r2, #5
 80071ec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80071f0:	014b      	lsls	r3, r1, #5
    memset(L, 0, n * n * sizeof(L[0][0]));
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	fb02 f303 	mul.w	r3, r2, r3
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	461a      	mov	r2, r3
 80071fe:	2100      	movs	r1, #0
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f009 fc58 	bl	8010ab6 <memset>
    for (int i = 0; i < n; i++)
 8007206:	2300      	movs	r3, #0
 8007208:	61bb      	str	r3, [r7, #24]
 800720a:	e09f      	b.n	800734c <cholesky+0x1a4>
        for (int j = 0; j < (i+1); j++) {
 800720c:	2300      	movs	r3, #0
 800720e:	61fb      	str	r3, [r7, #28]
 8007210:	e093      	b.n	800733a <cholesky+0x192>
            float s = 0;
 8007212:	f04f 0300 	mov.w	r3, #0
 8007216:	623b      	str	r3, [r7, #32]
            for (int k = 0; k < j; k++)
 8007218:	2300      	movs	r3, #0
 800721a:	627b      	str	r3, [r7, #36]	; 0x24
 800721c:	e022      	b.n	8007264 <cholesky+0xbc>
                s += L[i][k] * L[j][k];
 800721e:	462a      	mov	r2, r5
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	fb03 f302 	mul.w	r3, r3, r2
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	441a      	add	r2, r3
 800722c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	4413      	add	r3, r2
 8007232:	ed93 7a00 	vldr	s14, [r3]
 8007236:	462a      	mov	r2, r5
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	fb03 f302 	mul.w	r3, r3, r2
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	441a      	add	r2, r3
 8007244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007246:	009b      	lsls	r3, r3, #2
 8007248:	4413      	add	r3, r2
 800724a:	edd3 7a00 	vldr	s15, [r3]
 800724e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007252:	ed97 7a08 	vldr	s14, [r7, #32]
 8007256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800725a:	edc7 7a08 	vstr	s15, [r7, #32]
            for (int k = 0; k < j; k++)
 800725e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007260:	3301      	adds	r3, #1
 8007262:	627b      	str	r3, [r7, #36]	; 0x24
 8007264:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	429a      	cmp	r2, r3
 800726a:	dbd8      	blt.n	800721e <cholesky+0x76>
            L[i][j] = (i == j) ? sqrtf(A[i][i] - s) : (1.0 / L[j][j] * (A[i][j] - s));
 800726c:	69ba      	ldr	r2, [r7, #24]
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	429a      	cmp	r2, r3
 8007272:	d116      	bne.n	80072a2 <cholesky+0xfa>
 8007274:	4632      	mov	r2, r6
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	fb03 f302 	mul.w	r3, r3, r2
 800727c:	009b      	lsls	r3, r3, #2
 800727e:	68ba      	ldr	r2, [r7, #8]
 8007280:	441a      	add	r2, r3
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	009b      	lsls	r3, r3, #2
 8007286:	4413      	add	r3, r2
 8007288:	ed93 7a00 	vldr	s14, [r3]
 800728c:	edd7 7a08 	vldr	s15, [r7, #32]
 8007290:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007294:	eeb0 0a67 	vmov.f32	s0, s15
 8007298:	f00d ff5c 	bl	8015154 <sqrtf>
 800729c:	ee10 1a10 	vmov	r1, s0
 80072a0:	e03d      	b.n	800731e <cholesky+0x176>
 80072a2:	462a      	mov	r2, r5
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	fb03 f302 	mul.w	r3, r3, r2
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	441a      	add	r2, r3
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	4413      	add	r3, r2
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4618      	mov	r0, r3
 80072ba:	f7f9 f945 	bl	8000548 <__aeabi_f2d>
 80072be:	4603      	mov	r3, r0
 80072c0:	460c      	mov	r4, r1
 80072c2:	461a      	mov	r2, r3
 80072c4:	4623      	mov	r3, r4
 80072c6:	f04f 0000 	mov.w	r0, #0
 80072ca:	4925      	ldr	r1, [pc, #148]	; (8007360 <cholesky+0x1b8>)
 80072cc:	f7f9 fabe 	bl	800084c <__aeabi_ddiv>
 80072d0:	4603      	mov	r3, r0
 80072d2:	460c      	mov	r4, r1
 80072d4:	4698      	mov	r8, r3
 80072d6:	46a1      	mov	r9, r4
 80072d8:	4632      	mov	r2, r6
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	fb03 f302 	mul.w	r3, r3, r2
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	68ba      	ldr	r2, [r7, #8]
 80072e4:	441a      	add	r2, r3
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4413      	add	r3, r2
 80072ec:	ed93 7a00 	vldr	s14, [r3]
 80072f0:	edd7 7a08 	vldr	s15, [r7, #32]
 80072f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80072f8:	ee17 0a90 	vmov	r0, s15
 80072fc:	f7f9 f924 	bl	8000548 <__aeabi_f2d>
 8007300:	4603      	mov	r3, r0
 8007302:	460c      	mov	r4, r1
 8007304:	461a      	mov	r2, r3
 8007306:	4623      	mov	r3, r4
 8007308:	4640      	mov	r0, r8
 800730a:	4649      	mov	r1, r9
 800730c:	f7f9 f974 	bl	80005f8 <__aeabi_dmul>
 8007310:	4603      	mov	r3, r0
 8007312:	460c      	mov	r4, r1
 8007314:	4618      	mov	r0, r3
 8007316:	4621      	mov	r1, r4
 8007318:	f7f9 fc66 	bl	8000be8 <__aeabi_d2f>
 800731c:	4601      	mov	r1, r0
 800731e:	462a      	mov	r2, r5
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	fb03 f302 	mul.w	r3, r3, r2
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	441a      	add	r2, r3
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	4413      	add	r3, r2
 8007332:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < (i+1); j++) {
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	3301      	adds	r3, #1
 8007338:	61fb      	str	r3, [r7, #28]
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	3301      	adds	r3, #1
 800733e:	69fa      	ldr	r2, [r7, #28]
 8007340:	429a      	cmp	r2, r3
 8007342:	f6ff af66 	blt.w	8007212 <cholesky+0x6a>
    for (int i = 0; i < n; i++)
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	3301      	adds	r3, #1
 800734a:	61bb      	str	r3, [r7, #24]
 800734c:	69ba      	ldr	r2, [r7, #24]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	429a      	cmp	r2, r3
 8007352:	f6ff af5b 	blt.w	800720c <cholesky+0x64>
        }
}
 8007356:	bf00      	nop
 8007358:	372c      	adds	r7, #44	; 0x2c
 800735a:	46bd      	mov	sp, r7
 800735c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007360:	3ff00000 	.word	0x3ff00000

08007364 <cholesky_inverse>:

/* computes the inverse of a Hermitian, positive-definite matrix of dimension n x n using cholesky decomposition*/
/* Krishnamoorthy, Aravindh, and Deepak Menon. "Matrix inversion using Cholesky decomposition." */
/* 2013 signal processing: Algorithms, architectures, arrangements, and applications (SPA). IEEE, 2013. */
/* the inverse has a big O complexity of n^3 */
void cholesky_inverse(int n, float A[n][n], float inverse[n][n], float lambda) {
 8007364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007368:	b090      	sub	sp, #64	; 0x40
 800736a:	af00      	add	r7, sp, #0
 800736c:	60f8      	str	r0, [r7, #12]
 800736e:	60b9      	str	r1, [r7, #8]
 8007370:	607a      	str	r2, [r7, #4]
 8007372:	ed87 0a00 	vstr	s0, [r7]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	1e5a      	subs	r2, r3, #1
 800737a:	63ba      	str	r2, [r7, #56]	; 0x38
 800737c:	4619      	mov	r1, r3
 800737e:	f04f 0200 	mov.w	r2, #0
 8007382:	f04f 0300 	mov.w	r3, #0
 8007386:	f04f 0400 	mov.w	r4, #0
 800738a:	0154      	lsls	r4, r2, #5
 800738c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007390:	014b      	lsls	r3, r1, #5
 8007392:	68fd      	ldr	r5, [r7, #12]
 8007394:	1e6b      	subs	r3, r5, #1
 8007396:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007398:	462b      	mov	r3, r5
 800739a:	4619      	mov	r1, r3
 800739c:	f04f 0200 	mov.w	r2, #0
 80073a0:	f04f 0300 	mov.w	r3, #0
 80073a4:	f04f 0400 	mov.w	r4, #0
 80073a8:	0154      	lsls	r4, r2, #5
 80073aa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80073ae:	014b      	lsls	r3, r1, #5
 80073b0:	466b      	mov	r3, sp
 80073b2:	4699      	mov	r9, r3
    /* add damping factor to avoid singularities. */
	/* if no damping is required set lambda to 0.0 */
	float A_dash[n][n];
 80073b4:	68f8      	ldr	r0, [r7, #12]
 80073b6:	68fe      	ldr	r6, [r7, #12]
 80073b8:	1e43      	subs	r3, r0, #1
 80073ba:	627b      	str	r3, [r7, #36]	; 0x24
 80073bc:	4603      	mov	r3, r0
 80073be:	4619      	mov	r1, r3
 80073c0:	f04f 0200 	mov.w	r2, #0
 80073c4:	f04f 0300 	mov.w	r3, #0
 80073c8:	f04f 0400 	mov.w	r4, #0
 80073cc:	0154      	lsls	r4, r2, #5
 80073ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80073d2:	014b      	lsls	r3, r1, #5
 80073d4:	4603      	mov	r3, r0
 80073d6:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80073da:	1e73      	subs	r3, r6, #1
 80073dc:	623b      	str	r3, [r7, #32]
 80073de:	4603      	mov	r3, r0
 80073e0:	4619      	mov	r1, r3
 80073e2:	f04f 0200 	mov.w	r2, #0
 80073e6:	4633      	mov	r3, r6
 80073e8:	f04f 0400 	mov.w	r4, #0
 80073ec:	fb03 fe02 	mul.w	lr, r3, r2
 80073f0:	fb01 fc04 	mul.w	ip, r1, r4
 80073f4:	44f4      	add	ip, lr
 80073f6:	fba1 3403 	umull	r3, r4, r1, r3
 80073fa:	eb0c 0204 	add.w	r2, ip, r4
 80073fe:	4614      	mov	r4, r2
 8007400:	f04f 0100 	mov.w	r1, #0
 8007404:	f04f 0200 	mov.w	r2, #0
 8007408:	0162      	lsls	r2, r4, #5
 800740a:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 800740e:	0159      	lsls	r1, r3, #5
 8007410:	4603      	mov	r3, r0
 8007412:	4619      	mov	r1, r3
 8007414:	f04f 0200 	mov.w	r2, #0
 8007418:	4633      	mov	r3, r6
 800741a:	f04f 0400 	mov.w	r4, #0
 800741e:	fb03 fe02 	mul.w	lr, r3, r2
 8007422:	fb01 fc04 	mul.w	ip, r1, r4
 8007426:	44f4      	add	ip, lr
 8007428:	fba1 3403 	umull	r3, r4, r1, r3
 800742c:	eb0c 0204 	add.w	r2, ip, r4
 8007430:	4614      	mov	r4, r2
 8007432:	f04f 0100 	mov.w	r1, #0
 8007436:	f04f 0200 	mov.w	r2, #0
 800743a:	0162      	lsls	r2, r4, #5
 800743c:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8007440:	0159      	lsls	r1, r3, #5
 8007442:	4603      	mov	r3, r0
 8007444:	4632      	mov	r2, r6
 8007446:	fb02 f303 	mul.w	r3, r2, r3
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	3303      	adds	r3, #3
 800744e:	3307      	adds	r3, #7
 8007450:	08db      	lsrs	r3, r3, #3
 8007452:	00db      	lsls	r3, r3, #3
 8007454:	ebad 0d03 	sub.w	sp, sp, r3
 8007458:	466b      	mov	r3, sp
 800745a:	3303      	adds	r3, #3
 800745c:	089b      	lsrs	r3, r3, #2
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	61fb      	str	r3, [r7, #28]
    memcpy(A_dash, A, n * n * sizeof(A[0][0]));
 8007462:	69f8      	ldr	r0, [r7, #28]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	68fa      	ldr	r2, [r7, #12]
 8007468:	fb02 f303 	mul.w	r3, r2, r3
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	461a      	mov	r2, r3
 8007470:	68b9      	ldr	r1, [r7, #8]
 8007472:	f009 fb15 	bl	8010aa0 <memcpy>
    for (int i = 0; i < n; i++) {
 8007476:	2300      	movs	r3, #0
 8007478:	62bb      	str	r3, [r7, #40]	; 0x28
 800747a:	e022      	b.n	80074c2 <cholesky_inverse+0x15e>
        A_dash[i][i] = A_dash[i][i] + lambda * lambda; 
 800747c:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8007480:	69fa      	ldr	r2, [r7, #28]
 8007482:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007484:	fb01 f103 	mul.w	r1, r1, r3
 8007488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800748a:	440b      	add	r3, r1
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	4413      	add	r3, r2
 8007490:	ed93 7a00 	vldr	s14, [r3]
 8007494:	edd7 6a00 	vldr	s13, [r7]
 8007498:	edd7 7a00 	vldr	s15, [r7]
 800749c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80074a0:	ea4f 0398 	mov.w	r3, r8, lsr #2
 80074a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80074a8:	69fa      	ldr	r2, [r7, #28]
 80074aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80074ac:	fb01 f103 	mul.w	r1, r1, r3
 80074b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b2:	440b      	add	r3, r1
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	4413      	add	r3, r2
 80074b8:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < n; i++) {
 80074bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074be:	3301      	adds	r3, #1
 80074c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80074c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	dbd8      	blt.n	800747c <cholesky_inverse+0x118>
	}

    /* call cholesky decomposition to get lower triangular matrix L */
    float L[n][n];
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	68fe      	ldr	r6, [r7, #12]
 80074ce:	466b      	mov	r3, sp
 80074d0:	469a      	mov	sl, r3
 80074d2:	1e43      	subs	r3, r0, #1
 80074d4:	61bb      	str	r3, [r7, #24]
 80074d6:	4603      	mov	r3, r0
 80074d8:	4619      	mov	r1, r3
 80074da:	f04f 0200 	mov.w	r2, #0
 80074de:	f04f 0300 	mov.w	r3, #0
 80074e2:	f04f 0400 	mov.w	r4, #0
 80074e6:	0154      	lsls	r4, r2, #5
 80074e8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80074ec:	014b      	lsls	r3, r1, #5
 80074ee:	4603      	mov	r3, r0
 80074f0:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80074f4:	1e73      	subs	r3, r6, #1
 80074f6:	617b      	str	r3, [r7, #20]
 80074f8:	4603      	mov	r3, r0
 80074fa:	4619      	mov	r1, r3
 80074fc:	f04f 0200 	mov.w	r2, #0
 8007500:	4633      	mov	r3, r6
 8007502:	f04f 0400 	mov.w	r4, #0
 8007506:	fb03 fe02 	mul.w	lr, r3, r2
 800750a:	fb01 fc04 	mul.w	ip, r1, r4
 800750e:	44f4      	add	ip, lr
 8007510:	fba1 3403 	umull	r3, r4, r1, r3
 8007514:	eb0c 0204 	add.w	r2, ip, r4
 8007518:	4614      	mov	r4, r2
 800751a:	f04f 0100 	mov.w	r1, #0
 800751e:	f04f 0200 	mov.w	r2, #0
 8007522:	0162      	lsls	r2, r4, #5
 8007524:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8007528:	0159      	lsls	r1, r3, #5
 800752a:	4603      	mov	r3, r0
 800752c:	4619      	mov	r1, r3
 800752e:	f04f 0200 	mov.w	r2, #0
 8007532:	4633      	mov	r3, r6
 8007534:	f04f 0400 	mov.w	r4, #0
 8007538:	fb03 fe02 	mul.w	lr, r3, r2
 800753c:	fb01 fc04 	mul.w	ip, r1, r4
 8007540:	44f4      	add	ip, lr
 8007542:	fba1 3403 	umull	r3, r4, r1, r3
 8007546:	eb0c 0204 	add.w	r2, ip, r4
 800754a:	4614      	mov	r4, r2
 800754c:	f04f 0100 	mov.w	r1, #0
 8007550:	f04f 0200 	mov.w	r2, #0
 8007554:	0162      	lsls	r2, r4, #5
 8007556:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 800755a:	0159      	lsls	r1, r3, #5
 800755c:	4603      	mov	r3, r0
 800755e:	4632      	mov	r2, r6
 8007560:	fb02 f303 	mul.w	r3, r2, r3
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	3303      	adds	r3, #3
 8007568:	3307      	adds	r3, #7
 800756a:	08db      	lsrs	r3, r3, #3
 800756c:	00db      	lsls	r3, r3, #3
 800756e:	ebad 0d03 	sub.w	sp, sp, r3
 8007572:	466b      	mov	r3, sp
 8007574:	3303      	adds	r3, #3
 8007576:	089b      	lsrs	r3, r3, #2
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	613b      	str	r3, [r7, #16]
    cholesky(n, A_dash, L);
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	693a      	ldr	r2, [r7, #16]
 8007580:	4619      	mov	r1, r3
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	f7ff fe10 	bl	80071a8 <cholesky>

    /* compute lower triangular inverse in-place */
    lower_triangular_inverse(n, &L[0][0]);
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	4619      	mov	r1, r3
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	f7ff fd78 	bl	8007082 <lower_triangular_inverse>

    /* compute matrix inverse A_inv = L_T^(-1) * L^(-1) */
    memset(inverse, 0, n * n * sizeof(inverse[0][0]));
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	fb02 f303 	mul.w	r3, r2, r3
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	461a      	mov	r2, r3
 800759e:	2100      	movs	r1, #0
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f009 fa88 	bl	8010ab6 <memset>
    for(int i = 0; i < n; i++){
 80075a6:	2300      	movs	r3, #0
 80075a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075aa:	e04e      	b.n	800764a <cholesky_inverse+0x2e6>
        for(int j = 0; j < n; j++){
 80075ac:	2300      	movs	r3, #0
 80075ae:	633b      	str	r3, [r7, #48]	; 0x30
 80075b0:	e044      	b.n	800763c <cholesky_inverse+0x2d8>
            for(int k = max(i, j); k < n; k++){
 80075b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b6:	4293      	cmp	r3, r2
 80075b8:	bfb8      	it	lt
 80075ba:	4613      	movlt	r3, r2
 80075bc:	637b      	str	r3, [r7, #52]	; 0x34
 80075be:	e036      	b.n	800762e <cholesky_inverse+0x2ca>
                inverse[i][j] +=  L[k][i] * L[k][j];
 80075c0:	462a      	mov	r2, r5
 80075c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075c4:	fb03 f302 	mul.w	r3, r3, r2
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	441a      	add	r2, r3
 80075ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	4413      	add	r3, r2
 80075d4:	ed93 7a00 	vldr	s14, [r3]
 80075d8:	ea4f 0398 	mov.w	r3, r8, lsr #2
 80075dc:	693a      	ldr	r2, [r7, #16]
 80075de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80075e0:	fb01 f103 	mul.w	r1, r1, r3
 80075e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e6:	440b      	add	r3, r1
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	4413      	add	r3, r2
 80075ec:	edd3 6a00 	vldr	s13, [r3]
 80075f0:	ea4f 0398 	mov.w	r3, r8, lsr #2
 80075f4:	693a      	ldr	r2, [r7, #16]
 80075f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80075f8:	fb01 f103 	mul.w	r1, r1, r3
 80075fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fe:	440b      	add	r3, r1
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	4413      	add	r3, r2
 8007604:	edd3 7a00 	vldr	s15, [r3]
 8007608:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800760c:	462a      	mov	r2, r5
 800760e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007610:	fb03 f302 	mul.w	r3, r3, r2
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	687a      	ldr	r2, [r7, #4]
 8007618:	441a      	add	r2, r3
 800761a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800761e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	4413      	add	r3, r2
 8007624:	edc3 7a00 	vstr	s15, [r3]
            for(int k = max(i, j); k < n; k++){
 8007628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800762a:	3301      	adds	r3, #1
 800762c:	637b      	str	r3, [r7, #52]	; 0x34
 800762e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	429a      	cmp	r2, r3
 8007634:	dbc4      	blt.n	80075c0 <cholesky_inverse+0x25c>
        for(int j = 0; j < n; j++){
 8007636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007638:	3301      	adds	r3, #1
 800763a:	633b      	str	r3, [r7, #48]	; 0x30
 800763c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	429a      	cmp	r2, r3
 8007642:	dbb6      	blt.n	80075b2 <cholesky_inverse+0x24e>
    for(int i = 0; i < n; i++){
 8007644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007646:	3301      	adds	r3, #1
 8007648:	62fb      	str	r3, [r7, #44]	; 0x2c
 800764a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	429a      	cmp	r2, r3
 8007650:	dbac      	blt.n	80075ac <cholesky_inverse+0x248>
 8007652:	46d5      	mov	sp, sl
 8007654:	46cd      	mov	sp, r9
            }
        }
    }
}
 8007656:	bf00      	nop
 8007658:	3740      	adds	r7, #64	; 0x40
 800765a:	46bd      	mov	sp, r7
 800765c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08007660 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007664:	4b0e      	ldr	r3, [pc, #56]	; (80076a0 <HAL_Init+0x40>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a0d      	ldr	r2, [pc, #52]	; (80076a0 <HAL_Init+0x40>)
 800766a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800766e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007670:	4b0b      	ldr	r3, [pc, #44]	; (80076a0 <HAL_Init+0x40>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a0a      	ldr	r2, [pc, #40]	; (80076a0 <HAL_Init+0x40>)
 8007676:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800767a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800767c:	4b08      	ldr	r3, [pc, #32]	; (80076a0 <HAL_Init+0x40>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a07      	ldr	r2, [pc, #28]	; (80076a0 <HAL_Init+0x40>)
 8007682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007686:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007688:	2003      	movs	r0, #3
 800768a:	f000 fd8b 	bl	80081a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800768e:	2000      	movs	r0, #0
 8007690:	f000 f808 	bl	80076a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007694:	f7fc fca6 	bl	8003fe4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	40023c00 	.word	0x40023c00

080076a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80076ac:	4b12      	ldr	r3, [pc, #72]	; (80076f8 <HAL_InitTick+0x54>)
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	4b12      	ldr	r3, [pc, #72]	; (80076fc <HAL_InitTick+0x58>)
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	4619      	mov	r1, r3
 80076b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80076ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80076be:	fbb2 f3f3 	udiv	r3, r2, r3
 80076c2:	4618      	mov	r0, r3
 80076c4:	f000 fda3 	bl	800820e <HAL_SYSTICK_Config>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d001      	beq.n	80076d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	e00e      	b.n	80076f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2b0f      	cmp	r3, #15
 80076d6:	d80a      	bhi.n	80076ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80076d8:	2200      	movs	r2, #0
 80076da:	6879      	ldr	r1, [r7, #4]
 80076dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076e0:	f000 fd6b 	bl	80081ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80076e4:	4a06      	ldr	r2, [pc, #24]	; (8007700 <HAL_InitTick+0x5c>)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80076ea:	2300      	movs	r3, #0
 80076ec:	e000      	b.n	80076f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3708      	adds	r7, #8
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	20000168 	.word	0x20000168
 80076fc:	20000174 	.word	0x20000174
 8007700:	20000170 	.word	0x20000170

08007704 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007704:	b480      	push	{r7}
 8007706:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007708:	4b06      	ldr	r3, [pc, #24]	; (8007724 <HAL_IncTick+0x20>)
 800770a:	781b      	ldrb	r3, [r3, #0]
 800770c:	461a      	mov	r2, r3
 800770e:	4b06      	ldr	r3, [pc, #24]	; (8007728 <HAL_IncTick+0x24>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	4413      	add	r3, r2
 8007714:	4a04      	ldr	r2, [pc, #16]	; (8007728 <HAL_IncTick+0x24>)
 8007716:	6013      	str	r3, [r2, #0]
}
 8007718:	bf00      	nop
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop
 8007724:	20000174 	.word	0x20000174
 8007728:	2000e1c8 	.word	0x2000e1c8

0800772c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800772c:	b480      	push	{r7}
 800772e:	af00      	add	r7, sp, #0
  return uwTick;
 8007730:	4b03      	ldr	r3, [pc, #12]	; (8007740 <HAL_GetTick+0x14>)
 8007732:	681b      	ldr	r3, [r3, #0]
}
 8007734:	4618      	mov	r0, r3
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr
 800773e:	bf00      	nop
 8007740:	2000e1c8 	.word	0x2000e1c8

08007744 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800774c:	f7ff ffee 	bl	800772c <HAL_GetTick>
 8007750:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800775c:	d005      	beq.n	800776a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800775e:	4b09      	ldr	r3, [pc, #36]	; (8007784 <HAL_Delay+0x40>)
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	461a      	mov	r2, r3
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	4413      	add	r3, r2
 8007768:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800776a:	bf00      	nop
 800776c:	f7ff ffde 	bl	800772c <HAL_GetTick>
 8007770:	4602      	mov	r2, r0
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	429a      	cmp	r2, r3
 800777a:	d8f7      	bhi.n	800776c <HAL_Delay+0x28>
  {
  }
}
 800777c:	bf00      	nop
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	20000174 	.word	0x20000174

08007788 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007790:	2300      	movs	r3, #0
 8007792:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d101      	bne.n	800779e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e033      	b.n	8007806 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d109      	bne.n	80077ba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f7fa fa0c 	bl	8001bc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077be:	f003 0310 	and.w	r3, r3, #16
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d118      	bne.n	80077f8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80077ce:	f023 0302 	bic.w	r3, r3, #2
 80077d2:	f043 0202 	orr.w	r2, r3, #2
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 fa94 	bl	8007d08 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ea:	f023 0303 	bic.w	r3, r3, #3
 80077ee:	f043 0201 	orr.w	r2, r3, #1
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	641a      	str	r2, [r3, #64]	; 0x40
 80077f6:	e001      	b.n	80077fc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007804:	7bfb      	ldrb	r3, [r7, #15]
}
 8007806:	4618      	mov	r0, r3
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
	...

08007810 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b086      	sub	sp, #24
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800781c:	2300      	movs	r3, #0
 800781e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007826:	2b01      	cmp	r3, #1
 8007828:	d101      	bne.n	800782e <HAL_ADC_Start_DMA+0x1e>
 800782a:	2302      	movs	r3, #2
 800782c:	e0cc      	b.n	80079c8 <HAL_ADC_Start_DMA+0x1b8>
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	2201      	movs	r2, #1
 8007832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	f003 0301 	and.w	r3, r3, #1
 8007840:	2b01      	cmp	r3, #1
 8007842:	d018      	beq.n	8007876 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	689a      	ldr	r2, [r3, #8]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f042 0201 	orr.w	r2, r2, #1
 8007852:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007854:	4b5e      	ldr	r3, [pc, #376]	; (80079d0 <HAL_ADC_Start_DMA+0x1c0>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a5e      	ldr	r2, [pc, #376]	; (80079d4 <HAL_ADC_Start_DMA+0x1c4>)
 800785a:	fba2 2303 	umull	r2, r3, r2, r3
 800785e:	0c9a      	lsrs	r2, r3, #18
 8007860:	4613      	mov	r3, r2
 8007862:	005b      	lsls	r3, r3, #1
 8007864:	4413      	add	r3, r2
 8007866:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007868:	e002      	b.n	8007870 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	3b01      	subs	r3, #1
 800786e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d1f9      	bne.n	800786a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	f003 0301 	and.w	r3, r3, #1
 8007880:	2b01      	cmp	r3, #1
 8007882:	f040 80a0 	bne.w	80079c6 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800788e:	f023 0301 	bic.w	r3, r3, #1
 8007892:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d007      	beq.n	80078b8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80078b0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078c4:	d106      	bne.n	80078d4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ca:	f023 0206 	bic.w	r2, r3, #6
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	645a      	str	r2, [r3, #68]	; 0x44
 80078d2:	e002      	b.n	80078da <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2200      	movs	r2, #0
 80078d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2200      	movs	r2, #0
 80078de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80078e2:	4b3d      	ldr	r3, [pc, #244]	; (80079d8 <HAL_ADC_Start_DMA+0x1c8>)
 80078e4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ea:	4a3c      	ldr	r2, [pc, #240]	; (80079dc <HAL_ADC_Start_DMA+0x1cc>)
 80078ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f2:	4a3b      	ldr	r2, [pc, #236]	; (80079e0 <HAL_ADC_Start_DMA+0x1d0>)
 80078f4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078fa:	4a3a      	ldr	r2, [pc, #232]	; (80079e4 <HAL_ADC_Start_DMA+0x1d4>)
 80078fc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8007906:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	685a      	ldr	r2, [r3, #4]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007916:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	689a      	ldr	r2, [r3, #8]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007926:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	334c      	adds	r3, #76	; 0x4c
 8007932:	4619      	mov	r1, r3
 8007934:	68ba      	ldr	r2, [r7, #8]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f000 fd24 	bl	8008384 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	f003 031f 	and.w	r3, r3, #31
 8007944:	2b00      	cmp	r3, #0
 8007946:	d12a      	bne.n	800799e <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a26      	ldr	r2, [pc, #152]	; (80079e8 <HAL_ADC_Start_DMA+0x1d8>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d015      	beq.n	800797e <HAL_ADC_Start_DMA+0x16e>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a25      	ldr	r2, [pc, #148]	; (80079ec <HAL_ADC_Start_DMA+0x1dc>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d105      	bne.n	8007968 <HAL_ADC_Start_DMA+0x158>
 800795c:	4b1e      	ldr	r3, [pc, #120]	; (80079d8 <HAL_ADC_Start_DMA+0x1c8>)
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	f003 031f 	and.w	r3, r3, #31
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00a      	beq.n	800797e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a20      	ldr	r2, [pc, #128]	; (80079f0 <HAL_ADC_Start_DMA+0x1e0>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d129      	bne.n	80079c6 <HAL_ADC_Start_DMA+0x1b6>
 8007972:	4b19      	ldr	r3, [pc, #100]	; (80079d8 <HAL_ADC_Start_DMA+0x1c8>)
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	f003 031f 	and.w	r3, r3, #31
 800797a:	2b0f      	cmp	r3, #15
 800797c:	d823      	bhi.n	80079c6 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007988:	2b00      	cmp	r3, #0
 800798a:	d11c      	bne.n	80079c6 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	689a      	ldr	r2, [r3, #8]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800799a:	609a      	str	r2, [r3, #8]
 800799c:	e013      	b.n	80079c6 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a11      	ldr	r2, [pc, #68]	; (80079e8 <HAL_ADC_Start_DMA+0x1d8>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d10e      	bne.n	80079c6 <HAL_ADC_Start_DMA+0x1b6>
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d107      	bne.n	80079c6 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	689a      	ldr	r2, [r3, #8]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80079c4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3718      	adds	r7, #24
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	20000168 	.word	0x20000168
 80079d4:	431bde83 	.word	0x431bde83
 80079d8:	40012300 	.word	0x40012300
 80079dc:	08007f01 	.word	0x08007f01
 80079e0:	08007fbb 	.word	0x08007fbb
 80079e4:	08007fd7 	.word	0x08007fd7
 80079e8:	40012000 	.word	0x40012000
 80079ec:	40012100 	.word	0x40012100
 80079f0:	40012200 	.word	0x40012200

080079f4 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80079fc:	2300      	movs	r3, #0
 80079fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d101      	bne.n	8007a0e <HAL_ADC_Stop_DMA+0x1a>
 8007a0a:	2302      	movs	r3, #2
 8007a0c:	e038      	b.n	8007a80 <HAL_ADC_Stop_DMA+0x8c>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2201      	movs	r2, #1
 8007a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	689a      	ldr	r2, [r3, #8]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f022 0201 	bic.w	r2, r2, #1
 8007a24:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	f003 0301 	and.w	r3, r3, #1
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d120      	bne.n	8007a76 <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	689a      	ldr	r2, [r3, #8]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a42:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f000 fcf3 	bl	8008434 <HAL_DMA_Abort>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	685a      	ldr	r2, [r3, #4]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8007a60:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a66:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007a6a:	f023 0301 	bic.w	r3, r3, #1
 8007a6e:	f043 0201 	orr.w	r2, r3, #1
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8007a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3710      	adds	r7, #16
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8007a90:	bf00      	nop
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8007aa4:	bf00      	nop
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr

08007ab0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007ab8:	bf00      	nop
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b085      	sub	sp, #20
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d101      	bne.n	8007ae0 <HAL_ADC_ConfigChannel+0x1c>
 8007adc:	2302      	movs	r3, #2
 8007ade:	e105      	b.n	8007cec <HAL_ADC_ConfigChannel+0x228>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2b09      	cmp	r3, #9
 8007aee:	d925      	bls.n	8007b3c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68d9      	ldr	r1, [r3, #12]
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	461a      	mov	r2, r3
 8007afe:	4613      	mov	r3, r2
 8007b00:	005b      	lsls	r3, r3, #1
 8007b02:	4413      	add	r3, r2
 8007b04:	3b1e      	subs	r3, #30
 8007b06:	2207      	movs	r2, #7
 8007b08:	fa02 f303 	lsl.w	r3, r2, r3
 8007b0c:	43da      	mvns	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	400a      	ands	r2, r1
 8007b14:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	68d9      	ldr	r1, [r3, #12]
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	689a      	ldr	r2, [r3, #8]
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	4618      	mov	r0, r3
 8007b28:	4603      	mov	r3, r0
 8007b2a:	005b      	lsls	r3, r3, #1
 8007b2c:	4403      	add	r3, r0
 8007b2e:	3b1e      	subs	r3, #30
 8007b30:	409a      	lsls	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	430a      	orrs	r2, r1
 8007b38:	60da      	str	r2, [r3, #12]
 8007b3a:	e022      	b.n	8007b82 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	6919      	ldr	r1, [r3, #16]
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	461a      	mov	r2, r3
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	005b      	lsls	r3, r3, #1
 8007b4e:	4413      	add	r3, r2
 8007b50:	2207      	movs	r2, #7
 8007b52:	fa02 f303 	lsl.w	r3, r2, r3
 8007b56:	43da      	mvns	r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	400a      	ands	r2, r1
 8007b5e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	6919      	ldr	r1, [r3, #16]
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	689a      	ldr	r2, [r3, #8]
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	4618      	mov	r0, r3
 8007b72:	4603      	mov	r3, r0
 8007b74:	005b      	lsls	r3, r3, #1
 8007b76:	4403      	add	r3, r0
 8007b78:	409a      	lsls	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	430a      	orrs	r2, r1
 8007b80:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	2b06      	cmp	r3, #6
 8007b88:	d824      	bhi.n	8007bd4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	685a      	ldr	r2, [r3, #4]
 8007b94:	4613      	mov	r3, r2
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	4413      	add	r3, r2
 8007b9a:	3b05      	subs	r3, #5
 8007b9c:	221f      	movs	r2, #31
 8007b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba2:	43da      	mvns	r2, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	400a      	ands	r2, r1
 8007baa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	4618      	mov	r0, r3
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	685a      	ldr	r2, [r3, #4]
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	4413      	add	r3, r2
 8007bc4:	3b05      	subs	r3, #5
 8007bc6:	fa00 f203 	lsl.w	r2, r0, r3
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	430a      	orrs	r2, r1
 8007bd0:	635a      	str	r2, [r3, #52]	; 0x34
 8007bd2:	e04c      	b.n	8007c6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	2b0c      	cmp	r3, #12
 8007bda:	d824      	bhi.n	8007c26 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	685a      	ldr	r2, [r3, #4]
 8007be6:	4613      	mov	r3, r2
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	4413      	add	r3, r2
 8007bec:	3b23      	subs	r3, #35	; 0x23
 8007bee:	221f      	movs	r2, #31
 8007bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf4:	43da      	mvns	r2, r3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	400a      	ands	r2, r1
 8007bfc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	685a      	ldr	r2, [r3, #4]
 8007c10:	4613      	mov	r3, r2
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4413      	add	r3, r2
 8007c16:	3b23      	subs	r3, #35	; 0x23
 8007c18:	fa00 f203 	lsl.w	r2, r0, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	430a      	orrs	r2, r1
 8007c22:	631a      	str	r2, [r3, #48]	; 0x30
 8007c24:	e023      	b.n	8007c6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	685a      	ldr	r2, [r3, #4]
 8007c30:	4613      	mov	r3, r2
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	4413      	add	r3, r2
 8007c36:	3b41      	subs	r3, #65	; 0x41
 8007c38:	221f      	movs	r2, #31
 8007c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c3e:	43da      	mvns	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	400a      	ands	r2, r1
 8007c46:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	4618      	mov	r0, r3
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	685a      	ldr	r2, [r3, #4]
 8007c5a:	4613      	mov	r3, r2
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	4413      	add	r3, r2
 8007c60:	3b41      	subs	r3, #65	; 0x41
 8007c62:	fa00 f203 	lsl.w	r2, r0, r3
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	430a      	orrs	r2, r1
 8007c6c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007c6e:	4b22      	ldr	r3, [pc, #136]	; (8007cf8 <HAL_ADC_ConfigChannel+0x234>)
 8007c70:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a21      	ldr	r2, [pc, #132]	; (8007cfc <HAL_ADC_ConfigChannel+0x238>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d109      	bne.n	8007c90 <HAL_ADC_ConfigChannel+0x1cc>
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2b12      	cmp	r3, #18
 8007c82:	d105      	bne.n	8007c90 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a19      	ldr	r2, [pc, #100]	; (8007cfc <HAL_ADC_ConfigChannel+0x238>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d123      	bne.n	8007ce2 <HAL_ADC_ConfigChannel+0x21e>
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2b10      	cmp	r3, #16
 8007ca0:	d003      	beq.n	8007caa <HAL_ADC_ConfigChannel+0x1e6>
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	2b11      	cmp	r3, #17
 8007ca8:	d11b      	bne.n	8007ce2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	2b10      	cmp	r3, #16
 8007cbc:	d111      	bne.n	8007ce2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007cbe:	4b10      	ldr	r3, [pc, #64]	; (8007d00 <HAL_ADC_ConfigChannel+0x23c>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a10      	ldr	r2, [pc, #64]	; (8007d04 <HAL_ADC_ConfigChannel+0x240>)
 8007cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8007cc8:	0c9a      	lsrs	r2, r3, #18
 8007cca:	4613      	mov	r3, r2
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	4413      	add	r3, r2
 8007cd0:	005b      	lsls	r3, r3, #1
 8007cd2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007cd4:	e002      	b.n	8007cdc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1f9      	bne.n	8007cd6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3714      	adds	r7, #20
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr
 8007cf8:	40012300 	.word	0x40012300
 8007cfc:	40012000 	.word	0x40012000
 8007d00:	20000168 	.word	0x20000168
 8007d04:	431bde83 	.word	0x431bde83

08007d08 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007d10:	4b79      	ldr	r3, [pc, #484]	; (8007ef8 <ADC_Init+0x1f0>)
 8007d12:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	685a      	ldr	r2, [r3, #4]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	431a      	orrs	r2, r3
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	685a      	ldr	r2, [r3, #4]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	6859      	ldr	r1, [r3, #4]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	691b      	ldr	r3, [r3, #16]
 8007d48:	021a      	lsls	r2, r3, #8
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	430a      	orrs	r2, r1
 8007d50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	685a      	ldr	r2, [r3, #4]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007d60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	6859      	ldr	r1, [r3, #4]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	689a      	ldr	r2, [r3, #8]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	430a      	orrs	r2, r1
 8007d72:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	689a      	ldr	r2, [r3, #8]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	6899      	ldr	r1, [r3, #8]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	68da      	ldr	r2, [r3, #12]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	430a      	orrs	r2, r1
 8007d94:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d9a:	4a58      	ldr	r2, [pc, #352]	; (8007efc <ADC_Init+0x1f4>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d022      	beq.n	8007de6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	689a      	ldr	r2, [r3, #8]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007dae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	6899      	ldr	r1, [r3, #8]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	430a      	orrs	r2, r1
 8007dc0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	689a      	ldr	r2, [r3, #8]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007dd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	6899      	ldr	r1, [r3, #8]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	430a      	orrs	r2, r1
 8007de2:	609a      	str	r2, [r3, #8]
 8007de4:	e00f      	b.n	8007e06 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	689a      	ldr	r2, [r3, #8]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007df4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	689a      	ldr	r2, [r3, #8]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007e04:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	689a      	ldr	r2, [r3, #8]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f022 0202 	bic.w	r2, r2, #2
 8007e14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	6899      	ldr	r1, [r3, #8]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	7e1b      	ldrb	r3, [r3, #24]
 8007e20:	005a      	lsls	r2, r3, #1
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	430a      	orrs	r2, r1
 8007e28:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d01b      	beq.n	8007e6c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	685a      	ldr	r2, [r3, #4]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e42:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	685a      	ldr	r2, [r3, #4]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007e52:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	6859      	ldr	r1, [r3, #4]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5e:	3b01      	subs	r3, #1
 8007e60:	035a      	lsls	r2, r3, #13
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	430a      	orrs	r2, r1
 8007e68:	605a      	str	r2, [r3, #4]
 8007e6a:	e007      	b.n	8007e7c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	685a      	ldr	r2, [r3, #4]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e7a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007e8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	69db      	ldr	r3, [r3, #28]
 8007e96:	3b01      	subs	r3, #1
 8007e98:	051a      	lsls	r2, r3, #20
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	430a      	orrs	r2, r1
 8007ea0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	689a      	ldr	r2, [r3, #8]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007eb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	6899      	ldr	r1, [r3, #8]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007ebe:	025a      	lsls	r2, r3, #9
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	430a      	orrs	r2, r1
 8007ec6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	689a      	ldr	r2, [r3, #8]
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ed6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	6899      	ldr	r1, [r3, #8]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	695b      	ldr	r3, [r3, #20]
 8007ee2:	029a      	lsls	r2, r3, #10
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	430a      	orrs	r2, r1
 8007eea:	609a      	str	r2, [r3, #8]
}
 8007eec:	bf00      	nop
 8007eee:	3714      	adds	r7, #20
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr
 8007ef8:	40012300 	.word	0x40012300
 8007efc:	0f000001 	.word	0x0f000001

08007f00 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f0c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f12:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d13c      	bne.n	8007f94 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d12b      	bne.n	8007f8c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d127      	bne.n	8007f8c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f42:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d006      	beq.n	8007f58 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d119      	bne.n	8007f8c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	685a      	ldr	r2, [r3, #4]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f022 0220 	bic.w	r2, r2, #32
 8007f66:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d105      	bne.n	8007f8c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f84:	f043 0201 	orr.w	r2, r3, #1
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007f8c:	68f8      	ldr	r0, [r7, #12]
 8007f8e:	f7ff fd7b 	bl	8007a88 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007f92:	e00e      	b.n	8007fb2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f98:	f003 0310 	and.w	r3, r3, #16
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d003      	beq.n	8007fa8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	f7ff fd85 	bl	8007ab0 <HAL_ADC_ErrorCallback>
}
 8007fa6:	e004      	b.n	8007fb2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	4798      	blx	r3
}
 8007fb2:	bf00      	nop
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}

08007fba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007fba:	b580      	push	{r7, lr}
 8007fbc:	b084      	sub	sp, #16
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fc6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007fc8:	68f8      	ldr	r0, [r7, #12]
 8007fca:	f7ff fd67 	bl	8007a9c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007fce:	bf00      	nop
 8007fd0:	3710      	adds	r7, #16
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b084      	sub	sp, #16
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2240      	movs	r2, #64	; 0x40
 8007fe8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fee:	f043 0204 	orr.w	r2, r3, #4
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007ff6:	68f8      	ldr	r0, [r7, #12]
 8007ff8:	f7ff fd5a 	bl	8007ab0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007ffc:	bf00      	nop
 8007ffe:	3710      	adds	r7, #16
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <__NVIC_SetPriorityGrouping>:
{
 8008004:	b480      	push	{r7}
 8008006:	b085      	sub	sp, #20
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f003 0307 	and.w	r3, r3, #7
 8008012:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008014:	4b0c      	ldr	r3, [pc, #48]	; (8008048 <__NVIC_SetPriorityGrouping+0x44>)
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800801a:	68ba      	ldr	r2, [r7, #8]
 800801c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008020:	4013      	ands	r3, r2
 8008022:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800802c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008036:	4a04      	ldr	r2, [pc, #16]	; (8008048 <__NVIC_SetPriorityGrouping+0x44>)
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	60d3      	str	r3, [r2, #12]
}
 800803c:	bf00      	nop
 800803e:	3714      	adds	r7, #20
 8008040:	46bd      	mov	sp, r7
 8008042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008046:	4770      	bx	lr
 8008048:	e000ed00 	.word	0xe000ed00

0800804c <__NVIC_GetPriorityGrouping>:
{
 800804c:	b480      	push	{r7}
 800804e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008050:	4b04      	ldr	r3, [pc, #16]	; (8008064 <__NVIC_GetPriorityGrouping+0x18>)
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	0a1b      	lsrs	r3, r3, #8
 8008056:	f003 0307 	and.w	r3, r3, #7
}
 800805a:	4618      	mov	r0, r3
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr
 8008064:	e000ed00 	.word	0xe000ed00

08008068 <__NVIC_EnableIRQ>:
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	4603      	mov	r3, r0
 8008070:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008076:	2b00      	cmp	r3, #0
 8008078:	db0b      	blt.n	8008092 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800807a:	79fb      	ldrb	r3, [r7, #7]
 800807c:	f003 021f 	and.w	r2, r3, #31
 8008080:	4907      	ldr	r1, [pc, #28]	; (80080a0 <__NVIC_EnableIRQ+0x38>)
 8008082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008086:	095b      	lsrs	r3, r3, #5
 8008088:	2001      	movs	r0, #1
 800808a:	fa00 f202 	lsl.w	r2, r0, r2
 800808e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008092:	bf00      	nop
 8008094:	370c      	adds	r7, #12
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr
 800809e:	bf00      	nop
 80080a0:	e000e100 	.word	0xe000e100

080080a4 <__NVIC_SetPriority>:
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	4603      	mov	r3, r0
 80080ac:	6039      	str	r1, [r7, #0]
 80080ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80080b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	db0a      	blt.n	80080ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	b2da      	uxtb	r2, r3
 80080bc:	490c      	ldr	r1, [pc, #48]	; (80080f0 <__NVIC_SetPriority+0x4c>)
 80080be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080c2:	0112      	lsls	r2, r2, #4
 80080c4:	b2d2      	uxtb	r2, r2
 80080c6:	440b      	add	r3, r1
 80080c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80080cc:	e00a      	b.n	80080e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	b2da      	uxtb	r2, r3
 80080d2:	4908      	ldr	r1, [pc, #32]	; (80080f4 <__NVIC_SetPriority+0x50>)
 80080d4:	79fb      	ldrb	r3, [r7, #7]
 80080d6:	f003 030f 	and.w	r3, r3, #15
 80080da:	3b04      	subs	r3, #4
 80080dc:	0112      	lsls	r2, r2, #4
 80080de:	b2d2      	uxtb	r2, r2
 80080e0:	440b      	add	r3, r1
 80080e2:	761a      	strb	r2, [r3, #24]
}
 80080e4:	bf00      	nop
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr
 80080f0:	e000e100 	.word	0xe000e100
 80080f4:	e000ed00 	.word	0xe000ed00

080080f8 <NVIC_EncodePriority>:
{
 80080f8:	b480      	push	{r7}
 80080fa:	b089      	sub	sp, #36	; 0x24
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	60f8      	str	r0, [r7, #12]
 8008100:	60b9      	str	r1, [r7, #8]
 8008102:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f003 0307 	and.w	r3, r3, #7
 800810a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	f1c3 0307 	rsb	r3, r3, #7
 8008112:	2b04      	cmp	r3, #4
 8008114:	bf28      	it	cs
 8008116:	2304      	movcs	r3, #4
 8008118:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	3304      	adds	r3, #4
 800811e:	2b06      	cmp	r3, #6
 8008120:	d902      	bls.n	8008128 <NVIC_EncodePriority+0x30>
 8008122:	69fb      	ldr	r3, [r7, #28]
 8008124:	3b03      	subs	r3, #3
 8008126:	e000      	b.n	800812a <NVIC_EncodePriority+0x32>
 8008128:	2300      	movs	r3, #0
 800812a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800812c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008130:	69bb      	ldr	r3, [r7, #24]
 8008132:	fa02 f303 	lsl.w	r3, r2, r3
 8008136:	43da      	mvns	r2, r3
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	401a      	ands	r2, r3
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008140:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	fa01 f303 	lsl.w	r3, r1, r3
 800814a:	43d9      	mvns	r1, r3
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008150:	4313      	orrs	r3, r2
}
 8008152:	4618      	mov	r0, r3
 8008154:	3724      	adds	r7, #36	; 0x24
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr
	...

08008160 <SysTick_Config>:
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	3b01      	subs	r3, #1
 800816c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008170:	d301      	bcc.n	8008176 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8008172:	2301      	movs	r3, #1
 8008174:	e00f      	b.n	8008196 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008176:	4a0a      	ldr	r2, [pc, #40]	; (80081a0 <SysTick_Config+0x40>)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	3b01      	subs	r3, #1
 800817c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800817e:	210f      	movs	r1, #15
 8008180:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008184:	f7ff ff8e 	bl	80080a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008188:	4b05      	ldr	r3, [pc, #20]	; (80081a0 <SysTick_Config+0x40>)
 800818a:	2200      	movs	r2, #0
 800818c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800818e:	4b04      	ldr	r3, [pc, #16]	; (80081a0 <SysTick_Config+0x40>)
 8008190:	2207      	movs	r2, #7
 8008192:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3708      	adds	r7, #8
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	e000e010 	.word	0xe000e010

080081a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f7ff ff29 	bl	8008004 <__NVIC_SetPriorityGrouping>
}
 80081b2:	bf00      	nop
 80081b4:	3708      	adds	r7, #8
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b086      	sub	sp, #24
 80081be:	af00      	add	r7, sp, #0
 80081c0:	4603      	mov	r3, r0
 80081c2:	60b9      	str	r1, [r7, #8]
 80081c4:	607a      	str	r2, [r7, #4]
 80081c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80081c8:	2300      	movs	r3, #0
 80081ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80081cc:	f7ff ff3e 	bl	800804c <__NVIC_GetPriorityGrouping>
 80081d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	68b9      	ldr	r1, [r7, #8]
 80081d6:	6978      	ldr	r0, [r7, #20]
 80081d8:	f7ff ff8e 	bl	80080f8 <NVIC_EncodePriority>
 80081dc:	4602      	mov	r2, r0
 80081de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081e2:	4611      	mov	r1, r2
 80081e4:	4618      	mov	r0, r3
 80081e6:	f7ff ff5d 	bl	80080a4 <__NVIC_SetPriority>
}
 80081ea:	bf00      	nop
 80081ec:	3718      	adds	r7, #24
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b082      	sub	sp, #8
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	4603      	mov	r3, r0
 80081fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80081fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008200:	4618      	mov	r0, r3
 8008202:	f7ff ff31 	bl	8008068 <__NVIC_EnableIRQ>
}
 8008206:	bf00      	nop
 8008208:	3708      	adds	r7, #8
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}

0800820e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800820e:	b580      	push	{r7, lr}
 8008210:	b082      	sub	sp, #8
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7ff ffa2 	bl	8008160 <SysTick_Config>
 800821c:	4603      	mov	r3, r0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3708      	adds	r7, #8
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
	...

08008228 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b086      	sub	sp, #24
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008230:	2300      	movs	r3, #0
 8008232:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008234:	f7ff fa7a 	bl	800772c <HAL_GetTick>
 8008238:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d101      	bne.n	8008244 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008240:	2301      	movs	r3, #1
 8008242:	e099      	b.n	8008378 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2202      	movs	r2, #2
 8008250:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f022 0201 	bic.w	r2, r2, #1
 8008262:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008264:	e00f      	b.n	8008286 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008266:	f7ff fa61 	bl	800772c <HAL_GetTick>
 800826a:	4602      	mov	r2, r0
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	1ad3      	subs	r3, r2, r3
 8008270:	2b05      	cmp	r3, #5
 8008272:	d908      	bls.n	8008286 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2220      	movs	r2, #32
 8008278:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2203      	movs	r2, #3
 800827e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008282:	2303      	movs	r3, #3
 8008284:	e078      	b.n	8008378 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f003 0301 	and.w	r3, r3, #1
 8008290:	2b00      	cmp	r3, #0
 8008292:	d1e8      	bne.n	8008266 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800829c:	697a      	ldr	r2, [r7, #20]
 800829e:	4b38      	ldr	r3, [pc, #224]	; (8008380 <HAL_DMA_Init+0x158>)
 80082a0:	4013      	ands	r3, r2
 80082a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	685a      	ldr	r2, [r3, #4]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80082b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	691b      	ldr	r3, [r3, #16]
 80082b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80082be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	699b      	ldr	r3, [r3, #24]
 80082c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80082ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6a1b      	ldr	r3, [r3, #32]
 80082d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80082d2:	697a      	ldr	r2, [r7, #20]
 80082d4:	4313      	orrs	r3, r2
 80082d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082dc:	2b04      	cmp	r3, #4
 80082de:	d107      	bne.n	80082f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082e8:	4313      	orrs	r3, r2
 80082ea:	697a      	ldr	r2, [r7, #20]
 80082ec:	4313      	orrs	r3, r2
 80082ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	697a      	ldr	r2, [r7, #20]
 80082f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	695b      	ldr	r3, [r3, #20]
 80082fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	f023 0307 	bic.w	r3, r3, #7
 8008306:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800830c:	697a      	ldr	r2, [r7, #20]
 800830e:	4313      	orrs	r3, r2
 8008310:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008316:	2b04      	cmp	r3, #4
 8008318:	d117      	bne.n	800834a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800831e:	697a      	ldr	r2, [r7, #20]
 8008320:	4313      	orrs	r3, r2
 8008322:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008328:	2b00      	cmp	r3, #0
 800832a:	d00e      	beq.n	800834a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 fb0d 	bl	800894c <DMA_CheckFifoParam>
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d008      	beq.n	800834a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2240      	movs	r2, #64	; 0x40
 800833c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2201      	movs	r2, #1
 8008342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008346:	2301      	movs	r3, #1
 8008348:	e016      	b.n	8008378 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	697a      	ldr	r2, [r7, #20]
 8008350:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fac4 	bl	80088e0 <DMA_CalcBaseAndBitshift>
 8008358:	4603      	mov	r3, r0
 800835a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008360:	223f      	movs	r2, #63	; 0x3f
 8008362:	409a      	lsls	r2, r3
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2201      	movs	r2, #1
 8008372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008376:	2300      	movs	r3, #0
}
 8008378:	4618      	mov	r0, r3
 800837a:	3718      	adds	r7, #24
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}
 8008380:	f010803f 	.word	0xf010803f

08008384 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b086      	sub	sp, #24
 8008388:	af00      	add	r7, sp, #0
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	607a      	str	r2, [r7, #4]
 8008390:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008392:	2300      	movs	r3, #0
 8008394:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800839a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d101      	bne.n	80083aa <HAL_DMA_Start_IT+0x26>
 80083a6:	2302      	movs	r3, #2
 80083a8:	e040      	b.n	800842c <HAL_DMA_Start_IT+0xa8>
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2201      	movs	r2, #1
 80083ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d12f      	bne.n	800841e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2202      	movs	r2, #2
 80083c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2200      	movs	r2, #0
 80083ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	68b9      	ldr	r1, [r7, #8]
 80083d2:	68f8      	ldr	r0, [r7, #12]
 80083d4:	f000 fa56 	bl	8008884 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083dc:	223f      	movs	r2, #63	; 0x3f
 80083de:	409a      	lsls	r2, r3
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f042 0216 	orr.w	r2, r2, #22
 80083f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d007      	beq.n	800840c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f042 0208 	orr.w	r2, r2, #8
 800840a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f042 0201 	orr.w	r2, r2, #1
 800841a:	601a      	str	r2, [r3, #0]
 800841c:	e005      	b.n	800842a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2200      	movs	r2, #0
 8008422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008426:	2302      	movs	r3, #2
 8008428:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800842a:	7dfb      	ldrb	r3, [r7, #23]
}
 800842c:	4618      	mov	r0, r3
 800842e:	3718      	adds	r7, #24
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008440:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008442:	f7ff f973 	bl	800772c <HAL_GetTick>
 8008446:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800844e:	b2db      	uxtb	r3, r3
 8008450:	2b02      	cmp	r3, #2
 8008452:	d008      	beq.n	8008466 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2280      	movs	r2, #128	; 0x80
 8008458:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	e052      	b.n	800850c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f022 0216 	bic.w	r2, r2, #22
 8008474:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	695a      	ldr	r2, [r3, #20]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008484:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800848a:	2b00      	cmp	r3, #0
 800848c:	d103      	bne.n	8008496 <HAL_DMA_Abort+0x62>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008492:	2b00      	cmp	r3, #0
 8008494:	d007      	beq.n	80084a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f022 0208 	bic.w	r2, r2, #8
 80084a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f022 0201 	bic.w	r2, r2, #1
 80084b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80084b6:	e013      	b.n	80084e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80084b8:	f7ff f938 	bl	800772c <HAL_GetTick>
 80084bc:	4602      	mov	r2, r0
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	1ad3      	subs	r3, r2, r3
 80084c2:	2b05      	cmp	r3, #5
 80084c4:	d90c      	bls.n	80084e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2220      	movs	r2, #32
 80084ca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2203      	movs	r2, #3
 80084d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80084dc:	2303      	movs	r3, #3
 80084de:	e015      	b.n	800850c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f003 0301 	and.w	r3, r3, #1
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d1e4      	bne.n	80084b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084f2:	223f      	movs	r2, #63	; 0x3f
 80084f4:	409a      	lsls	r2, r3
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2201      	movs	r2, #1
 8008506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800850a:	2300      	movs	r3, #0
}
 800850c:	4618      	mov	r0, r3
 800850e:	3710      	adds	r7, #16
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008522:	b2db      	uxtb	r3, r3
 8008524:	2b02      	cmp	r3, #2
 8008526:	d004      	beq.n	8008532 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2280      	movs	r2, #128	; 0x80
 800852c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800852e:	2301      	movs	r3, #1
 8008530:	e00c      	b.n	800854c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2205      	movs	r2, #5
 8008536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f022 0201 	bic.w	r2, r2, #1
 8008548:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b086      	sub	sp, #24
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008560:	2300      	movs	r3, #0
 8008562:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008564:	4b92      	ldr	r3, [pc, #584]	; (80087b0 <HAL_DMA_IRQHandler+0x258>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a92      	ldr	r2, [pc, #584]	; (80087b4 <HAL_DMA_IRQHandler+0x25c>)
 800856a:	fba2 2303 	umull	r2, r3, r2, r3
 800856e:	0a9b      	lsrs	r3, r3, #10
 8008570:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008576:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008582:	2208      	movs	r2, #8
 8008584:	409a      	lsls	r2, r3
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	4013      	ands	r3, r2
 800858a:	2b00      	cmp	r3, #0
 800858c:	d01a      	beq.n	80085c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f003 0304 	and.w	r3, r3, #4
 8008598:	2b00      	cmp	r3, #0
 800859a:	d013      	beq.n	80085c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f022 0204 	bic.w	r2, r2, #4
 80085aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085b0:	2208      	movs	r2, #8
 80085b2:	409a      	lsls	r2, r3
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085bc:	f043 0201 	orr.w	r2, r3, #1
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085c8:	2201      	movs	r2, #1
 80085ca:	409a      	lsls	r2, r3
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	4013      	ands	r3, r2
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d012      	beq.n	80085fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	695b      	ldr	r3, [r3, #20]
 80085da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00b      	beq.n	80085fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085e6:	2201      	movs	r2, #1
 80085e8:	409a      	lsls	r2, r3
 80085ea:	693b      	ldr	r3, [r7, #16]
 80085ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085f2:	f043 0202 	orr.w	r2, r3, #2
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085fe:	2204      	movs	r2, #4
 8008600:	409a      	lsls	r2, r3
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	4013      	ands	r3, r2
 8008606:	2b00      	cmp	r3, #0
 8008608:	d012      	beq.n	8008630 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f003 0302 	and.w	r3, r3, #2
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00b      	beq.n	8008630 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800861c:	2204      	movs	r2, #4
 800861e:	409a      	lsls	r2, r3
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008628:	f043 0204 	orr.w	r2, r3, #4
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008634:	2210      	movs	r2, #16
 8008636:	409a      	lsls	r2, r3
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	4013      	ands	r3, r2
 800863c:	2b00      	cmp	r3, #0
 800863e:	d043      	beq.n	80086c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f003 0308 	and.w	r3, r3, #8
 800864a:	2b00      	cmp	r3, #0
 800864c:	d03c      	beq.n	80086c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008652:	2210      	movs	r2, #16
 8008654:	409a      	lsls	r2, r3
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008664:	2b00      	cmp	r3, #0
 8008666:	d018      	beq.n	800869a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008672:	2b00      	cmp	r3, #0
 8008674:	d108      	bne.n	8008688 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800867a:	2b00      	cmp	r3, #0
 800867c:	d024      	beq.n	80086c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	4798      	blx	r3
 8008686:	e01f      	b.n	80086c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800868c:	2b00      	cmp	r3, #0
 800868e:	d01b      	beq.n	80086c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	4798      	blx	r3
 8008698:	e016      	b.n	80086c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d107      	bne.n	80086b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f022 0208 	bic.w	r2, r2, #8
 80086b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d003      	beq.n	80086c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086cc:	2220      	movs	r2, #32
 80086ce:	409a      	lsls	r2, r3
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	4013      	ands	r3, r2
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	f000 808e 	beq.w	80087f6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f003 0310 	and.w	r3, r3, #16
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	f000 8086 	beq.w	80087f6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086ee:	2220      	movs	r2, #32
 80086f0:	409a      	lsls	r2, r3
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	2b05      	cmp	r3, #5
 8008700:	d136      	bne.n	8008770 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f022 0216 	bic.w	r2, r2, #22
 8008710:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	695a      	ldr	r2, [r3, #20]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008720:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008726:	2b00      	cmp	r3, #0
 8008728:	d103      	bne.n	8008732 <HAL_DMA_IRQHandler+0x1da>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800872e:	2b00      	cmp	r3, #0
 8008730:	d007      	beq.n	8008742 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f022 0208 	bic.w	r2, r2, #8
 8008740:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008746:	223f      	movs	r2, #63	; 0x3f
 8008748:	409a      	lsls	r2, r3
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2201      	movs	r2, #1
 800875a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008762:	2b00      	cmp	r3, #0
 8008764:	d07d      	beq.n	8008862 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	4798      	blx	r3
        }
        return;
 800876e:	e078      	b.n	8008862 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800877a:	2b00      	cmp	r3, #0
 800877c:	d01c      	beq.n	80087b8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008788:	2b00      	cmp	r3, #0
 800878a:	d108      	bne.n	800879e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008790:	2b00      	cmp	r3, #0
 8008792:	d030      	beq.n	80087f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	4798      	blx	r3
 800879c:	e02b      	b.n	80087f6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d027      	beq.n	80087f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	4798      	blx	r3
 80087ae:	e022      	b.n	80087f6 <HAL_DMA_IRQHandler+0x29e>
 80087b0:	20000168 	.word	0x20000168
 80087b4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d10f      	bne.n	80087e6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f022 0210 	bic.w	r2, r2, #16
 80087d4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2201      	movs	r2, #1
 80087e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d003      	beq.n	80087f6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d032      	beq.n	8008864 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008802:	f003 0301 	and.w	r3, r3, #1
 8008806:	2b00      	cmp	r3, #0
 8008808:	d022      	beq.n	8008850 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2205      	movs	r2, #5
 800880e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f022 0201 	bic.w	r2, r2, #1
 8008820:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	3301      	adds	r3, #1
 8008826:	60bb      	str	r3, [r7, #8]
 8008828:	697a      	ldr	r2, [r7, #20]
 800882a:	429a      	cmp	r2, r3
 800882c:	d307      	bcc.n	800883e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f003 0301 	and.w	r3, r3, #1
 8008838:	2b00      	cmp	r3, #0
 800883a:	d1f2      	bne.n	8008822 <HAL_DMA_IRQHandler+0x2ca>
 800883c:	e000      	b.n	8008840 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800883e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008854:	2b00      	cmp	r3, #0
 8008856:	d005      	beq.n	8008864 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	4798      	blx	r3
 8008860:	e000      	b.n	8008864 <HAL_DMA_IRQHandler+0x30c>
        return;
 8008862:	bf00      	nop
    }
  }
}
 8008864:	3718      	adds	r7, #24
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop

0800886c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800886c:	b480      	push	{r7}
 800886e:	b083      	sub	sp, #12
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008878:	4618      	mov	r0, r3
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008884:	b480      	push	{r7}
 8008886:	b085      	sub	sp, #20
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	607a      	str	r2, [r7, #4]
 8008890:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80088a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	683a      	ldr	r2, [r7, #0]
 80088a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	2b40      	cmp	r3, #64	; 0x40
 80088b0:	d108      	bne.n	80088c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	68ba      	ldr	r2, [r7, #8]
 80088c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80088c2:	e007      	b.n	80088d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	68ba      	ldr	r2, [r7, #8]
 80088ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	60da      	str	r2, [r3, #12]
}
 80088d4:	bf00      	nop
 80088d6:	3714      	adds	r7, #20
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	3b10      	subs	r3, #16
 80088f0:	4a14      	ldr	r2, [pc, #80]	; (8008944 <DMA_CalcBaseAndBitshift+0x64>)
 80088f2:	fba2 2303 	umull	r2, r3, r2, r3
 80088f6:	091b      	lsrs	r3, r3, #4
 80088f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80088fa:	4a13      	ldr	r2, [pc, #76]	; (8008948 <DMA_CalcBaseAndBitshift+0x68>)
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	4413      	add	r3, r2
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	461a      	mov	r2, r3
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2b03      	cmp	r3, #3
 800890c:	d909      	bls.n	8008922 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008916:	f023 0303 	bic.w	r3, r3, #3
 800891a:	1d1a      	adds	r2, r3, #4
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	659a      	str	r2, [r3, #88]	; 0x58
 8008920:	e007      	b.n	8008932 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800892a:	f023 0303 	bic.w	r3, r3, #3
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008936:	4618      	mov	r0, r3
 8008938:	3714      	adds	r7, #20
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr
 8008942:	bf00      	nop
 8008944:	aaaaaaab 	.word	0xaaaaaaab
 8008948:	08016b70 	.word	0x08016b70

0800894c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800894c:	b480      	push	{r7}
 800894e:	b085      	sub	sp, #20
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008954:	2300      	movs	r3, #0
 8008956:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800895c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	699b      	ldr	r3, [r3, #24]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d11f      	bne.n	80089a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	2b03      	cmp	r3, #3
 800896a:	d855      	bhi.n	8008a18 <DMA_CheckFifoParam+0xcc>
 800896c:	a201      	add	r2, pc, #4	; (adr r2, 8008974 <DMA_CheckFifoParam+0x28>)
 800896e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008972:	bf00      	nop
 8008974:	08008985 	.word	0x08008985
 8008978:	08008997 	.word	0x08008997
 800897c:	08008985 	.word	0x08008985
 8008980:	08008a19 	.word	0x08008a19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008988:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800898c:	2b00      	cmp	r3, #0
 800898e:	d045      	beq.n	8008a1c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008994:	e042      	b.n	8008a1c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800899a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800899e:	d13f      	bne.n	8008a20 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80089a0:	2301      	movs	r3, #1
 80089a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80089a4:	e03c      	b.n	8008a20 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	699b      	ldr	r3, [r3, #24]
 80089aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089ae:	d121      	bne.n	80089f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	2b03      	cmp	r3, #3
 80089b4:	d836      	bhi.n	8008a24 <DMA_CheckFifoParam+0xd8>
 80089b6:	a201      	add	r2, pc, #4	; (adr r2, 80089bc <DMA_CheckFifoParam+0x70>)
 80089b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089bc:	080089cd 	.word	0x080089cd
 80089c0:	080089d3 	.word	0x080089d3
 80089c4:	080089cd 	.word	0x080089cd
 80089c8:	080089e5 	.word	0x080089e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	73fb      	strb	r3, [r7, #15]
      break;
 80089d0:	e02f      	b.n	8008a32 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d024      	beq.n	8008a28 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80089e2:	e021      	b.n	8008a28 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80089ec:	d11e      	bne.n	8008a2c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80089f2:	e01b      	b.n	8008a2c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	2b02      	cmp	r3, #2
 80089f8:	d902      	bls.n	8008a00 <DMA_CheckFifoParam+0xb4>
 80089fa:	2b03      	cmp	r3, #3
 80089fc:	d003      	beq.n	8008a06 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80089fe:	e018      	b.n	8008a32 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	73fb      	strb	r3, [r7, #15]
      break;
 8008a04:	e015      	b.n	8008a32 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00e      	beq.n	8008a30 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	73fb      	strb	r3, [r7, #15]
      break;
 8008a16:	e00b      	b.n	8008a30 <DMA_CheckFifoParam+0xe4>
      break;
 8008a18:	bf00      	nop
 8008a1a:	e00a      	b.n	8008a32 <DMA_CheckFifoParam+0xe6>
      break;
 8008a1c:	bf00      	nop
 8008a1e:	e008      	b.n	8008a32 <DMA_CheckFifoParam+0xe6>
      break;
 8008a20:	bf00      	nop
 8008a22:	e006      	b.n	8008a32 <DMA_CheckFifoParam+0xe6>
      break;
 8008a24:	bf00      	nop
 8008a26:	e004      	b.n	8008a32 <DMA_CheckFifoParam+0xe6>
      break;
 8008a28:	bf00      	nop
 8008a2a:	e002      	b.n	8008a32 <DMA_CheckFifoParam+0xe6>
      break;   
 8008a2c:	bf00      	nop
 8008a2e:	e000      	b.n	8008a32 <DMA_CheckFifoParam+0xe6>
      break;
 8008a30:	bf00      	nop
    }
  } 
  
  return status; 
 8008a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3714      	adds	r7, #20
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b089      	sub	sp, #36	; 0x24
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008a52:	2300      	movs	r3, #0
 8008a54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008a56:	2300      	movs	r3, #0
 8008a58:	61fb      	str	r3, [r7, #28]
 8008a5a:	e16b      	b.n	8008d34 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008a5c:	2201      	movs	r2, #1
 8008a5e:	69fb      	ldr	r3, [r7, #28]
 8008a60:	fa02 f303 	lsl.w	r3, r2, r3
 8008a64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	697a      	ldr	r2, [r7, #20]
 8008a6c:	4013      	ands	r3, r2
 8008a6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008a70:	693a      	ldr	r2, [r7, #16]
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	f040 815a 	bne.w	8008d2e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d00b      	beq.n	8008a9a <HAL_GPIO_Init+0x5a>
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	2b02      	cmp	r3, #2
 8008a88:	d007      	beq.n	8008a9a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008a8e:	2b11      	cmp	r3, #17
 8008a90:	d003      	beq.n	8008a9a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	2b12      	cmp	r3, #18
 8008a98:	d130      	bne.n	8008afc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	005b      	lsls	r3, r3, #1
 8008aa4:	2203      	movs	r2, #3
 8008aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aaa:	43db      	mvns	r3, r3
 8008aac:	69ba      	ldr	r2, [r7, #24]
 8008aae:	4013      	ands	r3, r2
 8008ab0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	68da      	ldr	r2, [r3, #12]
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	005b      	lsls	r3, r3, #1
 8008aba:	fa02 f303 	lsl.w	r3, r2, r3
 8008abe:	69ba      	ldr	r2, [r7, #24]
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	69ba      	ldr	r2, [r7, #24]
 8008ac8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008ad0:	2201      	movs	r2, #1
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ad8:	43db      	mvns	r3, r3
 8008ada:	69ba      	ldr	r2, [r7, #24]
 8008adc:	4013      	ands	r3, r2
 8008ade:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	091b      	lsrs	r3, r3, #4
 8008ae6:	f003 0201 	and.w	r2, r3, #1
 8008aea:	69fb      	ldr	r3, [r7, #28]
 8008aec:	fa02 f303 	lsl.w	r3, r2, r3
 8008af0:	69ba      	ldr	r2, [r7, #24]
 8008af2:	4313      	orrs	r3, r2
 8008af4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	69ba      	ldr	r2, [r7, #24]
 8008afa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	68db      	ldr	r3, [r3, #12]
 8008b00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008b02:	69fb      	ldr	r3, [r7, #28]
 8008b04:	005b      	lsls	r3, r3, #1
 8008b06:	2203      	movs	r2, #3
 8008b08:	fa02 f303 	lsl.w	r3, r2, r3
 8008b0c:	43db      	mvns	r3, r3
 8008b0e:	69ba      	ldr	r2, [r7, #24]
 8008b10:	4013      	ands	r3, r2
 8008b12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	689a      	ldr	r2, [r3, #8]
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	005b      	lsls	r3, r3, #1
 8008b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b20:	69ba      	ldr	r2, [r7, #24]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	69ba      	ldr	r2, [r7, #24]
 8008b2a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	2b02      	cmp	r3, #2
 8008b32:	d003      	beq.n	8008b3c <HAL_GPIO_Init+0xfc>
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	2b12      	cmp	r3, #18
 8008b3a:	d123      	bne.n	8008b84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008b3c:	69fb      	ldr	r3, [r7, #28]
 8008b3e:	08da      	lsrs	r2, r3, #3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	3208      	adds	r2, #8
 8008b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	f003 0307 	and.w	r3, r3, #7
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	220f      	movs	r2, #15
 8008b54:	fa02 f303 	lsl.w	r3, r2, r3
 8008b58:	43db      	mvns	r3, r3
 8008b5a:	69ba      	ldr	r2, [r7, #24]
 8008b5c:	4013      	ands	r3, r2
 8008b5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	691a      	ldr	r2, [r3, #16]
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	f003 0307 	and.w	r3, r3, #7
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b70:	69ba      	ldr	r2, [r7, #24]
 8008b72:	4313      	orrs	r3, r2
 8008b74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	08da      	lsrs	r2, r3, #3
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	3208      	adds	r2, #8
 8008b7e:	69b9      	ldr	r1, [r7, #24]
 8008b80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	005b      	lsls	r3, r3, #1
 8008b8e:	2203      	movs	r2, #3
 8008b90:	fa02 f303 	lsl.w	r3, r2, r3
 8008b94:	43db      	mvns	r3, r3
 8008b96:	69ba      	ldr	r2, [r7, #24]
 8008b98:	4013      	ands	r3, r2
 8008b9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	f003 0203 	and.w	r2, r3, #3
 8008ba4:	69fb      	ldr	r3, [r7, #28]
 8008ba6:	005b      	lsls	r3, r3, #1
 8008ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8008bac:	69ba      	ldr	r2, [r7, #24]
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	69ba      	ldr	r2, [r7, #24]
 8008bb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	f000 80b4 	beq.w	8008d2e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	60fb      	str	r3, [r7, #12]
 8008bca:	4b5f      	ldr	r3, [pc, #380]	; (8008d48 <HAL_GPIO_Init+0x308>)
 8008bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bce:	4a5e      	ldr	r2, [pc, #376]	; (8008d48 <HAL_GPIO_Init+0x308>)
 8008bd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008bd4:	6453      	str	r3, [r2, #68]	; 0x44
 8008bd6:	4b5c      	ldr	r3, [pc, #368]	; (8008d48 <HAL_GPIO_Init+0x308>)
 8008bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bde:	60fb      	str	r3, [r7, #12]
 8008be0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008be2:	4a5a      	ldr	r2, [pc, #360]	; (8008d4c <HAL_GPIO_Init+0x30c>)
 8008be4:	69fb      	ldr	r3, [r7, #28]
 8008be6:	089b      	lsrs	r3, r3, #2
 8008be8:	3302      	adds	r3, #2
 8008bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	f003 0303 	and.w	r3, r3, #3
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	220f      	movs	r2, #15
 8008bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8008bfe:	43db      	mvns	r3, r3
 8008c00:	69ba      	ldr	r2, [r7, #24]
 8008c02:	4013      	ands	r3, r2
 8008c04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4a51      	ldr	r2, [pc, #324]	; (8008d50 <HAL_GPIO_Init+0x310>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d02b      	beq.n	8008c66 <HAL_GPIO_Init+0x226>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4a50      	ldr	r2, [pc, #320]	; (8008d54 <HAL_GPIO_Init+0x314>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d025      	beq.n	8008c62 <HAL_GPIO_Init+0x222>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4a4f      	ldr	r2, [pc, #316]	; (8008d58 <HAL_GPIO_Init+0x318>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d01f      	beq.n	8008c5e <HAL_GPIO_Init+0x21e>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4a4e      	ldr	r2, [pc, #312]	; (8008d5c <HAL_GPIO_Init+0x31c>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d019      	beq.n	8008c5a <HAL_GPIO_Init+0x21a>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4a4d      	ldr	r2, [pc, #308]	; (8008d60 <HAL_GPIO_Init+0x320>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d013      	beq.n	8008c56 <HAL_GPIO_Init+0x216>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4a4c      	ldr	r2, [pc, #304]	; (8008d64 <HAL_GPIO_Init+0x324>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d00d      	beq.n	8008c52 <HAL_GPIO_Init+0x212>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4a4b      	ldr	r2, [pc, #300]	; (8008d68 <HAL_GPIO_Init+0x328>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d007      	beq.n	8008c4e <HAL_GPIO_Init+0x20e>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	4a4a      	ldr	r2, [pc, #296]	; (8008d6c <HAL_GPIO_Init+0x32c>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d101      	bne.n	8008c4a <HAL_GPIO_Init+0x20a>
 8008c46:	2307      	movs	r3, #7
 8008c48:	e00e      	b.n	8008c68 <HAL_GPIO_Init+0x228>
 8008c4a:	2308      	movs	r3, #8
 8008c4c:	e00c      	b.n	8008c68 <HAL_GPIO_Init+0x228>
 8008c4e:	2306      	movs	r3, #6
 8008c50:	e00a      	b.n	8008c68 <HAL_GPIO_Init+0x228>
 8008c52:	2305      	movs	r3, #5
 8008c54:	e008      	b.n	8008c68 <HAL_GPIO_Init+0x228>
 8008c56:	2304      	movs	r3, #4
 8008c58:	e006      	b.n	8008c68 <HAL_GPIO_Init+0x228>
 8008c5a:	2303      	movs	r3, #3
 8008c5c:	e004      	b.n	8008c68 <HAL_GPIO_Init+0x228>
 8008c5e:	2302      	movs	r3, #2
 8008c60:	e002      	b.n	8008c68 <HAL_GPIO_Init+0x228>
 8008c62:	2301      	movs	r3, #1
 8008c64:	e000      	b.n	8008c68 <HAL_GPIO_Init+0x228>
 8008c66:	2300      	movs	r3, #0
 8008c68:	69fa      	ldr	r2, [r7, #28]
 8008c6a:	f002 0203 	and.w	r2, r2, #3
 8008c6e:	0092      	lsls	r2, r2, #2
 8008c70:	4093      	lsls	r3, r2
 8008c72:	69ba      	ldr	r2, [r7, #24]
 8008c74:	4313      	orrs	r3, r2
 8008c76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008c78:	4934      	ldr	r1, [pc, #208]	; (8008d4c <HAL_GPIO_Init+0x30c>)
 8008c7a:	69fb      	ldr	r3, [r7, #28]
 8008c7c:	089b      	lsrs	r3, r3, #2
 8008c7e:	3302      	adds	r3, #2
 8008c80:	69ba      	ldr	r2, [r7, #24]
 8008c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008c86:	4b3a      	ldr	r3, [pc, #232]	; (8008d70 <HAL_GPIO_Init+0x330>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	43db      	mvns	r3, r3
 8008c90:	69ba      	ldr	r2, [r7, #24]
 8008c92:	4013      	ands	r3, r2
 8008c94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d003      	beq.n	8008caa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008ca2:	69ba      	ldr	r2, [r7, #24]
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008caa:	4a31      	ldr	r2, [pc, #196]	; (8008d70 <HAL_GPIO_Init+0x330>)
 8008cac:	69bb      	ldr	r3, [r7, #24]
 8008cae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008cb0:	4b2f      	ldr	r3, [pc, #188]	; (8008d70 <HAL_GPIO_Init+0x330>)
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	43db      	mvns	r3, r3
 8008cba:	69ba      	ldr	r2, [r7, #24]
 8008cbc:	4013      	ands	r3, r2
 8008cbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d003      	beq.n	8008cd4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008ccc:	69ba      	ldr	r2, [r7, #24]
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008cd4:	4a26      	ldr	r2, [pc, #152]	; (8008d70 <HAL_GPIO_Init+0x330>)
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008cda:	4b25      	ldr	r3, [pc, #148]	; (8008d70 <HAL_GPIO_Init+0x330>)
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	43db      	mvns	r3, r3
 8008ce4:	69ba      	ldr	r2, [r7, #24]
 8008ce6:	4013      	ands	r3, r2
 8008ce8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d003      	beq.n	8008cfe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008cf6:	69ba      	ldr	r2, [r7, #24]
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008cfe:	4a1c      	ldr	r2, [pc, #112]	; (8008d70 <HAL_GPIO_Init+0x330>)
 8008d00:	69bb      	ldr	r3, [r7, #24]
 8008d02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008d04:	4b1a      	ldr	r3, [pc, #104]	; (8008d70 <HAL_GPIO_Init+0x330>)
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	43db      	mvns	r3, r3
 8008d0e:	69ba      	ldr	r2, [r7, #24]
 8008d10:	4013      	ands	r3, r2
 8008d12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d003      	beq.n	8008d28 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008d20:	69ba      	ldr	r2, [r7, #24]
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	4313      	orrs	r3, r2
 8008d26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008d28:	4a11      	ldr	r2, [pc, #68]	; (8008d70 <HAL_GPIO_Init+0x330>)
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	3301      	adds	r3, #1
 8008d32:	61fb      	str	r3, [r7, #28]
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	2b0f      	cmp	r3, #15
 8008d38:	f67f ae90 	bls.w	8008a5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008d3c:	bf00      	nop
 8008d3e:	3724      	adds	r7, #36	; 0x24
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr
 8008d48:	40023800 	.word	0x40023800
 8008d4c:	40013800 	.word	0x40013800
 8008d50:	40020000 	.word	0x40020000
 8008d54:	40020400 	.word	0x40020400
 8008d58:	40020800 	.word	0x40020800
 8008d5c:	40020c00 	.word	0x40020c00
 8008d60:	40021000 	.word	0x40021000
 8008d64:	40021400 	.word	0x40021400
 8008d68:	40021800 	.word	0x40021800
 8008d6c:	40021c00 	.word	0x40021c00
 8008d70:	40013c00 	.word	0x40013c00

08008d74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b085      	sub	sp, #20
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	691a      	ldr	r2, [r3, #16]
 8008d84:	887b      	ldrh	r3, [r7, #2]
 8008d86:	4013      	ands	r3, r2
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d002      	beq.n	8008d92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	73fb      	strb	r3, [r7, #15]
 8008d90:	e001      	b.n	8008d96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008d92:	2300      	movs	r3, #0
 8008d94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3714      	adds	r7, #20
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	460b      	mov	r3, r1
 8008dae:	807b      	strh	r3, [r7, #2]
 8008db0:	4613      	mov	r3, r2
 8008db2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008db4:	787b      	ldrb	r3, [r7, #1]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d003      	beq.n	8008dc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008dba:	887a      	ldrh	r2, [r7, #2]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008dc0:	e003      	b.n	8008dca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008dc2:	887b      	ldrh	r3, [r7, #2]
 8008dc4:	041a      	lsls	r2, r3, #16
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	619a      	str	r2, [r3, #24]
}
 8008dca:	bf00      	nop
 8008dcc:	370c      	adds	r7, #12
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr

08008dd6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008dd6:	b480      	push	{r7}
 8008dd8:	b083      	sub	sp, #12
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
 8008dde:	460b      	mov	r3, r1
 8008de0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	695a      	ldr	r2, [r3, #20]
 8008de6:	887b      	ldrh	r3, [r7, #2]
 8008de8:	401a      	ands	r2, r3
 8008dea:	887b      	ldrh	r3, [r7, #2]
 8008dec:	429a      	cmp	r2, r3
 8008dee:	d104      	bne.n	8008dfa <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008df0:	887b      	ldrh	r3, [r7, #2]
 8008df2:	041a      	lsls	r2, r3, #16
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8008df8:	e002      	b.n	8008e00 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8008dfa:	887a      	ldrh	r2, [r7, #2]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	619a      	str	r2, [r3, #24]
}
 8008e00:	bf00      	nop
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b084      	sub	sp, #16
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d101      	bne.n	8008e1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	e11f      	b.n	800905e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d106      	bne.n	8008e38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f7f9 fb84 	bl	8002540 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2224      	movs	r2, #36	; 0x24
 8008e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f022 0201 	bic.w	r2, r2, #1
 8008e4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	681a      	ldr	r2, [r3, #0]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008e6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008e70:	f001 fca4 	bl	800a7bc <HAL_RCC_GetPCLK1Freq>
 8008e74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	4a7b      	ldr	r2, [pc, #492]	; (8009068 <HAL_I2C_Init+0x25c>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d807      	bhi.n	8008e90 <HAL_I2C_Init+0x84>
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	4a7a      	ldr	r2, [pc, #488]	; (800906c <HAL_I2C_Init+0x260>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	bf94      	ite	ls
 8008e88:	2301      	movls	r3, #1
 8008e8a:	2300      	movhi	r3, #0
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	e006      	b.n	8008e9e <HAL_I2C_Init+0x92>
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	4a77      	ldr	r2, [pc, #476]	; (8009070 <HAL_I2C_Init+0x264>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	bf94      	ite	ls
 8008e98:	2301      	movls	r3, #1
 8008e9a:	2300      	movhi	r3, #0
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d001      	beq.n	8008ea6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e0db      	b.n	800905e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	4a72      	ldr	r2, [pc, #456]	; (8009074 <HAL_I2C_Init+0x268>)
 8008eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8008eae:	0c9b      	lsrs	r3, r3, #18
 8008eb0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	68ba      	ldr	r2, [r7, #8]
 8008ec2:	430a      	orrs	r2, r1
 8008ec4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	6a1b      	ldr	r3, [r3, #32]
 8008ecc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	4a64      	ldr	r2, [pc, #400]	; (8009068 <HAL_I2C_Init+0x25c>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d802      	bhi.n	8008ee0 <HAL_I2C_Init+0xd4>
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	3301      	adds	r3, #1
 8008ede:	e009      	b.n	8008ef4 <HAL_I2C_Init+0xe8>
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008ee6:	fb02 f303 	mul.w	r3, r2, r3
 8008eea:	4a63      	ldr	r2, [pc, #396]	; (8009078 <HAL_I2C_Init+0x26c>)
 8008eec:	fba2 2303 	umull	r2, r3, r2, r3
 8008ef0:	099b      	lsrs	r3, r3, #6
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	6812      	ldr	r2, [r2, #0]
 8008ef8:	430b      	orrs	r3, r1
 8008efa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	69db      	ldr	r3, [r3, #28]
 8008f02:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008f06:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	4956      	ldr	r1, [pc, #344]	; (8009068 <HAL_I2C_Init+0x25c>)
 8008f10:	428b      	cmp	r3, r1
 8008f12:	d80d      	bhi.n	8008f30 <HAL_I2C_Init+0x124>
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	1e59      	subs	r1, r3, #1
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	005b      	lsls	r3, r3, #1
 8008f1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008f22:	3301      	adds	r3, #1
 8008f24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f28:	2b04      	cmp	r3, #4
 8008f2a:	bf38      	it	cc
 8008f2c:	2304      	movcc	r3, #4
 8008f2e:	e04f      	b.n	8008fd0 <HAL_I2C_Init+0x1c4>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d111      	bne.n	8008f5c <HAL_I2C_Init+0x150>
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	1e58      	subs	r0, r3, #1
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6859      	ldr	r1, [r3, #4]
 8008f40:	460b      	mov	r3, r1
 8008f42:	005b      	lsls	r3, r3, #1
 8008f44:	440b      	add	r3, r1
 8008f46:	fbb0 f3f3 	udiv	r3, r0, r3
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	bf0c      	ite	eq
 8008f54:	2301      	moveq	r3, #1
 8008f56:	2300      	movne	r3, #0
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	e012      	b.n	8008f82 <HAL_I2C_Init+0x176>
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	1e58      	subs	r0, r3, #1
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6859      	ldr	r1, [r3, #4]
 8008f64:	460b      	mov	r3, r1
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	440b      	add	r3, r1
 8008f6a:	0099      	lsls	r1, r3, #2
 8008f6c:	440b      	add	r3, r1
 8008f6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008f72:	3301      	adds	r3, #1
 8008f74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	bf0c      	ite	eq
 8008f7c:	2301      	moveq	r3, #1
 8008f7e:	2300      	movne	r3, #0
 8008f80:	b2db      	uxtb	r3, r3
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d001      	beq.n	8008f8a <HAL_I2C_Init+0x17e>
 8008f86:	2301      	movs	r3, #1
 8008f88:	e022      	b.n	8008fd0 <HAL_I2C_Init+0x1c4>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d10e      	bne.n	8008fb0 <HAL_I2C_Init+0x1a4>
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	1e58      	subs	r0, r3, #1
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6859      	ldr	r1, [r3, #4]
 8008f9a:	460b      	mov	r3, r1
 8008f9c:	005b      	lsls	r3, r3, #1
 8008f9e:	440b      	add	r3, r1
 8008fa0:	fbb0 f3f3 	udiv	r3, r0, r3
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fae:	e00f      	b.n	8008fd0 <HAL_I2C_Init+0x1c4>
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	1e58      	subs	r0, r3, #1
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6859      	ldr	r1, [r3, #4]
 8008fb8:	460b      	mov	r3, r1
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	440b      	add	r3, r1
 8008fbe:	0099      	lsls	r1, r3, #2
 8008fc0:	440b      	add	r3, r1
 8008fc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008fcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008fd0:	6879      	ldr	r1, [r7, #4]
 8008fd2:	6809      	ldr	r1, [r1, #0]
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	69da      	ldr	r2, [r3, #28]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6a1b      	ldr	r3, [r3, #32]
 8008fea:	431a      	orrs	r2, r3
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	430a      	orrs	r2, r1
 8008ff2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008ffe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	6911      	ldr	r1, [r2, #16]
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	68d2      	ldr	r2, [r2, #12]
 800900a:	4311      	orrs	r1, r2
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	6812      	ldr	r2, [r2, #0]
 8009010:	430b      	orrs	r3, r1
 8009012:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	68db      	ldr	r3, [r3, #12]
 800901a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	695a      	ldr	r2, [r3, #20]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	699b      	ldr	r3, [r3, #24]
 8009026:	431a      	orrs	r2, r3
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	430a      	orrs	r2, r1
 800902e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	681a      	ldr	r2, [r3, #0]
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f042 0201 	orr.w	r2, r2, #1
 800903e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2220      	movs	r2, #32
 800904a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2200      	movs	r2, #0
 8009052:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800905c:	2300      	movs	r3, #0
}
 800905e:	4618      	mov	r0, r3
 8009060:	3710      	adds	r7, #16
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop
 8009068:	000186a0 	.word	0x000186a0
 800906c:	001e847f 	.word	0x001e847f
 8009070:	003d08ff 	.word	0x003d08ff
 8009074:	431bde83 	.word	0x431bde83
 8009078:	10624dd3 	.word	0x10624dd3

0800907c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b088      	sub	sp, #32
 8009080:	af02      	add	r7, sp, #8
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	607a      	str	r2, [r7, #4]
 8009086:	461a      	mov	r2, r3
 8009088:	460b      	mov	r3, r1
 800908a:	817b      	strh	r3, [r7, #10]
 800908c:	4613      	mov	r3, r2
 800908e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009090:	f7fe fb4c 	bl	800772c <HAL_GetTick>
 8009094:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800909c:	b2db      	uxtb	r3, r3
 800909e:	2b20      	cmp	r3, #32
 80090a0:	f040 80e0 	bne.w	8009264 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	9300      	str	r3, [sp, #0]
 80090a8:	2319      	movs	r3, #25
 80090aa:	2201      	movs	r2, #1
 80090ac:	4970      	ldr	r1, [pc, #448]	; (8009270 <HAL_I2C_Master_Transmit+0x1f4>)
 80090ae:	68f8      	ldr	r0, [r7, #12]
 80090b0:	f000 fd92 	bl	8009bd8 <I2C_WaitOnFlagUntilTimeout>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d001      	beq.n	80090be <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80090ba:	2302      	movs	r3, #2
 80090bc:	e0d3      	b.n	8009266 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d101      	bne.n	80090cc <HAL_I2C_Master_Transmit+0x50>
 80090c8:	2302      	movs	r3, #2
 80090ca:	e0cc      	b.n	8009266 <HAL_I2C_Master_Transmit+0x1ea>
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2201      	movs	r2, #1
 80090d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f003 0301 	and.w	r3, r3, #1
 80090de:	2b01      	cmp	r3, #1
 80090e0:	d007      	beq.n	80090f2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f042 0201 	orr.w	r2, r2, #1
 80090f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009100:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2221      	movs	r2, #33	; 0x21
 8009106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2210      	movs	r2, #16
 800910e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2200      	movs	r2, #0
 8009116:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	893a      	ldrh	r2, [r7, #8]
 8009122:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009128:	b29a      	uxth	r2, r3
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	4a50      	ldr	r2, [pc, #320]	; (8009274 <HAL_I2C_Master_Transmit+0x1f8>)
 8009132:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009134:	8979      	ldrh	r1, [r7, #10]
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	6a3a      	ldr	r2, [r7, #32]
 800913a:	68f8      	ldr	r0, [r7, #12]
 800913c:	f000 fbfe 	bl	800993c <I2C_MasterRequestWrite>
 8009140:	4603      	mov	r3, r0
 8009142:	2b00      	cmp	r3, #0
 8009144:	d001      	beq.n	800914a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009146:	2301      	movs	r3, #1
 8009148:	e08d      	b.n	8009266 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800914a:	2300      	movs	r3, #0
 800914c:	613b      	str	r3, [r7, #16]
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	695b      	ldr	r3, [r3, #20]
 8009154:	613b      	str	r3, [r7, #16]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	699b      	ldr	r3, [r3, #24]
 800915c:	613b      	str	r3, [r7, #16]
 800915e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009160:	e066      	b.n	8009230 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009162:	697a      	ldr	r2, [r7, #20]
 8009164:	6a39      	ldr	r1, [r7, #32]
 8009166:	68f8      	ldr	r0, [r7, #12]
 8009168:	f000 fe0c 	bl	8009d84 <I2C_WaitOnTXEFlagUntilTimeout>
 800916c:	4603      	mov	r3, r0
 800916e:	2b00      	cmp	r3, #0
 8009170:	d00d      	beq.n	800918e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009176:	2b04      	cmp	r3, #4
 8009178:	d107      	bne.n	800918a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009188:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800918a:	2301      	movs	r3, #1
 800918c:	e06b      	b.n	8009266 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009192:	781a      	ldrb	r2, [r3, #0]
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800919e:	1c5a      	adds	r2, r3, #1
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	3b01      	subs	r3, #1
 80091ac:	b29a      	uxth	r2, r3
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091b6:	3b01      	subs	r3, #1
 80091b8:	b29a      	uxth	r2, r3
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	695b      	ldr	r3, [r3, #20]
 80091c4:	f003 0304 	and.w	r3, r3, #4
 80091c8:	2b04      	cmp	r3, #4
 80091ca:	d11b      	bne.n	8009204 <HAL_I2C_Master_Transmit+0x188>
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d017      	beq.n	8009204 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d8:	781a      	ldrb	r2, [r3, #0]
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e4:	1c5a      	adds	r2, r3, #1
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	3b01      	subs	r3, #1
 80091f2:	b29a      	uxth	r2, r3
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091fc:	3b01      	subs	r3, #1
 80091fe:	b29a      	uxth	r2, r3
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009204:	697a      	ldr	r2, [r7, #20]
 8009206:	6a39      	ldr	r1, [r7, #32]
 8009208:	68f8      	ldr	r0, [r7, #12]
 800920a:	f000 fdfc 	bl	8009e06 <I2C_WaitOnBTFFlagUntilTimeout>
 800920e:	4603      	mov	r3, r0
 8009210:	2b00      	cmp	r3, #0
 8009212:	d00d      	beq.n	8009230 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009218:	2b04      	cmp	r3, #4
 800921a:	d107      	bne.n	800922c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800922a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800922c:	2301      	movs	r3, #1
 800922e:	e01a      	b.n	8009266 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009234:	2b00      	cmp	r3, #0
 8009236:	d194      	bne.n	8009162 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009246:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2220      	movs	r2, #32
 800924c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2200      	movs	r2, #0
 8009254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2200      	movs	r2, #0
 800925c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009260:	2300      	movs	r3, #0
 8009262:	e000      	b.n	8009266 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009264:	2302      	movs	r3, #2
  }
}
 8009266:	4618      	mov	r0, r3
 8009268:	3718      	adds	r7, #24
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop
 8009270:	00100002 	.word	0x00100002
 8009274:	ffff0000 	.word	0xffff0000

08009278 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b08c      	sub	sp, #48	; 0x30
 800927c:	af02      	add	r7, sp, #8
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	607a      	str	r2, [r7, #4]
 8009282:	461a      	mov	r2, r3
 8009284:	460b      	mov	r3, r1
 8009286:	817b      	strh	r3, [r7, #10]
 8009288:	4613      	mov	r3, r2
 800928a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800928c:	f7fe fa4e 	bl	800772c <HAL_GetTick>
 8009290:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009298:	b2db      	uxtb	r3, r3
 800929a:	2b20      	cmp	r3, #32
 800929c:	f040 820b 	bne.w	80096b6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80092a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a2:	9300      	str	r3, [sp, #0]
 80092a4:	2319      	movs	r3, #25
 80092a6:	2201      	movs	r2, #1
 80092a8:	497c      	ldr	r1, [pc, #496]	; (800949c <HAL_I2C_Master_Receive+0x224>)
 80092aa:	68f8      	ldr	r0, [r7, #12]
 80092ac:	f000 fc94 	bl	8009bd8 <I2C_WaitOnFlagUntilTimeout>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d001      	beq.n	80092ba <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80092b6:	2302      	movs	r3, #2
 80092b8:	e1fe      	b.n	80096b8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d101      	bne.n	80092c8 <HAL_I2C_Master_Receive+0x50>
 80092c4:	2302      	movs	r3, #2
 80092c6:	e1f7      	b.n	80096b8 <HAL_I2C_Master_Receive+0x440>
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2201      	movs	r2, #1
 80092cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f003 0301 	and.w	r3, r3, #1
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d007      	beq.n	80092ee <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f042 0201 	orr.w	r2, r2, #1
 80092ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80092fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2222      	movs	r2, #34	; 0x22
 8009302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2210      	movs	r2, #16
 800930a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2200      	movs	r2, #0
 8009312:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	893a      	ldrh	r2, [r7, #8]
 800931e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009324:	b29a      	uxth	r2, r3
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	4a5c      	ldr	r2, [pc, #368]	; (80094a0 <HAL_I2C_Master_Receive+0x228>)
 800932e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009330:	8979      	ldrh	r1, [r7, #10]
 8009332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009336:	68f8      	ldr	r0, [r7, #12]
 8009338:	f000 fb82 	bl	8009a40 <I2C_MasterRequestRead>
 800933c:	4603      	mov	r3, r0
 800933e:	2b00      	cmp	r3, #0
 8009340:	d001      	beq.n	8009346 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8009342:	2301      	movs	r3, #1
 8009344:	e1b8      	b.n	80096b8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800934a:	2b00      	cmp	r3, #0
 800934c:	d113      	bne.n	8009376 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800934e:	2300      	movs	r3, #0
 8009350:	623b      	str	r3, [r7, #32]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	695b      	ldr	r3, [r3, #20]
 8009358:	623b      	str	r3, [r7, #32]
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	699b      	ldr	r3, [r3, #24]
 8009360:	623b      	str	r3, [r7, #32]
 8009362:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	681a      	ldr	r2, [r3, #0]
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009372:	601a      	str	r2, [r3, #0]
 8009374:	e18c      	b.n	8009690 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800937a:	2b01      	cmp	r3, #1
 800937c:	d11b      	bne.n	80093b6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800938c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800938e:	2300      	movs	r3, #0
 8009390:	61fb      	str	r3, [r7, #28]
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	695b      	ldr	r3, [r3, #20]
 8009398:	61fb      	str	r3, [r7, #28]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	699b      	ldr	r3, [r3, #24]
 80093a0:	61fb      	str	r3, [r7, #28]
 80093a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093b2:	601a      	str	r2, [r3, #0]
 80093b4:	e16c      	b.n	8009690 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093ba:	2b02      	cmp	r3, #2
 80093bc:	d11b      	bne.n	80093f6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	681a      	ldr	r2, [r3, #0]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80093de:	2300      	movs	r3, #0
 80093e0:	61bb      	str	r3, [r7, #24]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	695b      	ldr	r3, [r3, #20]
 80093e8:	61bb      	str	r3, [r7, #24]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	699b      	ldr	r3, [r3, #24]
 80093f0:	61bb      	str	r3, [r7, #24]
 80093f2:	69bb      	ldr	r3, [r7, #24]
 80093f4:	e14c      	b.n	8009690 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009404:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009406:	2300      	movs	r3, #0
 8009408:	617b      	str	r3, [r7, #20]
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	695b      	ldr	r3, [r3, #20]
 8009410:	617b      	str	r3, [r7, #20]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	699b      	ldr	r3, [r3, #24]
 8009418:	617b      	str	r3, [r7, #20]
 800941a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800941c:	e138      	b.n	8009690 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009422:	2b03      	cmp	r3, #3
 8009424:	f200 80f1 	bhi.w	800960a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800942c:	2b01      	cmp	r3, #1
 800942e:	d123      	bne.n	8009478 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009432:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009434:	68f8      	ldr	r0, [r7, #12]
 8009436:	f000 fd27 	bl	8009e88 <I2C_WaitOnRXNEFlagUntilTimeout>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d001      	beq.n	8009444 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8009440:	2301      	movs	r3, #1
 8009442:	e139      	b.n	80096b8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	691a      	ldr	r2, [r3, #16]
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800944e:	b2d2      	uxtb	r2, r2
 8009450:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009456:	1c5a      	adds	r2, r3, #1
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009460:	3b01      	subs	r3, #1
 8009462:	b29a      	uxth	r2, r3
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800946c:	b29b      	uxth	r3, r3
 800946e:	3b01      	subs	r3, #1
 8009470:	b29a      	uxth	r2, r3
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009476:	e10b      	b.n	8009690 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800947c:	2b02      	cmp	r3, #2
 800947e:	d14e      	bne.n	800951e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009482:	9300      	str	r3, [sp, #0]
 8009484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009486:	2200      	movs	r2, #0
 8009488:	4906      	ldr	r1, [pc, #24]	; (80094a4 <HAL_I2C_Master_Receive+0x22c>)
 800948a:	68f8      	ldr	r0, [r7, #12]
 800948c:	f000 fba4 	bl	8009bd8 <I2C_WaitOnFlagUntilTimeout>
 8009490:	4603      	mov	r3, r0
 8009492:	2b00      	cmp	r3, #0
 8009494:	d008      	beq.n	80094a8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8009496:	2301      	movs	r3, #1
 8009498:	e10e      	b.n	80096b8 <HAL_I2C_Master_Receive+0x440>
 800949a:	bf00      	nop
 800949c:	00100002 	.word	0x00100002
 80094a0:	ffff0000 	.word	0xffff0000
 80094a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	691a      	ldr	r2, [r3, #16]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c2:	b2d2      	uxtb	r2, r2
 80094c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ca:	1c5a      	adds	r2, r3, #1
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094d4:	3b01      	subs	r3, #1
 80094d6:	b29a      	uxth	r2, r3
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	3b01      	subs	r3, #1
 80094e4:	b29a      	uxth	r2, r3
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	691a      	ldr	r2, [r3, #16]
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f4:	b2d2      	uxtb	r2, r2
 80094f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fc:	1c5a      	adds	r2, r3, #1
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009506:	3b01      	subs	r3, #1
 8009508:	b29a      	uxth	r2, r3
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009512:	b29b      	uxth	r3, r3
 8009514:	3b01      	subs	r3, #1
 8009516:	b29a      	uxth	r2, r3
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800951c:	e0b8      	b.n	8009690 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800951e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009520:	9300      	str	r3, [sp, #0]
 8009522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009524:	2200      	movs	r2, #0
 8009526:	4966      	ldr	r1, [pc, #408]	; (80096c0 <HAL_I2C_Master_Receive+0x448>)
 8009528:	68f8      	ldr	r0, [r7, #12]
 800952a:	f000 fb55 	bl	8009bd8 <I2C_WaitOnFlagUntilTimeout>
 800952e:	4603      	mov	r3, r0
 8009530:	2b00      	cmp	r3, #0
 8009532:	d001      	beq.n	8009538 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	e0bf      	b.n	80096b8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009546:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	691a      	ldr	r2, [r3, #16]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009552:	b2d2      	uxtb	r2, r2
 8009554:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800955a:	1c5a      	adds	r2, r3, #1
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009564:	3b01      	subs	r3, #1
 8009566:	b29a      	uxth	r2, r3
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009570:	b29b      	uxth	r3, r3
 8009572:	3b01      	subs	r3, #1
 8009574:	b29a      	uxth	r2, r3
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800957a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957c:	9300      	str	r3, [sp, #0]
 800957e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009580:	2200      	movs	r2, #0
 8009582:	494f      	ldr	r1, [pc, #316]	; (80096c0 <HAL_I2C_Master_Receive+0x448>)
 8009584:	68f8      	ldr	r0, [r7, #12]
 8009586:	f000 fb27 	bl	8009bd8 <I2C_WaitOnFlagUntilTimeout>
 800958a:	4603      	mov	r3, r0
 800958c:	2b00      	cmp	r3, #0
 800958e:	d001      	beq.n	8009594 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8009590:	2301      	movs	r3, #1
 8009592:	e091      	b.n	80096b8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	681a      	ldr	r2, [r3, #0]
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	691a      	ldr	r2, [r3, #16]
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ae:	b2d2      	uxtb	r2, r2
 80095b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b6:	1c5a      	adds	r2, r3, #1
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095c0:	3b01      	subs	r3, #1
 80095c2:	b29a      	uxth	r2, r3
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	3b01      	subs	r3, #1
 80095d0:	b29a      	uxth	r2, r3
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	691a      	ldr	r2, [r3, #16]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e0:	b2d2      	uxtb	r2, r2
 80095e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e8:	1c5a      	adds	r2, r3, #1
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095f2:	3b01      	subs	r3, #1
 80095f4:	b29a      	uxth	r2, r3
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095fe:	b29b      	uxth	r3, r3
 8009600:	3b01      	subs	r3, #1
 8009602:	b29a      	uxth	r2, r3
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009608:	e042      	b.n	8009690 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800960a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800960c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800960e:	68f8      	ldr	r0, [r7, #12]
 8009610:	f000 fc3a 	bl	8009e88 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009614:	4603      	mov	r3, r0
 8009616:	2b00      	cmp	r3, #0
 8009618:	d001      	beq.n	800961e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800961a:	2301      	movs	r3, #1
 800961c:	e04c      	b.n	80096b8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	691a      	ldr	r2, [r3, #16]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009628:	b2d2      	uxtb	r2, r2
 800962a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009630:	1c5a      	adds	r2, r3, #1
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800963a:	3b01      	subs	r3, #1
 800963c:	b29a      	uxth	r2, r3
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009646:	b29b      	uxth	r3, r3
 8009648:	3b01      	subs	r3, #1
 800964a:	b29a      	uxth	r2, r3
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	695b      	ldr	r3, [r3, #20]
 8009656:	f003 0304 	and.w	r3, r3, #4
 800965a:	2b04      	cmp	r3, #4
 800965c:	d118      	bne.n	8009690 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	691a      	ldr	r2, [r3, #16]
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009668:	b2d2      	uxtb	r2, r2
 800966a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009670:	1c5a      	adds	r2, r3, #1
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800967a:	3b01      	subs	r3, #1
 800967c:	b29a      	uxth	r2, r3
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009686:	b29b      	uxth	r3, r3
 8009688:	3b01      	subs	r3, #1
 800968a:	b29a      	uxth	r2, r3
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009694:	2b00      	cmp	r3, #0
 8009696:	f47f aec2 	bne.w	800941e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2220      	movs	r2, #32
 800969e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2200      	movs	r2, #0
 80096a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2200      	movs	r2, #0
 80096ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80096b2:	2300      	movs	r3, #0
 80096b4:	e000      	b.n	80096b8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80096b6:	2302      	movs	r3, #2
  }
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3728      	adds	r7, #40	; 0x28
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	00010004 	.word	0x00010004

080096c4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b08a      	sub	sp, #40	; 0x28
 80096c8:	af02      	add	r7, sp, #8
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	607a      	str	r2, [r7, #4]
 80096ce:	603b      	str	r3, [r7, #0]
 80096d0:	460b      	mov	r3, r1
 80096d2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80096d4:	f7fe f82a 	bl	800772c <HAL_GetTick>
 80096d8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80096da:	2301      	movs	r3, #1
 80096dc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096e4:	b2db      	uxtb	r3, r3
 80096e6:	2b20      	cmp	r3, #32
 80096e8:	f040 8110 	bne.w	800990c <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80096ec:	69fb      	ldr	r3, [r7, #28]
 80096ee:	9300      	str	r3, [sp, #0]
 80096f0:	2319      	movs	r3, #25
 80096f2:	2201      	movs	r2, #1
 80096f4:	4988      	ldr	r1, [pc, #544]	; (8009918 <HAL_I2C_IsDeviceReady+0x254>)
 80096f6:	68f8      	ldr	r0, [r7, #12]
 80096f8:	f000 fa6e 	bl	8009bd8 <I2C_WaitOnFlagUntilTimeout>
 80096fc:	4603      	mov	r3, r0
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d001      	beq.n	8009706 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8009702:	2302      	movs	r3, #2
 8009704:	e103      	b.n	800990e <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800970c:	2b01      	cmp	r3, #1
 800970e:	d101      	bne.n	8009714 <HAL_I2C_IsDeviceReady+0x50>
 8009710:	2302      	movs	r3, #2
 8009712:	e0fc      	b.n	800990e <HAL_I2C_IsDeviceReady+0x24a>
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2201      	movs	r2, #1
 8009718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f003 0301 	and.w	r3, r3, #1
 8009726:	2b01      	cmp	r3, #1
 8009728:	d007      	beq.n	800973a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f042 0201 	orr.w	r2, r2, #1
 8009738:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	681a      	ldr	r2, [r3, #0]
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009748:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2224      	movs	r2, #36	; 0x24
 800974e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2200      	movs	r2, #0
 8009756:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	4a70      	ldr	r2, [pc, #448]	; (800991c <HAL_I2C_IsDeviceReady+0x258>)
 800975c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800976c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800976e:	69fb      	ldr	r3, [r7, #28]
 8009770:	9300      	str	r3, [sp, #0]
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	2200      	movs	r2, #0
 8009776:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800977a:	68f8      	ldr	r0, [r7, #12]
 800977c:	f000 fa2c 	bl	8009bd8 <I2C_WaitOnFlagUntilTimeout>
 8009780:	4603      	mov	r3, r0
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00c      	beq.n	80097a0 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009790:	2b00      	cmp	r3, #0
 8009792:	d003      	beq.n	800979c <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f44f 7200 	mov.w	r2, #512	; 0x200
 800979a:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800979c:	2303      	movs	r3, #3
 800979e:	e0b6      	b.n	800990e <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80097a0:	897b      	ldrh	r3, [r7, #10]
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	461a      	mov	r2, r3
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80097ae:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80097b0:	f7fd ffbc 	bl	800772c <HAL_GetTick>
 80097b4:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	695b      	ldr	r3, [r3, #20]
 80097bc:	f003 0302 	and.w	r3, r3, #2
 80097c0:	2b02      	cmp	r3, #2
 80097c2:	bf0c      	ite	eq
 80097c4:	2301      	moveq	r3, #1
 80097c6:	2300      	movne	r3, #0
 80097c8:	b2db      	uxtb	r3, r3
 80097ca:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	695b      	ldr	r3, [r3, #20]
 80097d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097da:	bf0c      	ite	eq
 80097dc:	2301      	moveq	r3, #1
 80097de:	2300      	movne	r3, #0
 80097e0:	b2db      	uxtb	r3, r3
 80097e2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80097e4:	e025      	b.n	8009832 <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80097e6:	f7fd ffa1 	bl	800772c <HAL_GetTick>
 80097ea:	4602      	mov	r2, r0
 80097ec:	69fb      	ldr	r3, [r7, #28]
 80097ee:	1ad3      	subs	r3, r2, r3
 80097f0:	683a      	ldr	r2, [r7, #0]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d302      	bcc.n	80097fc <HAL_I2C_IsDeviceReady+0x138>
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d103      	bne.n	8009804 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	22a0      	movs	r2, #160	; 0xa0
 8009800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	695b      	ldr	r3, [r3, #20]
 800980a:	f003 0302 	and.w	r3, r3, #2
 800980e:	2b02      	cmp	r3, #2
 8009810:	bf0c      	ite	eq
 8009812:	2301      	moveq	r3, #1
 8009814:	2300      	movne	r3, #0
 8009816:	b2db      	uxtb	r3, r3
 8009818:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	695b      	ldr	r3, [r3, #20]
 8009820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009824:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009828:	bf0c      	ite	eq
 800982a:	2301      	moveq	r3, #1
 800982c:	2300      	movne	r3, #0
 800982e:	b2db      	uxtb	r3, r3
 8009830:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009838:	b2db      	uxtb	r3, r3
 800983a:	2ba0      	cmp	r3, #160	; 0xa0
 800983c:	d005      	beq.n	800984a <HAL_I2C_IsDeviceReady+0x186>
 800983e:	7dfb      	ldrb	r3, [r7, #23]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d102      	bne.n	800984a <HAL_I2C_IsDeviceReady+0x186>
 8009844:	7dbb      	ldrb	r3, [r7, #22]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d0cd      	beq.n	80097e6 <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2220      	movs	r2, #32
 800984e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	695b      	ldr	r3, [r3, #20]
 8009858:	f003 0302 	and.w	r3, r3, #2
 800985c:	2b02      	cmp	r3, #2
 800985e:	d129      	bne.n	80098b4 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	681a      	ldr	r2, [r3, #0]
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800986e:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009870:	2300      	movs	r3, #0
 8009872:	613b      	str	r3, [r7, #16]
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	695b      	ldr	r3, [r3, #20]
 800987a:	613b      	str	r3, [r7, #16]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	699b      	ldr	r3, [r3, #24]
 8009882:	613b      	str	r3, [r7, #16]
 8009884:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009886:	69fb      	ldr	r3, [r7, #28]
 8009888:	9300      	str	r3, [sp, #0]
 800988a:	2319      	movs	r3, #25
 800988c:	2201      	movs	r2, #1
 800988e:	4922      	ldr	r1, [pc, #136]	; (8009918 <HAL_I2C_IsDeviceReady+0x254>)
 8009890:	68f8      	ldr	r0, [r7, #12]
 8009892:	f000 f9a1 	bl	8009bd8 <I2C_WaitOnFlagUntilTimeout>
 8009896:	4603      	mov	r3, r0
 8009898:	2b00      	cmp	r3, #0
 800989a:	d001      	beq.n	80098a0 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 800989c:	2301      	movs	r3, #1
 800989e:	e036      	b.n	800990e <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2220      	movs	r2, #32
 80098a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2200      	movs	r2, #0
 80098ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80098b0:	2300      	movs	r3, #0
 80098b2:	e02c      	b.n	800990e <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098c2:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80098cc:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80098ce:	69fb      	ldr	r3, [r7, #28]
 80098d0:	9300      	str	r3, [sp, #0]
 80098d2:	2319      	movs	r3, #25
 80098d4:	2201      	movs	r2, #1
 80098d6:	4910      	ldr	r1, [pc, #64]	; (8009918 <HAL_I2C_IsDeviceReady+0x254>)
 80098d8:	68f8      	ldr	r0, [r7, #12]
 80098da:	f000 f97d 	bl	8009bd8 <I2C_WaitOnFlagUntilTimeout>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d001      	beq.n	80098e8 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 80098e4:	2301      	movs	r3, #1
 80098e6:	e012      	b.n	800990e <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80098e8:	69bb      	ldr	r3, [r7, #24]
 80098ea:	3301      	adds	r3, #1
 80098ec:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80098ee:	69ba      	ldr	r2, [r7, #24]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	f4ff af33 	bcc.w	800975e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2220      	movs	r2, #32
 80098fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2200      	movs	r2, #0
 8009904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009908:	2301      	movs	r3, #1
 800990a:	e000      	b.n	800990e <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 800990c:	2302      	movs	r3, #2
  }
}
 800990e:	4618      	mov	r0, r3
 8009910:	3720      	adds	r7, #32
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop
 8009918:	00100002 	.word	0x00100002
 800991c:	ffff0000 	.word	0xffff0000

08009920 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009920:	b480      	push	{r7}
 8009922:	b083      	sub	sp, #12
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800992e:	b2db      	uxtb	r3, r3
}
 8009930:	4618      	mov	r0, r3
 8009932:	370c      	adds	r7, #12
 8009934:	46bd      	mov	sp, r7
 8009936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993a:	4770      	bx	lr

0800993c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b088      	sub	sp, #32
 8009940:	af02      	add	r7, sp, #8
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	607a      	str	r2, [r7, #4]
 8009946:	603b      	str	r3, [r7, #0]
 8009948:	460b      	mov	r3, r1
 800994a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009950:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	2b08      	cmp	r3, #8
 8009956:	d006      	beq.n	8009966 <I2C_MasterRequestWrite+0x2a>
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	2b01      	cmp	r3, #1
 800995c:	d003      	beq.n	8009966 <I2C_MasterRequestWrite+0x2a>
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009964:	d108      	bne.n	8009978 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009974:	601a      	str	r2, [r3, #0]
 8009976:	e00b      	b.n	8009990 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800997c:	2b12      	cmp	r3, #18
 800997e:	d107      	bne.n	8009990 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	681a      	ldr	r2, [r3, #0]
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800998e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	9300      	str	r3, [sp, #0]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2200      	movs	r2, #0
 8009998:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800999c:	68f8      	ldr	r0, [r7, #12]
 800999e:	f000 f91b 	bl	8009bd8 <I2C_WaitOnFlagUntilTimeout>
 80099a2:	4603      	mov	r3, r0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d00c      	beq.n	80099c2 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d003      	beq.n	80099be <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80099be:	2303      	movs	r3, #3
 80099c0:	e035      	b.n	8009a2e <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	691b      	ldr	r3, [r3, #16]
 80099c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80099ca:	d108      	bne.n	80099de <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80099cc:	897b      	ldrh	r3, [r7, #10]
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	461a      	mov	r2, r3
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80099da:	611a      	str	r2, [r3, #16]
 80099dc:	e01b      	b.n	8009a16 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80099de:	897b      	ldrh	r3, [r7, #10]
 80099e0:	11db      	asrs	r3, r3, #7
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	f003 0306 	and.w	r3, r3, #6
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	f063 030f 	orn	r3, r3, #15
 80099ee:	b2da      	uxtb	r2, r3
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	687a      	ldr	r2, [r7, #4]
 80099fa:	490f      	ldr	r1, [pc, #60]	; (8009a38 <I2C_MasterRequestWrite+0xfc>)
 80099fc:	68f8      	ldr	r0, [r7, #12]
 80099fe:	f000 f942 	bl	8009c86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a02:	4603      	mov	r3, r0
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d001      	beq.n	8009a0c <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8009a08:	2301      	movs	r3, #1
 8009a0a:	e010      	b.n	8009a2e <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009a0c:	897b      	ldrh	r3, [r7, #10]
 8009a0e:	b2da      	uxtb	r2, r3
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	687a      	ldr	r2, [r7, #4]
 8009a1a:	4908      	ldr	r1, [pc, #32]	; (8009a3c <I2C_MasterRequestWrite+0x100>)
 8009a1c:	68f8      	ldr	r0, [r7, #12]
 8009a1e:	f000 f932 	bl	8009c86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d001      	beq.n	8009a2c <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	e000      	b.n	8009a2e <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8009a2c:	2300      	movs	r3, #0
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3718      	adds	r7, #24
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	00010008 	.word	0x00010008
 8009a3c:	00010002 	.word	0x00010002

08009a40 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b088      	sub	sp, #32
 8009a44:	af02      	add	r7, sp, #8
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	607a      	str	r2, [r7, #4]
 8009a4a:	603b      	str	r3, [r7, #0]
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a54:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	681a      	ldr	r2, [r3, #0]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009a64:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	2b08      	cmp	r3, #8
 8009a6a:	d006      	beq.n	8009a7a <I2C_MasterRequestRead+0x3a>
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d003      	beq.n	8009a7a <I2C_MasterRequestRead+0x3a>
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009a78:	d108      	bne.n	8009a8c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a88:	601a      	str	r2, [r3, #0]
 8009a8a:	e00b      	b.n	8009aa4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a90:	2b11      	cmp	r3, #17
 8009a92:	d107      	bne.n	8009aa4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	681a      	ldr	r2, [r3, #0]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009aa2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	9300      	str	r3, [sp, #0]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009ab0:	68f8      	ldr	r0, [r7, #12]
 8009ab2:	f000 f891 	bl	8009bd8 <I2C_WaitOnFlagUntilTimeout>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d00c      	beq.n	8009ad6 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d003      	beq.n	8009ad2 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ad0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009ad2:	2303      	movs	r3, #3
 8009ad4:	e078      	b.n	8009bc8 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	691b      	ldr	r3, [r3, #16]
 8009ada:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ade:	d108      	bne.n	8009af2 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009ae0:	897b      	ldrh	r3, [r7, #10]
 8009ae2:	b2db      	uxtb	r3, r3
 8009ae4:	f043 0301 	orr.w	r3, r3, #1
 8009ae8:	b2da      	uxtb	r2, r3
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	611a      	str	r2, [r3, #16]
 8009af0:	e05e      	b.n	8009bb0 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009af2:	897b      	ldrh	r3, [r7, #10]
 8009af4:	11db      	asrs	r3, r3, #7
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	f003 0306 	and.w	r3, r3, #6
 8009afc:	b2db      	uxtb	r3, r3
 8009afe:	f063 030f 	orn	r3, r3, #15
 8009b02:	b2da      	uxtb	r2, r3
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	687a      	ldr	r2, [r7, #4]
 8009b0e:	4930      	ldr	r1, [pc, #192]	; (8009bd0 <I2C_MasterRequestRead+0x190>)
 8009b10:	68f8      	ldr	r0, [r7, #12]
 8009b12:	f000 f8b8 	bl	8009c86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009b16:	4603      	mov	r3, r0
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d001      	beq.n	8009b20 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	e053      	b.n	8009bc8 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009b20:	897b      	ldrh	r3, [r7, #10]
 8009b22:	b2da      	uxtb	r2, r3
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	4929      	ldr	r1, [pc, #164]	; (8009bd4 <I2C_MasterRequestRead+0x194>)
 8009b30:	68f8      	ldr	r0, [r7, #12]
 8009b32:	f000 f8a8 	bl	8009c86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d001      	beq.n	8009b40 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	e043      	b.n	8009bc8 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009b40:	2300      	movs	r3, #0
 8009b42:	613b      	str	r3, [r7, #16]
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	695b      	ldr	r3, [r3, #20]
 8009b4a:	613b      	str	r3, [r7, #16]
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	699b      	ldr	r3, [r3, #24]
 8009b52:	613b      	str	r3, [r7, #16]
 8009b54:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b64:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	9300      	str	r3, [sp, #0]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009b72:	68f8      	ldr	r0, [r7, #12]
 8009b74:	f000 f830 	bl	8009bd8 <I2C_WaitOnFlagUntilTimeout>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d00c      	beq.n	8009b98 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d003      	beq.n	8009b94 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b92:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8009b94:	2303      	movs	r3, #3
 8009b96:	e017      	b.n	8009bc8 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009b98:	897b      	ldrh	r3, [r7, #10]
 8009b9a:	11db      	asrs	r3, r3, #7
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	f003 0306 	and.w	r3, r3, #6
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	f063 030e 	orn	r3, r3, #14
 8009ba8:	b2da      	uxtb	r2, r3
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	4907      	ldr	r1, [pc, #28]	; (8009bd4 <I2C_MasterRequestRead+0x194>)
 8009bb6:	68f8      	ldr	r0, [r7, #12]
 8009bb8:	f000 f865 	bl	8009c86 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d001      	beq.n	8009bc6 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	e000      	b.n	8009bc8 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8009bc6:	2300      	movs	r3, #0
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3718      	adds	r7, #24
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}
 8009bd0:	00010008 	.word	0x00010008
 8009bd4:	00010002 	.word	0x00010002

08009bd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	60f8      	str	r0, [r7, #12]
 8009be0:	60b9      	str	r1, [r7, #8]
 8009be2:	603b      	str	r3, [r7, #0]
 8009be4:	4613      	mov	r3, r2
 8009be6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009be8:	e025      	b.n	8009c36 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bf0:	d021      	beq.n	8009c36 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bf2:	f7fd fd9b 	bl	800772c <HAL_GetTick>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	69bb      	ldr	r3, [r7, #24]
 8009bfa:	1ad3      	subs	r3, r2, r3
 8009bfc:	683a      	ldr	r2, [r7, #0]
 8009bfe:	429a      	cmp	r2, r3
 8009c00:	d302      	bcc.n	8009c08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d116      	bne.n	8009c36 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2220      	movs	r2, #32
 8009c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c22:	f043 0220 	orr.w	r2, r3, #32
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009c32:	2301      	movs	r3, #1
 8009c34:	e023      	b.n	8009c7e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	0c1b      	lsrs	r3, r3, #16
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d10d      	bne.n	8009c5c <I2C_WaitOnFlagUntilTimeout+0x84>
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	695b      	ldr	r3, [r3, #20]
 8009c46:	43da      	mvns	r2, r3
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	4013      	ands	r3, r2
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	bf0c      	ite	eq
 8009c52:	2301      	moveq	r3, #1
 8009c54:	2300      	movne	r3, #0
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	461a      	mov	r2, r3
 8009c5a:	e00c      	b.n	8009c76 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	699b      	ldr	r3, [r3, #24]
 8009c62:	43da      	mvns	r2, r3
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	4013      	ands	r3, r2
 8009c68:	b29b      	uxth	r3, r3
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	bf0c      	ite	eq
 8009c6e:	2301      	moveq	r3, #1
 8009c70:	2300      	movne	r3, #0
 8009c72:	b2db      	uxtb	r3, r3
 8009c74:	461a      	mov	r2, r3
 8009c76:	79fb      	ldrb	r3, [r7, #7]
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d0b6      	beq.n	8009bea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009c7c:	2300      	movs	r3, #0
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3710      	adds	r7, #16
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}

08009c86 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009c86:	b580      	push	{r7, lr}
 8009c88:	b084      	sub	sp, #16
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	60f8      	str	r0, [r7, #12]
 8009c8e:	60b9      	str	r1, [r7, #8]
 8009c90:	607a      	str	r2, [r7, #4]
 8009c92:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009c94:	e051      	b.n	8009d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	695b      	ldr	r3, [r3, #20]
 8009c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ca4:	d123      	bne.n	8009cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cb4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009cbe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2220      	movs	r2, #32
 8009cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cda:	f043 0204 	orr.w	r2, r3, #4
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009cea:	2301      	movs	r3, #1
 8009cec:	e046      	b.n	8009d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009cf4:	d021      	beq.n	8009d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cf6:	f7fd fd19 	bl	800772c <HAL_GetTick>
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	1ad3      	subs	r3, r2, r3
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d302      	bcc.n	8009d0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d116      	bne.n	8009d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2220      	movs	r2, #32
 8009d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d26:	f043 0220 	orr.w	r2, r3, #32
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2200      	movs	r2, #0
 8009d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009d36:	2301      	movs	r3, #1
 8009d38:	e020      	b.n	8009d7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	0c1b      	lsrs	r3, r3, #16
 8009d3e:	b2db      	uxtb	r3, r3
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d10c      	bne.n	8009d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	695b      	ldr	r3, [r3, #20]
 8009d4a:	43da      	mvns	r2, r3
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	4013      	ands	r3, r2
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	bf14      	ite	ne
 8009d56:	2301      	movne	r3, #1
 8009d58:	2300      	moveq	r3, #0
 8009d5a:	b2db      	uxtb	r3, r3
 8009d5c:	e00b      	b.n	8009d76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	699b      	ldr	r3, [r3, #24]
 8009d64:	43da      	mvns	r2, r3
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	4013      	ands	r3, r2
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	bf14      	ite	ne
 8009d70:	2301      	movne	r3, #1
 8009d72:	2300      	moveq	r3, #0
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d18d      	bne.n	8009c96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009d7a:	2300      	movs	r3, #0
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3710      	adds	r7, #16
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	60f8      	str	r0, [r7, #12]
 8009d8c:	60b9      	str	r1, [r7, #8]
 8009d8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009d90:	e02d      	b.n	8009dee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009d92:	68f8      	ldr	r0, [r7, #12]
 8009d94:	f000 f8ce 	bl	8009f34 <I2C_IsAcknowledgeFailed>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d001      	beq.n	8009da2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	e02d      	b.n	8009dfe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009da8:	d021      	beq.n	8009dee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009daa:	f7fd fcbf 	bl	800772c <HAL_GetTick>
 8009dae:	4602      	mov	r2, r0
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	1ad3      	subs	r3, r2, r3
 8009db4:	68ba      	ldr	r2, [r7, #8]
 8009db6:	429a      	cmp	r2, r3
 8009db8:	d302      	bcc.n	8009dc0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d116      	bne.n	8009dee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2220      	movs	r2, #32
 8009dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dda:	f043 0220 	orr.w	r2, r3, #32
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2200      	movs	r2, #0
 8009de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009dea:	2301      	movs	r3, #1
 8009dec:	e007      	b.n	8009dfe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	695b      	ldr	r3, [r3, #20]
 8009df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009df8:	2b80      	cmp	r3, #128	; 0x80
 8009dfa:	d1ca      	bne.n	8009d92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009dfc:	2300      	movs	r3, #0
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3710      	adds	r7, #16
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}

08009e06 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b084      	sub	sp, #16
 8009e0a:	af00      	add	r7, sp, #0
 8009e0c:	60f8      	str	r0, [r7, #12]
 8009e0e:	60b9      	str	r1, [r7, #8]
 8009e10:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009e12:	e02d      	b.n	8009e70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009e14:	68f8      	ldr	r0, [r7, #12]
 8009e16:	f000 f88d 	bl	8009f34 <I2C_IsAcknowledgeFailed>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d001      	beq.n	8009e24 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009e20:	2301      	movs	r3, #1
 8009e22:	e02d      	b.n	8009e80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e2a:	d021      	beq.n	8009e70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e2c:	f7fd fc7e 	bl	800772c <HAL_GetTick>
 8009e30:	4602      	mov	r2, r0
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	1ad3      	subs	r3, r2, r3
 8009e36:	68ba      	ldr	r2, [r7, #8]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d302      	bcc.n	8009e42 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d116      	bne.n	8009e70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2200      	movs	r2, #0
 8009e46:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2220      	movs	r2, #32
 8009e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e5c:	f043 0220 	orr.w	r2, r3, #32
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	2200      	movs	r2, #0
 8009e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	e007      	b.n	8009e80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	695b      	ldr	r3, [r3, #20]
 8009e76:	f003 0304 	and.w	r3, r3, #4
 8009e7a:	2b04      	cmp	r3, #4
 8009e7c:	d1ca      	bne.n	8009e14 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009e7e:	2300      	movs	r3, #0
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3710      	adds	r7, #16
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	60f8      	str	r0, [r7, #12]
 8009e90:	60b9      	str	r1, [r7, #8]
 8009e92:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009e94:	e042      	b.n	8009f1c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	695b      	ldr	r3, [r3, #20]
 8009e9c:	f003 0310 	and.w	r3, r3, #16
 8009ea0:	2b10      	cmp	r3, #16
 8009ea2:	d119      	bne.n	8009ed8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f06f 0210 	mvn.w	r2, #16
 8009eac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2220      	movs	r2, #32
 8009eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	e029      	b.n	8009f2c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ed8:	f7fd fc28 	bl	800772c <HAL_GetTick>
 8009edc:	4602      	mov	r2, r0
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	1ad3      	subs	r3, r2, r3
 8009ee2:	68ba      	ldr	r2, [r7, #8]
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d302      	bcc.n	8009eee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d116      	bne.n	8009f1c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	2220      	movs	r2, #32
 8009ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2200      	movs	r2, #0
 8009f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f08:	f043 0220 	orr.w	r2, r3, #32
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	2200      	movs	r2, #0
 8009f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009f18:	2301      	movs	r3, #1
 8009f1a:	e007      	b.n	8009f2c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	695b      	ldr	r3, [r3, #20]
 8009f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f26:	2b40      	cmp	r3, #64	; 0x40
 8009f28:	d1b5      	bne.n	8009e96 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009f2a:	2300      	movs	r3, #0
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3710      	adds	r7, #16
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b083      	sub	sp, #12
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	695b      	ldr	r3, [r3, #20]
 8009f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f4a:	d11b      	bne.n	8009f84 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009f54:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2220      	movs	r2, #32
 8009f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2200      	movs	r2, #0
 8009f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f70:	f043 0204 	orr.w	r2, r3, #4
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009f80:	2301      	movs	r3, #1
 8009f82:	e000      	b.n	8009f86 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009f84:	2300      	movs	r3, #0
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	370c      	adds	r7, #12
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f90:	4770      	bx	lr
	...

08009f94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b086      	sub	sp, #24
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d101      	bne.n	8009fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	e25b      	b.n	800a45e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f003 0301 	and.w	r3, r3, #1
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d075      	beq.n	800a09e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009fb2:	4ba3      	ldr	r3, [pc, #652]	; (800a240 <HAL_RCC_OscConfig+0x2ac>)
 8009fb4:	689b      	ldr	r3, [r3, #8]
 8009fb6:	f003 030c 	and.w	r3, r3, #12
 8009fba:	2b04      	cmp	r3, #4
 8009fbc:	d00c      	beq.n	8009fd8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009fbe:	4ba0      	ldr	r3, [pc, #640]	; (800a240 <HAL_RCC_OscConfig+0x2ac>)
 8009fc0:	689b      	ldr	r3, [r3, #8]
 8009fc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009fc6:	2b08      	cmp	r3, #8
 8009fc8:	d112      	bne.n	8009ff0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009fca:	4b9d      	ldr	r3, [pc, #628]	; (800a240 <HAL_RCC_OscConfig+0x2ac>)
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009fd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009fd6:	d10b      	bne.n	8009ff0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009fd8:	4b99      	ldr	r3, [pc, #612]	; (800a240 <HAL_RCC_OscConfig+0x2ac>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d05b      	beq.n	800a09c <HAL_RCC_OscConfig+0x108>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d157      	bne.n	800a09c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009fec:	2301      	movs	r3, #1
 8009fee:	e236      	b.n	800a45e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ff8:	d106      	bne.n	800a008 <HAL_RCC_OscConfig+0x74>
 8009ffa:	4b91      	ldr	r3, [pc, #580]	; (800a240 <HAL_RCC_OscConfig+0x2ac>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4a90      	ldr	r2, [pc, #576]	; (800a240 <HAL_RCC_OscConfig+0x2ac>)
 800a000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a004:	6013      	str	r3, [r2, #0]
 800a006:	e01d      	b.n	800a044 <HAL_RCC_OscConfig+0xb0>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a010:	d10c      	bne.n	800a02c <HAL_RCC_OscConfig+0x98>
 800a012:	4b8b      	ldr	r3, [pc, #556]	; (800a240 <HAL_RCC_OscConfig+0x2ac>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a8a      	ldr	r2, [pc, #552]	; (800a240 <HAL_RCC_OscConfig+0x2ac>)
 800a018:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a01c:	6013      	str	r3, [r2, #0]
 800a01e:	4b88      	ldr	r3, [pc, #544]	; (800a240 <HAL_RCC_OscConfig+0x2ac>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	4a87      	ldr	r2, [pc, #540]	; (800a240 <HAL_RCC_OscConfig+0x2ac>)
 800a024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a028:	6013      	str	r3, [r2, #0]
 800a02a:	e00b      	b.n	800a044 <HAL_RCC_OscConfig+0xb0>
 800a02c:	4b84      	ldr	r3, [pc, #528]	; (800a240 <HAL_RCC_OscConfig+0x2ac>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a83      	ldr	r2, [pc, #524]	; (800a240 <HAL_RCC_OscConfig+0x2ac>)
 800a032:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a036:	6013      	str	r3, [r2, #0]
 800a038:	4b81      	ldr	r3, [pc, #516]	; (800a240 <HAL_RCC_OscConfig+0x2ac>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a80      	ldr	r2, [pc, #512]	; (800a240 <HAL_RCC_OscConfig+0x2ac>)
 800a03e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a042:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d013      	beq.n	800a074 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a04c:	f7fd fb6e 	bl	800772c <HAL_GetTick>
 800a050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a052:	e008      	b.n	800a066 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a054:	f7fd fb6a 	bl	800772c <HAL_GetTick>
 800a058:	4602      	mov	r2, r0
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	1ad3      	subs	r3, r2, r3
 800a05e:	2b64      	cmp	r3, #100	; 0x64
 800a060:	d901      	bls.n	800a066 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a062:	2303      	movs	r3, #3
 800a064:	e1fb      	b.n	800a45e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a066:	4b76      	ldr	r3, [pc, #472]	; (800a240 <HAL_RCC_OscConfig+0x2ac>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d0f0      	beq.n	800a054 <HAL_RCC_OscConfig+0xc0>
 800a072:	e014      	b.n	800a09e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a074:	f7fd fb5a 	bl	800772c <HAL_GetTick>
 800a078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a07a:	e008      	b.n	800a08e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a07c:	f7fd fb56 	bl	800772c <HAL_GetTick>
 800a080:	4602      	mov	r2, r0
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	1ad3      	subs	r3, r2, r3
 800a086:	2b64      	cmp	r3, #100	; 0x64
 800a088:	d901      	bls.n	800a08e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a08a:	2303      	movs	r3, #3
 800a08c:	e1e7      	b.n	800a45e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a08e:	4b6c      	ldr	r3, [pc, #432]	; (800a240 <HAL_RCC_OscConfig+0x2ac>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a096:	2b00      	cmp	r3, #0
 800a098:	d1f0      	bne.n	800a07c <HAL_RCC_OscConfig+0xe8>
 800a09a:	e000      	b.n	800a09e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a09c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f003 0302 	and.w	r3, r3, #2
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d063      	beq.n	800a172 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a0aa:	4b65      	ldr	r3, [pc, #404]	; (800a240 <HAL_RCC_OscConfig+0x2ac>)
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	f003 030c 	and.w	r3, r3, #12
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d00b      	beq.n	800a0ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a0b6:	4b62      	ldr	r3, [pc, #392]	; (800a240 <HAL_RCC_OscConfig+0x2ac>)
 800a0b8:	689b      	ldr	r3, [r3, #8]
 800a0ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a0be:	2b08      	cmp	r3, #8
 800a0c0:	d11c      	bne.n	800a0fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a0c2:	4b5f      	ldr	r3, [pc, #380]	; (800a240 <HAL_RCC_OscConfig+0x2ac>)
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d116      	bne.n	800a0fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a0ce:	4b5c      	ldr	r3, [pc, #368]	; (800a240 <HAL_RCC_OscConfig+0x2ac>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f003 0302 	and.w	r3, r3, #2
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d005      	beq.n	800a0e6 <HAL_RCC_OscConfig+0x152>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	68db      	ldr	r3, [r3, #12]
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d001      	beq.n	800a0e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e1bb      	b.n	800a45e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0e6:	4b56      	ldr	r3, [pc, #344]	; (800a240 <HAL_RCC_OscConfig+0x2ac>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	691b      	ldr	r3, [r3, #16]
 800a0f2:	00db      	lsls	r3, r3, #3
 800a0f4:	4952      	ldr	r1, [pc, #328]	; (800a240 <HAL_RCC_OscConfig+0x2ac>)
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a0fa:	e03a      	b.n	800a172 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	68db      	ldr	r3, [r3, #12]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d020      	beq.n	800a146 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a104:	4b4f      	ldr	r3, [pc, #316]	; (800a244 <HAL_RCC_OscConfig+0x2b0>)
 800a106:	2201      	movs	r2, #1
 800a108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a10a:	f7fd fb0f 	bl	800772c <HAL_GetTick>
 800a10e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a110:	e008      	b.n	800a124 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a112:	f7fd fb0b 	bl	800772c <HAL_GetTick>
 800a116:	4602      	mov	r2, r0
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	1ad3      	subs	r3, r2, r3
 800a11c:	2b02      	cmp	r3, #2
 800a11e:	d901      	bls.n	800a124 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a120:	2303      	movs	r3, #3
 800a122:	e19c      	b.n	800a45e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a124:	4b46      	ldr	r3, [pc, #280]	; (800a240 <HAL_RCC_OscConfig+0x2ac>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f003 0302 	and.w	r3, r3, #2
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d0f0      	beq.n	800a112 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a130:	4b43      	ldr	r3, [pc, #268]	; (800a240 <HAL_RCC_OscConfig+0x2ac>)
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	691b      	ldr	r3, [r3, #16]
 800a13c:	00db      	lsls	r3, r3, #3
 800a13e:	4940      	ldr	r1, [pc, #256]	; (800a240 <HAL_RCC_OscConfig+0x2ac>)
 800a140:	4313      	orrs	r3, r2
 800a142:	600b      	str	r3, [r1, #0]
 800a144:	e015      	b.n	800a172 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a146:	4b3f      	ldr	r3, [pc, #252]	; (800a244 <HAL_RCC_OscConfig+0x2b0>)
 800a148:	2200      	movs	r2, #0
 800a14a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a14c:	f7fd faee 	bl	800772c <HAL_GetTick>
 800a150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a152:	e008      	b.n	800a166 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a154:	f7fd faea 	bl	800772c <HAL_GetTick>
 800a158:	4602      	mov	r2, r0
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	1ad3      	subs	r3, r2, r3
 800a15e:	2b02      	cmp	r3, #2
 800a160:	d901      	bls.n	800a166 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a162:	2303      	movs	r3, #3
 800a164:	e17b      	b.n	800a45e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a166:	4b36      	ldr	r3, [pc, #216]	; (800a240 <HAL_RCC_OscConfig+0x2ac>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f003 0302 	and.w	r3, r3, #2
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d1f0      	bne.n	800a154 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f003 0308 	and.w	r3, r3, #8
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d030      	beq.n	800a1e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	695b      	ldr	r3, [r3, #20]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d016      	beq.n	800a1b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a186:	4b30      	ldr	r3, [pc, #192]	; (800a248 <HAL_RCC_OscConfig+0x2b4>)
 800a188:	2201      	movs	r2, #1
 800a18a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a18c:	f7fd face 	bl	800772c <HAL_GetTick>
 800a190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a192:	e008      	b.n	800a1a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a194:	f7fd faca 	bl	800772c <HAL_GetTick>
 800a198:	4602      	mov	r2, r0
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	1ad3      	subs	r3, r2, r3
 800a19e:	2b02      	cmp	r3, #2
 800a1a0:	d901      	bls.n	800a1a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a1a2:	2303      	movs	r3, #3
 800a1a4:	e15b      	b.n	800a45e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a1a6:	4b26      	ldr	r3, [pc, #152]	; (800a240 <HAL_RCC_OscConfig+0x2ac>)
 800a1a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1aa:	f003 0302 	and.w	r3, r3, #2
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d0f0      	beq.n	800a194 <HAL_RCC_OscConfig+0x200>
 800a1b2:	e015      	b.n	800a1e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a1b4:	4b24      	ldr	r3, [pc, #144]	; (800a248 <HAL_RCC_OscConfig+0x2b4>)
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a1ba:	f7fd fab7 	bl	800772c <HAL_GetTick>
 800a1be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a1c0:	e008      	b.n	800a1d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a1c2:	f7fd fab3 	bl	800772c <HAL_GetTick>
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	1ad3      	subs	r3, r2, r3
 800a1cc:	2b02      	cmp	r3, #2
 800a1ce:	d901      	bls.n	800a1d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a1d0:	2303      	movs	r3, #3
 800a1d2:	e144      	b.n	800a45e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a1d4:	4b1a      	ldr	r3, [pc, #104]	; (800a240 <HAL_RCC_OscConfig+0x2ac>)
 800a1d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1d8:	f003 0302 	and.w	r3, r3, #2
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d1f0      	bne.n	800a1c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f003 0304 	and.w	r3, r3, #4
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	f000 80a0 	beq.w	800a32e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a1f2:	4b13      	ldr	r3, [pc, #76]	; (800a240 <HAL_RCC_OscConfig+0x2ac>)
 800a1f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d10f      	bne.n	800a21e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a1fe:	2300      	movs	r3, #0
 800a200:	60bb      	str	r3, [r7, #8]
 800a202:	4b0f      	ldr	r3, [pc, #60]	; (800a240 <HAL_RCC_OscConfig+0x2ac>)
 800a204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a206:	4a0e      	ldr	r2, [pc, #56]	; (800a240 <HAL_RCC_OscConfig+0x2ac>)
 800a208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a20c:	6413      	str	r3, [r2, #64]	; 0x40
 800a20e:	4b0c      	ldr	r3, [pc, #48]	; (800a240 <HAL_RCC_OscConfig+0x2ac>)
 800a210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a216:	60bb      	str	r3, [r7, #8]
 800a218:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a21a:	2301      	movs	r3, #1
 800a21c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a21e:	4b0b      	ldr	r3, [pc, #44]	; (800a24c <HAL_RCC_OscConfig+0x2b8>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a226:	2b00      	cmp	r3, #0
 800a228:	d121      	bne.n	800a26e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a22a:	4b08      	ldr	r3, [pc, #32]	; (800a24c <HAL_RCC_OscConfig+0x2b8>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4a07      	ldr	r2, [pc, #28]	; (800a24c <HAL_RCC_OscConfig+0x2b8>)
 800a230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a234:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a236:	f7fd fa79 	bl	800772c <HAL_GetTick>
 800a23a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a23c:	e011      	b.n	800a262 <HAL_RCC_OscConfig+0x2ce>
 800a23e:	bf00      	nop
 800a240:	40023800 	.word	0x40023800
 800a244:	42470000 	.word	0x42470000
 800a248:	42470e80 	.word	0x42470e80
 800a24c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a250:	f7fd fa6c 	bl	800772c <HAL_GetTick>
 800a254:	4602      	mov	r2, r0
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	1ad3      	subs	r3, r2, r3
 800a25a:	2b02      	cmp	r3, #2
 800a25c:	d901      	bls.n	800a262 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800a25e:	2303      	movs	r3, #3
 800a260:	e0fd      	b.n	800a45e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a262:	4b81      	ldr	r3, [pc, #516]	; (800a468 <HAL_RCC_OscConfig+0x4d4>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d0f0      	beq.n	800a250 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	689b      	ldr	r3, [r3, #8]
 800a272:	2b01      	cmp	r3, #1
 800a274:	d106      	bne.n	800a284 <HAL_RCC_OscConfig+0x2f0>
 800a276:	4b7d      	ldr	r3, [pc, #500]	; (800a46c <HAL_RCC_OscConfig+0x4d8>)
 800a278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a27a:	4a7c      	ldr	r2, [pc, #496]	; (800a46c <HAL_RCC_OscConfig+0x4d8>)
 800a27c:	f043 0301 	orr.w	r3, r3, #1
 800a280:	6713      	str	r3, [r2, #112]	; 0x70
 800a282:	e01c      	b.n	800a2be <HAL_RCC_OscConfig+0x32a>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	689b      	ldr	r3, [r3, #8]
 800a288:	2b05      	cmp	r3, #5
 800a28a:	d10c      	bne.n	800a2a6 <HAL_RCC_OscConfig+0x312>
 800a28c:	4b77      	ldr	r3, [pc, #476]	; (800a46c <HAL_RCC_OscConfig+0x4d8>)
 800a28e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a290:	4a76      	ldr	r2, [pc, #472]	; (800a46c <HAL_RCC_OscConfig+0x4d8>)
 800a292:	f043 0304 	orr.w	r3, r3, #4
 800a296:	6713      	str	r3, [r2, #112]	; 0x70
 800a298:	4b74      	ldr	r3, [pc, #464]	; (800a46c <HAL_RCC_OscConfig+0x4d8>)
 800a29a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a29c:	4a73      	ldr	r2, [pc, #460]	; (800a46c <HAL_RCC_OscConfig+0x4d8>)
 800a29e:	f043 0301 	orr.w	r3, r3, #1
 800a2a2:	6713      	str	r3, [r2, #112]	; 0x70
 800a2a4:	e00b      	b.n	800a2be <HAL_RCC_OscConfig+0x32a>
 800a2a6:	4b71      	ldr	r3, [pc, #452]	; (800a46c <HAL_RCC_OscConfig+0x4d8>)
 800a2a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2aa:	4a70      	ldr	r2, [pc, #448]	; (800a46c <HAL_RCC_OscConfig+0x4d8>)
 800a2ac:	f023 0301 	bic.w	r3, r3, #1
 800a2b0:	6713      	str	r3, [r2, #112]	; 0x70
 800a2b2:	4b6e      	ldr	r3, [pc, #440]	; (800a46c <HAL_RCC_OscConfig+0x4d8>)
 800a2b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2b6:	4a6d      	ldr	r2, [pc, #436]	; (800a46c <HAL_RCC_OscConfig+0x4d8>)
 800a2b8:	f023 0304 	bic.w	r3, r3, #4
 800a2bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	689b      	ldr	r3, [r3, #8]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d015      	beq.n	800a2f2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2c6:	f7fd fa31 	bl	800772c <HAL_GetTick>
 800a2ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a2cc:	e00a      	b.n	800a2e4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a2ce:	f7fd fa2d 	bl	800772c <HAL_GetTick>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	1ad3      	subs	r3, r2, r3
 800a2d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d901      	bls.n	800a2e4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800a2e0:	2303      	movs	r3, #3
 800a2e2:	e0bc      	b.n	800a45e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a2e4:	4b61      	ldr	r3, [pc, #388]	; (800a46c <HAL_RCC_OscConfig+0x4d8>)
 800a2e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2e8:	f003 0302 	and.w	r3, r3, #2
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d0ee      	beq.n	800a2ce <HAL_RCC_OscConfig+0x33a>
 800a2f0:	e014      	b.n	800a31c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a2f2:	f7fd fa1b 	bl	800772c <HAL_GetTick>
 800a2f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a2f8:	e00a      	b.n	800a310 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a2fa:	f7fd fa17 	bl	800772c <HAL_GetTick>
 800a2fe:	4602      	mov	r2, r0
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	1ad3      	subs	r3, r2, r3
 800a304:	f241 3288 	movw	r2, #5000	; 0x1388
 800a308:	4293      	cmp	r3, r2
 800a30a:	d901      	bls.n	800a310 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800a30c:	2303      	movs	r3, #3
 800a30e:	e0a6      	b.n	800a45e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a310:	4b56      	ldr	r3, [pc, #344]	; (800a46c <HAL_RCC_OscConfig+0x4d8>)
 800a312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a314:	f003 0302 	and.w	r3, r3, #2
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d1ee      	bne.n	800a2fa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a31c:	7dfb      	ldrb	r3, [r7, #23]
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d105      	bne.n	800a32e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a322:	4b52      	ldr	r3, [pc, #328]	; (800a46c <HAL_RCC_OscConfig+0x4d8>)
 800a324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a326:	4a51      	ldr	r2, [pc, #324]	; (800a46c <HAL_RCC_OscConfig+0x4d8>)
 800a328:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a32c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	699b      	ldr	r3, [r3, #24]
 800a332:	2b00      	cmp	r3, #0
 800a334:	f000 8092 	beq.w	800a45c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a338:	4b4c      	ldr	r3, [pc, #304]	; (800a46c <HAL_RCC_OscConfig+0x4d8>)
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	f003 030c 	and.w	r3, r3, #12
 800a340:	2b08      	cmp	r3, #8
 800a342:	d05c      	beq.n	800a3fe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	699b      	ldr	r3, [r3, #24]
 800a348:	2b02      	cmp	r3, #2
 800a34a:	d141      	bne.n	800a3d0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a34c:	4b48      	ldr	r3, [pc, #288]	; (800a470 <HAL_RCC_OscConfig+0x4dc>)
 800a34e:	2200      	movs	r2, #0
 800a350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a352:	f7fd f9eb 	bl	800772c <HAL_GetTick>
 800a356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a358:	e008      	b.n	800a36c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a35a:	f7fd f9e7 	bl	800772c <HAL_GetTick>
 800a35e:	4602      	mov	r2, r0
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	1ad3      	subs	r3, r2, r3
 800a364:	2b02      	cmp	r3, #2
 800a366:	d901      	bls.n	800a36c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800a368:	2303      	movs	r3, #3
 800a36a:	e078      	b.n	800a45e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a36c:	4b3f      	ldr	r3, [pc, #252]	; (800a46c <HAL_RCC_OscConfig+0x4d8>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a374:	2b00      	cmp	r3, #0
 800a376:	d1f0      	bne.n	800a35a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	69da      	ldr	r2, [r3, #28]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	6a1b      	ldr	r3, [r3, #32]
 800a380:	431a      	orrs	r2, r3
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a386:	019b      	lsls	r3, r3, #6
 800a388:	431a      	orrs	r2, r3
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a38e:	085b      	lsrs	r3, r3, #1
 800a390:	3b01      	subs	r3, #1
 800a392:	041b      	lsls	r3, r3, #16
 800a394:	431a      	orrs	r2, r3
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a39a:	061b      	lsls	r3, r3, #24
 800a39c:	4933      	ldr	r1, [pc, #204]	; (800a46c <HAL_RCC_OscConfig+0x4d8>)
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a3a2:	4b33      	ldr	r3, [pc, #204]	; (800a470 <HAL_RCC_OscConfig+0x4dc>)
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a3a8:	f7fd f9c0 	bl	800772c <HAL_GetTick>
 800a3ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a3ae:	e008      	b.n	800a3c2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a3b0:	f7fd f9bc 	bl	800772c <HAL_GetTick>
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	1ad3      	subs	r3, r2, r3
 800a3ba:	2b02      	cmp	r3, #2
 800a3bc:	d901      	bls.n	800a3c2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800a3be:	2303      	movs	r3, #3
 800a3c0:	e04d      	b.n	800a45e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a3c2:	4b2a      	ldr	r3, [pc, #168]	; (800a46c <HAL_RCC_OscConfig+0x4d8>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d0f0      	beq.n	800a3b0 <HAL_RCC_OscConfig+0x41c>
 800a3ce:	e045      	b.n	800a45c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a3d0:	4b27      	ldr	r3, [pc, #156]	; (800a470 <HAL_RCC_OscConfig+0x4dc>)
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a3d6:	f7fd f9a9 	bl	800772c <HAL_GetTick>
 800a3da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a3dc:	e008      	b.n	800a3f0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a3de:	f7fd f9a5 	bl	800772c <HAL_GetTick>
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	1ad3      	subs	r3, r2, r3
 800a3e8:	2b02      	cmp	r3, #2
 800a3ea:	d901      	bls.n	800a3f0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800a3ec:	2303      	movs	r3, #3
 800a3ee:	e036      	b.n	800a45e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a3f0:	4b1e      	ldr	r3, [pc, #120]	; (800a46c <HAL_RCC_OscConfig+0x4d8>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d1f0      	bne.n	800a3de <HAL_RCC_OscConfig+0x44a>
 800a3fc:	e02e      	b.n	800a45c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	699b      	ldr	r3, [r3, #24]
 800a402:	2b01      	cmp	r3, #1
 800a404:	d101      	bne.n	800a40a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800a406:	2301      	movs	r3, #1
 800a408:	e029      	b.n	800a45e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a40a:	4b18      	ldr	r3, [pc, #96]	; (800a46c <HAL_RCC_OscConfig+0x4d8>)
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	69db      	ldr	r3, [r3, #28]
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d11c      	bne.n	800a458 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a428:	429a      	cmp	r2, r3
 800a42a:	d115      	bne.n	800a458 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800a42c:	68fa      	ldr	r2, [r7, #12]
 800a42e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a432:	4013      	ands	r3, r2
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a438:	4293      	cmp	r3, r2
 800a43a:	d10d      	bne.n	800a458 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800a446:	429a      	cmp	r2, r3
 800a448:	d106      	bne.n	800a458 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a454:	429a      	cmp	r2, r3
 800a456:	d001      	beq.n	800a45c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800a458:	2301      	movs	r3, #1
 800a45a:	e000      	b.n	800a45e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800a45c:	2300      	movs	r3, #0
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3718      	adds	r7, #24
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	40007000 	.word	0x40007000
 800a46c:	40023800 	.word	0x40023800
 800a470:	42470060 	.word	0x42470060

0800a474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b084      	sub	sp, #16
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d101      	bne.n	800a488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a484:	2301      	movs	r3, #1
 800a486:	e0cc      	b.n	800a622 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a488:	4b68      	ldr	r3, [pc, #416]	; (800a62c <HAL_RCC_ClockConfig+0x1b8>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f003 030f 	and.w	r3, r3, #15
 800a490:	683a      	ldr	r2, [r7, #0]
 800a492:	429a      	cmp	r2, r3
 800a494:	d90c      	bls.n	800a4b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a496:	4b65      	ldr	r3, [pc, #404]	; (800a62c <HAL_RCC_ClockConfig+0x1b8>)
 800a498:	683a      	ldr	r2, [r7, #0]
 800a49a:	b2d2      	uxtb	r2, r2
 800a49c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a49e:	4b63      	ldr	r3, [pc, #396]	; (800a62c <HAL_RCC_ClockConfig+0x1b8>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f003 030f 	and.w	r3, r3, #15
 800a4a6:	683a      	ldr	r2, [r7, #0]
 800a4a8:	429a      	cmp	r2, r3
 800a4aa:	d001      	beq.n	800a4b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a4ac:	2301      	movs	r3, #1
 800a4ae:	e0b8      	b.n	800a622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f003 0302 	and.w	r3, r3, #2
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d020      	beq.n	800a4fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f003 0304 	and.w	r3, r3, #4
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d005      	beq.n	800a4d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a4c8:	4b59      	ldr	r3, [pc, #356]	; (800a630 <HAL_RCC_ClockConfig+0x1bc>)
 800a4ca:	689b      	ldr	r3, [r3, #8]
 800a4cc:	4a58      	ldr	r2, [pc, #352]	; (800a630 <HAL_RCC_ClockConfig+0x1bc>)
 800a4ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a4d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f003 0308 	and.w	r3, r3, #8
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d005      	beq.n	800a4ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a4e0:	4b53      	ldr	r3, [pc, #332]	; (800a630 <HAL_RCC_ClockConfig+0x1bc>)
 800a4e2:	689b      	ldr	r3, [r3, #8]
 800a4e4:	4a52      	ldr	r2, [pc, #328]	; (800a630 <HAL_RCC_ClockConfig+0x1bc>)
 800a4e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a4ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a4ec:	4b50      	ldr	r3, [pc, #320]	; (800a630 <HAL_RCC_ClockConfig+0x1bc>)
 800a4ee:	689b      	ldr	r3, [r3, #8]
 800a4f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	689b      	ldr	r3, [r3, #8]
 800a4f8:	494d      	ldr	r1, [pc, #308]	; (800a630 <HAL_RCC_ClockConfig+0x1bc>)
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f003 0301 	and.w	r3, r3, #1
 800a506:	2b00      	cmp	r3, #0
 800a508:	d044      	beq.n	800a594 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	685b      	ldr	r3, [r3, #4]
 800a50e:	2b01      	cmp	r3, #1
 800a510:	d107      	bne.n	800a522 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a512:	4b47      	ldr	r3, [pc, #284]	; (800a630 <HAL_RCC_ClockConfig+0x1bc>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d119      	bne.n	800a552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a51e:	2301      	movs	r3, #1
 800a520:	e07f      	b.n	800a622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	2b02      	cmp	r3, #2
 800a528:	d003      	beq.n	800a532 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a52e:	2b03      	cmp	r3, #3
 800a530:	d107      	bne.n	800a542 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a532:	4b3f      	ldr	r3, [pc, #252]	; (800a630 <HAL_RCC_ClockConfig+0x1bc>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d109      	bne.n	800a552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a53e:	2301      	movs	r3, #1
 800a540:	e06f      	b.n	800a622 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a542:	4b3b      	ldr	r3, [pc, #236]	; (800a630 <HAL_RCC_ClockConfig+0x1bc>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f003 0302 	and.w	r3, r3, #2
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d101      	bne.n	800a552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a54e:	2301      	movs	r3, #1
 800a550:	e067      	b.n	800a622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a552:	4b37      	ldr	r3, [pc, #220]	; (800a630 <HAL_RCC_ClockConfig+0x1bc>)
 800a554:	689b      	ldr	r3, [r3, #8]
 800a556:	f023 0203 	bic.w	r2, r3, #3
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	4934      	ldr	r1, [pc, #208]	; (800a630 <HAL_RCC_ClockConfig+0x1bc>)
 800a560:	4313      	orrs	r3, r2
 800a562:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a564:	f7fd f8e2 	bl	800772c <HAL_GetTick>
 800a568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a56a:	e00a      	b.n	800a582 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a56c:	f7fd f8de 	bl	800772c <HAL_GetTick>
 800a570:	4602      	mov	r2, r0
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	1ad3      	subs	r3, r2, r3
 800a576:	f241 3288 	movw	r2, #5000	; 0x1388
 800a57a:	4293      	cmp	r3, r2
 800a57c:	d901      	bls.n	800a582 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a57e:	2303      	movs	r3, #3
 800a580:	e04f      	b.n	800a622 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a582:	4b2b      	ldr	r3, [pc, #172]	; (800a630 <HAL_RCC_ClockConfig+0x1bc>)
 800a584:	689b      	ldr	r3, [r3, #8]
 800a586:	f003 020c 	and.w	r2, r3, #12
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	429a      	cmp	r2, r3
 800a592:	d1eb      	bne.n	800a56c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a594:	4b25      	ldr	r3, [pc, #148]	; (800a62c <HAL_RCC_ClockConfig+0x1b8>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f003 030f 	and.w	r3, r3, #15
 800a59c:	683a      	ldr	r2, [r7, #0]
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	d20c      	bcs.n	800a5bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a5a2:	4b22      	ldr	r3, [pc, #136]	; (800a62c <HAL_RCC_ClockConfig+0x1b8>)
 800a5a4:	683a      	ldr	r2, [r7, #0]
 800a5a6:	b2d2      	uxtb	r2, r2
 800a5a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a5aa:	4b20      	ldr	r3, [pc, #128]	; (800a62c <HAL_RCC_ClockConfig+0x1b8>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	f003 030f 	and.w	r3, r3, #15
 800a5b2:	683a      	ldr	r2, [r7, #0]
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d001      	beq.n	800a5bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	e032      	b.n	800a622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f003 0304 	and.w	r3, r3, #4
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d008      	beq.n	800a5da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a5c8:	4b19      	ldr	r3, [pc, #100]	; (800a630 <HAL_RCC_ClockConfig+0x1bc>)
 800a5ca:	689b      	ldr	r3, [r3, #8]
 800a5cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	68db      	ldr	r3, [r3, #12]
 800a5d4:	4916      	ldr	r1, [pc, #88]	; (800a630 <HAL_RCC_ClockConfig+0x1bc>)
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f003 0308 	and.w	r3, r3, #8
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d009      	beq.n	800a5fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a5e6:	4b12      	ldr	r3, [pc, #72]	; (800a630 <HAL_RCC_ClockConfig+0x1bc>)
 800a5e8:	689b      	ldr	r3, [r3, #8]
 800a5ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	691b      	ldr	r3, [r3, #16]
 800a5f2:	00db      	lsls	r3, r3, #3
 800a5f4:	490e      	ldr	r1, [pc, #56]	; (800a630 <HAL_RCC_ClockConfig+0x1bc>)
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a5fa:	f000 f821 	bl	800a640 <HAL_RCC_GetSysClockFreq>
 800a5fe:	4601      	mov	r1, r0
 800a600:	4b0b      	ldr	r3, [pc, #44]	; (800a630 <HAL_RCC_ClockConfig+0x1bc>)
 800a602:	689b      	ldr	r3, [r3, #8]
 800a604:	091b      	lsrs	r3, r3, #4
 800a606:	f003 030f 	and.w	r3, r3, #15
 800a60a:	4a0a      	ldr	r2, [pc, #40]	; (800a634 <HAL_RCC_ClockConfig+0x1c0>)
 800a60c:	5cd3      	ldrb	r3, [r2, r3]
 800a60e:	fa21 f303 	lsr.w	r3, r1, r3
 800a612:	4a09      	ldr	r2, [pc, #36]	; (800a638 <HAL_RCC_ClockConfig+0x1c4>)
 800a614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a616:	4b09      	ldr	r3, [pc, #36]	; (800a63c <HAL_RCC_ClockConfig+0x1c8>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4618      	mov	r0, r3
 800a61c:	f7fd f842 	bl	80076a4 <HAL_InitTick>

  return HAL_OK;
 800a620:	2300      	movs	r3, #0
}
 800a622:	4618      	mov	r0, r3
 800a624:	3710      	adds	r7, #16
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}
 800a62a:	bf00      	nop
 800a62c:	40023c00 	.word	0x40023c00
 800a630:	40023800 	.word	0x40023800
 800a634:	08016b58 	.word	0x08016b58
 800a638:	20000168 	.word	0x20000168
 800a63c:	20000170 	.word	0x20000170

0800a640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a640:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a642:	b085      	sub	sp, #20
 800a644:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a646:	2300      	movs	r3, #0
 800a648:	607b      	str	r3, [r7, #4]
 800a64a:	2300      	movs	r3, #0
 800a64c:	60fb      	str	r3, [r7, #12]
 800a64e:	2300      	movs	r3, #0
 800a650:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a652:	2300      	movs	r3, #0
 800a654:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a656:	4b50      	ldr	r3, [pc, #320]	; (800a798 <HAL_RCC_GetSysClockFreq+0x158>)
 800a658:	689b      	ldr	r3, [r3, #8]
 800a65a:	f003 030c 	and.w	r3, r3, #12
 800a65e:	2b04      	cmp	r3, #4
 800a660:	d007      	beq.n	800a672 <HAL_RCC_GetSysClockFreq+0x32>
 800a662:	2b08      	cmp	r3, #8
 800a664:	d008      	beq.n	800a678 <HAL_RCC_GetSysClockFreq+0x38>
 800a666:	2b00      	cmp	r3, #0
 800a668:	f040 808d 	bne.w	800a786 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a66c:	4b4b      	ldr	r3, [pc, #300]	; (800a79c <HAL_RCC_GetSysClockFreq+0x15c>)
 800a66e:	60bb      	str	r3, [r7, #8]
       break;
 800a670:	e08c      	b.n	800a78c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a672:	4b4b      	ldr	r3, [pc, #300]	; (800a7a0 <HAL_RCC_GetSysClockFreq+0x160>)
 800a674:	60bb      	str	r3, [r7, #8]
      break;
 800a676:	e089      	b.n	800a78c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a678:	4b47      	ldr	r3, [pc, #284]	; (800a798 <HAL_RCC_GetSysClockFreq+0x158>)
 800a67a:	685b      	ldr	r3, [r3, #4]
 800a67c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a680:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a682:	4b45      	ldr	r3, [pc, #276]	; (800a798 <HAL_RCC_GetSysClockFreq+0x158>)
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d023      	beq.n	800a6d6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a68e:	4b42      	ldr	r3, [pc, #264]	; (800a798 <HAL_RCC_GetSysClockFreq+0x158>)
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	099b      	lsrs	r3, r3, #6
 800a694:	f04f 0400 	mov.w	r4, #0
 800a698:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a69c:	f04f 0200 	mov.w	r2, #0
 800a6a0:	ea03 0501 	and.w	r5, r3, r1
 800a6a4:	ea04 0602 	and.w	r6, r4, r2
 800a6a8:	4a3d      	ldr	r2, [pc, #244]	; (800a7a0 <HAL_RCC_GetSysClockFreq+0x160>)
 800a6aa:	fb02 f106 	mul.w	r1, r2, r6
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	fb02 f205 	mul.w	r2, r2, r5
 800a6b4:	440a      	add	r2, r1
 800a6b6:	493a      	ldr	r1, [pc, #232]	; (800a7a0 <HAL_RCC_GetSysClockFreq+0x160>)
 800a6b8:	fba5 0101 	umull	r0, r1, r5, r1
 800a6bc:	1853      	adds	r3, r2, r1
 800a6be:	4619      	mov	r1, r3
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f04f 0400 	mov.w	r4, #0
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	4623      	mov	r3, r4
 800a6ca:	f7f6 fadd 	bl	8000c88 <__aeabi_uldivmod>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	460c      	mov	r4, r1
 800a6d2:	60fb      	str	r3, [r7, #12]
 800a6d4:	e049      	b.n	800a76a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a6d6:	4b30      	ldr	r3, [pc, #192]	; (800a798 <HAL_RCC_GetSysClockFreq+0x158>)
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	099b      	lsrs	r3, r3, #6
 800a6dc:	f04f 0400 	mov.w	r4, #0
 800a6e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a6e4:	f04f 0200 	mov.w	r2, #0
 800a6e8:	ea03 0501 	and.w	r5, r3, r1
 800a6ec:	ea04 0602 	and.w	r6, r4, r2
 800a6f0:	4629      	mov	r1, r5
 800a6f2:	4632      	mov	r2, r6
 800a6f4:	f04f 0300 	mov.w	r3, #0
 800a6f8:	f04f 0400 	mov.w	r4, #0
 800a6fc:	0154      	lsls	r4, r2, #5
 800a6fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a702:	014b      	lsls	r3, r1, #5
 800a704:	4619      	mov	r1, r3
 800a706:	4622      	mov	r2, r4
 800a708:	1b49      	subs	r1, r1, r5
 800a70a:	eb62 0206 	sbc.w	r2, r2, r6
 800a70e:	f04f 0300 	mov.w	r3, #0
 800a712:	f04f 0400 	mov.w	r4, #0
 800a716:	0194      	lsls	r4, r2, #6
 800a718:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a71c:	018b      	lsls	r3, r1, #6
 800a71e:	1a5b      	subs	r3, r3, r1
 800a720:	eb64 0402 	sbc.w	r4, r4, r2
 800a724:	f04f 0100 	mov.w	r1, #0
 800a728:	f04f 0200 	mov.w	r2, #0
 800a72c:	00e2      	lsls	r2, r4, #3
 800a72e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a732:	00d9      	lsls	r1, r3, #3
 800a734:	460b      	mov	r3, r1
 800a736:	4614      	mov	r4, r2
 800a738:	195b      	adds	r3, r3, r5
 800a73a:	eb44 0406 	adc.w	r4, r4, r6
 800a73e:	f04f 0100 	mov.w	r1, #0
 800a742:	f04f 0200 	mov.w	r2, #0
 800a746:	02a2      	lsls	r2, r4, #10
 800a748:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a74c:	0299      	lsls	r1, r3, #10
 800a74e:	460b      	mov	r3, r1
 800a750:	4614      	mov	r4, r2
 800a752:	4618      	mov	r0, r3
 800a754:	4621      	mov	r1, r4
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	f04f 0400 	mov.w	r4, #0
 800a75c:	461a      	mov	r2, r3
 800a75e:	4623      	mov	r3, r4
 800a760:	f7f6 fa92 	bl	8000c88 <__aeabi_uldivmod>
 800a764:	4603      	mov	r3, r0
 800a766:	460c      	mov	r4, r1
 800a768:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a76a:	4b0b      	ldr	r3, [pc, #44]	; (800a798 <HAL_RCC_GetSysClockFreq+0x158>)
 800a76c:	685b      	ldr	r3, [r3, #4]
 800a76e:	0c1b      	lsrs	r3, r3, #16
 800a770:	f003 0303 	and.w	r3, r3, #3
 800a774:	3301      	adds	r3, #1
 800a776:	005b      	lsls	r3, r3, #1
 800a778:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a77a:	68fa      	ldr	r2, [r7, #12]
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a782:	60bb      	str	r3, [r7, #8]
      break;
 800a784:	e002      	b.n	800a78c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a786:	4b05      	ldr	r3, [pc, #20]	; (800a79c <HAL_RCC_GetSysClockFreq+0x15c>)
 800a788:	60bb      	str	r3, [r7, #8]
      break;
 800a78a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a78c:	68bb      	ldr	r3, [r7, #8]
}
 800a78e:	4618      	mov	r0, r3
 800a790:	3714      	adds	r7, #20
 800a792:	46bd      	mov	sp, r7
 800a794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a796:	bf00      	nop
 800a798:	40023800 	.word	0x40023800
 800a79c:	00f42400 	.word	0x00f42400
 800a7a0:	017d7840 	.word	0x017d7840

0800a7a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a7a8:	4b03      	ldr	r3, [pc, #12]	; (800a7b8 <HAL_RCC_GetHCLKFreq+0x14>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr
 800a7b6:	bf00      	nop
 800a7b8:	20000168 	.word	0x20000168

0800a7bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a7c0:	f7ff fff0 	bl	800a7a4 <HAL_RCC_GetHCLKFreq>
 800a7c4:	4601      	mov	r1, r0
 800a7c6:	4b05      	ldr	r3, [pc, #20]	; (800a7dc <HAL_RCC_GetPCLK1Freq+0x20>)
 800a7c8:	689b      	ldr	r3, [r3, #8]
 800a7ca:	0a9b      	lsrs	r3, r3, #10
 800a7cc:	f003 0307 	and.w	r3, r3, #7
 800a7d0:	4a03      	ldr	r2, [pc, #12]	; (800a7e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a7d2:	5cd3      	ldrb	r3, [r2, r3]
 800a7d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	bd80      	pop	{r7, pc}
 800a7dc:	40023800 	.word	0x40023800
 800a7e0:	08016b68 	.word	0x08016b68

0800a7e4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d101      	bne.n	800a7f6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	e022      	b.n	800a83c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a7fc:	b2db      	uxtb	r3, r3
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d105      	bne.n	800a80e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2200      	movs	r2, #0
 800a806:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f7f8 ff1d 	bl	8003648 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2203      	movs	r2, #3
 800a812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f000 f814 	bl	800a844 <HAL_SD_InitCard>
 800a81c:	4603      	mov	r3, r0
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d001      	beq.n	800a826 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a822:	2301      	movs	r3, #1
 800a824:	e00a      	b.n	800a83c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2200      	movs	r2, #0
 800a82a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2200      	movs	r2, #0
 800a830:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2201      	movs	r2, #1
 800a836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a83a:	2300      	movs	r3, #0
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3708      	adds	r7, #8
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a844:	b5b0      	push	{r4, r5, r7, lr}
 800a846:	b08e      	sub	sp, #56	; 0x38
 800a848:	af04      	add	r7, sp, #16
 800a84a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800a84c:	2300      	movs	r3, #0
 800a84e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800a850:	2300      	movs	r3, #0
 800a852:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a854:	2300      	movs	r3, #0
 800a856:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800a858:	2300      	movs	r3, #0
 800a85a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a85c:	2300      	movs	r3, #0
 800a85e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800a860:	2376      	movs	r3, #118	; 0x76
 800a862:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681d      	ldr	r5, [r3, #0]
 800a868:	466c      	mov	r4, sp
 800a86a:	f107 0314 	add.w	r3, r7, #20
 800a86e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a872:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a876:	f107 0308 	add.w	r3, r7, #8
 800a87a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a87c:	4628      	mov	r0, r5
 800a87e:	f002 f803 	bl	800c888 <SDIO_Init>
 800a882:	4603      	mov	r3, r0
 800a884:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800a888:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d001      	beq.n	800a894 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a890:	2301      	movs	r3, #1
 800a892:	e031      	b.n	800a8f8 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800a894:	4b1a      	ldr	r3, [pc, #104]	; (800a900 <HAL_SD_InitCard+0xbc>)
 800a896:	2200      	movs	r2, #0
 800a898:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f002 f83b 	bl	800c91a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800a8a4:	4b16      	ldr	r3, [pc, #88]	; (800a900 <HAL_SD_InitCard+0xbc>)
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 ffdc 	bl	800b868 <SD_PowerON>
 800a8b0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a8b2:	6a3b      	ldr	r3, [r7, #32]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d00b      	beq.n	800a8d0 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8c4:	6a3b      	ldr	r3, [r7, #32]
 800a8c6:	431a      	orrs	r2, r3
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	e013      	b.n	800a8f8 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f000 fefb 	bl	800b6cc <SD_InitCard>
 800a8d6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a8d8:	6a3b      	ldr	r3, [r7, #32]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d00b      	beq.n	800a8f6 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8ea:	6a3b      	ldr	r3, [r7, #32]
 800a8ec:	431a      	orrs	r2, r3
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	e000      	b.n	800a8f8 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800a8f6:	2300      	movs	r3, #0
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3728      	adds	r7, #40	; 0x28
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bdb0      	pop	{r4, r5, r7, pc}
 800a900:	422580a0 	.word	0x422580a0

0800a904 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b08c      	sub	sp, #48	; 0x30
 800a908:	af00      	add	r7, sp, #0
 800a90a:	60f8      	str	r0, [r7, #12]
 800a90c:	60b9      	str	r1, [r7, #8]
 800a90e:	607a      	str	r2, [r7, #4]
 800a910:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d107      	bne.n	800a92c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a920:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a928:	2301      	movs	r3, #1
 800a92a:	e0c9      	b.n	800aac0 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a932:	b2db      	uxtb	r3, r3
 800a934:	2b01      	cmp	r3, #1
 800a936:	f040 80c2 	bne.w	800aabe <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	2200      	movs	r2, #0
 800a93e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a940:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	441a      	add	r2, r3
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a94a:	429a      	cmp	r2, r3
 800a94c:	d907      	bls.n	800a95e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a952:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a95a:	2301      	movs	r3, #1
 800a95c:	e0b0      	b.n	800aac0 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2203      	movs	r2, #3
 800a962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	2200      	movs	r2, #0
 800a96c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a974:	68fa      	ldr	r2, [r7, #12]
 800a976:	6812      	ldr	r2, [r2, #0]
 800a978:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800a97c:	f043 0302 	orr.w	r3, r3, #2
 800a980:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a986:	4a50      	ldr	r2, [pc, #320]	; (800aac8 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800a988:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a98e:	4a4f      	ldr	r2, [pc, #316]	; (800aacc <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800a990:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a996:	2200      	movs	r2, #0
 800a998:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	3380      	adds	r3, #128	; 0x80
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	68ba      	ldr	r2, [r7, #8]
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	025b      	lsls	r3, r3, #9
 800a9ac:	089b      	lsrs	r3, r3, #2
 800a9ae:	f7fd fce9 	bl	8008384 <HAL_DMA_Start_IT>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d017      	beq.n	800a9e8 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800a9c6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	4a40      	ldr	r2, [pc, #256]	; (800aad0 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800a9ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	2201      	movs	r2, #1
 800a9e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	e06b      	b.n	800aac0 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800a9e8:	4b3a      	ldr	r3, [pc, #232]	; (800aad4 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9f2:	2b01      	cmp	r3, #1
 800a9f4:	d002      	beq.n	800a9fc <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 800a9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f8:	025b      	lsls	r3, r3, #9
 800a9fa:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aa04:	4618      	mov	r0, r3
 800aa06:	f002 f81b 	bl	800ca40 <SDMMC_CmdBlockLength>
 800aa0a:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800aa0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d00f      	beq.n	800aa32 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	4a2e      	ldr	r2, [pc, #184]	; (800aad0 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800aa18:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa20:	431a      	orrs	r2, r3
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2201      	movs	r2, #1
 800aa2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800aa2e:	2301      	movs	r3, #1
 800aa30:	e046      	b.n	800aac0 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800aa32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa36:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	025b      	lsls	r3, r3, #9
 800aa3c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800aa3e:	2390      	movs	r3, #144	; 0x90
 800aa40:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800aa42:	2302      	movs	r3, #2
 800aa44:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800aa46:	2300      	movs	r3, #0
 800aa48:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f107 0210 	add.w	r2, r7, #16
 800aa56:	4611      	mov	r1, r2
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f001 ffc5 	bl	800c9e8 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800aa5e:	683b      	ldr	r3, [r7, #0]
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d90a      	bls.n	800aa7a <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	2282      	movs	r2, #130	; 0x82
 800aa68:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa70:	4618      	mov	r0, r3
 800aa72:	f002 f829 	bl	800cac8 <SDMMC_CmdReadMultiBlock>
 800aa76:	62f8      	str	r0, [r7, #44]	; 0x2c
 800aa78:	e009      	b.n	800aa8e <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	2281      	movs	r2, #129	; 0x81
 800aa7e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa86:	4618      	mov	r0, r3
 800aa88:	f001 fffc 	bl	800ca84 <SDMMC_CmdReadSingleBlock>
 800aa8c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800aa8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d012      	beq.n	800aaba <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4a0d      	ldr	r2, [pc, #52]	; (800aad0 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800aa9a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aaa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaa2:	431a      	orrs	r2, r3
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	2201      	movs	r2, #1
 800aaac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	2200      	movs	r2, #0
 800aab4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800aab6:	2301      	movs	r3, #1
 800aab8:	e002      	b.n	800aac0 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 800aaba:	2300      	movs	r3, #0
 800aabc:	e000      	b.n	800aac0 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 800aabe:	2302      	movs	r3, #2
  }
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3730      	adds	r7, #48	; 0x30
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}
 800aac8:	0800b4db 	.word	0x0800b4db
 800aacc:	0800b54d 	.word	0x0800b54d
 800aad0:	004005ff 	.word	0x004005ff
 800aad4:	4225858c 	.word	0x4225858c

0800aad8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b08c      	sub	sp, #48	; 0x30
 800aadc:	af00      	add	r7, sp, #0
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	60b9      	str	r1, [r7, #8]
 800aae2:	607a      	str	r2, [r7, #4]
 800aae4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d107      	bne.n	800ab00 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaf4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800aafc:	2301      	movs	r3, #1
 800aafe:	e0ce      	b.n	800ac9e <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ab06:	b2db      	uxtb	r3, r3
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	f040 80c7 	bne.w	800ac9c <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2200      	movs	r2, #0
 800ab12:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ab14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	441a      	add	r2, r3
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d907      	bls.n	800ab32 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab26:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ab2e:	2301      	movs	r3, #1
 800ab30:	e0b5      	b.n	800ac9e <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2203      	movs	r2, #3
 800ab36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab48:	68fa      	ldr	r2, [r7, #12]
 800ab4a:	6812      	ldr	r2, [r2, #0]
 800ab4c:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800ab50:	f043 0302 	orr.w	r3, r3, #2
 800ab54:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab5a:	4a53      	ldr	r2, [pc, #332]	; (800aca8 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800ab5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab62:	4a52      	ldr	r2, [pc, #328]	; (800acac <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800ab64:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab72:	2b01      	cmp	r3, #1
 800ab74:	d002      	beq.n	800ab7c <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800ab76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab78:	025b      	lsls	r3, r3, #9
 800ab7a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ab84:	4618      	mov	r0, r3
 800ab86:	f001 ff5b 	bl	800ca40 <SDMMC_CmdBlockLength>
 800ab8a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d00f      	beq.n	800abb2 <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	4a46      	ldr	r2, [pc, #280]	; (800acb0 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800ab98:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba0:	431a      	orrs	r2, r3
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2201      	movs	r2, #1
 800abaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800abae:	2301      	movs	r3, #1
 800abb0:	e075      	b.n	800ac9e <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	d90a      	bls.n	800abce <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	22a0      	movs	r2, #160	; 0xa0
 800abbc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800abc4:	4618      	mov	r0, r3
 800abc6:	f001 ffc3 	bl	800cb50 <SDMMC_CmdWriteMultiBlock>
 800abca:	62f8      	str	r0, [r7, #44]	; 0x2c
 800abcc:	e009      	b.n	800abe2 <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2290      	movs	r2, #144	; 0x90
 800abd2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800abda:	4618      	mov	r0, r3
 800abdc:	f001 ff96 	bl	800cb0c <SDMMC_CmdWriteSingleBlock>
 800abe0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800abe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d012      	beq.n	800ac0e <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	4a30      	ldr	r2, [pc, #192]	; (800acb0 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800abee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf6:	431a      	orrs	r2, r3
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2201      	movs	r2, #1
 800ac00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	2200      	movs	r2, #0
 800ac08:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	e047      	b.n	800ac9e <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800ac0e:	4b29      	ldr	r3, [pc, #164]	; (800acb4 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 800ac10:	2201      	movs	r2, #1
 800ac12:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800ac18:	68b9      	ldr	r1, [r7, #8]
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	3380      	adds	r3, #128	; 0x80
 800ac20:	461a      	mov	r2, r3
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	025b      	lsls	r3, r3, #9
 800ac26:	089b      	lsrs	r3, r3, #2
 800ac28:	f7fd fbac 	bl	8008384 <HAL_DMA_Start_IT>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d01c      	beq.n	800ac6c <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac38:	68fa      	ldr	r2, [r7, #12]
 800ac3a:	6812      	ldr	r2, [r2, #0]
 800ac3c:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800ac40:	f023 0302 	bic.w	r3, r3, #2
 800ac44:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	4a19      	ldr	r2, [pc, #100]	; (800acb0 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800ac4c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac52:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	2200      	movs	r2, #0
 800ac66:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	e018      	b.n	800ac9e <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ac6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac70:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	025b      	lsls	r3, r3, #9
 800ac76:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800ac78:	2390      	movs	r3, #144	; 0x90
 800ac7a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800ac80:	2300      	movs	r3, #0
 800ac82:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800ac84:	2301      	movs	r3, #1
 800ac86:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f107 0210 	add.w	r2, r7, #16
 800ac90:	4611      	mov	r1, r2
 800ac92:	4618      	mov	r0, r3
 800ac94:	f001 fea8 	bl	800c9e8 <SDIO_ConfigData>

      return HAL_OK;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	e000      	b.n	800ac9e <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 800ac9c:	2302      	movs	r3, #2
  }
}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3730      	adds	r7, #48	; 0x30
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}
 800aca6:	bf00      	nop
 800aca8:	0800b4b1 	.word	0x0800b4b1
 800acac:	0800b54d 	.word	0x0800b54d
 800acb0:	004005ff 	.word	0x004005ff
 800acb4:	4225858c 	.word	0x4225858c

0800acb8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acc4:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800accc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d008      	beq.n	800ace6 <HAL_SD_IRQHandler+0x2e>
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	f003 0308 	and.w	r3, r3, #8
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d003      	beq.n	800ace6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f000 ffd8 	bl	800bc94 <SD_Read_IT>
 800ace4:	e165      	b.n	800afb2 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	f000 808f 	beq.w	800ae14 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800acfe:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad06:	687a      	ldr	r2, [r7, #4]
 800ad08:	6812      	ldr	r2, [r2, #0]
 800ad0a:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800ad0e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800ad12:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f022 0201 	bic.w	r2, r2, #1
 800ad22:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f003 0308 	and.w	r3, r3, #8
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d039      	beq.n	800ada2 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	f003 0302 	and.w	r3, r3, #2
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d104      	bne.n	800ad42 <HAL_SD_IRQHandler+0x8a>
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f003 0320 	and.w	r3, r3, #32
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d011      	beq.n	800ad66 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	4618      	mov	r0, r3
 800ad48:	f001 ff24 	bl	800cb94 <SDMMC_CmdStopTransfer>
 800ad4c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d008      	beq.n	800ad66 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	431a      	orrs	r2, r3
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f000 f92f 	bl	800afc4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f240 523a 	movw	r2, #1338	; 0x53a
 800ad6e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2201      	movs	r2, #1
 800ad74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	f003 0301 	and.w	r3, r3, #1
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d104      	bne.n	800ad92 <HAL_SD_IRQHandler+0xda>
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f003 0302 	and.w	r3, r3, #2
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d003      	beq.n	800ad9a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f002 fb82 	bl	800d49c <HAL_SD_RxCpltCallback>
 800ad98:	e10b      	b.n	800afb2 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f002 fb74 	bl	800d488 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ada0:	e107      	b.n	800afb2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	f000 8102 	beq.w	800afb2 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	f003 0320 	and.w	r3, r3, #32
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d011      	beq.n	800addc <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	4618      	mov	r0, r3
 800adbe:	f001 fee9 	bl	800cb94 <SDMMC_CmdStopTransfer>
 800adc2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d008      	beq.n	800addc <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	431a      	orrs	r2, r3
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f000 f8f4 	bl	800afc4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f003 0301 	and.w	r3, r3, #1
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	f040 80e5 	bne.w	800afb2 <HAL_SD_IRQHandler+0x2fa>
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f003 0302 	and.w	r3, r3, #2
 800adee:	2b00      	cmp	r3, #0
 800adf0:	f040 80df 	bne.w	800afb2 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f022 0208 	bic.w	r2, r2, #8
 800ae02:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2201      	movs	r2, #1
 800ae08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f002 fb3b 	bl	800d488 <HAL_SD_TxCpltCallback>
}
 800ae12:	e0ce      	b.n	800afb2 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d008      	beq.n	800ae34 <HAL_SD_IRQHandler+0x17c>
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	f003 0308 	and.w	r3, r3, #8
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d003      	beq.n	800ae34 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f000 ff82 	bl	800bd36 <SD_Write_IT>
 800ae32:	e0be      	b.n	800afb2 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae3a:	f240 233a 	movw	r3, #570	; 0x23a
 800ae3e:	4013      	ands	r3, r2
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	f000 80b6 	beq.w	800afb2 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae4c:	f003 0302 	and.w	r3, r3, #2
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d005      	beq.n	800ae60 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae58:	f043 0202 	orr.w	r2, r3, #2
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae66:	f003 0308 	and.w	r3, r3, #8
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d005      	beq.n	800ae7a <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae72:	f043 0208 	orr.w	r2, r3, #8
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae80:	f003 0320 	and.w	r3, r3, #32
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d005      	beq.n	800ae94 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae8c:	f043 0220 	orr.w	r2, r3, #32
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae9a:	f003 0310 	and.w	r3, r3, #16
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d005      	beq.n	800aeae <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aea6:	f043 0210 	orr.w	r2, r3, #16
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d005      	beq.n	800aec8 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aec0:	f043 0208 	orr.w	r2, r3, #8
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f240 723a 	movw	r2, #1850	; 0x73a
 800aed0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aed8:	687a      	ldr	r2, [r7, #4]
 800aeda:	6812      	ldr	r2, [r2, #0]
 800aedc:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800aee0:	f023 0302 	bic.w	r3, r3, #2
 800aee4:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4618      	mov	r0, r3
 800aeec:	f001 fe52 	bl	800cb94 <SDMMC_CmdStopTransfer>
 800aef0:	4602      	mov	r2, r0
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aef6:	431a      	orrs	r2, r3
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f003 0308 	and.w	r3, r3, #8
 800af02:	2b00      	cmp	r3, #0
 800af04:	d00a      	beq.n	800af1c <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2201      	movs	r2, #1
 800af0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2200      	movs	r2, #0
 800af12:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f000 f855 	bl	800afc4 <HAL_SD_ErrorCallback>
}
 800af1a:	e04a      	b.n	800afb2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af22:	2b00      	cmp	r3, #0
 800af24:	d045      	beq.n	800afb2 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	f003 0310 	and.w	r3, r3, #16
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d104      	bne.n	800af3a <HAL_SD_IRQHandler+0x282>
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	f003 0320 	and.w	r3, r3, #32
 800af36:	2b00      	cmp	r3, #0
 800af38:	d011      	beq.n	800af5e <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af3e:	4a1f      	ldr	r2, [pc, #124]	; (800afbc <HAL_SD_IRQHandler+0x304>)
 800af40:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af46:	4618      	mov	r0, r3
 800af48:	f7fd fae4 	bl	8008514 <HAL_DMA_Abort_IT>
 800af4c:	4603      	mov	r3, r0
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d02f      	beq.n	800afb2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af56:	4618      	mov	r0, r3
 800af58:	f000 fb4a 	bl	800b5f0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800af5c:	e029      	b.n	800afb2 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	f003 0301 	and.w	r3, r3, #1
 800af64:	2b00      	cmp	r3, #0
 800af66:	d104      	bne.n	800af72 <HAL_SD_IRQHandler+0x2ba>
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f003 0302 	and.w	r3, r3, #2
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d011      	beq.n	800af96 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af76:	4a12      	ldr	r2, [pc, #72]	; (800afc0 <HAL_SD_IRQHandler+0x308>)
 800af78:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af7e:	4618      	mov	r0, r3
 800af80:	f7fd fac8 	bl	8008514 <HAL_DMA_Abort_IT>
 800af84:	4603      	mov	r3, r0
 800af86:	2b00      	cmp	r3, #0
 800af88:	d013      	beq.n	800afb2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af8e:	4618      	mov	r0, r3
 800af90:	f000 fb65 	bl	800b65e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800af94:	e00d      	b.n	800afb2 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	2200      	movs	r2, #0
 800af9a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2201      	movs	r2, #1
 800afa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2200      	movs	r2, #0
 800afa8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f002 fa62 	bl	800d474 <HAL_SD_AbortCallback>
}
 800afb0:	e7ff      	b.n	800afb2 <HAL_SD_IRQHandler+0x2fa>
 800afb2:	bf00      	nop
 800afb4:	3710      	adds	r7, #16
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}
 800afba:	bf00      	nop
 800afbc:	0800b5f1 	.word	0x0800b5f1
 800afc0:	0800b65f 	.word	0x0800b65f

0800afc4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b083      	sub	sp, #12
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800afcc:	bf00      	nop
 800afce:	370c      	adds	r7, #12
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr

0800afd8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800afd8:	b480      	push	{r7}
 800afda:	b083      	sub	sp, #12
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800afe6:	0f9b      	lsrs	r3, r3, #30
 800afe8:	b2da      	uxtb	r2, r3
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aff2:	0e9b      	lsrs	r3, r3, #26
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	f003 030f 	and.w	r3, r3, #15
 800affa:	b2da      	uxtb	r2, r3
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b004:	0e1b      	lsrs	r3, r3, #24
 800b006:	b2db      	uxtb	r3, r3
 800b008:	f003 0303 	and.w	r3, r3, #3
 800b00c:	b2da      	uxtb	r2, r3
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b016:	0c1b      	lsrs	r3, r3, #16
 800b018:	b2da      	uxtb	r2, r3
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b022:	0a1b      	lsrs	r3, r3, #8
 800b024:	b2da      	uxtb	r2, r3
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b02e:	b2da      	uxtb	r2, r3
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b038:	0d1b      	lsrs	r3, r3, #20
 800b03a:	b29a      	uxth	r2, r3
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b044:	0c1b      	lsrs	r3, r3, #16
 800b046:	b2db      	uxtb	r3, r3
 800b048:	f003 030f 	and.w	r3, r3, #15
 800b04c:	b2da      	uxtb	r2, r3
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b056:	0bdb      	lsrs	r3, r3, #15
 800b058:	b2db      	uxtb	r3, r3
 800b05a:	f003 0301 	and.w	r3, r3, #1
 800b05e:	b2da      	uxtb	r2, r3
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b068:	0b9b      	lsrs	r3, r3, #14
 800b06a:	b2db      	uxtb	r3, r3
 800b06c:	f003 0301 	and.w	r3, r3, #1
 800b070:	b2da      	uxtb	r2, r3
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b07a:	0b5b      	lsrs	r3, r3, #13
 800b07c:	b2db      	uxtb	r3, r3
 800b07e:	f003 0301 	and.w	r3, r3, #1
 800b082:	b2da      	uxtb	r2, r3
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b08c:	0b1b      	lsrs	r3, r3, #12
 800b08e:	b2db      	uxtb	r3, r3
 800b090:	f003 0301 	and.w	r3, r3, #1
 800b094:	b2da      	uxtb	r2, r3
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	2200      	movs	r2, #0
 800b09e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d163      	bne.n	800b170 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b0ac:	009a      	lsls	r2, r3, #2
 800b0ae:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b0b2:	4013      	ands	r3, r2
 800b0b4:	687a      	ldr	r2, [r7, #4]
 800b0b6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800b0b8:	0f92      	lsrs	r2, r2, #30
 800b0ba:	431a      	orrs	r2, r3
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0c4:	0edb      	lsrs	r3, r3, #27
 800b0c6:	b2db      	uxtb	r3, r3
 800b0c8:	f003 0307 	and.w	r3, r3, #7
 800b0cc:	b2da      	uxtb	r2, r3
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0d6:	0e1b      	lsrs	r3, r3, #24
 800b0d8:	b2db      	uxtb	r3, r3
 800b0da:	f003 0307 	and.w	r3, r3, #7
 800b0de:	b2da      	uxtb	r2, r3
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0e8:	0d5b      	lsrs	r3, r3, #21
 800b0ea:	b2db      	uxtb	r3, r3
 800b0ec:	f003 0307 	and.w	r3, r3, #7
 800b0f0:	b2da      	uxtb	r2, r3
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b0fa:	0c9b      	lsrs	r3, r3, #18
 800b0fc:	b2db      	uxtb	r3, r3
 800b0fe:	f003 0307 	and.w	r3, r3, #7
 800b102:	b2da      	uxtb	r2, r3
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b10c:	0bdb      	lsrs	r3, r3, #15
 800b10e:	b2db      	uxtb	r3, r3
 800b110:	f003 0307 	and.w	r3, r3, #7
 800b114:	b2da      	uxtb	r2, r3
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	691b      	ldr	r3, [r3, #16]
 800b11e:	1c5a      	adds	r2, r3, #1
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	7e1b      	ldrb	r3, [r3, #24]
 800b128:	b2db      	uxtb	r3, r3
 800b12a:	f003 0307 	and.w	r3, r3, #7
 800b12e:	3302      	adds	r3, #2
 800b130:	2201      	movs	r2, #1
 800b132:	fa02 f303 	lsl.w	r3, r2, r3
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800b13a:	fb02 f203 	mul.w	r2, r2, r3
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	7a1b      	ldrb	r3, [r3, #8]
 800b146:	b2db      	uxtb	r3, r3
 800b148:	f003 030f 	and.w	r3, r3, #15
 800b14c:	2201      	movs	r2, #1
 800b14e:	409a      	lsls	r2, r3
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b158:	687a      	ldr	r2, [r7, #4]
 800b15a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800b15c:	0a52      	lsrs	r2, r2, #9
 800b15e:	fb02 f203 	mul.w	r2, r2, r3
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b16c:	661a      	str	r2, [r3, #96]	; 0x60
 800b16e:	e031      	b.n	800b1d4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b174:	2b01      	cmp	r3, #1
 800b176:	d11d      	bne.n	800b1b4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b17c:	041b      	lsls	r3, r3, #16
 800b17e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b186:	0c1b      	lsrs	r3, r3, #16
 800b188:	431a      	orrs	r2, r3
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	691b      	ldr	r3, [r3, #16]
 800b192:	3301      	adds	r3, #1
 800b194:	029a      	lsls	r2, r3, #10
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b1a8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	661a      	str	r2, [r3, #96]	; 0x60
 800b1b2:	e00f      	b.n	800b1d4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	4a58      	ldr	r2, [pc, #352]	; (800b31c <HAL_SD_GetCardCSD+0x344>)
 800b1ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b1d0:	2301      	movs	r3, #1
 800b1d2:	e09d      	b.n	800b310 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1d8:	0b9b      	lsrs	r3, r3, #14
 800b1da:	b2db      	uxtb	r3, r3
 800b1dc:	f003 0301 	and.w	r3, r3, #1
 800b1e0:	b2da      	uxtb	r2, r3
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1ea:	09db      	lsrs	r3, r3, #7
 800b1ec:	b2db      	uxtb	r3, r3
 800b1ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1f2:	b2da      	uxtb	r2, r3
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1fc:	b2db      	uxtb	r3, r3
 800b1fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b202:	b2da      	uxtb	r2, r3
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b20c:	0fdb      	lsrs	r3, r3, #31
 800b20e:	b2da      	uxtb	r2, r3
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b218:	0f5b      	lsrs	r3, r3, #29
 800b21a:	b2db      	uxtb	r3, r3
 800b21c:	f003 0303 	and.w	r3, r3, #3
 800b220:	b2da      	uxtb	r2, r3
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b22a:	0e9b      	lsrs	r3, r3, #26
 800b22c:	b2db      	uxtb	r3, r3
 800b22e:	f003 0307 	and.w	r3, r3, #7
 800b232:	b2da      	uxtb	r2, r3
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b23c:	0d9b      	lsrs	r3, r3, #22
 800b23e:	b2db      	uxtb	r3, r3
 800b240:	f003 030f 	and.w	r3, r3, #15
 800b244:	b2da      	uxtb	r2, r3
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b24e:	0d5b      	lsrs	r3, r3, #21
 800b250:	b2db      	uxtb	r3, r3
 800b252:	f003 0301 	and.w	r3, r3, #1
 800b256:	b2da      	uxtb	r2, r3
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	2200      	movs	r2, #0
 800b262:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b26a:	0c1b      	lsrs	r3, r3, #16
 800b26c:	b2db      	uxtb	r3, r3
 800b26e:	f003 0301 	and.w	r3, r3, #1
 800b272:	b2da      	uxtb	r2, r3
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b27e:	0bdb      	lsrs	r3, r3, #15
 800b280:	b2db      	uxtb	r3, r3
 800b282:	f003 0301 	and.w	r3, r3, #1
 800b286:	b2da      	uxtb	r2, r3
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b292:	0b9b      	lsrs	r3, r3, #14
 800b294:	b2db      	uxtb	r3, r3
 800b296:	f003 0301 	and.w	r3, r3, #1
 800b29a:	b2da      	uxtb	r2, r3
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2a6:	0b5b      	lsrs	r3, r3, #13
 800b2a8:	b2db      	uxtb	r3, r3
 800b2aa:	f003 0301 	and.w	r3, r3, #1
 800b2ae:	b2da      	uxtb	r2, r3
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2ba:	0b1b      	lsrs	r3, r3, #12
 800b2bc:	b2db      	uxtb	r3, r3
 800b2be:	f003 0301 	and.w	r3, r3, #1
 800b2c2:	b2da      	uxtb	r2, r3
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2ce:	0a9b      	lsrs	r3, r3, #10
 800b2d0:	b2db      	uxtb	r3, r3
 800b2d2:	f003 0303 	and.w	r3, r3, #3
 800b2d6:	b2da      	uxtb	r2, r3
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2e2:	0a1b      	lsrs	r3, r3, #8
 800b2e4:	b2db      	uxtb	r3, r3
 800b2e6:	f003 0303 	and.w	r3, r3, #3
 800b2ea:	b2da      	uxtb	r2, r3
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2f6:	085b      	lsrs	r3, r3, #1
 800b2f8:	b2db      	uxtb	r3, r3
 800b2fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2fe:	b2da      	uxtb	r2, r3
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	2201      	movs	r2, #1
 800b30a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800b30e:	2300      	movs	r3, #0
}
 800b310:	4618      	mov	r0, r3
 800b312:	370c      	adds	r7, #12
 800b314:	46bd      	mov	sp, r7
 800b316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31a:	4770      	bx	lr
 800b31c:	004005ff 	.word	0x004005ff

0800b320 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b320:	b480      	push	{r7}
 800b322:	b083      	sub	sp, #12
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800b36a:	2300      	movs	r3, #0
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	370c      	adds	r7, #12
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr

0800b378 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b378:	b5b0      	push	{r4, r5, r7, lr}
 800b37a:	b08e      	sub	sp, #56	; 0x38
 800b37c:	af04      	add	r7, sp, #16
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2203      	movs	r2, #3
 800b386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b38e:	2b03      	cmp	r3, #3
 800b390:	d02e      	beq.n	800b3f0 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b398:	d106      	bne.n	800b3a8 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b39e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	639a      	str	r2, [r3, #56]	; 0x38
 800b3a6:	e029      	b.n	800b3fc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b3ae:	d10a      	bne.n	800b3c6 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f000 fb0f 	bl	800b9d4 <SD_WideBus_Enable>
 800b3b6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3be:	431a      	orrs	r2, r3
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	639a      	str	r2, [r3, #56]	; 0x38
 800b3c4:	e01a      	b.n	800b3fc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d10a      	bne.n	800b3e2 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f000 fb4c 	bl	800ba6a <SD_WideBus_Disable>
 800b3d2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3da:	431a      	orrs	r2, r3
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	639a      	str	r2, [r3, #56]	; 0x38
 800b3e0:	e00c      	b.n	800b3fc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3e6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	639a      	str	r2, [r3, #56]	; 0x38
 800b3ee:	e005      	b.n	800b3fc <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b400:	2b00      	cmp	r3, #0
 800b402:	d009      	beq.n	800b418 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	4a18      	ldr	r2, [pc, #96]	; (800b46c <HAL_SD_ConfigWideBusOperation+0xf4>)
 800b40a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2201      	movs	r2, #1
 800b410:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b414:	2301      	movs	r3, #1
 800b416:	e024      	b.n	800b462 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	689b      	ldr	r3, [r3, #8]
 800b422:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	68db      	ldr	r3, [r3, #12]
 800b428:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	695b      	ldr	r3, [r3, #20]
 800b432:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	699b      	ldr	r3, [r3, #24]
 800b438:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681d      	ldr	r5, [r3, #0]
 800b43e:	466c      	mov	r4, sp
 800b440:	f107 0318 	add.w	r3, r7, #24
 800b444:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b448:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b44c:	f107 030c 	add.w	r3, r7, #12
 800b450:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b452:	4628      	mov	r0, r5
 800b454:	f001 fa18 	bl	800c888 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2201      	movs	r2, #1
 800b45c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b460:	2300      	movs	r3, #0
}
 800b462:	4618      	mov	r0, r3
 800b464:	3728      	adds	r7, #40	; 0x28
 800b466:	46bd      	mov	sp, r7
 800b468:	bdb0      	pop	{r4, r5, r7, pc}
 800b46a:	bf00      	nop
 800b46c:	004005ff 	.word	0x004005ff

0800b470 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b086      	sub	sp, #24
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b478:	2300      	movs	r3, #0
 800b47a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b47c:	f107 030c 	add.w	r3, r7, #12
 800b480:	4619      	mov	r1, r3
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f000 fa7e 	bl	800b984 <SD_SendStatus>
 800b488:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d005      	beq.n	800b49c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	431a      	orrs	r2, r3
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	0a5b      	lsrs	r3, r3, #9
 800b4a0:	f003 030f 	and.w	r3, r3, #15
 800b4a4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b4a6:	693b      	ldr	r3, [r7, #16]
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	3718      	adds	r7, #24
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}

0800b4b0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b085      	sub	sp, #20
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4bc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b4cc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800b4ce:	bf00      	nop
 800b4d0:	3714      	adds	r7, #20
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d8:	4770      	bx	lr

0800b4da <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b4da:	b580      	push	{r7, lr}
 800b4dc:	b084      	sub	sp, #16
 800b4de:	af00      	add	r7, sp, #0
 800b4e0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4e6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4ec:	2b82      	cmp	r3, #130	; 0x82
 800b4ee:	d111      	bne.n	800b514 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f001 fb4d 	bl	800cb94 <SDMMC_CmdStopTransfer>
 800b4fa:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d008      	beq.n	800b514 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	431a      	orrs	r2, r3
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800b50e:	68f8      	ldr	r0, [r7, #12]
 800b510:	f7ff fd58 	bl	800afc4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f022 0208 	bic.w	r2, r2, #8
 800b522:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f240 523a 	movw	r2, #1338	; 0x53a
 800b52c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	2201      	movs	r2, #1
 800b532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	2200      	movs	r2, #0
 800b53a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800b53c:	68f8      	ldr	r0, [r7, #12]
 800b53e:	f001 ffad 	bl	800d49c <HAL_SD_RxCpltCallback>
#endif
}
 800b542:	bf00      	nop
 800b544:	3710      	adds	r7, #16
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
	...

0800b54c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b086      	sub	sp, #24
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b558:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f7fd f986 	bl	800886c <HAL_DMA_GetError>
 800b560:	4603      	mov	r3, r0
 800b562:	2b02      	cmp	r3, #2
 800b564:	d03e      	beq.n	800b5e4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b56a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b56c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b574:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	2b01      	cmp	r3, #1
 800b57a:	d002      	beq.n	800b582 <SD_DMAError+0x36>
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	2b01      	cmp	r3, #1
 800b580:	d12d      	bne.n	800b5de <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b582:	697b      	ldr	r3, [r7, #20]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	4a19      	ldr	r2, [pc, #100]	; (800b5ec <SD_DMAError+0xa0>)
 800b588:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b598:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b59a:	697b      	ldr	r3, [r7, #20]
 800b59c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b59e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800b5a6:	6978      	ldr	r0, [r7, #20]
 800b5a8:	f7ff ff62 	bl	800b470 <HAL_SD_GetCardState>
 800b5ac:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	2b06      	cmp	r3, #6
 800b5b2:	d002      	beq.n	800b5ba <SD_DMAError+0x6e>
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	2b05      	cmp	r3, #5
 800b5b8:	d10a      	bne.n	800b5d0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f001 fae8 	bl	800cb94 <SDMMC_CmdStopTransfer>
 800b5c4:	4602      	mov	r2, r0
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5ca:	431a      	orrs	r2, r3
 800b5cc:	697b      	ldr	r3, [r7, #20]
 800b5ce:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800b5de:	6978      	ldr	r0, [r7, #20]
 800b5e0:	f7ff fcf0 	bl	800afc4 <HAL_SD_ErrorCallback>
#endif
  }
}
 800b5e4:	bf00      	nop
 800b5e6:	3718      	adds	r7, #24
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}
 800b5ec:	004005ff 	.word	0x004005ff

0800b5f0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b084      	sub	sp, #16
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5fc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f240 523a 	movw	r2, #1338	; 0x53a
 800b606:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b608:	68f8      	ldr	r0, [r7, #12]
 800b60a:	f7ff ff31 	bl	800b470 <HAL_SD_GetCardState>
 800b60e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	2201      	movs	r2, #1
 800b614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	2200      	movs	r2, #0
 800b61c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	2b06      	cmp	r3, #6
 800b622:	d002      	beq.n	800b62a <SD_DMATxAbort+0x3a>
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	2b05      	cmp	r3, #5
 800b628:	d10a      	bne.n	800b640 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	4618      	mov	r0, r3
 800b630:	f001 fab0 	bl	800cb94 <SDMMC_CmdStopTransfer>
 800b634:	4602      	mov	r2, r0
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b63a:	431a      	orrs	r2, r3
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b644:	2b00      	cmp	r3, #0
 800b646:	d103      	bne.n	800b650 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800b648:	68f8      	ldr	r0, [r7, #12]
 800b64a:	f001 ff13 	bl	800d474 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b64e:	e002      	b.n	800b656 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b650:	68f8      	ldr	r0, [r7, #12]
 800b652:	f7ff fcb7 	bl	800afc4 <HAL_SD_ErrorCallback>
}
 800b656:	bf00      	nop
 800b658:	3710      	adds	r7, #16
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}

0800b65e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800b65e:	b580      	push	{r7, lr}
 800b660:	b084      	sub	sp, #16
 800b662:	af00      	add	r7, sp, #0
 800b664:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b66a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f240 523a 	movw	r2, #1338	; 0x53a
 800b674:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b676:	68f8      	ldr	r0, [r7, #12]
 800b678:	f7ff fefa 	bl	800b470 <HAL_SD_GetCardState>
 800b67c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	2201      	movs	r2, #1
 800b682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	2200      	movs	r2, #0
 800b68a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	2b06      	cmp	r3, #6
 800b690:	d002      	beq.n	800b698 <SD_DMARxAbort+0x3a>
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	2b05      	cmp	r3, #5
 800b696:	d10a      	bne.n	800b6ae <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	4618      	mov	r0, r3
 800b69e:	f001 fa79 	bl	800cb94 <SDMMC_CmdStopTransfer>
 800b6a2:	4602      	mov	r2, r0
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6a8:	431a      	orrs	r2, r3
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d103      	bne.n	800b6be <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800b6b6:	68f8      	ldr	r0, [r7, #12]
 800b6b8:	f001 fedc 	bl	800d474 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b6bc:	e002      	b.n	800b6c4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b6be:	68f8      	ldr	r0, [r7, #12]
 800b6c0:	f7ff fc80 	bl	800afc4 <HAL_SD_ErrorCallback>
}
 800b6c4:	bf00      	nop
 800b6c6:	3710      	adds	r7, #16
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b6cc:	b5b0      	push	{r4, r5, r7, lr}
 800b6ce:	b094      	sub	sp, #80	; 0x50
 800b6d0:	af04      	add	r7, sp, #16
 800b6d2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	4618      	mov	r0, r3
 800b6de:	f001 f92b 	bl	800c938 <SDIO_GetPowerState>
 800b6e2:	4603      	mov	r3, r0
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d102      	bne.n	800b6ee <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b6e8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b6ec:	e0b7      	b.n	800b85e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6f2:	2b03      	cmp	r3, #3
 800b6f4:	d02f      	beq.n	800b756 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f001 fb54 	bl	800cda8 <SDMMC_CmdSendCID>
 800b700:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b704:	2b00      	cmp	r3, #0
 800b706:	d001      	beq.n	800b70c <SD_InitCard+0x40>
    {
      return errorstate;
 800b708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b70a:	e0a8      	b.n	800b85e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	2100      	movs	r1, #0
 800b712:	4618      	mov	r0, r3
 800b714:	f001 f955 	bl	800c9c2 <SDIO_GetResponse>
 800b718:	4602      	mov	r2, r0
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	2104      	movs	r1, #4
 800b724:	4618      	mov	r0, r3
 800b726:	f001 f94c 	bl	800c9c2 <SDIO_GetResponse>
 800b72a:	4602      	mov	r2, r0
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	2108      	movs	r1, #8
 800b736:	4618      	mov	r0, r3
 800b738:	f001 f943 	bl	800c9c2 <SDIO_GetResponse>
 800b73c:	4602      	mov	r2, r0
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	210c      	movs	r1, #12
 800b748:	4618      	mov	r0, r3
 800b74a:	f001 f93a 	bl	800c9c2 <SDIO_GetResponse>
 800b74e:	4602      	mov	r2, r0
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b75a:	2b03      	cmp	r3, #3
 800b75c:	d00d      	beq.n	800b77a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f107 020e 	add.w	r2, r7, #14
 800b766:	4611      	mov	r1, r2
 800b768:	4618      	mov	r0, r3
 800b76a:	f001 fb5a 	bl	800ce22 <SDMMC_CmdSetRelAdd>
 800b76e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b772:	2b00      	cmp	r3, #0
 800b774:	d001      	beq.n	800b77a <SD_InitCard+0xae>
    {
      return errorstate;
 800b776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b778:	e071      	b.n	800b85e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b77e:	2b03      	cmp	r3, #3
 800b780:	d036      	beq.n	800b7f0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b782:	89fb      	ldrh	r3, [r7, #14]
 800b784:	461a      	mov	r2, r3
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681a      	ldr	r2, [r3, #0]
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b792:	041b      	lsls	r3, r3, #16
 800b794:	4619      	mov	r1, r3
 800b796:	4610      	mov	r0, r2
 800b798:	f001 fb24 	bl	800cde4 <SDMMC_CmdSendCSD>
 800b79c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b79e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d001      	beq.n	800b7a8 <SD_InitCard+0xdc>
    {
      return errorstate;
 800b7a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7a6:	e05a      	b.n	800b85e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	2100      	movs	r1, #0
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f001 f907 	bl	800c9c2 <SDIO_GetResponse>
 800b7b4:	4602      	mov	r2, r0
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	2104      	movs	r1, #4
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f001 f8fe 	bl	800c9c2 <SDIO_GetResponse>
 800b7c6:	4602      	mov	r2, r0
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	2108      	movs	r1, #8
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f001 f8f5 	bl	800c9c2 <SDIO_GetResponse>
 800b7d8:	4602      	mov	r2, r0
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	210c      	movs	r1, #12
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f001 f8ec 	bl	800c9c2 <SDIO_GetResponse>
 800b7ea:	4602      	mov	r2, r0
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	2104      	movs	r1, #4
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f001 f8e3 	bl	800c9c2 <SDIO_GetResponse>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	0d1a      	lsrs	r2, r3, #20
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b804:	f107 0310 	add.w	r3, r7, #16
 800b808:	4619      	mov	r1, r3
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f7ff fbe4 	bl	800afd8 <HAL_SD_GetCardCSD>
 800b810:	4603      	mov	r3, r0
 800b812:	2b00      	cmp	r3, #0
 800b814:	d002      	beq.n	800b81c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b816:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b81a:	e020      	b.n	800b85e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6819      	ldr	r1, [r3, #0]
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b824:	041b      	lsls	r3, r3, #16
 800b826:	f04f 0400 	mov.w	r4, #0
 800b82a:	461a      	mov	r2, r3
 800b82c:	4623      	mov	r3, r4
 800b82e:	4608      	mov	r0, r1
 800b830:	f001 f9d2 	bl	800cbd8 <SDMMC_CmdSelDesel>
 800b834:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d001      	beq.n	800b840 <SD_InitCard+0x174>
  {
    return errorstate;
 800b83c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b83e:	e00e      	b.n	800b85e <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681d      	ldr	r5, [r3, #0]
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	466c      	mov	r4, sp
 800b848:	f103 0210 	add.w	r2, r3, #16
 800b84c:	ca07      	ldmia	r2, {r0, r1, r2}
 800b84e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b852:	3304      	adds	r3, #4
 800b854:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b856:	4628      	mov	r0, r5
 800b858:	f001 f816 	bl	800c888 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b85c:	2300      	movs	r3, #0
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3740      	adds	r7, #64	; 0x40
 800b862:	46bd      	mov	sp, r7
 800b864:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b868 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b086      	sub	sp, #24
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b870:	2300      	movs	r3, #0
 800b872:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b874:	2300      	movs	r3, #0
 800b876:	617b      	str	r3, [r7, #20]
 800b878:	2300      	movs	r3, #0
 800b87a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	4618      	mov	r0, r3
 800b882:	f001 f9cc 	bl	800cc1e <SDMMC_CmdGoIdleState>
 800b886:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d001      	beq.n	800b892 <SD_PowerON+0x2a>
  {
    return errorstate;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	e072      	b.n	800b978 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	4618      	mov	r0, r3
 800b898:	f001 f9df 	bl	800cc5a <SDMMC_CmdOperCond>
 800b89c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d00d      	beq.n	800b8c0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f001 f9b5 	bl	800cc1e <SDMMC_CmdGoIdleState>
 800b8b4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d004      	beq.n	800b8c6 <SD_PowerON+0x5e>
    {
      return errorstate;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	e05b      	b.n	800b978 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8ca:	2b01      	cmp	r3, #1
 800b8cc:	d137      	bne.n	800b93e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	2100      	movs	r1, #0
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f001 f9df 	bl	800cc98 <SDMMC_CmdAppCommand>
 800b8da:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d02d      	beq.n	800b93e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b8e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b8e6:	e047      	b.n	800b978 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	2100      	movs	r1, #0
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f001 f9d2 	bl	800cc98 <SDMMC_CmdAppCommand>
 800b8f4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d001      	beq.n	800b900 <SD_PowerON+0x98>
    {
      return errorstate;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	e03b      	b.n	800b978 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	491e      	ldr	r1, [pc, #120]	; (800b980 <SD_PowerON+0x118>)
 800b906:	4618      	mov	r0, r3
 800b908:	f001 f9e8 	bl	800ccdc <SDMMC_CmdAppOperCommand>
 800b90c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d002      	beq.n	800b91a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b914:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b918:	e02e      	b.n	800b978 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	2100      	movs	r1, #0
 800b920:	4618      	mov	r0, r3
 800b922:	f001 f84e 	bl	800c9c2 <SDIO_GetResponse>
 800b926:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	0fdb      	lsrs	r3, r3, #31
 800b92c:	2b01      	cmp	r3, #1
 800b92e:	d101      	bne.n	800b934 <SD_PowerON+0xcc>
 800b930:	2301      	movs	r3, #1
 800b932:	e000      	b.n	800b936 <SD_PowerON+0xce>
 800b934:	2300      	movs	r3, #0
 800b936:	613b      	str	r3, [r7, #16]

    count++;
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	3301      	adds	r3, #1
 800b93c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b944:	4293      	cmp	r3, r2
 800b946:	d802      	bhi.n	800b94e <SD_PowerON+0xe6>
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d0cc      	beq.n	800b8e8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b954:	4293      	cmp	r3, r2
 800b956:	d902      	bls.n	800b95e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b958:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b95c:	e00c      	b.n	800b978 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b964:	2b00      	cmp	r3, #0
 800b966:	d003      	beq.n	800b970 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2201      	movs	r2, #1
 800b96c:	645a      	str	r2, [r3, #68]	; 0x44
 800b96e:	e002      	b.n	800b976 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2200      	movs	r2, #0
 800b974:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800b976:	2300      	movs	r3, #0
}
 800b978:	4618      	mov	r0, r3
 800b97a:	3718      	adds	r7, #24
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}
 800b980:	c1100000 	.word	0xc1100000

0800b984 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b084      	sub	sp, #16
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
 800b98c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d102      	bne.n	800b99a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b994:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b998:	e018      	b.n	800b9cc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681a      	ldr	r2, [r3, #0]
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9a2:	041b      	lsls	r3, r3, #16
 800b9a4:	4619      	mov	r1, r3
 800b9a6:	4610      	mov	r0, r2
 800b9a8:	f001 fa5c 	bl	800ce64 <SDMMC_CmdSendStatus>
 800b9ac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d001      	beq.n	800b9b8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	e009      	b.n	800b9cc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	2100      	movs	r1, #0
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f000 ffff 	bl	800c9c2 <SDIO_GetResponse>
 800b9c4:	4602      	mov	r2, r0
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b9ca:	2300      	movs	r3, #0
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3710      	adds	r7, #16
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}

0800b9d4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b086      	sub	sp, #24
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b9dc:	2300      	movs	r3, #0
 800b9de:	60fb      	str	r3, [r7, #12]
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	2100      	movs	r1, #0
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f000 ffe9 	bl	800c9c2 <SDIO_GetResponse>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b9f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b9fa:	d102      	bne.n	800ba02 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b9fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ba00:	e02f      	b.n	800ba62 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ba02:	f107 030c 	add.w	r3, r7, #12
 800ba06:	4619      	mov	r1, r3
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f000 f879 	bl	800bb00 <SD_FindSCR>
 800ba0e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ba10:	697b      	ldr	r3, [r7, #20]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d001      	beq.n	800ba1a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	e023      	b.n	800ba62 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ba1a:	693b      	ldr	r3, [r7, #16]
 800ba1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d01c      	beq.n	800ba5e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681a      	ldr	r2, [r3, #0]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba2c:	041b      	lsls	r3, r3, #16
 800ba2e:	4619      	mov	r1, r3
 800ba30:	4610      	mov	r0, r2
 800ba32:	f001 f931 	bl	800cc98 <SDMMC_CmdAppCommand>
 800ba36:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ba38:	697b      	ldr	r3, [r7, #20]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d001      	beq.n	800ba42 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	e00f      	b.n	800ba62 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	2102      	movs	r1, #2
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f001 f96a 	bl	800cd22 <SDMMC_CmdBusWidth>
 800ba4e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d001      	beq.n	800ba5a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	e003      	b.n	800ba62 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	e001      	b.n	800ba62 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ba5e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3718      	adds	r7, #24
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}

0800ba6a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800ba6a:	b580      	push	{r7, lr}
 800ba6c:	b086      	sub	sp, #24
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800ba72:	2300      	movs	r3, #0
 800ba74:	60fb      	str	r3, [r7, #12]
 800ba76:	2300      	movs	r3, #0
 800ba78:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	2100      	movs	r1, #0
 800ba80:	4618      	mov	r0, r3
 800ba82:	f000 ff9e 	bl	800c9c2 <SDIO_GetResponse>
 800ba86:	4603      	mov	r3, r0
 800ba88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ba90:	d102      	bne.n	800ba98 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ba92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ba96:	e02f      	b.n	800baf8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ba98:	f107 030c 	add.w	r3, r7, #12
 800ba9c:	4619      	mov	r1, r3
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f000 f82e 	bl	800bb00 <SD_FindSCR>
 800baa4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800baa6:	697b      	ldr	r3, [r7, #20]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d001      	beq.n	800bab0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800baac:	697b      	ldr	r3, [r7, #20]
 800baae:	e023      	b.n	800baf8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d01c      	beq.n	800baf4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681a      	ldr	r2, [r3, #0]
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bac2:	041b      	lsls	r3, r3, #16
 800bac4:	4619      	mov	r1, r3
 800bac6:	4610      	mov	r0, r2
 800bac8:	f001 f8e6 	bl	800cc98 <SDMMC_CmdAppCommand>
 800bacc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d001      	beq.n	800bad8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800bad4:	697b      	ldr	r3, [r7, #20]
 800bad6:	e00f      	b.n	800baf8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	2100      	movs	r1, #0
 800bade:	4618      	mov	r0, r3
 800bae0:	f001 f91f 	bl	800cd22 <SDMMC_CmdBusWidth>
 800bae4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d001      	beq.n	800baf0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	e003      	b.n	800baf8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800baf0:	2300      	movs	r3, #0
 800baf2:	e001      	b.n	800baf8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800baf4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3718      	adds	r7, #24
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}

0800bb00 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800bb00:	b590      	push	{r4, r7, lr}
 800bb02:	b08f      	sub	sp, #60	; 0x3c
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800bb0a:	f7fb fe0f 	bl	800772c <HAL_GetTick>
 800bb0e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800bb10:	2300      	movs	r3, #0
 800bb12:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800bb14:	2300      	movs	r3, #0
 800bb16:	60bb      	str	r3, [r7, #8]
 800bb18:	2300      	movs	r3, #0
 800bb1a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	2108      	movs	r1, #8
 800bb26:	4618      	mov	r0, r3
 800bb28:	f000 ff8a 	bl	800ca40 <SDMMC_CmdBlockLength>
 800bb2c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bb2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d001      	beq.n	800bb38 <SD_FindSCR+0x38>
  {
    return errorstate;
 800bb34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb36:	e0a9      	b.n	800bc8c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681a      	ldr	r2, [r3, #0]
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb40:	041b      	lsls	r3, r3, #16
 800bb42:	4619      	mov	r1, r3
 800bb44:	4610      	mov	r0, r2
 800bb46:	f001 f8a7 	bl	800cc98 <SDMMC_CmdAppCommand>
 800bb4a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bb4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d001      	beq.n	800bb56 <SD_FindSCR+0x56>
  {
    return errorstate;
 800bb52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb54:	e09a      	b.n	800bc8c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800bb56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bb5a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800bb5c:	2308      	movs	r3, #8
 800bb5e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800bb60:	2330      	movs	r3, #48	; 0x30
 800bb62:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800bb64:	2302      	movs	r3, #2
 800bb66:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800bb68:	2300      	movs	r3, #0
 800bb6a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800bb6c:	2301      	movs	r3, #1
 800bb6e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f107 0210 	add.w	r2, r7, #16
 800bb78:	4611      	mov	r1, r2
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f000 ff34 	bl	800c9e8 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	4618      	mov	r0, r3
 800bb86:	f001 f8ee 	bl	800cd66 <SDMMC_CmdSendSCR>
 800bb8a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800bb8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d022      	beq.n	800bbd8 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800bb92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb94:	e07a      	b.n	800bc8c <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d00e      	beq.n	800bbc2 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6819      	ldr	r1, [r3, #0]
 800bba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbaa:	009b      	lsls	r3, r3, #2
 800bbac:	f107 0208 	add.w	r2, r7, #8
 800bbb0:	18d4      	adds	r4, r2, r3
 800bbb2:	4608      	mov	r0, r1
 800bbb4:	f000 fe93 	bl	800c8de <SDIO_ReadFIFO>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	6023      	str	r3, [r4, #0]
      index++;
 800bbbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbbe:	3301      	adds	r3, #1
 800bbc0:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800bbc2:	f7fb fdb3 	bl	800772c <HAL_GetTick>
 800bbc6:	4602      	mov	r2, r0
 800bbc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbca:	1ad3      	subs	r3, r2, r3
 800bbcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bbd0:	d102      	bne.n	800bbd8 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800bbd2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bbd6:	e059      	b.n	800bc8c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bbde:	f240 432a 	movw	r3, #1066	; 0x42a
 800bbe2:	4013      	ands	r3, r2
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d0d6      	beq.n	800bb96 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbee:	f003 0308 	and.w	r3, r3, #8
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d005      	beq.n	800bc02 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	2208      	movs	r2, #8
 800bbfc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800bbfe:	2308      	movs	r3, #8
 800bc00:	e044      	b.n	800bc8c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc08:	f003 0302 	and.w	r3, r3, #2
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d005      	beq.n	800bc1c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	2202      	movs	r2, #2
 800bc16:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800bc18:	2302      	movs	r3, #2
 800bc1a:	e037      	b.n	800bc8c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc22:	f003 0320 	and.w	r3, r3, #32
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d005      	beq.n	800bc36 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	2220      	movs	r2, #32
 800bc30:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800bc32:	2320      	movs	r3, #32
 800bc34:	e02a      	b.n	800bc8c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f240 523a 	movw	r2, #1338	; 0x53a
 800bc3e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	061a      	lsls	r2, r3, #24
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	021b      	lsls	r3, r3, #8
 800bc48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bc4c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	0a1b      	lsrs	r3, r3, #8
 800bc52:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bc56:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	0e1b      	lsrs	r3, r3, #24
 800bc5c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800bc5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc60:	601a      	str	r2, [r3, #0]
    scr++;
 800bc62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc64:	3304      	adds	r3, #4
 800bc66:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	061a      	lsls	r2, r3, #24
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	021b      	lsls	r3, r3, #8
 800bc70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bc74:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800bc76:	68bb      	ldr	r3, [r7, #8]
 800bc78:	0a1b      	lsrs	r3, r3, #8
 800bc7a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bc7e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	0e1b      	lsrs	r3, r3, #24
 800bc84:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bc86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc88:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800bc8a:	2300      	movs	r3, #0
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	373c      	adds	r7, #60	; 0x3c
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd90      	pop	{r4, r7, pc}

0800bc94 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b086      	sub	sp, #24
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bca0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bca6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d03f      	beq.n	800bd2e <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800bcae:	2300      	movs	r3, #0
 800bcb0:	617b      	str	r3, [r7, #20]
 800bcb2:	e033      	b.n	800bd1c <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	4618      	mov	r0, r3
 800bcba:	f000 fe10 	bl	800c8de <SDIO_ReadFIFO>
 800bcbe:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	b2da      	uxtb	r2, r3
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	3301      	adds	r3, #1
 800bccc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	3b01      	subs	r3, #1
 800bcd2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	0a1b      	lsrs	r3, r3, #8
 800bcd8:	b2da      	uxtb	r2, r3
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	3301      	adds	r3, #1
 800bce2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	3b01      	subs	r3, #1
 800bce8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800bcea:	68bb      	ldr	r3, [r7, #8]
 800bcec:	0c1b      	lsrs	r3, r3, #16
 800bcee:	b2da      	uxtb	r2, r3
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	3301      	adds	r3, #1
 800bcf8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	3b01      	subs	r3, #1
 800bcfe:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	0e1b      	lsrs	r3, r3, #24
 800bd04:	b2da      	uxtb	r2, r3
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	3301      	adds	r3, #1
 800bd0e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	3b01      	subs	r3, #1
 800bd14:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800bd16:	697b      	ldr	r3, [r7, #20]
 800bd18:	3301      	adds	r3, #1
 800bd1a:	617b      	str	r3, [r7, #20]
 800bd1c:	697b      	ldr	r3, [r7, #20]
 800bd1e:	2b07      	cmp	r3, #7
 800bd20:	d9c8      	bls.n	800bcb4 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	68fa      	ldr	r2, [r7, #12]
 800bd26:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	693a      	ldr	r2, [r7, #16]
 800bd2c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800bd2e:	bf00      	nop
 800bd30:	3718      	adds	r7, #24
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}

0800bd36 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800bd36:	b580      	push	{r7, lr}
 800bd38:	b086      	sub	sp, #24
 800bd3a:	af00      	add	r7, sp, #0
 800bd3c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6a1b      	ldr	r3, [r3, #32]
 800bd42:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd48:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d043      	beq.n	800bdd8 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800bd50:	2300      	movs	r3, #0
 800bd52:	617b      	str	r3, [r7, #20]
 800bd54:	e037      	b.n	800bdc6 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	3301      	adds	r3, #1
 800bd60:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	3b01      	subs	r3, #1
 800bd66:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	021a      	lsls	r2, r3, #8
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	4313      	orrs	r3, r2
 800bd72:	60bb      	str	r3, [r7, #8]
      tmp++;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	3301      	adds	r3, #1
 800bd78:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	3b01      	subs	r3, #1
 800bd7e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	781b      	ldrb	r3, [r3, #0]
 800bd84:	041a      	lsls	r2, r3, #16
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	4313      	orrs	r3, r2
 800bd8a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	3301      	adds	r3, #1
 800bd90:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	3b01      	subs	r3, #1
 800bd96:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	781b      	ldrb	r3, [r3, #0]
 800bd9c:	061a      	lsls	r2, r3, #24
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	4313      	orrs	r3, r2
 800bda2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	3301      	adds	r3, #1
 800bda8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	3b01      	subs	r3, #1
 800bdae:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f107 0208 	add.w	r2, r7, #8
 800bdb8:	4611      	mov	r1, r2
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f000 fd9c 	bl	800c8f8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	3301      	adds	r3, #1
 800bdc4:	617b      	str	r3, [r7, #20]
 800bdc6:	697b      	ldr	r3, [r7, #20]
 800bdc8:	2b07      	cmp	r3, #7
 800bdca:	d9c4      	bls.n	800bd56 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	68fa      	ldr	r2, [r7, #12]
 800bdd0:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	693a      	ldr	r2, [r7, #16]
 800bdd6:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800bdd8:	bf00      	nop
 800bdda:	3718      	adds	r7, #24
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}

0800bde0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b082      	sub	sp, #8
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d101      	bne.n	800bdf2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bdee:	2301      	movs	r3, #1
 800bdf0:	e056      	b.n	800bea0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bdfe:	b2db      	uxtb	r3, r3
 800be00:	2b00      	cmp	r3, #0
 800be02:	d106      	bne.n	800be12 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2200      	movs	r2, #0
 800be08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f7f8 f86b 	bl	8003ee8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2202      	movs	r2, #2
 800be16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	681a      	ldr	r2, [r3, #0]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be28:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	685a      	ldr	r2, [r3, #4]
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	689b      	ldr	r3, [r3, #8]
 800be32:	431a      	orrs	r2, r3
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	68db      	ldr	r3, [r3, #12]
 800be38:	431a      	orrs	r2, r3
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	691b      	ldr	r3, [r3, #16]
 800be3e:	431a      	orrs	r2, r3
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	695b      	ldr	r3, [r3, #20]
 800be44:	431a      	orrs	r2, r3
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	699b      	ldr	r3, [r3, #24]
 800be4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800be4e:	431a      	orrs	r2, r3
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	69db      	ldr	r3, [r3, #28]
 800be54:	431a      	orrs	r2, r3
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6a1b      	ldr	r3, [r3, #32]
 800be5a:	ea42 0103 	orr.w	r1, r2, r3
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	430a      	orrs	r2, r1
 800be68:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	699b      	ldr	r3, [r3, #24]
 800be6e:	0c1b      	lsrs	r3, r3, #16
 800be70:	f003 0104 	and.w	r1, r3, #4
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	430a      	orrs	r2, r1
 800be7e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	69da      	ldr	r2, [r3, #28]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800be8e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2200      	movs	r2, #0
 800be94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2201      	movs	r2, #1
 800be9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800be9e:	2300      	movs	r3, #0
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3708      	adds	r7, #8
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}

0800bea8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b088      	sub	sp, #32
 800beac:	af00      	add	r7, sp, #0
 800beae:	60f8      	str	r0, [r7, #12]
 800beb0:	60b9      	str	r1, [r7, #8]
 800beb2:	603b      	str	r3, [r7, #0]
 800beb4:	4613      	mov	r3, r2
 800beb6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800beb8:	2300      	movs	r3, #0
 800beba:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bec2:	2b01      	cmp	r3, #1
 800bec4:	d101      	bne.n	800beca <HAL_SPI_Transmit+0x22>
 800bec6:	2302      	movs	r3, #2
 800bec8:	e11e      	b.n	800c108 <HAL_SPI_Transmit+0x260>
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	2201      	movs	r2, #1
 800bece:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bed2:	f7fb fc2b 	bl	800772c <HAL_GetTick>
 800bed6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800bed8:	88fb      	ldrh	r3, [r7, #6]
 800beda:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bee2:	b2db      	uxtb	r3, r3
 800bee4:	2b01      	cmp	r3, #1
 800bee6:	d002      	beq.n	800beee <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800bee8:	2302      	movs	r3, #2
 800beea:	77fb      	strb	r3, [r7, #31]
    goto error;
 800beec:	e103      	b.n	800c0f6 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d002      	beq.n	800befa <HAL_SPI_Transmit+0x52>
 800bef4:	88fb      	ldrh	r3, [r7, #6]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d102      	bne.n	800bf00 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800befa:	2301      	movs	r3, #1
 800befc:	77fb      	strb	r3, [r7, #31]
    goto error;
 800befe:	e0fa      	b.n	800c0f6 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	2203      	movs	r2, #3
 800bf04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	68ba      	ldr	r2, [r7, #8]
 800bf12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	88fa      	ldrh	r2, [r7, #6]
 800bf18:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	88fa      	ldrh	r2, [r7, #6]
 800bf1e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	2200      	movs	r2, #0
 800bf24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	2200      	movs	r2, #0
 800bf2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	2200      	movs	r2, #0
 800bf30:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	2200      	movs	r2, #0
 800bf36:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	689b      	ldr	r3, [r3, #8]
 800bf42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf46:	d107      	bne.n	800bf58 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	681a      	ldr	r2, [r3, #0]
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bf56:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf62:	2b40      	cmp	r3, #64	; 0x40
 800bf64:	d007      	beq.n	800bf76 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	681a      	ldr	r2, [r3, #0]
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf74:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	68db      	ldr	r3, [r3, #12]
 800bf7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bf7e:	d14b      	bne.n	800c018 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	685b      	ldr	r3, [r3, #4]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d002      	beq.n	800bf8e <HAL_SPI_Transmit+0xe6>
 800bf88:	8afb      	ldrh	r3, [r7, #22]
 800bf8a:	2b01      	cmp	r3, #1
 800bf8c:	d13e      	bne.n	800c00c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf92:	881a      	ldrh	r2, [r3, #0]
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf9e:	1c9a      	adds	r2, r3, #2
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bfa8:	b29b      	uxth	r3, r3
 800bfaa:	3b01      	subs	r3, #1
 800bfac:	b29a      	uxth	r2, r3
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800bfb2:	e02b      	b.n	800c00c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	689b      	ldr	r3, [r3, #8]
 800bfba:	f003 0302 	and.w	r3, r3, #2
 800bfbe:	2b02      	cmp	r3, #2
 800bfc0:	d112      	bne.n	800bfe8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfc6:	881a      	ldrh	r2, [r3, #0]
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfd2:	1c9a      	adds	r2, r3, #2
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bfdc:	b29b      	uxth	r3, r3
 800bfde:	3b01      	subs	r3, #1
 800bfe0:	b29a      	uxth	r2, r3
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	86da      	strh	r2, [r3, #54]	; 0x36
 800bfe6:	e011      	b.n	800c00c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bfe8:	f7fb fba0 	bl	800772c <HAL_GetTick>
 800bfec:	4602      	mov	r2, r0
 800bfee:	69bb      	ldr	r3, [r7, #24]
 800bff0:	1ad3      	subs	r3, r2, r3
 800bff2:	683a      	ldr	r2, [r7, #0]
 800bff4:	429a      	cmp	r2, r3
 800bff6:	d803      	bhi.n	800c000 <HAL_SPI_Transmit+0x158>
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bffe:	d102      	bne.n	800c006 <HAL_SPI_Transmit+0x15e>
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d102      	bne.n	800c00c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800c006:	2303      	movs	r3, #3
 800c008:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c00a:	e074      	b.n	800c0f6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c010:	b29b      	uxth	r3, r3
 800c012:	2b00      	cmp	r3, #0
 800c014:	d1ce      	bne.n	800bfb4 <HAL_SPI_Transmit+0x10c>
 800c016:	e04c      	b.n	800c0b2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	685b      	ldr	r3, [r3, #4]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d002      	beq.n	800c026 <HAL_SPI_Transmit+0x17e>
 800c020:	8afb      	ldrh	r3, [r7, #22]
 800c022:	2b01      	cmp	r3, #1
 800c024:	d140      	bne.n	800c0a8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	330c      	adds	r3, #12
 800c030:	7812      	ldrb	r2, [r2, #0]
 800c032:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c038:	1c5a      	adds	r2, r3, #1
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c042:	b29b      	uxth	r3, r3
 800c044:	3b01      	subs	r3, #1
 800c046:	b29a      	uxth	r2, r3
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800c04c:	e02c      	b.n	800c0a8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	689b      	ldr	r3, [r3, #8]
 800c054:	f003 0302 	and.w	r3, r3, #2
 800c058:	2b02      	cmp	r3, #2
 800c05a:	d113      	bne.n	800c084 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	330c      	adds	r3, #12
 800c066:	7812      	ldrb	r2, [r2, #0]
 800c068:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c06e:	1c5a      	adds	r2, r3, #1
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c078:	b29b      	uxth	r3, r3
 800c07a:	3b01      	subs	r3, #1
 800c07c:	b29a      	uxth	r2, r3
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	86da      	strh	r2, [r3, #54]	; 0x36
 800c082:	e011      	b.n	800c0a8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c084:	f7fb fb52 	bl	800772c <HAL_GetTick>
 800c088:	4602      	mov	r2, r0
 800c08a:	69bb      	ldr	r3, [r7, #24]
 800c08c:	1ad3      	subs	r3, r2, r3
 800c08e:	683a      	ldr	r2, [r7, #0]
 800c090:	429a      	cmp	r2, r3
 800c092:	d803      	bhi.n	800c09c <HAL_SPI_Transmit+0x1f4>
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c09a:	d102      	bne.n	800c0a2 <HAL_SPI_Transmit+0x1fa>
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d102      	bne.n	800c0a8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800c0a2:	2303      	movs	r3, #3
 800c0a4:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c0a6:	e026      	b.n	800c0f6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c0ac:	b29b      	uxth	r3, r3
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d1cd      	bne.n	800c04e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c0b2:	69ba      	ldr	r2, [r7, #24]
 800c0b4:	6839      	ldr	r1, [r7, #0]
 800c0b6:	68f8      	ldr	r0, [r7, #12]
 800c0b8:	f000 fba4 	bl	800c804 <SPI_EndRxTxTransaction>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d002      	beq.n	800c0c8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	2220      	movs	r2, #32
 800c0c6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	689b      	ldr	r3, [r3, #8]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d10a      	bne.n	800c0e6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	613b      	str	r3, [r7, #16]
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	68db      	ldr	r3, [r3, #12]
 800c0da:	613b      	str	r3, [r7, #16]
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	689b      	ldr	r3, [r3, #8]
 800c0e2:	613b      	str	r3, [r7, #16]
 800c0e4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d002      	beq.n	800c0f4 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	77fb      	strb	r3, [r7, #31]
 800c0f2:	e000      	b.n	800c0f6 <HAL_SPI_Transmit+0x24e>
  }

error:
 800c0f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	2201      	movs	r2, #1
 800c0fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	2200      	movs	r2, #0
 800c102:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c106:	7ffb      	ldrb	r3, [r7, #31]
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3720      	adds	r7, #32
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}

0800c110 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b088      	sub	sp, #32
 800c114:	af02      	add	r7, sp, #8
 800c116:	60f8      	str	r0, [r7, #12]
 800c118:	60b9      	str	r1, [r7, #8]
 800c11a:	603b      	str	r3, [r7, #0]
 800c11c:	4613      	mov	r3, r2
 800c11e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c120:	2300      	movs	r3, #0
 800c122:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	685b      	ldr	r3, [r3, #4]
 800c128:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c12c:	d112      	bne.n	800c154 <HAL_SPI_Receive+0x44>
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	689b      	ldr	r3, [r3, #8]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d10e      	bne.n	800c154 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	2204      	movs	r2, #4
 800c13a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c13e:	88fa      	ldrh	r2, [r7, #6]
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	9300      	str	r3, [sp, #0]
 800c144:	4613      	mov	r3, r2
 800c146:	68ba      	ldr	r2, [r7, #8]
 800c148:	68b9      	ldr	r1, [r7, #8]
 800c14a:	68f8      	ldr	r0, [r7, #12]
 800c14c:	f000 f8e9 	bl	800c322 <HAL_SPI_TransmitReceive>
 800c150:	4603      	mov	r3, r0
 800c152:	e0e2      	b.n	800c31a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c15a:	2b01      	cmp	r3, #1
 800c15c:	d101      	bne.n	800c162 <HAL_SPI_Receive+0x52>
 800c15e:	2302      	movs	r3, #2
 800c160:	e0db      	b.n	800c31a <HAL_SPI_Receive+0x20a>
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	2201      	movs	r2, #1
 800c166:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c16a:	f7fb fadf 	bl	800772c <HAL_GetTick>
 800c16e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c176:	b2db      	uxtb	r3, r3
 800c178:	2b01      	cmp	r3, #1
 800c17a:	d002      	beq.n	800c182 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800c17c:	2302      	movs	r3, #2
 800c17e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c180:	e0c2      	b.n	800c308 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800c182:	68bb      	ldr	r3, [r7, #8]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d002      	beq.n	800c18e <HAL_SPI_Receive+0x7e>
 800c188:	88fb      	ldrh	r3, [r7, #6]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d102      	bne.n	800c194 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800c18e:	2301      	movs	r3, #1
 800c190:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c192:	e0b9      	b.n	800c308 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	2204      	movs	r2, #4
 800c198:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	2200      	movs	r2, #0
 800c1a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	68ba      	ldr	r2, [r7, #8]
 800c1a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	88fa      	ldrh	r2, [r7, #6]
 800c1ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	88fa      	ldrh	r2, [r7, #6]
 800c1b2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	2200      	movs	r2, #0
 800c1be:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	689b      	ldr	r3, [r3, #8]
 800c1d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c1da:	d107      	bne.n	800c1ec <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	681a      	ldr	r2, [r3, #0]
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c1ea:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1f6:	2b40      	cmp	r3, #64	; 0x40
 800c1f8:	d007      	beq.n	800c20a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	681a      	ldr	r2, [r3, #0]
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c208:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	68db      	ldr	r3, [r3, #12]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d162      	bne.n	800c2d8 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800c212:	e02e      	b.n	800c272 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	689b      	ldr	r3, [r3, #8]
 800c21a:	f003 0301 	and.w	r3, r3, #1
 800c21e:	2b01      	cmp	r3, #1
 800c220:	d115      	bne.n	800c24e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	f103 020c 	add.w	r2, r3, #12
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c22e:	7812      	ldrb	r2, [r2, #0]
 800c230:	b2d2      	uxtb	r2, r2
 800c232:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c238:	1c5a      	adds	r2, r3, #1
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c242:	b29b      	uxth	r3, r3
 800c244:	3b01      	subs	r3, #1
 800c246:	b29a      	uxth	r2, r3
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c24c:	e011      	b.n	800c272 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c24e:	f7fb fa6d 	bl	800772c <HAL_GetTick>
 800c252:	4602      	mov	r2, r0
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	1ad3      	subs	r3, r2, r3
 800c258:	683a      	ldr	r2, [r7, #0]
 800c25a:	429a      	cmp	r2, r3
 800c25c:	d803      	bhi.n	800c266 <HAL_SPI_Receive+0x156>
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c264:	d102      	bne.n	800c26c <HAL_SPI_Receive+0x15c>
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d102      	bne.n	800c272 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800c26c:	2303      	movs	r3, #3
 800c26e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c270:	e04a      	b.n	800c308 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c276:	b29b      	uxth	r3, r3
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d1cb      	bne.n	800c214 <HAL_SPI_Receive+0x104>
 800c27c:	e031      	b.n	800c2e2 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	689b      	ldr	r3, [r3, #8]
 800c284:	f003 0301 	and.w	r3, r3, #1
 800c288:	2b01      	cmp	r3, #1
 800c28a:	d113      	bne.n	800c2b4 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	68da      	ldr	r2, [r3, #12]
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c296:	b292      	uxth	r2, r2
 800c298:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c29e:	1c9a      	adds	r2, r3, #2
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2a8:	b29b      	uxth	r3, r3
 800c2aa:	3b01      	subs	r3, #1
 800c2ac:	b29a      	uxth	r2, r3
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c2b2:	e011      	b.n	800c2d8 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c2b4:	f7fb fa3a 	bl	800772c <HAL_GetTick>
 800c2b8:	4602      	mov	r2, r0
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	1ad3      	subs	r3, r2, r3
 800c2be:	683a      	ldr	r2, [r7, #0]
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d803      	bhi.n	800c2cc <HAL_SPI_Receive+0x1bc>
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2ca:	d102      	bne.n	800c2d2 <HAL_SPI_Receive+0x1c2>
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d102      	bne.n	800c2d8 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800c2d2:	2303      	movs	r3, #3
 800c2d4:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c2d6:	e017      	b.n	800c308 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2dc:	b29b      	uxth	r3, r3
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d1cd      	bne.n	800c27e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c2e2:	693a      	ldr	r2, [r7, #16]
 800c2e4:	6839      	ldr	r1, [r7, #0]
 800c2e6:	68f8      	ldr	r0, [r7, #12]
 800c2e8:	f000 fa27 	bl	800c73a <SPI_EndRxTransaction>
 800c2ec:	4603      	mov	r3, r0
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d002      	beq.n	800c2f8 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	2220      	movs	r2, #32
 800c2f6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d002      	beq.n	800c306 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800c300:	2301      	movs	r3, #1
 800c302:	75fb      	strb	r3, [r7, #23]
 800c304:	e000      	b.n	800c308 <HAL_SPI_Receive+0x1f8>
  }

error :
 800c306:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	2201      	movs	r2, #1
 800c30c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	2200      	movs	r2, #0
 800c314:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c318:	7dfb      	ldrb	r3, [r7, #23]
}
 800c31a:	4618      	mov	r0, r3
 800c31c:	3718      	adds	r7, #24
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}

0800c322 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c322:	b580      	push	{r7, lr}
 800c324:	b08c      	sub	sp, #48	; 0x30
 800c326:	af00      	add	r7, sp, #0
 800c328:	60f8      	str	r0, [r7, #12]
 800c32a:	60b9      	str	r1, [r7, #8]
 800c32c:	607a      	str	r2, [r7, #4]
 800c32e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c330:	2301      	movs	r3, #1
 800c332:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c334:	2300      	movs	r3, #0
 800c336:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c340:	2b01      	cmp	r3, #1
 800c342:	d101      	bne.n	800c348 <HAL_SPI_TransmitReceive+0x26>
 800c344:	2302      	movs	r3, #2
 800c346:	e18a      	b.n	800c65e <HAL_SPI_TransmitReceive+0x33c>
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	2201      	movs	r2, #1
 800c34c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c350:	f7fb f9ec 	bl	800772c <HAL_GetTick>
 800c354:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c35c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	685b      	ldr	r3, [r3, #4]
 800c364:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800c366:	887b      	ldrh	r3, [r7, #2]
 800c368:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c36a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c36e:	2b01      	cmp	r3, #1
 800c370:	d00f      	beq.n	800c392 <HAL_SPI_TransmitReceive+0x70>
 800c372:	69fb      	ldr	r3, [r7, #28]
 800c374:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c378:	d107      	bne.n	800c38a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	689b      	ldr	r3, [r3, #8]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d103      	bne.n	800c38a <HAL_SPI_TransmitReceive+0x68>
 800c382:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c386:	2b04      	cmp	r3, #4
 800c388:	d003      	beq.n	800c392 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800c38a:	2302      	movs	r3, #2
 800c38c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c390:	e15b      	b.n	800c64a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c392:	68bb      	ldr	r3, [r7, #8]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d005      	beq.n	800c3a4 <HAL_SPI_TransmitReceive+0x82>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d002      	beq.n	800c3a4 <HAL_SPI_TransmitReceive+0x82>
 800c39e:	887b      	ldrh	r3, [r7, #2]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d103      	bne.n	800c3ac <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c3aa:	e14e      	b.n	800c64a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c3b2:	b2db      	uxtb	r3, r3
 800c3b4:	2b04      	cmp	r3, #4
 800c3b6:	d003      	beq.n	800c3c0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	2205      	movs	r2, #5
 800c3bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	687a      	ldr	r2, [r7, #4]
 800c3ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	887a      	ldrh	r2, [r7, #2]
 800c3d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	887a      	ldrh	r2, [r7, #2]
 800c3d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	68ba      	ldr	r2, [r7, #8]
 800c3dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	887a      	ldrh	r2, [r7, #2]
 800c3e2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	887a      	ldrh	r2, [r7, #2]
 800c3e8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c400:	2b40      	cmp	r3, #64	; 0x40
 800c402:	d007      	beq.n	800c414 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	681a      	ldr	r2, [r3, #0]
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c412:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	68db      	ldr	r3, [r3, #12]
 800c418:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c41c:	d178      	bne.n	800c510 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	685b      	ldr	r3, [r3, #4]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d002      	beq.n	800c42c <HAL_SPI_TransmitReceive+0x10a>
 800c426:	8b7b      	ldrh	r3, [r7, #26]
 800c428:	2b01      	cmp	r3, #1
 800c42a:	d166      	bne.n	800c4fa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c430:	881a      	ldrh	r2, [r3, #0]
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c43c:	1c9a      	adds	r2, r3, #2
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c446:	b29b      	uxth	r3, r3
 800c448:	3b01      	subs	r3, #1
 800c44a:	b29a      	uxth	r2, r3
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c450:	e053      	b.n	800c4fa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	689b      	ldr	r3, [r3, #8]
 800c458:	f003 0302 	and.w	r3, r3, #2
 800c45c:	2b02      	cmp	r3, #2
 800c45e:	d11b      	bne.n	800c498 <HAL_SPI_TransmitReceive+0x176>
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c464:	b29b      	uxth	r3, r3
 800c466:	2b00      	cmp	r3, #0
 800c468:	d016      	beq.n	800c498 <HAL_SPI_TransmitReceive+0x176>
 800c46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c46c:	2b01      	cmp	r3, #1
 800c46e:	d113      	bne.n	800c498 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c474:	881a      	ldrh	r2, [r3, #0]
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c480:	1c9a      	adds	r2, r3, #2
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c48a:	b29b      	uxth	r3, r3
 800c48c:	3b01      	subs	r3, #1
 800c48e:	b29a      	uxth	r2, r3
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c494:	2300      	movs	r3, #0
 800c496:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	689b      	ldr	r3, [r3, #8]
 800c49e:	f003 0301 	and.w	r3, r3, #1
 800c4a2:	2b01      	cmp	r3, #1
 800c4a4:	d119      	bne.n	800c4da <HAL_SPI_TransmitReceive+0x1b8>
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c4aa:	b29b      	uxth	r3, r3
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d014      	beq.n	800c4da <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	68da      	ldr	r2, [r3, #12]
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4ba:	b292      	uxth	r2, r2
 800c4bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4c2:	1c9a      	adds	r2, r3, #2
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c4cc:	b29b      	uxth	r3, r3
 800c4ce:	3b01      	subs	r3, #1
 800c4d0:	b29a      	uxth	r2, r3
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c4da:	f7fb f927 	bl	800772c <HAL_GetTick>
 800c4de:	4602      	mov	r2, r0
 800c4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e2:	1ad3      	subs	r3, r2, r3
 800c4e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c4e6:	429a      	cmp	r2, r3
 800c4e8:	d807      	bhi.n	800c4fa <HAL_SPI_TransmitReceive+0x1d8>
 800c4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c4f0:	d003      	beq.n	800c4fa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800c4f2:	2303      	movs	r3, #3
 800c4f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c4f8:	e0a7      	b.n	800c64a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c4fe:	b29b      	uxth	r3, r3
 800c500:	2b00      	cmp	r3, #0
 800c502:	d1a6      	bne.n	800c452 <HAL_SPI_TransmitReceive+0x130>
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c508:	b29b      	uxth	r3, r3
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d1a1      	bne.n	800c452 <HAL_SPI_TransmitReceive+0x130>
 800c50e:	e07c      	b.n	800c60a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	685b      	ldr	r3, [r3, #4]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d002      	beq.n	800c51e <HAL_SPI_TransmitReceive+0x1fc>
 800c518:	8b7b      	ldrh	r3, [r7, #26]
 800c51a:	2b01      	cmp	r3, #1
 800c51c:	d16b      	bne.n	800c5f6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	330c      	adds	r3, #12
 800c528:	7812      	ldrb	r2, [r2, #0]
 800c52a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c530:	1c5a      	adds	r2, r3, #1
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c53a:	b29b      	uxth	r3, r3
 800c53c:	3b01      	subs	r3, #1
 800c53e:	b29a      	uxth	r2, r3
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c544:	e057      	b.n	800c5f6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	689b      	ldr	r3, [r3, #8]
 800c54c:	f003 0302 	and.w	r3, r3, #2
 800c550:	2b02      	cmp	r3, #2
 800c552:	d11c      	bne.n	800c58e <HAL_SPI_TransmitReceive+0x26c>
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c558:	b29b      	uxth	r3, r3
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d017      	beq.n	800c58e <HAL_SPI_TransmitReceive+0x26c>
 800c55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c560:	2b01      	cmp	r3, #1
 800c562:	d114      	bne.n	800c58e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	330c      	adds	r3, #12
 800c56e:	7812      	ldrb	r2, [r2, #0]
 800c570:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c576:	1c5a      	adds	r2, r3, #1
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c580:	b29b      	uxth	r3, r3
 800c582:	3b01      	subs	r3, #1
 800c584:	b29a      	uxth	r2, r3
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c58a:	2300      	movs	r3, #0
 800c58c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	689b      	ldr	r3, [r3, #8]
 800c594:	f003 0301 	and.w	r3, r3, #1
 800c598:	2b01      	cmp	r3, #1
 800c59a:	d119      	bne.n	800c5d0 <HAL_SPI_TransmitReceive+0x2ae>
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c5a0:	b29b      	uxth	r3, r3
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d014      	beq.n	800c5d0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	68da      	ldr	r2, [r3, #12]
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5b0:	b2d2      	uxtb	r2, r2
 800c5b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5b8:	1c5a      	adds	r2, r3, #1
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c5c2:	b29b      	uxth	r3, r3
 800c5c4:	3b01      	subs	r3, #1
 800c5c6:	b29a      	uxth	r2, r3
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c5cc:	2301      	movs	r3, #1
 800c5ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c5d0:	f7fb f8ac 	bl	800772c <HAL_GetTick>
 800c5d4:	4602      	mov	r2, r0
 800c5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d8:	1ad3      	subs	r3, r2, r3
 800c5da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c5dc:	429a      	cmp	r2, r3
 800c5de:	d803      	bhi.n	800c5e8 <HAL_SPI_TransmitReceive+0x2c6>
 800c5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c5e6:	d102      	bne.n	800c5ee <HAL_SPI_TransmitReceive+0x2cc>
 800c5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d103      	bne.n	800c5f6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c5ee:	2303      	movs	r3, #3
 800c5f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c5f4:	e029      	b.n	800c64a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c5fa:	b29b      	uxth	r3, r3
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d1a2      	bne.n	800c546 <HAL_SPI_TransmitReceive+0x224>
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c604:	b29b      	uxth	r3, r3
 800c606:	2b00      	cmp	r3, #0
 800c608:	d19d      	bne.n	800c546 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c60a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c60c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c60e:	68f8      	ldr	r0, [r7, #12]
 800c610:	f000 f8f8 	bl	800c804 <SPI_EndRxTxTransaction>
 800c614:	4603      	mov	r3, r0
 800c616:	2b00      	cmp	r3, #0
 800c618:	d006      	beq.n	800c628 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800c61a:	2301      	movs	r3, #1
 800c61c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	2220      	movs	r2, #32
 800c624:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800c626:	e010      	b.n	800c64a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	689b      	ldr	r3, [r3, #8]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d10b      	bne.n	800c648 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c630:	2300      	movs	r3, #0
 800c632:	617b      	str	r3, [r7, #20]
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	68db      	ldr	r3, [r3, #12]
 800c63a:	617b      	str	r3, [r7, #20]
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	689b      	ldr	r3, [r3, #8]
 800c642:	617b      	str	r3, [r7, #20]
 800c644:	697b      	ldr	r3, [r7, #20]
 800c646:	e000      	b.n	800c64a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c648:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	2201      	movs	r2, #1
 800c64e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	2200      	movs	r2, #0
 800c656:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c65a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3730      	adds	r7, #48	; 0x30
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}

0800c666 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c666:	b580      	push	{r7, lr}
 800c668:	b084      	sub	sp, #16
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	60f8      	str	r0, [r7, #12]
 800c66e:	60b9      	str	r1, [r7, #8]
 800c670:	603b      	str	r3, [r7, #0]
 800c672:	4613      	mov	r3, r2
 800c674:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c676:	e04c      	b.n	800c712 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c67e:	d048      	beq.n	800c712 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c680:	f7fb f854 	bl	800772c <HAL_GetTick>
 800c684:	4602      	mov	r2, r0
 800c686:	69bb      	ldr	r3, [r7, #24]
 800c688:	1ad3      	subs	r3, r2, r3
 800c68a:	683a      	ldr	r2, [r7, #0]
 800c68c:	429a      	cmp	r2, r3
 800c68e:	d902      	bls.n	800c696 <SPI_WaitFlagStateUntilTimeout+0x30>
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d13d      	bne.n	800c712 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	685a      	ldr	r2, [r3, #4]
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c6a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c6ae:	d111      	bne.n	800c6d4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	689b      	ldr	r3, [r3, #8]
 800c6b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c6b8:	d004      	beq.n	800c6c4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	689b      	ldr	r3, [r3, #8]
 800c6be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c6c2:	d107      	bne.n	800c6d4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	681a      	ldr	r2, [r3, #0]
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c6d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c6dc:	d10f      	bne.n	800c6fe <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	681a      	ldr	r2, [r3, #0]
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c6ec:	601a      	str	r2, [r3, #0]
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	681a      	ldr	r2, [r3, #0]
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c6fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	2201      	movs	r2, #1
 800c702:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	2200      	movs	r2, #0
 800c70a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c70e:	2303      	movs	r3, #3
 800c710:	e00f      	b.n	800c732 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	689a      	ldr	r2, [r3, #8]
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	4013      	ands	r3, r2
 800c71c:	68ba      	ldr	r2, [r7, #8]
 800c71e:	429a      	cmp	r2, r3
 800c720:	bf0c      	ite	eq
 800c722:	2301      	moveq	r3, #1
 800c724:	2300      	movne	r3, #0
 800c726:	b2db      	uxtb	r3, r3
 800c728:	461a      	mov	r2, r3
 800c72a:	79fb      	ldrb	r3, [r7, #7]
 800c72c:	429a      	cmp	r2, r3
 800c72e:	d1a3      	bne.n	800c678 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800c730:	2300      	movs	r3, #0
}
 800c732:	4618      	mov	r0, r3
 800c734:	3710      	adds	r7, #16
 800c736:	46bd      	mov	sp, r7
 800c738:	bd80      	pop	{r7, pc}

0800c73a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c73a:	b580      	push	{r7, lr}
 800c73c:	b086      	sub	sp, #24
 800c73e:	af02      	add	r7, sp, #8
 800c740:	60f8      	str	r0, [r7, #12]
 800c742:	60b9      	str	r1, [r7, #8]
 800c744:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	685b      	ldr	r3, [r3, #4]
 800c74a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c74e:	d111      	bne.n	800c774 <SPI_EndRxTransaction+0x3a>
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	689b      	ldr	r3, [r3, #8]
 800c754:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c758:	d004      	beq.n	800c764 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	689b      	ldr	r3, [r3, #8]
 800c75e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c762:	d107      	bne.n	800c774 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	681a      	ldr	r2, [r3, #0]
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c772:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	685b      	ldr	r3, [r3, #4]
 800c778:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c77c:	d12a      	bne.n	800c7d4 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	689b      	ldr	r3, [r3, #8]
 800c782:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c786:	d012      	beq.n	800c7ae <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	9300      	str	r3, [sp, #0]
 800c78c:	68bb      	ldr	r3, [r7, #8]
 800c78e:	2200      	movs	r2, #0
 800c790:	2180      	movs	r1, #128	; 0x80
 800c792:	68f8      	ldr	r0, [r7, #12]
 800c794:	f7ff ff67 	bl	800c666 <SPI_WaitFlagStateUntilTimeout>
 800c798:	4603      	mov	r3, r0
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d02d      	beq.n	800c7fa <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7a2:	f043 0220 	orr.w	r2, r3, #32
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c7aa:	2303      	movs	r3, #3
 800c7ac:	e026      	b.n	800c7fc <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	9300      	str	r3, [sp, #0]
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	2101      	movs	r1, #1
 800c7b8:	68f8      	ldr	r0, [r7, #12]
 800c7ba:	f7ff ff54 	bl	800c666 <SPI_WaitFlagStateUntilTimeout>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d01a      	beq.n	800c7fa <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7c8:	f043 0220 	orr.w	r2, r3, #32
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c7d0:	2303      	movs	r3, #3
 800c7d2:	e013      	b.n	800c7fc <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	9300      	str	r3, [sp, #0]
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	2101      	movs	r1, #1
 800c7de:	68f8      	ldr	r0, [r7, #12]
 800c7e0:	f7ff ff41 	bl	800c666 <SPI_WaitFlagStateUntilTimeout>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d007      	beq.n	800c7fa <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7ee:	f043 0220 	orr.w	r2, r3, #32
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c7f6:	2303      	movs	r3, #3
 800c7f8:	e000      	b.n	800c7fc <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800c7fa:	2300      	movs	r3, #0
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	3710      	adds	r7, #16
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c804:	b580      	push	{r7, lr}
 800c806:	b088      	sub	sp, #32
 800c808:	af02      	add	r7, sp, #8
 800c80a:	60f8      	str	r0, [r7, #12]
 800c80c:	60b9      	str	r1, [r7, #8]
 800c80e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c810:	4b1b      	ldr	r3, [pc, #108]	; (800c880 <SPI_EndRxTxTransaction+0x7c>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	4a1b      	ldr	r2, [pc, #108]	; (800c884 <SPI_EndRxTxTransaction+0x80>)
 800c816:	fba2 2303 	umull	r2, r3, r2, r3
 800c81a:	0d5b      	lsrs	r3, r3, #21
 800c81c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c820:	fb02 f303 	mul.w	r3, r2, r3
 800c824:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	685b      	ldr	r3, [r3, #4]
 800c82a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c82e:	d112      	bne.n	800c856 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	9300      	str	r3, [sp, #0]
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	2200      	movs	r2, #0
 800c838:	2180      	movs	r1, #128	; 0x80
 800c83a:	68f8      	ldr	r0, [r7, #12]
 800c83c:	f7ff ff13 	bl	800c666 <SPI_WaitFlagStateUntilTimeout>
 800c840:	4603      	mov	r3, r0
 800c842:	2b00      	cmp	r3, #0
 800c844:	d016      	beq.n	800c874 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c84a:	f043 0220 	orr.w	r2, r3, #32
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c852:	2303      	movs	r3, #3
 800c854:	e00f      	b.n	800c876 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d00a      	beq.n	800c872 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	3b01      	subs	r3, #1
 800c860:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	689b      	ldr	r3, [r3, #8]
 800c868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c86c:	2b80      	cmp	r3, #128	; 0x80
 800c86e:	d0f2      	beq.n	800c856 <SPI_EndRxTxTransaction+0x52>
 800c870:	e000      	b.n	800c874 <SPI_EndRxTxTransaction+0x70>
        break;
 800c872:	bf00      	nop
  }

  return HAL_OK;
 800c874:	2300      	movs	r3, #0
}
 800c876:	4618      	mov	r0, r3
 800c878:	3718      	adds	r7, #24
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}
 800c87e:	bf00      	nop
 800c880:	20000168 	.word	0x20000168
 800c884:	165e9f81 	.word	0x165e9f81

0800c888 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800c888:	b084      	sub	sp, #16
 800c88a:	b480      	push	{r7}
 800c88c:	b085      	sub	sp, #20
 800c88e:	af00      	add	r7, sp, #0
 800c890:	6078      	str	r0, [r7, #4]
 800c892:	f107 001c 	add.w	r0, r7, #28
 800c896:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c89a:	2300      	movs	r3, #0
 800c89c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c89e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c8a0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c8a2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800c8a6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c8aa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c8ae:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c8b2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c8b4:	68fa      	ldr	r2, [r7, #12]
 800c8b6:	4313      	orrs	r3, r2
 800c8b8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	685b      	ldr	r3, [r3, #4]
 800c8be:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800c8c2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c8c6:	68fa      	ldr	r2, [r7, #12]
 800c8c8:	431a      	orrs	r2, r3
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c8ce:	2300      	movs	r3, #0
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	3714      	adds	r7, #20
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8da:	b004      	add	sp, #16
 800c8dc:	4770      	bx	lr

0800c8de <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800c8de:	b480      	push	{r7}
 800c8e0:	b083      	sub	sp, #12
 800c8e2:	af00      	add	r7, sp, #0
 800c8e4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	370c      	adds	r7, #12
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f6:	4770      	bx	lr

0800c8f8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800c8f8:	b480      	push	{r7}
 800c8fa:	b083      	sub	sp, #12
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	681a      	ldr	r2, [r3, #0]
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c90c:	2300      	movs	r3, #0
}
 800c90e:	4618      	mov	r0, r3
 800c910:	370c      	adds	r7, #12
 800c912:	46bd      	mov	sp, r7
 800c914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c918:	4770      	bx	lr

0800c91a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800c91a:	b580      	push	{r7, lr}
 800c91c:	b082      	sub	sp, #8
 800c91e:	af00      	add	r7, sp, #0
 800c920:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2203      	movs	r2, #3
 800c926:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800c928:	2002      	movs	r0, #2
 800c92a:	f7fa ff0b 	bl	8007744 <HAL_Delay>
  
  return HAL_OK;
 800c92e:	2300      	movs	r3, #0
}
 800c930:	4618      	mov	r0, r3
 800c932:	3708      	adds	r7, #8
 800c934:	46bd      	mov	sp, r7
 800c936:	bd80      	pop	{r7, pc}

0800c938 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800c938:	b480      	push	{r7}
 800c93a:	b083      	sub	sp, #12
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	f003 0303 	and.w	r3, r3, #3
}
 800c948:	4618      	mov	r0, r3
 800c94a:	370c      	adds	r7, #12
 800c94c:	46bd      	mov	sp, r7
 800c94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c952:	4770      	bx	lr

0800c954 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800c954:	b480      	push	{r7}
 800c956:	b085      	sub	sp, #20
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
 800c95c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c95e:	2300      	movs	r3, #0
 800c960:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	681a      	ldr	r2, [r3, #0]
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c972:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c978:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c97e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c980:	68fa      	ldr	r2, [r7, #12]
 800c982:	4313      	orrs	r3, r2
 800c984:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	68db      	ldr	r3, [r3, #12]
 800c98a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c98e:	f023 030f 	bic.w	r3, r3, #15
 800c992:	68fa      	ldr	r2, [r7, #12]
 800c994:	431a      	orrs	r2, r3
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c99a:	2300      	movs	r3, #0
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	3714      	adds	r7, #20
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a6:	4770      	bx	lr

0800c9a8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800c9a8:	b480      	push	{r7}
 800c9aa:	b083      	sub	sp, #12
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	691b      	ldr	r3, [r3, #16]
 800c9b4:	b2db      	uxtb	r3, r3
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	370c      	adds	r7, #12
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c0:	4770      	bx	lr

0800c9c2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800c9c2:	b480      	push	{r7}
 800c9c4:	b085      	sub	sp, #20
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	6078      	str	r0, [r7, #4]
 800c9ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	3314      	adds	r3, #20
 800c9d0:	461a      	mov	r2, r3
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	4413      	add	r3, r2
 800c9d6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	681b      	ldr	r3, [r3, #0]
}  
 800c9dc:	4618      	mov	r0, r3
 800c9de:	3714      	adds	r7, #20
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e6:	4770      	bx	lr

0800c9e8 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800c9e8:	b480      	push	{r7}
 800c9ea:	b085      	sub	sp, #20
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
 800c9f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	681a      	ldr	r2, [r3, #0]
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	685a      	ldr	r2, [r3, #4]
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ca0e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ca14:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ca1a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ca1c:	68fa      	ldr	r2, [r7, #12]
 800ca1e:	4313      	orrs	r3, r2
 800ca20:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca26:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	431a      	orrs	r2, r3
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ca32:	2300      	movs	r3, #0

}
 800ca34:	4618      	mov	r0, r3
 800ca36:	3714      	adds	r7, #20
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3e:	4770      	bx	lr

0800ca40 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b088      	sub	sp, #32
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
 800ca48:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ca4e:	2310      	movs	r3, #16
 800ca50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ca52:	2340      	movs	r3, #64	; 0x40
 800ca54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ca56:	2300      	movs	r3, #0
 800ca58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ca5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca5e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ca60:	f107 0308 	add.w	r3, r7, #8
 800ca64:	4619      	mov	r1, r3
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	f7ff ff74 	bl	800c954 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800ca6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca70:	2110      	movs	r1, #16
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f000 fa40 	bl	800cef8 <SDMMC_GetCmdResp1>
 800ca78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca7a:	69fb      	ldr	r3, [r7, #28]
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3720      	adds	r7, #32
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}

0800ca84 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b088      	sub	sp, #32
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ca92:	2311      	movs	r3, #17
 800ca94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ca96:	2340      	movs	r3, #64	; 0x40
 800ca98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ca9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800caa2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800caa4:	f107 0308 	add.w	r3, r7, #8
 800caa8:	4619      	mov	r1, r3
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f7ff ff52 	bl	800c954 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800cab0:	f241 3288 	movw	r2, #5000	; 0x1388
 800cab4:	2111      	movs	r1, #17
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f000 fa1e 	bl	800cef8 <SDMMC_GetCmdResp1>
 800cabc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cabe:	69fb      	ldr	r3, [r7, #28]
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	3720      	adds	r7, #32
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}

0800cac8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b088      	sub	sp, #32
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
 800cad0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800cad6:	2312      	movs	r3, #18
 800cad8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cada:	2340      	movs	r3, #64	; 0x40
 800cadc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cade:	2300      	movs	r3, #0
 800cae0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cae6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cae8:	f107 0308 	add.w	r3, r7, #8
 800caec:	4619      	mov	r1, r3
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f7ff ff30 	bl	800c954 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800caf4:	f241 3288 	movw	r2, #5000	; 0x1388
 800caf8:	2112      	movs	r1, #18
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f000 f9fc 	bl	800cef8 <SDMMC_GetCmdResp1>
 800cb00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb02:	69fb      	ldr	r3, [r7, #28]
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	3720      	adds	r7, #32
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}

0800cb0c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b088      	sub	sp, #32
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
 800cb14:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800cb1a:	2318      	movs	r3, #24
 800cb1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cb1e:	2340      	movs	r3, #64	; 0x40
 800cb20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cb22:	2300      	movs	r3, #0
 800cb24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cb26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb2a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cb2c:	f107 0308 	add.w	r3, r7, #8
 800cb30:	4619      	mov	r1, r3
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f7ff ff0e 	bl	800c954 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800cb38:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb3c:	2118      	movs	r1, #24
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	f000 f9da 	bl	800cef8 <SDMMC_GetCmdResp1>
 800cb44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb46:	69fb      	ldr	r3, [r7, #28]
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3720      	adds	r7, #32
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b088      	sub	sp, #32
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
 800cb58:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800cb5e:	2319      	movs	r3, #25
 800cb60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cb62:	2340      	movs	r3, #64	; 0x40
 800cb64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cb66:	2300      	movs	r3, #0
 800cb68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cb6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb6e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cb70:	f107 0308 	add.w	r3, r7, #8
 800cb74:	4619      	mov	r1, r3
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f7ff feec 	bl	800c954 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800cb7c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb80:	2119      	movs	r1, #25
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f000 f9b8 	bl	800cef8 <SDMMC_GetCmdResp1>
 800cb88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb8a:	69fb      	ldr	r3, [r7, #28]
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	3720      	adds	r7, #32
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}

0800cb94 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b088      	sub	sp, #32
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800cba0:	230c      	movs	r3, #12
 800cba2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cba4:	2340      	movs	r3, #64	; 0x40
 800cba6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cbac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbb0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cbb2:	f107 0308 	add.w	r3, r7, #8
 800cbb6:	4619      	mov	r1, r3
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f7ff fecb 	bl	800c954 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800cbbe:	4a05      	ldr	r2, [pc, #20]	; (800cbd4 <SDMMC_CmdStopTransfer+0x40>)
 800cbc0:	210c      	movs	r1, #12
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f000 f998 	bl	800cef8 <SDMMC_GetCmdResp1>
 800cbc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cbca:	69fb      	ldr	r3, [r7, #28]
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3720      	adds	r7, #32
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}
 800cbd4:	05f5e100 	.word	0x05f5e100

0800cbd8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b08a      	sub	sp, #40	; 0x28
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	60f8      	str	r0, [r7, #12]
 800cbe0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800cbe8:	2307      	movs	r3, #7
 800cbea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cbec:	2340      	movs	r3, #64	; 0x40
 800cbee:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cbf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbf8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cbfa:	f107 0310 	add.w	r3, r7, #16
 800cbfe:	4619      	mov	r1, r3
 800cc00:	68f8      	ldr	r0, [r7, #12]
 800cc02:	f7ff fea7 	bl	800c954 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800cc06:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc0a:	2107      	movs	r1, #7
 800cc0c:	68f8      	ldr	r0, [r7, #12]
 800cc0e:	f000 f973 	bl	800cef8 <SDMMC_GetCmdResp1>
 800cc12:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800cc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cc16:	4618      	mov	r0, r3
 800cc18:	3728      	adds	r7, #40	; 0x28
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	bd80      	pop	{r7, pc}

0800cc1e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800cc1e:	b580      	push	{r7, lr}
 800cc20:	b088      	sub	sp, #32
 800cc22:	af00      	add	r7, sp, #0
 800cc24:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800cc26:	2300      	movs	r3, #0
 800cc28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cc32:	2300      	movs	r3, #0
 800cc34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cc36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc3a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cc3c:	f107 0308 	add.w	r3, r7, #8
 800cc40:	4619      	mov	r1, r3
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f7ff fe86 	bl	800c954 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f000 f92d 	bl	800cea8 <SDMMC_GetCmdError>
 800cc4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc50:	69fb      	ldr	r3, [r7, #28]
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	3720      	adds	r7, #32
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}

0800cc5a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800cc5a:	b580      	push	{r7, lr}
 800cc5c:	b088      	sub	sp, #32
 800cc5e:	af00      	add	r7, sp, #0
 800cc60:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800cc62:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800cc66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800cc68:	2308      	movs	r3, #8
 800cc6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cc6c:	2340      	movs	r3, #64	; 0x40
 800cc6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cc70:	2300      	movs	r3, #0
 800cc72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cc74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc78:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cc7a:	f107 0308 	add.w	r3, r7, #8
 800cc7e:	4619      	mov	r1, r3
 800cc80:	6878      	ldr	r0, [r7, #4]
 800cc82:	f7ff fe67 	bl	800c954 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f000 fb16 	bl	800d2b8 <SDMMC_GetCmdResp7>
 800cc8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc8e:	69fb      	ldr	r3, [r7, #28]
}
 800cc90:	4618      	mov	r0, r3
 800cc92:	3720      	adds	r7, #32
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}

0800cc98 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b088      	sub	sp, #32
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
 800cca0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800cca6:	2337      	movs	r3, #55	; 0x37
 800cca8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ccaa:	2340      	movs	r3, #64	; 0x40
 800ccac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ccae:	2300      	movs	r3, #0
 800ccb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ccb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccb6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ccb8:	f107 0308 	add.w	r3, r7, #8
 800ccbc:	4619      	mov	r1, r3
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f7ff fe48 	bl	800c954 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800ccc4:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccc8:	2137      	movs	r1, #55	; 0x37
 800ccca:	6878      	ldr	r0, [r7, #4]
 800cccc:	f000 f914 	bl	800cef8 <SDMMC_GetCmdResp1>
 800ccd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ccd2:	69fb      	ldr	r3, [r7, #28]
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	3720      	adds	r7, #32
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}

0800ccdc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b088      	sub	sp, #32
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
 800cce4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ccec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ccf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ccf2:	2329      	movs	r3, #41	; 0x29
 800ccf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ccf6:	2340      	movs	r3, #64	; 0x40
 800ccf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ccfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd02:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cd04:	f107 0308 	add.w	r3, r7, #8
 800cd08:	4619      	mov	r1, r3
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f7ff fe22 	bl	800c954 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800cd10:	6878      	ldr	r0, [r7, #4]
 800cd12:	f000 fa23 	bl	800d15c <SDMMC_GetCmdResp3>
 800cd16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd18:	69fb      	ldr	r3, [r7, #28]
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3720      	adds	r7, #32
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}

0800cd22 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800cd22:	b580      	push	{r7, lr}
 800cd24:	b088      	sub	sp, #32
 800cd26:	af00      	add	r7, sp, #0
 800cd28:	6078      	str	r0, [r7, #4]
 800cd2a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800cd30:	2306      	movs	r3, #6
 800cd32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cd34:	2340      	movs	r3, #64	; 0x40
 800cd36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cd38:	2300      	movs	r3, #0
 800cd3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cd3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd40:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cd42:	f107 0308 	add.w	r3, r7, #8
 800cd46:	4619      	mov	r1, r3
 800cd48:	6878      	ldr	r0, [r7, #4]
 800cd4a:	f7ff fe03 	bl	800c954 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800cd4e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd52:	2106      	movs	r1, #6
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f000 f8cf 	bl	800cef8 <SDMMC_GetCmdResp1>
 800cd5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd5c:	69fb      	ldr	r3, [r7, #28]
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3720      	adds	r7, #32
 800cd62:	46bd      	mov	sp, r7
 800cd64:	bd80      	pop	{r7, pc}

0800cd66 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800cd66:	b580      	push	{r7, lr}
 800cd68:	b088      	sub	sp, #32
 800cd6a:	af00      	add	r7, sp, #0
 800cd6c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800cd72:	2333      	movs	r3, #51	; 0x33
 800cd74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cd76:	2340      	movs	r3, #64	; 0x40
 800cd78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cd7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd82:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cd84:	f107 0308 	add.w	r3, r7, #8
 800cd88:	4619      	mov	r1, r3
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f7ff fde2 	bl	800c954 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800cd90:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd94:	2133      	movs	r1, #51	; 0x33
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f000 f8ae 	bl	800cef8 <SDMMC_GetCmdResp1>
 800cd9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd9e:	69fb      	ldr	r3, [r7, #28]
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	3720      	adds	r7, #32
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}

0800cda8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800cda8:	b580      	push	{r7, lr}
 800cdaa:	b088      	sub	sp, #32
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800cdb4:	2302      	movs	r3, #2
 800cdb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800cdb8:	23c0      	movs	r3, #192	; 0xc0
 800cdba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cdc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cdc4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cdc6:	f107 0308 	add.w	r3, r7, #8
 800cdca:	4619      	mov	r1, r3
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f7ff fdc1 	bl	800c954 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f000 f97c 	bl	800d0d0 <SDMMC_GetCmdResp2>
 800cdd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cdda:	69fb      	ldr	r3, [r7, #28]
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	3720      	adds	r7, #32
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}

0800cde4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b088      	sub	sp, #32
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
 800cdec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800cdf2:	2309      	movs	r3, #9
 800cdf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800cdf6:	23c0      	movs	r3, #192	; 0xc0
 800cdf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cdfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce02:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce04:	f107 0308 	add.w	r3, r7, #8
 800ce08:	4619      	mov	r1, r3
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f7ff fda2 	bl	800c954 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ce10:	6878      	ldr	r0, [r7, #4]
 800ce12:	f000 f95d 	bl	800d0d0 <SDMMC_GetCmdResp2>
 800ce16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce18:	69fb      	ldr	r3, [r7, #28]
}
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	3720      	adds	r7, #32
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bd80      	pop	{r7, pc}

0800ce22 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800ce22:	b580      	push	{r7, lr}
 800ce24:	b088      	sub	sp, #32
 800ce26:	af00      	add	r7, sp, #0
 800ce28:	6078      	str	r0, [r7, #4]
 800ce2a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ce30:	2303      	movs	r3, #3
 800ce32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ce34:	2340      	movs	r3, #64	; 0x40
 800ce36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce38:	2300      	movs	r3, #0
 800ce3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce40:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce42:	f107 0308 	add.w	r3, r7, #8
 800ce46:	4619      	mov	r1, r3
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f7ff fd83 	bl	800c954 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ce4e:	683a      	ldr	r2, [r7, #0]
 800ce50:	2103      	movs	r1, #3
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	f000 f9bc 	bl	800d1d0 <SDMMC_GetCmdResp6>
 800ce58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce5a:	69fb      	ldr	r3, [r7, #28]
}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	3720      	adds	r7, #32
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}

0800ce64 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b088      	sub	sp, #32
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
 800ce6c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ce72:	230d      	movs	r3, #13
 800ce74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ce76:	2340      	movs	r3, #64	; 0x40
 800ce78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ce7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce82:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ce84:	f107 0308 	add.w	r3, r7, #8
 800ce88:	4619      	mov	r1, r3
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f7ff fd62 	bl	800c954 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800ce90:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce94:	210d      	movs	r1, #13
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f000 f82e 	bl	800cef8 <SDMMC_GetCmdResp1>
 800ce9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce9e:	69fb      	ldr	r3, [r7, #28]
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	3720      	adds	r7, #32
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd80      	pop	{r7, pc}

0800cea8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800cea8:	b490      	push	{r4, r7}
 800ceaa:	b082      	sub	sp, #8
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ceb0:	4b0f      	ldr	r3, [pc, #60]	; (800cef0 <SDMMC_GetCmdError+0x48>)
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	4a0f      	ldr	r2, [pc, #60]	; (800cef4 <SDMMC_GetCmdError+0x4c>)
 800ceb6:	fba2 2303 	umull	r2, r3, r2, r3
 800ceba:	0a5b      	lsrs	r3, r3, #9
 800cebc:	f241 3288 	movw	r2, #5000	; 0x1388
 800cec0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cec4:	4623      	mov	r3, r4
 800cec6:	1e5c      	subs	r4, r3, #1
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d102      	bne.n	800ced2 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cecc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ced0:	e009      	b.n	800cee6 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ced6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d0f2      	beq.n	800cec4 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	22c5      	movs	r2, #197	; 0xc5
 800cee2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800cee4:	2300      	movs	r3, #0
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3708      	adds	r7, #8
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bc90      	pop	{r4, r7}
 800ceee:	4770      	bx	lr
 800cef0:	20000168 	.word	0x20000168
 800cef4:	10624dd3 	.word	0x10624dd3

0800cef8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800cef8:	b590      	push	{r4, r7, lr}
 800cefa:	b087      	sub	sp, #28
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	60f8      	str	r0, [r7, #12]
 800cf00:	460b      	mov	r3, r1
 800cf02:	607a      	str	r2, [r7, #4]
 800cf04:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800cf06:	4b6f      	ldr	r3, [pc, #444]	; (800d0c4 <SDMMC_GetCmdResp1+0x1cc>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	4a6f      	ldr	r2, [pc, #444]	; (800d0c8 <SDMMC_GetCmdResp1+0x1d0>)
 800cf0c:	fba2 2303 	umull	r2, r3, r2, r3
 800cf10:	0a5b      	lsrs	r3, r3, #9
 800cf12:	687a      	ldr	r2, [r7, #4]
 800cf14:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cf18:	4623      	mov	r3, r4
 800cf1a:	1e5c      	subs	r4, r3, #1
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d102      	bne.n	800cf26 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cf20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cf24:	e0c9      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf2a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cf2c:	697b      	ldr	r3, [r7, #20]
 800cf2e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d0f0      	beq.n	800cf18 <SDMMC_GetCmdResp1+0x20>
 800cf36:	697b      	ldr	r3, [r7, #20]
 800cf38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d1eb      	bne.n	800cf18 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf44:	f003 0304 	and.w	r3, r3, #4
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d004      	beq.n	800cf56 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	2204      	movs	r2, #4
 800cf50:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cf52:	2304      	movs	r3, #4
 800cf54:	e0b1      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf5a:	f003 0301 	and.w	r3, r3, #1
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d004      	beq.n	800cf6c <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	2201      	movs	r2, #1
 800cf66:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cf68:	2301      	movs	r3, #1
 800cf6a:	e0a6      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	22c5      	movs	r2, #197	; 0xc5
 800cf70:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800cf72:	68f8      	ldr	r0, [r7, #12]
 800cf74:	f7ff fd18 	bl	800c9a8 <SDIO_GetCommandResponse>
 800cf78:	4603      	mov	r3, r0
 800cf7a:	461a      	mov	r2, r3
 800cf7c:	7afb      	ldrb	r3, [r7, #11]
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	d001      	beq.n	800cf86 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cf82:	2301      	movs	r3, #1
 800cf84:	e099      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800cf86:	2100      	movs	r1, #0
 800cf88:	68f8      	ldr	r0, [r7, #12]
 800cf8a:	f7ff fd1a 	bl	800c9c2 <SDIO_GetResponse>
 800cf8e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cf90:	693a      	ldr	r2, [r7, #16]
 800cf92:	4b4e      	ldr	r3, [pc, #312]	; (800d0cc <SDMMC_GetCmdResp1+0x1d4>)
 800cf94:	4013      	ands	r3, r2
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d101      	bne.n	800cf9e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	e08d      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	da02      	bge.n	800cfaa <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cfa4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cfa8:	e087      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cfaa:	693b      	ldr	r3, [r7, #16]
 800cfac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d001      	beq.n	800cfb8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cfb4:	2340      	movs	r3, #64	; 0x40
 800cfb6:	e080      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d001      	beq.n	800cfc6 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800cfc2:	2380      	movs	r3, #128	; 0x80
 800cfc4:	e079      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800cfc6:	693b      	ldr	r3, [r7, #16]
 800cfc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d002      	beq.n	800cfd6 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cfd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cfd4:	e071      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cfd6:	693b      	ldr	r3, [r7, #16]
 800cfd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d002      	beq.n	800cfe6 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cfe0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cfe4:	e069      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cfe6:	693b      	ldr	r3, [r7, #16]
 800cfe8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d002      	beq.n	800cff6 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cff0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cff4:	e061      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cff6:	693b      	ldr	r3, [r7, #16]
 800cff8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d002      	beq.n	800d006 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d000:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d004:	e059      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d006:	693b      	ldr	r3, [r7, #16]
 800d008:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d002      	beq.n	800d016 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d010:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d014:	e051      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d016:	693b      	ldr	r3, [r7, #16]
 800d018:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d002      	beq.n	800d026 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d020:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d024:	e049      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d026:	693b      	ldr	r3, [r7, #16]
 800d028:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d002      	beq.n	800d036 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d030:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d034:	e041      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d036:	693b      	ldr	r3, [r7, #16]
 800d038:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d002      	beq.n	800d046 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800d040:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d044:	e039      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d046:	693b      	ldr	r3, [r7, #16]
 800d048:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d002      	beq.n	800d056 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d050:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d054:	e031      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d056:	693b      	ldr	r3, [r7, #16]
 800d058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d002      	beq.n	800d066 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d060:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d064:	e029      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d066:	693b      	ldr	r3, [r7, #16]
 800d068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d002      	beq.n	800d076 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d070:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d074:	e021      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d076:	693b      	ldr	r3, [r7, #16]
 800d078:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d002      	beq.n	800d086 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d080:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d084:	e019      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d086:	693b      	ldr	r3, [r7, #16]
 800d088:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d002      	beq.n	800d096 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d090:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d094:	e011      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d096:	693b      	ldr	r3, [r7, #16]
 800d098:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d002      	beq.n	800d0a6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d0a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d0a4:	e009      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d0a6:	693b      	ldr	r3, [r7, #16]
 800d0a8:	f003 0308 	and.w	r3, r3, #8
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d002      	beq.n	800d0b6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d0b0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d0b4:	e001      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d0b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	371c      	adds	r7, #28
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd90      	pop	{r4, r7, pc}
 800d0c2:	bf00      	nop
 800d0c4:	20000168 	.word	0x20000168
 800d0c8:	10624dd3 	.word	0x10624dd3
 800d0cc:	fdffe008 	.word	0xfdffe008

0800d0d0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800d0d0:	b490      	push	{r4, r7}
 800d0d2:	b084      	sub	sp, #16
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d0d8:	4b1e      	ldr	r3, [pc, #120]	; (800d154 <SDMMC_GetCmdResp2+0x84>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	4a1e      	ldr	r2, [pc, #120]	; (800d158 <SDMMC_GetCmdResp2+0x88>)
 800d0de:	fba2 2303 	umull	r2, r3, r2, r3
 800d0e2:	0a5b      	lsrs	r3, r3, #9
 800d0e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d0e8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d0ec:	4623      	mov	r3, r4
 800d0ee:	1e5c      	subs	r4, r3, #1
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d102      	bne.n	800d0fa <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d0f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d0f8:	e026      	b.n	800d148 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0fe:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d106:	2b00      	cmp	r3, #0
 800d108:	d0f0      	beq.n	800d0ec <SDMMC_GetCmdResp2+0x1c>
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d110:	2b00      	cmp	r3, #0
 800d112:	d1eb      	bne.n	800d0ec <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d118:	f003 0304 	and.w	r3, r3, #4
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d004      	beq.n	800d12a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	2204      	movs	r2, #4
 800d124:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d126:	2304      	movs	r3, #4
 800d128:	e00e      	b.n	800d148 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d12e:	f003 0301 	and.w	r3, r3, #1
 800d132:	2b00      	cmp	r3, #0
 800d134:	d004      	beq.n	800d140 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2201      	movs	r2, #1
 800d13a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d13c:	2301      	movs	r3, #1
 800d13e:	e003      	b.n	800d148 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	22c5      	movs	r2, #197	; 0xc5
 800d144:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d146:	2300      	movs	r3, #0
}
 800d148:	4618      	mov	r0, r3
 800d14a:	3710      	adds	r7, #16
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bc90      	pop	{r4, r7}
 800d150:	4770      	bx	lr
 800d152:	bf00      	nop
 800d154:	20000168 	.word	0x20000168
 800d158:	10624dd3 	.word	0x10624dd3

0800d15c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800d15c:	b490      	push	{r4, r7}
 800d15e:	b084      	sub	sp, #16
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d164:	4b18      	ldr	r3, [pc, #96]	; (800d1c8 <SDMMC_GetCmdResp3+0x6c>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	4a18      	ldr	r2, [pc, #96]	; (800d1cc <SDMMC_GetCmdResp3+0x70>)
 800d16a:	fba2 2303 	umull	r2, r3, r2, r3
 800d16e:	0a5b      	lsrs	r3, r3, #9
 800d170:	f241 3288 	movw	r2, #5000	; 0x1388
 800d174:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d178:	4623      	mov	r3, r4
 800d17a:	1e5c      	subs	r4, r3, #1
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d102      	bne.n	800d186 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d180:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d184:	e01b      	b.n	800d1be <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d18a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d192:	2b00      	cmp	r3, #0
 800d194:	d0f0      	beq.n	800d178 <SDMMC_GetCmdResp3+0x1c>
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d1eb      	bne.n	800d178 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1a4:	f003 0304 	and.w	r3, r3, #4
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d004      	beq.n	800d1b6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2204      	movs	r2, #4
 800d1b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d1b2:	2304      	movs	r3, #4
 800d1b4:	e003      	b.n	800d1be <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	22c5      	movs	r2, #197	; 0xc5
 800d1ba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d1bc:	2300      	movs	r3, #0
}
 800d1be:	4618      	mov	r0, r3
 800d1c0:	3710      	adds	r7, #16
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bc90      	pop	{r4, r7}
 800d1c6:	4770      	bx	lr
 800d1c8:	20000168 	.word	0x20000168
 800d1cc:	10624dd3 	.word	0x10624dd3

0800d1d0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d1d0:	b590      	push	{r4, r7, lr}
 800d1d2:	b087      	sub	sp, #28
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	60f8      	str	r0, [r7, #12]
 800d1d8:	460b      	mov	r3, r1
 800d1da:	607a      	str	r2, [r7, #4]
 800d1dc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d1de:	4b34      	ldr	r3, [pc, #208]	; (800d2b0 <SDMMC_GetCmdResp6+0xe0>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	4a34      	ldr	r2, [pc, #208]	; (800d2b4 <SDMMC_GetCmdResp6+0xe4>)
 800d1e4:	fba2 2303 	umull	r2, r3, r2, r3
 800d1e8:	0a5b      	lsrs	r3, r3, #9
 800d1ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1ee:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d1f2:	4623      	mov	r3, r4
 800d1f4:	1e5c      	subs	r4, r3, #1
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d102      	bne.n	800d200 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d1fa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d1fe:	e052      	b.n	800d2a6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d204:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d206:	697b      	ldr	r3, [r7, #20]
 800d208:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d0f0      	beq.n	800d1f2 <SDMMC_GetCmdResp6+0x22>
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d216:	2b00      	cmp	r3, #0
 800d218:	d1eb      	bne.n	800d1f2 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d21e:	f003 0304 	and.w	r3, r3, #4
 800d222:	2b00      	cmp	r3, #0
 800d224:	d004      	beq.n	800d230 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	2204      	movs	r2, #4
 800d22a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d22c:	2304      	movs	r3, #4
 800d22e:	e03a      	b.n	800d2a6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d234:	f003 0301 	and.w	r3, r3, #1
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d004      	beq.n	800d246 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	2201      	movs	r2, #1
 800d240:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d242:	2301      	movs	r3, #1
 800d244:	e02f      	b.n	800d2a6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d246:	68f8      	ldr	r0, [r7, #12]
 800d248:	f7ff fbae 	bl	800c9a8 <SDIO_GetCommandResponse>
 800d24c:	4603      	mov	r3, r0
 800d24e:	461a      	mov	r2, r3
 800d250:	7afb      	ldrb	r3, [r7, #11]
 800d252:	4293      	cmp	r3, r2
 800d254:	d001      	beq.n	800d25a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d256:	2301      	movs	r3, #1
 800d258:	e025      	b.n	800d2a6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	22c5      	movs	r2, #197	; 0xc5
 800d25e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d260:	2100      	movs	r1, #0
 800d262:	68f8      	ldr	r0, [r7, #12]
 800d264:	f7ff fbad 	bl	800c9c2 <SDIO_GetResponse>
 800d268:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d26a:	693b      	ldr	r3, [r7, #16]
 800d26c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d270:	2b00      	cmp	r3, #0
 800d272:	d106      	bne.n	800d282 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d274:	693b      	ldr	r3, [r7, #16]
 800d276:	0c1b      	lsrs	r3, r3, #16
 800d278:	b29a      	uxth	r2, r3
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d27e:	2300      	movs	r3, #0
 800d280:	e011      	b.n	800d2a6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d282:	693b      	ldr	r3, [r7, #16]
 800d284:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d002      	beq.n	800d292 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d28c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d290:	e009      	b.n	800d2a6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d292:	693b      	ldr	r3, [r7, #16]
 800d294:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d002      	beq.n	800d2a2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d29c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d2a0:	e001      	b.n	800d2a6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d2a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	371c      	adds	r7, #28
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd90      	pop	{r4, r7, pc}
 800d2ae:	bf00      	nop
 800d2b0:	20000168 	.word	0x20000168
 800d2b4:	10624dd3 	.word	0x10624dd3

0800d2b8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800d2b8:	b490      	push	{r4, r7}
 800d2ba:	b084      	sub	sp, #16
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d2c0:	4b21      	ldr	r3, [pc, #132]	; (800d348 <SDMMC_GetCmdResp7+0x90>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	4a21      	ldr	r2, [pc, #132]	; (800d34c <SDMMC_GetCmdResp7+0x94>)
 800d2c6:	fba2 2303 	umull	r2, r3, r2, r3
 800d2ca:	0a5b      	lsrs	r3, r3, #9
 800d2cc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2d0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d2d4:	4623      	mov	r3, r4
 800d2d6:	1e5c      	subs	r4, r3, #1
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d102      	bne.n	800d2e2 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d2dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d2e0:	e02c      	b.n	800d33c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2e6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d0f0      	beq.n	800d2d4 <SDMMC_GetCmdResp7+0x1c>
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d1eb      	bne.n	800d2d4 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d300:	f003 0304 	and.w	r3, r3, #4
 800d304:	2b00      	cmp	r3, #0
 800d306:	d004      	beq.n	800d312 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2204      	movs	r2, #4
 800d30c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d30e:	2304      	movs	r3, #4
 800d310:	e014      	b.n	800d33c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d316:	f003 0301 	and.w	r3, r3, #1
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d004      	beq.n	800d328 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2201      	movs	r2, #1
 800d322:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d324:	2301      	movs	r3, #1
 800d326:	e009      	b.n	800d33c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d32c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d330:	2b00      	cmp	r3, #0
 800d332:	d002      	beq.n	800d33a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2240      	movs	r2, #64	; 0x40
 800d338:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d33a:	2300      	movs	r3, #0
  
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	3710      	adds	r7, #16
 800d340:	46bd      	mov	sp, r7
 800d342:	bc90      	pop	{r4, r7}
 800d344:	4770      	bx	lr
 800d346:	bf00      	nop
 800d348:	20000168 	.word	0x20000168
 800d34c:	10624dd3 	.word	0x10624dd3

0800d350 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d354:	4904      	ldr	r1, [pc, #16]	; (800d368 <MX_FATFS_Init+0x18>)
 800d356:	4805      	ldr	r0, [pc, #20]	; (800d36c <MX_FATFS_Init+0x1c>)
 800d358:	f003 fb68 	bl	8010a2c <FATFS_LinkDriver>
 800d35c:	4603      	mov	r3, r0
 800d35e:	461a      	mov	r2, r3
 800d360:	4b03      	ldr	r3, [pc, #12]	; (800d370 <MX_FATFS_Init+0x20>)
 800d362:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d364:	bf00      	nop
 800d366:	bd80      	pop	{r7, pc}
 800d368:	2000e1d0 	.word	0x2000e1d0
 800d36c:	08016b78 	.word	0x08016b78
 800d370:	2000e1cc 	.word	0x2000e1cc

0800d374 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d374:	b480      	push	{r7}
 800d376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d378:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	46bd      	mov	sp, r7
 800d37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d382:	4770      	bx	lr

0800d384 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b082      	sub	sp, #8
 800d388:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d38a:	2300      	movs	r3, #0
 800d38c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d38e:	f000 f896 	bl	800d4be <BSP_SD_IsDetected>
 800d392:	4603      	mov	r3, r0
 800d394:	2b01      	cmp	r3, #1
 800d396:	d001      	beq.n	800d39c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800d398:	2301      	movs	r3, #1
 800d39a:	e012      	b.n	800d3c2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800d39c:	480b      	ldr	r0, [pc, #44]	; (800d3cc <BSP_SD_Init+0x48>)
 800d39e:	f7fd fa21 	bl	800a7e4 <HAL_SD_Init>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d3a6:	79fb      	ldrb	r3, [r7, #7]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d109      	bne.n	800d3c0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800d3ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d3b0:	4806      	ldr	r0, [pc, #24]	; (800d3cc <BSP_SD_Init+0x48>)
 800d3b2:	f7fd ffe1 	bl	800b378 <HAL_SD_ConfigWideBusOperation>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d001      	beq.n	800d3c0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d3bc:	2301      	movs	r3, #1
 800d3be:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d3c0:	79fb      	ldrb	r3, [r7, #7]
}
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	3708      	adds	r7, #8
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bd80      	pop	{r7, pc}
 800d3ca:	bf00      	nop
 800d3cc:	2000e094 	.word	0x2000e094

0800d3d0 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b086      	sub	sp, #24
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	60f8      	str	r0, [r7, #12]
 800d3d8:	60b9      	str	r1, [r7, #8]
 800d3da:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	68ba      	ldr	r2, [r7, #8]
 800d3e4:	68f9      	ldr	r1, [r7, #12]
 800d3e6:	4806      	ldr	r0, [pc, #24]	; (800d400 <BSP_SD_ReadBlocks_DMA+0x30>)
 800d3e8:	f7fd fa8c 	bl	800a904 <HAL_SD_ReadBlocks_DMA>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d001      	beq.n	800d3f6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d3f2:	2301      	movs	r3, #1
 800d3f4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d3f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	3718      	adds	r7, #24
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd80      	pop	{r7, pc}
 800d400:	2000e094 	.word	0x2000e094

0800d404 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b086      	sub	sp, #24
 800d408:	af00      	add	r7, sp, #0
 800d40a:	60f8      	str	r0, [r7, #12]
 800d40c:	60b9      	str	r1, [r7, #8]
 800d40e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d410:	2300      	movs	r3, #0
 800d412:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	68ba      	ldr	r2, [r7, #8]
 800d418:	68f9      	ldr	r1, [r7, #12]
 800d41a:	4806      	ldr	r0, [pc, #24]	; (800d434 <BSP_SD_WriteBlocks_DMA+0x30>)
 800d41c:	f7fd fb5c 	bl	800aad8 <HAL_SD_WriteBlocks_DMA>
 800d420:	4603      	mov	r3, r0
 800d422:	2b00      	cmp	r3, #0
 800d424:	d001      	beq.n	800d42a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d426:	2301      	movs	r3, #1
 800d428:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d42a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3718      	adds	r7, #24
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}
 800d434:	2000e094 	.word	0x2000e094

0800d438 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d43c:	4805      	ldr	r0, [pc, #20]	; (800d454 <BSP_SD_GetCardState+0x1c>)
 800d43e:	f7fe f817 	bl	800b470 <HAL_SD_GetCardState>
 800d442:	4603      	mov	r3, r0
 800d444:	2b04      	cmp	r3, #4
 800d446:	bf14      	ite	ne
 800d448:	2301      	movne	r3, #1
 800d44a:	2300      	moveq	r3, #0
 800d44c:	b2db      	uxtb	r3, r3
}
 800d44e:	4618      	mov	r0, r3
 800d450:	bd80      	pop	{r7, pc}
 800d452:	bf00      	nop
 800d454:	2000e094 	.word	0x2000e094

0800d458 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b082      	sub	sp, #8
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800d460:	6879      	ldr	r1, [r7, #4]
 800d462:	4803      	ldr	r0, [pc, #12]	; (800d470 <BSP_SD_GetCardInfo+0x18>)
 800d464:	f7fd ff5c 	bl	800b320 <HAL_SD_GetCardInfo>
}
 800d468:	bf00      	nop
 800d46a:	3708      	adds	r7, #8
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}
 800d470:	2000e094 	.word	0x2000e094

0800d474 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b082      	sub	sp, #8
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800d47c:	f000 f818 	bl	800d4b0 <BSP_SD_AbortCallback>
}
 800d480:	bf00      	nop
 800d482:	3708      	adds	r7, #8
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}

0800d488 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b082      	sub	sp, #8
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800d490:	f000 f9aa 	bl	800d7e8 <BSP_SD_WriteCpltCallback>
}
 800d494:	bf00      	nop
 800d496:	3708      	adds	r7, #8
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}

0800d49c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b082      	sub	sp, #8
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d4a4:	f000 f9ac 	bl	800d800 <BSP_SD_ReadCpltCallback>
}
 800d4a8:	bf00      	nop
 800d4aa:	3708      	adds	r7, #8
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}

0800d4b0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	af00      	add	r7, sp, #0

}
 800d4b4:	bf00      	nop
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4bc:	4770      	bx	lr

0800d4be <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d4be:	b580      	push	{r7, lr}
 800d4c0:	b082      	sub	sp, #8
 800d4c2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d4c4:	2301      	movs	r3, #1
 800d4c6:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d4c8:	f000 f80c 	bl	800d4e4 <BSP_PlatformIsDetected>
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d101      	bne.n	800d4d6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d4d6:	79fb      	ldrb	r3, [r7, #7]
 800d4d8:	b2db      	uxtb	r3, r3
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	3708      	adds	r7, #8
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}
	...

0800d4e4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b082      	sub	sp, #8
 800d4e8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d4ee:	2101      	movs	r1, #1
 800d4f0:	4807      	ldr	r0, [pc, #28]	; (800d510 <BSP_PlatformIsDetected+0x2c>)
 800d4f2:	f7fb fc3f 	bl	8008d74 <HAL_GPIO_ReadPin>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d001      	beq.n	800d500 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	71fb      	strb	r3, [r7, #7]
//    if (status == SD_NOT_PRESENT){
//    	status = SD_PRESENT;
//    } else {
//    	status = SD_NOT_PRESENT;
//    }
   	status = SD_PRESENT;
 800d500:	2301      	movs	r3, #1
 800d502:	71fb      	strb	r3, [r7, #7]

    /* USER CODE END 1 */
    return status;
 800d504:	79fb      	ldrb	r3, [r7, #7]
}
 800d506:	4618      	mov	r0, r3
 800d508:	3708      	adds	r7, #8
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}
 800d50e:	bf00      	nop
 800d510:	40020c00 	.word	0x40020c00

0800d514 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b084      	sub	sp, #16
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800d51c:	f7fa f906 	bl	800772c <HAL_GetTick>
 800d520:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800d522:	e006      	b.n	800d532 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d524:	f7ff ff88 	bl	800d438 <BSP_SD_GetCardState>
 800d528:	4603      	mov	r3, r0
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d101      	bne.n	800d532 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d52e:	2300      	movs	r3, #0
 800d530:	e009      	b.n	800d546 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800d532:	f7fa f8fb 	bl	800772c <HAL_GetTick>
 800d536:	4602      	mov	r2, r0
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	1ad3      	subs	r3, r2, r3
 800d53c:	687a      	ldr	r2, [r7, #4]
 800d53e:	429a      	cmp	r2, r3
 800d540:	d8f0      	bhi.n	800d524 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d542:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800d546:	4618      	mov	r0, r3
 800d548:	3710      	adds	r7, #16
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bd80      	pop	{r7, pc}
	...

0800d550 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b082      	sub	sp, #8
 800d554:	af00      	add	r7, sp, #0
 800d556:	4603      	mov	r3, r0
 800d558:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d55a:	4b0b      	ldr	r3, [pc, #44]	; (800d588 <SD_CheckStatus+0x38>)
 800d55c:	2201      	movs	r2, #1
 800d55e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d560:	f7ff ff6a 	bl	800d438 <BSP_SD_GetCardState>
 800d564:	4603      	mov	r3, r0
 800d566:	2b00      	cmp	r3, #0
 800d568:	d107      	bne.n	800d57a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d56a:	4b07      	ldr	r3, [pc, #28]	; (800d588 <SD_CheckStatus+0x38>)
 800d56c:	781b      	ldrb	r3, [r3, #0]
 800d56e:	b2db      	uxtb	r3, r3
 800d570:	f023 0301 	bic.w	r3, r3, #1
 800d574:	b2da      	uxtb	r2, r3
 800d576:	4b04      	ldr	r3, [pc, #16]	; (800d588 <SD_CheckStatus+0x38>)
 800d578:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d57a:	4b03      	ldr	r3, [pc, #12]	; (800d588 <SD_CheckStatus+0x38>)
 800d57c:	781b      	ldrb	r3, [r3, #0]
 800d57e:	b2db      	uxtb	r3, r3
}
 800d580:	4618      	mov	r0, r3
 800d582:	3708      	adds	r7, #8
 800d584:	46bd      	mov	sp, r7
 800d586:	bd80      	pop	{r7, pc}
 800d588:	20000175 	.word	0x20000175

0800d58c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b082      	sub	sp, #8
 800d590:	af00      	add	r7, sp, #0
 800d592:	4603      	mov	r3, r0
 800d594:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d596:	f7ff fef5 	bl	800d384 <BSP_SD_Init>
 800d59a:	4603      	mov	r3, r0
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d107      	bne.n	800d5b0 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800d5a0:	79fb      	ldrb	r3, [r7, #7]
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f7ff ffd4 	bl	800d550 <SD_CheckStatus>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	461a      	mov	r2, r3
 800d5ac:	4b04      	ldr	r3, [pc, #16]	; (800d5c0 <SD_initialize+0x34>)
 800d5ae:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d5b0:	4b03      	ldr	r3, [pc, #12]	; (800d5c0 <SD_initialize+0x34>)
 800d5b2:	781b      	ldrb	r3, [r3, #0]
 800d5b4:	b2db      	uxtb	r3, r3
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	3708      	adds	r7, #8
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}
 800d5be:	bf00      	nop
 800d5c0:	20000175 	.word	0x20000175

0800d5c4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b082      	sub	sp, #8
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d5ce:	79fb      	ldrb	r3, [r7, #7]
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f7ff ffbd 	bl	800d550 <SD_CheckStatus>
 800d5d6:	4603      	mov	r3, r0
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3708      	adds	r7, #8
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}

0800d5e0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b086      	sub	sp, #24
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	60b9      	str	r1, [r7, #8]
 800d5e8:	607a      	str	r2, [r7, #4]
 800d5ea:	603b      	str	r3, [r7, #0]
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d5f4:	f247 5030 	movw	r0, #30000	; 0x7530
 800d5f8:	f7ff ff8c 	bl	800d514 <SD_CheckStatusWithTimeout>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	da01      	bge.n	800d606 <SD_read+0x26>
  {
    return res;
 800d602:	7dfb      	ldrb	r3, [r7, #23]
 800d604:	e03b      	b.n	800d67e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800d606:	683a      	ldr	r2, [r7, #0]
 800d608:	6879      	ldr	r1, [r7, #4]
 800d60a:	68b8      	ldr	r0, [r7, #8]
 800d60c:	f7ff fee0 	bl	800d3d0 <BSP_SD_ReadBlocks_DMA>
 800d610:	4603      	mov	r3, r0
 800d612:	2b00      	cmp	r3, #0
 800d614:	d132      	bne.n	800d67c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800d616:	4b1c      	ldr	r3, [pc, #112]	; (800d688 <SD_read+0xa8>)
 800d618:	2200      	movs	r2, #0
 800d61a:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800d61c:	f7fa f886 	bl	800772c <HAL_GetTick>
 800d620:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d622:	bf00      	nop
 800d624:	4b18      	ldr	r3, [pc, #96]	; (800d688 <SD_read+0xa8>)
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d108      	bne.n	800d63e <SD_read+0x5e>
 800d62c:	f7fa f87e 	bl	800772c <HAL_GetTick>
 800d630:	4602      	mov	r2, r0
 800d632:	693b      	ldr	r3, [r7, #16]
 800d634:	1ad3      	subs	r3, r2, r3
 800d636:	f247 522f 	movw	r2, #29999	; 0x752f
 800d63a:	4293      	cmp	r3, r2
 800d63c:	d9f2      	bls.n	800d624 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800d63e:	4b12      	ldr	r3, [pc, #72]	; (800d688 <SD_read+0xa8>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d102      	bne.n	800d64c <SD_read+0x6c>
      {
        res = RES_ERROR;
 800d646:	2301      	movs	r3, #1
 800d648:	75fb      	strb	r3, [r7, #23]
 800d64a:	e017      	b.n	800d67c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800d64c:	4b0e      	ldr	r3, [pc, #56]	; (800d688 <SD_read+0xa8>)
 800d64e:	2200      	movs	r2, #0
 800d650:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d652:	f7fa f86b 	bl	800772c <HAL_GetTick>
 800d656:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d658:	e007      	b.n	800d66a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d65a:	f7ff feed 	bl	800d438 <BSP_SD_GetCardState>
 800d65e:	4603      	mov	r3, r0
 800d660:	2b00      	cmp	r3, #0
 800d662:	d102      	bne.n	800d66a <SD_read+0x8a>
          {
            res = RES_OK;
 800d664:	2300      	movs	r3, #0
 800d666:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800d668:	e008      	b.n	800d67c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d66a:	f7fa f85f 	bl	800772c <HAL_GetTick>
 800d66e:	4602      	mov	r2, r0
 800d670:	693b      	ldr	r3, [r7, #16]
 800d672:	1ad3      	subs	r3, r2, r3
 800d674:	f247 522f 	movw	r2, #29999	; 0x752f
 800d678:	4293      	cmp	r3, r2
 800d67a:	d9ee      	bls.n	800d65a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800d67c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d67e:	4618      	mov	r0, r3
 800d680:	3718      	adds	r7, #24
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}
 800d686:	bf00      	nop
 800d688:	20000868 	.word	0x20000868

0800d68c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b086      	sub	sp, #24
 800d690:	af00      	add	r7, sp, #0
 800d692:	60b9      	str	r1, [r7, #8]
 800d694:	607a      	str	r2, [r7, #4]
 800d696:	603b      	str	r3, [r7, #0]
 800d698:	4603      	mov	r3, r0
 800d69a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d69c:	2301      	movs	r3, #1
 800d69e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800d6a0:	4b24      	ldr	r3, [pc, #144]	; (800d734 <SD_write+0xa8>)
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d6a6:	f247 5030 	movw	r0, #30000	; 0x7530
 800d6aa:	f7ff ff33 	bl	800d514 <SD_CheckStatusWithTimeout>
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	da01      	bge.n	800d6b8 <SD_write+0x2c>
  {
    return res;
 800d6b4:	7dfb      	ldrb	r3, [r7, #23]
 800d6b6:	e038      	b.n	800d72a <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d6b8:	683a      	ldr	r2, [r7, #0]
 800d6ba:	6879      	ldr	r1, [r7, #4]
 800d6bc:	68b8      	ldr	r0, [r7, #8]
 800d6be:	f7ff fea1 	bl	800d404 <BSP_SD_WriteBlocks_DMA>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d12f      	bne.n	800d728 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800d6c8:	f7fa f830 	bl	800772c <HAL_GetTick>
 800d6cc:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d6ce:	bf00      	nop
 800d6d0:	4b18      	ldr	r3, [pc, #96]	; (800d734 <SD_write+0xa8>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d108      	bne.n	800d6ea <SD_write+0x5e>
 800d6d8:	f7fa f828 	bl	800772c <HAL_GetTick>
 800d6dc:	4602      	mov	r2, r0
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	1ad3      	subs	r3, r2, r3
 800d6e2:	f247 522f 	movw	r2, #29999	; 0x752f
 800d6e6:	4293      	cmp	r3, r2
 800d6e8:	d9f2      	bls.n	800d6d0 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800d6ea:	4b12      	ldr	r3, [pc, #72]	; (800d734 <SD_write+0xa8>)
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d102      	bne.n	800d6f8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800d6f2:	2301      	movs	r3, #1
 800d6f4:	75fb      	strb	r3, [r7, #23]
 800d6f6:	e017      	b.n	800d728 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800d6f8:	4b0e      	ldr	r3, [pc, #56]	; (800d734 <SD_write+0xa8>)
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d6fe:	f7fa f815 	bl	800772c <HAL_GetTick>
 800d702:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d704:	e007      	b.n	800d716 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d706:	f7ff fe97 	bl	800d438 <BSP_SD_GetCardState>
 800d70a:	4603      	mov	r3, r0
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d102      	bne.n	800d716 <SD_write+0x8a>
          {
            res = RES_OK;
 800d710:	2300      	movs	r3, #0
 800d712:	75fb      	strb	r3, [r7, #23]
            break;
 800d714:	e008      	b.n	800d728 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d716:	f7fa f809 	bl	800772c <HAL_GetTick>
 800d71a:	4602      	mov	r2, r0
 800d71c:	693b      	ldr	r3, [r7, #16]
 800d71e:	1ad3      	subs	r3, r2, r3
 800d720:	f247 522f 	movw	r2, #29999	; 0x752f
 800d724:	4293      	cmp	r3, r2
 800d726:	d9ee      	bls.n	800d706 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800d728:	7dfb      	ldrb	r3, [r7, #23]
}
 800d72a:	4618      	mov	r0, r3
 800d72c:	3718      	adds	r7, #24
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}
 800d732:	bf00      	nop
 800d734:	20000864 	.word	0x20000864

0800d738 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b08c      	sub	sp, #48	; 0x30
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	4603      	mov	r3, r0
 800d740:	603a      	str	r2, [r7, #0]
 800d742:	71fb      	strb	r3, [r7, #7]
 800d744:	460b      	mov	r3, r1
 800d746:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d748:	2301      	movs	r3, #1
 800d74a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d74e:	4b25      	ldr	r3, [pc, #148]	; (800d7e4 <SD_ioctl+0xac>)
 800d750:	781b      	ldrb	r3, [r3, #0]
 800d752:	b2db      	uxtb	r3, r3
 800d754:	f003 0301 	and.w	r3, r3, #1
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d001      	beq.n	800d760 <SD_ioctl+0x28>
 800d75c:	2303      	movs	r3, #3
 800d75e:	e03c      	b.n	800d7da <SD_ioctl+0xa2>

  switch (cmd)
 800d760:	79bb      	ldrb	r3, [r7, #6]
 800d762:	2b03      	cmp	r3, #3
 800d764:	d834      	bhi.n	800d7d0 <SD_ioctl+0x98>
 800d766:	a201      	add	r2, pc, #4	; (adr r2, 800d76c <SD_ioctl+0x34>)
 800d768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d76c:	0800d77d 	.word	0x0800d77d
 800d770:	0800d785 	.word	0x0800d785
 800d774:	0800d79d 	.word	0x0800d79d
 800d778:	0800d7b7 	.word	0x0800d7b7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d77c:	2300      	movs	r3, #0
 800d77e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d782:	e028      	b.n	800d7d6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d784:	f107 030c 	add.w	r3, r7, #12
 800d788:	4618      	mov	r0, r3
 800d78a:	f7ff fe65 	bl	800d458 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d78e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d794:	2300      	movs	r3, #0
 800d796:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d79a:	e01c      	b.n	800d7d6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d79c:	f107 030c 	add.w	r3, r7, #12
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f7ff fe59 	bl	800d458 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a8:	b29a      	uxth	r2, r3
 800d7aa:	683b      	ldr	r3, [r7, #0]
 800d7ac:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d7b4:	e00f      	b.n	800d7d6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d7b6:	f107 030c 	add.w	r3, r7, #12
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	f7ff fe4c 	bl	800d458 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c2:	0a5a      	lsrs	r2, r3, #9
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d7ce:	e002      	b.n	800d7d6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d7d0:	2304      	movs	r3, #4
 800d7d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d7d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	3730      	adds	r7, #48	; 0x30
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}
 800d7e2:	bf00      	nop
 800d7e4:	20000175 	.word	0x20000175

0800d7e8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800d7e8:	b480      	push	{r7}
 800d7ea:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800d7ec:	4b03      	ldr	r3, [pc, #12]	; (800d7fc <BSP_SD_WriteCpltCallback+0x14>)
 800d7ee:	2201      	movs	r2, #1
 800d7f0:	601a      	str	r2, [r3, #0]
}
 800d7f2:	bf00      	nop
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fa:	4770      	bx	lr
 800d7fc:	20000864 	.word	0x20000864

0800d800 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d800:	b480      	push	{r7}
 800d802:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800d804:	4b03      	ldr	r3, [pc, #12]	; (800d814 <BSP_SD_ReadCpltCallback+0x14>)
 800d806:	2201      	movs	r2, #1
 800d808:	601a      	str	r2, [r3, #0]
}
 800d80a:	bf00      	nop
 800d80c:	46bd      	mov	sp, r7
 800d80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d812:	4770      	bx	lr
 800d814:	20000868 	.word	0x20000868

0800d818 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b084      	sub	sp, #16
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	4603      	mov	r3, r0
 800d820:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d822:	79fb      	ldrb	r3, [r7, #7]
 800d824:	4a08      	ldr	r2, [pc, #32]	; (800d848 <disk_status+0x30>)
 800d826:	009b      	lsls	r3, r3, #2
 800d828:	4413      	add	r3, r2
 800d82a:	685b      	ldr	r3, [r3, #4]
 800d82c:	685b      	ldr	r3, [r3, #4]
 800d82e:	79fa      	ldrb	r2, [r7, #7]
 800d830:	4905      	ldr	r1, [pc, #20]	; (800d848 <disk_status+0x30>)
 800d832:	440a      	add	r2, r1
 800d834:	7a12      	ldrb	r2, [r2, #8]
 800d836:	4610      	mov	r0, r2
 800d838:	4798      	blx	r3
 800d83a:	4603      	mov	r3, r0
 800d83c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d83e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d840:	4618      	mov	r0, r3
 800d842:	3710      	adds	r7, #16
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}
 800d848:	20000894 	.word	0x20000894

0800d84c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b084      	sub	sp, #16
 800d850:	af00      	add	r7, sp, #0
 800d852:	4603      	mov	r3, r0
 800d854:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d856:	2300      	movs	r3, #0
 800d858:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d85a:	79fb      	ldrb	r3, [r7, #7]
 800d85c:	4a0d      	ldr	r2, [pc, #52]	; (800d894 <disk_initialize+0x48>)
 800d85e:	5cd3      	ldrb	r3, [r2, r3]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d111      	bne.n	800d888 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d864:	79fb      	ldrb	r3, [r7, #7]
 800d866:	4a0b      	ldr	r2, [pc, #44]	; (800d894 <disk_initialize+0x48>)
 800d868:	2101      	movs	r1, #1
 800d86a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d86c:	79fb      	ldrb	r3, [r7, #7]
 800d86e:	4a09      	ldr	r2, [pc, #36]	; (800d894 <disk_initialize+0x48>)
 800d870:	009b      	lsls	r3, r3, #2
 800d872:	4413      	add	r3, r2
 800d874:	685b      	ldr	r3, [r3, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	79fa      	ldrb	r2, [r7, #7]
 800d87a:	4906      	ldr	r1, [pc, #24]	; (800d894 <disk_initialize+0x48>)
 800d87c:	440a      	add	r2, r1
 800d87e:	7a12      	ldrb	r2, [r2, #8]
 800d880:	4610      	mov	r0, r2
 800d882:	4798      	blx	r3
 800d884:	4603      	mov	r3, r0
 800d886:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d888:	7bfb      	ldrb	r3, [r7, #15]
}
 800d88a:	4618      	mov	r0, r3
 800d88c:	3710      	adds	r7, #16
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}
 800d892:	bf00      	nop
 800d894:	20000894 	.word	0x20000894

0800d898 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d898:	b590      	push	{r4, r7, lr}
 800d89a:	b087      	sub	sp, #28
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	60b9      	str	r1, [r7, #8]
 800d8a0:	607a      	str	r2, [r7, #4]
 800d8a2:	603b      	str	r3, [r7, #0]
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d8a8:	7bfb      	ldrb	r3, [r7, #15]
 800d8aa:	4a0a      	ldr	r2, [pc, #40]	; (800d8d4 <disk_read+0x3c>)
 800d8ac:	009b      	lsls	r3, r3, #2
 800d8ae:	4413      	add	r3, r2
 800d8b0:	685b      	ldr	r3, [r3, #4]
 800d8b2:	689c      	ldr	r4, [r3, #8]
 800d8b4:	7bfb      	ldrb	r3, [r7, #15]
 800d8b6:	4a07      	ldr	r2, [pc, #28]	; (800d8d4 <disk_read+0x3c>)
 800d8b8:	4413      	add	r3, r2
 800d8ba:	7a18      	ldrb	r0, [r3, #8]
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	687a      	ldr	r2, [r7, #4]
 800d8c0:	68b9      	ldr	r1, [r7, #8]
 800d8c2:	47a0      	blx	r4
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	75fb      	strb	r3, [r7, #23]
  return res;
 800d8c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	371c      	adds	r7, #28
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd90      	pop	{r4, r7, pc}
 800d8d2:	bf00      	nop
 800d8d4:	20000894 	.word	0x20000894

0800d8d8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d8d8:	b590      	push	{r4, r7, lr}
 800d8da:	b087      	sub	sp, #28
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	60b9      	str	r1, [r7, #8]
 800d8e0:	607a      	str	r2, [r7, #4]
 800d8e2:	603b      	str	r3, [r7, #0]
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d8e8:	7bfb      	ldrb	r3, [r7, #15]
 800d8ea:	4a0a      	ldr	r2, [pc, #40]	; (800d914 <disk_write+0x3c>)
 800d8ec:	009b      	lsls	r3, r3, #2
 800d8ee:	4413      	add	r3, r2
 800d8f0:	685b      	ldr	r3, [r3, #4]
 800d8f2:	68dc      	ldr	r4, [r3, #12]
 800d8f4:	7bfb      	ldrb	r3, [r7, #15]
 800d8f6:	4a07      	ldr	r2, [pc, #28]	; (800d914 <disk_write+0x3c>)
 800d8f8:	4413      	add	r3, r2
 800d8fa:	7a18      	ldrb	r0, [r3, #8]
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	687a      	ldr	r2, [r7, #4]
 800d900:	68b9      	ldr	r1, [r7, #8]
 800d902:	47a0      	blx	r4
 800d904:	4603      	mov	r3, r0
 800d906:	75fb      	strb	r3, [r7, #23]
  return res;
 800d908:	7dfb      	ldrb	r3, [r7, #23]
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	371c      	adds	r7, #28
 800d90e:	46bd      	mov	sp, r7
 800d910:	bd90      	pop	{r4, r7, pc}
 800d912:	bf00      	nop
 800d914:	20000894 	.word	0x20000894

0800d918 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b084      	sub	sp, #16
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	4603      	mov	r3, r0
 800d920:	603a      	str	r2, [r7, #0]
 800d922:	71fb      	strb	r3, [r7, #7]
 800d924:	460b      	mov	r3, r1
 800d926:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d928:	79fb      	ldrb	r3, [r7, #7]
 800d92a:	4a09      	ldr	r2, [pc, #36]	; (800d950 <disk_ioctl+0x38>)
 800d92c:	009b      	lsls	r3, r3, #2
 800d92e:	4413      	add	r3, r2
 800d930:	685b      	ldr	r3, [r3, #4]
 800d932:	691b      	ldr	r3, [r3, #16]
 800d934:	79fa      	ldrb	r2, [r7, #7]
 800d936:	4906      	ldr	r1, [pc, #24]	; (800d950 <disk_ioctl+0x38>)
 800d938:	440a      	add	r2, r1
 800d93a:	7a10      	ldrb	r0, [r2, #8]
 800d93c:	79b9      	ldrb	r1, [r7, #6]
 800d93e:	683a      	ldr	r2, [r7, #0]
 800d940:	4798      	blx	r3
 800d942:	4603      	mov	r3, r0
 800d944:	73fb      	strb	r3, [r7, #15]
  return res;
 800d946:	7bfb      	ldrb	r3, [r7, #15]
}
 800d948:	4618      	mov	r0, r3
 800d94a:	3710      	adds	r7, #16
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}
 800d950:	20000894 	.word	0x20000894

0800d954 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d954:	b480      	push	{r7}
 800d956:	b085      	sub	sp, #20
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	3301      	adds	r3, #1
 800d960:	781b      	ldrb	r3, [r3, #0]
 800d962:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d964:	89fb      	ldrh	r3, [r7, #14]
 800d966:	021b      	lsls	r3, r3, #8
 800d968:	b21a      	sxth	r2, r3
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	781b      	ldrb	r3, [r3, #0]
 800d96e:	b21b      	sxth	r3, r3
 800d970:	4313      	orrs	r3, r2
 800d972:	b21b      	sxth	r3, r3
 800d974:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d976:	89fb      	ldrh	r3, [r7, #14]
}
 800d978:	4618      	mov	r0, r3
 800d97a:	3714      	adds	r7, #20
 800d97c:	46bd      	mov	sp, r7
 800d97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d982:	4770      	bx	lr

0800d984 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d984:	b480      	push	{r7}
 800d986:	b085      	sub	sp, #20
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	3303      	adds	r3, #3
 800d990:	781b      	ldrb	r3, [r3, #0]
 800d992:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	021b      	lsls	r3, r3, #8
 800d998:	687a      	ldr	r2, [r7, #4]
 800d99a:	3202      	adds	r2, #2
 800d99c:	7812      	ldrb	r2, [r2, #0]
 800d99e:	4313      	orrs	r3, r2
 800d9a0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	021b      	lsls	r3, r3, #8
 800d9a6:	687a      	ldr	r2, [r7, #4]
 800d9a8:	3201      	adds	r2, #1
 800d9aa:	7812      	ldrb	r2, [r2, #0]
 800d9ac:	4313      	orrs	r3, r2
 800d9ae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	021b      	lsls	r3, r3, #8
 800d9b4:	687a      	ldr	r2, [r7, #4]
 800d9b6:	7812      	ldrb	r2, [r2, #0]
 800d9b8:	4313      	orrs	r3, r2
 800d9ba:	60fb      	str	r3, [r7, #12]
	return rv;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
}
 800d9be:	4618      	mov	r0, r3
 800d9c0:	3714      	adds	r7, #20
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c8:	4770      	bx	lr

0800d9ca <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d9ca:	b480      	push	{r7}
 800d9cc:	b083      	sub	sp, #12
 800d9ce:	af00      	add	r7, sp, #0
 800d9d0:	6078      	str	r0, [r7, #4]
 800d9d2:	460b      	mov	r3, r1
 800d9d4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	1c5a      	adds	r2, r3, #1
 800d9da:	607a      	str	r2, [r7, #4]
 800d9dc:	887a      	ldrh	r2, [r7, #2]
 800d9de:	b2d2      	uxtb	r2, r2
 800d9e0:	701a      	strb	r2, [r3, #0]
 800d9e2:	887b      	ldrh	r3, [r7, #2]
 800d9e4:	0a1b      	lsrs	r3, r3, #8
 800d9e6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	1c5a      	adds	r2, r3, #1
 800d9ec:	607a      	str	r2, [r7, #4]
 800d9ee:	887a      	ldrh	r2, [r7, #2]
 800d9f0:	b2d2      	uxtb	r2, r2
 800d9f2:	701a      	strb	r2, [r3, #0]
}
 800d9f4:	bf00      	nop
 800d9f6:	370c      	adds	r7, #12
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fe:	4770      	bx	lr

0800da00 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800da00:	b480      	push	{r7}
 800da02:	b083      	sub	sp, #12
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
 800da08:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	1c5a      	adds	r2, r3, #1
 800da0e:	607a      	str	r2, [r7, #4]
 800da10:	683a      	ldr	r2, [r7, #0]
 800da12:	b2d2      	uxtb	r2, r2
 800da14:	701a      	strb	r2, [r3, #0]
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	0a1b      	lsrs	r3, r3, #8
 800da1a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	1c5a      	adds	r2, r3, #1
 800da20:	607a      	str	r2, [r7, #4]
 800da22:	683a      	ldr	r2, [r7, #0]
 800da24:	b2d2      	uxtb	r2, r2
 800da26:	701a      	strb	r2, [r3, #0]
 800da28:	683b      	ldr	r3, [r7, #0]
 800da2a:	0a1b      	lsrs	r3, r3, #8
 800da2c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	1c5a      	adds	r2, r3, #1
 800da32:	607a      	str	r2, [r7, #4]
 800da34:	683a      	ldr	r2, [r7, #0]
 800da36:	b2d2      	uxtb	r2, r2
 800da38:	701a      	strb	r2, [r3, #0]
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	0a1b      	lsrs	r3, r3, #8
 800da3e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	1c5a      	adds	r2, r3, #1
 800da44:	607a      	str	r2, [r7, #4]
 800da46:	683a      	ldr	r2, [r7, #0]
 800da48:	b2d2      	uxtb	r2, r2
 800da4a:	701a      	strb	r2, [r3, #0]
}
 800da4c:	bf00      	nop
 800da4e:	370c      	adds	r7, #12
 800da50:	46bd      	mov	sp, r7
 800da52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da56:	4770      	bx	lr

0800da58 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800da58:	b480      	push	{r7}
 800da5a:	b087      	sub	sp, #28
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	60f8      	str	r0, [r7, #12]
 800da60:	60b9      	str	r1, [r7, #8]
 800da62:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800da68:	68bb      	ldr	r3, [r7, #8]
 800da6a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d00d      	beq.n	800da8e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800da72:	693a      	ldr	r2, [r7, #16]
 800da74:	1c53      	adds	r3, r2, #1
 800da76:	613b      	str	r3, [r7, #16]
 800da78:	697b      	ldr	r3, [r7, #20]
 800da7a:	1c59      	adds	r1, r3, #1
 800da7c:	6179      	str	r1, [r7, #20]
 800da7e:	7812      	ldrb	r2, [r2, #0]
 800da80:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	3b01      	subs	r3, #1
 800da86:	607b      	str	r3, [r7, #4]
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d1f1      	bne.n	800da72 <mem_cpy+0x1a>
	}
}
 800da8e:	bf00      	nop
 800da90:	371c      	adds	r7, #28
 800da92:	46bd      	mov	sp, r7
 800da94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da98:	4770      	bx	lr

0800da9a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800da9a:	b480      	push	{r7}
 800da9c:	b087      	sub	sp, #28
 800da9e:	af00      	add	r7, sp, #0
 800daa0:	60f8      	str	r0, [r7, #12]
 800daa2:	60b9      	str	r1, [r7, #8]
 800daa4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	1c5a      	adds	r2, r3, #1
 800daae:	617a      	str	r2, [r7, #20]
 800dab0:	68ba      	ldr	r2, [r7, #8]
 800dab2:	b2d2      	uxtb	r2, r2
 800dab4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	3b01      	subs	r3, #1
 800daba:	607b      	str	r3, [r7, #4]
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d1f3      	bne.n	800daaa <mem_set+0x10>
}
 800dac2:	bf00      	nop
 800dac4:	371c      	adds	r7, #28
 800dac6:	46bd      	mov	sp, r7
 800dac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dacc:	4770      	bx	lr

0800dace <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800dace:	b480      	push	{r7}
 800dad0:	b089      	sub	sp, #36	; 0x24
 800dad2:	af00      	add	r7, sp, #0
 800dad4:	60f8      	str	r0, [r7, #12]
 800dad6:	60b9      	str	r1, [r7, #8]
 800dad8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	61fb      	str	r3, [r7, #28]
 800dade:	68bb      	ldr	r3, [r7, #8]
 800dae0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800dae2:	2300      	movs	r3, #0
 800dae4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800dae6:	69fb      	ldr	r3, [r7, #28]
 800dae8:	1c5a      	adds	r2, r3, #1
 800daea:	61fa      	str	r2, [r7, #28]
 800daec:	781b      	ldrb	r3, [r3, #0]
 800daee:	4619      	mov	r1, r3
 800daf0:	69bb      	ldr	r3, [r7, #24]
 800daf2:	1c5a      	adds	r2, r3, #1
 800daf4:	61ba      	str	r2, [r7, #24]
 800daf6:	781b      	ldrb	r3, [r3, #0]
 800daf8:	1acb      	subs	r3, r1, r3
 800dafa:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	3b01      	subs	r3, #1
 800db00:	607b      	str	r3, [r7, #4]
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d002      	beq.n	800db0e <mem_cmp+0x40>
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d0eb      	beq.n	800dae6 <mem_cmp+0x18>

	return r;
 800db0e:	697b      	ldr	r3, [r7, #20]
}
 800db10:	4618      	mov	r0, r3
 800db12:	3724      	adds	r7, #36	; 0x24
 800db14:	46bd      	mov	sp, r7
 800db16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1a:	4770      	bx	lr

0800db1c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800db1c:	b480      	push	{r7}
 800db1e:	b083      	sub	sp, #12
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
 800db24:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800db26:	e002      	b.n	800db2e <chk_chr+0x12>
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	3301      	adds	r3, #1
 800db2c:	607b      	str	r3, [r7, #4]
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	781b      	ldrb	r3, [r3, #0]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d005      	beq.n	800db42 <chk_chr+0x26>
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	781b      	ldrb	r3, [r3, #0]
 800db3a:	461a      	mov	r2, r3
 800db3c:	683b      	ldr	r3, [r7, #0]
 800db3e:	4293      	cmp	r3, r2
 800db40:	d1f2      	bne.n	800db28 <chk_chr+0xc>
	return *str;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	781b      	ldrb	r3, [r3, #0]
}
 800db46:	4618      	mov	r0, r3
 800db48:	370c      	adds	r7, #12
 800db4a:	46bd      	mov	sp, r7
 800db4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db50:	4770      	bx	lr
	...

0800db54 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800db54:	b480      	push	{r7}
 800db56:	b085      	sub	sp, #20
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
 800db5c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800db5e:	2300      	movs	r3, #0
 800db60:	60bb      	str	r3, [r7, #8]
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	60fb      	str	r3, [r7, #12]
 800db66:	e029      	b.n	800dbbc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800db68:	4a27      	ldr	r2, [pc, #156]	; (800dc08 <chk_lock+0xb4>)
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	011b      	lsls	r3, r3, #4
 800db6e:	4413      	add	r3, r2
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	2b00      	cmp	r3, #0
 800db74:	d01d      	beq.n	800dbb2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800db76:	4a24      	ldr	r2, [pc, #144]	; (800dc08 <chk_lock+0xb4>)
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	011b      	lsls	r3, r3, #4
 800db7c:	4413      	add	r3, r2
 800db7e:	681a      	ldr	r2, [r3, #0]
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	429a      	cmp	r2, r3
 800db86:	d116      	bne.n	800dbb6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800db88:	4a1f      	ldr	r2, [pc, #124]	; (800dc08 <chk_lock+0xb4>)
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	011b      	lsls	r3, r3, #4
 800db8e:	4413      	add	r3, r2
 800db90:	3304      	adds	r3, #4
 800db92:	681a      	ldr	r2, [r3, #0]
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800db98:	429a      	cmp	r2, r3
 800db9a:	d10c      	bne.n	800dbb6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800db9c:	4a1a      	ldr	r2, [pc, #104]	; (800dc08 <chk_lock+0xb4>)
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	011b      	lsls	r3, r3, #4
 800dba2:	4413      	add	r3, r2
 800dba4:	3308      	adds	r3, #8
 800dba6:	681a      	ldr	r2, [r3, #0]
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800dbac:	429a      	cmp	r2, r3
 800dbae:	d102      	bne.n	800dbb6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800dbb0:	e007      	b.n	800dbc2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800dbb2:	2301      	movs	r3, #1
 800dbb4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	3301      	adds	r3, #1
 800dbba:	60fb      	str	r3, [r7, #12]
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	2b01      	cmp	r3, #1
 800dbc0:	d9d2      	bls.n	800db68 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	2b02      	cmp	r3, #2
 800dbc6:	d109      	bne.n	800dbdc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d102      	bne.n	800dbd4 <chk_lock+0x80>
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	2b02      	cmp	r3, #2
 800dbd2:	d101      	bne.n	800dbd8 <chk_lock+0x84>
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	e010      	b.n	800dbfa <chk_lock+0xa6>
 800dbd8:	2312      	movs	r3, #18
 800dbda:	e00e      	b.n	800dbfa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d108      	bne.n	800dbf4 <chk_lock+0xa0>
 800dbe2:	4a09      	ldr	r2, [pc, #36]	; (800dc08 <chk_lock+0xb4>)
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	011b      	lsls	r3, r3, #4
 800dbe8:	4413      	add	r3, r2
 800dbea:	330c      	adds	r3, #12
 800dbec:	881b      	ldrh	r3, [r3, #0]
 800dbee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dbf2:	d101      	bne.n	800dbf8 <chk_lock+0xa4>
 800dbf4:	2310      	movs	r3, #16
 800dbf6:	e000      	b.n	800dbfa <chk_lock+0xa6>
 800dbf8:	2300      	movs	r3, #0
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	3714      	adds	r7, #20
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc04:	4770      	bx	lr
 800dc06:	bf00      	nop
 800dc08:	20000874 	.word	0x20000874

0800dc0c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800dc0c:	b480      	push	{r7}
 800dc0e:	b083      	sub	sp, #12
 800dc10:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800dc12:	2300      	movs	r3, #0
 800dc14:	607b      	str	r3, [r7, #4]
 800dc16:	e002      	b.n	800dc1e <enq_lock+0x12>
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	3301      	adds	r3, #1
 800dc1c:	607b      	str	r3, [r7, #4]
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2b01      	cmp	r3, #1
 800dc22:	d806      	bhi.n	800dc32 <enq_lock+0x26>
 800dc24:	4a09      	ldr	r2, [pc, #36]	; (800dc4c <enq_lock+0x40>)
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	011b      	lsls	r3, r3, #4
 800dc2a:	4413      	add	r3, r2
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d1f2      	bne.n	800dc18 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	2b02      	cmp	r3, #2
 800dc36:	bf14      	ite	ne
 800dc38:	2301      	movne	r3, #1
 800dc3a:	2300      	moveq	r3, #0
 800dc3c:	b2db      	uxtb	r3, r3
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	370c      	adds	r7, #12
 800dc42:	46bd      	mov	sp, r7
 800dc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc48:	4770      	bx	lr
 800dc4a:	bf00      	nop
 800dc4c:	20000874 	.word	0x20000874

0800dc50 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800dc50:	b480      	push	{r7}
 800dc52:	b085      	sub	sp, #20
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
 800dc58:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	60fb      	str	r3, [r7, #12]
 800dc5e:	e01f      	b.n	800dca0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800dc60:	4a41      	ldr	r2, [pc, #260]	; (800dd68 <inc_lock+0x118>)
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	011b      	lsls	r3, r3, #4
 800dc66:	4413      	add	r3, r2
 800dc68:	681a      	ldr	r2, [r3, #0]
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	429a      	cmp	r2, r3
 800dc70:	d113      	bne.n	800dc9a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800dc72:	4a3d      	ldr	r2, [pc, #244]	; (800dd68 <inc_lock+0x118>)
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	011b      	lsls	r3, r3, #4
 800dc78:	4413      	add	r3, r2
 800dc7a:	3304      	adds	r3, #4
 800dc7c:	681a      	ldr	r2, [r3, #0]
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800dc82:	429a      	cmp	r2, r3
 800dc84:	d109      	bne.n	800dc9a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800dc86:	4a38      	ldr	r2, [pc, #224]	; (800dd68 <inc_lock+0x118>)
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	011b      	lsls	r3, r3, #4
 800dc8c:	4413      	add	r3, r2
 800dc8e:	3308      	adds	r3, #8
 800dc90:	681a      	ldr	r2, [r3, #0]
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800dc96:	429a      	cmp	r2, r3
 800dc98:	d006      	beq.n	800dca8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	3301      	adds	r3, #1
 800dc9e:	60fb      	str	r3, [r7, #12]
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	2b01      	cmp	r3, #1
 800dca4:	d9dc      	bls.n	800dc60 <inc_lock+0x10>
 800dca6:	e000      	b.n	800dcaa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800dca8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	2b02      	cmp	r3, #2
 800dcae:	d132      	bne.n	800dd16 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	60fb      	str	r3, [r7, #12]
 800dcb4:	e002      	b.n	800dcbc <inc_lock+0x6c>
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	3301      	adds	r3, #1
 800dcba:	60fb      	str	r3, [r7, #12]
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	2b01      	cmp	r3, #1
 800dcc0:	d806      	bhi.n	800dcd0 <inc_lock+0x80>
 800dcc2:	4a29      	ldr	r2, [pc, #164]	; (800dd68 <inc_lock+0x118>)
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	011b      	lsls	r3, r3, #4
 800dcc8:	4413      	add	r3, r2
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d1f2      	bne.n	800dcb6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	2b02      	cmp	r3, #2
 800dcd4:	d101      	bne.n	800dcda <inc_lock+0x8a>
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	e040      	b.n	800dd5c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681a      	ldr	r2, [r3, #0]
 800dcde:	4922      	ldr	r1, [pc, #136]	; (800dd68 <inc_lock+0x118>)
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	011b      	lsls	r3, r3, #4
 800dce4:	440b      	add	r3, r1
 800dce6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	689a      	ldr	r2, [r3, #8]
 800dcec:	491e      	ldr	r1, [pc, #120]	; (800dd68 <inc_lock+0x118>)
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	011b      	lsls	r3, r3, #4
 800dcf2:	440b      	add	r3, r1
 800dcf4:	3304      	adds	r3, #4
 800dcf6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	695a      	ldr	r2, [r3, #20]
 800dcfc:	491a      	ldr	r1, [pc, #104]	; (800dd68 <inc_lock+0x118>)
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	011b      	lsls	r3, r3, #4
 800dd02:	440b      	add	r3, r1
 800dd04:	3308      	adds	r3, #8
 800dd06:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800dd08:	4a17      	ldr	r2, [pc, #92]	; (800dd68 <inc_lock+0x118>)
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	011b      	lsls	r3, r3, #4
 800dd0e:	4413      	add	r3, r2
 800dd10:	330c      	adds	r3, #12
 800dd12:	2200      	movs	r2, #0
 800dd14:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d009      	beq.n	800dd30 <inc_lock+0xe0>
 800dd1c:	4a12      	ldr	r2, [pc, #72]	; (800dd68 <inc_lock+0x118>)
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	011b      	lsls	r3, r3, #4
 800dd22:	4413      	add	r3, r2
 800dd24:	330c      	adds	r3, #12
 800dd26:	881b      	ldrh	r3, [r3, #0]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d001      	beq.n	800dd30 <inc_lock+0xe0>
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	e015      	b.n	800dd5c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800dd30:	683b      	ldr	r3, [r7, #0]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d108      	bne.n	800dd48 <inc_lock+0xf8>
 800dd36:	4a0c      	ldr	r2, [pc, #48]	; (800dd68 <inc_lock+0x118>)
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	011b      	lsls	r3, r3, #4
 800dd3c:	4413      	add	r3, r2
 800dd3e:	330c      	adds	r3, #12
 800dd40:	881b      	ldrh	r3, [r3, #0]
 800dd42:	3301      	adds	r3, #1
 800dd44:	b29a      	uxth	r2, r3
 800dd46:	e001      	b.n	800dd4c <inc_lock+0xfc>
 800dd48:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dd4c:	4906      	ldr	r1, [pc, #24]	; (800dd68 <inc_lock+0x118>)
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	011b      	lsls	r3, r3, #4
 800dd52:	440b      	add	r3, r1
 800dd54:	330c      	adds	r3, #12
 800dd56:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	3301      	adds	r3, #1
}
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	3714      	adds	r7, #20
 800dd60:	46bd      	mov	sp, r7
 800dd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd66:	4770      	bx	lr
 800dd68:	20000874 	.word	0x20000874

0800dd6c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800dd6c:	b480      	push	{r7}
 800dd6e:	b085      	sub	sp, #20
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	3b01      	subs	r3, #1
 800dd78:	607b      	str	r3, [r7, #4]
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	2b01      	cmp	r3, #1
 800dd7e:	d825      	bhi.n	800ddcc <dec_lock+0x60>
		n = Files[i].ctr;
 800dd80:	4a17      	ldr	r2, [pc, #92]	; (800dde0 <dec_lock+0x74>)
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	011b      	lsls	r3, r3, #4
 800dd86:	4413      	add	r3, r2
 800dd88:	330c      	adds	r3, #12
 800dd8a:	881b      	ldrh	r3, [r3, #0]
 800dd8c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800dd8e:	89fb      	ldrh	r3, [r7, #14]
 800dd90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dd94:	d101      	bne.n	800dd9a <dec_lock+0x2e>
 800dd96:	2300      	movs	r3, #0
 800dd98:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800dd9a:	89fb      	ldrh	r3, [r7, #14]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d002      	beq.n	800dda6 <dec_lock+0x3a>
 800dda0:	89fb      	ldrh	r3, [r7, #14]
 800dda2:	3b01      	subs	r3, #1
 800dda4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800dda6:	4a0e      	ldr	r2, [pc, #56]	; (800dde0 <dec_lock+0x74>)
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	011b      	lsls	r3, r3, #4
 800ddac:	4413      	add	r3, r2
 800ddae:	330c      	adds	r3, #12
 800ddb0:	89fa      	ldrh	r2, [r7, #14]
 800ddb2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ddb4:	89fb      	ldrh	r3, [r7, #14]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d105      	bne.n	800ddc6 <dec_lock+0x5a>
 800ddba:	4a09      	ldr	r2, [pc, #36]	; (800dde0 <dec_lock+0x74>)
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	011b      	lsls	r3, r3, #4
 800ddc0:	4413      	add	r3, r2
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	737b      	strb	r3, [r7, #13]
 800ddca:	e001      	b.n	800ddd0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ddcc:	2302      	movs	r3, #2
 800ddce:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ddd0:	7b7b      	ldrb	r3, [r7, #13]
}
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	3714      	adds	r7, #20
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dddc:	4770      	bx	lr
 800ddde:	bf00      	nop
 800dde0:	20000874 	.word	0x20000874

0800dde4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800dde4:	b480      	push	{r7}
 800dde6:	b085      	sub	sp, #20
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ddec:	2300      	movs	r3, #0
 800ddee:	60fb      	str	r3, [r7, #12]
 800ddf0:	e010      	b.n	800de14 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ddf2:	4a0d      	ldr	r2, [pc, #52]	; (800de28 <clear_lock+0x44>)
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	011b      	lsls	r3, r3, #4
 800ddf8:	4413      	add	r3, r2
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	687a      	ldr	r2, [r7, #4]
 800ddfe:	429a      	cmp	r2, r3
 800de00:	d105      	bne.n	800de0e <clear_lock+0x2a>
 800de02:	4a09      	ldr	r2, [pc, #36]	; (800de28 <clear_lock+0x44>)
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	011b      	lsls	r3, r3, #4
 800de08:	4413      	add	r3, r2
 800de0a:	2200      	movs	r2, #0
 800de0c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	3301      	adds	r3, #1
 800de12:	60fb      	str	r3, [r7, #12]
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	2b01      	cmp	r3, #1
 800de18:	d9eb      	bls.n	800ddf2 <clear_lock+0xe>
	}
}
 800de1a:	bf00      	nop
 800de1c:	3714      	adds	r7, #20
 800de1e:	46bd      	mov	sp, r7
 800de20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de24:	4770      	bx	lr
 800de26:	bf00      	nop
 800de28:	20000874 	.word	0x20000874

0800de2c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b086      	sub	sp, #24
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800de34:	2300      	movs	r3, #0
 800de36:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	78db      	ldrb	r3, [r3, #3]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d034      	beq.n	800deaa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de44:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	7858      	ldrb	r0, [r3, #1]
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800de50:	2301      	movs	r3, #1
 800de52:	697a      	ldr	r2, [r7, #20]
 800de54:	f7ff fd40 	bl	800d8d8 <disk_write>
 800de58:	4603      	mov	r3, r0
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d002      	beq.n	800de64 <sync_window+0x38>
			res = FR_DISK_ERR;
 800de5e:	2301      	movs	r3, #1
 800de60:	73fb      	strb	r3, [r7, #15]
 800de62:	e022      	b.n	800deaa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2200      	movs	r2, #0
 800de68:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de6e:	697a      	ldr	r2, [r7, #20]
 800de70:	1ad2      	subs	r2, r2, r3
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	69db      	ldr	r3, [r3, #28]
 800de76:	429a      	cmp	r2, r3
 800de78:	d217      	bcs.n	800deaa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	789b      	ldrb	r3, [r3, #2]
 800de7e:	613b      	str	r3, [r7, #16]
 800de80:	e010      	b.n	800dea4 <sync_window+0x78>
					wsect += fs->fsize;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	69db      	ldr	r3, [r3, #28]
 800de86:	697a      	ldr	r2, [r7, #20]
 800de88:	4413      	add	r3, r2
 800de8a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	7858      	ldrb	r0, [r3, #1]
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800de96:	2301      	movs	r3, #1
 800de98:	697a      	ldr	r2, [r7, #20]
 800de9a:	f7ff fd1d 	bl	800d8d8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800de9e:	693b      	ldr	r3, [r7, #16]
 800dea0:	3b01      	subs	r3, #1
 800dea2:	613b      	str	r3, [r7, #16]
 800dea4:	693b      	ldr	r3, [r7, #16]
 800dea6:	2b01      	cmp	r3, #1
 800dea8:	d8eb      	bhi.n	800de82 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800deaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800deac:	4618      	mov	r0, r3
 800deae:	3718      	adds	r7, #24
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}

0800deb4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b084      	sub	sp, #16
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
 800debc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800debe:	2300      	movs	r3, #0
 800dec0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dec6:	683a      	ldr	r2, [r7, #0]
 800dec8:	429a      	cmp	r2, r3
 800deca:	d01b      	beq.n	800df04 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f7ff ffad 	bl	800de2c <sync_window>
 800ded2:	4603      	mov	r3, r0
 800ded4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ded6:	7bfb      	ldrb	r3, [r7, #15]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d113      	bne.n	800df04 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	7858      	ldrb	r0, [r3, #1]
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dee6:	2301      	movs	r3, #1
 800dee8:	683a      	ldr	r2, [r7, #0]
 800deea:	f7ff fcd5 	bl	800d898 <disk_read>
 800deee:	4603      	mov	r3, r0
 800def0:	2b00      	cmp	r3, #0
 800def2:	d004      	beq.n	800defe <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800def4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800def8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800defa:	2301      	movs	r3, #1
 800defc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	683a      	ldr	r2, [r7, #0]
 800df02:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800df04:	7bfb      	ldrb	r3, [r7, #15]
}
 800df06:	4618      	mov	r0, r3
 800df08:	3710      	adds	r7, #16
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}
	...

0800df10 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b084      	sub	sp, #16
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800df18:	6878      	ldr	r0, [r7, #4]
 800df1a:	f7ff ff87 	bl	800de2c <sync_window>
 800df1e:	4603      	mov	r3, r0
 800df20:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800df22:	7bfb      	ldrb	r3, [r7, #15]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d159      	bne.n	800dfdc <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	781b      	ldrb	r3, [r3, #0]
 800df2c:	2b03      	cmp	r3, #3
 800df2e:	d149      	bne.n	800dfc4 <sync_fs+0xb4>
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	791b      	ldrb	r3, [r3, #4]
 800df34:	2b01      	cmp	r3, #1
 800df36:	d145      	bne.n	800dfc4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	899b      	ldrh	r3, [r3, #12]
 800df42:	461a      	mov	r2, r3
 800df44:	2100      	movs	r1, #0
 800df46:	f7ff fda8 	bl	800da9a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	3334      	adds	r3, #52	; 0x34
 800df4e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800df52:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800df56:	4618      	mov	r0, r3
 800df58:	f7ff fd37 	bl	800d9ca <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	3334      	adds	r3, #52	; 0x34
 800df60:	4921      	ldr	r1, [pc, #132]	; (800dfe8 <sync_fs+0xd8>)
 800df62:	4618      	mov	r0, r3
 800df64:	f7ff fd4c 	bl	800da00 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	3334      	adds	r3, #52	; 0x34
 800df6c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800df70:	491e      	ldr	r1, [pc, #120]	; (800dfec <sync_fs+0xdc>)
 800df72:	4618      	mov	r0, r3
 800df74:	f7ff fd44 	bl	800da00 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	3334      	adds	r3, #52	; 0x34
 800df7c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	695b      	ldr	r3, [r3, #20]
 800df84:	4619      	mov	r1, r3
 800df86:	4610      	mov	r0, r2
 800df88:	f7ff fd3a 	bl	800da00 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	3334      	adds	r3, #52	; 0x34
 800df90:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	691b      	ldr	r3, [r3, #16]
 800df98:	4619      	mov	r1, r3
 800df9a:	4610      	mov	r0, r2
 800df9c:	f7ff fd30 	bl	800da00 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	6a1b      	ldr	r3, [r3, #32]
 800dfa4:	1c5a      	adds	r2, r3, #1
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	7858      	ldrb	r0, [r3, #1]
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dfb8:	2301      	movs	r3, #1
 800dfba:	f7ff fc8d 	bl	800d8d8 <disk_write>
			fs->fsi_flag = 0;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	785b      	ldrb	r3, [r3, #1]
 800dfc8:	2200      	movs	r2, #0
 800dfca:	2100      	movs	r1, #0
 800dfcc:	4618      	mov	r0, r3
 800dfce:	f7ff fca3 	bl	800d918 <disk_ioctl>
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d001      	beq.n	800dfdc <sync_fs+0xcc>
 800dfd8:	2301      	movs	r3, #1
 800dfda:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800dfdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfde:	4618      	mov	r0, r3
 800dfe0:	3710      	adds	r7, #16
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bd80      	pop	{r7, pc}
 800dfe6:	bf00      	nop
 800dfe8:	41615252 	.word	0x41615252
 800dfec:	61417272 	.word	0x61417272

0800dff0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800dff0:	b480      	push	{r7}
 800dff2:	b083      	sub	sp, #12
 800dff4:	af00      	add	r7, sp, #0
 800dff6:	6078      	str	r0, [r7, #4]
 800dff8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	3b02      	subs	r3, #2
 800dffe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	699b      	ldr	r3, [r3, #24]
 800e004:	3b02      	subs	r3, #2
 800e006:	683a      	ldr	r2, [r7, #0]
 800e008:	429a      	cmp	r2, r3
 800e00a:	d301      	bcc.n	800e010 <clust2sect+0x20>
 800e00c:	2300      	movs	r3, #0
 800e00e:	e008      	b.n	800e022 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	895b      	ldrh	r3, [r3, #10]
 800e014:	461a      	mov	r2, r3
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	fb03 f202 	mul.w	r2, r3, r2
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e020:	4413      	add	r3, r2
}
 800e022:	4618      	mov	r0, r3
 800e024:	370c      	adds	r7, #12
 800e026:	46bd      	mov	sp, r7
 800e028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02c:	4770      	bx	lr

0800e02e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e02e:	b580      	push	{r7, lr}
 800e030:	b086      	sub	sp, #24
 800e032:	af00      	add	r7, sp, #0
 800e034:	6078      	str	r0, [r7, #4]
 800e036:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	2b01      	cmp	r3, #1
 800e042:	d904      	bls.n	800e04e <get_fat+0x20>
 800e044:	693b      	ldr	r3, [r7, #16]
 800e046:	699b      	ldr	r3, [r3, #24]
 800e048:	683a      	ldr	r2, [r7, #0]
 800e04a:	429a      	cmp	r2, r3
 800e04c:	d302      	bcc.n	800e054 <get_fat+0x26>
		val = 1;	/* Internal error */
 800e04e:	2301      	movs	r3, #1
 800e050:	617b      	str	r3, [r7, #20]
 800e052:	e0b7      	b.n	800e1c4 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e054:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e058:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e05a:	693b      	ldr	r3, [r7, #16]
 800e05c:	781b      	ldrb	r3, [r3, #0]
 800e05e:	2b02      	cmp	r3, #2
 800e060:	d05a      	beq.n	800e118 <get_fat+0xea>
 800e062:	2b03      	cmp	r3, #3
 800e064:	d07d      	beq.n	800e162 <get_fat+0x134>
 800e066:	2b01      	cmp	r3, #1
 800e068:	f040 80a2 	bne.w	800e1b0 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	60fb      	str	r3, [r7, #12]
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	085b      	lsrs	r3, r3, #1
 800e074:	68fa      	ldr	r2, [r7, #12]
 800e076:	4413      	add	r3, r2
 800e078:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e07a:	693b      	ldr	r3, [r7, #16]
 800e07c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e07e:	693b      	ldr	r3, [r7, #16]
 800e080:	899b      	ldrh	r3, [r3, #12]
 800e082:	4619      	mov	r1, r3
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	fbb3 f3f1 	udiv	r3, r3, r1
 800e08a:	4413      	add	r3, r2
 800e08c:	4619      	mov	r1, r3
 800e08e:	6938      	ldr	r0, [r7, #16]
 800e090:	f7ff ff10 	bl	800deb4 <move_window>
 800e094:	4603      	mov	r3, r0
 800e096:	2b00      	cmp	r3, #0
 800e098:	f040 808d 	bne.w	800e1b6 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	1c5a      	adds	r2, r3, #1
 800e0a0:	60fa      	str	r2, [r7, #12]
 800e0a2:	693a      	ldr	r2, [r7, #16]
 800e0a4:	8992      	ldrh	r2, [r2, #12]
 800e0a6:	fbb3 f1f2 	udiv	r1, r3, r2
 800e0aa:	fb02 f201 	mul.w	r2, r2, r1
 800e0ae:	1a9b      	subs	r3, r3, r2
 800e0b0:	693a      	ldr	r2, [r7, #16]
 800e0b2:	4413      	add	r3, r2
 800e0b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e0b8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e0ba:	693b      	ldr	r3, [r7, #16]
 800e0bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e0be:	693b      	ldr	r3, [r7, #16]
 800e0c0:	899b      	ldrh	r3, [r3, #12]
 800e0c2:	4619      	mov	r1, r3
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	fbb3 f3f1 	udiv	r3, r3, r1
 800e0ca:	4413      	add	r3, r2
 800e0cc:	4619      	mov	r1, r3
 800e0ce:	6938      	ldr	r0, [r7, #16]
 800e0d0:	f7ff fef0 	bl	800deb4 <move_window>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d16f      	bne.n	800e1ba <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e0da:	693b      	ldr	r3, [r7, #16]
 800e0dc:	899b      	ldrh	r3, [r3, #12]
 800e0de:	461a      	mov	r2, r3
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	fbb3 f1f2 	udiv	r1, r3, r2
 800e0e6:	fb02 f201 	mul.w	r2, r2, r1
 800e0ea:	1a9b      	subs	r3, r3, r2
 800e0ec:	693a      	ldr	r2, [r7, #16]
 800e0ee:	4413      	add	r3, r2
 800e0f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e0f4:	021b      	lsls	r3, r3, #8
 800e0f6:	461a      	mov	r2, r3
 800e0f8:	68bb      	ldr	r3, [r7, #8]
 800e0fa:	4313      	orrs	r3, r2
 800e0fc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	f003 0301 	and.w	r3, r3, #1
 800e104:	2b00      	cmp	r3, #0
 800e106:	d002      	beq.n	800e10e <get_fat+0xe0>
 800e108:	68bb      	ldr	r3, [r7, #8]
 800e10a:	091b      	lsrs	r3, r3, #4
 800e10c:	e002      	b.n	800e114 <get_fat+0xe6>
 800e10e:	68bb      	ldr	r3, [r7, #8]
 800e110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e114:	617b      	str	r3, [r7, #20]
			break;
 800e116:	e055      	b.n	800e1c4 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e118:	693b      	ldr	r3, [r7, #16]
 800e11a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e11c:	693b      	ldr	r3, [r7, #16]
 800e11e:	899b      	ldrh	r3, [r3, #12]
 800e120:	085b      	lsrs	r3, r3, #1
 800e122:	b29b      	uxth	r3, r3
 800e124:	4619      	mov	r1, r3
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	fbb3 f3f1 	udiv	r3, r3, r1
 800e12c:	4413      	add	r3, r2
 800e12e:	4619      	mov	r1, r3
 800e130:	6938      	ldr	r0, [r7, #16]
 800e132:	f7ff febf 	bl	800deb4 <move_window>
 800e136:	4603      	mov	r3, r0
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d140      	bne.n	800e1be <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e13c:	693b      	ldr	r3, [r7, #16]
 800e13e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	005b      	lsls	r3, r3, #1
 800e146:	693a      	ldr	r2, [r7, #16]
 800e148:	8992      	ldrh	r2, [r2, #12]
 800e14a:	fbb3 f0f2 	udiv	r0, r3, r2
 800e14e:	fb02 f200 	mul.w	r2, r2, r0
 800e152:	1a9b      	subs	r3, r3, r2
 800e154:	440b      	add	r3, r1
 800e156:	4618      	mov	r0, r3
 800e158:	f7ff fbfc 	bl	800d954 <ld_word>
 800e15c:	4603      	mov	r3, r0
 800e15e:	617b      	str	r3, [r7, #20]
			break;
 800e160:	e030      	b.n	800e1c4 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e162:	693b      	ldr	r3, [r7, #16]
 800e164:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e166:	693b      	ldr	r3, [r7, #16]
 800e168:	899b      	ldrh	r3, [r3, #12]
 800e16a:	089b      	lsrs	r3, r3, #2
 800e16c:	b29b      	uxth	r3, r3
 800e16e:	4619      	mov	r1, r3
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	fbb3 f3f1 	udiv	r3, r3, r1
 800e176:	4413      	add	r3, r2
 800e178:	4619      	mov	r1, r3
 800e17a:	6938      	ldr	r0, [r7, #16]
 800e17c:	f7ff fe9a 	bl	800deb4 <move_window>
 800e180:	4603      	mov	r3, r0
 800e182:	2b00      	cmp	r3, #0
 800e184:	d11d      	bne.n	800e1c2 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e186:	693b      	ldr	r3, [r7, #16]
 800e188:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	009b      	lsls	r3, r3, #2
 800e190:	693a      	ldr	r2, [r7, #16]
 800e192:	8992      	ldrh	r2, [r2, #12]
 800e194:	fbb3 f0f2 	udiv	r0, r3, r2
 800e198:	fb02 f200 	mul.w	r2, r2, r0
 800e19c:	1a9b      	subs	r3, r3, r2
 800e19e:	440b      	add	r3, r1
 800e1a0:	4618      	mov	r0, r3
 800e1a2:	f7ff fbef 	bl	800d984 <ld_dword>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e1ac:	617b      	str	r3, [r7, #20]
			break;
 800e1ae:	e009      	b.n	800e1c4 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e1b0:	2301      	movs	r3, #1
 800e1b2:	617b      	str	r3, [r7, #20]
 800e1b4:	e006      	b.n	800e1c4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e1b6:	bf00      	nop
 800e1b8:	e004      	b.n	800e1c4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e1ba:	bf00      	nop
 800e1bc:	e002      	b.n	800e1c4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e1be:	bf00      	nop
 800e1c0:	e000      	b.n	800e1c4 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e1c2:	bf00      	nop
		}
	}

	return val;
 800e1c4:	697b      	ldr	r3, [r7, #20]
}
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	3718      	adds	r7, #24
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bd80      	pop	{r7, pc}

0800e1ce <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e1ce:	b590      	push	{r4, r7, lr}
 800e1d0:	b089      	sub	sp, #36	; 0x24
 800e1d2:	af00      	add	r7, sp, #0
 800e1d4:	60f8      	str	r0, [r7, #12]
 800e1d6:	60b9      	str	r1, [r7, #8]
 800e1d8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e1da:	2302      	movs	r3, #2
 800e1dc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e1de:	68bb      	ldr	r3, [r7, #8]
 800e1e0:	2b01      	cmp	r3, #1
 800e1e2:	f240 8106 	bls.w	800e3f2 <put_fat+0x224>
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	699b      	ldr	r3, [r3, #24]
 800e1ea:	68ba      	ldr	r2, [r7, #8]
 800e1ec:	429a      	cmp	r2, r3
 800e1ee:	f080 8100 	bcs.w	800e3f2 <put_fat+0x224>
		switch (fs->fs_type) {
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	781b      	ldrb	r3, [r3, #0]
 800e1f6:	2b02      	cmp	r3, #2
 800e1f8:	f000 8088 	beq.w	800e30c <put_fat+0x13e>
 800e1fc:	2b03      	cmp	r3, #3
 800e1fe:	f000 80b0 	beq.w	800e362 <put_fat+0x194>
 800e202:	2b01      	cmp	r3, #1
 800e204:	f040 80f5 	bne.w	800e3f2 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e208:	68bb      	ldr	r3, [r7, #8]
 800e20a:	61bb      	str	r3, [r7, #24]
 800e20c:	69bb      	ldr	r3, [r7, #24]
 800e20e:	085b      	lsrs	r3, r3, #1
 800e210:	69ba      	ldr	r2, [r7, #24]
 800e212:	4413      	add	r3, r2
 800e214:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	899b      	ldrh	r3, [r3, #12]
 800e21e:	4619      	mov	r1, r3
 800e220:	69bb      	ldr	r3, [r7, #24]
 800e222:	fbb3 f3f1 	udiv	r3, r3, r1
 800e226:	4413      	add	r3, r2
 800e228:	4619      	mov	r1, r3
 800e22a:	68f8      	ldr	r0, [r7, #12]
 800e22c:	f7ff fe42 	bl	800deb4 <move_window>
 800e230:	4603      	mov	r3, r0
 800e232:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e234:	7ffb      	ldrb	r3, [r7, #31]
 800e236:	2b00      	cmp	r3, #0
 800e238:	f040 80d4 	bne.w	800e3e4 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e242:	69bb      	ldr	r3, [r7, #24]
 800e244:	1c5a      	adds	r2, r3, #1
 800e246:	61ba      	str	r2, [r7, #24]
 800e248:	68fa      	ldr	r2, [r7, #12]
 800e24a:	8992      	ldrh	r2, [r2, #12]
 800e24c:	fbb3 f0f2 	udiv	r0, r3, r2
 800e250:	fb02 f200 	mul.w	r2, r2, r0
 800e254:	1a9b      	subs	r3, r3, r2
 800e256:	440b      	add	r3, r1
 800e258:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	f003 0301 	and.w	r3, r3, #1
 800e260:	2b00      	cmp	r3, #0
 800e262:	d00d      	beq.n	800e280 <put_fat+0xb2>
 800e264:	697b      	ldr	r3, [r7, #20]
 800e266:	781b      	ldrb	r3, [r3, #0]
 800e268:	b25b      	sxtb	r3, r3
 800e26a:	f003 030f 	and.w	r3, r3, #15
 800e26e:	b25a      	sxtb	r2, r3
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	b2db      	uxtb	r3, r3
 800e274:	011b      	lsls	r3, r3, #4
 800e276:	b25b      	sxtb	r3, r3
 800e278:	4313      	orrs	r3, r2
 800e27a:	b25b      	sxtb	r3, r3
 800e27c:	b2db      	uxtb	r3, r3
 800e27e:	e001      	b.n	800e284 <put_fat+0xb6>
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	b2db      	uxtb	r3, r3
 800e284:	697a      	ldr	r2, [r7, #20]
 800e286:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	2201      	movs	r2, #1
 800e28c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	899b      	ldrh	r3, [r3, #12]
 800e296:	4619      	mov	r1, r3
 800e298:	69bb      	ldr	r3, [r7, #24]
 800e29a:	fbb3 f3f1 	udiv	r3, r3, r1
 800e29e:	4413      	add	r3, r2
 800e2a0:	4619      	mov	r1, r3
 800e2a2:	68f8      	ldr	r0, [r7, #12]
 800e2a4:	f7ff fe06 	bl	800deb4 <move_window>
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e2ac:	7ffb      	ldrb	r3, [r7, #31]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	f040 809a 	bne.w	800e3e8 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	899b      	ldrh	r3, [r3, #12]
 800e2be:	461a      	mov	r2, r3
 800e2c0:	69bb      	ldr	r3, [r7, #24]
 800e2c2:	fbb3 f0f2 	udiv	r0, r3, r2
 800e2c6:	fb02 f200 	mul.w	r2, r2, r0
 800e2ca:	1a9b      	subs	r3, r3, r2
 800e2cc:	440b      	add	r3, r1
 800e2ce:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e2d0:	68bb      	ldr	r3, [r7, #8]
 800e2d2:	f003 0301 	and.w	r3, r3, #1
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d003      	beq.n	800e2e2 <put_fat+0x114>
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	091b      	lsrs	r3, r3, #4
 800e2de:	b2db      	uxtb	r3, r3
 800e2e0:	e00e      	b.n	800e300 <put_fat+0x132>
 800e2e2:	697b      	ldr	r3, [r7, #20]
 800e2e4:	781b      	ldrb	r3, [r3, #0]
 800e2e6:	b25b      	sxtb	r3, r3
 800e2e8:	f023 030f 	bic.w	r3, r3, #15
 800e2ec:	b25a      	sxtb	r2, r3
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	0a1b      	lsrs	r3, r3, #8
 800e2f2:	b25b      	sxtb	r3, r3
 800e2f4:	f003 030f 	and.w	r3, r3, #15
 800e2f8:	b25b      	sxtb	r3, r3
 800e2fa:	4313      	orrs	r3, r2
 800e2fc:	b25b      	sxtb	r3, r3
 800e2fe:	b2db      	uxtb	r3, r3
 800e300:	697a      	ldr	r2, [r7, #20]
 800e302:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	2201      	movs	r2, #1
 800e308:	70da      	strb	r2, [r3, #3]
			break;
 800e30a:	e072      	b.n	800e3f2 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	899b      	ldrh	r3, [r3, #12]
 800e314:	085b      	lsrs	r3, r3, #1
 800e316:	b29b      	uxth	r3, r3
 800e318:	4619      	mov	r1, r3
 800e31a:	68bb      	ldr	r3, [r7, #8]
 800e31c:	fbb3 f3f1 	udiv	r3, r3, r1
 800e320:	4413      	add	r3, r2
 800e322:	4619      	mov	r1, r3
 800e324:	68f8      	ldr	r0, [r7, #12]
 800e326:	f7ff fdc5 	bl	800deb4 <move_window>
 800e32a:	4603      	mov	r3, r0
 800e32c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e32e:	7ffb      	ldrb	r3, [r7, #31]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d15b      	bne.n	800e3ec <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e33a:	68bb      	ldr	r3, [r7, #8]
 800e33c:	005b      	lsls	r3, r3, #1
 800e33e:	68fa      	ldr	r2, [r7, #12]
 800e340:	8992      	ldrh	r2, [r2, #12]
 800e342:	fbb3 f0f2 	udiv	r0, r3, r2
 800e346:	fb02 f200 	mul.w	r2, r2, r0
 800e34a:	1a9b      	subs	r3, r3, r2
 800e34c:	440b      	add	r3, r1
 800e34e:	687a      	ldr	r2, [r7, #4]
 800e350:	b292      	uxth	r2, r2
 800e352:	4611      	mov	r1, r2
 800e354:	4618      	mov	r0, r3
 800e356:	f7ff fb38 	bl	800d9ca <st_word>
			fs->wflag = 1;
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	2201      	movs	r2, #1
 800e35e:	70da      	strb	r2, [r3, #3]
			break;
 800e360:	e047      	b.n	800e3f2 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	899b      	ldrh	r3, [r3, #12]
 800e36a:	089b      	lsrs	r3, r3, #2
 800e36c:	b29b      	uxth	r3, r3
 800e36e:	4619      	mov	r1, r3
 800e370:	68bb      	ldr	r3, [r7, #8]
 800e372:	fbb3 f3f1 	udiv	r3, r3, r1
 800e376:	4413      	add	r3, r2
 800e378:	4619      	mov	r1, r3
 800e37a:	68f8      	ldr	r0, [r7, #12]
 800e37c:	f7ff fd9a 	bl	800deb4 <move_window>
 800e380:	4603      	mov	r3, r0
 800e382:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e384:	7ffb      	ldrb	r3, [r7, #31]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d132      	bne.n	800e3f0 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e396:	68bb      	ldr	r3, [r7, #8]
 800e398:	009b      	lsls	r3, r3, #2
 800e39a:	68fa      	ldr	r2, [r7, #12]
 800e39c:	8992      	ldrh	r2, [r2, #12]
 800e39e:	fbb3 f0f2 	udiv	r0, r3, r2
 800e3a2:	fb02 f200 	mul.w	r2, r2, r0
 800e3a6:	1a9b      	subs	r3, r3, r2
 800e3a8:	440b      	add	r3, r1
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	f7ff faea 	bl	800d984 <ld_dword>
 800e3b0:	4603      	mov	r3, r0
 800e3b2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e3b6:	4323      	orrs	r3, r4
 800e3b8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e3c0:	68bb      	ldr	r3, [r7, #8]
 800e3c2:	009b      	lsls	r3, r3, #2
 800e3c4:	68fa      	ldr	r2, [r7, #12]
 800e3c6:	8992      	ldrh	r2, [r2, #12]
 800e3c8:	fbb3 f0f2 	udiv	r0, r3, r2
 800e3cc:	fb02 f200 	mul.w	r2, r2, r0
 800e3d0:	1a9b      	subs	r3, r3, r2
 800e3d2:	440b      	add	r3, r1
 800e3d4:	6879      	ldr	r1, [r7, #4]
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7ff fb12 	bl	800da00 <st_dword>
			fs->wflag = 1;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	2201      	movs	r2, #1
 800e3e0:	70da      	strb	r2, [r3, #3]
			break;
 800e3e2:	e006      	b.n	800e3f2 <put_fat+0x224>
			if (res != FR_OK) break;
 800e3e4:	bf00      	nop
 800e3e6:	e004      	b.n	800e3f2 <put_fat+0x224>
			if (res != FR_OK) break;
 800e3e8:	bf00      	nop
 800e3ea:	e002      	b.n	800e3f2 <put_fat+0x224>
			if (res != FR_OK) break;
 800e3ec:	bf00      	nop
 800e3ee:	e000      	b.n	800e3f2 <put_fat+0x224>
			if (res != FR_OK) break;
 800e3f0:	bf00      	nop
		}
	}
	return res;
 800e3f2:	7ffb      	ldrb	r3, [r7, #31]
}
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	3724      	adds	r7, #36	; 0x24
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bd90      	pop	{r4, r7, pc}

0800e3fc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b088      	sub	sp, #32
 800e400:	af00      	add	r7, sp, #0
 800e402:	60f8      	str	r0, [r7, #12]
 800e404:	60b9      	str	r1, [r7, #8]
 800e406:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e408:	2300      	movs	r3, #0
 800e40a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e412:	68bb      	ldr	r3, [r7, #8]
 800e414:	2b01      	cmp	r3, #1
 800e416:	d904      	bls.n	800e422 <remove_chain+0x26>
 800e418:	69bb      	ldr	r3, [r7, #24]
 800e41a:	699b      	ldr	r3, [r3, #24]
 800e41c:	68ba      	ldr	r2, [r7, #8]
 800e41e:	429a      	cmp	r2, r3
 800e420:	d301      	bcc.n	800e426 <remove_chain+0x2a>
 800e422:	2302      	movs	r3, #2
 800e424:	e04b      	b.n	800e4be <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d00c      	beq.n	800e446 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e42c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e430:	6879      	ldr	r1, [r7, #4]
 800e432:	69b8      	ldr	r0, [r7, #24]
 800e434:	f7ff fecb 	bl	800e1ce <put_fat>
 800e438:	4603      	mov	r3, r0
 800e43a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e43c:	7ffb      	ldrb	r3, [r7, #31]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d001      	beq.n	800e446 <remove_chain+0x4a>
 800e442:	7ffb      	ldrb	r3, [r7, #31]
 800e444:	e03b      	b.n	800e4be <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e446:	68b9      	ldr	r1, [r7, #8]
 800e448:	68f8      	ldr	r0, [r7, #12]
 800e44a:	f7ff fdf0 	bl	800e02e <get_fat>
 800e44e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e450:	697b      	ldr	r3, [r7, #20]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d031      	beq.n	800e4ba <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e456:	697b      	ldr	r3, [r7, #20]
 800e458:	2b01      	cmp	r3, #1
 800e45a:	d101      	bne.n	800e460 <remove_chain+0x64>
 800e45c:	2302      	movs	r3, #2
 800e45e:	e02e      	b.n	800e4be <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e460:	697b      	ldr	r3, [r7, #20]
 800e462:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e466:	d101      	bne.n	800e46c <remove_chain+0x70>
 800e468:	2301      	movs	r3, #1
 800e46a:	e028      	b.n	800e4be <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e46c:	2200      	movs	r2, #0
 800e46e:	68b9      	ldr	r1, [r7, #8]
 800e470:	69b8      	ldr	r0, [r7, #24]
 800e472:	f7ff feac 	bl	800e1ce <put_fat>
 800e476:	4603      	mov	r3, r0
 800e478:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e47a:	7ffb      	ldrb	r3, [r7, #31]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d001      	beq.n	800e484 <remove_chain+0x88>
 800e480:	7ffb      	ldrb	r3, [r7, #31]
 800e482:	e01c      	b.n	800e4be <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e484:	69bb      	ldr	r3, [r7, #24]
 800e486:	695a      	ldr	r2, [r3, #20]
 800e488:	69bb      	ldr	r3, [r7, #24]
 800e48a:	699b      	ldr	r3, [r3, #24]
 800e48c:	3b02      	subs	r3, #2
 800e48e:	429a      	cmp	r2, r3
 800e490:	d20b      	bcs.n	800e4aa <remove_chain+0xae>
			fs->free_clst++;
 800e492:	69bb      	ldr	r3, [r7, #24]
 800e494:	695b      	ldr	r3, [r3, #20]
 800e496:	1c5a      	adds	r2, r3, #1
 800e498:	69bb      	ldr	r3, [r7, #24]
 800e49a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800e49c:	69bb      	ldr	r3, [r7, #24]
 800e49e:	791b      	ldrb	r3, [r3, #4]
 800e4a0:	f043 0301 	orr.w	r3, r3, #1
 800e4a4:	b2da      	uxtb	r2, r3
 800e4a6:	69bb      	ldr	r3, [r7, #24]
 800e4a8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e4aa:	697b      	ldr	r3, [r7, #20]
 800e4ac:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e4ae:	69bb      	ldr	r3, [r7, #24]
 800e4b0:	699b      	ldr	r3, [r3, #24]
 800e4b2:	68ba      	ldr	r2, [r7, #8]
 800e4b4:	429a      	cmp	r2, r3
 800e4b6:	d3c6      	bcc.n	800e446 <remove_chain+0x4a>
 800e4b8:	e000      	b.n	800e4bc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e4ba:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e4bc:	2300      	movs	r3, #0
}
 800e4be:	4618      	mov	r0, r3
 800e4c0:	3720      	adds	r7, #32
 800e4c2:	46bd      	mov	sp, r7
 800e4c4:	bd80      	pop	{r7, pc}

0800e4c6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e4c6:	b580      	push	{r7, lr}
 800e4c8:	b088      	sub	sp, #32
 800e4ca:	af00      	add	r7, sp, #0
 800e4cc:	6078      	str	r0, [r7, #4]
 800e4ce:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e4d6:	683b      	ldr	r3, [r7, #0]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d10d      	bne.n	800e4f8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e4dc:	693b      	ldr	r3, [r7, #16]
 800e4de:	691b      	ldr	r3, [r3, #16]
 800e4e0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e4e2:	69bb      	ldr	r3, [r7, #24]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d004      	beq.n	800e4f2 <create_chain+0x2c>
 800e4e8:	693b      	ldr	r3, [r7, #16]
 800e4ea:	699b      	ldr	r3, [r3, #24]
 800e4ec:	69ba      	ldr	r2, [r7, #24]
 800e4ee:	429a      	cmp	r2, r3
 800e4f0:	d31b      	bcc.n	800e52a <create_chain+0x64>
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	61bb      	str	r3, [r7, #24]
 800e4f6:	e018      	b.n	800e52a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e4f8:	6839      	ldr	r1, [r7, #0]
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	f7ff fd97 	bl	800e02e <get_fat>
 800e500:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	2b01      	cmp	r3, #1
 800e506:	d801      	bhi.n	800e50c <create_chain+0x46>
 800e508:	2301      	movs	r3, #1
 800e50a:	e070      	b.n	800e5ee <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e512:	d101      	bne.n	800e518 <create_chain+0x52>
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	e06a      	b.n	800e5ee <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e518:	693b      	ldr	r3, [r7, #16]
 800e51a:	699b      	ldr	r3, [r3, #24]
 800e51c:	68fa      	ldr	r2, [r7, #12]
 800e51e:	429a      	cmp	r2, r3
 800e520:	d201      	bcs.n	800e526 <create_chain+0x60>
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	e063      	b.n	800e5ee <create_chain+0x128>
		scl = clst;
 800e526:	683b      	ldr	r3, [r7, #0]
 800e528:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e52a:	69bb      	ldr	r3, [r7, #24]
 800e52c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e52e:	69fb      	ldr	r3, [r7, #28]
 800e530:	3301      	adds	r3, #1
 800e532:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e534:	693b      	ldr	r3, [r7, #16]
 800e536:	699b      	ldr	r3, [r3, #24]
 800e538:	69fa      	ldr	r2, [r7, #28]
 800e53a:	429a      	cmp	r2, r3
 800e53c:	d307      	bcc.n	800e54e <create_chain+0x88>
				ncl = 2;
 800e53e:	2302      	movs	r3, #2
 800e540:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e542:	69fa      	ldr	r2, [r7, #28]
 800e544:	69bb      	ldr	r3, [r7, #24]
 800e546:	429a      	cmp	r2, r3
 800e548:	d901      	bls.n	800e54e <create_chain+0x88>
 800e54a:	2300      	movs	r3, #0
 800e54c:	e04f      	b.n	800e5ee <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e54e:	69f9      	ldr	r1, [r7, #28]
 800e550:	6878      	ldr	r0, [r7, #4]
 800e552:	f7ff fd6c 	bl	800e02e <get_fat>
 800e556:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d00e      	beq.n	800e57c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	2b01      	cmp	r3, #1
 800e562:	d003      	beq.n	800e56c <create_chain+0xa6>
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e56a:	d101      	bne.n	800e570 <create_chain+0xaa>
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	e03e      	b.n	800e5ee <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e570:	69fa      	ldr	r2, [r7, #28]
 800e572:	69bb      	ldr	r3, [r7, #24]
 800e574:	429a      	cmp	r2, r3
 800e576:	d1da      	bne.n	800e52e <create_chain+0x68>
 800e578:	2300      	movs	r3, #0
 800e57a:	e038      	b.n	800e5ee <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e57c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e57e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e582:	69f9      	ldr	r1, [r7, #28]
 800e584:	6938      	ldr	r0, [r7, #16]
 800e586:	f7ff fe22 	bl	800e1ce <put_fat>
 800e58a:	4603      	mov	r3, r0
 800e58c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e58e:	7dfb      	ldrb	r3, [r7, #23]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d109      	bne.n	800e5a8 <create_chain+0xe2>
 800e594:	683b      	ldr	r3, [r7, #0]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d006      	beq.n	800e5a8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e59a:	69fa      	ldr	r2, [r7, #28]
 800e59c:	6839      	ldr	r1, [r7, #0]
 800e59e:	6938      	ldr	r0, [r7, #16]
 800e5a0:	f7ff fe15 	bl	800e1ce <put_fat>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e5a8:	7dfb      	ldrb	r3, [r7, #23]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d116      	bne.n	800e5dc <create_chain+0x116>
		fs->last_clst = ncl;
 800e5ae:	693b      	ldr	r3, [r7, #16]
 800e5b0:	69fa      	ldr	r2, [r7, #28]
 800e5b2:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e5b4:	693b      	ldr	r3, [r7, #16]
 800e5b6:	695a      	ldr	r2, [r3, #20]
 800e5b8:	693b      	ldr	r3, [r7, #16]
 800e5ba:	699b      	ldr	r3, [r3, #24]
 800e5bc:	3b02      	subs	r3, #2
 800e5be:	429a      	cmp	r2, r3
 800e5c0:	d804      	bhi.n	800e5cc <create_chain+0x106>
 800e5c2:	693b      	ldr	r3, [r7, #16]
 800e5c4:	695b      	ldr	r3, [r3, #20]
 800e5c6:	1e5a      	subs	r2, r3, #1
 800e5c8:	693b      	ldr	r3, [r7, #16]
 800e5ca:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800e5cc:	693b      	ldr	r3, [r7, #16]
 800e5ce:	791b      	ldrb	r3, [r3, #4]
 800e5d0:	f043 0301 	orr.w	r3, r3, #1
 800e5d4:	b2da      	uxtb	r2, r3
 800e5d6:	693b      	ldr	r3, [r7, #16]
 800e5d8:	711a      	strb	r2, [r3, #4]
 800e5da:	e007      	b.n	800e5ec <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e5dc:	7dfb      	ldrb	r3, [r7, #23]
 800e5de:	2b01      	cmp	r3, #1
 800e5e0:	d102      	bne.n	800e5e8 <create_chain+0x122>
 800e5e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e5e6:	e000      	b.n	800e5ea <create_chain+0x124>
 800e5e8:	2301      	movs	r3, #1
 800e5ea:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e5ec:	69fb      	ldr	r3, [r7, #28]
}
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	3720      	adds	r7, #32
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bd80      	pop	{r7, pc}

0800e5f6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e5f6:	b480      	push	{r7}
 800e5f8:	b087      	sub	sp, #28
 800e5fa:	af00      	add	r7, sp, #0
 800e5fc:	6078      	str	r0, [r7, #4]
 800e5fe:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e60a:	3304      	adds	r3, #4
 800e60c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	899b      	ldrh	r3, [r3, #12]
 800e612:	461a      	mov	r2, r3
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	fbb3 f3f2 	udiv	r3, r3, r2
 800e61a:	68fa      	ldr	r2, [r7, #12]
 800e61c:	8952      	ldrh	r2, [r2, #10]
 800e61e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e622:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e624:	693b      	ldr	r3, [r7, #16]
 800e626:	1d1a      	adds	r2, r3, #4
 800e628:	613a      	str	r2, [r7, #16]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e62e:	68bb      	ldr	r3, [r7, #8]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d101      	bne.n	800e638 <clmt_clust+0x42>
 800e634:	2300      	movs	r3, #0
 800e636:	e010      	b.n	800e65a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800e638:	697a      	ldr	r2, [r7, #20]
 800e63a:	68bb      	ldr	r3, [r7, #8]
 800e63c:	429a      	cmp	r2, r3
 800e63e:	d307      	bcc.n	800e650 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800e640:	697a      	ldr	r2, [r7, #20]
 800e642:	68bb      	ldr	r3, [r7, #8]
 800e644:	1ad3      	subs	r3, r2, r3
 800e646:	617b      	str	r3, [r7, #20]
 800e648:	693b      	ldr	r3, [r7, #16]
 800e64a:	3304      	adds	r3, #4
 800e64c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e64e:	e7e9      	b.n	800e624 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800e650:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e652:	693b      	ldr	r3, [r7, #16]
 800e654:	681a      	ldr	r2, [r3, #0]
 800e656:	697b      	ldr	r3, [r7, #20]
 800e658:	4413      	add	r3, r2
}
 800e65a:	4618      	mov	r0, r3
 800e65c:	371c      	adds	r7, #28
 800e65e:	46bd      	mov	sp, r7
 800e660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e664:	4770      	bx	lr

0800e666 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e666:	b580      	push	{r7, lr}
 800e668:	b086      	sub	sp, #24
 800e66a:	af00      	add	r7, sp, #0
 800e66c:	6078      	str	r0, [r7, #4]
 800e66e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e67c:	d204      	bcs.n	800e688 <dir_sdi+0x22>
 800e67e:	683b      	ldr	r3, [r7, #0]
 800e680:	f003 031f 	and.w	r3, r3, #31
 800e684:	2b00      	cmp	r3, #0
 800e686:	d001      	beq.n	800e68c <dir_sdi+0x26>
		return FR_INT_ERR;
 800e688:	2302      	movs	r3, #2
 800e68a:	e071      	b.n	800e770 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	683a      	ldr	r2, [r7, #0]
 800e690:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	689b      	ldr	r3, [r3, #8]
 800e696:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e698:	697b      	ldr	r3, [r7, #20]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d106      	bne.n	800e6ac <dir_sdi+0x46>
 800e69e:	693b      	ldr	r3, [r7, #16]
 800e6a0:	781b      	ldrb	r3, [r3, #0]
 800e6a2:	2b02      	cmp	r3, #2
 800e6a4:	d902      	bls.n	800e6ac <dir_sdi+0x46>
		clst = fs->dirbase;
 800e6a6:	693b      	ldr	r3, [r7, #16]
 800e6a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6aa:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e6ac:	697b      	ldr	r3, [r7, #20]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d10c      	bne.n	800e6cc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e6b2:	683b      	ldr	r3, [r7, #0]
 800e6b4:	095b      	lsrs	r3, r3, #5
 800e6b6:	693a      	ldr	r2, [r7, #16]
 800e6b8:	8912      	ldrh	r2, [r2, #8]
 800e6ba:	4293      	cmp	r3, r2
 800e6bc:	d301      	bcc.n	800e6c2 <dir_sdi+0x5c>
 800e6be:	2302      	movs	r3, #2
 800e6c0:	e056      	b.n	800e770 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800e6c2:	693b      	ldr	r3, [r7, #16]
 800e6c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	61da      	str	r2, [r3, #28]
 800e6ca:	e02d      	b.n	800e728 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e6cc:	693b      	ldr	r3, [r7, #16]
 800e6ce:	895b      	ldrh	r3, [r3, #10]
 800e6d0:	461a      	mov	r2, r3
 800e6d2:	693b      	ldr	r3, [r7, #16]
 800e6d4:	899b      	ldrh	r3, [r3, #12]
 800e6d6:	fb03 f302 	mul.w	r3, r3, r2
 800e6da:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e6dc:	e019      	b.n	800e712 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	6979      	ldr	r1, [r7, #20]
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f7ff fca3 	bl	800e02e <get_fat>
 800e6e8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e6ea:	697b      	ldr	r3, [r7, #20]
 800e6ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e6f0:	d101      	bne.n	800e6f6 <dir_sdi+0x90>
 800e6f2:	2301      	movs	r3, #1
 800e6f4:	e03c      	b.n	800e770 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e6f6:	697b      	ldr	r3, [r7, #20]
 800e6f8:	2b01      	cmp	r3, #1
 800e6fa:	d904      	bls.n	800e706 <dir_sdi+0xa0>
 800e6fc:	693b      	ldr	r3, [r7, #16]
 800e6fe:	699b      	ldr	r3, [r3, #24]
 800e700:	697a      	ldr	r2, [r7, #20]
 800e702:	429a      	cmp	r2, r3
 800e704:	d301      	bcc.n	800e70a <dir_sdi+0xa4>
 800e706:	2302      	movs	r3, #2
 800e708:	e032      	b.n	800e770 <dir_sdi+0x10a>
			ofs -= csz;
 800e70a:	683a      	ldr	r2, [r7, #0]
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	1ad3      	subs	r3, r2, r3
 800e710:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e712:	683a      	ldr	r2, [r7, #0]
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	429a      	cmp	r2, r3
 800e718:	d2e1      	bcs.n	800e6de <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800e71a:	6979      	ldr	r1, [r7, #20]
 800e71c:	6938      	ldr	r0, [r7, #16]
 800e71e:	f7ff fc67 	bl	800dff0 <clust2sect>
 800e722:	4602      	mov	r2, r0
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	697a      	ldr	r2, [r7, #20]
 800e72c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	69db      	ldr	r3, [r3, #28]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d101      	bne.n	800e73a <dir_sdi+0xd4>
 800e736:	2302      	movs	r3, #2
 800e738:	e01a      	b.n	800e770 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	69da      	ldr	r2, [r3, #28]
 800e73e:	693b      	ldr	r3, [r7, #16]
 800e740:	899b      	ldrh	r3, [r3, #12]
 800e742:	4619      	mov	r1, r3
 800e744:	683b      	ldr	r3, [r7, #0]
 800e746:	fbb3 f3f1 	udiv	r3, r3, r1
 800e74a:	441a      	add	r2, r3
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e750:	693b      	ldr	r3, [r7, #16]
 800e752:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e756:	693b      	ldr	r3, [r7, #16]
 800e758:	899b      	ldrh	r3, [r3, #12]
 800e75a:	461a      	mov	r2, r3
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	fbb3 f0f2 	udiv	r0, r3, r2
 800e762:	fb02 f200 	mul.w	r2, r2, r0
 800e766:	1a9b      	subs	r3, r3, r2
 800e768:	18ca      	adds	r2, r1, r3
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e76e:	2300      	movs	r3, #0
}
 800e770:	4618      	mov	r0, r3
 800e772:	3718      	adds	r7, #24
 800e774:	46bd      	mov	sp, r7
 800e776:	bd80      	pop	{r7, pc}

0800e778 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b086      	sub	sp, #24
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
 800e780:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	695b      	ldr	r3, [r3, #20]
 800e78c:	3320      	adds	r3, #32
 800e78e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	69db      	ldr	r3, [r3, #28]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d003      	beq.n	800e7a0 <dir_next+0x28>
 800e798:	68bb      	ldr	r3, [r7, #8]
 800e79a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e79e:	d301      	bcc.n	800e7a4 <dir_next+0x2c>
 800e7a0:	2304      	movs	r3, #4
 800e7a2:	e0bb      	b.n	800e91c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	899b      	ldrh	r3, [r3, #12]
 800e7a8:	461a      	mov	r2, r3
 800e7aa:	68bb      	ldr	r3, [r7, #8]
 800e7ac:	fbb3 f1f2 	udiv	r1, r3, r2
 800e7b0:	fb02 f201 	mul.w	r2, r2, r1
 800e7b4:	1a9b      	subs	r3, r3, r2
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	f040 809d 	bne.w	800e8f6 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	69db      	ldr	r3, [r3, #28]
 800e7c0:	1c5a      	adds	r2, r3, #1
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	699b      	ldr	r3, [r3, #24]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d10b      	bne.n	800e7e6 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e7ce:	68bb      	ldr	r3, [r7, #8]
 800e7d0:	095b      	lsrs	r3, r3, #5
 800e7d2:	68fa      	ldr	r2, [r7, #12]
 800e7d4:	8912      	ldrh	r2, [r2, #8]
 800e7d6:	4293      	cmp	r3, r2
 800e7d8:	f0c0 808d 	bcc.w	800e8f6 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	2200      	movs	r2, #0
 800e7e0:	61da      	str	r2, [r3, #28]
 800e7e2:	2304      	movs	r3, #4
 800e7e4:	e09a      	b.n	800e91c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	899b      	ldrh	r3, [r3, #12]
 800e7ea:	461a      	mov	r2, r3
 800e7ec:	68bb      	ldr	r3, [r7, #8]
 800e7ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800e7f2:	68fa      	ldr	r2, [r7, #12]
 800e7f4:	8952      	ldrh	r2, [r2, #10]
 800e7f6:	3a01      	subs	r2, #1
 800e7f8:	4013      	ands	r3, r2
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d17b      	bne.n	800e8f6 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e7fe:	687a      	ldr	r2, [r7, #4]
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	699b      	ldr	r3, [r3, #24]
 800e804:	4619      	mov	r1, r3
 800e806:	4610      	mov	r0, r2
 800e808:	f7ff fc11 	bl	800e02e <get_fat>
 800e80c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e80e:	697b      	ldr	r3, [r7, #20]
 800e810:	2b01      	cmp	r3, #1
 800e812:	d801      	bhi.n	800e818 <dir_next+0xa0>
 800e814:	2302      	movs	r3, #2
 800e816:	e081      	b.n	800e91c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e818:	697b      	ldr	r3, [r7, #20]
 800e81a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e81e:	d101      	bne.n	800e824 <dir_next+0xac>
 800e820:	2301      	movs	r3, #1
 800e822:	e07b      	b.n	800e91c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	699b      	ldr	r3, [r3, #24]
 800e828:	697a      	ldr	r2, [r7, #20]
 800e82a:	429a      	cmp	r2, r3
 800e82c:	d359      	bcc.n	800e8e2 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d104      	bne.n	800e83e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	2200      	movs	r2, #0
 800e838:	61da      	str	r2, [r3, #28]
 800e83a:	2304      	movs	r3, #4
 800e83c:	e06e      	b.n	800e91c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e83e:	687a      	ldr	r2, [r7, #4]
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	699b      	ldr	r3, [r3, #24]
 800e844:	4619      	mov	r1, r3
 800e846:	4610      	mov	r0, r2
 800e848:	f7ff fe3d 	bl	800e4c6 <create_chain>
 800e84c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e84e:	697b      	ldr	r3, [r7, #20]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d101      	bne.n	800e858 <dir_next+0xe0>
 800e854:	2307      	movs	r3, #7
 800e856:	e061      	b.n	800e91c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e858:	697b      	ldr	r3, [r7, #20]
 800e85a:	2b01      	cmp	r3, #1
 800e85c:	d101      	bne.n	800e862 <dir_next+0xea>
 800e85e:	2302      	movs	r3, #2
 800e860:	e05c      	b.n	800e91c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e862:	697b      	ldr	r3, [r7, #20]
 800e864:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e868:	d101      	bne.n	800e86e <dir_next+0xf6>
 800e86a:	2301      	movs	r3, #1
 800e86c:	e056      	b.n	800e91c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e86e:	68f8      	ldr	r0, [r7, #12]
 800e870:	f7ff fadc 	bl	800de2c <sync_window>
 800e874:	4603      	mov	r3, r0
 800e876:	2b00      	cmp	r3, #0
 800e878:	d001      	beq.n	800e87e <dir_next+0x106>
 800e87a:	2301      	movs	r3, #1
 800e87c:	e04e      	b.n	800e91c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	899b      	ldrh	r3, [r3, #12]
 800e888:	461a      	mov	r2, r3
 800e88a:	2100      	movs	r1, #0
 800e88c:	f7ff f905 	bl	800da9a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e890:	2300      	movs	r3, #0
 800e892:	613b      	str	r3, [r7, #16]
 800e894:	6979      	ldr	r1, [r7, #20]
 800e896:	68f8      	ldr	r0, [r7, #12]
 800e898:	f7ff fbaa 	bl	800dff0 <clust2sect>
 800e89c:	4602      	mov	r2, r0
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	631a      	str	r2, [r3, #48]	; 0x30
 800e8a2:	e012      	b.n	800e8ca <dir_next+0x152>
						fs->wflag = 1;
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	2201      	movs	r2, #1
 800e8a8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e8aa:	68f8      	ldr	r0, [r7, #12]
 800e8ac:	f7ff fabe 	bl	800de2c <sync_window>
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d001      	beq.n	800e8ba <dir_next+0x142>
 800e8b6:	2301      	movs	r3, #1
 800e8b8:	e030      	b.n	800e91c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e8ba:	693b      	ldr	r3, [r7, #16]
 800e8bc:	3301      	adds	r3, #1
 800e8be:	613b      	str	r3, [r7, #16]
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8c4:	1c5a      	adds	r2, r3, #1
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	631a      	str	r2, [r3, #48]	; 0x30
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	895b      	ldrh	r3, [r3, #10]
 800e8ce:	461a      	mov	r2, r3
 800e8d0:	693b      	ldr	r3, [r7, #16]
 800e8d2:	4293      	cmp	r3, r2
 800e8d4:	d3e6      	bcc.n	800e8a4 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e8da:	693b      	ldr	r3, [r7, #16]
 800e8dc:	1ad2      	subs	r2, r2, r3
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	697a      	ldr	r2, [r7, #20]
 800e8e6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e8e8:	6979      	ldr	r1, [r7, #20]
 800e8ea:	68f8      	ldr	r0, [r7, #12]
 800e8ec:	f7ff fb80 	bl	800dff0 <clust2sect>
 800e8f0:	4602      	mov	r2, r0
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	68ba      	ldr	r2, [r7, #8]
 800e8fa:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	899b      	ldrh	r3, [r3, #12]
 800e906:	461a      	mov	r2, r3
 800e908:	68bb      	ldr	r3, [r7, #8]
 800e90a:	fbb3 f0f2 	udiv	r0, r3, r2
 800e90e:	fb02 f200 	mul.w	r2, r2, r0
 800e912:	1a9b      	subs	r3, r3, r2
 800e914:	18ca      	adds	r2, r1, r3
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e91a:	2300      	movs	r3, #0
}
 800e91c:	4618      	mov	r0, r3
 800e91e:	3718      	adds	r7, #24
 800e920:	46bd      	mov	sp, r7
 800e922:	bd80      	pop	{r7, pc}

0800e924 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e924:	b580      	push	{r7, lr}
 800e926:	b086      	sub	sp, #24
 800e928:	af00      	add	r7, sp, #0
 800e92a:	6078      	str	r0, [r7, #4]
 800e92c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e934:	2100      	movs	r1, #0
 800e936:	6878      	ldr	r0, [r7, #4]
 800e938:	f7ff fe95 	bl	800e666 <dir_sdi>
 800e93c:	4603      	mov	r3, r0
 800e93e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e940:	7dfb      	ldrb	r3, [r7, #23]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d12b      	bne.n	800e99e <dir_alloc+0x7a>
		n = 0;
 800e946:	2300      	movs	r3, #0
 800e948:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	69db      	ldr	r3, [r3, #28]
 800e94e:	4619      	mov	r1, r3
 800e950:	68f8      	ldr	r0, [r7, #12]
 800e952:	f7ff faaf 	bl	800deb4 <move_window>
 800e956:	4603      	mov	r3, r0
 800e958:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e95a:	7dfb      	ldrb	r3, [r7, #23]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d11d      	bne.n	800e99c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	6a1b      	ldr	r3, [r3, #32]
 800e964:	781b      	ldrb	r3, [r3, #0]
 800e966:	2be5      	cmp	r3, #229	; 0xe5
 800e968:	d004      	beq.n	800e974 <dir_alloc+0x50>
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	6a1b      	ldr	r3, [r3, #32]
 800e96e:	781b      	ldrb	r3, [r3, #0]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d107      	bne.n	800e984 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e974:	693b      	ldr	r3, [r7, #16]
 800e976:	3301      	adds	r3, #1
 800e978:	613b      	str	r3, [r7, #16]
 800e97a:	693a      	ldr	r2, [r7, #16]
 800e97c:	683b      	ldr	r3, [r7, #0]
 800e97e:	429a      	cmp	r2, r3
 800e980:	d102      	bne.n	800e988 <dir_alloc+0x64>
 800e982:	e00c      	b.n	800e99e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e984:	2300      	movs	r3, #0
 800e986:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e988:	2101      	movs	r1, #1
 800e98a:	6878      	ldr	r0, [r7, #4]
 800e98c:	f7ff fef4 	bl	800e778 <dir_next>
 800e990:	4603      	mov	r3, r0
 800e992:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e994:	7dfb      	ldrb	r3, [r7, #23]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d0d7      	beq.n	800e94a <dir_alloc+0x26>
 800e99a:	e000      	b.n	800e99e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e99c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e99e:	7dfb      	ldrb	r3, [r7, #23]
 800e9a0:	2b04      	cmp	r3, #4
 800e9a2:	d101      	bne.n	800e9a8 <dir_alloc+0x84>
 800e9a4:	2307      	movs	r3, #7
 800e9a6:	75fb      	strb	r3, [r7, #23]
	return res;
 800e9a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	3718      	adds	r7, #24
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	bd80      	pop	{r7, pc}

0800e9b2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e9b2:	b580      	push	{r7, lr}
 800e9b4:	b084      	sub	sp, #16
 800e9b6:	af00      	add	r7, sp, #0
 800e9b8:	6078      	str	r0, [r7, #4]
 800e9ba:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e9bc:	683b      	ldr	r3, [r7, #0]
 800e9be:	331a      	adds	r3, #26
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	f7fe ffc7 	bl	800d954 <ld_word>
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	781b      	ldrb	r3, [r3, #0]
 800e9ce:	2b03      	cmp	r3, #3
 800e9d0:	d109      	bne.n	800e9e6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e9d2:	683b      	ldr	r3, [r7, #0]
 800e9d4:	3314      	adds	r3, #20
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	f7fe ffbc 	bl	800d954 <ld_word>
 800e9dc:	4603      	mov	r3, r0
 800e9de:	041b      	lsls	r3, r3, #16
 800e9e0:	68fa      	ldr	r2, [r7, #12]
 800e9e2:	4313      	orrs	r3, r2
 800e9e4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
}
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	3710      	adds	r7, #16
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	bd80      	pop	{r7, pc}

0800e9f0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b084      	sub	sp, #16
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	60f8      	str	r0, [r7, #12]
 800e9f8:	60b9      	str	r1, [r7, #8]
 800e9fa:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e9fc:	68bb      	ldr	r3, [r7, #8]
 800e9fe:	331a      	adds	r3, #26
 800ea00:	687a      	ldr	r2, [r7, #4]
 800ea02:	b292      	uxth	r2, r2
 800ea04:	4611      	mov	r1, r2
 800ea06:	4618      	mov	r0, r3
 800ea08:	f7fe ffdf 	bl	800d9ca <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	781b      	ldrb	r3, [r3, #0]
 800ea10:	2b03      	cmp	r3, #3
 800ea12:	d109      	bne.n	800ea28 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ea14:	68bb      	ldr	r3, [r7, #8]
 800ea16:	f103 0214 	add.w	r2, r3, #20
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	0c1b      	lsrs	r3, r3, #16
 800ea1e:	b29b      	uxth	r3, r3
 800ea20:	4619      	mov	r1, r3
 800ea22:	4610      	mov	r0, r2
 800ea24:	f7fe ffd1 	bl	800d9ca <st_word>
	}
}
 800ea28:	bf00      	nop
 800ea2a:	3710      	adds	r7, #16
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bd80      	pop	{r7, pc}

0800ea30 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b086      	sub	sp, #24
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
 800ea38:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800ea3a:	2304      	movs	r3, #4
 800ea3c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800ea44:	e03c      	b.n	800eac0 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	69db      	ldr	r3, [r3, #28]
 800ea4a:	4619      	mov	r1, r3
 800ea4c:	6938      	ldr	r0, [r7, #16]
 800ea4e:	f7ff fa31 	bl	800deb4 <move_window>
 800ea52:	4603      	mov	r3, r0
 800ea54:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ea56:	7dfb      	ldrb	r3, [r7, #23]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d136      	bne.n	800eaca <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	6a1b      	ldr	r3, [r3, #32]
 800ea60:	781b      	ldrb	r3, [r3, #0]
 800ea62:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800ea64:	7bfb      	ldrb	r3, [r7, #15]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d102      	bne.n	800ea70 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800ea6a:	2304      	movs	r3, #4
 800ea6c:	75fb      	strb	r3, [r7, #23]
 800ea6e:	e031      	b.n	800ead4 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	6a1b      	ldr	r3, [r3, #32]
 800ea74:	330b      	adds	r3, #11
 800ea76:	781b      	ldrb	r3, [r3, #0]
 800ea78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ea7c:	73bb      	strb	r3, [r7, #14]
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	7bba      	ldrb	r2, [r7, #14]
 800ea82:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800ea84:	7bfb      	ldrb	r3, [r7, #15]
 800ea86:	2be5      	cmp	r3, #229	; 0xe5
 800ea88:	d011      	beq.n	800eaae <dir_read+0x7e>
 800ea8a:	7bfb      	ldrb	r3, [r7, #15]
 800ea8c:	2b2e      	cmp	r3, #46	; 0x2e
 800ea8e:	d00e      	beq.n	800eaae <dir_read+0x7e>
 800ea90:	7bbb      	ldrb	r3, [r7, #14]
 800ea92:	2b0f      	cmp	r3, #15
 800ea94:	d00b      	beq.n	800eaae <dir_read+0x7e>
 800ea96:	7bbb      	ldrb	r3, [r7, #14]
 800ea98:	f023 0320 	bic.w	r3, r3, #32
 800ea9c:	2b08      	cmp	r3, #8
 800ea9e:	bf0c      	ite	eq
 800eaa0:	2301      	moveq	r3, #1
 800eaa2:	2300      	movne	r3, #0
 800eaa4:	b2db      	uxtb	r3, r3
 800eaa6:	461a      	mov	r2, r3
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	4293      	cmp	r3, r2
 800eaac:	d00f      	beq.n	800eace <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800eaae:	2100      	movs	r1, #0
 800eab0:	6878      	ldr	r0, [r7, #4]
 800eab2:	f7ff fe61 	bl	800e778 <dir_next>
 800eab6:	4603      	mov	r3, r0
 800eab8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800eaba:	7dfb      	ldrb	r3, [r7, #23]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d108      	bne.n	800ead2 <dir_read+0xa2>
	while (dp->sect) {
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	69db      	ldr	r3, [r3, #28]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d1be      	bne.n	800ea46 <dir_read+0x16>
 800eac8:	e004      	b.n	800ead4 <dir_read+0xa4>
		if (res != FR_OK) break;
 800eaca:	bf00      	nop
 800eacc:	e002      	b.n	800ead4 <dir_read+0xa4>
				break;
 800eace:	bf00      	nop
 800ead0:	e000      	b.n	800ead4 <dir_read+0xa4>
		if (res != FR_OK) break;
 800ead2:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800ead4:	7dfb      	ldrb	r3, [r7, #23]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d002      	beq.n	800eae0 <dir_read+0xb0>
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	2200      	movs	r2, #0
 800eade:	61da      	str	r2, [r3, #28]
	return res;
 800eae0:	7dfb      	ldrb	r3, [r7, #23]
}
 800eae2:	4618      	mov	r0, r3
 800eae4:	3718      	adds	r7, #24
 800eae6:	46bd      	mov	sp, r7
 800eae8:	bd80      	pop	{r7, pc}

0800eaea <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800eaea:	b580      	push	{r7, lr}
 800eaec:	b086      	sub	sp, #24
 800eaee:	af00      	add	r7, sp, #0
 800eaf0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800eaf8:	2100      	movs	r1, #0
 800eafa:	6878      	ldr	r0, [r7, #4]
 800eafc:	f7ff fdb3 	bl	800e666 <dir_sdi>
 800eb00:	4603      	mov	r3, r0
 800eb02:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800eb04:	7dfb      	ldrb	r3, [r7, #23]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d001      	beq.n	800eb0e <dir_find+0x24>
 800eb0a:	7dfb      	ldrb	r3, [r7, #23]
 800eb0c:	e03e      	b.n	800eb8c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	69db      	ldr	r3, [r3, #28]
 800eb12:	4619      	mov	r1, r3
 800eb14:	6938      	ldr	r0, [r7, #16]
 800eb16:	f7ff f9cd 	bl	800deb4 <move_window>
 800eb1a:	4603      	mov	r3, r0
 800eb1c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800eb1e:	7dfb      	ldrb	r3, [r7, #23]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d12f      	bne.n	800eb84 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	6a1b      	ldr	r3, [r3, #32]
 800eb28:	781b      	ldrb	r3, [r3, #0]
 800eb2a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800eb2c:	7bfb      	ldrb	r3, [r7, #15]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d102      	bne.n	800eb38 <dir_find+0x4e>
 800eb32:	2304      	movs	r3, #4
 800eb34:	75fb      	strb	r3, [r7, #23]
 800eb36:	e028      	b.n	800eb8a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	6a1b      	ldr	r3, [r3, #32]
 800eb3c:	330b      	adds	r3, #11
 800eb3e:	781b      	ldrb	r3, [r3, #0]
 800eb40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eb44:	b2da      	uxtb	r2, r3
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	6a1b      	ldr	r3, [r3, #32]
 800eb4e:	330b      	adds	r3, #11
 800eb50:	781b      	ldrb	r3, [r3, #0]
 800eb52:	f003 0308 	and.w	r3, r3, #8
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d10a      	bne.n	800eb70 <dir_find+0x86>
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	6a18      	ldr	r0, [r3, #32]
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	3324      	adds	r3, #36	; 0x24
 800eb62:	220b      	movs	r2, #11
 800eb64:	4619      	mov	r1, r3
 800eb66:	f7fe ffb2 	bl	800dace <mem_cmp>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d00b      	beq.n	800eb88 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800eb70:	2100      	movs	r1, #0
 800eb72:	6878      	ldr	r0, [r7, #4]
 800eb74:	f7ff fe00 	bl	800e778 <dir_next>
 800eb78:	4603      	mov	r3, r0
 800eb7a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800eb7c:	7dfb      	ldrb	r3, [r7, #23]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d0c5      	beq.n	800eb0e <dir_find+0x24>
 800eb82:	e002      	b.n	800eb8a <dir_find+0xa0>
		if (res != FR_OK) break;
 800eb84:	bf00      	nop
 800eb86:	e000      	b.n	800eb8a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800eb88:	bf00      	nop

	return res;
 800eb8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	3718      	adds	r7, #24
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bd80      	pop	{r7, pc}

0800eb94 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b084      	sub	sp, #16
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800eba2:	2101      	movs	r1, #1
 800eba4:	6878      	ldr	r0, [r7, #4]
 800eba6:	f7ff febd 	bl	800e924 <dir_alloc>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ebae:	7bfb      	ldrb	r3, [r7, #15]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d11c      	bne.n	800ebee <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	69db      	ldr	r3, [r3, #28]
 800ebb8:	4619      	mov	r1, r3
 800ebba:	68b8      	ldr	r0, [r7, #8]
 800ebbc:	f7ff f97a 	bl	800deb4 <move_window>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ebc4:	7bfb      	ldrb	r3, [r7, #15]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d111      	bne.n	800ebee <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	6a1b      	ldr	r3, [r3, #32]
 800ebce:	2220      	movs	r2, #32
 800ebd0:	2100      	movs	r1, #0
 800ebd2:	4618      	mov	r0, r3
 800ebd4:	f7fe ff61 	bl	800da9a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	6a18      	ldr	r0, [r3, #32]
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	3324      	adds	r3, #36	; 0x24
 800ebe0:	220b      	movs	r2, #11
 800ebe2:	4619      	mov	r1, r3
 800ebe4:	f7fe ff38 	bl	800da58 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ebe8:	68bb      	ldr	r3, [r7, #8]
 800ebea:	2201      	movs	r2, #1
 800ebec:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ebee:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	3710      	adds	r7, #16
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	bd80      	pop	{r7, pc}

0800ebf8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b086      	sub	sp, #24
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
 800ec00:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800ec02:	683b      	ldr	r3, [r7, #0]
 800ec04:	2200      	movs	r2, #0
 800ec06:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	69db      	ldr	r3, [r3, #28]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d04e      	beq.n	800ecae <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800ec10:	2300      	movs	r3, #0
 800ec12:	613b      	str	r3, [r7, #16]
 800ec14:	693b      	ldr	r3, [r7, #16]
 800ec16:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800ec18:	e021      	b.n	800ec5e <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	6a1a      	ldr	r2, [r3, #32]
 800ec1e:	697b      	ldr	r3, [r7, #20]
 800ec20:	1c59      	adds	r1, r3, #1
 800ec22:	6179      	str	r1, [r7, #20]
 800ec24:	4413      	add	r3, r2
 800ec26:	781b      	ldrb	r3, [r3, #0]
 800ec28:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800ec2a:	7bfb      	ldrb	r3, [r7, #15]
 800ec2c:	2b20      	cmp	r3, #32
 800ec2e:	d100      	bne.n	800ec32 <get_fileinfo+0x3a>
 800ec30:	e015      	b.n	800ec5e <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800ec32:	7bfb      	ldrb	r3, [r7, #15]
 800ec34:	2b05      	cmp	r3, #5
 800ec36:	d101      	bne.n	800ec3c <get_fileinfo+0x44>
 800ec38:	23e5      	movs	r3, #229	; 0xe5
 800ec3a:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800ec3c:	697b      	ldr	r3, [r7, #20]
 800ec3e:	2b09      	cmp	r3, #9
 800ec40:	d106      	bne.n	800ec50 <get_fileinfo+0x58>
 800ec42:	693b      	ldr	r3, [r7, #16]
 800ec44:	1c5a      	adds	r2, r3, #1
 800ec46:	613a      	str	r2, [r7, #16]
 800ec48:	683a      	ldr	r2, [r7, #0]
 800ec4a:	4413      	add	r3, r2
 800ec4c:	222e      	movs	r2, #46	; 0x2e
 800ec4e:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800ec50:	693b      	ldr	r3, [r7, #16]
 800ec52:	1c5a      	adds	r2, r3, #1
 800ec54:	613a      	str	r2, [r7, #16]
 800ec56:	683a      	ldr	r2, [r7, #0]
 800ec58:	4413      	add	r3, r2
 800ec5a:	7bfa      	ldrb	r2, [r7, #15]
 800ec5c:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800ec5e:	697b      	ldr	r3, [r7, #20]
 800ec60:	2b0a      	cmp	r3, #10
 800ec62:	d9da      	bls.n	800ec1a <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800ec64:	683a      	ldr	r2, [r7, #0]
 800ec66:	693b      	ldr	r3, [r7, #16]
 800ec68:	4413      	add	r3, r2
 800ec6a:	3309      	adds	r3, #9
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	6a1b      	ldr	r3, [r3, #32]
 800ec74:	7ada      	ldrb	r2, [r3, #11]
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	6a1b      	ldr	r3, [r3, #32]
 800ec7e:	331c      	adds	r3, #28
 800ec80:	4618      	mov	r0, r3
 800ec82:	f7fe fe7f 	bl	800d984 <ld_dword>
 800ec86:	4602      	mov	r2, r0
 800ec88:	683b      	ldr	r3, [r7, #0]
 800ec8a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	6a1b      	ldr	r3, [r3, #32]
 800ec90:	3316      	adds	r3, #22
 800ec92:	4618      	mov	r0, r3
 800ec94:	f7fe fe76 	bl	800d984 <ld_dword>
 800ec98:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800ec9a:	68bb      	ldr	r3, [r7, #8]
 800ec9c:	b29a      	uxth	r2, r3
 800ec9e:	683b      	ldr	r3, [r7, #0]
 800eca0:	80da      	strh	r2, [r3, #6]
 800eca2:	68bb      	ldr	r3, [r7, #8]
 800eca4:	0c1b      	lsrs	r3, r3, #16
 800eca6:	b29a      	uxth	r2, r3
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	809a      	strh	r2, [r3, #4]
 800ecac:	e000      	b.n	800ecb0 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ecae:	bf00      	nop
}
 800ecb0:	3718      	adds	r7, #24
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	bd80      	pop	{r7, pc}
	...

0800ecb8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b088      	sub	sp, #32
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
 800ecc0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ecc2:	683b      	ldr	r3, [r7, #0]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	60fb      	str	r3, [r7, #12]
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	3324      	adds	r3, #36	; 0x24
 800eccc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ecce:	220b      	movs	r2, #11
 800ecd0:	2120      	movs	r1, #32
 800ecd2:	68b8      	ldr	r0, [r7, #8]
 800ecd4:	f7fe fee1 	bl	800da9a <mem_set>
	si = i = 0; ni = 8;
 800ecd8:	2300      	movs	r3, #0
 800ecda:	613b      	str	r3, [r7, #16]
 800ecdc:	693b      	ldr	r3, [r7, #16]
 800ecde:	617b      	str	r3, [r7, #20]
 800ece0:	2308      	movs	r3, #8
 800ece2:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ece4:	697b      	ldr	r3, [r7, #20]
 800ece6:	1c5a      	adds	r2, r3, #1
 800ece8:	617a      	str	r2, [r7, #20]
 800ecea:	68fa      	ldr	r2, [r7, #12]
 800ecec:	4413      	add	r3, r2
 800ecee:	781b      	ldrb	r3, [r3, #0]
 800ecf0:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ecf2:	7ffb      	ldrb	r3, [r7, #31]
 800ecf4:	2b20      	cmp	r3, #32
 800ecf6:	d94e      	bls.n	800ed96 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800ecf8:	7ffb      	ldrb	r3, [r7, #31]
 800ecfa:	2b2f      	cmp	r3, #47	; 0x2f
 800ecfc:	d006      	beq.n	800ed0c <create_name+0x54>
 800ecfe:	7ffb      	ldrb	r3, [r7, #31]
 800ed00:	2b5c      	cmp	r3, #92	; 0x5c
 800ed02:	d110      	bne.n	800ed26 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ed04:	e002      	b.n	800ed0c <create_name+0x54>
 800ed06:	697b      	ldr	r3, [r7, #20]
 800ed08:	3301      	adds	r3, #1
 800ed0a:	617b      	str	r3, [r7, #20]
 800ed0c:	68fa      	ldr	r2, [r7, #12]
 800ed0e:	697b      	ldr	r3, [r7, #20]
 800ed10:	4413      	add	r3, r2
 800ed12:	781b      	ldrb	r3, [r3, #0]
 800ed14:	2b2f      	cmp	r3, #47	; 0x2f
 800ed16:	d0f6      	beq.n	800ed06 <create_name+0x4e>
 800ed18:	68fa      	ldr	r2, [r7, #12]
 800ed1a:	697b      	ldr	r3, [r7, #20]
 800ed1c:	4413      	add	r3, r2
 800ed1e:	781b      	ldrb	r3, [r3, #0]
 800ed20:	2b5c      	cmp	r3, #92	; 0x5c
 800ed22:	d0f0      	beq.n	800ed06 <create_name+0x4e>
			break;
 800ed24:	e038      	b.n	800ed98 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800ed26:	7ffb      	ldrb	r3, [r7, #31]
 800ed28:	2b2e      	cmp	r3, #46	; 0x2e
 800ed2a:	d003      	beq.n	800ed34 <create_name+0x7c>
 800ed2c:	693a      	ldr	r2, [r7, #16]
 800ed2e:	69bb      	ldr	r3, [r7, #24]
 800ed30:	429a      	cmp	r2, r3
 800ed32:	d30c      	bcc.n	800ed4e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800ed34:	69bb      	ldr	r3, [r7, #24]
 800ed36:	2b0b      	cmp	r3, #11
 800ed38:	d002      	beq.n	800ed40 <create_name+0x88>
 800ed3a:	7ffb      	ldrb	r3, [r7, #31]
 800ed3c:	2b2e      	cmp	r3, #46	; 0x2e
 800ed3e:	d001      	beq.n	800ed44 <create_name+0x8c>
 800ed40:	2306      	movs	r3, #6
 800ed42:	e044      	b.n	800edce <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800ed44:	2308      	movs	r3, #8
 800ed46:	613b      	str	r3, [r7, #16]
 800ed48:	230b      	movs	r3, #11
 800ed4a:	61bb      	str	r3, [r7, #24]
			continue;
 800ed4c:	e022      	b.n	800ed94 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ed4e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	da04      	bge.n	800ed60 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ed56:	7ffb      	ldrb	r3, [r7, #31]
 800ed58:	3b80      	subs	r3, #128	; 0x80
 800ed5a:	4a1f      	ldr	r2, [pc, #124]	; (800edd8 <create_name+0x120>)
 800ed5c:	5cd3      	ldrb	r3, [r2, r3]
 800ed5e:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800ed60:	7ffb      	ldrb	r3, [r7, #31]
 800ed62:	4619      	mov	r1, r3
 800ed64:	481d      	ldr	r0, [pc, #116]	; (800eddc <create_name+0x124>)
 800ed66:	f7fe fed9 	bl	800db1c <chk_chr>
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d001      	beq.n	800ed74 <create_name+0xbc>
 800ed70:	2306      	movs	r3, #6
 800ed72:	e02c      	b.n	800edce <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800ed74:	7ffb      	ldrb	r3, [r7, #31]
 800ed76:	2b60      	cmp	r3, #96	; 0x60
 800ed78:	d905      	bls.n	800ed86 <create_name+0xce>
 800ed7a:	7ffb      	ldrb	r3, [r7, #31]
 800ed7c:	2b7a      	cmp	r3, #122	; 0x7a
 800ed7e:	d802      	bhi.n	800ed86 <create_name+0xce>
 800ed80:	7ffb      	ldrb	r3, [r7, #31]
 800ed82:	3b20      	subs	r3, #32
 800ed84:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800ed86:	693b      	ldr	r3, [r7, #16]
 800ed88:	1c5a      	adds	r2, r3, #1
 800ed8a:	613a      	str	r2, [r7, #16]
 800ed8c:	68ba      	ldr	r2, [r7, #8]
 800ed8e:	4413      	add	r3, r2
 800ed90:	7ffa      	ldrb	r2, [r7, #31]
 800ed92:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ed94:	e7a6      	b.n	800ece4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ed96:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800ed98:	68fa      	ldr	r2, [r7, #12]
 800ed9a:	697b      	ldr	r3, [r7, #20]
 800ed9c:	441a      	add	r2, r3
 800ed9e:	683b      	ldr	r3, [r7, #0]
 800eda0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800eda2:	693b      	ldr	r3, [r7, #16]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d101      	bne.n	800edac <create_name+0xf4>
 800eda8:	2306      	movs	r3, #6
 800edaa:	e010      	b.n	800edce <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	781b      	ldrb	r3, [r3, #0]
 800edb0:	2be5      	cmp	r3, #229	; 0xe5
 800edb2:	d102      	bne.n	800edba <create_name+0x102>
 800edb4:	68bb      	ldr	r3, [r7, #8]
 800edb6:	2205      	movs	r2, #5
 800edb8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800edba:	7ffb      	ldrb	r3, [r7, #31]
 800edbc:	2b20      	cmp	r3, #32
 800edbe:	d801      	bhi.n	800edc4 <create_name+0x10c>
 800edc0:	2204      	movs	r2, #4
 800edc2:	e000      	b.n	800edc6 <create_name+0x10e>
 800edc4:	2200      	movs	r2, #0
 800edc6:	68bb      	ldr	r3, [r7, #8]
 800edc8:	330b      	adds	r3, #11
 800edca:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800edcc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800edce:	4618      	mov	r0, r3
 800edd0:	3720      	adds	r7, #32
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}
 800edd6:	bf00      	nop
 800edd8:	08016b8c 	.word	0x08016b8c
 800eddc:	08016b14 	.word	0x08016b14

0800ede0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ede0:	b580      	push	{r7, lr}
 800ede2:	b086      	sub	sp, #24
 800ede4:	af00      	add	r7, sp, #0
 800ede6:	6078      	str	r0, [r7, #4]
 800ede8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800edee:	693b      	ldr	r3, [r7, #16]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800edf4:	e002      	b.n	800edfc <follow_path+0x1c>
 800edf6:	683b      	ldr	r3, [r7, #0]
 800edf8:	3301      	adds	r3, #1
 800edfa:	603b      	str	r3, [r7, #0]
 800edfc:	683b      	ldr	r3, [r7, #0]
 800edfe:	781b      	ldrb	r3, [r3, #0]
 800ee00:	2b2f      	cmp	r3, #47	; 0x2f
 800ee02:	d0f8      	beq.n	800edf6 <follow_path+0x16>
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	781b      	ldrb	r3, [r3, #0]
 800ee08:	2b5c      	cmp	r3, #92	; 0x5c
 800ee0a:	d0f4      	beq.n	800edf6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ee0c:	693b      	ldr	r3, [r7, #16]
 800ee0e:	2200      	movs	r2, #0
 800ee10:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ee12:	683b      	ldr	r3, [r7, #0]
 800ee14:	781b      	ldrb	r3, [r3, #0]
 800ee16:	2b1f      	cmp	r3, #31
 800ee18:	d80a      	bhi.n	800ee30 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	2280      	movs	r2, #128	; 0x80
 800ee1e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ee22:	2100      	movs	r1, #0
 800ee24:	6878      	ldr	r0, [r7, #4]
 800ee26:	f7ff fc1e 	bl	800e666 <dir_sdi>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	75fb      	strb	r3, [r7, #23]
 800ee2e:	e048      	b.n	800eec2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ee30:	463b      	mov	r3, r7
 800ee32:	4619      	mov	r1, r3
 800ee34:	6878      	ldr	r0, [r7, #4]
 800ee36:	f7ff ff3f 	bl	800ecb8 <create_name>
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ee3e:	7dfb      	ldrb	r3, [r7, #23]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d139      	bne.n	800eeb8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ee44:	6878      	ldr	r0, [r7, #4]
 800ee46:	f7ff fe50 	bl	800eaea <dir_find>
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ee54:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ee56:	7dfb      	ldrb	r3, [r7, #23]
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d00a      	beq.n	800ee72 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ee5c:	7dfb      	ldrb	r3, [r7, #23]
 800ee5e:	2b04      	cmp	r3, #4
 800ee60:	d12c      	bne.n	800eebc <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ee62:	7afb      	ldrb	r3, [r7, #11]
 800ee64:	f003 0304 	and.w	r3, r3, #4
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d127      	bne.n	800eebc <follow_path+0xdc>
 800ee6c:	2305      	movs	r3, #5
 800ee6e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ee70:	e024      	b.n	800eebc <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ee72:	7afb      	ldrb	r3, [r7, #11]
 800ee74:	f003 0304 	and.w	r3, r3, #4
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d121      	bne.n	800eec0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ee7c:	693b      	ldr	r3, [r7, #16]
 800ee7e:	799b      	ldrb	r3, [r3, #6]
 800ee80:	f003 0310 	and.w	r3, r3, #16
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d102      	bne.n	800ee8e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ee88:	2305      	movs	r3, #5
 800ee8a:	75fb      	strb	r3, [r7, #23]
 800ee8c:	e019      	b.n	800eec2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	695b      	ldr	r3, [r3, #20]
 800ee98:	68fa      	ldr	r2, [r7, #12]
 800ee9a:	8992      	ldrh	r2, [r2, #12]
 800ee9c:	fbb3 f0f2 	udiv	r0, r3, r2
 800eea0:	fb02 f200 	mul.w	r2, r2, r0
 800eea4:	1a9b      	subs	r3, r3, r2
 800eea6:	440b      	add	r3, r1
 800eea8:	4619      	mov	r1, r3
 800eeaa:	68f8      	ldr	r0, [r7, #12]
 800eeac:	f7ff fd81 	bl	800e9b2 <ld_clust>
 800eeb0:	4602      	mov	r2, r0
 800eeb2:	693b      	ldr	r3, [r7, #16]
 800eeb4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800eeb6:	e7bb      	b.n	800ee30 <follow_path+0x50>
			if (res != FR_OK) break;
 800eeb8:	bf00      	nop
 800eeba:	e002      	b.n	800eec2 <follow_path+0xe2>
				break;
 800eebc:	bf00      	nop
 800eebe:	e000      	b.n	800eec2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800eec0:	bf00      	nop
			}
		}
	}

	return res;
 800eec2:	7dfb      	ldrb	r3, [r7, #23]
}
 800eec4:	4618      	mov	r0, r3
 800eec6:	3718      	adds	r7, #24
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd80      	pop	{r7, pc}

0800eecc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800eecc:	b480      	push	{r7}
 800eece:	b087      	sub	sp, #28
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800eed4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eed8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d031      	beq.n	800ef46 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	617b      	str	r3, [r7, #20]
 800eee8:	e002      	b.n	800eef0 <get_ldnumber+0x24>
 800eeea:	697b      	ldr	r3, [r7, #20]
 800eeec:	3301      	adds	r3, #1
 800eeee:	617b      	str	r3, [r7, #20]
 800eef0:	697b      	ldr	r3, [r7, #20]
 800eef2:	781b      	ldrb	r3, [r3, #0]
 800eef4:	2b20      	cmp	r3, #32
 800eef6:	d903      	bls.n	800ef00 <get_ldnumber+0x34>
 800eef8:	697b      	ldr	r3, [r7, #20]
 800eefa:	781b      	ldrb	r3, [r3, #0]
 800eefc:	2b3a      	cmp	r3, #58	; 0x3a
 800eefe:	d1f4      	bne.n	800eeea <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ef00:	697b      	ldr	r3, [r7, #20]
 800ef02:	781b      	ldrb	r3, [r3, #0]
 800ef04:	2b3a      	cmp	r3, #58	; 0x3a
 800ef06:	d11c      	bne.n	800ef42 <get_ldnumber+0x76>
			tp = *path;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	1c5a      	adds	r2, r3, #1
 800ef12:	60fa      	str	r2, [r7, #12]
 800ef14:	781b      	ldrb	r3, [r3, #0]
 800ef16:	3b30      	subs	r3, #48	; 0x30
 800ef18:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ef1a:	68bb      	ldr	r3, [r7, #8]
 800ef1c:	2b09      	cmp	r3, #9
 800ef1e:	d80e      	bhi.n	800ef3e <get_ldnumber+0x72>
 800ef20:	68fa      	ldr	r2, [r7, #12]
 800ef22:	697b      	ldr	r3, [r7, #20]
 800ef24:	429a      	cmp	r2, r3
 800ef26:	d10a      	bne.n	800ef3e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ef28:	68bb      	ldr	r3, [r7, #8]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d107      	bne.n	800ef3e <get_ldnumber+0x72>
					vol = (int)i;
 800ef2e:	68bb      	ldr	r3, [r7, #8]
 800ef30:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	3301      	adds	r3, #1
 800ef36:	617b      	str	r3, [r7, #20]
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	697a      	ldr	r2, [r7, #20]
 800ef3c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ef3e:	693b      	ldr	r3, [r7, #16]
 800ef40:	e002      	b.n	800ef48 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ef42:	2300      	movs	r3, #0
 800ef44:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ef46:	693b      	ldr	r3, [r7, #16]
}
 800ef48:	4618      	mov	r0, r3
 800ef4a:	371c      	adds	r7, #28
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef52:	4770      	bx	lr

0800ef54 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b082      	sub	sp, #8
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
 800ef5c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	2200      	movs	r2, #0
 800ef62:	70da      	strb	r2, [r3, #3]
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ef6a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ef6c:	6839      	ldr	r1, [r7, #0]
 800ef6e:	6878      	ldr	r0, [r7, #4]
 800ef70:	f7fe ffa0 	bl	800deb4 <move_window>
 800ef74:	4603      	mov	r3, r0
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d001      	beq.n	800ef7e <check_fs+0x2a>
 800ef7a:	2304      	movs	r3, #4
 800ef7c:	e038      	b.n	800eff0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	3334      	adds	r3, #52	; 0x34
 800ef82:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ef86:	4618      	mov	r0, r3
 800ef88:	f7fe fce4 	bl	800d954 <ld_word>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	461a      	mov	r2, r3
 800ef90:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ef94:	429a      	cmp	r2, r3
 800ef96:	d001      	beq.n	800ef9c <check_fs+0x48>
 800ef98:	2303      	movs	r3, #3
 800ef9a:	e029      	b.n	800eff0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800efa2:	2be9      	cmp	r3, #233	; 0xe9
 800efa4:	d009      	beq.n	800efba <check_fs+0x66>
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800efac:	2beb      	cmp	r3, #235	; 0xeb
 800efae:	d11e      	bne.n	800efee <check_fs+0x9a>
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800efb6:	2b90      	cmp	r3, #144	; 0x90
 800efb8:	d119      	bne.n	800efee <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	3334      	adds	r3, #52	; 0x34
 800efbe:	3336      	adds	r3, #54	; 0x36
 800efc0:	4618      	mov	r0, r3
 800efc2:	f7fe fcdf 	bl	800d984 <ld_dword>
 800efc6:	4603      	mov	r3, r0
 800efc8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800efcc:	4a0a      	ldr	r2, [pc, #40]	; (800eff8 <check_fs+0xa4>)
 800efce:	4293      	cmp	r3, r2
 800efd0:	d101      	bne.n	800efd6 <check_fs+0x82>
 800efd2:	2300      	movs	r3, #0
 800efd4:	e00c      	b.n	800eff0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	3334      	adds	r3, #52	; 0x34
 800efda:	3352      	adds	r3, #82	; 0x52
 800efdc:	4618      	mov	r0, r3
 800efde:	f7fe fcd1 	bl	800d984 <ld_dword>
 800efe2:	4602      	mov	r2, r0
 800efe4:	4b05      	ldr	r3, [pc, #20]	; (800effc <check_fs+0xa8>)
 800efe6:	429a      	cmp	r2, r3
 800efe8:	d101      	bne.n	800efee <check_fs+0x9a>
 800efea:	2300      	movs	r3, #0
 800efec:	e000      	b.n	800eff0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800efee:	2302      	movs	r3, #2
}
 800eff0:	4618      	mov	r0, r3
 800eff2:	3708      	adds	r7, #8
 800eff4:	46bd      	mov	sp, r7
 800eff6:	bd80      	pop	{r7, pc}
 800eff8:	00544146 	.word	0x00544146
 800effc:	33544146 	.word	0x33544146

0800f000 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b096      	sub	sp, #88	; 0x58
 800f004:	af00      	add	r7, sp, #0
 800f006:	60f8      	str	r0, [r7, #12]
 800f008:	60b9      	str	r1, [r7, #8]
 800f00a:	4613      	mov	r3, r2
 800f00c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f00e:	68bb      	ldr	r3, [r7, #8]
 800f010:	2200      	movs	r2, #0
 800f012:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f014:	68f8      	ldr	r0, [r7, #12]
 800f016:	f7ff ff59 	bl	800eecc <get_ldnumber>
 800f01a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f01c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f01e:	2b00      	cmp	r3, #0
 800f020:	da01      	bge.n	800f026 <find_volume+0x26>
 800f022:	230b      	movs	r3, #11
 800f024:	e265      	b.n	800f4f2 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f026:	4ab0      	ldr	r2, [pc, #704]	; (800f2e8 <find_volume+0x2e8>)
 800f028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f02a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f02e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f032:	2b00      	cmp	r3, #0
 800f034:	d101      	bne.n	800f03a <find_volume+0x3a>
 800f036:	230c      	movs	r3, #12
 800f038:	e25b      	b.n	800f4f2 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f03a:	68bb      	ldr	r3, [r7, #8]
 800f03c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f03e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f040:	79fb      	ldrb	r3, [r7, #7]
 800f042:	f023 0301 	bic.w	r3, r3, #1
 800f046:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f04a:	781b      	ldrb	r3, [r3, #0]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d01a      	beq.n	800f086 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f052:	785b      	ldrb	r3, [r3, #1]
 800f054:	4618      	mov	r0, r3
 800f056:	f7fe fbdf 	bl	800d818 <disk_status>
 800f05a:	4603      	mov	r3, r0
 800f05c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f060:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f064:	f003 0301 	and.w	r3, r3, #1
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d10c      	bne.n	800f086 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f06c:	79fb      	ldrb	r3, [r7, #7]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d007      	beq.n	800f082 <find_volume+0x82>
 800f072:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f076:	f003 0304 	and.w	r3, r3, #4
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d001      	beq.n	800f082 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f07e:	230a      	movs	r3, #10
 800f080:	e237      	b.n	800f4f2 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800f082:	2300      	movs	r3, #0
 800f084:	e235      	b.n	800f4f2 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f088:	2200      	movs	r2, #0
 800f08a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f08c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f08e:	b2da      	uxtb	r2, r3
 800f090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f092:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f096:	785b      	ldrb	r3, [r3, #1]
 800f098:	4618      	mov	r0, r3
 800f09a:	f7fe fbd7 	bl	800d84c <disk_initialize>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f0a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f0a8:	f003 0301 	and.w	r3, r3, #1
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d001      	beq.n	800f0b4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f0b0:	2303      	movs	r3, #3
 800f0b2:	e21e      	b.n	800f4f2 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f0b4:	79fb      	ldrb	r3, [r7, #7]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d007      	beq.n	800f0ca <find_volume+0xca>
 800f0ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f0be:	f003 0304 	and.w	r3, r3, #4
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d001      	beq.n	800f0ca <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f0c6:	230a      	movs	r3, #10
 800f0c8:	e213      	b.n	800f4f2 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800f0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0cc:	7858      	ldrb	r0, [r3, #1]
 800f0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0d0:	330c      	adds	r3, #12
 800f0d2:	461a      	mov	r2, r3
 800f0d4:	2102      	movs	r1, #2
 800f0d6:	f7fe fc1f 	bl	800d918 <disk_ioctl>
 800f0da:	4603      	mov	r3, r0
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d001      	beq.n	800f0e4 <find_volume+0xe4>
 800f0e0:	2301      	movs	r3, #1
 800f0e2:	e206      	b.n	800f4f2 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800f0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0e6:	899b      	ldrh	r3, [r3, #12]
 800f0e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f0ec:	d80d      	bhi.n	800f10a <find_volume+0x10a>
 800f0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0f0:	899b      	ldrh	r3, [r3, #12]
 800f0f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f0f6:	d308      	bcc.n	800f10a <find_volume+0x10a>
 800f0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0fa:	899b      	ldrh	r3, [r3, #12]
 800f0fc:	461a      	mov	r2, r3
 800f0fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f100:	899b      	ldrh	r3, [r3, #12]
 800f102:	3b01      	subs	r3, #1
 800f104:	4013      	ands	r3, r2
 800f106:	2b00      	cmp	r3, #0
 800f108:	d001      	beq.n	800f10e <find_volume+0x10e>
 800f10a:	2301      	movs	r3, #1
 800f10c:	e1f1      	b.n	800f4f2 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f10e:	2300      	movs	r3, #0
 800f110:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f112:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f114:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f116:	f7ff ff1d 	bl	800ef54 <check_fs>
 800f11a:	4603      	mov	r3, r0
 800f11c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f120:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f124:	2b02      	cmp	r3, #2
 800f126:	d14b      	bne.n	800f1c0 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f128:	2300      	movs	r3, #0
 800f12a:	643b      	str	r3, [r7, #64]	; 0x40
 800f12c:	e01f      	b.n	800f16e <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f130:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f134:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f136:	011b      	lsls	r3, r3, #4
 800f138:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f13c:	4413      	add	r3, r2
 800f13e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f142:	3304      	adds	r3, #4
 800f144:	781b      	ldrb	r3, [r3, #0]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d006      	beq.n	800f158 <find_volume+0x158>
 800f14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f14c:	3308      	adds	r3, #8
 800f14e:	4618      	mov	r0, r3
 800f150:	f7fe fc18 	bl	800d984 <ld_dword>
 800f154:	4602      	mov	r2, r0
 800f156:	e000      	b.n	800f15a <find_volume+0x15a>
 800f158:	2200      	movs	r2, #0
 800f15a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f15c:	009b      	lsls	r3, r3, #2
 800f15e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800f162:	440b      	add	r3, r1
 800f164:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f168:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f16a:	3301      	adds	r3, #1
 800f16c:	643b      	str	r3, [r7, #64]	; 0x40
 800f16e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f170:	2b03      	cmp	r3, #3
 800f172:	d9dc      	bls.n	800f12e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f174:	2300      	movs	r3, #0
 800f176:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800f178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d002      	beq.n	800f184 <find_volume+0x184>
 800f17e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f180:	3b01      	subs	r3, #1
 800f182:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f186:	009b      	lsls	r3, r3, #2
 800f188:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f18c:	4413      	add	r3, r2
 800f18e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f192:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f194:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f196:	2b00      	cmp	r3, #0
 800f198:	d005      	beq.n	800f1a6 <find_volume+0x1a6>
 800f19a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f19c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f19e:	f7ff fed9 	bl	800ef54 <check_fs>
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	e000      	b.n	800f1a8 <find_volume+0x1a8>
 800f1a6:	2303      	movs	r3, #3
 800f1a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f1ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f1b0:	2b01      	cmp	r3, #1
 800f1b2:	d905      	bls.n	800f1c0 <find_volume+0x1c0>
 800f1b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1b6:	3301      	adds	r3, #1
 800f1b8:	643b      	str	r3, [r7, #64]	; 0x40
 800f1ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1bc:	2b03      	cmp	r3, #3
 800f1be:	d9e1      	bls.n	800f184 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f1c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f1c4:	2b04      	cmp	r3, #4
 800f1c6:	d101      	bne.n	800f1cc <find_volume+0x1cc>
 800f1c8:	2301      	movs	r3, #1
 800f1ca:	e192      	b.n	800f4f2 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f1cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f1d0:	2b01      	cmp	r3, #1
 800f1d2:	d901      	bls.n	800f1d8 <find_volume+0x1d8>
 800f1d4:	230d      	movs	r3, #13
 800f1d6:	e18c      	b.n	800f4f2 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1da:	3334      	adds	r3, #52	; 0x34
 800f1dc:	330b      	adds	r3, #11
 800f1de:	4618      	mov	r0, r3
 800f1e0:	f7fe fbb8 	bl	800d954 <ld_word>
 800f1e4:	4603      	mov	r3, r0
 800f1e6:	461a      	mov	r2, r3
 800f1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ea:	899b      	ldrh	r3, [r3, #12]
 800f1ec:	429a      	cmp	r2, r3
 800f1ee:	d001      	beq.n	800f1f4 <find_volume+0x1f4>
 800f1f0:	230d      	movs	r3, #13
 800f1f2:	e17e      	b.n	800f4f2 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1f6:	3334      	adds	r3, #52	; 0x34
 800f1f8:	3316      	adds	r3, #22
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	f7fe fbaa 	bl	800d954 <ld_word>
 800f200:	4603      	mov	r3, r0
 800f202:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f206:	2b00      	cmp	r3, #0
 800f208:	d106      	bne.n	800f218 <find_volume+0x218>
 800f20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f20c:	3334      	adds	r3, #52	; 0x34
 800f20e:	3324      	adds	r3, #36	; 0x24
 800f210:	4618      	mov	r0, r3
 800f212:	f7fe fbb7 	bl	800d984 <ld_dword>
 800f216:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800f218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f21a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f21c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f220:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800f224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f226:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f22a:	789b      	ldrb	r3, [r3, #2]
 800f22c:	2b01      	cmp	r3, #1
 800f22e:	d005      	beq.n	800f23c <find_volume+0x23c>
 800f230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f232:	789b      	ldrb	r3, [r3, #2]
 800f234:	2b02      	cmp	r3, #2
 800f236:	d001      	beq.n	800f23c <find_volume+0x23c>
 800f238:	230d      	movs	r3, #13
 800f23a:	e15a      	b.n	800f4f2 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f23e:	789b      	ldrb	r3, [r3, #2]
 800f240:	461a      	mov	r2, r3
 800f242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f244:	fb02 f303 	mul.w	r3, r2, r3
 800f248:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f24c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f250:	b29a      	uxth	r2, r3
 800f252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f254:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f258:	895b      	ldrh	r3, [r3, #10]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d008      	beq.n	800f270 <find_volume+0x270>
 800f25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f260:	895b      	ldrh	r3, [r3, #10]
 800f262:	461a      	mov	r2, r3
 800f264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f266:	895b      	ldrh	r3, [r3, #10]
 800f268:	3b01      	subs	r3, #1
 800f26a:	4013      	ands	r3, r2
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d001      	beq.n	800f274 <find_volume+0x274>
 800f270:	230d      	movs	r3, #13
 800f272:	e13e      	b.n	800f4f2 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f276:	3334      	adds	r3, #52	; 0x34
 800f278:	3311      	adds	r3, #17
 800f27a:	4618      	mov	r0, r3
 800f27c:	f7fe fb6a 	bl	800d954 <ld_word>
 800f280:	4603      	mov	r3, r0
 800f282:	461a      	mov	r2, r3
 800f284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f286:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f28a:	891b      	ldrh	r3, [r3, #8]
 800f28c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f28e:	8992      	ldrh	r2, [r2, #12]
 800f290:	0952      	lsrs	r2, r2, #5
 800f292:	b292      	uxth	r2, r2
 800f294:	fbb3 f1f2 	udiv	r1, r3, r2
 800f298:	fb02 f201 	mul.w	r2, r2, r1
 800f29c:	1a9b      	subs	r3, r3, r2
 800f29e:	b29b      	uxth	r3, r3
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d001      	beq.n	800f2a8 <find_volume+0x2a8>
 800f2a4:	230d      	movs	r3, #13
 800f2a6:	e124      	b.n	800f4f2 <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2aa:	3334      	adds	r3, #52	; 0x34
 800f2ac:	3313      	adds	r3, #19
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f7fe fb50 	bl	800d954 <ld_word>
 800f2b4:	4603      	mov	r3, r0
 800f2b6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f2b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d106      	bne.n	800f2cc <find_volume+0x2cc>
 800f2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2c0:	3334      	adds	r3, #52	; 0x34
 800f2c2:	3320      	adds	r3, #32
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	f7fe fb5d 	bl	800d984 <ld_dword>
 800f2ca:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2ce:	3334      	adds	r3, #52	; 0x34
 800f2d0:	330e      	adds	r3, #14
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	f7fe fb3e 	bl	800d954 <ld_word>
 800f2d8:	4603      	mov	r3, r0
 800f2da:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f2dc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d104      	bne.n	800f2ec <find_volume+0x2ec>
 800f2e2:	230d      	movs	r3, #13
 800f2e4:	e105      	b.n	800f4f2 <find_volume+0x4f2>
 800f2e6:	bf00      	nop
 800f2e8:	2000086c 	.word	0x2000086c

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f2ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f2ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f2f0:	4413      	add	r3, r2
 800f2f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f2f4:	8911      	ldrh	r1, [r2, #8]
 800f2f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f2f8:	8992      	ldrh	r2, [r2, #12]
 800f2fa:	0952      	lsrs	r2, r2, #5
 800f2fc:	b292      	uxth	r2, r2
 800f2fe:	fbb1 f2f2 	udiv	r2, r1, r2
 800f302:	b292      	uxth	r2, r2
 800f304:	4413      	add	r3, r2
 800f306:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f308:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f30c:	429a      	cmp	r2, r3
 800f30e:	d201      	bcs.n	800f314 <find_volume+0x314>
 800f310:	230d      	movs	r3, #13
 800f312:	e0ee      	b.n	800f4f2 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f314:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f318:	1ad3      	subs	r3, r2, r3
 800f31a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f31c:	8952      	ldrh	r2, [r2, #10]
 800f31e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f322:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f326:	2b00      	cmp	r3, #0
 800f328:	d101      	bne.n	800f32e <find_volume+0x32e>
 800f32a:	230d      	movs	r3, #13
 800f32c:	e0e1      	b.n	800f4f2 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800f32e:	2303      	movs	r3, #3
 800f330:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f336:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f33a:	4293      	cmp	r3, r2
 800f33c:	d802      	bhi.n	800f344 <find_volume+0x344>
 800f33e:	2302      	movs	r3, #2
 800f340:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f346:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f34a:	4293      	cmp	r3, r2
 800f34c:	d802      	bhi.n	800f354 <find_volume+0x354>
 800f34e:	2301      	movs	r3, #1
 800f350:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f356:	1c9a      	adds	r2, r3, #2
 800f358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f35a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800f35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f35e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f360:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f362:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f366:	441a      	add	r2, r3
 800f368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f36a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800f36c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f370:	441a      	add	r2, r3
 800f372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f374:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800f376:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f37a:	2b03      	cmp	r3, #3
 800f37c:	d11e      	bne.n	800f3bc <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f37e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f380:	3334      	adds	r3, #52	; 0x34
 800f382:	332a      	adds	r3, #42	; 0x2a
 800f384:	4618      	mov	r0, r3
 800f386:	f7fe fae5 	bl	800d954 <ld_word>
 800f38a:	4603      	mov	r3, r0
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d001      	beq.n	800f394 <find_volume+0x394>
 800f390:	230d      	movs	r3, #13
 800f392:	e0ae      	b.n	800f4f2 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f396:	891b      	ldrh	r3, [r3, #8]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d001      	beq.n	800f3a0 <find_volume+0x3a0>
 800f39c:	230d      	movs	r3, #13
 800f39e:	e0a8      	b.n	800f4f2 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3a2:	3334      	adds	r3, #52	; 0x34
 800f3a4:	332c      	adds	r3, #44	; 0x2c
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f7fe faec 	bl	800d984 <ld_dword>
 800f3ac:	4602      	mov	r2, r0
 800f3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3b0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3b4:	699b      	ldr	r3, [r3, #24]
 800f3b6:	009b      	lsls	r3, r3, #2
 800f3b8:	647b      	str	r3, [r7, #68]	; 0x44
 800f3ba:	e01f      	b.n	800f3fc <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3be:	891b      	ldrh	r3, [r3, #8]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d101      	bne.n	800f3c8 <find_volume+0x3c8>
 800f3c4:	230d      	movs	r3, #13
 800f3c6:	e094      	b.n	800f4f2 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f3cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3ce:	441a      	add	r2, r3
 800f3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3d2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f3d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f3d8:	2b02      	cmp	r3, #2
 800f3da:	d103      	bne.n	800f3e4 <find_volume+0x3e4>
 800f3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3de:	699b      	ldr	r3, [r3, #24]
 800f3e0:	005b      	lsls	r3, r3, #1
 800f3e2:	e00a      	b.n	800f3fa <find_volume+0x3fa>
 800f3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3e6:	699a      	ldr	r2, [r3, #24]
 800f3e8:	4613      	mov	r3, r2
 800f3ea:	005b      	lsls	r3, r3, #1
 800f3ec:	4413      	add	r3, r2
 800f3ee:	085a      	lsrs	r2, r3, #1
 800f3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3f2:	699b      	ldr	r3, [r3, #24]
 800f3f4:	f003 0301 	and.w	r3, r3, #1
 800f3f8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f3fa:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3fe:	69da      	ldr	r2, [r3, #28]
 800f400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f402:	899b      	ldrh	r3, [r3, #12]
 800f404:	4619      	mov	r1, r3
 800f406:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f408:	440b      	add	r3, r1
 800f40a:	3b01      	subs	r3, #1
 800f40c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f40e:	8989      	ldrh	r1, [r1, #12]
 800f410:	fbb3 f3f1 	udiv	r3, r3, r1
 800f414:	429a      	cmp	r2, r3
 800f416:	d201      	bcs.n	800f41c <find_volume+0x41c>
 800f418:	230d      	movs	r3, #13
 800f41a:	e06a      	b.n	800f4f2 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f41c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f41e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f422:	615a      	str	r2, [r3, #20]
 800f424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f426:	695a      	ldr	r2, [r3, #20]
 800f428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f42a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800f42c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f42e:	2280      	movs	r2, #128	; 0x80
 800f430:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f432:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f436:	2b03      	cmp	r3, #3
 800f438:	d149      	bne.n	800f4ce <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f43a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f43c:	3334      	adds	r3, #52	; 0x34
 800f43e:	3330      	adds	r3, #48	; 0x30
 800f440:	4618      	mov	r0, r3
 800f442:	f7fe fa87 	bl	800d954 <ld_word>
 800f446:	4603      	mov	r3, r0
 800f448:	2b01      	cmp	r3, #1
 800f44a:	d140      	bne.n	800f4ce <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f44c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f44e:	3301      	adds	r3, #1
 800f450:	4619      	mov	r1, r3
 800f452:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f454:	f7fe fd2e 	bl	800deb4 <move_window>
 800f458:	4603      	mov	r3, r0
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d137      	bne.n	800f4ce <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800f45e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f460:	2200      	movs	r2, #0
 800f462:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f466:	3334      	adds	r3, #52	; 0x34
 800f468:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f46c:	4618      	mov	r0, r3
 800f46e:	f7fe fa71 	bl	800d954 <ld_word>
 800f472:	4603      	mov	r3, r0
 800f474:	461a      	mov	r2, r3
 800f476:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f47a:	429a      	cmp	r2, r3
 800f47c:	d127      	bne.n	800f4ce <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f47e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f480:	3334      	adds	r3, #52	; 0x34
 800f482:	4618      	mov	r0, r3
 800f484:	f7fe fa7e 	bl	800d984 <ld_dword>
 800f488:	4602      	mov	r2, r0
 800f48a:	4b1c      	ldr	r3, [pc, #112]	; (800f4fc <find_volume+0x4fc>)
 800f48c:	429a      	cmp	r2, r3
 800f48e:	d11e      	bne.n	800f4ce <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f492:	3334      	adds	r3, #52	; 0x34
 800f494:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f498:	4618      	mov	r0, r3
 800f49a:	f7fe fa73 	bl	800d984 <ld_dword>
 800f49e:	4602      	mov	r2, r0
 800f4a0:	4b17      	ldr	r3, [pc, #92]	; (800f500 <find_volume+0x500>)
 800f4a2:	429a      	cmp	r2, r3
 800f4a4:	d113      	bne.n	800f4ce <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4a8:	3334      	adds	r3, #52	; 0x34
 800f4aa:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f7fe fa68 	bl	800d984 <ld_dword>
 800f4b4:	4602      	mov	r2, r0
 800f4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4b8:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4bc:	3334      	adds	r3, #52	; 0x34
 800f4be:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f7fe fa5e 	bl	800d984 <ld_dword>
 800f4c8:	4602      	mov	r2, r0
 800f4ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4cc:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f4ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4d0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f4d4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f4d6:	4b0b      	ldr	r3, [pc, #44]	; (800f504 <find_volume+0x504>)
 800f4d8:	881b      	ldrh	r3, [r3, #0]
 800f4da:	3301      	adds	r3, #1
 800f4dc:	b29a      	uxth	r2, r3
 800f4de:	4b09      	ldr	r3, [pc, #36]	; (800f504 <find_volume+0x504>)
 800f4e0:	801a      	strh	r2, [r3, #0]
 800f4e2:	4b08      	ldr	r3, [pc, #32]	; (800f504 <find_volume+0x504>)
 800f4e4:	881a      	ldrh	r2, [r3, #0]
 800f4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4e8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f4ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f4ec:	f7fe fc7a 	bl	800dde4 <clear_lock>
#endif
	return FR_OK;
 800f4f0:	2300      	movs	r3, #0
}
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	3758      	adds	r7, #88	; 0x58
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd80      	pop	{r7, pc}
 800f4fa:	bf00      	nop
 800f4fc:	41615252 	.word	0x41615252
 800f500:	61417272 	.word	0x61417272
 800f504:	20000870 	.word	0x20000870

0800f508 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b084      	sub	sp, #16
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
 800f510:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f512:	2309      	movs	r3, #9
 800f514:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d01c      	beq.n	800f556 <validate+0x4e>
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d018      	beq.n	800f556 <validate+0x4e>
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	781b      	ldrb	r3, [r3, #0]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d013      	beq.n	800f556 <validate+0x4e>
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	889a      	ldrh	r2, [r3, #4]
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	88db      	ldrh	r3, [r3, #6]
 800f538:	429a      	cmp	r2, r3
 800f53a:	d10c      	bne.n	800f556 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	785b      	ldrb	r3, [r3, #1]
 800f542:	4618      	mov	r0, r3
 800f544:	f7fe f968 	bl	800d818 <disk_status>
 800f548:	4603      	mov	r3, r0
 800f54a:	f003 0301 	and.w	r3, r3, #1
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d101      	bne.n	800f556 <validate+0x4e>
			res = FR_OK;
 800f552:	2300      	movs	r3, #0
 800f554:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f556:	7bfb      	ldrb	r3, [r7, #15]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d102      	bne.n	800f562 <validate+0x5a>
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	e000      	b.n	800f564 <validate+0x5c>
 800f562:	2300      	movs	r3, #0
 800f564:	683a      	ldr	r2, [r7, #0]
 800f566:	6013      	str	r3, [r2, #0]
	return res;
 800f568:	7bfb      	ldrb	r3, [r7, #15]
}
 800f56a:	4618      	mov	r0, r3
 800f56c:	3710      	adds	r7, #16
 800f56e:	46bd      	mov	sp, r7
 800f570:	bd80      	pop	{r7, pc}
	...

0800f574 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b088      	sub	sp, #32
 800f578:	af00      	add	r7, sp, #0
 800f57a:	60f8      	str	r0, [r7, #12]
 800f57c:	60b9      	str	r1, [r7, #8]
 800f57e:	4613      	mov	r3, r2
 800f580:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f582:	68bb      	ldr	r3, [r7, #8]
 800f584:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f586:	f107 0310 	add.w	r3, r7, #16
 800f58a:	4618      	mov	r0, r3
 800f58c:	f7ff fc9e 	bl	800eecc <get_ldnumber>
 800f590:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f592:	69fb      	ldr	r3, [r7, #28]
 800f594:	2b00      	cmp	r3, #0
 800f596:	da01      	bge.n	800f59c <f_mount+0x28>
 800f598:	230b      	movs	r3, #11
 800f59a:	e02b      	b.n	800f5f4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f59c:	4a17      	ldr	r2, [pc, #92]	; (800f5fc <f_mount+0x88>)
 800f59e:	69fb      	ldr	r3, [r7, #28]
 800f5a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5a4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f5a6:	69bb      	ldr	r3, [r7, #24]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d005      	beq.n	800f5b8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f5ac:	69b8      	ldr	r0, [r7, #24]
 800f5ae:	f7fe fc19 	bl	800dde4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f5b2:	69bb      	ldr	r3, [r7, #24]
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d002      	beq.n	800f5c4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f5c4:	68fa      	ldr	r2, [r7, #12]
 800f5c6:	490d      	ldr	r1, [pc, #52]	; (800f5fc <f_mount+0x88>)
 800f5c8:	69fb      	ldr	r3, [r7, #28]
 800f5ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d002      	beq.n	800f5da <f_mount+0x66>
 800f5d4:	79fb      	ldrb	r3, [r7, #7]
 800f5d6:	2b01      	cmp	r3, #1
 800f5d8:	d001      	beq.n	800f5de <f_mount+0x6a>
 800f5da:	2300      	movs	r3, #0
 800f5dc:	e00a      	b.n	800f5f4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f5de:	f107 010c 	add.w	r1, r7, #12
 800f5e2:	f107 0308 	add.w	r3, r7, #8
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	f7ff fd09 	bl	800f000 <find_volume>
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f5f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	3720      	adds	r7, #32
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	bd80      	pop	{r7, pc}
 800f5fc:	2000086c 	.word	0x2000086c

0800f600 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f600:	b580      	push	{r7, lr}
 800f602:	b098      	sub	sp, #96	; 0x60
 800f604:	af00      	add	r7, sp, #0
 800f606:	60f8      	str	r0, [r7, #12]
 800f608:	60b9      	str	r1, [r7, #8]
 800f60a:	4613      	mov	r3, r2
 800f60c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d101      	bne.n	800f618 <f_open+0x18>
 800f614:	2309      	movs	r3, #9
 800f616:	e1bb      	b.n	800f990 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f618:	79fb      	ldrb	r3, [r7, #7]
 800f61a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f61e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f620:	79fa      	ldrb	r2, [r7, #7]
 800f622:	f107 0110 	add.w	r1, r7, #16
 800f626:	f107 0308 	add.w	r3, r7, #8
 800f62a:	4618      	mov	r0, r3
 800f62c:	f7ff fce8 	bl	800f000 <find_volume>
 800f630:	4603      	mov	r3, r0
 800f632:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800f636:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	f040 819f 	bne.w	800f97e <f_open+0x37e>
		dj.obj.fs = fs;
 800f640:	693b      	ldr	r3, [r7, #16]
 800f642:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f644:	68ba      	ldr	r2, [r7, #8]
 800f646:	f107 0314 	add.w	r3, r7, #20
 800f64a:	4611      	mov	r1, r2
 800f64c:	4618      	mov	r0, r3
 800f64e:	f7ff fbc7 	bl	800ede0 <follow_path>
 800f652:	4603      	mov	r3, r0
 800f654:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f658:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d11a      	bne.n	800f696 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f660:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f664:	b25b      	sxtb	r3, r3
 800f666:	2b00      	cmp	r3, #0
 800f668:	da03      	bge.n	800f672 <f_open+0x72>
				res = FR_INVALID_NAME;
 800f66a:	2306      	movs	r3, #6
 800f66c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f670:	e011      	b.n	800f696 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f672:	79fb      	ldrb	r3, [r7, #7]
 800f674:	f023 0301 	bic.w	r3, r3, #1
 800f678:	2b00      	cmp	r3, #0
 800f67a:	bf14      	ite	ne
 800f67c:	2301      	movne	r3, #1
 800f67e:	2300      	moveq	r3, #0
 800f680:	b2db      	uxtb	r3, r3
 800f682:	461a      	mov	r2, r3
 800f684:	f107 0314 	add.w	r3, r7, #20
 800f688:	4611      	mov	r1, r2
 800f68a:	4618      	mov	r0, r3
 800f68c:	f7fe fa62 	bl	800db54 <chk_lock>
 800f690:	4603      	mov	r3, r0
 800f692:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f696:	79fb      	ldrb	r3, [r7, #7]
 800f698:	f003 031c 	and.w	r3, r3, #28
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d07f      	beq.n	800f7a0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800f6a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d017      	beq.n	800f6d8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f6a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f6ac:	2b04      	cmp	r3, #4
 800f6ae:	d10e      	bne.n	800f6ce <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f6b0:	f7fe faac 	bl	800dc0c <enq_lock>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d006      	beq.n	800f6c8 <f_open+0xc8>
 800f6ba:	f107 0314 	add.w	r3, r7, #20
 800f6be:	4618      	mov	r0, r3
 800f6c0:	f7ff fa68 	bl	800eb94 <dir_register>
 800f6c4:	4603      	mov	r3, r0
 800f6c6:	e000      	b.n	800f6ca <f_open+0xca>
 800f6c8:	2312      	movs	r3, #18
 800f6ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f6ce:	79fb      	ldrb	r3, [r7, #7]
 800f6d0:	f043 0308 	orr.w	r3, r3, #8
 800f6d4:	71fb      	strb	r3, [r7, #7]
 800f6d6:	e010      	b.n	800f6fa <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f6d8:	7ebb      	ldrb	r3, [r7, #26]
 800f6da:	f003 0311 	and.w	r3, r3, #17
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d003      	beq.n	800f6ea <f_open+0xea>
					res = FR_DENIED;
 800f6e2:	2307      	movs	r3, #7
 800f6e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f6e8:	e007      	b.n	800f6fa <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f6ea:	79fb      	ldrb	r3, [r7, #7]
 800f6ec:	f003 0304 	and.w	r3, r3, #4
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d002      	beq.n	800f6fa <f_open+0xfa>
 800f6f4:	2308      	movs	r3, #8
 800f6f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f6fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d168      	bne.n	800f7d4 <f_open+0x1d4>
 800f702:	79fb      	ldrb	r3, [r7, #7]
 800f704:	f003 0308 	and.w	r3, r3, #8
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d063      	beq.n	800f7d4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800f70c:	f7fd fe32 	bl	800d374 <get_fattime>
 800f710:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f714:	330e      	adds	r3, #14
 800f716:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f718:	4618      	mov	r0, r3
 800f71a:	f7fe f971 	bl	800da00 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f71e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f720:	3316      	adds	r3, #22
 800f722:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f724:	4618      	mov	r0, r3
 800f726:	f7fe f96b 	bl	800da00 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f72a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f72c:	330b      	adds	r3, #11
 800f72e:	2220      	movs	r2, #32
 800f730:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f732:	693b      	ldr	r3, [r7, #16]
 800f734:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f736:	4611      	mov	r1, r2
 800f738:	4618      	mov	r0, r3
 800f73a:	f7ff f93a 	bl	800e9b2 <ld_clust>
 800f73e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f740:	693b      	ldr	r3, [r7, #16]
 800f742:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f744:	2200      	movs	r2, #0
 800f746:	4618      	mov	r0, r3
 800f748:	f7ff f952 	bl	800e9f0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f74c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f74e:	331c      	adds	r3, #28
 800f750:	2100      	movs	r1, #0
 800f752:	4618      	mov	r0, r3
 800f754:	f7fe f954 	bl	800da00 <st_dword>
					fs->wflag = 1;
 800f758:	693b      	ldr	r3, [r7, #16]
 800f75a:	2201      	movs	r2, #1
 800f75c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f75e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f760:	2b00      	cmp	r3, #0
 800f762:	d037      	beq.n	800f7d4 <f_open+0x1d4>
						dw = fs->winsect;
 800f764:	693b      	ldr	r3, [r7, #16]
 800f766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f768:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800f76a:	f107 0314 	add.w	r3, r7, #20
 800f76e:	2200      	movs	r2, #0
 800f770:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f772:	4618      	mov	r0, r3
 800f774:	f7fe fe42 	bl	800e3fc <remove_chain>
 800f778:	4603      	mov	r3, r0
 800f77a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800f77e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f782:	2b00      	cmp	r3, #0
 800f784:	d126      	bne.n	800f7d4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800f786:	693b      	ldr	r3, [r7, #16]
 800f788:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f78a:	4618      	mov	r0, r3
 800f78c:	f7fe fb92 	bl	800deb4 <move_window>
 800f790:	4603      	mov	r3, r0
 800f792:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f796:	693b      	ldr	r3, [r7, #16]
 800f798:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f79a:	3a01      	subs	r2, #1
 800f79c:	611a      	str	r2, [r3, #16]
 800f79e:	e019      	b.n	800f7d4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f7a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d115      	bne.n	800f7d4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f7a8:	7ebb      	ldrb	r3, [r7, #26]
 800f7aa:	f003 0310 	and.w	r3, r3, #16
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d003      	beq.n	800f7ba <f_open+0x1ba>
					res = FR_NO_FILE;
 800f7b2:	2304      	movs	r3, #4
 800f7b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f7b8:	e00c      	b.n	800f7d4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f7ba:	79fb      	ldrb	r3, [r7, #7]
 800f7bc:	f003 0302 	and.w	r3, r3, #2
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d007      	beq.n	800f7d4 <f_open+0x1d4>
 800f7c4:	7ebb      	ldrb	r3, [r7, #26]
 800f7c6:	f003 0301 	and.w	r3, r3, #1
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d002      	beq.n	800f7d4 <f_open+0x1d4>
						res = FR_DENIED;
 800f7ce:	2307      	movs	r3, #7
 800f7d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800f7d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d128      	bne.n	800f82e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f7dc:	79fb      	ldrb	r3, [r7, #7]
 800f7de:	f003 0308 	and.w	r3, r3, #8
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d003      	beq.n	800f7ee <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800f7e6:	79fb      	ldrb	r3, [r7, #7]
 800f7e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f7ec:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f7ee:	693b      	ldr	r3, [r7, #16]
 800f7f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800f7f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f7fc:	79fb      	ldrb	r3, [r7, #7]
 800f7fe:	f023 0301 	bic.w	r3, r3, #1
 800f802:	2b00      	cmp	r3, #0
 800f804:	bf14      	ite	ne
 800f806:	2301      	movne	r3, #1
 800f808:	2300      	moveq	r3, #0
 800f80a:	b2db      	uxtb	r3, r3
 800f80c:	461a      	mov	r2, r3
 800f80e:	f107 0314 	add.w	r3, r7, #20
 800f812:	4611      	mov	r1, r2
 800f814:	4618      	mov	r0, r3
 800f816:	f7fe fa1b 	bl	800dc50 <inc_lock>
 800f81a:	4602      	mov	r2, r0
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	691b      	ldr	r3, [r3, #16]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d102      	bne.n	800f82e <f_open+0x22e>
 800f828:	2302      	movs	r3, #2
 800f82a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f82e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f832:	2b00      	cmp	r3, #0
 800f834:	f040 80a3 	bne.w	800f97e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f838:	693b      	ldr	r3, [r7, #16]
 800f83a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f83c:	4611      	mov	r1, r2
 800f83e:	4618      	mov	r0, r3
 800f840:	f7ff f8b7 	bl	800e9b2 <ld_clust>
 800f844:	4602      	mov	r2, r0
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f84a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f84c:	331c      	adds	r3, #28
 800f84e:	4618      	mov	r0, r3
 800f850:	f7fe f898 	bl	800d984 <ld_dword>
 800f854:	4602      	mov	r2, r0
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	2200      	movs	r2, #0
 800f85e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f860:	693a      	ldr	r2, [r7, #16]
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f866:	693b      	ldr	r3, [r7, #16]
 800f868:	88da      	ldrh	r2, [r3, #6]
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	79fa      	ldrb	r2, [r7, #7]
 800f872:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	2200      	movs	r2, #0
 800f878:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	2200      	movs	r2, #0
 800f87e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	2200      	movs	r2, #0
 800f884:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	3330      	adds	r3, #48	; 0x30
 800f88a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f88e:	2100      	movs	r1, #0
 800f890:	4618      	mov	r0, r3
 800f892:	f7fe f902 	bl	800da9a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f896:	79fb      	ldrb	r3, [r7, #7]
 800f898:	f003 0320 	and.w	r3, r3, #32
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d06e      	beq.n	800f97e <f_open+0x37e>
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	68db      	ldr	r3, [r3, #12]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d06a      	beq.n	800f97e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	68da      	ldr	r2, [r3, #12]
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f8b0:	693b      	ldr	r3, [r7, #16]
 800f8b2:	895b      	ldrh	r3, [r3, #10]
 800f8b4:	461a      	mov	r2, r3
 800f8b6:	693b      	ldr	r3, [r7, #16]
 800f8b8:	899b      	ldrh	r3, [r3, #12]
 800f8ba:	fb03 f302 	mul.w	r3, r3, r2
 800f8be:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	689b      	ldr	r3, [r3, #8]
 800f8c4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	68db      	ldr	r3, [r3, #12]
 800f8ca:	657b      	str	r3, [r7, #84]	; 0x54
 800f8cc:	e016      	b.n	800f8fc <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f7fe fbab 	bl	800e02e <get_fat>
 800f8d8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800f8da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f8dc:	2b01      	cmp	r3, #1
 800f8de:	d802      	bhi.n	800f8e6 <f_open+0x2e6>
 800f8e0:	2302      	movs	r3, #2
 800f8e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f8e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f8e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f8ec:	d102      	bne.n	800f8f4 <f_open+0x2f4>
 800f8ee:	2301      	movs	r3, #1
 800f8f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f8f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f8f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f8f8:	1ad3      	subs	r3, r2, r3
 800f8fa:	657b      	str	r3, [r7, #84]	; 0x54
 800f8fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f900:	2b00      	cmp	r3, #0
 800f902:	d103      	bne.n	800f90c <f_open+0x30c>
 800f904:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f906:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f908:	429a      	cmp	r2, r3
 800f90a:	d8e0      	bhi.n	800f8ce <f_open+0x2ce>
				}
				fp->clust = clst;
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f910:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f912:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f916:	2b00      	cmp	r3, #0
 800f918:	d131      	bne.n	800f97e <f_open+0x37e>
 800f91a:	693b      	ldr	r3, [r7, #16]
 800f91c:	899b      	ldrh	r3, [r3, #12]
 800f91e:	461a      	mov	r2, r3
 800f920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f922:	fbb3 f1f2 	udiv	r1, r3, r2
 800f926:	fb02 f201 	mul.w	r2, r2, r1
 800f92a:	1a9b      	subs	r3, r3, r2
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d026      	beq.n	800f97e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f930:	693b      	ldr	r3, [r7, #16]
 800f932:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f934:	4618      	mov	r0, r3
 800f936:	f7fe fb5b 	bl	800dff0 <clust2sect>
 800f93a:	6478      	str	r0, [r7, #68]	; 0x44
 800f93c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d103      	bne.n	800f94a <f_open+0x34a>
						res = FR_INT_ERR;
 800f942:	2302      	movs	r3, #2
 800f944:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f948:	e019      	b.n	800f97e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f94a:	693b      	ldr	r3, [r7, #16]
 800f94c:	899b      	ldrh	r3, [r3, #12]
 800f94e:	461a      	mov	r2, r3
 800f950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f952:	fbb3 f2f2 	udiv	r2, r3, r2
 800f956:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f958:	441a      	add	r2, r3
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f95e:	693b      	ldr	r3, [r7, #16]
 800f960:	7858      	ldrb	r0, [r3, #1]
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	6a1a      	ldr	r2, [r3, #32]
 800f96c:	2301      	movs	r3, #1
 800f96e:	f7fd ff93 	bl	800d898 <disk_read>
 800f972:	4603      	mov	r3, r0
 800f974:	2b00      	cmp	r3, #0
 800f976:	d002      	beq.n	800f97e <f_open+0x37e>
 800f978:	2301      	movs	r3, #1
 800f97a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f97e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f982:	2b00      	cmp	r3, #0
 800f984:	d002      	beq.n	800f98c <f_open+0x38c>
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	2200      	movs	r2, #0
 800f98a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f98c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800f990:	4618      	mov	r0, r3
 800f992:	3760      	adds	r7, #96	; 0x60
 800f994:	46bd      	mov	sp, r7
 800f996:	bd80      	pop	{r7, pc}

0800f998 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b08e      	sub	sp, #56	; 0x38
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	60f8      	str	r0, [r7, #12]
 800f9a0:	60b9      	str	r1, [r7, #8]
 800f9a2:	607a      	str	r2, [r7, #4]
 800f9a4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800f9a6:	68bb      	ldr	r3, [r7, #8]
 800f9a8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800f9aa:	683b      	ldr	r3, [r7, #0]
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	f107 0214 	add.w	r2, r7, #20
 800f9b6:	4611      	mov	r1, r2
 800f9b8:	4618      	mov	r0, r3
 800f9ba:	f7ff fda5 	bl	800f508 <validate>
 800f9be:	4603      	mov	r3, r0
 800f9c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f9c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d107      	bne.n	800f9dc <f_read+0x44>
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	7d5b      	ldrb	r3, [r3, #21]
 800f9d0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f9d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d002      	beq.n	800f9e2 <f_read+0x4a>
 800f9dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f9e0:	e135      	b.n	800fc4e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	7d1b      	ldrb	r3, [r3, #20]
 800f9e6:	f003 0301 	and.w	r3, r3, #1
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d101      	bne.n	800f9f2 <f_read+0x5a>
 800f9ee:	2307      	movs	r3, #7
 800f9f0:	e12d      	b.n	800fc4e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	68da      	ldr	r2, [r3, #12]
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	699b      	ldr	r3, [r3, #24]
 800f9fa:	1ad3      	subs	r3, r2, r3
 800f9fc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800f9fe:	687a      	ldr	r2, [r7, #4]
 800fa00:	6a3b      	ldr	r3, [r7, #32]
 800fa02:	429a      	cmp	r2, r3
 800fa04:	f240 811e 	bls.w	800fc44 <f_read+0x2ac>
 800fa08:	6a3b      	ldr	r3, [r7, #32]
 800fa0a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800fa0c:	e11a      	b.n	800fc44 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	699b      	ldr	r3, [r3, #24]
 800fa12:	697a      	ldr	r2, [r7, #20]
 800fa14:	8992      	ldrh	r2, [r2, #12]
 800fa16:	fbb3 f1f2 	udiv	r1, r3, r2
 800fa1a:	fb02 f201 	mul.w	r2, r2, r1
 800fa1e:	1a9b      	subs	r3, r3, r2
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	f040 80d5 	bne.w	800fbd0 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	699b      	ldr	r3, [r3, #24]
 800fa2a:	697a      	ldr	r2, [r7, #20]
 800fa2c:	8992      	ldrh	r2, [r2, #12]
 800fa2e:	fbb3 f3f2 	udiv	r3, r3, r2
 800fa32:	697a      	ldr	r2, [r7, #20]
 800fa34:	8952      	ldrh	r2, [r2, #10]
 800fa36:	3a01      	subs	r2, #1
 800fa38:	4013      	ands	r3, r2
 800fa3a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800fa3c:	69fb      	ldr	r3, [r7, #28]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d12f      	bne.n	800faa2 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	699b      	ldr	r3, [r3, #24]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d103      	bne.n	800fa52 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	689b      	ldr	r3, [r3, #8]
 800fa4e:	633b      	str	r3, [r7, #48]	; 0x30
 800fa50:	e013      	b.n	800fa7a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d007      	beq.n	800fa6a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	699b      	ldr	r3, [r3, #24]
 800fa5e:	4619      	mov	r1, r3
 800fa60:	68f8      	ldr	r0, [r7, #12]
 800fa62:	f7fe fdc8 	bl	800e5f6 <clmt_clust>
 800fa66:	6338      	str	r0, [r7, #48]	; 0x30
 800fa68:	e007      	b.n	800fa7a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800fa6a:	68fa      	ldr	r2, [r7, #12]
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	69db      	ldr	r3, [r3, #28]
 800fa70:	4619      	mov	r1, r3
 800fa72:	4610      	mov	r0, r2
 800fa74:	f7fe fadb 	bl	800e02e <get_fat>
 800fa78:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800fa7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa7c:	2b01      	cmp	r3, #1
 800fa7e:	d804      	bhi.n	800fa8a <f_read+0xf2>
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	2202      	movs	r2, #2
 800fa84:	755a      	strb	r2, [r3, #21]
 800fa86:	2302      	movs	r3, #2
 800fa88:	e0e1      	b.n	800fc4e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fa8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fa90:	d104      	bne.n	800fa9c <f_read+0x104>
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	2201      	movs	r2, #1
 800fa96:	755a      	strb	r2, [r3, #21]
 800fa98:	2301      	movs	r3, #1
 800fa9a:	e0d8      	b.n	800fc4e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800faa0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800faa2:	697a      	ldr	r2, [r7, #20]
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	69db      	ldr	r3, [r3, #28]
 800faa8:	4619      	mov	r1, r3
 800faaa:	4610      	mov	r0, r2
 800faac:	f7fe faa0 	bl	800dff0 <clust2sect>
 800fab0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fab2:	69bb      	ldr	r3, [r7, #24]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d104      	bne.n	800fac2 <f_read+0x12a>
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	2202      	movs	r2, #2
 800fabc:	755a      	strb	r2, [r3, #21]
 800fabe:	2302      	movs	r3, #2
 800fac0:	e0c5      	b.n	800fc4e <f_read+0x2b6>
			sect += csect;
 800fac2:	69ba      	ldr	r2, [r7, #24]
 800fac4:	69fb      	ldr	r3, [r7, #28]
 800fac6:	4413      	add	r3, r2
 800fac8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800faca:	697b      	ldr	r3, [r7, #20]
 800facc:	899b      	ldrh	r3, [r3, #12]
 800face:	461a      	mov	r2, r3
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	fbb3 f3f2 	udiv	r3, r3, r2
 800fad6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800fad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d041      	beq.n	800fb62 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800fade:	69fa      	ldr	r2, [r7, #28]
 800fae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fae2:	4413      	add	r3, r2
 800fae4:	697a      	ldr	r2, [r7, #20]
 800fae6:	8952      	ldrh	r2, [r2, #10]
 800fae8:	4293      	cmp	r3, r2
 800faea:	d905      	bls.n	800faf8 <f_read+0x160>
					cc = fs->csize - csect;
 800faec:	697b      	ldr	r3, [r7, #20]
 800faee:	895b      	ldrh	r3, [r3, #10]
 800faf0:	461a      	mov	r2, r3
 800faf2:	69fb      	ldr	r3, [r7, #28]
 800faf4:	1ad3      	subs	r3, r2, r3
 800faf6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800faf8:	697b      	ldr	r3, [r7, #20]
 800fafa:	7858      	ldrb	r0, [r3, #1]
 800fafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fafe:	69ba      	ldr	r2, [r7, #24]
 800fb00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fb02:	f7fd fec9 	bl	800d898 <disk_read>
 800fb06:	4603      	mov	r3, r0
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d004      	beq.n	800fb16 <f_read+0x17e>
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	2201      	movs	r2, #1
 800fb10:	755a      	strb	r2, [r3, #21]
 800fb12:	2301      	movs	r3, #1
 800fb14:	e09b      	b.n	800fc4e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	7d1b      	ldrb	r3, [r3, #20]
 800fb1a:	b25b      	sxtb	r3, r3
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	da18      	bge.n	800fb52 <f_read+0x1ba>
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	6a1a      	ldr	r2, [r3, #32]
 800fb24:	69bb      	ldr	r3, [r7, #24]
 800fb26:	1ad3      	subs	r3, r2, r3
 800fb28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fb2a:	429a      	cmp	r2, r3
 800fb2c:	d911      	bls.n	800fb52 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	6a1a      	ldr	r2, [r3, #32]
 800fb32:	69bb      	ldr	r3, [r7, #24]
 800fb34:	1ad3      	subs	r3, r2, r3
 800fb36:	697a      	ldr	r2, [r7, #20]
 800fb38:	8992      	ldrh	r2, [r2, #12]
 800fb3a:	fb02 f303 	mul.w	r3, r2, r3
 800fb3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb40:	18d0      	adds	r0, r2, r3
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fb48:	697b      	ldr	r3, [r7, #20]
 800fb4a:	899b      	ldrh	r3, [r3, #12]
 800fb4c:	461a      	mov	r2, r3
 800fb4e:	f7fd ff83 	bl	800da58 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800fb52:	697b      	ldr	r3, [r7, #20]
 800fb54:	899b      	ldrh	r3, [r3, #12]
 800fb56:	461a      	mov	r2, r3
 800fb58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb5a:	fb02 f303 	mul.w	r3, r2, r3
 800fb5e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800fb60:	e05c      	b.n	800fc1c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	6a1b      	ldr	r3, [r3, #32]
 800fb66:	69ba      	ldr	r2, [r7, #24]
 800fb68:	429a      	cmp	r2, r3
 800fb6a:	d02e      	beq.n	800fbca <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	7d1b      	ldrb	r3, [r3, #20]
 800fb70:	b25b      	sxtb	r3, r3
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	da18      	bge.n	800fba8 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fb76:	697b      	ldr	r3, [r7, #20]
 800fb78:	7858      	ldrb	r0, [r3, #1]
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	6a1a      	ldr	r2, [r3, #32]
 800fb84:	2301      	movs	r3, #1
 800fb86:	f7fd fea7 	bl	800d8d8 <disk_write>
 800fb8a:	4603      	mov	r3, r0
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d004      	beq.n	800fb9a <f_read+0x202>
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	2201      	movs	r2, #1
 800fb94:	755a      	strb	r2, [r3, #21]
 800fb96:	2301      	movs	r3, #1
 800fb98:	e059      	b.n	800fc4e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	7d1b      	ldrb	r3, [r3, #20]
 800fb9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fba2:	b2da      	uxtb	r2, r3
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800fba8:	697b      	ldr	r3, [r7, #20]
 800fbaa:	7858      	ldrb	r0, [r3, #1]
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fbb2:	2301      	movs	r3, #1
 800fbb4:	69ba      	ldr	r2, [r7, #24]
 800fbb6:	f7fd fe6f 	bl	800d898 <disk_read>
 800fbba:	4603      	mov	r3, r0
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d004      	beq.n	800fbca <f_read+0x232>
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	2201      	movs	r2, #1
 800fbc4:	755a      	strb	r2, [r3, #21]
 800fbc6:	2301      	movs	r3, #1
 800fbc8:	e041      	b.n	800fc4e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	69ba      	ldr	r2, [r7, #24]
 800fbce:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800fbd0:	697b      	ldr	r3, [r7, #20]
 800fbd2:	899b      	ldrh	r3, [r3, #12]
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	699b      	ldr	r3, [r3, #24]
 800fbda:	697a      	ldr	r2, [r7, #20]
 800fbdc:	8992      	ldrh	r2, [r2, #12]
 800fbde:	fbb3 f1f2 	udiv	r1, r3, r2
 800fbe2:	fb02 f201 	mul.w	r2, r2, r1
 800fbe6:	1a9b      	subs	r3, r3, r2
 800fbe8:	1ac3      	subs	r3, r0, r3
 800fbea:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800fbec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	429a      	cmp	r2, r3
 800fbf2:	d901      	bls.n	800fbf8 <f_read+0x260>
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	699b      	ldr	r3, [r3, #24]
 800fc02:	697a      	ldr	r2, [r7, #20]
 800fc04:	8992      	ldrh	r2, [r2, #12]
 800fc06:	fbb3 f0f2 	udiv	r0, r3, r2
 800fc0a:	fb02 f200 	mul.w	r2, r2, r0
 800fc0e:	1a9b      	subs	r3, r3, r2
 800fc10:	440b      	add	r3, r1
 800fc12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc14:	4619      	mov	r1, r3
 800fc16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fc18:	f7fd ff1e 	bl	800da58 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800fc1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc20:	4413      	add	r3, r2
 800fc22:	627b      	str	r3, [r7, #36]	; 0x24
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	699a      	ldr	r2, [r3, #24]
 800fc28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc2a:	441a      	add	r2, r3
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	619a      	str	r2, [r3, #24]
 800fc30:	683b      	ldr	r3, [r7, #0]
 800fc32:	681a      	ldr	r2, [r3, #0]
 800fc34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc36:	441a      	add	r2, r3
 800fc38:	683b      	ldr	r3, [r7, #0]
 800fc3a:	601a      	str	r2, [r3, #0]
 800fc3c:	687a      	ldr	r2, [r7, #4]
 800fc3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc40:	1ad3      	subs	r3, r2, r3
 800fc42:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	f47f aee1 	bne.w	800fa0e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800fc4c:	2300      	movs	r3, #0
}
 800fc4e:	4618      	mov	r0, r3
 800fc50:	3738      	adds	r7, #56	; 0x38
 800fc52:	46bd      	mov	sp, r7
 800fc54:	bd80      	pop	{r7, pc}

0800fc56 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800fc56:	b580      	push	{r7, lr}
 800fc58:	b08c      	sub	sp, #48	; 0x30
 800fc5a:	af00      	add	r7, sp, #0
 800fc5c:	60f8      	str	r0, [r7, #12]
 800fc5e:	60b9      	str	r1, [r7, #8]
 800fc60:	607a      	str	r2, [r7, #4]
 800fc62:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800fc64:	68bb      	ldr	r3, [r7, #8]
 800fc66:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	f107 0210 	add.w	r2, r7, #16
 800fc74:	4611      	mov	r1, r2
 800fc76:	4618      	mov	r0, r3
 800fc78:	f7ff fc46 	bl	800f508 <validate>
 800fc7c:	4603      	mov	r3, r0
 800fc7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fc82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d107      	bne.n	800fc9a <f_write+0x44>
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	7d5b      	ldrb	r3, [r3, #21]
 800fc8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800fc92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d002      	beq.n	800fca0 <f_write+0x4a>
 800fc9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fc9e:	e16a      	b.n	800ff76 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	7d1b      	ldrb	r3, [r3, #20]
 800fca4:	f003 0302 	and.w	r3, r3, #2
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d101      	bne.n	800fcb0 <f_write+0x5a>
 800fcac:	2307      	movs	r3, #7
 800fcae:	e162      	b.n	800ff76 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	699a      	ldr	r2, [r3, #24]
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	441a      	add	r2, r3
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	699b      	ldr	r3, [r3, #24]
 800fcbc:	429a      	cmp	r2, r3
 800fcbe:	f080 814c 	bcs.w	800ff5a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	699b      	ldr	r3, [r3, #24]
 800fcc6:	43db      	mvns	r3, r3
 800fcc8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800fcca:	e146      	b.n	800ff5a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	699b      	ldr	r3, [r3, #24]
 800fcd0:	693a      	ldr	r2, [r7, #16]
 800fcd2:	8992      	ldrh	r2, [r2, #12]
 800fcd4:	fbb3 f1f2 	udiv	r1, r3, r2
 800fcd8:	fb02 f201 	mul.w	r2, r2, r1
 800fcdc:	1a9b      	subs	r3, r3, r2
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	f040 80f1 	bne.w	800fec6 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	699b      	ldr	r3, [r3, #24]
 800fce8:	693a      	ldr	r2, [r7, #16]
 800fcea:	8992      	ldrh	r2, [r2, #12]
 800fcec:	fbb3 f3f2 	udiv	r3, r3, r2
 800fcf0:	693a      	ldr	r2, [r7, #16]
 800fcf2:	8952      	ldrh	r2, [r2, #10]
 800fcf4:	3a01      	subs	r2, #1
 800fcf6:	4013      	ands	r3, r2
 800fcf8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800fcfa:	69bb      	ldr	r3, [r7, #24]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d143      	bne.n	800fd88 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	699b      	ldr	r3, [r3, #24]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d10c      	bne.n	800fd22 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	689b      	ldr	r3, [r3, #8]
 800fd0c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800fd0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d11a      	bne.n	800fd4a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800fd14:	68fb      	ldr	r3, [r7, #12]
 800fd16:	2100      	movs	r1, #0
 800fd18:	4618      	mov	r0, r3
 800fd1a:	f7fe fbd4 	bl	800e4c6 <create_chain>
 800fd1e:	62b8      	str	r0, [r7, #40]	; 0x28
 800fd20:	e013      	b.n	800fd4a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d007      	beq.n	800fd3a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	699b      	ldr	r3, [r3, #24]
 800fd2e:	4619      	mov	r1, r3
 800fd30:	68f8      	ldr	r0, [r7, #12]
 800fd32:	f7fe fc60 	bl	800e5f6 <clmt_clust>
 800fd36:	62b8      	str	r0, [r7, #40]	; 0x28
 800fd38:	e007      	b.n	800fd4a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800fd3a:	68fa      	ldr	r2, [r7, #12]
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	69db      	ldr	r3, [r3, #28]
 800fd40:	4619      	mov	r1, r3
 800fd42:	4610      	mov	r0, r2
 800fd44:	f7fe fbbf 	bl	800e4c6 <create_chain>
 800fd48:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	f000 8109 	beq.w	800ff64 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800fd52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd54:	2b01      	cmp	r3, #1
 800fd56:	d104      	bne.n	800fd62 <f_write+0x10c>
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	2202      	movs	r2, #2
 800fd5c:	755a      	strb	r2, [r3, #21]
 800fd5e:	2302      	movs	r3, #2
 800fd60:	e109      	b.n	800ff76 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fd62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fd68:	d104      	bne.n	800fd74 <f_write+0x11e>
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	2201      	movs	r2, #1
 800fd6e:	755a      	strb	r2, [r3, #21]
 800fd70:	2301      	movs	r3, #1
 800fd72:	e100      	b.n	800ff76 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd78:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	689b      	ldr	r3, [r3, #8]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d102      	bne.n	800fd88 <f_write+0x132>
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd86:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	7d1b      	ldrb	r3, [r3, #20]
 800fd8c:	b25b      	sxtb	r3, r3
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	da18      	bge.n	800fdc4 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fd92:	693b      	ldr	r3, [r7, #16]
 800fd94:	7858      	ldrb	r0, [r3, #1]
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	6a1a      	ldr	r2, [r3, #32]
 800fda0:	2301      	movs	r3, #1
 800fda2:	f7fd fd99 	bl	800d8d8 <disk_write>
 800fda6:	4603      	mov	r3, r0
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d004      	beq.n	800fdb6 <f_write+0x160>
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	2201      	movs	r2, #1
 800fdb0:	755a      	strb	r2, [r3, #21]
 800fdb2:	2301      	movs	r3, #1
 800fdb4:	e0df      	b.n	800ff76 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	7d1b      	ldrb	r3, [r3, #20]
 800fdba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fdbe:	b2da      	uxtb	r2, r3
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800fdc4:	693a      	ldr	r2, [r7, #16]
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	69db      	ldr	r3, [r3, #28]
 800fdca:	4619      	mov	r1, r3
 800fdcc:	4610      	mov	r0, r2
 800fdce:	f7fe f90f 	bl	800dff0 <clust2sect>
 800fdd2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fdd4:	697b      	ldr	r3, [r7, #20]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d104      	bne.n	800fde4 <f_write+0x18e>
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	2202      	movs	r2, #2
 800fdde:	755a      	strb	r2, [r3, #21]
 800fde0:	2302      	movs	r3, #2
 800fde2:	e0c8      	b.n	800ff76 <f_write+0x320>
			sect += csect;
 800fde4:	697a      	ldr	r2, [r7, #20]
 800fde6:	69bb      	ldr	r3, [r7, #24]
 800fde8:	4413      	add	r3, r2
 800fdea:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800fdec:	693b      	ldr	r3, [r7, #16]
 800fdee:	899b      	ldrh	r3, [r3, #12]
 800fdf0:	461a      	mov	r2, r3
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	fbb3 f3f2 	udiv	r3, r3, r2
 800fdf8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800fdfa:	6a3b      	ldr	r3, [r7, #32]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d043      	beq.n	800fe88 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800fe00:	69ba      	ldr	r2, [r7, #24]
 800fe02:	6a3b      	ldr	r3, [r7, #32]
 800fe04:	4413      	add	r3, r2
 800fe06:	693a      	ldr	r2, [r7, #16]
 800fe08:	8952      	ldrh	r2, [r2, #10]
 800fe0a:	4293      	cmp	r3, r2
 800fe0c:	d905      	bls.n	800fe1a <f_write+0x1c4>
					cc = fs->csize - csect;
 800fe0e:	693b      	ldr	r3, [r7, #16]
 800fe10:	895b      	ldrh	r3, [r3, #10]
 800fe12:	461a      	mov	r2, r3
 800fe14:	69bb      	ldr	r3, [r7, #24]
 800fe16:	1ad3      	subs	r3, r2, r3
 800fe18:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fe1a:	693b      	ldr	r3, [r7, #16]
 800fe1c:	7858      	ldrb	r0, [r3, #1]
 800fe1e:	6a3b      	ldr	r3, [r7, #32]
 800fe20:	697a      	ldr	r2, [r7, #20]
 800fe22:	69f9      	ldr	r1, [r7, #28]
 800fe24:	f7fd fd58 	bl	800d8d8 <disk_write>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d004      	beq.n	800fe38 <f_write+0x1e2>
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	2201      	movs	r2, #1
 800fe32:	755a      	strb	r2, [r3, #21]
 800fe34:	2301      	movs	r3, #1
 800fe36:	e09e      	b.n	800ff76 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	6a1a      	ldr	r2, [r3, #32]
 800fe3c:	697b      	ldr	r3, [r7, #20]
 800fe3e:	1ad3      	subs	r3, r2, r3
 800fe40:	6a3a      	ldr	r2, [r7, #32]
 800fe42:	429a      	cmp	r2, r3
 800fe44:	d918      	bls.n	800fe78 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	6a1a      	ldr	r2, [r3, #32]
 800fe50:	697b      	ldr	r3, [r7, #20]
 800fe52:	1ad3      	subs	r3, r2, r3
 800fe54:	693a      	ldr	r2, [r7, #16]
 800fe56:	8992      	ldrh	r2, [r2, #12]
 800fe58:	fb02 f303 	mul.w	r3, r2, r3
 800fe5c:	69fa      	ldr	r2, [r7, #28]
 800fe5e:	18d1      	adds	r1, r2, r3
 800fe60:	693b      	ldr	r3, [r7, #16]
 800fe62:	899b      	ldrh	r3, [r3, #12]
 800fe64:	461a      	mov	r2, r3
 800fe66:	f7fd fdf7 	bl	800da58 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	7d1b      	ldrb	r3, [r3, #20]
 800fe6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fe72:	b2da      	uxtb	r2, r3
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800fe78:	693b      	ldr	r3, [r7, #16]
 800fe7a:	899b      	ldrh	r3, [r3, #12]
 800fe7c:	461a      	mov	r2, r3
 800fe7e:	6a3b      	ldr	r3, [r7, #32]
 800fe80:	fb02 f303 	mul.w	r3, r2, r3
 800fe84:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800fe86:	e04b      	b.n	800ff20 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	6a1b      	ldr	r3, [r3, #32]
 800fe8c:	697a      	ldr	r2, [r7, #20]
 800fe8e:	429a      	cmp	r2, r3
 800fe90:	d016      	beq.n	800fec0 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	699a      	ldr	r2, [r3, #24]
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fe9a:	429a      	cmp	r2, r3
 800fe9c:	d210      	bcs.n	800fec0 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800fe9e:	693b      	ldr	r3, [r7, #16]
 800fea0:	7858      	ldrb	r0, [r3, #1]
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fea8:	2301      	movs	r3, #1
 800feaa:	697a      	ldr	r2, [r7, #20]
 800feac:	f7fd fcf4 	bl	800d898 <disk_read>
 800feb0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d004      	beq.n	800fec0 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	2201      	movs	r2, #1
 800feba:	755a      	strb	r2, [r3, #21]
 800febc:	2301      	movs	r3, #1
 800febe:	e05a      	b.n	800ff76 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	697a      	ldr	r2, [r7, #20]
 800fec4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800fec6:	693b      	ldr	r3, [r7, #16]
 800fec8:	899b      	ldrh	r3, [r3, #12]
 800feca:	4618      	mov	r0, r3
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	699b      	ldr	r3, [r3, #24]
 800fed0:	693a      	ldr	r2, [r7, #16]
 800fed2:	8992      	ldrh	r2, [r2, #12]
 800fed4:	fbb3 f1f2 	udiv	r1, r3, r2
 800fed8:	fb02 f201 	mul.w	r2, r2, r1
 800fedc:	1a9b      	subs	r3, r3, r2
 800fede:	1ac3      	subs	r3, r0, r3
 800fee0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800fee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	429a      	cmp	r2, r3
 800fee8:	d901      	bls.n	800feee <f_write+0x298>
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	699b      	ldr	r3, [r3, #24]
 800fef8:	693a      	ldr	r2, [r7, #16]
 800fefa:	8992      	ldrh	r2, [r2, #12]
 800fefc:	fbb3 f0f2 	udiv	r0, r3, r2
 800ff00:	fb02 f200 	mul.w	r2, r2, r0
 800ff04:	1a9b      	subs	r3, r3, r2
 800ff06:	440b      	add	r3, r1
 800ff08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff0a:	69f9      	ldr	r1, [r7, #28]
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	f7fd fda3 	bl	800da58 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	7d1b      	ldrb	r3, [r3, #20]
 800ff16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ff1a:	b2da      	uxtb	r2, r3
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800ff20:	69fa      	ldr	r2, [r7, #28]
 800ff22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff24:	4413      	add	r3, r2
 800ff26:	61fb      	str	r3, [r7, #28]
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	699a      	ldr	r2, [r3, #24]
 800ff2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff2e:	441a      	add	r2, r3
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	619a      	str	r2, [r3, #24]
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	68da      	ldr	r2, [r3, #12]
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	699b      	ldr	r3, [r3, #24]
 800ff3c:	429a      	cmp	r2, r3
 800ff3e:	bf38      	it	cc
 800ff40:	461a      	movcc	r2, r3
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	60da      	str	r2, [r3, #12]
 800ff46:	683b      	ldr	r3, [r7, #0]
 800ff48:	681a      	ldr	r2, [r3, #0]
 800ff4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff4c:	441a      	add	r2, r3
 800ff4e:	683b      	ldr	r3, [r7, #0]
 800ff50:	601a      	str	r2, [r3, #0]
 800ff52:	687a      	ldr	r2, [r7, #4]
 800ff54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff56:	1ad3      	subs	r3, r2, r3
 800ff58:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	f47f aeb5 	bne.w	800fccc <f_write+0x76>
 800ff62:	e000      	b.n	800ff66 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800ff64:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	7d1b      	ldrb	r3, [r3, #20]
 800ff6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff6e:	b2da      	uxtb	r2, r3
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ff74:	2300      	movs	r3, #0
}
 800ff76:	4618      	mov	r0, r3
 800ff78:	3730      	adds	r7, #48	; 0x30
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}

0800ff7e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ff7e:	b580      	push	{r7, lr}
 800ff80:	b086      	sub	sp, #24
 800ff82:	af00      	add	r7, sp, #0
 800ff84:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	f107 0208 	add.w	r2, r7, #8
 800ff8c:	4611      	mov	r1, r2
 800ff8e:	4618      	mov	r0, r3
 800ff90:	f7ff faba 	bl	800f508 <validate>
 800ff94:	4603      	mov	r3, r0
 800ff96:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ff98:	7dfb      	ldrb	r3, [r7, #23]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d168      	bne.n	8010070 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	7d1b      	ldrb	r3, [r3, #20]
 800ffa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d062      	beq.n	8010070 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	7d1b      	ldrb	r3, [r3, #20]
 800ffae:	b25b      	sxtb	r3, r3
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	da15      	bge.n	800ffe0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ffb4:	68bb      	ldr	r3, [r7, #8]
 800ffb6:	7858      	ldrb	r0, [r3, #1]
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	6a1a      	ldr	r2, [r3, #32]
 800ffc2:	2301      	movs	r3, #1
 800ffc4:	f7fd fc88 	bl	800d8d8 <disk_write>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d001      	beq.n	800ffd2 <f_sync+0x54>
 800ffce:	2301      	movs	r3, #1
 800ffd0:	e04f      	b.n	8010072 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	7d1b      	ldrb	r3, [r3, #20]
 800ffd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ffda:	b2da      	uxtb	r2, r3
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ffe0:	f7fd f9c8 	bl	800d374 <get_fattime>
 800ffe4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ffe6:	68ba      	ldr	r2, [r7, #8]
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffec:	4619      	mov	r1, r3
 800ffee:	4610      	mov	r0, r2
 800fff0:	f7fd ff60 	bl	800deb4 <move_window>
 800fff4:	4603      	mov	r3, r0
 800fff6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800fff8:	7dfb      	ldrb	r3, [r7, #23]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d138      	bne.n	8010070 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010002:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	330b      	adds	r3, #11
 8010008:	781a      	ldrb	r2, [r3, #0]
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	330b      	adds	r3, #11
 801000e:	f042 0220 	orr.w	r2, r2, #32
 8010012:	b2d2      	uxtb	r2, r2
 8010014:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	6818      	ldr	r0, [r3, #0]
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	689b      	ldr	r3, [r3, #8]
 801001e:	461a      	mov	r2, r3
 8010020:	68f9      	ldr	r1, [r7, #12]
 8010022:	f7fe fce5 	bl	800e9f0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	f103 021c 	add.w	r2, r3, #28
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	68db      	ldr	r3, [r3, #12]
 8010030:	4619      	mov	r1, r3
 8010032:	4610      	mov	r0, r2
 8010034:	f7fd fce4 	bl	800da00 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	3316      	adds	r3, #22
 801003c:	6939      	ldr	r1, [r7, #16]
 801003e:	4618      	mov	r0, r3
 8010040:	f7fd fcde 	bl	800da00 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	3312      	adds	r3, #18
 8010048:	2100      	movs	r1, #0
 801004a:	4618      	mov	r0, r3
 801004c:	f7fd fcbd 	bl	800d9ca <st_word>
					fs->wflag = 1;
 8010050:	68bb      	ldr	r3, [r7, #8]
 8010052:	2201      	movs	r2, #1
 8010054:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010056:	68bb      	ldr	r3, [r7, #8]
 8010058:	4618      	mov	r0, r3
 801005a:	f7fd ff59 	bl	800df10 <sync_fs>
 801005e:	4603      	mov	r3, r0
 8010060:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	7d1b      	ldrb	r3, [r3, #20]
 8010066:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801006a:	b2da      	uxtb	r2, r3
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010070:	7dfb      	ldrb	r3, [r7, #23]
}
 8010072:	4618      	mov	r0, r3
 8010074:	3718      	adds	r7, #24
 8010076:	46bd      	mov	sp, r7
 8010078:	bd80      	pop	{r7, pc}

0801007a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801007a:	b580      	push	{r7, lr}
 801007c:	b084      	sub	sp, #16
 801007e:	af00      	add	r7, sp, #0
 8010080:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010082:	6878      	ldr	r0, [r7, #4]
 8010084:	f7ff ff7b 	bl	800ff7e <f_sync>
 8010088:	4603      	mov	r3, r0
 801008a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801008c:	7bfb      	ldrb	r3, [r7, #15]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d118      	bne.n	80100c4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	f107 0208 	add.w	r2, r7, #8
 8010098:	4611      	mov	r1, r2
 801009a:	4618      	mov	r0, r3
 801009c:	f7ff fa34 	bl	800f508 <validate>
 80100a0:	4603      	mov	r3, r0
 80100a2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80100a4:	7bfb      	ldrb	r3, [r7, #15]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d10c      	bne.n	80100c4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	691b      	ldr	r3, [r3, #16]
 80100ae:	4618      	mov	r0, r3
 80100b0:	f7fd fe5c 	bl	800dd6c <dec_lock>
 80100b4:	4603      	mov	r3, r0
 80100b6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80100b8:	7bfb      	ldrb	r3, [r7, #15]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d102      	bne.n	80100c4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	2200      	movs	r2, #0
 80100c2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80100c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80100c6:	4618      	mov	r0, r3
 80100c8:	3710      	adds	r7, #16
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd80      	pop	{r7, pc}

080100ce <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80100ce:	b580      	push	{r7, lr}
 80100d0:	b090      	sub	sp, #64	; 0x40
 80100d2:	af00      	add	r7, sp, #0
 80100d4:	6078      	str	r0, [r7, #4]
 80100d6:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	f107 0208 	add.w	r2, r7, #8
 80100de:	4611      	mov	r1, r2
 80100e0:	4618      	mov	r0, r3
 80100e2:	f7ff fa11 	bl	800f508 <validate>
 80100e6:	4603      	mov	r3, r0
 80100e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80100ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d103      	bne.n	80100fc <f_lseek+0x2e>
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	7d5b      	ldrb	r3, [r3, #21]
 80100f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80100fc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010100:	2b00      	cmp	r3, #0
 8010102:	d002      	beq.n	801010a <f_lseek+0x3c>
 8010104:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010108:	e201      	b.n	801050e <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801010e:	2b00      	cmp	r3, #0
 8010110:	f000 80d9 	beq.w	80102c6 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010114:	683b      	ldr	r3, [r7, #0]
 8010116:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801011a:	d15a      	bne.n	80101d2 <f_lseek+0x104>
			tbl = fp->cltbl;
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010120:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8010122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010124:	1d1a      	adds	r2, r3, #4
 8010126:	627a      	str	r2, [r7, #36]	; 0x24
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	617b      	str	r3, [r7, #20]
 801012c:	2302      	movs	r3, #2
 801012e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	689b      	ldr	r3, [r3, #8]
 8010134:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8010136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010138:	2b00      	cmp	r3, #0
 801013a:	d03a      	beq.n	80101b2 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801013c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801013e:	613b      	str	r3, [r7, #16]
 8010140:	2300      	movs	r3, #0
 8010142:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010146:	3302      	adds	r3, #2
 8010148:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 801014a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801014c:	60fb      	str	r3, [r7, #12]
 801014e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010150:	3301      	adds	r3, #1
 8010152:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010158:	4618      	mov	r0, r3
 801015a:	f7fd ff68 	bl	800e02e <get_fat>
 801015e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8010160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010162:	2b01      	cmp	r3, #1
 8010164:	d804      	bhi.n	8010170 <f_lseek+0xa2>
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	2202      	movs	r2, #2
 801016a:	755a      	strb	r2, [r3, #21]
 801016c:	2302      	movs	r3, #2
 801016e:	e1ce      	b.n	801050e <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010172:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010176:	d104      	bne.n	8010182 <f_lseek+0xb4>
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	2201      	movs	r2, #1
 801017c:	755a      	strb	r2, [r3, #21]
 801017e:	2301      	movs	r3, #1
 8010180:	e1c5      	b.n	801050e <f_lseek+0x440>
					} while (cl == pcl + 1);
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	3301      	adds	r3, #1
 8010186:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010188:	429a      	cmp	r2, r3
 801018a:	d0de      	beq.n	801014a <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 801018c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801018e:	697b      	ldr	r3, [r7, #20]
 8010190:	429a      	cmp	r2, r3
 8010192:	d809      	bhi.n	80101a8 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8010194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010196:	1d1a      	adds	r2, r3, #4
 8010198:	627a      	str	r2, [r7, #36]	; 0x24
 801019a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801019c:	601a      	str	r2, [r3, #0]
 801019e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101a0:	1d1a      	adds	r2, r3, #4
 80101a2:	627a      	str	r2, [r7, #36]	; 0x24
 80101a4:	693a      	ldr	r2, [r7, #16]
 80101a6:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80101a8:	68bb      	ldr	r3, [r7, #8]
 80101aa:	699b      	ldr	r3, [r3, #24]
 80101ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80101ae:	429a      	cmp	r2, r3
 80101b0:	d3c4      	bcc.n	801013c <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80101b8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80101ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80101bc:	697b      	ldr	r3, [r7, #20]
 80101be:	429a      	cmp	r2, r3
 80101c0:	d803      	bhi.n	80101ca <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80101c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101c4:	2200      	movs	r2, #0
 80101c6:	601a      	str	r2, [r3, #0]
 80101c8:	e19f      	b.n	801050a <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80101ca:	2311      	movs	r3, #17
 80101cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80101d0:	e19b      	b.n	801050a <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	68db      	ldr	r3, [r3, #12]
 80101d6:	683a      	ldr	r2, [r7, #0]
 80101d8:	429a      	cmp	r2, r3
 80101da:	d902      	bls.n	80101e2 <f_lseek+0x114>
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	68db      	ldr	r3, [r3, #12]
 80101e0:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	683a      	ldr	r2, [r7, #0]
 80101e6:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80101e8:	683b      	ldr	r3, [r7, #0]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	f000 818d 	beq.w	801050a <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80101f0:	683b      	ldr	r3, [r7, #0]
 80101f2:	3b01      	subs	r3, #1
 80101f4:	4619      	mov	r1, r3
 80101f6:	6878      	ldr	r0, [r7, #4]
 80101f8:	f7fe f9fd 	bl	800e5f6 <clmt_clust>
 80101fc:	4602      	mov	r2, r0
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8010202:	68ba      	ldr	r2, [r7, #8]
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	69db      	ldr	r3, [r3, #28]
 8010208:	4619      	mov	r1, r3
 801020a:	4610      	mov	r0, r2
 801020c:	f7fd fef0 	bl	800dff0 <clust2sect>
 8010210:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8010212:	69bb      	ldr	r3, [r7, #24]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d104      	bne.n	8010222 <f_lseek+0x154>
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	2202      	movs	r2, #2
 801021c:	755a      	strb	r2, [r3, #21]
 801021e:	2302      	movs	r3, #2
 8010220:	e175      	b.n	801050e <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8010222:	683b      	ldr	r3, [r7, #0]
 8010224:	3b01      	subs	r3, #1
 8010226:	68ba      	ldr	r2, [r7, #8]
 8010228:	8992      	ldrh	r2, [r2, #12]
 801022a:	fbb3 f3f2 	udiv	r3, r3, r2
 801022e:	68ba      	ldr	r2, [r7, #8]
 8010230:	8952      	ldrh	r2, [r2, #10]
 8010232:	3a01      	subs	r2, #1
 8010234:	4013      	ands	r3, r2
 8010236:	69ba      	ldr	r2, [r7, #24]
 8010238:	4413      	add	r3, r2
 801023a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	699b      	ldr	r3, [r3, #24]
 8010240:	68ba      	ldr	r2, [r7, #8]
 8010242:	8992      	ldrh	r2, [r2, #12]
 8010244:	fbb3 f1f2 	udiv	r1, r3, r2
 8010248:	fb02 f201 	mul.w	r2, r2, r1
 801024c:	1a9b      	subs	r3, r3, r2
 801024e:	2b00      	cmp	r3, #0
 8010250:	f000 815b 	beq.w	801050a <f_lseek+0x43c>
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	6a1b      	ldr	r3, [r3, #32]
 8010258:	69ba      	ldr	r2, [r7, #24]
 801025a:	429a      	cmp	r2, r3
 801025c:	f000 8155 	beq.w	801050a <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	7d1b      	ldrb	r3, [r3, #20]
 8010264:	b25b      	sxtb	r3, r3
 8010266:	2b00      	cmp	r3, #0
 8010268:	da18      	bge.n	801029c <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801026a:	68bb      	ldr	r3, [r7, #8]
 801026c:	7858      	ldrb	r0, [r3, #1]
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	6a1a      	ldr	r2, [r3, #32]
 8010278:	2301      	movs	r3, #1
 801027a:	f7fd fb2d 	bl	800d8d8 <disk_write>
 801027e:	4603      	mov	r3, r0
 8010280:	2b00      	cmp	r3, #0
 8010282:	d004      	beq.n	801028e <f_lseek+0x1c0>
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	2201      	movs	r2, #1
 8010288:	755a      	strb	r2, [r3, #21]
 801028a:	2301      	movs	r3, #1
 801028c:	e13f      	b.n	801050e <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	7d1b      	ldrb	r3, [r3, #20]
 8010292:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010296:	b2da      	uxtb	r2, r3
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 801029c:	68bb      	ldr	r3, [r7, #8]
 801029e:	7858      	ldrb	r0, [r3, #1]
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80102a6:	2301      	movs	r3, #1
 80102a8:	69ba      	ldr	r2, [r7, #24]
 80102aa:	f7fd faf5 	bl	800d898 <disk_read>
 80102ae:	4603      	mov	r3, r0
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d004      	beq.n	80102be <f_lseek+0x1f0>
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	2201      	movs	r2, #1
 80102b8:	755a      	strb	r2, [r3, #21]
 80102ba:	2301      	movs	r3, #1
 80102bc:	e127      	b.n	801050e <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	69ba      	ldr	r2, [r7, #24]
 80102c2:	621a      	str	r2, [r3, #32]
 80102c4:	e121      	b.n	801050a <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	68db      	ldr	r3, [r3, #12]
 80102ca:	683a      	ldr	r2, [r7, #0]
 80102cc:	429a      	cmp	r2, r3
 80102ce:	d908      	bls.n	80102e2 <f_lseek+0x214>
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	7d1b      	ldrb	r3, [r3, #20]
 80102d4:	f003 0302 	and.w	r3, r3, #2
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d102      	bne.n	80102e2 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	68db      	ldr	r3, [r3, #12]
 80102e0:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	699b      	ldr	r3, [r3, #24]
 80102e6:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80102e8:	2300      	movs	r3, #0
 80102ea:	637b      	str	r3, [r7, #52]	; 0x34
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80102f0:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80102f2:	683b      	ldr	r3, [r7, #0]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	f000 80b5 	beq.w	8010464 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80102fa:	68bb      	ldr	r3, [r7, #8]
 80102fc:	895b      	ldrh	r3, [r3, #10]
 80102fe:	461a      	mov	r2, r3
 8010300:	68bb      	ldr	r3, [r7, #8]
 8010302:	899b      	ldrh	r3, [r3, #12]
 8010304:	fb03 f302 	mul.w	r3, r3, r2
 8010308:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 801030a:	6a3b      	ldr	r3, [r7, #32]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d01b      	beq.n	8010348 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8010310:	683b      	ldr	r3, [r7, #0]
 8010312:	1e5a      	subs	r2, r3, #1
 8010314:	69fb      	ldr	r3, [r7, #28]
 8010316:	fbb2 f2f3 	udiv	r2, r2, r3
 801031a:	6a3b      	ldr	r3, [r7, #32]
 801031c:	1e59      	subs	r1, r3, #1
 801031e:	69fb      	ldr	r3, [r7, #28]
 8010320:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8010324:	429a      	cmp	r2, r3
 8010326:	d30f      	bcc.n	8010348 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8010328:	6a3b      	ldr	r3, [r7, #32]
 801032a:	1e5a      	subs	r2, r3, #1
 801032c:	69fb      	ldr	r3, [r7, #28]
 801032e:	425b      	negs	r3, r3
 8010330:	401a      	ands	r2, r3
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8010336:	687b      	ldr	r3, [r7, #4]
 8010338:	699b      	ldr	r3, [r3, #24]
 801033a:	683a      	ldr	r2, [r7, #0]
 801033c:	1ad3      	subs	r3, r2, r3
 801033e:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	69db      	ldr	r3, [r3, #28]
 8010344:	63bb      	str	r3, [r7, #56]	; 0x38
 8010346:	e022      	b.n	801038e <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	689b      	ldr	r3, [r3, #8]
 801034c:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801034e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010350:	2b00      	cmp	r3, #0
 8010352:	d119      	bne.n	8010388 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	2100      	movs	r1, #0
 8010358:	4618      	mov	r0, r3
 801035a:	f7fe f8b4 	bl	800e4c6 <create_chain>
 801035e:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010362:	2b01      	cmp	r3, #1
 8010364:	d104      	bne.n	8010370 <f_lseek+0x2a2>
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	2202      	movs	r2, #2
 801036a:	755a      	strb	r2, [r3, #21]
 801036c:	2302      	movs	r3, #2
 801036e:	e0ce      	b.n	801050e <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010372:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010376:	d104      	bne.n	8010382 <f_lseek+0x2b4>
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	2201      	movs	r2, #1
 801037c:	755a      	strb	r2, [r3, #21]
 801037e:	2301      	movs	r3, #1
 8010380:	e0c5      	b.n	801050e <f_lseek+0x440>
					fp->obj.sclust = clst;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010386:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801038c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801038e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010390:	2b00      	cmp	r3, #0
 8010392:	d067      	beq.n	8010464 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8010394:	e03a      	b.n	801040c <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8010396:	683a      	ldr	r2, [r7, #0]
 8010398:	69fb      	ldr	r3, [r7, #28]
 801039a:	1ad3      	subs	r3, r2, r3
 801039c:	603b      	str	r3, [r7, #0]
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	699a      	ldr	r2, [r3, #24]
 80103a2:	69fb      	ldr	r3, [r7, #28]
 80103a4:	441a      	add	r2, r3
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	7d1b      	ldrb	r3, [r3, #20]
 80103ae:	f003 0302 	and.w	r3, r3, #2
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d00b      	beq.n	80103ce <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80103ba:	4618      	mov	r0, r3
 80103bc:	f7fe f883 	bl	800e4c6 <create_chain>
 80103c0:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80103c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d108      	bne.n	80103da <f_lseek+0x30c>
							ofs = 0; break;
 80103c8:	2300      	movs	r3, #0
 80103ca:	603b      	str	r3, [r7, #0]
 80103cc:	e022      	b.n	8010414 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80103d2:	4618      	mov	r0, r3
 80103d4:	f7fd fe2b 	bl	800e02e <get_fat>
 80103d8:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80103da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80103e0:	d104      	bne.n	80103ec <f_lseek+0x31e>
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	2201      	movs	r2, #1
 80103e6:	755a      	strb	r2, [r3, #21]
 80103e8:	2301      	movs	r3, #1
 80103ea:	e090      	b.n	801050e <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80103ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103ee:	2b01      	cmp	r3, #1
 80103f0:	d904      	bls.n	80103fc <f_lseek+0x32e>
 80103f2:	68bb      	ldr	r3, [r7, #8]
 80103f4:	699b      	ldr	r3, [r3, #24]
 80103f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80103f8:	429a      	cmp	r2, r3
 80103fa:	d304      	bcc.n	8010406 <f_lseek+0x338>
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	2202      	movs	r2, #2
 8010400:	755a      	strb	r2, [r3, #21]
 8010402:	2302      	movs	r3, #2
 8010404:	e083      	b.n	801050e <f_lseek+0x440>
					fp->clust = clst;
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801040a:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801040c:	683a      	ldr	r2, [r7, #0]
 801040e:	69fb      	ldr	r3, [r7, #28]
 8010410:	429a      	cmp	r2, r3
 8010412:	d8c0      	bhi.n	8010396 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	699a      	ldr	r2, [r3, #24]
 8010418:	683b      	ldr	r3, [r7, #0]
 801041a:	441a      	add	r2, r3
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8010420:	68bb      	ldr	r3, [r7, #8]
 8010422:	899b      	ldrh	r3, [r3, #12]
 8010424:	461a      	mov	r2, r3
 8010426:	683b      	ldr	r3, [r7, #0]
 8010428:	fbb3 f1f2 	udiv	r1, r3, r2
 801042c:	fb02 f201 	mul.w	r2, r2, r1
 8010430:	1a9b      	subs	r3, r3, r2
 8010432:	2b00      	cmp	r3, #0
 8010434:	d016      	beq.n	8010464 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8010436:	68bb      	ldr	r3, [r7, #8]
 8010438:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801043a:	4618      	mov	r0, r3
 801043c:	f7fd fdd8 	bl	800dff0 <clust2sect>
 8010440:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8010442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010444:	2b00      	cmp	r3, #0
 8010446:	d104      	bne.n	8010452 <f_lseek+0x384>
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	2202      	movs	r2, #2
 801044c:	755a      	strb	r2, [r3, #21]
 801044e:	2302      	movs	r3, #2
 8010450:	e05d      	b.n	801050e <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8010452:	68bb      	ldr	r3, [r7, #8]
 8010454:	899b      	ldrh	r3, [r3, #12]
 8010456:	461a      	mov	r2, r3
 8010458:	683b      	ldr	r3, [r7, #0]
 801045a:	fbb3 f3f2 	udiv	r3, r3, r2
 801045e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010460:	4413      	add	r3, r2
 8010462:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	699a      	ldr	r2, [r3, #24]
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	68db      	ldr	r3, [r3, #12]
 801046c:	429a      	cmp	r2, r3
 801046e:	d90a      	bls.n	8010486 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	699a      	ldr	r2, [r3, #24]
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	7d1b      	ldrb	r3, [r3, #20]
 801047c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010480:	b2da      	uxtb	r2, r3
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	699b      	ldr	r3, [r3, #24]
 801048a:	68ba      	ldr	r2, [r7, #8]
 801048c:	8992      	ldrh	r2, [r2, #12]
 801048e:	fbb3 f1f2 	udiv	r1, r3, r2
 8010492:	fb02 f201 	mul.w	r2, r2, r1
 8010496:	1a9b      	subs	r3, r3, r2
 8010498:	2b00      	cmp	r3, #0
 801049a:	d036      	beq.n	801050a <f_lseek+0x43c>
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	6a1b      	ldr	r3, [r3, #32]
 80104a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80104a2:	429a      	cmp	r2, r3
 80104a4:	d031      	beq.n	801050a <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	7d1b      	ldrb	r3, [r3, #20]
 80104aa:	b25b      	sxtb	r3, r3
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	da18      	bge.n	80104e2 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80104b0:	68bb      	ldr	r3, [r7, #8]
 80104b2:	7858      	ldrb	r0, [r3, #1]
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	6a1a      	ldr	r2, [r3, #32]
 80104be:	2301      	movs	r3, #1
 80104c0:	f7fd fa0a 	bl	800d8d8 <disk_write>
 80104c4:	4603      	mov	r3, r0
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d004      	beq.n	80104d4 <f_lseek+0x406>
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	2201      	movs	r2, #1
 80104ce:	755a      	strb	r2, [r3, #21]
 80104d0:	2301      	movs	r3, #1
 80104d2:	e01c      	b.n	801050e <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	7d1b      	ldrb	r3, [r3, #20]
 80104d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80104dc:	b2da      	uxtb	r2, r3
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80104e2:	68bb      	ldr	r3, [r7, #8]
 80104e4:	7858      	ldrb	r0, [r3, #1]
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80104ec:	2301      	movs	r3, #1
 80104ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80104f0:	f7fd f9d2 	bl	800d898 <disk_read>
 80104f4:	4603      	mov	r3, r0
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d004      	beq.n	8010504 <f_lseek+0x436>
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	2201      	movs	r2, #1
 80104fe:	755a      	strb	r2, [r3, #21]
 8010500:	2301      	movs	r3, #1
 8010502:	e004      	b.n	801050e <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010508:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 801050a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801050e:	4618      	mov	r0, r3
 8010510:	3740      	adds	r7, #64	; 0x40
 8010512:	46bd      	mov	sp, r7
 8010514:	bd80      	pop	{r7, pc}

08010516 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8010516:	b580      	push	{r7, lr}
 8010518:	b086      	sub	sp, #24
 801051a:	af00      	add	r7, sp, #0
 801051c:	6078      	str	r0, [r7, #4]
 801051e:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	2b00      	cmp	r3, #0
 8010524:	d101      	bne.n	801052a <f_opendir+0x14>
 8010526:	2309      	movs	r3, #9
 8010528:	e064      	b.n	80105f4 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 801052e:	f107 010c 	add.w	r1, r7, #12
 8010532:	463b      	mov	r3, r7
 8010534:	2200      	movs	r2, #0
 8010536:	4618      	mov	r0, r3
 8010538:	f7fe fd62 	bl	800f000 <find_volume>
 801053c:	4603      	mov	r3, r0
 801053e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010540:	7dfb      	ldrb	r3, [r7, #23]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d14f      	bne.n	80105e6 <f_opendir+0xd0>
		obj->fs = fs;
 8010546:	68fa      	ldr	r2, [r7, #12]
 8010548:	693b      	ldr	r3, [r7, #16]
 801054a:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801054c:	683b      	ldr	r3, [r7, #0]
 801054e:	4619      	mov	r1, r3
 8010550:	6878      	ldr	r0, [r7, #4]
 8010552:	f7fe fc45 	bl	800ede0 <follow_path>
 8010556:	4603      	mov	r3, r0
 8010558:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 801055a:	7dfb      	ldrb	r3, [r7, #23]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d13d      	bne.n	80105dc <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010566:	b25b      	sxtb	r3, r3
 8010568:	2b00      	cmp	r3, #0
 801056a:	db12      	blt.n	8010592 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801056c:	693b      	ldr	r3, [r7, #16]
 801056e:	799b      	ldrb	r3, [r3, #6]
 8010570:	f003 0310 	and.w	r3, r3, #16
 8010574:	2b00      	cmp	r3, #0
 8010576:	d00a      	beq.n	801058e <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8010578:	68fa      	ldr	r2, [r7, #12]
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	6a1b      	ldr	r3, [r3, #32]
 801057e:	4619      	mov	r1, r3
 8010580:	4610      	mov	r0, r2
 8010582:	f7fe fa16 	bl	800e9b2 <ld_clust>
 8010586:	4602      	mov	r2, r0
 8010588:	693b      	ldr	r3, [r7, #16]
 801058a:	609a      	str	r2, [r3, #8]
 801058c:	e001      	b.n	8010592 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 801058e:	2305      	movs	r3, #5
 8010590:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8010592:	7dfb      	ldrb	r3, [r7, #23]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d121      	bne.n	80105dc <f_opendir+0xc6>
				obj->id = fs->id;
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	88da      	ldrh	r2, [r3, #6]
 801059c:	693b      	ldr	r3, [r7, #16]
 801059e:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80105a0:	2100      	movs	r1, #0
 80105a2:	6878      	ldr	r0, [r7, #4]
 80105a4:	f7fe f85f 	bl	800e666 <dir_sdi>
 80105a8:	4603      	mov	r3, r0
 80105aa:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 80105ac:	7dfb      	ldrb	r3, [r7, #23]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d114      	bne.n	80105dc <f_opendir+0xc6>
					if (obj->sclust) {
 80105b2:	693b      	ldr	r3, [r7, #16]
 80105b4:	689b      	ldr	r3, [r3, #8]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d00d      	beq.n	80105d6 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80105ba:	2100      	movs	r1, #0
 80105bc:	6878      	ldr	r0, [r7, #4]
 80105be:	f7fd fb47 	bl	800dc50 <inc_lock>
 80105c2:	4602      	mov	r2, r0
 80105c4:	693b      	ldr	r3, [r7, #16]
 80105c6:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80105c8:	693b      	ldr	r3, [r7, #16]
 80105ca:	691b      	ldr	r3, [r3, #16]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d105      	bne.n	80105dc <f_opendir+0xc6>
 80105d0:	2312      	movs	r3, #18
 80105d2:	75fb      	strb	r3, [r7, #23]
 80105d4:	e002      	b.n	80105dc <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80105d6:	693b      	ldr	r3, [r7, #16]
 80105d8:	2200      	movs	r2, #0
 80105da:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80105dc:	7dfb      	ldrb	r3, [r7, #23]
 80105de:	2b04      	cmp	r3, #4
 80105e0:	d101      	bne.n	80105e6 <f_opendir+0xd0>
 80105e2:	2305      	movs	r3, #5
 80105e4:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80105e6:	7dfb      	ldrb	r3, [r7, #23]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d002      	beq.n	80105f2 <f_opendir+0xdc>
 80105ec:	693b      	ldr	r3, [r7, #16]
 80105ee:	2200      	movs	r2, #0
 80105f0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80105f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80105f4:	4618      	mov	r0, r3
 80105f6:	3718      	adds	r7, #24
 80105f8:	46bd      	mov	sp, r7
 80105fa:	bd80      	pop	{r7, pc}

080105fc <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b084      	sub	sp, #16
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
 8010604:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	f107 0208 	add.w	r2, r7, #8
 801060c:	4611      	mov	r1, r2
 801060e:	4618      	mov	r0, r3
 8010610:	f7fe ff7a 	bl	800f508 <validate>
 8010614:	4603      	mov	r3, r0
 8010616:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010618:	7bfb      	ldrb	r3, [r7, #15]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d126      	bne.n	801066c <f_readdir+0x70>
		if (!fno) {
 801061e:	683b      	ldr	r3, [r7, #0]
 8010620:	2b00      	cmp	r3, #0
 8010622:	d106      	bne.n	8010632 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8010624:	2100      	movs	r1, #0
 8010626:	6878      	ldr	r0, [r7, #4]
 8010628:	f7fe f81d 	bl	800e666 <dir_sdi>
 801062c:	4603      	mov	r3, r0
 801062e:	73fb      	strb	r3, [r7, #15]
 8010630:	e01c      	b.n	801066c <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8010632:	2100      	movs	r1, #0
 8010634:	6878      	ldr	r0, [r7, #4]
 8010636:	f7fe f9fb 	bl	800ea30 <dir_read>
 801063a:	4603      	mov	r3, r0
 801063c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 801063e:	7bfb      	ldrb	r3, [r7, #15]
 8010640:	2b04      	cmp	r3, #4
 8010642:	d101      	bne.n	8010648 <f_readdir+0x4c>
 8010644:	2300      	movs	r3, #0
 8010646:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8010648:	7bfb      	ldrb	r3, [r7, #15]
 801064a:	2b00      	cmp	r3, #0
 801064c:	d10e      	bne.n	801066c <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 801064e:	6839      	ldr	r1, [r7, #0]
 8010650:	6878      	ldr	r0, [r7, #4]
 8010652:	f7fe fad1 	bl	800ebf8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8010656:	2100      	movs	r1, #0
 8010658:	6878      	ldr	r0, [r7, #4]
 801065a:	f7fe f88d 	bl	800e778 <dir_next>
 801065e:	4603      	mov	r3, r0
 8010660:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8010662:	7bfb      	ldrb	r3, [r7, #15]
 8010664:	2b04      	cmp	r3, #4
 8010666:	d101      	bne.n	801066c <f_readdir+0x70>
 8010668:	2300      	movs	r3, #0
 801066a:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 801066c:	7bfb      	ldrb	r3, [r7, #15]
}
 801066e:	4618      	mov	r0, r3
 8010670:	3710      	adds	r7, #16
 8010672:	46bd      	mov	sp, r7
 8010674:	bd80      	pop	{r7, pc}

08010676 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8010676:	b580      	push	{r7, lr}
 8010678:	b092      	sub	sp, #72	; 0x48
 801067a:	af00      	add	r7, sp, #0
 801067c:	60f8      	str	r0, [r7, #12]
 801067e:	60b9      	str	r1, [r7, #8]
 8010680:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8010682:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010686:	f107 030c 	add.w	r3, r7, #12
 801068a:	2200      	movs	r2, #0
 801068c:	4618      	mov	r0, r3
 801068e:	f7fe fcb7 	bl	800f000 <find_volume>
 8010692:	4603      	mov	r3, r0
 8010694:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8010698:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801069c:	2b00      	cmp	r3, #0
 801069e:	f040 8099 	bne.w	80107d4 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80106a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80106a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106aa:	695a      	ldr	r2, [r3, #20]
 80106ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106ae:	699b      	ldr	r3, [r3, #24]
 80106b0:	3b02      	subs	r3, #2
 80106b2:	429a      	cmp	r2, r3
 80106b4:	d804      	bhi.n	80106c0 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80106b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106b8:	695a      	ldr	r2, [r3, #20]
 80106ba:	68bb      	ldr	r3, [r7, #8]
 80106bc:	601a      	str	r2, [r3, #0]
 80106be:	e089      	b.n	80107d4 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80106c0:	2300      	movs	r3, #0
 80106c2:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80106c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106c6:	781b      	ldrb	r3, [r3, #0]
 80106c8:	2b01      	cmp	r3, #1
 80106ca:	d128      	bne.n	801071e <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80106cc:	2302      	movs	r3, #2
 80106ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80106d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106d2:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80106d4:	f107 0314 	add.w	r3, r7, #20
 80106d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80106da:	4618      	mov	r0, r3
 80106dc:	f7fd fca7 	bl	800e02e <get_fat>
 80106e0:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80106e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80106e8:	d103      	bne.n	80106f2 <f_getfree+0x7c>
 80106ea:	2301      	movs	r3, #1
 80106ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80106f0:	e063      	b.n	80107ba <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80106f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106f4:	2b01      	cmp	r3, #1
 80106f6:	d103      	bne.n	8010700 <f_getfree+0x8a>
 80106f8:	2302      	movs	r3, #2
 80106fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80106fe:	e05c      	b.n	80107ba <f_getfree+0x144>
					if (stat == 0) nfree++;
 8010700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010702:	2b00      	cmp	r3, #0
 8010704:	d102      	bne.n	801070c <f_getfree+0x96>
 8010706:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010708:	3301      	adds	r3, #1
 801070a:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 801070c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801070e:	3301      	adds	r3, #1
 8010710:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010714:	699b      	ldr	r3, [r3, #24]
 8010716:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010718:	429a      	cmp	r2, r3
 801071a:	d3db      	bcc.n	80106d4 <f_getfree+0x5e>
 801071c:	e04d      	b.n	80107ba <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 801071e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010720:	699b      	ldr	r3, [r3, #24]
 8010722:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010728:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 801072a:	2300      	movs	r3, #0
 801072c:	637b      	str	r3, [r7, #52]	; 0x34
 801072e:	2300      	movs	r3, #0
 8010730:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8010732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010734:	2b00      	cmp	r3, #0
 8010736:	d113      	bne.n	8010760 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8010738:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801073a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801073c:	1c5a      	adds	r2, r3, #1
 801073e:	63ba      	str	r2, [r7, #56]	; 0x38
 8010740:	4619      	mov	r1, r3
 8010742:	f7fd fbb7 	bl	800deb4 <move_window>
 8010746:	4603      	mov	r3, r0
 8010748:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 801074c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010750:	2b00      	cmp	r3, #0
 8010752:	d131      	bne.n	80107b8 <f_getfree+0x142>
							p = fs->win;
 8010754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010756:	3334      	adds	r3, #52	; 0x34
 8010758:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 801075a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801075c:	899b      	ldrh	r3, [r3, #12]
 801075e:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8010760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010762:	781b      	ldrb	r3, [r3, #0]
 8010764:	2b02      	cmp	r3, #2
 8010766:	d10f      	bne.n	8010788 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8010768:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801076a:	f7fd f8f3 	bl	800d954 <ld_word>
 801076e:	4603      	mov	r3, r0
 8010770:	2b00      	cmp	r3, #0
 8010772:	d102      	bne.n	801077a <f_getfree+0x104>
 8010774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010776:	3301      	adds	r3, #1
 8010778:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 801077a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801077c:	3302      	adds	r3, #2
 801077e:	633b      	str	r3, [r7, #48]	; 0x30
 8010780:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010782:	3b02      	subs	r3, #2
 8010784:	637b      	str	r3, [r7, #52]	; 0x34
 8010786:	e010      	b.n	80107aa <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8010788:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801078a:	f7fd f8fb 	bl	800d984 <ld_dword>
 801078e:	4603      	mov	r3, r0
 8010790:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010794:	2b00      	cmp	r3, #0
 8010796:	d102      	bne.n	801079e <f_getfree+0x128>
 8010798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801079a:	3301      	adds	r3, #1
 801079c:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 801079e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107a0:	3304      	adds	r3, #4
 80107a2:	633b      	str	r3, [r7, #48]	; 0x30
 80107a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107a6:	3b04      	subs	r3, #4
 80107a8:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 80107aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107ac:	3b01      	subs	r3, #1
 80107ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80107b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d1bd      	bne.n	8010732 <f_getfree+0xbc>
 80107b6:	e000      	b.n	80107ba <f_getfree+0x144>
							if (res != FR_OK) break;
 80107b8:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80107ba:	68bb      	ldr	r3, [r7, #8]
 80107bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80107be:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80107c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80107c4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80107c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107c8:	791a      	ldrb	r2, [r3, #4]
 80107ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107cc:	f042 0201 	orr.w	r2, r2, #1
 80107d0:	b2d2      	uxtb	r2, r2
 80107d2:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80107d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80107d8:	4618      	mov	r0, r3
 80107da:	3748      	adds	r7, #72	; 0x48
 80107dc:	46bd      	mov	sp, r7
 80107de:	bd80      	pop	{r7, pc}

080107e0 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b088      	sub	sp, #32
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	60f8      	str	r0, [r7, #12]
 80107e8:	60b9      	str	r1, [r7, #8]
 80107ea:	607a      	str	r2, [r7, #4]
	int n = 0;
 80107ec:	2300      	movs	r3, #0
 80107ee:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80107f4:	e01b      	b.n	801082e <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80107f6:	f107 0310 	add.w	r3, r7, #16
 80107fa:	f107 0114 	add.w	r1, r7, #20
 80107fe:	2201      	movs	r2, #1
 8010800:	6878      	ldr	r0, [r7, #4]
 8010802:	f7ff f8c9 	bl	800f998 <f_read>
		if (rc != 1) break;
 8010806:	693b      	ldr	r3, [r7, #16]
 8010808:	2b01      	cmp	r3, #1
 801080a:	d116      	bne.n	801083a <f_gets+0x5a>
		c = s[0];
 801080c:	7d3b      	ldrb	r3, [r7, #20]
 801080e:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8010810:	7dfb      	ldrb	r3, [r7, #23]
 8010812:	2b0d      	cmp	r3, #13
 8010814:	d100      	bne.n	8010818 <f_gets+0x38>
 8010816:	e00a      	b.n	801082e <f_gets+0x4e>
		*p++ = c;
 8010818:	69bb      	ldr	r3, [r7, #24]
 801081a:	1c5a      	adds	r2, r3, #1
 801081c:	61ba      	str	r2, [r7, #24]
 801081e:	7dfa      	ldrb	r2, [r7, #23]
 8010820:	701a      	strb	r2, [r3, #0]
		n++;
 8010822:	69fb      	ldr	r3, [r7, #28]
 8010824:	3301      	adds	r3, #1
 8010826:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8010828:	7dfb      	ldrb	r3, [r7, #23]
 801082a:	2b0a      	cmp	r3, #10
 801082c:	d007      	beq.n	801083e <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801082e:	68bb      	ldr	r3, [r7, #8]
 8010830:	3b01      	subs	r3, #1
 8010832:	69fa      	ldr	r2, [r7, #28]
 8010834:	429a      	cmp	r2, r3
 8010836:	dbde      	blt.n	80107f6 <f_gets+0x16>
 8010838:	e002      	b.n	8010840 <f_gets+0x60>
		if (rc != 1) break;
 801083a:	bf00      	nop
 801083c:	e000      	b.n	8010840 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 801083e:	bf00      	nop
	}
	*p = 0;
 8010840:	69bb      	ldr	r3, [r7, #24]
 8010842:	2200      	movs	r2, #0
 8010844:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8010846:	69fb      	ldr	r3, [r7, #28]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d001      	beq.n	8010850 <f_gets+0x70>
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	e000      	b.n	8010852 <f_gets+0x72>
 8010850:	2300      	movs	r3, #0
}
 8010852:	4618      	mov	r0, r3
 8010854:	3720      	adds	r7, #32
 8010856:	46bd      	mov	sp, r7
 8010858:	bd80      	pop	{r7, pc}

0801085a <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 801085a:	b580      	push	{r7, lr}
 801085c:	b084      	sub	sp, #16
 801085e:	af00      	add	r7, sp, #0
 8010860:	6078      	str	r0, [r7, #4]
 8010862:	460b      	mov	r3, r1
 8010864:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8010866:	78fb      	ldrb	r3, [r7, #3]
 8010868:	2b0a      	cmp	r3, #10
 801086a:	d103      	bne.n	8010874 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 801086c:	210d      	movs	r1, #13
 801086e:	6878      	ldr	r0, [r7, #4]
 8010870:	f7ff fff3 	bl	801085a <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	685b      	ldr	r3, [r3, #4]
 8010878:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	2b00      	cmp	r3, #0
 801087e:	db25      	blt.n	80108cc <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	1c5a      	adds	r2, r3, #1
 8010884:	60fa      	str	r2, [r7, #12]
 8010886:	687a      	ldr	r2, [r7, #4]
 8010888:	4413      	add	r3, r2
 801088a:	78fa      	ldrb	r2, [r7, #3]
 801088c:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	2b3c      	cmp	r3, #60	; 0x3c
 8010892:	dd12      	ble.n	80108ba <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	6818      	ldr	r0, [r3, #0]
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	f103 010c 	add.w	r1, r3, #12
 801089e:	68fa      	ldr	r2, [r7, #12]
 80108a0:	f107 0308 	add.w	r3, r7, #8
 80108a4:	f7ff f9d7 	bl	800fc56 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80108a8:	68ba      	ldr	r2, [r7, #8]
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	429a      	cmp	r2, r3
 80108ae:	d101      	bne.n	80108b4 <putc_bfd+0x5a>
 80108b0:	2300      	movs	r3, #0
 80108b2:	e001      	b.n	80108b8 <putc_bfd+0x5e>
 80108b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80108b8:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	68fa      	ldr	r2, [r7, #12]
 80108be:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	689b      	ldr	r3, [r3, #8]
 80108c4:	1c5a      	adds	r2, r3, #1
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	609a      	str	r2, [r3, #8]
 80108ca:	e000      	b.n	80108ce <putc_bfd+0x74>
	if (i < 0) return;
 80108cc:	bf00      	nop
}
 80108ce:	3710      	adds	r7, #16
 80108d0:	46bd      	mov	sp, r7
 80108d2:	bd80      	pop	{r7, pc}

080108d4 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80108d4:	b580      	push	{r7, lr}
 80108d6:	b084      	sub	sp, #16
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	685b      	ldr	r3, [r3, #4]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	db17      	blt.n	8010914 <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	6818      	ldr	r0, [r3, #0]
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	f103 010c 	add.w	r1, r3, #12
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	685b      	ldr	r3, [r3, #4]
 80108f2:	461a      	mov	r2, r3
 80108f4:	f107 030c 	add.w	r3, r7, #12
 80108f8:	f7ff f9ad 	bl	800fc56 <f_write>
 80108fc:	4603      	mov	r3, r0
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d108      	bne.n	8010914 <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	685b      	ldr	r3, [r3, #4]
 8010906:	461a      	mov	r2, r3
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	429a      	cmp	r2, r3
 801090c:	d102      	bne.n	8010914 <putc_flush+0x40>
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	689b      	ldr	r3, [r3, #8]
 8010912:	e001      	b.n	8010918 <putc_flush+0x44>
	return EOF;
 8010914:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8010918:	4618      	mov	r0, r3
 801091a:	3710      	adds	r7, #16
 801091c:	46bd      	mov	sp, r7
 801091e:	bd80      	pop	{r7, pc}

08010920 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8010920:	b480      	push	{r7}
 8010922:	b083      	sub	sp, #12
 8010924:	af00      	add	r7, sp, #0
 8010926:	6078      	str	r0, [r7, #4]
 8010928:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	683a      	ldr	r2, [r7, #0]
 801092e:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	2200      	movs	r2, #0
 8010934:	605a      	str	r2, [r3, #4]
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	685a      	ldr	r2, [r3, #4]
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	609a      	str	r2, [r3, #8]
}
 801093e:	bf00      	nop
 8010940:	370c      	adds	r7, #12
 8010942:	46bd      	mov	sp, r7
 8010944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010948:	4770      	bx	lr

0801094a <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 801094a:	b580      	push	{r7, lr}
 801094c:	b096      	sub	sp, #88	; 0x58
 801094e:	af00      	add	r7, sp, #0
 8010950:	6078      	str	r0, [r7, #4]
 8010952:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8010954:	f107 030c 	add.w	r3, r7, #12
 8010958:	6839      	ldr	r1, [r7, #0]
 801095a:	4618      	mov	r0, r3
 801095c:	f7ff ffe0 	bl	8010920 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8010960:	e009      	b.n	8010976 <f_puts+0x2c>
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	1c5a      	adds	r2, r3, #1
 8010966:	607a      	str	r2, [r7, #4]
 8010968:	781a      	ldrb	r2, [r3, #0]
 801096a:	f107 030c 	add.w	r3, r7, #12
 801096e:	4611      	mov	r1, r2
 8010970:	4618      	mov	r0, r3
 8010972:	f7ff ff72 	bl	801085a <putc_bfd>
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	781b      	ldrb	r3, [r3, #0]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d1f1      	bne.n	8010962 <f_puts+0x18>
	return putc_flush(&pb);
 801097e:	f107 030c 	add.w	r3, r7, #12
 8010982:	4618      	mov	r0, r3
 8010984:	f7ff ffa6 	bl	80108d4 <putc_flush>
 8010988:	4603      	mov	r3, r0
}
 801098a:	4618      	mov	r0, r3
 801098c:	3758      	adds	r7, #88	; 0x58
 801098e:	46bd      	mov	sp, r7
 8010990:	bd80      	pop	{r7, pc}
	...

08010994 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010994:	b480      	push	{r7}
 8010996:	b087      	sub	sp, #28
 8010998:	af00      	add	r7, sp, #0
 801099a:	60f8      	str	r0, [r7, #12]
 801099c:	60b9      	str	r1, [r7, #8]
 801099e:	4613      	mov	r3, r2
 80109a0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80109a2:	2301      	movs	r3, #1
 80109a4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80109a6:	2300      	movs	r3, #0
 80109a8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80109aa:	4b1f      	ldr	r3, [pc, #124]	; (8010a28 <FATFS_LinkDriverEx+0x94>)
 80109ac:	7a5b      	ldrb	r3, [r3, #9]
 80109ae:	b2db      	uxtb	r3, r3
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d131      	bne.n	8010a18 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80109b4:	4b1c      	ldr	r3, [pc, #112]	; (8010a28 <FATFS_LinkDriverEx+0x94>)
 80109b6:	7a5b      	ldrb	r3, [r3, #9]
 80109b8:	b2db      	uxtb	r3, r3
 80109ba:	461a      	mov	r2, r3
 80109bc:	4b1a      	ldr	r3, [pc, #104]	; (8010a28 <FATFS_LinkDriverEx+0x94>)
 80109be:	2100      	movs	r1, #0
 80109c0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80109c2:	4b19      	ldr	r3, [pc, #100]	; (8010a28 <FATFS_LinkDriverEx+0x94>)
 80109c4:	7a5b      	ldrb	r3, [r3, #9]
 80109c6:	b2db      	uxtb	r3, r3
 80109c8:	4a17      	ldr	r2, [pc, #92]	; (8010a28 <FATFS_LinkDriverEx+0x94>)
 80109ca:	009b      	lsls	r3, r3, #2
 80109cc:	4413      	add	r3, r2
 80109ce:	68fa      	ldr	r2, [r7, #12]
 80109d0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80109d2:	4b15      	ldr	r3, [pc, #84]	; (8010a28 <FATFS_LinkDriverEx+0x94>)
 80109d4:	7a5b      	ldrb	r3, [r3, #9]
 80109d6:	b2db      	uxtb	r3, r3
 80109d8:	461a      	mov	r2, r3
 80109da:	4b13      	ldr	r3, [pc, #76]	; (8010a28 <FATFS_LinkDriverEx+0x94>)
 80109dc:	4413      	add	r3, r2
 80109de:	79fa      	ldrb	r2, [r7, #7]
 80109e0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80109e2:	4b11      	ldr	r3, [pc, #68]	; (8010a28 <FATFS_LinkDriverEx+0x94>)
 80109e4:	7a5b      	ldrb	r3, [r3, #9]
 80109e6:	b2db      	uxtb	r3, r3
 80109e8:	1c5a      	adds	r2, r3, #1
 80109ea:	b2d1      	uxtb	r1, r2
 80109ec:	4a0e      	ldr	r2, [pc, #56]	; (8010a28 <FATFS_LinkDriverEx+0x94>)
 80109ee:	7251      	strb	r1, [r2, #9]
 80109f0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80109f2:	7dbb      	ldrb	r3, [r7, #22]
 80109f4:	3330      	adds	r3, #48	; 0x30
 80109f6:	b2da      	uxtb	r2, r3
 80109f8:	68bb      	ldr	r3, [r7, #8]
 80109fa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80109fc:	68bb      	ldr	r3, [r7, #8]
 80109fe:	3301      	adds	r3, #1
 8010a00:	223a      	movs	r2, #58	; 0x3a
 8010a02:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010a04:	68bb      	ldr	r3, [r7, #8]
 8010a06:	3302      	adds	r3, #2
 8010a08:	222f      	movs	r2, #47	; 0x2f
 8010a0a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010a0c:	68bb      	ldr	r3, [r7, #8]
 8010a0e:	3303      	adds	r3, #3
 8010a10:	2200      	movs	r2, #0
 8010a12:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010a14:	2300      	movs	r3, #0
 8010a16:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010a18:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	371c      	adds	r7, #28
 8010a1e:	46bd      	mov	sp, r7
 8010a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a24:	4770      	bx	lr
 8010a26:	bf00      	nop
 8010a28:	20000894 	.word	0x20000894

08010a2c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b082      	sub	sp, #8
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
 8010a34:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010a36:	2200      	movs	r2, #0
 8010a38:	6839      	ldr	r1, [r7, #0]
 8010a3a:	6878      	ldr	r0, [r7, #4]
 8010a3c:	f7ff ffaa 	bl	8010994 <FATFS_LinkDriverEx>
 8010a40:	4603      	mov	r3, r0
}
 8010a42:	4618      	mov	r0, r3
 8010a44:	3708      	adds	r7, #8
 8010a46:	46bd      	mov	sp, r7
 8010a48:	bd80      	pop	{r7, pc}
	...

08010a4c <__errno>:
 8010a4c:	4b01      	ldr	r3, [pc, #4]	; (8010a54 <__errno+0x8>)
 8010a4e:	6818      	ldr	r0, [r3, #0]
 8010a50:	4770      	bx	lr
 8010a52:	bf00      	nop
 8010a54:	20000178 	.word	0x20000178

08010a58 <__libc_init_array>:
 8010a58:	b570      	push	{r4, r5, r6, lr}
 8010a5a:	4e0d      	ldr	r6, [pc, #52]	; (8010a90 <__libc_init_array+0x38>)
 8010a5c:	4c0d      	ldr	r4, [pc, #52]	; (8010a94 <__libc_init_array+0x3c>)
 8010a5e:	1ba4      	subs	r4, r4, r6
 8010a60:	10a4      	asrs	r4, r4, #2
 8010a62:	2500      	movs	r5, #0
 8010a64:	42a5      	cmp	r5, r4
 8010a66:	d109      	bne.n	8010a7c <__libc_init_array+0x24>
 8010a68:	4e0b      	ldr	r6, [pc, #44]	; (8010a98 <__libc_init_array+0x40>)
 8010a6a:	4c0c      	ldr	r4, [pc, #48]	; (8010a9c <__libc_init_array+0x44>)
 8010a6c:	f005 fe42 	bl	80166f4 <_init>
 8010a70:	1ba4      	subs	r4, r4, r6
 8010a72:	10a4      	asrs	r4, r4, #2
 8010a74:	2500      	movs	r5, #0
 8010a76:	42a5      	cmp	r5, r4
 8010a78:	d105      	bne.n	8010a86 <__libc_init_array+0x2e>
 8010a7a:	bd70      	pop	{r4, r5, r6, pc}
 8010a7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010a80:	4798      	blx	r3
 8010a82:	3501      	adds	r5, #1
 8010a84:	e7ee      	b.n	8010a64 <__libc_init_array+0xc>
 8010a86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010a8a:	4798      	blx	r3
 8010a8c:	3501      	adds	r5, #1
 8010a8e:	e7f2      	b.n	8010a76 <__libc_init_array+0x1e>
 8010a90:	08016fa8 	.word	0x08016fa8
 8010a94:	08016fa8 	.word	0x08016fa8
 8010a98:	08016fa8 	.word	0x08016fa8
 8010a9c:	08016fac 	.word	0x08016fac

08010aa0 <memcpy>:
 8010aa0:	b510      	push	{r4, lr}
 8010aa2:	1e43      	subs	r3, r0, #1
 8010aa4:	440a      	add	r2, r1
 8010aa6:	4291      	cmp	r1, r2
 8010aa8:	d100      	bne.n	8010aac <memcpy+0xc>
 8010aaa:	bd10      	pop	{r4, pc}
 8010aac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010ab0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010ab4:	e7f7      	b.n	8010aa6 <memcpy+0x6>

08010ab6 <memset>:
 8010ab6:	4402      	add	r2, r0
 8010ab8:	4603      	mov	r3, r0
 8010aba:	4293      	cmp	r3, r2
 8010abc:	d100      	bne.n	8010ac0 <memset+0xa>
 8010abe:	4770      	bx	lr
 8010ac0:	f803 1b01 	strb.w	r1, [r3], #1
 8010ac4:	e7f9      	b.n	8010aba <memset+0x4>

08010ac6 <__cvt>:
 8010ac6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010aca:	ec55 4b10 	vmov	r4, r5, d0
 8010ace:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8010ad0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010ad4:	2d00      	cmp	r5, #0
 8010ad6:	460e      	mov	r6, r1
 8010ad8:	4691      	mov	r9, r2
 8010ada:	4619      	mov	r1, r3
 8010adc:	bfb8      	it	lt
 8010ade:	4622      	movlt	r2, r4
 8010ae0:	462b      	mov	r3, r5
 8010ae2:	f027 0720 	bic.w	r7, r7, #32
 8010ae6:	bfbb      	ittet	lt
 8010ae8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010aec:	461d      	movlt	r5, r3
 8010aee:	2300      	movge	r3, #0
 8010af0:	232d      	movlt	r3, #45	; 0x2d
 8010af2:	bfb8      	it	lt
 8010af4:	4614      	movlt	r4, r2
 8010af6:	2f46      	cmp	r7, #70	; 0x46
 8010af8:	700b      	strb	r3, [r1, #0]
 8010afa:	d004      	beq.n	8010b06 <__cvt+0x40>
 8010afc:	2f45      	cmp	r7, #69	; 0x45
 8010afe:	d100      	bne.n	8010b02 <__cvt+0x3c>
 8010b00:	3601      	adds	r6, #1
 8010b02:	2102      	movs	r1, #2
 8010b04:	e000      	b.n	8010b08 <__cvt+0x42>
 8010b06:	2103      	movs	r1, #3
 8010b08:	ab03      	add	r3, sp, #12
 8010b0a:	9301      	str	r3, [sp, #4]
 8010b0c:	ab02      	add	r3, sp, #8
 8010b0e:	9300      	str	r3, [sp, #0]
 8010b10:	4632      	mov	r2, r6
 8010b12:	4653      	mov	r3, sl
 8010b14:	ec45 4b10 	vmov	d0, r4, r5
 8010b18:	f001 fc96 	bl	8012448 <_dtoa_r>
 8010b1c:	2f47      	cmp	r7, #71	; 0x47
 8010b1e:	4680      	mov	r8, r0
 8010b20:	d102      	bne.n	8010b28 <__cvt+0x62>
 8010b22:	f019 0f01 	tst.w	r9, #1
 8010b26:	d026      	beq.n	8010b76 <__cvt+0xb0>
 8010b28:	2f46      	cmp	r7, #70	; 0x46
 8010b2a:	eb08 0906 	add.w	r9, r8, r6
 8010b2e:	d111      	bne.n	8010b54 <__cvt+0x8e>
 8010b30:	f898 3000 	ldrb.w	r3, [r8]
 8010b34:	2b30      	cmp	r3, #48	; 0x30
 8010b36:	d10a      	bne.n	8010b4e <__cvt+0x88>
 8010b38:	2200      	movs	r2, #0
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	4620      	mov	r0, r4
 8010b3e:	4629      	mov	r1, r5
 8010b40:	f7ef ffc2 	bl	8000ac8 <__aeabi_dcmpeq>
 8010b44:	b918      	cbnz	r0, 8010b4e <__cvt+0x88>
 8010b46:	f1c6 0601 	rsb	r6, r6, #1
 8010b4a:	f8ca 6000 	str.w	r6, [sl]
 8010b4e:	f8da 3000 	ldr.w	r3, [sl]
 8010b52:	4499      	add	r9, r3
 8010b54:	2200      	movs	r2, #0
 8010b56:	2300      	movs	r3, #0
 8010b58:	4620      	mov	r0, r4
 8010b5a:	4629      	mov	r1, r5
 8010b5c:	f7ef ffb4 	bl	8000ac8 <__aeabi_dcmpeq>
 8010b60:	b938      	cbnz	r0, 8010b72 <__cvt+0xac>
 8010b62:	2230      	movs	r2, #48	; 0x30
 8010b64:	9b03      	ldr	r3, [sp, #12]
 8010b66:	454b      	cmp	r3, r9
 8010b68:	d205      	bcs.n	8010b76 <__cvt+0xb0>
 8010b6a:	1c59      	adds	r1, r3, #1
 8010b6c:	9103      	str	r1, [sp, #12]
 8010b6e:	701a      	strb	r2, [r3, #0]
 8010b70:	e7f8      	b.n	8010b64 <__cvt+0x9e>
 8010b72:	f8cd 900c 	str.w	r9, [sp, #12]
 8010b76:	9b03      	ldr	r3, [sp, #12]
 8010b78:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010b7a:	eba3 0308 	sub.w	r3, r3, r8
 8010b7e:	4640      	mov	r0, r8
 8010b80:	6013      	str	r3, [r2, #0]
 8010b82:	b004      	add	sp, #16
 8010b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010b88 <__exponent>:
 8010b88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010b8a:	2900      	cmp	r1, #0
 8010b8c:	4604      	mov	r4, r0
 8010b8e:	bfba      	itte	lt
 8010b90:	4249      	neglt	r1, r1
 8010b92:	232d      	movlt	r3, #45	; 0x2d
 8010b94:	232b      	movge	r3, #43	; 0x2b
 8010b96:	2909      	cmp	r1, #9
 8010b98:	f804 2b02 	strb.w	r2, [r4], #2
 8010b9c:	7043      	strb	r3, [r0, #1]
 8010b9e:	dd20      	ble.n	8010be2 <__exponent+0x5a>
 8010ba0:	f10d 0307 	add.w	r3, sp, #7
 8010ba4:	461f      	mov	r7, r3
 8010ba6:	260a      	movs	r6, #10
 8010ba8:	fb91 f5f6 	sdiv	r5, r1, r6
 8010bac:	fb06 1115 	mls	r1, r6, r5, r1
 8010bb0:	3130      	adds	r1, #48	; 0x30
 8010bb2:	2d09      	cmp	r5, #9
 8010bb4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8010bb8:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8010bbc:	4629      	mov	r1, r5
 8010bbe:	dc09      	bgt.n	8010bd4 <__exponent+0x4c>
 8010bc0:	3130      	adds	r1, #48	; 0x30
 8010bc2:	3b02      	subs	r3, #2
 8010bc4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010bc8:	42bb      	cmp	r3, r7
 8010bca:	4622      	mov	r2, r4
 8010bcc:	d304      	bcc.n	8010bd8 <__exponent+0x50>
 8010bce:	1a10      	subs	r0, r2, r0
 8010bd0:	b003      	add	sp, #12
 8010bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010bd4:	4613      	mov	r3, r2
 8010bd6:	e7e7      	b.n	8010ba8 <__exponent+0x20>
 8010bd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010bdc:	f804 2b01 	strb.w	r2, [r4], #1
 8010be0:	e7f2      	b.n	8010bc8 <__exponent+0x40>
 8010be2:	2330      	movs	r3, #48	; 0x30
 8010be4:	4419      	add	r1, r3
 8010be6:	7083      	strb	r3, [r0, #2]
 8010be8:	1d02      	adds	r2, r0, #4
 8010bea:	70c1      	strb	r1, [r0, #3]
 8010bec:	e7ef      	b.n	8010bce <__exponent+0x46>
	...

08010bf0 <_printf_float>:
 8010bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bf4:	b08d      	sub	sp, #52	; 0x34
 8010bf6:	460c      	mov	r4, r1
 8010bf8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8010bfc:	4616      	mov	r6, r2
 8010bfe:	461f      	mov	r7, r3
 8010c00:	4605      	mov	r5, r0
 8010c02:	f002 fe7b 	bl	80138fc <_localeconv_r>
 8010c06:	6803      	ldr	r3, [r0, #0]
 8010c08:	9304      	str	r3, [sp, #16]
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	f7ef fae0 	bl	80001d0 <strlen>
 8010c10:	2300      	movs	r3, #0
 8010c12:	930a      	str	r3, [sp, #40]	; 0x28
 8010c14:	f8d8 3000 	ldr.w	r3, [r8]
 8010c18:	9005      	str	r0, [sp, #20]
 8010c1a:	3307      	adds	r3, #7
 8010c1c:	f023 0307 	bic.w	r3, r3, #7
 8010c20:	f103 0208 	add.w	r2, r3, #8
 8010c24:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010c28:	f8d4 b000 	ldr.w	fp, [r4]
 8010c2c:	f8c8 2000 	str.w	r2, [r8]
 8010c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c34:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010c38:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010c3c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010c40:	9307      	str	r3, [sp, #28]
 8010c42:	f8cd 8018 	str.w	r8, [sp, #24]
 8010c46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010c4a:	4ba7      	ldr	r3, [pc, #668]	; (8010ee8 <_printf_float+0x2f8>)
 8010c4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010c50:	f7ef ff6c 	bl	8000b2c <__aeabi_dcmpun>
 8010c54:	bb70      	cbnz	r0, 8010cb4 <_printf_float+0xc4>
 8010c56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010c5a:	4ba3      	ldr	r3, [pc, #652]	; (8010ee8 <_printf_float+0x2f8>)
 8010c5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010c60:	f7ef ff46 	bl	8000af0 <__aeabi_dcmple>
 8010c64:	bb30      	cbnz	r0, 8010cb4 <_printf_float+0xc4>
 8010c66:	2200      	movs	r2, #0
 8010c68:	2300      	movs	r3, #0
 8010c6a:	4640      	mov	r0, r8
 8010c6c:	4649      	mov	r1, r9
 8010c6e:	f7ef ff35 	bl	8000adc <__aeabi_dcmplt>
 8010c72:	b110      	cbz	r0, 8010c7a <_printf_float+0x8a>
 8010c74:	232d      	movs	r3, #45	; 0x2d
 8010c76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010c7a:	4a9c      	ldr	r2, [pc, #624]	; (8010eec <_printf_float+0x2fc>)
 8010c7c:	4b9c      	ldr	r3, [pc, #624]	; (8010ef0 <_printf_float+0x300>)
 8010c7e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8010c82:	bf8c      	ite	hi
 8010c84:	4690      	movhi	r8, r2
 8010c86:	4698      	movls	r8, r3
 8010c88:	2303      	movs	r3, #3
 8010c8a:	f02b 0204 	bic.w	r2, fp, #4
 8010c8e:	6123      	str	r3, [r4, #16]
 8010c90:	6022      	str	r2, [r4, #0]
 8010c92:	f04f 0900 	mov.w	r9, #0
 8010c96:	9700      	str	r7, [sp, #0]
 8010c98:	4633      	mov	r3, r6
 8010c9a:	aa0b      	add	r2, sp, #44	; 0x2c
 8010c9c:	4621      	mov	r1, r4
 8010c9e:	4628      	mov	r0, r5
 8010ca0:	f000 f9e6 	bl	8011070 <_printf_common>
 8010ca4:	3001      	adds	r0, #1
 8010ca6:	f040 808d 	bne.w	8010dc4 <_printf_float+0x1d4>
 8010caa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010cae:	b00d      	add	sp, #52	; 0x34
 8010cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cb4:	4642      	mov	r2, r8
 8010cb6:	464b      	mov	r3, r9
 8010cb8:	4640      	mov	r0, r8
 8010cba:	4649      	mov	r1, r9
 8010cbc:	f7ef ff36 	bl	8000b2c <__aeabi_dcmpun>
 8010cc0:	b110      	cbz	r0, 8010cc8 <_printf_float+0xd8>
 8010cc2:	4a8c      	ldr	r2, [pc, #560]	; (8010ef4 <_printf_float+0x304>)
 8010cc4:	4b8c      	ldr	r3, [pc, #560]	; (8010ef8 <_printf_float+0x308>)
 8010cc6:	e7da      	b.n	8010c7e <_printf_float+0x8e>
 8010cc8:	6861      	ldr	r1, [r4, #4]
 8010cca:	1c4b      	adds	r3, r1, #1
 8010ccc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8010cd0:	a80a      	add	r0, sp, #40	; 0x28
 8010cd2:	d13e      	bne.n	8010d52 <_printf_float+0x162>
 8010cd4:	2306      	movs	r3, #6
 8010cd6:	6063      	str	r3, [r4, #4]
 8010cd8:	2300      	movs	r3, #0
 8010cda:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8010cde:	ab09      	add	r3, sp, #36	; 0x24
 8010ce0:	9300      	str	r3, [sp, #0]
 8010ce2:	ec49 8b10 	vmov	d0, r8, r9
 8010ce6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010cea:	6022      	str	r2, [r4, #0]
 8010cec:	f8cd a004 	str.w	sl, [sp, #4]
 8010cf0:	6861      	ldr	r1, [r4, #4]
 8010cf2:	4628      	mov	r0, r5
 8010cf4:	f7ff fee7 	bl	8010ac6 <__cvt>
 8010cf8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8010cfc:	2b47      	cmp	r3, #71	; 0x47
 8010cfe:	4680      	mov	r8, r0
 8010d00:	d109      	bne.n	8010d16 <_printf_float+0x126>
 8010d02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d04:	1cd8      	adds	r0, r3, #3
 8010d06:	db02      	blt.n	8010d0e <_printf_float+0x11e>
 8010d08:	6862      	ldr	r2, [r4, #4]
 8010d0a:	4293      	cmp	r3, r2
 8010d0c:	dd47      	ble.n	8010d9e <_printf_float+0x1ae>
 8010d0e:	f1aa 0a02 	sub.w	sl, sl, #2
 8010d12:	fa5f fa8a 	uxtb.w	sl, sl
 8010d16:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8010d1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010d1c:	d824      	bhi.n	8010d68 <_printf_float+0x178>
 8010d1e:	3901      	subs	r1, #1
 8010d20:	4652      	mov	r2, sl
 8010d22:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010d26:	9109      	str	r1, [sp, #36]	; 0x24
 8010d28:	f7ff ff2e 	bl	8010b88 <__exponent>
 8010d2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010d2e:	1813      	adds	r3, r2, r0
 8010d30:	2a01      	cmp	r2, #1
 8010d32:	4681      	mov	r9, r0
 8010d34:	6123      	str	r3, [r4, #16]
 8010d36:	dc02      	bgt.n	8010d3e <_printf_float+0x14e>
 8010d38:	6822      	ldr	r2, [r4, #0]
 8010d3a:	07d1      	lsls	r1, r2, #31
 8010d3c:	d501      	bpl.n	8010d42 <_printf_float+0x152>
 8010d3e:	3301      	adds	r3, #1
 8010d40:	6123      	str	r3, [r4, #16]
 8010d42:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d0a5      	beq.n	8010c96 <_printf_float+0xa6>
 8010d4a:	232d      	movs	r3, #45	; 0x2d
 8010d4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010d50:	e7a1      	b.n	8010c96 <_printf_float+0xa6>
 8010d52:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8010d56:	f000 8177 	beq.w	8011048 <_printf_float+0x458>
 8010d5a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8010d5e:	d1bb      	bne.n	8010cd8 <_printf_float+0xe8>
 8010d60:	2900      	cmp	r1, #0
 8010d62:	d1b9      	bne.n	8010cd8 <_printf_float+0xe8>
 8010d64:	2301      	movs	r3, #1
 8010d66:	e7b6      	b.n	8010cd6 <_printf_float+0xe6>
 8010d68:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8010d6c:	d119      	bne.n	8010da2 <_printf_float+0x1b2>
 8010d6e:	2900      	cmp	r1, #0
 8010d70:	6863      	ldr	r3, [r4, #4]
 8010d72:	dd0c      	ble.n	8010d8e <_printf_float+0x19e>
 8010d74:	6121      	str	r1, [r4, #16]
 8010d76:	b913      	cbnz	r3, 8010d7e <_printf_float+0x18e>
 8010d78:	6822      	ldr	r2, [r4, #0]
 8010d7a:	07d2      	lsls	r2, r2, #31
 8010d7c:	d502      	bpl.n	8010d84 <_printf_float+0x194>
 8010d7e:	3301      	adds	r3, #1
 8010d80:	440b      	add	r3, r1
 8010d82:	6123      	str	r3, [r4, #16]
 8010d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d86:	65a3      	str	r3, [r4, #88]	; 0x58
 8010d88:	f04f 0900 	mov.w	r9, #0
 8010d8c:	e7d9      	b.n	8010d42 <_printf_float+0x152>
 8010d8e:	b913      	cbnz	r3, 8010d96 <_printf_float+0x1a6>
 8010d90:	6822      	ldr	r2, [r4, #0]
 8010d92:	07d0      	lsls	r0, r2, #31
 8010d94:	d501      	bpl.n	8010d9a <_printf_float+0x1aa>
 8010d96:	3302      	adds	r3, #2
 8010d98:	e7f3      	b.n	8010d82 <_printf_float+0x192>
 8010d9a:	2301      	movs	r3, #1
 8010d9c:	e7f1      	b.n	8010d82 <_printf_float+0x192>
 8010d9e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8010da2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010da6:	4293      	cmp	r3, r2
 8010da8:	db05      	blt.n	8010db6 <_printf_float+0x1c6>
 8010daa:	6822      	ldr	r2, [r4, #0]
 8010dac:	6123      	str	r3, [r4, #16]
 8010dae:	07d1      	lsls	r1, r2, #31
 8010db0:	d5e8      	bpl.n	8010d84 <_printf_float+0x194>
 8010db2:	3301      	adds	r3, #1
 8010db4:	e7e5      	b.n	8010d82 <_printf_float+0x192>
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	bfd4      	ite	le
 8010dba:	f1c3 0302 	rsble	r3, r3, #2
 8010dbe:	2301      	movgt	r3, #1
 8010dc0:	4413      	add	r3, r2
 8010dc2:	e7de      	b.n	8010d82 <_printf_float+0x192>
 8010dc4:	6823      	ldr	r3, [r4, #0]
 8010dc6:	055a      	lsls	r2, r3, #21
 8010dc8:	d407      	bmi.n	8010dda <_printf_float+0x1ea>
 8010dca:	6923      	ldr	r3, [r4, #16]
 8010dcc:	4642      	mov	r2, r8
 8010dce:	4631      	mov	r1, r6
 8010dd0:	4628      	mov	r0, r5
 8010dd2:	47b8      	blx	r7
 8010dd4:	3001      	adds	r0, #1
 8010dd6:	d12b      	bne.n	8010e30 <_printf_float+0x240>
 8010dd8:	e767      	b.n	8010caa <_printf_float+0xba>
 8010dda:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8010dde:	f240 80dc 	bls.w	8010f9a <_printf_float+0x3aa>
 8010de2:	2200      	movs	r2, #0
 8010de4:	2300      	movs	r3, #0
 8010de6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010dea:	f7ef fe6d 	bl	8000ac8 <__aeabi_dcmpeq>
 8010dee:	2800      	cmp	r0, #0
 8010df0:	d033      	beq.n	8010e5a <_printf_float+0x26a>
 8010df2:	2301      	movs	r3, #1
 8010df4:	4a41      	ldr	r2, [pc, #260]	; (8010efc <_printf_float+0x30c>)
 8010df6:	4631      	mov	r1, r6
 8010df8:	4628      	mov	r0, r5
 8010dfa:	47b8      	blx	r7
 8010dfc:	3001      	adds	r0, #1
 8010dfe:	f43f af54 	beq.w	8010caa <_printf_float+0xba>
 8010e02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010e06:	429a      	cmp	r2, r3
 8010e08:	db02      	blt.n	8010e10 <_printf_float+0x220>
 8010e0a:	6823      	ldr	r3, [r4, #0]
 8010e0c:	07d8      	lsls	r0, r3, #31
 8010e0e:	d50f      	bpl.n	8010e30 <_printf_float+0x240>
 8010e10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010e14:	4631      	mov	r1, r6
 8010e16:	4628      	mov	r0, r5
 8010e18:	47b8      	blx	r7
 8010e1a:	3001      	adds	r0, #1
 8010e1c:	f43f af45 	beq.w	8010caa <_printf_float+0xba>
 8010e20:	f04f 0800 	mov.w	r8, #0
 8010e24:	f104 091a 	add.w	r9, r4, #26
 8010e28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e2a:	3b01      	subs	r3, #1
 8010e2c:	4543      	cmp	r3, r8
 8010e2e:	dc09      	bgt.n	8010e44 <_printf_float+0x254>
 8010e30:	6823      	ldr	r3, [r4, #0]
 8010e32:	079b      	lsls	r3, r3, #30
 8010e34:	f100 8103 	bmi.w	801103e <_printf_float+0x44e>
 8010e38:	68e0      	ldr	r0, [r4, #12]
 8010e3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010e3c:	4298      	cmp	r0, r3
 8010e3e:	bfb8      	it	lt
 8010e40:	4618      	movlt	r0, r3
 8010e42:	e734      	b.n	8010cae <_printf_float+0xbe>
 8010e44:	2301      	movs	r3, #1
 8010e46:	464a      	mov	r2, r9
 8010e48:	4631      	mov	r1, r6
 8010e4a:	4628      	mov	r0, r5
 8010e4c:	47b8      	blx	r7
 8010e4e:	3001      	adds	r0, #1
 8010e50:	f43f af2b 	beq.w	8010caa <_printf_float+0xba>
 8010e54:	f108 0801 	add.w	r8, r8, #1
 8010e58:	e7e6      	b.n	8010e28 <_printf_float+0x238>
 8010e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	dc2b      	bgt.n	8010eb8 <_printf_float+0x2c8>
 8010e60:	2301      	movs	r3, #1
 8010e62:	4a26      	ldr	r2, [pc, #152]	; (8010efc <_printf_float+0x30c>)
 8010e64:	4631      	mov	r1, r6
 8010e66:	4628      	mov	r0, r5
 8010e68:	47b8      	blx	r7
 8010e6a:	3001      	adds	r0, #1
 8010e6c:	f43f af1d 	beq.w	8010caa <_printf_float+0xba>
 8010e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e72:	b923      	cbnz	r3, 8010e7e <_printf_float+0x28e>
 8010e74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e76:	b913      	cbnz	r3, 8010e7e <_printf_float+0x28e>
 8010e78:	6823      	ldr	r3, [r4, #0]
 8010e7a:	07d9      	lsls	r1, r3, #31
 8010e7c:	d5d8      	bpl.n	8010e30 <_printf_float+0x240>
 8010e7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010e82:	4631      	mov	r1, r6
 8010e84:	4628      	mov	r0, r5
 8010e86:	47b8      	blx	r7
 8010e88:	3001      	adds	r0, #1
 8010e8a:	f43f af0e 	beq.w	8010caa <_printf_float+0xba>
 8010e8e:	f04f 0900 	mov.w	r9, #0
 8010e92:	f104 0a1a 	add.w	sl, r4, #26
 8010e96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e98:	425b      	negs	r3, r3
 8010e9a:	454b      	cmp	r3, r9
 8010e9c:	dc01      	bgt.n	8010ea2 <_printf_float+0x2b2>
 8010e9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ea0:	e794      	b.n	8010dcc <_printf_float+0x1dc>
 8010ea2:	2301      	movs	r3, #1
 8010ea4:	4652      	mov	r2, sl
 8010ea6:	4631      	mov	r1, r6
 8010ea8:	4628      	mov	r0, r5
 8010eaa:	47b8      	blx	r7
 8010eac:	3001      	adds	r0, #1
 8010eae:	f43f aefc 	beq.w	8010caa <_printf_float+0xba>
 8010eb2:	f109 0901 	add.w	r9, r9, #1
 8010eb6:	e7ee      	b.n	8010e96 <_printf_float+0x2a6>
 8010eb8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010eba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8010ebc:	429a      	cmp	r2, r3
 8010ebe:	bfa8      	it	ge
 8010ec0:	461a      	movge	r2, r3
 8010ec2:	2a00      	cmp	r2, #0
 8010ec4:	4691      	mov	r9, r2
 8010ec6:	dd07      	ble.n	8010ed8 <_printf_float+0x2e8>
 8010ec8:	4613      	mov	r3, r2
 8010eca:	4631      	mov	r1, r6
 8010ecc:	4642      	mov	r2, r8
 8010ece:	4628      	mov	r0, r5
 8010ed0:	47b8      	blx	r7
 8010ed2:	3001      	adds	r0, #1
 8010ed4:	f43f aee9 	beq.w	8010caa <_printf_float+0xba>
 8010ed8:	f104 031a 	add.w	r3, r4, #26
 8010edc:	f04f 0b00 	mov.w	fp, #0
 8010ee0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8010ee4:	9306      	str	r3, [sp, #24]
 8010ee6:	e015      	b.n	8010f14 <_printf_float+0x324>
 8010ee8:	7fefffff 	.word	0x7fefffff
 8010eec:	08016c14 	.word	0x08016c14
 8010ef0:	08016c10 	.word	0x08016c10
 8010ef4:	08016c1c 	.word	0x08016c1c
 8010ef8:	08016c18 	.word	0x08016c18
 8010efc:	08016c20 	.word	0x08016c20
 8010f00:	2301      	movs	r3, #1
 8010f02:	9a06      	ldr	r2, [sp, #24]
 8010f04:	4631      	mov	r1, r6
 8010f06:	4628      	mov	r0, r5
 8010f08:	47b8      	blx	r7
 8010f0a:	3001      	adds	r0, #1
 8010f0c:	f43f aecd 	beq.w	8010caa <_printf_float+0xba>
 8010f10:	f10b 0b01 	add.w	fp, fp, #1
 8010f14:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8010f18:	ebaa 0309 	sub.w	r3, sl, r9
 8010f1c:	455b      	cmp	r3, fp
 8010f1e:	dcef      	bgt.n	8010f00 <_printf_float+0x310>
 8010f20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010f24:	429a      	cmp	r2, r3
 8010f26:	44d0      	add	r8, sl
 8010f28:	db15      	blt.n	8010f56 <_printf_float+0x366>
 8010f2a:	6823      	ldr	r3, [r4, #0]
 8010f2c:	07da      	lsls	r2, r3, #31
 8010f2e:	d412      	bmi.n	8010f56 <_printf_float+0x366>
 8010f30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010f32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010f34:	eba3 020a 	sub.w	r2, r3, sl
 8010f38:	eba3 0a01 	sub.w	sl, r3, r1
 8010f3c:	4592      	cmp	sl, r2
 8010f3e:	bfa8      	it	ge
 8010f40:	4692      	movge	sl, r2
 8010f42:	f1ba 0f00 	cmp.w	sl, #0
 8010f46:	dc0e      	bgt.n	8010f66 <_printf_float+0x376>
 8010f48:	f04f 0800 	mov.w	r8, #0
 8010f4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010f50:	f104 091a 	add.w	r9, r4, #26
 8010f54:	e019      	b.n	8010f8a <_printf_float+0x39a>
 8010f56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010f5a:	4631      	mov	r1, r6
 8010f5c:	4628      	mov	r0, r5
 8010f5e:	47b8      	blx	r7
 8010f60:	3001      	adds	r0, #1
 8010f62:	d1e5      	bne.n	8010f30 <_printf_float+0x340>
 8010f64:	e6a1      	b.n	8010caa <_printf_float+0xba>
 8010f66:	4653      	mov	r3, sl
 8010f68:	4642      	mov	r2, r8
 8010f6a:	4631      	mov	r1, r6
 8010f6c:	4628      	mov	r0, r5
 8010f6e:	47b8      	blx	r7
 8010f70:	3001      	adds	r0, #1
 8010f72:	d1e9      	bne.n	8010f48 <_printf_float+0x358>
 8010f74:	e699      	b.n	8010caa <_printf_float+0xba>
 8010f76:	2301      	movs	r3, #1
 8010f78:	464a      	mov	r2, r9
 8010f7a:	4631      	mov	r1, r6
 8010f7c:	4628      	mov	r0, r5
 8010f7e:	47b8      	blx	r7
 8010f80:	3001      	adds	r0, #1
 8010f82:	f43f ae92 	beq.w	8010caa <_printf_float+0xba>
 8010f86:	f108 0801 	add.w	r8, r8, #1
 8010f8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010f8e:	1a9b      	subs	r3, r3, r2
 8010f90:	eba3 030a 	sub.w	r3, r3, sl
 8010f94:	4543      	cmp	r3, r8
 8010f96:	dcee      	bgt.n	8010f76 <_printf_float+0x386>
 8010f98:	e74a      	b.n	8010e30 <_printf_float+0x240>
 8010f9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010f9c:	2a01      	cmp	r2, #1
 8010f9e:	dc01      	bgt.n	8010fa4 <_printf_float+0x3b4>
 8010fa0:	07db      	lsls	r3, r3, #31
 8010fa2:	d53a      	bpl.n	801101a <_printf_float+0x42a>
 8010fa4:	2301      	movs	r3, #1
 8010fa6:	4642      	mov	r2, r8
 8010fa8:	4631      	mov	r1, r6
 8010faa:	4628      	mov	r0, r5
 8010fac:	47b8      	blx	r7
 8010fae:	3001      	adds	r0, #1
 8010fb0:	f43f ae7b 	beq.w	8010caa <_printf_float+0xba>
 8010fb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010fb8:	4631      	mov	r1, r6
 8010fba:	4628      	mov	r0, r5
 8010fbc:	47b8      	blx	r7
 8010fbe:	3001      	adds	r0, #1
 8010fc0:	f108 0801 	add.w	r8, r8, #1
 8010fc4:	f43f ae71 	beq.w	8010caa <_printf_float+0xba>
 8010fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010fca:	2200      	movs	r2, #0
 8010fcc:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8010fd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	f7ef fd77 	bl	8000ac8 <__aeabi_dcmpeq>
 8010fda:	b9c8      	cbnz	r0, 8011010 <_printf_float+0x420>
 8010fdc:	4653      	mov	r3, sl
 8010fde:	4642      	mov	r2, r8
 8010fe0:	4631      	mov	r1, r6
 8010fe2:	4628      	mov	r0, r5
 8010fe4:	47b8      	blx	r7
 8010fe6:	3001      	adds	r0, #1
 8010fe8:	d10e      	bne.n	8011008 <_printf_float+0x418>
 8010fea:	e65e      	b.n	8010caa <_printf_float+0xba>
 8010fec:	2301      	movs	r3, #1
 8010fee:	4652      	mov	r2, sl
 8010ff0:	4631      	mov	r1, r6
 8010ff2:	4628      	mov	r0, r5
 8010ff4:	47b8      	blx	r7
 8010ff6:	3001      	adds	r0, #1
 8010ff8:	f43f ae57 	beq.w	8010caa <_printf_float+0xba>
 8010ffc:	f108 0801 	add.w	r8, r8, #1
 8011000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011002:	3b01      	subs	r3, #1
 8011004:	4543      	cmp	r3, r8
 8011006:	dcf1      	bgt.n	8010fec <_printf_float+0x3fc>
 8011008:	464b      	mov	r3, r9
 801100a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801100e:	e6de      	b.n	8010dce <_printf_float+0x1de>
 8011010:	f04f 0800 	mov.w	r8, #0
 8011014:	f104 0a1a 	add.w	sl, r4, #26
 8011018:	e7f2      	b.n	8011000 <_printf_float+0x410>
 801101a:	2301      	movs	r3, #1
 801101c:	e7df      	b.n	8010fde <_printf_float+0x3ee>
 801101e:	2301      	movs	r3, #1
 8011020:	464a      	mov	r2, r9
 8011022:	4631      	mov	r1, r6
 8011024:	4628      	mov	r0, r5
 8011026:	47b8      	blx	r7
 8011028:	3001      	adds	r0, #1
 801102a:	f43f ae3e 	beq.w	8010caa <_printf_float+0xba>
 801102e:	f108 0801 	add.w	r8, r8, #1
 8011032:	68e3      	ldr	r3, [r4, #12]
 8011034:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011036:	1a9b      	subs	r3, r3, r2
 8011038:	4543      	cmp	r3, r8
 801103a:	dcf0      	bgt.n	801101e <_printf_float+0x42e>
 801103c:	e6fc      	b.n	8010e38 <_printf_float+0x248>
 801103e:	f04f 0800 	mov.w	r8, #0
 8011042:	f104 0919 	add.w	r9, r4, #25
 8011046:	e7f4      	b.n	8011032 <_printf_float+0x442>
 8011048:	2900      	cmp	r1, #0
 801104a:	f43f ae8b 	beq.w	8010d64 <_printf_float+0x174>
 801104e:	2300      	movs	r3, #0
 8011050:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8011054:	ab09      	add	r3, sp, #36	; 0x24
 8011056:	9300      	str	r3, [sp, #0]
 8011058:	ec49 8b10 	vmov	d0, r8, r9
 801105c:	6022      	str	r2, [r4, #0]
 801105e:	f8cd a004 	str.w	sl, [sp, #4]
 8011062:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011066:	4628      	mov	r0, r5
 8011068:	f7ff fd2d 	bl	8010ac6 <__cvt>
 801106c:	4680      	mov	r8, r0
 801106e:	e648      	b.n	8010d02 <_printf_float+0x112>

08011070 <_printf_common>:
 8011070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011074:	4691      	mov	r9, r2
 8011076:	461f      	mov	r7, r3
 8011078:	688a      	ldr	r2, [r1, #8]
 801107a:	690b      	ldr	r3, [r1, #16]
 801107c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011080:	4293      	cmp	r3, r2
 8011082:	bfb8      	it	lt
 8011084:	4613      	movlt	r3, r2
 8011086:	f8c9 3000 	str.w	r3, [r9]
 801108a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801108e:	4606      	mov	r6, r0
 8011090:	460c      	mov	r4, r1
 8011092:	b112      	cbz	r2, 801109a <_printf_common+0x2a>
 8011094:	3301      	adds	r3, #1
 8011096:	f8c9 3000 	str.w	r3, [r9]
 801109a:	6823      	ldr	r3, [r4, #0]
 801109c:	0699      	lsls	r1, r3, #26
 801109e:	bf42      	ittt	mi
 80110a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80110a4:	3302      	addmi	r3, #2
 80110a6:	f8c9 3000 	strmi.w	r3, [r9]
 80110aa:	6825      	ldr	r5, [r4, #0]
 80110ac:	f015 0506 	ands.w	r5, r5, #6
 80110b0:	d107      	bne.n	80110c2 <_printf_common+0x52>
 80110b2:	f104 0a19 	add.w	sl, r4, #25
 80110b6:	68e3      	ldr	r3, [r4, #12]
 80110b8:	f8d9 2000 	ldr.w	r2, [r9]
 80110bc:	1a9b      	subs	r3, r3, r2
 80110be:	42ab      	cmp	r3, r5
 80110c0:	dc28      	bgt.n	8011114 <_printf_common+0xa4>
 80110c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80110c6:	6822      	ldr	r2, [r4, #0]
 80110c8:	3300      	adds	r3, #0
 80110ca:	bf18      	it	ne
 80110cc:	2301      	movne	r3, #1
 80110ce:	0692      	lsls	r2, r2, #26
 80110d0:	d42d      	bmi.n	801112e <_printf_common+0xbe>
 80110d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80110d6:	4639      	mov	r1, r7
 80110d8:	4630      	mov	r0, r6
 80110da:	47c0      	blx	r8
 80110dc:	3001      	adds	r0, #1
 80110de:	d020      	beq.n	8011122 <_printf_common+0xb2>
 80110e0:	6823      	ldr	r3, [r4, #0]
 80110e2:	68e5      	ldr	r5, [r4, #12]
 80110e4:	f8d9 2000 	ldr.w	r2, [r9]
 80110e8:	f003 0306 	and.w	r3, r3, #6
 80110ec:	2b04      	cmp	r3, #4
 80110ee:	bf08      	it	eq
 80110f0:	1aad      	subeq	r5, r5, r2
 80110f2:	68a3      	ldr	r3, [r4, #8]
 80110f4:	6922      	ldr	r2, [r4, #16]
 80110f6:	bf0c      	ite	eq
 80110f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80110fc:	2500      	movne	r5, #0
 80110fe:	4293      	cmp	r3, r2
 8011100:	bfc4      	itt	gt
 8011102:	1a9b      	subgt	r3, r3, r2
 8011104:	18ed      	addgt	r5, r5, r3
 8011106:	f04f 0900 	mov.w	r9, #0
 801110a:	341a      	adds	r4, #26
 801110c:	454d      	cmp	r5, r9
 801110e:	d11a      	bne.n	8011146 <_printf_common+0xd6>
 8011110:	2000      	movs	r0, #0
 8011112:	e008      	b.n	8011126 <_printf_common+0xb6>
 8011114:	2301      	movs	r3, #1
 8011116:	4652      	mov	r2, sl
 8011118:	4639      	mov	r1, r7
 801111a:	4630      	mov	r0, r6
 801111c:	47c0      	blx	r8
 801111e:	3001      	adds	r0, #1
 8011120:	d103      	bne.n	801112a <_printf_common+0xba>
 8011122:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801112a:	3501      	adds	r5, #1
 801112c:	e7c3      	b.n	80110b6 <_printf_common+0x46>
 801112e:	18e1      	adds	r1, r4, r3
 8011130:	1c5a      	adds	r2, r3, #1
 8011132:	2030      	movs	r0, #48	; 0x30
 8011134:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011138:	4422      	add	r2, r4
 801113a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801113e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011142:	3302      	adds	r3, #2
 8011144:	e7c5      	b.n	80110d2 <_printf_common+0x62>
 8011146:	2301      	movs	r3, #1
 8011148:	4622      	mov	r2, r4
 801114a:	4639      	mov	r1, r7
 801114c:	4630      	mov	r0, r6
 801114e:	47c0      	blx	r8
 8011150:	3001      	adds	r0, #1
 8011152:	d0e6      	beq.n	8011122 <_printf_common+0xb2>
 8011154:	f109 0901 	add.w	r9, r9, #1
 8011158:	e7d8      	b.n	801110c <_printf_common+0x9c>
	...

0801115c <_printf_i>:
 801115c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011160:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011164:	460c      	mov	r4, r1
 8011166:	7e09      	ldrb	r1, [r1, #24]
 8011168:	b085      	sub	sp, #20
 801116a:	296e      	cmp	r1, #110	; 0x6e
 801116c:	4617      	mov	r7, r2
 801116e:	4606      	mov	r6, r0
 8011170:	4698      	mov	r8, r3
 8011172:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011174:	f000 80b3 	beq.w	80112de <_printf_i+0x182>
 8011178:	d822      	bhi.n	80111c0 <_printf_i+0x64>
 801117a:	2963      	cmp	r1, #99	; 0x63
 801117c:	d036      	beq.n	80111ec <_printf_i+0x90>
 801117e:	d80a      	bhi.n	8011196 <_printf_i+0x3a>
 8011180:	2900      	cmp	r1, #0
 8011182:	f000 80b9 	beq.w	80112f8 <_printf_i+0x19c>
 8011186:	2958      	cmp	r1, #88	; 0x58
 8011188:	f000 8083 	beq.w	8011292 <_printf_i+0x136>
 801118c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011190:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011194:	e032      	b.n	80111fc <_printf_i+0xa0>
 8011196:	2964      	cmp	r1, #100	; 0x64
 8011198:	d001      	beq.n	801119e <_printf_i+0x42>
 801119a:	2969      	cmp	r1, #105	; 0x69
 801119c:	d1f6      	bne.n	801118c <_printf_i+0x30>
 801119e:	6820      	ldr	r0, [r4, #0]
 80111a0:	6813      	ldr	r3, [r2, #0]
 80111a2:	0605      	lsls	r5, r0, #24
 80111a4:	f103 0104 	add.w	r1, r3, #4
 80111a8:	d52a      	bpl.n	8011200 <_printf_i+0xa4>
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	6011      	str	r1, [r2, #0]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	da03      	bge.n	80111ba <_printf_i+0x5e>
 80111b2:	222d      	movs	r2, #45	; 0x2d
 80111b4:	425b      	negs	r3, r3
 80111b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80111ba:	486f      	ldr	r0, [pc, #444]	; (8011378 <_printf_i+0x21c>)
 80111bc:	220a      	movs	r2, #10
 80111be:	e039      	b.n	8011234 <_printf_i+0xd8>
 80111c0:	2973      	cmp	r1, #115	; 0x73
 80111c2:	f000 809d 	beq.w	8011300 <_printf_i+0x1a4>
 80111c6:	d808      	bhi.n	80111da <_printf_i+0x7e>
 80111c8:	296f      	cmp	r1, #111	; 0x6f
 80111ca:	d020      	beq.n	801120e <_printf_i+0xb2>
 80111cc:	2970      	cmp	r1, #112	; 0x70
 80111ce:	d1dd      	bne.n	801118c <_printf_i+0x30>
 80111d0:	6823      	ldr	r3, [r4, #0]
 80111d2:	f043 0320 	orr.w	r3, r3, #32
 80111d6:	6023      	str	r3, [r4, #0]
 80111d8:	e003      	b.n	80111e2 <_printf_i+0x86>
 80111da:	2975      	cmp	r1, #117	; 0x75
 80111dc:	d017      	beq.n	801120e <_printf_i+0xb2>
 80111de:	2978      	cmp	r1, #120	; 0x78
 80111e0:	d1d4      	bne.n	801118c <_printf_i+0x30>
 80111e2:	2378      	movs	r3, #120	; 0x78
 80111e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80111e8:	4864      	ldr	r0, [pc, #400]	; (801137c <_printf_i+0x220>)
 80111ea:	e055      	b.n	8011298 <_printf_i+0x13c>
 80111ec:	6813      	ldr	r3, [r2, #0]
 80111ee:	1d19      	adds	r1, r3, #4
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	6011      	str	r1, [r2, #0]
 80111f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80111f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80111fc:	2301      	movs	r3, #1
 80111fe:	e08c      	b.n	801131a <_printf_i+0x1be>
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	6011      	str	r1, [r2, #0]
 8011204:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011208:	bf18      	it	ne
 801120a:	b21b      	sxthne	r3, r3
 801120c:	e7cf      	b.n	80111ae <_printf_i+0x52>
 801120e:	6813      	ldr	r3, [r2, #0]
 8011210:	6825      	ldr	r5, [r4, #0]
 8011212:	1d18      	adds	r0, r3, #4
 8011214:	6010      	str	r0, [r2, #0]
 8011216:	0628      	lsls	r0, r5, #24
 8011218:	d501      	bpl.n	801121e <_printf_i+0xc2>
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	e002      	b.n	8011224 <_printf_i+0xc8>
 801121e:	0668      	lsls	r0, r5, #25
 8011220:	d5fb      	bpl.n	801121a <_printf_i+0xbe>
 8011222:	881b      	ldrh	r3, [r3, #0]
 8011224:	4854      	ldr	r0, [pc, #336]	; (8011378 <_printf_i+0x21c>)
 8011226:	296f      	cmp	r1, #111	; 0x6f
 8011228:	bf14      	ite	ne
 801122a:	220a      	movne	r2, #10
 801122c:	2208      	moveq	r2, #8
 801122e:	2100      	movs	r1, #0
 8011230:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011234:	6865      	ldr	r5, [r4, #4]
 8011236:	60a5      	str	r5, [r4, #8]
 8011238:	2d00      	cmp	r5, #0
 801123a:	f2c0 8095 	blt.w	8011368 <_printf_i+0x20c>
 801123e:	6821      	ldr	r1, [r4, #0]
 8011240:	f021 0104 	bic.w	r1, r1, #4
 8011244:	6021      	str	r1, [r4, #0]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d13d      	bne.n	80112c6 <_printf_i+0x16a>
 801124a:	2d00      	cmp	r5, #0
 801124c:	f040 808e 	bne.w	801136c <_printf_i+0x210>
 8011250:	4665      	mov	r5, ip
 8011252:	2a08      	cmp	r2, #8
 8011254:	d10b      	bne.n	801126e <_printf_i+0x112>
 8011256:	6823      	ldr	r3, [r4, #0]
 8011258:	07db      	lsls	r3, r3, #31
 801125a:	d508      	bpl.n	801126e <_printf_i+0x112>
 801125c:	6923      	ldr	r3, [r4, #16]
 801125e:	6862      	ldr	r2, [r4, #4]
 8011260:	429a      	cmp	r2, r3
 8011262:	bfde      	ittt	le
 8011264:	2330      	movle	r3, #48	; 0x30
 8011266:	f805 3c01 	strble.w	r3, [r5, #-1]
 801126a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801126e:	ebac 0305 	sub.w	r3, ip, r5
 8011272:	6123      	str	r3, [r4, #16]
 8011274:	f8cd 8000 	str.w	r8, [sp]
 8011278:	463b      	mov	r3, r7
 801127a:	aa03      	add	r2, sp, #12
 801127c:	4621      	mov	r1, r4
 801127e:	4630      	mov	r0, r6
 8011280:	f7ff fef6 	bl	8011070 <_printf_common>
 8011284:	3001      	adds	r0, #1
 8011286:	d14d      	bne.n	8011324 <_printf_i+0x1c8>
 8011288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801128c:	b005      	add	sp, #20
 801128e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011292:	4839      	ldr	r0, [pc, #228]	; (8011378 <_printf_i+0x21c>)
 8011294:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8011298:	6813      	ldr	r3, [r2, #0]
 801129a:	6821      	ldr	r1, [r4, #0]
 801129c:	1d1d      	adds	r5, r3, #4
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	6015      	str	r5, [r2, #0]
 80112a2:	060a      	lsls	r2, r1, #24
 80112a4:	d50b      	bpl.n	80112be <_printf_i+0x162>
 80112a6:	07ca      	lsls	r2, r1, #31
 80112a8:	bf44      	itt	mi
 80112aa:	f041 0120 	orrmi.w	r1, r1, #32
 80112ae:	6021      	strmi	r1, [r4, #0]
 80112b0:	b91b      	cbnz	r3, 80112ba <_printf_i+0x15e>
 80112b2:	6822      	ldr	r2, [r4, #0]
 80112b4:	f022 0220 	bic.w	r2, r2, #32
 80112b8:	6022      	str	r2, [r4, #0]
 80112ba:	2210      	movs	r2, #16
 80112bc:	e7b7      	b.n	801122e <_printf_i+0xd2>
 80112be:	064d      	lsls	r5, r1, #25
 80112c0:	bf48      	it	mi
 80112c2:	b29b      	uxthmi	r3, r3
 80112c4:	e7ef      	b.n	80112a6 <_printf_i+0x14a>
 80112c6:	4665      	mov	r5, ip
 80112c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80112cc:	fb02 3311 	mls	r3, r2, r1, r3
 80112d0:	5cc3      	ldrb	r3, [r0, r3]
 80112d2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80112d6:	460b      	mov	r3, r1
 80112d8:	2900      	cmp	r1, #0
 80112da:	d1f5      	bne.n	80112c8 <_printf_i+0x16c>
 80112dc:	e7b9      	b.n	8011252 <_printf_i+0xf6>
 80112de:	6813      	ldr	r3, [r2, #0]
 80112e0:	6825      	ldr	r5, [r4, #0]
 80112e2:	6961      	ldr	r1, [r4, #20]
 80112e4:	1d18      	adds	r0, r3, #4
 80112e6:	6010      	str	r0, [r2, #0]
 80112e8:	0628      	lsls	r0, r5, #24
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	d501      	bpl.n	80112f2 <_printf_i+0x196>
 80112ee:	6019      	str	r1, [r3, #0]
 80112f0:	e002      	b.n	80112f8 <_printf_i+0x19c>
 80112f2:	066a      	lsls	r2, r5, #25
 80112f4:	d5fb      	bpl.n	80112ee <_printf_i+0x192>
 80112f6:	8019      	strh	r1, [r3, #0]
 80112f8:	2300      	movs	r3, #0
 80112fa:	6123      	str	r3, [r4, #16]
 80112fc:	4665      	mov	r5, ip
 80112fe:	e7b9      	b.n	8011274 <_printf_i+0x118>
 8011300:	6813      	ldr	r3, [r2, #0]
 8011302:	1d19      	adds	r1, r3, #4
 8011304:	6011      	str	r1, [r2, #0]
 8011306:	681d      	ldr	r5, [r3, #0]
 8011308:	6862      	ldr	r2, [r4, #4]
 801130a:	2100      	movs	r1, #0
 801130c:	4628      	mov	r0, r5
 801130e:	f7ee ff67 	bl	80001e0 <memchr>
 8011312:	b108      	cbz	r0, 8011318 <_printf_i+0x1bc>
 8011314:	1b40      	subs	r0, r0, r5
 8011316:	6060      	str	r0, [r4, #4]
 8011318:	6863      	ldr	r3, [r4, #4]
 801131a:	6123      	str	r3, [r4, #16]
 801131c:	2300      	movs	r3, #0
 801131e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011322:	e7a7      	b.n	8011274 <_printf_i+0x118>
 8011324:	6923      	ldr	r3, [r4, #16]
 8011326:	462a      	mov	r2, r5
 8011328:	4639      	mov	r1, r7
 801132a:	4630      	mov	r0, r6
 801132c:	47c0      	blx	r8
 801132e:	3001      	adds	r0, #1
 8011330:	d0aa      	beq.n	8011288 <_printf_i+0x12c>
 8011332:	6823      	ldr	r3, [r4, #0]
 8011334:	079b      	lsls	r3, r3, #30
 8011336:	d413      	bmi.n	8011360 <_printf_i+0x204>
 8011338:	68e0      	ldr	r0, [r4, #12]
 801133a:	9b03      	ldr	r3, [sp, #12]
 801133c:	4298      	cmp	r0, r3
 801133e:	bfb8      	it	lt
 8011340:	4618      	movlt	r0, r3
 8011342:	e7a3      	b.n	801128c <_printf_i+0x130>
 8011344:	2301      	movs	r3, #1
 8011346:	464a      	mov	r2, r9
 8011348:	4639      	mov	r1, r7
 801134a:	4630      	mov	r0, r6
 801134c:	47c0      	blx	r8
 801134e:	3001      	adds	r0, #1
 8011350:	d09a      	beq.n	8011288 <_printf_i+0x12c>
 8011352:	3501      	adds	r5, #1
 8011354:	68e3      	ldr	r3, [r4, #12]
 8011356:	9a03      	ldr	r2, [sp, #12]
 8011358:	1a9b      	subs	r3, r3, r2
 801135a:	42ab      	cmp	r3, r5
 801135c:	dcf2      	bgt.n	8011344 <_printf_i+0x1e8>
 801135e:	e7eb      	b.n	8011338 <_printf_i+0x1dc>
 8011360:	2500      	movs	r5, #0
 8011362:	f104 0919 	add.w	r9, r4, #25
 8011366:	e7f5      	b.n	8011354 <_printf_i+0x1f8>
 8011368:	2b00      	cmp	r3, #0
 801136a:	d1ac      	bne.n	80112c6 <_printf_i+0x16a>
 801136c:	7803      	ldrb	r3, [r0, #0]
 801136e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011372:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011376:	e76c      	b.n	8011252 <_printf_i+0xf6>
 8011378:	08016c22 	.word	0x08016c22
 801137c:	08016c33 	.word	0x08016c33

08011380 <iprintf>:
 8011380:	b40f      	push	{r0, r1, r2, r3}
 8011382:	4b0a      	ldr	r3, [pc, #40]	; (80113ac <iprintf+0x2c>)
 8011384:	b513      	push	{r0, r1, r4, lr}
 8011386:	681c      	ldr	r4, [r3, #0]
 8011388:	b124      	cbz	r4, 8011394 <iprintf+0x14>
 801138a:	69a3      	ldr	r3, [r4, #24]
 801138c:	b913      	cbnz	r3, 8011394 <iprintf+0x14>
 801138e:	4620      	mov	r0, r4
 8011390:	f001 ff02 	bl	8013198 <__sinit>
 8011394:	ab05      	add	r3, sp, #20
 8011396:	9a04      	ldr	r2, [sp, #16]
 8011398:	68a1      	ldr	r1, [r4, #8]
 801139a:	9301      	str	r3, [sp, #4]
 801139c:	4620      	mov	r0, r4
 801139e:	f003 f96b 	bl	8014678 <_vfiprintf_r>
 80113a2:	b002      	add	sp, #8
 80113a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80113a8:	b004      	add	sp, #16
 80113aa:	4770      	bx	lr
 80113ac:	20000178 	.word	0x20000178

080113b0 <_puts_r>:
 80113b0:	b570      	push	{r4, r5, r6, lr}
 80113b2:	460e      	mov	r6, r1
 80113b4:	4605      	mov	r5, r0
 80113b6:	b118      	cbz	r0, 80113c0 <_puts_r+0x10>
 80113b8:	6983      	ldr	r3, [r0, #24]
 80113ba:	b90b      	cbnz	r3, 80113c0 <_puts_r+0x10>
 80113bc:	f001 feec 	bl	8013198 <__sinit>
 80113c0:	69ab      	ldr	r3, [r5, #24]
 80113c2:	68ac      	ldr	r4, [r5, #8]
 80113c4:	b913      	cbnz	r3, 80113cc <_puts_r+0x1c>
 80113c6:	4628      	mov	r0, r5
 80113c8:	f001 fee6 	bl	8013198 <__sinit>
 80113cc:	4b23      	ldr	r3, [pc, #140]	; (801145c <_puts_r+0xac>)
 80113ce:	429c      	cmp	r4, r3
 80113d0:	d117      	bne.n	8011402 <_puts_r+0x52>
 80113d2:	686c      	ldr	r4, [r5, #4]
 80113d4:	89a3      	ldrh	r3, [r4, #12]
 80113d6:	071b      	lsls	r3, r3, #28
 80113d8:	d51d      	bpl.n	8011416 <_puts_r+0x66>
 80113da:	6923      	ldr	r3, [r4, #16]
 80113dc:	b1db      	cbz	r3, 8011416 <_puts_r+0x66>
 80113de:	3e01      	subs	r6, #1
 80113e0:	68a3      	ldr	r3, [r4, #8]
 80113e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80113e6:	3b01      	subs	r3, #1
 80113e8:	60a3      	str	r3, [r4, #8]
 80113ea:	b9e9      	cbnz	r1, 8011428 <_puts_r+0x78>
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	da2e      	bge.n	801144e <_puts_r+0x9e>
 80113f0:	4622      	mov	r2, r4
 80113f2:	210a      	movs	r1, #10
 80113f4:	4628      	mov	r0, r5
 80113f6:	f000 fedb 	bl	80121b0 <__swbuf_r>
 80113fa:	3001      	adds	r0, #1
 80113fc:	d011      	beq.n	8011422 <_puts_r+0x72>
 80113fe:	200a      	movs	r0, #10
 8011400:	e011      	b.n	8011426 <_puts_r+0x76>
 8011402:	4b17      	ldr	r3, [pc, #92]	; (8011460 <_puts_r+0xb0>)
 8011404:	429c      	cmp	r4, r3
 8011406:	d101      	bne.n	801140c <_puts_r+0x5c>
 8011408:	68ac      	ldr	r4, [r5, #8]
 801140a:	e7e3      	b.n	80113d4 <_puts_r+0x24>
 801140c:	4b15      	ldr	r3, [pc, #84]	; (8011464 <_puts_r+0xb4>)
 801140e:	429c      	cmp	r4, r3
 8011410:	bf08      	it	eq
 8011412:	68ec      	ldreq	r4, [r5, #12]
 8011414:	e7de      	b.n	80113d4 <_puts_r+0x24>
 8011416:	4621      	mov	r1, r4
 8011418:	4628      	mov	r0, r5
 801141a:	f000 ff1b 	bl	8012254 <__swsetup_r>
 801141e:	2800      	cmp	r0, #0
 8011420:	d0dd      	beq.n	80113de <_puts_r+0x2e>
 8011422:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011426:	bd70      	pop	{r4, r5, r6, pc}
 8011428:	2b00      	cmp	r3, #0
 801142a:	da04      	bge.n	8011436 <_puts_r+0x86>
 801142c:	69a2      	ldr	r2, [r4, #24]
 801142e:	429a      	cmp	r2, r3
 8011430:	dc06      	bgt.n	8011440 <_puts_r+0x90>
 8011432:	290a      	cmp	r1, #10
 8011434:	d004      	beq.n	8011440 <_puts_r+0x90>
 8011436:	6823      	ldr	r3, [r4, #0]
 8011438:	1c5a      	adds	r2, r3, #1
 801143a:	6022      	str	r2, [r4, #0]
 801143c:	7019      	strb	r1, [r3, #0]
 801143e:	e7cf      	b.n	80113e0 <_puts_r+0x30>
 8011440:	4622      	mov	r2, r4
 8011442:	4628      	mov	r0, r5
 8011444:	f000 feb4 	bl	80121b0 <__swbuf_r>
 8011448:	3001      	adds	r0, #1
 801144a:	d1c9      	bne.n	80113e0 <_puts_r+0x30>
 801144c:	e7e9      	b.n	8011422 <_puts_r+0x72>
 801144e:	6823      	ldr	r3, [r4, #0]
 8011450:	200a      	movs	r0, #10
 8011452:	1c5a      	adds	r2, r3, #1
 8011454:	6022      	str	r2, [r4, #0]
 8011456:	7018      	strb	r0, [r3, #0]
 8011458:	e7e5      	b.n	8011426 <_puts_r+0x76>
 801145a:	bf00      	nop
 801145c:	08016cc8 	.word	0x08016cc8
 8011460:	08016ce8 	.word	0x08016ce8
 8011464:	08016ca8 	.word	0x08016ca8

08011468 <puts>:
 8011468:	4b02      	ldr	r3, [pc, #8]	; (8011474 <puts+0xc>)
 801146a:	4601      	mov	r1, r0
 801146c:	6818      	ldr	r0, [r3, #0]
 801146e:	f7ff bf9f 	b.w	80113b0 <_puts_r>
 8011472:	bf00      	nop
 8011474:	20000178 	.word	0x20000178

08011478 <siprintf>:
 8011478:	b40e      	push	{r1, r2, r3}
 801147a:	b500      	push	{lr}
 801147c:	b09c      	sub	sp, #112	; 0x70
 801147e:	ab1d      	add	r3, sp, #116	; 0x74
 8011480:	9002      	str	r0, [sp, #8]
 8011482:	9006      	str	r0, [sp, #24]
 8011484:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011488:	4809      	ldr	r0, [pc, #36]	; (80114b0 <siprintf+0x38>)
 801148a:	9107      	str	r1, [sp, #28]
 801148c:	9104      	str	r1, [sp, #16]
 801148e:	4909      	ldr	r1, [pc, #36]	; (80114b4 <siprintf+0x3c>)
 8011490:	f853 2b04 	ldr.w	r2, [r3], #4
 8011494:	9105      	str	r1, [sp, #20]
 8011496:	6800      	ldr	r0, [r0, #0]
 8011498:	9301      	str	r3, [sp, #4]
 801149a:	a902      	add	r1, sp, #8
 801149c:	f002 ffca 	bl	8014434 <_svfiprintf_r>
 80114a0:	9b02      	ldr	r3, [sp, #8]
 80114a2:	2200      	movs	r2, #0
 80114a4:	701a      	strb	r2, [r3, #0]
 80114a6:	b01c      	add	sp, #112	; 0x70
 80114a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80114ac:	b003      	add	sp, #12
 80114ae:	4770      	bx	lr
 80114b0:	20000178 	.word	0x20000178
 80114b4:	ffff0208 	.word	0xffff0208

080114b8 <strncpy>:
 80114b8:	b570      	push	{r4, r5, r6, lr}
 80114ba:	3901      	subs	r1, #1
 80114bc:	4604      	mov	r4, r0
 80114be:	b902      	cbnz	r2, 80114c2 <strncpy+0xa>
 80114c0:	bd70      	pop	{r4, r5, r6, pc}
 80114c2:	4623      	mov	r3, r4
 80114c4:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 80114c8:	f803 5b01 	strb.w	r5, [r3], #1
 80114cc:	1e56      	subs	r6, r2, #1
 80114ce:	b92d      	cbnz	r5, 80114dc <strncpy+0x24>
 80114d0:	4414      	add	r4, r2
 80114d2:	42a3      	cmp	r3, r4
 80114d4:	d0f4      	beq.n	80114c0 <strncpy+0x8>
 80114d6:	f803 5b01 	strb.w	r5, [r3], #1
 80114da:	e7fa      	b.n	80114d2 <strncpy+0x1a>
 80114dc:	461c      	mov	r4, r3
 80114de:	4632      	mov	r2, r6
 80114e0:	e7ed      	b.n	80114be <strncpy+0x6>

080114e2 <sulp>:
 80114e2:	b570      	push	{r4, r5, r6, lr}
 80114e4:	4604      	mov	r4, r0
 80114e6:	460d      	mov	r5, r1
 80114e8:	ec45 4b10 	vmov	d0, r4, r5
 80114ec:	4616      	mov	r6, r2
 80114ee:	f002 fd5d 	bl	8013fac <__ulp>
 80114f2:	ec51 0b10 	vmov	r0, r1, d0
 80114f6:	b17e      	cbz	r6, 8011518 <sulp+0x36>
 80114f8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80114fc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011500:	2b00      	cmp	r3, #0
 8011502:	dd09      	ble.n	8011518 <sulp+0x36>
 8011504:	051b      	lsls	r3, r3, #20
 8011506:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801150a:	2400      	movs	r4, #0
 801150c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8011510:	4622      	mov	r2, r4
 8011512:	462b      	mov	r3, r5
 8011514:	f7ef f870 	bl	80005f8 <__aeabi_dmul>
 8011518:	bd70      	pop	{r4, r5, r6, pc}
 801151a:	0000      	movs	r0, r0
 801151c:	0000      	movs	r0, r0
	...

08011520 <_strtod_l>:
 8011520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011524:	461f      	mov	r7, r3
 8011526:	b0a1      	sub	sp, #132	; 0x84
 8011528:	2300      	movs	r3, #0
 801152a:	4681      	mov	r9, r0
 801152c:	4638      	mov	r0, r7
 801152e:	460e      	mov	r6, r1
 8011530:	9217      	str	r2, [sp, #92]	; 0x5c
 8011532:	931c      	str	r3, [sp, #112]	; 0x70
 8011534:	f002 f9e0 	bl	80138f8 <__localeconv_l>
 8011538:	4680      	mov	r8, r0
 801153a:	6800      	ldr	r0, [r0, #0]
 801153c:	f7ee fe48 	bl	80001d0 <strlen>
 8011540:	f04f 0a00 	mov.w	sl, #0
 8011544:	4604      	mov	r4, r0
 8011546:	f04f 0b00 	mov.w	fp, #0
 801154a:	961b      	str	r6, [sp, #108]	; 0x6c
 801154c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801154e:	781a      	ldrb	r2, [r3, #0]
 8011550:	2a0d      	cmp	r2, #13
 8011552:	d832      	bhi.n	80115ba <_strtod_l+0x9a>
 8011554:	2a09      	cmp	r2, #9
 8011556:	d236      	bcs.n	80115c6 <_strtod_l+0xa6>
 8011558:	2a00      	cmp	r2, #0
 801155a:	d03e      	beq.n	80115da <_strtod_l+0xba>
 801155c:	2300      	movs	r3, #0
 801155e:	930d      	str	r3, [sp, #52]	; 0x34
 8011560:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8011562:	782b      	ldrb	r3, [r5, #0]
 8011564:	2b30      	cmp	r3, #48	; 0x30
 8011566:	f040 80ac 	bne.w	80116c2 <_strtod_l+0x1a2>
 801156a:	786b      	ldrb	r3, [r5, #1]
 801156c:	2b58      	cmp	r3, #88	; 0x58
 801156e:	d001      	beq.n	8011574 <_strtod_l+0x54>
 8011570:	2b78      	cmp	r3, #120	; 0x78
 8011572:	d167      	bne.n	8011644 <_strtod_l+0x124>
 8011574:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011576:	9301      	str	r3, [sp, #4]
 8011578:	ab1c      	add	r3, sp, #112	; 0x70
 801157a:	9300      	str	r3, [sp, #0]
 801157c:	9702      	str	r7, [sp, #8]
 801157e:	ab1d      	add	r3, sp, #116	; 0x74
 8011580:	4a88      	ldr	r2, [pc, #544]	; (80117a4 <_strtod_l+0x284>)
 8011582:	a91b      	add	r1, sp, #108	; 0x6c
 8011584:	4648      	mov	r0, r9
 8011586:	f001 fee0 	bl	801334a <__gethex>
 801158a:	f010 0407 	ands.w	r4, r0, #7
 801158e:	4606      	mov	r6, r0
 8011590:	d005      	beq.n	801159e <_strtod_l+0x7e>
 8011592:	2c06      	cmp	r4, #6
 8011594:	d12b      	bne.n	80115ee <_strtod_l+0xce>
 8011596:	3501      	adds	r5, #1
 8011598:	2300      	movs	r3, #0
 801159a:	951b      	str	r5, [sp, #108]	; 0x6c
 801159c:	930d      	str	r3, [sp, #52]	; 0x34
 801159e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	f040 859a 	bne.w	80120da <_strtod_l+0xbba>
 80115a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80115a8:	b1e3      	cbz	r3, 80115e4 <_strtod_l+0xc4>
 80115aa:	4652      	mov	r2, sl
 80115ac:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80115b0:	ec43 2b10 	vmov	d0, r2, r3
 80115b4:	b021      	add	sp, #132	; 0x84
 80115b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115ba:	2a2b      	cmp	r2, #43	; 0x2b
 80115bc:	d015      	beq.n	80115ea <_strtod_l+0xca>
 80115be:	2a2d      	cmp	r2, #45	; 0x2d
 80115c0:	d004      	beq.n	80115cc <_strtod_l+0xac>
 80115c2:	2a20      	cmp	r2, #32
 80115c4:	d1ca      	bne.n	801155c <_strtod_l+0x3c>
 80115c6:	3301      	adds	r3, #1
 80115c8:	931b      	str	r3, [sp, #108]	; 0x6c
 80115ca:	e7bf      	b.n	801154c <_strtod_l+0x2c>
 80115cc:	2201      	movs	r2, #1
 80115ce:	920d      	str	r2, [sp, #52]	; 0x34
 80115d0:	1c5a      	adds	r2, r3, #1
 80115d2:	921b      	str	r2, [sp, #108]	; 0x6c
 80115d4:	785b      	ldrb	r3, [r3, #1]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d1c2      	bne.n	8011560 <_strtod_l+0x40>
 80115da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80115dc:	961b      	str	r6, [sp, #108]	; 0x6c
 80115de:	2b00      	cmp	r3, #0
 80115e0:	f040 8579 	bne.w	80120d6 <_strtod_l+0xbb6>
 80115e4:	4652      	mov	r2, sl
 80115e6:	465b      	mov	r3, fp
 80115e8:	e7e2      	b.n	80115b0 <_strtod_l+0x90>
 80115ea:	2200      	movs	r2, #0
 80115ec:	e7ef      	b.n	80115ce <_strtod_l+0xae>
 80115ee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80115f0:	b13a      	cbz	r2, 8011602 <_strtod_l+0xe2>
 80115f2:	2135      	movs	r1, #53	; 0x35
 80115f4:	a81e      	add	r0, sp, #120	; 0x78
 80115f6:	f002 fdd1 	bl	801419c <__copybits>
 80115fa:	991c      	ldr	r1, [sp, #112]	; 0x70
 80115fc:	4648      	mov	r0, r9
 80115fe:	f002 fa3d 	bl	8013a7c <_Bfree>
 8011602:	3c01      	subs	r4, #1
 8011604:	2c04      	cmp	r4, #4
 8011606:	d806      	bhi.n	8011616 <_strtod_l+0xf6>
 8011608:	e8df f004 	tbb	[pc, r4]
 801160c:	1714030a 	.word	0x1714030a
 8011610:	0a          	.byte	0x0a
 8011611:	00          	.byte	0x00
 8011612:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8011616:	0730      	lsls	r0, r6, #28
 8011618:	d5c1      	bpl.n	801159e <_strtod_l+0x7e>
 801161a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801161e:	e7be      	b.n	801159e <_strtod_l+0x7e>
 8011620:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8011624:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011626:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801162a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801162e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011632:	e7f0      	b.n	8011616 <_strtod_l+0xf6>
 8011634:	f8df b170 	ldr.w	fp, [pc, #368]	; 80117a8 <_strtod_l+0x288>
 8011638:	e7ed      	b.n	8011616 <_strtod_l+0xf6>
 801163a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801163e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8011642:	e7e8      	b.n	8011616 <_strtod_l+0xf6>
 8011644:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011646:	1c5a      	adds	r2, r3, #1
 8011648:	921b      	str	r2, [sp, #108]	; 0x6c
 801164a:	785b      	ldrb	r3, [r3, #1]
 801164c:	2b30      	cmp	r3, #48	; 0x30
 801164e:	d0f9      	beq.n	8011644 <_strtod_l+0x124>
 8011650:	2b00      	cmp	r3, #0
 8011652:	d0a4      	beq.n	801159e <_strtod_l+0x7e>
 8011654:	2301      	movs	r3, #1
 8011656:	2500      	movs	r5, #0
 8011658:	9306      	str	r3, [sp, #24]
 801165a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801165c:	9308      	str	r3, [sp, #32]
 801165e:	9507      	str	r5, [sp, #28]
 8011660:	9505      	str	r5, [sp, #20]
 8011662:	220a      	movs	r2, #10
 8011664:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8011666:	7807      	ldrb	r7, [r0, #0]
 8011668:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801166c:	b2d9      	uxtb	r1, r3
 801166e:	2909      	cmp	r1, #9
 8011670:	d929      	bls.n	80116c6 <_strtod_l+0x1a6>
 8011672:	4622      	mov	r2, r4
 8011674:	f8d8 1000 	ldr.w	r1, [r8]
 8011678:	f003 f96d 	bl	8014956 <strncmp>
 801167c:	2800      	cmp	r0, #0
 801167e:	d031      	beq.n	80116e4 <_strtod_l+0x1c4>
 8011680:	2000      	movs	r0, #0
 8011682:	9c05      	ldr	r4, [sp, #20]
 8011684:	9004      	str	r0, [sp, #16]
 8011686:	463b      	mov	r3, r7
 8011688:	4602      	mov	r2, r0
 801168a:	2b65      	cmp	r3, #101	; 0x65
 801168c:	d001      	beq.n	8011692 <_strtod_l+0x172>
 801168e:	2b45      	cmp	r3, #69	; 0x45
 8011690:	d114      	bne.n	80116bc <_strtod_l+0x19c>
 8011692:	b924      	cbnz	r4, 801169e <_strtod_l+0x17e>
 8011694:	b910      	cbnz	r0, 801169c <_strtod_l+0x17c>
 8011696:	9b06      	ldr	r3, [sp, #24]
 8011698:	2b00      	cmp	r3, #0
 801169a:	d09e      	beq.n	80115da <_strtod_l+0xba>
 801169c:	2400      	movs	r4, #0
 801169e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80116a0:	1c73      	adds	r3, r6, #1
 80116a2:	931b      	str	r3, [sp, #108]	; 0x6c
 80116a4:	7873      	ldrb	r3, [r6, #1]
 80116a6:	2b2b      	cmp	r3, #43	; 0x2b
 80116a8:	d078      	beq.n	801179c <_strtod_l+0x27c>
 80116aa:	2b2d      	cmp	r3, #45	; 0x2d
 80116ac:	d070      	beq.n	8011790 <_strtod_l+0x270>
 80116ae:	f04f 0c00 	mov.w	ip, #0
 80116b2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80116b6:	2f09      	cmp	r7, #9
 80116b8:	d97c      	bls.n	80117b4 <_strtod_l+0x294>
 80116ba:	961b      	str	r6, [sp, #108]	; 0x6c
 80116bc:	f04f 0e00 	mov.w	lr, #0
 80116c0:	e09a      	b.n	80117f8 <_strtod_l+0x2d8>
 80116c2:	2300      	movs	r3, #0
 80116c4:	e7c7      	b.n	8011656 <_strtod_l+0x136>
 80116c6:	9905      	ldr	r1, [sp, #20]
 80116c8:	2908      	cmp	r1, #8
 80116ca:	bfdd      	ittte	le
 80116cc:	9907      	ldrle	r1, [sp, #28]
 80116ce:	fb02 3301 	mlale	r3, r2, r1, r3
 80116d2:	9307      	strle	r3, [sp, #28]
 80116d4:	fb02 3505 	mlagt	r5, r2, r5, r3
 80116d8:	9b05      	ldr	r3, [sp, #20]
 80116da:	3001      	adds	r0, #1
 80116dc:	3301      	adds	r3, #1
 80116de:	9305      	str	r3, [sp, #20]
 80116e0:	901b      	str	r0, [sp, #108]	; 0x6c
 80116e2:	e7bf      	b.n	8011664 <_strtod_l+0x144>
 80116e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80116e6:	191a      	adds	r2, r3, r4
 80116e8:	921b      	str	r2, [sp, #108]	; 0x6c
 80116ea:	9a05      	ldr	r2, [sp, #20]
 80116ec:	5d1b      	ldrb	r3, [r3, r4]
 80116ee:	2a00      	cmp	r2, #0
 80116f0:	d037      	beq.n	8011762 <_strtod_l+0x242>
 80116f2:	9c05      	ldr	r4, [sp, #20]
 80116f4:	4602      	mov	r2, r0
 80116f6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80116fa:	2909      	cmp	r1, #9
 80116fc:	d913      	bls.n	8011726 <_strtod_l+0x206>
 80116fe:	2101      	movs	r1, #1
 8011700:	9104      	str	r1, [sp, #16]
 8011702:	e7c2      	b.n	801168a <_strtod_l+0x16a>
 8011704:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011706:	1c5a      	adds	r2, r3, #1
 8011708:	921b      	str	r2, [sp, #108]	; 0x6c
 801170a:	785b      	ldrb	r3, [r3, #1]
 801170c:	3001      	adds	r0, #1
 801170e:	2b30      	cmp	r3, #48	; 0x30
 8011710:	d0f8      	beq.n	8011704 <_strtod_l+0x1e4>
 8011712:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8011716:	2a08      	cmp	r2, #8
 8011718:	f200 84e4 	bhi.w	80120e4 <_strtod_l+0xbc4>
 801171c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801171e:	9208      	str	r2, [sp, #32]
 8011720:	4602      	mov	r2, r0
 8011722:	2000      	movs	r0, #0
 8011724:	4604      	mov	r4, r0
 8011726:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 801172a:	f100 0101 	add.w	r1, r0, #1
 801172e:	d012      	beq.n	8011756 <_strtod_l+0x236>
 8011730:	440a      	add	r2, r1
 8011732:	eb00 0c04 	add.w	ip, r0, r4
 8011736:	4621      	mov	r1, r4
 8011738:	270a      	movs	r7, #10
 801173a:	458c      	cmp	ip, r1
 801173c:	d113      	bne.n	8011766 <_strtod_l+0x246>
 801173e:	1821      	adds	r1, r4, r0
 8011740:	2908      	cmp	r1, #8
 8011742:	f104 0401 	add.w	r4, r4, #1
 8011746:	4404      	add	r4, r0
 8011748:	dc19      	bgt.n	801177e <_strtod_l+0x25e>
 801174a:	9b07      	ldr	r3, [sp, #28]
 801174c:	210a      	movs	r1, #10
 801174e:	fb01 e303 	mla	r3, r1, r3, lr
 8011752:	9307      	str	r3, [sp, #28]
 8011754:	2100      	movs	r1, #0
 8011756:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011758:	1c58      	adds	r0, r3, #1
 801175a:	901b      	str	r0, [sp, #108]	; 0x6c
 801175c:	785b      	ldrb	r3, [r3, #1]
 801175e:	4608      	mov	r0, r1
 8011760:	e7c9      	b.n	80116f6 <_strtod_l+0x1d6>
 8011762:	9805      	ldr	r0, [sp, #20]
 8011764:	e7d3      	b.n	801170e <_strtod_l+0x1ee>
 8011766:	2908      	cmp	r1, #8
 8011768:	f101 0101 	add.w	r1, r1, #1
 801176c:	dc03      	bgt.n	8011776 <_strtod_l+0x256>
 801176e:	9b07      	ldr	r3, [sp, #28]
 8011770:	437b      	muls	r3, r7
 8011772:	9307      	str	r3, [sp, #28]
 8011774:	e7e1      	b.n	801173a <_strtod_l+0x21a>
 8011776:	2910      	cmp	r1, #16
 8011778:	bfd8      	it	le
 801177a:	437d      	mulle	r5, r7
 801177c:	e7dd      	b.n	801173a <_strtod_l+0x21a>
 801177e:	2c10      	cmp	r4, #16
 8011780:	bfdc      	itt	le
 8011782:	210a      	movle	r1, #10
 8011784:	fb01 e505 	mlale	r5, r1, r5, lr
 8011788:	e7e4      	b.n	8011754 <_strtod_l+0x234>
 801178a:	2301      	movs	r3, #1
 801178c:	9304      	str	r3, [sp, #16]
 801178e:	e781      	b.n	8011694 <_strtod_l+0x174>
 8011790:	f04f 0c01 	mov.w	ip, #1
 8011794:	1cb3      	adds	r3, r6, #2
 8011796:	931b      	str	r3, [sp, #108]	; 0x6c
 8011798:	78b3      	ldrb	r3, [r6, #2]
 801179a:	e78a      	b.n	80116b2 <_strtod_l+0x192>
 801179c:	f04f 0c00 	mov.w	ip, #0
 80117a0:	e7f8      	b.n	8011794 <_strtod_l+0x274>
 80117a2:	bf00      	nop
 80117a4:	08016c44 	.word	0x08016c44
 80117a8:	7ff00000 	.word	0x7ff00000
 80117ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80117ae:	1c5f      	adds	r7, r3, #1
 80117b0:	971b      	str	r7, [sp, #108]	; 0x6c
 80117b2:	785b      	ldrb	r3, [r3, #1]
 80117b4:	2b30      	cmp	r3, #48	; 0x30
 80117b6:	d0f9      	beq.n	80117ac <_strtod_l+0x28c>
 80117b8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80117bc:	2f08      	cmp	r7, #8
 80117be:	f63f af7d 	bhi.w	80116bc <_strtod_l+0x19c>
 80117c2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80117c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80117c8:	930a      	str	r3, [sp, #40]	; 0x28
 80117ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80117cc:	1c5f      	adds	r7, r3, #1
 80117ce:	971b      	str	r7, [sp, #108]	; 0x6c
 80117d0:	785b      	ldrb	r3, [r3, #1]
 80117d2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80117d6:	f1b8 0f09 	cmp.w	r8, #9
 80117da:	d937      	bls.n	801184c <_strtod_l+0x32c>
 80117dc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80117de:	1a7f      	subs	r7, r7, r1
 80117e0:	2f08      	cmp	r7, #8
 80117e2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80117e6:	dc37      	bgt.n	8011858 <_strtod_l+0x338>
 80117e8:	45be      	cmp	lr, r7
 80117ea:	bfa8      	it	ge
 80117ec:	46be      	movge	lr, r7
 80117ee:	f1bc 0f00 	cmp.w	ip, #0
 80117f2:	d001      	beq.n	80117f8 <_strtod_l+0x2d8>
 80117f4:	f1ce 0e00 	rsb	lr, lr, #0
 80117f8:	2c00      	cmp	r4, #0
 80117fa:	d151      	bne.n	80118a0 <_strtod_l+0x380>
 80117fc:	2800      	cmp	r0, #0
 80117fe:	f47f aece 	bne.w	801159e <_strtod_l+0x7e>
 8011802:	9a06      	ldr	r2, [sp, #24]
 8011804:	2a00      	cmp	r2, #0
 8011806:	f47f aeca 	bne.w	801159e <_strtod_l+0x7e>
 801180a:	9a04      	ldr	r2, [sp, #16]
 801180c:	2a00      	cmp	r2, #0
 801180e:	f47f aee4 	bne.w	80115da <_strtod_l+0xba>
 8011812:	2b4e      	cmp	r3, #78	; 0x4e
 8011814:	d027      	beq.n	8011866 <_strtod_l+0x346>
 8011816:	dc21      	bgt.n	801185c <_strtod_l+0x33c>
 8011818:	2b49      	cmp	r3, #73	; 0x49
 801181a:	f47f aede 	bne.w	80115da <_strtod_l+0xba>
 801181e:	49a0      	ldr	r1, [pc, #640]	; (8011aa0 <_strtod_l+0x580>)
 8011820:	a81b      	add	r0, sp, #108	; 0x6c
 8011822:	f001 ffc5 	bl	80137b0 <__match>
 8011826:	2800      	cmp	r0, #0
 8011828:	f43f aed7 	beq.w	80115da <_strtod_l+0xba>
 801182c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801182e:	499d      	ldr	r1, [pc, #628]	; (8011aa4 <_strtod_l+0x584>)
 8011830:	3b01      	subs	r3, #1
 8011832:	a81b      	add	r0, sp, #108	; 0x6c
 8011834:	931b      	str	r3, [sp, #108]	; 0x6c
 8011836:	f001 ffbb 	bl	80137b0 <__match>
 801183a:	b910      	cbnz	r0, 8011842 <_strtod_l+0x322>
 801183c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801183e:	3301      	adds	r3, #1
 8011840:	931b      	str	r3, [sp, #108]	; 0x6c
 8011842:	f8df b274 	ldr.w	fp, [pc, #628]	; 8011ab8 <_strtod_l+0x598>
 8011846:	f04f 0a00 	mov.w	sl, #0
 801184a:	e6a8      	b.n	801159e <_strtod_l+0x7e>
 801184c:	210a      	movs	r1, #10
 801184e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8011852:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8011856:	e7b8      	b.n	80117ca <_strtod_l+0x2aa>
 8011858:	46be      	mov	lr, r7
 801185a:	e7c8      	b.n	80117ee <_strtod_l+0x2ce>
 801185c:	2b69      	cmp	r3, #105	; 0x69
 801185e:	d0de      	beq.n	801181e <_strtod_l+0x2fe>
 8011860:	2b6e      	cmp	r3, #110	; 0x6e
 8011862:	f47f aeba 	bne.w	80115da <_strtod_l+0xba>
 8011866:	4990      	ldr	r1, [pc, #576]	; (8011aa8 <_strtod_l+0x588>)
 8011868:	a81b      	add	r0, sp, #108	; 0x6c
 801186a:	f001 ffa1 	bl	80137b0 <__match>
 801186e:	2800      	cmp	r0, #0
 8011870:	f43f aeb3 	beq.w	80115da <_strtod_l+0xba>
 8011874:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011876:	781b      	ldrb	r3, [r3, #0]
 8011878:	2b28      	cmp	r3, #40	; 0x28
 801187a:	d10e      	bne.n	801189a <_strtod_l+0x37a>
 801187c:	aa1e      	add	r2, sp, #120	; 0x78
 801187e:	498b      	ldr	r1, [pc, #556]	; (8011aac <_strtod_l+0x58c>)
 8011880:	a81b      	add	r0, sp, #108	; 0x6c
 8011882:	f001 ffa9 	bl	80137d8 <__hexnan>
 8011886:	2805      	cmp	r0, #5
 8011888:	d107      	bne.n	801189a <_strtod_l+0x37a>
 801188a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801188c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8011890:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8011894:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8011898:	e681      	b.n	801159e <_strtod_l+0x7e>
 801189a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8011ac0 <_strtod_l+0x5a0>
 801189e:	e7d2      	b.n	8011846 <_strtod_l+0x326>
 80118a0:	ebae 0302 	sub.w	r3, lr, r2
 80118a4:	9306      	str	r3, [sp, #24]
 80118a6:	9b05      	ldr	r3, [sp, #20]
 80118a8:	9807      	ldr	r0, [sp, #28]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	bf08      	it	eq
 80118ae:	4623      	moveq	r3, r4
 80118b0:	2c10      	cmp	r4, #16
 80118b2:	9305      	str	r3, [sp, #20]
 80118b4:	46a0      	mov	r8, r4
 80118b6:	bfa8      	it	ge
 80118b8:	f04f 0810 	movge.w	r8, #16
 80118bc:	f7ee fe22 	bl	8000504 <__aeabi_ui2d>
 80118c0:	2c09      	cmp	r4, #9
 80118c2:	4682      	mov	sl, r0
 80118c4:	468b      	mov	fp, r1
 80118c6:	dc13      	bgt.n	80118f0 <_strtod_l+0x3d0>
 80118c8:	9b06      	ldr	r3, [sp, #24]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	f43f ae67 	beq.w	801159e <_strtod_l+0x7e>
 80118d0:	9b06      	ldr	r3, [sp, #24]
 80118d2:	dd7a      	ble.n	80119ca <_strtod_l+0x4aa>
 80118d4:	2b16      	cmp	r3, #22
 80118d6:	dc61      	bgt.n	801199c <_strtod_l+0x47c>
 80118d8:	4a75      	ldr	r2, [pc, #468]	; (8011ab0 <_strtod_l+0x590>)
 80118da:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80118de:	e9de 0100 	ldrd	r0, r1, [lr]
 80118e2:	4652      	mov	r2, sl
 80118e4:	465b      	mov	r3, fp
 80118e6:	f7ee fe87 	bl	80005f8 <__aeabi_dmul>
 80118ea:	4682      	mov	sl, r0
 80118ec:	468b      	mov	fp, r1
 80118ee:	e656      	b.n	801159e <_strtod_l+0x7e>
 80118f0:	4b6f      	ldr	r3, [pc, #444]	; (8011ab0 <_strtod_l+0x590>)
 80118f2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80118f6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80118fa:	f7ee fe7d 	bl	80005f8 <__aeabi_dmul>
 80118fe:	4606      	mov	r6, r0
 8011900:	4628      	mov	r0, r5
 8011902:	460f      	mov	r7, r1
 8011904:	f7ee fdfe 	bl	8000504 <__aeabi_ui2d>
 8011908:	4602      	mov	r2, r0
 801190a:	460b      	mov	r3, r1
 801190c:	4630      	mov	r0, r6
 801190e:	4639      	mov	r1, r7
 8011910:	f7ee fcbc 	bl	800028c <__adddf3>
 8011914:	2c0f      	cmp	r4, #15
 8011916:	4682      	mov	sl, r0
 8011918:	468b      	mov	fp, r1
 801191a:	ddd5      	ble.n	80118c8 <_strtod_l+0x3a8>
 801191c:	9b06      	ldr	r3, [sp, #24]
 801191e:	eba4 0808 	sub.w	r8, r4, r8
 8011922:	4498      	add	r8, r3
 8011924:	f1b8 0f00 	cmp.w	r8, #0
 8011928:	f340 8096 	ble.w	8011a58 <_strtod_l+0x538>
 801192c:	f018 030f 	ands.w	r3, r8, #15
 8011930:	d00a      	beq.n	8011948 <_strtod_l+0x428>
 8011932:	495f      	ldr	r1, [pc, #380]	; (8011ab0 <_strtod_l+0x590>)
 8011934:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011938:	4652      	mov	r2, sl
 801193a:	465b      	mov	r3, fp
 801193c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011940:	f7ee fe5a 	bl	80005f8 <__aeabi_dmul>
 8011944:	4682      	mov	sl, r0
 8011946:	468b      	mov	fp, r1
 8011948:	f038 080f 	bics.w	r8, r8, #15
 801194c:	d073      	beq.n	8011a36 <_strtod_l+0x516>
 801194e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8011952:	dd47      	ble.n	80119e4 <_strtod_l+0x4c4>
 8011954:	2400      	movs	r4, #0
 8011956:	46a0      	mov	r8, r4
 8011958:	9407      	str	r4, [sp, #28]
 801195a:	9405      	str	r4, [sp, #20]
 801195c:	2322      	movs	r3, #34	; 0x22
 801195e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8011ab8 <_strtod_l+0x598>
 8011962:	f8c9 3000 	str.w	r3, [r9]
 8011966:	f04f 0a00 	mov.w	sl, #0
 801196a:	9b07      	ldr	r3, [sp, #28]
 801196c:	2b00      	cmp	r3, #0
 801196e:	f43f ae16 	beq.w	801159e <_strtod_l+0x7e>
 8011972:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011974:	4648      	mov	r0, r9
 8011976:	f002 f881 	bl	8013a7c <_Bfree>
 801197a:	9905      	ldr	r1, [sp, #20]
 801197c:	4648      	mov	r0, r9
 801197e:	f002 f87d 	bl	8013a7c <_Bfree>
 8011982:	4641      	mov	r1, r8
 8011984:	4648      	mov	r0, r9
 8011986:	f002 f879 	bl	8013a7c <_Bfree>
 801198a:	9907      	ldr	r1, [sp, #28]
 801198c:	4648      	mov	r0, r9
 801198e:	f002 f875 	bl	8013a7c <_Bfree>
 8011992:	4621      	mov	r1, r4
 8011994:	4648      	mov	r0, r9
 8011996:	f002 f871 	bl	8013a7c <_Bfree>
 801199a:	e600      	b.n	801159e <_strtod_l+0x7e>
 801199c:	9a06      	ldr	r2, [sp, #24]
 801199e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80119a2:	4293      	cmp	r3, r2
 80119a4:	dbba      	blt.n	801191c <_strtod_l+0x3fc>
 80119a6:	4d42      	ldr	r5, [pc, #264]	; (8011ab0 <_strtod_l+0x590>)
 80119a8:	f1c4 040f 	rsb	r4, r4, #15
 80119ac:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80119b0:	4652      	mov	r2, sl
 80119b2:	465b      	mov	r3, fp
 80119b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80119b8:	f7ee fe1e 	bl	80005f8 <__aeabi_dmul>
 80119bc:	9b06      	ldr	r3, [sp, #24]
 80119be:	1b1c      	subs	r4, r3, r4
 80119c0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80119c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80119c8:	e78d      	b.n	80118e6 <_strtod_l+0x3c6>
 80119ca:	f113 0f16 	cmn.w	r3, #22
 80119ce:	dba5      	blt.n	801191c <_strtod_l+0x3fc>
 80119d0:	4a37      	ldr	r2, [pc, #220]	; (8011ab0 <_strtod_l+0x590>)
 80119d2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80119d6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80119da:	4650      	mov	r0, sl
 80119dc:	4659      	mov	r1, fp
 80119de:	f7ee ff35 	bl	800084c <__aeabi_ddiv>
 80119e2:	e782      	b.n	80118ea <_strtod_l+0x3ca>
 80119e4:	2300      	movs	r3, #0
 80119e6:	4e33      	ldr	r6, [pc, #204]	; (8011ab4 <_strtod_l+0x594>)
 80119e8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80119ec:	4650      	mov	r0, sl
 80119ee:	4659      	mov	r1, fp
 80119f0:	461d      	mov	r5, r3
 80119f2:	f1b8 0f01 	cmp.w	r8, #1
 80119f6:	dc21      	bgt.n	8011a3c <_strtod_l+0x51c>
 80119f8:	b10b      	cbz	r3, 80119fe <_strtod_l+0x4de>
 80119fa:	4682      	mov	sl, r0
 80119fc:	468b      	mov	fp, r1
 80119fe:	4b2d      	ldr	r3, [pc, #180]	; (8011ab4 <_strtod_l+0x594>)
 8011a00:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8011a04:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8011a08:	4652      	mov	r2, sl
 8011a0a:	465b      	mov	r3, fp
 8011a0c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8011a10:	f7ee fdf2 	bl	80005f8 <__aeabi_dmul>
 8011a14:	4b28      	ldr	r3, [pc, #160]	; (8011ab8 <_strtod_l+0x598>)
 8011a16:	460a      	mov	r2, r1
 8011a18:	400b      	ands	r3, r1
 8011a1a:	4928      	ldr	r1, [pc, #160]	; (8011abc <_strtod_l+0x59c>)
 8011a1c:	428b      	cmp	r3, r1
 8011a1e:	4682      	mov	sl, r0
 8011a20:	d898      	bhi.n	8011954 <_strtod_l+0x434>
 8011a22:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8011a26:	428b      	cmp	r3, r1
 8011a28:	bf86      	itte	hi
 8011a2a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8011ac4 <_strtod_l+0x5a4>
 8011a2e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 8011a32:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8011a36:	2300      	movs	r3, #0
 8011a38:	9304      	str	r3, [sp, #16]
 8011a3a:	e077      	b.n	8011b2c <_strtod_l+0x60c>
 8011a3c:	f018 0f01 	tst.w	r8, #1
 8011a40:	d006      	beq.n	8011a50 <_strtod_l+0x530>
 8011a42:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8011a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a4a:	f7ee fdd5 	bl	80005f8 <__aeabi_dmul>
 8011a4e:	2301      	movs	r3, #1
 8011a50:	3501      	adds	r5, #1
 8011a52:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011a56:	e7cc      	b.n	80119f2 <_strtod_l+0x4d2>
 8011a58:	d0ed      	beq.n	8011a36 <_strtod_l+0x516>
 8011a5a:	f1c8 0800 	rsb	r8, r8, #0
 8011a5e:	f018 020f 	ands.w	r2, r8, #15
 8011a62:	d00a      	beq.n	8011a7a <_strtod_l+0x55a>
 8011a64:	4b12      	ldr	r3, [pc, #72]	; (8011ab0 <_strtod_l+0x590>)
 8011a66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011a6a:	4650      	mov	r0, sl
 8011a6c:	4659      	mov	r1, fp
 8011a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a72:	f7ee feeb 	bl	800084c <__aeabi_ddiv>
 8011a76:	4682      	mov	sl, r0
 8011a78:	468b      	mov	fp, r1
 8011a7a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8011a7e:	d0da      	beq.n	8011a36 <_strtod_l+0x516>
 8011a80:	f1b8 0f1f 	cmp.w	r8, #31
 8011a84:	dd20      	ble.n	8011ac8 <_strtod_l+0x5a8>
 8011a86:	2400      	movs	r4, #0
 8011a88:	46a0      	mov	r8, r4
 8011a8a:	9407      	str	r4, [sp, #28]
 8011a8c:	9405      	str	r4, [sp, #20]
 8011a8e:	2322      	movs	r3, #34	; 0x22
 8011a90:	f04f 0a00 	mov.w	sl, #0
 8011a94:	f04f 0b00 	mov.w	fp, #0
 8011a98:	f8c9 3000 	str.w	r3, [r9]
 8011a9c:	e765      	b.n	801196a <_strtod_l+0x44a>
 8011a9e:	bf00      	nop
 8011aa0:	08016c15 	.word	0x08016c15
 8011aa4:	08016c9b 	.word	0x08016c9b
 8011aa8:	08016c1d 	.word	0x08016c1d
 8011aac:	08016c58 	.word	0x08016c58
 8011ab0:	08016d40 	.word	0x08016d40
 8011ab4:	08016d18 	.word	0x08016d18
 8011ab8:	7ff00000 	.word	0x7ff00000
 8011abc:	7ca00000 	.word	0x7ca00000
 8011ac0:	fff80000 	.word	0xfff80000
 8011ac4:	7fefffff 	.word	0x7fefffff
 8011ac8:	f018 0310 	ands.w	r3, r8, #16
 8011acc:	bf18      	it	ne
 8011ace:	236a      	movne	r3, #106	; 0x6a
 8011ad0:	4da0      	ldr	r5, [pc, #640]	; (8011d54 <_strtod_l+0x834>)
 8011ad2:	9304      	str	r3, [sp, #16]
 8011ad4:	4650      	mov	r0, sl
 8011ad6:	4659      	mov	r1, fp
 8011ad8:	2300      	movs	r3, #0
 8011ada:	f1b8 0f00 	cmp.w	r8, #0
 8011ade:	f300 810a 	bgt.w	8011cf6 <_strtod_l+0x7d6>
 8011ae2:	b10b      	cbz	r3, 8011ae8 <_strtod_l+0x5c8>
 8011ae4:	4682      	mov	sl, r0
 8011ae6:	468b      	mov	fp, r1
 8011ae8:	9b04      	ldr	r3, [sp, #16]
 8011aea:	b1bb      	cbz	r3, 8011b1c <_strtod_l+0x5fc>
 8011aec:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8011af0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	4659      	mov	r1, fp
 8011af8:	dd10      	ble.n	8011b1c <_strtod_l+0x5fc>
 8011afa:	2b1f      	cmp	r3, #31
 8011afc:	f340 8107 	ble.w	8011d0e <_strtod_l+0x7ee>
 8011b00:	2b34      	cmp	r3, #52	; 0x34
 8011b02:	bfde      	ittt	le
 8011b04:	3b20      	suble	r3, #32
 8011b06:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8011b0a:	fa02 f303 	lslle.w	r3, r2, r3
 8011b0e:	f04f 0a00 	mov.w	sl, #0
 8011b12:	bfcc      	ite	gt
 8011b14:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8011b18:	ea03 0b01 	andle.w	fp, r3, r1
 8011b1c:	2200      	movs	r2, #0
 8011b1e:	2300      	movs	r3, #0
 8011b20:	4650      	mov	r0, sl
 8011b22:	4659      	mov	r1, fp
 8011b24:	f7ee ffd0 	bl	8000ac8 <__aeabi_dcmpeq>
 8011b28:	2800      	cmp	r0, #0
 8011b2a:	d1ac      	bne.n	8011a86 <_strtod_l+0x566>
 8011b2c:	9b07      	ldr	r3, [sp, #28]
 8011b2e:	9300      	str	r3, [sp, #0]
 8011b30:	9a05      	ldr	r2, [sp, #20]
 8011b32:	9908      	ldr	r1, [sp, #32]
 8011b34:	4623      	mov	r3, r4
 8011b36:	4648      	mov	r0, r9
 8011b38:	f001 fff2 	bl	8013b20 <__s2b>
 8011b3c:	9007      	str	r0, [sp, #28]
 8011b3e:	2800      	cmp	r0, #0
 8011b40:	f43f af08 	beq.w	8011954 <_strtod_l+0x434>
 8011b44:	9a06      	ldr	r2, [sp, #24]
 8011b46:	9b06      	ldr	r3, [sp, #24]
 8011b48:	2a00      	cmp	r2, #0
 8011b4a:	f1c3 0300 	rsb	r3, r3, #0
 8011b4e:	bfa8      	it	ge
 8011b50:	2300      	movge	r3, #0
 8011b52:	930e      	str	r3, [sp, #56]	; 0x38
 8011b54:	2400      	movs	r4, #0
 8011b56:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8011b5a:	9316      	str	r3, [sp, #88]	; 0x58
 8011b5c:	46a0      	mov	r8, r4
 8011b5e:	9b07      	ldr	r3, [sp, #28]
 8011b60:	4648      	mov	r0, r9
 8011b62:	6859      	ldr	r1, [r3, #4]
 8011b64:	f001 ff56 	bl	8013a14 <_Balloc>
 8011b68:	9005      	str	r0, [sp, #20]
 8011b6a:	2800      	cmp	r0, #0
 8011b6c:	f43f aef6 	beq.w	801195c <_strtod_l+0x43c>
 8011b70:	9b07      	ldr	r3, [sp, #28]
 8011b72:	691a      	ldr	r2, [r3, #16]
 8011b74:	3202      	adds	r2, #2
 8011b76:	f103 010c 	add.w	r1, r3, #12
 8011b7a:	0092      	lsls	r2, r2, #2
 8011b7c:	300c      	adds	r0, #12
 8011b7e:	f7fe ff8f 	bl	8010aa0 <memcpy>
 8011b82:	aa1e      	add	r2, sp, #120	; 0x78
 8011b84:	a91d      	add	r1, sp, #116	; 0x74
 8011b86:	ec4b ab10 	vmov	d0, sl, fp
 8011b8a:	4648      	mov	r0, r9
 8011b8c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8011b90:	f002 fa82 	bl	8014098 <__d2b>
 8011b94:	901c      	str	r0, [sp, #112]	; 0x70
 8011b96:	2800      	cmp	r0, #0
 8011b98:	f43f aee0 	beq.w	801195c <_strtod_l+0x43c>
 8011b9c:	2101      	movs	r1, #1
 8011b9e:	4648      	mov	r0, r9
 8011ba0:	f002 f84a 	bl	8013c38 <__i2b>
 8011ba4:	4680      	mov	r8, r0
 8011ba6:	2800      	cmp	r0, #0
 8011ba8:	f43f aed8 	beq.w	801195c <_strtod_l+0x43c>
 8011bac:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8011bae:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8011bb0:	2e00      	cmp	r6, #0
 8011bb2:	bfab      	itete	ge
 8011bb4:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8011bb6:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8011bb8:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8011bba:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8011bbc:	bfac      	ite	ge
 8011bbe:	18f7      	addge	r7, r6, r3
 8011bc0:	1b9d      	sublt	r5, r3, r6
 8011bc2:	9b04      	ldr	r3, [sp, #16]
 8011bc4:	1af6      	subs	r6, r6, r3
 8011bc6:	4416      	add	r6, r2
 8011bc8:	4b63      	ldr	r3, [pc, #396]	; (8011d58 <_strtod_l+0x838>)
 8011bca:	3e01      	subs	r6, #1
 8011bcc:	429e      	cmp	r6, r3
 8011bce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8011bd2:	f280 80af 	bge.w	8011d34 <_strtod_l+0x814>
 8011bd6:	1b9b      	subs	r3, r3, r6
 8011bd8:	2b1f      	cmp	r3, #31
 8011bda:	eba2 0203 	sub.w	r2, r2, r3
 8011bde:	f04f 0101 	mov.w	r1, #1
 8011be2:	f300 809b 	bgt.w	8011d1c <_strtod_l+0x7fc>
 8011be6:	fa01 f303 	lsl.w	r3, r1, r3
 8011bea:	930f      	str	r3, [sp, #60]	; 0x3c
 8011bec:	2300      	movs	r3, #0
 8011bee:	930a      	str	r3, [sp, #40]	; 0x28
 8011bf0:	18be      	adds	r6, r7, r2
 8011bf2:	9b04      	ldr	r3, [sp, #16]
 8011bf4:	42b7      	cmp	r7, r6
 8011bf6:	4415      	add	r5, r2
 8011bf8:	441d      	add	r5, r3
 8011bfa:	463b      	mov	r3, r7
 8011bfc:	bfa8      	it	ge
 8011bfe:	4633      	movge	r3, r6
 8011c00:	42ab      	cmp	r3, r5
 8011c02:	bfa8      	it	ge
 8011c04:	462b      	movge	r3, r5
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	bfc2      	ittt	gt
 8011c0a:	1af6      	subgt	r6, r6, r3
 8011c0c:	1aed      	subgt	r5, r5, r3
 8011c0e:	1aff      	subgt	r7, r7, r3
 8011c10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011c12:	b1bb      	cbz	r3, 8011c44 <_strtod_l+0x724>
 8011c14:	4641      	mov	r1, r8
 8011c16:	461a      	mov	r2, r3
 8011c18:	4648      	mov	r0, r9
 8011c1a:	f002 f8ad 	bl	8013d78 <__pow5mult>
 8011c1e:	4680      	mov	r8, r0
 8011c20:	2800      	cmp	r0, #0
 8011c22:	f43f ae9b 	beq.w	801195c <_strtod_l+0x43c>
 8011c26:	4601      	mov	r1, r0
 8011c28:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8011c2a:	4648      	mov	r0, r9
 8011c2c:	f002 f80d 	bl	8013c4a <__multiply>
 8011c30:	900c      	str	r0, [sp, #48]	; 0x30
 8011c32:	2800      	cmp	r0, #0
 8011c34:	f43f ae92 	beq.w	801195c <_strtod_l+0x43c>
 8011c38:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011c3a:	4648      	mov	r0, r9
 8011c3c:	f001 ff1e 	bl	8013a7c <_Bfree>
 8011c40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011c42:	931c      	str	r3, [sp, #112]	; 0x70
 8011c44:	2e00      	cmp	r6, #0
 8011c46:	dc7a      	bgt.n	8011d3e <_strtod_l+0x81e>
 8011c48:	9b06      	ldr	r3, [sp, #24]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	dd08      	ble.n	8011c60 <_strtod_l+0x740>
 8011c4e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011c50:	9905      	ldr	r1, [sp, #20]
 8011c52:	4648      	mov	r0, r9
 8011c54:	f002 f890 	bl	8013d78 <__pow5mult>
 8011c58:	9005      	str	r0, [sp, #20]
 8011c5a:	2800      	cmp	r0, #0
 8011c5c:	f43f ae7e 	beq.w	801195c <_strtod_l+0x43c>
 8011c60:	2d00      	cmp	r5, #0
 8011c62:	dd08      	ble.n	8011c76 <_strtod_l+0x756>
 8011c64:	462a      	mov	r2, r5
 8011c66:	9905      	ldr	r1, [sp, #20]
 8011c68:	4648      	mov	r0, r9
 8011c6a:	f002 f8d3 	bl	8013e14 <__lshift>
 8011c6e:	9005      	str	r0, [sp, #20]
 8011c70:	2800      	cmp	r0, #0
 8011c72:	f43f ae73 	beq.w	801195c <_strtod_l+0x43c>
 8011c76:	2f00      	cmp	r7, #0
 8011c78:	dd08      	ble.n	8011c8c <_strtod_l+0x76c>
 8011c7a:	4641      	mov	r1, r8
 8011c7c:	463a      	mov	r2, r7
 8011c7e:	4648      	mov	r0, r9
 8011c80:	f002 f8c8 	bl	8013e14 <__lshift>
 8011c84:	4680      	mov	r8, r0
 8011c86:	2800      	cmp	r0, #0
 8011c88:	f43f ae68 	beq.w	801195c <_strtod_l+0x43c>
 8011c8c:	9a05      	ldr	r2, [sp, #20]
 8011c8e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011c90:	4648      	mov	r0, r9
 8011c92:	f002 f92d 	bl	8013ef0 <__mdiff>
 8011c96:	4604      	mov	r4, r0
 8011c98:	2800      	cmp	r0, #0
 8011c9a:	f43f ae5f 	beq.w	801195c <_strtod_l+0x43c>
 8011c9e:	68c3      	ldr	r3, [r0, #12]
 8011ca0:	930c      	str	r3, [sp, #48]	; 0x30
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	60c3      	str	r3, [r0, #12]
 8011ca6:	4641      	mov	r1, r8
 8011ca8:	f002 f908 	bl	8013ebc <__mcmp>
 8011cac:	2800      	cmp	r0, #0
 8011cae:	da55      	bge.n	8011d5c <_strtod_l+0x83c>
 8011cb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011cb2:	b9e3      	cbnz	r3, 8011cee <_strtod_l+0x7ce>
 8011cb4:	f1ba 0f00 	cmp.w	sl, #0
 8011cb8:	d119      	bne.n	8011cee <_strtod_l+0x7ce>
 8011cba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011cbe:	b9b3      	cbnz	r3, 8011cee <_strtod_l+0x7ce>
 8011cc0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011cc4:	0d1b      	lsrs	r3, r3, #20
 8011cc6:	051b      	lsls	r3, r3, #20
 8011cc8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8011ccc:	d90f      	bls.n	8011cee <_strtod_l+0x7ce>
 8011cce:	6963      	ldr	r3, [r4, #20]
 8011cd0:	b913      	cbnz	r3, 8011cd8 <_strtod_l+0x7b8>
 8011cd2:	6923      	ldr	r3, [r4, #16]
 8011cd4:	2b01      	cmp	r3, #1
 8011cd6:	dd0a      	ble.n	8011cee <_strtod_l+0x7ce>
 8011cd8:	4621      	mov	r1, r4
 8011cda:	2201      	movs	r2, #1
 8011cdc:	4648      	mov	r0, r9
 8011cde:	f002 f899 	bl	8013e14 <__lshift>
 8011ce2:	4641      	mov	r1, r8
 8011ce4:	4604      	mov	r4, r0
 8011ce6:	f002 f8e9 	bl	8013ebc <__mcmp>
 8011cea:	2800      	cmp	r0, #0
 8011cec:	dc67      	bgt.n	8011dbe <_strtod_l+0x89e>
 8011cee:	9b04      	ldr	r3, [sp, #16]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d171      	bne.n	8011dd8 <_strtod_l+0x8b8>
 8011cf4:	e63d      	b.n	8011972 <_strtod_l+0x452>
 8011cf6:	f018 0f01 	tst.w	r8, #1
 8011cfa:	d004      	beq.n	8011d06 <_strtod_l+0x7e6>
 8011cfc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011d00:	f7ee fc7a 	bl	80005f8 <__aeabi_dmul>
 8011d04:	2301      	movs	r3, #1
 8011d06:	ea4f 0868 	mov.w	r8, r8, asr #1
 8011d0a:	3508      	adds	r5, #8
 8011d0c:	e6e5      	b.n	8011ada <_strtod_l+0x5ba>
 8011d0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011d12:	fa02 f303 	lsl.w	r3, r2, r3
 8011d16:	ea03 0a0a 	and.w	sl, r3, sl
 8011d1a:	e6ff      	b.n	8011b1c <_strtod_l+0x5fc>
 8011d1c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8011d20:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8011d24:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8011d28:	36e2      	adds	r6, #226	; 0xe2
 8011d2a:	fa01 f306 	lsl.w	r3, r1, r6
 8011d2e:	930a      	str	r3, [sp, #40]	; 0x28
 8011d30:	910f      	str	r1, [sp, #60]	; 0x3c
 8011d32:	e75d      	b.n	8011bf0 <_strtod_l+0x6d0>
 8011d34:	2300      	movs	r3, #0
 8011d36:	930a      	str	r3, [sp, #40]	; 0x28
 8011d38:	2301      	movs	r3, #1
 8011d3a:	930f      	str	r3, [sp, #60]	; 0x3c
 8011d3c:	e758      	b.n	8011bf0 <_strtod_l+0x6d0>
 8011d3e:	4632      	mov	r2, r6
 8011d40:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011d42:	4648      	mov	r0, r9
 8011d44:	f002 f866 	bl	8013e14 <__lshift>
 8011d48:	901c      	str	r0, [sp, #112]	; 0x70
 8011d4a:	2800      	cmp	r0, #0
 8011d4c:	f47f af7c 	bne.w	8011c48 <_strtod_l+0x728>
 8011d50:	e604      	b.n	801195c <_strtod_l+0x43c>
 8011d52:	bf00      	nop
 8011d54:	08016c70 	.word	0x08016c70
 8011d58:	fffffc02 	.word	0xfffffc02
 8011d5c:	465d      	mov	r5, fp
 8011d5e:	f040 8086 	bne.w	8011e6e <_strtod_l+0x94e>
 8011d62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011d64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011d68:	b32a      	cbz	r2, 8011db6 <_strtod_l+0x896>
 8011d6a:	4aaf      	ldr	r2, [pc, #700]	; (8012028 <_strtod_l+0xb08>)
 8011d6c:	4293      	cmp	r3, r2
 8011d6e:	d153      	bne.n	8011e18 <_strtod_l+0x8f8>
 8011d70:	9b04      	ldr	r3, [sp, #16]
 8011d72:	4650      	mov	r0, sl
 8011d74:	b1d3      	cbz	r3, 8011dac <_strtod_l+0x88c>
 8011d76:	4aad      	ldr	r2, [pc, #692]	; (801202c <_strtod_l+0xb0c>)
 8011d78:	402a      	ands	r2, r5
 8011d7a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8011d7e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011d82:	d816      	bhi.n	8011db2 <_strtod_l+0x892>
 8011d84:	0d12      	lsrs	r2, r2, #20
 8011d86:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8011d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8011d8e:	4298      	cmp	r0, r3
 8011d90:	d142      	bne.n	8011e18 <_strtod_l+0x8f8>
 8011d92:	4ba7      	ldr	r3, [pc, #668]	; (8012030 <_strtod_l+0xb10>)
 8011d94:	429d      	cmp	r5, r3
 8011d96:	d102      	bne.n	8011d9e <_strtod_l+0x87e>
 8011d98:	3001      	adds	r0, #1
 8011d9a:	f43f addf 	beq.w	801195c <_strtod_l+0x43c>
 8011d9e:	4ba3      	ldr	r3, [pc, #652]	; (801202c <_strtod_l+0xb0c>)
 8011da0:	402b      	ands	r3, r5
 8011da2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8011da6:	f04f 0a00 	mov.w	sl, #0
 8011daa:	e7a0      	b.n	8011cee <_strtod_l+0x7ce>
 8011dac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011db0:	e7ed      	b.n	8011d8e <_strtod_l+0x86e>
 8011db2:	460b      	mov	r3, r1
 8011db4:	e7eb      	b.n	8011d8e <_strtod_l+0x86e>
 8011db6:	bb7b      	cbnz	r3, 8011e18 <_strtod_l+0x8f8>
 8011db8:	f1ba 0f00 	cmp.w	sl, #0
 8011dbc:	d12c      	bne.n	8011e18 <_strtod_l+0x8f8>
 8011dbe:	9904      	ldr	r1, [sp, #16]
 8011dc0:	4a9a      	ldr	r2, [pc, #616]	; (801202c <_strtod_l+0xb0c>)
 8011dc2:	465b      	mov	r3, fp
 8011dc4:	b1f1      	cbz	r1, 8011e04 <_strtod_l+0x8e4>
 8011dc6:	ea02 010b 	and.w	r1, r2, fp
 8011dca:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8011dce:	dc19      	bgt.n	8011e04 <_strtod_l+0x8e4>
 8011dd0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011dd4:	f77f ae5b 	ble.w	8011a8e <_strtod_l+0x56e>
 8011dd8:	4a96      	ldr	r2, [pc, #600]	; (8012034 <_strtod_l+0xb14>)
 8011dda:	2300      	movs	r3, #0
 8011ddc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8011de0:	4650      	mov	r0, sl
 8011de2:	4659      	mov	r1, fp
 8011de4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011de8:	f7ee fc06 	bl	80005f8 <__aeabi_dmul>
 8011dec:	4682      	mov	sl, r0
 8011dee:	468b      	mov	fp, r1
 8011df0:	2900      	cmp	r1, #0
 8011df2:	f47f adbe 	bne.w	8011972 <_strtod_l+0x452>
 8011df6:	2800      	cmp	r0, #0
 8011df8:	f47f adbb 	bne.w	8011972 <_strtod_l+0x452>
 8011dfc:	2322      	movs	r3, #34	; 0x22
 8011dfe:	f8c9 3000 	str.w	r3, [r9]
 8011e02:	e5b6      	b.n	8011972 <_strtod_l+0x452>
 8011e04:	4013      	ands	r3, r2
 8011e06:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011e0a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011e0e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011e12:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8011e16:	e76a      	b.n	8011cee <_strtod_l+0x7ce>
 8011e18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e1a:	b193      	cbz	r3, 8011e42 <_strtod_l+0x922>
 8011e1c:	422b      	tst	r3, r5
 8011e1e:	f43f af66 	beq.w	8011cee <_strtod_l+0x7ce>
 8011e22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011e24:	9a04      	ldr	r2, [sp, #16]
 8011e26:	4650      	mov	r0, sl
 8011e28:	4659      	mov	r1, fp
 8011e2a:	b173      	cbz	r3, 8011e4a <_strtod_l+0x92a>
 8011e2c:	f7ff fb59 	bl	80114e2 <sulp>
 8011e30:	4602      	mov	r2, r0
 8011e32:	460b      	mov	r3, r1
 8011e34:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011e38:	f7ee fa28 	bl	800028c <__adddf3>
 8011e3c:	4682      	mov	sl, r0
 8011e3e:	468b      	mov	fp, r1
 8011e40:	e755      	b.n	8011cee <_strtod_l+0x7ce>
 8011e42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011e44:	ea13 0f0a 	tst.w	r3, sl
 8011e48:	e7e9      	b.n	8011e1e <_strtod_l+0x8fe>
 8011e4a:	f7ff fb4a 	bl	80114e2 <sulp>
 8011e4e:	4602      	mov	r2, r0
 8011e50:	460b      	mov	r3, r1
 8011e52:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011e56:	f7ee fa17 	bl	8000288 <__aeabi_dsub>
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	4682      	mov	sl, r0
 8011e60:	468b      	mov	fp, r1
 8011e62:	f7ee fe31 	bl	8000ac8 <__aeabi_dcmpeq>
 8011e66:	2800      	cmp	r0, #0
 8011e68:	f47f ae11 	bne.w	8011a8e <_strtod_l+0x56e>
 8011e6c:	e73f      	b.n	8011cee <_strtod_l+0x7ce>
 8011e6e:	4641      	mov	r1, r8
 8011e70:	4620      	mov	r0, r4
 8011e72:	f002 f960 	bl	8014136 <__ratio>
 8011e76:	ec57 6b10 	vmov	r6, r7, d0
 8011e7a:	2200      	movs	r2, #0
 8011e7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011e80:	ee10 0a10 	vmov	r0, s0
 8011e84:	4639      	mov	r1, r7
 8011e86:	f7ee fe33 	bl	8000af0 <__aeabi_dcmple>
 8011e8a:	2800      	cmp	r0, #0
 8011e8c:	d077      	beq.n	8011f7e <_strtod_l+0xa5e>
 8011e8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d04a      	beq.n	8011f2a <_strtod_l+0xa0a>
 8011e94:	4b68      	ldr	r3, [pc, #416]	; (8012038 <_strtod_l+0xb18>)
 8011e96:	2200      	movs	r2, #0
 8011e98:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8011e9c:	4f66      	ldr	r7, [pc, #408]	; (8012038 <_strtod_l+0xb18>)
 8011e9e:	2600      	movs	r6, #0
 8011ea0:	4b62      	ldr	r3, [pc, #392]	; (801202c <_strtod_l+0xb0c>)
 8011ea2:	402b      	ands	r3, r5
 8011ea4:	930f      	str	r3, [sp, #60]	; 0x3c
 8011ea6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011ea8:	4b64      	ldr	r3, [pc, #400]	; (801203c <_strtod_l+0xb1c>)
 8011eaa:	429a      	cmp	r2, r3
 8011eac:	f040 80ce 	bne.w	801204c <_strtod_l+0xb2c>
 8011eb0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8011eb4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011eb8:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8011ebc:	ec4b ab10 	vmov	d0, sl, fp
 8011ec0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8011ec4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011ec8:	f002 f870 	bl	8013fac <__ulp>
 8011ecc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011ed0:	ec53 2b10 	vmov	r2, r3, d0
 8011ed4:	f7ee fb90 	bl	80005f8 <__aeabi_dmul>
 8011ed8:	4652      	mov	r2, sl
 8011eda:	465b      	mov	r3, fp
 8011edc:	f7ee f9d6 	bl	800028c <__adddf3>
 8011ee0:	460b      	mov	r3, r1
 8011ee2:	4952      	ldr	r1, [pc, #328]	; (801202c <_strtod_l+0xb0c>)
 8011ee4:	4a56      	ldr	r2, [pc, #344]	; (8012040 <_strtod_l+0xb20>)
 8011ee6:	4019      	ands	r1, r3
 8011ee8:	4291      	cmp	r1, r2
 8011eea:	4682      	mov	sl, r0
 8011eec:	d95b      	bls.n	8011fa6 <_strtod_l+0xa86>
 8011eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ef0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8011ef4:	4293      	cmp	r3, r2
 8011ef6:	d103      	bne.n	8011f00 <_strtod_l+0x9e0>
 8011ef8:	9b08      	ldr	r3, [sp, #32]
 8011efa:	3301      	adds	r3, #1
 8011efc:	f43f ad2e 	beq.w	801195c <_strtod_l+0x43c>
 8011f00:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8012030 <_strtod_l+0xb10>
 8011f04:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8011f08:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011f0a:	4648      	mov	r0, r9
 8011f0c:	f001 fdb6 	bl	8013a7c <_Bfree>
 8011f10:	9905      	ldr	r1, [sp, #20]
 8011f12:	4648      	mov	r0, r9
 8011f14:	f001 fdb2 	bl	8013a7c <_Bfree>
 8011f18:	4641      	mov	r1, r8
 8011f1a:	4648      	mov	r0, r9
 8011f1c:	f001 fdae 	bl	8013a7c <_Bfree>
 8011f20:	4621      	mov	r1, r4
 8011f22:	4648      	mov	r0, r9
 8011f24:	f001 fdaa 	bl	8013a7c <_Bfree>
 8011f28:	e619      	b.n	8011b5e <_strtod_l+0x63e>
 8011f2a:	f1ba 0f00 	cmp.w	sl, #0
 8011f2e:	d11a      	bne.n	8011f66 <_strtod_l+0xa46>
 8011f30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011f34:	b9eb      	cbnz	r3, 8011f72 <_strtod_l+0xa52>
 8011f36:	2200      	movs	r2, #0
 8011f38:	4b3f      	ldr	r3, [pc, #252]	; (8012038 <_strtod_l+0xb18>)
 8011f3a:	4630      	mov	r0, r6
 8011f3c:	4639      	mov	r1, r7
 8011f3e:	f7ee fdcd 	bl	8000adc <__aeabi_dcmplt>
 8011f42:	b9c8      	cbnz	r0, 8011f78 <_strtod_l+0xa58>
 8011f44:	4630      	mov	r0, r6
 8011f46:	4639      	mov	r1, r7
 8011f48:	2200      	movs	r2, #0
 8011f4a:	4b3e      	ldr	r3, [pc, #248]	; (8012044 <_strtod_l+0xb24>)
 8011f4c:	f7ee fb54 	bl	80005f8 <__aeabi_dmul>
 8011f50:	4606      	mov	r6, r0
 8011f52:	460f      	mov	r7, r1
 8011f54:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8011f58:	9618      	str	r6, [sp, #96]	; 0x60
 8011f5a:	9319      	str	r3, [sp, #100]	; 0x64
 8011f5c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8011f60:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8011f64:	e79c      	b.n	8011ea0 <_strtod_l+0x980>
 8011f66:	f1ba 0f01 	cmp.w	sl, #1
 8011f6a:	d102      	bne.n	8011f72 <_strtod_l+0xa52>
 8011f6c:	2d00      	cmp	r5, #0
 8011f6e:	f43f ad8e 	beq.w	8011a8e <_strtod_l+0x56e>
 8011f72:	2200      	movs	r2, #0
 8011f74:	4b34      	ldr	r3, [pc, #208]	; (8012048 <_strtod_l+0xb28>)
 8011f76:	e78f      	b.n	8011e98 <_strtod_l+0x978>
 8011f78:	2600      	movs	r6, #0
 8011f7a:	4f32      	ldr	r7, [pc, #200]	; (8012044 <_strtod_l+0xb24>)
 8011f7c:	e7ea      	b.n	8011f54 <_strtod_l+0xa34>
 8011f7e:	4b31      	ldr	r3, [pc, #196]	; (8012044 <_strtod_l+0xb24>)
 8011f80:	4630      	mov	r0, r6
 8011f82:	4639      	mov	r1, r7
 8011f84:	2200      	movs	r2, #0
 8011f86:	f7ee fb37 	bl	80005f8 <__aeabi_dmul>
 8011f8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011f8c:	4606      	mov	r6, r0
 8011f8e:	460f      	mov	r7, r1
 8011f90:	b933      	cbnz	r3, 8011fa0 <_strtod_l+0xa80>
 8011f92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011f96:	9010      	str	r0, [sp, #64]	; 0x40
 8011f98:	9311      	str	r3, [sp, #68]	; 0x44
 8011f9a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011f9e:	e7df      	b.n	8011f60 <_strtod_l+0xa40>
 8011fa0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8011fa4:	e7f9      	b.n	8011f9a <_strtod_l+0xa7a>
 8011fa6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8011faa:	9b04      	ldr	r3, [sp, #16]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d1ab      	bne.n	8011f08 <_strtod_l+0x9e8>
 8011fb0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011fb4:	0d1b      	lsrs	r3, r3, #20
 8011fb6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011fb8:	051b      	lsls	r3, r3, #20
 8011fba:	429a      	cmp	r2, r3
 8011fbc:	465d      	mov	r5, fp
 8011fbe:	d1a3      	bne.n	8011f08 <_strtod_l+0x9e8>
 8011fc0:	4639      	mov	r1, r7
 8011fc2:	4630      	mov	r0, r6
 8011fc4:	f7ee fdc8 	bl	8000b58 <__aeabi_d2iz>
 8011fc8:	f7ee faac 	bl	8000524 <__aeabi_i2d>
 8011fcc:	460b      	mov	r3, r1
 8011fce:	4602      	mov	r2, r0
 8011fd0:	4639      	mov	r1, r7
 8011fd2:	4630      	mov	r0, r6
 8011fd4:	f7ee f958 	bl	8000288 <__aeabi_dsub>
 8011fd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011fda:	4606      	mov	r6, r0
 8011fdc:	460f      	mov	r7, r1
 8011fde:	b933      	cbnz	r3, 8011fee <_strtod_l+0xace>
 8011fe0:	f1ba 0f00 	cmp.w	sl, #0
 8011fe4:	d103      	bne.n	8011fee <_strtod_l+0xace>
 8011fe6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8011fea:	2d00      	cmp	r5, #0
 8011fec:	d06d      	beq.n	80120ca <_strtod_l+0xbaa>
 8011fee:	a30a      	add	r3, pc, #40	; (adr r3, 8012018 <_strtod_l+0xaf8>)
 8011ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ff4:	4630      	mov	r0, r6
 8011ff6:	4639      	mov	r1, r7
 8011ff8:	f7ee fd70 	bl	8000adc <__aeabi_dcmplt>
 8011ffc:	2800      	cmp	r0, #0
 8011ffe:	f47f acb8 	bne.w	8011972 <_strtod_l+0x452>
 8012002:	a307      	add	r3, pc, #28	; (adr r3, 8012020 <_strtod_l+0xb00>)
 8012004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012008:	4630      	mov	r0, r6
 801200a:	4639      	mov	r1, r7
 801200c:	f7ee fd84 	bl	8000b18 <__aeabi_dcmpgt>
 8012010:	2800      	cmp	r0, #0
 8012012:	f43f af79 	beq.w	8011f08 <_strtod_l+0x9e8>
 8012016:	e4ac      	b.n	8011972 <_strtod_l+0x452>
 8012018:	94a03595 	.word	0x94a03595
 801201c:	3fdfffff 	.word	0x3fdfffff
 8012020:	35afe535 	.word	0x35afe535
 8012024:	3fe00000 	.word	0x3fe00000
 8012028:	000fffff 	.word	0x000fffff
 801202c:	7ff00000 	.word	0x7ff00000
 8012030:	7fefffff 	.word	0x7fefffff
 8012034:	39500000 	.word	0x39500000
 8012038:	3ff00000 	.word	0x3ff00000
 801203c:	7fe00000 	.word	0x7fe00000
 8012040:	7c9fffff 	.word	0x7c9fffff
 8012044:	3fe00000 	.word	0x3fe00000
 8012048:	bff00000 	.word	0xbff00000
 801204c:	9b04      	ldr	r3, [sp, #16]
 801204e:	b333      	cbz	r3, 801209e <_strtod_l+0xb7e>
 8012050:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012052:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012056:	d822      	bhi.n	801209e <_strtod_l+0xb7e>
 8012058:	a327      	add	r3, pc, #156	; (adr r3, 80120f8 <_strtod_l+0xbd8>)
 801205a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801205e:	4630      	mov	r0, r6
 8012060:	4639      	mov	r1, r7
 8012062:	f7ee fd45 	bl	8000af0 <__aeabi_dcmple>
 8012066:	b1a0      	cbz	r0, 8012092 <_strtod_l+0xb72>
 8012068:	4639      	mov	r1, r7
 801206a:	4630      	mov	r0, r6
 801206c:	f7ee fd9c 	bl	8000ba8 <__aeabi_d2uiz>
 8012070:	2800      	cmp	r0, #0
 8012072:	bf08      	it	eq
 8012074:	2001      	moveq	r0, #1
 8012076:	f7ee fa45 	bl	8000504 <__aeabi_ui2d>
 801207a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801207c:	4606      	mov	r6, r0
 801207e:	460f      	mov	r7, r1
 8012080:	bb03      	cbnz	r3, 80120c4 <_strtod_l+0xba4>
 8012082:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012086:	9012      	str	r0, [sp, #72]	; 0x48
 8012088:	9313      	str	r3, [sp, #76]	; 0x4c
 801208a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801208e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8012092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012094:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012096:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801209a:	1a9b      	subs	r3, r3, r2
 801209c:	930b      	str	r3, [sp, #44]	; 0x2c
 801209e:	ed9d 0b08 	vldr	d0, [sp, #32]
 80120a2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80120a6:	f001 ff81 	bl	8013fac <__ulp>
 80120aa:	4650      	mov	r0, sl
 80120ac:	ec53 2b10 	vmov	r2, r3, d0
 80120b0:	4659      	mov	r1, fp
 80120b2:	f7ee faa1 	bl	80005f8 <__aeabi_dmul>
 80120b6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80120ba:	f7ee f8e7 	bl	800028c <__adddf3>
 80120be:	4682      	mov	sl, r0
 80120c0:	468b      	mov	fp, r1
 80120c2:	e772      	b.n	8011faa <_strtod_l+0xa8a>
 80120c4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80120c8:	e7df      	b.n	801208a <_strtod_l+0xb6a>
 80120ca:	a30d      	add	r3, pc, #52	; (adr r3, 8012100 <_strtod_l+0xbe0>)
 80120cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120d0:	f7ee fd04 	bl	8000adc <__aeabi_dcmplt>
 80120d4:	e79c      	b.n	8012010 <_strtod_l+0xaf0>
 80120d6:	2300      	movs	r3, #0
 80120d8:	930d      	str	r3, [sp, #52]	; 0x34
 80120da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80120dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80120de:	6013      	str	r3, [r2, #0]
 80120e0:	f7ff ba61 	b.w	80115a6 <_strtod_l+0x86>
 80120e4:	2b65      	cmp	r3, #101	; 0x65
 80120e6:	f04f 0200 	mov.w	r2, #0
 80120ea:	f43f ab4e 	beq.w	801178a <_strtod_l+0x26a>
 80120ee:	2101      	movs	r1, #1
 80120f0:	4614      	mov	r4, r2
 80120f2:	9104      	str	r1, [sp, #16]
 80120f4:	f7ff bacb 	b.w	801168e <_strtod_l+0x16e>
 80120f8:	ffc00000 	.word	0xffc00000
 80120fc:	41dfffff 	.word	0x41dfffff
 8012100:	94a03595 	.word	0x94a03595
 8012104:	3fcfffff 	.word	0x3fcfffff

08012108 <strtof>:
 8012108:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 801210c:	4e24      	ldr	r6, [pc, #144]	; (80121a0 <strtof+0x98>)
 801210e:	4a25      	ldr	r2, [pc, #148]	; (80121a4 <strtof+0x9c>)
 8012110:	6834      	ldr	r4, [r6, #0]
 8012112:	6a23      	ldr	r3, [r4, #32]
 8012114:	ed2d 8b02 	vpush	{d8}
 8012118:	2b00      	cmp	r3, #0
 801211a:	bf08      	it	eq
 801211c:	4613      	moveq	r3, r2
 801211e:	460a      	mov	r2, r1
 8012120:	4601      	mov	r1, r0
 8012122:	4620      	mov	r0, r4
 8012124:	f7ff f9fc 	bl	8011520 <_strtod_l>
 8012128:	ec55 4b10 	vmov	r4, r5, d0
 801212c:	ee10 2a10 	vmov	r2, s0
 8012130:	462b      	mov	r3, r5
 8012132:	ee10 0a10 	vmov	r0, s0
 8012136:	4629      	mov	r1, r5
 8012138:	f7ee fcf8 	bl	8000b2c <__aeabi_dcmpun>
 801213c:	b130      	cbz	r0, 801214c <strtof+0x44>
 801213e:	ecbd 8b02 	vpop	{d8}
 8012142:	2000      	movs	r0, #0
 8012144:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
 8012148:	f002 bbbc 	b.w	80148c4 <nanf>
 801214c:	4620      	mov	r0, r4
 801214e:	4629      	mov	r1, r5
 8012150:	f7ee fd4a 	bl	8000be8 <__aeabi_d2f>
 8012154:	ee08 0a10 	vmov	s16, r0
 8012158:	eddf 7a13 	vldr	s15, [pc, #76]	; 80121a8 <strtof+0xa0>
 801215c:	eeb0 7ac8 	vabs.f32	s14, s16
 8012160:	eeb4 7a67 	vcmp.f32	s14, s15
 8012164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012168:	dd14      	ble.n	8012194 <strtof+0x8c>
 801216a:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
 801216e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012172:	4b0e      	ldr	r3, [pc, #56]	; (80121ac <strtof+0xa4>)
 8012174:	4620      	mov	r0, r4
 8012176:	4649      	mov	r1, r9
 8012178:	f7ee fcd8 	bl	8000b2c <__aeabi_dcmpun>
 801217c:	b938      	cbnz	r0, 801218e <strtof+0x86>
 801217e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012182:	4b0a      	ldr	r3, [pc, #40]	; (80121ac <strtof+0xa4>)
 8012184:	4620      	mov	r0, r4
 8012186:	4649      	mov	r1, r9
 8012188:	f7ee fcb2 	bl	8000af0 <__aeabi_dcmple>
 801218c:	b110      	cbz	r0, 8012194 <strtof+0x8c>
 801218e:	6833      	ldr	r3, [r6, #0]
 8012190:	2222      	movs	r2, #34	; 0x22
 8012192:	601a      	str	r2, [r3, #0]
 8012194:	eeb0 0a48 	vmov.f32	s0, s16
 8012198:	ecbd 8b02 	vpop	{d8}
 801219c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80121a0:	20000178 	.word	0x20000178
 80121a4:	200001dc 	.word	0x200001dc
 80121a8:	7f7fffff 	.word	0x7f7fffff
 80121ac:	7fefffff 	.word	0x7fefffff

080121b0 <__swbuf_r>:
 80121b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121b2:	460e      	mov	r6, r1
 80121b4:	4614      	mov	r4, r2
 80121b6:	4605      	mov	r5, r0
 80121b8:	b118      	cbz	r0, 80121c2 <__swbuf_r+0x12>
 80121ba:	6983      	ldr	r3, [r0, #24]
 80121bc:	b90b      	cbnz	r3, 80121c2 <__swbuf_r+0x12>
 80121be:	f000 ffeb 	bl	8013198 <__sinit>
 80121c2:	4b21      	ldr	r3, [pc, #132]	; (8012248 <__swbuf_r+0x98>)
 80121c4:	429c      	cmp	r4, r3
 80121c6:	d12a      	bne.n	801221e <__swbuf_r+0x6e>
 80121c8:	686c      	ldr	r4, [r5, #4]
 80121ca:	69a3      	ldr	r3, [r4, #24]
 80121cc:	60a3      	str	r3, [r4, #8]
 80121ce:	89a3      	ldrh	r3, [r4, #12]
 80121d0:	071a      	lsls	r2, r3, #28
 80121d2:	d52e      	bpl.n	8012232 <__swbuf_r+0x82>
 80121d4:	6923      	ldr	r3, [r4, #16]
 80121d6:	b363      	cbz	r3, 8012232 <__swbuf_r+0x82>
 80121d8:	6923      	ldr	r3, [r4, #16]
 80121da:	6820      	ldr	r0, [r4, #0]
 80121dc:	1ac0      	subs	r0, r0, r3
 80121de:	6963      	ldr	r3, [r4, #20]
 80121e0:	b2f6      	uxtb	r6, r6
 80121e2:	4283      	cmp	r3, r0
 80121e4:	4637      	mov	r7, r6
 80121e6:	dc04      	bgt.n	80121f2 <__swbuf_r+0x42>
 80121e8:	4621      	mov	r1, r4
 80121ea:	4628      	mov	r0, r5
 80121ec:	f000 ff6a 	bl	80130c4 <_fflush_r>
 80121f0:	bb28      	cbnz	r0, 801223e <__swbuf_r+0x8e>
 80121f2:	68a3      	ldr	r3, [r4, #8]
 80121f4:	3b01      	subs	r3, #1
 80121f6:	60a3      	str	r3, [r4, #8]
 80121f8:	6823      	ldr	r3, [r4, #0]
 80121fa:	1c5a      	adds	r2, r3, #1
 80121fc:	6022      	str	r2, [r4, #0]
 80121fe:	701e      	strb	r6, [r3, #0]
 8012200:	6963      	ldr	r3, [r4, #20]
 8012202:	3001      	adds	r0, #1
 8012204:	4283      	cmp	r3, r0
 8012206:	d004      	beq.n	8012212 <__swbuf_r+0x62>
 8012208:	89a3      	ldrh	r3, [r4, #12]
 801220a:	07db      	lsls	r3, r3, #31
 801220c:	d519      	bpl.n	8012242 <__swbuf_r+0x92>
 801220e:	2e0a      	cmp	r6, #10
 8012210:	d117      	bne.n	8012242 <__swbuf_r+0x92>
 8012212:	4621      	mov	r1, r4
 8012214:	4628      	mov	r0, r5
 8012216:	f000 ff55 	bl	80130c4 <_fflush_r>
 801221a:	b190      	cbz	r0, 8012242 <__swbuf_r+0x92>
 801221c:	e00f      	b.n	801223e <__swbuf_r+0x8e>
 801221e:	4b0b      	ldr	r3, [pc, #44]	; (801224c <__swbuf_r+0x9c>)
 8012220:	429c      	cmp	r4, r3
 8012222:	d101      	bne.n	8012228 <__swbuf_r+0x78>
 8012224:	68ac      	ldr	r4, [r5, #8]
 8012226:	e7d0      	b.n	80121ca <__swbuf_r+0x1a>
 8012228:	4b09      	ldr	r3, [pc, #36]	; (8012250 <__swbuf_r+0xa0>)
 801222a:	429c      	cmp	r4, r3
 801222c:	bf08      	it	eq
 801222e:	68ec      	ldreq	r4, [r5, #12]
 8012230:	e7cb      	b.n	80121ca <__swbuf_r+0x1a>
 8012232:	4621      	mov	r1, r4
 8012234:	4628      	mov	r0, r5
 8012236:	f000 f80d 	bl	8012254 <__swsetup_r>
 801223a:	2800      	cmp	r0, #0
 801223c:	d0cc      	beq.n	80121d8 <__swbuf_r+0x28>
 801223e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012242:	4638      	mov	r0, r7
 8012244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012246:	bf00      	nop
 8012248:	08016cc8 	.word	0x08016cc8
 801224c:	08016ce8 	.word	0x08016ce8
 8012250:	08016ca8 	.word	0x08016ca8

08012254 <__swsetup_r>:
 8012254:	4b32      	ldr	r3, [pc, #200]	; (8012320 <__swsetup_r+0xcc>)
 8012256:	b570      	push	{r4, r5, r6, lr}
 8012258:	681d      	ldr	r5, [r3, #0]
 801225a:	4606      	mov	r6, r0
 801225c:	460c      	mov	r4, r1
 801225e:	b125      	cbz	r5, 801226a <__swsetup_r+0x16>
 8012260:	69ab      	ldr	r3, [r5, #24]
 8012262:	b913      	cbnz	r3, 801226a <__swsetup_r+0x16>
 8012264:	4628      	mov	r0, r5
 8012266:	f000 ff97 	bl	8013198 <__sinit>
 801226a:	4b2e      	ldr	r3, [pc, #184]	; (8012324 <__swsetup_r+0xd0>)
 801226c:	429c      	cmp	r4, r3
 801226e:	d10f      	bne.n	8012290 <__swsetup_r+0x3c>
 8012270:	686c      	ldr	r4, [r5, #4]
 8012272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012276:	b29a      	uxth	r2, r3
 8012278:	0715      	lsls	r5, r2, #28
 801227a:	d42c      	bmi.n	80122d6 <__swsetup_r+0x82>
 801227c:	06d0      	lsls	r0, r2, #27
 801227e:	d411      	bmi.n	80122a4 <__swsetup_r+0x50>
 8012280:	2209      	movs	r2, #9
 8012282:	6032      	str	r2, [r6, #0]
 8012284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012288:	81a3      	strh	r3, [r4, #12]
 801228a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801228e:	e03e      	b.n	801230e <__swsetup_r+0xba>
 8012290:	4b25      	ldr	r3, [pc, #148]	; (8012328 <__swsetup_r+0xd4>)
 8012292:	429c      	cmp	r4, r3
 8012294:	d101      	bne.n	801229a <__swsetup_r+0x46>
 8012296:	68ac      	ldr	r4, [r5, #8]
 8012298:	e7eb      	b.n	8012272 <__swsetup_r+0x1e>
 801229a:	4b24      	ldr	r3, [pc, #144]	; (801232c <__swsetup_r+0xd8>)
 801229c:	429c      	cmp	r4, r3
 801229e:	bf08      	it	eq
 80122a0:	68ec      	ldreq	r4, [r5, #12]
 80122a2:	e7e6      	b.n	8012272 <__swsetup_r+0x1e>
 80122a4:	0751      	lsls	r1, r2, #29
 80122a6:	d512      	bpl.n	80122ce <__swsetup_r+0x7a>
 80122a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80122aa:	b141      	cbz	r1, 80122be <__swsetup_r+0x6a>
 80122ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80122b0:	4299      	cmp	r1, r3
 80122b2:	d002      	beq.n	80122ba <__swsetup_r+0x66>
 80122b4:	4630      	mov	r0, r6
 80122b6:	f001 ffbb 	bl	8014230 <_free_r>
 80122ba:	2300      	movs	r3, #0
 80122bc:	6363      	str	r3, [r4, #52]	; 0x34
 80122be:	89a3      	ldrh	r3, [r4, #12]
 80122c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80122c4:	81a3      	strh	r3, [r4, #12]
 80122c6:	2300      	movs	r3, #0
 80122c8:	6063      	str	r3, [r4, #4]
 80122ca:	6923      	ldr	r3, [r4, #16]
 80122cc:	6023      	str	r3, [r4, #0]
 80122ce:	89a3      	ldrh	r3, [r4, #12]
 80122d0:	f043 0308 	orr.w	r3, r3, #8
 80122d4:	81a3      	strh	r3, [r4, #12]
 80122d6:	6923      	ldr	r3, [r4, #16]
 80122d8:	b94b      	cbnz	r3, 80122ee <__swsetup_r+0x9a>
 80122da:	89a3      	ldrh	r3, [r4, #12]
 80122dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80122e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80122e4:	d003      	beq.n	80122ee <__swsetup_r+0x9a>
 80122e6:	4621      	mov	r1, r4
 80122e8:	4630      	mov	r0, r6
 80122ea:	f001 fb39 	bl	8013960 <__smakebuf_r>
 80122ee:	89a2      	ldrh	r2, [r4, #12]
 80122f0:	f012 0301 	ands.w	r3, r2, #1
 80122f4:	d00c      	beq.n	8012310 <__swsetup_r+0xbc>
 80122f6:	2300      	movs	r3, #0
 80122f8:	60a3      	str	r3, [r4, #8]
 80122fa:	6963      	ldr	r3, [r4, #20]
 80122fc:	425b      	negs	r3, r3
 80122fe:	61a3      	str	r3, [r4, #24]
 8012300:	6923      	ldr	r3, [r4, #16]
 8012302:	b953      	cbnz	r3, 801231a <__swsetup_r+0xc6>
 8012304:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012308:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801230c:	d1ba      	bne.n	8012284 <__swsetup_r+0x30>
 801230e:	bd70      	pop	{r4, r5, r6, pc}
 8012310:	0792      	lsls	r2, r2, #30
 8012312:	bf58      	it	pl
 8012314:	6963      	ldrpl	r3, [r4, #20]
 8012316:	60a3      	str	r3, [r4, #8]
 8012318:	e7f2      	b.n	8012300 <__swsetup_r+0xac>
 801231a:	2000      	movs	r0, #0
 801231c:	e7f7      	b.n	801230e <__swsetup_r+0xba>
 801231e:	bf00      	nop
 8012320:	20000178 	.word	0x20000178
 8012324:	08016cc8 	.word	0x08016cc8
 8012328:	08016ce8 	.word	0x08016ce8
 801232c:	08016ca8 	.word	0x08016ca8

08012330 <quorem>:
 8012330:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012334:	6903      	ldr	r3, [r0, #16]
 8012336:	690c      	ldr	r4, [r1, #16]
 8012338:	42a3      	cmp	r3, r4
 801233a:	4680      	mov	r8, r0
 801233c:	f2c0 8082 	blt.w	8012444 <quorem+0x114>
 8012340:	3c01      	subs	r4, #1
 8012342:	f101 0714 	add.w	r7, r1, #20
 8012346:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801234a:	f100 0614 	add.w	r6, r0, #20
 801234e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8012352:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8012356:	eb06 030c 	add.w	r3, r6, ip
 801235a:	3501      	adds	r5, #1
 801235c:	eb07 090c 	add.w	r9, r7, ip
 8012360:	9301      	str	r3, [sp, #4]
 8012362:	fbb0 f5f5 	udiv	r5, r0, r5
 8012366:	b395      	cbz	r5, 80123ce <quorem+0x9e>
 8012368:	f04f 0a00 	mov.w	sl, #0
 801236c:	4638      	mov	r0, r7
 801236e:	46b6      	mov	lr, r6
 8012370:	46d3      	mov	fp, sl
 8012372:	f850 2b04 	ldr.w	r2, [r0], #4
 8012376:	b293      	uxth	r3, r2
 8012378:	fb05 a303 	mla	r3, r5, r3, sl
 801237c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012380:	b29b      	uxth	r3, r3
 8012382:	ebab 0303 	sub.w	r3, fp, r3
 8012386:	0c12      	lsrs	r2, r2, #16
 8012388:	f8de b000 	ldr.w	fp, [lr]
 801238c:	fb05 a202 	mla	r2, r5, r2, sl
 8012390:	fa13 f38b 	uxtah	r3, r3, fp
 8012394:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8012398:	fa1f fb82 	uxth.w	fp, r2
 801239c:	f8de 2000 	ldr.w	r2, [lr]
 80123a0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80123a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80123a8:	b29b      	uxth	r3, r3
 80123aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80123ae:	4581      	cmp	r9, r0
 80123b0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80123b4:	f84e 3b04 	str.w	r3, [lr], #4
 80123b8:	d2db      	bcs.n	8012372 <quorem+0x42>
 80123ba:	f856 300c 	ldr.w	r3, [r6, ip]
 80123be:	b933      	cbnz	r3, 80123ce <quorem+0x9e>
 80123c0:	9b01      	ldr	r3, [sp, #4]
 80123c2:	3b04      	subs	r3, #4
 80123c4:	429e      	cmp	r6, r3
 80123c6:	461a      	mov	r2, r3
 80123c8:	d330      	bcc.n	801242c <quorem+0xfc>
 80123ca:	f8c8 4010 	str.w	r4, [r8, #16]
 80123ce:	4640      	mov	r0, r8
 80123d0:	f001 fd74 	bl	8013ebc <__mcmp>
 80123d4:	2800      	cmp	r0, #0
 80123d6:	db25      	blt.n	8012424 <quorem+0xf4>
 80123d8:	3501      	adds	r5, #1
 80123da:	4630      	mov	r0, r6
 80123dc:	f04f 0c00 	mov.w	ip, #0
 80123e0:	f857 2b04 	ldr.w	r2, [r7], #4
 80123e4:	f8d0 e000 	ldr.w	lr, [r0]
 80123e8:	b293      	uxth	r3, r2
 80123ea:	ebac 0303 	sub.w	r3, ip, r3
 80123ee:	0c12      	lsrs	r2, r2, #16
 80123f0:	fa13 f38e 	uxtah	r3, r3, lr
 80123f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80123f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80123fc:	b29b      	uxth	r3, r3
 80123fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012402:	45b9      	cmp	r9, r7
 8012404:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012408:	f840 3b04 	str.w	r3, [r0], #4
 801240c:	d2e8      	bcs.n	80123e0 <quorem+0xb0>
 801240e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8012412:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8012416:	b92a      	cbnz	r2, 8012424 <quorem+0xf4>
 8012418:	3b04      	subs	r3, #4
 801241a:	429e      	cmp	r6, r3
 801241c:	461a      	mov	r2, r3
 801241e:	d30b      	bcc.n	8012438 <quorem+0x108>
 8012420:	f8c8 4010 	str.w	r4, [r8, #16]
 8012424:	4628      	mov	r0, r5
 8012426:	b003      	add	sp, #12
 8012428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801242c:	6812      	ldr	r2, [r2, #0]
 801242e:	3b04      	subs	r3, #4
 8012430:	2a00      	cmp	r2, #0
 8012432:	d1ca      	bne.n	80123ca <quorem+0x9a>
 8012434:	3c01      	subs	r4, #1
 8012436:	e7c5      	b.n	80123c4 <quorem+0x94>
 8012438:	6812      	ldr	r2, [r2, #0]
 801243a:	3b04      	subs	r3, #4
 801243c:	2a00      	cmp	r2, #0
 801243e:	d1ef      	bne.n	8012420 <quorem+0xf0>
 8012440:	3c01      	subs	r4, #1
 8012442:	e7ea      	b.n	801241a <quorem+0xea>
 8012444:	2000      	movs	r0, #0
 8012446:	e7ee      	b.n	8012426 <quorem+0xf6>

08012448 <_dtoa_r>:
 8012448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801244c:	ec57 6b10 	vmov	r6, r7, d0
 8012450:	b097      	sub	sp, #92	; 0x5c
 8012452:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012454:	9106      	str	r1, [sp, #24]
 8012456:	4604      	mov	r4, r0
 8012458:	920b      	str	r2, [sp, #44]	; 0x2c
 801245a:	9312      	str	r3, [sp, #72]	; 0x48
 801245c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012460:	e9cd 6700 	strd	r6, r7, [sp]
 8012464:	b93d      	cbnz	r5, 8012476 <_dtoa_r+0x2e>
 8012466:	2010      	movs	r0, #16
 8012468:	f001 faba 	bl	80139e0 <malloc>
 801246c:	6260      	str	r0, [r4, #36]	; 0x24
 801246e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012472:	6005      	str	r5, [r0, #0]
 8012474:	60c5      	str	r5, [r0, #12]
 8012476:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012478:	6819      	ldr	r1, [r3, #0]
 801247a:	b151      	cbz	r1, 8012492 <_dtoa_r+0x4a>
 801247c:	685a      	ldr	r2, [r3, #4]
 801247e:	604a      	str	r2, [r1, #4]
 8012480:	2301      	movs	r3, #1
 8012482:	4093      	lsls	r3, r2
 8012484:	608b      	str	r3, [r1, #8]
 8012486:	4620      	mov	r0, r4
 8012488:	f001 faf8 	bl	8013a7c <_Bfree>
 801248c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801248e:	2200      	movs	r2, #0
 8012490:	601a      	str	r2, [r3, #0]
 8012492:	1e3b      	subs	r3, r7, #0
 8012494:	bfbb      	ittet	lt
 8012496:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801249a:	9301      	strlt	r3, [sp, #4]
 801249c:	2300      	movge	r3, #0
 801249e:	2201      	movlt	r2, #1
 80124a0:	bfac      	ite	ge
 80124a2:	f8c8 3000 	strge.w	r3, [r8]
 80124a6:	f8c8 2000 	strlt.w	r2, [r8]
 80124aa:	4baf      	ldr	r3, [pc, #700]	; (8012768 <_dtoa_r+0x320>)
 80124ac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80124b0:	ea33 0308 	bics.w	r3, r3, r8
 80124b4:	d114      	bne.n	80124e0 <_dtoa_r+0x98>
 80124b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80124b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80124bc:	6013      	str	r3, [r2, #0]
 80124be:	9b00      	ldr	r3, [sp, #0]
 80124c0:	b923      	cbnz	r3, 80124cc <_dtoa_r+0x84>
 80124c2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80124c6:	2800      	cmp	r0, #0
 80124c8:	f000 8542 	beq.w	8012f50 <_dtoa_r+0xb08>
 80124cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80124ce:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801277c <_dtoa_r+0x334>
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	f000 8544 	beq.w	8012f60 <_dtoa_r+0xb18>
 80124d8:	f10b 0303 	add.w	r3, fp, #3
 80124dc:	f000 bd3e 	b.w	8012f5c <_dtoa_r+0xb14>
 80124e0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80124e4:	2200      	movs	r2, #0
 80124e6:	2300      	movs	r3, #0
 80124e8:	4630      	mov	r0, r6
 80124ea:	4639      	mov	r1, r7
 80124ec:	f7ee faec 	bl	8000ac8 <__aeabi_dcmpeq>
 80124f0:	4681      	mov	r9, r0
 80124f2:	b168      	cbz	r0, 8012510 <_dtoa_r+0xc8>
 80124f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80124f6:	2301      	movs	r3, #1
 80124f8:	6013      	str	r3, [r2, #0]
 80124fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	f000 8524 	beq.w	8012f4a <_dtoa_r+0xb02>
 8012502:	4b9a      	ldr	r3, [pc, #616]	; (801276c <_dtoa_r+0x324>)
 8012504:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012506:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 801250a:	6013      	str	r3, [r2, #0]
 801250c:	f000 bd28 	b.w	8012f60 <_dtoa_r+0xb18>
 8012510:	aa14      	add	r2, sp, #80	; 0x50
 8012512:	a915      	add	r1, sp, #84	; 0x54
 8012514:	ec47 6b10 	vmov	d0, r6, r7
 8012518:	4620      	mov	r0, r4
 801251a:	f001 fdbd 	bl	8014098 <__d2b>
 801251e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8012522:	9004      	str	r0, [sp, #16]
 8012524:	2d00      	cmp	r5, #0
 8012526:	d07c      	beq.n	8012622 <_dtoa_r+0x1da>
 8012528:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801252c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8012530:	46b2      	mov	sl, r6
 8012532:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8012536:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801253a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801253e:	2200      	movs	r2, #0
 8012540:	4b8b      	ldr	r3, [pc, #556]	; (8012770 <_dtoa_r+0x328>)
 8012542:	4650      	mov	r0, sl
 8012544:	4659      	mov	r1, fp
 8012546:	f7ed fe9f 	bl	8000288 <__aeabi_dsub>
 801254a:	a381      	add	r3, pc, #516	; (adr r3, 8012750 <_dtoa_r+0x308>)
 801254c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012550:	f7ee f852 	bl	80005f8 <__aeabi_dmul>
 8012554:	a380      	add	r3, pc, #512	; (adr r3, 8012758 <_dtoa_r+0x310>)
 8012556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801255a:	f7ed fe97 	bl	800028c <__adddf3>
 801255e:	4606      	mov	r6, r0
 8012560:	4628      	mov	r0, r5
 8012562:	460f      	mov	r7, r1
 8012564:	f7ed ffde 	bl	8000524 <__aeabi_i2d>
 8012568:	a37d      	add	r3, pc, #500	; (adr r3, 8012760 <_dtoa_r+0x318>)
 801256a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801256e:	f7ee f843 	bl	80005f8 <__aeabi_dmul>
 8012572:	4602      	mov	r2, r0
 8012574:	460b      	mov	r3, r1
 8012576:	4630      	mov	r0, r6
 8012578:	4639      	mov	r1, r7
 801257a:	f7ed fe87 	bl	800028c <__adddf3>
 801257e:	4606      	mov	r6, r0
 8012580:	460f      	mov	r7, r1
 8012582:	f7ee fae9 	bl	8000b58 <__aeabi_d2iz>
 8012586:	2200      	movs	r2, #0
 8012588:	4682      	mov	sl, r0
 801258a:	2300      	movs	r3, #0
 801258c:	4630      	mov	r0, r6
 801258e:	4639      	mov	r1, r7
 8012590:	f7ee faa4 	bl	8000adc <__aeabi_dcmplt>
 8012594:	b148      	cbz	r0, 80125aa <_dtoa_r+0x162>
 8012596:	4650      	mov	r0, sl
 8012598:	f7ed ffc4 	bl	8000524 <__aeabi_i2d>
 801259c:	4632      	mov	r2, r6
 801259e:	463b      	mov	r3, r7
 80125a0:	f7ee fa92 	bl	8000ac8 <__aeabi_dcmpeq>
 80125a4:	b908      	cbnz	r0, 80125aa <_dtoa_r+0x162>
 80125a6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80125aa:	f1ba 0f16 	cmp.w	sl, #22
 80125ae:	d859      	bhi.n	8012664 <_dtoa_r+0x21c>
 80125b0:	4970      	ldr	r1, [pc, #448]	; (8012774 <_dtoa_r+0x32c>)
 80125b2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80125b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80125ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80125be:	f7ee faab 	bl	8000b18 <__aeabi_dcmpgt>
 80125c2:	2800      	cmp	r0, #0
 80125c4:	d050      	beq.n	8012668 <_dtoa_r+0x220>
 80125c6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80125ca:	2300      	movs	r3, #0
 80125cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80125ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80125d0:	1b5d      	subs	r5, r3, r5
 80125d2:	f1b5 0801 	subs.w	r8, r5, #1
 80125d6:	bf49      	itett	mi
 80125d8:	f1c5 0301 	rsbmi	r3, r5, #1
 80125dc:	2300      	movpl	r3, #0
 80125de:	9305      	strmi	r3, [sp, #20]
 80125e0:	f04f 0800 	movmi.w	r8, #0
 80125e4:	bf58      	it	pl
 80125e6:	9305      	strpl	r3, [sp, #20]
 80125e8:	f1ba 0f00 	cmp.w	sl, #0
 80125ec:	db3e      	blt.n	801266c <_dtoa_r+0x224>
 80125ee:	2300      	movs	r3, #0
 80125f0:	44d0      	add	r8, sl
 80125f2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80125f6:	9307      	str	r3, [sp, #28]
 80125f8:	9b06      	ldr	r3, [sp, #24]
 80125fa:	2b09      	cmp	r3, #9
 80125fc:	f200 8090 	bhi.w	8012720 <_dtoa_r+0x2d8>
 8012600:	2b05      	cmp	r3, #5
 8012602:	bfc4      	itt	gt
 8012604:	3b04      	subgt	r3, #4
 8012606:	9306      	strgt	r3, [sp, #24]
 8012608:	9b06      	ldr	r3, [sp, #24]
 801260a:	f1a3 0302 	sub.w	r3, r3, #2
 801260e:	bfcc      	ite	gt
 8012610:	2500      	movgt	r5, #0
 8012612:	2501      	movle	r5, #1
 8012614:	2b03      	cmp	r3, #3
 8012616:	f200 808f 	bhi.w	8012738 <_dtoa_r+0x2f0>
 801261a:	e8df f003 	tbb	[pc, r3]
 801261e:	7f7d      	.short	0x7f7d
 8012620:	7131      	.short	0x7131
 8012622:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8012626:	441d      	add	r5, r3
 8012628:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801262c:	2820      	cmp	r0, #32
 801262e:	dd13      	ble.n	8012658 <_dtoa_r+0x210>
 8012630:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8012634:	9b00      	ldr	r3, [sp, #0]
 8012636:	fa08 f800 	lsl.w	r8, r8, r0
 801263a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801263e:	fa23 f000 	lsr.w	r0, r3, r0
 8012642:	ea48 0000 	orr.w	r0, r8, r0
 8012646:	f7ed ff5d 	bl	8000504 <__aeabi_ui2d>
 801264a:	2301      	movs	r3, #1
 801264c:	4682      	mov	sl, r0
 801264e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8012652:	3d01      	subs	r5, #1
 8012654:	9313      	str	r3, [sp, #76]	; 0x4c
 8012656:	e772      	b.n	801253e <_dtoa_r+0xf6>
 8012658:	9b00      	ldr	r3, [sp, #0]
 801265a:	f1c0 0020 	rsb	r0, r0, #32
 801265e:	fa03 f000 	lsl.w	r0, r3, r0
 8012662:	e7f0      	b.n	8012646 <_dtoa_r+0x1fe>
 8012664:	2301      	movs	r3, #1
 8012666:	e7b1      	b.n	80125cc <_dtoa_r+0x184>
 8012668:	900f      	str	r0, [sp, #60]	; 0x3c
 801266a:	e7b0      	b.n	80125ce <_dtoa_r+0x186>
 801266c:	9b05      	ldr	r3, [sp, #20]
 801266e:	eba3 030a 	sub.w	r3, r3, sl
 8012672:	9305      	str	r3, [sp, #20]
 8012674:	f1ca 0300 	rsb	r3, sl, #0
 8012678:	9307      	str	r3, [sp, #28]
 801267a:	2300      	movs	r3, #0
 801267c:	930e      	str	r3, [sp, #56]	; 0x38
 801267e:	e7bb      	b.n	80125f8 <_dtoa_r+0x1b0>
 8012680:	2301      	movs	r3, #1
 8012682:	930a      	str	r3, [sp, #40]	; 0x28
 8012684:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012686:	2b00      	cmp	r3, #0
 8012688:	dd59      	ble.n	801273e <_dtoa_r+0x2f6>
 801268a:	9302      	str	r3, [sp, #8]
 801268c:	4699      	mov	r9, r3
 801268e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012690:	2200      	movs	r2, #0
 8012692:	6072      	str	r2, [r6, #4]
 8012694:	2204      	movs	r2, #4
 8012696:	f102 0014 	add.w	r0, r2, #20
 801269a:	4298      	cmp	r0, r3
 801269c:	6871      	ldr	r1, [r6, #4]
 801269e:	d953      	bls.n	8012748 <_dtoa_r+0x300>
 80126a0:	4620      	mov	r0, r4
 80126a2:	f001 f9b7 	bl	8013a14 <_Balloc>
 80126a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80126a8:	6030      	str	r0, [r6, #0]
 80126aa:	f1b9 0f0e 	cmp.w	r9, #14
 80126ae:	f8d3 b000 	ldr.w	fp, [r3]
 80126b2:	f200 80e6 	bhi.w	8012882 <_dtoa_r+0x43a>
 80126b6:	2d00      	cmp	r5, #0
 80126b8:	f000 80e3 	beq.w	8012882 <_dtoa_r+0x43a>
 80126bc:	ed9d 7b00 	vldr	d7, [sp]
 80126c0:	f1ba 0f00 	cmp.w	sl, #0
 80126c4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80126c8:	dd74      	ble.n	80127b4 <_dtoa_r+0x36c>
 80126ca:	4a2a      	ldr	r2, [pc, #168]	; (8012774 <_dtoa_r+0x32c>)
 80126cc:	f00a 030f 	and.w	r3, sl, #15
 80126d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80126d4:	ed93 7b00 	vldr	d7, [r3]
 80126d8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80126dc:	06f0      	lsls	r0, r6, #27
 80126de:	ed8d 7b08 	vstr	d7, [sp, #32]
 80126e2:	d565      	bpl.n	80127b0 <_dtoa_r+0x368>
 80126e4:	4b24      	ldr	r3, [pc, #144]	; (8012778 <_dtoa_r+0x330>)
 80126e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80126ea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80126ee:	f7ee f8ad 	bl	800084c <__aeabi_ddiv>
 80126f2:	e9cd 0100 	strd	r0, r1, [sp]
 80126f6:	f006 060f 	and.w	r6, r6, #15
 80126fa:	2503      	movs	r5, #3
 80126fc:	4f1e      	ldr	r7, [pc, #120]	; (8012778 <_dtoa_r+0x330>)
 80126fe:	e04c      	b.n	801279a <_dtoa_r+0x352>
 8012700:	2301      	movs	r3, #1
 8012702:	930a      	str	r3, [sp, #40]	; 0x28
 8012704:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012706:	4453      	add	r3, sl
 8012708:	f103 0901 	add.w	r9, r3, #1
 801270c:	9302      	str	r3, [sp, #8]
 801270e:	464b      	mov	r3, r9
 8012710:	2b01      	cmp	r3, #1
 8012712:	bfb8      	it	lt
 8012714:	2301      	movlt	r3, #1
 8012716:	e7ba      	b.n	801268e <_dtoa_r+0x246>
 8012718:	2300      	movs	r3, #0
 801271a:	e7b2      	b.n	8012682 <_dtoa_r+0x23a>
 801271c:	2300      	movs	r3, #0
 801271e:	e7f0      	b.n	8012702 <_dtoa_r+0x2ba>
 8012720:	2501      	movs	r5, #1
 8012722:	2300      	movs	r3, #0
 8012724:	9306      	str	r3, [sp, #24]
 8012726:	950a      	str	r5, [sp, #40]	; 0x28
 8012728:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801272c:	9302      	str	r3, [sp, #8]
 801272e:	4699      	mov	r9, r3
 8012730:	2200      	movs	r2, #0
 8012732:	2312      	movs	r3, #18
 8012734:	920b      	str	r2, [sp, #44]	; 0x2c
 8012736:	e7aa      	b.n	801268e <_dtoa_r+0x246>
 8012738:	2301      	movs	r3, #1
 801273a:	930a      	str	r3, [sp, #40]	; 0x28
 801273c:	e7f4      	b.n	8012728 <_dtoa_r+0x2e0>
 801273e:	2301      	movs	r3, #1
 8012740:	9302      	str	r3, [sp, #8]
 8012742:	4699      	mov	r9, r3
 8012744:	461a      	mov	r2, r3
 8012746:	e7f5      	b.n	8012734 <_dtoa_r+0x2ec>
 8012748:	3101      	adds	r1, #1
 801274a:	6071      	str	r1, [r6, #4]
 801274c:	0052      	lsls	r2, r2, #1
 801274e:	e7a2      	b.n	8012696 <_dtoa_r+0x24e>
 8012750:	636f4361 	.word	0x636f4361
 8012754:	3fd287a7 	.word	0x3fd287a7
 8012758:	8b60c8b3 	.word	0x8b60c8b3
 801275c:	3fc68a28 	.word	0x3fc68a28
 8012760:	509f79fb 	.word	0x509f79fb
 8012764:	3fd34413 	.word	0x3fd34413
 8012768:	7ff00000 	.word	0x7ff00000
 801276c:	08016c21 	.word	0x08016c21
 8012770:	3ff80000 	.word	0x3ff80000
 8012774:	08016d40 	.word	0x08016d40
 8012778:	08016d18 	.word	0x08016d18
 801277c:	08016ca1 	.word	0x08016ca1
 8012780:	07f1      	lsls	r1, r6, #31
 8012782:	d508      	bpl.n	8012796 <_dtoa_r+0x34e>
 8012784:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012788:	e9d7 2300 	ldrd	r2, r3, [r7]
 801278c:	f7ed ff34 	bl	80005f8 <__aeabi_dmul>
 8012790:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012794:	3501      	adds	r5, #1
 8012796:	1076      	asrs	r6, r6, #1
 8012798:	3708      	adds	r7, #8
 801279a:	2e00      	cmp	r6, #0
 801279c:	d1f0      	bne.n	8012780 <_dtoa_r+0x338>
 801279e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80127a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80127a6:	f7ee f851 	bl	800084c <__aeabi_ddiv>
 80127aa:	e9cd 0100 	strd	r0, r1, [sp]
 80127ae:	e01a      	b.n	80127e6 <_dtoa_r+0x39e>
 80127b0:	2502      	movs	r5, #2
 80127b2:	e7a3      	b.n	80126fc <_dtoa_r+0x2b4>
 80127b4:	f000 80a0 	beq.w	80128f8 <_dtoa_r+0x4b0>
 80127b8:	f1ca 0600 	rsb	r6, sl, #0
 80127bc:	4b9f      	ldr	r3, [pc, #636]	; (8012a3c <_dtoa_r+0x5f4>)
 80127be:	4fa0      	ldr	r7, [pc, #640]	; (8012a40 <_dtoa_r+0x5f8>)
 80127c0:	f006 020f 	and.w	r2, r6, #15
 80127c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80127c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80127d0:	f7ed ff12 	bl	80005f8 <__aeabi_dmul>
 80127d4:	e9cd 0100 	strd	r0, r1, [sp]
 80127d8:	1136      	asrs	r6, r6, #4
 80127da:	2300      	movs	r3, #0
 80127dc:	2502      	movs	r5, #2
 80127de:	2e00      	cmp	r6, #0
 80127e0:	d17f      	bne.n	80128e2 <_dtoa_r+0x49a>
 80127e2:	2b00      	cmp	r3, #0
 80127e4:	d1e1      	bne.n	80127aa <_dtoa_r+0x362>
 80127e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	f000 8087 	beq.w	80128fc <_dtoa_r+0x4b4>
 80127ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 80127f2:	2200      	movs	r2, #0
 80127f4:	4b93      	ldr	r3, [pc, #588]	; (8012a44 <_dtoa_r+0x5fc>)
 80127f6:	4630      	mov	r0, r6
 80127f8:	4639      	mov	r1, r7
 80127fa:	f7ee f96f 	bl	8000adc <__aeabi_dcmplt>
 80127fe:	2800      	cmp	r0, #0
 8012800:	d07c      	beq.n	80128fc <_dtoa_r+0x4b4>
 8012802:	f1b9 0f00 	cmp.w	r9, #0
 8012806:	d079      	beq.n	80128fc <_dtoa_r+0x4b4>
 8012808:	9b02      	ldr	r3, [sp, #8]
 801280a:	2b00      	cmp	r3, #0
 801280c:	dd35      	ble.n	801287a <_dtoa_r+0x432>
 801280e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8012812:	9308      	str	r3, [sp, #32]
 8012814:	4639      	mov	r1, r7
 8012816:	2200      	movs	r2, #0
 8012818:	4b8b      	ldr	r3, [pc, #556]	; (8012a48 <_dtoa_r+0x600>)
 801281a:	4630      	mov	r0, r6
 801281c:	f7ed feec 	bl	80005f8 <__aeabi_dmul>
 8012820:	e9cd 0100 	strd	r0, r1, [sp]
 8012824:	9f02      	ldr	r7, [sp, #8]
 8012826:	3501      	adds	r5, #1
 8012828:	4628      	mov	r0, r5
 801282a:	f7ed fe7b 	bl	8000524 <__aeabi_i2d>
 801282e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012832:	f7ed fee1 	bl	80005f8 <__aeabi_dmul>
 8012836:	2200      	movs	r2, #0
 8012838:	4b84      	ldr	r3, [pc, #528]	; (8012a4c <_dtoa_r+0x604>)
 801283a:	f7ed fd27 	bl	800028c <__adddf3>
 801283e:	4605      	mov	r5, r0
 8012840:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8012844:	2f00      	cmp	r7, #0
 8012846:	d15d      	bne.n	8012904 <_dtoa_r+0x4bc>
 8012848:	2200      	movs	r2, #0
 801284a:	4b81      	ldr	r3, [pc, #516]	; (8012a50 <_dtoa_r+0x608>)
 801284c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012850:	f7ed fd1a 	bl	8000288 <__aeabi_dsub>
 8012854:	462a      	mov	r2, r5
 8012856:	4633      	mov	r3, r6
 8012858:	e9cd 0100 	strd	r0, r1, [sp]
 801285c:	f7ee f95c 	bl	8000b18 <__aeabi_dcmpgt>
 8012860:	2800      	cmp	r0, #0
 8012862:	f040 8288 	bne.w	8012d76 <_dtoa_r+0x92e>
 8012866:	462a      	mov	r2, r5
 8012868:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801286c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012870:	f7ee f934 	bl	8000adc <__aeabi_dcmplt>
 8012874:	2800      	cmp	r0, #0
 8012876:	f040 827c 	bne.w	8012d72 <_dtoa_r+0x92a>
 801287a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801287e:	e9cd 2300 	strd	r2, r3, [sp]
 8012882:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012884:	2b00      	cmp	r3, #0
 8012886:	f2c0 8150 	blt.w	8012b2a <_dtoa_r+0x6e2>
 801288a:	f1ba 0f0e 	cmp.w	sl, #14
 801288e:	f300 814c 	bgt.w	8012b2a <_dtoa_r+0x6e2>
 8012892:	4b6a      	ldr	r3, [pc, #424]	; (8012a3c <_dtoa_r+0x5f4>)
 8012894:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012898:	ed93 7b00 	vldr	d7, [r3]
 801289c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801289e:	2b00      	cmp	r3, #0
 80128a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80128a4:	f280 80d8 	bge.w	8012a58 <_dtoa_r+0x610>
 80128a8:	f1b9 0f00 	cmp.w	r9, #0
 80128ac:	f300 80d4 	bgt.w	8012a58 <_dtoa_r+0x610>
 80128b0:	f040 825e 	bne.w	8012d70 <_dtoa_r+0x928>
 80128b4:	2200      	movs	r2, #0
 80128b6:	4b66      	ldr	r3, [pc, #408]	; (8012a50 <_dtoa_r+0x608>)
 80128b8:	ec51 0b17 	vmov	r0, r1, d7
 80128bc:	f7ed fe9c 	bl	80005f8 <__aeabi_dmul>
 80128c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80128c4:	f7ee f91e 	bl	8000b04 <__aeabi_dcmpge>
 80128c8:	464f      	mov	r7, r9
 80128ca:	464e      	mov	r6, r9
 80128cc:	2800      	cmp	r0, #0
 80128ce:	f040 8234 	bne.w	8012d3a <_dtoa_r+0x8f2>
 80128d2:	2331      	movs	r3, #49	; 0x31
 80128d4:	f10b 0501 	add.w	r5, fp, #1
 80128d8:	f88b 3000 	strb.w	r3, [fp]
 80128dc:	f10a 0a01 	add.w	sl, sl, #1
 80128e0:	e22f      	b.n	8012d42 <_dtoa_r+0x8fa>
 80128e2:	07f2      	lsls	r2, r6, #31
 80128e4:	d505      	bpl.n	80128f2 <_dtoa_r+0x4aa>
 80128e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80128ea:	f7ed fe85 	bl	80005f8 <__aeabi_dmul>
 80128ee:	3501      	adds	r5, #1
 80128f0:	2301      	movs	r3, #1
 80128f2:	1076      	asrs	r6, r6, #1
 80128f4:	3708      	adds	r7, #8
 80128f6:	e772      	b.n	80127de <_dtoa_r+0x396>
 80128f8:	2502      	movs	r5, #2
 80128fa:	e774      	b.n	80127e6 <_dtoa_r+0x39e>
 80128fc:	f8cd a020 	str.w	sl, [sp, #32]
 8012900:	464f      	mov	r7, r9
 8012902:	e791      	b.n	8012828 <_dtoa_r+0x3e0>
 8012904:	4b4d      	ldr	r3, [pc, #308]	; (8012a3c <_dtoa_r+0x5f4>)
 8012906:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801290a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801290e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012910:	2b00      	cmp	r3, #0
 8012912:	d047      	beq.n	80129a4 <_dtoa_r+0x55c>
 8012914:	4602      	mov	r2, r0
 8012916:	460b      	mov	r3, r1
 8012918:	2000      	movs	r0, #0
 801291a:	494e      	ldr	r1, [pc, #312]	; (8012a54 <_dtoa_r+0x60c>)
 801291c:	f7ed ff96 	bl	800084c <__aeabi_ddiv>
 8012920:	462a      	mov	r2, r5
 8012922:	4633      	mov	r3, r6
 8012924:	f7ed fcb0 	bl	8000288 <__aeabi_dsub>
 8012928:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801292c:	465d      	mov	r5, fp
 801292e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012932:	f7ee f911 	bl	8000b58 <__aeabi_d2iz>
 8012936:	4606      	mov	r6, r0
 8012938:	f7ed fdf4 	bl	8000524 <__aeabi_i2d>
 801293c:	4602      	mov	r2, r0
 801293e:	460b      	mov	r3, r1
 8012940:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012944:	f7ed fca0 	bl	8000288 <__aeabi_dsub>
 8012948:	3630      	adds	r6, #48	; 0x30
 801294a:	f805 6b01 	strb.w	r6, [r5], #1
 801294e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012952:	e9cd 0100 	strd	r0, r1, [sp]
 8012956:	f7ee f8c1 	bl	8000adc <__aeabi_dcmplt>
 801295a:	2800      	cmp	r0, #0
 801295c:	d163      	bne.n	8012a26 <_dtoa_r+0x5de>
 801295e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012962:	2000      	movs	r0, #0
 8012964:	4937      	ldr	r1, [pc, #220]	; (8012a44 <_dtoa_r+0x5fc>)
 8012966:	f7ed fc8f 	bl	8000288 <__aeabi_dsub>
 801296a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801296e:	f7ee f8b5 	bl	8000adc <__aeabi_dcmplt>
 8012972:	2800      	cmp	r0, #0
 8012974:	f040 80b7 	bne.w	8012ae6 <_dtoa_r+0x69e>
 8012978:	eba5 030b 	sub.w	r3, r5, fp
 801297c:	429f      	cmp	r7, r3
 801297e:	f77f af7c 	ble.w	801287a <_dtoa_r+0x432>
 8012982:	2200      	movs	r2, #0
 8012984:	4b30      	ldr	r3, [pc, #192]	; (8012a48 <_dtoa_r+0x600>)
 8012986:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801298a:	f7ed fe35 	bl	80005f8 <__aeabi_dmul>
 801298e:	2200      	movs	r2, #0
 8012990:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012994:	4b2c      	ldr	r3, [pc, #176]	; (8012a48 <_dtoa_r+0x600>)
 8012996:	e9dd 0100 	ldrd	r0, r1, [sp]
 801299a:	f7ed fe2d 	bl	80005f8 <__aeabi_dmul>
 801299e:	e9cd 0100 	strd	r0, r1, [sp]
 80129a2:	e7c4      	b.n	801292e <_dtoa_r+0x4e6>
 80129a4:	462a      	mov	r2, r5
 80129a6:	4633      	mov	r3, r6
 80129a8:	f7ed fe26 	bl	80005f8 <__aeabi_dmul>
 80129ac:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80129b0:	eb0b 0507 	add.w	r5, fp, r7
 80129b4:	465e      	mov	r6, fp
 80129b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80129ba:	f7ee f8cd 	bl	8000b58 <__aeabi_d2iz>
 80129be:	4607      	mov	r7, r0
 80129c0:	f7ed fdb0 	bl	8000524 <__aeabi_i2d>
 80129c4:	3730      	adds	r7, #48	; 0x30
 80129c6:	4602      	mov	r2, r0
 80129c8:	460b      	mov	r3, r1
 80129ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80129ce:	f7ed fc5b 	bl	8000288 <__aeabi_dsub>
 80129d2:	f806 7b01 	strb.w	r7, [r6], #1
 80129d6:	42ae      	cmp	r6, r5
 80129d8:	e9cd 0100 	strd	r0, r1, [sp]
 80129dc:	f04f 0200 	mov.w	r2, #0
 80129e0:	d126      	bne.n	8012a30 <_dtoa_r+0x5e8>
 80129e2:	4b1c      	ldr	r3, [pc, #112]	; (8012a54 <_dtoa_r+0x60c>)
 80129e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80129e8:	f7ed fc50 	bl	800028c <__adddf3>
 80129ec:	4602      	mov	r2, r0
 80129ee:	460b      	mov	r3, r1
 80129f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80129f4:	f7ee f890 	bl	8000b18 <__aeabi_dcmpgt>
 80129f8:	2800      	cmp	r0, #0
 80129fa:	d174      	bne.n	8012ae6 <_dtoa_r+0x69e>
 80129fc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012a00:	2000      	movs	r0, #0
 8012a02:	4914      	ldr	r1, [pc, #80]	; (8012a54 <_dtoa_r+0x60c>)
 8012a04:	f7ed fc40 	bl	8000288 <__aeabi_dsub>
 8012a08:	4602      	mov	r2, r0
 8012a0a:	460b      	mov	r3, r1
 8012a0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012a10:	f7ee f864 	bl	8000adc <__aeabi_dcmplt>
 8012a14:	2800      	cmp	r0, #0
 8012a16:	f43f af30 	beq.w	801287a <_dtoa_r+0x432>
 8012a1a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012a1e:	2b30      	cmp	r3, #48	; 0x30
 8012a20:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8012a24:	d002      	beq.n	8012a2c <_dtoa_r+0x5e4>
 8012a26:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012a2a:	e04a      	b.n	8012ac2 <_dtoa_r+0x67a>
 8012a2c:	4615      	mov	r5, r2
 8012a2e:	e7f4      	b.n	8012a1a <_dtoa_r+0x5d2>
 8012a30:	4b05      	ldr	r3, [pc, #20]	; (8012a48 <_dtoa_r+0x600>)
 8012a32:	f7ed fde1 	bl	80005f8 <__aeabi_dmul>
 8012a36:	e9cd 0100 	strd	r0, r1, [sp]
 8012a3a:	e7bc      	b.n	80129b6 <_dtoa_r+0x56e>
 8012a3c:	08016d40 	.word	0x08016d40
 8012a40:	08016d18 	.word	0x08016d18
 8012a44:	3ff00000 	.word	0x3ff00000
 8012a48:	40240000 	.word	0x40240000
 8012a4c:	401c0000 	.word	0x401c0000
 8012a50:	40140000 	.word	0x40140000
 8012a54:	3fe00000 	.word	0x3fe00000
 8012a58:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012a5c:	465d      	mov	r5, fp
 8012a5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012a62:	4630      	mov	r0, r6
 8012a64:	4639      	mov	r1, r7
 8012a66:	f7ed fef1 	bl	800084c <__aeabi_ddiv>
 8012a6a:	f7ee f875 	bl	8000b58 <__aeabi_d2iz>
 8012a6e:	4680      	mov	r8, r0
 8012a70:	f7ed fd58 	bl	8000524 <__aeabi_i2d>
 8012a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012a78:	f7ed fdbe 	bl	80005f8 <__aeabi_dmul>
 8012a7c:	4602      	mov	r2, r0
 8012a7e:	460b      	mov	r3, r1
 8012a80:	4630      	mov	r0, r6
 8012a82:	4639      	mov	r1, r7
 8012a84:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8012a88:	f7ed fbfe 	bl	8000288 <__aeabi_dsub>
 8012a8c:	f805 6b01 	strb.w	r6, [r5], #1
 8012a90:	eba5 060b 	sub.w	r6, r5, fp
 8012a94:	45b1      	cmp	r9, r6
 8012a96:	4602      	mov	r2, r0
 8012a98:	460b      	mov	r3, r1
 8012a9a:	d139      	bne.n	8012b10 <_dtoa_r+0x6c8>
 8012a9c:	f7ed fbf6 	bl	800028c <__adddf3>
 8012aa0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012aa4:	4606      	mov	r6, r0
 8012aa6:	460f      	mov	r7, r1
 8012aa8:	f7ee f836 	bl	8000b18 <__aeabi_dcmpgt>
 8012aac:	b9c8      	cbnz	r0, 8012ae2 <_dtoa_r+0x69a>
 8012aae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012ab2:	4630      	mov	r0, r6
 8012ab4:	4639      	mov	r1, r7
 8012ab6:	f7ee f807 	bl	8000ac8 <__aeabi_dcmpeq>
 8012aba:	b110      	cbz	r0, 8012ac2 <_dtoa_r+0x67a>
 8012abc:	f018 0f01 	tst.w	r8, #1
 8012ac0:	d10f      	bne.n	8012ae2 <_dtoa_r+0x69a>
 8012ac2:	9904      	ldr	r1, [sp, #16]
 8012ac4:	4620      	mov	r0, r4
 8012ac6:	f000 ffd9 	bl	8013a7c <_Bfree>
 8012aca:	2300      	movs	r3, #0
 8012acc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012ace:	702b      	strb	r3, [r5, #0]
 8012ad0:	f10a 0301 	add.w	r3, sl, #1
 8012ad4:	6013      	str	r3, [r2, #0]
 8012ad6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	f000 8241 	beq.w	8012f60 <_dtoa_r+0xb18>
 8012ade:	601d      	str	r5, [r3, #0]
 8012ae0:	e23e      	b.n	8012f60 <_dtoa_r+0xb18>
 8012ae2:	f8cd a020 	str.w	sl, [sp, #32]
 8012ae6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012aea:	2a39      	cmp	r2, #57	; 0x39
 8012aec:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8012af0:	d108      	bne.n	8012b04 <_dtoa_r+0x6bc>
 8012af2:	459b      	cmp	fp, r3
 8012af4:	d10a      	bne.n	8012b0c <_dtoa_r+0x6c4>
 8012af6:	9b08      	ldr	r3, [sp, #32]
 8012af8:	3301      	adds	r3, #1
 8012afa:	9308      	str	r3, [sp, #32]
 8012afc:	2330      	movs	r3, #48	; 0x30
 8012afe:	f88b 3000 	strb.w	r3, [fp]
 8012b02:	465b      	mov	r3, fp
 8012b04:	781a      	ldrb	r2, [r3, #0]
 8012b06:	3201      	adds	r2, #1
 8012b08:	701a      	strb	r2, [r3, #0]
 8012b0a:	e78c      	b.n	8012a26 <_dtoa_r+0x5de>
 8012b0c:	461d      	mov	r5, r3
 8012b0e:	e7ea      	b.n	8012ae6 <_dtoa_r+0x69e>
 8012b10:	2200      	movs	r2, #0
 8012b12:	4b9b      	ldr	r3, [pc, #620]	; (8012d80 <_dtoa_r+0x938>)
 8012b14:	f7ed fd70 	bl	80005f8 <__aeabi_dmul>
 8012b18:	2200      	movs	r2, #0
 8012b1a:	2300      	movs	r3, #0
 8012b1c:	4606      	mov	r6, r0
 8012b1e:	460f      	mov	r7, r1
 8012b20:	f7ed ffd2 	bl	8000ac8 <__aeabi_dcmpeq>
 8012b24:	2800      	cmp	r0, #0
 8012b26:	d09a      	beq.n	8012a5e <_dtoa_r+0x616>
 8012b28:	e7cb      	b.n	8012ac2 <_dtoa_r+0x67a>
 8012b2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012b2c:	2a00      	cmp	r2, #0
 8012b2e:	f000 808b 	beq.w	8012c48 <_dtoa_r+0x800>
 8012b32:	9a06      	ldr	r2, [sp, #24]
 8012b34:	2a01      	cmp	r2, #1
 8012b36:	dc6e      	bgt.n	8012c16 <_dtoa_r+0x7ce>
 8012b38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012b3a:	2a00      	cmp	r2, #0
 8012b3c:	d067      	beq.n	8012c0e <_dtoa_r+0x7c6>
 8012b3e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012b42:	9f07      	ldr	r7, [sp, #28]
 8012b44:	9d05      	ldr	r5, [sp, #20]
 8012b46:	9a05      	ldr	r2, [sp, #20]
 8012b48:	2101      	movs	r1, #1
 8012b4a:	441a      	add	r2, r3
 8012b4c:	4620      	mov	r0, r4
 8012b4e:	9205      	str	r2, [sp, #20]
 8012b50:	4498      	add	r8, r3
 8012b52:	f001 f871 	bl	8013c38 <__i2b>
 8012b56:	4606      	mov	r6, r0
 8012b58:	2d00      	cmp	r5, #0
 8012b5a:	dd0c      	ble.n	8012b76 <_dtoa_r+0x72e>
 8012b5c:	f1b8 0f00 	cmp.w	r8, #0
 8012b60:	dd09      	ble.n	8012b76 <_dtoa_r+0x72e>
 8012b62:	4545      	cmp	r5, r8
 8012b64:	9a05      	ldr	r2, [sp, #20]
 8012b66:	462b      	mov	r3, r5
 8012b68:	bfa8      	it	ge
 8012b6a:	4643      	movge	r3, r8
 8012b6c:	1ad2      	subs	r2, r2, r3
 8012b6e:	9205      	str	r2, [sp, #20]
 8012b70:	1aed      	subs	r5, r5, r3
 8012b72:	eba8 0803 	sub.w	r8, r8, r3
 8012b76:	9b07      	ldr	r3, [sp, #28]
 8012b78:	b1eb      	cbz	r3, 8012bb6 <_dtoa_r+0x76e>
 8012b7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d067      	beq.n	8012c50 <_dtoa_r+0x808>
 8012b80:	b18f      	cbz	r7, 8012ba6 <_dtoa_r+0x75e>
 8012b82:	4631      	mov	r1, r6
 8012b84:	463a      	mov	r2, r7
 8012b86:	4620      	mov	r0, r4
 8012b88:	f001 f8f6 	bl	8013d78 <__pow5mult>
 8012b8c:	9a04      	ldr	r2, [sp, #16]
 8012b8e:	4601      	mov	r1, r0
 8012b90:	4606      	mov	r6, r0
 8012b92:	4620      	mov	r0, r4
 8012b94:	f001 f859 	bl	8013c4a <__multiply>
 8012b98:	9904      	ldr	r1, [sp, #16]
 8012b9a:	9008      	str	r0, [sp, #32]
 8012b9c:	4620      	mov	r0, r4
 8012b9e:	f000 ff6d 	bl	8013a7c <_Bfree>
 8012ba2:	9b08      	ldr	r3, [sp, #32]
 8012ba4:	9304      	str	r3, [sp, #16]
 8012ba6:	9b07      	ldr	r3, [sp, #28]
 8012ba8:	1bda      	subs	r2, r3, r7
 8012baa:	d004      	beq.n	8012bb6 <_dtoa_r+0x76e>
 8012bac:	9904      	ldr	r1, [sp, #16]
 8012bae:	4620      	mov	r0, r4
 8012bb0:	f001 f8e2 	bl	8013d78 <__pow5mult>
 8012bb4:	9004      	str	r0, [sp, #16]
 8012bb6:	2101      	movs	r1, #1
 8012bb8:	4620      	mov	r0, r4
 8012bba:	f001 f83d 	bl	8013c38 <__i2b>
 8012bbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012bc0:	4607      	mov	r7, r0
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	f000 81d0 	beq.w	8012f68 <_dtoa_r+0xb20>
 8012bc8:	461a      	mov	r2, r3
 8012bca:	4601      	mov	r1, r0
 8012bcc:	4620      	mov	r0, r4
 8012bce:	f001 f8d3 	bl	8013d78 <__pow5mult>
 8012bd2:	9b06      	ldr	r3, [sp, #24]
 8012bd4:	2b01      	cmp	r3, #1
 8012bd6:	4607      	mov	r7, r0
 8012bd8:	dc40      	bgt.n	8012c5c <_dtoa_r+0x814>
 8012bda:	9b00      	ldr	r3, [sp, #0]
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d139      	bne.n	8012c54 <_dtoa_r+0x80c>
 8012be0:	9b01      	ldr	r3, [sp, #4]
 8012be2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d136      	bne.n	8012c58 <_dtoa_r+0x810>
 8012bea:	9b01      	ldr	r3, [sp, #4]
 8012bec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012bf0:	0d1b      	lsrs	r3, r3, #20
 8012bf2:	051b      	lsls	r3, r3, #20
 8012bf4:	b12b      	cbz	r3, 8012c02 <_dtoa_r+0x7ba>
 8012bf6:	9b05      	ldr	r3, [sp, #20]
 8012bf8:	3301      	adds	r3, #1
 8012bfa:	9305      	str	r3, [sp, #20]
 8012bfc:	f108 0801 	add.w	r8, r8, #1
 8012c00:	2301      	movs	r3, #1
 8012c02:	9307      	str	r3, [sp, #28]
 8012c04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d12a      	bne.n	8012c60 <_dtoa_r+0x818>
 8012c0a:	2001      	movs	r0, #1
 8012c0c:	e030      	b.n	8012c70 <_dtoa_r+0x828>
 8012c0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012c10:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012c14:	e795      	b.n	8012b42 <_dtoa_r+0x6fa>
 8012c16:	9b07      	ldr	r3, [sp, #28]
 8012c18:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8012c1c:	42bb      	cmp	r3, r7
 8012c1e:	bfbf      	itttt	lt
 8012c20:	9b07      	ldrlt	r3, [sp, #28]
 8012c22:	9707      	strlt	r7, [sp, #28]
 8012c24:	1afa      	sublt	r2, r7, r3
 8012c26:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8012c28:	bfbb      	ittet	lt
 8012c2a:	189b      	addlt	r3, r3, r2
 8012c2c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8012c2e:	1bdf      	subge	r7, r3, r7
 8012c30:	2700      	movlt	r7, #0
 8012c32:	f1b9 0f00 	cmp.w	r9, #0
 8012c36:	bfb5      	itete	lt
 8012c38:	9b05      	ldrlt	r3, [sp, #20]
 8012c3a:	9d05      	ldrge	r5, [sp, #20]
 8012c3c:	eba3 0509 	sublt.w	r5, r3, r9
 8012c40:	464b      	movge	r3, r9
 8012c42:	bfb8      	it	lt
 8012c44:	2300      	movlt	r3, #0
 8012c46:	e77e      	b.n	8012b46 <_dtoa_r+0x6fe>
 8012c48:	9f07      	ldr	r7, [sp, #28]
 8012c4a:	9d05      	ldr	r5, [sp, #20]
 8012c4c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8012c4e:	e783      	b.n	8012b58 <_dtoa_r+0x710>
 8012c50:	9a07      	ldr	r2, [sp, #28]
 8012c52:	e7ab      	b.n	8012bac <_dtoa_r+0x764>
 8012c54:	2300      	movs	r3, #0
 8012c56:	e7d4      	b.n	8012c02 <_dtoa_r+0x7ba>
 8012c58:	9b00      	ldr	r3, [sp, #0]
 8012c5a:	e7d2      	b.n	8012c02 <_dtoa_r+0x7ba>
 8012c5c:	2300      	movs	r3, #0
 8012c5e:	9307      	str	r3, [sp, #28]
 8012c60:	693b      	ldr	r3, [r7, #16]
 8012c62:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8012c66:	6918      	ldr	r0, [r3, #16]
 8012c68:	f000 ff98 	bl	8013b9c <__hi0bits>
 8012c6c:	f1c0 0020 	rsb	r0, r0, #32
 8012c70:	4440      	add	r0, r8
 8012c72:	f010 001f 	ands.w	r0, r0, #31
 8012c76:	d047      	beq.n	8012d08 <_dtoa_r+0x8c0>
 8012c78:	f1c0 0320 	rsb	r3, r0, #32
 8012c7c:	2b04      	cmp	r3, #4
 8012c7e:	dd3b      	ble.n	8012cf8 <_dtoa_r+0x8b0>
 8012c80:	9b05      	ldr	r3, [sp, #20]
 8012c82:	f1c0 001c 	rsb	r0, r0, #28
 8012c86:	4403      	add	r3, r0
 8012c88:	9305      	str	r3, [sp, #20]
 8012c8a:	4405      	add	r5, r0
 8012c8c:	4480      	add	r8, r0
 8012c8e:	9b05      	ldr	r3, [sp, #20]
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	dd05      	ble.n	8012ca0 <_dtoa_r+0x858>
 8012c94:	461a      	mov	r2, r3
 8012c96:	9904      	ldr	r1, [sp, #16]
 8012c98:	4620      	mov	r0, r4
 8012c9a:	f001 f8bb 	bl	8013e14 <__lshift>
 8012c9e:	9004      	str	r0, [sp, #16]
 8012ca0:	f1b8 0f00 	cmp.w	r8, #0
 8012ca4:	dd05      	ble.n	8012cb2 <_dtoa_r+0x86a>
 8012ca6:	4639      	mov	r1, r7
 8012ca8:	4642      	mov	r2, r8
 8012caa:	4620      	mov	r0, r4
 8012cac:	f001 f8b2 	bl	8013e14 <__lshift>
 8012cb0:	4607      	mov	r7, r0
 8012cb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012cb4:	b353      	cbz	r3, 8012d0c <_dtoa_r+0x8c4>
 8012cb6:	4639      	mov	r1, r7
 8012cb8:	9804      	ldr	r0, [sp, #16]
 8012cba:	f001 f8ff 	bl	8013ebc <__mcmp>
 8012cbe:	2800      	cmp	r0, #0
 8012cc0:	da24      	bge.n	8012d0c <_dtoa_r+0x8c4>
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	220a      	movs	r2, #10
 8012cc6:	9904      	ldr	r1, [sp, #16]
 8012cc8:	4620      	mov	r0, r4
 8012cca:	f000 feee 	bl	8013aaa <__multadd>
 8012cce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012cd0:	9004      	str	r0, [sp, #16]
 8012cd2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	f000 814d 	beq.w	8012f76 <_dtoa_r+0xb2e>
 8012cdc:	2300      	movs	r3, #0
 8012cde:	4631      	mov	r1, r6
 8012ce0:	220a      	movs	r2, #10
 8012ce2:	4620      	mov	r0, r4
 8012ce4:	f000 fee1 	bl	8013aaa <__multadd>
 8012ce8:	9b02      	ldr	r3, [sp, #8]
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	4606      	mov	r6, r0
 8012cee:	dc4f      	bgt.n	8012d90 <_dtoa_r+0x948>
 8012cf0:	9b06      	ldr	r3, [sp, #24]
 8012cf2:	2b02      	cmp	r3, #2
 8012cf4:	dd4c      	ble.n	8012d90 <_dtoa_r+0x948>
 8012cf6:	e011      	b.n	8012d1c <_dtoa_r+0x8d4>
 8012cf8:	d0c9      	beq.n	8012c8e <_dtoa_r+0x846>
 8012cfa:	9a05      	ldr	r2, [sp, #20]
 8012cfc:	331c      	adds	r3, #28
 8012cfe:	441a      	add	r2, r3
 8012d00:	9205      	str	r2, [sp, #20]
 8012d02:	441d      	add	r5, r3
 8012d04:	4498      	add	r8, r3
 8012d06:	e7c2      	b.n	8012c8e <_dtoa_r+0x846>
 8012d08:	4603      	mov	r3, r0
 8012d0a:	e7f6      	b.n	8012cfa <_dtoa_r+0x8b2>
 8012d0c:	f1b9 0f00 	cmp.w	r9, #0
 8012d10:	dc38      	bgt.n	8012d84 <_dtoa_r+0x93c>
 8012d12:	9b06      	ldr	r3, [sp, #24]
 8012d14:	2b02      	cmp	r3, #2
 8012d16:	dd35      	ble.n	8012d84 <_dtoa_r+0x93c>
 8012d18:	f8cd 9008 	str.w	r9, [sp, #8]
 8012d1c:	9b02      	ldr	r3, [sp, #8]
 8012d1e:	b963      	cbnz	r3, 8012d3a <_dtoa_r+0x8f2>
 8012d20:	4639      	mov	r1, r7
 8012d22:	2205      	movs	r2, #5
 8012d24:	4620      	mov	r0, r4
 8012d26:	f000 fec0 	bl	8013aaa <__multadd>
 8012d2a:	4601      	mov	r1, r0
 8012d2c:	4607      	mov	r7, r0
 8012d2e:	9804      	ldr	r0, [sp, #16]
 8012d30:	f001 f8c4 	bl	8013ebc <__mcmp>
 8012d34:	2800      	cmp	r0, #0
 8012d36:	f73f adcc 	bgt.w	80128d2 <_dtoa_r+0x48a>
 8012d3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012d3c:	465d      	mov	r5, fp
 8012d3e:	ea6f 0a03 	mvn.w	sl, r3
 8012d42:	f04f 0900 	mov.w	r9, #0
 8012d46:	4639      	mov	r1, r7
 8012d48:	4620      	mov	r0, r4
 8012d4a:	f000 fe97 	bl	8013a7c <_Bfree>
 8012d4e:	2e00      	cmp	r6, #0
 8012d50:	f43f aeb7 	beq.w	8012ac2 <_dtoa_r+0x67a>
 8012d54:	f1b9 0f00 	cmp.w	r9, #0
 8012d58:	d005      	beq.n	8012d66 <_dtoa_r+0x91e>
 8012d5a:	45b1      	cmp	r9, r6
 8012d5c:	d003      	beq.n	8012d66 <_dtoa_r+0x91e>
 8012d5e:	4649      	mov	r1, r9
 8012d60:	4620      	mov	r0, r4
 8012d62:	f000 fe8b 	bl	8013a7c <_Bfree>
 8012d66:	4631      	mov	r1, r6
 8012d68:	4620      	mov	r0, r4
 8012d6a:	f000 fe87 	bl	8013a7c <_Bfree>
 8012d6e:	e6a8      	b.n	8012ac2 <_dtoa_r+0x67a>
 8012d70:	2700      	movs	r7, #0
 8012d72:	463e      	mov	r6, r7
 8012d74:	e7e1      	b.n	8012d3a <_dtoa_r+0x8f2>
 8012d76:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012d7a:	463e      	mov	r6, r7
 8012d7c:	e5a9      	b.n	80128d2 <_dtoa_r+0x48a>
 8012d7e:	bf00      	nop
 8012d80:	40240000 	.word	0x40240000
 8012d84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d86:	f8cd 9008 	str.w	r9, [sp, #8]
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	f000 80fa 	beq.w	8012f84 <_dtoa_r+0xb3c>
 8012d90:	2d00      	cmp	r5, #0
 8012d92:	dd05      	ble.n	8012da0 <_dtoa_r+0x958>
 8012d94:	4631      	mov	r1, r6
 8012d96:	462a      	mov	r2, r5
 8012d98:	4620      	mov	r0, r4
 8012d9a:	f001 f83b 	bl	8013e14 <__lshift>
 8012d9e:	4606      	mov	r6, r0
 8012da0:	9b07      	ldr	r3, [sp, #28]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d04c      	beq.n	8012e40 <_dtoa_r+0x9f8>
 8012da6:	6871      	ldr	r1, [r6, #4]
 8012da8:	4620      	mov	r0, r4
 8012daa:	f000 fe33 	bl	8013a14 <_Balloc>
 8012dae:	6932      	ldr	r2, [r6, #16]
 8012db0:	3202      	adds	r2, #2
 8012db2:	4605      	mov	r5, r0
 8012db4:	0092      	lsls	r2, r2, #2
 8012db6:	f106 010c 	add.w	r1, r6, #12
 8012dba:	300c      	adds	r0, #12
 8012dbc:	f7fd fe70 	bl	8010aa0 <memcpy>
 8012dc0:	2201      	movs	r2, #1
 8012dc2:	4629      	mov	r1, r5
 8012dc4:	4620      	mov	r0, r4
 8012dc6:	f001 f825 	bl	8013e14 <__lshift>
 8012dca:	9b00      	ldr	r3, [sp, #0]
 8012dcc:	f8cd b014 	str.w	fp, [sp, #20]
 8012dd0:	f003 0301 	and.w	r3, r3, #1
 8012dd4:	46b1      	mov	r9, r6
 8012dd6:	9307      	str	r3, [sp, #28]
 8012dd8:	4606      	mov	r6, r0
 8012dda:	4639      	mov	r1, r7
 8012ddc:	9804      	ldr	r0, [sp, #16]
 8012dde:	f7ff faa7 	bl	8012330 <quorem>
 8012de2:	4649      	mov	r1, r9
 8012de4:	4605      	mov	r5, r0
 8012de6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012dea:	9804      	ldr	r0, [sp, #16]
 8012dec:	f001 f866 	bl	8013ebc <__mcmp>
 8012df0:	4632      	mov	r2, r6
 8012df2:	9000      	str	r0, [sp, #0]
 8012df4:	4639      	mov	r1, r7
 8012df6:	4620      	mov	r0, r4
 8012df8:	f001 f87a 	bl	8013ef0 <__mdiff>
 8012dfc:	68c3      	ldr	r3, [r0, #12]
 8012dfe:	4602      	mov	r2, r0
 8012e00:	bb03      	cbnz	r3, 8012e44 <_dtoa_r+0x9fc>
 8012e02:	4601      	mov	r1, r0
 8012e04:	9008      	str	r0, [sp, #32]
 8012e06:	9804      	ldr	r0, [sp, #16]
 8012e08:	f001 f858 	bl	8013ebc <__mcmp>
 8012e0c:	9a08      	ldr	r2, [sp, #32]
 8012e0e:	4603      	mov	r3, r0
 8012e10:	4611      	mov	r1, r2
 8012e12:	4620      	mov	r0, r4
 8012e14:	9308      	str	r3, [sp, #32]
 8012e16:	f000 fe31 	bl	8013a7c <_Bfree>
 8012e1a:	9b08      	ldr	r3, [sp, #32]
 8012e1c:	b9a3      	cbnz	r3, 8012e48 <_dtoa_r+0xa00>
 8012e1e:	9a06      	ldr	r2, [sp, #24]
 8012e20:	b992      	cbnz	r2, 8012e48 <_dtoa_r+0xa00>
 8012e22:	9a07      	ldr	r2, [sp, #28]
 8012e24:	b982      	cbnz	r2, 8012e48 <_dtoa_r+0xa00>
 8012e26:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012e2a:	d029      	beq.n	8012e80 <_dtoa_r+0xa38>
 8012e2c:	9b00      	ldr	r3, [sp, #0]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	dd01      	ble.n	8012e36 <_dtoa_r+0x9ee>
 8012e32:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8012e36:	9b05      	ldr	r3, [sp, #20]
 8012e38:	1c5d      	adds	r5, r3, #1
 8012e3a:	f883 8000 	strb.w	r8, [r3]
 8012e3e:	e782      	b.n	8012d46 <_dtoa_r+0x8fe>
 8012e40:	4630      	mov	r0, r6
 8012e42:	e7c2      	b.n	8012dca <_dtoa_r+0x982>
 8012e44:	2301      	movs	r3, #1
 8012e46:	e7e3      	b.n	8012e10 <_dtoa_r+0x9c8>
 8012e48:	9a00      	ldr	r2, [sp, #0]
 8012e4a:	2a00      	cmp	r2, #0
 8012e4c:	db04      	blt.n	8012e58 <_dtoa_r+0xa10>
 8012e4e:	d125      	bne.n	8012e9c <_dtoa_r+0xa54>
 8012e50:	9a06      	ldr	r2, [sp, #24]
 8012e52:	bb1a      	cbnz	r2, 8012e9c <_dtoa_r+0xa54>
 8012e54:	9a07      	ldr	r2, [sp, #28]
 8012e56:	bb0a      	cbnz	r2, 8012e9c <_dtoa_r+0xa54>
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	ddec      	ble.n	8012e36 <_dtoa_r+0x9ee>
 8012e5c:	2201      	movs	r2, #1
 8012e5e:	9904      	ldr	r1, [sp, #16]
 8012e60:	4620      	mov	r0, r4
 8012e62:	f000 ffd7 	bl	8013e14 <__lshift>
 8012e66:	4639      	mov	r1, r7
 8012e68:	9004      	str	r0, [sp, #16]
 8012e6a:	f001 f827 	bl	8013ebc <__mcmp>
 8012e6e:	2800      	cmp	r0, #0
 8012e70:	dc03      	bgt.n	8012e7a <_dtoa_r+0xa32>
 8012e72:	d1e0      	bne.n	8012e36 <_dtoa_r+0x9ee>
 8012e74:	f018 0f01 	tst.w	r8, #1
 8012e78:	d0dd      	beq.n	8012e36 <_dtoa_r+0x9ee>
 8012e7a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012e7e:	d1d8      	bne.n	8012e32 <_dtoa_r+0x9ea>
 8012e80:	9b05      	ldr	r3, [sp, #20]
 8012e82:	9a05      	ldr	r2, [sp, #20]
 8012e84:	1c5d      	adds	r5, r3, #1
 8012e86:	2339      	movs	r3, #57	; 0x39
 8012e88:	7013      	strb	r3, [r2, #0]
 8012e8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012e8e:	2b39      	cmp	r3, #57	; 0x39
 8012e90:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8012e94:	d04f      	beq.n	8012f36 <_dtoa_r+0xaee>
 8012e96:	3301      	adds	r3, #1
 8012e98:	7013      	strb	r3, [r2, #0]
 8012e9a:	e754      	b.n	8012d46 <_dtoa_r+0x8fe>
 8012e9c:	9a05      	ldr	r2, [sp, #20]
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	f102 0501 	add.w	r5, r2, #1
 8012ea4:	dd06      	ble.n	8012eb4 <_dtoa_r+0xa6c>
 8012ea6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012eaa:	d0e9      	beq.n	8012e80 <_dtoa_r+0xa38>
 8012eac:	f108 0801 	add.w	r8, r8, #1
 8012eb0:	9b05      	ldr	r3, [sp, #20]
 8012eb2:	e7c2      	b.n	8012e3a <_dtoa_r+0x9f2>
 8012eb4:	9a02      	ldr	r2, [sp, #8]
 8012eb6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8012eba:	eba5 030b 	sub.w	r3, r5, fp
 8012ebe:	4293      	cmp	r3, r2
 8012ec0:	d021      	beq.n	8012f06 <_dtoa_r+0xabe>
 8012ec2:	2300      	movs	r3, #0
 8012ec4:	220a      	movs	r2, #10
 8012ec6:	9904      	ldr	r1, [sp, #16]
 8012ec8:	4620      	mov	r0, r4
 8012eca:	f000 fdee 	bl	8013aaa <__multadd>
 8012ece:	45b1      	cmp	r9, r6
 8012ed0:	9004      	str	r0, [sp, #16]
 8012ed2:	f04f 0300 	mov.w	r3, #0
 8012ed6:	f04f 020a 	mov.w	r2, #10
 8012eda:	4649      	mov	r1, r9
 8012edc:	4620      	mov	r0, r4
 8012ede:	d105      	bne.n	8012eec <_dtoa_r+0xaa4>
 8012ee0:	f000 fde3 	bl	8013aaa <__multadd>
 8012ee4:	4681      	mov	r9, r0
 8012ee6:	4606      	mov	r6, r0
 8012ee8:	9505      	str	r5, [sp, #20]
 8012eea:	e776      	b.n	8012dda <_dtoa_r+0x992>
 8012eec:	f000 fddd 	bl	8013aaa <__multadd>
 8012ef0:	4631      	mov	r1, r6
 8012ef2:	4681      	mov	r9, r0
 8012ef4:	2300      	movs	r3, #0
 8012ef6:	220a      	movs	r2, #10
 8012ef8:	4620      	mov	r0, r4
 8012efa:	f000 fdd6 	bl	8013aaa <__multadd>
 8012efe:	4606      	mov	r6, r0
 8012f00:	e7f2      	b.n	8012ee8 <_dtoa_r+0xaa0>
 8012f02:	f04f 0900 	mov.w	r9, #0
 8012f06:	2201      	movs	r2, #1
 8012f08:	9904      	ldr	r1, [sp, #16]
 8012f0a:	4620      	mov	r0, r4
 8012f0c:	f000 ff82 	bl	8013e14 <__lshift>
 8012f10:	4639      	mov	r1, r7
 8012f12:	9004      	str	r0, [sp, #16]
 8012f14:	f000 ffd2 	bl	8013ebc <__mcmp>
 8012f18:	2800      	cmp	r0, #0
 8012f1a:	dcb6      	bgt.n	8012e8a <_dtoa_r+0xa42>
 8012f1c:	d102      	bne.n	8012f24 <_dtoa_r+0xadc>
 8012f1e:	f018 0f01 	tst.w	r8, #1
 8012f22:	d1b2      	bne.n	8012e8a <_dtoa_r+0xa42>
 8012f24:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012f28:	2b30      	cmp	r3, #48	; 0x30
 8012f2a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8012f2e:	f47f af0a 	bne.w	8012d46 <_dtoa_r+0x8fe>
 8012f32:	4615      	mov	r5, r2
 8012f34:	e7f6      	b.n	8012f24 <_dtoa_r+0xadc>
 8012f36:	4593      	cmp	fp, r2
 8012f38:	d105      	bne.n	8012f46 <_dtoa_r+0xafe>
 8012f3a:	2331      	movs	r3, #49	; 0x31
 8012f3c:	f10a 0a01 	add.w	sl, sl, #1
 8012f40:	f88b 3000 	strb.w	r3, [fp]
 8012f44:	e6ff      	b.n	8012d46 <_dtoa_r+0x8fe>
 8012f46:	4615      	mov	r5, r2
 8012f48:	e79f      	b.n	8012e8a <_dtoa_r+0xa42>
 8012f4a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8012fb0 <_dtoa_r+0xb68>
 8012f4e:	e007      	b.n	8012f60 <_dtoa_r+0xb18>
 8012f50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012f52:	f8df b060 	ldr.w	fp, [pc, #96]	; 8012fb4 <_dtoa_r+0xb6c>
 8012f56:	b11b      	cbz	r3, 8012f60 <_dtoa_r+0xb18>
 8012f58:	f10b 0308 	add.w	r3, fp, #8
 8012f5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012f5e:	6013      	str	r3, [r2, #0]
 8012f60:	4658      	mov	r0, fp
 8012f62:	b017      	add	sp, #92	; 0x5c
 8012f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f68:	9b06      	ldr	r3, [sp, #24]
 8012f6a:	2b01      	cmp	r3, #1
 8012f6c:	f77f ae35 	ble.w	8012bda <_dtoa_r+0x792>
 8012f70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012f72:	9307      	str	r3, [sp, #28]
 8012f74:	e649      	b.n	8012c0a <_dtoa_r+0x7c2>
 8012f76:	9b02      	ldr	r3, [sp, #8]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	dc03      	bgt.n	8012f84 <_dtoa_r+0xb3c>
 8012f7c:	9b06      	ldr	r3, [sp, #24]
 8012f7e:	2b02      	cmp	r3, #2
 8012f80:	f73f aecc 	bgt.w	8012d1c <_dtoa_r+0x8d4>
 8012f84:	465d      	mov	r5, fp
 8012f86:	4639      	mov	r1, r7
 8012f88:	9804      	ldr	r0, [sp, #16]
 8012f8a:	f7ff f9d1 	bl	8012330 <quorem>
 8012f8e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012f92:	f805 8b01 	strb.w	r8, [r5], #1
 8012f96:	9a02      	ldr	r2, [sp, #8]
 8012f98:	eba5 030b 	sub.w	r3, r5, fp
 8012f9c:	429a      	cmp	r2, r3
 8012f9e:	ddb0      	ble.n	8012f02 <_dtoa_r+0xaba>
 8012fa0:	2300      	movs	r3, #0
 8012fa2:	220a      	movs	r2, #10
 8012fa4:	9904      	ldr	r1, [sp, #16]
 8012fa6:	4620      	mov	r0, r4
 8012fa8:	f000 fd7f 	bl	8013aaa <__multadd>
 8012fac:	9004      	str	r0, [sp, #16]
 8012fae:	e7ea      	b.n	8012f86 <_dtoa_r+0xb3e>
 8012fb0:	08016c20 	.word	0x08016c20
 8012fb4:	08016c98 	.word	0x08016c98

08012fb8 <__sflush_r>:
 8012fb8:	898a      	ldrh	r2, [r1, #12]
 8012fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fbe:	4605      	mov	r5, r0
 8012fc0:	0710      	lsls	r0, r2, #28
 8012fc2:	460c      	mov	r4, r1
 8012fc4:	d458      	bmi.n	8013078 <__sflush_r+0xc0>
 8012fc6:	684b      	ldr	r3, [r1, #4]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	dc05      	bgt.n	8012fd8 <__sflush_r+0x20>
 8012fcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	dc02      	bgt.n	8012fd8 <__sflush_r+0x20>
 8012fd2:	2000      	movs	r0, #0
 8012fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012fda:	2e00      	cmp	r6, #0
 8012fdc:	d0f9      	beq.n	8012fd2 <__sflush_r+0x1a>
 8012fde:	2300      	movs	r3, #0
 8012fe0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012fe4:	682f      	ldr	r7, [r5, #0]
 8012fe6:	6a21      	ldr	r1, [r4, #32]
 8012fe8:	602b      	str	r3, [r5, #0]
 8012fea:	d032      	beq.n	8013052 <__sflush_r+0x9a>
 8012fec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012fee:	89a3      	ldrh	r3, [r4, #12]
 8012ff0:	075a      	lsls	r2, r3, #29
 8012ff2:	d505      	bpl.n	8013000 <__sflush_r+0x48>
 8012ff4:	6863      	ldr	r3, [r4, #4]
 8012ff6:	1ac0      	subs	r0, r0, r3
 8012ff8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012ffa:	b10b      	cbz	r3, 8013000 <__sflush_r+0x48>
 8012ffc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012ffe:	1ac0      	subs	r0, r0, r3
 8013000:	2300      	movs	r3, #0
 8013002:	4602      	mov	r2, r0
 8013004:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013006:	6a21      	ldr	r1, [r4, #32]
 8013008:	4628      	mov	r0, r5
 801300a:	47b0      	blx	r6
 801300c:	1c43      	adds	r3, r0, #1
 801300e:	89a3      	ldrh	r3, [r4, #12]
 8013010:	d106      	bne.n	8013020 <__sflush_r+0x68>
 8013012:	6829      	ldr	r1, [r5, #0]
 8013014:	291d      	cmp	r1, #29
 8013016:	d848      	bhi.n	80130aa <__sflush_r+0xf2>
 8013018:	4a29      	ldr	r2, [pc, #164]	; (80130c0 <__sflush_r+0x108>)
 801301a:	40ca      	lsrs	r2, r1
 801301c:	07d6      	lsls	r6, r2, #31
 801301e:	d544      	bpl.n	80130aa <__sflush_r+0xf2>
 8013020:	2200      	movs	r2, #0
 8013022:	6062      	str	r2, [r4, #4]
 8013024:	04d9      	lsls	r1, r3, #19
 8013026:	6922      	ldr	r2, [r4, #16]
 8013028:	6022      	str	r2, [r4, #0]
 801302a:	d504      	bpl.n	8013036 <__sflush_r+0x7e>
 801302c:	1c42      	adds	r2, r0, #1
 801302e:	d101      	bne.n	8013034 <__sflush_r+0x7c>
 8013030:	682b      	ldr	r3, [r5, #0]
 8013032:	b903      	cbnz	r3, 8013036 <__sflush_r+0x7e>
 8013034:	6560      	str	r0, [r4, #84]	; 0x54
 8013036:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013038:	602f      	str	r7, [r5, #0]
 801303a:	2900      	cmp	r1, #0
 801303c:	d0c9      	beq.n	8012fd2 <__sflush_r+0x1a>
 801303e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013042:	4299      	cmp	r1, r3
 8013044:	d002      	beq.n	801304c <__sflush_r+0x94>
 8013046:	4628      	mov	r0, r5
 8013048:	f001 f8f2 	bl	8014230 <_free_r>
 801304c:	2000      	movs	r0, #0
 801304e:	6360      	str	r0, [r4, #52]	; 0x34
 8013050:	e7c0      	b.n	8012fd4 <__sflush_r+0x1c>
 8013052:	2301      	movs	r3, #1
 8013054:	4628      	mov	r0, r5
 8013056:	47b0      	blx	r6
 8013058:	1c41      	adds	r1, r0, #1
 801305a:	d1c8      	bne.n	8012fee <__sflush_r+0x36>
 801305c:	682b      	ldr	r3, [r5, #0]
 801305e:	2b00      	cmp	r3, #0
 8013060:	d0c5      	beq.n	8012fee <__sflush_r+0x36>
 8013062:	2b1d      	cmp	r3, #29
 8013064:	d001      	beq.n	801306a <__sflush_r+0xb2>
 8013066:	2b16      	cmp	r3, #22
 8013068:	d101      	bne.n	801306e <__sflush_r+0xb6>
 801306a:	602f      	str	r7, [r5, #0]
 801306c:	e7b1      	b.n	8012fd2 <__sflush_r+0x1a>
 801306e:	89a3      	ldrh	r3, [r4, #12]
 8013070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013074:	81a3      	strh	r3, [r4, #12]
 8013076:	e7ad      	b.n	8012fd4 <__sflush_r+0x1c>
 8013078:	690f      	ldr	r7, [r1, #16]
 801307a:	2f00      	cmp	r7, #0
 801307c:	d0a9      	beq.n	8012fd2 <__sflush_r+0x1a>
 801307e:	0793      	lsls	r3, r2, #30
 8013080:	680e      	ldr	r6, [r1, #0]
 8013082:	bf08      	it	eq
 8013084:	694b      	ldreq	r3, [r1, #20]
 8013086:	600f      	str	r7, [r1, #0]
 8013088:	bf18      	it	ne
 801308a:	2300      	movne	r3, #0
 801308c:	eba6 0807 	sub.w	r8, r6, r7
 8013090:	608b      	str	r3, [r1, #8]
 8013092:	f1b8 0f00 	cmp.w	r8, #0
 8013096:	dd9c      	ble.n	8012fd2 <__sflush_r+0x1a>
 8013098:	4643      	mov	r3, r8
 801309a:	463a      	mov	r2, r7
 801309c:	6a21      	ldr	r1, [r4, #32]
 801309e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80130a0:	4628      	mov	r0, r5
 80130a2:	47b0      	blx	r6
 80130a4:	2800      	cmp	r0, #0
 80130a6:	dc06      	bgt.n	80130b6 <__sflush_r+0xfe>
 80130a8:	89a3      	ldrh	r3, [r4, #12]
 80130aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80130ae:	81a3      	strh	r3, [r4, #12]
 80130b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80130b4:	e78e      	b.n	8012fd4 <__sflush_r+0x1c>
 80130b6:	4407      	add	r7, r0
 80130b8:	eba8 0800 	sub.w	r8, r8, r0
 80130bc:	e7e9      	b.n	8013092 <__sflush_r+0xda>
 80130be:	bf00      	nop
 80130c0:	20400001 	.word	0x20400001

080130c4 <_fflush_r>:
 80130c4:	b538      	push	{r3, r4, r5, lr}
 80130c6:	690b      	ldr	r3, [r1, #16]
 80130c8:	4605      	mov	r5, r0
 80130ca:	460c      	mov	r4, r1
 80130cc:	b1db      	cbz	r3, 8013106 <_fflush_r+0x42>
 80130ce:	b118      	cbz	r0, 80130d8 <_fflush_r+0x14>
 80130d0:	6983      	ldr	r3, [r0, #24]
 80130d2:	b90b      	cbnz	r3, 80130d8 <_fflush_r+0x14>
 80130d4:	f000 f860 	bl	8013198 <__sinit>
 80130d8:	4b0c      	ldr	r3, [pc, #48]	; (801310c <_fflush_r+0x48>)
 80130da:	429c      	cmp	r4, r3
 80130dc:	d109      	bne.n	80130f2 <_fflush_r+0x2e>
 80130de:	686c      	ldr	r4, [r5, #4]
 80130e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80130e4:	b17b      	cbz	r3, 8013106 <_fflush_r+0x42>
 80130e6:	4621      	mov	r1, r4
 80130e8:	4628      	mov	r0, r5
 80130ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80130ee:	f7ff bf63 	b.w	8012fb8 <__sflush_r>
 80130f2:	4b07      	ldr	r3, [pc, #28]	; (8013110 <_fflush_r+0x4c>)
 80130f4:	429c      	cmp	r4, r3
 80130f6:	d101      	bne.n	80130fc <_fflush_r+0x38>
 80130f8:	68ac      	ldr	r4, [r5, #8]
 80130fa:	e7f1      	b.n	80130e0 <_fflush_r+0x1c>
 80130fc:	4b05      	ldr	r3, [pc, #20]	; (8013114 <_fflush_r+0x50>)
 80130fe:	429c      	cmp	r4, r3
 8013100:	bf08      	it	eq
 8013102:	68ec      	ldreq	r4, [r5, #12]
 8013104:	e7ec      	b.n	80130e0 <_fflush_r+0x1c>
 8013106:	2000      	movs	r0, #0
 8013108:	bd38      	pop	{r3, r4, r5, pc}
 801310a:	bf00      	nop
 801310c:	08016cc8 	.word	0x08016cc8
 8013110:	08016ce8 	.word	0x08016ce8
 8013114:	08016ca8 	.word	0x08016ca8

08013118 <std>:
 8013118:	2300      	movs	r3, #0
 801311a:	b510      	push	{r4, lr}
 801311c:	4604      	mov	r4, r0
 801311e:	e9c0 3300 	strd	r3, r3, [r0]
 8013122:	6083      	str	r3, [r0, #8]
 8013124:	8181      	strh	r1, [r0, #12]
 8013126:	6643      	str	r3, [r0, #100]	; 0x64
 8013128:	81c2      	strh	r2, [r0, #14]
 801312a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801312e:	6183      	str	r3, [r0, #24]
 8013130:	4619      	mov	r1, r3
 8013132:	2208      	movs	r2, #8
 8013134:	305c      	adds	r0, #92	; 0x5c
 8013136:	f7fd fcbe 	bl	8010ab6 <memset>
 801313a:	4b05      	ldr	r3, [pc, #20]	; (8013150 <std+0x38>)
 801313c:	6263      	str	r3, [r4, #36]	; 0x24
 801313e:	4b05      	ldr	r3, [pc, #20]	; (8013154 <std+0x3c>)
 8013140:	62a3      	str	r3, [r4, #40]	; 0x28
 8013142:	4b05      	ldr	r3, [pc, #20]	; (8013158 <std+0x40>)
 8013144:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013146:	4b05      	ldr	r3, [pc, #20]	; (801315c <std+0x44>)
 8013148:	6224      	str	r4, [r4, #32]
 801314a:	6323      	str	r3, [r4, #48]	; 0x30
 801314c:	bd10      	pop	{r4, pc}
 801314e:	bf00      	nop
 8013150:	080148d1 	.word	0x080148d1
 8013154:	080148f3 	.word	0x080148f3
 8013158:	0801492b 	.word	0x0801492b
 801315c:	0801494f 	.word	0x0801494f

08013160 <_cleanup_r>:
 8013160:	4901      	ldr	r1, [pc, #4]	; (8013168 <_cleanup_r+0x8>)
 8013162:	f000 b885 	b.w	8013270 <_fwalk_reent>
 8013166:	bf00      	nop
 8013168:	080130c5 	.word	0x080130c5

0801316c <__sfmoreglue>:
 801316c:	b570      	push	{r4, r5, r6, lr}
 801316e:	1e4a      	subs	r2, r1, #1
 8013170:	2568      	movs	r5, #104	; 0x68
 8013172:	4355      	muls	r5, r2
 8013174:	460e      	mov	r6, r1
 8013176:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801317a:	f001 f8a7 	bl	80142cc <_malloc_r>
 801317e:	4604      	mov	r4, r0
 8013180:	b140      	cbz	r0, 8013194 <__sfmoreglue+0x28>
 8013182:	2100      	movs	r1, #0
 8013184:	e9c0 1600 	strd	r1, r6, [r0]
 8013188:	300c      	adds	r0, #12
 801318a:	60a0      	str	r0, [r4, #8]
 801318c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013190:	f7fd fc91 	bl	8010ab6 <memset>
 8013194:	4620      	mov	r0, r4
 8013196:	bd70      	pop	{r4, r5, r6, pc}

08013198 <__sinit>:
 8013198:	6983      	ldr	r3, [r0, #24]
 801319a:	b510      	push	{r4, lr}
 801319c:	4604      	mov	r4, r0
 801319e:	bb33      	cbnz	r3, 80131ee <__sinit+0x56>
 80131a0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80131a4:	6503      	str	r3, [r0, #80]	; 0x50
 80131a6:	4b12      	ldr	r3, [pc, #72]	; (80131f0 <__sinit+0x58>)
 80131a8:	4a12      	ldr	r2, [pc, #72]	; (80131f4 <__sinit+0x5c>)
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	6282      	str	r2, [r0, #40]	; 0x28
 80131ae:	4298      	cmp	r0, r3
 80131b0:	bf04      	itt	eq
 80131b2:	2301      	moveq	r3, #1
 80131b4:	6183      	streq	r3, [r0, #24]
 80131b6:	f000 f81f 	bl	80131f8 <__sfp>
 80131ba:	6060      	str	r0, [r4, #4]
 80131bc:	4620      	mov	r0, r4
 80131be:	f000 f81b 	bl	80131f8 <__sfp>
 80131c2:	60a0      	str	r0, [r4, #8]
 80131c4:	4620      	mov	r0, r4
 80131c6:	f000 f817 	bl	80131f8 <__sfp>
 80131ca:	2200      	movs	r2, #0
 80131cc:	60e0      	str	r0, [r4, #12]
 80131ce:	2104      	movs	r1, #4
 80131d0:	6860      	ldr	r0, [r4, #4]
 80131d2:	f7ff ffa1 	bl	8013118 <std>
 80131d6:	2201      	movs	r2, #1
 80131d8:	2109      	movs	r1, #9
 80131da:	68a0      	ldr	r0, [r4, #8]
 80131dc:	f7ff ff9c 	bl	8013118 <std>
 80131e0:	2202      	movs	r2, #2
 80131e2:	2112      	movs	r1, #18
 80131e4:	68e0      	ldr	r0, [r4, #12]
 80131e6:	f7ff ff97 	bl	8013118 <std>
 80131ea:	2301      	movs	r3, #1
 80131ec:	61a3      	str	r3, [r4, #24]
 80131ee:	bd10      	pop	{r4, pc}
 80131f0:	08016c0c 	.word	0x08016c0c
 80131f4:	08013161 	.word	0x08013161

080131f8 <__sfp>:
 80131f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131fa:	4b1b      	ldr	r3, [pc, #108]	; (8013268 <__sfp+0x70>)
 80131fc:	681e      	ldr	r6, [r3, #0]
 80131fe:	69b3      	ldr	r3, [r6, #24]
 8013200:	4607      	mov	r7, r0
 8013202:	b913      	cbnz	r3, 801320a <__sfp+0x12>
 8013204:	4630      	mov	r0, r6
 8013206:	f7ff ffc7 	bl	8013198 <__sinit>
 801320a:	3648      	adds	r6, #72	; 0x48
 801320c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013210:	3b01      	subs	r3, #1
 8013212:	d503      	bpl.n	801321c <__sfp+0x24>
 8013214:	6833      	ldr	r3, [r6, #0]
 8013216:	b133      	cbz	r3, 8013226 <__sfp+0x2e>
 8013218:	6836      	ldr	r6, [r6, #0]
 801321a:	e7f7      	b.n	801320c <__sfp+0x14>
 801321c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013220:	b16d      	cbz	r5, 801323e <__sfp+0x46>
 8013222:	3468      	adds	r4, #104	; 0x68
 8013224:	e7f4      	b.n	8013210 <__sfp+0x18>
 8013226:	2104      	movs	r1, #4
 8013228:	4638      	mov	r0, r7
 801322a:	f7ff ff9f 	bl	801316c <__sfmoreglue>
 801322e:	6030      	str	r0, [r6, #0]
 8013230:	2800      	cmp	r0, #0
 8013232:	d1f1      	bne.n	8013218 <__sfp+0x20>
 8013234:	230c      	movs	r3, #12
 8013236:	603b      	str	r3, [r7, #0]
 8013238:	4604      	mov	r4, r0
 801323a:	4620      	mov	r0, r4
 801323c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801323e:	4b0b      	ldr	r3, [pc, #44]	; (801326c <__sfp+0x74>)
 8013240:	6665      	str	r5, [r4, #100]	; 0x64
 8013242:	e9c4 5500 	strd	r5, r5, [r4]
 8013246:	60a5      	str	r5, [r4, #8]
 8013248:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801324c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8013250:	2208      	movs	r2, #8
 8013252:	4629      	mov	r1, r5
 8013254:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013258:	f7fd fc2d 	bl	8010ab6 <memset>
 801325c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013260:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013264:	e7e9      	b.n	801323a <__sfp+0x42>
 8013266:	bf00      	nop
 8013268:	08016c0c 	.word	0x08016c0c
 801326c:	ffff0001 	.word	0xffff0001

08013270 <_fwalk_reent>:
 8013270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013274:	4680      	mov	r8, r0
 8013276:	4689      	mov	r9, r1
 8013278:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801327c:	2600      	movs	r6, #0
 801327e:	b914      	cbnz	r4, 8013286 <_fwalk_reent+0x16>
 8013280:	4630      	mov	r0, r6
 8013282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013286:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801328a:	3f01      	subs	r7, #1
 801328c:	d501      	bpl.n	8013292 <_fwalk_reent+0x22>
 801328e:	6824      	ldr	r4, [r4, #0]
 8013290:	e7f5      	b.n	801327e <_fwalk_reent+0xe>
 8013292:	89ab      	ldrh	r3, [r5, #12]
 8013294:	2b01      	cmp	r3, #1
 8013296:	d907      	bls.n	80132a8 <_fwalk_reent+0x38>
 8013298:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801329c:	3301      	adds	r3, #1
 801329e:	d003      	beq.n	80132a8 <_fwalk_reent+0x38>
 80132a0:	4629      	mov	r1, r5
 80132a2:	4640      	mov	r0, r8
 80132a4:	47c8      	blx	r9
 80132a6:	4306      	orrs	r6, r0
 80132a8:	3568      	adds	r5, #104	; 0x68
 80132aa:	e7ee      	b.n	801328a <_fwalk_reent+0x1a>

080132ac <rshift>:
 80132ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80132ae:	6906      	ldr	r6, [r0, #16]
 80132b0:	114b      	asrs	r3, r1, #5
 80132b2:	429e      	cmp	r6, r3
 80132b4:	f100 0414 	add.w	r4, r0, #20
 80132b8:	dd30      	ble.n	801331c <rshift+0x70>
 80132ba:	f011 011f 	ands.w	r1, r1, #31
 80132be:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80132c2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80132c6:	d108      	bne.n	80132da <rshift+0x2e>
 80132c8:	4621      	mov	r1, r4
 80132ca:	42b2      	cmp	r2, r6
 80132cc:	460b      	mov	r3, r1
 80132ce:	d211      	bcs.n	80132f4 <rshift+0x48>
 80132d0:	f852 3b04 	ldr.w	r3, [r2], #4
 80132d4:	f841 3b04 	str.w	r3, [r1], #4
 80132d8:	e7f7      	b.n	80132ca <rshift+0x1e>
 80132da:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80132de:	f1c1 0c20 	rsb	ip, r1, #32
 80132e2:	40cd      	lsrs	r5, r1
 80132e4:	3204      	adds	r2, #4
 80132e6:	4623      	mov	r3, r4
 80132e8:	42b2      	cmp	r2, r6
 80132ea:	4617      	mov	r7, r2
 80132ec:	d30c      	bcc.n	8013308 <rshift+0x5c>
 80132ee:	601d      	str	r5, [r3, #0]
 80132f0:	b105      	cbz	r5, 80132f4 <rshift+0x48>
 80132f2:	3304      	adds	r3, #4
 80132f4:	1b1a      	subs	r2, r3, r4
 80132f6:	42a3      	cmp	r3, r4
 80132f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80132fc:	bf08      	it	eq
 80132fe:	2300      	moveq	r3, #0
 8013300:	6102      	str	r2, [r0, #16]
 8013302:	bf08      	it	eq
 8013304:	6143      	streq	r3, [r0, #20]
 8013306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013308:	683f      	ldr	r7, [r7, #0]
 801330a:	fa07 f70c 	lsl.w	r7, r7, ip
 801330e:	433d      	orrs	r5, r7
 8013310:	f843 5b04 	str.w	r5, [r3], #4
 8013314:	f852 5b04 	ldr.w	r5, [r2], #4
 8013318:	40cd      	lsrs	r5, r1
 801331a:	e7e5      	b.n	80132e8 <rshift+0x3c>
 801331c:	4623      	mov	r3, r4
 801331e:	e7e9      	b.n	80132f4 <rshift+0x48>

08013320 <__hexdig_fun>:
 8013320:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013324:	2b09      	cmp	r3, #9
 8013326:	d802      	bhi.n	801332e <__hexdig_fun+0xe>
 8013328:	3820      	subs	r0, #32
 801332a:	b2c0      	uxtb	r0, r0
 801332c:	4770      	bx	lr
 801332e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8013332:	2b05      	cmp	r3, #5
 8013334:	d801      	bhi.n	801333a <__hexdig_fun+0x1a>
 8013336:	3847      	subs	r0, #71	; 0x47
 8013338:	e7f7      	b.n	801332a <__hexdig_fun+0xa>
 801333a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801333e:	2b05      	cmp	r3, #5
 8013340:	d801      	bhi.n	8013346 <__hexdig_fun+0x26>
 8013342:	3827      	subs	r0, #39	; 0x27
 8013344:	e7f1      	b.n	801332a <__hexdig_fun+0xa>
 8013346:	2000      	movs	r0, #0
 8013348:	4770      	bx	lr

0801334a <__gethex>:
 801334a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801334e:	b08b      	sub	sp, #44	; 0x2c
 8013350:	468a      	mov	sl, r1
 8013352:	9002      	str	r0, [sp, #8]
 8013354:	9816      	ldr	r0, [sp, #88]	; 0x58
 8013356:	9306      	str	r3, [sp, #24]
 8013358:	4690      	mov	r8, r2
 801335a:	f000 facd 	bl	80138f8 <__localeconv_l>
 801335e:	6803      	ldr	r3, [r0, #0]
 8013360:	9303      	str	r3, [sp, #12]
 8013362:	4618      	mov	r0, r3
 8013364:	f7ec ff34 	bl	80001d0 <strlen>
 8013368:	9b03      	ldr	r3, [sp, #12]
 801336a:	9001      	str	r0, [sp, #4]
 801336c:	4403      	add	r3, r0
 801336e:	f04f 0b00 	mov.w	fp, #0
 8013372:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8013376:	9307      	str	r3, [sp, #28]
 8013378:	f8da 3000 	ldr.w	r3, [sl]
 801337c:	3302      	adds	r3, #2
 801337e:	461f      	mov	r7, r3
 8013380:	f813 0b01 	ldrb.w	r0, [r3], #1
 8013384:	2830      	cmp	r0, #48	; 0x30
 8013386:	d06c      	beq.n	8013462 <__gethex+0x118>
 8013388:	f7ff ffca 	bl	8013320 <__hexdig_fun>
 801338c:	4604      	mov	r4, r0
 801338e:	2800      	cmp	r0, #0
 8013390:	d16a      	bne.n	8013468 <__gethex+0x11e>
 8013392:	9a01      	ldr	r2, [sp, #4]
 8013394:	9903      	ldr	r1, [sp, #12]
 8013396:	4638      	mov	r0, r7
 8013398:	f001 fadd 	bl	8014956 <strncmp>
 801339c:	2800      	cmp	r0, #0
 801339e:	d166      	bne.n	801346e <__gethex+0x124>
 80133a0:	9b01      	ldr	r3, [sp, #4]
 80133a2:	5cf8      	ldrb	r0, [r7, r3]
 80133a4:	18fe      	adds	r6, r7, r3
 80133a6:	f7ff ffbb 	bl	8013320 <__hexdig_fun>
 80133aa:	2800      	cmp	r0, #0
 80133ac:	d062      	beq.n	8013474 <__gethex+0x12a>
 80133ae:	4633      	mov	r3, r6
 80133b0:	7818      	ldrb	r0, [r3, #0]
 80133b2:	2830      	cmp	r0, #48	; 0x30
 80133b4:	461f      	mov	r7, r3
 80133b6:	f103 0301 	add.w	r3, r3, #1
 80133ba:	d0f9      	beq.n	80133b0 <__gethex+0x66>
 80133bc:	f7ff ffb0 	bl	8013320 <__hexdig_fun>
 80133c0:	fab0 f580 	clz	r5, r0
 80133c4:	096d      	lsrs	r5, r5, #5
 80133c6:	4634      	mov	r4, r6
 80133c8:	f04f 0b01 	mov.w	fp, #1
 80133cc:	463a      	mov	r2, r7
 80133ce:	4616      	mov	r6, r2
 80133d0:	3201      	adds	r2, #1
 80133d2:	7830      	ldrb	r0, [r6, #0]
 80133d4:	f7ff ffa4 	bl	8013320 <__hexdig_fun>
 80133d8:	2800      	cmp	r0, #0
 80133da:	d1f8      	bne.n	80133ce <__gethex+0x84>
 80133dc:	9a01      	ldr	r2, [sp, #4]
 80133de:	9903      	ldr	r1, [sp, #12]
 80133e0:	4630      	mov	r0, r6
 80133e2:	f001 fab8 	bl	8014956 <strncmp>
 80133e6:	b950      	cbnz	r0, 80133fe <__gethex+0xb4>
 80133e8:	b954      	cbnz	r4, 8013400 <__gethex+0xb6>
 80133ea:	9b01      	ldr	r3, [sp, #4]
 80133ec:	18f4      	adds	r4, r6, r3
 80133ee:	4622      	mov	r2, r4
 80133f0:	4616      	mov	r6, r2
 80133f2:	3201      	adds	r2, #1
 80133f4:	7830      	ldrb	r0, [r6, #0]
 80133f6:	f7ff ff93 	bl	8013320 <__hexdig_fun>
 80133fa:	2800      	cmp	r0, #0
 80133fc:	d1f8      	bne.n	80133f0 <__gethex+0xa6>
 80133fe:	b10c      	cbz	r4, 8013404 <__gethex+0xba>
 8013400:	1ba4      	subs	r4, r4, r6
 8013402:	00a4      	lsls	r4, r4, #2
 8013404:	7833      	ldrb	r3, [r6, #0]
 8013406:	2b50      	cmp	r3, #80	; 0x50
 8013408:	d001      	beq.n	801340e <__gethex+0xc4>
 801340a:	2b70      	cmp	r3, #112	; 0x70
 801340c:	d140      	bne.n	8013490 <__gethex+0x146>
 801340e:	7873      	ldrb	r3, [r6, #1]
 8013410:	2b2b      	cmp	r3, #43	; 0x2b
 8013412:	d031      	beq.n	8013478 <__gethex+0x12e>
 8013414:	2b2d      	cmp	r3, #45	; 0x2d
 8013416:	d033      	beq.n	8013480 <__gethex+0x136>
 8013418:	1c71      	adds	r1, r6, #1
 801341a:	f04f 0900 	mov.w	r9, #0
 801341e:	7808      	ldrb	r0, [r1, #0]
 8013420:	f7ff ff7e 	bl	8013320 <__hexdig_fun>
 8013424:	1e43      	subs	r3, r0, #1
 8013426:	b2db      	uxtb	r3, r3
 8013428:	2b18      	cmp	r3, #24
 801342a:	d831      	bhi.n	8013490 <__gethex+0x146>
 801342c:	f1a0 0210 	sub.w	r2, r0, #16
 8013430:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013434:	f7ff ff74 	bl	8013320 <__hexdig_fun>
 8013438:	1e43      	subs	r3, r0, #1
 801343a:	b2db      	uxtb	r3, r3
 801343c:	2b18      	cmp	r3, #24
 801343e:	d922      	bls.n	8013486 <__gethex+0x13c>
 8013440:	f1b9 0f00 	cmp.w	r9, #0
 8013444:	d000      	beq.n	8013448 <__gethex+0xfe>
 8013446:	4252      	negs	r2, r2
 8013448:	4414      	add	r4, r2
 801344a:	f8ca 1000 	str.w	r1, [sl]
 801344e:	b30d      	cbz	r5, 8013494 <__gethex+0x14a>
 8013450:	f1bb 0f00 	cmp.w	fp, #0
 8013454:	bf0c      	ite	eq
 8013456:	2706      	moveq	r7, #6
 8013458:	2700      	movne	r7, #0
 801345a:	4638      	mov	r0, r7
 801345c:	b00b      	add	sp, #44	; 0x2c
 801345e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013462:	f10b 0b01 	add.w	fp, fp, #1
 8013466:	e78a      	b.n	801337e <__gethex+0x34>
 8013468:	2500      	movs	r5, #0
 801346a:	462c      	mov	r4, r5
 801346c:	e7ae      	b.n	80133cc <__gethex+0x82>
 801346e:	463e      	mov	r6, r7
 8013470:	2501      	movs	r5, #1
 8013472:	e7c7      	b.n	8013404 <__gethex+0xba>
 8013474:	4604      	mov	r4, r0
 8013476:	e7fb      	b.n	8013470 <__gethex+0x126>
 8013478:	f04f 0900 	mov.w	r9, #0
 801347c:	1cb1      	adds	r1, r6, #2
 801347e:	e7ce      	b.n	801341e <__gethex+0xd4>
 8013480:	f04f 0901 	mov.w	r9, #1
 8013484:	e7fa      	b.n	801347c <__gethex+0x132>
 8013486:	230a      	movs	r3, #10
 8013488:	fb03 0202 	mla	r2, r3, r2, r0
 801348c:	3a10      	subs	r2, #16
 801348e:	e7cf      	b.n	8013430 <__gethex+0xe6>
 8013490:	4631      	mov	r1, r6
 8013492:	e7da      	b.n	801344a <__gethex+0x100>
 8013494:	1bf3      	subs	r3, r6, r7
 8013496:	3b01      	subs	r3, #1
 8013498:	4629      	mov	r1, r5
 801349a:	2b07      	cmp	r3, #7
 801349c:	dc49      	bgt.n	8013532 <__gethex+0x1e8>
 801349e:	9802      	ldr	r0, [sp, #8]
 80134a0:	f000 fab8 	bl	8013a14 <_Balloc>
 80134a4:	9b01      	ldr	r3, [sp, #4]
 80134a6:	f100 0914 	add.w	r9, r0, #20
 80134aa:	f04f 0b00 	mov.w	fp, #0
 80134ae:	f1c3 0301 	rsb	r3, r3, #1
 80134b2:	4605      	mov	r5, r0
 80134b4:	f8cd 9010 	str.w	r9, [sp, #16]
 80134b8:	46da      	mov	sl, fp
 80134ba:	9308      	str	r3, [sp, #32]
 80134bc:	42b7      	cmp	r7, r6
 80134be:	d33b      	bcc.n	8013538 <__gethex+0x1ee>
 80134c0:	9804      	ldr	r0, [sp, #16]
 80134c2:	f840 ab04 	str.w	sl, [r0], #4
 80134c6:	eba0 0009 	sub.w	r0, r0, r9
 80134ca:	1080      	asrs	r0, r0, #2
 80134cc:	6128      	str	r0, [r5, #16]
 80134ce:	0147      	lsls	r7, r0, #5
 80134d0:	4650      	mov	r0, sl
 80134d2:	f000 fb63 	bl	8013b9c <__hi0bits>
 80134d6:	f8d8 6000 	ldr.w	r6, [r8]
 80134da:	1a3f      	subs	r7, r7, r0
 80134dc:	42b7      	cmp	r7, r6
 80134de:	dd64      	ble.n	80135aa <__gethex+0x260>
 80134e0:	1bbf      	subs	r7, r7, r6
 80134e2:	4639      	mov	r1, r7
 80134e4:	4628      	mov	r0, r5
 80134e6:	f000 fe73 	bl	80141d0 <__any_on>
 80134ea:	4682      	mov	sl, r0
 80134ec:	b178      	cbz	r0, 801350e <__gethex+0x1c4>
 80134ee:	1e7b      	subs	r3, r7, #1
 80134f0:	1159      	asrs	r1, r3, #5
 80134f2:	f003 021f 	and.w	r2, r3, #31
 80134f6:	f04f 0a01 	mov.w	sl, #1
 80134fa:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80134fe:	fa0a f202 	lsl.w	r2, sl, r2
 8013502:	420a      	tst	r2, r1
 8013504:	d003      	beq.n	801350e <__gethex+0x1c4>
 8013506:	4553      	cmp	r3, sl
 8013508:	dc46      	bgt.n	8013598 <__gethex+0x24e>
 801350a:	f04f 0a02 	mov.w	sl, #2
 801350e:	4639      	mov	r1, r7
 8013510:	4628      	mov	r0, r5
 8013512:	f7ff fecb 	bl	80132ac <rshift>
 8013516:	443c      	add	r4, r7
 8013518:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801351c:	42a3      	cmp	r3, r4
 801351e:	da52      	bge.n	80135c6 <__gethex+0x27c>
 8013520:	4629      	mov	r1, r5
 8013522:	9802      	ldr	r0, [sp, #8]
 8013524:	f000 faaa 	bl	8013a7c <_Bfree>
 8013528:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801352a:	2300      	movs	r3, #0
 801352c:	6013      	str	r3, [r2, #0]
 801352e:	27a3      	movs	r7, #163	; 0xa3
 8013530:	e793      	b.n	801345a <__gethex+0x110>
 8013532:	3101      	adds	r1, #1
 8013534:	105b      	asrs	r3, r3, #1
 8013536:	e7b0      	b.n	801349a <__gethex+0x150>
 8013538:	1e73      	subs	r3, r6, #1
 801353a:	9305      	str	r3, [sp, #20]
 801353c:	9a07      	ldr	r2, [sp, #28]
 801353e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013542:	4293      	cmp	r3, r2
 8013544:	d018      	beq.n	8013578 <__gethex+0x22e>
 8013546:	f1bb 0f20 	cmp.w	fp, #32
 801354a:	d107      	bne.n	801355c <__gethex+0x212>
 801354c:	9b04      	ldr	r3, [sp, #16]
 801354e:	f8c3 a000 	str.w	sl, [r3]
 8013552:	3304      	adds	r3, #4
 8013554:	f04f 0a00 	mov.w	sl, #0
 8013558:	9304      	str	r3, [sp, #16]
 801355a:	46d3      	mov	fp, sl
 801355c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8013560:	f7ff fede 	bl	8013320 <__hexdig_fun>
 8013564:	f000 000f 	and.w	r0, r0, #15
 8013568:	fa00 f00b 	lsl.w	r0, r0, fp
 801356c:	ea4a 0a00 	orr.w	sl, sl, r0
 8013570:	f10b 0b04 	add.w	fp, fp, #4
 8013574:	9b05      	ldr	r3, [sp, #20]
 8013576:	e00d      	b.n	8013594 <__gethex+0x24a>
 8013578:	9b05      	ldr	r3, [sp, #20]
 801357a:	9a08      	ldr	r2, [sp, #32]
 801357c:	4413      	add	r3, r2
 801357e:	42bb      	cmp	r3, r7
 8013580:	d3e1      	bcc.n	8013546 <__gethex+0x1fc>
 8013582:	4618      	mov	r0, r3
 8013584:	9a01      	ldr	r2, [sp, #4]
 8013586:	9903      	ldr	r1, [sp, #12]
 8013588:	9309      	str	r3, [sp, #36]	; 0x24
 801358a:	f001 f9e4 	bl	8014956 <strncmp>
 801358e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013590:	2800      	cmp	r0, #0
 8013592:	d1d8      	bne.n	8013546 <__gethex+0x1fc>
 8013594:	461e      	mov	r6, r3
 8013596:	e791      	b.n	80134bc <__gethex+0x172>
 8013598:	1eb9      	subs	r1, r7, #2
 801359a:	4628      	mov	r0, r5
 801359c:	f000 fe18 	bl	80141d0 <__any_on>
 80135a0:	2800      	cmp	r0, #0
 80135a2:	d0b2      	beq.n	801350a <__gethex+0x1c0>
 80135a4:	f04f 0a03 	mov.w	sl, #3
 80135a8:	e7b1      	b.n	801350e <__gethex+0x1c4>
 80135aa:	da09      	bge.n	80135c0 <__gethex+0x276>
 80135ac:	1bf7      	subs	r7, r6, r7
 80135ae:	4629      	mov	r1, r5
 80135b0:	463a      	mov	r2, r7
 80135b2:	9802      	ldr	r0, [sp, #8]
 80135b4:	f000 fc2e 	bl	8013e14 <__lshift>
 80135b8:	1be4      	subs	r4, r4, r7
 80135ba:	4605      	mov	r5, r0
 80135bc:	f100 0914 	add.w	r9, r0, #20
 80135c0:	f04f 0a00 	mov.w	sl, #0
 80135c4:	e7a8      	b.n	8013518 <__gethex+0x1ce>
 80135c6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80135ca:	42a0      	cmp	r0, r4
 80135cc:	dd6a      	ble.n	80136a4 <__gethex+0x35a>
 80135ce:	1b04      	subs	r4, r0, r4
 80135d0:	42a6      	cmp	r6, r4
 80135d2:	dc2e      	bgt.n	8013632 <__gethex+0x2e8>
 80135d4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80135d8:	2b02      	cmp	r3, #2
 80135da:	d022      	beq.n	8013622 <__gethex+0x2d8>
 80135dc:	2b03      	cmp	r3, #3
 80135de:	d024      	beq.n	801362a <__gethex+0x2e0>
 80135e0:	2b01      	cmp	r3, #1
 80135e2:	d115      	bne.n	8013610 <__gethex+0x2c6>
 80135e4:	42a6      	cmp	r6, r4
 80135e6:	d113      	bne.n	8013610 <__gethex+0x2c6>
 80135e8:	2e01      	cmp	r6, #1
 80135ea:	dc0b      	bgt.n	8013604 <__gethex+0x2ba>
 80135ec:	9a06      	ldr	r2, [sp, #24]
 80135ee:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80135f2:	6013      	str	r3, [r2, #0]
 80135f4:	2301      	movs	r3, #1
 80135f6:	612b      	str	r3, [r5, #16]
 80135f8:	f8c9 3000 	str.w	r3, [r9]
 80135fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80135fe:	2762      	movs	r7, #98	; 0x62
 8013600:	601d      	str	r5, [r3, #0]
 8013602:	e72a      	b.n	801345a <__gethex+0x110>
 8013604:	1e71      	subs	r1, r6, #1
 8013606:	4628      	mov	r0, r5
 8013608:	f000 fde2 	bl	80141d0 <__any_on>
 801360c:	2800      	cmp	r0, #0
 801360e:	d1ed      	bne.n	80135ec <__gethex+0x2a2>
 8013610:	4629      	mov	r1, r5
 8013612:	9802      	ldr	r0, [sp, #8]
 8013614:	f000 fa32 	bl	8013a7c <_Bfree>
 8013618:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801361a:	2300      	movs	r3, #0
 801361c:	6013      	str	r3, [r2, #0]
 801361e:	2750      	movs	r7, #80	; 0x50
 8013620:	e71b      	b.n	801345a <__gethex+0x110>
 8013622:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013624:	2b00      	cmp	r3, #0
 8013626:	d0e1      	beq.n	80135ec <__gethex+0x2a2>
 8013628:	e7f2      	b.n	8013610 <__gethex+0x2c6>
 801362a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801362c:	2b00      	cmp	r3, #0
 801362e:	d1dd      	bne.n	80135ec <__gethex+0x2a2>
 8013630:	e7ee      	b.n	8013610 <__gethex+0x2c6>
 8013632:	1e67      	subs	r7, r4, #1
 8013634:	f1ba 0f00 	cmp.w	sl, #0
 8013638:	d131      	bne.n	801369e <__gethex+0x354>
 801363a:	b127      	cbz	r7, 8013646 <__gethex+0x2fc>
 801363c:	4639      	mov	r1, r7
 801363e:	4628      	mov	r0, r5
 8013640:	f000 fdc6 	bl	80141d0 <__any_on>
 8013644:	4682      	mov	sl, r0
 8013646:	117a      	asrs	r2, r7, #5
 8013648:	2301      	movs	r3, #1
 801364a:	f007 071f 	and.w	r7, r7, #31
 801364e:	fa03 f707 	lsl.w	r7, r3, r7
 8013652:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8013656:	4621      	mov	r1, r4
 8013658:	421f      	tst	r7, r3
 801365a:	4628      	mov	r0, r5
 801365c:	bf18      	it	ne
 801365e:	f04a 0a02 	orrne.w	sl, sl, #2
 8013662:	1b36      	subs	r6, r6, r4
 8013664:	f7ff fe22 	bl	80132ac <rshift>
 8013668:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801366c:	2702      	movs	r7, #2
 801366e:	f1ba 0f00 	cmp.w	sl, #0
 8013672:	d048      	beq.n	8013706 <__gethex+0x3bc>
 8013674:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8013678:	2b02      	cmp	r3, #2
 801367a:	d015      	beq.n	80136a8 <__gethex+0x35e>
 801367c:	2b03      	cmp	r3, #3
 801367e:	d017      	beq.n	80136b0 <__gethex+0x366>
 8013680:	2b01      	cmp	r3, #1
 8013682:	d109      	bne.n	8013698 <__gethex+0x34e>
 8013684:	f01a 0f02 	tst.w	sl, #2
 8013688:	d006      	beq.n	8013698 <__gethex+0x34e>
 801368a:	f8d9 3000 	ldr.w	r3, [r9]
 801368e:	ea4a 0a03 	orr.w	sl, sl, r3
 8013692:	f01a 0f01 	tst.w	sl, #1
 8013696:	d10e      	bne.n	80136b6 <__gethex+0x36c>
 8013698:	f047 0710 	orr.w	r7, r7, #16
 801369c:	e033      	b.n	8013706 <__gethex+0x3bc>
 801369e:	f04f 0a01 	mov.w	sl, #1
 80136a2:	e7d0      	b.n	8013646 <__gethex+0x2fc>
 80136a4:	2701      	movs	r7, #1
 80136a6:	e7e2      	b.n	801366e <__gethex+0x324>
 80136a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80136aa:	f1c3 0301 	rsb	r3, r3, #1
 80136ae:	9315      	str	r3, [sp, #84]	; 0x54
 80136b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d0f0      	beq.n	8013698 <__gethex+0x34e>
 80136b6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80136ba:	f105 0314 	add.w	r3, r5, #20
 80136be:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80136c2:	eb03 010a 	add.w	r1, r3, sl
 80136c6:	f04f 0c00 	mov.w	ip, #0
 80136ca:	4618      	mov	r0, r3
 80136cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80136d0:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80136d4:	d01c      	beq.n	8013710 <__gethex+0x3c6>
 80136d6:	3201      	adds	r2, #1
 80136d8:	6002      	str	r2, [r0, #0]
 80136da:	2f02      	cmp	r7, #2
 80136dc:	f105 0314 	add.w	r3, r5, #20
 80136e0:	d138      	bne.n	8013754 <__gethex+0x40a>
 80136e2:	f8d8 2000 	ldr.w	r2, [r8]
 80136e6:	3a01      	subs	r2, #1
 80136e8:	42b2      	cmp	r2, r6
 80136ea:	d10a      	bne.n	8013702 <__gethex+0x3b8>
 80136ec:	1171      	asrs	r1, r6, #5
 80136ee:	2201      	movs	r2, #1
 80136f0:	f006 061f 	and.w	r6, r6, #31
 80136f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80136f8:	fa02 f606 	lsl.w	r6, r2, r6
 80136fc:	421e      	tst	r6, r3
 80136fe:	bf18      	it	ne
 8013700:	4617      	movne	r7, r2
 8013702:	f047 0720 	orr.w	r7, r7, #32
 8013706:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013708:	601d      	str	r5, [r3, #0]
 801370a:	9b06      	ldr	r3, [sp, #24]
 801370c:	601c      	str	r4, [r3, #0]
 801370e:	e6a4      	b.n	801345a <__gethex+0x110>
 8013710:	4299      	cmp	r1, r3
 8013712:	f843 cc04 	str.w	ip, [r3, #-4]
 8013716:	d8d8      	bhi.n	80136ca <__gethex+0x380>
 8013718:	68ab      	ldr	r3, [r5, #8]
 801371a:	4599      	cmp	r9, r3
 801371c:	db12      	blt.n	8013744 <__gethex+0x3fa>
 801371e:	6869      	ldr	r1, [r5, #4]
 8013720:	9802      	ldr	r0, [sp, #8]
 8013722:	3101      	adds	r1, #1
 8013724:	f000 f976 	bl	8013a14 <_Balloc>
 8013728:	692a      	ldr	r2, [r5, #16]
 801372a:	3202      	adds	r2, #2
 801372c:	f105 010c 	add.w	r1, r5, #12
 8013730:	4683      	mov	fp, r0
 8013732:	0092      	lsls	r2, r2, #2
 8013734:	300c      	adds	r0, #12
 8013736:	f7fd f9b3 	bl	8010aa0 <memcpy>
 801373a:	4629      	mov	r1, r5
 801373c:	9802      	ldr	r0, [sp, #8]
 801373e:	f000 f99d 	bl	8013a7c <_Bfree>
 8013742:	465d      	mov	r5, fp
 8013744:	692b      	ldr	r3, [r5, #16]
 8013746:	1c5a      	adds	r2, r3, #1
 8013748:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801374c:	612a      	str	r2, [r5, #16]
 801374e:	2201      	movs	r2, #1
 8013750:	615a      	str	r2, [r3, #20]
 8013752:	e7c2      	b.n	80136da <__gethex+0x390>
 8013754:	692a      	ldr	r2, [r5, #16]
 8013756:	454a      	cmp	r2, r9
 8013758:	dd0b      	ble.n	8013772 <__gethex+0x428>
 801375a:	2101      	movs	r1, #1
 801375c:	4628      	mov	r0, r5
 801375e:	f7ff fda5 	bl	80132ac <rshift>
 8013762:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013766:	3401      	adds	r4, #1
 8013768:	42a3      	cmp	r3, r4
 801376a:	f6ff aed9 	blt.w	8013520 <__gethex+0x1d6>
 801376e:	2701      	movs	r7, #1
 8013770:	e7c7      	b.n	8013702 <__gethex+0x3b8>
 8013772:	f016 061f 	ands.w	r6, r6, #31
 8013776:	d0fa      	beq.n	801376e <__gethex+0x424>
 8013778:	449a      	add	sl, r3
 801377a:	f1c6 0620 	rsb	r6, r6, #32
 801377e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8013782:	f000 fa0b 	bl	8013b9c <__hi0bits>
 8013786:	42b0      	cmp	r0, r6
 8013788:	dbe7      	blt.n	801375a <__gethex+0x410>
 801378a:	e7f0      	b.n	801376e <__gethex+0x424>

0801378c <L_shift>:
 801378c:	f1c2 0208 	rsb	r2, r2, #8
 8013790:	0092      	lsls	r2, r2, #2
 8013792:	b570      	push	{r4, r5, r6, lr}
 8013794:	f1c2 0620 	rsb	r6, r2, #32
 8013798:	6843      	ldr	r3, [r0, #4]
 801379a:	6804      	ldr	r4, [r0, #0]
 801379c:	fa03 f506 	lsl.w	r5, r3, r6
 80137a0:	432c      	orrs	r4, r5
 80137a2:	40d3      	lsrs	r3, r2
 80137a4:	6004      	str	r4, [r0, #0]
 80137a6:	f840 3f04 	str.w	r3, [r0, #4]!
 80137aa:	4288      	cmp	r0, r1
 80137ac:	d3f4      	bcc.n	8013798 <L_shift+0xc>
 80137ae:	bd70      	pop	{r4, r5, r6, pc}

080137b0 <__match>:
 80137b0:	b530      	push	{r4, r5, lr}
 80137b2:	6803      	ldr	r3, [r0, #0]
 80137b4:	3301      	adds	r3, #1
 80137b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80137ba:	b914      	cbnz	r4, 80137c2 <__match+0x12>
 80137bc:	6003      	str	r3, [r0, #0]
 80137be:	2001      	movs	r0, #1
 80137c0:	bd30      	pop	{r4, r5, pc}
 80137c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80137c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80137ca:	2d19      	cmp	r5, #25
 80137cc:	bf98      	it	ls
 80137ce:	3220      	addls	r2, #32
 80137d0:	42a2      	cmp	r2, r4
 80137d2:	d0f0      	beq.n	80137b6 <__match+0x6>
 80137d4:	2000      	movs	r0, #0
 80137d6:	e7f3      	b.n	80137c0 <__match+0x10>

080137d8 <__hexnan>:
 80137d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137dc:	680b      	ldr	r3, [r1, #0]
 80137de:	6801      	ldr	r1, [r0, #0]
 80137e0:	115f      	asrs	r7, r3, #5
 80137e2:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80137e6:	f013 031f 	ands.w	r3, r3, #31
 80137ea:	b087      	sub	sp, #28
 80137ec:	bf18      	it	ne
 80137ee:	3704      	addne	r7, #4
 80137f0:	2500      	movs	r5, #0
 80137f2:	1f3e      	subs	r6, r7, #4
 80137f4:	4682      	mov	sl, r0
 80137f6:	4690      	mov	r8, r2
 80137f8:	9301      	str	r3, [sp, #4]
 80137fa:	f847 5c04 	str.w	r5, [r7, #-4]
 80137fe:	46b1      	mov	r9, r6
 8013800:	4634      	mov	r4, r6
 8013802:	9502      	str	r5, [sp, #8]
 8013804:	46ab      	mov	fp, r5
 8013806:	784a      	ldrb	r2, [r1, #1]
 8013808:	1c4b      	adds	r3, r1, #1
 801380a:	9303      	str	r3, [sp, #12]
 801380c:	b342      	cbz	r2, 8013860 <__hexnan+0x88>
 801380e:	4610      	mov	r0, r2
 8013810:	9105      	str	r1, [sp, #20]
 8013812:	9204      	str	r2, [sp, #16]
 8013814:	f7ff fd84 	bl	8013320 <__hexdig_fun>
 8013818:	2800      	cmp	r0, #0
 801381a:	d143      	bne.n	80138a4 <__hexnan+0xcc>
 801381c:	9a04      	ldr	r2, [sp, #16]
 801381e:	9905      	ldr	r1, [sp, #20]
 8013820:	2a20      	cmp	r2, #32
 8013822:	d818      	bhi.n	8013856 <__hexnan+0x7e>
 8013824:	9b02      	ldr	r3, [sp, #8]
 8013826:	459b      	cmp	fp, r3
 8013828:	dd13      	ble.n	8013852 <__hexnan+0x7a>
 801382a:	454c      	cmp	r4, r9
 801382c:	d206      	bcs.n	801383c <__hexnan+0x64>
 801382e:	2d07      	cmp	r5, #7
 8013830:	dc04      	bgt.n	801383c <__hexnan+0x64>
 8013832:	462a      	mov	r2, r5
 8013834:	4649      	mov	r1, r9
 8013836:	4620      	mov	r0, r4
 8013838:	f7ff ffa8 	bl	801378c <L_shift>
 801383c:	4544      	cmp	r4, r8
 801383e:	d944      	bls.n	80138ca <__hexnan+0xf2>
 8013840:	2300      	movs	r3, #0
 8013842:	f1a4 0904 	sub.w	r9, r4, #4
 8013846:	f844 3c04 	str.w	r3, [r4, #-4]
 801384a:	f8cd b008 	str.w	fp, [sp, #8]
 801384e:	464c      	mov	r4, r9
 8013850:	461d      	mov	r5, r3
 8013852:	9903      	ldr	r1, [sp, #12]
 8013854:	e7d7      	b.n	8013806 <__hexnan+0x2e>
 8013856:	2a29      	cmp	r2, #41	; 0x29
 8013858:	d14a      	bne.n	80138f0 <__hexnan+0x118>
 801385a:	3102      	adds	r1, #2
 801385c:	f8ca 1000 	str.w	r1, [sl]
 8013860:	f1bb 0f00 	cmp.w	fp, #0
 8013864:	d044      	beq.n	80138f0 <__hexnan+0x118>
 8013866:	454c      	cmp	r4, r9
 8013868:	d206      	bcs.n	8013878 <__hexnan+0xa0>
 801386a:	2d07      	cmp	r5, #7
 801386c:	dc04      	bgt.n	8013878 <__hexnan+0xa0>
 801386e:	462a      	mov	r2, r5
 8013870:	4649      	mov	r1, r9
 8013872:	4620      	mov	r0, r4
 8013874:	f7ff ff8a 	bl	801378c <L_shift>
 8013878:	4544      	cmp	r4, r8
 801387a:	d928      	bls.n	80138ce <__hexnan+0xf6>
 801387c:	4643      	mov	r3, r8
 801387e:	f854 2b04 	ldr.w	r2, [r4], #4
 8013882:	f843 2b04 	str.w	r2, [r3], #4
 8013886:	42a6      	cmp	r6, r4
 8013888:	d2f9      	bcs.n	801387e <__hexnan+0xa6>
 801388a:	2200      	movs	r2, #0
 801388c:	f843 2b04 	str.w	r2, [r3], #4
 8013890:	429e      	cmp	r6, r3
 8013892:	d2fb      	bcs.n	801388c <__hexnan+0xb4>
 8013894:	6833      	ldr	r3, [r6, #0]
 8013896:	b91b      	cbnz	r3, 80138a0 <__hexnan+0xc8>
 8013898:	4546      	cmp	r6, r8
 801389a:	d127      	bne.n	80138ec <__hexnan+0x114>
 801389c:	2301      	movs	r3, #1
 801389e:	6033      	str	r3, [r6, #0]
 80138a0:	2005      	movs	r0, #5
 80138a2:	e026      	b.n	80138f2 <__hexnan+0x11a>
 80138a4:	3501      	adds	r5, #1
 80138a6:	2d08      	cmp	r5, #8
 80138a8:	f10b 0b01 	add.w	fp, fp, #1
 80138ac:	dd06      	ble.n	80138bc <__hexnan+0xe4>
 80138ae:	4544      	cmp	r4, r8
 80138b0:	d9cf      	bls.n	8013852 <__hexnan+0x7a>
 80138b2:	2300      	movs	r3, #0
 80138b4:	f844 3c04 	str.w	r3, [r4, #-4]
 80138b8:	2501      	movs	r5, #1
 80138ba:	3c04      	subs	r4, #4
 80138bc:	6822      	ldr	r2, [r4, #0]
 80138be:	f000 000f 	and.w	r0, r0, #15
 80138c2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80138c6:	6020      	str	r0, [r4, #0]
 80138c8:	e7c3      	b.n	8013852 <__hexnan+0x7a>
 80138ca:	2508      	movs	r5, #8
 80138cc:	e7c1      	b.n	8013852 <__hexnan+0x7a>
 80138ce:	9b01      	ldr	r3, [sp, #4]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d0df      	beq.n	8013894 <__hexnan+0xbc>
 80138d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80138d8:	f1c3 0320 	rsb	r3, r3, #32
 80138dc:	fa22 f303 	lsr.w	r3, r2, r3
 80138e0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80138e4:	401a      	ands	r2, r3
 80138e6:	f847 2c04 	str.w	r2, [r7, #-4]
 80138ea:	e7d3      	b.n	8013894 <__hexnan+0xbc>
 80138ec:	3e04      	subs	r6, #4
 80138ee:	e7d1      	b.n	8013894 <__hexnan+0xbc>
 80138f0:	2004      	movs	r0, #4
 80138f2:	b007      	add	sp, #28
 80138f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080138f8 <__localeconv_l>:
 80138f8:	30f0      	adds	r0, #240	; 0xf0
 80138fa:	4770      	bx	lr

080138fc <_localeconv_r>:
 80138fc:	4b04      	ldr	r3, [pc, #16]	; (8013910 <_localeconv_r+0x14>)
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	6a18      	ldr	r0, [r3, #32]
 8013902:	4b04      	ldr	r3, [pc, #16]	; (8013914 <_localeconv_r+0x18>)
 8013904:	2800      	cmp	r0, #0
 8013906:	bf08      	it	eq
 8013908:	4618      	moveq	r0, r3
 801390a:	30f0      	adds	r0, #240	; 0xf0
 801390c:	4770      	bx	lr
 801390e:	bf00      	nop
 8013910:	20000178 	.word	0x20000178
 8013914:	200001dc 	.word	0x200001dc

08013918 <__swhatbuf_r>:
 8013918:	b570      	push	{r4, r5, r6, lr}
 801391a:	460e      	mov	r6, r1
 801391c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013920:	2900      	cmp	r1, #0
 8013922:	b096      	sub	sp, #88	; 0x58
 8013924:	4614      	mov	r4, r2
 8013926:	461d      	mov	r5, r3
 8013928:	da07      	bge.n	801393a <__swhatbuf_r+0x22>
 801392a:	2300      	movs	r3, #0
 801392c:	602b      	str	r3, [r5, #0]
 801392e:	89b3      	ldrh	r3, [r6, #12]
 8013930:	061a      	lsls	r2, r3, #24
 8013932:	d410      	bmi.n	8013956 <__swhatbuf_r+0x3e>
 8013934:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013938:	e00e      	b.n	8013958 <__swhatbuf_r+0x40>
 801393a:	466a      	mov	r2, sp
 801393c:	f001 f84c 	bl	80149d8 <_fstat_r>
 8013940:	2800      	cmp	r0, #0
 8013942:	dbf2      	blt.n	801392a <__swhatbuf_r+0x12>
 8013944:	9a01      	ldr	r2, [sp, #4]
 8013946:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801394a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801394e:	425a      	negs	r2, r3
 8013950:	415a      	adcs	r2, r3
 8013952:	602a      	str	r2, [r5, #0]
 8013954:	e7ee      	b.n	8013934 <__swhatbuf_r+0x1c>
 8013956:	2340      	movs	r3, #64	; 0x40
 8013958:	2000      	movs	r0, #0
 801395a:	6023      	str	r3, [r4, #0]
 801395c:	b016      	add	sp, #88	; 0x58
 801395e:	bd70      	pop	{r4, r5, r6, pc}

08013960 <__smakebuf_r>:
 8013960:	898b      	ldrh	r3, [r1, #12]
 8013962:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013964:	079d      	lsls	r5, r3, #30
 8013966:	4606      	mov	r6, r0
 8013968:	460c      	mov	r4, r1
 801396a:	d507      	bpl.n	801397c <__smakebuf_r+0x1c>
 801396c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013970:	6023      	str	r3, [r4, #0]
 8013972:	6123      	str	r3, [r4, #16]
 8013974:	2301      	movs	r3, #1
 8013976:	6163      	str	r3, [r4, #20]
 8013978:	b002      	add	sp, #8
 801397a:	bd70      	pop	{r4, r5, r6, pc}
 801397c:	ab01      	add	r3, sp, #4
 801397e:	466a      	mov	r2, sp
 8013980:	f7ff ffca 	bl	8013918 <__swhatbuf_r>
 8013984:	9900      	ldr	r1, [sp, #0]
 8013986:	4605      	mov	r5, r0
 8013988:	4630      	mov	r0, r6
 801398a:	f000 fc9f 	bl	80142cc <_malloc_r>
 801398e:	b948      	cbnz	r0, 80139a4 <__smakebuf_r+0x44>
 8013990:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013994:	059a      	lsls	r2, r3, #22
 8013996:	d4ef      	bmi.n	8013978 <__smakebuf_r+0x18>
 8013998:	f023 0303 	bic.w	r3, r3, #3
 801399c:	f043 0302 	orr.w	r3, r3, #2
 80139a0:	81a3      	strh	r3, [r4, #12]
 80139a2:	e7e3      	b.n	801396c <__smakebuf_r+0xc>
 80139a4:	4b0d      	ldr	r3, [pc, #52]	; (80139dc <__smakebuf_r+0x7c>)
 80139a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80139a8:	89a3      	ldrh	r3, [r4, #12]
 80139aa:	6020      	str	r0, [r4, #0]
 80139ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80139b0:	81a3      	strh	r3, [r4, #12]
 80139b2:	9b00      	ldr	r3, [sp, #0]
 80139b4:	6163      	str	r3, [r4, #20]
 80139b6:	9b01      	ldr	r3, [sp, #4]
 80139b8:	6120      	str	r0, [r4, #16]
 80139ba:	b15b      	cbz	r3, 80139d4 <__smakebuf_r+0x74>
 80139bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80139c0:	4630      	mov	r0, r6
 80139c2:	f001 f81b 	bl	80149fc <_isatty_r>
 80139c6:	b128      	cbz	r0, 80139d4 <__smakebuf_r+0x74>
 80139c8:	89a3      	ldrh	r3, [r4, #12]
 80139ca:	f023 0303 	bic.w	r3, r3, #3
 80139ce:	f043 0301 	orr.w	r3, r3, #1
 80139d2:	81a3      	strh	r3, [r4, #12]
 80139d4:	89a3      	ldrh	r3, [r4, #12]
 80139d6:	431d      	orrs	r5, r3
 80139d8:	81a5      	strh	r5, [r4, #12]
 80139da:	e7cd      	b.n	8013978 <__smakebuf_r+0x18>
 80139dc:	08013161 	.word	0x08013161

080139e0 <malloc>:
 80139e0:	4b02      	ldr	r3, [pc, #8]	; (80139ec <malloc+0xc>)
 80139e2:	4601      	mov	r1, r0
 80139e4:	6818      	ldr	r0, [r3, #0]
 80139e6:	f000 bc71 	b.w	80142cc <_malloc_r>
 80139ea:	bf00      	nop
 80139ec:	20000178 	.word	0x20000178

080139f0 <__ascii_mbtowc>:
 80139f0:	b082      	sub	sp, #8
 80139f2:	b901      	cbnz	r1, 80139f6 <__ascii_mbtowc+0x6>
 80139f4:	a901      	add	r1, sp, #4
 80139f6:	b142      	cbz	r2, 8013a0a <__ascii_mbtowc+0x1a>
 80139f8:	b14b      	cbz	r3, 8013a0e <__ascii_mbtowc+0x1e>
 80139fa:	7813      	ldrb	r3, [r2, #0]
 80139fc:	600b      	str	r3, [r1, #0]
 80139fe:	7812      	ldrb	r2, [r2, #0]
 8013a00:	1c10      	adds	r0, r2, #0
 8013a02:	bf18      	it	ne
 8013a04:	2001      	movne	r0, #1
 8013a06:	b002      	add	sp, #8
 8013a08:	4770      	bx	lr
 8013a0a:	4610      	mov	r0, r2
 8013a0c:	e7fb      	b.n	8013a06 <__ascii_mbtowc+0x16>
 8013a0e:	f06f 0001 	mvn.w	r0, #1
 8013a12:	e7f8      	b.n	8013a06 <__ascii_mbtowc+0x16>

08013a14 <_Balloc>:
 8013a14:	b570      	push	{r4, r5, r6, lr}
 8013a16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013a18:	4604      	mov	r4, r0
 8013a1a:	460e      	mov	r6, r1
 8013a1c:	b93d      	cbnz	r5, 8013a2e <_Balloc+0x1a>
 8013a1e:	2010      	movs	r0, #16
 8013a20:	f7ff ffde 	bl	80139e0 <malloc>
 8013a24:	6260      	str	r0, [r4, #36]	; 0x24
 8013a26:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013a2a:	6005      	str	r5, [r0, #0]
 8013a2c:	60c5      	str	r5, [r0, #12]
 8013a2e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8013a30:	68eb      	ldr	r3, [r5, #12]
 8013a32:	b183      	cbz	r3, 8013a56 <_Balloc+0x42>
 8013a34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013a36:	68db      	ldr	r3, [r3, #12]
 8013a38:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013a3c:	b9b8      	cbnz	r0, 8013a6e <_Balloc+0x5a>
 8013a3e:	2101      	movs	r1, #1
 8013a40:	fa01 f506 	lsl.w	r5, r1, r6
 8013a44:	1d6a      	adds	r2, r5, #5
 8013a46:	0092      	lsls	r2, r2, #2
 8013a48:	4620      	mov	r0, r4
 8013a4a:	f000 fbe2 	bl	8014212 <_calloc_r>
 8013a4e:	b160      	cbz	r0, 8013a6a <_Balloc+0x56>
 8013a50:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8013a54:	e00e      	b.n	8013a74 <_Balloc+0x60>
 8013a56:	2221      	movs	r2, #33	; 0x21
 8013a58:	2104      	movs	r1, #4
 8013a5a:	4620      	mov	r0, r4
 8013a5c:	f000 fbd9 	bl	8014212 <_calloc_r>
 8013a60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013a62:	60e8      	str	r0, [r5, #12]
 8013a64:	68db      	ldr	r3, [r3, #12]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d1e4      	bne.n	8013a34 <_Balloc+0x20>
 8013a6a:	2000      	movs	r0, #0
 8013a6c:	bd70      	pop	{r4, r5, r6, pc}
 8013a6e:	6802      	ldr	r2, [r0, #0]
 8013a70:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8013a74:	2300      	movs	r3, #0
 8013a76:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013a7a:	e7f7      	b.n	8013a6c <_Balloc+0x58>

08013a7c <_Bfree>:
 8013a7c:	b570      	push	{r4, r5, r6, lr}
 8013a7e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8013a80:	4606      	mov	r6, r0
 8013a82:	460d      	mov	r5, r1
 8013a84:	b93c      	cbnz	r4, 8013a96 <_Bfree+0x1a>
 8013a86:	2010      	movs	r0, #16
 8013a88:	f7ff ffaa 	bl	80139e0 <malloc>
 8013a8c:	6270      	str	r0, [r6, #36]	; 0x24
 8013a8e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013a92:	6004      	str	r4, [r0, #0]
 8013a94:	60c4      	str	r4, [r0, #12]
 8013a96:	b13d      	cbz	r5, 8013aa8 <_Bfree+0x2c>
 8013a98:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013a9a:	686a      	ldr	r2, [r5, #4]
 8013a9c:	68db      	ldr	r3, [r3, #12]
 8013a9e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013aa2:	6029      	str	r1, [r5, #0]
 8013aa4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8013aa8:	bd70      	pop	{r4, r5, r6, pc}

08013aaa <__multadd>:
 8013aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013aae:	690d      	ldr	r5, [r1, #16]
 8013ab0:	461f      	mov	r7, r3
 8013ab2:	4606      	mov	r6, r0
 8013ab4:	460c      	mov	r4, r1
 8013ab6:	f101 0c14 	add.w	ip, r1, #20
 8013aba:	2300      	movs	r3, #0
 8013abc:	f8dc 0000 	ldr.w	r0, [ip]
 8013ac0:	b281      	uxth	r1, r0
 8013ac2:	fb02 7101 	mla	r1, r2, r1, r7
 8013ac6:	0c0f      	lsrs	r7, r1, #16
 8013ac8:	0c00      	lsrs	r0, r0, #16
 8013aca:	fb02 7000 	mla	r0, r2, r0, r7
 8013ace:	b289      	uxth	r1, r1
 8013ad0:	3301      	adds	r3, #1
 8013ad2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8013ad6:	429d      	cmp	r5, r3
 8013ad8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8013adc:	f84c 1b04 	str.w	r1, [ip], #4
 8013ae0:	dcec      	bgt.n	8013abc <__multadd+0x12>
 8013ae2:	b1d7      	cbz	r7, 8013b1a <__multadd+0x70>
 8013ae4:	68a3      	ldr	r3, [r4, #8]
 8013ae6:	42ab      	cmp	r3, r5
 8013ae8:	dc12      	bgt.n	8013b10 <__multadd+0x66>
 8013aea:	6861      	ldr	r1, [r4, #4]
 8013aec:	4630      	mov	r0, r6
 8013aee:	3101      	adds	r1, #1
 8013af0:	f7ff ff90 	bl	8013a14 <_Balloc>
 8013af4:	6922      	ldr	r2, [r4, #16]
 8013af6:	3202      	adds	r2, #2
 8013af8:	f104 010c 	add.w	r1, r4, #12
 8013afc:	4680      	mov	r8, r0
 8013afe:	0092      	lsls	r2, r2, #2
 8013b00:	300c      	adds	r0, #12
 8013b02:	f7fc ffcd 	bl	8010aa0 <memcpy>
 8013b06:	4621      	mov	r1, r4
 8013b08:	4630      	mov	r0, r6
 8013b0a:	f7ff ffb7 	bl	8013a7c <_Bfree>
 8013b0e:	4644      	mov	r4, r8
 8013b10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013b14:	3501      	adds	r5, #1
 8013b16:	615f      	str	r7, [r3, #20]
 8013b18:	6125      	str	r5, [r4, #16]
 8013b1a:	4620      	mov	r0, r4
 8013b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013b20 <__s2b>:
 8013b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b24:	460c      	mov	r4, r1
 8013b26:	4615      	mov	r5, r2
 8013b28:	461f      	mov	r7, r3
 8013b2a:	2209      	movs	r2, #9
 8013b2c:	3308      	adds	r3, #8
 8013b2e:	4606      	mov	r6, r0
 8013b30:	fb93 f3f2 	sdiv	r3, r3, r2
 8013b34:	2100      	movs	r1, #0
 8013b36:	2201      	movs	r2, #1
 8013b38:	429a      	cmp	r2, r3
 8013b3a:	db20      	blt.n	8013b7e <__s2b+0x5e>
 8013b3c:	4630      	mov	r0, r6
 8013b3e:	f7ff ff69 	bl	8013a14 <_Balloc>
 8013b42:	9b08      	ldr	r3, [sp, #32]
 8013b44:	6143      	str	r3, [r0, #20]
 8013b46:	2d09      	cmp	r5, #9
 8013b48:	f04f 0301 	mov.w	r3, #1
 8013b4c:	6103      	str	r3, [r0, #16]
 8013b4e:	dd19      	ble.n	8013b84 <__s2b+0x64>
 8013b50:	f104 0809 	add.w	r8, r4, #9
 8013b54:	46c1      	mov	r9, r8
 8013b56:	442c      	add	r4, r5
 8013b58:	f819 3b01 	ldrb.w	r3, [r9], #1
 8013b5c:	4601      	mov	r1, r0
 8013b5e:	3b30      	subs	r3, #48	; 0x30
 8013b60:	220a      	movs	r2, #10
 8013b62:	4630      	mov	r0, r6
 8013b64:	f7ff ffa1 	bl	8013aaa <__multadd>
 8013b68:	45a1      	cmp	r9, r4
 8013b6a:	d1f5      	bne.n	8013b58 <__s2b+0x38>
 8013b6c:	eb08 0405 	add.w	r4, r8, r5
 8013b70:	3c08      	subs	r4, #8
 8013b72:	1b2d      	subs	r5, r5, r4
 8013b74:	1963      	adds	r3, r4, r5
 8013b76:	42bb      	cmp	r3, r7
 8013b78:	db07      	blt.n	8013b8a <__s2b+0x6a>
 8013b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b7e:	0052      	lsls	r2, r2, #1
 8013b80:	3101      	adds	r1, #1
 8013b82:	e7d9      	b.n	8013b38 <__s2b+0x18>
 8013b84:	340a      	adds	r4, #10
 8013b86:	2509      	movs	r5, #9
 8013b88:	e7f3      	b.n	8013b72 <__s2b+0x52>
 8013b8a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013b8e:	4601      	mov	r1, r0
 8013b90:	3b30      	subs	r3, #48	; 0x30
 8013b92:	220a      	movs	r2, #10
 8013b94:	4630      	mov	r0, r6
 8013b96:	f7ff ff88 	bl	8013aaa <__multadd>
 8013b9a:	e7eb      	b.n	8013b74 <__s2b+0x54>

08013b9c <__hi0bits>:
 8013b9c:	0c02      	lsrs	r2, r0, #16
 8013b9e:	0412      	lsls	r2, r2, #16
 8013ba0:	4603      	mov	r3, r0
 8013ba2:	b9b2      	cbnz	r2, 8013bd2 <__hi0bits+0x36>
 8013ba4:	0403      	lsls	r3, r0, #16
 8013ba6:	2010      	movs	r0, #16
 8013ba8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013bac:	bf04      	itt	eq
 8013bae:	021b      	lsleq	r3, r3, #8
 8013bb0:	3008      	addeq	r0, #8
 8013bb2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8013bb6:	bf04      	itt	eq
 8013bb8:	011b      	lsleq	r3, r3, #4
 8013bba:	3004      	addeq	r0, #4
 8013bbc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013bc0:	bf04      	itt	eq
 8013bc2:	009b      	lsleq	r3, r3, #2
 8013bc4:	3002      	addeq	r0, #2
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	db06      	blt.n	8013bd8 <__hi0bits+0x3c>
 8013bca:	005b      	lsls	r3, r3, #1
 8013bcc:	d503      	bpl.n	8013bd6 <__hi0bits+0x3a>
 8013bce:	3001      	adds	r0, #1
 8013bd0:	4770      	bx	lr
 8013bd2:	2000      	movs	r0, #0
 8013bd4:	e7e8      	b.n	8013ba8 <__hi0bits+0xc>
 8013bd6:	2020      	movs	r0, #32
 8013bd8:	4770      	bx	lr

08013bda <__lo0bits>:
 8013bda:	6803      	ldr	r3, [r0, #0]
 8013bdc:	f013 0207 	ands.w	r2, r3, #7
 8013be0:	4601      	mov	r1, r0
 8013be2:	d00b      	beq.n	8013bfc <__lo0bits+0x22>
 8013be4:	07da      	lsls	r2, r3, #31
 8013be6:	d423      	bmi.n	8013c30 <__lo0bits+0x56>
 8013be8:	0798      	lsls	r0, r3, #30
 8013bea:	bf49      	itett	mi
 8013bec:	085b      	lsrmi	r3, r3, #1
 8013bee:	089b      	lsrpl	r3, r3, #2
 8013bf0:	2001      	movmi	r0, #1
 8013bf2:	600b      	strmi	r3, [r1, #0]
 8013bf4:	bf5c      	itt	pl
 8013bf6:	600b      	strpl	r3, [r1, #0]
 8013bf8:	2002      	movpl	r0, #2
 8013bfa:	4770      	bx	lr
 8013bfc:	b298      	uxth	r0, r3
 8013bfe:	b9a8      	cbnz	r0, 8013c2c <__lo0bits+0x52>
 8013c00:	0c1b      	lsrs	r3, r3, #16
 8013c02:	2010      	movs	r0, #16
 8013c04:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013c08:	bf04      	itt	eq
 8013c0a:	0a1b      	lsreq	r3, r3, #8
 8013c0c:	3008      	addeq	r0, #8
 8013c0e:	071a      	lsls	r2, r3, #28
 8013c10:	bf04      	itt	eq
 8013c12:	091b      	lsreq	r3, r3, #4
 8013c14:	3004      	addeq	r0, #4
 8013c16:	079a      	lsls	r2, r3, #30
 8013c18:	bf04      	itt	eq
 8013c1a:	089b      	lsreq	r3, r3, #2
 8013c1c:	3002      	addeq	r0, #2
 8013c1e:	07da      	lsls	r2, r3, #31
 8013c20:	d402      	bmi.n	8013c28 <__lo0bits+0x4e>
 8013c22:	085b      	lsrs	r3, r3, #1
 8013c24:	d006      	beq.n	8013c34 <__lo0bits+0x5a>
 8013c26:	3001      	adds	r0, #1
 8013c28:	600b      	str	r3, [r1, #0]
 8013c2a:	4770      	bx	lr
 8013c2c:	4610      	mov	r0, r2
 8013c2e:	e7e9      	b.n	8013c04 <__lo0bits+0x2a>
 8013c30:	2000      	movs	r0, #0
 8013c32:	4770      	bx	lr
 8013c34:	2020      	movs	r0, #32
 8013c36:	4770      	bx	lr

08013c38 <__i2b>:
 8013c38:	b510      	push	{r4, lr}
 8013c3a:	460c      	mov	r4, r1
 8013c3c:	2101      	movs	r1, #1
 8013c3e:	f7ff fee9 	bl	8013a14 <_Balloc>
 8013c42:	2201      	movs	r2, #1
 8013c44:	6144      	str	r4, [r0, #20]
 8013c46:	6102      	str	r2, [r0, #16]
 8013c48:	bd10      	pop	{r4, pc}

08013c4a <__multiply>:
 8013c4a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c4e:	4614      	mov	r4, r2
 8013c50:	690a      	ldr	r2, [r1, #16]
 8013c52:	6923      	ldr	r3, [r4, #16]
 8013c54:	429a      	cmp	r2, r3
 8013c56:	bfb8      	it	lt
 8013c58:	460b      	movlt	r3, r1
 8013c5a:	4688      	mov	r8, r1
 8013c5c:	bfbc      	itt	lt
 8013c5e:	46a0      	movlt	r8, r4
 8013c60:	461c      	movlt	r4, r3
 8013c62:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013c66:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013c6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013c6e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013c72:	eb07 0609 	add.w	r6, r7, r9
 8013c76:	42b3      	cmp	r3, r6
 8013c78:	bfb8      	it	lt
 8013c7a:	3101      	addlt	r1, #1
 8013c7c:	f7ff feca 	bl	8013a14 <_Balloc>
 8013c80:	f100 0514 	add.w	r5, r0, #20
 8013c84:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8013c88:	462b      	mov	r3, r5
 8013c8a:	2200      	movs	r2, #0
 8013c8c:	4573      	cmp	r3, lr
 8013c8e:	d316      	bcc.n	8013cbe <__multiply+0x74>
 8013c90:	f104 0214 	add.w	r2, r4, #20
 8013c94:	f108 0114 	add.w	r1, r8, #20
 8013c98:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8013c9c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8013ca0:	9300      	str	r3, [sp, #0]
 8013ca2:	9b00      	ldr	r3, [sp, #0]
 8013ca4:	9201      	str	r2, [sp, #4]
 8013ca6:	4293      	cmp	r3, r2
 8013ca8:	d80c      	bhi.n	8013cc4 <__multiply+0x7a>
 8013caa:	2e00      	cmp	r6, #0
 8013cac:	dd03      	ble.n	8013cb6 <__multiply+0x6c>
 8013cae:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d05d      	beq.n	8013d72 <__multiply+0x128>
 8013cb6:	6106      	str	r6, [r0, #16]
 8013cb8:	b003      	add	sp, #12
 8013cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cbe:	f843 2b04 	str.w	r2, [r3], #4
 8013cc2:	e7e3      	b.n	8013c8c <__multiply+0x42>
 8013cc4:	f8b2 b000 	ldrh.w	fp, [r2]
 8013cc8:	f1bb 0f00 	cmp.w	fp, #0
 8013ccc:	d023      	beq.n	8013d16 <__multiply+0xcc>
 8013cce:	4689      	mov	r9, r1
 8013cd0:	46ac      	mov	ip, r5
 8013cd2:	f04f 0800 	mov.w	r8, #0
 8013cd6:	f859 4b04 	ldr.w	r4, [r9], #4
 8013cda:	f8dc a000 	ldr.w	sl, [ip]
 8013cde:	b2a3      	uxth	r3, r4
 8013ce0:	fa1f fa8a 	uxth.w	sl, sl
 8013ce4:	fb0b a303 	mla	r3, fp, r3, sl
 8013ce8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013cec:	f8dc 4000 	ldr.w	r4, [ip]
 8013cf0:	4443      	add	r3, r8
 8013cf2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013cf6:	fb0b 840a 	mla	r4, fp, sl, r8
 8013cfa:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8013cfe:	46e2      	mov	sl, ip
 8013d00:	b29b      	uxth	r3, r3
 8013d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013d06:	454f      	cmp	r7, r9
 8013d08:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013d0c:	f84a 3b04 	str.w	r3, [sl], #4
 8013d10:	d82b      	bhi.n	8013d6a <__multiply+0x120>
 8013d12:	f8cc 8004 	str.w	r8, [ip, #4]
 8013d16:	9b01      	ldr	r3, [sp, #4]
 8013d18:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8013d1c:	3204      	adds	r2, #4
 8013d1e:	f1ba 0f00 	cmp.w	sl, #0
 8013d22:	d020      	beq.n	8013d66 <__multiply+0x11c>
 8013d24:	682b      	ldr	r3, [r5, #0]
 8013d26:	4689      	mov	r9, r1
 8013d28:	46a8      	mov	r8, r5
 8013d2a:	f04f 0b00 	mov.w	fp, #0
 8013d2e:	f8b9 c000 	ldrh.w	ip, [r9]
 8013d32:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8013d36:	fb0a 440c 	mla	r4, sl, ip, r4
 8013d3a:	445c      	add	r4, fp
 8013d3c:	46c4      	mov	ip, r8
 8013d3e:	b29b      	uxth	r3, r3
 8013d40:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013d44:	f84c 3b04 	str.w	r3, [ip], #4
 8013d48:	f859 3b04 	ldr.w	r3, [r9], #4
 8013d4c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8013d50:	0c1b      	lsrs	r3, r3, #16
 8013d52:	fb0a b303 	mla	r3, sl, r3, fp
 8013d56:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8013d5a:	454f      	cmp	r7, r9
 8013d5c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8013d60:	d805      	bhi.n	8013d6e <__multiply+0x124>
 8013d62:	f8c8 3004 	str.w	r3, [r8, #4]
 8013d66:	3504      	adds	r5, #4
 8013d68:	e79b      	b.n	8013ca2 <__multiply+0x58>
 8013d6a:	46d4      	mov	ip, sl
 8013d6c:	e7b3      	b.n	8013cd6 <__multiply+0x8c>
 8013d6e:	46e0      	mov	r8, ip
 8013d70:	e7dd      	b.n	8013d2e <__multiply+0xe4>
 8013d72:	3e01      	subs	r6, #1
 8013d74:	e799      	b.n	8013caa <__multiply+0x60>
	...

08013d78 <__pow5mult>:
 8013d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d7c:	4615      	mov	r5, r2
 8013d7e:	f012 0203 	ands.w	r2, r2, #3
 8013d82:	4606      	mov	r6, r0
 8013d84:	460f      	mov	r7, r1
 8013d86:	d007      	beq.n	8013d98 <__pow5mult+0x20>
 8013d88:	3a01      	subs	r2, #1
 8013d8a:	4c21      	ldr	r4, [pc, #132]	; (8013e10 <__pow5mult+0x98>)
 8013d8c:	2300      	movs	r3, #0
 8013d8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013d92:	f7ff fe8a 	bl	8013aaa <__multadd>
 8013d96:	4607      	mov	r7, r0
 8013d98:	10ad      	asrs	r5, r5, #2
 8013d9a:	d035      	beq.n	8013e08 <__pow5mult+0x90>
 8013d9c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013d9e:	b93c      	cbnz	r4, 8013db0 <__pow5mult+0x38>
 8013da0:	2010      	movs	r0, #16
 8013da2:	f7ff fe1d 	bl	80139e0 <malloc>
 8013da6:	6270      	str	r0, [r6, #36]	; 0x24
 8013da8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013dac:	6004      	str	r4, [r0, #0]
 8013dae:	60c4      	str	r4, [r0, #12]
 8013db0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013db4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013db8:	b94c      	cbnz	r4, 8013dce <__pow5mult+0x56>
 8013dba:	f240 2171 	movw	r1, #625	; 0x271
 8013dbe:	4630      	mov	r0, r6
 8013dc0:	f7ff ff3a 	bl	8013c38 <__i2b>
 8013dc4:	2300      	movs	r3, #0
 8013dc6:	f8c8 0008 	str.w	r0, [r8, #8]
 8013dca:	4604      	mov	r4, r0
 8013dcc:	6003      	str	r3, [r0, #0]
 8013dce:	f04f 0800 	mov.w	r8, #0
 8013dd2:	07eb      	lsls	r3, r5, #31
 8013dd4:	d50a      	bpl.n	8013dec <__pow5mult+0x74>
 8013dd6:	4639      	mov	r1, r7
 8013dd8:	4622      	mov	r2, r4
 8013dda:	4630      	mov	r0, r6
 8013ddc:	f7ff ff35 	bl	8013c4a <__multiply>
 8013de0:	4639      	mov	r1, r7
 8013de2:	4681      	mov	r9, r0
 8013de4:	4630      	mov	r0, r6
 8013de6:	f7ff fe49 	bl	8013a7c <_Bfree>
 8013dea:	464f      	mov	r7, r9
 8013dec:	106d      	asrs	r5, r5, #1
 8013dee:	d00b      	beq.n	8013e08 <__pow5mult+0x90>
 8013df0:	6820      	ldr	r0, [r4, #0]
 8013df2:	b938      	cbnz	r0, 8013e04 <__pow5mult+0x8c>
 8013df4:	4622      	mov	r2, r4
 8013df6:	4621      	mov	r1, r4
 8013df8:	4630      	mov	r0, r6
 8013dfa:	f7ff ff26 	bl	8013c4a <__multiply>
 8013dfe:	6020      	str	r0, [r4, #0]
 8013e00:	f8c0 8000 	str.w	r8, [r0]
 8013e04:	4604      	mov	r4, r0
 8013e06:	e7e4      	b.n	8013dd2 <__pow5mult+0x5a>
 8013e08:	4638      	mov	r0, r7
 8013e0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e0e:	bf00      	nop
 8013e10:	08016e08 	.word	0x08016e08

08013e14 <__lshift>:
 8013e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e18:	460c      	mov	r4, r1
 8013e1a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013e1e:	6923      	ldr	r3, [r4, #16]
 8013e20:	6849      	ldr	r1, [r1, #4]
 8013e22:	eb0a 0903 	add.w	r9, sl, r3
 8013e26:	68a3      	ldr	r3, [r4, #8]
 8013e28:	4607      	mov	r7, r0
 8013e2a:	4616      	mov	r6, r2
 8013e2c:	f109 0501 	add.w	r5, r9, #1
 8013e30:	42ab      	cmp	r3, r5
 8013e32:	db32      	blt.n	8013e9a <__lshift+0x86>
 8013e34:	4638      	mov	r0, r7
 8013e36:	f7ff fded 	bl	8013a14 <_Balloc>
 8013e3a:	2300      	movs	r3, #0
 8013e3c:	4680      	mov	r8, r0
 8013e3e:	f100 0114 	add.w	r1, r0, #20
 8013e42:	461a      	mov	r2, r3
 8013e44:	4553      	cmp	r3, sl
 8013e46:	db2b      	blt.n	8013ea0 <__lshift+0x8c>
 8013e48:	6920      	ldr	r0, [r4, #16]
 8013e4a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013e4e:	f104 0314 	add.w	r3, r4, #20
 8013e52:	f016 021f 	ands.w	r2, r6, #31
 8013e56:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013e5a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013e5e:	d025      	beq.n	8013eac <__lshift+0x98>
 8013e60:	f1c2 0e20 	rsb	lr, r2, #32
 8013e64:	2000      	movs	r0, #0
 8013e66:	681e      	ldr	r6, [r3, #0]
 8013e68:	468a      	mov	sl, r1
 8013e6a:	4096      	lsls	r6, r2
 8013e6c:	4330      	orrs	r0, r6
 8013e6e:	f84a 0b04 	str.w	r0, [sl], #4
 8013e72:	f853 0b04 	ldr.w	r0, [r3], #4
 8013e76:	459c      	cmp	ip, r3
 8013e78:	fa20 f00e 	lsr.w	r0, r0, lr
 8013e7c:	d814      	bhi.n	8013ea8 <__lshift+0x94>
 8013e7e:	6048      	str	r0, [r1, #4]
 8013e80:	b108      	cbz	r0, 8013e86 <__lshift+0x72>
 8013e82:	f109 0502 	add.w	r5, r9, #2
 8013e86:	3d01      	subs	r5, #1
 8013e88:	4638      	mov	r0, r7
 8013e8a:	f8c8 5010 	str.w	r5, [r8, #16]
 8013e8e:	4621      	mov	r1, r4
 8013e90:	f7ff fdf4 	bl	8013a7c <_Bfree>
 8013e94:	4640      	mov	r0, r8
 8013e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e9a:	3101      	adds	r1, #1
 8013e9c:	005b      	lsls	r3, r3, #1
 8013e9e:	e7c7      	b.n	8013e30 <__lshift+0x1c>
 8013ea0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8013ea4:	3301      	adds	r3, #1
 8013ea6:	e7cd      	b.n	8013e44 <__lshift+0x30>
 8013ea8:	4651      	mov	r1, sl
 8013eaa:	e7dc      	b.n	8013e66 <__lshift+0x52>
 8013eac:	3904      	subs	r1, #4
 8013eae:	f853 2b04 	ldr.w	r2, [r3], #4
 8013eb2:	f841 2f04 	str.w	r2, [r1, #4]!
 8013eb6:	459c      	cmp	ip, r3
 8013eb8:	d8f9      	bhi.n	8013eae <__lshift+0x9a>
 8013eba:	e7e4      	b.n	8013e86 <__lshift+0x72>

08013ebc <__mcmp>:
 8013ebc:	6903      	ldr	r3, [r0, #16]
 8013ebe:	690a      	ldr	r2, [r1, #16]
 8013ec0:	1a9b      	subs	r3, r3, r2
 8013ec2:	b530      	push	{r4, r5, lr}
 8013ec4:	d10c      	bne.n	8013ee0 <__mcmp+0x24>
 8013ec6:	0092      	lsls	r2, r2, #2
 8013ec8:	3014      	adds	r0, #20
 8013eca:	3114      	adds	r1, #20
 8013ecc:	1884      	adds	r4, r0, r2
 8013ece:	4411      	add	r1, r2
 8013ed0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013ed4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013ed8:	4295      	cmp	r5, r2
 8013eda:	d003      	beq.n	8013ee4 <__mcmp+0x28>
 8013edc:	d305      	bcc.n	8013eea <__mcmp+0x2e>
 8013ede:	2301      	movs	r3, #1
 8013ee0:	4618      	mov	r0, r3
 8013ee2:	bd30      	pop	{r4, r5, pc}
 8013ee4:	42a0      	cmp	r0, r4
 8013ee6:	d3f3      	bcc.n	8013ed0 <__mcmp+0x14>
 8013ee8:	e7fa      	b.n	8013ee0 <__mcmp+0x24>
 8013eea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013eee:	e7f7      	b.n	8013ee0 <__mcmp+0x24>

08013ef0 <__mdiff>:
 8013ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ef4:	460d      	mov	r5, r1
 8013ef6:	4607      	mov	r7, r0
 8013ef8:	4611      	mov	r1, r2
 8013efa:	4628      	mov	r0, r5
 8013efc:	4614      	mov	r4, r2
 8013efe:	f7ff ffdd 	bl	8013ebc <__mcmp>
 8013f02:	1e06      	subs	r6, r0, #0
 8013f04:	d108      	bne.n	8013f18 <__mdiff+0x28>
 8013f06:	4631      	mov	r1, r6
 8013f08:	4638      	mov	r0, r7
 8013f0a:	f7ff fd83 	bl	8013a14 <_Balloc>
 8013f0e:	2301      	movs	r3, #1
 8013f10:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8013f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f18:	bfa4      	itt	ge
 8013f1a:	4623      	movge	r3, r4
 8013f1c:	462c      	movge	r4, r5
 8013f1e:	4638      	mov	r0, r7
 8013f20:	6861      	ldr	r1, [r4, #4]
 8013f22:	bfa6      	itte	ge
 8013f24:	461d      	movge	r5, r3
 8013f26:	2600      	movge	r6, #0
 8013f28:	2601      	movlt	r6, #1
 8013f2a:	f7ff fd73 	bl	8013a14 <_Balloc>
 8013f2e:	692b      	ldr	r3, [r5, #16]
 8013f30:	60c6      	str	r6, [r0, #12]
 8013f32:	6926      	ldr	r6, [r4, #16]
 8013f34:	f105 0914 	add.w	r9, r5, #20
 8013f38:	f104 0214 	add.w	r2, r4, #20
 8013f3c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8013f40:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8013f44:	f100 0514 	add.w	r5, r0, #20
 8013f48:	f04f 0e00 	mov.w	lr, #0
 8013f4c:	f852 ab04 	ldr.w	sl, [r2], #4
 8013f50:	f859 4b04 	ldr.w	r4, [r9], #4
 8013f54:	fa1e f18a 	uxtah	r1, lr, sl
 8013f58:	b2a3      	uxth	r3, r4
 8013f5a:	1ac9      	subs	r1, r1, r3
 8013f5c:	0c23      	lsrs	r3, r4, #16
 8013f5e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8013f62:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8013f66:	b289      	uxth	r1, r1
 8013f68:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8013f6c:	45c8      	cmp	r8, r9
 8013f6e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8013f72:	4694      	mov	ip, r2
 8013f74:	f845 3b04 	str.w	r3, [r5], #4
 8013f78:	d8e8      	bhi.n	8013f4c <__mdiff+0x5c>
 8013f7a:	45bc      	cmp	ip, r7
 8013f7c:	d304      	bcc.n	8013f88 <__mdiff+0x98>
 8013f7e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8013f82:	b183      	cbz	r3, 8013fa6 <__mdiff+0xb6>
 8013f84:	6106      	str	r6, [r0, #16]
 8013f86:	e7c5      	b.n	8013f14 <__mdiff+0x24>
 8013f88:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013f8c:	fa1e f381 	uxtah	r3, lr, r1
 8013f90:	141a      	asrs	r2, r3, #16
 8013f92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013f96:	b29b      	uxth	r3, r3
 8013f98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013f9c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8013fa0:	f845 3b04 	str.w	r3, [r5], #4
 8013fa4:	e7e9      	b.n	8013f7a <__mdiff+0x8a>
 8013fa6:	3e01      	subs	r6, #1
 8013fa8:	e7e9      	b.n	8013f7e <__mdiff+0x8e>
	...

08013fac <__ulp>:
 8013fac:	4b12      	ldr	r3, [pc, #72]	; (8013ff8 <__ulp+0x4c>)
 8013fae:	ee10 2a90 	vmov	r2, s1
 8013fb2:	401a      	ands	r2, r3
 8013fb4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	dd04      	ble.n	8013fc6 <__ulp+0x1a>
 8013fbc:	2000      	movs	r0, #0
 8013fbe:	4619      	mov	r1, r3
 8013fc0:	ec41 0b10 	vmov	d0, r0, r1
 8013fc4:	4770      	bx	lr
 8013fc6:	425b      	negs	r3, r3
 8013fc8:	151b      	asrs	r3, r3, #20
 8013fca:	2b13      	cmp	r3, #19
 8013fcc:	f04f 0000 	mov.w	r0, #0
 8013fd0:	f04f 0100 	mov.w	r1, #0
 8013fd4:	dc04      	bgt.n	8013fe0 <__ulp+0x34>
 8013fd6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8013fda:	fa42 f103 	asr.w	r1, r2, r3
 8013fde:	e7ef      	b.n	8013fc0 <__ulp+0x14>
 8013fe0:	3b14      	subs	r3, #20
 8013fe2:	2b1e      	cmp	r3, #30
 8013fe4:	f04f 0201 	mov.w	r2, #1
 8013fe8:	bfda      	itte	le
 8013fea:	f1c3 031f 	rsble	r3, r3, #31
 8013fee:	fa02 f303 	lslle.w	r3, r2, r3
 8013ff2:	4613      	movgt	r3, r2
 8013ff4:	4618      	mov	r0, r3
 8013ff6:	e7e3      	b.n	8013fc0 <__ulp+0x14>
 8013ff8:	7ff00000 	.word	0x7ff00000

08013ffc <__b2d>:
 8013ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ffe:	6905      	ldr	r5, [r0, #16]
 8014000:	f100 0714 	add.w	r7, r0, #20
 8014004:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8014008:	1f2e      	subs	r6, r5, #4
 801400a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801400e:	4620      	mov	r0, r4
 8014010:	f7ff fdc4 	bl	8013b9c <__hi0bits>
 8014014:	f1c0 0320 	rsb	r3, r0, #32
 8014018:	280a      	cmp	r0, #10
 801401a:	600b      	str	r3, [r1, #0]
 801401c:	f8df c074 	ldr.w	ip, [pc, #116]	; 8014094 <__b2d+0x98>
 8014020:	dc14      	bgt.n	801404c <__b2d+0x50>
 8014022:	f1c0 0e0b 	rsb	lr, r0, #11
 8014026:	fa24 f10e 	lsr.w	r1, r4, lr
 801402a:	42b7      	cmp	r7, r6
 801402c:	ea41 030c 	orr.w	r3, r1, ip
 8014030:	bf34      	ite	cc
 8014032:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8014036:	2100      	movcs	r1, #0
 8014038:	3015      	adds	r0, #21
 801403a:	fa04 f000 	lsl.w	r0, r4, r0
 801403e:	fa21 f10e 	lsr.w	r1, r1, lr
 8014042:	ea40 0201 	orr.w	r2, r0, r1
 8014046:	ec43 2b10 	vmov	d0, r2, r3
 801404a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801404c:	42b7      	cmp	r7, r6
 801404e:	bf3a      	itte	cc
 8014050:	f1a5 0608 	subcc.w	r6, r5, #8
 8014054:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8014058:	2100      	movcs	r1, #0
 801405a:	380b      	subs	r0, #11
 801405c:	d015      	beq.n	801408a <__b2d+0x8e>
 801405e:	4084      	lsls	r4, r0
 8014060:	f1c0 0520 	rsb	r5, r0, #32
 8014064:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8014068:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801406c:	42be      	cmp	r6, r7
 801406e:	fa21 fc05 	lsr.w	ip, r1, r5
 8014072:	ea44 030c 	orr.w	r3, r4, ip
 8014076:	bf8c      	ite	hi
 8014078:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801407c:	2400      	movls	r4, #0
 801407e:	fa01 f000 	lsl.w	r0, r1, r0
 8014082:	40ec      	lsrs	r4, r5
 8014084:	ea40 0204 	orr.w	r2, r0, r4
 8014088:	e7dd      	b.n	8014046 <__b2d+0x4a>
 801408a:	ea44 030c 	orr.w	r3, r4, ip
 801408e:	460a      	mov	r2, r1
 8014090:	e7d9      	b.n	8014046 <__b2d+0x4a>
 8014092:	bf00      	nop
 8014094:	3ff00000 	.word	0x3ff00000

08014098 <__d2b>:
 8014098:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801409c:	460e      	mov	r6, r1
 801409e:	2101      	movs	r1, #1
 80140a0:	ec59 8b10 	vmov	r8, r9, d0
 80140a4:	4615      	mov	r5, r2
 80140a6:	f7ff fcb5 	bl	8013a14 <_Balloc>
 80140aa:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80140ae:	4607      	mov	r7, r0
 80140b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80140b4:	bb34      	cbnz	r4, 8014104 <__d2b+0x6c>
 80140b6:	9301      	str	r3, [sp, #4]
 80140b8:	f1b8 0300 	subs.w	r3, r8, #0
 80140bc:	d027      	beq.n	801410e <__d2b+0x76>
 80140be:	a802      	add	r0, sp, #8
 80140c0:	f840 3d08 	str.w	r3, [r0, #-8]!
 80140c4:	f7ff fd89 	bl	8013bda <__lo0bits>
 80140c8:	9900      	ldr	r1, [sp, #0]
 80140ca:	b1f0      	cbz	r0, 801410a <__d2b+0x72>
 80140cc:	9a01      	ldr	r2, [sp, #4]
 80140ce:	f1c0 0320 	rsb	r3, r0, #32
 80140d2:	fa02 f303 	lsl.w	r3, r2, r3
 80140d6:	430b      	orrs	r3, r1
 80140d8:	40c2      	lsrs	r2, r0
 80140da:	617b      	str	r3, [r7, #20]
 80140dc:	9201      	str	r2, [sp, #4]
 80140de:	9b01      	ldr	r3, [sp, #4]
 80140e0:	61bb      	str	r3, [r7, #24]
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	bf14      	ite	ne
 80140e6:	2102      	movne	r1, #2
 80140e8:	2101      	moveq	r1, #1
 80140ea:	6139      	str	r1, [r7, #16]
 80140ec:	b1c4      	cbz	r4, 8014120 <__d2b+0x88>
 80140ee:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80140f2:	4404      	add	r4, r0
 80140f4:	6034      	str	r4, [r6, #0]
 80140f6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80140fa:	6028      	str	r0, [r5, #0]
 80140fc:	4638      	mov	r0, r7
 80140fe:	b003      	add	sp, #12
 8014100:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014104:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014108:	e7d5      	b.n	80140b6 <__d2b+0x1e>
 801410a:	6179      	str	r1, [r7, #20]
 801410c:	e7e7      	b.n	80140de <__d2b+0x46>
 801410e:	a801      	add	r0, sp, #4
 8014110:	f7ff fd63 	bl	8013bda <__lo0bits>
 8014114:	9b01      	ldr	r3, [sp, #4]
 8014116:	617b      	str	r3, [r7, #20]
 8014118:	2101      	movs	r1, #1
 801411a:	6139      	str	r1, [r7, #16]
 801411c:	3020      	adds	r0, #32
 801411e:	e7e5      	b.n	80140ec <__d2b+0x54>
 8014120:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8014124:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014128:	6030      	str	r0, [r6, #0]
 801412a:	6918      	ldr	r0, [r3, #16]
 801412c:	f7ff fd36 	bl	8013b9c <__hi0bits>
 8014130:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8014134:	e7e1      	b.n	80140fa <__d2b+0x62>

08014136 <__ratio>:
 8014136:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801413a:	4688      	mov	r8, r1
 801413c:	4669      	mov	r1, sp
 801413e:	4681      	mov	r9, r0
 8014140:	f7ff ff5c 	bl	8013ffc <__b2d>
 8014144:	a901      	add	r1, sp, #4
 8014146:	4640      	mov	r0, r8
 8014148:	ec57 6b10 	vmov	r6, r7, d0
 801414c:	f7ff ff56 	bl	8013ffc <__b2d>
 8014150:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014154:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014158:	eba3 0c02 	sub.w	ip, r3, r2
 801415c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014160:	1a9b      	subs	r3, r3, r2
 8014162:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8014166:	ec5b ab10 	vmov	sl, fp, d0
 801416a:	2b00      	cmp	r3, #0
 801416c:	bfce      	itee	gt
 801416e:	463a      	movgt	r2, r7
 8014170:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014174:	465a      	movle	r2, fp
 8014176:	4659      	mov	r1, fp
 8014178:	463d      	mov	r5, r7
 801417a:	bfd4      	ite	le
 801417c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8014180:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8014184:	4630      	mov	r0, r6
 8014186:	ee10 2a10 	vmov	r2, s0
 801418a:	460b      	mov	r3, r1
 801418c:	4629      	mov	r1, r5
 801418e:	f7ec fb5d 	bl	800084c <__aeabi_ddiv>
 8014192:	ec41 0b10 	vmov	d0, r0, r1
 8014196:	b003      	add	sp, #12
 8014198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801419c <__copybits>:
 801419c:	3901      	subs	r1, #1
 801419e:	b510      	push	{r4, lr}
 80141a0:	1149      	asrs	r1, r1, #5
 80141a2:	6914      	ldr	r4, [r2, #16]
 80141a4:	3101      	adds	r1, #1
 80141a6:	f102 0314 	add.w	r3, r2, #20
 80141aa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80141ae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80141b2:	42a3      	cmp	r3, r4
 80141b4:	4602      	mov	r2, r0
 80141b6:	d303      	bcc.n	80141c0 <__copybits+0x24>
 80141b8:	2300      	movs	r3, #0
 80141ba:	428a      	cmp	r2, r1
 80141bc:	d305      	bcc.n	80141ca <__copybits+0x2e>
 80141be:	bd10      	pop	{r4, pc}
 80141c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80141c4:	f840 2b04 	str.w	r2, [r0], #4
 80141c8:	e7f3      	b.n	80141b2 <__copybits+0x16>
 80141ca:	f842 3b04 	str.w	r3, [r2], #4
 80141ce:	e7f4      	b.n	80141ba <__copybits+0x1e>

080141d0 <__any_on>:
 80141d0:	f100 0214 	add.w	r2, r0, #20
 80141d4:	6900      	ldr	r0, [r0, #16]
 80141d6:	114b      	asrs	r3, r1, #5
 80141d8:	4298      	cmp	r0, r3
 80141da:	b510      	push	{r4, lr}
 80141dc:	db11      	blt.n	8014202 <__any_on+0x32>
 80141de:	dd0a      	ble.n	80141f6 <__any_on+0x26>
 80141e0:	f011 011f 	ands.w	r1, r1, #31
 80141e4:	d007      	beq.n	80141f6 <__any_on+0x26>
 80141e6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80141ea:	fa24 f001 	lsr.w	r0, r4, r1
 80141ee:	fa00 f101 	lsl.w	r1, r0, r1
 80141f2:	428c      	cmp	r4, r1
 80141f4:	d10b      	bne.n	801420e <__any_on+0x3e>
 80141f6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80141fa:	4293      	cmp	r3, r2
 80141fc:	d803      	bhi.n	8014206 <__any_on+0x36>
 80141fe:	2000      	movs	r0, #0
 8014200:	bd10      	pop	{r4, pc}
 8014202:	4603      	mov	r3, r0
 8014204:	e7f7      	b.n	80141f6 <__any_on+0x26>
 8014206:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801420a:	2900      	cmp	r1, #0
 801420c:	d0f5      	beq.n	80141fa <__any_on+0x2a>
 801420e:	2001      	movs	r0, #1
 8014210:	e7f6      	b.n	8014200 <__any_on+0x30>

08014212 <_calloc_r>:
 8014212:	b538      	push	{r3, r4, r5, lr}
 8014214:	fb02 f401 	mul.w	r4, r2, r1
 8014218:	4621      	mov	r1, r4
 801421a:	f000 f857 	bl	80142cc <_malloc_r>
 801421e:	4605      	mov	r5, r0
 8014220:	b118      	cbz	r0, 801422a <_calloc_r+0x18>
 8014222:	4622      	mov	r2, r4
 8014224:	2100      	movs	r1, #0
 8014226:	f7fc fc46 	bl	8010ab6 <memset>
 801422a:	4628      	mov	r0, r5
 801422c:	bd38      	pop	{r3, r4, r5, pc}
	...

08014230 <_free_r>:
 8014230:	b538      	push	{r3, r4, r5, lr}
 8014232:	4605      	mov	r5, r0
 8014234:	2900      	cmp	r1, #0
 8014236:	d045      	beq.n	80142c4 <_free_r+0x94>
 8014238:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801423c:	1f0c      	subs	r4, r1, #4
 801423e:	2b00      	cmp	r3, #0
 8014240:	bfb8      	it	lt
 8014242:	18e4      	addlt	r4, r4, r3
 8014244:	f000 fc15 	bl	8014a72 <__malloc_lock>
 8014248:	4a1f      	ldr	r2, [pc, #124]	; (80142c8 <_free_r+0x98>)
 801424a:	6813      	ldr	r3, [r2, #0]
 801424c:	4610      	mov	r0, r2
 801424e:	b933      	cbnz	r3, 801425e <_free_r+0x2e>
 8014250:	6063      	str	r3, [r4, #4]
 8014252:	6014      	str	r4, [r2, #0]
 8014254:	4628      	mov	r0, r5
 8014256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801425a:	f000 bc0b 	b.w	8014a74 <__malloc_unlock>
 801425e:	42a3      	cmp	r3, r4
 8014260:	d90c      	bls.n	801427c <_free_r+0x4c>
 8014262:	6821      	ldr	r1, [r4, #0]
 8014264:	1862      	adds	r2, r4, r1
 8014266:	4293      	cmp	r3, r2
 8014268:	bf04      	itt	eq
 801426a:	681a      	ldreq	r2, [r3, #0]
 801426c:	685b      	ldreq	r3, [r3, #4]
 801426e:	6063      	str	r3, [r4, #4]
 8014270:	bf04      	itt	eq
 8014272:	1852      	addeq	r2, r2, r1
 8014274:	6022      	streq	r2, [r4, #0]
 8014276:	6004      	str	r4, [r0, #0]
 8014278:	e7ec      	b.n	8014254 <_free_r+0x24>
 801427a:	4613      	mov	r3, r2
 801427c:	685a      	ldr	r2, [r3, #4]
 801427e:	b10a      	cbz	r2, 8014284 <_free_r+0x54>
 8014280:	42a2      	cmp	r2, r4
 8014282:	d9fa      	bls.n	801427a <_free_r+0x4a>
 8014284:	6819      	ldr	r1, [r3, #0]
 8014286:	1858      	adds	r0, r3, r1
 8014288:	42a0      	cmp	r0, r4
 801428a:	d10b      	bne.n	80142a4 <_free_r+0x74>
 801428c:	6820      	ldr	r0, [r4, #0]
 801428e:	4401      	add	r1, r0
 8014290:	1858      	adds	r0, r3, r1
 8014292:	4282      	cmp	r2, r0
 8014294:	6019      	str	r1, [r3, #0]
 8014296:	d1dd      	bne.n	8014254 <_free_r+0x24>
 8014298:	6810      	ldr	r0, [r2, #0]
 801429a:	6852      	ldr	r2, [r2, #4]
 801429c:	605a      	str	r2, [r3, #4]
 801429e:	4401      	add	r1, r0
 80142a0:	6019      	str	r1, [r3, #0]
 80142a2:	e7d7      	b.n	8014254 <_free_r+0x24>
 80142a4:	d902      	bls.n	80142ac <_free_r+0x7c>
 80142a6:	230c      	movs	r3, #12
 80142a8:	602b      	str	r3, [r5, #0]
 80142aa:	e7d3      	b.n	8014254 <_free_r+0x24>
 80142ac:	6820      	ldr	r0, [r4, #0]
 80142ae:	1821      	adds	r1, r4, r0
 80142b0:	428a      	cmp	r2, r1
 80142b2:	bf04      	itt	eq
 80142b4:	6811      	ldreq	r1, [r2, #0]
 80142b6:	6852      	ldreq	r2, [r2, #4]
 80142b8:	6062      	str	r2, [r4, #4]
 80142ba:	bf04      	itt	eq
 80142bc:	1809      	addeq	r1, r1, r0
 80142be:	6021      	streq	r1, [r4, #0]
 80142c0:	605c      	str	r4, [r3, #4]
 80142c2:	e7c7      	b.n	8014254 <_free_r+0x24>
 80142c4:	bd38      	pop	{r3, r4, r5, pc}
 80142c6:	bf00      	nop
 80142c8:	200008a0 	.word	0x200008a0

080142cc <_malloc_r>:
 80142cc:	b570      	push	{r4, r5, r6, lr}
 80142ce:	1ccd      	adds	r5, r1, #3
 80142d0:	f025 0503 	bic.w	r5, r5, #3
 80142d4:	3508      	adds	r5, #8
 80142d6:	2d0c      	cmp	r5, #12
 80142d8:	bf38      	it	cc
 80142da:	250c      	movcc	r5, #12
 80142dc:	2d00      	cmp	r5, #0
 80142de:	4606      	mov	r6, r0
 80142e0:	db01      	blt.n	80142e6 <_malloc_r+0x1a>
 80142e2:	42a9      	cmp	r1, r5
 80142e4:	d903      	bls.n	80142ee <_malloc_r+0x22>
 80142e6:	230c      	movs	r3, #12
 80142e8:	6033      	str	r3, [r6, #0]
 80142ea:	2000      	movs	r0, #0
 80142ec:	bd70      	pop	{r4, r5, r6, pc}
 80142ee:	f000 fbc0 	bl	8014a72 <__malloc_lock>
 80142f2:	4a21      	ldr	r2, [pc, #132]	; (8014378 <_malloc_r+0xac>)
 80142f4:	6814      	ldr	r4, [r2, #0]
 80142f6:	4621      	mov	r1, r4
 80142f8:	b991      	cbnz	r1, 8014320 <_malloc_r+0x54>
 80142fa:	4c20      	ldr	r4, [pc, #128]	; (801437c <_malloc_r+0xb0>)
 80142fc:	6823      	ldr	r3, [r4, #0]
 80142fe:	b91b      	cbnz	r3, 8014308 <_malloc_r+0x3c>
 8014300:	4630      	mov	r0, r6
 8014302:	f000 facf 	bl	80148a4 <_sbrk_r>
 8014306:	6020      	str	r0, [r4, #0]
 8014308:	4629      	mov	r1, r5
 801430a:	4630      	mov	r0, r6
 801430c:	f000 faca 	bl	80148a4 <_sbrk_r>
 8014310:	1c43      	adds	r3, r0, #1
 8014312:	d124      	bne.n	801435e <_malloc_r+0x92>
 8014314:	230c      	movs	r3, #12
 8014316:	6033      	str	r3, [r6, #0]
 8014318:	4630      	mov	r0, r6
 801431a:	f000 fbab 	bl	8014a74 <__malloc_unlock>
 801431e:	e7e4      	b.n	80142ea <_malloc_r+0x1e>
 8014320:	680b      	ldr	r3, [r1, #0]
 8014322:	1b5b      	subs	r3, r3, r5
 8014324:	d418      	bmi.n	8014358 <_malloc_r+0x8c>
 8014326:	2b0b      	cmp	r3, #11
 8014328:	d90f      	bls.n	801434a <_malloc_r+0x7e>
 801432a:	600b      	str	r3, [r1, #0]
 801432c:	50cd      	str	r5, [r1, r3]
 801432e:	18cc      	adds	r4, r1, r3
 8014330:	4630      	mov	r0, r6
 8014332:	f000 fb9f 	bl	8014a74 <__malloc_unlock>
 8014336:	f104 000b 	add.w	r0, r4, #11
 801433a:	1d23      	adds	r3, r4, #4
 801433c:	f020 0007 	bic.w	r0, r0, #7
 8014340:	1ac3      	subs	r3, r0, r3
 8014342:	d0d3      	beq.n	80142ec <_malloc_r+0x20>
 8014344:	425a      	negs	r2, r3
 8014346:	50e2      	str	r2, [r4, r3]
 8014348:	e7d0      	b.n	80142ec <_malloc_r+0x20>
 801434a:	428c      	cmp	r4, r1
 801434c:	684b      	ldr	r3, [r1, #4]
 801434e:	bf16      	itet	ne
 8014350:	6063      	strne	r3, [r4, #4]
 8014352:	6013      	streq	r3, [r2, #0]
 8014354:	460c      	movne	r4, r1
 8014356:	e7eb      	b.n	8014330 <_malloc_r+0x64>
 8014358:	460c      	mov	r4, r1
 801435a:	6849      	ldr	r1, [r1, #4]
 801435c:	e7cc      	b.n	80142f8 <_malloc_r+0x2c>
 801435e:	1cc4      	adds	r4, r0, #3
 8014360:	f024 0403 	bic.w	r4, r4, #3
 8014364:	42a0      	cmp	r0, r4
 8014366:	d005      	beq.n	8014374 <_malloc_r+0xa8>
 8014368:	1a21      	subs	r1, r4, r0
 801436a:	4630      	mov	r0, r6
 801436c:	f000 fa9a 	bl	80148a4 <_sbrk_r>
 8014370:	3001      	adds	r0, #1
 8014372:	d0cf      	beq.n	8014314 <_malloc_r+0x48>
 8014374:	6025      	str	r5, [r4, #0]
 8014376:	e7db      	b.n	8014330 <_malloc_r+0x64>
 8014378:	200008a0 	.word	0x200008a0
 801437c:	200008a4 	.word	0x200008a4

08014380 <__ssputs_r>:
 8014380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014384:	688e      	ldr	r6, [r1, #8]
 8014386:	429e      	cmp	r6, r3
 8014388:	4682      	mov	sl, r0
 801438a:	460c      	mov	r4, r1
 801438c:	4690      	mov	r8, r2
 801438e:	4699      	mov	r9, r3
 8014390:	d837      	bhi.n	8014402 <__ssputs_r+0x82>
 8014392:	898a      	ldrh	r2, [r1, #12]
 8014394:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014398:	d031      	beq.n	80143fe <__ssputs_r+0x7e>
 801439a:	6825      	ldr	r5, [r4, #0]
 801439c:	6909      	ldr	r1, [r1, #16]
 801439e:	1a6f      	subs	r7, r5, r1
 80143a0:	6965      	ldr	r5, [r4, #20]
 80143a2:	2302      	movs	r3, #2
 80143a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80143a8:	fb95 f5f3 	sdiv	r5, r5, r3
 80143ac:	f109 0301 	add.w	r3, r9, #1
 80143b0:	443b      	add	r3, r7
 80143b2:	429d      	cmp	r5, r3
 80143b4:	bf38      	it	cc
 80143b6:	461d      	movcc	r5, r3
 80143b8:	0553      	lsls	r3, r2, #21
 80143ba:	d530      	bpl.n	801441e <__ssputs_r+0x9e>
 80143bc:	4629      	mov	r1, r5
 80143be:	f7ff ff85 	bl	80142cc <_malloc_r>
 80143c2:	4606      	mov	r6, r0
 80143c4:	b950      	cbnz	r0, 80143dc <__ssputs_r+0x5c>
 80143c6:	230c      	movs	r3, #12
 80143c8:	f8ca 3000 	str.w	r3, [sl]
 80143cc:	89a3      	ldrh	r3, [r4, #12]
 80143ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80143d2:	81a3      	strh	r3, [r4, #12]
 80143d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80143d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143dc:	463a      	mov	r2, r7
 80143de:	6921      	ldr	r1, [r4, #16]
 80143e0:	f7fc fb5e 	bl	8010aa0 <memcpy>
 80143e4:	89a3      	ldrh	r3, [r4, #12]
 80143e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80143ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80143ee:	81a3      	strh	r3, [r4, #12]
 80143f0:	6126      	str	r6, [r4, #16]
 80143f2:	6165      	str	r5, [r4, #20]
 80143f4:	443e      	add	r6, r7
 80143f6:	1bed      	subs	r5, r5, r7
 80143f8:	6026      	str	r6, [r4, #0]
 80143fa:	60a5      	str	r5, [r4, #8]
 80143fc:	464e      	mov	r6, r9
 80143fe:	454e      	cmp	r6, r9
 8014400:	d900      	bls.n	8014404 <__ssputs_r+0x84>
 8014402:	464e      	mov	r6, r9
 8014404:	4632      	mov	r2, r6
 8014406:	4641      	mov	r1, r8
 8014408:	6820      	ldr	r0, [r4, #0]
 801440a:	f000 fb19 	bl	8014a40 <memmove>
 801440e:	68a3      	ldr	r3, [r4, #8]
 8014410:	1b9b      	subs	r3, r3, r6
 8014412:	60a3      	str	r3, [r4, #8]
 8014414:	6823      	ldr	r3, [r4, #0]
 8014416:	441e      	add	r6, r3
 8014418:	6026      	str	r6, [r4, #0]
 801441a:	2000      	movs	r0, #0
 801441c:	e7dc      	b.n	80143d8 <__ssputs_r+0x58>
 801441e:	462a      	mov	r2, r5
 8014420:	f000 fb29 	bl	8014a76 <_realloc_r>
 8014424:	4606      	mov	r6, r0
 8014426:	2800      	cmp	r0, #0
 8014428:	d1e2      	bne.n	80143f0 <__ssputs_r+0x70>
 801442a:	6921      	ldr	r1, [r4, #16]
 801442c:	4650      	mov	r0, sl
 801442e:	f7ff feff 	bl	8014230 <_free_r>
 8014432:	e7c8      	b.n	80143c6 <__ssputs_r+0x46>

08014434 <_svfiprintf_r>:
 8014434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014438:	461d      	mov	r5, r3
 801443a:	898b      	ldrh	r3, [r1, #12]
 801443c:	061f      	lsls	r7, r3, #24
 801443e:	b09d      	sub	sp, #116	; 0x74
 8014440:	4680      	mov	r8, r0
 8014442:	460c      	mov	r4, r1
 8014444:	4616      	mov	r6, r2
 8014446:	d50f      	bpl.n	8014468 <_svfiprintf_r+0x34>
 8014448:	690b      	ldr	r3, [r1, #16]
 801444a:	b96b      	cbnz	r3, 8014468 <_svfiprintf_r+0x34>
 801444c:	2140      	movs	r1, #64	; 0x40
 801444e:	f7ff ff3d 	bl	80142cc <_malloc_r>
 8014452:	6020      	str	r0, [r4, #0]
 8014454:	6120      	str	r0, [r4, #16]
 8014456:	b928      	cbnz	r0, 8014464 <_svfiprintf_r+0x30>
 8014458:	230c      	movs	r3, #12
 801445a:	f8c8 3000 	str.w	r3, [r8]
 801445e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014462:	e0c8      	b.n	80145f6 <_svfiprintf_r+0x1c2>
 8014464:	2340      	movs	r3, #64	; 0x40
 8014466:	6163      	str	r3, [r4, #20]
 8014468:	2300      	movs	r3, #0
 801446a:	9309      	str	r3, [sp, #36]	; 0x24
 801446c:	2320      	movs	r3, #32
 801446e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014472:	2330      	movs	r3, #48	; 0x30
 8014474:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014478:	9503      	str	r5, [sp, #12]
 801447a:	f04f 0b01 	mov.w	fp, #1
 801447e:	4637      	mov	r7, r6
 8014480:	463d      	mov	r5, r7
 8014482:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014486:	b10b      	cbz	r3, 801448c <_svfiprintf_r+0x58>
 8014488:	2b25      	cmp	r3, #37	; 0x25
 801448a:	d13e      	bne.n	801450a <_svfiprintf_r+0xd6>
 801448c:	ebb7 0a06 	subs.w	sl, r7, r6
 8014490:	d00b      	beq.n	80144aa <_svfiprintf_r+0x76>
 8014492:	4653      	mov	r3, sl
 8014494:	4632      	mov	r2, r6
 8014496:	4621      	mov	r1, r4
 8014498:	4640      	mov	r0, r8
 801449a:	f7ff ff71 	bl	8014380 <__ssputs_r>
 801449e:	3001      	adds	r0, #1
 80144a0:	f000 80a4 	beq.w	80145ec <_svfiprintf_r+0x1b8>
 80144a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144a6:	4453      	add	r3, sl
 80144a8:	9309      	str	r3, [sp, #36]	; 0x24
 80144aa:	783b      	ldrb	r3, [r7, #0]
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	f000 809d 	beq.w	80145ec <_svfiprintf_r+0x1b8>
 80144b2:	2300      	movs	r3, #0
 80144b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80144b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80144bc:	9304      	str	r3, [sp, #16]
 80144be:	9307      	str	r3, [sp, #28]
 80144c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80144c4:	931a      	str	r3, [sp, #104]	; 0x68
 80144c6:	462f      	mov	r7, r5
 80144c8:	2205      	movs	r2, #5
 80144ca:	f817 1b01 	ldrb.w	r1, [r7], #1
 80144ce:	4850      	ldr	r0, [pc, #320]	; (8014610 <_svfiprintf_r+0x1dc>)
 80144d0:	f7eb fe86 	bl	80001e0 <memchr>
 80144d4:	9b04      	ldr	r3, [sp, #16]
 80144d6:	b9d0      	cbnz	r0, 801450e <_svfiprintf_r+0xda>
 80144d8:	06d9      	lsls	r1, r3, #27
 80144da:	bf44      	itt	mi
 80144dc:	2220      	movmi	r2, #32
 80144de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80144e2:	071a      	lsls	r2, r3, #28
 80144e4:	bf44      	itt	mi
 80144e6:	222b      	movmi	r2, #43	; 0x2b
 80144e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80144ec:	782a      	ldrb	r2, [r5, #0]
 80144ee:	2a2a      	cmp	r2, #42	; 0x2a
 80144f0:	d015      	beq.n	801451e <_svfiprintf_r+0xea>
 80144f2:	9a07      	ldr	r2, [sp, #28]
 80144f4:	462f      	mov	r7, r5
 80144f6:	2000      	movs	r0, #0
 80144f8:	250a      	movs	r5, #10
 80144fa:	4639      	mov	r1, r7
 80144fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014500:	3b30      	subs	r3, #48	; 0x30
 8014502:	2b09      	cmp	r3, #9
 8014504:	d94d      	bls.n	80145a2 <_svfiprintf_r+0x16e>
 8014506:	b1b8      	cbz	r0, 8014538 <_svfiprintf_r+0x104>
 8014508:	e00f      	b.n	801452a <_svfiprintf_r+0xf6>
 801450a:	462f      	mov	r7, r5
 801450c:	e7b8      	b.n	8014480 <_svfiprintf_r+0x4c>
 801450e:	4a40      	ldr	r2, [pc, #256]	; (8014610 <_svfiprintf_r+0x1dc>)
 8014510:	1a80      	subs	r0, r0, r2
 8014512:	fa0b f000 	lsl.w	r0, fp, r0
 8014516:	4318      	orrs	r0, r3
 8014518:	9004      	str	r0, [sp, #16]
 801451a:	463d      	mov	r5, r7
 801451c:	e7d3      	b.n	80144c6 <_svfiprintf_r+0x92>
 801451e:	9a03      	ldr	r2, [sp, #12]
 8014520:	1d11      	adds	r1, r2, #4
 8014522:	6812      	ldr	r2, [r2, #0]
 8014524:	9103      	str	r1, [sp, #12]
 8014526:	2a00      	cmp	r2, #0
 8014528:	db01      	blt.n	801452e <_svfiprintf_r+0xfa>
 801452a:	9207      	str	r2, [sp, #28]
 801452c:	e004      	b.n	8014538 <_svfiprintf_r+0x104>
 801452e:	4252      	negs	r2, r2
 8014530:	f043 0302 	orr.w	r3, r3, #2
 8014534:	9207      	str	r2, [sp, #28]
 8014536:	9304      	str	r3, [sp, #16]
 8014538:	783b      	ldrb	r3, [r7, #0]
 801453a:	2b2e      	cmp	r3, #46	; 0x2e
 801453c:	d10c      	bne.n	8014558 <_svfiprintf_r+0x124>
 801453e:	787b      	ldrb	r3, [r7, #1]
 8014540:	2b2a      	cmp	r3, #42	; 0x2a
 8014542:	d133      	bne.n	80145ac <_svfiprintf_r+0x178>
 8014544:	9b03      	ldr	r3, [sp, #12]
 8014546:	1d1a      	adds	r2, r3, #4
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	9203      	str	r2, [sp, #12]
 801454c:	2b00      	cmp	r3, #0
 801454e:	bfb8      	it	lt
 8014550:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014554:	3702      	adds	r7, #2
 8014556:	9305      	str	r3, [sp, #20]
 8014558:	4d2e      	ldr	r5, [pc, #184]	; (8014614 <_svfiprintf_r+0x1e0>)
 801455a:	7839      	ldrb	r1, [r7, #0]
 801455c:	2203      	movs	r2, #3
 801455e:	4628      	mov	r0, r5
 8014560:	f7eb fe3e 	bl	80001e0 <memchr>
 8014564:	b138      	cbz	r0, 8014576 <_svfiprintf_r+0x142>
 8014566:	2340      	movs	r3, #64	; 0x40
 8014568:	1b40      	subs	r0, r0, r5
 801456a:	fa03 f000 	lsl.w	r0, r3, r0
 801456e:	9b04      	ldr	r3, [sp, #16]
 8014570:	4303      	orrs	r3, r0
 8014572:	3701      	adds	r7, #1
 8014574:	9304      	str	r3, [sp, #16]
 8014576:	7839      	ldrb	r1, [r7, #0]
 8014578:	4827      	ldr	r0, [pc, #156]	; (8014618 <_svfiprintf_r+0x1e4>)
 801457a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801457e:	2206      	movs	r2, #6
 8014580:	1c7e      	adds	r6, r7, #1
 8014582:	f7eb fe2d 	bl	80001e0 <memchr>
 8014586:	2800      	cmp	r0, #0
 8014588:	d038      	beq.n	80145fc <_svfiprintf_r+0x1c8>
 801458a:	4b24      	ldr	r3, [pc, #144]	; (801461c <_svfiprintf_r+0x1e8>)
 801458c:	bb13      	cbnz	r3, 80145d4 <_svfiprintf_r+0x1a0>
 801458e:	9b03      	ldr	r3, [sp, #12]
 8014590:	3307      	adds	r3, #7
 8014592:	f023 0307 	bic.w	r3, r3, #7
 8014596:	3308      	adds	r3, #8
 8014598:	9303      	str	r3, [sp, #12]
 801459a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801459c:	444b      	add	r3, r9
 801459e:	9309      	str	r3, [sp, #36]	; 0x24
 80145a0:	e76d      	b.n	801447e <_svfiprintf_r+0x4a>
 80145a2:	fb05 3202 	mla	r2, r5, r2, r3
 80145a6:	2001      	movs	r0, #1
 80145a8:	460f      	mov	r7, r1
 80145aa:	e7a6      	b.n	80144fa <_svfiprintf_r+0xc6>
 80145ac:	2300      	movs	r3, #0
 80145ae:	3701      	adds	r7, #1
 80145b0:	9305      	str	r3, [sp, #20]
 80145b2:	4619      	mov	r1, r3
 80145b4:	250a      	movs	r5, #10
 80145b6:	4638      	mov	r0, r7
 80145b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80145bc:	3a30      	subs	r2, #48	; 0x30
 80145be:	2a09      	cmp	r2, #9
 80145c0:	d903      	bls.n	80145ca <_svfiprintf_r+0x196>
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d0c8      	beq.n	8014558 <_svfiprintf_r+0x124>
 80145c6:	9105      	str	r1, [sp, #20]
 80145c8:	e7c6      	b.n	8014558 <_svfiprintf_r+0x124>
 80145ca:	fb05 2101 	mla	r1, r5, r1, r2
 80145ce:	2301      	movs	r3, #1
 80145d0:	4607      	mov	r7, r0
 80145d2:	e7f0      	b.n	80145b6 <_svfiprintf_r+0x182>
 80145d4:	ab03      	add	r3, sp, #12
 80145d6:	9300      	str	r3, [sp, #0]
 80145d8:	4622      	mov	r2, r4
 80145da:	4b11      	ldr	r3, [pc, #68]	; (8014620 <_svfiprintf_r+0x1ec>)
 80145dc:	a904      	add	r1, sp, #16
 80145de:	4640      	mov	r0, r8
 80145e0:	f7fc fb06 	bl	8010bf0 <_printf_float>
 80145e4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80145e8:	4681      	mov	r9, r0
 80145ea:	d1d6      	bne.n	801459a <_svfiprintf_r+0x166>
 80145ec:	89a3      	ldrh	r3, [r4, #12]
 80145ee:	065b      	lsls	r3, r3, #25
 80145f0:	f53f af35 	bmi.w	801445e <_svfiprintf_r+0x2a>
 80145f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80145f6:	b01d      	add	sp, #116	; 0x74
 80145f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145fc:	ab03      	add	r3, sp, #12
 80145fe:	9300      	str	r3, [sp, #0]
 8014600:	4622      	mov	r2, r4
 8014602:	4b07      	ldr	r3, [pc, #28]	; (8014620 <_svfiprintf_r+0x1ec>)
 8014604:	a904      	add	r1, sp, #16
 8014606:	4640      	mov	r0, r8
 8014608:	f7fc fda8 	bl	801115c <_printf_i>
 801460c:	e7ea      	b.n	80145e4 <_svfiprintf_r+0x1b0>
 801460e:	bf00      	nop
 8014610:	08016e14 	.word	0x08016e14
 8014614:	08016e1a 	.word	0x08016e1a
 8014618:	08016e1e 	.word	0x08016e1e
 801461c:	08010bf1 	.word	0x08010bf1
 8014620:	08014381 	.word	0x08014381

08014624 <__sfputc_r>:
 8014624:	6893      	ldr	r3, [r2, #8]
 8014626:	3b01      	subs	r3, #1
 8014628:	2b00      	cmp	r3, #0
 801462a:	b410      	push	{r4}
 801462c:	6093      	str	r3, [r2, #8]
 801462e:	da08      	bge.n	8014642 <__sfputc_r+0x1e>
 8014630:	6994      	ldr	r4, [r2, #24]
 8014632:	42a3      	cmp	r3, r4
 8014634:	db01      	blt.n	801463a <__sfputc_r+0x16>
 8014636:	290a      	cmp	r1, #10
 8014638:	d103      	bne.n	8014642 <__sfputc_r+0x1e>
 801463a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801463e:	f7fd bdb7 	b.w	80121b0 <__swbuf_r>
 8014642:	6813      	ldr	r3, [r2, #0]
 8014644:	1c58      	adds	r0, r3, #1
 8014646:	6010      	str	r0, [r2, #0]
 8014648:	7019      	strb	r1, [r3, #0]
 801464a:	4608      	mov	r0, r1
 801464c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014650:	4770      	bx	lr

08014652 <__sfputs_r>:
 8014652:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014654:	4606      	mov	r6, r0
 8014656:	460f      	mov	r7, r1
 8014658:	4614      	mov	r4, r2
 801465a:	18d5      	adds	r5, r2, r3
 801465c:	42ac      	cmp	r4, r5
 801465e:	d101      	bne.n	8014664 <__sfputs_r+0x12>
 8014660:	2000      	movs	r0, #0
 8014662:	e007      	b.n	8014674 <__sfputs_r+0x22>
 8014664:	463a      	mov	r2, r7
 8014666:	f814 1b01 	ldrb.w	r1, [r4], #1
 801466a:	4630      	mov	r0, r6
 801466c:	f7ff ffda 	bl	8014624 <__sfputc_r>
 8014670:	1c43      	adds	r3, r0, #1
 8014672:	d1f3      	bne.n	801465c <__sfputs_r+0xa>
 8014674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014678 <_vfiprintf_r>:
 8014678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801467c:	460c      	mov	r4, r1
 801467e:	b09d      	sub	sp, #116	; 0x74
 8014680:	4617      	mov	r7, r2
 8014682:	461d      	mov	r5, r3
 8014684:	4606      	mov	r6, r0
 8014686:	b118      	cbz	r0, 8014690 <_vfiprintf_r+0x18>
 8014688:	6983      	ldr	r3, [r0, #24]
 801468a:	b90b      	cbnz	r3, 8014690 <_vfiprintf_r+0x18>
 801468c:	f7fe fd84 	bl	8013198 <__sinit>
 8014690:	4b7c      	ldr	r3, [pc, #496]	; (8014884 <_vfiprintf_r+0x20c>)
 8014692:	429c      	cmp	r4, r3
 8014694:	d158      	bne.n	8014748 <_vfiprintf_r+0xd0>
 8014696:	6874      	ldr	r4, [r6, #4]
 8014698:	89a3      	ldrh	r3, [r4, #12]
 801469a:	0718      	lsls	r0, r3, #28
 801469c:	d55e      	bpl.n	801475c <_vfiprintf_r+0xe4>
 801469e:	6923      	ldr	r3, [r4, #16]
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d05b      	beq.n	801475c <_vfiprintf_r+0xe4>
 80146a4:	2300      	movs	r3, #0
 80146a6:	9309      	str	r3, [sp, #36]	; 0x24
 80146a8:	2320      	movs	r3, #32
 80146aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80146ae:	2330      	movs	r3, #48	; 0x30
 80146b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80146b4:	9503      	str	r5, [sp, #12]
 80146b6:	f04f 0b01 	mov.w	fp, #1
 80146ba:	46b8      	mov	r8, r7
 80146bc:	4645      	mov	r5, r8
 80146be:	f815 3b01 	ldrb.w	r3, [r5], #1
 80146c2:	b10b      	cbz	r3, 80146c8 <_vfiprintf_r+0x50>
 80146c4:	2b25      	cmp	r3, #37	; 0x25
 80146c6:	d154      	bne.n	8014772 <_vfiprintf_r+0xfa>
 80146c8:	ebb8 0a07 	subs.w	sl, r8, r7
 80146cc:	d00b      	beq.n	80146e6 <_vfiprintf_r+0x6e>
 80146ce:	4653      	mov	r3, sl
 80146d0:	463a      	mov	r2, r7
 80146d2:	4621      	mov	r1, r4
 80146d4:	4630      	mov	r0, r6
 80146d6:	f7ff ffbc 	bl	8014652 <__sfputs_r>
 80146da:	3001      	adds	r0, #1
 80146dc:	f000 80c2 	beq.w	8014864 <_vfiprintf_r+0x1ec>
 80146e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80146e2:	4453      	add	r3, sl
 80146e4:	9309      	str	r3, [sp, #36]	; 0x24
 80146e6:	f898 3000 	ldrb.w	r3, [r8]
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	f000 80ba 	beq.w	8014864 <_vfiprintf_r+0x1ec>
 80146f0:	2300      	movs	r3, #0
 80146f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80146f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80146fa:	9304      	str	r3, [sp, #16]
 80146fc:	9307      	str	r3, [sp, #28]
 80146fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014702:	931a      	str	r3, [sp, #104]	; 0x68
 8014704:	46a8      	mov	r8, r5
 8014706:	2205      	movs	r2, #5
 8014708:	f818 1b01 	ldrb.w	r1, [r8], #1
 801470c:	485e      	ldr	r0, [pc, #376]	; (8014888 <_vfiprintf_r+0x210>)
 801470e:	f7eb fd67 	bl	80001e0 <memchr>
 8014712:	9b04      	ldr	r3, [sp, #16]
 8014714:	bb78      	cbnz	r0, 8014776 <_vfiprintf_r+0xfe>
 8014716:	06d9      	lsls	r1, r3, #27
 8014718:	bf44      	itt	mi
 801471a:	2220      	movmi	r2, #32
 801471c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014720:	071a      	lsls	r2, r3, #28
 8014722:	bf44      	itt	mi
 8014724:	222b      	movmi	r2, #43	; 0x2b
 8014726:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801472a:	782a      	ldrb	r2, [r5, #0]
 801472c:	2a2a      	cmp	r2, #42	; 0x2a
 801472e:	d02a      	beq.n	8014786 <_vfiprintf_r+0x10e>
 8014730:	9a07      	ldr	r2, [sp, #28]
 8014732:	46a8      	mov	r8, r5
 8014734:	2000      	movs	r0, #0
 8014736:	250a      	movs	r5, #10
 8014738:	4641      	mov	r1, r8
 801473a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801473e:	3b30      	subs	r3, #48	; 0x30
 8014740:	2b09      	cmp	r3, #9
 8014742:	d969      	bls.n	8014818 <_vfiprintf_r+0x1a0>
 8014744:	b360      	cbz	r0, 80147a0 <_vfiprintf_r+0x128>
 8014746:	e024      	b.n	8014792 <_vfiprintf_r+0x11a>
 8014748:	4b50      	ldr	r3, [pc, #320]	; (801488c <_vfiprintf_r+0x214>)
 801474a:	429c      	cmp	r4, r3
 801474c:	d101      	bne.n	8014752 <_vfiprintf_r+0xda>
 801474e:	68b4      	ldr	r4, [r6, #8]
 8014750:	e7a2      	b.n	8014698 <_vfiprintf_r+0x20>
 8014752:	4b4f      	ldr	r3, [pc, #316]	; (8014890 <_vfiprintf_r+0x218>)
 8014754:	429c      	cmp	r4, r3
 8014756:	bf08      	it	eq
 8014758:	68f4      	ldreq	r4, [r6, #12]
 801475a:	e79d      	b.n	8014698 <_vfiprintf_r+0x20>
 801475c:	4621      	mov	r1, r4
 801475e:	4630      	mov	r0, r6
 8014760:	f7fd fd78 	bl	8012254 <__swsetup_r>
 8014764:	2800      	cmp	r0, #0
 8014766:	d09d      	beq.n	80146a4 <_vfiprintf_r+0x2c>
 8014768:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801476c:	b01d      	add	sp, #116	; 0x74
 801476e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014772:	46a8      	mov	r8, r5
 8014774:	e7a2      	b.n	80146bc <_vfiprintf_r+0x44>
 8014776:	4a44      	ldr	r2, [pc, #272]	; (8014888 <_vfiprintf_r+0x210>)
 8014778:	1a80      	subs	r0, r0, r2
 801477a:	fa0b f000 	lsl.w	r0, fp, r0
 801477e:	4318      	orrs	r0, r3
 8014780:	9004      	str	r0, [sp, #16]
 8014782:	4645      	mov	r5, r8
 8014784:	e7be      	b.n	8014704 <_vfiprintf_r+0x8c>
 8014786:	9a03      	ldr	r2, [sp, #12]
 8014788:	1d11      	adds	r1, r2, #4
 801478a:	6812      	ldr	r2, [r2, #0]
 801478c:	9103      	str	r1, [sp, #12]
 801478e:	2a00      	cmp	r2, #0
 8014790:	db01      	blt.n	8014796 <_vfiprintf_r+0x11e>
 8014792:	9207      	str	r2, [sp, #28]
 8014794:	e004      	b.n	80147a0 <_vfiprintf_r+0x128>
 8014796:	4252      	negs	r2, r2
 8014798:	f043 0302 	orr.w	r3, r3, #2
 801479c:	9207      	str	r2, [sp, #28]
 801479e:	9304      	str	r3, [sp, #16]
 80147a0:	f898 3000 	ldrb.w	r3, [r8]
 80147a4:	2b2e      	cmp	r3, #46	; 0x2e
 80147a6:	d10e      	bne.n	80147c6 <_vfiprintf_r+0x14e>
 80147a8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80147ac:	2b2a      	cmp	r3, #42	; 0x2a
 80147ae:	d138      	bne.n	8014822 <_vfiprintf_r+0x1aa>
 80147b0:	9b03      	ldr	r3, [sp, #12]
 80147b2:	1d1a      	adds	r2, r3, #4
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	9203      	str	r2, [sp, #12]
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	bfb8      	it	lt
 80147bc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80147c0:	f108 0802 	add.w	r8, r8, #2
 80147c4:	9305      	str	r3, [sp, #20]
 80147c6:	4d33      	ldr	r5, [pc, #204]	; (8014894 <_vfiprintf_r+0x21c>)
 80147c8:	f898 1000 	ldrb.w	r1, [r8]
 80147cc:	2203      	movs	r2, #3
 80147ce:	4628      	mov	r0, r5
 80147d0:	f7eb fd06 	bl	80001e0 <memchr>
 80147d4:	b140      	cbz	r0, 80147e8 <_vfiprintf_r+0x170>
 80147d6:	2340      	movs	r3, #64	; 0x40
 80147d8:	1b40      	subs	r0, r0, r5
 80147da:	fa03 f000 	lsl.w	r0, r3, r0
 80147de:	9b04      	ldr	r3, [sp, #16]
 80147e0:	4303      	orrs	r3, r0
 80147e2:	f108 0801 	add.w	r8, r8, #1
 80147e6:	9304      	str	r3, [sp, #16]
 80147e8:	f898 1000 	ldrb.w	r1, [r8]
 80147ec:	482a      	ldr	r0, [pc, #168]	; (8014898 <_vfiprintf_r+0x220>)
 80147ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80147f2:	2206      	movs	r2, #6
 80147f4:	f108 0701 	add.w	r7, r8, #1
 80147f8:	f7eb fcf2 	bl	80001e0 <memchr>
 80147fc:	2800      	cmp	r0, #0
 80147fe:	d037      	beq.n	8014870 <_vfiprintf_r+0x1f8>
 8014800:	4b26      	ldr	r3, [pc, #152]	; (801489c <_vfiprintf_r+0x224>)
 8014802:	bb1b      	cbnz	r3, 801484c <_vfiprintf_r+0x1d4>
 8014804:	9b03      	ldr	r3, [sp, #12]
 8014806:	3307      	adds	r3, #7
 8014808:	f023 0307 	bic.w	r3, r3, #7
 801480c:	3308      	adds	r3, #8
 801480e:	9303      	str	r3, [sp, #12]
 8014810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014812:	444b      	add	r3, r9
 8014814:	9309      	str	r3, [sp, #36]	; 0x24
 8014816:	e750      	b.n	80146ba <_vfiprintf_r+0x42>
 8014818:	fb05 3202 	mla	r2, r5, r2, r3
 801481c:	2001      	movs	r0, #1
 801481e:	4688      	mov	r8, r1
 8014820:	e78a      	b.n	8014738 <_vfiprintf_r+0xc0>
 8014822:	2300      	movs	r3, #0
 8014824:	f108 0801 	add.w	r8, r8, #1
 8014828:	9305      	str	r3, [sp, #20]
 801482a:	4619      	mov	r1, r3
 801482c:	250a      	movs	r5, #10
 801482e:	4640      	mov	r0, r8
 8014830:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014834:	3a30      	subs	r2, #48	; 0x30
 8014836:	2a09      	cmp	r2, #9
 8014838:	d903      	bls.n	8014842 <_vfiprintf_r+0x1ca>
 801483a:	2b00      	cmp	r3, #0
 801483c:	d0c3      	beq.n	80147c6 <_vfiprintf_r+0x14e>
 801483e:	9105      	str	r1, [sp, #20]
 8014840:	e7c1      	b.n	80147c6 <_vfiprintf_r+0x14e>
 8014842:	fb05 2101 	mla	r1, r5, r1, r2
 8014846:	2301      	movs	r3, #1
 8014848:	4680      	mov	r8, r0
 801484a:	e7f0      	b.n	801482e <_vfiprintf_r+0x1b6>
 801484c:	ab03      	add	r3, sp, #12
 801484e:	9300      	str	r3, [sp, #0]
 8014850:	4622      	mov	r2, r4
 8014852:	4b13      	ldr	r3, [pc, #76]	; (80148a0 <_vfiprintf_r+0x228>)
 8014854:	a904      	add	r1, sp, #16
 8014856:	4630      	mov	r0, r6
 8014858:	f7fc f9ca 	bl	8010bf0 <_printf_float>
 801485c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8014860:	4681      	mov	r9, r0
 8014862:	d1d5      	bne.n	8014810 <_vfiprintf_r+0x198>
 8014864:	89a3      	ldrh	r3, [r4, #12]
 8014866:	065b      	lsls	r3, r3, #25
 8014868:	f53f af7e 	bmi.w	8014768 <_vfiprintf_r+0xf0>
 801486c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801486e:	e77d      	b.n	801476c <_vfiprintf_r+0xf4>
 8014870:	ab03      	add	r3, sp, #12
 8014872:	9300      	str	r3, [sp, #0]
 8014874:	4622      	mov	r2, r4
 8014876:	4b0a      	ldr	r3, [pc, #40]	; (80148a0 <_vfiprintf_r+0x228>)
 8014878:	a904      	add	r1, sp, #16
 801487a:	4630      	mov	r0, r6
 801487c:	f7fc fc6e 	bl	801115c <_printf_i>
 8014880:	e7ec      	b.n	801485c <_vfiprintf_r+0x1e4>
 8014882:	bf00      	nop
 8014884:	08016cc8 	.word	0x08016cc8
 8014888:	08016e14 	.word	0x08016e14
 801488c:	08016ce8 	.word	0x08016ce8
 8014890:	08016ca8 	.word	0x08016ca8
 8014894:	08016e1a 	.word	0x08016e1a
 8014898:	08016e1e 	.word	0x08016e1e
 801489c:	08010bf1 	.word	0x08010bf1
 80148a0:	08014653 	.word	0x08014653

080148a4 <_sbrk_r>:
 80148a4:	b538      	push	{r3, r4, r5, lr}
 80148a6:	4c06      	ldr	r4, [pc, #24]	; (80148c0 <_sbrk_r+0x1c>)
 80148a8:	2300      	movs	r3, #0
 80148aa:	4605      	mov	r5, r0
 80148ac:	4608      	mov	r0, r1
 80148ae:	6023      	str	r3, [r4, #0]
 80148b0:	f7ef fcaa 	bl	8004208 <_sbrk>
 80148b4:	1c43      	adds	r3, r0, #1
 80148b6:	d102      	bne.n	80148be <_sbrk_r+0x1a>
 80148b8:	6823      	ldr	r3, [r4, #0]
 80148ba:	b103      	cbz	r3, 80148be <_sbrk_r+0x1a>
 80148bc:	602b      	str	r3, [r5, #0]
 80148be:	bd38      	pop	{r3, r4, r5, pc}
 80148c0:	20010238 	.word	0x20010238

080148c4 <nanf>:
 80148c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80148cc <nanf+0x8>
 80148c8:	4770      	bx	lr
 80148ca:	bf00      	nop
 80148cc:	7fc00000 	.word	0x7fc00000

080148d0 <__sread>:
 80148d0:	b510      	push	{r4, lr}
 80148d2:	460c      	mov	r4, r1
 80148d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80148d8:	f000 f8f4 	bl	8014ac4 <_read_r>
 80148dc:	2800      	cmp	r0, #0
 80148de:	bfab      	itete	ge
 80148e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80148e2:	89a3      	ldrhlt	r3, [r4, #12]
 80148e4:	181b      	addge	r3, r3, r0
 80148e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80148ea:	bfac      	ite	ge
 80148ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80148ee:	81a3      	strhlt	r3, [r4, #12]
 80148f0:	bd10      	pop	{r4, pc}

080148f2 <__swrite>:
 80148f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148f6:	461f      	mov	r7, r3
 80148f8:	898b      	ldrh	r3, [r1, #12]
 80148fa:	05db      	lsls	r3, r3, #23
 80148fc:	4605      	mov	r5, r0
 80148fe:	460c      	mov	r4, r1
 8014900:	4616      	mov	r6, r2
 8014902:	d505      	bpl.n	8014910 <__swrite+0x1e>
 8014904:	2302      	movs	r3, #2
 8014906:	2200      	movs	r2, #0
 8014908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801490c:	f000 f886 	bl	8014a1c <_lseek_r>
 8014910:	89a3      	ldrh	r3, [r4, #12]
 8014912:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014916:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801491a:	81a3      	strh	r3, [r4, #12]
 801491c:	4632      	mov	r2, r6
 801491e:	463b      	mov	r3, r7
 8014920:	4628      	mov	r0, r5
 8014922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014926:	f000 b835 	b.w	8014994 <_write_r>

0801492a <__sseek>:
 801492a:	b510      	push	{r4, lr}
 801492c:	460c      	mov	r4, r1
 801492e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014932:	f000 f873 	bl	8014a1c <_lseek_r>
 8014936:	1c43      	adds	r3, r0, #1
 8014938:	89a3      	ldrh	r3, [r4, #12]
 801493a:	bf15      	itete	ne
 801493c:	6560      	strne	r0, [r4, #84]	; 0x54
 801493e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014942:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014946:	81a3      	strheq	r3, [r4, #12]
 8014948:	bf18      	it	ne
 801494a:	81a3      	strhne	r3, [r4, #12]
 801494c:	bd10      	pop	{r4, pc}

0801494e <__sclose>:
 801494e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014952:	f000 b831 	b.w	80149b8 <_close_r>

08014956 <strncmp>:
 8014956:	b510      	push	{r4, lr}
 8014958:	b16a      	cbz	r2, 8014976 <strncmp+0x20>
 801495a:	3901      	subs	r1, #1
 801495c:	1884      	adds	r4, r0, r2
 801495e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8014962:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8014966:	4293      	cmp	r3, r2
 8014968:	d103      	bne.n	8014972 <strncmp+0x1c>
 801496a:	42a0      	cmp	r0, r4
 801496c:	d001      	beq.n	8014972 <strncmp+0x1c>
 801496e:	2b00      	cmp	r3, #0
 8014970:	d1f5      	bne.n	801495e <strncmp+0x8>
 8014972:	1a98      	subs	r0, r3, r2
 8014974:	bd10      	pop	{r4, pc}
 8014976:	4610      	mov	r0, r2
 8014978:	e7fc      	b.n	8014974 <strncmp+0x1e>

0801497a <__ascii_wctomb>:
 801497a:	b149      	cbz	r1, 8014990 <__ascii_wctomb+0x16>
 801497c:	2aff      	cmp	r2, #255	; 0xff
 801497e:	bf85      	ittet	hi
 8014980:	238a      	movhi	r3, #138	; 0x8a
 8014982:	6003      	strhi	r3, [r0, #0]
 8014984:	700a      	strbls	r2, [r1, #0]
 8014986:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801498a:	bf98      	it	ls
 801498c:	2001      	movls	r0, #1
 801498e:	4770      	bx	lr
 8014990:	4608      	mov	r0, r1
 8014992:	4770      	bx	lr

08014994 <_write_r>:
 8014994:	b538      	push	{r3, r4, r5, lr}
 8014996:	4c07      	ldr	r4, [pc, #28]	; (80149b4 <_write_r+0x20>)
 8014998:	4605      	mov	r5, r0
 801499a:	4608      	mov	r0, r1
 801499c:	4611      	mov	r1, r2
 801499e:	2200      	movs	r2, #0
 80149a0:	6022      	str	r2, [r4, #0]
 80149a2:	461a      	mov	r2, r3
 80149a4:	f7ef fbe0 	bl	8004168 <_write>
 80149a8:	1c43      	adds	r3, r0, #1
 80149aa:	d102      	bne.n	80149b2 <_write_r+0x1e>
 80149ac:	6823      	ldr	r3, [r4, #0]
 80149ae:	b103      	cbz	r3, 80149b2 <_write_r+0x1e>
 80149b0:	602b      	str	r3, [r5, #0]
 80149b2:	bd38      	pop	{r3, r4, r5, pc}
 80149b4:	20010238 	.word	0x20010238

080149b8 <_close_r>:
 80149b8:	b538      	push	{r3, r4, r5, lr}
 80149ba:	4c06      	ldr	r4, [pc, #24]	; (80149d4 <_close_r+0x1c>)
 80149bc:	2300      	movs	r3, #0
 80149be:	4605      	mov	r5, r0
 80149c0:	4608      	mov	r0, r1
 80149c2:	6023      	str	r3, [r4, #0]
 80149c4:	f7ef fbec 	bl	80041a0 <_close>
 80149c8:	1c43      	adds	r3, r0, #1
 80149ca:	d102      	bne.n	80149d2 <_close_r+0x1a>
 80149cc:	6823      	ldr	r3, [r4, #0]
 80149ce:	b103      	cbz	r3, 80149d2 <_close_r+0x1a>
 80149d0:	602b      	str	r3, [r5, #0]
 80149d2:	bd38      	pop	{r3, r4, r5, pc}
 80149d4:	20010238 	.word	0x20010238

080149d8 <_fstat_r>:
 80149d8:	b538      	push	{r3, r4, r5, lr}
 80149da:	4c07      	ldr	r4, [pc, #28]	; (80149f8 <_fstat_r+0x20>)
 80149dc:	2300      	movs	r3, #0
 80149de:	4605      	mov	r5, r0
 80149e0:	4608      	mov	r0, r1
 80149e2:	4611      	mov	r1, r2
 80149e4:	6023      	str	r3, [r4, #0]
 80149e6:	f7ef fbe7 	bl	80041b8 <_fstat>
 80149ea:	1c43      	adds	r3, r0, #1
 80149ec:	d102      	bne.n	80149f4 <_fstat_r+0x1c>
 80149ee:	6823      	ldr	r3, [r4, #0]
 80149f0:	b103      	cbz	r3, 80149f4 <_fstat_r+0x1c>
 80149f2:	602b      	str	r3, [r5, #0]
 80149f4:	bd38      	pop	{r3, r4, r5, pc}
 80149f6:	bf00      	nop
 80149f8:	20010238 	.word	0x20010238

080149fc <_isatty_r>:
 80149fc:	b538      	push	{r3, r4, r5, lr}
 80149fe:	4c06      	ldr	r4, [pc, #24]	; (8014a18 <_isatty_r+0x1c>)
 8014a00:	2300      	movs	r3, #0
 8014a02:	4605      	mov	r5, r0
 8014a04:	4608      	mov	r0, r1
 8014a06:	6023      	str	r3, [r4, #0]
 8014a08:	f7ef fbe6 	bl	80041d8 <_isatty>
 8014a0c:	1c43      	adds	r3, r0, #1
 8014a0e:	d102      	bne.n	8014a16 <_isatty_r+0x1a>
 8014a10:	6823      	ldr	r3, [r4, #0]
 8014a12:	b103      	cbz	r3, 8014a16 <_isatty_r+0x1a>
 8014a14:	602b      	str	r3, [r5, #0]
 8014a16:	bd38      	pop	{r3, r4, r5, pc}
 8014a18:	20010238 	.word	0x20010238

08014a1c <_lseek_r>:
 8014a1c:	b538      	push	{r3, r4, r5, lr}
 8014a1e:	4c07      	ldr	r4, [pc, #28]	; (8014a3c <_lseek_r+0x20>)
 8014a20:	4605      	mov	r5, r0
 8014a22:	4608      	mov	r0, r1
 8014a24:	4611      	mov	r1, r2
 8014a26:	2200      	movs	r2, #0
 8014a28:	6022      	str	r2, [r4, #0]
 8014a2a:	461a      	mov	r2, r3
 8014a2c:	f7ef fbdf 	bl	80041ee <_lseek>
 8014a30:	1c43      	adds	r3, r0, #1
 8014a32:	d102      	bne.n	8014a3a <_lseek_r+0x1e>
 8014a34:	6823      	ldr	r3, [r4, #0]
 8014a36:	b103      	cbz	r3, 8014a3a <_lseek_r+0x1e>
 8014a38:	602b      	str	r3, [r5, #0]
 8014a3a:	bd38      	pop	{r3, r4, r5, pc}
 8014a3c:	20010238 	.word	0x20010238

08014a40 <memmove>:
 8014a40:	4288      	cmp	r0, r1
 8014a42:	b510      	push	{r4, lr}
 8014a44:	eb01 0302 	add.w	r3, r1, r2
 8014a48:	d807      	bhi.n	8014a5a <memmove+0x1a>
 8014a4a:	1e42      	subs	r2, r0, #1
 8014a4c:	4299      	cmp	r1, r3
 8014a4e:	d00a      	beq.n	8014a66 <memmove+0x26>
 8014a50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014a54:	f802 4f01 	strb.w	r4, [r2, #1]!
 8014a58:	e7f8      	b.n	8014a4c <memmove+0xc>
 8014a5a:	4283      	cmp	r3, r0
 8014a5c:	d9f5      	bls.n	8014a4a <memmove+0xa>
 8014a5e:	1881      	adds	r1, r0, r2
 8014a60:	1ad2      	subs	r2, r2, r3
 8014a62:	42d3      	cmn	r3, r2
 8014a64:	d100      	bne.n	8014a68 <memmove+0x28>
 8014a66:	bd10      	pop	{r4, pc}
 8014a68:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014a6c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8014a70:	e7f7      	b.n	8014a62 <memmove+0x22>

08014a72 <__malloc_lock>:
 8014a72:	4770      	bx	lr

08014a74 <__malloc_unlock>:
 8014a74:	4770      	bx	lr

08014a76 <_realloc_r>:
 8014a76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a78:	4607      	mov	r7, r0
 8014a7a:	4614      	mov	r4, r2
 8014a7c:	460e      	mov	r6, r1
 8014a7e:	b921      	cbnz	r1, 8014a8a <_realloc_r+0x14>
 8014a80:	4611      	mov	r1, r2
 8014a82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014a86:	f7ff bc21 	b.w	80142cc <_malloc_r>
 8014a8a:	b922      	cbnz	r2, 8014a96 <_realloc_r+0x20>
 8014a8c:	f7ff fbd0 	bl	8014230 <_free_r>
 8014a90:	4625      	mov	r5, r4
 8014a92:	4628      	mov	r0, r5
 8014a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a96:	f000 f827 	bl	8014ae8 <_malloc_usable_size_r>
 8014a9a:	42a0      	cmp	r0, r4
 8014a9c:	d20f      	bcs.n	8014abe <_realloc_r+0x48>
 8014a9e:	4621      	mov	r1, r4
 8014aa0:	4638      	mov	r0, r7
 8014aa2:	f7ff fc13 	bl	80142cc <_malloc_r>
 8014aa6:	4605      	mov	r5, r0
 8014aa8:	2800      	cmp	r0, #0
 8014aaa:	d0f2      	beq.n	8014a92 <_realloc_r+0x1c>
 8014aac:	4631      	mov	r1, r6
 8014aae:	4622      	mov	r2, r4
 8014ab0:	f7fb fff6 	bl	8010aa0 <memcpy>
 8014ab4:	4631      	mov	r1, r6
 8014ab6:	4638      	mov	r0, r7
 8014ab8:	f7ff fbba 	bl	8014230 <_free_r>
 8014abc:	e7e9      	b.n	8014a92 <_realloc_r+0x1c>
 8014abe:	4635      	mov	r5, r6
 8014ac0:	e7e7      	b.n	8014a92 <_realloc_r+0x1c>
	...

08014ac4 <_read_r>:
 8014ac4:	b538      	push	{r3, r4, r5, lr}
 8014ac6:	4c07      	ldr	r4, [pc, #28]	; (8014ae4 <_read_r+0x20>)
 8014ac8:	4605      	mov	r5, r0
 8014aca:	4608      	mov	r0, r1
 8014acc:	4611      	mov	r1, r2
 8014ace:	2200      	movs	r2, #0
 8014ad0:	6022      	str	r2, [r4, #0]
 8014ad2:	461a      	mov	r2, r3
 8014ad4:	f7ef fb2b 	bl	800412e <_read>
 8014ad8:	1c43      	adds	r3, r0, #1
 8014ada:	d102      	bne.n	8014ae2 <_read_r+0x1e>
 8014adc:	6823      	ldr	r3, [r4, #0]
 8014ade:	b103      	cbz	r3, 8014ae2 <_read_r+0x1e>
 8014ae0:	602b      	str	r3, [r5, #0]
 8014ae2:	bd38      	pop	{r3, r4, r5, pc}
 8014ae4:	20010238 	.word	0x20010238

08014ae8 <_malloc_usable_size_r>:
 8014ae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014aec:	1f18      	subs	r0, r3, #4
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	bfbc      	itt	lt
 8014af2:	580b      	ldrlt	r3, [r1, r0]
 8014af4:	18c0      	addlt	r0, r0, r3
 8014af6:	4770      	bx	lr

08014af8 <pow>:
 8014af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014afc:	ed2d 8b04 	vpush	{d8-d9}
 8014b00:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8014dd4 <pow+0x2dc>
 8014b04:	b08d      	sub	sp, #52	; 0x34
 8014b06:	ec57 6b10 	vmov	r6, r7, d0
 8014b0a:	ec55 4b11 	vmov	r4, r5, d1
 8014b0e:	f000 fb73 	bl	80151f8 <__ieee754_pow>
 8014b12:	f999 3000 	ldrsb.w	r3, [r9]
 8014b16:	9300      	str	r3, [sp, #0]
 8014b18:	3301      	adds	r3, #1
 8014b1a:	eeb0 8a40 	vmov.f32	s16, s0
 8014b1e:	eef0 8a60 	vmov.f32	s17, s1
 8014b22:	46c8      	mov	r8, r9
 8014b24:	d05f      	beq.n	8014be6 <pow+0xee>
 8014b26:	4622      	mov	r2, r4
 8014b28:	462b      	mov	r3, r5
 8014b2a:	4620      	mov	r0, r4
 8014b2c:	4629      	mov	r1, r5
 8014b2e:	f7eb fffd 	bl	8000b2c <__aeabi_dcmpun>
 8014b32:	4683      	mov	fp, r0
 8014b34:	2800      	cmp	r0, #0
 8014b36:	d156      	bne.n	8014be6 <pow+0xee>
 8014b38:	4632      	mov	r2, r6
 8014b3a:	463b      	mov	r3, r7
 8014b3c:	4630      	mov	r0, r6
 8014b3e:	4639      	mov	r1, r7
 8014b40:	f7eb fff4 	bl	8000b2c <__aeabi_dcmpun>
 8014b44:	9001      	str	r0, [sp, #4]
 8014b46:	b1e8      	cbz	r0, 8014b84 <pow+0x8c>
 8014b48:	2200      	movs	r2, #0
 8014b4a:	2300      	movs	r3, #0
 8014b4c:	4620      	mov	r0, r4
 8014b4e:	4629      	mov	r1, r5
 8014b50:	f7eb ffba 	bl	8000ac8 <__aeabi_dcmpeq>
 8014b54:	2800      	cmp	r0, #0
 8014b56:	d046      	beq.n	8014be6 <pow+0xee>
 8014b58:	2301      	movs	r3, #1
 8014b5a:	9302      	str	r3, [sp, #8]
 8014b5c:	4b96      	ldr	r3, [pc, #600]	; (8014db8 <pow+0x2c0>)
 8014b5e:	9303      	str	r3, [sp, #12]
 8014b60:	4b96      	ldr	r3, [pc, #600]	; (8014dbc <pow+0x2c4>)
 8014b62:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8014b66:	2200      	movs	r2, #0
 8014b68:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014b6c:	9b00      	ldr	r3, [sp, #0]
 8014b6e:	2b02      	cmp	r3, #2
 8014b70:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014b74:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014b78:	d033      	beq.n	8014be2 <pow+0xea>
 8014b7a:	a802      	add	r0, sp, #8
 8014b7c:	f001 fbce 	bl	801631c <matherr>
 8014b80:	bb48      	cbnz	r0, 8014bd6 <pow+0xde>
 8014b82:	e05d      	b.n	8014c40 <pow+0x148>
 8014b84:	f04f 0a00 	mov.w	sl, #0
 8014b88:	f04f 0b00 	mov.w	fp, #0
 8014b8c:	4652      	mov	r2, sl
 8014b8e:	465b      	mov	r3, fp
 8014b90:	4630      	mov	r0, r6
 8014b92:	4639      	mov	r1, r7
 8014b94:	f7eb ff98 	bl	8000ac8 <__aeabi_dcmpeq>
 8014b98:	ec4b ab19 	vmov	d9, sl, fp
 8014b9c:	2800      	cmp	r0, #0
 8014b9e:	d054      	beq.n	8014c4a <pow+0x152>
 8014ba0:	4652      	mov	r2, sl
 8014ba2:	465b      	mov	r3, fp
 8014ba4:	4620      	mov	r0, r4
 8014ba6:	4629      	mov	r1, r5
 8014ba8:	f7eb ff8e 	bl	8000ac8 <__aeabi_dcmpeq>
 8014bac:	4680      	mov	r8, r0
 8014bae:	b318      	cbz	r0, 8014bf8 <pow+0x100>
 8014bb0:	2301      	movs	r3, #1
 8014bb2:	9302      	str	r3, [sp, #8]
 8014bb4:	4b80      	ldr	r3, [pc, #512]	; (8014db8 <pow+0x2c0>)
 8014bb6:	9303      	str	r3, [sp, #12]
 8014bb8:	9b01      	ldr	r3, [sp, #4]
 8014bba:	930a      	str	r3, [sp, #40]	; 0x28
 8014bbc:	9b00      	ldr	r3, [sp, #0]
 8014bbe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014bc2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014bc6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d0d5      	beq.n	8014b7a <pow+0x82>
 8014bce:	4b7b      	ldr	r3, [pc, #492]	; (8014dbc <pow+0x2c4>)
 8014bd0:	2200      	movs	r2, #0
 8014bd2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014bd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014bd8:	b11b      	cbz	r3, 8014be2 <pow+0xea>
 8014bda:	f7fb ff37 	bl	8010a4c <__errno>
 8014bde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014be0:	6003      	str	r3, [r0, #0]
 8014be2:	ed9d 8b08 	vldr	d8, [sp, #32]
 8014be6:	eeb0 0a48 	vmov.f32	s0, s16
 8014bea:	eef0 0a68 	vmov.f32	s1, s17
 8014bee:	b00d      	add	sp, #52	; 0x34
 8014bf0:	ecbd 8b04 	vpop	{d8-d9}
 8014bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bf8:	ec45 4b10 	vmov	d0, r4, r5
 8014bfc:	f001 fb86 	bl	801630c <finite>
 8014c00:	2800      	cmp	r0, #0
 8014c02:	d0f0      	beq.n	8014be6 <pow+0xee>
 8014c04:	4652      	mov	r2, sl
 8014c06:	465b      	mov	r3, fp
 8014c08:	4620      	mov	r0, r4
 8014c0a:	4629      	mov	r1, r5
 8014c0c:	f7eb ff66 	bl	8000adc <__aeabi_dcmplt>
 8014c10:	2800      	cmp	r0, #0
 8014c12:	d0e8      	beq.n	8014be6 <pow+0xee>
 8014c14:	2301      	movs	r3, #1
 8014c16:	9302      	str	r3, [sp, #8]
 8014c18:	4b67      	ldr	r3, [pc, #412]	; (8014db8 <pow+0x2c0>)
 8014c1a:	9303      	str	r3, [sp, #12]
 8014c1c:	f999 3000 	ldrsb.w	r3, [r9]
 8014c20:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8014c24:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014c28:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014c2c:	b913      	cbnz	r3, 8014c34 <pow+0x13c>
 8014c2e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8014c32:	e7a2      	b.n	8014b7a <pow+0x82>
 8014c34:	4962      	ldr	r1, [pc, #392]	; (8014dc0 <pow+0x2c8>)
 8014c36:	2000      	movs	r0, #0
 8014c38:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014c3c:	2b02      	cmp	r3, #2
 8014c3e:	d19c      	bne.n	8014b7a <pow+0x82>
 8014c40:	f7fb ff04 	bl	8010a4c <__errno>
 8014c44:	2321      	movs	r3, #33	; 0x21
 8014c46:	6003      	str	r3, [r0, #0]
 8014c48:	e7c5      	b.n	8014bd6 <pow+0xde>
 8014c4a:	eeb0 0a48 	vmov.f32	s0, s16
 8014c4e:	eef0 0a68 	vmov.f32	s1, s17
 8014c52:	f001 fb5b 	bl	801630c <finite>
 8014c56:	9000      	str	r0, [sp, #0]
 8014c58:	2800      	cmp	r0, #0
 8014c5a:	f040 8081 	bne.w	8014d60 <pow+0x268>
 8014c5e:	ec47 6b10 	vmov	d0, r6, r7
 8014c62:	f001 fb53 	bl	801630c <finite>
 8014c66:	2800      	cmp	r0, #0
 8014c68:	d07a      	beq.n	8014d60 <pow+0x268>
 8014c6a:	ec45 4b10 	vmov	d0, r4, r5
 8014c6e:	f001 fb4d 	bl	801630c <finite>
 8014c72:	2800      	cmp	r0, #0
 8014c74:	d074      	beq.n	8014d60 <pow+0x268>
 8014c76:	ec53 2b18 	vmov	r2, r3, d8
 8014c7a:	ee18 0a10 	vmov	r0, s16
 8014c7e:	4619      	mov	r1, r3
 8014c80:	f7eb ff54 	bl	8000b2c <__aeabi_dcmpun>
 8014c84:	f999 9000 	ldrsb.w	r9, [r9]
 8014c88:	4b4b      	ldr	r3, [pc, #300]	; (8014db8 <pow+0x2c0>)
 8014c8a:	b1b0      	cbz	r0, 8014cba <pow+0x1c2>
 8014c8c:	2201      	movs	r2, #1
 8014c8e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014c92:	9b00      	ldr	r3, [sp, #0]
 8014c94:	930a      	str	r3, [sp, #40]	; 0x28
 8014c96:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014c9a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014c9e:	f1b9 0f00 	cmp.w	r9, #0
 8014ca2:	d0c4      	beq.n	8014c2e <pow+0x136>
 8014ca4:	4652      	mov	r2, sl
 8014ca6:	465b      	mov	r3, fp
 8014ca8:	4650      	mov	r0, sl
 8014caa:	4659      	mov	r1, fp
 8014cac:	f7eb fdce 	bl	800084c <__aeabi_ddiv>
 8014cb0:	f1b9 0f02 	cmp.w	r9, #2
 8014cb4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014cb8:	e7c1      	b.n	8014c3e <pow+0x146>
 8014cba:	2203      	movs	r2, #3
 8014cbc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014cc0:	900a      	str	r0, [sp, #40]	; 0x28
 8014cc2:	4629      	mov	r1, r5
 8014cc4:	4620      	mov	r0, r4
 8014cc6:	2200      	movs	r2, #0
 8014cc8:	4b3e      	ldr	r3, [pc, #248]	; (8014dc4 <pow+0x2cc>)
 8014cca:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014cce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014cd2:	f7eb fc91 	bl	80005f8 <__aeabi_dmul>
 8014cd6:	4604      	mov	r4, r0
 8014cd8:	460d      	mov	r5, r1
 8014cda:	f1b9 0f00 	cmp.w	r9, #0
 8014cde:	d124      	bne.n	8014d2a <pow+0x232>
 8014ce0:	4b39      	ldr	r3, [pc, #228]	; (8014dc8 <pow+0x2d0>)
 8014ce2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8014ce6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014cea:	4630      	mov	r0, r6
 8014cec:	4652      	mov	r2, sl
 8014cee:	465b      	mov	r3, fp
 8014cf0:	4639      	mov	r1, r7
 8014cf2:	f7eb fef3 	bl	8000adc <__aeabi_dcmplt>
 8014cf6:	2800      	cmp	r0, #0
 8014cf8:	d056      	beq.n	8014da8 <pow+0x2b0>
 8014cfa:	ec45 4b10 	vmov	d0, r4, r5
 8014cfe:	f001 fb17 	bl	8016330 <rint>
 8014d02:	4622      	mov	r2, r4
 8014d04:	462b      	mov	r3, r5
 8014d06:	ec51 0b10 	vmov	r0, r1, d0
 8014d0a:	f7eb fedd 	bl	8000ac8 <__aeabi_dcmpeq>
 8014d0e:	b920      	cbnz	r0, 8014d1a <pow+0x222>
 8014d10:	4b2e      	ldr	r3, [pc, #184]	; (8014dcc <pow+0x2d4>)
 8014d12:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8014d16:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014d1a:	f998 3000 	ldrsb.w	r3, [r8]
 8014d1e:	2b02      	cmp	r3, #2
 8014d20:	d142      	bne.n	8014da8 <pow+0x2b0>
 8014d22:	f7fb fe93 	bl	8010a4c <__errno>
 8014d26:	2322      	movs	r3, #34	; 0x22
 8014d28:	e78d      	b.n	8014c46 <pow+0x14e>
 8014d2a:	4b29      	ldr	r3, [pc, #164]	; (8014dd0 <pow+0x2d8>)
 8014d2c:	2200      	movs	r2, #0
 8014d2e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014d32:	4630      	mov	r0, r6
 8014d34:	4652      	mov	r2, sl
 8014d36:	465b      	mov	r3, fp
 8014d38:	4639      	mov	r1, r7
 8014d3a:	f7eb fecf 	bl	8000adc <__aeabi_dcmplt>
 8014d3e:	2800      	cmp	r0, #0
 8014d40:	d0eb      	beq.n	8014d1a <pow+0x222>
 8014d42:	ec45 4b10 	vmov	d0, r4, r5
 8014d46:	f001 faf3 	bl	8016330 <rint>
 8014d4a:	4622      	mov	r2, r4
 8014d4c:	462b      	mov	r3, r5
 8014d4e:	ec51 0b10 	vmov	r0, r1, d0
 8014d52:	f7eb feb9 	bl	8000ac8 <__aeabi_dcmpeq>
 8014d56:	2800      	cmp	r0, #0
 8014d58:	d1df      	bne.n	8014d1a <pow+0x222>
 8014d5a:	2200      	movs	r2, #0
 8014d5c:	4b18      	ldr	r3, [pc, #96]	; (8014dc0 <pow+0x2c8>)
 8014d5e:	e7da      	b.n	8014d16 <pow+0x21e>
 8014d60:	2200      	movs	r2, #0
 8014d62:	2300      	movs	r3, #0
 8014d64:	ec51 0b18 	vmov	r0, r1, d8
 8014d68:	f7eb feae 	bl	8000ac8 <__aeabi_dcmpeq>
 8014d6c:	2800      	cmp	r0, #0
 8014d6e:	f43f af3a 	beq.w	8014be6 <pow+0xee>
 8014d72:	ec47 6b10 	vmov	d0, r6, r7
 8014d76:	f001 fac9 	bl	801630c <finite>
 8014d7a:	2800      	cmp	r0, #0
 8014d7c:	f43f af33 	beq.w	8014be6 <pow+0xee>
 8014d80:	ec45 4b10 	vmov	d0, r4, r5
 8014d84:	f001 fac2 	bl	801630c <finite>
 8014d88:	2800      	cmp	r0, #0
 8014d8a:	f43f af2c 	beq.w	8014be6 <pow+0xee>
 8014d8e:	2304      	movs	r3, #4
 8014d90:	9302      	str	r3, [sp, #8]
 8014d92:	4b09      	ldr	r3, [pc, #36]	; (8014db8 <pow+0x2c0>)
 8014d94:	9303      	str	r3, [sp, #12]
 8014d96:	2300      	movs	r3, #0
 8014d98:	930a      	str	r3, [sp, #40]	; 0x28
 8014d9a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014d9e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014da2:	ed8d 9b08 	vstr	d9, [sp, #32]
 8014da6:	e7b8      	b.n	8014d1a <pow+0x222>
 8014da8:	a802      	add	r0, sp, #8
 8014daa:	f001 fab7 	bl	801631c <matherr>
 8014dae:	2800      	cmp	r0, #0
 8014db0:	f47f af11 	bne.w	8014bd6 <pow+0xde>
 8014db4:	e7b5      	b.n	8014d22 <pow+0x22a>
 8014db6:	bf00      	nop
 8014db8:	08016f26 	.word	0x08016f26
 8014dbc:	3ff00000 	.word	0x3ff00000
 8014dc0:	fff00000 	.word	0xfff00000
 8014dc4:	3fe00000 	.word	0x3fe00000
 8014dc8:	47efffff 	.word	0x47efffff
 8014dcc:	c7efffff 	.word	0xc7efffff
 8014dd0:	7ff00000 	.word	0x7ff00000
 8014dd4:	20000348 	.word	0x20000348

08014dd8 <sqrt>:
 8014dd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014ddc:	ed2d 8b02 	vpush	{d8}
 8014de0:	b08b      	sub	sp, #44	; 0x2c
 8014de2:	ec55 4b10 	vmov	r4, r5, d0
 8014de6:	f000 ff15 	bl	8015c14 <__ieee754_sqrt>
 8014dea:	4b26      	ldr	r3, [pc, #152]	; (8014e84 <sqrt+0xac>)
 8014dec:	eeb0 8a40 	vmov.f32	s16, s0
 8014df0:	eef0 8a60 	vmov.f32	s17, s1
 8014df4:	f993 6000 	ldrsb.w	r6, [r3]
 8014df8:	1c73      	adds	r3, r6, #1
 8014dfa:	d02a      	beq.n	8014e52 <sqrt+0x7a>
 8014dfc:	4622      	mov	r2, r4
 8014dfe:	462b      	mov	r3, r5
 8014e00:	4620      	mov	r0, r4
 8014e02:	4629      	mov	r1, r5
 8014e04:	f7eb fe92 	bl	8000b2c <__aeabi_dcmpun>
 8014e08:	4607      	mov	r7, r0
 8014e0a:	bb10      	cbnz	r0, 8014e52 <sqrt+0x7a>
 8014e0c:	f04f 0800 	mov.w	r8, #0
 8014e10:	f04f 0900 	mov.w	r9, #0
 8014e14:	4642      	mov	r2, r8
 8014e16:	464b      	mov	r3, r9
 8014e18:	4620      	mov	r0, r4
 8014e1a:	4629      	mov	r1, r5
 8014e1c:	f7eb fe5e 	bl	8000adc <__aeabi_dcmplt>
 8014e20:	b1b8      	cbz	r0, 8014e52 <sqrt+0x7a>
 8014e22:	2301      	movs	r3, #1
 8014e24:	9300      	str	r3, [sp, #0]
 8014e26:	4b18      	ldr	r3, [pc, #96]	; (8014e88 <sqrt+0xb0>)
 8014e28:	9301      	str	r3, [sp, #4]
 8014e2a:	9708      	str	r7, [sp, #32]
 8014e2c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8014e30:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8014e34:	b9b6      	cbnz	r6, 8014e64 <sqrt+0x8c>
 8014e36:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8014e3a:	4668      	mov	r0, sp
 8014e3c:	f001 fa6e 	bl	801631c <matherr>
 8014e40:	b1d0      	cbz	r0, 8014e78 <sqrt+0xa0>
 8014e42:	9b08      	ldr	r3, [sp, #32]
 8014e44:	b11b      	cbz	r3, 8014e4e <sqrt+0x76>
 8014e46:	f7fb fe01 	bl	8010a4c <__errno>
 8014e4a:	9b08      	ldr	r3, [sp, #32]
 8014e4c:	6003      	str	r3, [r0, #0]
 8014e4e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8014e52:	eeb0 0a48 	vmov.f32	s0, s16
 8014e56:	eef0 0a68 	vmov.f32	s1, s17
 8014e5a:	b00b      	add	sp, #44	; 0x2c
 8014e5c:	ecbd 8b02 	vpop	{d8}
 8014e60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014e64:	4642      	mov	r2, r8
 8014e66:	464b      	mov	r3, r9
 8014e68:	4640      	mov	r0, r8
 8014e6a:	4649      	mov	r1, r9
 8014e6c:	f7eb fcee 	bl	800084c <__aeabi_ddiv>
 8014e70:	2e02      	cmp	r6, #2
 8014e72:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014e76:	d1e0      	bne.n	8014e3a <sqrt+0x62>
 8014e78:	f7fb fde8 	bl	8010a4c <__errno>
 8014e7c:	2321      	movs	r3, #33	; 0x21
 8014e7e:	6003      	str	r3, [r0, #0]
 8014e80:	e7df      	b.n	8014e42 <sqrt+0x6a>
 8014e82:	bf00      	nop
 8014e84:	20000348 	.word	0x20000348
 8014e88:	08016f2a 	.word	0x08016f2a

08014e8c <powf>:
 8014e8c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8014e90:	ed2d 8b04 	vpush	{d8-d9}
 8014e94:	4ca7      	ldr	r4, [pc, #668]	; (8015134 <powf+0x2a8>)
 8014e96:	b08a      	sub	sp, #40	; 0x28
 8014e98:	eef0 8a40 	vmov.f32	s17, s0
 8014e9c:	eeb0 8a60 	vmov.f32	s16, s1
 8014ea0:	f000 ff68 	bl	8015d74 <__ieee754_powf>
 8014ea4:	f994 5000 	ldrsb.w	r5, [r4]
 8014ea8:	1c6b      	adds	r3, r5, #1
 8014eaa:	eeb0 9a40 	vmov.f32	s18, s0
 8014eae:	4626      	mov	r6, r4
 8014eb0:	d05f      	beq.n	8014f72 <powf+0xe6>
 8014eb2:	eeb4 8a48 	vcmp.f32	s16, s16
 8014eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014eba:	d65a      	bvs.n	8014f72 <powf+0xe6>
 8014ebc:	eef4 8a68 	vcmp.f32	s17, s17
 8014ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ec4:	d721      	bvc.n	8014f0a <powf+0x7e>
 8014ec6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ece:	d150      	bne.n	8014f72 <powf+0xe6>
 8014ed0:	2301      	movs	r3, #1
 8014ed2:	9300      	str	r3, [sp, #0]
 8014ed4:	4b98      	ldr	r3, [pc, #608]	; (8015138 <powf+0x2ac>)
 8014ed6:	9301      	str	r3, [sp, #4]
 8014ed8:	ee18 0a90 	vmov	r0, s17
 8014edc:	2300      	movs	r3, #0
 8014ede:	9308      	str	r3, [sp, #32]
 8014ee0:	f7eb fb32 	bl	8000548 <__aeabi_f2d>
 8014ee4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014ee8:	ee18 0a10 	vmov	r0, s16
 8014eec:	f7eb fb2c 	bl	8000548 <__aeabi_f2d>
 8014ef0:	4b92      	ldr	r3, [pc, #584]	; (801513c <powf+0x2b0>)
 8014ef2:	2200      	movs	r2, #0
 8014ef4:	2d02      	cmp	r5, #2
 8014ef6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014efa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014efe:	d032      	beq.n	8014f66 <powf+0xda>
 8014f00:	4668      	mov	r0, sp
 8014f02:	f001 fa0b 	bl	801631c <matherr>
 8014f06:	bb40      	cbnz	r0, 8014f5a <powf+0xce>
 8014f08:	e065      	b.n	8014fd6 <powf+0x14a>
 8014f0a:	eddf 9a8d 	vldr	s19, [pc, #564]	; 8015140 <powf+0x2b4>
 8014f0e:	eef4 8a69 	vcmp.f32	s17, s19
 8014f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f16:	d163      	bne.n	8014fe0 <powf+0x154>
 8014f18:	eeb4 8a69 	vcmp.f32	s16, s19
 8014f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f20:	d12e      	bne.n	8014f80 <powf+0xf4>
 8014f22:	2301      	movs	r3, #1
 8014f24:	9300      	str	r3, [sp, #0]
 8014f26:	4b84      	ldr	r3, [pc, #528]	; (8015138 <powf+0x2ac>)
 8014f28:	9301      	str	r3, [sp, #4]
 8014f2a:	ee18 0a90 	vmov	r0, s17
 8014f2e:	2300      	movs	r3, #0
 8014f30:	9308      	str	r3, [sp, #32]
 8014f32:	f7eb fb09 	bl	8000548 <__aeabi_f2d>
 8014f36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014f3a:	ee18 0a10 	vmov	r0, s16
 8014f3e:	f7eb fb03 	bl	8000548 <__aeabi_f2d>
 8014f42:	2200      	movs	r2, #0
 8014f44:	2300      	movs	r3, #0
 8014f46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014f4a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014f4e:	2d00      	cmp	r5, #0
 8014f50:	d0d6      	beq.n	8014f00 <powf+0x74>
 8014f52:	4b7a      	ldr	r3, [pc, #488]	; (801513c <powf+0x2b0>)
 8014f54:	2200      	movs	r2, #0
 8014f56:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014f5a:	9b08      	ldr	r3, [sp, #32]
 8014f5c:	b11b      	cbz	r3, 8014f66 <powf+0xda>
 8014f5e:	f7fb fd75 	bl	8010a4c <__errno>
 8014f62:	9b08      	ldr	r3, [sp, #32]
 8014f64:	6003      	str	r3, [r0, #0]
 8014f66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014f6a:	f7eb fe3d 	bl	8000be8 <__aeabi_d2f>
 8014f6e:	ee09 0a10 	vmov	s18, r0
 8014f72:	eeb0 0a49 	vmov.f32	s0, s18
 8014f76:	b00a      	add	sp, #40	; 0x28
 8014f78:	ecbd 8b04 	vpop	{d8-d9}
 8014f7c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8014f80:	eeb0 0a48 	vmov.f32	s0, s16
 8014f84:	f001 fad5 	bl	8016532 <finitef>
 8014f88:	2800      	cmp	r0, #0
 8014f8a:	d0f2      	beq.n	8014f72 <powf+0xe6>
 8014f8c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014f94:	d5ed      	bpl.n	8014f72 <powf+0xe6>
 8014f96:	2301      	movs	r3, #1
 8014f98:	9300      	str	r3, [sp, #0]
 8014f9a:	4b67      	ldr	r3, [pc, #412]	; (8015138 <powf+0x2ac>)
 8014f9c:	9301      	str	r3, [sp, #4]
 8014f9e:	ee18 0a90 	vmov	r0, s17
 8014fa2:	2300      	movs	r3, #0
 8014fa4:	9308      	str	r3, [sp, #32]
 8014fa6:	f7eb facf 	bl	8000548 <__aeabi_f2d>
 8014faa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014fae:	ee18 0a10 	vmov	r0, s16
 8014fb2:	f7eb fac9 	bl	8000548 <__aeabi_f2d>
 8014fb6:	f994 3000 	ldrsb.w	r3, [r4]
 8014fba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014fbe:	b923      	cbnz	r3, 8014fca <powf+0x13e>
 8014fc0:	2200      	movs	r2, #0
 8014fc2:	2300      	movs	r3, #0
 8014fc4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014fc8:	e79a      	b.n	8014f00 <powf+0x74>
 8014fca:	495e      	ldr	r1, [pc, #376]	; (8015144 <powf+0x2b8>)
 8014fcc:	2000      	movs	r0, #0
 8014fce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014fd2:	2b02      	cmp	r3, #2
 8014fd4:	d194      	bne.n	8014f00 <powf+0x74>
 8014fd6:	f7fb fd39 	bl	8010a4c <__errno>
 8014fda:	2321      	movs	r3, #33	; 0x21
 8014fdc:	6003      	str	r3, [r0, #0]
 8014fde:	e7bc      	b.n	8014f5a <powf+0xce>
 8014fe0:	f001 faa7 	bl	8016532 <finitef>
 8014fe4:	4605      	mov	r5, r0
 8014fe6:	2800      	cmp	r0, #0
 8014fe8:	d173      	bne.n	80150d2 <powf+0x246>
 8014fea:	eeb0 0a68 	vmov.f32	s0, s17
 8014fee:	f001 faa0 	bl	8016532 <finitef>
 8014ff2:	2800      	cmp	r0, #0
 8014ff4:	d06d      	beq.n	80150d2 <powf+0x246>
 8014ff6:	eeb0 0a48 	vmov.f32	s0, s16
 8014ffa:	f001 fa9a 	bl	8016532 <finitef>
 8014ffe:	2800      	cmp	r0, #0
 8015000:	d067      	beq.n	80150d2 <powf+0x246>
 8015002:	ee18 0a90 	vmov	r0, s17
 8015006:	f7eb fa9f 	bl	8000548 <__aeabi_f2d>
 801500a:	4680      	mov	r8, r0
 801500c:	ee18 0a10 	vmov	r0, s16
 8015010:	4689      	mov	r9, r1
 8015012:	f7eb fa99 	bl	8000548 <__aeabi_f2d>
 8015016:	eeb4 9a49 	vcmp.f32	s18, s18
 801501a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801501e:	f994 4000 	ldrsb.w	r4, [r4]
 8015022:	4b45      	ldr	r3, [pc, #276]	; (8015138 <powf+0x2ac>)
 8015024:	d713      	bvc.n	801504e <powf+0x1c2>
 8015026:	2201      	movs	r2, #1
 8015028:	e9cd 2300 	strd	r2, r3, [sp]
 801502c:	9508      	str	r5, [sp, #32]
 801502e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8015032:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015036:	2c00      	cmp	r4, #0
 8015038:	d0c2      	beq.n	8014fc0 <powf+0x134>
 801503a:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 801503e:	ee17 0a90 	vmov	r0, s15
 8015042:	f7eb fa81 	bl	8000548 <__aeabi_f2d>
 8015046:	2c02      	cmp	r4, #2
 8015048:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801504c:	e7c2      	b.n	8014fd4 <powf+0x148>
 801504e:	2203      	movs	r2, #3
 8015050:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015054:	e9cd 2300 	strd	r2, r3, [sp]
 8015058:	9508      	str	r5, [sp, #32]
 801505a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801505e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015062:	ee28 8a27 	vmul.f32	s16, s16, s15
 8015066:	b9fc      	cbnz	r4, 80150a8 <powf+0x21c>
 8015068:	4b37      	ldr	r3, [pc, #220]	; (8015148 <powf+0x2bc>)
 801506a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 801506e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015076:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801507a:	d553      	bpl.n	8015124 <powf+0x298>
 801507c:	eeb0 0a48 	vmov.f32	s0, s16
 8015080:	f001 fa62 	bl	8016548 <rintf>
 8015084:	eeb4 0a48 	vcmp.f32	s0, s16
 8015088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801508c:	d004      	beq.n	8015098 <powf+0x20c>
 801508e:	4b2f      	ldr	r3, [pc, #188]	; (801514c <powf+0x2c0>)
 8015090:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8015094:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015098:	f996 3000 	ldrsb.w	r3, [r6]
 801509c:	2b02      	cmp	r3, #2
 801509e:	d141      	bne.n	8015124 <powf+0x298>
 80150a0:	f7fb fcd4 	bl	8010a4c <__errno>
 80150a4:	2322      	movs	r3, #34	; 0x22
 80150a6:	e799      	b.n	8014fdc <powf+0x150>
 80150a8:	4b29      	ldr	r3, [pc, #164]	; (8015150 <powf+0x2c4>)
 80150aa:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80150ae:	2200      	movs	r2, #0
 80150b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150b4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80150b8:	d5ee      	bpl.n	8015098 <powf+0x20c>
 80150ba:	eeb0 0a48 	vmov.f32	s0, s16
 80150be:	f001 fa43 	bl	8016548 <rintf>
 80150c2:	eeb4 0a48 	vcmp.f32	s0, s16
 80150c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150ca:	d0e5      	beq.n	8015098 <powf+0x20c>
 80150cc:	2200      	movs	r2, #0
 80150ce:	4b1d      	ldr	r3, [pc, #116]	; (8015144 <powf+0x2b8>)
 80150d0:	e7e0      	b.n	8015094 <powf+0x208>
 80150d2:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80150d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150da:	f47f af4a 	bne.w	8014f72 <powf+0xe6>
 80150de:	eeb0 0a68 	vmov.f32	s0, s17
 80150e2:	f001 fa26 	bl	8016532 <finitef>
 80150e6:	2800      	cmp	r0, #0
 80150e8:	f43f af43 	beq.w	8014f72 <powf+0xe6>
 80150ec:	eeb0 0a48 	vmov.f32	s0, s16
 80150f0:	f001 fa1f 	bl	8016532 <finitef>
 80150f4:	2800      	cmp	r0, #0
 80150f6:	f43f af3c 	beq.w	8014f72 <powf+0xe6>
 80150fa:	2304      	movs	r3, #4
 80150fc:	9300      	str	r3, [sp, #0]
 80150fe:	4b0e      	ldr	r3, [pc, #56]	; (8015138 <powf+0x2ac>)
 8015100:	9301      	str	r3, [sp, #4]
 8015102:	ee18 0a90 	vmov	r0, s17
 8015106:	2300      	movs	r3, #0
 8015108:	9308      	str	r3, [sp, #32]
 801510a:	f7eb fa1d 	bl	8000548 <__aeabi_f2d>
 801510e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015112:	ee18 0a10 	vmov	r0, s16
 8015116:	f7eb fa17 	bl	8000548 <__aeabi_f2d>
 801511a:	2200      	movs	r2, #0
 801511c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015120:	2300      	movs	r3, #0
 8015122:	e7b7      	b.n	8015094 <powf+0x208>
 8015124:	4668      	mov	r0, sp
 8015126:	f001 f8f9 	bl	801631c <matherr>
 801512a:	2800      	cmp	r0, #0
 801512c:	f47f af15 	bne.w	8014f5a <powf+0xce>
 8015130:	e7b6      	b.n	80150a0 <powf+0x214>
 8015132:	bf00      	nop
 8015134:	20000348 	.word	0x20000348
 8015138:	08016f2f 	.word	0x08016f2f
 801513c:	3ff00000 	.word	0x3ff00000
 8015140:	00000000 	.word	0x00000000
 8015144:	fff00000 	.word	0xfff00000
 8015148:	47efffff 	.word	0x47efffff
 801514c:	c7efffff 	.word	0xc7efffff
 8015150:	7ff00000 	.word	0x7ff00000

08015154 <sqrtf>:
 8015154:	b510      	push	{r4, lr}
 8015156:	ed2d 8b02 	vpush	{d8}
 801515a:	b08a      	sub	sp, #40	; 0x28
 801515c:	eeb0 8a40 	vmov.f32	s16, s0
 8015160:	f001 f8c8 	bl	80162f4 <__ieee754_sqrtf>
 8015164:	4b21      	ldr	r3, [pc, #132]	; (80151ec <sqrtf+0x98>)
 8015166:	f993 4000 	ldrsb.w	r4, [r3]
 801516a:	1c63      	adds	r3, r4, #1
 801516c:	d02c      	beq.n	80151c8 <sqrtf+0x74>
 801516e:	eeb4 8a48 	vcmp.f32	s16, s16
 8015172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015176:	d627      	bvs.n	80151c8 <sqrtf+0x74>
 8015178:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801517c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015180:	d522      	bpl.n	80151c8 <sqrtf+0x74>
 8015182:	2301      	movs	r3, #1
 8015184:	9300      	str	r3, [sp, #0]
 8015186:	4b1a      	ldr	r3, [pc, #104]	; (80151f0 <sqrtf+0x9c>)
 8015188:	9301      	str	r3, [sp, #4]
 801518a:	ee18 0a10 	vmov	r0, s16
 801518e:	2300      	movs	r3, #0
 8015190:	9308      	str	r3, [sp, #32]
 8015192:	f7eb f9d9 	bl	8000548 <__aeabi_f2d>
 8015196:	2200      	movs	r2, #0
 8015198:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801519c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80151a0:	2300      	movs	r3, #0
 80151a2:	b9ac      	cbnz	r4, 80151d0 <sqrtf+0x7c>
 80151a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80151a8:	4668      	mov	r0, sp
 80151aa:	f001 f8b7 	bl	801631c <matherr>
 80151ae:	b1b8      	cbz	r0, 80151e0 <sqrtf+0x8c>
 80151b0:	9b08      	ldr	r3, [sp, #32]
 80151b2:	b11b      	cbz	r3, 80151bc <sqrtf+0x68>
 80151b4:	f7fb fc4a 	bl	8010a4c <__errno>
 80151b8:	9b08      	ldr	r3, [sp, #32]
 80151ba:	6003      	str	r3, [r0, #0]
 80151bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80151c0:	f7eb fd12 	bl	8000be8 <__aeabi_d2f>
 80151c4:	ee00 0a10 	vmov	s0, r0
 80151c8:	b00a      	add	sp, #40	; 0x28
 80151ca:	ecbd 8b02 	vpop	{d8}
 80151ce:	bd10      	pop	{r4, pc}
 80151d0:	4610      	mov	r0, r2
 80151d2:	4619      	mov	r1, r3
 80151d4:	f7eb fb3a 	bl	800084c <__aeabi_ddiv>
 80151d8:	2c02      	cmp	r4, #2
 80151da:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80151de:	d1e3      	bne.n	80151a8 <sqrtf+0x54>
 80151e0:	f7fb fc34 	bl	8010a4c <__errno>
 80151e4:	2321      	movs	r3, #33	; 0x21
 80151e6:	6003      	str	r3, [r0, #0]
 80151e8:	e7e2      	b.n	80151b0 <sqrtf+0x5c>
 80151ea:	bf00      	nop
 80151ec:	20000348 	.word	0x20000348
 80151f0:	08016f34 	.word	0x08016f34
 80151f4:	00000000 	.word	0x00000000

080151f8 <__ieee754_pow>:
 80151f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151fc:	b091      	sub	sp, #68	; 0x44
 80151fe:	ed8d 1b00 	vstr	d1, [sp]
 8015202:	e9dd 2900 	ldrd	r2, r9, [sp]
 8015206:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801520a:	ea58 0302 	orrs.w	r3, r8, r2
 801520e:	ec57 6b10 	vmov	r6, r7, d0
 8015212:	f000 84be 	beq.w	8015b92 <__ieee754_pow+0x99a>
 8015216:	4b7a      	ldr	r3, [pc, #488]	; (8015400 <__ieee754_pow+0x208>)
 8015218:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801521c:	429c      	cmp	r4, r3
 801521e:	463d      	mov	r5, r7
 8015220:	ee10 aa10 	vmov	sl, s0
 8015224:	dc09      	bgt.n	801523a <__ieee754_pow+0x42>
 8015226:	d103      	bne.n	8015230 <__ieee754_pow+0x38>
 8015228:	b93e      	cbnz	r6, 801523a <__ieee754_pow+0x42>
 801522a:	45a0      	cmp	r8, r4
 801522c:	dc0d      	bgt.n	801524a <__ieee754_pow+0x52>
 801522e:	e001      	b.n	8015234 <__ieee754_pow+0x3c>
 8015230:	4598      	cmp	r8, r3
 8015232:	dc02      	bgt.n	801523a <__ieee754_pow+0x42>
 8015234:	4598      	cmp	r8, r3
 8015236:	d10e      	bne.n	8015256 <__ieee754_pow+0x5e>
 8015238:	b16a      	cbz	r2, 8015256 <__ieee754_pow+0x5e>
 801523a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801523e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015242:	ea54 030a 	orrs.w	r3, r4, sl
 8015246:	f000 84a4 	beq.w	8015b92 <__ieee754_pow+0x99a>
 801524a:	486e      	ldr	r0, [pc, #440]	; (8015404 <__ieee754_pow+0x20c>)
 801524c:	b011      	add	sp, #68	; 0x44
 801524e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015252:	f001 b865 	b.w	8016320 <nan>
 8015256:	2d00      	cmp	r5, #0
 8015258:	da53      	bge.n	8015302 <__ieee754_pow+0x10a>
 801525a:	4b6b      	ldr	r3, [pc, #428]	; (8015408 <__ieee754_pow+0x210>)
 801525c:	4598      	cmp	r8, r3
 801525e:	dc4d      	bgt.n	80152fc <__ieee754_pow+0x104>
 8015260:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8015264:	4598      	cmp	r8, r3
 8015266:	dd4c      	ble.n	8015302 <__ieee754_pow+0x10a>
 8015268:	ea4f 5328 	mov.w	r3, r8, asr #20
 801526c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8015270:	2b14      	cmp	r3, #20
 8015272:	dd26      	ble.n	80152c2 <__ieee754_pow+0xca>
 8015274:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8015278:	fa22 f103 	lsr.w	r1, r2, r3
 801527c:	fa01 f303 	lsl.w	r3, r1, r3
 8015280:	4293      	cmp	r3, r2
 8015282:	d13e      	bne.n	8015302 <__ieee754_pow+0x10a>
 8015284:	f001 0101 	and.w	r1, r1, #1
 8015288:	f1c1 0b02 	rsb	fp, r1, #2
 801528c:	2a00      	cmp	r2, #0
 801528e:	d15b      	bne.n	8015348 <__ieee754_pow+0x150>
 8015290:	4b5b      	ldr	r3, [pc, #364]	; (8015400 <__ieee754_pow+0x208>)
 8015292:	4598      	cmp	r8, r3
 8015294:	d124      	bne.n	80152e0 <__ieee754_pow+0xe8>
 8015296:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801529a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801529e:	ea53 030a 	orrs.w	r3, r3, sl
 80152a2:	f000 8476 	beq.w	8015b92 <__ieee754_pow+0x99a>
 80152a6:	4b59      	ldr	r3, [pc, #356]	; (801540c <__ieee754_pow+0x214>)
 80152a8:	429c      	cmp	r4, r3
 80152aa:	dd2d      	ble.n	8015308 <__ieee754_pow+0x110>
 80152ac:	f1b9 0f00 	cmp.w	r9, #0
 80152b0:	f280 8473 	bge.w	8015b9a <__ieee754_pow+0x9a2>
 80152b4:	2000      	movs	r0, #0
 80152b6:	2100      	movs	r1, #0
 80152b8:	ec41 0b10 	vmov	d0, r0, r1
 80152bc:	b011      	add	sp, #68	; 0x44
 80152be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152c2:	2a00      	cmp	r2, #0
 80152c4:	d13e      	bne.n	8015344 <__ieee754_pow+0x14c>
 80152c6:	f1c3 0314 	rsb	r3, r3, #20
 80152ca:	fa48 f103 	asr.w	r1, r8, r3
 80152ce:	fa01 f303 	lsl.w	r3, r1, r3
 80152d2:	4543      	cmp	r3, r8
 80152d4:	f040 8469 	bne.w	8015baa <__ieee754_pow+0x9b2>
 80152d8:	f001 0101 	and.w	r1, r1, #1
 80152dc:	f1c1 0b02 	rsb	fp, r1, #2
 80152e0:	4b4b      	ldr	r3, [pc, #300]	; (8015410 <__ieee754_pow+0x218>)
 80152e2:	4598      	cmp	r8, r3
 80152e4:	d118      	bne.n	8015318 <__ieee754_pow+0x120>
 80152e6:	f1b9 0f00 	cmp.w	r9, #0
 80152ea:	f280 845a 	bge.w	8015ba2 <__ieee754_pow+0x9aa>
 80152ee:	4948      	ldr	r1, [pc, #288]	; (8015410 <__ieee754_pow+0x218>)
 80152f0:	4632      	mov	r2, r6
 80152f2:	463b      	mov	r3, r7
 80152f4:	2000      	movs	r0, #0
 80152f6:	f7eb faa9 	bl	800084c <__aeabi_ddiv>
 80152fa:	e7dd      	b.n	80152b8 <__ieee754_pow+0xc0>
 80152fc:	f04f 0b02 	mov.w	fp, #2
 8015300:	e7c4      	b.n	801528c <__ieee754_pow+0x94>
 8015302:	f04f 0b00 	mov.w	fp, #0
 8015306:	e7c1      	b.n	801528c <__ieee754_pow+0x94>
 8015308:	f1b9 0f00 	cmp.w	r9, #0
 801530c:	dad2      	bge.n	80152b4 <__ieee754_pow+0xbc>
 801530e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8015312:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8015316:	e7cf      	b.n	80152b8 <__ieee754_pow+0xc0>
 8015318:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801531c:	d106      	bne.n	801532c <__ieee754_pow+0x134>
 801531e:	4632      	mov	r2, r6
 8015320:	463b      	mov	r3, r7
 8015322:	4610      	mov	r0, r2
 8015324:	4619      	mov	r1, r3
 8015326:	f7eb f967 	bl	80005f8 <__aeabi_dmul>
 801532a:	e7c5      	b.n	80152b8 <__ieee754_pow+0xc0>
 801532c:	4b39      	ldr	r3, [pc, #228]	; (8015414 <__ieee754_pow+0x21c>)
 801532e:	4599      	cmp	r9, r3
 8015330:	d10a      	bne.n	8015348 <__ieee754_pow+0x150>
 8015332:	2d00      	cmp	r5, #0
 8015334:	db08      	blt.n	8015348 <__ieee754_pow+0x150>
 8015336:	ec47 6b10 	vmov	d0, r6, r7
 801533a:	b011      	add	sp, #68	; 0x44
 801533c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015340:	f000 bc68 	b.w	8015c14 <__ieee754_sqrt>
 8015344:	f04f 0b00 	mov.w	fp, #0
 8015348:	ec47 6b10 	vmov	d0, r6, r7
 801534c:	f000 ffd5 	bl	80162fa <fabs>
 8015350:	ec51 0b10 	vmov	r0, r1, d0
 8015354:	f1ba 0f00 	cmp.w	sl, #0
 8015358:	d127      	bne.n	80153aa <__ieee754_pow+0x1b2>
 801535a:	b124      	cbz	r4, 8015366 <__ieee754_pow+0x16e>
 801535c:	4b2c      	ldr	r3, [pc, #176]	; (8015410 <__ieee754_pow+0x218>)
 801535e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8015362:	429a      	cmp	r2, r3
 8015364:	d121      	bne.n	80153aa <__ieee754_pow+0x1b2>
 8015366:	f1b9 0f00 	cmp.w	r9, #0
 801536a:	da05      	bge.n	8015378 <__ieee754_pow+0x180>
 801536c:	4602      	mov	r2, r0
 801536e:	460b      	mov	r3, r1
 8015370:	2000      	movs	r0, #0
 8015372:	4927      	ldr	r1, [pc, #156]	; (8015410 <__ieee754_pow+0x218>)
 8015374:	f7eb fa6a 	bl	800084c <__aeabi_ddiv>
 8015378:	2d00      	cmp	r5, #0
 801537a:	da9d      	bge.n	80152b8 <__ieee754_pow+0xc0>
 801537c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8015380:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015384:	ea54 030b 	orrs.w	r3, r4, fp
 8015388:	d108      	bne.n	801539c <__ieee754_pow+0x1a4>
 801538a:	4602      	mov	r2, r0
 801538c:	460b      	mov	r3, r1
 801538e:	4610      	mov	r0, r2
 8015390:	4619      	mov	r1, r3
 8015392:	f7ea ff79 	bl	8000288 <__aeabi_dsub>
 8015396:	4602      	mov	r2, r0
 8015398:	460b      	mov	r3, r1
 801539a:	e7ac      	b.n	80152f6 <__ieee754_pow+0xfe>
 801539c:	f1bb 0f01 	cmp.w	fp, #1
 80153a0:	d18a      	bne.n	80152b8 <__ieee754_pow+0xc0>
 80153a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80153a6:	4619      	mov	r1, r3
 80153a8:	e786      	b.n	80152b8 <__ieee754_pow+0xc0>
 80153aa:	0fed      	lsrs	r5, r5, #31
 80153ac:	1e6b      	subs	r3, r5, #1
 80153ae:	930d      	str	r3, [sp, #52]	; 0x34
 80153b0:	ea5b 0303 	orrs.w	r3, fp, r3
 80153b4:	d102      	bne.n	80153bc <__ieee754_pow+0x1c4>
 80153b6:	4632      	mov	r2, r6
 80153b8:	463b      	mov	r3, r7
 80153ba:	e7e8      	b.n	801538e <__ieee754_pow+0x196>
 80153bc:	4b16      	ldr	r3, [pc, #88]	; (8015418 <__ieee754_pow+0x220>)
 80153be:	4598      	cmp	r8, r3
 80153c0:	f340 80fe 	ble.w	80155c0 <__ieee754_pow+0x3c8>
 80153c4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80153c8:	4598      	cmp	r8, r3
 80153ca:	dd0a      	ble.n	80153e2 <__ieee754_pow+0x1ea>
 80153cc:	4b0f      	ldr	r3, [pc, #60]	; (801540c <__ieee754_pow+0x214>)
 80153ce:	429c      	cmp	r4, r3
 80153d0:	dc0d      	bgt.n	80153ee <__ieee754_pow+0x1f6>
 80153d2:	f1b9 0f00 	cmp.w	r9, #0
 80153d6:	f6bf af6d 	bge.w	80152b4 <__ieee754_pow+0xbc>
 80153da:	a307      	add	r3, pc, #28	; (adr r3, 80153f8 <__ieee754_pow+0x200>)
 80153dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153e0:	e79f      	b.n	8015322 <__ieee754_pow+0x12a>
 80153e2:	4b0e      	ldr	r3, [pc, #56]	; (801541c <__ieee754_pow+0x224>)
 80153e4:	429c      	cmp	r4, r3
 80153e6:	ddf4      	ble.n	80153d2 <__ieee754_pow+0x1da>
 80153e8:	4b09      	ldr	r3, [pc, #36]	; (8015410 <__ieee754_pow+0x218>)
 80153ea:	429c      	cmp	r4, r3
 80153ec:	dd18      	ble.n	8015420 <__ieee754_pow+0x228>
 80153ee:	f1b9 0f00 	cmp.w	r9, #0
 80153f2:	dcf2      	bgt.n	80153da <__ieee754_pow+0x1e2>
 80153f4:	e75e      	b.n	80152b4 <__ieee754_pow+0xbc>
 80153f6:	bf00      	nop
 80153f8:	8800759c 	.word	0x8800759c
 80153fc:	7e37e43c 	.word	0x7e37e43c
 8015400:	7ff00000 	.word	0x7ff00000
 8015404:	08016e19 	.word	0x08016e19
 8015408:	433fffff 	.word	0x433fffff
 801540c:	3fefffff 	.word	0x3fefffff
 8015410:	3ff00000 	.word	0x3ff00000
 8015414:	3fe00000 	.word	0x3fe00000
 8015418:	41e00000 	.word	0x41e00000
 801541c:	3feffffe 	.word	0x3feffffe
 8015420:	2200      	movs	r2, #0
 8015422:	4b63      	ldr	r3, [pc, #396]	; (80155b0 <__ieee754_pow+0x3b8>)
 8015424:	f7ea ff30 	bl	8000288 <__aeabi_dsub>
 8015428:	a355      	add	r3, pc, #340	; (adr r3, 8015580 <__ieee754_pow+0x388>)
 801542a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801542e:	4604      	mov	r4, r0
 8015430:	460d      	mov	r5, r1
 8015432:	f7eb f8e1 	bl	80005f8 <__aeabi_dmul>
 8015436:	a354      	add	r3, pc, #336	; (adr r3, 8015588 <__ieee754_pow+0x390>)
 8015438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801543c:	4606      	mov	r6, r0
 801543e:	460f      	mov	r7, r1
 8015440:	4620      	mov	r0, r4
 8015442:	4629      	mov	r1, r5
 8015444:	f7eb f8d8 	bl	80005f8 <__aeabi_dmul>
 8015448:	2200      	movs	r2, #0
 801544a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801544e:	4b59      	ldr	r3, [pc, #356]	; (80155b4 <__ieee754_pow+0x3bc>)
 8015450:	4620      	mov	r0, r4
 8015452:	4629      	mov	r1, r5
 8015454:	f7eb f8d0 	bl	80005f8 <__aeabi_dmul>
 8015458:	4602      	mov	r2, r0
 801545a:	460b      	mov	r3, r1
 801545c:	a14c      	add	r1, pc, #304	; (adr r1, 8015590 <__ieee754_pow+0x398>)
 801545e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015462:	f7ea ff11 	bl	8000288 <__aeabi_dsub>
 8015466:	4622      	mov	r2, r4
 8015468:	462b      	mov	r3, r5
 801546a:	f7eb f8c5 	bl	80005f8 <__aeabi_dmul>
 801546e:	4602      	mov	r2, r0
 8015470:	460b      	mov	r3, r1
 8015472:	2000      	movs	r0, #0
 8015474:	4950      	ldr	r1, [pc, #320]	; (80155b8 <__ieee754_pow+0x3c0>)
 8015476:	f7ea ff07 	bl	8000288 <__aeabi_dsub>
 801547a:	4622      	mov	r2, r4
 801547c:	462b      	mov	r3, r5
 801547e:	4680      	mov	r8, r0
 8015480:	4689      	mov	r9, r1
 8015482:	4620      	mov	r0, r4
 8015484:	4629      	mov	r1, r5
 8015486:	f7eb f8b7 	bl	80005f8 <__aeabi_dmul>
 801548a:	4602      	mov	r2, r0
 801548c:	460b      	mov	r3, r1
 801548e:	4640      	mov	r0, r8
 8015490:	4649      	mov	r1, r9
 8015492:	f7eb f8b1 	bl	80005f8 <__aeabi_dmul>
 8015496:	a340      	add	r3, pc, #256	; (adr r3, 8015598 <__ieee754_pow+0x3a0>)
 8015498:	e9d3 2300 	ldrd	r2, r3, [r3]
 801549c:	f7eb f8ac 	bl	80005f8 <__aeabi_dmul>
 80154a0:	4602      	mov	r2, r0
 80154a2:	460b      	mov	r3, r1
 80154a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80154a8:	f7ea feee 	bl	8000288 <__aeabi_dsub>
 80154ac:	4602      	mov	r2, r0
 80154ae:	460b      	mov	r3, r1
 80154b0:	4604      	mov	r4, r0
 80154b2:	460d      	mov	r5, r1
 80154b4:	4630      	mov	r0, r6
 80154b6:	4639      	mov	r1, r7
 80154b8:	f7ea fee8 	bl	800028c <__adddf3>
 80154bc:	2000      	movs	r0, #0
 80154be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80154c2:	4632      	mov	r2, r6
 80154c4:	463b      	mov	r3, r7
 80154c6:	f7ea fedf 	bl	8000288 <__aeabi_dsub>
 80154ca:	4602      	mov	r2, r0
 80154cc:	460b      	mov	r3, r1
 80154ce:	4620      	mov	r0, r4
 80154d0:	4629      	mov	r1, r5
 80154d2:	f7ea fed9 	bl	8000288 <__aeabi_dsub>
 80154d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80154d8:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80154dc:	4313      	orrs	r3, r2
 80154de:	4606      	mov	r6, r0
 80154e0:	460f      	mov	r7, r1
 80154e2:	f040 81eb 	bne.w	80158bc <__ieee754_pow+0x6c4>
 80154e6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80155a0 <__ieee754_pow+0x3a8>
 80154ea:	e9dd 4500 	ldrd	r4, r5, [sp]
 80154ee:	2400      	movs	r4, #0
 80154f0:	4622      	mov	r2, r4
 80154f2:	462b      	mov	r3, r5
 80154f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80154f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80154fc:	f7ea fec4 	bl	8000288 <__aeabi_dsub>
 8015500:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015504:	f7eb f878 	bl	80005f8 <__aeabi_dmul>
 8015508:	e9dd 2300 	ldrd	r2, r3, [sp]
 801550c:	4680      	mov	r8, r0
 801550e:	4689      	mov	r9, r1
 8015510:	4630      	mov	r0, r6
 8015512:	4639      	mov	r1, r7
 8015514:	f7eb f870 	bl	80005f8 <__aeabi_dmul>
 8015518:	4602      	mov	r2, r0
 801551a:	460b      	mov	r3, r1
 801551c:	4640      	mov	r0, r8
 801551e:	4649      	mov	r1, r9
 8015520:	f7ea feb4 	bl	800028c <__adddf3>
 8015524:	4622      	mov	r2, r4
 8015526:	462b      	mov	r3, r5
 8015528:	4680      	mov	r8, r0
 801552a:	4689      	mov	r9, r1
 801552c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015530:	f7eb f862 	bl	80005f8 <__aeabi_dmul>
 8015534:	460b      	mov	r3, r1
 8015536:	4604      	mov	r4, r0
 8015538:	460d      	mov	r5, r1
 801553a:	4602      	mov	r2, r0
 801553c:	4649      	mov	r1, r9
 801553e:	4640      	mov	r0, r8
 8015540:	e9cd 4500 	strd	r4, r5, [sp]
 8015544:	f7ea fea2 	bl	800028c <__adddf3>
 8015548:	4b1c      	ldr	r3, [pc, #112]	; (80155bc <__ieee754_pow+0x3c4>)
 801554a:	4299      	cmp	r1, r3
 801554c:	4606      	mov	r6, r0
 801554e:	460f      	mov	r7, r1
 8015550:	468b      	mov	fp, r1
 8015552:	f340 82f7 	ble.w	8015b44 <__ieee754_pow+0x94c>
 8015556:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801555a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801555e:	4303      	orrs	r3, r0
 8015560:	f000 81ea 	beq.w	8015938 <__ieee754_pow+0x740>
 8015564:	a310      	add	r3, pc, #64	; (adr r3, 80155a8 <__ieee754_pow+0x3b0>)
 8015566:	e9d3 2300 	ldrd	r2, r3, [r3]
 801556a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801556e:	f7eb f843 	bl	80005f8 <__aeabi_dmul>
 8015572:	a30d      	add	r3, pc, #52	; (adr r3, 80155a8 <__ieee754_pow+0x3b0>)
 8015574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015578:	e6d5      	b.n	8015326 <__ieee754_pow+0x12e>
 801557a:	bf00      	nop
 801557c:	f3af 8000 	nop.w
 8015580:	60000000 	.word	0x60000000
 8015584:	3ff71547 	.word	0x3ff71547
 8015588:	f85ddf44 	.word	0xf85ddf44
 801558c:	3e54ae0b 	.word	0x3e54ae0b
 8015590:	55555555 	.word	0x55555555
 8015594:	3fd55555 	.word	0x3fd55555
 8015598:	652b82fe 	.word	0x652b82fe
 801559c:	3ff71547 	.word	0x3ff71547
 80155a0:	00000000 	.word	0x00000000
 80155a4:	bff00000 	.word	0xbff00000
 80155a8:	8800759c 	.word	0x8800759c
 80155ac:	7e37e43c 	.word	0x7e37e43c
 80155b0:	3ff00000 	.word	0x3ff00000
 80155b4:	3fd00000 	.word	0x3fd00000
 80155b8:	3fe00000 	.word	0x3fe00000
 80155bc:	408fffff 	.word	0x408fffff
 80155c0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80155c4:	f04f 0200 	mov.w	r2, #0
 80155c8:	da05      	bge.n	80155d6 <__ieee754_pow+0x3de>
 80155ca:	4bd3      	ldr	r3, [pc, #844]	; (8015918 <__ieee754_pow+0x720>)
 80155cc:	f7eb f814 	bl	80005f8 <__aeabi_dmul>
 80155d0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80155d4:	460c      	mov	r4, r1
 80155d6:	1523      	asrs	r3, r4, #20
 80155d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80155dc:	4413      	add	r3, r2
 80155de:	9309      	str	r3, [sp, #36]	; 0x24
 80155e0:	4bce      	ldr	r3, [pc, #824]	; (801591c <__ieee754_pow+0x724>)
 80155e2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80155e6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80155ea:	429c      	cmp	r4, r3
 80155ec:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80155f0:	dd08      	ble.n	8015604 <__ieee754_pow+0x40c>
 80155f2:	4bcb      	ldr	r3, [pc, #812]	; (8015920 <__ieee754_pow+0x728>)
 80155f4:	429c      	cmp	r4, r3
 80155f6:	f340 815e 	ble.w	80158b6 <__ieee754_pow+0x6be>
 80155fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155fc:	3301      	adds	r3, #1
 80155fe:	9309      	str	r3, [sp, #36]	; 0x24
 8015600:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8015604:	f04f 0a00 	mov.w	sl, #0
 8015608:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801560c:	930c      	str	r3, [sp, #48]	; 0x30
 801560e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015610:	4bc4      	ldr	r3, [pc, #784]	; (8015924 <__ieee754_pow+0x72c>)
 8015612:	4413      	add	r3, r2
 8015614:	ed93 7b00 	vldr	d7, [r3]
 8015618:	4629      	mov	r1, r5
 801561a:	ec53 2b17 	vmov	r2, r3, d7
 801561e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015622:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015626:	f7ea fe2f 	bl	8000288 <__aeabi_dsub>
 801562a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801562e:	4606      	mov	r6, r0
 8015630:	460f      	mov	r7, r1
 8015632:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015636:	f7ea fe29 	bl	800028c <__adddf3>
 801563a:	4602      	mov	r2, r0
 801563c:	460b      	mov	r3, r1
 801563e:	2000      	movs	r0, #0
 8015640:	49b9      	ldr	r1, [pc, #740]	; (8015928 <__ieee754_pow+0x730>)
 8015642:	f7eb f903 	bl	800084c <__aeabi_ddiv>
 8015646:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801564a:	4602      	mov	r2, r0
 801564c:	460b      	mov	r3, r1
 801564e:	4630      	mov	r0, r6
 8015650:	4639      	mov	r1, r7
 8015652:	f7ea ffd1 	bl	80005f8 <__aeabi_dmul>
 8015656:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801565a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801565e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8015662:	2300      	movs	r3, #0
 8015664:	9302      	str	r3, [sp, #8]
 8015666:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801566a:	106d      	asrs	r5, r5, #1
 801566c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8015670:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8015674:	2200      	movs	r2, #0
 8015676:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801567a:	4640      	mov	r0, r8
 801567c:	4649      	mov	r1, r9
 801567e:	4614      	mov	r4, r2
 8015680:	461d      	mov	r5, r3
 8015682:	f7ea ffb9 	bl	80005f8 <__aeabi_dmul>
 8015686:	4602      	mov	r2, r0
 8015688:	460b      	mov	r3, r1
 801568a:	4630      	mov	r0, r6
 801568c:	4639      	mov	r1, r7
 801568e:	f7ea fdfb 	bl	8000288 <__aeabi_dsub>
 8015692:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015696:	4606      	mov	r6, r0
 8015698:	460f      	mov	r7, r1
 801569a:	4620      	mov	r0, r4
 801569c:	4629      	mov	r1, r5
 801569e:	f7ea fdf3 	bl	8000288 <__aeabi_dsub>
 80156a2:	4602      	mov	r2, r0
 80156a4:	460b      	mov	r3, r1
 80156a6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80156aa:	f7ea fded 	bl	8000288 <__aeabi_dsub>
 80156ae:	4642      	mov	r2, r8
 80156b0:	464b      	mov	r3, r9
 80156b2:	f7ea ffa1 	bl	80005f8 <__aeabi_dmul>
 80156b6:	4602      	mov	r2, r0
 80156b8:	460b      	mov	r3, r1
 80156ba:	4630      	mov	r0, r6
 80156bc:	4639      	mov	r1, r7
 80156be:	f7ea fde3 	bl	8000288 <__aeabi_dsub>
 80156c2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80156c6:	f7ea ff97 	bl	80005f8 <__aeabi_dmul>
 80156ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80156ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80156d2:	4610      	mov	r0, r2
 80156d4:	4619      	mov	r1, r3
 80156d6:	f7ea ff8f 	bl	80005f8 <__aeabi_dmul>
 80156da:	a37b      	add	r3, pc, #492	; (adr r3, 80158c8 <__ieee754_pow+0x6d0>)
 80156dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156e0:	4604      	mov	r4, r0
 80156e2:	460d      	mov	r5, r1
 80156e4:	f7ea ff88 	bl	80005f8 <__aeabi_dmul>
 80156e8:	a379      	add	r3, pc, #484	; (adr r3, 80158d0 <__ieee754_pow+0x6d8>)
 80156ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156ee:	f7ea fdcd 	bl	800028c <__adddf3>
 80156f2:	4622      	mov	r2, r4
 80156f4:	462b      	mov	r3, r5
 80156f6:	f7ea ff7f 	bl	80005f8 <__aeabi_dmul>
 80156fa:	a377      	add	r3, pc, #476	; (adr r3, 80158d8 <__ieee754_pow+0x6e0>)
 80156fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015700:	f7ea fdc4 	bl	800028c <__adddf3>
 8015704:	4622      	mov	r2, r4
 8015706:	462b      	mov	r3, r5
 8015708:	f7ea ff76 	bl	80005f8 <__aeabi_dmul>
 801570c:	a374      	add	r3, pc, #464	; (adr r3, 80158e0 <__ieee754_pow+0x6e8>)
 801570e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015712:	f7ea fdbb 	bl	800028c <__adddf3>
 8015716:	4622      	mov	r2, r4
 8015718:	462b      	mov	r3, r5
 801571a:	f7ea ff6d 	bl	80005f8 <__aeabi_dmul>
 801571e:	a372      	add	r3, pc, #456	; (adr r3, 80158e8 <__ieee754_pow+0x6f0>)
 8015720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015724:	f7ea fdb2 	bl	800028c <__adddf3>
 8015728:	4622      	mov	r2, r4
 801572a:	462b      	mov	r3, r5
 801572c:	f7ea ff64 	bl	80005f8 <__aeabi_dmul>
 8015730:	a36f      	add	r3, pc, #444	; (adr r3, 80158f0 <__ieee754_pow+0x6f8>)
 8015732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015736:	f7ea fda9 	bl	800028c <__adddf3>
 801573a:	4622      	mov	r2, r4
 801573c:	4606      	mov	r6, r0
 801573e:	460f      	mov	r7, r1
 8015740:	462b      	mov	r3, r5
 8015742:	4620      	mov	r0, r4
 8015744:	4629      	mov	r1, r5
 8015746:	f7ea ff57 	bl	80005f8 <__aeabi_dmul>
 801574a:	4602      	mov	r2, r0
 801574c:	460b      	mov	r3, r1
 801574e:	4630      	mov	r0, r6
 8015750:	4639      	mov	r1, r7
 8015752:	f7ea ff51 	bl	80005f8 <__aeabi_dmul>
 8015756:	4642      	mov	r2, r8
 8015758:	4604      	mov	r4, r0
 801575a:	460d      	mov	r5, r1
 801575c:	464b      	mov	r3, r9
 801575e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015762:	f7ea fd93 	bl	800028c <__adddf3>
 8015766:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801576a:	f7ea ff45 	bl	80005f8 <__aeabi_dmul>
 801576e:	4622      	mov	r2, r4
 8015770:	462b      	mov	r3, r5
 8015772:	f7ea fd8b 	bl	800028c <__adddf3>
 8015776:	4642      	mov	r2, r8
 8015778:	4606      	mov	r6, r0
 801577a:	460f      	mov	r7, r1
 801577c:	464b      	mov	r3, r9
 801577e:	4640      	mov	r0, r8
 8015780:	4649      	mov	r1, r9
 8015782:	f7ea ff39 	bl	80005f8 <__aeabi_dmul>
 8015786:	2200      	movs	r2, #0
 8015788:	4b68      	ldr	r3, [pc, #416]	; (801592c <__ieee754_pow+0x734>)
 801578a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801578e:	f7ea fd7d 	bl	800028c <__adddf3>
 8015792:	4632      	mov	r2, r6
 8015794:	463b      	mov	r3, r7
 8015796:	f7ea fd79 	bl	800028c <__adddf3>
 801579a:	9802      	ldr	r0, [sp, #8]
 801579c:	460d      	mov	r5, r1
 801579e:	4604      	mov	r4, r0
 80157a0:	4602      	mov	r2, r0
 80157a2:	460b      	mov	r3, r1
 80157a4:	4640      	mov	r0, r8
 80157a6:	4649      	mov	r1, r9
 80157a8:	f7ea ff26 	bl	80005f8 <__aeabi_dmul>
 80157ac:	2200      	movs	r2, #0
 80157ae:	4680      	mov	r8, r0
 80157b0:	4689      	mov	r9, r1
 80157b2:	4b5e      	ldr	r3, [pc, #376]	; (801592c <__ieee754_pow+0x734>)
 80157b4:	4620      	mov	r0, r4
 80157b6:	4629      	mov	r1, r5
 80157b8:	f7ea fd66 	bl	8000288 <__aeabi_dsub>
 80157bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80157c0:	f7ea fd62 	bl	8000288 <__aeabi_dsub>
 80157c4:	4602      	mov	r2, r0
 80157c6:	460b      	mov	r3, r1
 80157c8:	4630      	mov	r0, r6
 80157ca:	4639      	mov	r1, r7
 80157cc:	f7ea fd5c 	bl	8000288 <__aeabi_dsub>
 80157d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80157d4:	f7ea ff10 	bl	80005f8 <__aeabi_dmul>
 80157d8:	4622      	mov	r2, r4
 80157da:	4606      	mov	r6, r0
 80157dc:	460f      	mov	r7, r1
 80157de:	462b      	mov	r3, r5
 80157e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80157e4:	f7ea ff08 	bl	80005f8 <__aeabi_dmul>
 80157e8:	4602      	mov	r2, r0
 80157ea:	460b      	mov	r3, r1
 80157ec:	4630      	mov	r0, r6
 80157ee:	4639      	mov	r1, r7
 80157f0:	f7ea fd4c 	bl	800028c <__adddf3>
 80157f4:	4606      	mov	r6, r0
 80157f6:	460f      	mov	r7, r1
 80157f8:	4602      	mov	r2, r0
 80157fa:	460b      	mov	r3, r1
 80157fc:	4640      	mov	r0, r8
 80157fe:	4649      	mov	r1, r9
 8015800:	f7ea fd44 	bl	800028c <__adddf3>
 8015804:	9802      	ldr	r0, [sp, #8]
 8015806:	a33c      	add	r3, pc, #240	; (adr r3, 80158f8 <__ieee754_pow+0x700>)
 8015808:	e9d3 2300 	ldrd	r2, r3, [r3]
 801580c:	4604      	mov	r4, r0
 801580e:	460d      	mov	r5, r1
 8015810:	f7ea fef2 	bl	80005f8 <__aeabi_dmul>
 8015814:	4642      	mov	r2, r8
 8015816:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801581a:	464b      	mov	r3, r9
 801581c:	4620      	mov	r0, r4
 801581e:	4629      	mov	r1, r5
 8015820:	f7ea fd32 	bl	8000288 <__aeabi_dsub>
 8015824:	4602      	mov	r2, r0
 8015826:	460b      	mov	r3, r1
 8015828:	4630      	mov	r0, r6
 801582a:	4639      	mov	r1, r7
 801582c:	f7ea fd2c 	bl	8000288 <__aeabi_dsub>
 8015830:	a333      	add	r3, pc, #204	; (adr r3, 8015900 <__ieee754_pow+0x708>)
 8015832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015836:	f7ea fedf 	bl	80005f8 <__aeabi_dmul>
 801583a:	a333      	add	r3, pc, #204	; (adr r3, 8015908 <__ieee754_pow+0x710>)
 801583c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015840:	4606      	mov	r6, r0
 8015842:	460f      	mov	r7, r1
 8015844:	4620      	mov	r0, r4
 8015846:	4629      	mov	r1, r5
 8015848:	f7ea fed6 	bl	80005f8 <__aeabi_dmul>
 801584c:	4602      	mov	r2, r0
 801584e:	460b      	mov	r3, r1
 8015850:	4630      	mov	r0, r6
 8015852:	4639      	mov	r1, r7
 8015854:	f7ea fd1a 	bl	800028c <__adddf3>
 8015858:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801585a:	4b35      	ldr	r3, [pc, #212]	; (8015930 <__ieee754_pow+0x738>)
 801585c:	4413      	add	r3, r2
 801585e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015862:	f7ea fd13 	bl	800028c <__adddf3>
 8015866:	4604      	mov	r4, r0
 8015868:	9809      	ldr	r0, [sp, #36]	; 0x24
 801586a:	460d      	mov	r5, r1
 801586c:	f7ea fe5a 	bl	8000524 <__aeabi_i2d>
 8015870:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015872:	4b30      	ldr	r3, [pc, #192]	; (8015934 <__ieee754_pow+0x73c>)
 8015874:	4413      	add	r3, r2
 8015876:	e9d3 8900 	ldrd	r8, r9, [r3]
 801587a:	4606      	mov	r6, r0
 801587c:	460f      	mov	r7, r1
 801587e:	4622      	mov	r2, r4
 8015880:	462b      	mov	r3, r5
 8015882:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015886:	f7ea fd01 	bl	800028c <__adddf3>
 801588a:	4642      	mov	r2, r8
 801588c:	464b      	mov	r3, r9
 801588e:	f7ea fcfd 	bl	800028c <__adddf3>
 8015892:	4632      	mov	r2, r6
 8015894:	463b      	mov	r3, r7
 8015896:	f7ea fcf9 	bl	800028c <__adddf3>
 801589a:	9802      	ldr	r0, [sp, #8]
 801589c:	4632      	mov	r2, r6
 801589e:	463b      	mov	r3, r7
 80158a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80158a4:	f7ea fcf0 	bl	8000288 <__aeabi_dsub>
 80158a8:	4642      	mov	r2, r8
 80158aa:	464b      	mov	r3, r9
 80158ac:	f7ea fcec 	bl	8000288 <__aeabi_dsub>
 80158b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80158b4:	e607      	b.n	80154c6 <__ieee754_pow+0x2ce>
 80158b6:	f04f 0a01 	mov.w	sl, #1
 80158ba:	e6a5      	b.n	8015608 <__ieee754_pow+0x410>
 80158bc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8015910 <__ieee754_pow+0x718>
 80158c0:	e613      	b.n	80154ea <__ieee754_pow+0x2f2>
 80158c2:	bf00      	nop
 80158c4:	f3af 8000 	nop.w
 80158c8:	4a454eef 	.word	0x4a454eef
 80158cc:	3fca7e28 	.word	0x3fca7e28
 80158d0:	93c9db65 	.word	0x93c9db65
 80158d4:	3fcd864a 	.word	0x3fcd864a
 80158d8:	a91d4101 	.word	0xa91d4101
 80158dc:	3fd17460 	.word	0x3fd17460
 80158e0:	518f264d 	.word	0x518f264d
 80158e4:	3fd55555 	.word	0x3fd55555
 80158e8:	db6fabff 	.word	0xdb6fabff
 80158ec:	3fdb6db6 	.word	0x3fdb6db6
 80158f0:	33333303 	.word	0x33333303
 80158f4:	3fe33333 	.word	0x3fe33333
 80158f8:	e0000000 	.word	0xe0000000
 80158fc:	3feec709 	.word	0x3feec709
 8015900:	dc3a03fd 	.word	0xdc3a03fd
 8015904:	3feec709 	.word	0x3feec709
 8015908:	145b01f5 	.word	0x145b01f5
 801590c:	be3e2fe0 	.word	0xbe3e2fe0
 8015910:	00000000 	.word	0x00000000
 8015914:	3ff00000 	.word	0x3ff00000
 8015918:	43400000 	.word	0x43400000
 801591c:	0003988e 	.word	0x0003988e
 8015920:	000bb679 	.word	0x000bb679
 8015924:	08016f40 	.word	0x08016f40
 8015928:	3ff00000 	.word	0x3ff00000
 801592c:	40080000 	.word	0x40080000
 8015930:	08016f60 	.word	0x08016f60
 8015934:	08016f50 	.word	0x08016f50
 8015938:	a3b4      	add	r3, pc, #720	; (adr r3, 8015c0c <__ieee754_pow+0xa14>)
 801593a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801593e:	4640      	mov	r0, r8
 8015940:	4649      	mov	r1, r9
 8015942:	f7ea fca3 	bl	800028c <__adddf3>
 8015946:	4622      	mov	r2, r4
 8015948:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801594c:	462b      	mov	r3, r5
 801594e:	4630      	mov	r0, r6
 8015950:	4639      	mov	r1, r7
 8015952:	f7ea fc99 	bl	8000288 <__aeabi_dsub>
 8015956:	4602      	mov	r2, r0
 8015958:	460b      	mov	r3, r1
 801595a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801595e:	f7eb f8db 	bl	8000b18 <__aeabi_dcmpgt>
 8015962:	2800      	cmp	r0, #0
 8015964:	f47f adfe 	bne.w	8015564 <__ieee754_pow+0x36c>
 8015968:	4aa3      	ldr	r2, [pc, #652]	; (8015bf8 <__ieee754_pow+0xa00>)
 801596a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801596e:	4293      	cmp	r3, r2
 8015970:	f340 810a 	ble.w	8015b88 <__ieee754_pow+0x990>
 8015974:	151b      	asrs	r3, r3, #20
 8015976:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801597a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801597e:	fa4a f303 	asr.w	r3, sl, r3
 8015982:	445b      	add	r3, fp
 8015984:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8015988:	4e9c      	ldr	r6, [pc, #624]	; (8015bfc <__ieee754_pow+0xa04>)
 801598a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801598e:	4116      	asrs	r6, r2
 8015990:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8015994:	2000      	movs	r0, #0
 8015996:	ea23 0106 	bic.w	r1, r3, r6
 801599a:	f1c2 0214 	rsb	r2, r2, #20
 801599e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80159a2:	fa4a fa02 	asr.w	sl, sl, r2
 80159a6:	f1bb 0f00 	cmp.w	fp, #0
 80159aa:	4602      	mov	r2, r0
 80159ac:	460b      	mov	r3, r1
 80159ae:	4620      	mov	r0, r4
 80159b0:	4629      	mov	r1, r5
 80159b2:	bfb8      	it	lt
 80159b4:	f1ca 0a00 	rsblt	sl, sl, #0
 80159b8:	f7ea fc66 	bl	8000288 <__aeabi_dsub>
 80159bc:	e9cd 0100 	strd	r0, r1, [sp]
 80159c0:	4642      	mov	r2, r8
 80159c2:	464b      	mov	r3, r9
 80159c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80159c8:	f7ea fc60 	bl	800028c <__adddf3>
 80159cc:	2000      	movs	r0, #0
 80159ce:	a378      	add	r3, pc, #480	; (adr r3, 8015bb0 <__ieee754_pow+0x9b8>)
 80159d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159d4:	4604      	mov	r4, r0
 80159d6:	460d      	mov	r5, r1
 80159d8:	f7ea fe0e 	bl	80005f8 <__aeabi_dmul>
 80159dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80159e0:	4606      	mov	r6, r0
 80159e2:	460f      	mov	r7, r1
 80159e4:	4620      	mov	r0, r4
 80159e6:	4629      	mov	r1, r5
 80159e8:	f7ea fc4e 	bl	8000288 <__aeabi_dsub>
 80159ec:	4602      	mov	r2, r0
 80159ee:	460b      	mov	r3, r1
 80159f0:	4640      	mov	r0, r8
 80159f2:	4649      	mov	r1, r9
 80159f4:	f7ea fc48 	bl	8000288 <__aeabi_dsub>
 80159f8:	a36f      	add	r3, pc, #444	; (adr r3, 8015bb8 <__ieee754_pow+0x9c0>)
 80159fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159fe:	f7ea fdfb 	bl	80005f8 <__aeabi_dmul>
 8015a02:	a36f      	add	r3, pc, #444	; (adr r3, 8015bc0 <__ieee754_pow+0x9c8>)
 8015a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a08:	4680      	mov	r8, r0
 8015a0a:	4689      	mov	r9, r1
 8015a0c:	4620      	mov	r0, r4
 8015a0e:	4629      	mov	r1, r5
 8015a10:	f7ea fdf2 	bl	80005f8 <__aeabi_dmul>
 8015a14:	4602      	mov	r2, r0
 8015a16:	460b      	mov	r3, r1
 8015a18:	4640      	mov	r0, r8
 8015a1a:	4649      	mov	r1, r9
 8015a1c:	f7ea fc36 	bl	800028c <__adddf3>
 8015a20:	4604      	mov	r4, r0
 8015a22:	460d      	mov	r5, r1
 8015a24:	4602      	mov	r2, r0
 8015a26:	460b      	mov	r3, r1
 8015a28:	4630      	mov	r0, r6
 8015a2a:	4639      	mov	r1, r7
 8015a2c:	f7ea fc2e 	bl	800028c <__adddf3>
 8015a30:	4632      	mov	r2, r6
 8015a32:	463b      	mov	r3, r7
 8015a34:	4680      	mov	r8, r0
 8015a36:	4689      	mov	r9, r1
 8015a38:	f7ea fc26 	bl	8000288 <__aeabi_dsub>
 8015a3c:	4602      	mov	r2, r0
 8015a3e:	460b      	mov	r3, r1
 8015a40:	4620      	mov	r0, r4
 8015a42:	4629      	mov	r1, r5
 8015a44:	f7ea fc20 	bl	8000288 <__aeabi_dsub>
 8015a48:	4642      	mov	r2, r8
 8015a4a:	4606      	mov	r6, r0
 8015a4c:	460f      	mov	r7, r1
 8015a4e:	464b      	mov	r3, r9
 8015a50:	4640      	mov	r0, r8
 8015a52:	4649      	mov	r1, r9
 8015a54:	f7ea fdd0 	bl	80005f8 <__aeabi_dmul>
 8015a58:	a35b      	add	r3, pc, #364	; (adr r3, 8015bc8 <__ieee754_pow+0x9d0>)
 8015a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a5e:	4604      	mov	r4, r0
 8015a60:	460d      	mov	r5, r1
 8015a62:	f7ea fdc9 	bl	80005f8 <__aeabi_dmul>
 8015a66:	a35a      	add	r3, pc, #360	; (adr r3, 8015bd0 <__ieee754_pow+0x9d8>)
 8015a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a6c:	f7ea fc0c 	bl	8000288 <__aeabi_dsub>
 8015a70:	4622      	mov	r2, r4
 8015a72:	462b      	mov	r3, r5
 8015a74:	f7ea fdc0 	bl	80005f8 <__aeabi_dmul>
 8015a78:	a357      	add	r3, pc, #348	; (adr r3, 8015bd8 <__ieee754_pow+0x9e0>)
 8015a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a7e:	f7ea fc05 	bl	800028c <__adddf3>
 8015a82:	4622      	mov	r2, r4
 8015a84:	462b      	mov	r3, r5
 8015a86:	f7ea fdb7 	bl	80005f8 <__aeabi_dmul>
 8015a8a:	a355      	add	r3, pc, #340	; (adr r3, 8015be0 <__ieee754_pow+0x9e8>)
 8015a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a90:	f7ea fbfa 	bl	8000288 <__aeabi_dsub>
 8015a94:	4622      	mov	r2, r4
 8015a96:	462b      	mov	r3, r5
 8015a98:	f7ea fdae 	bl	80005f8 <__aeabi_dmul>
 8015a9c:	a352      	add	r3, pc, #328	; (adr r3, 8015be8 <__ieee754_pow+0x9f0>)
 8015a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015aa2:	f7ea fbf3 	bl	800028c <__adddf3>
 8015aa6:	4622      	mov	r2, r4
 8015aa8:	462b      	mov	r3, r5
 8015aaa:	f7ea fda5 	bl	80005f8 <__aeabi_dmul>
 8015aae:	4602      	mov	r2, r0
 8015ab0:	460b      	mov	r3, r1
 8015ab2:	4640      	mov	r0, r8
 8015ab4:	4649      	mov	r1, r9
 8015ab6:	f7ea fbe7 	bl	8000288 <__aeabi_dsub>
 8015aba:	4604      	mov	r4, r0
 8015abc:	460d      	mov	r5, r1
 8015abe:	4602      	mov	r2, r0
 8015ac0:	460b      	mov	r3, r1
 8015ac2:	4640      	mov	r0, r8
 8015ac4:	4649      	mov	r1, r9
 8015ac6:	f7ea fd97 	bl	80005f8 <__aeabi_dmul>
 8015aca:	2200      	movs	r2, #0
 8015acc:	e9cd 0100 	strd	r0, r1, [sp]
 8015ad0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015ad4:	4620      	mov	r0, r4
 8015ad6:	4629      	mov	r1, r5
 8015ad8:	f7ea fbd6 	bl	8000288 <__aeabi_dsub>
 8015adc:	4602      	mov	r2, r0
 8015ade:	460b      	mov	r3, r1
 8015ae0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015ae4:	f7ea feb2 	bl	800084c <__aeabi_ddiv>
 8015ae8:	4632      	mov	r2, r6
 8015aea:	4604      	mov	r4, r0
 8015aec:	460d      	mov	r5, r1
 8015aee:	463b      	mov	r3, r7
 8015af0:	4640      	mov	r0, r8
 8015af2:	4649      	mov	r1, r9
 8015af4:	f7ea fd80 	bl	80005f8 <__aeabi_dmul>
 8015af8:	4632      	mov	r2, r6
 8015afa:	463b      	mov	r3, r7
 8015afc:	f7ea fbc6 	bl	800028c <__adddf3>
 8015b00:	4602      	mov	r2, r0
 8015b02:	460b      	mov	r3, r1
 8015b04:	4620      	mov	r0, r4
 8015b06:	4629      	mov	r1, r5
 8015b08:	f7ea fbbe 	bl	8000288 <__aeabi_dsub>
 8015b0c:	4642      	mov	r2, r8
 8015b0e:	464b      	mov	r3, r9
 8015b10:	f7ea fbba 	bl	8000288 <__aeabi_dsub>
 8015b14:	4602      	mov	r2, r0
 8015b16:	460b      	mov	r3, r1
 8015b18:	2000      	movs	r0, #0
 8015b1a:	4939      	ldr	r1, [pc, #228]	; (8015c00 <__ieee754_pow+0xa08>)
 8015b1c:	f7ea fbb4 	bl	8000288 <__aeabi_dsub>
 8015b20:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8015b24:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8015b28:	4602      	mov	r2, r0
 8015b2a:	460b      	mov	r3, r1
 8015b2c:	da2f      	bge.n	8015b8e <__ieee754_pow+0x996>
 8015b2e:	4650      	mov	r0, sl
 8015b30:	ec43 2b10 	vmov	d0, r2, r3
 8015b34:	f000 fc80 	bl	8016438 <scalbn>
 8015b38:	ec51 0b10 	vmov	r0, r1, d0
 8015b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015b40:	f7ff bbf1 	b.w	8015326 <__ieee754_pow+0x12e>
 8015b44:	4b2f      	ldr	r3, [pc, #188]	; (8015c04 <__ieee754_pow+0xa0c>)
 8015b46:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8015b4a:	429e      	cmp	r6, r3
 8015b4c:	f77f af0c 	ble.w	8015968 <__ieee754_pow+0x770>
 8015b50:	4b2d      	ldr	r3, [pc, #180]	; (8015c08 <__ieee754_pow+0xa10>)
 8015b52:	440b      	add	r3, r1
 8015b54:	4303      	orrs	r3, r0
 8015b56:	d00b      	beq.n	8015b70 <__ieee754_pow+0x978>
 8015b58:	a325      	add	r3, pc, #148	; (adr r3, 8015bf0 <__ieee754_pow+0x9f8>)
 8015b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015b62:	f7ea fd49 	bl	80005f8 <__aeabi_dmul>
 8015b66:	a322      	add	r3, pc, #136	; (adr r3, 8015bf0 <__ieee754_pow+0x9f8>)
 8015b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b6c:	f7ff bbdb 	b.w	8015326 <__ieee754_pow+0x12e>
 8015b70:	4622      	mov	r2, r4
 8015b72:	462b      	mov	r3, r5
 8015b74:	f7ea fb88 	bl	8000288 <__aeabi_dsub>
 8015b78:	4642      	mov	r2, r8
 8015b7a:	464b      	mov	r3, r9
 8015b7c:	f7ea ffc2 	bl	8000b04 <__aeabi_dcmpge>
 8015b80:	2800      	cmp	r0, #0
 8015b82:	f43f aef1 	beq.w	8015968 <__ieee754_pow+0x770>
 8015b86:	e7e7      	b.n	8015b58 <__ieee754_pow+0x960>
 8015b88:	f04f 0a00 	mov.w	sl, #0
 8015b8c:	e718      	b.n	80159c0 <__ieee754_pow+0x7c8>
 8015b8e:	4621      	mov	r1, r4
 8015b90:	e7d4      	b.n	8015b3c <__ieee754_pow+0x944>
 8015b92:	2000      	movs	r0, #0
 8015b94:	491a      	ldr	r1, [pc, #104]	; (8015c00 <__ieee754_pow+0xa08>)
 8015b96:	f7ff bb8f 	b.w	80152b8 <__ieee754_pow+0xc0>
 8015b9a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015b9e:	f7ff bb8b 	b.w	80152b8 <__ieee754_pow+0xc0>
 8015ba2:	4630      	mov	r0, r6
 8015ba4:	4639      	mov	r1, r7
 8015ba6:	f7ff bb87 	b.w	80152b8 <__ieee754_pow+0xc0>
 8015baa:	4693      	mov	fp, r2
 8015bac:	f7ff bb98 	b.w	80152e0 <__ieee754_pow+0xe8>
 8015bb0:	00000000 	.word	0x00000000
 8015bb4:	3fe62e43 	.word	0x3fe62e43
 8015bb8:	fefa39ef 	.word	0xfefa39ef
 8015bbc:	3fe62e42 	.word	0x3fe62e42
 8015bc0:	0ca86c39 	.word	0x0ca86c39
 8015bc4:	be205c61 	.word	0xbe205c61
 8015bc8:	72bea4d0 	.word	0x72bea4d0
 8015bcc:	3e663769 	.word	0x3e663769
 8015bd0:	c5d26bf1 	.word	0xc5d26bf1
 8015bd4:	3ebbbd41 	.word	0x3ebbbd41
 8015bd8:	af25de2c 	.word	0xaf25de2c
 8015bdc:	3f11566a 	.word	0x3f11566a
 8015be0:	16bebd93 	.word	0x16bebd93
 8015be4:	3f66c16c 	.word	0x3f66c16c
 8015be8:	5555553e 	.word	0x5555553e
 8015bec:	3fc55555 	.word	0x3fc55555
 8015bf0:	c2f8f359 	.word	0xc2f8f359
 8015bf4:	01a56e1f 	.word	0x01a56e1f
 8015bf8:	3fe00000 	.word	0x3fe00000
 8015bfc:	000fffff 	.word	0x000fffff
 8015c00:	3ff00000 	.word	0x3ff00000
 8015c04:	4090cbff 	.word	0x4090cbff
 8015c08:	3f6f3400 	.word	0x3f6f3400
 8015c0c:	652b82fe 	.word	0x652b82fe
 8015c10:	3c971547 	.word	0x3c971547

08015c14 <__ieee754_sqrt>:
 8015c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c18:	4955      	ldr	r1, [pc, #340]	; (8015d70 <__ieee754_sqrt+0x15c>)
 8015c1a:	ec55 4b10 	vmov	r4, r5, d0
 8015c1e:	43a9      	bics	r1, r5
 8015c20:	462b      	mov	r3, r5
 8015c22:	462a      	mov	r2, r5
 8015c24:	d112      	bne.n	8015c4c <__ieee754_sqrt+0x38>
 8015c26:	ee10 2a10 	vmov	r2, s0
 8015c2a:	ee10 0a10 	vmov	r0, s0
 8015c2e:	4629      	mov	r1, r5
 8015c30:	f7ea fce2 	bl	80005f8 <__aeabi_dmul>
 8015c34:	4602      	mov	r2, r0
 8015c36:	460b      	mov	r3, r1
 8015c38:	4620      	mov	r0, r4
 8015c3a:	4629      	mov	r1, r5
 8015c3c:	f7ea fb26 	bl	800028c <__adddf3>
 8015c40:	4604      	mov	r4, r0
 8015c42:	460d      	mov	r5, r1
 8015c44:	ec45 4b10 	vmov	d0, r4, r5
 8015c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c4c:	2d00      	cmp	r5, #0
 8015c4e:	ee10 0a10 	vmov	r0, s0
 8015c52:	4621      	mov	r1, r4
 8015c54:	dc0f      	bgt.n	8015c76 <__ieee754_sqrt+0x62>
 8015c56:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8015c5a:	4330      	orrs	r0, r6
 8015c5c:	d0f2      	beq.n	8015c44 <__ieee754_sqrt+0x30>
 8015c5e:	b155      	cbz	r5, 8015c76 <__ieee754_sqrt+0x62>
 8015c60:	ee10 2a10 	vmov	r2, s0
 8015c64:	4620      	mov	r0, r4
 8015c66:	4629      	mov	r1, r5
 8015c68:	f7ea fb0e 	bl	8000288 <__aeabi_dsub>
 8015c6c:	4602      	mov	r2, r0
 8015c6e:	460b      	mov	r3, r1
 8015c70:	f7ea fdec 	bl	800084c <__aeabi_ddiv>
 8015c74:	e7e4      	b.n	8015c40 <__ieee754_sqrt+0x2c>
 8015c76:	151b      	asrs	r3, r3, #20
 8015c78:	d073      	beq.n	8015d62 <__ieee754_sqrt+0x14e>
 8015c7a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8015c7e:	07dd      	lsls	r5, r3, #31
 8015c80:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8015c84:	bf48      	it	mi
 8015c86:	0fc8      	lsrmi	r0, r1, #31
 8015c88:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8015c8c:	bf44      	itt	mi
 8015c8e:	0049      	lslmi	r1, r1, #1
 8015c90:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8015c94:	2500      	movs	r5, #0
 8015c96:	1058      	asrs	r0, r3, #1
 8015c98:	0fcb      	lsrs	r3, r1, #31
 8015c9a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8015c9e:	0049      	lsls	r1, r1, #1
 8015ca0:	2316      	movs	r3, #22
 8015ca2:	462c      	mov	r4, r5
 8015ca4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8015ca8:	19a7      	adds	r7, r4, r6
 8015caa:	4297      	cmp	r7, r2
 8015cac:	bfde      	ittt	le
 8015cae:	19bc      	addle	r4, r7, r6
 8015cb0:	1bd2      	suble	r2, r2, r7
 8015cb2:	19ad      	addle	r5, r5, r6
 8015cb4:	0fcf      	lsrs	r7, r1, #31
 8015cb6:	3b01      	subs	r3, #1
 8015cb8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8015cbc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015cc0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8015cc4:	d1f0      	bne.n	8015ca8 <__ieee754_sqrt+0x94>
 8015cc6:	f04f 0c20 	mov.w	ip, #32
 8015cca:	469e      	mov	lr, r3
 8015ccc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8015cd0:	42a2      	cmp	r2, r4
 8015cd2:	eb06 070e 	add.w	r7, r6, lr
 8015cd6:	dc02      	bgt.n	8015cde <__ieee754_sqrt+0xca>
 8015cd8:	d112      	bne.n	8015d00 <__ieee754_sqrt+0xec>
 8015cda:	428f      	cmp	r7, r1
 8015cdc:	d810      	bhi.n	8015d00 <__ieee754_sqrt+0xec>
 8015cde:	2f00      	cmp	r7, #0
 8015ce0:	eb07 0e06 	add.w	lr, r7, r6
 8015ce4:	da42      	bge.n	8015d6c <__ieee754_sqrt+0x158>
 8015ce6:	f1be 0f00 	cmp.w	lr, #0
 8015cea:	db3f      	blt.n	8015d6c <__ieee754_sqrt+0x158>
 8015cec:	f104 0801 	add.w	r8, r4, #1
 8015cf0:	1b12      	subs	r2, r2, r4
 8015cf2:	428f      	cmp	r7, r1
 8015cf4:	bf88      	it	hi
 8015cf6:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8015cfa:	1bc9      	subs	r1, r1, r7
 8015cfc:	4433      	add	r3, r6
 8015cfe:	4644      	mov	r4, r8
 8015d00:	0052      	lsls	r2, r2, #1
 8015d02:	f1bc 0c01 	subs.w	ip, ip, #1
 8015d06:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8015d0a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8015d0e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015d12:	d1dd      	bne.n	8015cd0 <__ieee754_sqrt+0xbc>
 8015d14:	430a      	orrs	r2, r1
 8015d16:	d006      	beq.n	8015d26 <__ieee754_sqrt+0x112>
 8015d18:	1c5c      	adds	r4, r3, #1
 8015d1a:	bf13      	iteet	ne
 8015d1c:	3301      	addne	r3, #1
 8015d1e:	3501      	addeq	r5, #1
 8015d20:	4663      	moveq	r3, ip
 8015d22:	f023 0301 	bicne.w	r3, r3, #1
 8015d26:	106a      	asrs	r2, r5, #1
 8015d28:	085b      	lsrs	r3, r3, #1
 8015d2a:	07e9      	lsls	r1, r5, #31
 8015d2c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8015d30:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8015d34:	bf48      	it	mi
 8015d36:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8015d3a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8015d3e:	461c      	mov	r4, r3
 8015d40:	e780      	b.n	8015c44 <__ieee754_sqrt+0x30>
 8015d42:	0aca      	lsrs	r2, r1, #11
 8015d44:	3815      	subs	r0, #21
 8015d46:	0549      	lsls	r1, r1, #21
 8015d48:	2a00      	cmp	r2, #0
 8015d4a:	d0fa      	beq.n	8015d42 <__ieee754_sqrt+0x12e>
 8015d4c:	02d6      	lsls	r6, r2, #11
 8015d4e:	d50a      	bpl.n	8015d66 <__ieee754_sqrt+0x152>
 8015d50:	f1c3 0420 	rsb	r4, r3, #32
 8015d54:	fa21 f404 	lsr.w	r4, r1, r4
 8015d58:	1e5d      	subs	r5, r3, #1
 8015d5a:	4099      	lsls	r1, r3
 8015d5c:	4322      	orrs	r2, r4
 8015d5e:	1b43      	subs	r3, r0, r5
 8015d60:	e78b      	b.n	8015c7a <__ieee754_sqrt+0x66>
 8015d62:	4618      	mov	r0, r3
 8015d64:	e7f0      	b.n	8015d48 <__ieee754_sqrt+0x134>
 8015d66:	0052      	lsls	r2, r2, #1
 8015d68:	3301      	adds	r3, #1
 8015d6a:	e7ef      	b.n	8015d4c <__ieee754_sqrt+0x138>
 8015d6c:	46a0      	mov	r8, r4
 8015d6e:	e7bf      	b.n	8015cf0 <__ieee754_sqrt+0xdc>
 8015d70:	7ff00000 	.word	0x7ff00000

08015d74 <__ieee754_powf>:
 8015d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015d78:	ee10 5a90 	vmov	r5, s1
 8015d7c:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8015d80:	ed2d 8b02 	vpush	{d8}
 8015d84:	eeb0 8a40 	vmov.f32	s16, s0
 8015d88:	eef0 8a60 	vmov.f32	s17, s1
 8015d8c:	f000 8293 	beq.w	80162b6 <__ieee754_powf+0x542>
 8015d90:	ee10 8a10 	vmov	r8, s0
 8015d94:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8015d98:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8015d9c:	dc06      	bgt.n	8015dac <__ieee754_powf+0x38>
 8015d9e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8015da2:	dd0a      	ble.n	8015dba <__ieee754_powf+0x46>
 8015da4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8015da8:	f000 8285 	beq.w	80162b6 <__ieee754_powf+0x542>
 8015dac:	ecbd 8b02 	vpop	{d8}
 8015db0:	48d9      	ldr	r0, [pc, #868]	; (8016118 <__ieee754_powf+0x3a4>)
 8015db2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015db6:	f7fe bd85 	b.w	80148c4 <nanf>
 8015dba:	f1b8 0f00 	cmp.w	r8, #0
 8015dbe:	da1d      	bge.n	8015dfc <__ieee754_powf+0x88>
 8015dc0:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8015dc4:	da2c      	bge.n	8015e20 <__ieee754_powf+0xac>
 8015dc6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8015dca:	db30      	blt.n	8015e2e <__ieee754_powf+0xba>
 8015dcc:	15fb      	asrs	r3, r7, #23
 8015dce:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8015dd2:	fa47 f603 	asr.w	r6, r7, r3
 8015dd6:	fa06 f303 	lsl.w	r3, r6, r3
 8015dda:	42bb      	cmp	r3, r7
 8015ddc:	d127      	bne.n	8015e2e <__ieee754_powf+0xba>
 8015dde:	f006 0601 	and.w	r6, r6, #1
 8015de2:	f1c6 0602 	rsb	r6, r6, #2
 8015de6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8015dea:	d122      	bne.n	8015e32 <__ieee754_powf+0xbe>
 8015dec:	2d00      	cmp	r5, #0
 8015dee:	f280 8268 	bge.w	80162c2 <__ieee754_powf+0x54e>
 8015df2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015df6:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8015dfa:	e00d      	b.n	8015e18 <__ieee754_powf+0xa4>
 8015dfc:	2600      	movs	r6, #0
 8015dfe:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8015e02:	d1f0      	bne.n	8015de6 <__ieee754_powf+0x72>
 8015e04:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8015e08:	f000 8255 	beq.w	80162b6 <__ieee754_powf+0x542>
 8015e0c:	dd0a      	ble.n	8015e24 <__ieee754_powf+0xb0>
 8015e0e:	2d00      	cmp	r5, #0
 8015e10:	f280 8254 	bge.w	80162bc <__ieee754_powf+0x548>
 8015e14:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 801611c <__ieee754_powf+0x3a8>
 8015e18:	ecbd 8b02 	vpop	{d8}
 8015e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e20:	2602      	movs	r6, #2
 8015e22:	e7ec      	b.n	8015dfe <__ieee754_powf+0x8a>
 8015e24:	2d00      	cmp	r5, #0
 8015e26:	daf5      	bge.n	8015e14 <__ieee754_powf+0xa0>
 8015e28:	eeb1 0a68 	vneg.f32	s0, s17
 8015e2c:	e7f4      	b.n	8015e18 <__ieee754_powf+0xa4>
 8015e2e:	2600      	movs	r6, #0
 8015e30:	e7d9      	b.n	8015de6 <__ieee754_powf+0x72>
 8015e32:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8015e36:	d102      	bne.n	8015e3e <__ieee754_powf+0xca>
 8015e38:	ee28 0a08 	vmul.f32	s0, s16, s16
 8015e3c:	e7ec      	b.n	8015e18 <__ieee754_powf+0xa4>
 8015e3e:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8015e42:	eeb0 0a48 	vmov.f32	s0, s16
 8015e46:	d108      	bne.n	8015e5a <__ieee754_powf+0xe6>
 8015e48:	f1b8 0f00 	cmp.w	r8, #0
 8015e4c:	db05      	blt.n	8015e5a <__ieee754_powf+0xe6>
 8015e4e:	ecbd 8b02 	vpop	{d8}
 8015e52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015e56:	f000 ba4d 	b.w	80162f4 <__ieee754_sqrtf>
 8015e5a:	f000 fb63 	bl	8016524 <fabsf>
 8015e5e:	b124      	cbz	r4, 8015e6a <__ieee754_powf+0xf6>
 8015e60:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8015e64:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8015e68:	d117      	bne.n	8015e9a <__ieee754_powf+0x126>
 8015e6a:	2d00      	cmp	r5, #0
 8015e6c:	bfbc      	itt	lt
 8015e6e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8015e72:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8015e76:	f1b8 0f00 	cmp.w	r8, #0
 8015e7a:	dacd      	bge.n	8015e18 <__ieee754_powf+0xa4>
 8015e7c:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8015e80:	ea54 0306 	orrs.w	r3, r4, r6
 8015e84:	d104      	bne.n	8015e90 <__ieee754_powf+0x11c>
 8015e86:	ee70 7a40 	vsub.f32	s15, s0, s0
 8015e8a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8015e8e:	e7c3      	b.n	8015e18 <__ieee754_powf+0xa4>
 8015e90:	2e01      	cmp	r6, #1
 8015e92:	d1c1      	bne.n	8015e18 <__ieee754_powf+0xa4>
 8015e94:	eeb1 0a40 	vneg.f32	s0, s0
 8015e98:	e7be      	b.n	8015e18 <__ieee754_powf+0xa4>
 8015e9a:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8015e9e:	3801      	subs	r0, #1
 8015ea0:	ea56 0300 	orrs.w	r3, r6, r0
 8015ea4:	d104      	bne.n	8015eb0 <__ieee754_powf+0x13c>
 8015ea6:	ee38 8a48 	vsub.f32	s16, s16, s16
 8015eaa:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8015eae:	e7b3      	b.n	8015e18 <__ieee754_powf+0xa4>
 8015eb0:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8015eb4:	dd6d      	ble.n	8015f92 <__ieee754_powf+0x21e>
 8015eb6:	4b9a      	ldr	r3, [pc, #616]	; (8016120 <__ieee754_powf+0x3ac>)
 8015eb8:	429c      	cmp	r4, r3
 8015eba:	dc06      	bgt.n	8015eca <__ieee754_powf+0x156>
 8015ebc:	2d00      	cmp	r5, #0
 8015ebe:	daa9      	bge.n	8015e14 <__ieee754_powf+0xa0>
 8015ec0:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8016124 <__ieee754_powf+0x3b0>
 8015ec4:	ee20 0a00 	vmul.f32	s0, s0, s0
 8015ec8:	e7a6      	b.n	8015e18 <__ieee754_powf+0xa4>
 8015eca:	4b97      	ldr	r3, [pc, #604]	; (8016128 <__ieee754_powf+0x3b4>)
 8015ecc:	429c      	cmp	r4, r3
 8015ece:	dd02      	ble.n	8015ed6 <__ieee754_powf+0x162>
 8015ed0:	2d00      	cmp	r5, #0
 8015ed2:	dcf5      	bgt.n	8015ec0 <__ieee754_powf+0x14c>
 8015ed4:	e79e      	b.n	8015e14 <__ieee754_powf+0xa0>
 8015ed6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015eda:	ee30 0a67 	vsub.f32	s0, s0, s15
 8015ede:	ed9f 7a93 	vldr	s14, [pc, #588]	; 801612c <__ieee754_powf+0x3b8>
 8015ee2:	eef1 6a40 	vneg.f32	s13, s0
 8015ee6:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8015eea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8015eee:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8015ef2:	eee7 7a40 	vfms.f32	s15, s14, s0
 8015ef6:	ee60 0a00 	vmul.f32	s1, s0, s0
 8015efa:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8016130 <__ieee754_powf+0x3bc>
 8015efe:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8015f02:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8016134 <__ieee754_powf+0x3c0>
 8015f06:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 8015f0a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8015f0e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8016138 <__ieee754_powf+0x3c4>
 8015f12:	eeb0 6a67 	vmov.f32	s12, s15
 8015f16:	eea0 6a07 	vfma.f32	s12, s0, s14
 8015f1a:	ee16 3a10 	vmov	r3, s12
 8015f1e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8015f22:	f023 030f 	bic.w	r3, r3, #15
 8015f26:	ee00 3a90 	vmov	s1, r3
 8015f2a:	eee6 0a87 	vfma.f32	s1, s13, s14
 8015f2e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8015f32:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8015f36:	f025 050f 	bic.w	r5, r5, #15
 8015f3a:	ee07 5a10 	vmov	s14, r5
 8015f3e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8015f42:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8015f46:	ee07 3a90 	vmov	s15, r3
 8015f4a:	eee7 0a27 	vfma.f32	s1, s14, s15
 8015f4e:	3e01      	subs	r6, #1
 8015f50:	ea56 0200 	orrs.w	r2, r6, r0
 8015f54:	ee07 5a10 	vmov	s14, r5
 8015f58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015f5c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8015f60:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8015f64:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8015f68:	ee17 4a10 	vmov	r4, s14
 8015f6c:	bf08      	it	eq
 8015f6e:	eeb0 8a40 	vmoveq.f32	s16, s0
 8015f72:	2c00      	cmp	r4, #0
 8015f74:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8015f78:	f340 8184 	ble.w	8016284 <__ieee754_powf+0x510>
 8015f7c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8015f80:	f340 80fc 	ble.w	801617c <__ieee754_powf+0x408>
 8015f84:	eddf 7a67 	vldr	s15, [pc, #412]	; 8016124 <__ieee754_powf+0x3b0>
 8015f88:	ee28 0a27 	vmul.f32	s0, s16, s15
 8015f8c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015f90:	e742      	b.n	8015e18 <__ieee754_powf+0xa4>
 8015f92:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8015f96:	bfbf      	itttt	lt
 8015f98:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 801613c <__ieee754_powf+0x3c8>
 8015f9c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8015fa0:	f06f 0217 	mvnlt.w	r2, #23
 8015fa4:	ee17 4a90 	vmovlt	r4, s15
 8015fa8:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8015fac:	bfa8      	it	ge
 8015fae:	2200      	movge	r2, #0
 8015fb0:	3b7f      	subs	r3, #127	; 0x7f
 8015fb2:	4413      	add	r3, r2
 8015fb4:	4a62      	ldr	r2, [pc, #392]	; (8016140 <__ieee754_powf+0x3cc>)
 8015fb6:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8015fba:	4294      	cmp	r4, r2
 8015fbc:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8015fc0:	dd06      	ble.n	8015fd0 <__ieee754_powf+0x25c>
 8015fc2:	4a60      	ldr	r2, [pc, #384]	; (8016144 <__ieee754_powf+0x3d0>)
 8015fc4:	4294      	cmp	r4, r2
 8015fc6:	f340 80a5 	ble.w	8016114 <__ieee754_powf+0x3a0>
 8015fca:	3301      	adds	r3, #1
 8015fcc:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8015fd0:	2400      	movs	r4, #0
 8015fd2:	4a5d      	ldr	r2, [pc, #372]	; (8016148 <__ieee754_powf+0x3d4>)
 8015fd4:	00a7      	lsls	r7, r4, #2
 8015fd6:	443a      	add	r2, r7
 8015fd8:	ee07 1a90 	vmov	s15, r1
 8015fdc:	ed92 7a00 	vldr	s14, [r2]
 8015fe0:	4a5a      	ldr	r2, [pc, #360]	; (801614c <__ieee754_powf+0x3d8>)
 8015fe2:	ee37 6a27 	vadd.f32	s12, s14, s15
 8015fe6:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8015fea:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8015fee:	1049      	asrs	r1, r1, #1
 8015ff0:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8015ff4:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8015ff8:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8015ffc:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8016000:	ee06 1a10 	vmov	s12, r1
 8016004:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8016008:	ee14 ca90 	vmov	ip, s9
 801600c:	ea02 0c0c 	and.w	ip, r2, ip
 8016010:	ee05 ca10 	vmov	s10, ip
 8016014:	eeb1 4a45 	vneg.f32	s8, s10
 8016018:	eee4 5a06 	vfma.f32	s11, s8, s12
 801601c:	ee36 6a47 	vsub.f32	s12, s12, s14
 8016020:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8016150 <__ieee754_powf+0x3dc>
 8016024:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8016028:	ee64 7aa4 	vmul.f32	s15, s9, s9
 801602c:	eee4 5a06 	vfma.f32	s11, s8, s12
 8016030:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8016034:	ee25 6aa6 	vmul.f32	s12, s11, s13
 8016038:	eddf 5a46 	vldr	s11, [pc, #280]	; 8016154 <__ieee754_powf+0x3e0>
 801603c:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8016040:	eddf 5a45 	vldr	s11, [pc, #276]	; 8016158 <__ieee754_powf+0x3e4>
 8016044:	eee7 5a27 	vfma.f32	s11, s14, s15
 8016048:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801612c <__ieee754_powf+0x3b8>
 801604c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8016050:	eddf 5a42 	vldr	s11, [pc, #264]	; 801615c <__ieee754_powf+0x3e8>
 8016054:	eee7 5a27 	vfma.f32	s11, s14, s15
 8016058:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8016160 <__ieee754_powf+0x3ec>
 801605c:	ee75 6a24 	vadd.f32	s13, s10, s9
 8016060:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8016064:	ee66 6a86 	vmul.f32	s13, s13, s12
 8016068:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 801606c:	eef0 7a65 	vmov.f32	s15, s11
 8016070:	eee3 6a87 	vfma.f32	s13, s7, s14
 8016074:	eee5 7a05 	vfma.f32	s15, s10, s10
 8016078:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801607c:	ee17 1a90 	vmov	r1, s15
 8016080:	4011      	ands	r1, r2
 8016082:	ee07 1a90 	vmov	s15, r1
 8016086:	ee37 7ae5 	vsub.f32	s14, s15, s11
 801608a:	eddf 5a36 	vldr	s11, [pc, #216]	; 8016164 <__ieee754_powf+0x3f0>
 801608e:	eea4 7a05 	vfma.f32	s14, s8, s10
 8016092:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8016096:	ee27 7a24 	vmul.f32	s14, s14, s9
 801609a:	eea7 7a86 	vfma.f32	s14, s15, s12
 801609e:	eeb0 6a47 	vmov.f32	s12, s14
 80160a2:	eea5 6a27 	vfma.f32	s12, s10, s15
 80160a6:	ee16 1a10 	vmov	r1, s12
 80160aa:	4011      	ands	r1, r2
 80160ac:	ee06 1a90 	vmov	s13, r1
 80160b0:	eee4 6a27 	vfma.f32	s13, s8, s15
 80160b4:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8016168 <__ieee754_powf+0x3f4>
 80160b8:	ee37 7a66 	vsub.f32	s14, s14, s13
 80160bc:	ee06 1a10 	vmov	s12, r1
 80160c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80160c4:	eddf 7a29 	vldr	s15, [pc, #164]	; 801616c <__ieee754_powf+0x3f8>
 80160c8:	4929      	ldr	r1, [pc, #164]	; (8016170 <__ieee754_powf+0x3fc>)
 80160ca:	eea6 7a27 	vfma.f32	s14, s12, s15
 80160ce:	4439      	add	r1, r7
 80160d0:	edd1 7a00 	vldr	s15, [r1]
 80160d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80160d8:	ee07 3a90 	vmov	s15, r3
 80160dc:	eef0 0a47 	vmov.f32	s1, s14
 80160e0:	4b24      	ldr	r3, [pc, #144]	; (8016174 <__ieee754_powf+0x400>)
 80160e2:	eee6 0a25 	vfma.f32	s1, s12, s11
 80160e6:	443b      	add	r3, r7
 80160e8:	ed93 5a00 	vldr	s10, [r3]
 80160ec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80160f0:	ee70 0a85 	vadd.f32	s1, s1, s10
 80160f4:	ee70 7aa6 	vadd.f32	s15, s1, s13
 80160f8:	ee17 3a90 	vmov	r3, s15
 80160fc:	4013      	ands	r3, r2
 80160fe:	ee07 3a90 	vmov	s15, r3
 8016102:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016106:	ee77 7ac5 	vsub.f32	s15, s15, s10
 801610a:	eee6 7a65 	vfms.f32	s15, s12, s11
 801610e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016112:	e70e      	b.n	8015f32 <__ieee754_powf+0x1be>
 8016114:	2401      	movs	r4, #1
 8016116:	e75c      	b.n	8015fd2 <__ieee754_powf+0x25e>
 8016118:	08016e19 	.word	0x08016e19
 801611c:	00000000 	.word	0x00000000
 8016120:	3f7ffff7 	.word	0x3f7ffff7
 8016124:	7149f2ca 	.word	0x7149f2ca
 8016128:	3f800007 	.word	0x3f800007
 801612c:	3eaaaaab 	.word	0x3eaaaaab
 8016130:	36eca570 	.word	0x36eca570
 8016134:	3fb8aa3b 	.word	0x3fb8aa3b
 8016138:	3fb8aa00 	.word	0x3fb8aa00
 801613c:	4b800000 	.word	0x4b800000
 8016140:	001cc471 	.word	0x001cc471
 8016144:	005db3d6 	.word	0x005db3d6
 8016148:	08016f70 	.word	0x08016f70
 801614c:	fffff000 	.word	0xfffff000
 8016150:	3e6c3255 	.word	0x3e6c3255
 8016154:	3e53f142 	.word	0x3e53f142
 8016158:	3e8ba305 	.word	0x3e8ba305
 801615c:	3edb6db7 	.word	0x3edb6db7
 8016160:	3f19999a 	.word	0x3f19999a
 8016164:	3f763800 	.word	0x3f763800
 8016168:	3f76384f 	.word	0x3f76384f
 801616c:	369dc3a0 	.word	0x369dc3a0
 8016170:	08016f80 	.word	0x08016f80
 8016174:	08016f78 	.word	0x08016f78
 8016178:	3338aa3c 	.word	0x3338aa3c
 801617c:	f040 8092 	bne.w	80162a4 <__ieee754_powf+0x530>
 8016180:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8016178 <__ieee754_powf+0x404>
 8016184:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016188:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801618c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8016190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016194:	f73f aef6 	bgt.w	8015f84 <__ieee754_powf+0x210>
 8016198:	15db      	asrs	r3, r3, #23
 801619a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 801619e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80161a2:	4103      	asrs	r3, r0
 80161a4:	4423      	add	r3, r4
 80161a6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80161aa:	4947      	ldr	r1, [pc, #284]	; (80162c8 <__ieee754_powf+0x554>)
 80161ac:	3a7f      	subs	r2, #127	; 0x7f
 80161ae:	4111      	asrs	r1, r2
 80161b0:	ea23 0101 	bic.w	r1, r3, r1
 80161b4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80161b8:	ee07 1a10 	vmov	s14, r1
 80161bc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80161c0:	f1c2 0217 	rsb	r2, r2, #23
 80161c4:	4110      	asrs	r0, r2
 80161c6:	2c00      	cmp	r4, #0
 80161c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80161cc:	bfb8      	it	lt
 80161ce:	4240      	neglt	r0, r0
 80161d0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80161d4:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80162cc <__ieee754_powf+0x558>
 80161d8:	ee17 3a10 	vmov	r3, s14
 80161dc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80161e0:	f023 030f 	bic.w	r3, r3, #15
 80161e4:	ee07 3a10 	vmov	s14, r3
 80161e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80161ec:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80161f0:	eddf 7a37 	vldr	s15, [pc, #220]	; 80162d0 <__ieee754_powf+0x55c>
 80161f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80161f8:	eee0 7aa6 	vfma.f32	s15, s1, s13
 80161fc:	eddf 6a35 	vldr	s13, [pc, #212]	; 80162d4 <__ieee754_powf+0x560>
 8016200:	eeb0 0a67 	vmov.f32	s0, s15
 8016204:	eea7 0a26 	vfma.f32	s0, s14, s13
 8016208:	eeb0 6a40 	vmov.f32	s12, s0
 801620c:	eea7 6a66 	vfms.f32	s12, s14, s13
 8016210:	ee20 7a00 	vmul.f32	s14, s0, s0
 8016214:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8016218:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80162d8 <__ieee754_powf+0x564>
 801621c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80162dc <__ieee754_powf+0x568>
 8016220:	eea7 6a26 	vfma.f32	s12, s14, s13
 8016224:	eddf 6a2e 	vldr	s13, [pc, #184]	; 80162e0 <__ieee754_powf+0x56c>
 8016228:	eee6 6a07 	vfma.f32	s13, s12, s14
 801622c:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 80162e4 <__ieee754_powf+0x570>
 8016230:	eea6 6a87 	vfma.f32	s12, s13, s14
 8016234:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80162e8 <__ieee754_powf+0x574>
 8016238:	eee6 6a07 	vfma.f32	s13, s12, s14
 801623c:	eeb0 6a40 	vmov.f32	s12, s0
 8016240:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8016244:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016248:	eeb0 7a46 	vmov.f32	s14, s12
 801624c:	ee77 6a66 	vsub.f32	s13, s14, s13
 8016250:	ee20 6a06 	vmul.f32	s12, s0, s12
 8016254:	eee0 7a27 	vfma.f32	s15, s0, s15
 8016258:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801625c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8016260:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8016264:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016268:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801626c:	ee10 3a10 	vmov	r3, s0
 8016270:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8016274:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8016278:	da1a      	bge.n	80162b0 <__ieee754_powf+0x53c>
 801627a:	f000 f9bf 	bl	80165fc <scalbnf>
 801627e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8016282:	e5c9      	b.n	8015e18 <__ieee754_powf+0xa4>
 8016284:	4a19      	ldr	r2, [pc, #100]	; (80162ec <__ieee754_powf+0x578>)
 8016286:	4293      	cmp	r3, r2
 8016288:	dd02      	ble.n	8016290 <__ieee754_powf+0x51c>
 801628a:	eddf 7a19 	vldr	s15, [pc, #100]	; 80162f0 <__ieee754_powf+0x57c>
 801628e:	e67b      	b.n	8015f88 <__ieee754_powf+0x214>
 8016290:	d108      	bne.n	80162a4 <__ieee754_powf+0x530>
 8016292:	ee37 7a67 	vsub.f32	s14, s14, s15
 8016296:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801629a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801629e:	f6ff af7b 	blt.w	8016198 <__ieee754_powf+0x424>
 80162a2:	e7f2      	b.n	801628a <__ieee754_powf+0x516>
 80162a4:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80162a8:	f73f af76 	bgt.w	8016198 <__ieee754_powf+0x424>
 80162ac:	2000      	movs	r0, #0
 80162ae:	e78f      	b.n	80161d0 <__ieee754_powf+0x45c>
 80162b0:	ee00 3a10 	vmov	s0, r3
 80162b4:	e7e3      	b.n	801627e <__ieee754_powf+0x50a>
 80162b6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80162ba:	e5ad      	b.n	8015e18 <__ieee754_powf+0xa4>
 80162bc:	eeb0 0a68 	vmov.f32	s0, s17
 80162c0:	e5aa      	b.n	8015e18 <__ieee754_powf+0xa4>
 80162c2:	eeb0 0a48 	vmov.f32	s0, s16
 80162c6:	e5a7      	b.n	8015e18 <__ieee754_powf+0xa4>
 80162c8:	007fffff 	.word	0x007fffff
 80162cc:	3f317218 	.word	0x3f317218
 80162d0:	35bfbe8c 	.word	0x35bfbe8c
 80162d4:	3f317200 	.word	0x3f317200
 80162d8:	3331bb4c 	.word	0x3331bb4c
 80162dc:	b5ddea0e 	.word	0xb5ddea0e
 80162e0:	388ab355 	.word	0x388ab355
 80162e4:	bb360b61 	.word	0xbb360b61
 80162e8:	3e2aaaab 	.word	0x3e2aaaab
 80162ec:	43160000 	.word	0x43160000
 80162f0:	0da24260 	.word	0x0da24260

080162f4 <__ieee754_sqrtf>:
 80162f4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80162f8:	4770      	bx	lr

080162fa <fabs>:
 80162fa:	ec51 0b10 	vmov	r0, r1, d0
 80162fe:	ee10 2a10 	vmov	r2, s0
 8016302:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016306:	ec43 2b10 	vmov	d0, r2, r3
 801630a:	4770      	bx	lr

0801630c <finite>:
 801630c:	ee10 3a90 	vmov	r3, s1
 8016310:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8016314:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8016318:	0fc0      	lsrs	r0, r0, #31
 801631a:	4770      	bx	lr

0801631c <matherr>:
 801631c:	2000      	movs	r0, #0
 801631e:	4770      	bx	lr

08016320 <nan>:
 8016320:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016328 <nan+0x8>
 8016324:	4770      	bx	lr
 8016326:	bf00      	nop
 8016328:	00000000 	.word	0x00000000
 801632c:	7ff80000 	.word	0x7ff80000

08016330 <rint>:
 8016330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016332:	ec51 0b10 	vmov	r0, r1, d0
 8016336:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801633a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801633e:	2e13      	cmp	r6, #19
 8016340:	460b      	mov	r3, r1
 8016342:	ee10 4a10 	vmov	r4, s0
 8016346:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801634a:	dc56      	bgt.n	80163fa <rint+0xca>
 801634c:	2e00      	cmp	r6, #0
 801634e:	da2b      	bge.n	80163a8 <rint+0x78>
 8016350:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8016354:	4302      	orrs	r2, r0
 8016356:	d023      	beq.n	80163a0 <rint+0x70>
 8016358:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801635c:	4302      	orrs	r2, r0
 801635e:	4254      	negs	r4, r2
 8016360:	4314      	orrs	r4, r2
 8016362:	0c4b      	lsrs	r3, r1, #17
 8016364:	0b24      	lsrs	r4, r4, #12
 8016366:	045b      	lsls	r3, r3, #17
 8016368:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801636c:	ea44 0103 	orr.w	r1, r4, r3
 8016370:	460b      	mov	r3, r1
 8016372:	492f      	ldr	r1, [pc, #188]	; (8016430 <rint+0x100>)
 8016374:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8016378:	e9d1 6700 	ldrd	r6, r7, [r1]
 801637c:	4602      	mov	r2, r0
 801637e:	4639      	mov	r1, r7
 8016380:	4630      	mov	r0, r6
 8016382:	f7e9 ff83 	bl	800028c <__adddf3>
 8016386:	e9cd 0100 	strd	r0, r1, [sp]
 801638a:	463b      	mov	r3, r7
 801638c:	4632      	mov	r2, r6
 801638e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016392:	f7e9 ff79 	bl	8000288 <__aeabi_dsub>
 8016396:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801639a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801639e:	4639      	mov	r1, r7
 80163a0:	ec41 0b10 	vmov	d0, r0, r1
 80163a4:	b003      	add	sp, #12
 80163a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80163a8:	4a22      	ldr	r2, [pc, #136]	; (8016434 <rint+0x104>)
 80163aa:	4132      	asrs	r2, r6
 80163ac:	ea01 0702 	and.w	r7, r1, r2
 80163b0:	4307      	orrs	r7, r0
 80163b2:	d0f5      	beq.n	80163a0 <rint+0x70>
 80163b4:	0852      	lsrs	r2, r2, #1
 80163b6:	4011      	ands	r1, r2
 80163b8:	430c      	orrs	r4, r1
 80163ba:	d00b      	beq.n	80163d4 <rint+0xa4>
 80163bc:	ea23 0202 	bic.w	r2, r3, r2
 80163c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80163c4:	2e13      	cmp	r6, #19
 80163c6:	fa43 f306 	asr.w	r3, r3, r6
 80163ca:	bf0c      	ite	eq
 80163cc:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80163d0:	2400      	movne	r4, #0
 80163d2:	4313      	orrs	r3, r2
 80163d4:	4916      	ldr	r1, [pc, #88]	; (8016430 <rint+0x100>)
 80163d6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80163da:	4622      	mov	r2, r4
 80163dc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80163e0:	4620      	mov	r0, r4
 80163e2:	4629      	mov	r1, r5
 80163e4:	f7e9 ff52 	bl	800028c <__adddf3>
 80163e8:	e9cd 0100 	strd	r0, r1, [sp]
 80163ec:	4622      	mov	r2, r4
 80163ee:	462b      	mov	r3, r5
 80163f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80163f4:	f7e9 ff48 	bl	8000288 <__aeabi_dsub>
 80163f8:	e7d2      	b.n	80163a0 <rint+0x70>
 80163fa:	2e33      	cmp	r6, #51	; 0x33
 80163fc:	dd07      	ble.n	801640e <rint+0xde>
 80163fe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8016402:	d1cd      	bne.n	80163a0 <rint+0x70>
 8016404:	ee10 2a10 	vmov	r2, s0
 8016408:	f7e9 ff40 	bl	800028c <__adddf3>
 801640c:	e7c8      	b.n	80163a0 <rint+0x70>
 801640e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8016412:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016416:	40f2      	lsrs	r2, r6
 8016418:	4210      	tst	r0, r2
 801641a:	d0c1      	beq.n	80163a0 <rint+0x70>
 801641c:	0852      	lsrs	r2, r2, #1
 801641e:	4210      	tst	r0, r2
 8016420:	bf1f      	itttt	ne
 8016422:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8016426:	ea20 0202 	bicne.w	r2, r0, r2
 801642a:	4134      	asrne	r4, r6
 801642c:	4314      	orrne	r4, r2
 801642e:	e7d1      	b.n	80163d4 <rint+0xa4>
 8016430:	08016f88 	.word	0x08016f88
 8016434:	000fffff 	.word	0x000fffff

08016438 <scalbn>:
 8016438:	b570      	push	{r4, r5, r6, lr}
 801643a:	ec55 4b10 	vmov	r4, r5, d0
 801643e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8016442:	4606      	mov	r6, r0
 8016444:	462b      	mov	r3, r5
 8016446:	b9aa      	cbnz	r2, 8016474 <scalbn+0x3c>
 8016448:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801644c:	4323      	orrs	r3, r4
 801644e:	d03b      	beq.n	80164c8 <scalbn+0x90>
 8016450:	4b31      	ldr	r3, [pc, #196]	; (8016518 <scalbn+0xe0>)
 8016452:	4629      	mov	r1, r5
 8016454:	2200      	movs	r2, #0
 8016456:	ee10 0a10 	vmov	r0, s0
 801645a:	f7ea f8cd 	bl	80005f8 <__aeabi_dmul>
 801645e:	4b2f      	ldr	r3, [pc, #188]	; (801651c <scalbn+0xe4>)
 8016460:	429e      	cmp	r6, r3
 8016462:	4604      	mov	r4, r0
 8016464:	460d      	mov	r5, r1
 8016466:	da12      	bge.n	801648e <scalbn+0x56>
 8016468:	a327      	add	r3, pc, #156	; (adr r3, 8016508 <scalbn+0xd0>)
 801646a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801646e:	f7ea f8c3 	bl	80005f8 <__aeabi_dmul>
 8016472:	e009      	b.n	8016488 <scalbn+0x50>
 8016474:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8016478:	428a      	cmp	r2, r1
 801647a:	d10c      	bne.n	8016496 <scalbn+0x5e>
 801647c:	ee10 2a10 	vmov	r2, s0
 8016480:	4620      	mov	r0, r4
 8016482:	4629      	mov	r1, r5
 8016484:	f7e9 ff02 	bl	800028c <__adddf3>
 8016488:	4604      	mov	r4, r0
 801648a:	460d      	mov	r5, r1
 801648c:	e01c      	b.n	80164c8 <scalbn+0x90>
 801648e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8016492:	460b      	mov	r3, r1
 8016494:	3a36      	subs	r2, #54	; 0x36
 8016496:	4432      	add	r2, r6
 8016498:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801649c:	428a      	cmp	r2, r1
 801649e:	dd0b      	ble.n	80164b8 <scalbn+0x80>
 80164a0:	ec45 4b11 	vmov	d1, r4, r5
 80164a4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8016510 <scalbn+0xd8>
 80164a8:	f000 f908 	bl	80166bc <copysign>
 80164ac:	a318      	add	r3, pc, #96	; (adr r3, 8016510 <scalbn+0xd8>)
 80164ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164b2:	ec51 0b10 	vmov	r0, r1, d0
 80164b6:	e7da      	b.n	801646e <scalbn+0x36>
 80164b8:	2a00      	cmp	r2, #0
 80164ba:	dd08      	ble.n	80164ce <scalbn+0x96>
 80164bc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80164c0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80164c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80164c8:	ec45 4b10 	vmov	d0, r4, r5
 80164cc:	bd70      	pop	{r4, r5, r6, pc}
 80164ce:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80164d2:	da0d      	bge.n	80164f0 <scalbn+0xb8>
 80164d4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80164d8:	429e      	cmp	r6, r3
 80164da:	ec45 4b11 	vmov	d1, r4, r5
 80164de:	dce1      	bgt.n	80164a4 <scalbn+0x6c>
 80164e0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8016508 <scalbn+0xd0>
 80164e4:	f000 f8ea 	bl	80166bc <copysign>
 80164e8:	a307      	add	r3, pc, #28	; (adr r3, 8016508 <scalbn+0xd0>)
 80164ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80164ee:	e7e0      	b.n	80164b2 <scalbn+0x7a>
 80164f0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80164f4:	3236      	adds	r2, #54	; 0x36
 80164f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80164fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80164fe:	4620      	mov	r0, r4
 8016500:	4629      	mov	r1, r5
 8016502:	2200      	movs	r2, #0
 8016504:	4b06      	ldr	r3, [pc, #24]	; (8016520 <scalbn+0xe8>)
 8016506:	e7b2      	b.n	801646e <scalbn+0x36>
 8016508:	c2f8f359 	.word	0xc2f8f359
 801650c:	01a56e1f 	.word	0x01a56e1f
 8016510:	8800759c 	.word	0x8800759c
 8016514:	7e37e43c 	.word	0x7e37e43c
 8016518:	43500000 	.word	0x43500000
 801651c:	ffff3cb0 	.word	0xffff3cb0
 8016520:	3c900000 	.word	0x3c900000

08016524 <fabsf>:
 8016524:	ee10 3a10 	vmov	r3, s0
 8016528:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801652c:	ee00 3a10 	vmov	s0, r3
 8016530:	4770      	bx	lr

08016532 <finitef>:
 8016532:	ee10 3a10 	vmov	r3, s0
 8016536:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 801653a:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801653e:	bfac      	ite	ge
 8016540:	2000      	movge	r0, #0
 8016542:	2001      	movlt	r0, #1
 8016544:	4770      	bx	lr
	...

08016548 <rintf>:
 8016548:	b513      	push	{r0, r1, r4, lr}
 801654a:	ee10 1a10 	vmov	r1, s0
 801654e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016552:	0ddc      	lsrs	r4, r3, #23
 8016554:	3c7f      	subs	r4, #127	; 0x7f
 8016556:	2c16      	cmp	r4, #22
 8016558:	dc46      	bgt.n	80165e8 <rintf+0xa0>
 801655a:	b32b      	cbz	r3, 80165a8 <rintf+0x60>
 801655c:	2c00      	cmp	r4, #0
 801655e:	ee10 2a10 	vmov	r2, s0
 8016562:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8016566:	da21      	bge.n	80165ac <rintf+0x64>
 8016568:	f3c1 0316 	ubfx	r3, r1, #0, #23
 801656c:	425b      	negs	r3, r3
 801656e:	4a21      	ldr	r2, [pc, #132]	; (80165f4 <rintf+0xac>)
 8016570:	0a5b      	lsrs	r3, r3, #9
 8016572:	0d09      	lsrs	r1, r1, #20
 8016574:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8016578:	0509      	lsls	r1, r1, #20
 801657a:	430b      	orrs	r3, r1
 801657c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8016580:	ee07 3a90 	vmov	s15, r3
 8016584:	edd2 6a00 	vldr	s13, [r2]
 8016588:	ee36 7aa7 	vadd.f32	s14, s13, s15
 801658c:	ed8d 7a01 	vstr	s14, [sp, #4]
 8016590:	eddd 7a01 	vldr	s15, [sp, #4]
 8016594:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8016598:	ee17 3a90 	vmov	r3, s15
 801659c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80165a0:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 80165a4:	ee00 3a10 	vmov	s0, r3
 80165a8:	b002      	add	sp, #8
 80165aa:	bd10      	pop	{r4, pc}
 80165ac:	4b12      	ldr	r3, [pc, #72]	; (80165f8 <rintf+0xb0>)
 80165ae:	4123      	asrs	r3, r4
 80165b0:	4219      	tst	r1, r3
 80165b2:	d0f9      	beq.n	80165a8 <rintf+0x60>
 80165b4:	085b      	lsrs	r3, r3, #1
 80165b6:	4219      	tst	r1, r3
 80165b8:	d006      	beq.n	80165c8 <rintf+0x80>
 80165ba:	ea21 0203 	bic.w	r2, r1, r3
 80165be:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80165c2:	fa43 f404 	asr.w	r4, r3, r4
 80165c6:	4322      	orrs	r2, r4
 80165c8:	4b0a      	ldr	r3, [pc, #40]	; (80165f4 <rintf+0xac>)
 80165ca:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80165ce:	ed90 7a00 	vldr	s14, [r0]
 80165d2:	ee07 2a90 	vmov	s15, r2
 80165d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80165da:	edcd 7a01 	vstr	s15, [sp, #4]
 80165de:	ed9d 0a01 	vldr	s0, [sp, #4]
 80165e2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80165e6:	e7df      	b.n	80165a8 <rintf+0x60>
 80165e8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80165ec:	d3dc      	bcc.n	80165a8 <rintf+0x60>
 80165ee:	ee30 0a00 	vadd.f32	s0, s0, s0
 80165f2:	e7d9      	b.n	80165a8 <rintf+0x60>
 80165f4:	08016f98 	.word	0x08016f98
 80165f8:	007fffff 	.word	0x007fffff

080165fc <scalbnf>:
 80165fc:	b508      	push	{r3, lr}
 80165fe:	ee10 2a10 	vmov	r2, s0
 8016602:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8016606:	ed2d 8b02 	vpush	{d8}
 801660a:	eef0 0a40 	vmov.f32	s1, s0
 801660e:	d004      	beq.n	801661a <scalbnf+0x1e>
 8016610:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8016614:	d306      	bcc.n	8016624 <scalbnf+0x28>
 8016616:	ee70 0a00 	vadd.f32	s1, s0, s0
 801661a:	ecbd 8b02 	vpop	{d8}
 801661e:	eeb0 0a60 	vmov.f32	s0, s1
 8016622:	bd08      	pop	{r3, pc}
 8016624:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8016628:	d21c      	bcs.n	8016664 <scalbnf+0x68>
 801662a:	4b1f      	ldr	r3, [pc, #124]	; (80166a8 <scalbnf+0xac>)
 801662c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80166ac <scalbnf+0xb0>
 8016630:	4298      	cmp	r0, r3
 8016632:	ee60 0a27 	vmul.f32	s1, s0, s15
 8016636:	db10      	blt.n	801665a <scalbnf+0x5e>
 8016638:	ee10 2a90 	vmov	r2, s1
 801663c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8016640:	3b19      	subs	r3, #25
 8016642:	4403      	add	r3, r0
 8016644:	2bfe      	cmp	r3, #254	; 0xfe
 8016646:	dd0f      	ble.n	8016668 <scalbnf+0x6c>
 8016648:	ed9f 8a19 	vldr	s16, [pc, #100]	; 80166b0 <scalbnf+0xb4>
 801664c:	eeb0 0a48 	vmov.f32	s0, s16
 8016650:	f000 f843 	bl	80166da <copysignf>
 8016654:	ee60 0a08 	vmul.f32	s1, s0, s16
 8016658:	e7df      	b.n	801661a <scalbnf+0x1e>
 801665a:	eddf 7a16 	vldr	s15, [pc, #88]	; 80166b4 <scalbnf+0xb8>
 801665e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8016662:	e7da      	b.n	801661a <scalbnf+0x1e>
 8016664:	0ddb      	lsrs	r3, r3, #23
 8016666:	e7ec      	b.n	8016642 <scalbnf+0x46>
 8016668:	2b00      	cmp	r3, #0
 801666a:	dd06      	ble.n	801667a <scalbnf+0x7e>
 801666c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8016670:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8016674:	ee00 3a90 	vmov	s1, r3
 8016678:	e7cf      	b.n	801661a <scalbnf+0x1e>
 801667a:	f113 0f16 	cmn.w	r3, #22
 801667e:	da06      	bge.n	801668e <scalbnf+0x92>
 8016680:	f24c 3350 	movw	r3, #50000	; 0xc350
 8016684:	4298      	cmp	r0, r3
 8016686:	dcdf      	bgt.n	8016648 <scalbnf+0x4c>
 8016688:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 80166b4 <scalbnf+0xb8>
 801668c:	e7de      	b.n	801664c <scalbnf+0x50>
 801668e:	3319      	adds	r3, #25
 8016690:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8016694:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8016698:	eddf 7a07 	vldr	s15, [pc, #28]	; 80166b8 <scalbnf+0xbc>
 801669c:	ee07 3a10 	vmov	s14, r3
 80166a0:	ee67 0a27 	vmul.f32	s1, s14, s15
 80166a4:	e7b9      	b.n	801661a <scalbnf+0x1e>
 80166a6:	bf00      	nop
 80166a8:	ffff3cb0 	.word	0xffff3cb0
 80166ac:	4c000000 	.word	0x4c000000
 80166b0:	7149f2ca 	.word	0x7149f2ca
 80166b4:	0da24260 	.word	0x0da24260
 80166b8:	33000000 	.word	0x33000000

080166bc <copysign>:
 80166bc:	ec51 0b10 	vmov	r0, r1, d0
 80166c0:	ee11 0a90 	vmov	r0, s3
 80166c4:	ee10 2a10 	vmov	r2, s0
 80166c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80166cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80166d0:	ea41 0300 	orr.w	r3, r1, r0
 80166d4:	ec43 2b10 	vmov	d0, r2, r3
 80166d8:	4770      	bx	lr

080166da <copysignf>:
 80166da:	ee10 3a10 	vmov	r3, s0
 80166de:	ee10 2a90 	vmov	r2, s1
 80166e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80166e6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80166ea:	4313      	orrs	r3, r2
 80166ec:	ee00 3a10 	vmov	s0, r3
 80166f0:	4770      	bx	lr
	...

080166f4 <_init>:
 80166f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166f6:	bf00      	nop
 80166f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80166fa:	bc08      	pop	{r3}
 80166fc:	469e      	mov	lr, r3
 80166fe:	4770      	bx	lr

08016700 <_fini>:
 8016700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016702:	bf00      	nop
 8016704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016706:	bc08      	pop	{r3}
 8016708:	469e      	mov	lr, r3
 801670a:	4770      	bx	lr
