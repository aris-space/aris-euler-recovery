
aris-euler-recovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014ac4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000888  08014c58  08014c58  00024c58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080154e0  080154e0  0003033c  2**0
                  CONTENTS
  4 .ARM          00000008  080154e0  080154e0  000254e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080154e8  080154e8  0003033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080154e8  080154e8  000254e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080154ec  080154ec  000254ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000033c  20000000  080154f0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000179ec  2000033c  0801582c  0003033c  2**2
                  ALLOC
 10 ._user_heap_stack 00002248  20017d28  0801582c  00037d28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003033c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028cac  00000000  00000000  0003036c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005ad3  00000000  00000000  00059018  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001780  00000000  00000000  0005eaf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014b8  00000000  00000000  00060270  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027a5b  00000000  00000000  00061728  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001e21e  00000000  00000000  00089183  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c98f1  00000000  00000000  000a73a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00170c92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070e0  00000000  00000000  00170d10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000033c 	.word	0x2000033c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014c3c 	.word	0x08014c3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000340 	.word	0x20000340
 80001cc:	08014c3c 	.word	0x08014c3c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <stay_alive>:
 */

#include "IO.h"
#include "adc.h"

void stay_alive(void){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STAY_ALIVE_GPIO_Port, STAY_ALIVE_Pin, GPIO_PIN_SET);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2120      	movs	r1, #32
 8000f90:	4802      	ldr	r0, [pc, #8]	; (8000f9c <stay_alive+0x14>)
 8000f92:	f007 fe23 	bl	8008bdc <HAL_GPIO_WritePin>
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40020400 	.word	0x40020400

08000fa0 <fire_HAWKs>:


void fire_HAWKs(uint8_t * armed){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	if (*armed == 1 ) HAL_GPIO_WritePin(HAWK1_GPIO_Port, HAWK1_Pin, GPIO_PIN_SET);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d105      	bne.n	8000fbc <fire_HAWKs+0x1c>
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fb6:	4808      	ldr	r0, [pc, #32]	; (8000fd8 <fire_HAWKs+0x38>)
 8000fb8:	f007 fe10 	bl	8008bdc <HAL_GPIO_WritePin>
	if (*armed == 1 ) HAL_GPIO_WritePin(HAWK2_GPIO_Port, HAWK2_Pin, GPIO_PIN_SET);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d105      	bne.n	8000fd0 <fire_HAWKs+0x30>
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fca:	4803      	ldr	r0, [pc, #12]	; (8000fd8 <fire_HAWKs+0x38>)
 8000fcc:	f007 fe06 	bl	8008bdc <HAL_GPIO_WritePin>
}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40021000 	.word	0x40021000

08000fdc <turn_off_HAWKs>:

void turn_off_HAWKs(void){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HAWK1_GPIO_Port, HAWK1_Pin, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fe6:	4805      	ldr	r0, [pc, #20]	; (8000ffc <turn_off_HAWKs+0x20>)
 8000fe8:	f007 fdf8 	bl	8008bdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HAWK2_GPIO_Port, HAWK2_Pin, GPIO_PIN_RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ff2:	4802      	ldr	r0, [pc, #8]	; (8000ffc <turn_off_HAWKs+0x20>)
 8000ff4:	f007 fdf2 	bl	8008bdc <HAL_GPIO_WritePin>
}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40021000 	.word	0x40021000

08001000 <fire_TDs>:

void fire_TDs(uint8_t * armed){
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	if (*armed == 1 ) HAL_GPIO_WritePin(TD1_GPIO_Port, TD1_Pin, GPIO_PIN_SET);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d105      	bne.n	800101c <fire_TDs+0x1c>
 8001010:	2201      	movs	r2, #1
 8001012:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001016:	4808      	ldr	r0, [pc, #32]	; (8001038 <fire_TDs+0x38>)
 8001018:	f007 fde0 	bl	8008bdc <HAL_GPIO_WritePin>
	if (*armed == 1 ) HAL_GPIO_WritePin(TD2_GPIO_Port, TD2_Pin, GPIO_PIN_SET);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d105      	bne.n	8001030 <fire_TDs+0x30>
 8001024:	2201      	movs	r2, #1
 8001026:	f44f 7100 	mov.w	r1, #512	; 0x200
 800102a:	4803      	ldr	r0, [pc, #12]	; (8001038 <fire_TDs+0x38>)
 800102c:	f007 fdd6 	bl	8008bdc <HAL_GPIO_WritePin>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40021000 	.word	0x40021000

0800103c <turn_off_TDs>:

void turn_off_TDs(void){
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TD1_GPIO_Port, TD1_Pin, GPIO_PIN_RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <turn_off_TDs+0x20>)
 8001048:	f007 fdc8 	bl	8008bdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TD2_GPIO_Port, TD2_Pin, GPIO_PIN_RESET);
 800104c:	2200      	movs	r2, #0
 800104e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001052:	4802      	ldr	r0, [pc, #8]	; (800105c <turn_off_TDs+0x20>)
 8001054:	f007 fdc2 	bl	8008bdc <HAL_GPIO_WritePin>
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40021000 	.word	0x40021000

08001060 <init_ADC>:

void init_ADC(void){
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 8001064:	4804      	ldr	r0, [pc, #16]	; (8001078 <init_ADC+0x18>)
 8001066:	f006 fbe1 	bl	800782c <HAL_ADC_Stop_DMA>
	HAL_ADC_Start_DMA(&hadc1, adc_buf, 8);
 800106a:	2208      	movs	r2, #8
 800106c:	4903      	ldr	r1, [pc, #12]	; (800107c <init_ADC+0x1c>)
 800106e:	4802      	ldr	r0, [pc, #8]	; (8001078 <init_ADC+0x18>)
 8001070:	f006 faea 	bl	8007648 <HAL_ADC_Start_DMA>
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20004968 	.word	0x20004968
 800107c:	20000878 	.word	0x20000878

08001080 <read_ADC>:

void read_ADC(float * out){
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]

	float vsense = 3.3 / 4096.;
 8001088:	4b89      	ldr	r3, [pc, #548]	; (80012b0 <read_ADC+0x230>)
 800108a:	60fb      	str	r3, [r7, #12]
	float scale = 16 / 3.3;
 800108c:	4b89      	ldr	r3, [pc, #548]	; (80012b4 <read_ADC+0x234>)
 800108e:	60bb      	str	r3, [r7, #8]

	out[0] = (float)adc_buf[0] * vsense * scale;
 8001090:	4b89      	ldr	r3, [pc, #548]	; (80012b8 <read_ADC+0x238>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	ee07 3a90 	vmov	s15, r3
 8001098:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800109c:	edd7 7a03 	vldr	s15, [r7, #12]
 80010a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80010a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	edc3 7a00 	vstr	s15, [r3]
	out[1] = (float)adc_buf[1] * vsense * scale;
 80010b2:	4b81      	ldr	r3, [pc, #516]	; (80012b8 <read_ADC+0x238>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	ee07 3a90 	vmov	s15, r3
 80010ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010be:	edd7 7a03 	vldr	s15, [r7, #12]
 80010c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3304      	adds	r3, #4
 80010ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80010ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010d2:	edc3 7a00 	vstr	s15, [r3]
	out[2] = (float)adc_buf[2] * vsense * scale;
 80010d6:	4b78      	ldr	r3, [pc, #480]	; (80012b8 <read_ADC+0x238>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	ee07 3a90 	vmov	s15, r3
 80010de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80010e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3308      	adds	r3, #8
 80010ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80010f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f6:	edc3 7a00 	vstr	s15, [r3]

	out[3] = -( 1000 * (( 3.3 / 2.0 - (float)adc_buf[3] * vsense) ) / 0.066 );
 80010fa:	4b6f      	ldr	r3, [pc, #444]	; (80012b8 <read_ADC+0x238>)
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	ee07 3a90 	vmov	s15, r3
 8001102:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001106:	edd7 7a03 	vldr	s15, [r7, #12]
 800110a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800110e:	ee17 0a90 	vmov	r0, s15
 8001112:	f7ff fa19 	bl	8000548 <__aeabi_f2d>
 8001116:	4603      	mov	r3, r0
 8001118:	460c      	mov	r4, r1
 800111a:	461a      	mov	r2, r3
 800111c:	4623      	mov	r3, r4
 800111e:	a15c      	add	r1, pc, #368	; (adr r1, 8001290 <read_ADC+0x210>)
 8001120:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001124:	f7ff f8b0 	bl	8000288 <__aeabi_dsub>
 8001128:	4603      	mov	r3, r0
 800112a:	460c      	mov	r4, r1
 800112c:	4618      	mov	r0, r3
 800112e:	4621      	mov	r1, r4
 8001130:	f04f 0200 	mov.w	r2, #0
 8001134:	4b61      	ldr	r3, [pc, #388]	; (80012bc <read_ADC+0x23c>)
 8001136:	f7ff fa5f 	bl	80005f8 <__aeabi_dmul>
 800113a:	4603      	mov	r3, r0
 800113c:	460c      	mov	r4, r1
 800113e:	4618      	mov	r0, r3
 8001140:	4621      	mov	r1, r4
 8001142:	a355      	add	r3, pc, #340	; (adr r3, 8001298 <read_ADC+0x218>)
 8001144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001148:	f7ff fb80 	bl	800084c <__aeabi_ddiv>
 800114c:	4603      	mov	r3, r0
 800114e:	460c      	mov	r4, r1
 8001150:	4618      	mov	r0, r3
 8001152:	4621      	mov	r1, r4
 8001154:	f7ff fd48 	bl	8000be8 <__aeabi_d2f>
 8001158:	4602      	mov	r2, r0
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	330c      	adds	r3, #12
 800115e:	ee07 2a90 	vmov	s15, r2
 8001162:	eef1 7a67 	vneg.f32	s15, s15
 8001166:	edc3 7a00 	vstr	s15, [r3]
	out[4] = -( 1000 * (( 3.3 / 2.0 - (float)adc_buf[4] * vsense) ) / 0.066 );
 800116a:	4b53      	ldr	r3, [pc, #332]	; (80012b8 <read_ADC+0x238>)
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	ee07 3a90 	vmov	s15, r3
 8001172:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001176:	edd7 7a03 	vldr	s15, [r7, #12]
 800117a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800117e:	ee17 0a90 	vmov	r0, s15
 8001182:	f7ff f9e1 	bl	8000548 <__aeabi_f2d>
 8001186:	4603      	mov	r3, r0
 8001188:	460c      	mov	r4, r1
 800118a:	461a      	mov	r2, r3
 800118c:	4623      	mov	r3, r4
 800118e:	a140      	add	r1, pc, #256	; (adr r1, 8001290 <read_ADC+0x210>)
 8001190:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001194:	f7ff f878 	bl	8000288 <__aeabi_dsub>
 8001198:	4603      	mov	r3, r0
 800119a:	460c      	mov	r4, r1
 800119c:	4618      	mov	r0, r3
 800119e:	4621      	mov	r1, r4
 80011a0:	f04f 0200 	mov.w	r2, #0
 80011a4:	4b45      	ldr	r3, [pc, #276]	; (80012bc <read_ADC+0x23c>)
 80011a6:	f7ff fa27 	bl	80005f8 <__aeabi_dmul>
 80011aa:	4603      	mov	r3, r0
 80011ac:	460c      	mov	r4, r1
 80011ae:	4618      	mov	r0, r3
 80011b0:	4621      	mov	r1, r4
 80011b2:	a339      	add	r3, pc, #228	; (adr r3, 8001298 <read_ADC+0x218>)
 80011b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b8:	f7ff fb48 	bl	800084c <__aeabi_ddiv>
 80011bc:	4603      	mov	r3, r0
 80011be:	460c      	mov	r4, r1
 80011c0:	4618      	mov	r0, r3
 80011c2:	4621      	mov	r1, r4
 80011c4:	f7ff fd10 	bl	8000be8 <__aeabi_d2f>
 80011c8:	4602      	mov	r2, r0
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3310      	adds	r3, #16
 80011ce:	ee07 2a90 	vmov	s15, r2
 80011d2:	eef1 7a67 	vneg.f32	s15, s15
 80011d6:	edc3 7a00 	vstr	s15, [r3]

	out[5] = (float)adc_buf[5] * vsense * scale;
 80011da:	4b37      	ldr	r3, [pc, #220]	; (80012b8 <read_ADC+0x238>)
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	ee07 3a90 	vmov	s15, r3
 80011e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80011ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3314      	adds	r3, #20
 80011f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80011f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011fa:	edc3 7a00 	vstr	s15, [r3]
	out[6] = (float)adc_buf[6] * vsense * scale;
 80011fe:	4b2e      	ldr	r3, [pc, #184]	; (80012b8 <read_ADC+0x238>)
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	ee07 3a90 	vmov	s15, r3
 8001206:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800120a:	edd7 7a03 	vldr	s15, [r7, #12]
 800120e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3318      	adds	r3, #24
 8001216:	edd7 7a02 	vldr	s15, [r7, #8]
 800121a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800121e:	edc3 7a00 	vstr	s15, [r3]

	out[7] = ((((float)adc_buf[7] * vsense) - 0.76) / 0.0025) + 25.0;
 8001222:	4b25      	ldr	r3, [pc, #148]	; (80012b8 <read_ADC+0x238>)
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	ee07 3a90 	vmov	s15, r3
 800122a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800122e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001236:	ee17 0a90 	vmov	r0, s15
 800123a:	f7ff f985 	bl	8000548 <__aeabi_f2d>
 800123e:	a318      	add	r3, pc, #96	; (adr r3, 80012a0 <read_ADC+0x220>)
 8001240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001244:	f7ff f820 	bl	8000288 <__aeabi_dsub>
 8001248:	4603      	mov	r3, r0
 800124a:	460c      	mov	r4, r1
 800124c:	4618      	mov	r0, r3
 800124e:	4621      	mov	r1, r4
 8001250:	a315      	add	r3, pc, #84	; (adr r3, 80012a8 <read_ADC+0x228>)
 8001252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001256:	f7ff faf9 	bl	800084c <__aeabi_ddiv>
 800125a:	4603      	mov	r3, r0
 800125c:	460c      	mov	r4, r1
 800125e:	4618      	mov	r0, r3
 8001260:	4621      	mov	r1, r4
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <read_ADC+0x240>)
 8001268:	f7ff f810 	bl	800028c <__adddf3>
 800126c:	4603      	mov	r3, r0
 800126e:	460c      	mov	r4, r1
 8001270:	4619      	mov	r1, r3
 8001272:	4622      	mov	r2, r4
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f103 041c 	add.w	r4, r3, #28
 800127a:	4608      	mov	r0, r1
 800127c:	4611      	mov	r1, r2
 800127e:	f7ff fcb3 	bl	8000be8 <__aeabi_d2f>
 8001282:	4603      	mov	r3, r0
 8001284:	6023      	str	r3, [r4, #0]

}
 8001286:	bf00      	nop
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	bd90      	pop	{r4, r7, pc}
 800128e:	bf00      	nop
 8001290:	66666666 	.word	0x66666666
 8001294:	3ffa6666 	.word	0x3ffa6666
 8001298:	4189374c 	.word	0x4189374c
 800129c:	3fb0e560 	.word	0x3fb0e560
 80012a0:	851eb852 	.word	0x851eb852
 80012a4:	3fe851eb 	.word	0x3fe851eb
 80012a8:	47ae147b 	.word	0x47ae147b
 80012ac:	3f647ae1 	.word	0x3f647ae1
 80012b0:	3a533333 	.word	0x3a533333
 80012b4:	409b26ca 	.word	0x409b26ca
 80012b8:	20000878 	.word	0x20000878
 80012bc:	408f4000 	.word	0x408f4000
 80012c0:	40390000 	.word	0x40390000

080012c4 <bufclear>:
	return i;
}


void bufclear (char * buffer)  // clear buffer
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	for (int i=0; i<BUFLEN; i++)
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	e007      	b.n	80012e2 <bufclear+0x1e>
	{
		buffer[i] = '\0';
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	4413      	add	r3, r2
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<BUFLEN; i++)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	3301      	adds	r3, #1
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012e8:	dbf3      	blt.n	80012d2 <bufclear+0xe>
	}
}
 80012ea:	bf00      	nop
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <init_sd>:
		}
	return 0;
}


uint8_t init_sd(uint16_t * file_count, uint16_t * log_count){
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	b09d      	sub	sp, #116	; 0x74
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
	uint32_t total, free_space;
#if DEBUG_PRINT == 1
	printf("mounting SD card...\n");
#endif

	FRESULT ret = f_mount(&fs, SDPath, 1);
 8001302:	2201      	movs	r2, #1
 8001304:	4955      	ldr	r1, [pc, #340]	; (800145c <init_sd+0x164>)
 8001306:	4856      	ldr	r0, [pc, #344]	; (8001460 <init_sd+0x168>)
 8001308:	f00e f850 	bl	800f3ac <f_mount>
 800130c:	4603      	mov	r3, r0
 800130e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	if (ret == FR_OK)
 8001312:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <init_sd+0x26>
	} else {
#if DEBUG_PRINT == 1
	  printf("no SD connection established\n");
	  printf("error: %d\n",ret);
#endif
	  return 0;
 800131a:	2300      	movs	r3, #0
 800131c:	e09a      	b.n	8001454 <init_sd+0x15c>
	}

	/* Check free space */
	f_getfree(SDPath, &fre_clust, &pfs);
 800131e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001322:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001326:	4619      	mov	r1, r3
 8001328:	484c      	ldr	r0, [pc, #304]	; (800145c <init_sd+0x164>)
 800132a:	f00e ff61 	bl	80101f0 <f_getfree>

	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 800132e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	3b02      	subs	r3, #2
 8001334:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001336:	8952      	ldrh	r2, [r2, #10]
 8001338:	fb02 f303 	mul.w	r3, r2, r3
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff f8e1 	bl	8000504 <__aeabi_ui2d>
 8001342:	f04f 0200 	mov.w	r2, #0
 8001346:	4b47      	ldr	r3, [pc, #284]	; (8001464 <init_sd+0x16c>)
 8001348:	f7ff f956 	bl	80005f8 <__aeabi_dmul>
 800134c:	4603      	mov	r3, r0
 800134e:	460c      	mov	r4, r1
 8001350:	4618      	mov	r0, r3
 8001352:	4621      	mov	r1, r4
 8001354:	f7ff fc28 	bl	8000ba8 <__aeabi_d2uiz>
 8001358:	4603      	mov	r3, r0
 800135a:	667b      	str	r3, [r7, #100]	; 0x64
#if DEBUG_PRINT == 1
	printf("SD CARD Total Size: \t%lu\n",total);
#endif
	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 800135c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800135e:	895b      	ldrh	r3, [r3, #10]
 8001360:	461a      	mov	r2, r3
 8001362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001364:	fb03 f302 	mul.w	r3, r3, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f8cb 	bl	8000504 <__aeabi_ui2d>
 800136e:	f04f 0200 	mov.w	r2, #0
 8001372:	4b3c      	ldr	r3, [pc, #240]	; (8001464 <init_sd+0x16c>)
 8001374:	f7ff f940 	bl	80005f8 <__aeabi_dmul>
 8001378:	4603      	mov	r3, r0
 800137a:	460c      	mov	r4, r1
 800137c:	4618      	mov	r0, r3
 800137e:	4621      	mov	r1, r4
 8001380:	f7ff fc12 	bl	8000ba8 <__aeabi_d2uiz>
 8001384:	4603      	mov	r3, r0
 8001386:	663b      	str	r3, [r7, #96]	; 0x60

	DIR dirs;
	char *fn;
	FILINFO Finfo;

	uint16_t cnt1 = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	uint16_t cnt2 = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

	if ((fresult = f_opendir(&dirs, SDPath)) == FR_OK)
 8001394:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001398:	4930      	ldr	r1, [pc, #192]	; (800145c <init_sd+0x164>)
 800139a:	4618      	mov	r0, r3
 800139c:	f00e fe78 	bl	8010090 <f_opendir>
 80013a0:	4603      	mov	r3, r0
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b30      	ldr	r3, [pc, #192]	; (8001468 <init_sd+0x170>)
 80013a6:	701a      	strb	r2, [r3, #0]
 80013a8:	4b2f      	ldr	r3, [pc, #188]	; (8001468 <init_sd+0x170>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d148      	bne.n	8001442 <init_sd+0x14a>
	{
			while (((fresult = f_readdir(&dirs, &Finfo)) == FR_OK) && Finfo.fname[0])
 80013b0:	e034      	b.n	800141c <init_sd+0x124>
			{
				fn = Finfo.fname;
 80013b2:	f107 030c 	add.w	r3, r7, #12
 80013b6:	3309      	adds	r3, #9
 80013b8:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (_FS_RPATH && fn[0] == '.') continue;

				if ((fn[0] == 'F') & (fn[1] == 'L'))
 80013ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b46      	cmp	r3, #70	; 0x46
 80013c0:	bf0c      	ite	eq
 80013c2:	2301      	moveq	r3, #1
 80013c4:	2300      	movne	r3, #0
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013ca:	3301      	adds	r3, #1
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b4c      	cmp	r3, #76	; 0x4c
 80013d0:	bf0c      	ite	eq
 80013d2:	2301      	moveq	r3, #1
 80013d4:	2300      	movne	r3, #0
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	4013      	ands	r3, r2
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d005      	beq.n	80013ec <init_sd+0xf4>
				{
#if DEBUG_PRINT == 1
					printf("found flight log: %s \n",fn);
#endif
					cnt1 ++;
 80013e0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80013e4:	3301      	adds	r3, #1
 80013e6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 80013ea:	e017      	b.n	800141c <init_sd+0x124>
				} else if ((fn[0] == 'L') & (fn[1] == 'O'))
 80013ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b4c      	cmp	r3, #76	; 0x4c
 80013f2:	bf0c      	ite	eq
 80013f4:	2301      	moveq	r3, #1
 80013f6:	2300      	movne	r3, #0
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013fc:	3301      	adds	r3, #1
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b4f      	cmp	r3, #79	; 0x4f
 8001402:	bf0c      	ite	eq
 8001404:	2301      	moveq	r3, #1
 8001406:	2300      	movne	r3, #0
 8001408:	b2db      	uxtb	r3, r3
 800140a:	4013      	ands	r3, r2
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b00      	cmp	r3, #0
 8001410:	d004      	beq.n	800141c <init_sd+0x124>
				{
#if DEBUG_PRINT == 1
					printf("found log file: %s \n",fn);
#endif
					cnt2 ++;
 8001412:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001416:	3301      	adds	r3, #1
 8001418:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
			while (((fresult = f_readdir(&dirs, &Finfo)) == FR_OK) && Finfo.fname[0])
 800141c:	f107 020c 	add.w	r2, r7, #12
 8001420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001424:	4611      	mov	r1, r2
 8001426:	4618      	mov	r0, r3
 8001428:	f00e fea5 	bl	8010176 <f_readdir>
 800142c:	4603      	mov	r3, r0
 800142e:	461a      	mov	r2, r3
 8001430:	4b0d      	ldr	r3, [pc, #52]	; (8001468 <init_sd+0x170>)
 8001432:	701a      	strb	r2, [r3, #0]
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <init_sd+0x170>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d102      	bne.n	8001442 <init_sd+0x14a>
 800143c:	7d7b      	ldrb	r3, [r7, #21]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1b7      	bne.n	80013b2 <init_sd+0xba>
				}

			}
	}
	*file_count = cnt1;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001448:	801a      	strh	r2, [r3, #0]
	*log_count = cnt2;
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8001450:	801a      	strh	r2, [r3, #0]
#if DEBUG_PRINT == 1
	printf("\n this is the %hu th flight. \n", *file_count);
	printf("\n this is the %hu th log file. \n", *log_count);
#endif
	return 1;
 8001452:	2301      	movs	r3, #1
}
 8001454:	4618      	mov	r0, r3
 8001456:	3774      	adds	r7, #116	; 0x74
 8001458:	46bd      	mov	sp, r7
 800145a:	bd90      	pop	{r4, r7, pc}
 800145c:	20015cbc 	.word	0x20015cbc
 8001460:	20000898 	.word	0x20000898
 8001464:	3fe00000 	.word	0x3fe00000
 8001468:	20003934 	.word	0x20003934

0800146c <init_file>:

uint8_t init_file(char * FILE_NAME, char * LOG_NAME){
 800146c:	b580      	push	{r7, lr}
 800146e:	b0ee      	sub	sp, #440	; 0x1b8
 8001470:	af00      	add	r7, sp, #0
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	6018      	str	r0, [r3, #0]
 8001476:	463b      	mov	r3, r7
 8001478:	6019      	str	r1, [r3, #0]


	/**************** The following operation is using f_write and f_read **************************/

	/* Create second file with read write access and open it */
	fresult = f_open(&data_file, FILE_NAME, FA_CREATE_ALWAYS | FA_WRITE );
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	220a      	movs	r2, #10
 800147e:	6819      	ldr	r1, [r3, #0]
 8001480:	483c      	ldr	r0, [pc, #240]	; (8001574 <init_file+0x108>)
 8001482:	f00d ffd9 	bl	800f438 <f_open>
 8001486:	4603      	mov	r3, r0
 8001488:	461a      	mov	r2, r3
 800148a:	4b3b      	ldr	r3, [pc, #236]	; (8001578 <init_file+0x10c>)
 800148c:	701a      	strb	r2, [r3, #0]

	if (fresult != FR_OK){
 800148e:	4b3a      	ldr	r3, [pc, #232]	; (8001578 <init_file+0x10c>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <init_file+0x2e>
#if DEBUG_PRINT == 1
		printf("trying to open datalog file, error-code: %d \n",fresult);
#endif
		return 0;
 8001496:	2300      	movs	r3, #0
 8001498:	e067      	b.n	800156a <init_file+0xfe>
	}
	/* Writing text */
	//char myData[] = "xyx,ghj,acceleration,target position\n 1000,231.25,10,500.5";
	char myData[] = "Time,Armed,Event,State,MachTimer,FailSafeTimer,FailSafeMainTimer,h,v,H_SHT,T_SHT,T_CPU,T_BARO1,T_BARO2,T_IMU1,T_IMU2,P_BARO1,P_BARO2,Ax_IMU1,Ay_IMU1,Az_IMU1,Gx_IMU1,Gy_IMU1,Gz_IMU1,Ax_IMU2,Ay_IMU2,Az_IMU2,Gx_IMU2,Gy_IMU2,Gz_IMU2,Ax_H3L,Ay_H3L,Az_H3L,I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2\n";
 800149a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800149e:	4a37      	ldr	r2, [pc, #220]	; (800157c <init_file+0x110>)
 80014a0:	4618      	mov	r0, r3
 80014a2:	4611      	mov	r1, r2
 80014a4:	f240 1329 	movw	r3, #297	; 0x129
 80014a8:	461a      	mov	r2, r3
 80014aa:	f00f f879 	bl	80105a0 <memcpy>

	fresult = f_write(&data_file, myData, sizeof(myData), &bw);
 80014ae:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80014b2:	4b33      	ldr	r3, [pc, #204]	; (8001580 <init_file+0x114>)
 80014b4:	f240 1229 	movw	r2, #297	; 0x129
 80014b8:	482e      	ldr	r0, [pc, #184]	; (8001574 <init_file+0x108>)
 80014ba:	f00e f989 	bl	800f7d0 <f_write>
 80014be:	4603      	mov	r3, r0
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b2d      	ldr	r3, [pc, #180]	; (8001578 <init_file+0x10c>)
 80014c4:	701a      	strb	r2, [r3, #0]
	/* Close file */
	f_close(&data_file);
 80014c6:	482b      	ldr	r0, [pc, #172]	; (8001574 <init_file+0x108>)
 80014c8:	f00e fb94 	bl	800fbf4 <f_close>

	if (fresult != FR_OK){
 80014cc:	4b2a      	ldr	r3, [pc, #168]	; (8001578 <init_file+0x10c>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <init_file+0x6c>
#if DEBUG_PRINT == 1
		printf ("FLIGHT FILE not created, error-code: %d \n",fresult);
#endif
		return 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	e048      	b.n	800156a <init_file+0xfe>
	}
	//bufclear();

	HAL_Delay(100);
 80014d8:	2064      	movs	r0, #100	; 0x64
 80014da:	f006 f84f 	bl	800757c <HAL_Delay>

	/* Open file to write/ create a file if it doesn't exist */
	fresult = f_open(&log_file, LOG_NAME, FA_CREATE_NEW | FA_WRITE );
 80014de:	463b      	mov	r3, r7
 80014e0:	2206      	movs	r2, #6
 80014e2:	6819      	ldr	r1, [r3, #0]
 80014e4:	4827      	ldr	r0, [pc, #156]	; (8001584 <init_file+0x118>)
 80014e6:	f00d ffa7 	bl	800f438 <f_open>
 80014ea:	4603      	mov	r3, r0
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b22      	ldr	r3, [pc, #136]	; (8001578 <init_file+0x10c>)
 80014f0:	701a      	strb	r2, [r3, #0]

	if (fresult != FR_OK){
 80014f2:	4b21      	ldr	r3, [pc, #132]	; (8001578 <init_file+0x10c>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <init_file+0x92>

#if DEBUG_PRINT == 1
		printf("trying to open setuplog file, error-code: %d \n",fresult);
#endif
		return 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	e035      	b.n	800156a <init_file+0xfe>

	/* Writing text */

	//sprintf(buffer,"time: %ld,SHT STATE: %d\n ,BARO1 STATE: %d\n ,BARO2 STATE: %d \n ,IMU1 STATE %d\n ,IMU2 STATE %d\n, H3L STATE %d\n",HAL_GetTick(), SHT_STATE,BARO1_STATE,BARO2_STATE,IMU1_STATE,IMU2_STATE,H3L_STATE);

	bw = 0;
 80014fe:	4b20      	ldr	r3, [pc, #128]	; (8001580 <init_file+0x114>)
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
	char myLog[128];

	for (int i=0; i<128; i++)
 8001504:	2300      	movs	r3, #0
 8001506:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 800150a:	e00b      	b.n	8001524 <init_file+0xb8>
	{
		myLog[i] = '\0';
 800150c:	f107 0208 	add.w	r2, r7, #8
 8001510:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001514:	4413      	add	r3, r2
 8001516:	2200      	movs	r2, #0
 8001518:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<128; i++)
 800151a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800151e:	3301      	adds	r3, #1
 8001520:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8001524:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001528:	2b7f      	cmp	r3, #127	; 0x7f
 800152a:	ddef      	ble.n	800150c <init_file+0xa0>
	}

	sprintf(myLog, "TIMESTAMP, STATE, MSG \n %ld, SD WRITE OK, file name: %s \n", HAL_GetTick(), FILE_NAME);
 800152c:	f006 f81a 	bl	8007564 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	f107 0008 	add.w	r0, r7, #8
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4913      	ldr	r1, [pc, #76]	; (8001588 <init_file+0x11c>)
 800153c:	f00f fd1c 	bl	8010f78 <siprintf>
	fresult = f_write(&log_file, myLog, sizeof(myLog), &bw);
 8001540:	f107 0108 	add.w	r1, r7, #8
 8001544:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <init_file+0x114>)
 8001546:	2280      	movs	r2, #128	; 0x80
 8001548:	480e      	ldr	r0, [pc, #56]	; (8001584 <init_file+0x118>)
 800154a:	f00e f941 	bl	800f7d0 <f_write>
 800154e:	4603      	mov	r3, r0
 8001550:	461a      	mov	r2, r3
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <init_file+0x10c>)
 8001554:	701a      	strb	r2, [r3, #0]

	if (fresult != FR_OK){
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <init_file+0x10c>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <init_file+0xf6>
#if DEBUG_PRINT == 1
		printf ("LOG FILE not created, error-code: %d \n",fresult);
#endif
		return 0;
 800155e:	2300      	movs	r3, #0
 8001560:	e003      	b.n	800156a <init_file+0xfe>
	}

	/* Close file */
	f_close(&log_file);
 8001562:	4808      	ldr	r0, [pc, #32]	; (8001584 <init_file+0x118>)
 8001564:	f00e fb46 	bl	800fbf4 <f_close>

	// clearing buffer to show that result obtained is from the file
	//bufclear();

	return 1;
 8001568:	2301      	movs	r3, #1

}
 800156a:	4618      	mov	r0, r3
 800156c:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	200018cc 	.word	0x200018cc
 8001578:	20003934 	.word	0x20003934
 800157c:	08014c94 	.word	0x08014c94
 8001580:	20003930 	.word	0x20003930
 8001584:	20003938 	.word	0x20003938
 8001588:	08014c58 	.word	0x08014c58

0800158c <write_to_SD>:


}


void write_to_SD(char * FILE_NAME, char * buffer){
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
	char FILE_NAME[11];
	sprintf(FILE_NAME,"FL%05d.CSV",file_count);
	*/

	// Open the file with write access
	fresult = f_open(&data_file, FILE_NAME, FA_OPEN_ALWAYS | FA_WRITE);
 8001596:	2212      	movs	r2, #18
 8001598:	6879      	ldr	r1, [r7, #4]
 800159a:	481b      	ldr	r0, [pc, #108]	; (8001608 <write_to_SD+0x7c>)
 800159c:	f00d ff4c 	bl	800f438 <f_open>
 80015a0:	4603      	mov	r3, r0
 80015a2:	461a      	mov	r2, r3
 80015a4:	4b19      	ldr	r3, [pc, #100]	; (800160c <write_to_SD+0x80>)
 80015a6:	701a      	strb	r2, [r3, #0]



	if (fresult == FR_OK)
 80015a8:	4b18      	ldr	r3, [pc, #96]	; (800160c <write_to_SD+0x80>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d00f      	beq.n	80015d0 <write_to_SD+0x44>
#if DEBUG_PRINT == 1
		printf("error opening file for writing\n");
		printf("error: %d\n",fresult);
#endif

		fresult = f_mount(NULL, SDPath, 1);
 80015b0:	2201      	movs	r2, #1
 80015b2:	4917      	ldr	r1, [pc, #92]	; (8001610 <write_to_SD+0x84>)
 80015b4:	2000      	movs	r0, #0
 80015b6:	f00d fef9 	bl	800f3ac <f_mount>
 80015ba:	4603      	mov	r3, r0
 80015bc:	461a      	mov	r2, r3
 80015be:	4b13      	ldr	r3, [pc, #76]	; (800160c <write_to_SD+0x80>)
 80015c0:	701a      	strb	r2, [r3, #0]
#if DEBUG_PRINT == 1
		if (fresult == FR_OK) printf ("SD CARD UNMOUNTED successfully...\n");
#endif
		FRESULT ret = f_mount(&fs, SDPath, 1);
 80015c2:	2201      	movs	r2, #1
 80015c4:	4912      	ldr	r1, [pc, #72]	; (8001610 <write_to_SD+0x84>)
 80015c6:	4813      	ldr	r0, [pc, #76]	; (8001614 <write_to_SD+0x88>)
 80015c8:	f00d fef0 	bl	800f3ac <f_mount>
 80015cc:	4603      	mov	r3, r0
 80015ce:	73fb      	strb	r3, [r7, #15]
#endif
		}
	}

	// Move to offset to the end of the file
	fresult = f_lseek((&data_file),f_size(&data_file));
 80015d0:	4b0d      	ldr	r3, [pc, #52]	; (8001608 <write_to_SD+0x7c>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	4619      	mov	r1, r3
 80015d6:	480c      	ldr	r0, [pc, #48]	; (8001608 <write_to_SD+0x7c>)
 80015d8:	f00e fb36 	bl	800fc48 <f_lseek>
 80015dc:	4603      	mov	r3, r0
 80015de:	461a      	mov	r2, r3
 80015e0:	4b0a      	ldr	r3, [pc, #40]	; (800160c <write_to_SD+0x80>)
 80015e2:	701a      	strb	r2, [r3, #0]

	// write the string to the file
	fresult = f_puts(buffer, &data_file);
 80015e4:	4908      	ldr	r1, [pc, #32]	; (8001608 <write_to_SD+0x7c>)
 80015e6:	6838      	ldr	r0, [r7, #0]
 80015e8:	f00e ff2f 	bl	801044a <f_puts>
 80015ec:	4603      	mov	r3, r0
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <write_to_SD+0x80>)
 80015f2:	701a      	strb	r2, [r3, #0]

	// Close file
	f_close(&data_file);
 80015f4:	4804      	ldr	r0, [pc, #16]	; (8001608 <write_to_SD+0x7c>)
 80015f6:	f00e fafd 	bl	800fbf4 <f_close>

	bufclear(buffer);
 80015fa:	6838      	ldr	r0, [r7, #0]
 80015fc:	f7ff fe62 	bl	80012c4 <bufclear>

}
 8001600:	bf00      	nop
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	200018cc 	.word	0x200018cc
 800160c:	20003934 	.word	0x20003934
 8001610:	20015cbc 	.word	0x20015cbc
 8001614:	20000898 	.word	0x20000898

08001618 <log_to_SD>:

void log_to_SD(char * FILE_NAME, char * buffer){
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
	char FILE_NAME[11];
	sprintf(FILE_NAME,"FL%05d.CSV",file_count);
	*/

	// Open the file with write access
	fresult = f_open(&log_file, FILE_NAME, FA_OPEN_ALWAYS | FA_WRITE);
 8001622:	2212      	movs	r2, #18
 8001624:	6879      	ldr	r1, [r7, #4]
 8001626:	481b      	ldr	r0, [pc, #108]	; (8001694 <log_to_SD+0x7c>)
 8001628:	f00d ff06 	bl	800f438 <f_open>
 800162c:	4603      	mov	r3, r0
 800162e:	461a      	mov	r2, r3
 8001630:	4b19      	ldr	r3, [pc, #100]	; (8001698 <log_to_SD+0x80>)
 8001632:	701a      	strb	r2, [r3, #0]



	if (fresult == FR_OK)
 8001634:	4b18      	ldr	r3, [pc, #96]	; (8001698 <log_to_SD+0x80>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00f      	beq.n	800165c <log_to_SD+0x44>
#if DEBUG_PRINT == 1
		printf("error opening log file for writing\n");
		printf("error: %d\n",fresult);
#endif

		fresult = f_mount(NULL, SDPath, 1);
 800163c:	2201      	movs	r2, #1
 800163e:	4917      	ldr	r1, [pc, #92]	; (800169c <log_to_SD+0x84>)
 8001640:	2000      	movs	r0, #0
 8001642:	f00d feb3 	bl	800f3ac <f_mount>
 8001646:	4603      	mov	r3, r0
 8001648:	461a      	mov	r2, r3
 800164a:	4b13      	ldr	r3, [pc, #76]	; (8001698 <log_to_SD+0x80>)
 800164c:	701a      	strb	r2, [r3, #0]
#if DEBUG_PRINT == 1
		if (fresult == FR_OK) printf ("SD CARD UNMOUNTED successfully...\n");
#endif
		FRESULT ret = f_mount(&fs, SDPath, 1);
 800164e:	2201      	movs	r2, #1
 8001650:	4912      	ldr	r1, [pc, #72]	; (800169c <log_to_SD+0x84>)
 8001652:	4813      	ldr	r0, [pc, #76]	; (80016a0 <log_to_SD+0x88>)
 8001654:	f00d feaa 	bl	800f3ac <f_mount>
 8001658:	4603      	mov	r3, r0
 800165a:	73fb      	strb	r3, [r7, #15]
#endif
		}
	}

	// Move to offset to the end of the file
	fresult = f_lseek((&log_file),f_size(&log_file));
 800165c:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <log_to_SD+0x7c>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	4619      	mov	r1, r3
 8001662:	480c      	ldr	r0, [pc, #48]	; (8001694 <log_to_SD+0x7c>)
 8001664:	f00e faf0 	bl	800fc48 <f_lseek>
 8001668:	4603      	mov	r3, r0
 800166a:	461a      	mov	r2, r3
 800166c:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <log_to_SD+0x80>)
 800166e:	701a      	strb	r2, [r3, #0]

	// write the string to the file
	fresult = f_puts(buffer, &log_file);
 8001670:	4908      	ldr	r1, [pc, #32]	; (8001694 <log_to_SD+0x7c>)
 8001672:	6838      	ldr	r0, [r7, #0]
 8001674:	f00e fee9 	bl	801044a <f_puts>
 8001678:	4603      	mov	r3, r0
 800167a:	b2da      	uxtb	r2, r3
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <log_to_SD+0x80>)
 800167e:	701a      	strb	r2, [r3, #0]

	// Close file
	f_close(&log_file);
 8001680:	4804      	ldr	r0, [pc, #16]	; (8001694 <log_to_SD+0x7c>)
 8001682:	f00e fab7 	bl	800fbf4 <f_close>

	bufclear(buffer);
 8001686:	6838      	ldr	r0, [r7, #0]
 8001688:	f7ff fe1c 	bl	80012c4 <bufclear>

}
 800168c:	bf00      	nop
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20003938 	.word	0x20003938
 8001698:	20003934 	.word	0x20003934
 800169c:	20015cbc 	.word	0x20015cbc
 80016a0:	20000898 	.word	0x20000898

080016a4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80016aa:	463b      	mov	r3, r7
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016b6:	4b52      	ldr	r3, [pc, #328]	; (8001800 <MX_ADC1_Init+0x15c>)
 80016b8:	4a52      	ldr	r2, [pc, #328]	; (8001804 <MX_ADC1_Init+0x160>)
 80016ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016bc:	4b50      	ldr	r3, [pc, #320]	; (8001800 <MX_ADC1_Init+0x15c>)
 80016be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016c4:	4b4e      	ldr	r3, [pc, #312]	; (8001800 <MX_ADC1_Init+0x15c>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80016ca:	4b4d      	ldr	r3, [pc, #308]	; (8001800 <MX_ADC1_Init+0x15c>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80016d0:	4b4b      	ldr	r3, [pc, #300]	; (8001800 <MX_ADC1_Init+0x15c>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016d6:	4b4a      	ldr	r3, [pc, #296]	; (8001800 <MX_ADC1_Init+0x15c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016de:	4b48      	ldr	r3, [pc, #288]	; (8001800 <MX_ADC1_Init+0x15c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016e4:	4b46      	ldr	r3, [pc, #280]	; (8001800 <MX_ADC1_Init+0x15c>)
 80016e6:	4a48      	ldr	r2, [pc, #288]	; (8001808 <MX_ADC1_Init+0x164>)
 80016e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016ea:	4b45      	ldr	r3, [pc, #276]	; (8001800 <MX_ADC1_Init+0x15c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 80016f0:	4b43      	ldr	r3, [pc, #268]	; (8001800 <MX_ADC1_Init+0x15c>)
 80016f2:	2208      	movs	r2, #8
 80016f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80016f6:	4b42      	ldr	r3, [pc, #264]	; (8001800 <MX_ADC1_Init+0x15c>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016fe:	4b40      	ldr	r3, [pc, #256]	; (8001800 <MX_ADC1_Init+0x15c>)
 8001700:	2201      	movs	r2, #1
 8001702:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001704:	483e      	ldr	r0, [pc, #248]	; (8001800 <MX_ADC1_Init+0x15c>)
 8001706:	f005 ff5b 	bl	80075c0 <HAL_ADC_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001710:	f000 fcaa 	bl	8002068 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001714:	2300      	movs	r3, #0
 8001716:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001718:	2301      	movs	r3, #1
 800171a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800171c:	2307      	movs	r3, #7
 800171e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001720:	463b      	mov	r3, r7
 8001722:	4619      	mov	r1, r3
 8001724:	4836      	ldr	r0, [pc, #216]	; (8001800 <MX_ADC1_Init+0x15c>)
 8001726:	f006 f8e9 	bl	80078fc <HAL_ADC_ConfigChannel>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001730:	f000 fc9a 	bl	8002068 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001734:	2301      	movs	r3, #1
 8001736:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001738:	2302      	movs	r3, #2
 800173a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800173c:	463b      	mov	r3, r7
 800173e:	4619      	mov	r1, r3
 8001740:	482f      	ldr	r0, [pc, #188]	; (8001800 <MX_ADC1_Init+0x15c>)
 8001742:	f006 f8db 	bl	80078fc <HAL_ADC_ConfigChannel>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800174c:	f000 fc8c 	bl	8002068 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001750:	2302      	movs	r3, #2
 8001752:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001754:	2303      	movs	r3, #3
 8001756:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001758:	463b      	mov	r3, r7
 800175a:	4619      	mov	r1, r3
 800175c:	4828      	ldr	r0, [pc, #160]	; (8001800 <MX_ADC1_Init+0x15c>)
 800175e:	f006 f8cd 	bl	80078fc <HAL_ADC_ConfigChannel>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001768:	f000 fc7e 	bl	8002068 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800176c:	230a      	movs	r3, #10
 800176e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001770:	2304      	movs	r3, #4
 8001772:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001774:	463b      	mov	r3, r7
 8001776:	4619      	mov	r1, r3
 8001778:	4821      	ldr	r0, [pc, #132]	; (8001800 <MX_ADC1_Init+0x15c>)
 800177a:	f006 f8bf 	bl	80078fc <HAL_ADC_ConfigChannel>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001784:	f000 fc70 	bl	8002068 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001788:	230b      	movs	r3, #11
 800178a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800178c:	2305      	movs	r3, #5
 800178e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001790:	463b      	mov	r3, r7
 8001792:	4619      	mov	r1, r3
 8001794:	481a      	ldr	r0, [pc, #104]	; (8001800 <MX_ADC1_Init+0x15c>)
 8001796:	f006 f8b1 	bl	80078fc <HAL_ADC_ConfigChannel>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80017a0:	f000 fc62 	bl	8002068 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80017a4:	230c      	movs	r3, #12
 80017a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80017a8:	2306      	movs	r3, #6
 80017aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017ac:	463b      	mov	r3, r7
 80017ae:	4619      	mov	r1, r3
 80017b0:	4813      	ldr	r0, [pc, #76]	; (8001800 <MX_ADC1_Init+0x15c>)
 80017b2:	f006 f8a3 	bl	80078fc <HAL_ADC_ConfigChannel>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80017bc:	f000 fc54 	bl	8002068 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80017c0:	230d      	movs	r3, #13
 80017c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80017c4:	2307      	movs	r3, #7
 80017c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017c8:	463b      	mov	r3, r7
 80017ca:	4619      	mov	r1, r3
 80017cc:	480c      	ldr	r0, [pc, #48]	; (8001800 <MX_ADC1_Init+0x15c>)
 80017ce:	f006 f895 	bl	80078fc <HAL_ADC_ConfigChannel>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80017d8:	f000 fc46 	bl	8002068 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80017dc:	2310      	movs	r3, #16
 80017de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80017e0:	2308      	movs	r3, #8
 80017e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017e4:	463b      	mov	r3, r7
 80017e6:	4619      	mov	r1, r3
 80017e8:	4805      	ldr	r0, [pc, #20]	; (8001800 <MX_ADC1_Init+0x15c>)
 80017ea:	f006 f887 	bl	80078fc <HAL_ADC_ConfigChannel>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80017f4:	f000 fc38 	bl	8002068 <Error_Handler>
  }

}
 80017f8:	bf00      	nop
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20004968 	.word	0x20004968
 8001804:	40012000 	.word	0x40012000
 8001808:	0f000001 	.word	0x0f000001

0800180c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08a      	sub	sp, #40	; 0x28
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a3c      	ldr	r2, [pc, #240]	; (800191c <HAL_ADC_MspInit+0x110>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d171      	bne.n	8001912 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	4b3b      	ldr	r3, [pc, #236]	; (8001920 <HAL_ADC_MspInit+0x114>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	4a3a      	ldr	r2, [pc, #232]	; (8001920 <HAL_ADC_MspInit+0x114>)
 8001838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800183c:	6453      	str	r3, [r2, #68]	; 0x44
 800183e:	4b38      	ldr	r3, [pc, #224]	; (8001920 <HAL_ADC_MspInit+0x114>)
 8001840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	4b34      	ldr	r3, [pc, #208]	; (8001920 <HAL_ADC_MspInit+0x114>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a33      	ldr	r2, [pc, #204]	; (8001920 <HAL_ADC_MspInit+0x114>)
 8001854:	f043 0304 	orr.w	r3, r3, #4
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b31      	ldr	r3, [pc, #196]	; (8001920 <HAL_ADC_MspInit+0x114>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0304 	and.w	r3, r3, #4
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	4b2d      	ldr	r3, [pc, #180]	; (8001920 <HAL_ADC_MspInit+0x114>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a2c      	ldr	r2, [pc, #176]	; (8001920 <HAL_ADC_MspInit+0x114>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b2a      	ldr	r3, [pc, #168]	; (8001920 <HAL_ADC_MspInit+0x114>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> ADC1_IN13
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001882:	230f      	movs	r3, #15
 8001884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001886:	2303      	movs	r3, #3
 8001888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800188e:	f107 0314 	add.w	r3, r7, #20
 8001892:	4619      	mov	r1, r3
 8001894:	4823      	ldr	r0, [pc, #140]	; (8001924 <HAL_ADC_MspInit+0x118>)
 8001896:	f006 ffef 	bl	8008878 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800189a:	2307      	movs	r3, #7
 800189c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800189e:	2303      	movs	r3, #3
 80018a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a6:	f107 0314 	add.w	r3, r7, #20
 80018aa:	4619      	mov	r1, r3
 80018ac:	481e      	ldr	r0, [pc, #120]	; (8001928 <HAL_ADC_MspInit+0x11c>)
 80018ae:	f006 ffe3 	bl	8008878 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80018b2:	4b1e      	ldr	r3, [pc, #120]	; (800192c <HAL_ADC_MspInit+0x120>)
 80018b4:	4a1e      	ldr	r2, [pc, #120]	; (8001930 <HAL_ADC_MspInit+0x124>)
 80018b6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80018b8:	4b1c      	ldr	r3, [pc, #112]	; (800192c <HAL_ADC_MspInit+0x120>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018be:	4b1b      	ldr	r3, [pc, #108]	; (800192c <HAL_ADC_MspInit+0x120>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018c4:	4b19      	ldr	r3, [pc, #100]	; (800192c <HAL_ADC_MspInit+0x120>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80018ca:	4b18      	ldr	r3, [pc, #96]	; (800192c <HAL_ADC_MspInit+0x120>)
 80018cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018d2:	4b16      	ldr	r3, [pc, #88]	; (800192c <HAL_ADC_MspInit+0x120>)
 80018d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018da:	4b14      	ldr	r3, [pc, #80]	; (800192c <HAL_ADC_MspInit+0x120>)
 80018dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80018e2:	4b12      	ldr	r3, [pc, #72]	; (800192c <HAL_ADC_MspInit+0x120>)
 80018e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018e8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <HAL_ADC_MspInit+0x120>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018f0:	4b0e      	ldr	r3, [pc, #56]	; (800192c <HAL_ADC_MspInit+0x120>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80018f6:	480d      	ldr	r0, [pc, #52]	; (800192c <HAL_ADC_MspInit+0x120>)
 80018f8:	f006 fbb2 	bl	8008060 <HAL_DMA_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001902:	f000 fbb1 	bl	8002068 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a08      	ldr	r2, [pc, #32]	; (800192c <HAL_ADC_MspInit+0x120>)
 800190a:	639a      	str	r2, [r3, #56]	; 0x38
 800190c:	4a07      	ldr	r2, [pc, #28]	; (800192c <HAL_ADC_MspInit+0x120>)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001912:	bf00      	nop
 8001914:	3728      	adds	r7, #40	; 0x28
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40012000 	.word	0x40012000
 8001920:	40023800 	.word	0x40023800
 8001924:	40020800 	.word	0x40020800
 8001928:	40020000 	.word	0x40020000
 800192c:	200049b0 	.word	0x200049b0
 8001930:	40026410 	.word	0x40026410

08001934 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 800193c:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <DWT_Delay_us+0x3c>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8001942:	f008 fe4b 	bl	800a5dc <HAL_RCC_GetHCLKFreq>
 8001946:	4602      	mov	r2, r0
 8001948:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <DWT_Delay_us+0x40>)
 800194a:	fba3 2302 	umull	r2, r3, r3, r2
 800194e:	0c9b      	lsrs	r3, r3, #18
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	fb02 f303 	mul.w	r3, r2, r3
 8001956:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8001958:	bf00      	nop
 800195a:	4b05      	ldr	r3, [pc, #20]	; (8001970 <DWT_Delay_us+0x3c>)
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	1ad2      	subs	r2, r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	429a      	cmp	r2, r3
 8001966:	d3f8      	bcc.n	800195a <DWT_Delay_us+0x26>
}
 8001968:	bf00      	nop
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	e0001000 	.word	0xe0001000
 8001974:	431bde83 	.word	0x431bde83

08001978 <play>:
float fourth = 512.0 / SF;
float half = 1024.0 / SF;


void play(float freq, float time)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001982:	edc7 0a00 	vstr	s1, [r7]
	float value = 0.0;
 8001986:	f04f 0300 	mov.w	r3, #0
 800198a:	60fb      	str	r3, [r7, #12]
	while(value < time){
 800198c:	e01b      	b.n	80019c6 <play+0x4e>
		HAL_GPIO_TogglePin(BUZ_GPIO_Port, BUZ_Pin);
 800198e:	2120      	movs	r1, #32
 8001990:	4816      	ldr	r0, [pc, #88]	; (80019ec <play+0x74>)
 8001992:	f007 f93c 	bl	8008c0e <HAL_GPIO_TogglePin>
		DWT_Delay_us (1000*1000/freq);
 8001996:	eddf 6a16 	vldr	s13, [pc, #88]	; 80019f0 <play+0x78>
 800199a:	ed97 7a01 	vldr	s14, [r7, #4]
 800199e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019a6:	ee17 0a90 	vmov	r0, s15
 80019aa:	f7ff ffc3 	bl	8001934 <DWT_Delay_us>
		value += 1000/freq;
 80019ae:	eddf 6a11 	vldr	s13, [pc, #68]	; 80019f4 <play+0x7c>
 80019b2:	ed97 7a01 	vldr	s14, [r7, #4]
 80019b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019ba:	ed97 7a03 	vldr	s14, [r7, #12]
 80019be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c2:	edc7 7a03 	vstr	s15, [r7, #12]
	while(value < time){
 80019c6:	ed97 7a03 	vldr	s14, [r7, #12]
 80019ca:	edd7 7a00 	vldr	s15, [r7]
 80019ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d6:	d4da      	bmi.n	800198e <play+0x16>
	}
	HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 80019d8:	2200      	movs	r2, #0
 80019da:	2120      	movs	r1, #32
 80019dc:	4803      	ldr	r0, [pc, #12]	; (80019ec <play+0x74>)
 80019de:	f007 f8fd 	bl	8008bdc <HAL_GPIO_WritePin>
};
 80019e2:	bf00      	nop
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40020800 	.word	0x40020800
 80019f0:	49742400 	.word	0x49742400
 80019f4:	447a0000 	.word	0x447a0000

080019f8 <play_OK_sound>:

void play_OK_sound(){
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
	play(800,500);
 80019fc:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8001a2c <play_OK_sound+0x34>
 8001a00:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8001a30 <play_OK_sound+0x38>
 8001a04:	f7ff ffb8 	bl	8001978 <play>
	play(1600,200);
 8001a08:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8001a34 <play_OK_sound+0x3c>
 8001a0c:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001a38 <play_OK_sound+0x40>
 8001a10:	f7ff ffb2 	bl	8001978 <play>
	HAL_Delay(50);
 8001a14:	2032      	movs	r0, #50	; 0x32
 8001a16:	f005 fdb1 	bl	800757c <HAL_Delay>
	play(1600,1000);
 8001a1a:	eddf 0a08 	vldr	s1, [pc, #32]	; 8001a3c <play_OK_sound+0x44>
 8001a1e:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8001a38 <play_OK_sound+0x40>
 8001a22:	f7ff ffa9 	bl	8001978 <play>
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	43fa0000 	.word	0x43fa0000
 8001a30:	44480000 	.word	0x44480000
 8001a34:	43480000 	.word	0x43480000
 8001a38:	44c80000 	.word	0x44c80000
 8001a3c:	447a0000 	.word	0x447a0000

08001a40 <play_FAIL_sound>:


void play_FAIL_sound(){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
	for (int i=0; i<20; i++){
 8001a46:	2300      	movs	r3, #0
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	e00e      	b.n	8001a6a <play_FAIL_sound+0x2a>
		play(400,20);
 8001a4c:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8001a50:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8001aa4 <play_FAIL_sound+0x64>
 8001a54:	f7ff ff90 	bl	8001978 <play>
		play(600,20);
 8001a58:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8001a5c:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8001aa8 <play_FAIL_sound+0x68>
 8001a60:	f7ff ff8a 	bl	8001978 <play>
	for (int i=0; i<20; i++){
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3301      	adds	r3, #1
 8001a68:	607b      	str	r3, [r7, #4]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b13      	cmp	r3, #19
 8001a6e:	dded      	ble.n	8001a4c <play_FAIL_sound+0xc>
	}
	for (int i=0; i<20; i++){
 8001a70:	2300      	movs	r3, #0
 8001a72:	603b      	str	r3, [r7, #0]
 8001a74:	e00e      	b.n	8001a94 <play_FAIL_sound+0x54>
		play(1600,20);
 8001a76:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8001a7a:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8001aac <play_FAIL_sound+0x6c>
 8001a7e:	f7ff ff7b 	bl	8001978 <play>
		play(1800,20);
 8001a82:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8001a86:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001ab0 <play_FAIL_sound+0x70>
 8001a8a:	f7ff ff75 	bl	8001978 <play>
	for (int i=0; i<20; i++){
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	3301      	adds	r3, #1
 8001a92:	603b      	str	r3, [r7, #0]
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	2b13      	cmp	r3, #19
 8001a98:	dded      	ble.n	8001a76 <play_FAIL_sound+0x36>
	}
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	43c80000 	.word	0x43c80000
 8001aa8:	44160000 	.word	0x44160000
 8001aac:	44c80000 	.word	0x44c80000
 8001ab0:	44e10000 	.word	0x44e10000

08001ab4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	607b      	str	r3, [r7, #4]
 8001abe:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <MX_DMA_Init+0x5c>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a13      	ldr	r2, [pc, #76]	; (8001b10 <MX_DMA_Init+0x5c>)
 8001ac4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <MX_DMA_Init+0x5c>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ad2:	607b      	str	r3, [r7, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2100      	movs	r1, #0
 8001ada:	2038      	movs	r0, #56	; 0x38
 8001adc:	f006 fa89 	bl	8007ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001ae0:	2038      	movs	r0, #56	; 0x38
 8001ae2:	f006 faa2 	bl	800802a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2100      	movs	r1, #0
 8001aea:	203b      	movs	r0, #59	; 0x3b
 8001aec:	f006 fa81 	bl	8007ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001af0:	203b      	movs	r0, #59	; 0x3b
 8001af2:	f006 fa9a 	bl	800802a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2100      	movs	r1, #0
 8001afa:	2045      	movs	r0, #69	; 0x45
 8001afc:	f006 fa79 	bl	8007ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001b00:	2045      	movs	r0, #69	; 0x45
 8001b02:	f006 fa92 	bl	800802a <HAL_NVIC_EnableIRQ>

}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800

08001b14 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001b18:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <DWT_Delay_Init+0x58>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	4a13      	ldr	r2, [pc, #76]	; (8001b6c <DWT_Delay_Init+0x58>)
 8001b1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b22:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001b24:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <DWT_Delay_Init+0x58>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	4a10      	ldr	r2, [pc, #64]	; (8001b6c <DWT_Delay_Init+0x58>)
 8001b2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b2e:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001b30:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <DWT_Delay_Init+0x5c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a0e      	ldr	r2, [pc, #56]	; (8001b70 <DWT_Delay_Init+0x5c>)
 8001b36:	f023 0301 	bic.w	r3, r3, #1
 8001b3a:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <DWT_Delay_Init+0x5c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a0b      	ldr	r2, [pc, #44]	; (8001b70 <DWT_Delay_Init+0x5c>)
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8001b48:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <DWT_Delay_Init+0x5c>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8001b4e:	bf00      	nop
     __ASM volatile ("NOP");
 8001b50:	bf00      	nop
  __ASM volatile ("NOP");
 8001b52:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <DWT_Delay_Init+0x5c>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	e000      	b.n	8001b62 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8001b60:	2301      	movs	r3, #1
  }
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000edf0 	.word	0xe000edf0
 8001b70:	e0001000 	.word	0xe0001000

08001b74 <start_timer>:
 *      Author: linus
 */

#include "fs_timer.h"

void start_timer(struct timer_t * t, uint32_t * tick){
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
	if (t->active == 0){
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	7a1b      	ldrb	r3, [r3, #8]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d109      	bne.n	8001b9a <start_timer+0x26>
		t->end = *tick + t->value;
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	441a      	add	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	605a      	str	r2, [r3, #4]
		t->active = 1;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	721a      	strb	r2, [r3, #8]
	}
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <check_timer>:

uint8_t check_timer(struct timer_t * t, uint32_t * tick){
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	6039      	str	r1, [r7, #0]
	if ((*tick > t->end) && (t->active == 1)) {
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d908      	bls.n	8001bce <check_timer+0x28>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	7a1b      	ldrb	r3, [r3, #8]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d104      	bne.n	8001bce <check_timer+0x28>
		t->active = 0;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	721a      	strb	r2, [r3, #8]
		return 1;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <check_timer+0x2a>
	}
	return 0;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08a      	sub	sp, #40	; 0x28
 8001be0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be2:	f107 0314 	add.w	r3, r7, #20
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	605a      	str	r2, [r3, #4]
 8001bec:	609a      	str	r2, [r3, #8]
 8001bee:	60da      	str	r2, [r3, #12]
 8001bf0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	4b64      	ldr	r3, [pc, #400]	; (8001d88 <MX_GPIO_Init+0x1ac>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a63      	ldr	r2, [pc, #396]	; (8001d88 <MX_GPIO_Init+0x1ac>)
 8001bfc:	f043 0310 	orr.w	r3, r3, #16
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b61      	ldr	r3, [pc, #388]	; (8001d88 <MX_GPIO_Init+0x1ac>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0310 	and.w	r3, r3, #16
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	4b5d      	ldr	r3, [pc, #372]	; (8001d88 <MX_GPIO_Init+0x1ac>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	4a5c      	ldr	r2, [pc, #368]	; (8001d88 <MX_GPIO_Init+0x1ac>)
 8001c18:	f043 0304 	orr.w	r3, r3, #4
 8001c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1e:	4b5a      	ldr	r3, [pc, #360]	; (8001d88 <MX_GPIO_Init+0x1ac>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	4b56      	ldr	r3, [pc, #344]	; (8001d88 <MX_GPIO_Init+0x1ac>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	4a55      	ldr	r2, [pc, #340]	; (8001d88 <MX_GPIO_Init+0x1ac>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3a:	4b53      	ldr	r3, [pc, #332]	; (8001d88 <MX_GPIO_Init+0x1ac>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	607b      	str	r3, [r7, #4]
 8001c4a:	4b4f      	ldr	r3, [pc, #316]	; (8001d88 <MX_GPIO_Init+0x1ac>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	4a4e      	ldr	r2, [pc, #312]	; (8001d88 <MX_GPIO_Init+0x1ac>)
 8001c50:	f043 0302 	orr.w	r3, r3, #2
 8001c54:	6313      	str	r3, [r2, #48]	; 0x30
 8001c56:	4b4c      	ldr	r3, [pc, #304]	; (8001d88 <MX_GPIO_Init+0x1ac>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	603b      	str	r3, [r7, #0]
 8001c66:	4b48      	ldr	r3, [pc, #288]	; (8001d88 <MX_GPIO_Init+0x1ac>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	4a47      	ldr	r2, [pc, #284]	; (8001d88 <MX_GPIO_Init+0x1ac>)
 8001c6c:	f043 0308 	orr.w	r3, r3, #8
 8001c70:	6313      	str	r3, [r2, #48]	; 0x30
 8001c72:	4b45      	ldr	r3, [pc, #276]	; (8001d88 <MX_GPIO_Init+0x1ac>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	f003 0308 	and.w	r3, r3, #8
 8001c7a:	603b      	str	r3, [r7, #0]
 8001c7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2110      	movs	r1, #16
 8001c82:	4842      	ldr	r0, [pc, #264]	; (8001d8c <MX_GPIO_Init+0x1b0>)
 8001c84:	f006 ffaa 	bl	8008bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	2120      	movs	r1, #32
 8001c8c:	4840      	ldr	r0, [pc, #256]	; (8001d90 <MX_GPIO_Init+0x1b4>)
 8001c8e:	f006 ffa5 	bl	8008bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_MEM_Pin|TD1_Pin|TD2_Pin|HAWK1_Pin
 8001c92:	2200      	movs	r2, #0
 8001c94:	f64f 7180 	movw	r1, #65408	; 0xff80
 8001c98:	483e      	ldr	r0, [pc, #248]	; (8001d94 <MX_GPIO_Init+0x1b8>)
 8001c9a:	f006 ff9f 	bl	8008bdc <HAL_GPIO_WritePin>
                          |HAWK2_Pin|RDY_Pin|STAT_Pin|SAVE_Pin
                          |PRGM_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|STAY_ALIVE_Pin, GPIO_PIN_RESET);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8001ca4:	483c      	ldr	r0, [pc, #240]	; (8001d98 <MX_GPIO_Init+0x1bc>)
 8001ca6:	f006 ff99 	bl	8008bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWR_DTCT_Pin;
 8001caa:	2308      	movs	r3, #8
 8001cac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PWR_DTCT_GPIO_Port, &GPIO_InitStruct);
 8001cb6:	f107 0314 	add.w	r3, r7, #20
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4835      	ldr	r0, [pc, #212]	; (8001d94 <MX_GPIO_Init+0x1b8>)
 8001cbe:	f006 fddb 	bl	8008878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_Pin;
 8001cc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	482e      	ldr	r0, [pc, #184]	; (8001d90 <MX_GPIO_Init+0x1b4>)
 8001cd8:	f006 fdce 	bl	8008878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001cdc:	2310      	movs	r3, #16
 8001cde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4826      	ldr	r0, [pc, #152]	; (8001d8c <MX_GPIO_Init+0x1b0>)
 8001cf4:	f006 fdc0 	bl	8008878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZ_Pin;
 8001cf8:	2320      	movs	r3, #32
 8001cfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d04:	2300      	movs	r3, #0
 8001d06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 8001d08:	f107 0314 	add.w	r3, r7, #20
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4820      	ldr	r0, [pc, #128]	; (8001d90 <MX_GPIO_Init+0x1b4>)
 8001d10:	f006 fdb2 	bl	8008878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = CS_MEM_Pin|TD1_Pin|TD2_Pin|HAWK1_Pin
 8001d14:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001d18:	617b      	str	r3, [r7, #20]
                          |HAWK2_Pin|RDY_Pin|STAT_Pin|SAVE_Pin
                          |PRGM_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d22:	2300      	movs	r3, #0
 8001d24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d26:	f107 0314 	add.w	r3, r7, #20
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4819      	ldr	r0, [pc, #100]	; (8001d94 <MX_GPIO_Init+0x1b8>)
 8001d2e:	f006 fda3 	bl	8008878 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin|STAY_ALIVE_Pin;
 8001d32:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001d36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d40:	2300      	movs	r3, #0
 8001d42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4813      	ldr	r0, [pc, #76]	; (8001d98 <MX_GPIO_Init+0x1bc>)
 8001d4c:	f006 fd94 	bl	8008878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_DTCT_Pin;
 8001d50:	2301      	movs	r3, #1
 8001d52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d54:	2300      	movs	r3, #0
 8001d56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DTCT_GPIO_Port, &GPIO_InitStruct);
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	4619      	mov	r1, r3
 8001d62:	480e      	ldr	r0, [pc, #56]	; (8001d9c <MX_GPIO_Init+0x1c0>)
 8001d64:	f006 fd88 	bl	8008878 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENSE_Pin;
 8001d68:	2310      	movs	r3, #16
 8001d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENSE_GPIO_Port, &GPIO_InitStruct);
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4807      	ldr	r0, [pc, #28]	; (8001d98 <MX_GPIO_Init+0x1bc>)
 8001d7c:	f006 fd7c 	bl	8008878 <HAL_GPIO_Init>

}
 8001d80:	bf00      	nop
 8001d82:	3728      	adds	r7, #40	; 0x28
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40020000 	.word	0x40020000
 8001d90:	40020800 	.word	0x40020800
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40020400 	.word	0x40020400
 8001d9c:	40020c00 	.word	0x40020c00

08001da0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001da4:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <MX_I2C1_Init+0x50>)
 8001da6:	4a13      	ldr	r2, [pc, #76]	; (8001df4 <MX_I2C1_Init+0x54>)
 8001da8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001daa:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <MX_I2C1_Init+0x50>)
 8001dac:	4a12      	ldr	r2, [pc, #72]	; (8001df8 <MX_I2C1_Init+0x58>)
 8001dae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001db0:	4b0f      	ldr	r3, [pc, #60]	; (8001df0 <MX_I2C1_Init+0x50>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001db6:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <MX_I2C1_Init+0x50>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <MX_I2C1_Init+0x50>)
 8001dbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dc2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dc4:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <MX_I2C1_Init+0x50>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001dca:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <MX_I2C1_Init+0x50>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dd0:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <MX_I2C1_Init+0x50>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dd6:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <MX_I2C1_Init+0x50>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ddc:	4804      	ldr	r0, [pc, #16]	; (8001df0 <MX_I2C1_Init+0x50>)
 8001dde:	f006 ff31 	bl	8008c44 <HAL_I2C_Init>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001de8:	f000 f93e 	bl	8002068 <Error_Handler>
  }

}
 8001dec:	bf00      	nop
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20004a10 	.word	0x20004a10
 8001df4:	40005400 	.word	0x40005400
 8001df8:	00061a80 	.word	0x00061a80

08001dfc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8001e00:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <MX_I2C2_Init+0x50>)
 8001e02:	4a13      	ldr	r2, [pc, #76]	; (8001e50 <MX_I2C2_Init+0x54>)
 8001e04:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001e06:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <MX_I2C2_Init+0x50>)
 8001e08:	4a12      	ldr	r2, [pc, #72]	; (8001e54 <MX_I2C2_Init+0x58>)
 8001e0a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <MX_I2C2_Init+0x50>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001e12:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <MX_I2C2_Init+0x50>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e18:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <MX_I2C2_Init+0x50>)
 8001e1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e1e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e20:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <MX_I2C2_Init+0x50>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001e26:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <MX_I2C2_Init+0x50>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e2c:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <MX_I2C2_Init+0x50>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <MX_I2C2_Init+0x50>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001e38:	4804      	ldr	r0, [pc, #16]	; (8001e4c <MX_I2C2_Init+0x50>)
 8001e3a:	f006 ff03 	bl	8008c44 <HAL_I2C_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001e44:	f000 f910 	bl	8002068 <Error_Handler>
  }

}
 8001e48:	bf00      	nop
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20004a64 	.word	0x20004a64
 8001e50:	40005800 	.word	0x40005800
 8001e54:	000186a0 	.word	0x000186a0

08001e58 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08c      	sub	sp, #48	; 0x30
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e60:	f107 031c 	add.w	r3, r7, #28
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
 8001e6e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a32      	ldr	r2, [pc, #200]	; (8001f40 <HAL_I2C_MspInit+0xe8>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d12c      	bne.n	8001ed4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61bb      	str	r3, [r7, #24]
 8001e7e:	4b31      	ldr	r3, [pc, #196]	; (8001f44 <HAL_I2C_MspInit+0xec>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	4a30      	ldr	r2, [pc, #192]	; (8001f44 <HAL_I2C_MspInit+0xec>)
 8001e84:	f043 0302 	orr.w	r3, r3, #2
 8001e88:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8a:	4b2e      	ldr	r3, [pc, #184]	; (8001f44 <HAL_I2C_MspInit+0xec>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	61bb      	str	r3, [r7, #24]
 8001e94:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e96:	23c0      	movs	r3, #192	; 0xc0
 8001e98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e9a:	2312      	movs	r3, #18
 8001e9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ea6:	2304      	movs	r3, #4
 8001ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eaa:	f107 031c 	add.w	r3, r7, #28
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4825      	ldr	r0, [pc, #148]	; (8001f48 <HAL_I2C_MspInit+0xf0>)
 8001eb2:	f006 fce1 	bl	8008878 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	4b22      	ldr	r3, [pc, #136]	; (8001f44 <HAL_I2C_MspInit+0xec>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	4a21      	ldr	r2, [pc, #132]	; (8001f44 <HAL_I2C_MspInit+0xec>)
 8001ec0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec6:	4b1f      	ldr	r3, [pc, #124]	; (8001f44 <HAL_I2C_MspInit+0xec>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001ed2:	e031      	b.n	8001f38 <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a1c      	ldr	r2, [pc, #112]	; (8001f4c <HAL_I2C_MspInit+0xf4>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d12c      	bne.n	8001f38 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	4b18      	ldr	r3, [pc, #96]	; (8001f44 <HAL_I2C_MspInit+0xec>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	4a17      	ldr	r2, [pc, #92]	; (8001f44 <HAL_I2C_MspInit+0xec>)
 8001ee8:	f043 0302 	orr.w	r3, r3, #2
 8001eec:	6313      	str	r3, [r2, #48]	; 0x30
 8001eee:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <HAL_I2C_MspInit+0xec>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001efa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f00:	2312      	movs	r3, #18
 8001f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f04:	2301      	movs	r3, #1
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f0c:	2304      	movs	r3, #4
 8001f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f10:	f107 031c 	add.w	r3, r7, #28
 8001f14:	4619      	mov	r1, r3
 8001f16:	480c      	ldr	r0, [pc, #48]	; (8001f48 <HAL_I2C_MspInit+0xf0>)
 8001f18:	f006 fcae 	bl	8008878 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <HAL_I2C_MspInit+0xec>)
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	4a07      	ldr	r2, [pc, #28]	; (8001f44 <HAL_I2C_MspInit+0xec>)
 8001f26:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f2a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f2c:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <HAL_I2C_MspInit+0xec>)
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	68fb      	ldr	r3, [r7, #12]
}
 8001f38:	bf00      	nop
 8001f3a:	3730      	adds	r7, #48	; 0x30
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40005400 	.word	0x40005400
 8001f44:	40023800 	.word	0x40023800
 8001f48:	40020400 	.word	0x40020400
 8001f4c:	40005800 	.word	0x40005800

08001f50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f54:	f005 faa0 	bl	8007498 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f58:	f000 f81c 	bl	8001f94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f5c:	f7ff fe3e 	bl	8001bdc <MX_GPIO_Init>
  MX_DMA_Init();
 8001f60:	f7ff fda8 	bl	8001ab4 <MX_DMA_Init>
  MX_I2C1_Init();
 8001f64:	f7ff ff1c 	bl	8001da0 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001f68:	f001 fc9e 	bl	80038a8 <MX_SPI2_Init>
  MX_ADC1_Init();
 8001f6c:	f7ff fb9a 	bl	80016a4 <MX_ADC1_Init>
  MX_I2C2_Init();
 8001f70:	f7ff ff44 	bl	8001dfc <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8001f74:	f000 ffa8 	bl	8002ec8 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8001f78:	f001 fc60 	bl	800383c <MX_SPI1_Init>
  MX_FATFS_Init();
 8001f7c:	f00b f904 	bl	800d188 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  turn_off_HAWKs();
 8001f80:	f7ff f82c 	bl	8000fdc <turn_off_HAWKs>
  turn_off_TDs();
 8001f84:	f7ff f85a 	bl	800103c <turn_off_TDs>

  schedulerinit();
 8001f88:	f000 f92e 	bl	80021e8 <schedulerinit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	scheduler();
 8001f8c:	f000 fa90 	bl	80024b0 <scheduler>
 8001f90:	e7fc      	b.n	8001f8c <main+0x3c>
	...

08001f94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b094      	sub	sp, #80	; 0x50
 8001f98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f9a:	f107 0320 	add.w	r3, r7, #32
 8001f9e:	2230      	movs	r2, #48	; 0x30
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f00e fb07 	bl	80105b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fa8:	f107 030c 	add.w	r3, r7, #12
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
 8001fb4:	60da      	str	r2, [r3, #12]
 8001fb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60bb      	str	r3, [r7, #8]
 8001fbc:	4b28      	ldr	r3, [pc, #160]	; (8002060 <SystemClock_Config+0xcc>)
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc0:	4a27      	ldr	r2, [pc, #156]	; (8002060 <SystemClock_Config+0xcc>)
 8001fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc6:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc8:	4b25      	ldr	r3, [pc, #148]	; (8002060 <SystemClock_Config+0xcc>)
 8001fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	607b      	str	r3, [r7, #4]
 8001fd8:	4b22      	ldr	r3, [pc, #136]	; (8002064 <SystemClock_Config+0xd0>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a21      	ldr	r2, [pc, #132]	; (8002064 <SystemClock_Config+0xd0>)
 8001fde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fe2:	6013      	str	r3, [r2, #0]
 8001fe4:	4b1f      	ldr	r3, [pc, #124]	; (8002064 <SystemClock_Config+0xd0>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fec:	607b      	str	r3, [r7, #4]
 8001fee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ff8:	2310      	movs	r3, #16
 8001ffa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002000:	2300      	movs	r3, #0
 8002002:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002004:	2308      	movs	r3, #8
 8002006:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002008:	23a8      	movs	r3, #168	; 0xa8
 800200a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800200c:	2302      	movs	r3, #2
 800200e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002010:	2307      	movs	r3, #7
 8002012:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002014:	f107 0320 	add.w	r3, r7, #32
 8002018:	4618      	mov	r0, r3
 800201a:	f007 fed7 	bl	8009dcc <HAL_RCC_OscConfig>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002024:	f000 f820 	bl	8002068 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002028:	230f      	movs	r3, #15
 800202a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800202c:	2302      	movs	r3, #2
 800202e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002034:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002038:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800203a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800203e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002040:	f107 030c 	add.w	r3, r7, #12
 8002044:	2105      	movs	r1, #5
 8002046:	4618      	mov	r0, r3
 8002048:	f008 f930 	bl	800a2ac <HAL_RCC_ClockConfig>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002052:	f000 f809 	bl	8002068 <Error_Handler>
  }
}
 8002056:	bf00      	nop
 8002058:	3750      	adds	r7, #80	; 0x50
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40023800 	.word	0x40023800
 8002064:	40007000 	.word	0x40007000

08002068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <getNextExecution>:
float Ay2[FAKE_FILE_LEN];
float Az2[FAKE_FILE_LEN];

float launch_detect_buffer[5] = {0.0};

uint32_t getNextExecution(task_t * task){
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
	return task->last_call + task->interval;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	4413      	add	r3, r2
}
 8002088:	4618      	mov	r0, r3
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <launch_detect>:

uint8_t launch_detect(float * a1, float * a2){
 8002094:	b580      	push	{r7, lr}
 8002096:	ed2d 8b02 	vpush	{d8}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
	for (int i = 1; i < 5; i++){
 80020a2:	2301      	movs	r3, #1
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	e00d      	b.n	80020c4 <launch_detect+0x30>
		launch_detect_buffer[i-1] = launch_detect_buffer[i];
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	494c      	ldr	r1, [pc, #304]	; (80021e0 <launch_detect+0x14c>)
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	0092      	lsls	r2, r2, #2
 80020b2:	440a      	add	r2, r1
 80020b4:	6812      	ldr	r2, [r2, #0]
 80020b6:	494a      	ldr	r1, [pc, #296]	; (80021e0 <launch_detect+0x14c>)
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	440b      	add	r3, r1
 80020bc:	601a      	str	r2, [r3, #0]
	for (int i = 1; i < 5; i++){
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	3301      	adds	r3, #1
 80020c2:	617b      	str	r3, [r7, #20]
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	ddee      	ble.n	80020a8 <launch_detect+0x14>
	}
	launch_detect_buffer[4] = (sqrtf(a1[1]*a1[1] + a1[2]*a1[2] + a1[3]*a1[3]) + sqrtf(a2[1]*a2[1] + a2[2]*a2[2] + a2[3]*a2[3])) / 2;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3304      	adds	r3, #4
 80020ce:	ed93 7a00 	vldr	s14, [r3]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	3304      	adds	r3, #4
 80020d6:	edd3 7a00 	vldr	s15, [r3]
 80020da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3308      	adds	r3, #8
 80020e2:	edd3 6a00 	vldr	s13, [r3]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3308      	adds	r3, #8
 80020ea:	edd3 7a00 	vldr	s15, [r3]
 80020ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	330c      	adds	r3, #12
 80020fa:	edd3 6a00 	vldr	s13, [r3]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	330c      	adds	r3, #12
 8002102:	edd3 7a00 	vldr	s15, [r3]
 8002106:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800210a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800210e:	eeb0 0a67 	vmov.f32	s0, s15
 8002112:	f011 fac5 	bl	80136a0 <sqrtf>
 8002116:	eeb0 8a40 	vmov.f32	s16, s0
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	3304      	adds	r3, #4
 800211e:	ed93 7a00 	vldr	s14, [r3]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	3304      	adds	r3, #4
 8002126:	edd3 7a00 	vldr	s15, [r3]
 800212a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	3308      	adds	r3, #8
 8002132:	edd3 6a00 	vldr	s13, [r3]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	3308      	adds	r3, #8
 800213a:	edd3 7a00 	vldr	s15, [r3]
 800213e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002142:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	330c      	adds	r3, #12
 800214a:	edd3 6a00 	vldr	s13, [r3]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	330c      	adds	r3, #12
 8002152:	edd3 7a00 	vldr	s15, [r3]
 8002156:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800215a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800215e:	eeb0 0a67 	vmov.f32	s0, s15
 8002162:	f011 fa9d 	bl	80136a0 <sqrtf>
 8002166:	eef0 7a40 	vmov.f32	s15, s0
 800216a:	ee38 7a27 	vadd.f32	s14, s16, s15
 800216e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002172:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002176:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <launch_detect+0x14c>)
 8002178:	edc3 7a04 	vstr	s15, [r3, #16]
	float sum_a = 0;
 800217c:	f04f 0300 	mov.w	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 5; i++){
 8002182:	2300      	movs	r3, #0
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	e00e      	b.n	80021a6 <launch_detect+0x112>
		sum_a += launch_detect_buffer[i];
 8002188:	4a15      	ldr	r2, [pc, #84]	; (80021e0 <launch_detect+0x14c>)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	edd3 7a00 	vldr	s15, [r3]
 8002194:	ed97 7a04 	vldr	s14, [r7, #16]
 8002198:	ee77 7a27 	vadd.f32	s15, s14, s15
 800219c:	edc7 7a04 	vstr	s15, [r7, #16]
	for (int i = 0; i < 5; i++){
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	3301      	adds	r3, #1
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	dded      	ble.n	8002188 <launch_detect+0xf4>
	}
	sum_a /= 5;
 80021ac:	ed97 7a04 	vldr	s14, [r7, #16]
 80021b0:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80021b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021b8:	edc7 7a04 	vstr	s15, [r7, #16]

	// if average of acceleration over 5 measurements is higher than 4G, launch has been detected.
	if (sum_a >= 40) return 1;
 80021bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80021c0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80021e4 <launch_detect+0x150>
 80021c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021cc:	db01      	blt.n	80021d2 <launch_detect+0x13e>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <launch_detect+0x140>
	return 0;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	ecbd 8b02 	vpop	{d8}
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	2000081c 	.word	0x2000081c
 80021e4:	42200000 	.word	0x42200000

080021e8 <schedulerinit>:

void schedulerinit () {
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af02      	add	r7, sp, #8

	//initialize all devices
	ms5607_init(&BARO1);
 80021ee:	4892      	ldr	r0, [pc, #584]	; (8002438 <schedulerinit+0x250>)
 80021f0:	f002 fad0 	bl	8004794 <ms5607_init>
	ms5607_init(&BARO2);
 80021f4:	4891      	ldr	r0, [pc, #580]	; (800243c <schedulerinit+0x254>)
 80021f6:	f002 facd 	bl	8004794 <ms5607_init>
	sht31_init(&TEMP);
 80021fa:	4891      	ldr	r0, [pc, #580]	; (8002440 <schedulerinit+0x258>)
 80021fc:	f002 fe72 	bl	8004ee4 <sht31_init>
	icm20601_init(&IMU1);
 8002200:	4890      	ldr	r0, [pc, #576]	; (8002444 <schedulerinit+0x25c>)
 8002202:	f002 f81e 	bl	8004242 <icm20601_init>
	icm20601_init(&IMU2);
 8002206:	4890      	ldr	r0, [pc, #576]	; (8002448 <schedulerinit+0x260>)
 8002208:	f002 f81b 	bl	8004242 <icm20601_init>
	h3l_init(&ACCEL);
 800220c:	488f      	ldr	r0, [pc, #572]	; (800244c <schedulerinit+0x264>)
 800220e:	f001 fd53 	bl	8003cb8 <h3l_init>
	init_ADC();
 8002212:	f7fe ff25 	bl	8001060 <init_ADC>

	DWT_Delay_Init();
 8002216:	f7ff fc7d 	bl	8001b14 <DWT_Delay_Init>


	// cycle through LEDs

	turn_on(&STAT);
 800221a:	488d      	ldr	r0, [pc, #564]	; (8002450 <schedulerinit+0x268>)
 800221c:	f002 fa9a 	bl	8004754 <turn_on>
	HAL_Delay(300);
 8002220:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002224:	f005 f9aa 	bl	800757c <HAL_Delay>
	turn_on(&SAVE);
 8002228:	488a      	ldr	r0, [pc, #552]	; (8002454 <schedulerinit+0x26c>)
 800222a:	f002 fa93 	bl	8004754 <turn_on>
	HAL_Delay(300);
 800222e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002232:	f005 f9a3 	bl	800757c <HAL_Delay>
	turn_on(&PRGM);
 8002236:	4888      	ldr	r0, [pc, #544]	; (8002458 <schedulerinit+0x270>)
 8002238:	f002 fa8c 	bl	8004754 <turn_on>
	HAL_Delay(300);
 800223c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002240:	f005 f99c 	bl	800757c <HAL_Delay>
	turn_on(&RDY);
 8002244:	4885      	ldr	r0, [pc, #532]	; (800245c <schedulerinit+0x274>)
 8002246:	f002 fa85 	bl	8004754 <turn_on>
	HAL_Delay(300);
 800224a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800224e:	f005 f995 	bl	800757c <HAL_Delay>

	stay_alive();
 8002252:	f7fe fe99 	bl	8000f88 <stay_alive>

	turn_off(&STAT);
 8002256:	487e      	ldr	r0, [pc, #504]	; (8002450 <schedulerinit+0x268>)
 8002258:	f002 fa8c 	bl	8004774 <turn_off>
	turn_off(&SAVE);
 800225c:	487d      	ldr	r0, [pc, #500]	; (8002454 <schedulerinit+0x26c>)
 800225e:	f002 fa89 	bl	8004774 <turn_off>
	turn_off(&PRGM);
 8002262:	487d      	ldr	r0, [pc, #500]	; (8002458 <schedulerinit+0x270>)
 8002264:	f002 fa86 	bl	8004774 <turn_off>
	turn_off(&RDY);
 8002268:	487c      	ldr	r0, [pc, #496]	; (800245c <schedulerinit+0x274>)
 800226a:	f002 fa83 	bl	8004774 <turn_off>

	// initialize SD card
	turn_on(&SAVE);
 800226e:	4879      	ldr	r0, [pc, #484]	; (8002454 <schedulerinit+0x26c>)
 8002270:	f002 fa70 	bl	8004754 <turn_on>
	SD_state = init_sd(&num_dat_file, &num_log_file);
 8002274:	497a      	ldr	r1, [pc, #488]	; (8002460 <schedulerinit+0x278>)
 8002276:	487b      	ldr	r0, [pc, #492]	; (8002464 <schedulerinit+0x27c>)
 8002278:	f7ff f83e 	bl	80012f8 <init_sd>
 800227c:	4603      	mov	r3, r0
 800227e:	461a      	mov	r2, r3
 8002280:	4b79      	ldr	r3, [pc, #484]	; (8002468 <schedulerinit+0x280>)
 8002282:	701a      	strb	r2, [r3, #0]
	if (SD_state == 0){
 8002284:	4b78      	ldr	r3, [pc, #480]	; (8002468 <schedulerinit+0x280>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d103      	bne.n	8002294 <schedulerinit+0xac>
		turn_off(&SAVE);
 800228c:	4871      	ldr	r0, [pc, #452]	; (8002454 <schedulerinit+0x26c>)
 800228e:	f002 fa71 	bl	8004774 <turn_off>
 8002292:	e00b      	b.n	80022ac <schedulerinit+0xc4>
	} else {
		turn_on(&RDY);
 8002294:	4871      	ldr	r0, [pc, #452]	; (800245c <schedulerinit+0x274>)
 8002296:	f002 fa5d 	bl	8004754 <turn_on>
		HAL_Delay(100);
 800229a:	2064      	movs	r0, #100	; 0x64
 800229c:	f005 f96e 	bl	800757c <HAL_Delay>
		turn_off(&RDY);
 80022a0:	486e      	ldr	r0, [pc, #440]	; (800245c <schedulerinit+0x274>)
 80022a2:	f002 fa67 	bl	8004774 <turn_off>
		HAL_Delay(100);
 80022a6:	2064      	movs	r0, #100	; 0x64
 80022a8:	f005 f968 	bl	800757c <HAL_Delay>
	}
#if DEBUG_PRINT == 1
	printf("num_dat_file: %hu \n",num_dat_file);
	printf("num_log_file: %hu \n",num_log_file);
#endif
	num_log_file ++;
 80022ac:	4b6c      	ldr	r3, [pc, #432]	; (8002460 <schedulerinit+0x278>)
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	3301      	adds	r3, #1
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	4b6a      	ldr	r3, [pc, #424]	; (8002460 <schedulerinit+0x278>)
 80022b6:	801a      	strh	r2, [r3, #0]
	num_dat_file ++;
 80022b8:	4b6a      	ldr	r3, [pc, #424]	; (8002464 <schedulerinit+0x27c>)
 80022ba:	881b      	ldrh	r3, [r3, #0]
 80022bc:	3301      	adds	r3, #1
 80022be:	b29a      	uxth	r2, r3
 80022c0:	4b68      	ldr	r3, [pc, #416]	; (8002464 <schedulerinit+0x27c>)
 80022c2:	801a      	strh	r2, [r3, #0]

	sprintf(FILE_NAME,"FL%04u.CSV", num_dat_file);
 80022c4:	4b67      	ldr	r3, [pc, #412]	; (8002464 <schedulerinit+0x27c>)
 80022c6:	881b      	ldrh	r3, [r3, #0]
 80022c8:	461a      	mov	r2, r3
 80022ca:	4968      	ldr	r1, [pc, #416]	; (800246c <schedulerinit+0x284>)
 80022cc:	4868      	ldr	r0, [pc, #416]	; (8002470 <schedulerinit+0x288>)
 80022ce:	f00e fe53 	bl	8010f78 <siprintf>
#if DEBUG_PRINT == 1
	printf("saving %s ...",FILE_NAME);
#endif

	sprintf(LOG_NAME,"LOG%02u.CSV", num_log_file);
 80022d2:	4b63      	ldr	r3, [pc, #396]	; (8002460 <schedulerinit+0x278>)
 80022d4:	881b      	ldrh	r3, [r3, #0]
 80022d6:	461a      	mov	r2, r3
 80022d8:	4966      	ldr	r1, [pc, #408]	; (8002474 <schedulerinit+0x28c>)
 80022da:	4867      	ldr	r0, [pc, #412]	; (8002478 <schedulerinit+0x290>)
 80022dc:	f00e fe4c 	bl	8010f78 <siprintf>
#if DEBUG_PRINT == 1
	printf("saving %s ...",LOG_NAME);
#endif

	SD_state = init_file(FILE_NAME, LOG_NAME);
 80022e0:	4965      	ldr	r1, [pc, #404]	; (8002478 <schedulerinit+0x290>)
 80022e2:	4863      	ldr	r0, [pc, #396]	; (8002470 <schedulerinit+0x288>)
 80022e4:	f7ff f8c2 	bl	800146c <init_file>
 80022e8:	4603      	mov	r3, r0
 80022ea:	461a      	mov	r2, r3
 80022ec:	4b5e      	ldr	r3, [pc, #376]	; (8002468 <schedulerinit+0x280>)
 80022ee:	701a      	strb	r2, [r3, #0]

	if (SD_state == 0){
 80022f0:	4b5d      	ldr	r3, [pc, #372]	; (8002468 <schedulerinit+0x280>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d103      	bne.n	8002300 <schedulerinit+0x118>
		turn_off(&SAVE);
 80022f8:	4856      	ldr	r0, [pc, #344]	; (8002454 <schedulerinit+0x26c>)
 80022fa:	f002 fa3b 	bl	8004774 <turn_off>
 80022fe:	e00b      	b.n	8002318 <schedulerinit+0x130>
	} else {
		turn_on(&RDY);
 8002300:	4856      	ldr	r0, [pc, #344]	; (800245c <schedulerinit+0x274>)
 8002302:	f002 fa27 	bl	8004754 <turn_on>
		HAL_Delay(100);
 8002306:	2064      	movs	r0, #100	; 0x64
 8002308:	f005 f938 	bl	800757c <HAL_Delay>
		turn_off(&RDY);
 800230c:	4853      	ldr	r0, [pc, #332]	; (800245c <schedulerinit+0x274>)
 800230e:	f002 fa31 	bl	8004774 <turn_off>
		HAL_Delay(100);
 8002312:	2064      	movs	r0, #100	; 0x64
 8002314:	f005 f932 	bl	800757c <HAL_Delay>
	}
	turn_on(&RDY);
 8002318:	4850      	ldr	r0, [pc, #320]	; (800245c <schedulerinit+0x274>)
 800231a:	f002 fa1b 	bl	8004754 <turn_on>
	HAL_Delay(1000);
 800231e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002322:	f005 f92b 	bl	800757c <HAL_Delay>

	bufclear(buffer);
 8002326:	4855      	ldr	r0, [pc, #340]	; (800247c <schedulerinit+0x294>)
 8002328:	f7fe ffcc 	bl	80012c4 <bufclear>
	sprintf(buffer, "%ld, SCHEDULER INIT OK, - \n", HAL_GetTick());
 800232c:	f005 f91a 	bl	8007564 <HAL_GetTick>
 8002330:	4603      	mov	r3, r0
 8002332:	461a      	mov	r2, r3
 8002334:	4952      	ldr	r1, [pc, #328]	; (8002480 <schedulerinit+0x298>)
 8002336:	4851      	ldr	r0, [pc, #324]	; (800247c <schedulerinit+0x294>)
 8002338:	f00e fe1e 	bl	8010f78 <siprintf>
	log_to_SD(LOG_NAME, buffer);
 800233c:	494f      	ldr	r1, [pc, #316]	; (800247c <schedulerinit+0x294>)
 800233e:	484e      	ldr	r0, [pc, #312]	; (8002478 <schedulerinit+0x290>)
 8002340:	f7ff f96a 	bl	8001618 <log_to_SD>
		read_from_SD("FDATAHE.CSV", TIME, P1, P2, Ax1, Ay1, Az1, Ax2, Ay2, Az2);
#endif

	// selftest

	read_ADC(adc_dat);
 8002344:	484f      	ldr	r0, [pc, #316]	; (8002484 <schedulerinit+0x29c>)
 8002346:	f7fe fe9b 	bl	8001080 <read_ADC>
	V_TD1 = adc_dat[0];
 800234a:	4b4e      	ldr	r3, [pc, #312]	; (8002484 <schedulerinit+0x29c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a4e      	ldr	r2, [pc, #312]	; (8002488 <schedulerinit+0x2a0>)
 8002350:	6013      	str	r3, [r2, #0]
	V_TD2 = adc_dat[1];
 8002352:	4b4c      	ldr	r3, [pc, #304]	; (8002484 <schedulerinit+0x29c>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	4a4d      	ldr	r2, [pc, #308]	; (800248c <schedulerinit+0x2a4>)
 8002358:	6013      	str	r3, [r2, #0]
	V_LDR = adc_dat[2];
 800235a:	4b4a      	ldr	r3, [pc, #296]	; (8002484 <schedulerinit+0x29c>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	4a4c      	ldr	r2, [pc, #304]	; (8002490 <schedulerinit+0x2a8>)
 8002360:	6013      	str	r3, [r2, #0]
	I_BAT1 = adc_dat[3];
 8002362:	4b48      	ldr	r3, [pc, #288]	; (8002484 <schedulerinit+0x29c>)
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	4a4b      	ldr	r2, [pc, #300]	; (8002494 <schedulerinit+0x2ac>)
 8002368:	6013      	str	r3, [r2, #0]
	I_BAT2 = adc_dat[4];
 800236a:	4b46      	ldr	r3, [pc, #280]	; (8002484 <schedulerinit+0x29c>)
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	4a4a      	ldr	r2, [pc, #296]	; (8002498 <schedulerinit+0x2b0>)
 8002370:	6013      	str	r3, [r2, #0]
	V_BAT1 = adc_dat[5];
 8002372:	4b44      	ldr	r3, [pc, #272]	; (8002484 <schedulerinit+0x29c>)
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	4a49      	ldr	r2, [pc, #292]	; (800249c <schedulerinit+0x2b4>)
 8002378:	6013      	str	r3, [r2, #0]
	V_BAT2 = adc_dat[6];
 800237a:	4b42      	ldr	r3, [pc, #264]	; (8002484 <schedulerinit+0x29c>)
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	4a48      	ldr	r2, [pc, #288]	; (80024a0 <schedulerinit+0x2b8>)
 8002380:	6013      	str	r3, [r2, #0]
	t_cpu = adc_dat[7];
 8002382:	4b40      	ldr	r3, [pc, #256]	; (8002484 <schedulerinit+0x29c>)
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	4a47      	ldr	r2, [pc, #284]	; (80024a4 <schedulerinit+0x2bc>)
 8002388:	6013      	str	r3, [r2, #0]

	selftest(V_TD1, V_TD2, V_BAT1, V_BAT2, V_LDR);
 800238a:	4b3f      	ldr	r3, [pc, #252]	; (8002488 <schedulerinit+0x2a0>)
 800238c:	edd3 7a00 	vldr	s15, [r3]
 8002390:	4b3e      	ldr	r3, [pc, #248]	; (800248c <schedulerinit+0x2a4>)
 8002392:	ed93 7a00 	vldr	s14, [r3]
 8002396:	4b41      	ldr	r3, [pc, #260]	; (800249c <schedulerinit+0x2b4>)
 8002398:	edd3 6a00 	vldr	s13, [r3]
 800239c:	4b40      	ldr	r3, [pc, #256]	; (80024a0 <schedulerinit+0x2b8>)
 800239e:	ed93 6a00 	vldr	s12, [r3]
 80023a2:	4b3b      	ldr	r3, [pc, #236]	; (8002490 <schedulerinit+0x2a8>)
 80023a4:	edd3 5a00 	vldr	s11, [r3]
 80023a8:	eeb0 2a65 	vmov.f32	s4, s11
 80023ac:	eef0 1a46 	vmov.f32	s3, s12
 80023b0:	eeb0 1a66 	vmov.f32	s2, s13
 80023b4:	eef0 0a47 	vmov.f32	s1, s14
 80023b8:	eeb0 0a67 	vmov.f32	s0, s15
 80023bc:	f001 f992 	bl	80036e4 <selftest>

	// initialize state estimation with environment values

	float ground_pressure = 0;
 80023c0:	f04f 0300 	mov.w	r3, #0
 80023c4:	60bb      	str	r3, [r7, #8]
	float ground_temperature = 0;
 80023c6:	f04f 0300 	mov.w	r3, #0
 80023ca:	607b      	str	r3, [r7, #4]
	uint8_t passed = 0;
 80023cc:	2300      	movs	r3, #0
 80023ce:	73fb      	strb	r3, [r7, #15]
	passed += config_baro(&TEMP, &BARO1, &BARO2, &ground_temperature, &ground_pressure);
 80023d0:	1d3a      	adds	r2, r7, #4
 80023d2:	f107 0308 	add.w	r3, r7, #8
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	4613      	mov	r3, r2
 80023da:	4a18      	ldr	r2, [pc, #96]	; (800243c <schedulerinit+0x254>)
 80023dc:	4916      	ldr	r1, [pc, #88]	; (8002438 <schedulerinit+0x250>)
 80023de:	4818      	ldr	r0, [pc, #96]	; (8002440 <schedulerinit+0x258>)
 80023e0:	f000 ff2c 	bl	800323c <config_baro>
 80023e4:	4603      	mov	r3, r0
 80023e6:	461a      	mov	r2, r3
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
 80023ea:	4413      	add	r3, r2
 80023ec:	73fb      	strb	r3, [r7, #15]
	passed += config_imu(&IMU1, &IMU2);
 80023ee:	4916      	ldr	r1, [pc, #88]	; (8002448 <schedulerinit+0x260>)
 80023f0:	4814      	ldr	r0, [pc, #80]	; (8002444 <schedulerinit+0x25c>)
 80023f2:	f001 f84d 	bl	8003490 <config_imu>
 80023f6:	4603      	mov	r3, r0
 80023f8:	461a      	mov	r2, r3
 80023fa:	7bfb      	ldrb	r3, [r7, #15]
 80023fc:	4413      	add	r3, r2
 80023fe:	73fb      	strb	r3, [r7, #15]

	if (passed != 2){
 8002400:	7bfb      	ldrb	r3, [r7, #15]
 8002402:	2b02      	cmp	r3, #2
 8002404:	d002      	beq.n	800240c <schedulerinit+0x224>
		// sound error
		if (IGNORE_ERRORS == 0){
			while (1){
				play_FAIL_sound();
 8002406:	f7ff fb1b 	bl	8001a40 <play_FAIL_sound>
 800240a:	e7fc      	b.n	8002406 <schedulerinit+0x21e>
			}
		}
	}
	play_OK_sound();
 800240c:	f7ff faf4 	bl	80019f8 <play_OK_sound>
		ground_pressure = 86172.00;
		//ground_pressure = 101327;
		ground_temperature = 20;
#endif

	reset_state_est_state(ground_pressure, ground_temperature, &state_est_state);
 8002410:	edd7 7a02 	vldr	s15, [r7, #8]
 8002414:	ed97 7a01 	vldr	s14, [r7, #4]
 8002418:	4823      	ldr	r0, [pc, #140]	; (80024a8 <schedulerinit+0x2c0>)
 800241a:	eef0 0a47 	vmov.f32	s1, s14
 800241e:	eeb0 0a67 	vmov.f32	s0, s15
 8002422:	f004 fa95 	bl	8006950 <reset_state_est_state>
	t0 = HAL_GetTick();
 8002426:	f005 f89d 	bl	8007564 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	4b1f      	ldr	r3, [pc, #124]	; (80024ac <schedulerinit+0x2c4>)
 800242e:	601a      	str	r2, [r3, #0]
}
 8002430:	bf00      	nop
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	200000d4 	.word	0x200000d4
 800243c:	200000f4 	.word	0x200000f4
 8002440:	20000134 	.word	0x20000134
 8002444:	20000114 	.word	0x20000114
 8002448:	20000124 	.word	0x20000124
 800244c:	20000144 	.word	0x20000144
 8002450:	200000b4 	.word	0x200000b4
 8002454:	200000bc 	.word	0x200000bc
 8002458:	200000c4 	.word	0x200000c4
 800245c:	200000cc 	.word	0x200000cc
 8002460:	2000038a 	.word	0x2000038a
 8002464:	20000388 	.word	0x20000388
 8002468:	2000038c 	.word	0x2000038c
 800246c:	08014dc0 	.word	0x08014dc0
 8002470:	20015ab4 	.word	0x20015ab4
 8002474:	08014dcc 	.word	0x08014dcc
 8002478:	20008620 	.word	0x20008620
 800247c:	20013880 	.word	0x20013880
 8002480:	08014dd8 	.word	0x08014dd8
 8002484:	20013ce4 	.word	0x20013ce4
 8002488:	2000c1a0 	.word	0x2000c1a0
 800248c:	2000fd10 	.word	0x2000fd10
 8002490:	20013c84 	.word	0x20013c84
 8002494:	2000fd14 	.word	0x2000fd14
 8002498:	20013c8c 	.word	0x20013c8c
 800249c:	20013cb0 	.word	0x20013cb0
 80024a0:	2000fd1c 	.word	0x2000fd1c
 80024a4:	20004ab8 	.word	0x20004ab8
 80024a8:	20000398 	.word	0x20000398
 80024ac:	20013cac 	.word	0x20013cac

080024b0 <scheduler>:

void scheduler (){
 80024b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024b4:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80024b8:	af48      	add	r7, sp, #288	; 0x120

	tick = HAL_GetTick();
 80024ba:	f005 f853 	bl	8007564 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	4b52      	ldr	r3, [pc, #328]	; (800260c <scheduler+0x15c>)
 80024c2:	601a      	str	r2, [r3, #0]
	counter ++;
 80024c4:	4b52      	ldr	r3, [pc, #328]	; (8002610 <scheduler+0x160>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	3301      	adds	r3, #1
 80024ca:	4a51      	ldr	r2, [pc, #324]	; (8002610 <scheduler+0x160>)
 80024cc:	6013      	str	r3, [r2, #0]

		tick = TIME[counter];
		printf("FAKE DATA LINE %ld \n",counter);
#endif
#if FAKE_DATA == 0
		if (counter > MAX_FILE_SIZE){
 80024ce:	4b50      	ldr	r3, [pc, #320]	; (8002610 <scheduler+0x160>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2b64      	cmp	r3, #100	; 0x64
 80024d4:	d90f      	bls.n	80024f6 <scheduler+0x46>
			counter = 0;
 80024d6:	4b4e      	ldr	r3, [pc, #312]	; (8002610 <scheduler+0x160>)
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
			num_dat_file ++;
 80024dc:	4b4d      	ldr	r3, [pc, #308]	; (8002614 <scheduler+0x164>)
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	3301      	adds	r3, #1
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	4b4b      	ldr	r3, [pc, #300]	; (8002614 <scheduler+0x164>)
 80024e6:	801a      	strh	r2, [r3, #0]
			sprintf(FILE_NAME,"FL%04u.CSV", num_dat_file);
 80024e8:	4b4a      	ldr	r3, [pc, #296]	; (8002614 <scheduler+0x164>)
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	461a      	mov	r2, r3
 80024ee:	494a      	ldr	r1, [pc, #296]	; (8002618 <scheduler+0x168>)
 80024f0:	484a      	ldr	r0, [pc, #296]	; (800261c <scheduler+0x16c>)
 80024f2:	f00e fd41 	bl	8010f78 <siprintf>
		}
#endif

	// TASK LED
	// cool light show! :)
	if(tick >= getNextExecution(&RDY_TASK)){
 80024f6:	484a      	ldr	r0, [pc, #296]	; (8002620 <scheduler+0x170>)
 80024f8:	f7ff fdbd 	bl	8002076 <getNextExecution>
 80024fc:	4602      	mov	r2, r0
 80024fe:	4b43      	ldr	r3, [pc, #268]	; (800260c <scheduler+0x15c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	d806      	bhi.n	8002514 <scheduler+0x64>
		RDY_TASK.last_call = tick;
 8002506:	4b41      	ldr	r3, [pc, #260]	; (800260c <scheduler+0x15c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a45      	ldr	r2, [pc, #276]	; (8002620 <scheduler+0x170>)
 800250c:	6013      	str	r3, [r2, #0]
		toggle(&RDY);
 800250e:	4845      	ldr	r0, [pc, #276]	; (8002624 <scheduler+0x174>)
 8002510:	f002 f910 	bl	8004734 <toggle>
	}
	if(tick >= getNextExecution(&SAVE_TASK)){
 8002514:	4844      	ldr	r0, [pc, #272]	; (8002628 <scheduler+0x178>)
 8002516:	f7ff fdae 	bl	8002076 <getNextExecution>
 800251a:	4602      	mov	r2, r0
 800251c:	4b3b      	ldr	r3, [pc, #236]	; (800260c <scheduler+0x15c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	429a      	cmp	r2, r3
 8002522:	d806      	bhi.n	8002532 <scheduler+0x82>
		SAVE_TASK.last_call = tick;
 8002524:	4b39      	ldr	r3, [pc, #228]	; (800260c <scheduler+0x15c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a3f      	ldr	r2, [pc, #252]	; (8002628 <scheduler+0x178>)
 800252a:	6013      	str	r3, [r2, #0]
		toggle(&SAVE);
 800252c:	483f      	ldr	r0, [pc, #252]	; (800262c <scheduler+0x17c>)
 800252e:	f002 f901 	bl	8004734 <toggle>
	}
	if(tick >= getNextExecution(&STAT_TASK)){
 8002532:	483f      	ldr	r0, [pc, #252]	; (8002630 <scheduler+0x180>)
 8002534:	f7ff fd9f 	bl	8002076 <getNextExecution>
 8002538:	4602      	mov	r2, r0
 800253a:	4b34      	ldr	r3, [pc, #208]	; (800260c <scheduler+0x15c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	429a      	cmp	r2, r3
 8002540:	d806      	bhi.n	8002550 <scheduler+0xa0>
		STAT_TASK.last_call = tick;
 8002542:	4b32      	ldr	r3, [pc, #200]	; (800260c <scheduler+0x15c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a3a      	ldr	r2, [pc, #232]	; (8002630 <scheduler+0x180>)
 8002548:	6013      	str	r3, [r2, #0]
		toggle(&STAT);
 800254a:	483a      	ldr	r0, [pc, #232]	; (8002634 <scheduler+0x184>)
 800254c:	f002 f8f2 	bl	8004734 <toggle>
	}
	if(tick >= getNextExecution(&PRGM_TASK)){
 8002550:	4839      	ldr	r0, [pc, #228]	; (8002638 <scheduler+0x188>)
 8002552:	f7ff fd90 	bl	8002076 <getNextExecution>
 8002556:	4602      	mov	r2, r0
 8002558:	4b2c      	ldr	r3, [pc, #176]	; (800260c <scheduler+0x15c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	429a      	cmp	r2, r3
 800255e:	d806      	bhi.n	800256e <scheduler+0xbe>
		PRGM_TASK.last_call = tick;
 8002560:	4b2a      	ldr	r3, [pc, #168]	; (800260c <scheduler+0x15c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a34      	ldr	r2, [pc, #208]	; (8002638 <scheduler+0x188>)
 8002566:	6013      	str	r3, [r2, #0]
		toggle(&PRGM);
 8002568:	4834      	ldr	r0, [pc, #208]	; (800263c <scheduler+0x18c>)
 800256a:	f002 f8e3 	bl	8004734 <toggle>
	}


	// TASK SHT
	if(tick >= getNextExecution(&SHT_TASK)){
 800256e:	4834      	ldr	r0, [pc, #208]	; (8002640 <scheduler+0x190>)
 8002570:	f7ff fd81 	bl	8002076 <getNextExecution>
 8002574:	4602      	mov	r2, r0
 8002576:	4b25      	ldr	r3, [pc, #148]	; (800260c <scheduler+0x15c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d808      	bhi.n	8002590 <scheduler+0xe0>
		SHT_TASK.last_call = tick;
 800257e:	4b23      	ldr	r3, [pc, #140]	; (800260c <scheduler+0x15c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a2f      	ldr	r2, [pc, #188]	; (8002640 <scheduler+0x190>)
 8002584:	6013      	str	r3, [r2, #0]
		sht31_read(&TEMP, t_val, t_buf);
 8002586:	4a2f      	ldr	r2, [pc, #188]	; (8002644 <scheduler+0x194>)
 8002588:	492f      	ldr	r1, [pc, #188]	; (8002648 <scheduler+0x198>)
 800258a:	4830      	ldr	r0, [pc, #192]	; (800264c <scheduler+0x19c>)
 800258c:	f002 fd00 	bl	8004f90 <sht31_read>
	}

	// TASK BARO
	if(tick >= getNextExecution(&BARO_TASK)){
 8002590:	482f      	ldr	r0, [pc, #188]	; (8002650 <scheduler+0x1a0>)
 8002592:	f7ff fd70 	bl	8002076 <getNextExecution>
 8002596:	4602      	mov	r2, r0
 8002598:	4b1c      	ldr	r3, [pc, #112]	; (800260c <scheduler+0x15c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d869      	bhi.n	8002674 <scheduler+0x1c4>

		// TODO detect invalid values!

		switch(BARO_TASK.stage){
 80025a0:	4b2b      	ldr	r3, [pc, #172]	; (8002650 <scheduler+0x1a0>)
 80025a2:	7a1b      	ldrb	r3, [r3, #8]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d002      	beq.n	80025ae <scheduler+0xfe>
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d010      	beq.n	80025ce <scheduler+0x11e>
 80025ac:	e029      	b.n	8002602 <scheduler+0x152>
			case MS_TEMPERATURE_REQ:
				ms5607_prep_pressure(&BARO1, raw_data1);
 80025ae:	4929      	ldr	r1, [pc, #164]	; (8002654 <scheduler+0x1a4>)
 80025b0:	4829      	ldr	r0, [pc, #164]	; (8002658 <scheduler+0x1a8>)
 80025b2:	f002 f99d 	bl	80048f0 <ms5607_prep_pressure>
				ms5607_prep_pressure(&BARO2, raw_data2);
 80025b6:	4929      	ldr	r1, [pc, #164]	; (800265c <scheduler+0x1ac>)
 80025b8:	4829      	ldr	r0, [pc, #164]	; (8002660 <scheduler+0x1b0>)
 80025ba:	f002 f999 	bl	80048f0 <ms5607_prep_pressure>
				BARO_TASK.last_call = tick;
 80025be:	4b13      	ldr	r3, [pc, #76]	; (800260c <scheduler+0x15c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a23      	ldr	r2, [pc, #140]	; (8002650 <scheduler+0x1a0>)
 80025c4:	6013      	str	r3, [r2, #0]
				BARO_TASK.stage = MS_PRESSURE_REQ;
 80025c6:	4b22      	ldr	r3, [pc, #136]	; (8002650 <scheduler+0x1a0>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	721a      	strb	r2, [r3, #8]
				break;
 80025cc:	e053      	b.n	8002676 <scheduler+0x1c6>
			case MS_PRESSURE_REQ:
				ms5607_read_pressure(&BARO1, raw_data1);
 80025ce:	4921      	ldr	r1, [pc, #132]	; (8002654 <scheduler+0x1a4>)
 80025d0:	4821      	ldr	r0, [pc, #132]	; (8002658 <scheduler+0x1a8>)
 80025d2:	f002 f9d6 	bl	8004982 <ms5607_read_pressure>
				ms5607_read_pressure(&BARO2, raw_data2);
 80025d6:	4921      	ldr	r1, [pc, #132]	; (800265c <scheduler+0x1ac>)
 80025d8:	4821      	ldr	r0, [pc, #132]	; (8002660 <scheduler+0x1b0>)
 80025da:	f002 f9d2 	bl	8004982 <ms5607_read_pressure>
				BARO_TASK.last_call = tick;
 80025de:	4b0b      	ldr	r3, [pc, #44]	; (800260c <scheduler+0x15c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a1b      	ldr	r2, [pc, #108]	; (8002650 <scheduler+0x1a0>)
 80025e4:	6013      	str	r3, [r2, #0]
				ms5607_convert(&BARO1, &p1, &t_p1);
 80025e6:	4a1f      	ldr	r2, [pc, #124]	; (8002664 <scheduler+0x1b4>)
 80025e8:	491f      	ldr	r1, [pc, #124]	; (8002668 <scheduler+0x1b8>)
 80025ea:	481b      	ldr	r0, [pc, #108]	; (8002658 <scheduler+0x1a8>)
 80025ec:	f002 fa14 	bl	8004a18 <ms5607_convert>
				ms5607_convert(&BARO2, &p2, &t_p2);
 80025f0:	4a1e      	ldr	r2, [pc, #120]	; (800266c <scheduler+0x1bc>)
 80025f2:	491f      	ldr	r1, [pc, #124]	; (8002670 <scheduler+0x1c0>)
 80025f4:	481a      	ldr	r0, [pc, #104]	; (8002660 <scheduler+0x1b0>)
 80025f6:	f002 fa0f 	bl	8004a18 <ms5607_convert>
				BARO_TASK.stage = MS_TEMPERATURE_REQ;
 80025fa:	4b15      	ldr	r3, [pc, #84]	; (8002650 <scheduler+0x1a0>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	721a      	strb	r2, [r3, #8]
				break;
 8002600:	e039      	b.n	8002676 <scheduler+0x1c6>
			default:
				BARO_TASK.stage = MS_TEMPERATURE_REQ;
 8002602:	4b13      	ldr	r3, [pc, #76]	; (8002650 <scheduler+0x1a0>)
 8002604:	2200      	movs	r2, #0
 8002606:	721a      	strb	r2, [r3, #8]
				break;
 8002608:	e035      	b.n	8002676 <scheduler+0x1c6>
 800260a:	bf00      	nop
 800260c:	20013c80 	.word	0x20013c80
 8002610:	20000154 	.word	0x20000154
 8002614:	20000388 	.word	0x20000388
 8002618:	08014dc0 	.word	0x08014dc0
 800261c:	20015ab4 	.word	0x20015ab4
 8002620:	20000050 	.word	0x20000050
 8002624:	200000cc 	.word	0x200000cc
 8002628:	20000070 	.word	0x20000070
 800262c:	200000bc 	.word	0x200000bc
 8002630:	20000060 	.word	0x20000060
 8002634:	200000b4 	.word	0x200000b4
 8002638:	20000080 	.word	0x20000080
 800263c:	200000c4 	.word	0x200000c4
 8002640:	20000010 	.word	0x20000010
 8002644:	2000fd18 	.word	0x2000fd18
 8002648:	20013cc0 	.word	0x20013cc0
 800264c:	20000134 	.word	0x20000134
 8002650:	20000000 	.word	0x20000000
 8002654:	20013c88 	.word	0x20013c88
 8002658:	200000d4 	.word	0x200000d4
 800265c:	20004abc 	.word	0x20004abc
 8002660:	200000f4 	.word	0x200000f4
 8002664:	20000380 	.word	0x20000380
 8002668:	20000378 	.word	0x20000378
 800266c:	20000384 	.word	0x20000384
 8002670:	2000037c 	.word	0x2000037c

		}
	}
 8002674:	bf00      	nop

	// TASK IMU

	if(tick >= getNextExecution(&IMU_TASK)){
 8002676:	488c      	ldr	r0, [pc, #560]	; (80028a8 <scheduler+0x3f8>)
 8002678:	f7ff fcfd 	bl	8002076 <getNextExecution>
 800267c:	4602      	mov	r2, r0
 800267e:	4b8b      	ldr	r3, [pc, #556]	; (80028ac <scheduler+0x3fc>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	429a      	cmp	r2, r3
 8002684:	d80b      	bhi.n	800269e <scheduler+0x1ee>
		IMU_TASK.last_call = tick;
 8002686:	4b89      	ldr	r3, [pc, #548]	; (80028ac <scheduler+0x3fc>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a87      	ldr	r2, [pc, #540]	; (80028a8 <scheduler+0x3f8>)
 800268c:	6013      	str	r3, [r2, #0]
		//icm20601_read_data_raw(&IMU1, accel1_raw_buf);
		//icm20601_convert_data(&IMU1, accel1_val, accel1_raw_buf);
		icm20601_read_data(&IMU1, accel1_val);
 800268e:	4988      	ldr	r1, [pc, #544]	; (80028b0 <scheduler+0x400>)
 8002690:	4888      	ldr	r0, [pc, #544]	; (80028b4 <scheduler+0x404>)
 8002692:	f001 ff79 	bl	8004588 <icm20601_read_data>

		//icm20601_read_data_raw(&IMU2, accel2_raw_buf);
		//icm20601_convert_data(&IMU2, accel2_val, accel2_raw_buf);
		icm20601_read_data(&IMU2, accel2_val);
 8002696:	4988      	ldr	r1, [pc, #544]	; (80028b8 <scheduler+0x408>)
 8002698:	4888      	ldr	r0, [pc, #544]	; (80028bc <scheduler+0x40c>)
 800269a:	f001 ff75 	bl	8004588 <icm20601_read_data>
	}

	// TASK SHOCK ACCEL

	if(tick >= getNextExecution(&ACCEL_TASK)){
 800269e:	4888      	ldr	r0, [pc, #544]	; (80028c0 <scheduler+0x410>)
 80026a0:	f7ff fce9 	bl	8002076 <getNextExecution>
 80026a4:	4602      	mov	r2, r0
 80026a6:	4b81      	ldr	r3, [pc, #516]	; (80028ac <scheduler+0x3fc>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d80b      	bhi.n	80026c6 <scheduler+0x216>
		ACCEL_TASK.last_call = tick;
 80026ae:	4b7f      	ldr	r3, [pc, #508]	; (80028ac <scheduler+0x3fc>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a83      	ldr	r2, [pc, #524]	; (80028c0 <scheduler+0x410>)
 80026b4:	6013      	str	r3, [r2, #0]
		h3l_read_raw(&ACCEL, accel_raw);
 80026b6:	4983      	ldr	r1, [pc, #524]	; (80028c4 <scheduler+0x414>)
 80026b8:	4883      	ldr	r0, [pc, #524]	; (80028c8 <scheduler+0x418>)
 80026ba:	f001 fb47 	bl	8003d4c <h3l_read_raw>
		h3l_convert(&ACCEL, accel);
 80026be:	4983      	ldr	r1, [pc, #524]	; (80028cc <scheduler+0x41c>)
 80026c0:	4881      	ldr	r0, [pc, #516]	; (80028c8 <scheduler+0x418>)
 80026c2:	f001 fc41 	bl	8003f48 <h3l_convert>
	}

	// TASK ADC
	if(tick >= getNextExecution(&ADC_TASK)){
 80026c6:	4882      	ldr	r0, [pc, #520]	; (80028d0 <scheduler+0x420>)
 80026c8:	f7ff fcd5 	bl	8002076 <getNextExecution>
 80026cc:	4602      	mov	r2, r0
 80026ce:	4b77      	ldr	r3, [pc, #476]	; (80028ac <scheduler+0x3fc>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d826      	bhi.n	8002724 <scheduler+0x274>
		ADC_TASK.last_call = tick;
 80026d6:	4b75      	ldr	r3, [pc, #468]	; (80028ac <scheduler+0x3fc>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a7d      	ldr	r2, [pc, #500]	; (80028d0 <scheduler+0x420>)
 80026dc:	6013      	str	r3, [r2, #0]
		read_ADC(adc_dat);
 80026de:	487d      	ldr	r0, [pc, #500]	; (80028d4 <scheduler+0x424>)
 80026e0:	f7fe fcce 	bl	8001080 <read_ADC>
		V_TD1 = adc_dat[0];
 80026e4:	4b7b      	ldr	r3, [pc, #492]	; (80028d4 <scheduler+0x424>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a7b      	ldr	r2, [pc, #492]	; (80028d8 <scheduler+0x428>)
 80026ea:	6013      	str	r3, [r2, #0]
		V_TD2 = adc_dat[1];
 80026ec:	4b79      	ldr	r3, [pc, #484]	; (80028d4 <scheduler+0x424>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	4a7a      	ldr	r2, [pc, #488]	; (80028dc <scheduler+0x42c>)
 80026f2:	6013      	str	r3, [r2, #0]
		V_LDR = adc_dat[2];
 80026f4:	4b77      	ldr	r3, [pc, #476]	; (80028d4 <scheduler+0x424>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	4a79      	ldr	r2, [pc, #484]	; (80028e0 <scheduler+0x430>)
 80026fa:	6013      	str	r3, [r2, #0]
		I_BAT1 = adc_dat[3];
 80026fc:	4b75      	ldr	r3, [pc, #468]	; (80028d4 <scheduler+0x424>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	4a78      	ldr	r2, [pc, #480]	; (80028e4 <scheduler+0x434>)
 8002702:	6013      	str	r3, [r2, #0]
		I_BAT2 = adc_dat[4];
 8002704:	4b73      	ldr	r3, [pc, #460]	; (80028d4 <scheduler+0x424>)
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	4a77      	ldr	r2, [pc, #476]	; (80028e8 <scheduler+0x438>)
 800270a:	6013      	str	r3, [r2, #0]
		V_BAT1 = adc_dat[5];
 800270c:	4b71      	ldr	r3, [pc, #452]	; (80028d4 <scheduler+0x424>)
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	4a76      	ldr	r2, [pc, #472]	; (80028ec <scheduler+0x43c>)
 8002712:	6013      	str	r3, [r2, #0]
		V_BAT2 = adc_dat[6];
 8002714:	4b6f      	ldr	r3, [pc, #444]	; (80028d4 <scheduler+0x424>)
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	4a75      	ldr	r2, [pc, #468]	; (80028f0 <scheduler+0x440>)
 800271a:	6013      	str	r3, [r2, #0]
		t_cpu = adc_dat[7];
 800271c:	4b6d      	ldr	r3, [pc, #436]	; (80028d4 <scheduler+0x424>)
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	4a74      	ldr	r2, [pc, #464]	; (80028f4 <scheduler+0x444>)
 8002722:	6013      	str	r3, [r2, #0]
		t_p2 = 20;
#endif


	// TASK STATE ESTIMATION
	if((tick >= getNextExecution(&STATE_EST_TASK)) || (FAKE_DATA == 1)){
 8002724:	4874      	ldr	r0, [pc, #464]	; (80028f8 <scheduler+0x448>)
 8002726:	f7ff fca6 	bl	8002076 <getNextExecution>
 800272a:	4602      	mov	r2, r0
 800272c:	4b5f      	ldr	r3, [pc, #380]	; (80028ac <scheduler+0x3fc>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	f200 80fd 	bhi.w	8002930 <scheduler+0x480>
		STATE_EST_TASK.last_call = tick;
 8002736:	4b5d      	ldr	r3, [pc, #372]	; (80028ac <scheduler+0x3fc>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a6f      	ldr	r2, [pc, #444]	; (80028f8 <scheduler+0x448>)
 800273c:	6013      	str	r3, [r2, #0]

		// call state estimation

		// feed in sensor values
		state_est_state.state_est_meas.baro_data[0].pressure = p1;
 800273e:	4b6f      	ldr	r3, [pc, #444]	; (80028fc <scheduler+0x44c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a6f      	ldr	r2, [pc, #444]	; (8002900 <scheduler+0x450>)
 8002744:	64d3      	str	r3, [r2, #76]	; 0x4c
		state_est_state.state_est_meas.baro_data[0].temperature = t_p1;
 8002746:	4b6f      	ldr	r3, [pc, #444]	; (8002904 <scheduler+0x454>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a6d      	ldr	r2, [pc, #436]	; (8002900 <scheduler+0x450>)
 800274c:	6513      	str	r3, [r2, #80]	; 0x50
		state_est_state.state_est_meas.baro_data[0].ts = tick;
 800274e:	4b57      	ldr	r3, [pc, #348]	; (80028ac <scheduler+0x3fc>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a6b      	ldr	r2, [pc, #428]	; (8002900 <scheduler+0x450>)
 8002754:	6553      	str	r3, [r2, #84]	; 0x54

		state_est_state.state_est_meas.imu_data[0].acc_x = -accel1_val[2];
 8002756:	4b56      	ldr	r3, [pc, #344]	; (80028b0 <scheduler+0x400>)
 8002758:	edd3 7a02 	vldr	s15, [r3, #8]
 800275c:	eef1 7a67 	vneg.f32	s15, s15
 8002760:	4b67      	ldr	r3, [pc, #412]	; (8002900 <scheduler+0x450>)
 8002762:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
		state_est_state.state_est_meas.imu_data[0].ts = tick;
 8002766:	4b51      	ldr	r3, [pc, #324]	; (80028ac <scheduler+0x3fc>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a65      	ldr	r2, [pc, #404]	; (8002900 <scheduler+0x450>)
 800276c:	67d3      	str	r3, [r2, #124]	; 0x7c

		state_est_state.state_est_meas.baro_data[1].pressure = p2;
 800276e:	4b66      	ldr	r3, [pc, #408]	; (8002908 <scheduler+0x458>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a63      	ldr	r2, [pc, #396]	; (8002900 <scheduler+0x450>)
 8002774:	6593      	str	r3, [r2, #88]	; 0x58
		state_est_state.state_est_meas.baro_data[1].temperature = t_p2;
 8002776:	4b65      	ldr	r3, [pc, #404]	; (800290c <scheduler+0x45c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a61      	ldr	r2, [pc, #388]	; (8002900 <scheduler+0x450>)
 800277c:	65d3      	str	r3, [r2, #92]	; 0x5c
		state_est_state.state_est_meas.baro_data[1].ts = tick;
 800277e:	4b4b      	ldr	r3, [pc, #300]	; (80028ac <scheduler+0x3fc>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a5f      	ldr	r2, [pc, #380]	; (8002900 <scheduler+0x450>)
 8002784:	6613      	str	r3, [r2, #96]	; 0x60

		state_est_state.state_est_meas.imu_data[1].acc_x = -accel2_val[2];
 8002786:	4b4c      	ldr	r3, [pc, #304]	; (80028b8 <scheduler+0x408>)
 8002788:	edd3 7a02 	vldr	s15, [r3, #8]
 800278c:	eef1 7a67 	vneg.f32	s15, s15
 8002790:	4b5b      	ldr	r3, [pc, #364]	; (8002900 <scheduler+0x450>)
 8002792:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
		state_est_state.state_est_meas.imu_data[1].ts = tick;
 8002796:	4b45      	ldr	r3, [pc, #276]	; (80028ac <scheduler+0x3fc>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a59      	ldr	r2, [pc, #356]	; (8002900 <scheduler+0x450>)
 800279c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

		state_est_step(tick, &state_est_state, true);
 80027a0:	4b42      	ldr	r3, [pc, #264]	; (80028ac <scheduler+0x3fc>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2201      	movs	r2, #1
 80027a6:	4956      	ldr	r1, [pc, #344]	; (8002900 <scheduler+0x450>)
 80027a8:	4618      	mov	r0, r3
 80027aa:	f004 f923 	bl	80069f4 <state_est_step>


		// timer start
		if ((state_est_state.flight_phase_detection.flight_phase == THRUSTING) || (launch_detect(accel1_val, accel2_val) == 1) ){
 80027ae:	4b54      	ldr	r3, [pc, #336]	; (8002900 <scheduler+0x450>)
 80027b0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80027b4:	2b03      	cmp	r3, #3
 80027b6:	d006      	beq.n	80027c6 <scheduler+0x316>
 80027b8:	493f      	ldr	r1, [pc, #252]	; (80028b8 <scheduler+0x408>)
 80027ba:	483d      	ldr	r0, [pc, #244]	; (80028b0 <scheduler+0x400>)
 80027bc:	f7ff fc6a 	bl	8002094 <launch_detect>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d10b      	bne.n	80027de <scheduler+0x32e>
			// these functions will be called in each run, but timers are only started if they are inactive,
			// once they are active, the function call is ignored
			start_timer(&mach_timer, &tick);
 80027c6:	4939      	ldr	r1, [pc, #228]	; (80028ac <scheduler+0x3fc>)
 80027c8:	4851      	ldr	r0, [pc, #324]	; (8002910 <scheduler+0x460>)
 80027ca:	f7ff f9d3 	bl	8001b74 <start_timer>
			start_timer(&fail_safe_timer, &tick);
 80027ce:	4937      	ldr	r1, [pc, #220]	; (80028ac <scheduler+0x3fc>)
 80027d0:	4850      	ldr	r0, [pc, #320]	; (8002914 <scheduler+0x464>)
 80027d2:	f7ff f9cf 	bl	8001b74 <start_timer>
			start_timer(&fail_safe_timer_main, &tick);
 80027d6:	4935      	ldr	r1, [pc, #212]	; (80028ac <scheduler+0x3fc>)
 80027d8:	484f      	ldr	r0, [pc, #316]	; (8002918 <scheduler+0x468>)
 80027da:	f7ff f9cb 	bl	8001b74 <start_timer>
		}

		if ((tick > t0 + 30000) && (CHECK_FLAG == 0)){
 80027de:	4b4f      	ldr	r3, [pc, #316]	; (800291c <scheduler+0x46c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 80027e6:	3330      	adds	r3, #48	; 0x30
 80027e8:	4a30      	ldr	r2, [pc, #192]	; (80028ac <scheduler+0x3fc>)
 80027ea:	6812      	ldr	r2, [r2, #0]
 80027ec:	4293      	cmp	r3, r2
 80027ee:	f080 809f 	bcs.w	8002930 <scheduler+0x480>
 80027f2:	4b4b      	ldr	r3, [pc, #300]	; (8002920 <scheduler+0x470>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f040 809a 	bne.w	8002930 <scheduler+0x480>

			// Perform sanity check of state estimation 30 seconds after bootup!
			// this is in steady state on the launchpad

			uint8_t passed = 0;
 80027fc:	2300      	movs	r3, #0
 80027fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
			float check_a = -accel1_val[2];
 8002802:	4b2b      	ldr	r3, [pc, #172]	; (80028b0 <scheduler+0x400>)
 8002804:	edd3 7a02 	vldr	s15, [r3, #8]
 8002808:	eef1 7a67 	vneg.f32	s15, s15
 800280c:	edc7 7a44 	vstr	s15, [r7, #272]	; 0x110
			float check_h = (float)state_est_state.state_est_data.position_world[2] / 1000.0;
 8002810:	4b3b      	ldr	r3, [pc, #236]	; (8002900 <scheduler+0x450>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	ee07 3a90 	vmov	s15, r3
 8002818:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800281c:	eddf 6a41 	vldr	s13, [pc, #260]	; 8002924 <scheduler+0x474>
 8002820:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002824:	edc7 7a43 	vstr	s15, [r7, #268]	; 0x10c
			float check_v = (float)state_est_state.state_est_data.velocity_rocket[0] / 1000.0;
 8002828:	4b35      	ldr	r3, [pc, #212]	; (8002900 <scheduler+0x450>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	ee07 3a90 	vmov	s15, r3
 8002830:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002834:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8002924 <scheduler+0x474>
 8002838:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800283c:	edc7 7a42 	vstr	s15, [r7, #264]	; 0x108
			if (state_est_sanity_check(&check_a, &check_h, &check_v) == 0){
 8002840:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8002844:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8002848:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800284c:	4618      	mov	r0, r3
 800284e:	f000 fcb6 	bl	80031be <state_est_sanity_check>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d004      	beq.n	8002862 <scheduler+0x3b2>
#if DEBUG_PRINT == 1
				printf("sanity check for state estimation failed! \n");
#endif
			} else {
				passed ++;
 8002858:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800285c:	3301      	adds	r3, #1
 800285e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
			}
			check_a = -accel2_val[2];
 8002862:	4b15      	ldr	r3, [pc, #84]	; (80028b8 <scheduler+0x408>)
 8002864:	edd3 7a02 	vldr	s15, [r3, #8]
 8002868:	eef1 7a67 	vneg.f32	s15, s15
 800286c:	edc7 7a44 	vstr	s15, [r7, #272]	; 0x110
			if (state_est_sanity_check(&check_a, &check_h, &check_v) == 0){
 8002870:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8002874:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8002878:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800287c:	4618      	mov	r0, r3
 800287e:	f000 fc9e 	bl	80031be <state_est_sanity_check>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d004      	beq.n	8002892 <scheduler+0x3e2>
#if DEBUG_PRINT == 1
				printf("sanity check for state estimation failed! \n");
#endif
			} else {
				passed ++;
 8002888:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800288c:	3301      	adds	r3, #1
 800288e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
			}
			CHECK_FLAG = 1;
 8002892:	4b23      	ldr	r3, [pc, #140]	; (8002920 <scheduler+0x470>)
 8002894:	2201      	movs	r2, #1
 8002896:	701a      	strb	r2, [r3, #0]
			if (passed != 2){
 8002898:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800289c:	2b02      	cmp	r3, #2
 800289e:	d043      	beq.n	8002928 <scheduler+0x478>
				if (IGNORE_ERRORS == 0){
#if DEBUG_PRINT == 1
					printf("state est checkup failed!\n");
#endif
					while (1){
						play_FAIL_sound();
 80028a0:	f7ff f8ce 	bl	8001a40 <play_FAIL_sound>
 80028a4:	e7fc      	b.n	80028a0 <scheduler+0x3f0>
 80028a6:	bf00      	nop
 80028a8:	20000358 	.word	0x20000358
 80028ac:	20013c80 	.word	0x20013c80
 80028b0:	20013cc8 	.word	0x20013cc8
 80028b4:	20000114 	.word	0x20000114
 80028b8:	20013c90 	.word	0x20013c90
 80028bc:	20000124 	.word	0x20000124
 80028c0:	20000368 	.word	0x20000368
 80028c4:	2000c18c 	.word	0x2000c18c
 80028c8:	20000144 	.word	0x20000144
 80028cc:	2000c1a4 	.word	0x2000c1a4
 80028d0:	20000020 	.word	0x20000020
 80028d4:	20013ce4 	.word	0x20013ce4
 80028d8:	2000c1a0 	.word	0x2000c1a0
 80028dc:	2000fd10 	.word	0x2000fd10
 80028e0:	20013c84 	.word	0x20013c84
 80028e4:	2000fd14 	.word	0x2000fd14
 80028e8:	20013c8c 	.word	0x20013c8c
 80028ec:	20013cb0 	.word	0x20013cb0
 80028f0:	2000fd1c 	.word	0x2000fd1c
 80028f4:	20004ab8 	.word	0x20004ab8
 80028f8:	20000040 	.word	0x20000040
 80028fc:	20000378 	.word	0x20000378
 8002900:	20000398 	.word	0x20000398
 8002904:	20000380 	.word	0x20000380
 8002908:	2000037c 	.word	0x2000037c
 800290c:	20000384 	.word	0x20000384
 8002910:	20000090 	.word	0x20000090
 8002914:	2000009c 	.word	0x2000009c
 8002918:	200000a8 	.word	0x200000a8
 800291c:	20013cac 	.word	0x20013cac
 8002920:	20000814 	.word	0x20000814
 8002924:	447a0000 	.word	0x447a0000
				}
			}
#if DEBUG_PRINT == 1
			printf("state est ok\n");
#endif
			play_OK_sound();
 8002928:	f7ff f866 	bl	80019f8 <play_OK_sound>
			play_OK_sound();
 800292c:	f7ff f864 	bl	80019f8 <play_OK_sound>

	}


	// if mach timer has passed, software arm the system
	if (check_timer(&mach_timer, &tick) == 1) armed = 1;
 8002930:	4951      	ldr	r1, [pc, #324]	; (8002a78 <scheduler+0x5c8>)
 8002932:	4852      	ldr	r0, [pc, #328]	; (8002a7c <scheduler+0x5cc>)
 8002934:	f7ff f937 	bl	8001ba6 <check_timer>
 8002938:	4603      	mov	r3, r0
 800293a:	2b01      	cmp	r3, #1
 800293c:	d102      	bne.n	8002944 <scheduler+0x494>
 800293e:	4b50      	ldr	r3, [pc, #320]	; (8002a80 <scheduler+0x5d0>)
 8002940:	2201      	movs	r2, #1
 8002942:	701a      	strb	r2, [r3, #0]

	// if fail_safe timer has passed, skip to descent flight phase
	if (check_timer(&fail_safe_timer, &tick) == 1) {
 8002944:	494c      	ldr	r1, [pc, #304]	; (8002a78 <scheduler+0x5c8>)
 8002946:	484f      	ldr	r0, [pc, #316]	; (8002a84 <scheduler+0x5d4>)
 8002948:	f7ff f92d 	bl	8001ba6 <check_timer>
 800294c:	4603      	mov	r3, r0
 800294e:	2b01      	cmp	r3, #1
 8002950:	d117      	bne.n	8002982 <scheduler+0x4d2>
		fire_HAWKs(&armed);
 8002952:	484b      	ldr	r0, [pc, #300]	; (8002a80 <scheduler+0x5d0>)
 8002954:	f7fe fb24 	bl	8000fa0 <fire_HAWKs>
		event = HAWKS;
 8002958:	4b4b      	ldr	r3, [pc, #300]	; (8002a88 <scheduler+0x5d8>)
 800295a:	2201      	movs	r2, #1
 800295c:	701a      	strb	r2, [r3, #0]
		if (state_est_state.flight_phase_detection.flight_phase < DROGUE_DESCENT){
 800295e:	4b4b      	ldr	r3, [pc, #300]	; (8002a8c <scheduler+0x5dc>)
 8002960:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002964:	2b07      	cmp	r3, #7
 8002966:	d808      	bhi.n	800297a <scheduler+0x4ca>
			printf("TIMER FS OVERWRITING WITH DROGUE\n");
#endif
			// if fail_safe timer has initiated drogue, we need to adjust the second fail safe timer
			// since we spent some part of the descent in ballistic flight, thus falling faster than
			// with drogue exactly at apogee
			fail_safe_timer_main.end = HAL_GetTick() + FAIL_SAFE_MAIN_DELTA;
 8002968:	f004 fdfc 	bl	8007564 <HAL_GetTick>
 800296c:	4603      	mov	r3, r0
 800296e:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8002972:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002976:	4a46      	ldr	r2, [pc, #280]	; (8002a90 <scheduler+0x5e0>)
 8002978:	6053      	str	r3, [r2, #4]
		}
		state_est_state.flight_phase_detection.flight_phase = DROGUE_DESCENT;
 800297a:	4b44      	ldr	r3, [pc, #272]	; (8002a8c <scheduler+0x5dc>)
 800297c:	2208      	movs	r2, #8
 800297e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	}

	// if fail_safe timer has passed, skip to descent flight phase
	if (check_timer(&fail_safe_timer_main, &tick) == 1) {
 8002982:	493d      	ldr	r1, [pc, #244]	; (8002a78 <scheduler+0x5c8>)
 8002984:	4842      	ldr	r0, [pc, #264]	; (8002a90 <scheduler+0x5e0>)
 8002986:	f7ff f90e 	bl	8001ba6 <check_timer>
 800298a:	4603      	mov	r3, r0
 800298c:	2b01      	cmp	r3, #1
 800298e:	d108      	bne.n	80029a2 <scheduler+0x4f2>
		fire_HAWKs(&armed);
 8002990:	483b      	ldr	r0, [pc, #236]	; (8002a80 <scheduler+0x5d0>)
 8002992:	f7fe fb05 	bl	8000fa0 <fire_HAWKs>
		fire_TDs(&armed);
 8002996:	483a      	ldr	r0, [pc, #232]	; (8002a80 <scheduler+0x5d0>)
 8002998:	f7fe fb32 	bl	8001000 <fire_TDs>
		event = TENDER;
 800299c:	4b3a      	ldr	r3, [pc, #232]	; (8002a88 <scheduler+0x5d8>)
 800299e:	2202      	movs	r2, #2
 80029a0:	701a      	strb	r2, [r3, #0]
	}



	// act according to flight phase
	switch(state_est_state.flight_phase_detection.flight_phase){
 80029a2:	4b3a      	ldr	r3, [pc, #232]	; (8002a8c <scheduler+0x5dc>)
 80029a4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80029a8:	3b01      	subs	r3, #1
 80029aa:	2b0a      	cmp	r3, #10
 80029ac:	d85a      	bhi.n	8002a64 <scheduler+0x5b4>
 80029ae:	a201      	add	r2, pc, #4	; (adr r2, 80029b4 <scheduler+0x504>)
 80029b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b4:	08002a6f 	.word	0x08002a6f
 80029b8:	08002a6f 	.word	0x08002a6f
 80029bc:	08002a6f 	.word	0x08002a6f
 80029c0:	08002a6f 	.word	0x08002a6f
 80029c4:	08002a6f 	.word	0x08002a6f
 80029c8:	08002a6f 	.word	0x08002a6f
 80029cc:	08002a6f 	.word	0x08002a6f
 80029d0:	080029e1 	.word	0x080029e1
 80029d4:	080029ef 	.word	0x080029ef
 80029d8:	080029fd 	.word	0x080029fd
 80029dc:	08002a1b 	.word	0x08002a1b
			break;
		case APOGEE_APPROACH:
			break;
		case DROGUE_DESCENT:
			// apogee
			fire_HAWKs(&armed);
 80029e0:	4827      	ldr	r0, [pc, #156]	; (8002a80 <scheduler+0x5d0>)
 80029e2:	f7fe fadd 	bl	8000fa0 <fire_HAWKs>
			event = HAWKS;
 80029e6:	4b28      	ldr	r3, [pc, #160]	; (8002a88 <scheduler+0x5d8>)
 80029e8:	2201      	movs	r2, #1
 80029ea:	701a      	strb	r2, [r3, #0]
			break;
 80029ec:	e05f      	b.n	8002aae <scheduler+0x5fe>
		case BALLISTIC_DESCENT:
			// oh-oh...
			fire_HAWKs(&armed);
 80029ee:	4824      	ldr	r0, [pc, #144]	; (8002a80 <scheduler+0x5d0>)
 80029f0:	f7fe fad6 	bl	8000fa0 <fire_HAWKs>
			event = HAWKS;
 80029f4:	4b24      	ldr	r3, [pc, #144]	; (8002a88 <scheduler+0x5d8>)
 80029f6:	2201      	movs	r2, #1
 80029f8:	701a      	strb	r2, [r3, #0]
			//state_est_state.flight_phase_detection.flight_phase = DROGUE_DESCENT;
			break;
 80029fa:	e058      	b.n	8002aae <scheduler+0x5fe>
		case MAIN_DESCENT:
			// second event
			if (TD_fired == 0){
 80029fc:	4b25      	ldr	r3, [pc, #148]	; (8002a94 <scheduler+0x5e4>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d136      	bne.n	8002a72 <scheduler+0x5c2>
				fire_TDs(&armed);
 8002a04:	481e      	ldr	r0, [pc, #120]	; (8002a80 <scheduler+0x5d0>)
 8002a06:	f7fe fafb 	bl	8001000 <fire_TDs>
				TD_fired = tick;
 8002a0a:	4b1b      	ldr	r3, [pc, #108]	; (8002a78 <scheduler+0x5c8>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a21      	ldr	r2, [pc, #132]	; (8002a94 <scheduler+0x5e4>)
 8002a10:	6013      	str	r3, [r2, #0]
				event = TENDER;
 8002a12:	4b1d      	ldr	r3, [pc, #116]	; (8002a88 <scheduler+0x5d8>)
 8002a14:	2202      	movs	r2, #2
 8002a16:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002a18:	e02b      	b.n	8002a72 <scheduler+0x5c2>
		case TOUCHDOWN:
			if ((fail_safe_timer.active == 0) && (fail_safe_timer_main.active == 0)){
 8002a1a:	4b1a      	ldr	r3, [pc, #104]	; (8002a84 <scheduler+0x5d4>)
 8002a1c:	7a1b      	ldrb	r3, [r3, #8]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d144      	bne.n	8002aac <scheduler+0x5fc>
 8002a22:	4b1b      	ldr	r3, [pc, #108]	; (8002a90 <scheduler+0x5e0>)
 8002a24:	7a1b      	ldrb	r3, [r3, #8]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d140      	bne.n	8002aac <scheduler+0x5fc>
				fire_HAWKs(&armed);
 8002a2a:	4815      	ldr	r0, [pc, #84]	; (8002a80 <scheduler+0x5d0>)
 8002a2c:	f7fe fab8 	bl	8000fa0 <fire_HAWKs>
				fire_TDs(&armed);
 8002a30:	4813      	ldr	r0, [pc, #76]	; (8002a80 <scheduler+0x5d0>)
 8002a32:	f7fe fae5 	bl	8001000 <fire_TDs>
				play(440,100);
 8002a36:	eddf 0a18 	vldr	s1, [pc, #96]	; 8002a98 <scheduler+0x5e8>
 8002a3a:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8002a9c <scheduler+0x5ec>
 8002a3e:	f7fe ff9b 	bl	8001978 <play>
				play(659.25,100);
 8002a42:	eddf 0a15 	vldr	s1, [pc, #84]	; 8002a98 <scheduler+0x5e8>
 8002a46:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8002aa0 <scheduler+0x5f0>
 8002a4a:	f7fe ff95 	bl	8001978 <play>
				play(880,200);
 8002a4e:	eddf 0a15 	vldr	s1, [pc, #84]	; 8002aa4 <scheduler+0x5f4>
 8002a52:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8002aa8 <scheduler+0x5f8>
 8002a56:	f7fe ff8f 	bl	8001978 <play>
				HAL_Delay(600);
 8002a5a:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002a5e:	f004 fd8d 	bl	800757c <HAL_Delay>
			}
			break;
 8002a62:	e023      	b.n	8002aac <scheduler+0x5fc>
		default:
			state_est_state.flight_phase_detection.flight_phase = TOUCHDOWN;
 8002a64:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <scheduler+0x5dc>)
 8002a66:	220b      	movs	r2, #11
 8002a68:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
			break;
 8002a6c:	e01f      	b.n	8002aae <scheduler+0x5fe>
			break;
 8002a6e:	bf00      	nop
 8002a70:	e01d      	b.n	8002aae <scheduler+0x5fe>
			break;
 8002a72:	bf00      	nop
 8002a74:	e01b      	b.n	8002aae <scheduler+0x5fe>
 8002a76:	bf00      	nop
 8002a78:	20013c80 	.word	0x20013c80
 8002a7c:	20000090 	.word	0x20000090
 8002a80:	2000038d 	.word	0x2000038d
 8002a84:	2000009c 	.word	0x2000009c
 8002a88:	2000038e 	.word	0x2000038e
 8002a8c:	20000398 	.word	0x20000398
 8002a90:	200000a8 	.word	0x200000a8
 8002a94:	20000818 	.word	0x20000818
 8002a98:	42c80000 	.word	0x42c80000
 8002a9c:	43dc0000 	.word	0x43dc0000
 8002aa0:	4424d000 	.word	0x4424d000
 8002aa4:	43480000 	.word	0x43480000
 8002aa8:	445c0000 	.word	0x445c0000
			break;
 8002aac:	bf00      	nop
	}


	// TASK LOGGING
	if(tick >= getNextExecution(&LOG_TASK)){
 8002aae:	489d      	ldr	r0, [pc, #628]	; (8002d24 <scheduler+0x874>)
 8002ab0:	f7ff fae1 	bl	8002076 <getNextExecution>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	4b9c      	ldr	r3, [pc, #624]	; (8002d28 <scheduler+0x878>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	f200 81f7 	bhi.w	8002eae <scheduler+0x9fe>
		LOG_TASK.last_call = tick;
 8002ac0:	4b99      	ldr	r3, [pc, #612]	; (8002d28 <scheduler+0x878>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a97      	ldr	r2, [pc, #604]	; (8002d24 <scheduler+0x874>)
 8002ac6:	6013      	str	r3, [r2, #0]
		flight_phase = state_est_state.flight_phase_detection.flight_phase;
 8002ac8:	4b98      	ldr	r3, [pc, #608]	; (8002d2c <scheduler+0x87c>)
 8002aca:	f893 23f4 	ldrb.w	r2, [r3, #1012]	; 0x3f4
 8002ace:	4b98      	ldr	r3, [pc, #608]	; (8002d30 <scheduler+0x880>)
 8002ad0:	701a      	strb	r2, [r3, #0]
		alt = (float)state_est_state.state_est_data.position_world[2] / 1000.0;
 8002ad2:	4b96      	ldr	r3, [pc, #600]	; (8002d2c <scheduler+0x87c>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	ee07 3a90 	vmov	s15, r3
 8002ada:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ade:	eddf 6a95 	vldr	s13, [pc, #596]	; 8002d34 <scheduler+0x884>
 8002ae2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ae6:	4b94      	ldr	r3, [pc, #592]	; (8002d38 <scheduler+0x888>)
 8002ae8:	edc3 7a00 	vstr	s15, [r3]
		// just for debugging
		//t_cpu = state_est_state.kf_state.y[0];
		velocity = (float)state_est_state.state_est_data.velocity_rocket[0] / 1000.0;
 8002aec:	4b8f      	ldr	r3, [pc, #572]	; (8002d2c <scheduler+0x87c>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	ee07 3a90 	vmov	s15, r3
 8002af4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002af8:	eddf 6a8e 	vldr	s13, [pc, #568]	; 8002d34 <scheduler+0x884>
 8002afc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b00:	4b8e      	ldr	r3, [pc, #568]	; (8002d3c <scheduler+0x88c>)
 8002b02:	edc3 7a00 	vstr	s15, [r3]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002b06:	4b88      	ldr	r3, [pc, #544]	; (8002d28 <scheduler+0x878>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002b0e:	4b8c      	ldr	r3, [pc, #560]	; (8002d40 <scheduler+0x890>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002b16:	4b8b      	ldr	r3, [pc, #556]	; (8002d44 <scheduler+0x894>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002b1e:	4b84      	ldr	r3, [pc, #528]	; (8002d30 <scheduler+0x880>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002b26:	4b88      	ldr	r3, [pc, #544]	; (8002d48 <scheduler+0x898>)
 8002b28:	7a1b      	ldrb	r3, [r3, #8]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002b2a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002b2e:	4b87      	ldr	r3, [pc, #540]	; (8002d4c <scheduler+0x89c>)
 8002b30:	7a1b      	ldrb	r3, [r3, #8]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002b32:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002b36:	4b86      	ldr	r3, [pc, #536]	; (8002d50 <scheduler+0x8a0>)
 8002b38:	7a1b      	ldrb	r3, [r3, #8]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002b3a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002b3e:	4b7e      	ldr	r3, [pc, #504]	; (8002d38 <scheduler+0x888>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fd fd00 	bl	8000548 <__aeabi_f2d>
 8002b48:	e9c7 0138 	strd	r0, r1, [r7, #224]	; 0xe0
 8002b4c:	4b7b      	ldr	r3, [pc, #492]	; (8002d3c <scheduler+0x88c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7fd fcf9 	bl	8000548 <__aeabi_f2d>
 8002b56:	e9c7 0136 	strd	r0, r1, [r7, #216]	; 0xd8
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002b5a:	4b7e      	ldr	r3, [pc, #504]	; (8002d54 <scheduler+0x8a4>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7fd fcf2 	bl	8000548 <__aeabi_f2d>
 8002b64:	e9c7 0134 	strd	r0, r1, [r7, #208]	; 0xd0
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002b68:	4b7a      	ldr	r3, [pc, #488]	; (8002d54 <scheduler+0x8a4>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7fd fceb 	bl	8000548 <__aeabi_f2d>
 8002b72:	e9c7 0132 	strd	r0, r1, [r7, #200]	; 0xc8
 8002b76:	4b78      	ldr	r3, [pc, #480]	; (8002d58 <scheduler+0x8a8>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7fd fce4 	bl	8000548 <__aeabi_f2d>
 8002b80:	e9c7 0130 	strd	r0, r1, [r7, #192]	; 0xc0
 8002b84:	4b75      	ldr	r3, [pc, #468]	; (8002d5c <scheduler+0x8ac>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fd fcdd 	bl	8000548 <__aeabi_f2d>
 8002b8e:	e9c7 012e 	strd	r0, r1, [r7, #184]	; 0xb8
 8002b92:	4b73      	ldr	r3, [pc, #460]	; (8002d60 <scheduler+0x8b0>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fd fcd6 	bl	8000548 <__aeabi_f2d>
 8002b9c:	e9c7 012c 	strd	r0, r1, [r7, #176]	; 0xb0
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002ba0:	4b70      	ldr	r3, [pc, #448]	; (8002d64 <scheduler+0x8b4>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7fd fccf 	bl	8000548 <__aeabi_f2d>
 8002baa:	e9c7 012a 	strd	r0, r1, [r7, #168]	; 0xa8
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002bae:	4b6e      	ldr	r3, [pc, #440]	; (8002d68 <scheduler+0x8b8>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7fd fcc8 	bl	8000548 <__aeabi_f2d>
 8002bb8:	e9c7 0128 	strd	r0, r1, [r7, #160]	; 0xa0
 8002bbc:	4b6b      	ldr	r3, [pc, #428]	; (8002d6c <scheduler+0x8bc>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7fd fcc1 	bl	8000548 <__aeabi_f2d>
 8002bc6:	e9c7 0126 	strd	r0, r1, [r7, #152]	; 0x98
 8002bca:	4b69      	ldr	r3, [pc, #420]	; (8002d70 <scheduler+0x8c0>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fd fcba 	bl	8000548 <__aeabi_f2d>
 8002bd4:	e9c7 0124 	strd	r0, r1, [r7, #144]	; 0x90
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002bd8:	4b62      	ldr	r3, [pc, #392]	; (8002d64 <scheduler+0x8b4>)
 8002bda:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7fd fcb3 	bl	8000548 <__aeabi_f2d>
 8002be2:	e9c7 0122 	strd	r0, r1, [r7, #136]	; 0x88
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002be6:	4b5f      	ldr	r3, [pc, #380]	; (8002d64 <scheduler+0x8b4>)
 8002be8:	689b      	ldr	r3, [r3, #8]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fd fcac 	bl	8000548 <__aeabi_f2d>
 8002bf0:	e9c7 0120 	strd	r0, r1, [r7, #128]	; 0x80
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002bf4:	4b5b      	ldr	r3, [pc, #364]	; (8002d64 <scheduler+0x8b4>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fd fca5 	bl	8000548 <__aeabi_f2d>
 8002bfe:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002c02:	4b58      	ldr	r3, [pc, #352]	; (8002d64 <scheduler+0x8b4>)
 8002c04:	691b      	ldr	r3, [r3, #16]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fd fc9e 	bl	8000548 <__aeabi_f2d>
 8002c0c:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002c10:	4b54      	ldr	r3, [pc, #336]	; (8002d64 <scheduler+0x8b4>)
 8002c12:	695b      	ldr	r3, [r3, #20]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7fd fc97 	bl	8000548 <__aeabi_f2d>
 8002c1a:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002c1e:	4b51      	ldr	r3, [pc, #324]	; (8002d64 <scheduler+0x8b4>)
 8002c20:	699b      	ldr	r3, [r3, #24]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7fd fc90 	bl	8000548 <__aeabi_f2d>
 8002c28:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002c2c:	4b4e      	ldr	r3, [pc, #312]	; (8002d68 <scheduler+0x8b8>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7fd fc89 	bl	8000548 <__aeabi_f2d>
 8002c36:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002c3a:	4b4b      	ldr	r3, [pc, #300]	; (8002d68 <scheduler+0x8b8>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7fd fc82 	bl	8000548 <__aeabi_f2d>
 8002c44:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002c48:	4b47      	ldr	r3, [pc, #284]	; (8002d68 <scheduler+0x8b8>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fd fc7b 	bl	8000548 <__aeabi_f2d>
 8002c52:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002c56:	4b44      	ldr	r3, [pc, #272]	; (8002d68 <scheduler+0x8b8>)
 8002c58:	691b      	ldr	r3, [r3, #16]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fd fc74 	bl	8000548 <__aeabi_f2d>
 8002c60:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002c64:	4b40      	ldr	r3, [pc, #256]	; (8002d68 <scheduler+0x8b8>)
 8002c66:	695b      	ldr	r3, [r3, #20]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fd fc6d 	bl	8000548 <__aeabi_f2d>
 8002c6e:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002c72:	4b3d      	ldr	r3, [pc, #244]	; (8002d68 <scheduler+0x8b8>)
 8002c74:	699b      	ldr	r3, [r3, #24]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fd fc66 	bl	8000548 <__aeabi_f2d>
 8002c7c:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002c80:	4b3c      	ldr	r3, [pc, #240]	; (8002d74 <scheduler+0x8c4>)
 8002c82:	681b      	ldr	r3, [r3, #0]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7fd fc5f 	bl	8000548 <__aeabi_f2d>
 8002c8a:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002c8e:	4b39      	ldr	r3, [pc, #228]	; (8002d74 <scheduler+0x8c4>)
 8002c90:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fd fc58 	bl	8000548 <__aeabi_f2d>
 8002c98:	e9c7 0108 	strd	r0, r1, [r7, #32]
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002c9c:	4b35      	ldr	r3, [pc, #212]	; (8002d74 <scheduler+0x8c4>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7fd fc51 	bl	8000548 <__aeabi_f2d>
 8002ca6:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002caa:	4b33      	ldr	r3, [pc, #204]	; (8002d78 <scheduler+0x8c8>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fd fc4a 	bl	8000548 <__aeabi_f2d>
 8002cb4:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002cb8:	4b30      	ldr	r3, [pc, #192]	; (8002d7c <scheduler+0x8cc>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7fd fc43 	bl	8000548 <__aeabi_f2d>
 8002cc2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002cc6:	4b2e      	ldr	r3, [pc, #184]	; (8002d80 <scheduler+0x8d0>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fd fc3c 	bl	8000548 <__aeabi_f2d>
 8002cd0:	e9c7 0100 	strd	r0, r1, [r7]
 8002cd4:	4b2b      	ldr	r3, [pc, #172]	; (8002d84 <scheduler+0x8d4>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7fd fc35 	bl	8000548 <__aeabi_f2d>
 8002cde:	4682      	mov	sl, r0
 8002ce0:	468b      	mov	fp, r1
 8002ce2:	4b29      	ldr	r3, [pc, #164]	; (8002d88 <scheduler+0x8d8>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7fd fc2e 	bl	8000548 <__aeabi_f2d>
 8002cec:	4680      	mov	r8, r0
 8002cee:	4689      	mov	r9, r1
 8002cf0:	4b26      	ldr	r3, [pc, #152]	; (8002d8c <scheduler+0x8dc>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7fd fc27 	bl	8000548 <__aeabi_f2d>
 8002cfa:	4605      	mov	r5, r0
 8002cfc:	460e      	mov	r6, r1
 8002cfe:	4b24      	ldr	r3, [pc, #144]	; (8002d90 <scheduler+0x8e0>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7fd fc20 	bl	8000548 <__aeabi_f2d>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	460c      	mov	r4, r1
 8002d0c:	e9cd 3446 	strd	r3, r4, [sp, #280]	; 0x118
 8002d10:	e9cd 5644 	strd	r5, r6, [sp, #272]	; 0x110
 8002d14:	e9cd 8942 	strd	r8, r9, [sp, #264]	; 0x108
 8002d18:	e9cd ab40 	strd	sl, fp, [sp, #256]	; 0x100
 8002d1c:	ed97 7b00 	vldr	d7, [r7]
 8002d20:	e038      	b.n	8002d94 <scheduler+0x8e4>
 8002d22:	bf00      	nop
 8002d24:	20000030 	.word	0x20000030
 8002d28:	20013c80 	.word	0x20013c80
 8002d2c:	20000398 	.word	0x20000398
 8002d30:	2000038f 	.word	0x2000038f
 8002d34:	447a0000 	.word	0x447a0000
 8002d38:	20000390 	.word	0x20000390
 8002d3c:	20000394 	.word	0x20000394
 8002d40:	2000038d 	.word	0x2000038d
 8002d44:	2000038e 	.word	0x2000038e
 8002d48:	20000090 	.word	0x20000090
 8002d4c:	2000009c 	.word	0x2000009c
 8002d50:	200000a8 	.word	0x200000a8
 8002d54:	20013cc0 	.word	0x20013cc0
 8002d58:	20004ab8 	.word	0x20004ab8
 8002d5c:	20000380 	.word	0x20000380
 8002d60:	20000384 	.word	0x20000384
 8002d64:	20013cc8 	.word	0x20013cc8
 8002d68:	20013c90 	.word	0x20013c90
 8002d6c:	20000378 	.word	0x20000378
 8002d70:	2000037c 	.word	0x2000037c
 8002d74:	2000c1a4 	.word	0x2000c1a4
 8002d78:	2000fd14 	.word	0x2000fd14
 8002d7c:	20013c8c 	.word	0x20013c8c
 8002d80:	20013cb0 	.word	0x20013cb0
 8002d84:	2000fd1c 	.word	0x2000fd1c
 8002d88:	20013c84 	.word	0x20013c84
 8002d8c:	2000c1a0 	.word	0x2000c1a0
 8002d90:	2000fd10 	.word	0x2000fd10
 8002d94:	ed8d 7b3e 	vstr	d7, [sp, #248]	; 0xf8
 8002d98:	ed97 7b02 	vldr	d7, [r7, #8]
 8002d9c:	ed8d 7b3c 	vstr	d7, [sp, #240]	; 0xf0
 8002da0:	ed97 7b04 	vldr	d7, [r7, #16]
 8002da4:	ed8d 7b3a 	vstr	d7, [sp, #232]	; 0xe8
 8002da8:	ed97 7b06 	vldr	d7, [r7, #24]
 8002dac:	ed8d 7b38 	vstr	d7, [sp, #224]	; 0xe0
 8002db0:	ed97 7b08 	vldr	d7, [r7, #32]
 8002db4:	ed8d 7b36 	vstr	d7, [sp, #216]	; 0xd8
 8002db8:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002dbc:	ed8d 7b34 	vstr	d7, [sp, #208]	; 0xd0
 8002dc0:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002dc4:	ed8d 7b32 	vstr	d7, [sp, #200]	; 0xc8
 8002dc8:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002dcc:	ed8d 7b30 	vstr	d7, [sp, #192]	; 0xc0
 8002dd0:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002dd4:	ed8d 7b2e 	vstr	d7, [sp, #184]	; 0xb8
 8002dd8:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8002ddc:	ed8d 7b2c 	vstr	d7, [sp, #176]	; 0xb0
 8002de0:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8002de4:	ed8d 7b2a 	vstr	d7, [sp, #168]	; 0xa8
 8002de8:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8002dec:	ed8d 7b28 	vstr	d7, [sp, #160]	; 0xa0
 8002df0:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8002df4:	ed8d 7b26 	vstr	d7, [sp, #152]	; 0x98
 8002df8:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8002dfc:	ed8d 7b24 	vstr	d7, [sp, #144]	; 0x90
 8002e00:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8002e04:	ed8d 7b22 	vstr	d7, [sp, #136]	; 0x88
 8002e08:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8002e0c:	ed8d 7b20 	vstr	d7, [sp, #128]	; 0x80
 8002e10:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8002e14:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 8002e18:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8002e1c:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8002e20:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 8002e24:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 8002e28:	ed97 7b26 	vldr	d7, [r7, #152]	; 0x98
 8002e2c:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8002e30:	ed97 7b28 	vldr	d7, [r7, #160]	; 0xa0
 8002e34:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8002e38:	ed97 7b2a 	vldr	d7, [r7, #168]	; 0xa8
 8002e3c:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8002e40:	ed97 7b2c 	vldr	d7, [r7, #176]	; 0xb0
 8002e44:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8002e48:	ed97 7b2e 	vldr	d7, [r7, #184]	; 0xb8
 8002e4c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8002e50:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 8002e54:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8002e58:	ed97 7b32 	vldr	d7, [r7, #200]	; 0xc8
 8002e5c:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8002e60:	ed97 7b34 	vldr	d7, [r7, #208]	; 0xd0
 8002e64:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8002e68:	ed97 7b36 	vldr	d7, [r7, #216]	; 0xd8
 8002e6c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002e70:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 8002e74:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002e78:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8002e7c:	9104      	str	r1, [sp, #16]
 8002e7e:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8002e82:	9103      	str	r1, [sp, #12]
 8002e84:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8002e88:	9102      	str	r1, [sp, #8]
 8002e8a:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8002e8e:	9101      	str	r1, [sp, #4]
 8002e90:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8002e94:	9100      	str	r1, [sp, #0]
 8002e96:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002e9a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8002e9e:	4907      	ldr	r1, [pc, #28]	; (8002ebc <scheduler+0xa0c>)
 8002ea0:	4807      	ldr	r0, [pc, #28]	; (8002ec0 <scheduler+0xa10>)
 8002ea2:	f00e f869 	bl	8010f78 <siprintf>

		write_to_SD(FILE_NAME, buffer);
 8002ea6:	4906      	ldr	r1, [pc, #24]	; (8002ec0 <scheduler+0xa10>)
 8002ea8:	4806      	ldr	r0, [pc, #24]	; (8002ec4 <scheduler+0xa14>)
 8002eaa:	f7fe fb6f 	bl	800158c <write_to_SD>
	printf("IMU2 ay: %4.2f m/s2 \n", accel2_val[2]);
	printf("ACC az: %4.2f m/s2 \n", accel[2]);
#endif


}
 8002eae:	bf00      	nop
 8002eb0:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002eba:	bf00      	nop
 8002ebc:	08014df4 	.word	0x08014df4
 8002ec0:	20013880 	.word	0x20013880
 8002ec4:	20015ab4 	.word	0x20015ab4

08002ec8 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 8002ecc:	4b0c      	ldr	r3, [pc, #48]	; (8002f00 <MX_SDIO_SD_Init+0x38>)
 8002ece:	4a0d      	ldr	r2, [pc, #52]	; (8002f04 <MX_SDIO_SD_Init+0x3c>)
 8002ed0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002ed2:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <MX_SDIO_SD_Init+0x38>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002ed8:	4b09      	ldr	r3, [pc, #36]	; (8002f00 <MX_SDIO_SD_Init+0x38>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002ede:	4b08      	ldr	r3, [pc, #32]	; (8002f00 <MX_SDIO_SD_Init+0x38>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002ee4:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <MX_SDIO_SD_Init+0x38>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002eea:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <MX_SDIO_SD_Init+0x38>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 3;
 8002ef0:	4b03      	ldr	r3, [pc, #12]	; (8002f00 <MX_SDIO_SD_Init+0x38>)
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	619a      	str	r2, [r3, #24]

}
 8002ef6:	bf00      	nop
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	20015b80 	.word	0x20015b80
 8002f04:	40012c00 	.word	0x40012c00

08002f08 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b08a      	sub	sp, #40	; 0x28
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f10:	f107 0314 	add.w	r3, r7, #20
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	605a      	str	r2, [r3, #4]
 8002f1a:	609a      	str	r2, [r3, #8]
 8002f1c:	60da      	str	r2, [r3, #12]
 8002f1e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a68      	ldr	r2, [pc, #416]	; (80030c8 <HAL_SD_MspInit+0x1c0>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	f040 80c9 	bne.w	80030be <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	613b      	str	r3, [r7, #16]
 8002f30:	4b66      	ldr	r3, [pc, #408]	; (80030cc <HAL_SD_MspInit+0x1c4>)
 8002f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f34:	4a65      	ldr	r2, [pc, #404]	; (80030cc <HAL_SD_MspInit+0x1c4>)
 8002f36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f3a:	6453      	str	r3, [r2, #68]	; 0x44
 8002f3c:	4b63      	ldr	r3, [pc, #396]	; (80030cc <HAL_SD_MspInit+0x1c4>)
 8002f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f44:	613b      	str	r3, [r7, #16]
 8002f46:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f48:	2300      	movs	r3, #0
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	4b5f      	ldr	r3, [pc, #380]	; (80030cc <HAL_SD_MspInit+0x1c4>)
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f50:	4a5e      	ldr	r2, [pc, #376]	; (80030cc <HAL_SD_MspInit+0x1c4>)
 8002f52:	f043 0304 	orr.w	r3, r3, #4
 8002f56:	6313      	str	r3, [r2, #48]	; 0x30
 8002f58:	4b5c      	ldr	r3, [pc, #368]	; (80030cc <HAL_SD_MspInit+0x1c4>)
 8002f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f64:	2300      	movs	r3, #0
 8002f66:	60bb      	str	r3, [r7, #8]
 8002f68:	4b58      	ldr	r3, [pc, #352]	; (80030cc <HAL_SD_MspInit+0x1c4>)
 8002f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6c:	4a57      	ldr	r2, [pc, #348]	; (80030cc <HAL_SD_MspInit+0x1c4>)
 8002f6e:	f043 0308 	orr.w	r3, r3, #8
 8002f72:	6313      	str	r3, [r2, #48]	; 0x30
 8002f74:	4b55      	ldr	r3, [pc, #340]	; (80030cc <HAL_SD_MspInit+0x1c4>)
 8002f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002f80:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002f84:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f86:	2302      	movs	r3, #2
 8002f88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002f92:	230c      	movs	r3, #12
 8002f94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f96:	f107 0314 	add.w	r3, r7, #20
 8002f9a:	4619      	mov	r1, r3
 8002f9c:	484c      	ldr	r0, [pc, #304]	; (80030d0 <HAL_SD_MspInit+0x1c8>)
 8002f9e:	f005 fc6b 	bl	8008878 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002fa2:	2304      	movs	r3, #4
 8002fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002faa:	2300      	movs	r3, #0
 8002fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002fb2:	230c      	movs	r3, #12
 8002fb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fb6:	f107 0314 	add.w	r3, r7, #20
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4845      	ldr	r0, [pc, #276]	; (80030d4 <HAL_SD_MspInit+0x1cc>)
 8002fbe:	f005 fc5b 	bl	8008878 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8002fc2:	4b45      	ldr	r3, [pc, #276]	; (80030d8 <HAL_SD_MspInit+0x1d0>)
 8002fc4:	4a45      	ldr	r2, [pc, #276]	; (80030dc <HAL_SD_MspInit+0x1d4>)
 8002fc6:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8002fc8:	4b43      	ldr	r3, [pc, #268]	; (80030d8 <HAL_SD_MspInit+0x1d0>)
 8002fca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fce:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fd0:	4b41      	ldr	r3, [pc, #260]	; (80030d8 <HAL_SD_MspInit+0x1d0>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fd6:	4b40      	ldr	r3, [pc, #256]	; (80030d8 <HAL_SD_MspInit+0x1d0>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fdc:	4b3e      	ldr	r3, [pc, #248]	; (80030d8 <HAL_SD_MspInit+0x1d0>)
 8002fde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fe2:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002fe4:	4b3c      	ldr	r3, [pc, #240]	; (80030d8 <HAL_SD_MspInit+0x1d0>)
 8002fe6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002fea:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002fec:	4b3a      	ldr	r3, [pc, #232]	; (80030d8 <HAL_SD_MspInit+0x1d0>)
 8002fee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ff2:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8002ff4:	4b38      	ldr	r3, [pc, #224]	; (80030d8 <HAL_SD_MspInit+0x1d0>)
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ffa:	4b37      	ldr	r3, [pc, #220]	; (80030d8 <HAL_SD_MspInit+0x1d0>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003000:	4b35      	ldr	r3, [pc, #212]	; (80030d8 <HAL_SD_MspInit+0x1d0>)
 8003002:	2204      	movs	r2, #4
 8003004:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003006:	4b34      	ldr	r3, [pc, #208]	; (80030d8 <HAL_SD_MspInit+0x1d0>)
 8003008:	2203      	movs	r2, #3
 800300a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800300c:	4b32      	ldr	r3, [pc, #200]	; (80030d8 <HAL_SD_MspInit+0x1d0>)
 800300e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003012:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003014:	4b30      	ldr	r3, [pc, #192]	; (80030d8 <HAL_SD_MspInit+0x1d0>)
 8003016:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800301a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800301c:	482e      	ldr	r0, [pc, #184]	; (80030d8 <HAL_SD_MspInit+0x1d0>)
 800301e:	f005 f81f 	bl	8008060 <HAL_DMA_Init>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d001      	beq.n	800302c <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8003028:	f7ff f81e 	bl	8002068 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a2a      	ldr	r2, [pc, #168]	; (80030d8 <HAL_SD_MspInit+0x1d0>)
 8003030:	641a      	str	r2, [r3, #64]	; 0x40
 8003032:	4a29      	ldr	r2, [pc, #164]	; (80030d8 <HAL_SD_MspInit+0x1d0>)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8003038:	4b29      	ldr	r3, [pc, #164]	; (80030e0 <HAL_SD_MspInit+0x1d8>)
 800303a:	4a2a      	ldr	r2, [pc, #168]	; (80030e4 <HAL_SD_MspInit+0x1dc>)
 800303c:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800303e:	4b28      	ldr	r3, [pc, #160]	; (80030e0 <HAL_SD_MspInit+0x1d8>)
 8003040:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003044:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003046:	4b26      	ldr	r3, [pc, #152]	; (80030e0 <HAL_SD_MspInit+0x1d8>)
 8003048:	2240      	movs	r2, #64	; 0x40
 800304a:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800304c:	4b24      	ldr	r3, [pc, #144]	; (80030e0 <HAL_SD_MspInit+0x1d8>)
 800304e:	2200      	movs	r2, #0
 8003050:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003052:	4b23      	ldr	r3, [pc, #140]	; (80030e0 <HAL_SD_MspInit+0x1d8>)
 8003054:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003058:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800305a:	4b21      	ldr	r3, [pc, #132]	; (80030e0 <HAL_SD_MspInit+0x1d8>)
 800305c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003060:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003062:	4b1f      	ldr	r3, [pc, #124]	; (80030e0 <HAL_SD_MspInit+0x1d8>)
 8003064:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003068:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800306a:	4b1d      	ldr	r3, [pc, #116]	; (80030e0 <HAL_SD_MspInit+0x1d8>)
 800306c:	2220      	movs	r2, #32
 800306e:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003070:	4b1b      	ldr	r3, [pc, #108]	; (80030e0 <HAL_SD_MspInit+0x1d8>)
 8003072:	2200      	movs	r2, #0
 8003074:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003076:	4b1a      	ldr	r3, [pc, #104]	; (80030e0 <HAL_SD_MspInit+0x1d8>)
 8003078:	2204      	movs	r2, #4
 800307a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800307c:	4b18      	ldr	r3, [pc, #96]	; (80030e0 <HAL_SD_MspInit+0x1d8>)
 800307e:	2203      	movs	r2, #3
 8003080:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8003082:	4b17      	ldr	r3, [pc, #92]	; (80030e0 <HAL_SD_MspInit+0x1d8>)
 8003084:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003088:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800308a:	4b15      	ldr	r3, [pc, #84]	; (80030e0 <HAL_SD_MspInit+0x1d8>)
 800308c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003090:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8003092:	4813      	ldr	r0, [pc, #76]	; (80030e0 <HAL_SD_MspInit+0x1d8>)
 8003094:	f004 ffe4 	bl	8008060 <HAL_DMA_Init>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 800309e:	f7fe ffe3 	bl	8002068 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a0e      	ldr	r2, [pc, #56]	; (80030e0 <HAL_SD_MspInit+0x1d8>)
 80030a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80030a8:	4a0d      	ldr	r2, [pc, #52]	; (80030e0 <HAL_SD_MspInit+0x1d8>)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80030ae:	2200      	movs	r2, #0
 80030b0:	2100      	movs	r1, #0
 80030b2:	2031      	movs	r0, #49	; 0x31
 80030b4:	f004 ff9d 	bl	8007ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80030b8:	2031      	movs	r0, #49	; 0x31
 80030ba:	f004 ffb6 	bl	800802a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80030be:	bf00      	nop
 80030c0:	3728      	adds	r7, #40	; 0x28
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	40012c00 	.word	0x40012c00
 80030cc:	40023800 	.word	0x40023800
 80030d0:	40020800 	.word	0x40020800
 80030d4:	40020c00 	.word	0x40020c00
 80030d8:	20015ac0 	.word	0x20015ac0
 80030dc:	40026458 	.word	0x40026458
 80030e0:	20015b20 	.word	0x20015b20
 80030e4:	400264a0 	.word	0x400264a0

080030e8 <p_sanity_check>:

// TODO implement error sounds!!!!

// these sanity checks are performed during steady state on the launch pad.

uint8_t p_sanity_check(float * p){
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
	// sanity check of the pressure value on the launchpad
	if ((*p < 110000) && (*p > 70000)) {
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	edd3 7a00 	vldr	s15, [r3]
 80030f6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800312c <p_sanity_check+0x44>
 80030fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003102:	d50b      	bpl.n	800311c <p_sanity_check+0x34>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	edd3 7a00 	vldr	s15, [r3]
 800310a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8003130 <p_sanity_check+0x48>
 800310e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003116:	dd01      	ble.n	800311c <p_sanity_check+0x34>
		return 1;
 8003118:	2301      	movs	r3, #1
 800311a:	e000      	b.n	800311e <p_sanity_check+0x36>
	} else {
		return 0;
 800311c:	2300      	movs	r3, #0
	}
}
 800311e:	4618      	mov	r0, r3
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	47d6d800 	.word	0x47d6d800
 8003130:	4788b800 	.word	0x4788b800

08003134 <t_sanity_check>:

uint8_t t_sanity_check(float * t){
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
	// sanity check of the temperature value on the launchpad
	if ((*t < 80) && (*t > 1)) {
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	edd3 7a00 	vldr	s15, [r3]
 8003142:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8003178 <t_sanity_check+0x44>
 8003146:	eef4 7ac7 	vcmpe.f32	s15, s14
 800314a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800314e:	d50b      	bpl.n	8003168 <t_sanity_check+0x34>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	edd3 7a00 	vldr	s15, [r3]
 8003156:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800315a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800315e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003162:	dd01      	ble.n	8003168 <t_sanity_check+0x34>
		return 1;
 8003164:	2301      	movs	r3, #1
 8003166:	e000      	b.n	800316a <t_sanity_check+0x36>
	} else {
		return 0;
 8003168:	2300      	movs	r3, #0
	}
}
 800316a:	4618      	mov	r0, r3
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	42a00000 	.word	0x42a00000

0800317c <a_sanity_check>:

uint8_t a_sanity_check(float * a){
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
	// sanity check of the acceleration value on the launchpad
	if ((*a < 10) && (*a > 8)) {
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	edd3 7a00 	vldr	s15, [r3]
 800318a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800318e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003196:	d50b      	bpl.n	80031b0 <a_sanity_check+0x34>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	edd3 7a00 	vldr	s15, [r3]
 800319e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80031a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031aa:	dd01      	ble.n	80031b0 <a_sanity_check+0x34>
		return 1;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e000      	b.n	80031b2 <a_sanity_check+0x36>
	} else {
		return 0;
 80031b0:	2300      	movs	r3, #0
	}
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <state_est_sanity_check>:

uint8_t state_est_sanity_check(float * h, float * a, float * v){
 80031be:	b580      	push	{r7, lr}
 80031c0:	b084      	sub	sp, #16
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	60f8      	str	r0, [r7, #12]
 80031c6:	60b9      	str	r1, [r7, #8]
 80031c8:	607a      	str	r2, [r7, #4]
	// sanity check of the altitude, velocity and acceleration value on the launchpad
	if (a_sanity_check(a) == 1){
 80031ca:	68b8      	ldr	r0, [r7, #8]
 80031cc:	f7ff ffd6 	bl	800317c <a_sanity_check>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d101      	bne.n	80031da <state_est_sanity_check+0x1c>
		if (DEBUG_PRINT == 1) printf("state est accel out of bounds. a = %4.2f \n",*a);
		return 0;
 80031d6:	2300      	movs	r3, #0
 80031d8:	e02c      	b.n	8003234 <state_est_sanity_check+0x76>
	}

	if ((*h > 20) || (*h < -20)) {
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	edd3 7a00 	vldr	s15, [r3]
 80031e0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80031e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ec:	dc09      	bgt.n	8003202 <state_est_sanity_check+0x44>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	edd3 7a00 	vldr	s15, [r3]
 80031f4:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 80031f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003200:	d501      	bpl.n	8003206 <state_est_sanity_check+0x48>
		if (DEBUG_PRINT == 1) printf("state est altitude out of bounds. h = %4.2f \n",*h);
		return 0;
 8003202:	2300      	movs	r3, #0
 8003204:	e016      	b.n	8003234 <state_est_sanity_check+0x76>
	}

	if ((*v > 10) || (*v < -10)) {
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	edd3 7a00 	vldr	s15, [r3]
 800320c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003210:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003218:	dc09      	bgt.n	800322e <state_est_sanity_check+0x70>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	edd3 7a00 	vldr	s15, [r3]
 8003220:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8003224:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800322c:	d501      	bpl.n	8003232 <state_est_sanity_check+0x74>
		if (DEBUG_PRINT == 1) printf("state est velocity out of bounds. v = %4.2f \n",*v);
		return 0;
 800322e:	2300      	movs	r3, #0
 8003230:	e000      	b.n	8003234 <state_est_sanity_check+0x76>
	}

	return 1;
 8003232:	2301      	movs	r3, #1
}
 8003234:	4618      	mov	r0, r3
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <config_baro>:

uint8_t config_baro(struct sht31_dev * t_dev, struct ms5607_dev * p1_dev, struct ms5607_dev * p2_dev, float * t, float * p){
 800323c:	b590      	push	{r4, r7, lr}
 800323e:	b093      	sub	sp, #76	; 0x4c
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
 8003248:	603b      	str	r3, [r7, #0]

	float t1_sum = 0;
 800324a:	f04f 0300 	mov.w	r3, #0
 800324e:	63fb      	str	r3, [r7, #60]	; 0x3c
	float p1_sum = 0;
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	63bb      	str	r3, [r7, #56]	; 0x38
	float t2_sum = 0;
 8003256:	f04f 0300 	mov.w	r3, #0
 800325a:	637b      	str	r3, [r7, #52]	; 0x34
	float p2_sum = 0;
 800325c:	f04f 0300 	mov.w	r3, #0
 8003260:	633b      	str	r3, [r7, #48]	; 0x30
	float p1;
	float p2;
	float t1;
	float t2;
	// sample pressure/temperture 100 times
	for (int i = 0; i < MAX_SETUP_SAMPLE + 10; i++)
 8003262:	2300      	movs	r3, #0
 8003264:	647b      	str	r3, [r7, #68]	; 0x44
 8003266:	e053      	b.n	8003310 <config_baro+0xd4>
	{
		ms5607_prep_pressure(p1_dev, pbuf);
 8003268:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800326c:	4619      	mov	r1, r3
 800326e:	68b8      	ldr	r0, [r7, #8]
 8003270:	f001 fb3e 	bl	80048f0 <ms5607_prep_pressure>
		ms5607_prep_pressure(p2_dev, pbuf);
 8003274:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003278:	4619      	mov	r1, r3
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f001 fb38 	bl	80048f0 <ms5607_prep_pressure>
		HAL_Delay(5);
 8003280:	2005      	movs	r0, #5
 8003282:	f004 f97b 	bl	800757c <HAL_Delay>
		ms5607_read_pressure(p1_dev, pbuf);
 8003286:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800328a:	4619      	mov	r1, r3
 800328c:	68b8      	ldr	r0, [r7, #8]
 800328e:	f001 fb78 	bl	8004982 <ms5607_read_pressure>
		ms5607_read_pressure(p2_dev, pbuf);
 8003292:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003296:	4619      	mov	r1, r3
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f001 fb72 	bl	8004982 <ms5607_read_pressure>
		ms5607_convert(p1_dev, &p1, &t1);
 800329e:	f107 0214 	add.w	r2, r7, #20
 80032a2:	f107 031c 	add.w	r3, r7, #28
 80032a6:	4619      	mov	r1, r3
 80032a8:	68b8      	ldr	r0, [r7, #8]
 80032aa:	f001 fbb5 	bl	8004a18 <ms5607_convert>
		ms5607_convert(p2_dev, &p2, &t2);
 80032ae:	f107 0210 	add.w	r2, r7, #16
 80032b2:	f107 0318 	add.w	r3, r7, #24
 80032b6:	4619      	mov	r1, r3
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f001 fbad 	bl	8004a18 <ms5607_convert>
		if (i >= 10) {
 80032be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032c0:	2b09      	cmp	r3, #9
 80032c2:	dd1f      	ble.n	8003304 <config_baro+0xc8>
			// ignore the first 10 values to let the barometer "warm" up
			t1_sum += t1;
 80032c4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80032c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80032cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032d0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			p1_sum += p1;
 80032d4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80032d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80032dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032e0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			t2_sum += t2;
 80032e4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80032e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80032ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032f0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			p2_sum += p2;
 80032f4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80032f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80032fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003300:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		}
		HAL_Delay(MAX_SETUP_SAMPLE_INTERVAL + 5);
 8003304:	200f      	movs	r0, #15
 8003306:	f004 f939 	bl	800757c <HAL_Delay>
	for (int i = 0; i < MAX_SETUP_SAMPLE + 10; i++)
 800330a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800330c:	3301      	adds	r3, #1
 800330e:	647b      	str	r3, [r7, #68]	; 0x44
 8003310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003312:	2b6d      	cmp	r3, #109	; 0x6d
 8003314:	dda8      	ble.n	8003268 <config_baro+0x2c>
	}
	p1_sum /= MAX_SETUP_SAMPLE;
 8003316:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800331a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800347c <config_baro+0x240>
 800331e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003322:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	t1_sum /= MAX_SETUP_SAMPLE;
 8003326:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800332a:	eddf 6a54 	vldr	s13, [pc, #336]	; 800347c <config_baro+0x240>
 800332e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003332:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	p2_sum /= MAX_SETUP_SAMPLE;
 8003336:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800333a:	eddf 6a50 	vldr	s13, [pc, #320]	; 800347c <config_baro+0x240>
 800333e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003342:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	t2_sum /= MAX_SETUP_SAMPLE;
 8003346:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800334a:	eddf 6a4c 	vldr	s13, [pc, #304]	; 800347c <config_baro+0x240>
 800334e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003352:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	printf("p1: %4.2f \n", p1_sum);
 8003356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003358:	4618      	mov	r0, r3
 800335a:	f7fd f8f5 	bl	8000548 <__aeabi_f2d>
 800335e:	4603      	mov	r3, r0
 8003360:	460c      	mov	r4, r1
 8003362:	461a      	mov	r2, r3
 8003364:	4623      	mov	r3, r4
 8003366:	4846      	ldr	r0, [pc, #280]	; (8003480 <config_baro+0x244>)
 8003368:	f00d fd8a 	bl	8010e80 <iprintf>
	printf("p2: %4.2f \n", p2_sum);
 800336c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336e:	4618      	mov	r0, r3
 8003370:	f7fd f8ea 	bl	8000548 <__aeabi_f2d>
 8003374:	4603      	mov	r3, r0
 8003376:	460c      	mov	r4, r1
 8003378:	461a      	mov	r2, r3
 800337a:	4623      	mov	r3, r4
 800337c:	4841      	ldr	r0, [pc, #260]	; (8003484 <config_baro+0x248>)
 800337e:	f00d fd7f 	bl	8010e80 <iprintf>
	printf("t1: %4.2f \n", t1_sum);
 8003382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003384:	4618      	mov	r0, r3
 8003386:	f7fd f8df 	bl	8000548 <__aeabi_f2d>
 800338a:	4603      	mov	r3, r0
 800338c:	460c      	mov	r4, r1
 800338e:	461a      	mov	r2, r3
 8003390:	4623      	mov	r3, r4
 8003392:	483d      	ldr	r0, [pc, #244]	; (8003488 <config_baro+0x24c>)
 8003394:	f00d fd74 	bl	8010e80 <iprintf>
	printf("t2: %4.2f \n", t2_sum);
 8003398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800339a:	4618      	mov	r0, r3
 800339c:	f7fd f8d4 	bl	8000548 <__aeabi_f2d>
 80033a0:	4603      	mov	r3, r0
 80033a2:	460c      	mov	r4, r1
 80033a4:	461a      	mov	r2, r3
 80033a6:	4623      	mov	r3, r4
 80033a8:	4838      	ldr	r0, [pc, #224]	; (800348c <config_baro+0x250>)
 80033aa:	f00d fd69 	bl	8010e80 <iprintf>

	if (!t_sanity_check(&t1_sum)){
 80033ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff febe 	bl	8003134 <t_sanity_check>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <config_baro+0x186>
		if (DEBUG_PRINT == 1) printf("Temperature of BARO 1 out of bounds. abort. \n");
		return 0;
 80033be:	2300      	movs	r3, #0
 80033c0:	e057      	b.n	8003472 <config_baro+0x236>
	}
	if (!t_sanity_check(&t2_sum)){
 80033c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff feb4 	bl	8003134 <t_sanity_check>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d101      	bne.n	80033d6 <config_baro+0x19a>
		if (DEBUG_PRINT == 1) printf("Temperature of BARO 2 out of bounds. abort. \n");
		return 0;
 80033d2:	2300      	movs	r3, #0
 80033d4:	e04d      	b.n	8003472 <config_baro+0x236>
	}
	if (!p_sanity_check(&p1_sum)){
 80033d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80033da:	4618      	mov	r0, r3
 80033dc:	f7ff fe84 	bl	80030e8 <p_sanity_check>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <config_baro+0x1ae>
		if (DEBUG_PRINT == 1) printf("Pressure of BARO 1 out of bounds. abort. \n");
		return 0;
 80033e6:	2300      	movs	r3, #0
 80033e8:	e043      	b.n	8003472 <config_baro+0x236>
	}
	if (!p_sanity_check(&p2_sum)){
 80033ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff fe7a 	bl	80030e8 <p_sanity_check>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <config_baro+0x1c2>
		if (DEBUG_PRINT == 1) printf("Pressure of BARO 2 out of bounds. abort. \n");
		return 0;
 80033fa:	2300      	movs	r3, #0
 80033fc:	e039      	b.n	8003472 <config_baro+0x236>
	}

	// set as environement parameters
	*t = (t1_sum + t2_sum) / 2;
 80033fe:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003402:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003406:	ee37 7a27 	vadd.f32	s14, s14, s15
 800340a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800340e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	edc3 7a00 	vstr	s15, [r3]
	*p = (p1_sum + p2_sum) / 2;
 8003418:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800341c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003420:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003424:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003428:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800342c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800342e:	edc3 7a00 	vstr	s15, [r3]


	// sample SHT temperature 100 times

	for (int i = 0; i < MAX_SETUP_SAMPLE + 10; i++)
 8003432:	2300      	movs	r3, #0
 8003434:	643b      	str	r3, [r7, #64]	; 0x40
 8003436:	e018      	b.n	800346a <config_baro+0x22e>
	{
		sht31_read(t_dev, sht_val, buf);
 8003438:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800343c:	f107 0320 	add.w	r3, r7, #32
 8003440:	4619      	mov	r1, r3
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f001 fda4 	bl	8004f90 <sht31_read>
		// ignore the first 10 measurements to let the SHT "warm" up
		if (i >= 10) t1_sum += sht_val[0];
 8003448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800344a:	2b09      	cmp	r3, #9
 800344c:	dd07      	ble.n	800345e <config_baro+0x222>
 800344e:	ed97 7a08 	vldr	s14, [r7, #32]
 8003452:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003456:	ee77 7a27 	vadd.f32	s15, s14, s15
 800345a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		HAL_Delay(MAX_SETUP_SAMPLE_INTERVAL);
 800345e:	200a      	movs	r0, #10
 8003460:	f004 f88c 	bl	800757c <HAL_Delay>
	for (int i = 0; i < MAX_SETUP_SAMPLE + 10; i++)
 8003464:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003466:	3301      	adds	r3, #1
 8003468:	643b      	str	r3, [r7, #64]	; 0x40
 800346a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800346c:	2b6d      	cmp	r3, #109	; 0x6d
 800346e:	dde3      	ble.n	8003438 <config_baro+0x1fc>
	*/

	if (DEBUG_PRINT == 1) printf("Config pressure = %4.2f \n",*p);
	if (DEBUG_PRINT == 1) printf("Config temp = %4.2f \n",*t);

	return 1;
 8003470:	2301      	movs	r3, #1
}
 8003472:	4618      	mov	r0, r3
 8003474:	374c      	adds	r7, #76	; 0x4c
 8003476:	46bd      	mov	sp, r7
 8003478:	bd90      	pop	{r4, r7, pc}
 800347a:	bf00      	nop
 800347c:	42c80000 	.word	0x42c80000
 8003480:	08014ef8 	.word	0x08014ef8
 8003484:	08014f04 	.word	0x08014f04
 8003488:	08014f10 	.word	0x08014f10
 800348c:	08014f1c 	.word	0x08014f1c

08003490 <config_imu>:

uint8_t config_imu(struct icm20601_dev * a1_dev, struct icm20601_dev * a2_dev){
 8003490:	b590      	push	{r4, r7, lr}
 8003492:	b09b      	sub	sp, #108	; 0x6c
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
	float a2_temp[7];

	float a1_sum[3];
	float a2_sum[3];

	for (int i = 0; i < MAX_SETUP_SAMPLE + 10; i++)
 800349a:	2300      	movs	r3, #0
 800349c:	663b      	str	r3, [r7, #96]	; 0x60
 800349e:	e059      	b.n	8003554 <config_imu+0xc4>
	{
		icm20601_read_data(a1_dev, a1_temp);
 80034a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80034a4:	4619      	mov	r1, r3
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f001 f86e 	bl	8004588 <icm20601_read_data>
		icm20601_read_data(a2_dev, a2_temp);
 80034ac:	f107 0320 	add.w	r3, r7, #32
 80034b0:	4619      	mov	r1, r3
 80034b2:	6838      	ldr	r0, [r7, #0]
 80034b4:	f001 f868 	bl	8004588 <icm20601_read_data>

		if (i >= 10) {
 80034b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034ba:	2b09      	cmp	r3, #9
 80034bc:	dd44      	ble.n	8003548 <config_imu+0xb8>
			// ignore the first 10 measurements to let the accelerometer "warm" up
			for (int j = 1; j < 4; j++){
 80034be:	2301      	movs	r3, #1
 80034c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034c2:	e03e      	b.n	8003542 <config_imu+0xb2>
				a1_sum[j-1] += fabs(a1_temp[j]);
 80034c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034c6:	3b01      	subs	r3, #1
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80034ce:	4413      	add	r3, r2
 80034d0:	3b54      	subs	r3, #84	; 0x54
 80034d2:	ed93 7a00 	vldr	s14, [r3]
 80034d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80034de:	4413      	add	r3, r2
 80034e0:	3b2c      	subs	r3, #44	; 0x2c
 80034e2:	edd3 7a00 	vldr	s15, [r3]
 80034e6:	eef0 7ae7 	vabs.f32	s15, s15
 80034ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034ec:	3b01      	subs	r3, #1
 80034ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80034f8:	4413      	add	r3, r2
 80034fa:	3b54      	subs	r3, #84	; 0x54
 80034fc:	edc3 7a00 	vstr	s15, [r3]
				a2_sum[j-1] += fabs(a2_temp[j]);
 8003500:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003502:	3b01      	subs	r3, #1
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800350a:	4413      	add	r3, r2
 800350c:	3b60      	subs	r3, #96	; 0x60
 800350e:	ed93 7a00 	vldr	s14, [r3]
 8003512:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800351a:	4413      	add	r3, r2
 800351c:	3b48      	subs	r3, #72	; 0x48
 800351e:	edd3 7a00 	vldr	s15, [r3]
 8003522:	eef0 7ae7 	vabs.f32	s15, s15
 8003526:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003528:	3b01      	subs	r3, #1
 800352a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003534:	4413      	add	r3, r2
 8003536:	3b60      	subs	r3, #96	; 0x60
 8003538:	edc3 7a00 	vstr	s15, [r3]
			for (int j = 1; j < 4; j++){
 800353c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800353e:	3301      	adds	r3, #1
 8003540:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003544:	2b03      	cmp	r3, #3
 8003546:	ddbd      	ble.n	80034c4 <config_imu+0x34>
			}
		}
		HAL_Delay(MAX_SETUP_SAMPLE_INTERVAL);
 8003548:	200a      	movs	r0, #10
 800354a:	f004 f817 	bl	800757c <HAL_Delay>
	for (int i = 0; i < MAX_SETUP_SAMPLE + 10; i++)
 800354e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003550:	3301      	adds	r3, #1
 8003552:	663b      	str	r3, [r7, #96]	; 0x60
 8003554:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003556:	2b6d      	cmp	r3, #109	; 0x6d
 8003558:	dda2      	ble.n	80034a0 <config_imu+0x10>
	}

	// assume rocket is in upright position, config axes accordingly
	uint8_t imu1_state = 0;
 800355a:	2300      	movs	r3, #0
 800355c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t imu2_state = 0;
 8003560:	2300      	movs	r3, #0
 8003562:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t correct_axes = 0;
 8003566:	2300      	movs	r3, #0
 8003568:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	for (int j = 0; j < 3; j++){
 800356c:	2300      	movs	r3, #0
 800356e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003570:	e06e      	b.n	8003650 <config_imu+0x1c0>
		a1_sum[j] /= MAX_SETUP_SAMPLE;
 8003572:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800357a:	4413      	add	r3, r2
 800357c:	3b54      	subs	r3, #84	; 0x54
 800357e:	ed93 7a00 	vldr	s14, [r3]
 8003582:	eddf 6a55 	vldr	s13, [pc, #340]	; 80036d8 <config_imu+0x248>
 8003586:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800358a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003592:	4413      	add	r3, r2
 8003594:	3b54      	subs	r3, #84	; 0x54
 8003596:	edc3 7a00 	vstr	s15, [r3]
		a2_sum[j] /= MAX_SETUP_SAMPLE;
 800359a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80035a2:	4413      	add	r3, r2
 80035a4:	3b60      	subs	r3, #96	; 0x60
 80035a6:	ed93 7a00 	vldr	s14, [r3]
 80035aa:	eddf 6a4b 	vldr	s13, [pc, #300]	; 80036d8 <config_imu+0x248>
 80035ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80035ba:	4413      	add	r3, r2
 80035bc:	3b60      	subs	r3, #96	; 0x60
 80035be:	edc3 7a00 	vstr	s15, [r3]
		printf("IMU1 a-%d: %4.2f \n",j,a1_sum[j]);
 80035c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80035ca:	4413      	add	r3, r2
 80035cc:	3b54      	subs	r3, #84	; 0x54
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fc ffb9 	bl	8000548 <__aeabi_f2d>
 80035d6:	4603      	mov	r3, r0
 80035d8:	460c      	mov	r4, r1
 80035da:	461a      	mov	r2, r3
 80035dc:	4623      	mov	r3, r4
 80035de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80035e0:	483e      	ldr	r0, [pc, #248]	; (80036dc <config_imu+0x24c>)
 80035e2:	f00d fc4d 	bl	8010e80 <iprintf>
		printf("IMU2 a-%d: %4.2f \n",j,a2_sum[j]);
 80035e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80035ee:	4413      	add	r3, r2
 80035f0:	3b60      	subs	r3, #96	; 0x60
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7fc ffa7 	bl	8000548 <__aeabi_f2d>
 80035fa:	4603      	mov	r3, r0
 80035fc:	460c      	mov	r4, r1
 80035fe:	461a      	mov	r2, r3
 8003600:	4623      	mov	r3, r4
 8003602:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003604:	4836      	ldr	r0, [pc, #216]	; (80036e0 <config_imu+0x250>)
 8003606:	f00d fc3b 	bl	8010e80 <iprintf>
		if (a_sanity_check(&a1_sum[j]) == 1){
 800360a:	f107 0214 	add.w	r2, r7, #20
 800360e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4413      	add	r3, r2
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff fdb1 	bl	800317c <a_sanity_check>
 800361a:	4603      	mov	r3, r0
 800361c:	2b01      	cmp	r3, #1
 800361e:	d104      	bne.n	800362a <config_imu+0x19a>
			imu1_state ++;
 8003620:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003624:	3301      	adds	r3, #1
 8003626:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
		}
		if (a_sanity_check(&a2_sum[j]) == 1){
 800362a:	f107 0208 	add.w	r2, r7, #8
 800362e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	4618      	mov	r0, r3
 8003636:	f7ff fda1 	bl	800317c <a_sanity_check>
 800363a:	4603      	mov	r3, r0
 800363c:	2b01      	cmp	r3, #1
 800363e:	d104      	bne.n	800364a <config_imu+0x1ba>
			imu2_state ++;
 8003640:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8003644:	3301      	adds	r3, #1
 8003646:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	for (int j = 0; j < 3; j++){
 800364a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800364c:	3301      	adds	r3, #1
 800364e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003650:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003652:	2b02      	cmp	r3, #2
 8003654:	dd8d      	ble.n	8003572 <config_imu+0xe2>
		}
	}

	if ((-a1_temp[2] > 7) && (-a1_temp[2] < 11)) correct_axes ++;
 8003656:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800365a:	eeb9 7a0c 	vmov.f32	s14, #156	; 0xc0e00000 -7.0
 800365e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003666:	d50d      	bpl.n	8003684 <config_imu+0x1f4>
 8003668:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800366c:	eeba 7a06 	vmov.f32	s14, #166	; 0xc1300000 -11.0
 8003670:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003678:	dd04      	ble.n	8003684 <config_imu+0x1f4>
 800367a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800367e:	3301      	adds	r3, #1
 8003680:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if ((-a2_temp[2] > 7) && (-a2_temp[2] < 11)) correct_axes ++;
 8003684:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003688:	eeb9 7a0c 	vmov.f32	s14, #156	; 0xc0e00000 -7.0
 800368c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003694:	d50d      	bpl.n	80036b2 <config_imu+0x222>
 8003696:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800369a:	eeba 7a06 	vmov.f32	s14, #166	; 0xc1300000 -11.0
 800369e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036a6:	dd04      	ble.n	80036b2 <config_imu+0x222>
 80036a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80036ac:	3301      	adds	r3, #1
 80036ae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	if ((imu1_state != 1) || (imu2_state != 1) || (correct_axes != 2)){
 80036b2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d107      	bne.n	80036ca <config_imu+0x23a>
 80036ba:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d103      	bne.n	80036ca <config_imu+0x23a>
 80036c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d001      	beq.n	80036ce <config_imu+0x23e>
		if (DEBUG_PRINT == 1) printf("IMU axes out of bounds. abort. \n");
		if (DEBUG_PRINT == 1) printf("IMU1: %d \n", imu1_state);
		if (DEBUG_PRINT == 1) printf("IMU2: %d \n", imu2_state);
		if (DEBUG_PRINT == 1) printf("IMU ay: %4.2f \n", -a1_temp[2]);
		if (DEBUG_PRINT == 1) printf("IMU ay: %4.2f \n", -a2_temp[2]);
		return 0;
 80036ca:	2300      	movs	r3, #0
 80036cc:	e000      	b.n	80036d0 <config_imu+0x240>
	}
	return 1;
 80036ce:	2301      	movs	r3, #1
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	376c      	adds	r7, #108	; 0x6c
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd90      	pop	{r4, r7, pc}
 80036d8:	42c80000 	.word	0x42c80000
 80036dc:	08014f28 	.word	0x08014f28
 80036e0:	08014f3c 	.word	0x08014f3c

080036e4 <selftest>:

uint8_t selftest(float TD1, float TD2, float BAT1, float BAT2, float LDR){
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	ed87 0a05 	vstr	s0, [r7, #20]
 80036ee:	edc7 0a04 	vstr	s1, [r7, #16]
 80036f2:	ed87 1a03 	vstr	s2, [r7, #12]
 80036f6:	edc7 1a02 	vstr	s3, [r7, #8]
 80036fa:	ed87 2a01 	vstr	s4, [r7, #4]

	//check TD voltage
	play(440,250);
 80036fe:	eddf 0a4a 	vldr	s1, [pc, #296]	; 8003828 <selftest+0x144>
 8003702:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800382c <selftest+0x148>
 8003706:	f7fe f937 	bl	8001978 <play>
	HAL_Delay(500);
 800370a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800370e:	f003 ff35 	bl	800757c <HAL_Delay>
	if (TD1 < 9) {
 8003712:	edd7 7a05 	vldr	s15, [r7, #20]
 8003716:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 800371a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800371e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003722:	d510      	bpl.n	8003746 <selftest+0x62>
		play(880,1000);
 8003724:	eddf 0a42 	vldr	s1, [pc, #264]	; 8003830 <selftest+0x14c>
 8003728:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8003834 <selftest+0x150>
 800372c:	f7fe f924 	bl	8001978 <play>
		HAL_Delay(500);
 8003730:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003734:	f003 ff22 	bl	800757c <HAL_Delay>
		play(880,1000);
 8003738:	eddf 0a3d 	vldr	s1, [pc, #244]	; 8003830 <selftest+0x14c>
 800373c:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8003834 <selftest+0x150>
 8003740:	f7fe f91a 	bl	8001978 <play>
 8003744:	e00f      	b.n	8003766 <selftest+0x82>
	} else {
		play(440,500);
 8003746:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8003838 <selftest+0x154>
 800374a:	ed9f 0a38 	vldr	s0, [pc, #224]	; 800382c <selftest+0x148>
 800374e:	f7fe f913 	bl	8001978 <play>
		HAL_Delay(500);
 8003752:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003756:	f003 ff11 	bl	800757c <HAL_Delay>
		play(880,500);
 800375a:	eddf 0a37 	vldr	s1, [pc, #220]	; 8003838 <selftest+0x154>
 800375e:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8003834 <selftest+0x150>
 8003762:	f7fe f909 	bl	8001978 <play>
	}

	HAL_Delay(1000);
 8003766:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800376a:	f003 ff07 	bl	800757c <HAL_Delay>

	play(440,250);
 800376e:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8003828 <selftest+0x144>
 8003772:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 800382c <selftest+0x148>
 8003776:	f7fe f8ff 	bl	8001978 <play>
	HAL_Delay(250);
 800377a:	20fa      	movs	r0, #250	; 0xfa
 800377c:	f003 fefe 	bl	800757c <HAL_Delay>
	play(440,250);
 8003780:	eddf 0a29 	vldr	s1, [pc, #164]	; 8003828 <selftest+0x144>
 8003784:	ed9f 0a29 	vldr	s0, [pc, #164]	; 800382c <selftest+0x148>
 8003788:	f7fe f8f6 	bl	8001978 <play>
	HAL_Delay(500);
 800378c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003790:	f003 fef4 	bl	800757c <HAL_Delay>
	if (TD2 < 9) {
 8003794:	edd7 7a04 	vldr	s15, [r7, #16]
 8003798:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 800379c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037a4:	d510      	bpl.n	80037c8 <selftest+0xe4>
		play(880,1000);
 80037a6:	eddf 0a22 	vldr	s1, [pc, #136]	; 8003830 <selftest+0x14c>
 80037aa:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8003834 <selftest+0x150>
 80037ae:	f7fe f8e3 	bl	8001978 <play>
		HAL_Delay(500);
 80037b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80037b6:	f003 fee1 	bl	800757c <HAL_Delay>
		play(880,1000);
 80037ba:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8003830 <selftest+0x14c>
 80037be:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8003834 <selftest+0x150>
 80037c2:	f7fe f8d9 	bl	8001978 <play>
 80037c6:	e00f      	b.n	80037e8 <selftest+0x104>
	} else {
		play(440,500);
 80037c8:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8003838 <selftest+0x154>
 80037cc:	ed9f 0a17 	vldr	s0, [pc, #92]	; 800382c <selftest+0x148>
 80037d0:	f7fe f8d2 	bl	8001978 <play>
		HAL_Delay(500);
 80037d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80037d8:	f003 fed0 	bl	800757c <HAL_Delay>
		play(880,500);
 80037dc:	eddf 0a16 	vldr	s1, [pc, #88]	; 8003838 <selftest+0x154>
 80037e0:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8003834 <selftest+0x150>
 80037e4:	f7fe f8c8 	bl	8001978 <play>
	}

	HAL_Delay(1000);
 80037e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80037ec:	f003 fec6 	bl	800757c <HAL_Delay>

	//check battery power,
	if (BAT1 < 11){
 80037f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80037f4:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 80037f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003800:	d501      	bpl.n	8003806 <selftest+0x122>
		play_FAIL_sound();
 8003802:	f7fe f91d 	bl	8001a40 <play_FAIL_sound>
	}

	if (BAT2 < 11){
 8003806:	edd7 7a02 	vldr	s15, [r7, #8]
 800380a:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 800380e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003816:	d501      	bpl.n	800381c <selftest+0x138>
		play_FAIL_sound();
 8003818:	f7fe f912 	bl	8001a40 <play_FAIL_sound>
	}
	//check LDR sensor

	return 1;
 800381c:	2301      	movs	r3, #1
}
 800381e:	4618      	mov	r0, r3
 8003820:	3718      	adds	r7, #24
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	437a0000 	.word	0x437a0000
 800382c:	43dc0000 	.word	0x43dc0000
 8003830:	447a0000 	.word	0x447a0000
 8003834:	445c0000 	.word	0x445c0000
 8003838:	43fa0000 	.word	0x43fa0000

0800383c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8003840:	4b17      	ldr	r3, [pc, #92]	; (80038a0 <MX_SPI1_Init+0x64>)
 8003842:	4a18      	ldr	r2, [pc, #96]	; (80038a4 <MX_SPI1_Init+0x68>)
 8003844:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003846:	4b16      	ldr	r3, [pc, #88]	; (80038a0 <MX_SPI1_Init+0x64>)
 8003848:	f44f 7282 	mov.w	r2, #260	; 0x104
 800384c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800384e:	4b14      	ldr	r3, [pc, #80]	; (80038a0 <MX_SPI1_Init+0x64>)
 8003850:	2200      	movs	r2, #0
 8003852:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003854:	4b12      	ldr	r3, [pc, #72]	; (80038a0 <MX_SPI1_Init+0x64>)
 8003856:	2200      	movs	r2, #0
 8003858:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800385a:	4b11      	ldr	r3, [pc, #68]	; (80038a0 <MX_SPI1_Init+0x64>)
 800385c:	2200      	movs	r2, #0
 800385e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003860:	4b0f      	ldr	r3, [pc, #60]	; (80038a0 <MX_SPI1_Init+0x64>)
 8003862:	2200      	movs	r2, #0
 8003864:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003866:	4b0e      	ldr	r3, [pc, #56]	; (80038a0 <MX_SPI1_Init+0x64>)
 8003868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800386c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800386e:	4b0c      	ldr	r3, [pc, #48]	; (80038a0 <MX_SPI1_Init+0x64>)
 8003870:	2200      	movs	r2, #0
 8003872:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003874:	4b0a      	ldr	r3, [pc, #40]	; (80038a0 <MX_SPI1_Init+0x64>)
 8003876:	2200      	movs	r2, #0
 8003878:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800387a:	4b09      	ldr	r3, [pc, #36]	; (80038a0 <MX_SPI1_Init+0x64>)
 800387c:	2200      	movs	r2, #0
 800387e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003880:	4b07      	ldr	r3, [pc, #28]	; (80038a0 <MX_SPI1_Init+0x64>)
 8003882:	2200      	movs	r2, #0
 8003884:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003886:	4b06      	ldr	r3, [pc, #24]	; (80038a0 <MX_SPI1_Init+0x64>)
 8003888:	220a      	movs	r2, #10
 800388a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800388c:	4804      	ldr	r0, [pc, #16]	; (80038a0 <MX_SPI1_Init+0x64>)
 800388e:	f008 f9c3 	bl	800bc18 <HAL_SPI_Init>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003898:	f7fe fbe6 	bl	8002068 <Error_Handler>
  }

}
 800389c:	bf00      	nop
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	20015c5c 	.word	0x20015c5c
 80038a4:	40013000 	.word	0x40013000

080038a8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80038ac:	4b17      	ldr	r3, [pc, #92]	; (800390c <MX_SPI2_Init+0x64>)
 80038ae:	4a18      	ldr	r2, [pc, #96]	; (8003910 <MX_SPI2_Init+0x68>)
 80038b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80038b2:	4b16      	ldr	r3, [pc, #88]	; (800390c <MX_SPI2_Init+0x64>)
 80038b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80038b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80038ba:	4b14      	ldr	r3, [pc, #80]	; (800390c <MX_SPI2_Init+0x64>)
 80038bc:	2200      	movs	r2, #0
 80038be:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80038c0:	4b12      	ldr	r3, [pc, #72]	; (800390c <MX_SPI2_Init+0x64>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80038c6:	4b11      	ldr	r3, [pc, #68]	; (800390c <MX_SPI2_Init+0x64>)
 80038c8:	2200      	movs	r2, #0
 80038ca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80038cc:	4b0f      	ldr	r3, [pc, #60]	; (800390c <MX_SPI2_Init+0x64>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80038d2:	4b0e      	ldr	r3, [pc, #56]	; (800390c <MX_SPI2_Init+0x64>)
 80038d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038d8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038da:	4b0c      	ldr	r3, [pc, #48]	; (800390c <MX_SPI2_Init+0x64>)
 80038dc:	2200      	movs	r2, #0
 80038de:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038e0:	4b0a      	ldr	r3, [pc, #40]	; (800390c <MX_SPI2_Init+0x64>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80038e6:	4b09      	ldr	r3, [pc, #36]	; (800390c <MX_SPI2_Init+0x64>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038ec:	4b07      	ldr	r3, [pc, #28]	; (800390c <MX_SPI2_Init+0x64>)
 80038ee:	2200      	movs	r2, #0
 80038f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80038f2:	4b06      	ldr	r3, [pc, #24]	; (800390c <MX_SPI2_Init+0x64>)
 80038f4:	220a      	movs	r2, #10
 80038f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80038f8:	4804      	ldr	r0, [pc, #16]	; (800390c <MX_SPI2_Init+0x64>)
 80038fa:	f008 f98d 	bl	800bc18 <HAL_SPI_Init>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003904:	f7fe fbb0 	bl	8002068 <Error_Handler>
  }

}
 8003908:	bf00      	nop
 800390a:	bd80      	pop	{r7, pc}
 800390c:	20015c04 	.word	0x20015c04
 8003910:	40003800 	.word	0x40003800

08003914 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b08c      	sub	sp, #48	; 0x30
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800391c:	f107 031c 	add.w	r3, r7, #28
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	605a      	str	r2, [r3, #4]
 8003926:	609a      	str	r2, [r3, #8]
 8003928:	60da      	str	r2, [r3, #12]
 800392a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a32      	ldr	r2, [pc, #200]	; (80039fc <HAL_SPI_MspInit+0xe8>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d12c      	bne.n	8003990 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003936:	2300      	movs	r3, #0
 8003938:	61bb      	str	r3, [r7, #24]
 800393a:	4b31      	ldr	r3, [pc, #196]	; (8003a00 <HAL_SPI_MspInit+0xec>)
 800393c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393e:	4a30      	ldr	r2, [pc, #192]	; (8003a00 <HAL_SPI_MspInit+0xec>)
 8003940:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003944:	6453      	str	r3, [r2, #68]	; 0x44
 8003946:	4b2e      	ldr	r3, [pc, #184]	; (8003a00 <HAL_SPI_MspInit+0xec>)
 8003948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800394e:	61bb      	str	r3, [r7, #24]
 8003950:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003952:	2300      	movs	r3, #0
 8003954:	617b      	str	r3, [r7, #20]
 8003956:	4b2a      	ldr	r3, [pc, #168]	; (8003a00 <HAL_SPI_MspInit+0xec>)
 8003958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395a:	4a29      	ldr	r2, [pc, #164]	; (8003a00 <HAL_SPI_MspInit+0xec>)
 800395c:	f043 0301 	orr.w	r3, r3, #1
 8003960:	6313      	str	r3, [r2, #48]	; 0x30
 8003962:	4b27      	ldr	r3, [pc, #156]	; (8003a00 <HAL_SPI_MspInit+0xec>)
 8003964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	617b      	str	r3, [r7, #20]
 800396c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800396e:	23e0      	movs	r3, #224	; 0xe0
 8003970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003972:	2302      	movs	r3, #2
 8003974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003976:	2300      	movs	r3, #0
 8003978:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800397a:	2303      	movs	r3, #3
 800397c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800397e:	2305      	movs	r3, #5
 8003980:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003982:	f107 031c 	add.w	r3, r7, #28
 8003986:	4619      	mov	r1, r3
 8003988:	481e      	ldr	r0, [pc, #120]	; (8003a04 <HAL_SPI_MspInit+0xf0>)
 800398a:	f004 ff75 	bl	8008878 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800398e:	e031      	b.n	80039f4 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a1c      	ldr	r2, [pc, #112]	; (8003a08 <HAL_SPI_MspInit+0xf4>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d12c      	bne.n	80039f4 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800399a:	2300      	movs	r3, #0
 800399c:	613b      	str	r3, [r7, #16]
 800399e:	4b18      	ldr	r3, [pc, #96]	; (8003a00 <HAL_SPI_MspInit+0xec>)
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	4a17      	ldr	r2, [pc, #92]	; (8003a00 <HAL_SPI_MspInit+0xec>)
 80039a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039a8:	6413      	str	r3, [r2, #64]	; 0x40
 80039aa:	4b15      	ldr	r3, [pc, #84]	; (8003a00 <HAL_SPI_MspInit+0xec>)
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039b2:	613b      	str	r3, [r7, #16]
 80039b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039b6:	2300      	movs	r3, #0
 80039b8:	60fb      	str	r3, [r7, #12]
 80039ba:	4b11      	ldr	r3, [pc, #68]	; (8003a00 <HAL_SPI_MspInit+0xec>)
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	4a10      	ldr	r2, [pc, #64]	; (8003a00 <HAL_SPI_MspInit+0xec>)
 80039c0:	f043 0302 	orr.w	r3, r3, #2
 80039c4:	6313      	str	r3, [r2, #48]	; 0x30
 80039c6:	4b0e      	ldr	r3, [pc, #56]	; (8003a00 <HAL_SPI_MspInit+0xec>)
 80039c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80039d2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80039d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d8:	2302      	movs	r3, #2
 80039da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039dc:	2300      	movs	r3, #0
 80039de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039e0:	2303      	movs	r3, #3
 80039e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80039e4:	2305      	movs	r3, #5
 80039e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039e8:	f107 031c 	add.w	r3, r7, #28
 80039ec:	4619      	mov	r1, r3
 80039ee:	4807      	ldr	r0, [pc, #28]	; (8003a0c <HAL_SPI_MspInit+0xf8>)
 80039f0:	f004 ff42 	bl	8008878 <HAL_GPIO_Init>
}
 80039f4:	bf00      	nop
 80039f6:	3730      	adds	r7, #48	; 0x30
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40013000 	.word	0x40013000
 8003a00:	40023800 	.word	0x40023800
 8003a04:	40020000 	.word	0x40020000
 8003a08:	40003800 	.word	0x40003800
 8003a0c:	40020400 	.word	0x40020400

08003a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a16:	2300      	movs	r3, #0
 8003a18:	607b      	str	r3, [r7, #4]
 8003a1a:	4b10      	ldr	r3, [pc, #64]	; (8003a5c <HAL_MspInit+0x4c>)
 8003a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1e:	4a0f      	ldr	r2, [pc, #60]	; (8003a5c <HAL_MspInit+0x4c>)
 8003a20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a24:	6453      	str	r3, [r2, #68]	; 0x44
 8003a26:	4b0d      	ldr	r3, [pc, #52]	; (8003a5c <HAL_MspInit+0x4c>)
 8003a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a2e:	607b      	str	r3, [r7, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a32:	2300      	movs	r3, #0
 8003a34:	603b      	str	r3, [r7, #0]
 8003a36:	4b09      	ldr	r3, [pc, #36]	; (8003a5c <HAL_MspInit+0x4c>)
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	4a08      	ldr	r2, [pc, #32]	; (8003a5c <HAL_MspInit+0x4c>)
 8003a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a40:	6413      	str	r3, [r2, #64]	; 0x40
 8003a42:	4b06      	ldr	r3, [pc, #24]	; (8003a5c <HAL_MspInit+0x4c>)
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4a:	603b      	str	r3, [r7, #0]
 8003a4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	40023800 	.word	0x40023800

08003a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003a64:	bf00      	nop
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a72:	e7fe      	b.n	8003a72 <HardFault_Handler+0x4>

08003a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a78:	e7fe      	b.n	8003a78 <MemManage_Handler+0x4>

08003a7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a7e:	e7fe      	b.n	8003a7e <BusFault_Handler+0x4>

08003a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a84:	e7fe      	b.n	8003a84 <UsageFault_Handler+0x4>

08003a86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a86:	b480      	push	{r7}
 8003a88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a8a:	bf00      	nop
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a98:	bf00      	nop
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003aa6:	bf00      	nop
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ab4:	f003 fd42 	bl	800753c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ab8:	bf00      	nop
 8003aba:	bd80      	pop	{r7, pc}

08003abc <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8003ac0:	4802      	ldr	r0, [pc, #8]	; (8003acc <SDIO_IRQHandler+0x10>)
 8003ac2:	f007 f815 	bl	800aaf0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8003ac6:	bf00      	nop
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	20015b80 	.word	0x20015b80

08003ad0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003ad4:	4802      	ldr	r0, [pc, #8]	; (8003ae0 <DMA2_Stream0_IRQHandler+0x10>)
 8003ad6:	f004 fc5b 	bl	8008390 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003ada:	bf00      	nop
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	200049b0 	.word	0x200049b0

08003ae4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8003ae8:	4802      	ldr	r0, [pc, #8]	; (8003af4 <DMA2_Stream3_IRQHandler+0x10>)
 8003aea:	f004 fc51 	bl	8008390 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003aee:	bf00      	nop
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	20015ac0 	.word	0x20015ac0

08003af8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8003afc:	4802      	ldr	r0, [pc, #8]	; (8003b08 <DMA2_Stream6_IRQHandler+0x10>)
 8003afe:	f004 fc47 	bl	8008390 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003b02:	bf00      	nop
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	20015b20 	.word	0x20015b20

08003b0c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003b14:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003b18:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d013      	beq.n	8003b4c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003b24:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003b28:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003b2c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00b      	beq.n	8003b4c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003b34:	e000      	b.n	8003b38 <ITM_SendChar+0x2c>
    {
      __NOP();
 8003b36:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003b38:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0f9      	beq.n	8003b36 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003b42:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	b2d2      	uxtb	r2, r2
 8003b4a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003b4c:	687b      	ldr	r3, [r7, #4]
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b5a:	b580      	push	{r7, lr}
 8003b5c:	b086      	sub	sp, #24
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	60f8      	str	r0, [r7, #12]
 8003b62:	60b9      	str	r1, [r7, #8]
 8003b64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b66:	2300      	movs	r3, #0
 8003b68:	617b      	str	r3, [r7, #20]
 8003b6a:	e00a      	b.n	8003b82 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003b6c:	f3af 8000 	nop.w
 8003b70:	4601      	mov	r1, r0
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	1c5a      	adds	r2, r3, #1
 8003b76:	60ba      	str	r2, [r7, #8]
 8003b78:	b2ca      	uxtb	r2, r1
 8003b7a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	3301      	adds	r3, #1
 8003b80:	617b      	str	r3, [r7, #20]
 8003b82:	697a      	ldr	r2, [r7, #20]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	429a      	cmp	r2, r3
 8003b88:	dbf0      	blt.n	8003b6c <_read+0x12>
	}

return len;
 8003b8a:	687b      	ldr	r3, [r7, #4]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3718      	adds	r7, #24
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	617b      	str	r3, [r7, #20]
 8003ba4:	e009      	b.n	8003bba <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar((*ptr++));
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	1c5a      	adds	r2, r3, #1
 8003baa:	60ba      	str	r2, [r7, #8]
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7ff ffac 	bl	8003b0c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	617b      	str	r3, [r7, #20]
 8003bba:	697a      	ldr	r2, [r7, #20]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	dbf1      	blt.n	8003ba6 <_write+0x12>
	}
	return len;
 8003bc2:	687b      	ldr	r3, [r7, #4]
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3718      	adds	r7, #24
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <_close>:

int _close(int file)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
	return -1;
 8003bd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003bf4:	605a      	str	r2, [r3, #4]
	return 0;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <_isatty>:

int _isatty(int file)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
	return 1;
 8003c0c:	2301      	movs	r3, #1
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr

08003c1a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b085      	sub	sp, #20
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	60f8      	str	r0, [r7, #12]
 8003c22:	60b9      	str	r1, [r7, #8]
 8003c24:	607a      	str	r2, [r7, #4]
	return 0;
 8003c26:	2300      	movs	r3, #0
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003c3c:	4b11      	ldr	r3, [pc, #68]	; (8003c84 <_sbrk+0x50>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d102      	bne.n	8003c4a <_sbrk+0x16>
		heap_end = &end;
 8003c44:	4b0f      	ldr	r3, [pc, #60]	; (8003c84 <_sbrk+0x50>)
 8003c46:	4a10      	ldr	r2, [pc, #64]	; (8003c88 <_sbrk+0x54>)
 8003c48:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003c4a:	4b0e      	ldr	r3, [pc, #56]	; (8003c84 <_sbrk+0x50>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003c50:	4b0c      	ldr	r3, [pc, #48]	; (8003c84 <_sbrk+0x50>)
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4413      	add	r3, r2
 8003c58:	466a      	mov	r2, sp
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d907      	bls.n	8003c6e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003c5e:	f00c fc75 	bl	801054c <__errno>
 8003c62:	4602      	mov	r2, r0
 8003c64:	230c      	movs	r3, #12
 8003c66:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003c68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c6c:	e006      	b.n	8003c7c <_sbrk+0x48>
	}

	heap_end += incr;
 8003c6e:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <_sbrk+0x50>)
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4413      	add	r3, r2
 8003c76:	4a03      	ldr	r2, [pc, #12]	; (8003c84 <_sbrk+0x50>)
 8003c78:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	20000830 	.word	0x20000830
 8003c88:	20017d28 	.word	0x20017d28

08003c8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c90:	4b08      	ldr	r3, [pc, #32]	; (8003cb4 <SystemInit+0x28>)
 8003c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c96:	4a07      	ldr	r2, [pc, #28]	; (8003cb4 <SystemInit+0x28>)
 8003c98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003ca0:	4b04      	ldr	r3, [pc, #16]	; (8003cb4 <SystemInit+0x28>)
 8003ca2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003ca6:	609a      	str	r2, [r3, #8]
#endif
}
 8003ca8:	bf00      	nop
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	e000ed00 	.word	0xe000ed00

08003cb8 <h3l_init>:
uint8_t _DELAY_HL = 100;
uint8_t _ADDR_HL = 0x18 << 1;

//almost copy of SHT31 drivers
uint8_t h3l_init(struct h3l_dev * dev)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef _ret;
	if (HAL_I2C_GetState(dev->i2c_bus) != HAL_I2C_STATE_READY)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f005 fd47 	bl	8009758 <HAL_I2C_GetState>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b20      	cmp	r3, #32
 8003cce:	d003      	beq.n	8003cd8 <h3l_init+0x20>
	{
		printf("i2c1 not ready!\n");
 8003cd0:	481a      	ldr	r0, [pc, #104]	; (8003d3c <h3l_init+0x84>)
 8003cd2:	f00d f949 	bl	8010f68 <puts>
 8003cd6:	e002      	b.n	8003cde <h3l_init+0x26>
	} else {
		printf("i2c1 is ready!\n");
 8003cd8:	4819      	ldr	r0, [pc, #100]	; (8003d40 <h3l_init+0x88>)
 8003cda:	f00d f945 	bl	8010f68 <puts>
	}
	_ret = HAL_I2C_IsDeviceReady(dev->i2c_bus, dev->addr, 10, dev->delay);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6858      	ldr	r0, [r3, #4]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	b299      	uxth	r1, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	7a1b      	ldrb	r3, [r3, #8]
 8003cec:	220a      	movs	r2, #10
 8003cee:	f005 fc05 	bl	80094fc <HAL_I2C_IsDeviceReady>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	73fb      	strb	r3, [r7, #15]
	if ( _ret != HAL_OK )
 8003cf6:	7bfb      	ldrb	r3, [r7, #15]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d009      	beq.n	8003d10 <h3l_init+0x58>
	{
		printf("H3L setup fail\n");
 8003cfc:	4811      	ldr	r0, [pc, #68]	; (8003d44 <h3l_init+0x8c>)
 8003cfe:	f00d f933 	bl	8010f68 <puts>
		printf("Errorcode: %d\n", _ret);
 8003d02:	7bfb      	ldrb	r3, [r7, #15]
 8003d04:	4619      	mov	r1, r3
 8003d06:	4810      	ldr	r0, [pc, #64]	; (8003d48 <h3l_init+0x90>)
 8003d08:	f00d f8ba 	bl	8010e80 <iprintf>
		return 0;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	e010      	b.n	8003d32 <h3l_init+0x7a>
	}

	//power up
	uint8_t PWR_CONF = 0b00111111;
 8003d10:	233f      	movs	r3, #63	; 0x3f
 8003d12:	73bb      	strb	r3, [r7, #14]
	//PWR_CONF = 0x27;

	h3l_write(dev, 0x20, PWR_CONF);
 8003d14:	7bbb      	ldrb	r3, [r7, #14]
 8003d16:	461a      	mov	r2, r3
 8003d18:	2120      	movs	r1, #32
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f9b0 	bl	8004080 <h3l_write>


	PWR_CONF = 0b10000000;
 8003d20:	2380      	movs	r3, #128	; 0x80
 8003d22:	73bb      	strb	r3, [r7, #14]
	h3l_write(dev, 0x23, PWR_CONF);
 8003d24:	7bbb      	ldrb	r3, [r7, #14]
 8003d26:	461a      	mov	r2, r3
 8003d28:	2123      	movs	r1, #35	; 0x23
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 f9a8 	bl	8004080 <h3l_write>
	//HAL_Delay(5);
	_ret = HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf, 1, dev->delay);
	printf("WHOAMI: %d \n", buf);
	*/

	return 1;
 8003d30:	2301      	movs	r3, #1
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	08014f50 	.word	0x08014f50
 8003d40:	08014f60 	.word	0x08014f60
 8003d44:	08014f70 	.word	0x08014f70
 8003d48:	08014f80 	.word	0x08014f80

08003d4c <h3l_read_raw>:


void h3l_read_raw(struct h3l_dev * dev, int16_t * dat)
{
 8003d4c:	b590      	push	{r4, r7, lr}
 8003d4e:	b087      	sub	sp, #28
 8003d50:	af02      	add	r7, sp, #8
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]

	uint8_t reg;
	uint8_t buf[6];

	reg = 0x28;
 8003d56:	2328      	movs	r3, #40	; 0x28
 8003d58:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6858      	ldr	r0, [r3, #4]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	b299      	uxth	r1, r3
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	7a1b      	ldrb	r3, [r3, #8]
 8003d68:	f107 020f 	add.w	r2, r7, #15
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	2301      	movs	r3, #1
 8003d70:	f005 f8a0 	bl	8008eb4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[0], 1, dev->delay);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6858      	ldr	r0, [r3, #4]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	b299      	uxth	r1, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	7a1b      	ldrb	r3, [r3, #8]
 8003d82:	f107 0208 	add.w	r2, r7, #8
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	2301      	movs	r3, #1
 8003d8a:	f005 f991 	bl	80090b0 <HAL_I2C_Master_Receive>
	reg = 0x29;
 8003d8e:	2329      	movs	r3, #41	; 0x29
 8003d90:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6858      	ldr	r0, [r3, #4]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	b299      	uxth	r1, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	7a1b      	ldrb	r3, [r3, #8]
 8003da0:	f107 020f 	add.w	r2, r7, #15
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	2301      	movs	r3, #1
 8003da8:	f005 f884 	bl	8008eb4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[1], 1, dev->delay);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6858      	ldr	r0, [r3, #4]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	b299      	uxth	r1, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	7a1b      	ldrb	r3, [r3, #8]
 8003dba:	461c      	mov	r4, r3
 8003dbc:	f107 0308 	add.w	r3, r7, #8
 8003dc0:	1c5a      	adds	r2, r3, #1
 8003dc2:	9400      	str	r4, [sp, #0]
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	f005 f973 	bl	80090b0 <HAL_I2C_Master_Receive>
	reg = 0x2A;
 8003dca:	232a      	movs	r3, #42	; 0x2a
 8003dcc:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6858      	ldr	r0, [r3, #4]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	b299      	uxth	r1, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	7a1b      	ldrb	r3, [r3, #8]
 8003ddc:	f107 020f 	add.w	r2, r7, #15
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	2301      	movs	r3, #1
 8003de4:	f005 f866 	bl	8008eb4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[2], 1, dev->delay);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6858      	ldr	r0, [r3, #4]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	b299      	uxth	r1, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	7a1b      	ldrb	r3, [r3, #8]
 8003df6:	461c      	mov	r4, r3
 8003df8:	f107 0308 	add.w	r3, r7, #8
 8003dfc:	1c9a      	adds	r2, r3, #2
 8003dfe:	9400      	str	r4, [sp, #0]
 8003e00:	2301      	movs	r3, #1
 8003e02:	f005 f955 	bl	80090b0 <HAL_I2C_Master_Receive>
	reg = 0x2B;
 8003e06:	232b      	movs	r3, #43	; 0x2b
 8003e08:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6858      	ldr	r0, [r3, #4]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	b299      	uxth	r1, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	7a1b      	ldrb	r3, [r3, #8]
 8003e18:	f107 020f 	add.w	r2, r7, #15
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	2301      	movs	r3, #1
 8003e20:	f005 f848 	bl	8008eb4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[3], 1, dev->delay);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6858      	ldr	r0, [r3, #4]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	b299      	uxth	r1, r3
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	7a1b      	ldrb	r3, [r3, #8]
 8003e32:	461c      	mov	r4, r3
 8003e34:	f107 0308 	add.w	r3, r7, #8
 8003e38:	1cda      	adds	r2, r3, #3
 8003e3a:	9400      	str	r4, [sp, #0]
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	f005 f937 	bl	80090b0 <HAL_I2C_Master_Receive>
	reg = 0x2C;
 8003e42:	232c      	movs	r3, #44	; 0x2c
 8003e44:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6858      	ldr	r0, [r3, #4]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	b299      	uxth	r1, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	7a1b      	ldrb	r3, [r3, #8]
 8003e54:	f107 020f 	add.w	r2, r7, #15
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	f005 f82a 	bl	8008eb4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[4], 1, dev->delay);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6858      	ldr	r0, [r3, #4]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	b299      	uxth	r1, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	7a1b      	ldrb	r3, [r3, #8]
 8003e6e:	461c      	mov	r4, r3
 8003e70:	f107 0308 	add.w	r3, r7, #8
 8003e74:	1d1a      	adds	r2, r3, #4
 8003e76:	9400      	str	r4, [sp, #0]
 8003e78:	2301      	movs	r3, #1
 8003e7a:	f005 f919 	bl	80090b0 <HAL_I2C_Master_Receive>
	reg = 0x2D;
 8003e7e:	232d      	movs	r3, #45	; 0x2d
 8003e80:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6858      	ldr	r0, [r3, #4]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	b299      	uxth	r1, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	7a1b      	ldrb	r3, [r3, #8]
 8003e90:	f107 020f 	add.w	r2, r7, #15
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	2301      	movs	r3, #1
 8003e98:	f005 f80c 	bl	8008eb4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[5], 1, dev->delay);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6858      	ldr	r0, [r3, #4]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	b299      	uxth	r1, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	7a1b      	ldrb	r3, [r3, #8]
 8003eaa:	461c      	mov	r4, r3
 8003eac:	f107 0308 	add.w	r3, r7, #8
 8003eb0:	1d5a      	adds	r2, r3, #5
 8003eb2:	9400      	str	r4, [sp, #0]
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	f005 f8fb 	bl	80090b0 <HAL_I2C_Master_Receive>

	dev->dat[0] = (buf[0]) | (int16_t)(buf[1] << 8);
 8003eba:	7a3b      	ldrb	r3, [r7, #8]
 8003ebc:	b21a      	sxth	r2, r3
 8003ebe:	7a7b      	ldrb	r3, [r7, #9]
 8003ec0:	021b      	lsls	r3, r3, #8
 8003ec2:	b21b      	sxth	r3, r3
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	b21a      	sxth	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	815a      	strh	r2, [r3, #10]
	dev->dat[1] = (buf[2]) | (int16_t)(buf[3] << 8);
 8003ecc:	7abb      	ldrb	r3, [r7, #10]
 8003ece:	b21a      	sxth	r2, r3
 8003ed0:	7afb      	ldrb	r3, [r7, #11]
 8003ed2:	021b      	lsls	r3, r3, #8
 8003ed4:	b21b      	sxth	r3, r3
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	b21a      	sxth	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	819a      	strh	r2, [r3, #12]
	dev->dat[2] = (buf[4]) | (int16_t)(buf[5] << 8);
 8003ede:	7b3b      	ldrb	r3, [r7, #12]
 8003ee0:	b21a      	sxth	r2, r3
 8003ee2:	7b7b      	ldrb	r3, [r7, #13]
 8003ee4:	021b      	lsls	r3, r3, #8
 8003ee6:	b21b      	sxth	r3, r3
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	b21a      	sxth	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	81da      	strh	r2, [r3, #14]
	dev->dat[0] = dev->dat[0] >> 4;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003ef6:	111b      	asrs	r3, r3, #4
 8003ef8:	b21a      	sxth	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	815a      	strh	r2, [r3, #10]
	dev->dat[1] = dev->dat[1] >> 4;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003f04:	111b      	asrs	r3, r3, #4
 8003f06:	b21a      	sxth	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	819a      	strh	r2, [r3, #12]
	dev->dat[2] = dev->dat[2] >> 4;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003f12:	111b      	asrs	r3, r3, #4
 8003f14:	b21a      	sxth	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	81da      	strh	r2, [r3, #14]
	dat[0] = dev->dat[0];
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	801a      	strh	r2, [r3, #0]
	dat[1] = dev->dat[1];
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	3302      	adds	r3, #2
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8003f2e:	801a      	strh	r2, [r3, #0]
	dat[2] = dev->dat[2];
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	3304      	adds	r3, #4
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8003f3a:	801a      	strh	r2, [r3, #0]

};
 8003f3c:	bf00      	nop
 8003f3e:	3714      	adds	r7, #20
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd90      	pop	{r4, r7, pc}
 8003f44:	0000      	movs	r0, r0
	...

08003f48 <h3l_convert>:

void h3l_convert(struct h3l_dev * dev, float* out)
{
 8003f48:	b590      	push	{r4, r7, lr}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]

	out[0] = (float)(dev->dat[0]) * 49. / 1000. * 9.81;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003f58:	ee07 3a90 	vmov	s15, r3
 8003f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f60:	ee17 0a90 	vmov	r0, s15
 8003f64:	f7fc faf0 	bl	8000548 <__aeabi_f2d>
 8003f68:	f04f 0200 	mov.w	r2, #0
 8003f6c:	4b42      	ldr	r3, [pc, #264]	; (8004078 <h3l_convert+0x130>)
 8003f6e:	f7fc fb43 	bl	80005f8 <__aeabi_dmul>
 8003f72:	4603      	mov	r3, r0
 8003f74:	460c      	mov	r4, r1
 8003f76:	4618      	mov	r0, r3
 8003f78:	4621      	mov	r1, r4
 8003f7a:	f04f 0200 	mov.w	r2, #0
 8003f7e:	4b3f      	ldr	r3, [pc, #252]	; (800407c <h3l_convert+0x134>)
 8003f80:	f7fc fc64 	bl	800084c <__aeabi_ddiv>
 8003f84:	4603      	mov	r3, r0
 8003f86:	460c      	mov	r4, r1
 8003f88:	4618      	mov	r0, r3
 8003f8a:	4621      	mov	r1, r4
 8003f8c:	a338      	add	r3, pc, #224	; (adr r3, 8004070 <h3l_convert+0x128>)
 8003f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f92:	f7fc fb31 	bl	80005f8 <__aeabi_dmul>
 8003f96:	4603      	mov	r3, r0
 8003f98:	460c      	mov	r4, r1
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	4621      	mov	r1, r4
 8003f9e:	f7fc fe23 	bl	8000be8 <__aeabi_d2f>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	601a      	str	r2, [r3, #0]
	out[1] = (float)(dev->dat[1]) * 49. / 1000. * 9.81;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003fae:	ee07 3a90 	vmov	s15, r3
 8003fb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fb6:	ee17 0a90 	vmov	r0, s15
 8003fba:	f7fc fac5 	bl	8000548 <__aeabi_f2d>
 8003fbe:	f04f 0200 	mov.w	r2, #0
 8003fc2:	4b2d      	ldr	r3, [pc, #180]	; (8004078 <h3l_convert+0x130>)
 8003fc4:	f7fc fb18 	bl	80005f8 <__aeabi_dmul>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	460c      	mov	r4, r1
 8003fcc:	4618      	mov	r0, r3
 8003fce:	4621      	mov	r1, r4
 8003fd0:	f04f 0200 	mov.w	r2, #0
 8003fd4:	4b29      	ldr	r3, [pc, #164]	; (800407c <h3l_convert+0x134>)
 8003fd6:	f7fc fc39 	bl	800084c <__aeabi_ddiv>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	460c      	mov	r4, r1
 8003fde:	4618      	mov	r0, r3
 8003fe0:	4621      	mov	r1, r4
 8003fe2:	a323      	add	r3, pc, #140	; (adr r3, 8004070 <h3l_convert+0x128>)
 8003fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe8:	f7fc fb06 	bl	80005f8 <__aeabi_dmul>
 8003fec:	4603      	mov	r3, r0
 8003fee:	460c      	mov	r4, r1
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	4622      	mov	r2, r4
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	1d1c      	adds	r4, r3, #4
 8003ff8:	4608      	mov	r0, r1
 8003ffa:	4611      	mov	r1, r2
 8003ffc:	f7fc fdf4 	bl	8000be8 <__aeabi_d2f>
 8004000:	4603      	mov	r3, r0
 8004002:	6023      	str	r3, [r4, #0]
	out[2] = (float)(dev->dat[2]) * 49. / 1000. * 9.81;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800400a:	ee07 3a90 	vmov	s15, r3
 800400e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004012:	ee17 0a90 	vmov	r0, s15
 8004016:	f7fc fa97 	bl	8000548 <__aeabi_f2d>
 800401a:	f04f 0200 	mov.w	r2, #0
 800401e:	4b16      	ldr	r3, [pc, #88]	; (8004078 <h3l_convert+0x130>)
 8004020:	f7fc faea 	bl	80005f8 <__aeabi_dmul>
 8004024:	4603      	mov	r3, r0
 8004026:	460c      	mov	r4, r1
 8004028:	4618      	mov	r0, r3
 800402a:	4621      	mov	r1, r4
 800402c:	f04f 0200 	mov.w	r2, #0
 8004030:	4b12      	ldr	r3, [pc, #72]	; (800407c <h3l_convert+0x134>)
 8004032:	f7fc fc0b 	bl	800084c <__aeabi_ddiv>
 8004036:	4603      	mov	r3, r0
 8004038:	460c      	mov	r4, r1
 800403a:	4618      	mov	r0, r3
 800403c:	4621      	mov	r1, r4
 800403e:	a30c      	add	r3, pc, #48	; (adr r3, 8004070 <h3l_convert+0x128>)
 8004040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004044:	f7fc fad8 	bl	80005f8 <__aeabi_dmul>
 8004048:	4603      	mov	r3, r0
 800404a:	460c      	mov	r4, r1
 800404c:	4619      	mov	r1, r3
 800404e:	4622      	mov	r2, r4
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	f103 0408 	add.w	r4, r3, #8
 8004056:	4608      	mov	r0, r1
 8004058:	4611      	mov	r1, r2
 800405a:	f7fc fdc5 	bl	8000be8 <__aeabi_d2f>
 800405e:	4603      	mov	r3, r0
 8004060:	6023      	str	r3, [r4, #0]

	//printf("ax: %4.2f, ay: %4.2f, az: %4.2f\n",buffer[0],buffer[1],buffer[2]);

}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	bd90      	pop	{r4, r7, pc}
 800406a:	bf00      	nop
 800406c:	f3af 8000 	nop.w
 8004070:	51eb851f 	.word	0x51eb851f
 8004074:	40239eb8 	.word	0x40239eb8
 8004078:	40488000 	.word	0x40488000
 800407c:	408f4000 	.word	0x408f4000

08004080 <h3l_write>:


void h3l_write(struct h3l_dev * dev, uint8_t reg, uint8_t val)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af02      	add	r7, sp, #8
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	460b      	mov	r3, r1
 800408a:	70fb      	strb	r3, [r7, #3]
 800408c:	4613      	mov	r3, r2
 800408e:	70bb      	strb	r3, [r7, #2]
	uint8_t _buf[2];
	//printf("writing to h3l: %d\n",val);
	_buf[0] = reg;
 8004090:	78fb      	ldrb	r3, [r7, #3]
 8004092:	733b      	strb	r3, [r7, #12]
	_buf[1] = val;
 8004094:	78bb      	ldrb	r3, [r7, #2]
 8004096:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, _buf, 2, dev->delay);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6858      	ldr	r0, [r3, #4]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	b299      	uxth	r1, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	7a1b      	ldrb	r3, [r3, #8]
 80040a6:	f107 020c 	add.w	r2, r7, #12
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	2302      	movs	r3, #2
 80040ae:	f004 ff01 	bl	8008eb4 <HAL_I2C_Master_Transmit>

};
 80040b2:	bf00      	nop
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
	...

080040bc <_get_accel_sensitivity>:
static float temperature_sensitivity = 326.8;

// *** Local functions *** //

// Used to convert raw accelerometer readings to G-force.
float _get_accel_sensitivity(enum icm20601_accel_g accel_g) {
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	4603      	mov	r3, r0
 80040c4:	71fb      	strb	r3, [r7, #7]
	float f = 0.0;
 80040c6:	f04f 0300 	mov.w	r3, #0
 80040ca:	60fb      	str	r3, [r7, #12]

  	switch (accel_g) {
 80040cc:	79fb      	ldrb	r3, [r7, #7]
 80040ce:	2b03      	cmp	r3, #3
 80040d0:	d81a      	bhi.n	8004108 <_get_accel_sensitivity+0x4c>
 80040d2:	a201      	add	r2, pc, #4	; (adr r2, 80040d8 <_get_accel_sensitivity+0x1c>)
 80040d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d8:	080040e9 	.word	0x080040e9
 80040dc:	080040f1 	.word	0x080040f1
 80040e0:	080040f9 	.word	0x080040f9
 80040e4:	08004101 	.word	0x08004101
  	case (ICM20601_ACCEL_RANGE_4G):
    		f = 8192.0;
 80040e8:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 80040ec:	60fb      	str	r3, [r7, #12]
    break;
 80040ee:	e00b      	b.n	8004108 <_get_accel_sensitivity+0x4c>
  	case (ICM20601_ACCEL_RANGE_8G):
    		f = 4096.0;
 80040f0:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 80040f4:	60fb      	str	r3, [r7, #12]
    break;
 80040f6:	e007      	b.n	8004108 <_get_accel_sensitivity+0x4c>
  	case (ICM20601_ACCEL_RANGE_16G):
    		f = 2048.0;
 80040f8:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 80040fc:	60fb      	str	r3, [r7, #12]
    break;
 80040fe:	e003      	b.n	8004108 <_get_accel_sensitivity+0x4c>
  	case (ICM20601_ACCEL_RANGE_32G):
    		f = 1024.0;
 8004100:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 8004104:	60fb      	str	r3, [r7, #12]
    break;
 8004106:	bf00      	nop
  }
  return f;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	ee07 3a90 	vmov	s15, r3
}
 800410e:	eeb0 0a67 	vmov.f32	s0, s15
 8004112:	3714      	adds	r7, #20
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <_get_gyro_sensitivity>:

// Used to convert raw gyroscope readings to degrees per second.
float _get_gyro_sensitivity(enum icm20601_gyro_dps gyro_dps) {
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	4603      	mov	r3, r0
 8004124:	71fb      	strb	r3, [r7, #7]
	float f = 0;
 8004126:	f04f 0300 	mov.w	r3, #0
 800412a:	60fb      	str	r3, [r7, #12]

	switch (gyro_dps) {
 800412c:	79fb      	ldrb	r3, [r7, #7]
 800412e:	2b03      	cmp	r3, #3
 8004130:	d816      	bhi.n	8004160 <_get_gyro_sensitivity+0x44>
 8004132:	a201      	add	r2, pc, #4	; (adr r2, 8004138 <_get_gyro_sensitivity+0x1c>)
 8004134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004138:	08004149 	.word	0x08004149
 800413c:	0800414f 	.word	0x0800414f
 8004140:	08004155 	.word	0x08004155
 8004144:	0800415b 	.word	0x0800415b
	case (ICM20601_GYRO_RANGE_500_DPS):
    		f = 65.5;
 8004148:	4b0a      	ldr	r3, [pc, #40]	; (8004174 <_get_gyro_sensitivity+0x58>)
 800414a:	60fb      	str	r3, [r7, #12]
	break;
 800414c:	e008      	b.n	8004160 <_get_gyro_sensitivity+0x44>
	case (ICM20601_GYRO_RANGE_1000_DPS):
    		f = 32.8;
 800414e:	4b0a      	ldr	r3, [pc, #40]	; (8004178 <_get_gyro_sensitivity+0x5c>)
 8004150:	60fb      	str	r3, [r7, #12]
    break;
 8004152:	e005      	b.n	8004160 <_get_gyro_sensitivity+0x44>
    case (ICM20601_GYRO_RANGE_2000_DPS):
    		f = 16.4;
 8004154:	4b09      	ldr	r3, [pc, #36]	; (800417c <_get_gyro_sensitivity+0x60>)
 8004156:	60fb      	str	r3, [r7, #12]
    break;
 8004158:	e002      	b.n	8004160 <_get_gyro_sensitivity+0x44>
    case (ICM20601_GYRO_RANGE_4000_DPS):
    		f = 8.2;
 800415a:	4b09      	ldr	r3, [pc, #36]	; (8004180 <_get_gyro_sensitivity+0x64>)
 800415c:	60fb      	str	r3, [r7, #12]
    break;
 800415e:	bf00      	nop
  }
  return f;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	ee07 3a90 	vmov	s15, r3
}
 8004166:	eeb0 0a67 	vmov.f32	s0, s15
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	42830000 	.word	0x42830000
 8004178:	42033333 	.word	0x42033333
 800417c:	41833333 	.word	0x41833333
 8004180:	41033333 	.word	0x41033333

08004184 <_icm_read_bytes>:
  }
  return 1;
}

// Read bytes from MEMS
void _icm_read_bytes(struct icm20601_dev * dev, uint8_t reg, uint8_t* pData, uint16_t size){
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	607a      	str	r2, [r7, #4]
 800418e:	461a      	mov	r2, r3
 8004190:	460b      	mov	r3, r1
 8004192:	72fb      	strb	r3, [r7, #11]
 8004194:	4613      	mov	r3, r2
 8004196:	813b      	strh	r3, [r7, #8]
	reg = reg | 0x80;
 8004198:	7afb      	ldrb	r3, [r7, #11]
 800419a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_RESET);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6818      	ldr	r0, [r3, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	889b      	ldrh	r3, [r3, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	4619      	mov	r1, r3
 80041ae:	f004 fd15 	bl	8008bdc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->spi_bus, &reg, 1, IMU20601_SPI_TIMEOUT);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6898      	ldr	r0, [r3, #8]
 80041b6:	f107 010b 	add.w	r1, r7, #11
 80041ba:	230a      	movs	r3, #10
 80041bc:	2201      	movs	r2, #1
 80041be:	f007 fd8f 	bl	800bce0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(dev->spi_bus, pData, size, IMU20601_SPI_TIMEOUT);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6898      	ldr	r0, [r3, #8]
 80041c6:	893a      	ldrh	r2, [r7, #8]
 80041c8:	230a      	movs	r3, #10
 80041ca:	6879      	ldr	r1, [r7, #4]
 80041cc:	f007 febc 	bl	800bf48 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_SET);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6818      	ldr	r0, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	889b      	ldrh	r3, [r3, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	4619      	mov	r1, r3
 80041dc:	f004 fcfe 	bl	8008bdc <HAL_GPIO_WritePin>
}
 80041e0:	bf00      	nop
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <_icm_write_bytes>:

// Write bytes to MEMS
void _icm_write_bytes(struct icm20601_dev * dev, uint8_t reg, uint8_t *pData, uint16_t size){
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	607a      	str	r2, [r7, #4]
 80041f2:	461a      	mov	r2, r3
 80041f4:	460b      	mov	r3, r1
 80041f6:	72fb      	strb	r3, [r7, #11]
 80041f8:	4613      	mov	r3, r2
 80041fa:	813b      	strh	r3, [r7, #8]

	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_RESET);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6818      	ldr	r0, [r3, #0]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	889b      	ldrh	r3, [r3, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	4619      	mov	r1, r3
 8004208:	f004 fce8 	bl	8008bdc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->spi_bus, &reg, 1, IMU20601_SPI_TIMEOUT);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6898      	ldr	r0, [r3, #8]
 8004210:	f107 010b 	add.w	r1, r7, #11
 8004214:	230a      	movs	r3, #10
 8004216:	2201      	movs	r2, #1
 8004218:	f007 fd62 	bl	800bce0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(dev->spi_bus, pData, size, IMU20601_SPI_TIMEOUT);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6898      	ldr	r0, [r3, #8]
 8004220:	893a      	ldrh	r2, [r7, #8]
 8004222:	230a      	movs	r3, #10
 8004224:	6879      	ldr	r1, [r7, #4]
 8004226:	f007 fd5b 	bl	800bce0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_SET);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6818      	ldr	r0, [r3, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	889b      	ldrh	r3, [r3, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	4619      	mov	r1, r3
 8004236:	f004 fcd1 	bl	8008bdc <HAL_GPIO_WritePin>
}
 800423a:	bf00      	nop
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}

08004242 <icm20601_init>:


// *** Global Functions *** //

int8_t icm20601_init(struct icm20601_dev * dev) {
 8004242:	b580      	push	{r7, lr}
 8004244:	b084      	sub	sp, #16
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0;
 800424a:	2300      	movs	r3, #0
 800424c:	73fb      	strb	r3, [r7, #15]
	uint8_t r [1] = {0};
 800424e:	2300      	movs	r3, #0
 8004250:	733b      	strb	r3, [r7, #12]
	//  4. disable fifo
	//  5. configure chip
	//  6. enable accelerometer and gyroscope

	// full reset of chip
	tmp = SENS_reset; // 0x81
 8004252:	2381      	movs	r3, #129	; 0x81
 8004254:	73fb      	strb	r3, [r7, #15]
	_icm_write_bytes(dev, REG_PWR_MGMT_1, &tmp , 1);
 8004256:	f107 020f 	add.w	r2, r7, #15
 800425a:	2301      	movs	r3, #1
 800425c:	216b      	movs	r1, #107	; 0x6b
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f7ff ffc2 	bl	80041e8 <_icm_write_bytes>
	HAL_Delay(1);
 8004264:	2001      	movs	r0, #1
 8004266:	f003 f989 	bl	800757c <HAL_Delay>

    // set clock to internal PLL
    tmp = SENS_internalpll; //0x01
 800426a:	2301      	movs	r3, #1
 800426c:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_1, &tmp, 1);
 800426e:	f107 020f 	add.w	r2, r7, #15
 8004272:	2301      	movs	r3, #1
 8004274:	216b      	movs	r1, #107	; 0x6b
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7ff ffb6 	bl	80041e8 <_icm_write_bytes>
    HAL_Delay(1);
 800427c:	2001      	movs	r0, #1
 800427e:	f003 f97d 	bl	800757c <HAL_Delay>

    // verify we are able to read from the chip
    _icm_read_bytes(dev, REG_WHO_AM_I, r, 1);
 8004282:	f107 020c 	add.w	r2, r7, #12
 8004286:	2301      	movs	r3, #1
 8004288:	2175      	movs	r1, #117	; 0x75
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7ff ff7a 	bl	8004184 <_icm_read_bytes>
    if (r[0] != REG_WHO_AM_I_CONST) return 0;
 8004290:	7b3b      	ldrb	r3, [r7, #12]
 8004292:	2bac      	cmp	r3, #172	; 0xac
 8004294:	d001      	beq.n	800429a <icm20601_init+0x58>
 8004296:	2300      	movs	r3, #0
 8004298:	e093      	b.n	80043c2 <icm20601_init+0x180>

    // place accel and gyro on standby
    tmp = SENS_standby; // 0x3F
 800429a:	233f      	movs	r3, #63	; 0x3f
 800429c:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_2, &tmp , 1);
 800429e:	f107 020f 	add.w	r2, r7, #15
 80042a2:	2301      	movs	r3, #1
 80042a4:	216c      	movs	r1, #108	; 0x6c
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f7ff ff9e 	bl	80041e8 <_icm_write_bytes>

    // disable fifo
    tmp = SENS_nofifo; //0x00
 80042ac:	2300      	movs	r3, #0
 80042ae:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_USER_CTRL, &tmp , 1);
 80042b0:	f107 020f 	add.w	r2, r7, #15
 80042b4:	2301      	movs	r3, #1
 80042b6:	216a      	movs	r1, #106	; 0x6a
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7ff ff95 	bl	80041e8 <_icm_write_bytes>

    // disable chip I2C communications
    tmp = SENS_disablei2c;	//0x41;
 80042be:	2341      	movs	r3, #65	; 0x41
 80042c0:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_USER_CTRL, &tmp , 1);
 80042c2:	f107 020f 	add.w	r2, r7, #15
 80042c6:	2301      	movs	r3, #1
 80042c8:	216a      	movs	r1, #106	; 0x6a
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7ff ff8c 	bl	80041e8 <_icm_write_bytes>

    // Accelerometer filtering
    if (ICM20601_ACCEL_DLPF_BYPASS_1046_HZ == dev->accel_dlpf) {
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	7b1b      	ldrb	r3, [r3, #12]
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	d102      	bne.n	80042de <icm20601_init+0x9c>
      tmp = (0x01 << 3);
 80042d8:	2308      	movs	r3, #8
 80042da:	73fb      	strb	r3, [r7, #15]
 80042dc:	e002      	b.n	80042e4 <icm20601_init+0xa2>
    }
    else {
      tmp = dev->accel_dlpf;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	7b1b      	ldrb	r3, [r3, #12]
 80042e2:	73fb      	strb	r3, [r7, #15]
    }
    _icm_write_bytes(dev, REG_ACCEL_CONFIG_2, &tmp , 1);
 80042e4:	f107 020f 	add.w	r2, r7, #15
 80042e8:	2301      	movs	r3, #1
 80042ea:	211d      	movs	r1, #29
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f7ff ff7b 	bl	80041e8 <_icm_write_bytes>

    // Accelerometer range
    tmp = (dev->accel_g) << 3;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	7b5b      	ldrb	r3, [r3, #13]
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_ACCEL_CONFIG_1, &tmp , 1);
 80042fc:	f107 020f 	add.w	r2, r7, #15
 8004300:	2301      	movs	r3, #1
 8004302:	211c      	movs	r1, #28
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f7ff ff6f 	bl	80041e8 <_icm_write_bytes>
    // Gyro filtering
    //tmp = ((dev->gyro_dps) << 3) | SENS_gyrofilter; // filter: 0x02
    //_icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);


    if (ICM20601_GYRO_DLPF_BYPASS_3281_HZ == dev->gyro_dlpf) {
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	7b9b      	ldrb	r3, [r3, #14]
 800430e:	2b08      	cmp	r3, #8
 8004310:	d119      	bne.n	8004346 <icm20601_init+0x104>
    	// bypass dpf and set dps
        tmp = 0x00;
 8004312:	2300      	movs	r3, #0
 8004314:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 8004316:	f107 020f 	add.w	r2, r7, #15
 800431a:	2301      	movs	r3, #1
 800431c:	211a      	movs	r1, #26
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f7ff ff62 	bl	80041e8 <_icm_write_bytes>

        tmp = (dev->gyro_dps << 3) | 0x02;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	7bdb      	ldrb	r3, [r3, #15]
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	b25b      	sxtb	r3, r3
 800432c:	f043 0302 	orr.w	r3, r3, #2
 8004330:	b25b      	sxtb	r3, r3
 8004332:	b2db      	uxtb	r3, r3
 8004334:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 8004336:	f107 020f 	add.w	r2, r7, #15
 800433a:	2301      	movs	r3, #1
 800433c:	211b      	movs	r1, #27
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f7ff ff52 	bl	80041e8 <_icm_write_bytes>
 8004344:	e033      	b.n	80043ae <icm20601_init+0x16c>
     }
     else if (ICM20601_GYRO_DLPF_BYPASS_8173_HZ == dev->gyro_dlpf) {
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	7b9b      	ldrb	r3, [r3, #14]
 800434a:	2b09      	cmp	r3, #9
 800434c:	d119      	bne.n	8004382 <icm20601_init+0x140>
        // bypass dpf and set dps
        tmp = 0x00;
 800434e:	2300      	movs	r3, #0
 8004350:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 8004352:	f107 020f 	add.w	r2, r7, #15
 8004356:	2301      	movs	r3, #1
 8004358:	211a      	movs	r1, #26
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7ff ff44 	bl	80041e8 <_icm_write_bytes>

        tmp = (dev->gyro_dps << 3) | 0x01;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	7bdb      	ldrb	r3, [r3, #15]
 8004364:	00db      	lsls	r3, r3, #3
 8004366:	b25b      	sxtb	r3, r3
 8004368:	f043 0301 	orr.w	r3, r3, #1
 800436c:	b25b      	sxtb	r3, r3
 800436e:	b2db      	uxtb	r3, r3
 8004370:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 8004372:	f107 020f 	add.w	r2, r7, #15
 8004376:	2301      	movs	r3, #1
 8004378:	211b      	movs	r1, #27
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7ff ff34 	bl	80041e8 <_icm_write_bytes>
 8004380:	e015      	b.n	80043ae <icm20601_init+0x16c>
     }
     else {
        // configure dpf and set dps
        tmp = dev->gyro_dlpf;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	7b9b      	ldrb	r3, [r3, #14]
 8004386:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 8004388:	f107 020f 	add.w	r2, r7, #15
 800438c:	2301      	movs	r3, #1
 800438e:	211a      	movs	r1, #26
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f7ff ff29 	bl	80041e8 <_icm_write_bytes>

        tmp = dev->gyro_dps << 3;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	7bdb      	ldrb	r3, [r3, #15]
 800439a:	00db      	lsls	r3, r3, #3
 800439c:	b2db      	uxtb	r3, r3
 800439e:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 80043a0:	f107 020f 	add.w	r2, r7, #15
 80043a4:	2301      	movs	r3, #1
 80043a6:	211b      	movs	r1, #27
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f7ff ff1d 	bl	80041e8 <_icm_write_bytes>
     }


    tmp = 0x00;
 80043ae:	2300      	movs	r3, #0
 80043b0:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_2, &tmp, 1);
 80043b2:	f107 020f 	add.w	r2, r7, #15
 80043b6:	2301      	movs	r3, #1
 80043b8:	216c      	movs	r1, #108	; 0x6c
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7ff ff14 	bl	80041e8 <_icm_write_bytes>


    return 1;
 80043c0:	2301      	movs	r3, #1
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <icm20601_read_accel_raw>:

// Read out raw acceleration data
void icm20601_read_accel_raw(struct icm20601_dev * dev, int16_t *accel){
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b084      	sub	sp, #16
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
 80043d2:	6039      	str	r1, [r7, #0]
	uint8_t accel_8bit [6] = { 0 };
 80043d4:	f107 0308 	add.w	r3, r7, #8
 80043d8:	2200      	movs	r2, #0
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	809a      	strh	r2, [r3, #4]
	_icm_read_bytes(dev, REG_ACCEL_XOUT_H, accel_8bit, 6);
 80043de:	f107 0208 	add.w	r2, r7, #8
 80043e2:	2306      	movs	r3, #6
 80043e4:	213b      	movs	r1, #59	; 0x3b
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f7ff fecc 	bl	8004184 <_icm_read_bytes>

	UINT8_TO_INT16(accel[0], accel_8bit[0], accel_8bit[1]);
 80043ec:	7a3b      	ldrb	r3, [r7, #8]
 80043ee:	b21a      	sxth	r2, r3
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	801a      	strh	r2, [r3, #0]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043fa:	021b      	lsls	r3, r3, #8
 80043fc:	b21a      	sxth	r2, r3
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	801a      	strh	r2, [r3, #0]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004408:	7a7b      	ldrb	r3, [r7, #9]
 800440a:	b21b      	sxth	r3, r3
 800440c:	4313      	orrs	r3, r2
 800440e:	b21a      	sxth	r2, r3
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(accel[1], accel_8bit[2], accel_8bit[3]);
 8004414:	7aba      	ldrb	r2, [r7, #10]
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	3302      	adds	r3, #2
 800441a:	b212      	sxth	r2, r2
 800441c:	801a      	strh	r2, [r3, #0]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	3302      	adds	r3, #2
 8004422:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004426:	021a      	lsls	r2, r3, #8
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	3302      	adds	r3, #2
 800442c:	b212      	sxth	r2, r2
 800442e:	801a      	strh	r2, [r3, #0]
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	3302      	adds	r3, #2
 8004434:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004438:	7afb      	ldrb	r3, [r7, #11]
 800443a:	b21a      	sxth	r2, r3
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	3302      	adds	r3, #2
 8004440:	430a      	orrs	r2, r1
 8004442:	b212      	sxth	r2, r2
 8004444:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(accel[2], accel_8bit[4], accel_8bit[5]);
 8004446:	7b3a      	ldrb	r2, [r7, #12]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	3304      	adds	r3, #4
 800444c:	b212      	sxth	r2, r2
 800444e:	801a      	strh	r2, [r3, #0]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	3304      	adds	r3, #4
 8004454:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004458:	021a      	lsls	r2, r3, #8
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	3304      	adds	r3, #4
 800445e:	b212      	sxth	r2, r2
 8004460:	801a      	strh	r2, [r3, #0]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	3304      	adds	r3, #4
 8004466:	f9b3 1000 	ldrsh.w	r1, [r3]
 800446a:	7b7b      	ldrb	r3, [r7, #13]
 800446c:	b21a      	sxth	r2, r3
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	3304      	adds	r3, #4
 8004472:	430a      	orrs	r2, r1
 8004474:	b212      	sxth	r2, r2
 8004476:	801a      	strh	r2, [r3, #0]
}
 8004478:	bf00      	nop
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <icm20601_read_gyro_raw>:
    accel[1]  = ((float) accel_raw[1]) / accel_sensitivity;
    accel[2]  = ((float) accel_raw[2]) / accel_sensitivity;
}

// Read out raw gyro data
void icm20601_read_gyro_raw(struct icm20601_dev * dev, int16_t *gyro){
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
	uint8_t gyro_8bit [6] = { 0 };
 800448a:	f107 0308 	add.w	r3, r7, #8
 800448e:	2200      	movs	r2, #0
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	809a      	strh	r2, [r3, #4]
	_icm_read_bytes(dev, REG_GYRO_XOUT_H, gyro_8bit, 6);
 8004494:	f107 0208 	add.w	r2, r7, #8
 8004498:	2306      	movs	r3, #6
 800449a:	2143      	movs	r1, #67	; 0x43
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f7ff fe71 	bl	8004184 <_icm_read_bytes>

	UINT8_TO_INT16(gyro[0], gyro_8bit[0], gyro_8bit[1]);
 80044a2:	7a3b      	ldrb	r3, [r7, #8]
 80044a4:	b21a      	sxth	r2, r3
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	801a      	strh	r2, [r3, #0]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044b0:	021b      	lsls	r3, r3, #8
 80044b2:	b21a      	sxth	r2, r3
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	801a      	strh	r2, [r3, #0]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 80044be:	7a7b      	ldrb	r3, [r7, #9]
 80044c0:	b21b      	sxth	r3, r3
 80044c2:	4313      	orrs	r3, r2
 80044c4:	b21a      	sxth	r2, r3
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(gyro[1], gyro_8bit[2], gyro_8bit[3]);
 80044ca:	7aba      	ldrb	r2, [r7, #10]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	3302      	adds	r3, #2
 80044d0:	b212      	sxth	r2, r2
 80044d2:	801a      	strh	r2, [r3, #0]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	3302      	adds	r3, #2
 80044d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044dc:	021a      	lsls	r2, r3, #8
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	3302      	adds	r3, #2
 80044e2:	b212      	sxth	r2, r2
 80044e4:	801a      	strh	r2, [r3, #0]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	3302      	adds	r3, #2
 80044ea:	f9b3 1000 	ldrsh.w	r1, [r3]
 80044ee:	7afb      	ldrb	r3, [r7, #11]
 80044f0:	b21a      	sxth	r2, r3
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	3302      	adds	r3, #2
 80044f6:	430a      	orrs	r2, r1
 80044f8:	b212      	sxth	r2, r2
 80044fa:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(gyro[2], gyro_8bit[4], gyro_8bit[5]);
 80044fc:	7b3a      	ldrb	r2, [r7, #12]
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	3304      	adds	r3, #4
 8004502:	b212      	sxth	r2, r2
 8004504:	801a      	strh	r2, [r3, #0]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	3304      	adds	r3, #4
 800450a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800450e:	021a      	lsls	r2, r3, #8
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	3304      	adds	r3, #4
 8004514:	b212      	sxth	r2, r2
 8004516:	801a      	strh	r2, [r3, #0]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	3304      	adds	r3, #4
 800451c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004520:	7b7b      	ldrb	r3, [r7, #13]
 8004522:	b21a      	sxth	r2, r3
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	3304      	adds	r3, #4
 8004528:	430a      	orrs	r2, r1
 800452a:	b212      	sxth	r2, r2
 800452c:	801a      	strh	r2, [r3, #0]
}
 800452e:	bf00      	nop
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <icm20601_read_temp_raw>:
    gyro[1]  = ((float) gyro_raw[1]) / gyro_sensitivity;
    gyro[2]  = ((float) gyro_raw[2]) / gyro_sensitivity;
}

// Read out raw temperature data
void icm20601_read_temp_raw(struct icm20601_dev * dev, int16_t *temp){
 8004536:	b580      	push	{r7, lr}
 8004538:	b084      	sub	sp, #16
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
 800453e:	6039      	str	r1, [r7, #0]
	uint8_t temp_8bit [2] = { 0 };
 8004540:	2300      	movs	r3, #0
 8004542:	81bb      	strh	r3, [r7, #12]
	_icm_read_bytes(dev, REG_TEMP_OUT_H, temp_8bit, 2);
 8004544:	f107 020c 	add.w	r2, r7, #12
 8004548:	2302      	movs	r3, #2
 800454a:	2141      	movs	r1, #65	; 0x41
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f7ff fe19 	bl	8004184 <_icm_read_bytes>

	UINT8_TO_INT16(*temp, temp_8bit[0], temp_8bit[1]);
 8004552:	7b3b      	ldrb	r3, [r7, #12]
 8004554:	b21a      	sxth	r2, r3
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	801a      	strh	r2, [r3, #0]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004560:	021b      	lsls	r3, r3, #8
 8004562:	b21a      	sxth	r2, r3
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	801a      	strh	r2, [r3, #0]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800456e:	7b7b      	ldrb	r3, [r7, #13]
 8004570:	b21b      	sxth	r3, r3
 8004572:	4313      	orrs	r3, r2
 8004574:	b21a      	sxth	r2, r3
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	801a      	strh	r2, [r3, #0]
}
 800457a:	bf00      	nop
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	0000      	movs	r0, r0
 8004584:	0000      	movs	r0, r0
	...

08004588 <icm20601_read_data>:

	*temp = ((float)temperature_raw) / temperature_sensitivity + 25.0; // TEMP_degC = ((TEMP_OUT – RoomTemp_Offset)/Temp_Sensitivity) + 25degC
}

void icm20601_read_data(struct icm20601_dev * dev, float * buf)
{
 8004588:	b590      	push	{r4, r7, lr}
 800458a:	b089      	sub	sp, #36	; 0x24
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
	int16_t temperature_raw;
	icm20601_read_temp_raw(dev, &temperature_raw);
 8004592:	f107 0316 	add.w	r3, r7, #22
 8004596:	4619      	mov	r1, r3
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f7ff ffcc 	bl	8004536 <icm20601_read_temp_raw>
	buf[0] = ((float)temperature_raw) / temperature_sensitivity + 25.0;
 800459e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80045a2:	ee07 3a90 	vmov	s15, r3
 80045a6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80045aa:	4b61      	ldr	r3, [pc, #388]	; (8004730 <icm20601_read_data+0x1a8>)
 80045ac:	ed93 7a00 	vldr	s14, [r3]
 80045b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045b4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80045b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	edc3 7a00 	vstr	s15, [r3]
	float accel_sensitivity;
	int16_t accel_raw[3] = { 0 };
 80045c2:	f107 0310 	add.w	r3, r7, #16
 80045c6:	2200      	movs	r2, #0
 80045c8:	601a      	str	r2, [r3, #0]
 80045ca:	809a      	strh	r2, [r3, #4]

	accel_sensitivity = _get_accel_sensitivity(dev->accel_g);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	7b5b      	ldrb	r3, [r3, #13]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7ff fd73 	bl	80040bc <_get_accel_sensitivity>
 80045d6:	ed87 0a07 	vstr	s0, [r7, #28]

  	icm20601_read_accel_raw(dev, accel_raw);
 80045da:	f107 0310 	add.w	r3, r7, #16
 80045de:	4619      	mov	r1, r3
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f7ff fef2 	bl	80043ca <icm20601_read_accel_raw>

    buf[1] = ((float) accel_raw[0]) / accel_sensitivity * 9.81;
 80045e6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80045ea:	ee07 3a90 	vmov	s15, r3
 80045ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045f2:	edd7 7a07 	vldr	s15, [r7, #28]
 80045f6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80045fa:	ee16 0a90 	vmov	r0, s13
 80045fe:	f7fb ffa3 	bl	8000548 <__aeabi_f2d>
 8004602:	a349      	add	r3, pc, #292	; (adr r3, 8004728 <icm20601_read_data+0x1a0>)
 8004604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004608:	f7fb fff6 	bl	80005f8 <__aeabi_dmul>
 800460c:	4603      	mov	r3, r0
 800460e:	460c      	mov	r4, r1
 8004610:	4619      	mov	r1, r3
 8004612:	4622      	mov	r2, r4
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	1d1c      	adds	r4, r3, #4
 8004618:	4608      	mov	r0, r1
 800461a:	4611      	mov	r1, r2
 800461c:	f7fc fae4 	bl	8000be8 <__aeabi_d2f>
 8004620:	4603      	mov	r3, r0
 8004622:	6023      	str	r3, [r4, #0]
    buf[2]  = ((float) accel_raw[1]) / accel_sensitivity * 9.81;
 8004624:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004628:	ee07 3a90 	vmov	s15, r3
 800462c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004630:	edd7 7a07 	vldr	s15, [r7, #28]
 8004634:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004638:	ee16 0a90 	vmov	r0, s13
 800463c:	f7fb ff84 	bl	8000548 <__aeabi_f2d>
 8004640:	a339      	add	r3, pc, #228	; (adr r3, 8004728 <icm20601_read_data+0x1a0>)
 8004642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004646:	f7fb ffd7 	bl	80005f8 <__aeabi_dmul>
 800464a:	4603      	mov	r3, r0
 800464c:	460c      	mov	r4, r1
 800464e:	4619      	mov	r1, r3
 8004650:	4622      	mov	r2, r4
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	f103 0408 	add.w	r4, r3, #8
 8004658:	4608      	mov	r0, r1
 800465a:	4611      	mov	r1, r2
 800465c:	f7fc fac4 	bl	8000be8 <__aeabi_d2f>
 8004660:	4603      	mov	r3, r0
 8004662:	6023      	str	r3, [r4, #0]
    buf[3]  = ((float) accel_raw[2]) / accel_sensitivity * 9.81 ;
 8004664:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004668:	ee07 3a90 	vmov	s15, r3
 800466c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004670:	edd7 7a07 	vldr	s15, [r7, #28]
 8004674:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004678:	ee16 0a90 	vmov	r0, s13
 800467c:	f7fb ff64 	bl	8000548 <__aeabi_f2d>
 8004680:	a329      	add	r3, pc, #164	; (adr r3, 8004728 <icm20601_read_data+0x1a0>)
 8004682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004686:	f7fb ffb7 	bl	80005f8 <__aeabi_dmul>
 800468a:	4603      	mov	r3, r0
 800468c:	460c      	mov	r4, r1
 800468e:	4619      	mov	r1, r3
 8004690:	4622      	mov	r2, r4
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	f103 040c 	add.w	r4, r3, #12
 8004698:	4608      	mov	r0, r1
 800469a:	4611      	mov	r1, r2
 800469c:	f7fc faa4 	bl	8000be8 <__aeabi_d2f>
 80046a0:	4603      	mov	r3, r0
 80046a2:	6023      	str	r3, [r4, #0]

	float gyro_sensitivity;
	int16_t gyro_raw[3] = { 0 };
 80046a4:	f107 0308 	add.w	r3, r7, #8
 80046a8:	2200      	movs	r2, #0
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	809a      	strh	r2, [r3, #4]

	gyro_sensitivity = _get_gyro_sensitivity(dev->gyro_dps);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	7bdb      	ldrb	r3, [r3, #15]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff fd32 	bl	800411c <_get_gyro_sensitivity>
 80046b8:	ed87 0a06 	vstr	s0, [r7, #24]

  	icm20601_read_gyro_raw(dev, gyro_raw);
 80046bc:	f107 0308 	add.w	r3, r7, #8
 80046c0:	4619      	mov	r1, r3
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7ff fedc 	bl	8004480 <icm20601_read_gyro_raw>

    buf[4] = ((float) gyro_raw[0]) / gyro_sensitivity;
 80046c8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80046cc:	ee07 3a90 	vmov	s15, r3
 80046d0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	3310      	adds	r3, #16
 80046d8:	ed97 7a06 	vldr	s14, [r7, #24]
 80046dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046e0:	edc3 7a00 	vstr	s15, [r3]
    buf[5]  = ((float) gyro_raw[1]) / gyro_sensitivity;
 80046e4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80046e8:	ee07 3a90 	vmov	s15, r3
 80046ec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	3314      	adds	r3, #20
 80046f4:	ed97 7a06 	vldr	s14, [r7, #24]
 80046f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046fc:	edc3 7a00 	vstr	s15, [r3]
    buf[6]  = ((float) gyro_raw[2]) / gyro_sensitivity;
 8004700:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004704:	ee07 3a90 	vmov	s15, r3
 8004708:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	3318      	adds	r3, #24
 8004710:	ed97 7a06 	vldr	s14, [r7, #24]
 8004714:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004718:	edc3 7a00 	vstr	s15, [r3]
}
 800471c:	bf00      	nop
 800471e:	3724      	adds	r7, #36	; 0x24
 8004720:	46bd      	mov	sp, r7
 8004722:	bd90      	pop	{r4, r7, pc}
 8004724:	f3af 8000 	nop.w
 8004728:	51eb851f 	.word	0x51eb851f
 800472c:	40239eb8 	.word	0x40239eb8
 8004730:	2000015c 	.word	0x2000015c

08004734 <toggle>:
 *      Author: linus
 */

#include "devices/LED.h"

void toggle(struct LED_dev * ctrl){
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(ctrl->LED_port, ctrl->LED_pin);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	889b      	ldrh	r3, [r3, #4]
 8004744:	4619      	mov	r1, r3
 8004746:	4610      	mov	r0, r2
 8004748:	f004 fa61 	bl	8008c0e <HAL_GPIO_TogglePin>
}
 800474c:	bf00      	nop
 800474e:	3708      	adds	r7, #8
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <turn_on>:

void turn_on(struct LED_dev * ctrl){
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ctrl->LED_port, ctrl->LED_pin, GPIO_PIN_SET);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6818      	ldr	r0, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	889b      	ldrh	r3, [r3, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	4619      	mov	r1, r3
 8004768:	f004 fa38 	bl	8008bdc <HAL_GPIO_WritePin>
}
 800476c:	bf00      	nop
 800476e:	3708      	adds	r7, #8
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <turn_off>:

void turn_off(struct LED_dev * ctrl){
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ctrl->LED_port, ctrl->LED_pin, GPIO_PIN_RESET);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6818      	ldr	r0, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	889b      	ldrh	r3, [r3, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	4619      	mov	r1, r3
 8004788:	f004 fa28 	bl	8008bdc <HAL_GPIO_WritePin>
}
 800478c:	bf00      	nop
 800478e:	3708      	adds	r7, #8
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <ms5607_init>:
#include <stdio.h>
#include <math.h>


uint8_t ms5607_init(struct ms5607_dev * dev)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b088      	sub	sp, #32
 8004798:	af02      	add	r7, sp, #8
 800479a:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_GetState(dev->i2c_bus) != HAL_I2C_STATE_READY)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f004 ffd9 	bl	8009758 <HAL_I2C_GetState>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b20      	cmp	r3, #32
 80047aa:	d003      	beq.n	80047b4 <ms5607_init+0x20>
	{
		printf("i2c not ready!\n");
 80047ac:	484a      	ldr	r0, [pc, #296]	; (80048d8 <ms5607_init+0x144>)
 80047ae:	f00c fbdb 	bl	8010f68 <puts>
 80047b2:	e002      	b.n	80047ba <ms5607_init+0x26>
	} else {
		printf("i2c is ready!\n");
 80047b4:	4849      	ldr	r0, [pc, #292]	; (80048dc <ms5607_init+0x148>)
 80047b6:	f00c fbd7 	bl	8010f68 <puts>
	}
	HAL_StatusTypeDef _ret;
	_ret = HAL_I2C_IsDeviceReady(dev->i2c_bus, dev->addr, 10, dev->addr);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6858      	ldr	r0, [r3, #4]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	b299      	uxth	r1, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	220a      	movs	r2, #10
 80047ca:	f004 fe97 	bl	80094fc <HAL_I2C_IsDeviceReady>
 80047ce:	4603      	mov	r3, r0
 80047d0:	74fb      	strb	r3, [r7, #19]
	if ( _ret != HAL_OK )
 80047d2:	7cfb      	ldrb	r3, [r7, #19]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d009      	beq.n	80047ec <ms5607_init+0x58>
	{
		printf("BARO setup fail\n");
 80047d8:	4841      	ldr	r0, [pc, #260]	; (80048e0 <ms5607_init+0x14c>)
 80047da:	f00c fbc5 	bl	8010f68 <puts>
		printf("Errorcode: %d\n", _ret);
 80047de:	7cfb      	ldrb	r3, [r7, #19]
 80047e0:	4619      	mov	r1, r3
 80047e2:	4840      	ldr	r0, [pc, #256]	; (80048e4 <ms5607_init+0x150>)
 80047e4:	f00c fb4c 	bl	8010e80 <iprintf>
		return 0;
 80047e8:	2300      	movs	r3, #0
 80047ea:	e070      	b.n	80048ce <ms5607_init+0x13a>

	//get factory calibration data
	//reset (advised in datasheet)

	uint8_t reset_code[1];
	reset_code[0] = 0x1E;
 80047ec:	231e      	movs	r3, #30
 80047ee:	743b      	strb	r3, [r7, #16]
	_ret = HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, reset_code, 1, dev->delay);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6858      	ldr	r0, [r3, #4]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	b299      	uxth	r1, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	7a1b      	ldrb	r3, [r3, #8]
 80047fe:	f107 0210 	add.w	r2, r7, #16
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	2301      	movs	r3, #1
 8004806:	f004 fb55 	bl	8008eb4 <HAL_I2C_Master_Transmit>
 800480a:	4603      	mov	r3, r0
 800480c:	74fb      	strb	r3, [r7, #19]

	HAL_Delay(100);
 800480e:	2064      	movs	r0, #100	; 0x64
 8004810:	f002 feb4 	bl	800757c <HAL_Delay>

	//get each calibration value (c1 - c6 in datasheet)
	uint8_t get_add;
	uint8_t buf[2];

	for(int i = 1; i < 7; i++){
 8004814:	2301      	movs	r3, #1
 8004816:	617b      	str	r3, [r7, #20]
 8004818:	e043      	b.n	80048a2 <ms5607_init+0x10e>

		//standard commands (see datasheet)
		get_add = 0b10100000;
 800481a:	23a0      	movs	r3, #160	; 0xa0
 800481c:	73fb      	strb	r3, [r7, #15]
		get_add = get_add + 2*i;
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	b2db      	uxtb	r3, r3
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	b2da      	uxtb	r2, r3
 8004826:	7bfb      	ldrb	r3, [r7, #15]
 8004828:	4413      	add	r3, r2
 800482a:	b2db      	uxtb	r3, r3
 800482c:	73fb      	strb	r3, [r7, #15]

		_ret = HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &get_add, 1, dev->delay);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6858      	ldr	r0, [r3, #4]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	781b      	ldrb	r3, [r3, #0]
 8004836:	b299      	uxth	r1, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	7a1b      	ldrb	r3, [r3, #8]
 800483c:	f107 020f 	add.w	r2, r7, #15
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	2301      	movs	r3, #1
 8004844:	f004 fb36 	bl	8008eb4 <HAL_I2C_Master_Transmit>
 8004848:	4603      	mov	r3, r0
 800484a:	74fb      	strb	r3, [r7, #19]
		HAL_Delay(15);
 800484c:	200f      	movs	r0, #15
 800484e:	f002 fe95 	bl	800757c <HAL_Delay>
		_ret = HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 2, dev->delay);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6858      	ldr	r0, [r3, #4]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	b299      	uxth	r1, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	7a1b      	ldrb	r3, [r3, #8]
 8004860:	f107 020c 	add.w	r2, r7, #12
 8004864:	9300      	str	r3, [sp, #0]
 8004866:	2302      	movs	r3, #2
 8004868:	f004 fc22 	bl	80090b0 <HAL_I2C_Master_Receive>
 800486c:	4603      	mov	r3, r0
 800486e:	74fb      	strb	r3, [r7, #19]
		dev->cal[i-1] = (uint16_t)(buf[0] << 8) | buf[1];
 8004870:	7b3b      	ldrb	r3, [r7, #12]
 8004872:	b29b      	uxth	r3, r3
 8004874:	021b      	lsls	r3, r3, #8
 8004876:	b299      	uxth	r1, r3
 8004878:	7b7b      	ldrb	r3, [r7, #13]
 800487a:	b29a      	uxth	r2, r3
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	3b01      	subs	r3, #1
 8004880:	430a      	orrs	r2, r1
 8004882:	b291      	uxth	r1, r2
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	3304      	adds	r3, #4
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	4413      	add	r3, r2
 800488c:	460a      	mov	r2, r1
 800488e:	805a      	strh	r2, [r3, #2]

		if ( _ret != HAL_OK )
 8004890:	7cfb      	ldrb	r3, [r7, #19]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d002      	beq.n	800489c <ms5607_init+0x108>
			{
				printf("MS5607 cal read fail\n");
 8004896:	4814      	ldr	r0, [pc, #80]	; (80048e8 <ms5607_init+0x154>)
 8004898:	f00c fb66 	bl	8010f68 <puts>
	for(int i = 1; i < 7; i++){
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	3301      	adds	r3, #1
 80048a0:	617b      	str	r3, [r7, #20]
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	2b06      	cmp	r3, #6
 80048a6:	ddb8      	ble.n	800481a <ms5607_init+0x86>
			}
	}


	printf("BARO setup success\n");
 80048a8:	4810      	ldr	r0, [pc, #64]	; (80048ec <ms5607_init+0x158>)
 80048aa:	f00c fb5d 	bl	8010f68 <puts>

	buf[0] = 0x44;
 80048ae:	2344      	movs	r3, #68	; 0x44
 80048b0:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6858      	ldr	r0, [r3, #4]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	781b      	ldrb	r3, [r3, #0]
 80048ba:	b299      	uxth	r1, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	7a1b      	ldrb	r3, [r3, #8]
 80048c0:	f107 020c 	add.w	r2, r7, #12
 80048c4:	9300      	str	r3, [sp, #0]
 80048c6:	2301      	movs	r3, #1
 80048c8:	f004 faf4 	bl	8008eb4 <HAL_I2C_Master_Transmit>
	// need to wait 3 ms
	return 1;
 80048cc:	2301      	movs	r3, #1
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3718      	adds	r7, #24
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	08014f90 	.word	0x08014f90
 80048dc:	08014fa0 	.word	0x08014fa0
 80048e0:	08014fb0 	.word	0x08014fb0
 80048e4:	08014fc0 	.word	0x08014fc0
 80048e8:	08014fd0 	.word	0x08014fd0
 80048ec:	08014fe8 	.word	0x08014fe8

080048f0 <ms5607_prep_pressure>:

void ms5607_prep_pressure(struct ms5607_dev * dev, uint8_t * dat)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af02      	add	r7, sp, #8
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
	uint8_t buf[3];
	buf[0] = 0x00;
 80048fa:	2300      	movs	r3, #0
 80048fc:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6858      	ldr	r0, [r3, #4]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	b299      	uxth	r1, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	7a1b      	ldrb	r3, [r3, #8]
 800490c:	f107 020c 	add.w	r2, r7, #12
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	2301      	movs	r3, #1
 8004914:	f004 face 	bl	8008eb4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 3, dev->delay);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6858      	ldr	r0, [r3, #4]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	b299      	uxth	r1, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	7a1b      	ldrb	r3, [r3, #8]
 8004926:	f107 020c 	add.w	r2, r7, #12
 800492a:	9300      	str	r3, [sp, #0]
 800492c:	2303      	movs	r3, #3
 800492e:	f004 fbbf 	bl	80090b0 <HAL_I2C_Master_Receive>

	dev->D1 = (uint32_t)(buf[0] << 16) | (uint32_t)(buf[1] << 8) | (uint32_t)buf[2];
 8004932:	7b3b      	ldrb	r3, [r7, #12]
 8004934:	041b      	lsls	r3, r3, #16
 8004936:	461a      	mov	r2, r3
 8004938:	7b7b      	ldrb	r3, [r7, #13]
 800493a:	021b      	lsls	r3, r3, #8
 800493c:	4313      	orrs	r3, r2
 800493e:	7bba      	ldrb	r2, [r7, #14]
 8004940:	431a      	orrs	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	619a      	str	r2, [r3, #24]
	dat[0] = buf[0];
 8004946:	7b3a      	ldrb	r2, [r7, #12]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	701a      	strb	r2, [r3, #0]
	dat[1] = buf[1];
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	3301      	adds	r3, #1
 8004950:	7b7a      	ldrb	r2, [r7, #13]
 8004952:	701a      	strb	r2, [r3, #0]
	dat[2] = buf[2];
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	3302      	adds	r3, #2
 8004958:	7bba      	ldrb	r2, [r7, #14]
 800495a:	701a      	strb	r2, [r3, #0]

	buf[0] = 0x54;
 800495c:	2354      	movs	r3, #84	; 0x54
 800495e:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6858      	ldr	r0, [r3, #4]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	b299      	uxth	r1, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	7a1b      	ldrb	r3, [r3, #8]
 800496e:	f107 020c 	add.w	r2, r7, #12
 8004972:	9300      	str	r3, [sp, #0]
 8004974:	2301      	movs	r3, #1
 8004976:	f004 fa9d 	bl	8008eb4 <HAL_I2C_Master_Transmit>
	// need to wait 3 ms
}
 800497a:	bf00      	nop
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <ms5607_read_pressure>:

void ms5607_read_pressure(struct ms5607_dev * dev, uint8_t * dat)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b086      	sub	sp, #24
 8004986:	af02      	add	r7, sp, #8
 8004988:	6078      	str	r0, [r7, #4]
 800498a:	6039      	str	r1, [r7, #0]
	uint8_t buf[3];
	buf[0] = 0x00;
 800498c:	2300      	movs	r3, #0
 800498e:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6858      	ldr	r0, [r3, #4]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	b299      	uxth	r1, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	7a1b      	ldrb	r3, [r3, #8]
 800499e:	f107 020c 	add.w	r2, r7, #12
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	2301      	movs	r3, #1
 80049a6:	f004 fa85 	bl	8008eb4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 3, dev->delay);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6858      	ldr	r0, [r3, #4]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	b299      	uxth	r1, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	7a1b      	ldrb	r3, [r3, #8]
 80049b8:	f107 020c 	add.w	r2, r7, #12
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	2303      	movs	r3, #3
 80049c0:	f004 fb76 	bl	80090b0 <HAL_I2C_Master_Receive>

	dev->D2 = (uint32_t)(buf[0] << 16) | (uint32_t)(buf[1] << 8) | (uint32_t)buf[2];
 80049c4:	7b3b      	ldrb	r3, [r7, #12]
 80049c6:	041b      	lsls	r3, r3, #16
 80049c8:	461a      	mov	r2, r3
 80049ca:	7b7b      	ldrb	r3, [r7, #13]
 80049cc:	021b      	lsls	r3, r3, #8
 80049ce:	4313      	orrs	r3, r2
 80049d0:	7bba      	ldrb	r2, [r7, #14]
 80049d2:	431a      	orrs	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	61da      	str	r2, [r3, #28]
	dat[0] = buf[0];
 80049d8:	7b3a      	ldrb	r2, [r7, #12]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	701a      	strb	r2, [r3, #0]
	dat[1] = buf[1];
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	3301      	adds	r3, #1
 80049e2:	7b7a      	ldrb	r2, [r7, #13]
 80049e4:	701a      	strb	r2, [r3, #0]
	dat[2] = buf[2];
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	3302      	adds	r3, #2
 80049ea:	7bba      	ldrb	r2, [r7, #14]
 80049ec:	701a      	strb	r2, [r3, #0]

	buf[0] = 0x44;
 80049ee:	2344      	movs	r3, #68	; 0x44
 80049f0:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6858      	ldr	r0, [r3, #4]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	b299      	uxth	r1, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	7a1b      	ldrb	r3, [r3, #8]
 8004a00:	f107 020c 	add.w	r2, r7, #12
 8004a04:	9300      	str	r3, [sp, #0]
 8004a06:	2301      	movs	r3, #1
 8004a08:	f004 fa54 	bl	8008eb4 <HAL_I2C_Master_Transmit>
	// need to wait 3 ms
}
 8004a0c:	bf00      	nop
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	0000      	movs	r0, r0
	...

08004a18 <ms5607_convert>:

void ms5607_convert(struct ms5607_dev * dev, float * p, float * t)
{
 8004a18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004a1c:	b092      	sub	sp, #72	; 0x48
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	60f8      	str	r0, [r7, #12]
 8004a22:	60b9      	str	r1, [r7, #8]
 8004a24:	607a      	str	r2, [r7, #4]
	//calculate calibration values
	uint16_t c1 = dev->cal[0];
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	895b      	ldrh	r3, [r3, #10]
 8004a2a:	877b      	strh	r3, [r7, #58]	; 0x3a
	uint16_t c2 = dev->cal[1];
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	899b      	ldrh	r3, [r3, #12]
 8004a30:	873b      	strh	r3, [r7, #56]	; 0x38
	uint16_t c3 = dev->cal[2];
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	89db      	ldrh	r3, [r3, #14]
 8004a36:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint16_t c4 = dev->cal[3];
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	8a1b      	ldrh	r3, [r3, #16]
 8004a3c:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint16_t c5 = dev->cal[4];
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8a5b      	ldrh	r3, [r3, #18]
 8004a42:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t c6 = dev->cal[5];
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8a9b      	ldrh	r3, [r3, #20]
 8004a48:	863b      	strh	r3, [r7, #48]	; 0x30

	uint32_t D1 = dev->D1;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t D2 = dev->D2;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	69db      	ldr	r3, [r3, #28]
 8004a54:	62bb      	str	r3, [r7, #40]	; 0x28

	//calculations from datasheet
	float dt = (float)D2 - c5 * 256.0;
 8004a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a58:	ee07 3a90 	vmov	s15, r3
 8004a5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a60:	ee17 0a90 	vmov	r0, s15
 8004a64:	f7fb fd70 	bl	8000548 <__aeabi_f2d>
 8004a68:	4604      	mov	r4, r0
 8004a6a:	460d      	mov	r5, r1
 8004a6c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7fb fd58 	bl	8000524 <__aeabi_i2d>
 8004a74:	f04f 0200 	mov.w	r2, #0
 8004a78:	4bd9      	ldr	r3, [pc, #868]	; (8004de0 <ms5607_convert+0x3c8>)
 8004a7a:	f7fb fdbd 	bl	80005f8 <__aeabi_dmul>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	460b      	mov	r3, r1
 8004a82:	4620      	mov	r0, r4
 8004a84:	4629      	mov	r1, r5
 8004a86:	f7fb fbff 	bl	8000288 <__aeabi_dsub>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	460c      	mov	r4, r1
 8004a8e:	4618      	mov	r0, r3
 8004a90:	4621      	mov	r1, r4
 8004a92:	f7fc f8a9 	bl	8000be8 <__aeabi_d2f>
 8004a96:	4603      	mov	r3, r0
 8004a98:	627b      	str	r3, [r7, #36]	; 0x24
	float OFF = c2 * pow(2.0, 17) + (c4 * dt)/64.0;
 8004a9a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7fb fd41 	bl	8000524 <__aeabi_i2d>
 8004aa2:	f04f 0200 	mov.w	r2, #0
 8004aa6:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8004aaa:	f7fb fda5 	bl	80005f8 <__aeabi_dmul>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	460c      	mov	r4, r1
 8004ab2:	4625      	mov	r5, r4
 8004ab4:	461c      	mov	r4, r3
 8004ab6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004ab8:	ee07 3a90 	vmov	s15, r3
 8004abc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ac0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004ac4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ac8:	ee17 0a90 	vmov	r0, s15
 8004acc:	f7fb fd3c 	bl	8000548 <__aeabi_f2d>
 8004ad0:	f04f 0200 	mov.w	r2, #0
 8004ad4:	4bc3      	ldr	r3, [pc, #780]	; (8004de4 <ms5607_convert+0x3cc>)
 8004ad6:	f7fb feb9 	bl	800084c <__aeabi_ddiv>
 8004ada:	4602      	mov	r2, r0
 8004adc:	460b      	mov	r3, r1
 8004ade:	4620      	mov	r0, r4
 8004ae0:	4629      	mov	r1, r5
 8004ae2:	f7fb fbd3 	bl	800028c <__adddf3>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	460c      	mov	r4, r1
 8004aea:	4618      	mov	r0, r3
 8004aec:	4621      	mov	r1, r4
 8004aee:	f7fc f87b 	bl	8000be8 <__aeabi_d2f>
 8004af2:	4603      	mov	r3, r0
 8004af4:	623b      	str	r3, [r7, #32]
	float SENS = c1 * pow(2.0, 16) + (c3 * dt)/128.0;
 8004af6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004af8:	4618      	mov	r0, r3
 8004afa:	f7fb fd13 	bl	8000524 <__aeabi_i2d>
 8004afe:	f04f 0200 	mov.w	r2, #0
 8004b02:	4bb9      	ldr	r3, [pc, #740]	; (8004de8 <ms5607_convert+0x3d0>)
 8004b04:	f7fb fd78 	bl	80005f8 <__aeabi_dmul>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	460c      	mov	r4, r1
 8004b0c:	4625      	mov	r5, r4
 8004b0e:	461c      	mov	r4, r3
 8004b10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b12:	ee07 3a90 	vmov	s15, r3
 8004b16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b1a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b22:	ee17 0a90 	vmov	r0, s15
 8004b26:	f7fb fd0f 	bl	8000548 <__aeabi_f2d>
 8004b2a:	f04f 0200 	mov.w	r2, #0
 8004b2e:	4baf      	ldr	r3, [pc, #700]	; (8004dec <ms5607_convert+0x3d4>)
 8004b30:	f7fb fe8c 	bl	800084c <__aeabi_ddiv>
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	4620      	mov	r0, r4
 8004b3a:	4629      	mov	r1, r5
 8004b3c:	f7fb fba6 	bl	800028c <__adddf3>
 8004b40:	4603      	mov	r3, r0
 8004b42:	460c      	mov	r4, r1
 8004b44:	4618      	mov	r0, r3
 8004b46:	4621      	mov	r1, r4
 8004b48:	f7fc f84e 	bl	8000be8 <__aeabi_d2f>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	61fb      	str	r3, [r7, #28]
	float TEMP = 2000.0 + dt * c6/(pow(2.0, 23));
 8004b50:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004b52:	ee07 3a90 	vmov	s15, r3
 8004b56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b5a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b62:	ee17 0a90 	vmov	r0, s15
 8004b66:	f7fb fcef 	bl	8000548 <__aeabi_f2d>
 8004b6a:	f04f 0200 	mov.w	r2, #0
 8004b6e:	4ba0      	ldr	r3, [pc, #640]	; (8004df0 <ms5607_convert+0x3d8>)
 8004b70:	f7fb fe6c 	bl	800084c <__aeabi_ddiv>
 8004b74:	4603      	mov	r3, r0
 8004b76:	460c      	mov	r4, r1
 8004b78:	4618      	mov	r0, r3
 8004b7a:	4621      	mov	r1, r4
 8004b7c:	f04f 0200 	mov.w	r2, #0
 8004b80:	4b9c      	ldr	r3, [pc, #624]	; (8004df4 <ms5607_convert+0x3dc>)
 8004b82:	f7fb fb83 	bl	800028c <__adddf3>
 8004b86:	4603      	mov	r3, r0
 8004b88:	460c      	mov	r4, r1
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	4621      	mov	r1, r4
 8004b8e:	f7fc f82b 	bl	8000be8 <__aeabi_d2f>
 8004b92:	4603      	mov	r3, r0
 8004b94:	61bb      	str	r3, [r7, #24]
	float pressure = ((float)D1 * SENS/(pow(2.0, 21)) - OFF)/(pow(2.0, 15));
 8004b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b98:	ee07 3a90 	vmov	s15, r3
 8004b9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ba0:	edd7 7a07 	vldr	s15, [r7, #28]
 8004ba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ba8:	ee17 0a90 	vmov	r0, s15
 8004bac:	f7fb fccc 	bl	8000548 <__aeabi_f2d>
 8004bb0:	f04f 0200 	mov.w	r2, #0
 8004bb4:	4b90      	ldr	r3, [pc, #576]	; (8004df8 <ms5607_convert+0x3e0>)
 8004bb6:	f7fb fe49 	bl	800084c <__aeabi_ddiv>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	460c      	mov	r4, r1
 8004bbe:	4625      	mov	r5, r4
 8004bc0:	461c      	mov	r4, r3
 8004bc2:	6a38      	ldr	r0, [r7, #32]
 8004bc4:	f7fb fcc0 	bl	8000548 <__aeabi_f2d>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	460b      	mov	r3, r1
 8004bcc:	4620      	mov	r0, r4
 8004bce:	4629      	mov	r1, r5
 8004bd0:	f7fb fb5a 	bl	8000288 <__aeabi_dsub>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	460c      	mov	r4, r1
 8004bd8:	4618      	mov	r0, r3
 8004bda:	4621      	mov	r1, r4
 8004bdc:	f04f 0200 	mov.w	r2, #0
 8004be0:	4b86      	ldr	r3, [pc, #536]	; (8004dfc <ms5607_convert+0x3e4>)
 8004be2:	f7fb fe33 	bl	800084c <__aeabi_ddiv>
 8004be6:	4603      	mov	r3, r0
 8004be8:	460c      	mov	r4, r1
 8004bea:	4618      	mov	r0, r3
 8004bec:	4621      	mov	r1, r4
 8004bee:	f7fb fffb 	bl	8000be8 <__aeabi_d2f>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	617b      	str	r3, [r7, #20]

	float T2 = 0., OFF2 = 0., SENS2 = 0.;
 8004bf6:	f04f 0300 	mov.w	r3, #0
 8004bfa:	647b      	str	r3, [r7, #68]	; 0x44
 8004bfc:	f04f 0300 	mov.w	r3, #0
 8004c00:	643b      	str	r3, [r7, #64]	; 0x40
 8004c02:	f04f 0300 	mov.w	r3, #0
 8004c06:	63fb      	str	r3, [r7, #60]	; 0x3c
	if(TEMP < 2000)
 8004c08:	edd7 7a06 	vldr	s15, [r7, #24]
 8004c0c:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8004e00 <ms5607_convert+0x3e8>
 8004c10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c18:	f140 8104 	bpl.w	8004e24 <ms5607_convert+0x40c>
	{
	  T2 = dt * dt / pow(2.0,31);
 8004c1c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004c20:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004c24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c28:	eddf 6a76 	vldr	s13, [pc, #472]	; 8004e04 <ms5607_convert+0x3ec>
 8004c2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c30:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	  OFF2 = 61.0 * (TEMP - 2000.0) * (TEMP - 2000.0)/pow(2.0,4);
 8004c34:	69b8      	ldr	r0, [r7, #24]
 8004c36:	f7fb fc87 	bl	8000548 <__aeabi_f2d>
 8004c3a:	f04f 0200 	mov.w	r2, #0
 8004c3e:	4b6d      	ldr	r3, [pc, #436]	; (8004df4 <ms5607_convert+0x3dc>)
 8004c40:	f7fb fb22 	bl	8000288 <__aeabi_dsub>
 8004c44:	4603      	mov	r3, r0
 8004c46:	460c      	mov	r4, r1
 8004c48:	4618      	mov	r0, r3
 8004c4a:	4621      	mov	r1, r4
 8004c4c:	f04f 0200 	mov.w	r2, #0
 8004c50:	4b6d      	ldr	r3, [pc, #436]	; (8004e08 <ms5607_convert+0x3f0>)
 8004c52:	f7fb fcd1 	bl	80005f8 <__aeabi_dmul>
 8004c56:	4603      	mov	r3, r0
 8004c58:	460c      	mov	r4, r1
 8004c5a:	4625      	mov	r5, r4
 8004c5c:	461c      	mov	r4, r3
 8004c5e:	69b8      	ldr	r0, [r7, #24]
 8004c60:	f7fb fc72 	bl	8000548 <__aeabi_f2d>
 8004c64:	f04f 0200 	mov.w	r2, #0
 8004c68:	4b62      	ldr	r3, [pc, #392]	; (8004df4 <ms5607_convert+0x3dc>)
 8004c6a:	f7fb fb0d 	bl	8000288 <__aeabi_dsub>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	460b      	mov	r3, r1
 8004c72:	4620      	mov	r0, r4
 8004c74:	4629      	mov	r1, r5
 8004c76:	f7fb fcbf 	bl	80005f8 <__aeabi_dmul>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	460c      	mov	r4, r1
 8004c7e:	4618      	mov	r0, r3
 8004c80:	4621      	mov	r1, r4
 8004c82:	f04f 0200 	mov.w	r2, #0
 8004c86:	4b61      	ldr	r3, [pc, #388]	; (8004e0c <ms5607_convert+0x3f4>)
 8004c88:	f7fb fde0 	bl	800084c <__aeabi_ddiv>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	460c      	mov	r4, r1
 8004c90:	4618      	mov	r0, r3
 8004c92:	4621      	mov	r1, r4
 8004c94:	f7fb ffa8 	bl	8000be8 <__aeabi_d2f>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	643b      	str	r3, [r7, #64]	; 0x40
	  SENS2 = 2.0 * (TEMP - 2000.0) * (TEMP - 2000.0);
 8004c9c:	69b8      	ldr	r0, [r7, #24]
 8004c9e:	f7fb fc53 	bl	8000548 <__aeabi_f2d>
 8004ca2:	f04f 0200 	mov.w	r2, #0
 8004ca6:	4b53      	ldr	r3, [pc, #332]	; (8004df4 <ms5607_convert+0x3dc>)
 8004ca8:	f7fb faee 	bl	8000288 <__aeabi_dsub>
 8004cac:	4603      	mov	r3, r0
 8004cae:	460c      	mov	r4, r1
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	4621      	mov	r1, r4
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	f7fb fae8 	bl	800028c <__adddf3>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	460c      	mov	r4, r1
 8004cc0:	4625      	mov	r5, r4
 8004cc2:	461c      	mov	r4, r3
 8004cc4:	69b8      	ldr	r0, [r7, #24]
 8004cc6:	f7fb fc3f 	bl	8000548 <__aeabi_f2d>
 8004cca:	f04f 0200 	mov.w	r2, #0
 8004cce:	4b49      	ldr	r3, [pc, #292]	; (8004df4 <ms5607_convert+0x3dc>)
 8004cd0:	f7fb fada 	bl	8000288 <__aeabi_dsub>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	4620      	mov	r0, r4
 8004cda:	4629      	mov	r1, r5
 8004cdc:	f7fb fc8c 	bl	80005f8 <__aeabi_dmul>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	460c      	mov	r4, r1
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	4621      	mov	r1, r4
 8004ce8:	f7fb ff7e 	bl	8000be8 <__aeabi_d2f>
 8004cec:	4603      	mov	r3, r0
 8004cee:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if(TEMP < -1500)
 8004cf0:	edd7 7a06 	vldr	s15, [r7, #24]
 8004cf4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8004e10 <ms5607_convert+0x3f8>
 8004cf8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d00:	f140 8090 	bpl.w	8004e24 <ms5607_convert+0x40c>
	  {
	    OFF2 += 15.0 * (TEMP + 1500)*(TEMP + 1500.0);
 8004d04:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004d06:	f7fb fc1f 	bl	8000548 <__aeabi_f2d>
 8004d0a:	4604      	mov	r4, r0
 8004d0c:	460d      	mov	r5, r1
 8004d0e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004d12:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8004e14 <ms5607_convert+0x3fc>
 8004d16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d1a:	ee17 0a90 	vmov	r0, s15
 8004d1e:	f7fb fc13 	bl	8000548 <__aeabi_f2d>
 8004d22:	f04f 0200 	mov.w	r2, #0
 8004d26:	4b3c      	ldr	r3, [pc, #240]	; (8004e18 <ms5607_convert+0x400>)
 8004d28:	f7fb fc66 	bl	80005f8 <__aeabi_dmul>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	460b      	mov	r3, r1
 8004d30:	4690      	mov	r8, r2
 8004d32:	4699      	mov	r9, r3
 8004d34:	69b8      	ldr	r0, [r7, #24]
 8004d36:	f7fb fc07 	bl	8000548 <__aeabi_f2d>
 8004d3a:	a327      	add	r3, pc, #156	; (adr r3, 8004dd8 <ms5607_convert+0x3c0>)
 8004d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d40:	f7fb faa4 	bl	800028c <__adddf3>
 8004d44:	4602      	mov	r2, r0
 8004d46:	460b      	mov	r3, r1
 8004d48:	4640      	mov	r0, r8
 8004d4a:	4649      	mov	r1, r9
 8004d4c:	f7fb fc54 	bl	80005f8 <__aeabi_dmul>
 8004d50:	4602      	mov	r2, r0
 8004d52:	460b      	mov	r3, r1
 8004d54:	4620      	mov	r0, r4
 8004d56:	4629      	mov	r1, r5
 8004d58:	f7fb fa98 	bl	800028c <__adddf3>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	460c      	mov	r4, r1
 8004d60:	4618      	mov	r0, r3
 8004d62:	4621      	mov	r1, r4
 8004d64:	f7fb ff40 	bl	8000be8 <__aeabi_d2f>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	643b      	str	r3, [r7, #64]	; 0x40
	    SENS2 += 8.0 * (TEMP + 1500)*(TEMP + 1500.0);
 8004d6c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004d6e:	f7fb fbeb 	bl	8000548 <__aeabi_f2d>
 8004d72:	4604      	mov	r4, r0
 8004d74:	460d      	mov	r5, r1
 8004d76:	edd7 7a06 	vldr	s15, [r7, #24]
 8004d7a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004e14 <ms5607_convert+0x3fc>
 8004d7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d82:	ee17 0a90 	vmov	r0, s15
 8004d86:	f7fb fbdf 	bl	8000548 <__aeabi_f2d>
 8004d8a:	f04f 0200 	mov.w	r2, #0
 8004d8e:	4b23      	ldr	r3, [pc, #140]	; (8004e1c <ms5607_convert+0x404>)
 8004d90:	f7fb fc32 	bl	80005f8 <__aeabi_dmul>
 8004d94:	4602      	mov	r2, r0
 8004d96:	460b      	mov	r3, r1
 8004d98:	4690      	mov	r8, r2
 8004d9a:	4699      	mov	r9, r3
 8004d9c:	69b8      	ldr	r0, [r7, #24]
 8004d9e:	f7fb fbd3 	bl	8000548 <__aeabi_f2d>
 8004da2:	a30d      	add	r3, pc, #52	; (adr r3, 8004dd8 <ms5607_convert+0x3c0>)
 8004da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da8:	f7fb fa70 	bl	800028c <__adddf3>
 8004dac:	4602      	mov	r2, r0
 8004dae:	460b      	mov	r3, r1
 8004db0:	4640      	mov	r0, r8
 8004db2:	4649      	mov	r1, r9
 8004db4:	f7fb fc20 	bl	80005f8 <__aeabi_dmul>
 8004db8:	4602      	mov	r2, r0
 8004dba:	460b      	mov	r3, r1
 8004dbc:	4620      	mov	r0, r4
 8004dbe:	4629      	mov	r1, r5
 8004dc0:	f7fb fa64 	bl	800028c <__adddf3>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	460c      	mov	r4, r1
 8004dc8:	4618      	mov	r0, r3
 8004dca:	4621      	mov	r1, r4
 8004dcc:	f7fb ff0c 	bl	8000be8 <__aeabi_d2f>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dd4:	e026      	b.n	8004e24 <ms5607_convert+0x40c>
 8004dd6:	bf00      	nop
 8004dd8:	00000000 	.word	0x00000000
 8004ddc:	40977000 	.word	0x40977000
 8004de0:	40700000 	.word	0x40700000
 8004de4:	40500000 	.word	0x40500000
 8004de8:	40f00000 	.word	0x40f00000
 8004dec:	40600000 	.word	0x40600000
 8004df0:	41600000 	.word	0x41600000
 8004df4:	409f4000 	.word	0x409f4000
 8004df8:	41400000 	.word	0x41400000
 8004dfc:	40e00000 	.word	0x40e00000
 8004e00:	44fa0000 	.word	0x44fa0000
 8004e04:	4f000000 	.word	0x4f000000
 8004e08:	404e8000 	.word	0x404e8000
 8004e0c:	40300000 	.word	0x40300000
 8004e10:	c4bb8000 	.word	0xc4bb8000
 8004e14:	44bb8000 	.word	0x44bb8000
 8004e18:	402e0000 	.word	0x402e0000
 8004e1c:	40200000 	.word	0x40200000
 8004e20:	42c80000 	.word	0x42c80000
	  }
	}

	TEMP-=T2;
 8004e24:	ed97 7a06 	vldr	s14, [r7, #24]
 8004e28:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004e2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e30:	edc7 7a06 	vstr	s15, [r7, #24]
	OFF-=OFF2;
 8004e34:	ed97 7a08 	vldr	s14, [r7, #32]
 8004e38:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8004e3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e40:	edc7 7a08 	vstr	s15, [r7, #32]
	SENS-=SENS2;
 8004e44:	ed97 7a07 	vldr	s14, [r7, #28]
 8004e48:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004e4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e50:	edc7 7a07 	vstr	s15, [r7, #28]
	TEMP/=100;
 8004e54:	ed97 7a06 	vldr	s14, [r7, #24]
 8004e58:	ed5f 6a0f 	vldr	s13, [pc, #-60]	; 8004e20 <ms5607_convert+0x408>
 8004e5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e60:	edc7 7a06 	vstr	s15, [r7, #24]
	pressure=(((float)(D1*SENS)/pow(2,21)-OFF)/pow(2,15));
 8004e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e66:	ee07 3a90 	vmov	s15, r3
 8004e6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004e6e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e76:	ee17 0a90 	vmov	r0, s15
 8004e7a:	f7fb fb65 	bl	8000548 <__aeabi_f2d>
 8004e7e:	f04f 0200 	mov.w	r2, #0
 8004e82:	4b16      	ldr	r3, [pc, #88]	; (8004edc <ms5607_convert+0x4c4>)
 8004e84:	f7fb fce2 	bl	800084c <__aeabi_ddiv>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	460c      	mov	r4, r1
 8004e8c:	4625      	mov	r5, r4
 8004e8e:	461c      	mov	r4, r3
 8004e90:	6a38      	ldr	r0, [r7, #32]
 8004e92:	f7fb fb59 	bl	8000548 <__aeabi_f2d>
 8004e96:	4602      	mov	r2, r0
 8004e98:	460b      	mov	r3, r1
 8004e9a:	4620      	mov	r0, r4
 8004e9c:	4629      	mov	r1, r5
 8004e9e:	f7fb f9f3 	bl	8000288 <__aeabi_dsub>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	460c      	mov	r4, r1
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	4621      	mov	r1, r4
 8004eaa:	f04f 0200 	mov.w	r2, #0
 8004eae:	4b0c      	ldr	r3, [pc, #48]	; (8004ee0 <ms5607_convert+0x4c8>)
 8004eb0:	f7fb fccc 	bl	800084c <__aeabi_ddiv>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	460c      	mov	r4, r1
 8004eb8:	4618      	mov	r0, r3
 8004eba:	4621      	mov	r1, r4
 8004ebc:	f7fb fe94 	bl	8000be8 <__aeabi_d2f>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	617b      	str	r3, [r7, #20]

	*t = TEMP;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	601a      	str	r2, [r3, #0]
	*p = pressure;
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	601a      	str	r2, [r3, #0]

	//printf("MS pressure is %4.2f Pa\n", pressure);
	//printf("MS temp is %4.2f deg\n", TEMP);

}
 8004ed0:	bf00      	nop
 8004ed2:	3748      	adds	r7, #72	; 0x48
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004eda:	bf00      	nop
 8004edc:	41400000 	.word	0x41400000
 8004ee0:	40e00000 	.word	0x40e00000

08004ee4 <sht31_init>:
	return 0;
}


int sht31_init(struct sht31_dev * dev)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af02      	add	r7, sp, #8
 8004eea:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_GetState(dev->i2c_bus) != HAL_I2C_STATE_READY)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f004 fc31 	bl	8009758 <HAL_I2C_GetState>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b20      	cmp	r3, #32
 8004efa:	d003      	beq.n	8004f04 <sht31_init+0x20>
	{
		printf("i2c1 not ready!\n");
 8004efc:	481f      	ldr	r0, [pc, #124]	; (8004f7c <sht31_init+0x98>)
 8004efe:	f00c f833 	bl	8010f68 <puts>
 8004f02:	e002      	b.n	8004f0a <sht31_init+0x26>
	} else {
		printf("i2c1 is ready!\n");
 8004f04:	481e      	ldr	r0, [pc, #120]	; (8004f80 <sht31_init+0x9c>)
 8004f06:	f00c f82f 	bl	8010f68 <puts>
	}

	HAL_StatusTypeDef _ret;

	_ret = HAL_I2C_IsDeviceReady(dev->i2c_bus, dev->addr, 10, dev->delay);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6858      	ldr	r0, [r3, #4]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	b299      	uxth	r1, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	7a1b      	ldrb	r3, [r3, #8]
 8004f18:	220a      	movs	r2, #10
 8004f1a:	f004 faef 	bl	80094fc <HAL_I2C_IsDeviceReady>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	73fb      	strb	r3, [r7, #15]
	if ( _ret != HAL_OK )
 8004f22:	7bfb      	ldrb	r3, [r7, #15]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d009      	beq.n	8004f3c <sht31_init+0x58>
	{
		printf("SHT31 setup fail\n");
 8004f28:	4816      	ldr	r0, [pc, #88]	; (8004f84 <sht31_init+0xa0>)
 8004f2a:	f00c f81d 	bl	8010f68 <puts>
		printf("Errorcode: %d\n", _ret);
 8004f2e:	7bfb      	ldrb	r3, [r7, #15]
 8004f30:	4619      	mov	r1, r3
 8004f32:	4815      	ldr	r0, [pc, #84]	; (8004f88 <sht31_init+0xa4>)
 8004f34:	f00b ffa4 	bl	8010e80 <iprintf>
		return 0;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	e01b      	b.n	8004f74 <sht31_init+0x90>
	}

	printf("SHT31 setup success\n");
 8004f3c:	4813      	ldr	r0, [pc, #76]	; (8004f8c <sht31_init+0xa8>)
 8004f3e:	f00c f813 	bl	8010f68 <puts>
	//request first measurement
	uint8_t buf[2];
	uint16_t REG = 0x2416;
 8004f42:	f242 4316 	movw	r3, #9238	; 0x2416
 8004f46:	81bb      	strh	r3, [r7, #12]
	buf[0] = (uint8_t)(REG >> 8);
 8004f48:	89bb      	ldrh	r3, [r7, #12]
 8004f4a:	0a1b      	lsrs	r3, r3, #8
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	723b      	strb	r3, [r7, #8]
	buf[1] = (uint8_t)REG;
 8004f52:	89bb      	ldrh	r3, [r7, #12]
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 2, dev->delay);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6858      	ldr	r0, [r3, #4]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	b299      	uxth	r1, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	7a1b      	ldrb	r3, [r3, #8]
 8004f66:	f107 0208 	add.w	r2, r7, #8
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	2302      	movs	r3, #2
 8004f6e:	f003 ffa1 	bl	8008eb4 <HAL_I2C_Master_Transmit>
	return 1;
 8004f72:	2301      	movs	r3, #1
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	08014ffc 	.word	0x08014ffc
 8004f80:	0801500c 	.word	0x0801500c
 8004f84:	0801501c 	.word	0x0801501c
 8004f88:	08015030 	.word	0x08015030
 8004f8c:	08015040 	.word	0x08015040

08004f90 <sht31_read>:

void sht31_read(struct sht31_dev * dev, float * dat, uint16_t * dat_raw)
{
 8004f90:	b590      	push	{r4, r7, lr}
 8004f92:	b08d      	sub	sp, #52	; 0x34
 8004f94:	af02      	add	r7, sp, #8
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
	float temp;
	float humid;
	uint8_t buf[6];

	//T MSB, T LSB, T CRC, H MSB, H LSB, H CRC
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 6, dev->delay);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6858      	ldr	r0, [r3, #4]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	b299      	uxth	r1, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	7a1b      	ldrb	r3, [r3, #8]
 8004faa:	f107 0214 	add.w	r2, r7, #20
 8004fae:	9300      	str	r3, [sp, #0]
 8004fb0:	2306      	movs	r3, #6
 8004fb2:	f004 f87d 	bl	80090b0 <HAL_I2C_Master_Receive>
	/*
	uint16_t rawTemp = (uint16_t)((((uint16_t)_buf[0])<<8) | (uint16_t)_buf[1]);
	uint16_t rawHum = (uint16_t)((((uint16_t)_buf[3])<<8) | (uint16_t)_buf[4]);
	*/
	uint16_t rawTemp = ((uint16_t)buf[0] << 8) | buf[1];
 8004fb6:	7d3b      	ldrb	r3, [r7, #20]
 8004fb8:	021b      	lsls	r3, r3, #8
 8004fba:	b21a      	sxth	r2, r3
 8004fbc:	7d7b      	ldrb	r3, [r7, #21]
 8004fbe:	b21b      	sxth	r3, r3
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	b21b      	sxth	r3, r3
 8004fc4:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t rawHum = ((uint16_t)buf[3] << 8) | buf[4];
 8004fc6:	7dfb      	ldrb	r3, [r7, #23]
 8004fc8:	021b      	lsls	r3, r3, #8
 8004fca:	b21a      	sxth	r2, r3
 8004fcc:	7e3b      	ldrb	r3, [r7, #24]
 8004fce:	b21b      	sxth	r3, r3
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	b21b      	sxth	r3, r3
 8004fd4:	84bb      	strh	r3, [r7, #36]	; 0x24
	humid = 100.0 * (float)rawHum / 65535.0;
 8004fd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004fd8:	ee07 3a90 	vmov	s15, r3
 8004fdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fe0:	ee17 0a90 	vmov	r0, s15
 8004fe4:	f7fb fab0 	bl	8000548 <__aeabi_f2d>
 8004fe8:	f04f 0200 	mov.w	r2, #0
 8004fec:	4b32      	ldr	r3, [pc, #200]	; (80050b8 <sht31_read+0x128>)
 8004fee:	f7fb fb03 	bl	80005f8 <__aeabi_dmul>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	460c      	mov	r4, r1
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	4621      	mov	r1, r4
 8004ffa:	a32d      	add	r3, pc, #180	; (adr r3, 80050b0 <sht31_read+0x120>)
 8004ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005000:	f7fb fc24 	bl	800084c <__aeabi_ddiv>
 8005004:	4603      	mov	r3, r0
 8005006:	460c      	mov	r4, r1
 8005008:	4618      	mov	r0, r3
 800500a:	4621      	mov	r1, r4
 800500c:	f7fb fdec 	bl	8000be8 <__aeabi_d2f>
 8005010:	4603      	mov	r3, r0
 8005012:	623b      	str	r3, [r7, #32]
	temp = -45.0 + 175 * (float)rawTemp / 65535.0;
 8005014:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005016:	ee07 3a90 	vmov	s15, r3
 800501a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800501e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80050bc <sht31_read+0x12c>
 8005022:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005026:	ee17 0a90 	vmov	r0, s15
 800502a:	f7fb fa8d 	bl	8000548 <__aeabi_f2d>
 800502e:	a320      	add	r3, pc, #128	; (adr r3, 80050b0 <sht31_read+0x120>)
 8005030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005034:	f7fb fc0a 	bl	800084c <__aeabi_ddiv>
 8005038:	4603      	mov	r3, r0
 800503a:	460c      	mov	r4, r1
 800503c:	4618      	mov	r0, r3
 800503e:	4621      	mov	r1, r4
 8005040:	f04f 0200 	mov.w	r2, #0
 8005044:	4b1e      	ldr	r3, [pc, #120]	; (80050c0 <sht31_read+0x130>)
 8005046:	f7fb f91f 	bl	8000288 <__aeabi_dsub>
 800504a:	4603      	mov	r3, r0
 800504c:	460c      	mov	r4, r1
 800504e:	4618      	mov	r0, r3
 8005050:	4621      	mov	r1, r4
 8005052:	f7fb fdc9 	bl	8000be8 <__aeabi_d2f>
 8005056:	4603      	mov	r3, r0
 8005058:	61fb      	str	r3, [r7, #28]
	//printf("temperature is %4.2f deg\n",temp);
	//printf("humidity is %4.2f perc\n",humid);
	dat[0] = temp;
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	69fa      	ldr	r2, [r7, #28]
 800505e:	601a      	str	r2, [r3, #0]
	dat[1] = humid;
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	3304      	adds	r3, #4
 8005064:	6a3a      	ldr	r2, [r7, #32]
 8005066:	601a      	str	r2, [r3, #0]
	dat_raw[0] = rawTemp;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800506c:	801a      	strh	r2, [r3, #0]
	dat_raw[1] = rawHum;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	3302      	adds	r3, #2
 8005072:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005074:	801a      	strh	r2, [r3, #0]

	uint16_t REG = 0x2416;
 8005076:	f242 4316 	movw	r3, #9238	; 0x2416
 800507a:	837b      	strh	r3, [r7, #26]
	buf[0] = (uint8_t)(REG >> 8);
 800507c:	8b7b      	ldrh	r3, [r7, #26]
 800507e:	0a1b      	lsrs	r3, r3, #8
 8005080:	b29b      	uxth	r3, r3
 8005082:	b2db      	uxtb	r3, r3
 8005084:	753b      	strb	r3, [r7, #20]
	buf[1] = (uint8_t)REG;
 8005086:	8b7b      	ldrh	r3, [r7, #26]
 8005088:	b2db      	uxtb	r3, r3
 800508a:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 2, dev->delay);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6858      	ldr	r0, [r3, #4]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	b299      	uxth	r1, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	7a1b      	ldrb	r3, [r3, #8]
 800509a:	f107 0214 	add.w	r2, r7, #20
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	2302      	movs	r3, #2
 80050a2:	f003 ff07 	bl	8008eb4 <HAL_I2C_Master_Transmit>

};
 80050a6:	bf00      	nop
 80050a8:	372c      	adds	r7, #44	; 0x2c
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd90      	pop	{r4, r7, pc}
 80050ae:	bf00      	nop
 80050b0:	00000000 	.word	0x00000000
 80050b4:	40efffe0 	.word	0x40efffe0
 80050b8:	40590000 	.word	0x40590000
 80050bc:	432f0000 	.word	0x432f0000
 80050c0:	40468000 	.word	0x40468000

080050c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80050c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80050fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80050c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80050ca:	e003      	b.n	80050d4 <LoopCopyDataInit>

080050cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80050cc:	4b0c      	ldr	r3, [pc, #48]	; (8005100 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80050ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80050d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80050d2:	3104      	adds	r1, #4

080050d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80050d4:	480b      	ldr	r0, [pc, #44]	; (8005104 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80050d6:	4b0c      	ldr	r3, [pc, #48]	; (8005108 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80050d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80050da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80050dc:	d3f6      	bcc.n	80050cc <CopyDataInit>
  ldr  r2, =_sbss
 80050de:	4a0b      	ldr	r2, [pc, #44]	; (800510c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80050e0:	e002      	b.n	80050e8 <LoopFillZerobss>

080050e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80050e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80050e4:	f842 3b04 	str.w	r3, [r2], #4

080050e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80050e8:	4b09      	ldr	r3, [pc, #36]	; (8005110 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80050ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80050ec:	d3f9      	bcc.n	80050e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80050ee:	f7fe fdcd 	bl	8003c8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80050f2:	f00b fa31 	bl	8010558 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80050f6:	f7fc ff2b 	bl	8001f50 <main>
  bx  lr    
 80050fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80050fc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8005100:	080154f0 	.word	0x080154f0
  ldr  r0, =_sdata
 8005104:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005108:	2000033c 	.word	0x2000033c
  ldr  r2, =_sbss
 800510c:	2000033c 	.word	0x2000033c
  ldr  r3, = _ebss
 8005110:	20017d28 	.word	0x20017d28

08005114 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005114:	e7fe      	b.n	8005114 <ADC_IRQHandler>

08005116 <eye>:
#include "../../Inc/Util/math_utils.h"


void eye(int dim, float A[dim][dim]) {
 8005116:	b490      	push	{r4, r7}
 8005118:	b086      	sub	sp, #24
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
 800511e:	6039      	str	r1, [r7, #0]
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	1e43      	subs	r3, r0, #1
 8005124:	60fb      	str	r3, [r7, #12]
 8005126:	4603      	mov	r3, r0
 8005128:	4619      	mov	r1, r3
 800512a:	f04f 0200 	mov.w	r2, #0
 800512e:	f04f 0300 	mov.w	r3, #0
 8005132:	f04f 0400 	mov.w	r4, #0
 8005136:	0154      	lsls	r4, r2, #5
 8005138:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800513c:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < dim; i++){
 800513e:	2300      	movs	r3, #0
 8005140:	613b      	str	r3, [r7, #16]
 8005142:	e02b      	b.n	800519c <eye+0x86>
        for(int j = 0; j < dim; j++){
 8005144:	2300      	movs	r3, #0
 8005146:	617b      	str	r3, [r7, #20]
 8005148:	e021      	b.n	800518e <eye+0x78>
            if (i == j){
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	429a      	cmp	r2, r3
 8005150:	d10d      	bne.n	800516e <eye+0x58>
				A[i][j] = 1;
 8005152:	4602      	mov	r2, r0
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	fb03 f302 	mul.w	r3, r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	441a      	add	r2, r3
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4413      	add	r3, r2
 8005166:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800516a:	601a      	str	r2, [r3, #0]
 800516c:	e00c      	b.n	8005188 <eye+0x72>
			} else {
				A[i][j] = 0;
 800516e:	4602      	mov	r2, r0
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	fb03 f302 	mul.w	r3, r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	441a      	add	r2, r3
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4413      	add	r3, r2
 8005182:	f04f 0200 	mov.w	r2, #0
 8005186:	601a      	str	r2, [r3, #0]
        for(int j = 0; j < dim; j++){
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	3301      	adds	r3, #1
 800518c:	617b      	str	r3, [r7, #20]
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	429a      	cmp	r2, r3
 8005194:	dbd9      	blt.n	800514a <eye+0x34>
	for(int i = 0; i < dim; i++){
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	3301      	adds	r3, #1
 800519a:	613b      	str	r3, [r7, #16]
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	dbcf      	blt.n	8005144 <eye+0x2e>
			}
        }
    }
}
 80051a4:	bf00      	nop
 80051a6:	3718      	adds	r7, #24
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bc90      	pop	{r4, r7}
 80051ac:	4770      	bx	lr

080051ae <transpose>:

void transpose(int m, int n, float A[m][n], float A_T[n][m]) {
 80051ae:	b4b0      	push	{r4, r5, r7}
 80051b0:	b089      	sub	sp, #36	; 0x24
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	60f8      	str	r0, [r7, #12]
 80051b6:	60b9      	str	r1, [r7, #8]
 80051b8:	607a      	str	r2, [r7, #4]
 80051ba:	603b      	str	r3, [r7, #0]
 80051bc:	68b8      	ldr	r0, [r7, #8]
 80051be:	1e43      	subs	r3, r0, #1
 80051c0:	617b      	str	r3, [r7, #20]
 80051c2:	4603      	mov	r3, r0
 80051c4:	4619      	mov	r1, r3
 80051c6:	f04f 0200 	mov.w	r2, #0
 80051ca:	f04f 0300 	mov.w	r3, #0
 80051ce:	f04f 0400 	mov.w	r4, #0
 80051d2:	0154      	lsls	r4, r2, #5
 80051d4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80051d8:	014b      	lsls	r3, r1, #5
 80051da:	68fd      	ldr	r5, [r7, #12]
 80051dc:	1e6b      	subs	r3, r5, #1
 80051de:	613b      	str	r3, [r7, #16]
 80051e0:	462b      	mov	r3, r5
 80051e2:	4619      	mov	r1, r3
 80051e4:	f04f 0200 	mov.w	r2, #0
 80051e8:	f04f 0300 	mov.w	r3, #0
 80051ec:	f04f 0400 	mov.w	r4, #0
 80051f0:	0154      	lsls	r4, r2, #5
 80051f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80051f6:	014b      	lsls	r3, r1, #5
	/* Get Transpose */
	for(int i = 0; i < m; i++){
 80051f8:	2300      	movs	r3, #0
 80051fa:	61bb      	str	r3, [r7, #24]
 80051fc:	e022      	b.n	8005244 <transpose+0x96>
		for(int j = 0; j < n; j++){
 80051fe:	2300      	movs	r3, #0
 8005200:	61fb      	str	r3, [r7, #28]
 8005202:	e018      	b.n	8005236 <transpose+0x88>
			A_T[j][i] = A[i][j];
 8005204:	4602      	mov	r2, r0
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	fb03 f302 	mul.w	r3, r3, r2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	441a      	add	r2, r3
 8005212:	4629      	mov	r1, r5
 8005214:	69fb      	ldr	r3, [r7, #28]
 8005216:	fb03 f301 	mul.w	r3, r3, r1
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	6839      	ldr	r1, [r7, #0]
 800521e:	4419      	add	r1, r3
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4413      	add	r3, r2
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	440b      	add	r3, r1
 800522e:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < n; j++){
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	3301      	adds	r3, #1
 8005234:	61fb      	str	r3, [r7, #28]
 8005236:	69fa      	ldr	r2, [r7, #28]
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	429a      	cmp	r2, r3
 800523c:	dbe2      	blt.n	8005204 <transpose+0x56>
	for(int i = 0; i < m; i++){
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	3301      	adds	r3, #1
 8005242:	61bb      	str	r3, [r7, #24]
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	429a      	cmp	r2, r3
 800524a:	dbd8      	blt.n	80051fe <transpose+0x50>
		}
	}
}
 800524c:	bf00      	nop
 800524e:	3724      	adds	r7, #36	; 0x24
 8005250:	46bd      	mov	sp, r7
 8005252:	bcb0      	pop	{r4, r5, r7}
 8005254:	4770      	bx	lr

08005256 <vecadd>:

void vecadd(int n, float a[n], float b[n], float c[n]) {
 8005256:	b480      	push	{r7}
 8005258:	b087      	sub	sp, #28
 800525a:	af00      	add	r7, sp, #0
 800525c:	60f8      	str	r0, [r7, #12]
 800525e:	60b9      	str	r1, [r7, #8]
 8005260:	607a      	str	r2, [r7, #4]
 8005262:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 8005264:	2300      	movs	r3, #0
 8005266:	617b      	str	r3, [r7, #20]
 8005268:	e016      	b.n	8005298 <vecadd+0x42>
		c[i] = a[i] + b[i];
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	68ba      	ldr	r2, [r7, #8]
 8005270:	4413      	add	r3, r2
 8005272:	ed93 7a00 	vldr	s14, [r3]
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	4413      	add	r3, r2
 800527e:	edd3 7a00 	vldr	s15, [r3]
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	4413      	add	r3, r2
 800528a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800528e:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	3301      	adds	r3, #1
 8005296:	617b      	str	r3, [r7, #20]
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	429a      	cmp	r2, r3
 800529e:	dbe4      	blt.n	800526a <vecadd+0x14>
	}
}
 80052a0:	bf00      	nop
 80052a2:	371c      	adds	r7, #28
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <vecsub>:

void vecsub(int n, float a[n], float b[n], float c[n]) {
 80052ac:	b480      	push	{r7}
 80052ae:	b087      	sub	sp, #28
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
 80052b8:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 80052ba:	2300      	movs	r3, #0
 80052bc:	617b      	str	r3, [r7, #20]
 80052be:	e016      	b.n	80052ee <vecsub+0x42>
		c[i] = a[i] - b[i];
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	68ba      	ldr	r2, [r7, #8]
 80052c6:	4413      	add	r3, r2
 80052c8:	ed93 7a00 	vldr	s14, [r3]
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	4413      	add	r3, r2
 80052d4:	edd3 7a00 	vldr	s15, [r3]
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	683a      	ldr	r2, [r7, #0]
 80052de:	4413      	add	r3, r2
 80052e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052e4:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	3301      	adds	r3, #1
 80052ec:	617b      	str	r3, [r7, #20]
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	dbe4      	blt.n	80052c0 <vecsub+0x14>
	}
}
 80052f6:	bf00      	nop
 80052f8:	371c      	adds	r7, #28
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <matadd>:
    for(int i = 0; i < n; i++){
        b[i] = scalar * a[i];
    }
}

void matadd(int m, int n, float A[m][n], float B[m][n], float C[m][n]) {
 8005302:	b4f0      	push	{r4, r5, r6, r7}
 8005304:	b08a      	sub	sp, #40	; 0x28
 8005306:	af00      	add	r7, sp, #0
 8005308:	60f8      	str	r0, [r7, #12]
 800530a:	60b9      	str	r1, [r7, #8]
 800530c:	607a      	str	r2, [r7, #4]
 800530e:	603b      	str	r3, [r7, #0]
 8005310:	68b8      	ldr	r0, [r7, #8]
 8005312:	1e43      	subs	r3, r0, #1
 8005314:	627b      	str	r3, [r7, #36]	; 0x24
 8005316:	4603      	mov	r3, r0
 8005318:	4619      	mov	r1, r3
 800531a:	f04f 0200 	mov.w	r2, #0
 800531e:	f04f 0300 	mov.w	r3, #0
 8005322:	f04f 0400 	mov.w	r4, #0
 8005326:	0154      	lsls	r4, r2, #5
 8005328:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800532c:	014b      	lsls	r3, r1, #5
 800532e:	68bd      	ldr	r5, [r7, #8]
 8005330:	1e6b      	subs	r3, r5, #1
 8005332:	61bb      	str	r3, [r7, #24]
 8005334:	462b      	mov	r3, r5
 8005336:	4619      	mov	r1, r3
 8005338:	f04f 0200 	mov.w	r2, #0
 800533c:	f04f 0300 	mov.w	r3, #0
 8005340:	f04f 0400 	mov.w	r4, #0
 8005344:	0154      	lsls	r4, r2, #5
 8005346:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800534a:	014b      	lsls	r3, r1, #5
 800534c:	68be      	ldr	r6, [r7, #8]
 800534e:	1e73      	subs	r3, r6, #1
 8005350:	617b      	str	r3, [r7, #20]
 8005352:	4633      	mov	r3, r6
 8005354:	4619      	mov	r1, r3
 8005356:	f04f 0200 	mov.w	r2, #0
 800535a:	f04f 0300 	mov.w	r3, #0
 800535e:	f04f 0400 	mov.w	r4, #0
 8005362:	0154      	lsls	r4, r2, #5
 8005364:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005368:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 800536a:	2300      	movs	r3, #0
 800536c:	61fb      	str	r3, [r7, #28]
 800536e:	e032      	b.n	80053d6 <matadd+0xd4>
        for(int j = 0; j < n; j++){
 8005370:	2300      	movs	r3, #0
 8005372:	623b      	str	r3, [r7, #32]
 8005374:	e028      	b.n	80053c8 <matadd+0xc6>
            C[i][j] =  A[i][j] + B[i][j];
 8005376:	4602      	mov	r2, r0
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	fb03 f302 	mul.w	r3, r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	441a      	add	r2, r3
 8005384:	6a3b      	ldr	r3, [r7, #32]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4413      	add	r3, r2
 800538a:	ed93 7a00 	vldr	s14, [r3]
 800538e:	462a      	mov	r2, r5
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	fb03 f302 	mul.w	r3, r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	441a      	add	r2, r3
 800539c:	6a3b      	ldr	r3, [r7, #32]
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	4413      	add	r3, r2
 80053a2:	edd3 7a00 	vldr	s15, [r3]
 80053a6:	4632      	mov	r2, r6
 80053a8:	69fb      	ldr	r3, [r7, #28]
 80053aa:	fb03 f302 	mul.w	r3, r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053b2:	441a      	add	r2, r3
 80053b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053b8:	6a3b      	ldr	r3, [r7, #32]
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	4413      	add	r3, r2
 80053be:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 80053c2:	6a3b      	ldr	r3, [r7, #32]
 80053c4:	3301      	adds	r3, #1
 80053c6:	623b      	str	r3, [r7, #32]
 80053c8:	6a3a      	ldr	r2, [r7, #32]
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	dbd2      	blt.n	8005376 <matadd+0x74>
	for(int i = 0; i < m; i++){
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	3301      	adds	r3, #1
 80053d4:	61fb      	str	r3, [r7, #28]
 80053d6:	69fa      	ldr	r2, [r7, #28]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	429a      	cmp	r2, r3
 80053dc:	dbc8      	blt.n	8005370 <matadd+0x6e>
        }
    }
}
 80053de:	bf00      	nop
 80053e0:	3728      	adds	r7, #40	; 0x28
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bcf0      	pop	{r4, r5, r6, r7}
 80053e6:	4770      	bx	lr

080053e8 <matsub>:

void matsub(int m, int n, float A[m][n], float B[m][n], float C[m][n]) {
 80053e8:	b4f0      	push	{r4, r5, r6, r7}
 80053ea:	b08a      	sub	sp, #40	; 0x28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
 80053f4:	603b      	str	r3, [r7, #0]
 80053f6:	68b8      	ldr	r0, [r7, #8]
 80053f8:	1e43      	subs	r3, r0, #1
 80053fa:	627b      	str	r3, [r7, #36]	; 0x24
 80053fc:	4603      	mov	r3, r0
 80053fe:	4619      	mov	r1, r3
 8005400:	f04f 0200 	mov.w	r2, #0
 8005404:	f04f 0300 	mov.w	r3, #0
 8005408:	f04f 0400 	mov.w	r4, #0
 800540c:	0154      	lsls	r4, r2, #5
 800540e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005412:	014b      	lsls	r3, r1, #5
 8005414:	68bd      	ldr	r5, [r7, #8]
 8005416:	1e6b      	subs	r3, r5, #1
 8005418:	61bb      	str	r3, [r7, #24]
 800541a:	462b      	mov	r3, r5
 800541c:	4619      	mov	r1, r3
 800541e:	f04f 0200 	mov.w	r2, #0
 8005422:	f04f 0300 	mov.w	r3, #0
 8005426:	f04f 0400 	mov.w	r4, #0
 800542a:	0154      	lsls	r4, r2, #5
 800542c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005430:	014b      	lsls	r3, r1, #5
 8005432:	68be      	ldr	r6, [r7, #8]
 8005434:	1e73      	subs	r3, r6, #1
 8005436:	617b      	str	r3, [r7, #20]
 8005438:	4633      	mov	r3, r6
 800543a:	4619      	mov	r1, r3
 800543c:	f04f 0200 	mov.w	r2, #0
 8005440:	f04f 0300 	mov.w	r3, #0
 8005444:	f04f 0400 	mov.w	r4, #0
 8005448:	0154      	lsls	r4, r2, #5
 800544a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800544e:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 8005450:	2300      	movs	r3, #0
 8005452:	61fb      	str	r3, [r7, #28]
 8005454:	e032      	b.n	80054bc <matsub+0xd4>
        for(int j = 0; j < n; j++){
 8005456:	2300      	movs	r3, #0
 8005458:	623b      	str	r3, [r7, #32]
 800545a:	e028      	b.n	80054ae <matsub+0xc6>
            C[i][j] =  A[i][j] - B[i][j];
 800545c:	4602      	mov	r2, r0
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	fb03 f302 	mul.w	r3, r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	441a      	add	r2, r3
 800546a:	6a3b      	ldr	r3, [r7, #32]
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	4413      	add	r3, r2
 8005470:	ed93 7a00 	vldr	s14, [r3]
 8005474:	462a      	mov	r2, r5
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	fb03 f302 	mul.w	r3, r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	683a      	ldr	r2, [r7, #0]
 8005480:	441a      	add	r2, r3
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4413      	add	r3, r2
 8005488:	edd3 7a00 	vldr	s15, [r3]
 800548c:	4632      	mov	r2, r6
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	fb03 f302 	mul.w	r3, r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005498:	441a      	add	r2, r3
 800549a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800549e:	6a3b      	ldr	r3, [r7, #32]
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	4413      	add	r3, r2
 80054a4:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 80054a8:	6a3b      	ldr	r3, [r7, #32]
 80054aa:	3301      	adds	r3, #1
 80054ac:	623b      	str	r3, [r7, #32]
 80054ae:	6a3a      	ldr	r2, [r7, #32]
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	dbd2      	blt.n	800545c <matsub+0x74>
	for(int i = 0; i < m; i++){
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	3301      	adds	r3, #1
 80054ba:	61fb      	str	r3, [r7, #28]
 80054bc:	69fa      	ldr	r2, [r7, #28]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	dbc8      	blt.n	8005456 <matsub+0x6e>
        }
    }
}
 80054c4:	bf00      	nop
 80054c6:	3728      	adds	r7, #40	; 0x28
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bcf0      	pop	{r4, r5, r6, r7}
 80054cc:	4770      	bx	lr

080054ce <matmul>:

void matmul(int m, int n, int o, float A[m][n], float B[n][o], float C[m][o], bool reset) {
 80054ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054d0:	b08d      	sub	sp, #52	; 0x34
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6178      	str	r0, [r7, #20]
 80054d6:	6139      	str	r1, [r7, #16]
 80054d8:	60fa      	str	r2, [r7, #12]
 80054da:	60bb      	str	r3, [r7, #8]
 80054dc:	693e      	ldr	r6, [r7, #16]
 80054de:	1e73      	subs	r3, r6, #1
 80054e0:	623b      	str	r3, [r7, #32]
 80054e2:	4633      	mov	r3, r6
 80054e4:	4619      	mov	r1, r3
 80054e6:	f04f 0200 	mov.w	r2, #0
 80054ea:	f04f 0300 	mov.w	r3, #0
 80054ee:	f04f 0400 	mov.w	r4, #0
 80054f2:	0154      	lsls	r4, r2, #5
 80054f4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80054f8:	014b      	lsls	r3, r1, #5
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	607a      	str	r2, [r7, #4]
 80054fe:	4613      	mov	r3, r2
 8005500:	3b01      	subs	r3, #1
 8005502:	61fb      	str	r3, [r7, #28]
 8005504:	4613      	mov	r3, r2
 8005506:	4619      	mov	r1, r3
 8005508:	f04f 0200 	mov.w	r2, #0
 800550c:	f04f 0300 	mov.w	r3, #0
 8005510:	f04f 0400 	mov.w	r4, #0
 8005514:	0154      	lsls	r4, r2, #5
 8005516:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800551a:	014b      	lsls	r3, r1, #5
 800551c:	68fd      	ldr	r5, [r7, #12]
 800551e:	1e6b      	subs	r3, r5, #1
 8005520:	61bb      	str	r3, [r7, #24]
 8005522:	462b      	mov	r3, r5
 8005524:	4619      	mov	r1, r3
 8005526:	f04f 0200 	mov.w	r2, #0
 800552a:	f04f 0300 	mov.w	r3, #0
 800552e:	f04f 0400 	mov.w	r4, #0
 8005532:	0154      	lsls	r4, r2, #5
 8005534:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005538:	014b      	lsls	r3, r1, #5
	if (reset) {
 800553a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800553e:	2b00      	cmp	r3, #0
 8005540:	d009      	beq.n	8005556 <matmul+0x88>
		memset(C, 0, m * o * sizeof(C[0][0]));
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	fb02 f303 	mul.w	r3, r2, r3
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	461a      	mov	r2, r3
 800554e:	2100      	movs	r1, #0
 8005550:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005552:	f00b f830 	bl	80105b6 <memset>
	}
	for(int i = 0; i < m; i++){
 8005556:	2300      	movs	r3, #0
 8005558:	627b      	str	r3, [r7, #36]	; 0x24
 800555a:	e04a      	b.n	80055f2 <matmul+0x124>
        for(int j = 0; j < o; j++){
 800555c:	2300      	movs	r3, #0
 800555e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005560:	e040      	b.n	80055e4 <matmul+0x116>
            for(int k = 0; k < n; k++){
 8005562:	2300      	movs	r3, #0
 8005564:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005566:	e036      	b.n	80055d6 <matmul+0x108>
                C[i][j] +=  A[i][k] * B[k][j];
 8005568:	4632      	mov	r2, r6
 800556a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556c:	fb03 f302 	mul.w	r3, r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	441a      	add	r2, r3
 8005576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	ed93 7a00 	vldr	s14, [r3]
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005584:	fb03 f302 	mul.w	r3, r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800558c:	441a      	add	r2, r3
 800558e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	4413      	add	r3, r2
 8005594:	edd3 7a00 	vldr	s15, [r3]
 8005598:	ee27 7a27 	vmul.f32	s14, s14, s15
 800559c:	462a      	mov	r2, r5
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	fb03 f302 	mul.w	r3, r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055a8:	441a      	add	r2, r3
 80055aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4413      	add	r3, r2
 80055b0:	edd3 7a00 	vldr	s15, [r3]
 80055b4:	462a      	mov	r2, r5
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	fb03 f302 	mul.w	r3, r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055c0:	441a      	add	r2, r3
 80055c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4413      	add	r3, r2
 80055cc:	edc3 7a00 	vstr	s15, [r3]
            for(int k = 0; k < n; k++){
 80055d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d2:	3301      	adds	r3, #1
 80055d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	429a      	cmp	r2, r3
 80055dc:	dbc4      	blt.n	8005568 <matmul+0x9a>
        for(int j = 0; j < o; j++){
 80055de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e0:	3301      	adds	r3, #1
 80055e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80055e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	dbba      	blt.n	8005562 <matmul+0x94>
	for(int i = 0; i < m; i++){
 80055ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ee:	3301      	adds	r3, #1
 80055f0:	627b      	str	r3, [r7, #36]	; 0x24
 80055f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	dbb0      	blt.n	800555c <matmul+0x8e>
            }
        }
    }
}
 80055fa:	bf00      	nop
 80055fc:	3734      	adds	r7, #52	; 0x34
 80055fe:	46bd      	mov	sp, r7
 8005600:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005602 <matvecprod>:

void matvecprod(int m, int n, float A[m][n], float b[n], float c[m], bool reset) {
 8005602:	b5b0      	push	{r4, r5, r7, lr}
 8005604:	b088      	sub	sp, #32
 8005606:	af00      	add	r7, sp, #0
 8005608:	60f8      	str	r0, [r7, #12]
 800560a:	60b9      	str	r1, [r7, #8]
 800560c:	607a      	str	r2, [r7, #4]
 800560e:	603b      	str	r3, [r7, #0]
 8005610:	68bd      	ldr	r5, [r7, #8]
 8005612:	1e6b      	subs	r3, r5, #1
 8005614:	617b      	str	r3, [r7, #20]
 8005616:	462b      	mov	r3, r5
 8005618:	4619      	mov	r1, r3
 800561a:	f04f 0200 	mov.w	r2, #0
 800561e:	f04f 0300 	mov.w	r3, #0
 8005622:	f04f 0400 	mov.w	r4, #0
 8005626:	0154      	lsls	r4, r2, #5
 8005628:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800562c:	014b      	lsls	r3, r1, #5
	if (reset) {
 800562e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005632:	2b00      	cmp	r3, #0
 8005634:	d006      	beq.n	8005644 <matvecprod+0x42>
		memset(c, 0, m * sizeof(c[0]));
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	461a      	mov	r2, r3
 800563c:	2100      	movs	r1, #0
 800563e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005640:	f00a ffb9 	bl	80105b6 <memset>
	}
	for(int i = 0; i < m; i++){
 8005644:	2300      	movs	r3, #0
 8005646:	61bb      	str	r3, [r7, #24]
 8005648:	e02e      	b.n	80056a8 <matvecprod+0xa6>
        for(int j = 0; j < n; j++){
 800564a:	2300      	movs	r3, #0
 800564c:	61fb      	str	r3, [r7, #28]
 800564e:	e024      	b.n	800569a <matvecprod+0x98>
            c[i] += A[i][j] * b[j];
 8005650:	462a      	mov	r2, r5
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	fb03 f302 	mul.w	r3, r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	441a      	add	r2, r3
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	4413      	add	r3, r2
 8005664:	ed93 7a00 	vldr	s14, [r3]
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	683a      	ldr	r2, [r7, #0]
 800566e:	4413      	add	r3, r2
 8005670:	edd3 7a00 	vldr	s15, [r3]
 8005674:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800567e:	4413      	add	r3, r2
 8005680:	edd3 7a00 	vldr	s15, [r3]
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800568a:	4413      	add	r3, r2
 800568c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005690:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	3301      	adds	r3, #1
 8005698:	61fb      	str	r3, [r7, #28]
 800569a:	69fa      	ldr	r2, [r7, #28]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	429a      	cmp	r2, r3
 80056a0:	dbd6      	blt.n	8005650 <matvecprod+0x4e>
	for(int i = 0; i < m; i++){
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	3301      	adds	r3, #1
 80056a6:	61bb      	str	r3, [r7, #24]
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	dbcc      	blt.n	800564a <matvecprod+0x48>
        }
    }
}
 80056b0:	bf00      	nop
 80056b2:	3720      	adds	r7, #32
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bdb0      	pop	{r4, r5, r7, pc}

080056b8 <lower_triangular_inverse>:
	}
}

/* computes in-place the inverse of the lower triangular matrix L */
/* http://www.mymathlib.com/matrices/linearsystems/triangular.html */
int lower_triangular_inverse(int n, float *L) {
 80056b8:	b480      	push	{r7}
 80056ba:	b08b      	sub	sp, #44	; 0x2c
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
   int i, j, k;
   float *p_i, *p_j, *p_k;
   float sum;

    /* Invert the diagonal elements of the lower triangular matrix L. */
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 80056c2:	2300      	movs	r3, #0
 80056c4:	61fb      	str	r3, [r7, #28]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	613b      	str	r3, [r7, #16]
 80056ca:	e01d      	b.n	8005708 <lower_triangular_inverse+0x50>
        if (*p_k == 0.0) return -1;
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	edd3 7a00 	vldr	s15, [r3]
 80056d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80056d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056da:	d102      	bne.n	80056e2 <lower_triangular_inverse+0x2a>
 80056dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056e0:	e076      	b.n	80057d0 <lower_triangular_inverse+0x118>
        else *p_k = 1.0 / *p_k;
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	ed93 7a00 	vldr	s14, [r3]
 80056e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	edc3 7a00 	vstr	s15, [r3]
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	3301      	adds	r3, #1
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	4413      	add	r3, r2
 8005700:	613b      	str	r3, [r7, #16]
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	3301      	adds	r3, #1
 8005706:	61fb      	str	r3, [r7, #28]
 8005708:	69fa      	ldr	r2, [r7, #28]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	429a      	cmp	r2, r3
 800570e:	dbdd      	blt.n	80056cc <lower_triangular_inverse+0x14>
    }
    
    /* Invert the remaining lower triangular matrix L row by row. */
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 8005710:	2301      	movs	r3, #1
 8005712:	627b      	str	r3, [r7, #36]	; 0x24
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	683a      	ldr	r2, [r7, #0]
 800571a:	4413      	add	r3, r2
 800571c:	61bb      	str	r3, [r7, #24]
 800571e:	e052      	b.n	80057c6 <lower_triangular_inverse+0x10e>
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 8005720:	2300      	movs	r3, #0
 8005722:	623b      	str	r3, [r7, #32]
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	617b      	str	r3, [r7, #20]
 8005728:	e041      	b.n	80057ae <lower_triangular_inverse+0xf6>
            sum = 0.0;
 800572a:	f04f 0300 	mov.w	r3, #0
 800572e:	60fb      	str	r3, [r7, #12]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	61fb      	str	r3, [r7, #28]
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	613b      	str	r3, [r7, #16]
 8005738:	e01b      	b.n	8005772 <lower_triangular_inverse+0xba>
                sum += *(p_i + k) * *(p_k + j);
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	69ba      	ldr	r2, [r7, #24]
 8005740:	4413      	add	r3, r2
 8005742:	ed93 7a00 	vldr	s14, [r3]
 8005746:	6a3b      	ldr	r3, [r7, #32]
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	4413      	add	r3, r2
 800574e:	edd3 7a00 	vldr	s15, [r3]
 8005752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005756:	ed97 7a03 	vldr	s14, [r7, #12]
 800575a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800575e:	edc7 7a03 	vstr	s15, [r7, #12]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	3301      	adds	r3, #1
 8005766:	61fb      	str	r3, [r7, #28]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	4413      	add	r3, r2
 8005770:	613b      	str	r3, [r7, #16]
 8005772:	69fa      	ldr	r2, [r7, #28]
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	429a      	cmp	r2, r3
 8005778:	dbdf      	blt.n	800573a <lower_triangular_inverse+0x82>
            *(p_i + j) = - *(p_i + i) * sum;
 800577a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	69ba      	ldr	r2, [r7, #24]
 8005780:	4413      	add	r3, r2
 8005782:	edd3 7a00 	vldr	s15, [r3]
 8005786:	eeb1 7a67 	vneg.f32	s14, s15
 800578a:	6a3b      	ldr	r3, [r7, #32]
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	69ba      	ldr	r2, [r7, #24]
 8005790:	4413      	add	r3, r2
 8005792:	edd7 7a03 	vldr	s15, [r7, #12]
 8005796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800579a:	edc3 7a00 	vstr	s15, [r3]
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	4413      	add	r3, r2
 80057a6:	617b      	str	r3, [r7, #20]
 80057a8:	6a3b      	ldr	r3, [r7, #32]
 80057aa:	3301      	adds	r3, #1
 80057ac:	623b      	str	r3, [r7, #32]
 80057ae:	6a3a      	ldr	r2, [r7, #32]
 80057b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b2:	429a      	cmp	r2, r3
 80057b4:	dbb9      	blt.n	800572a <lower_triangular_inverse+0x72>
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 80057b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b8:	3301      	adds	r3, #1
 80057ba:	627b      	str	r3, [r7, #36]	; 0x24
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	009b      	lsls	r3, r3, #2
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	4413      	add	r3, r2
 80057c4:	61bb      	str	r3, [r7, #24]
 80057c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	dba8      	blt.n	8005720 <lower_triangular_inverse+0x68>
        }
    }
    
    return 0;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	372c      	adds	r7, #44	; 0x2c
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <cholesky>:

/* computes the cholesky decomposition */
/* https://rosettacode.org/wiki/Cholesky_decomposition#C */
void cholesky(int n, float A[n][n], float L[n][n]) {
 80057dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80057e0:	b08b      	sub	sp, #44	; 0x2c
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	60f8      	str	r0, [r7, #12]
 80057e6:	60b9      	str	r1, [r7, #8]
 80057e8:	607a      	str	r2, [r7, #4]
 80057ea:	68fe      	ldr	r6, [r7, #12]
 80057ec:	1e73      	subs	r3, r6, #1
 80057ee:	617b      	str	r3, [r7, #20]
 80057f0:	4633      	mov	r3, r6
 80057f2:	4619      	mov	r1, r3
 80057f4:	f04f 0200 	mov.w	r2, #0
 80057f8:	f04f 0300 	mov.w	r3, #0
 80057fc:	f04f 0400 	mov.w	r4, #0
 8005800:	0154      	lsls	r4, r2, #5
 8005802:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005806:	014b      	lsls	r3, r1, #5
 8005808:	68fd      	ldr	r5, [r7, #12]
 800580a:	1e6b      	subs	r3, r5, #1
 800580c:	613b      	str	r3, [r7, #16]
 800580e:	462b      	mov	r3, r5
 8005810:	4619      	mov	r1, r3
 8005812:	f04f 0200 	mov.w	r2, #0
 8005816:	f04f 0300 	mov.w	r3, #0
 800581a:	f04f 0400 	mov.w	r4, #0
 800581e:	0154      	lsls	r4, r2, #5
 8005820:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005824:	014b      	lsls	r3, r1, #5
    memset(L, 0, n * n * sizeof(L[0][0]));
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	fb02 f303 	mul.w	r3, r2, r3
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	461a      	mov	r2, r3
 8005832:	2100      	movs	r1, #0
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f00a febe 	bl	80105b6 <memset>
    for (int i = 0; i < n; i++)
 800583a:	2300      	movs	r3, #0
 800583c:	61bb      	str	r3, [r7, #24]
 800583e:	e09f      	b.n	8005980 <cholesky+0x1a4>
        for (int j = 0; j < (i+1); j++) {
 8005840:	2300      	movs	r3, #0
 8005842:	61fb      	str	r3, [r7, #28]
 8005844:	e093      	b.n	800596e <cholesky+0x192>
            float s = 0;
 8005846:	f04f 0300 	mov.w	r3, #0
 800584a:	623b      	str	r3, [r7, #32]
            for (int k = 0; k < j; k++)
 800584c:	2300      	movs	r3, #0
 800584e:	627b      	str	r3, [r7, #36]	; 0x24
 8005850:	e022      	b.n	8005898 <cholesky+0xbc>
                s += L[i][k] * L[j][k];
 8005852:	462a      	mov	r2, r5
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	fb03 f302 	mul.w	r3, r3, r2
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	441a      	add	r2, r3
 8005860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	ed93 7a00 	vldr	s14, [r3]
 800586a:	462a      	mov	r2, r5
 800586c:	69fb      	ldr	r3, [r7, #28]
 800586e:	fb03 f302 	mul.w	r3, r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	441a      	add	r2, r3
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4413      	add	r3, r2
 800587e:	edd3 7a00 	vldr	s15, [r3]
 8005882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005886:	ed97 7a08 	vldr	s14, [r7, #32]
 800588a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800588e:	edc7 7a08 	vstr	s15, [r7, #32]
            for (int k = 0; k < j; k++)
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	3301      	adds	r3, #1
 8005896:	627b      	str	r3, [r7, #36]	; 0x24
 8005898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	429a      	cmp	r2, r3
 800589e:	dbd8      	blt.n	8005852 <cholesky+0x76>
            L[i][j] = (i == j) ? sqrtf(A[i][i] - s) : (1.0 / L[j][j] * (A[i][j] - s));
 80058a0:	69ba      	ldr	r2, [r7, #24]
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d116      	bne.n	80058d6 <cholesky+0xfa>
 80058a8:	4632      	mov	r2, r6
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	fb03 f302 	mul.w	r3, r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	441a      	add	r2, r3
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	4413      	add	r3, r2
 80058bc:	ed93 7a00 	vldr	s14, [r3]
 80058c0:	edd7 7a08 	vldr	s15, [r7, #32]
 80058c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058c8:	eeb0 0a67 	vmov.f32	s0, s15
 80058cc:	f00d fee8 	bl	80136a0 <sqrtf>
 80058d0:	ee10 1a10 	vmov	r1, s0
 80058d4:	e03d      	b.n	8005952 <cholesky+0x176>
 80058d6:	462a      	mov	r2, r5
 80058d8:	69fb      	ldr	r3, [r7, #28]
 80058da:	fb03 f302 	mul.w	r3, r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	441a      	add	r2, r3
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	4413      	add	r3, r2
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7fa fe2b 	bl	8000548 <__aeabi_f2d>
 80058f2:	4603      	mov	r3, r0
 80058f4:	460c      	mov	r4, r1
 80058f6:	461a      	mov	r2, r3
 80058f8:	4623      	mov	r3, r4
 80058fa:	f04f 0000 	mov.w	r0, #0
 80058fe:	4925      	ldr	r1, [pc, #148]	; (8005994 <cholesky+0x1b8>)
 8005900:	f7fa ffa4 	bl	800084c <__aeabi_ddiv>
 8005904:	4603      	mov	r3, r0
 8005906:	460c      	mov	r4, r1
 8005908:	4698      	mov	r8, r3
 800590a:	46a1      	mov	r9, r4
 800590c:	4632      	mov	r2, r6
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	fb03 f302 	mul.w	r3, r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	441a      	add	r2, r3
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	4413      	add	r3, r2
 8005920:	ed93 7a00 	vldr	s14, [r3]
 8005924:	edd7 7a08 	vldr	s15, [r7, #32]
 8005928:	ee77 7a67 	vsub.f32	s15, s14, s15
 800592c:	ee17 0a90 	vmov	r0, s15
 8005930:	f7fa fe0a 	bl	8000548 <__aeabi_f2d>
 8005934:	4603      	mov	r3, r0
 8005936:	460c      	mov	r4, r1
 8005938:	461a      	mov	r2, r3
 800593a:	4623      	mov	r3, r4
 800593c:	4640      	mov	r0, r8
 800593e:	4649      	mov	r1, r9
 8005940:	f7fa fe5a 	bl	80005f8 <__aeabi_dmul>
 8005944:	4603      	mov	r3, r0
 8005946:	460c      	mov	r4, r1
 8005948:	4618      	mov	r0, r3
 800594a:	4621      	mov	r1, r4
 800594c:	f7fb f94c 	bl	8000be8 <__aeabi_d2f>
 8005950:	4601      	mov	r1, r0
 8005952:	462a      	mov	r2, r5
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	fb03 f302 	mul.w	r3, r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	441a      	add	r2, r3
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	4413      	add	r3, r2
 8005966:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < (i+1); j++) {
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	3301      	adds	r3, #1
 800596c:	61fb      	str	r3, [r7, #28]
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	3301      	adds	r3, #1
 8005972:	69fa      	ldr	r2, [r7, #28]
 8005974:	429a      	cmp	r2, r3
 8005976:	f6ff af66 	blt.w	8005846 <cholesky+0x6a>
    for (int i = 0; i < n; i++)
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	3301      	adds	r3, #1
 800597e:	61bb      	str	r3, [r7, #24]
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	429a      	cmp	r2, r3
 8005986:	f6ff af5b 	blt.w	8005840 <cholesky+0x64>
        }
}
 800598a:	bf00      	nop
 800598c:	372c      	adds	r7, #44	; 0x2c
 800598e:	46bd      	mov	sp, r7
 8005990:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005994:	3ff00000 	.word	0x3ff00000

08005998 <cholesky_inverse>:

/* computes the inverse of a Hermitian, positive-definite matrix of dimension n x n using cholesky decomposition*/
/* Krishnamoorthy, Aravindh, and Deepak Menon. "Matrix inversion using Cholesky decomposition." */
/* 2013 signal processing: Algorithms, architectures, arrangements, and applications (SPA). IEEE, 2013. */
/* the inverse has a big O complexity of n^3 */
void cholesky_inverse(int n, float A[n][n], float inverse[n][n], float lambda) {
 8005998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800599c:	b090      	sub	sp, #64	; 0x40
 800599e:	af00      	add	r7, sp, #0
 80059a0:	60f8      	str	r0, [r7, #12]
 80059a2:	60b9      	str	r1, [r7, #8]
 80059a4:	607a      	str	r2, [r7, #4]
 80059a6:	ed87 0a00 	vstr	s0, [r7]
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	1e5a      	subs	r2, r3, #1
 80059ae:	63ba      	str	r2, [r7, #56]	; 0x38
 80059b0:	4619      	mov	r1, r3
 80059b2:	f04f 0200 	mov.w	r2, #0
 80059b6:	f04f 0300 	mov.w	r3, #0
 80059ba:	f04f 0400 	mov.w	r4, #0
 80059be:	0154      	lsls	r4, r2, #5
 80059c0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80059c4:	014b      	lsls	r3, r1, #5
 80059c6:	68fd      	ldr	r5, [r7, #12]
 80059c8:	1e6b      	subs	r3, r5, #1
 80059ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059cc:	462b      	mov	r3, r5
 80059ce:	4619      	mov	r1, r3
 80059d0:	f04f 0200 	mov.w	r2, #0
 80059d4:	f04f 0300 	mov.w	r3, #0
 80059d8:	f04f 0400 	mov.w	r4, #0
 80059dc:	0154      	lsls	r4, r2, #5
 80059de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80059e2:	014b      	lsls	r3, r1, #5
 80059e4:	466b      	mov	r3, sp
 80059e6:	4699      	mov	r9, r3
    /* add damping factor to avoid singularities. */
	/* if no damping is required set lambda to 0.0 */
	float A_dash[n][n];
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	68fe      	ldr	r6, [r7, #12]
 80059ec:	1e43      	subs	r3, r0, #1
 80059ee:	627b      	str	r3, [r7, #36]	; 0x24
 80059f0:	4603      	mov	r3, r0
 80059f2:	4619      	mov	r1, r3
 80059f4:	f04f 0200 	mov.w	r2, #0
 80059f8:	f04f 0300 	mov.w	r3, #0
 80059fc:	f04f 0400 	mov.w	r4, #0
 8005a00:	0154      	lsls	r4, r2, #5
 8005a02:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005a06:	014b      	lsls	r3, r1, #5
 8005a08:	4603      	mov	r3, r0
 8005a0a:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8005a0e:	1e73      	subs	r3, r6, #1
 8005a10:	623b      	str	r3, [r7, #32]
 8005a12:	4603      	mov	r3, r0
 8005a14:	4619      	mov	r1, r3
 8005a16:	f04f 0200 	mov.w	r2, #0
 8005a1a:	4633      	mov	r3, r6
 8005a1c:	f04f 0400 	mov.w	r4, #0
 8005a20:	fb03 fe02 	mul.w	lr, r3, r2
 8005a24:	fb01 fc04 	mul.w	ip, r1, r4
 8005a28:	44f4      	add	ip, lr
 8005a2a:	fba1 3403 	umull	r3, r4, r1, r3
 8005a2e:	eb0c 0204 	add.w	r2, ip, r4
 8005a32:	4614      	mov	r4, r2
 8005a34:	f04f 0100 	mov.w	r1, #0
 8005a38:	f04f 0200 	mov.w	r2, #0
 8005a3c:	0162      	lsls	r2, r4, #5
 8005a3e:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8005a42:	0159      	lsls	r1, r3, #5
 8005a44:	4603      	mov	r3, r0
 8005a46:	4619      	mov	r1, r3
 8005a48:	f04f 0200 	mov.w	r2, #0
 8005a4c:	4633      	mov	r3, r6
 8005a4e:	f04f 0400 	mov.w	r4, #0
 8005a52:	fb03 fe02 	mul.w	lr, r3, r2
 8005a56:	fb01 fc04 	mul.w	ip, r1, r4
 8005a5a:	44f4      	add	ip, lr
 8005a5c:	fba1 3403 	umull	r3, r4, r1, r3
 8005a60:	eb0c 0204 	add.w	r2, ip, r4
 8005a64:	4614      	mov	r4, r2
 8005a66:	f04f 0100 	mov.w	r1, #0
 8005a6a:	f04f 0200 	mov.w	r2, #0
 8005a6e:	0162      	lsls	r2, r4, #5
 8005a70:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8005a74:	0159      	lsls	r1, r3, #5
 8005a76:	4603      	mov	r3, r0
 8005a78:	4632      	mov	r2, r6
 8005a7a:	fb02 f303 	mul.w	r3, r2, r3
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	3303      	adds	r3, #3
 8005a82:	3307      	adds	r3, #7
 8005a84:	08db      	lsrs	r3, r3, #3
 8005a86:	00db      	lsls	r3, r3, #3
 8005a88:	ebad 0d03 	sub.w	sp, sp, r3
 8005a8c:	466b      	mov	r3, sp
 8005a8e:	3303      	adds	r3, #3
 8005a90:	089b      	lsrs	r3, r3, #2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	61fb      	str	r3, [r7, #28]
    memcpy(A_dash, A, n * n * sizeof(A[0][0]));
 8005a96:	69f8      	ldr	r0, [r7, #28]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	fb02 f303 	mul.w	r3, r2, r3
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	68b9      	ldr	r1, [r7, #8]
 8005aa6:	f00a fd7b 	bl	80105a0 <memcpy>
    for (int i = 0; i < n; i++) {
 8005aaa:	2300      	movs	r3, #0
 8005aac:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aae:	e022      	b.n	8005af6 <cholesky_inverse+0x15e>
        A_dash[i][i] = A_dash[i][i] + lambda * lambda; 
 8005ab0:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8005ab4:	69fa      	ldr	r2, [r7, #28]
 8005ab6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ab8:	fb01 f103 	mul.w	r1, r1, r3
 8005abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005abe:	440b      	add	r3, r1
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	4413      	add	r3, r2
 8005ac4:	ed93 7a00 	vldr	s14, [r3]
 8005ac8:	edd7 6a00 	vldr	s13, [r7]
 8005acc:	edd7 7a00 	vldr	s15, [r7]
 8005ad0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ad4:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8005ad8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005adc:	69fa      	ldr	r2, [r7, #28]
 8005ade:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ae0:	fb01 f103 	mul.w	r1, r1, r3
 8005ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae6:	440b      	add	r3, r1
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	4413      	add	r3, r2
 8005aec:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < n; i++) {
 8005af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af2:	3301      	adds	r3, #1
 8005af4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005af6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	dbd8      	blt.n	8005ab0 <cholesky_inverse+0x118>
	}

    /* call cholesky decomposition to get lower triangular matrix L */
    float L[n][n];
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	68fe      	ldr	r6, [r7, #12]
 8005b02:	466b      	mov	r3, sp
 8005b04:	469a      	mov	sl, r3
 8005b06:	1e43      	subs	r3, r0, #1
 8005b08:	61bb      	str	r3, [r7, #24]
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	f04f 0200 	mov.w	r2, #0
 8005b12:	f04f 0300 	mov.w	r3, #0
 8005b16:	f04f 0400 	mov.w	r4, #0
 8005b1a:	0154      	lsls	r4, r2, #5
 8005b1c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005b20:	014b      	lsls	r3, r1, #5
 8005b22:	4603      	mov	r3, r0
 8005b24:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8005b28:	1e73      	subs	r3, r6, #1
 8005b2a:	617b      	str	r3, [r7, #20]
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	4619      	mov	r1, r3
 8005b30:	f04f 0200 	mov.w	r2, #0
 8005b34:	4633      	mov	r3, r6
 8005b36:	f04f 0400 	mov.w	r4, #0
 8005b3a:	fb03 fe02 	mul.w	lr, r3, r2
 8005b3e:	fb01 fc04 	mul.w	ip, r1, r4
 8005b42:	44f4      	add	ip, lr
 8005b44:	fba1 3403 	umull	r3, r4, r1, r3
 8005b48:	eb0c 0204 	add.w	r2, ip, r4
 8005b4c:	4614      	mov	r4, r2
 8005b4e:	f04f 0100 	mov.w	r1, #0
 8005b52:	f04f 0200 	mov.w	r2, #0
 8005b56:	0162      	lsls	r2, r4, #5
 8005b58:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8005b5c:	0159      	lsls	r1, r3, #5
 8005b5e:	4603      	mov	r3, r0
 8005b60:	4619      	mov	r1, r3
 8005b62:	f04f 0200 	mov.w	r2, #0
 8005b66:	4633      	mov	r3, r6
 8005b68:	f04f 0400 	mov.w	r4, #0
 8005b6c:	fb03 fe02 	mul.w	lr, r3, r2
 8005b70:	fb01 fc04 	mul.w	ip, r1, r4
 8005b74:	44f4      	add	ip, lr
 8005b76:	fba1 3403 	umull	r3, r4, r1, r3
 8005b7a:	eb0c 0204 	add.w	r2, ip, r4
 8005b7e:	4614      	mov	r4, r2
 8005b80:	f04f 0100 	mov.w	r1, #0
 8005b84:	f04f 0200 	mov.w	r2, #0
 8005b88:	0162      	lsls	r2, r4, #5
 8005b8a:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8005b8e:	0159      	lsls	r1, r3, #5
 8005b90:	4603      	mov	r3, r0
 8005b92:	4632      	mov	r2, r6
 8005b94:	fb02 f303 	mul.w	r3, r2, r3
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	3303      	adds	r3, #3
 8005b9c:	3307      	adds	r3, #7
 8005b9e:	08db      	lsrs	r3, r3, #3
 8005ba0:	00db      	lsls	r3, r3, #3
 8005ba2:	ebad 0d03 	sub.w	sp, sp, r3
 8005ba6:	466b      	mov	r3, sp
 8005ba8:	3303      	adds	r3, #3
 8005baa:	089b      	lsrs	r3, r3, #2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	613b      	str	r3, [r7, #16]
    cholesky(n, A_dash, L);
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f7ff fe10 	bl	80057dc <cholesky>

    /* compute lower triangular inverse in-place */
    lower_triangular_inverse(n, &L[0][0]);
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	f7ff fd79 	bl	80056b8 <lower_triangular_inverse>

    /* compute matrix inverse A_inv = L_T^(-1) * L^(-1) */
    memset(inverse, 0, n * n * sizeof(inverse[0][0]));
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	fb02 f303 	mul.w	r3, r2, r3
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	461a      	mov	r2, r3
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f00a fcee 	bl	80105b6 <memset>
    for(int i = 0; i < n; i++){
 8005bda:	2300      	movs	r3, #0
 8005bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bde:	e04e      	b.n	8005c7e <cholesky_inverse+0x2e6>
        for(int j = 0; j < n; j++){
 8005be0:	2300      	movs	r3, #0
 8005be2:	633b      	str	r3, [r7, #48]	; 0x30
 8005be4:	e044      	b.n	8005c70 <cholesky_inverse+0x2d8>
            for(int k = max(i, j); k < n; k++){
 8005be6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bea:	4293      	cmp	r3, r2
 8005bec:	bfb8      	it	lt
 8005bee:	4613      	movlt	r3, r2
 8005bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8005bf2:	e036      	b.n	8005c62 <cholesky_inverse+0x2ca>
                inverse[i][j] +=  L[k][i] * L[k][j];
 8005bf4:	462a      	mov	r2, r5
 8005bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf8:	fb03 f302 	mul.w	r3, r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	687a      	ldr	r2, [r7, #4]
 8005c00:	441a      	add	r2, r3
 8005c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	4413      	add	r3, r2
 8005c08:	ed93 7a00 	vldr	s14, [r3]
 8005c0c:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005c14:	fb01 f103 	mul.w	r1, r1, r3
 8005c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1a:	440b      	add	r3, r1
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	edd3 6a00 	vldr	s13, [r3]
 8005c24:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005c2c:	fb01 f103 	mul.w	r1, r1, r3
 8005c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c32:	440b      	add	r3, r1
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	edd3 7a00 	vldr	s15, [r3]
 8005c3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c40:	462a      	mov	r2, r5
 8005c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c44:	fb03 f302 	mul.w	r3, r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	441a      	add	r2, r3
 8005c4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4413      	add	r3, r2
 8005c58:	edc3 7a00 	vstr	s15, [r3]
            for(int k = max(i, j); k < n; k++){
 8005c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c5e:	3301      	adds	r3, #1
 8005c60:	637b      	str	r3, [r7, #52]	; 0x34
 8005c62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	dbc4      	blt.n	8005bf4 <cholesky_inverse+0x25c>
        for(int j = 0; j < n; j++){
 8005c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	633b      	str	r3, [r7, #48]	; 0x30
 8005c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	dbb6      	blt.n	8005be6 <cholesky_inverse+0x24e>
    for(int i = 0; i < n; i++){
 8005c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	dbac      	blt.n	8005be0 <cholesky_inverse+0x248>
 8005c86:	46d5      	mov	sp, sl
 8005c88:	46cd      	mov	sp, r9
            }
        }
    }
}
 8005c8a:	bf00      	nop
 8005c8c:	3740      	adds	r7, #64	; 0x40
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005c94 <init_env>:
#include "../Inc/env.h"

void init_env(env_t *env) {
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
	/* init constants */
	calibrate_env(env, PRESSURE_REFERENCE, TEMPERATURE_REFERENCE);
 8005c9c:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
 8005ca0:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8005cbc <init_env+0x28>
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 f80b 	bl	8005cc0 <calibrate_env>
	update_env(env, TEMPERATURE_REFERENCE);
 8005caa:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 f84e 	bl	8005d50 <update_env>
}
 8005cb4:	bf00      	nop
 8005cb6:	3708      	adds	r7, #8
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	47c5e680 	.word	0x47c5e680

08005cc0 <calibrate_env>:

void calibrate_env(env_t *env, float p_g, float T_g) {
 8005cc0:	b590      	push	{r4, r7, lr}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	ed87 0a02 	vstr	s0, [r7, #8]
 8005ccc:	edc7 0a01 	vstr	s1, [r7, #4]
	env->T_g = T_g + T_0; // input is temperature in °C
 8005cd0:	edd7 7a01 	vldr	s15, [r7, #4]
 8005cd4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8005d40 <calibrate_env+0x80>
 8005cd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	edc3 7a01 	vstr	s15, [r3, #4]
	env->p_g = p_g; //
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	601a      	str	r2, [r3, #0]
	env->rho_g = RHO_REFERENCE * ((env->p_g / PRESSURE_REFERENCE) * ((TEMPERATURE_REFERENCE+T_0) / env->T_g));
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	edd3 7a00 	vldr	s15, [r3]
 8005cee:	eddf 6a15 	vldr	s13, [pc, #84]	; 8005d44 <calibrate_env+0x84>
 8005cf2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	edd3 6a01 	vldr	s13, [r3, #4]
 8005cfc:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8005d48 <calibrate_env+0x88>
 8005d00:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005d04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d08:	ee17 0a90 	vmov	r0, s15
 8005d0c:	f7fa fc1c 	bl	8000548 <__aeabi_f2d>
 8005d10:	a309      	add	r3, pc, #36	; (adr r3, 8005d38 <calibrate_env+0x78>)
 8005d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d16:	f7fa fc6f 	bl	80005f8 <__aeabi_dmul>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	460c      	mov	r4, r1
 8005d1e:	4618      	mov	r0, r3
 8005d20:	4621      	mov	r1, r4
 8005d22:	f7fa ff61 	bl	8000be8 <__aeabi_d2f>
 8005d26:	4602      	mov	r2, r0
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	609a      	str	r2, [r3, #8]
}
 8005d2c:	bf00      	nop
 8005d2e:	3714      	adds	r7, #20
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd90      	pop	{r4, r7, pc}
 8005d34:	f3af 8000 	nop.w
 8005d38:	9999999a 	.word	0x9999999a
 8005d3c:	3ff39999 	.word	0x3ff39999
 8005d40:	43889333 	.word	0x43889333
 8005d44:	47c5e680 	.word	0x47c5e680
 8005d48:	43901333 	.word	0x43901333
 8005d4c:	00000000 	.word	0x00000000

08005d50 <update_env>:

void update_env(env_t *env, float T) {
 8005d50:	b590      	push	{r4, r7, lr}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	ed87 0a00 	vstr	s0, [r7]
	env->T = T + T_0; // input is temperature in °C and property is temperature in °K
 8005d5c:	edd7 7a00 	vldr	s15, [r7]
 8005d60:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8005db8 <update_env+0x68>
 8005d64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	edc3 7a03 	vstr	s15, [r3, #12]
	env->C = powf(GAMMA * R_0 * env->T, 0.5);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7fa fbe8 	bl	8000548 <__aeabi_f2d>
 8005d78:	a30d      	add	r3, pc, #52	; (adr r3, 8005db0 <update_env+0x60>)
 8005d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7e:	f7fa fc3b 	bl	80005f8 <__aeabi_dmul>
 8005d82:	4603      	mov	r3, r0
 8005d84:	460c      	mov	r4, r1
 8005d86:	4618      	mov	r0, r3
 8005d88:	4621      	mov	r1, r4
 8005d8a:	f7fa ff2d 	bl	8000be8 <__aeabi_d2f>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8005d94:	ee00 3a10 	vmov	s0, r3
 8005d98:	f00d fb1e 	bl	80133d8 <powf>
 8005d9c:	eef0 7a40 	vmov.f32	s15, s0
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8005da6:	bf00      	nop
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd90      	pop	{r4, r7, pc}
 8005dae:	bf00      	nop
 8005db0:	d067f4fc 	.word	0xd067f4fc
 8005db4:	40791e18 	.word	0x40791e18
 8005db8:	43889333 	.word	0x43889333

08005dbc <mach_number>:

float mach_number(env_t *env, float V_x) {
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	ed87 0a00 	vstr	s0, [r7]
	float mach_number = fabsf(V_x) / env->C;
 8005dc8:	edd7 7a00 	vldr	s15, [r7]
 8005dcc:	eef0 6ae7 	vabs.f32	s13, s15
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	ed93 7a04 	vldr	s14, [r3, #16]
 8005dd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dda:	edc7 7a03 	vstr	s15, [r7, #12]
	return mach_number;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	ee07 3a90 	vmov	s15, r3
}
 8005de4:	eeb0 0a67 	vmov.f32	s0, s15
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	0000      	movs	r0, r0
 8005df4:	0000      	movs	r0, r0
	...

08005df8 <pressure2altitudeAGL>:

void pressure2altitudeAGL(env_t *env, int n, float p[n], bool p_active[n], float h[n]) {
 8005df8:	b5b0      	push	{r4, r5, r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
 8005e04:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 8005e06:	2300      	movs	r3, #0
 8005e08:	617b      	str	r3, [r7, #20]
 8005e0a:	e043      	b.n	8005e94 <pressure2altitudeAGL+0x9c>
		if (p_active[i]) {
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	683a      	ldr	r2, [r7, #0]
 8005e10:	4413      	add	r3, r2
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d03a      	beq.n	8005e8e <pressure2altitudeAGL+0x96>
			/* original implementation */
			h[i] = env->T_g / T_GRAD * (1 - powf(p[i] / env->p_g, R_0 * T_GRAD / GRAVITATION));
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7fa fb93 	bl	8000548 <__aeabi_f2d>
 8005e22:	a322      	add	r3, pc, #136	; (adr r3, 8005eac <pressure2altitudeAGL+0xb4>)
 8005e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e28:	f7fa fd10 	bl	800084c <__aeabi_ddiv>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	460c      	mov	r4, r1
 8005e30:	4625      	mov	r5, r4
 8005e32:	461c      	mov	r4, r3
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	ed93 7a00 	vldr	s14, [r3]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	edd3 7a00 	vldr	s15, [r3]
 8005e46:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005e4a:	eddf 0a17 	vldr	s1, [pc, #92]	; 8005ea8 <pressure2altitudeAGL+0xb0>
 8005e4e:	eeb0 0a66 	vmov.f32	s0, s13
 8005e52:	f00d fac1 	bl	80133d8 <powf>
 8005e56:	eeb0 7a40 	vmov.f32	s14, s0
 8005e5a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005e5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e62:	ee17 0a90 	vmov	r0, s15
 8005e66:	f7fa fb6f 	bl	8000548 <__aeabi_f2d>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	460b      	mov	r3, r1
 8005e6e:	4620      	mov	r0, r4
 8005e70:	4629      	mov	r1, r5
 8005e72:	f7fa fbc1 	bl	80005f8 <__aeabi_dmul>
 8005e76:	4603      	mov	r3, r0
 8005e78:	460c      	mov	r4, r1
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	4621      	mov	r1, r4
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e84:	18d4      	adds	r4, r2, r3
 8005e86:	f7fa feaf 	bl	8000be8 <__aeabi_d2f>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < n; i++) {
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	3301      	adds	r3, #1
 8005e92:	617b      	str	r3, [r7, #20]
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	dbb7      	blt.n	8005e0c <pressure2altitudeAGL+0x14>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// h[i] = env->T_g / T_GRAD * (1 - expf(logf(p[i] / env->p_g) * R_0 * env->T_grad / GRAVITATION);
		}
	}
}
 8005e9c:	bf00      	nop
 8005e9e:	3718      	adds	r7, #24
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bdb0      	pop	{r4, r5, r7, pc}
 8005ea4:	f3af 8000 	nop.w
 8005ea8:	3e42c42c 	.word	0x3e42c42c
 8005eac:	76c8b439 	.word	0x76c8b439
 8005eb0:	3f7a9fbe 	.word	0x3f7a9fbe
 8005eb4:	00000000 	.word	0x00000000

08005eb8 <altitudeAGL2pressure>:

void altitudeAGL2pressure(env_t *env, int n, float h[n], bool h_active[n], float p[n]) {
 8005eb8:	b5b0      	push	{r4, r5, r7, lr}
 8005eba:	ed2d 8b02 	vpush	{d8}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
 8005ec8:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 8005eca:	2300      	movs	r3, #0
 8005ecc:	617b      	str	r3, [r7, #20]
 8005ece:	e047      	b.n	8005f60 <altitudeAGL2pressure+0xa8>
		if (h_active[i]) {
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	683a      	ldr	r2, [r7, #0]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d03e      	beq.n	8005f5a <altitudeAGL2pressure+0xa2>
			/* original implementation */
			p[i] = env->p_g * powf((1 - T_GRAD * h[i] / env->T_g), GRAVITATION / (R_0 * T_GRAD));
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	ed93 8a00 	vldr	s16, [r3]
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	4413      	add	r3, r2
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7fa fb2b 	bl	8000548 <__aeabi_f2d>
 8005ef2:	a323      	add	r3, pc, #140	; (adr r3, 8005f80 <altitudeAGL2pressure+0xc8>)
 8005ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef8:	f7fa fb7e 	bl	80005f8 <__aeabi_dmul>
 8005efc:	4603      	mov	r3, r0
 8005efe:	460c      	mov	r4, r1
 8005f00:	4625      	mov	r5, r4
 8005f02:	461c      	mov	r4, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f7fa fb1d 	bl	8000548 <__aeabi_f2d>
 8005f0e:	4602      	mov	r2, r0
 8005f10:	460b      	mov	r3, r1
 8005f12:	4620      	mov	r0, r4
 8005f14:	4629      	mov	r1, r5
 8005f16:	f7fa fc99 	bl	800084c <__aeabi_ddiv>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	460c      	mov	r4, r1
 8005f1e:	461a      	mov	r2, r3
 8005f20:	4623      	mov	r3, r4
 8005f22:	f04f 0000 	mov.w	r0, #0
 8005f26:	4914      	ldr	r1, [pc, #80]	; (8005f78 <altitudeAGL2pressure+0xc0>)
 8005f28:	f7fa f9ae 	bl	8000288 <__aeabi_dsub>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	460c      	mov	r4, r1
 8005f30:	4618      	mov	r0, r3
 8005f32:	4621      	mov	r1, r4
 8005f34:	f7fa fe58 	bl	8000be8 <__aeabi_d2f>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	eddf 0a10 	vldr	s1, [pc, #64]	; 8005f7c <altitudeAGL2pressure+0xc4>
 8005f3e:	ee00 3a10 	vmov	s0, r3
 8005f42:	f00d fa49 	bl	80133d8 <powf>
 8005f46:	eef0 7a40 	vmov.f32	s15, s0
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f50:	4413      	add	r3, r2
 8005f52:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005f56:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < n; i++) {
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	617b      	str	r3, [r7, #20]
 8005f60:	697a      	ldr	r2, [r7, #20]
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	dbb3      	blt.n	8005ed0 <altitudeAGL2pressure+0x18>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// p[i] = env->p_g * expf(logf(1 - env->T_grad * h[i] / env->T_g) * GRAVITATION / (R_0 * env->T_grad));
		}
	}
}
 8005f68:	bf00      	nop
 8005f6a:	3718      	adds	r7, #24
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	ecbd 8b02 	vpop	{d8}
 8005f72:	bdb0      	pop	{r4, r5, r7, pc}
 8005f74:	f3af 8000 	nop.w
 8005f78:	3ff00000 	.word	0x3ff00000
 8005f7c:	40a83e1f 	.word	0x40a83e1f
 8005f80:	76c8b439 	.word	0x76c8b439
 8005f84:	3f7a9fbe 	.word	0x3f7a9fbe

08005f88 <altitude_gradient>:

float altitude_gradient(env_t *env, float p) {
 8005f88:	b5b0      	push	{r4, r5, r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	ed87 0a00 	vstr	s0, [r7]
	/* computes the altitude gradient per infitesimal change in pressure (dh/dp) at a specified pressure */
	/* original implementation */
	float h_grad = -R_0 * env->T_g / (GRAVITATION * env->p_g) * powf(p / env->p_g, R_0 * T_GRAD / GRAVITATION - 1);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7fa fad5 	bl	8000548 <__aeabi_f2d>
 8005f9e:	a323      	add	r3, pc, #140	; (adr r3, 800602c <altitude_gradient+0xa4>)
 8005fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa4:	f7fa fb28 	bl	80005f8 <__aeabi_dmul>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	460c      	mov	r4, r1
 8005fac:	4625      	mov	r5, r4
 8005fae:	461c      	mov	r4, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f7fa fac7 	bl	8000548 <__aeabi_f2d>
 8005fba:	a31e      	add	r3, pc, #120	; (adr r3, 8006034 <altitude_gradient+0xac>)
 8005fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc0:	f7fa fb1a 	bl	80005f8 <__aeabi_dmul>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	4620      	mov	r0, r4
 8005fca:	4629      	mov	r1, r5
 8005fcc:	f7fa fc3e 	bl	800084c <__aeabi_ddiv>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	460c      	mov	r4, r1
 8005fd4:	4625      	mov	r5, r4
 8005fd6:	461c      	mov	r4, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	edd3 7a00 	vldr	s15, [r3]
 8005fde:	ed97 7a00 	vldr	s14, [r7]
 8005fe2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005fe6:	eddf 0a10 	vldr	s1, [pc, #64]	; 8006028 <altitude_gradient+0xa0>
 8005fea:	eeb0 0a66 	vmov.f32	s0, s13
 8005fee:	f00d f9f3 	bl	80133d8 <powf>
 8005ff2:	ee10 3a10 	vmov	r3, s0
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7fa faa6 	bl	8000548 <__aeabi_f2d>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	460b      	mov	r3, r1
 8006000:	4620      	mov	r0, r4
 8006002:	4629      	mov	r1, r5
 8006004:	f7fa faf8 	bl	80005f8 <__aeabi_dmul>
 8006008:	4603      	mov	r3, r0
 800600a:	460c      	mov	r4, r1
 800600c:	4618      	mov	r0, r3
 800600e:	4621      	mov	r1, r4
 8006010:	f7fa fdea 	bl	8000be8 <__aeabi_d2f>
 8006014:	4603      	mov	r3, r0
 8006016:	60fb      	str	r3, [r7, #12]
	/* adapted implementation which can possibly speed up calculation and should have the same results */
	// float h_grad = - R_0 * env->T_g / (GRAVITATION * env->p_g) * expf(logf(p / env->p_g) * (R_0 * env->T_grad / GRAVITATION - 1));
	return h_grad;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	ee07 3a90 	vmov	s15, r3
}
 800601e:	eeb0 0a67 	vmov.f32	s0, s15
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bdb0      	pop	{r4, r5, r7, pc}
 8006028:	bf4f4ef5 	.word	0xbf4f4ef5
 800602c:	2725aefd 	.word	0x2725aefd
 8006030:	c071f0ed 	.word	0xc071f0ed
 8006034:	51eb851f 	.word	0x51eb851f
 8006038:	40239eb8 	.word	0x40239eb8
 800603c:	00000000 	.word	0x00000000

08006040 <detect_flight_phase>:
#include "../Inc/flight_phase_detection.h"

void detect_flight_phase(timestamp_t t, flight_phase_detection_t *flight_phase_detection, state_est_data_t *state_est_data)
{   
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
    /* timestamp_t t needs to be the tick time in [ms] */

    /* determine state transition events */
    switch (flight_phase_detection->flight_phase) {
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	3b01      	subs	r3, #1
 8006052:	2b09      	cmp	r3, #9
 8006054:	f200 81d1 	bhi.w	80063fa <detect_flight_phase+0x3ba>
 8006058:	a201      	add	r2, pc, #4	; (adr r2, 8006060 <detect_flight_phase+0x20>)
 800605a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605e:	bf00      	nop
 8006060:	08006089 	.word	0x08006089
 8006064:	080063fb 	.word	0x080063fb
 8006068:	08006133 	.word	0x08006133
 800606c:	08006185 	.word	0x08006185
 8006070:	080063fb 	.word	0x080063fb
 8006074:	080063fb 	.word	0x080063fb
 8006078:	080061d7 	.word	0x080061d7
 800607c:	08006229 	.word	0x08006229
 8006080:	0800630d 	.word	0x0800630d
 8006084:	0800628b 	.word	0x0800628b
        case IDLE:
            if (((float)(state_est_data->acceleration_rocket[0])) / 1000 > FPD_LIFTOFF_ACC_THRESH) {
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	699b      	ldr	r3, [r3, #24]
 800608c:	ee07 3a90 	vmov	s15, r3
 8006090:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006094:	eddf 6abf 	vldr	s13, [pc, #764]	; 8006394 <detect_flight_phase+0x354>
 8006098:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800609c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80060a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060a8:	dd18      	ble.n	80060dc <detect_flight_phase+0x9c>
                flight_phase_detection->safety_counter[0] += 1;
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	3301      	adds	r3, #1
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	b25a      	sxtb	r2, r3
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->safety_counter[0] >= FPD_SAFETY_COUNTER_THRESH) {
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80060c2:	2b03      	cmp	r3, #3
 80060c4:	f340 819b 	ble.w	80063fe <detect_flight_phase+0x3be>
                    flight_phase_detection->flight_phase = THRUSTING;
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	2203      	movs	r2, #3
 80060cc:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->safety_counter[0] = 0;
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	2200      	movs	r2, #0
 80060d2:	721a      	strb	r2, [r3, #8]
                    flight_phase_detection->safety_counter[1] = 0;
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	2200      	movs	r2, #0
 80060d8:	725a      	strb	r2, [r3, #9]
                    flight_phase_detection->flight_phase = THRUSTING;
                    flight_phase_detection->safety_counter[0] = 0;
                    flight_phase_detection->safety_counter[1] = 0;
                }
            }
        break;
 80060da:	e190      	b.n	80063fe <detect_flight_phase+0x3be>
            else if (((float)(state_est_data->position_world[2])) / 1000 > FPD_LIFTOFF_ALT_THRESH) {
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	ee07 3a90 	vmov	s15, r3
 80060e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80060e8:	eddf 6aaa 	vldr	s13, [pc, #680]	; 8006394 <detect_flight_phase+0x354>
 80060ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80060f0:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8006388 <detect_flight_phase+0x348>
 80060f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060fc:	dc00      	bgt.n	8006100 <detect_flight_phase+0xc0>
        break;
 80060fe:	e17e      	b.n	80063fe <detect_flight_phase+0x3be>
                flight_phase_detection->safety_counter[1] += 1;
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8006106:	b2db      	uxtb	r3, r3
 8006108:	3301      	adds	r3, #1
 800610a:	b2db      	uxtb	r3, r3
 800610c:	b25a      	sxtb	r2, r3
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	725a      	strb	r2, [r3, #9]
                if (flight_phase_detection->safety_counter[1] >= FPD_SAFETY_COUNTER_THRESH) {
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8006118:	2b03      	cmp	r3, #3
 800611a:	f340 8170 	ble.w	80063fe <detect_flight_phase+0x3be>
                    flight_phase_detection->flight_phase = THRUSTING;
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	2203      	movs	r2, #3
 8006122:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->safety_counter[0] = 0;
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	2200      	movs	r2, #0
 8006128:	721a      	strb	r2, [r3, #8]
                    flight_phase_detection->safety_counter[1] = 0;
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	2200      	movs	r2, #0
 800612e:	725a      	strb	r2, [r3, #9]
        break;
 8006130:	e165      	b.n	80063fe <detect_flight_phase+0x3be>

        case THRUSTING:
            if (((float)(state_est_data->acceleration_rocket[0])) / 1000 < 0) {
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	ee07 3a90 	vmov	s15, r3
 800613a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800613e:	eddf 6a95 	vldr	s13, [pc, #596]	; 8006394 <detect_flight_phase+0x354>
 8006142:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006146:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800614a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800614e:	d400      	bmi.n	8006152 <detect_flight_phase+0x112>
                    flight_phase_detection->flight_phase = COASTING;
                    flight_phase_detection->safety_counter[0] = 0;
                    flight_phase_detection->safety_counter[1] = 0;
                }
            }
        break;
 8006150:	e157      	b.n	8006402 <detect_flight_phase+0x3c2>
                flight_phase_detection->safety_counter[0] += 1;
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006158:	b2db      	uxtb	r3, r3
 800615a:	3301      	adds	r3, #1
 800615c:	b2db      	uxtb	r3, r3
 800615e:	b25a      	sxtb	r2, r3
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->safety_counter[0] >= FPD_SAFETY_COUNTER_THRESH) {
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800616a:	2b03      	cmp	r3, #3
 800616c:	f340 8149 	ble.w	8006402 <detect_flight_phase+0x3c2>
                    flight_phase_detection->flight_phase = COASTING;
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	2204      	movs	r2, #4
 8006174:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->safety_counter[0] = 0;
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	2200      	movs	r2, #0
 800617a:	721a      	strb	r2, [r3, #8]
                    flight_phase_detection->safety_counter[1] = 0;
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2200      	movs	r2, #0
 8006180:	725a      	strb	r2, [r3, #9]
        break;
 8006182:	e13e      	b.n	8006402 <detect_flight_phase+0x3c2>
                        flight_phase_detection->safety_counter[0] = 0;
                        flight_phase_detection->safety_counter[1] = 0;
                    }
                }
            #else
                if (((float)(state_est_data->velocity_world[2])) / 1000 < 0) {
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006188:	ee07 3a90 	vmov	s15, r3
 800618c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006190:	eddf 6a80 	vldr	s13, [pc, #512]	; 8006394 <detect_flight_phase+0x354>
 8006194:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006198:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800619c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061a0:	d400      	bmi.n	80061a4 <detect_flight_phase+0x164>
                        flight_phase_detection->safety_counter[0] = 0;
                        flight_phase_detection->safety_counter[1] = 0;
                    }
                }
            #endif
        break;
 80061a2:	e130      	b.n	8006406 <detect_flight_phase+0x3c6>
                    flight_phase_detection->safety_counter[0] += 1;
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	3301      	adds	r3, #1
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	b25a      	sxtb	r2, r3
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	721a      	strb	r2, [r3, #8]
                    if (flight_phase_detection->safety_counter[0] >= FPD_SAFETY_COUNTER_THRESH) {
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80061bc:	2b03      	cmp	r3, #3
 80061be:	f340 8122 	ble.w	8006406 <detect_flight_phase+0x3c6>
                        flight_phase_detection->flight_phase = DROGUE_DESCENT;
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	2208      	movs	r2, #8
 80061c6:	701a      	strb	r2, [r3, #0]
                        flight_phase_detection->safety_counter[0] = 0;
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	2200      	movs	r2, #0
 80061cc:	721a      	strb	r2, [r3, #8]
                        flight_phase_detection->safety_counter[1] = 0;
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	2200      	movs	r2, #0
 80061d2:	725a      	strb	r2, [r3, #9]
        break;
 80061d4:	e117      	b.n	8006406 <detect_flight_phase+0x3c6>
                }
            #endif
        break;

        case APOGEE_APPROACH:
            if (((float)(state_est_data->velocity_world[2])) / 1000 < 0) {
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061da:	ee07 3a90 	vmov	s15, r3
 80061de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061e2:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8006394 <detect_flight_phase+0x354>
 80061e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80061ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80061ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061f2:	d400      	bmi.n	80061f6 <detect_flight_phase+0x1b6>
                    flight_phase_detection->flight_phase = DROGUE_DESCENT;
                    flight_phase_detection->safety_counter[0] = 0;
                    flight_phase_detection->safety_counter[1] = 0;
                }
            }
        break;
 80061f4:	e109      	b.n	800640a <detect_flight_phase+0x3ca>
                flight_phase_detection->safety_counter[0] += 1;
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	3301      	adds	r3, #1
 8006200:	b2db      	uxtb	r3, r3
 8006202:	b25a      	sxtb	r2, r3
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->safety_counter[0] >= FPD_SAFETY_COUNTER_THRESH) {
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800620e:	2b03      	cmp	r3, #3
 8006210:	f340 80fb 	ble.w	800640a <detect_flight_phase+0x3ca>
                    flight_phase_detection->flight_phase = DROGUE_DESCENT;
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	2208      	movs	r2, #8
 8006218:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->safety_counter[0] = 0;
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	2200      	movs	r2, #0
 800621e:	721a      	strb	r2, [r3, #8]
                    flight_phase_detection->safety_counter[1] = 0;
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	2200      	movs	r2, #0
 8006224:	725a      	strb	r2, [r3, #9]
        break;
 8006226:	e0f0      	b.n	800640a <detect_flight_phase+0x3ca>

        case DROGUE_DESCENT:
            if (((float)(state_est_data->altitude_raw) / 1000) < FPD_MAIN_DESCENT_ALT_THRESH && state_est_data->altitude_raw_active == true) {
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622c:	ee07 3a90 	vmov	s15, r3
 8006230:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006234:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006394 <detect_flight_phase+0x354>
 8006238:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800623c:	ed9f 7a53 	vldr	s14, [pc, #332]	; 800638c <detect_flight_phase+0x34c>
 8006240:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006248:	d400      	bmi.n	800624c <detect_flight_phase+0x20c>
                    flight_phase_detection->safety_counter[0] = 0;
                    flight_phase_detection->safety_counter[1] = 0;
                }
            }
            #endif
        break;
 800624a:	e0e0      	b.n	800640e <detect_flight_phase+0x3ce>
            if (((float)(state_est_data->altitude_raw) / 1000) < FPD_MAIN_DESCENT_ALT_THRESH && state_est_data->altitude_raw_active == true) {
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006252:	2b00      	cmp	r3, #0
 8006254:	f000 80db 	beq.w	800640e <detect_flight_phase+0x3ce>
                flight_phase_detection->safety_counter[0] += 1;
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800625e:	b2db      	uxtb	r3, r3
 8006260:	3301      	adds	r3, #1
 8006262:	b2db      	uxtb	r3, r3
 8006264:	b25a      	sxtb	r2, r3
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->safety_counter[0] >= FPD_SAFETY_COUNTER_THRESH) {
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006270:	2b03      	cmp	r3, #3
 8006272:	f340 80cc 	ble.w	800640e <detect_flight_phase+0x3ce>
                    flight_phase_detection->flight_phase = MAIN_DESCENT;
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	220a      	movs	r2, #10
 800627a:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->safety_counter[0] = 0;
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	2200      	movs	r2, #0
 8006280:	721a      	strb	r2, [r3, #8]
                    flight_phase_detection->safety_counter[1] = 0;
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	2200      	movs	r2, #0
 8006286:	725a      	strb	r2, [r3, #9]
        break;
 8006288:	e0c1      	b.n	800640e <detect_flight_phase+0x3ce>
        
        case MAIN_DESCENT:
            /* we assume a touchdown event when the absolute value of the altitude is smaller than 400m 
               and the absolute velocity of the rocket is smaller than 2 m/s */
            if (fabs(((float)(state_est_data->velocity_rocket[0])) / 1000) < FPD_TOUCHDOWN_VEL_THRESH 
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	ee07 3a90 	vmov	s15, r3
 8006292:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006296:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8006394 <detect_flight_phase+0x354>
 800629a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800629e:	eef0 7ae7 	vabs.f32	s15, s15
 80062a2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80062a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ae:	d400      	bmi.n	80062b2 <detect_flight_phase+0x272>
                    flight_phase_detection->safety_counter[0] = 0;
                    flight_phase_detection->safety_counter[1] = 0;
                }
            }
            #endif
        break;
 80062b0:	e0af      	b.n	8006412 <detect_flight_phase+0x3d2>
                && fabs(((float)(state_est_data->position_world[2])) / 1000) < FPD_TOUCHDOWN_ALT_THRESH) {
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	ee07 3a90 	vmov	s15, r3
 80062ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80062be:	eddf 6a35 	vldr	s13, [pc, #212]	; 8006394 <detect_flight_phase+0x354>
 80062c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80062c6:	eef0 7ae7 	vabs.f32	s15, s15
 80062ca:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8006390 <detect_flight_phase+0x350>
 80062ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062d6:	d400      	bmi.n	80062da <detect_flight_phase+0x29a>
        break;
 80062d8:	e09b      	b.n	8006412 <detect_flight_phase+0x3d2>
                flight_phase_detection->safety_counter[0] += 1;
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	3301      	adds	r3, #1
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	b25a      	sxtb	r2, r3
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->safety_counter[0] >= FPD_TOUCHDOWN_SAFETY_COUNTER_THRESH) {
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80062f2:	2b13      	cmp	r3, #19
 80062f4:	f340 808d 	ble.w	8006412 <detect_flight_phase+0x3d2>
                    flight_phase_detection->flight_phase = TOUCHDOWN;
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	220b      	movs	r2, #11
 80062fc:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->safety_counter[0] = 0;
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	2200      	movs	r2, #0
 8006302:	721a      	strb	r2, [r3, #8]
                    flight_phase_detection->safety_counter[1] = 0;
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	2200      	movs	r2, #0
 8006308:	725a      	strb	r2, [r3, #9]
        break;
 800630a:	e082      	b.n	8006412 <detect_flight_phase+0x3d2>

        case BALLISTIC_DESCENT:
            /* we assume a touchdown event when the absolute value of the altitude is smaller than 400m 
               and the absolute velocity of the rocket is smaller than 2 m/s */
            if (fabs(((float)(state_est_data->velocity_rocket[0])) / 1000) < FPD_TOUCHDOWN_VEL_THRESH 
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	ee07 3a90 	vmov	s15, r3
 8006314:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006318:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8006394 <detect_flight_phase+0x354>
 800631c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006320:	eef0 7ae7 	vabs.f32	s15, s15
 8006324:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006328:	eef4 7ac7 	vcmpe.f32	s15, s14
 800632c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006330:	d536      	bpl.n	80063a0 <detect_flight_phase+0x360>
                && fabs(((float)(state_est_data->position_world[2])) / 1000) < FPD_TOUCHDOWN_ALT_THRESH) {
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	ee07 3a90 	vmov	s15, r3
 800633a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800633e:	eddf 6a15 	vldr	s13, [pc, #84]	; 8006394 <detect_flight_phase+0x354>
 8006342:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006346:	eef0 7ae7 	vabs.f32	s15, s15
 800634a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8006390 <detect_flight_phase+0x350>
 800634e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006356:	d523      	bpl.n	80063a0 <detect_flight_phase+0x360>
                flight_phase_detection->safety_counter[0] += 1;
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800635e:	b2db      	uxtb	r3, r3
 8006360:	3301      	adds	r3, #1
 8006362:	b2db      	uxtb	r3, r3
 8006364:	b25a      	sxtb	r2, r3
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->safety_counter[0] >= FPD_TOUCHDOWN_SAFETY_COUNTER_THRESH) {
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006370:	2b13      	cmp	r3, #19
 8006372:	dd41      	ble.n	80063f8 <detect_flight_phase+0x3b8>
                    flight_phase_detection->flight_phase = TOUCHDOWN;
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	220b      	movs	r2, #11
 8006378:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->safety_counter[0] = 0;
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	2200      	movs	r2, #0
 800637e:	721a      	strb	r2, [r3, #8]
                    flight_phase_detection->safety_counter[1] = 0;
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	2200      	movs	r2, #0
 8006384:	725a      	strb	r2, [r3, #9]
                if (flight_phase_detection->safety_counter[0] >= FPD_TOUCHDOWN_SAFETY_COUNTER_THRESH) {
 8006386:	e037      	b.n	80063f8 <detect_flight_phase+0x3b8>
 8006388:	43160000 	.word	0x43160000
 800638c:	43c80000 	.word	0x43c80000
 8006390:	43480000 	.word	0x43480000
 8006394:	447a0000 	.word	0x447a0000
 8006398:	42700000 	.word	0x42700000
 800639c:	49742400 	.word	0x49742400
                }
            }
            /* we assume a normal descent with parachute when the absolute velocity of the rocket in vertical direction is smaller than 40 m/s */
            else if (fabs(((float)(state_est_data->velocity_world[2])) / 1000) < FPD_BALLISTIC_VEL_THRESH_LOW) {
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a4:	ee07 3a90 	vmov	s15, r3
 80063a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80063ac:	ed5f 6a07 	vldr	s13, [pc, #-28]	; 8006394 <detect_flight_phase+0x354>
 80063b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80063b4:	eef0 7ae7 	vabs.f32	s15, s15
 80063b8:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 8006398 <detect_flight_phase+0x358>
 80063bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063c4:	d400      	bmi.n	80063c8 <detect_flight_phase+0x388>
                    flight_phase_detection->flight_phase = DROGUE_DESCENT;
                    flight_phase_detection->safety_counter[0] = 0;
                    flight_phase_detection->safety_counter[1] = 0;
                }
            }
        break;
 80063c6:	e026      	b.n	8006416 <detect_flight_phase+0x3d6>
                flight_phase_detection->safety_counter[1] += 1;
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	3301      	adds	r3, #1
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	b25a      	sxtb	r2, r3
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	725a      	strb	r2, [r3, #9]
                if (flight_phase_detection->safety_counter[1] >= FPD_SAFETY_COUNTER_THRESH) {
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80063e0:	2b03      	cmp	r3, #3
 80063e2:	dd18      	ble.n	8006416 <detect_flight_phase+0x3d6>
                    flight_phase_detection->flight_phase = DROGUE_DESCENT;
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	2208      	movs	r2, #8
 80063e8:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->safety_counter[0] = 0;
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	2200      	movs	r2, #0
 80063ee:	721a      	strb	r2, [r3, #8]
                    flight_phase_detection->safety_counter[1] = 0;
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	2200      	movs	r2, #0
 80063f4:	725a      	strb	r2, [r3, #9]
        break;
 80063f6:	e00e      	b.n	8006416 <detect_flight_phase+0x3d6>
 80063f8:	e00d      	b.n	8006416 <detect_flight_phase+0x3d6>

        default:
        break;
 80063fa:	bf00      	nop
 80063fc:	e00c      	b.n	8006418 <detect_flight_phase+0x3d8>
        break;
 80063fe:	bf00      	nop
 8006400:	e00a      	b.n	8006418 <detect_flight_phase+0x3d8>
        break;
 8006402:	bf00      	nop
 8006404:	e008      	b.n	8006418 <detect_flight_phase+0x3d8>
        break;
 8006406:	bf00      	nop
 8006408:	e006      	b.n	8006418 <detect_flight_phase+0x3d8>
        break;
 800640a:	bf00      	nop
 800640c:	e004      	b.n	8006418 <detect_flight_phase+0x3d8>
        break;
 800640e:	bf00      	nop
 8006410:	e002      	b.n	8006418 <detect_flight_phase+0x3d8>
        break;
 8006412:	bf00      	nop
 8006414:	e000      	b.n	8006418 <detect_flight_phase+0x3d8>
        break;
 8006416:	bf00      	nop
    }

    flight_phase_detection->mach_number = (float)(state_est_data->mach_number) / 1000000;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800641c:	ee07 3a90 	vmov	s15, r3
 8006420:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006424:	ed5f 6a23 	vldr	s13, [pc, #-140]	; 800639c <detect_flight_phase+0x35c>
 8006428:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	edc3 7a01 	vstr	s15, [r3, #4]

    /* determine the mach regime */
    if (flight_phase_detection->mach_number >= 1.3) {
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	4618      	mov	r0, r3
 8006438:	f7fa f886 	bl	8000548 <__aeabi_f2d>
 800643c:	a312      	add	r3, pc, #72	; (adr r3, 8006488 <detect_flight_phase+0x448>)
 800643e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006442:	f7fa fb5f 	bl	8000b04 <__aeabi_dcmpge>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d003      	beq.n	8006454 <detect_flight_phase+0x414>
        flight_phase_detection->mach_regime = SUPERSONIC;
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	2203      	movs	r2, #3
 8006450:	705a      	strb	r2, [r3, #1]
    {
        flight_phase_detection->mach_regime = SUBSONIC;
    }
    
    
}
 8006452:	e013      	b.n	800647c <detect_flight_phase+0x43c>
    } else if (flight_phase_detection->mach_number >= 0.8)
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	4618      	mov	r0, r3
 800645a:	f7fa f875 	bl	8000548 <__aeabi_f2d>
 800645e:	a30c      	add	r3, pc, #48	; (adr r3, 8006490 <detect_flight_phase+0x450>)
 8006460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006464:	f7fa fb4e 	bl	8000b04 <__aeabi_dcmpge>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d003      	beq.n	8006476 <detect_flight_phase+0x436>
        flight_phase_detection->mach_regime = TRANSONIC;
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	2202      	movs	r2, #2
 8006472:	705a      	strb	r2, [r3, #1]
}
 8006474:	e002      	b.n	800647c <detect_flight_phase+0x43c>
        flight_phase_detection->mach_regime = SUBSONIC;
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	2201      	movs	r2, #1
 800647a:	705a      	strb	r2, [r3, #1]
}
 800647c:	bf00      	nop
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	f3af 8000 	nop.w
 8006488:	cccccccd 	.word	0xcccccccd
 800648c:	3ff4cccc 	.word	0x3ff4cccc
 8006490:	9999999a 	.word	0x9999999a
 8006494:	3fe99999 	.word	0x3fe99999

08006498 <reset_flight_phase_detection>:

void reset_flight_phase_detection(flight_phase_detection_t *flight_phase_detection){
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
    flight_phase_detection->flight_phase = IDLE;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	701a      	strb	r2, [r3, #0]
    flight_phase_detection->mach_regime = SUBSONIC;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2201      	movs	r2, #1
 80064aa:	705a      	strb	r2, [r3, #1]
    flight_phase_detection->mach_number = 0.0;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f04f 0200 	mov.w	r2, #0
 80064b2:	605a      	str	r2, [r3, #4]
    flight_phase_detection->safety_counter[0] = 0;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	721a      	strb	r2, [r3, #8]
    flight_phase_detection->safety_counter[1] = 0;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	725a      	strb	r2, [r3, #9]
    flight_phase_detection->t_bias_reset_start = -1;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	22ff      	movs	r2, #255	; 0xff
 80064c4:	729a      	strb	r2, [r3, #10]
 80064c6:	bf00      	nop
 80064c8:	370c      	adds	r7, #12
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
	...

080064d4 <reset_kf_state>:
#include "../Inc/kf.h"

void reset_kf_state(kf_state_t *kf_state){
 80064d4:	b5b0      	push	{r4, r5, r7, lr}
 80064d6:	b0c8      	sub	sp, #288	; 0x120
 80064d8:	af00      	add	r7, sp, #0
 80064da:	1d3b      	adds	r3, r7, #4
 80064dc:	6018      	str	r0, [r3, #0]
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{2.0E-4}, {2.0E-2}, {0.0}};
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
    } else if (STATE_ESTIMATION_FREQUENCY == 40) { 
        float A_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-0, 2.5E-2, 3.125E-4}, {0, 1.0E-0, 2.5E-2}, {0.0, 0.0, 1.0E-0}};
 80064de:	f107 030c 	add.w	r3, r7, #12
 80064e2:	4a4b      	ldr	r2, [pc, #300]	; (8006610 <reset_kf_state+0x13c>)
 80064e4:	461c      	mov	r4, r3
 80064e6:	4615      	mov	r5, r2
 80064e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80064ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80064ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064f0:	682b      	ldr	r3, [r5, #0]
 80064f2:	6023      	str	r3, [r4, #0]
        float B_init[NUMBER_STATES][NUMBER_INPUTS] = {{3.125E-4}, {2.5E-2}, {0.0}};
 80064f4:	4a47      	ldr	r2, [pc, #284]	; (8006614 <reset_kf_state+0x140>)
 80064f6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80064fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80064fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{3.125E-4}, {2.5E-2}, {0.0}};
 8006500:	4a44      	ldr	r2, [pc, #272]	; (8006614 <reset_kf_state+0x140>)
 8006502:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006506:	ca07      	ldmia	r2, {r0, r1, r2}
 8006508:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
 800650c:	1d3b      	adds	r3, r7, #4
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f107 010c 	add.w	r1, r7, #12
 8006514:	2224      	movs	r2, #36	; 0x24
 8006516:	4618      	mov	r0, r3
 8006518:	f00a f842 	bl	80105a0 <memcpy>
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
 800651c:	1d3b      	adds	r3, r7, #4
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	3348      	adds	r3, #72	; 0x48
 8006522:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8006526:	220c      	movs	r2, #12
 8006528:	4618      	mov	r0, r3
 800652a:	f00a f839 	bl	80105a0 <memcpy>
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
 800652e:	1d3b      	adds	r3, r7, #4
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	3354      	adds	r3, #84	; 0x54
 8006534:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8006538:	220c      	movs	r2, #12
 800653a:	4618      	mov	r0, r3
 800653c:	f00a f830 	bl	80105a0 <memcpy>

        discretize(STATE_ESTIMATION_FREQUENCY, NUMBER_STATES, NUMBER_INPUTS, A, B, kf_state->Ad, kf_state->Bd);
        discretize(STATE_ESTIMATION_FREQUENCY, NUMBER_STATES, NUMBER_INPUTS, A, G, kf_state->Ad, kf_state->Gd);
    }

	float x_est_init[NUMBER_STATES] = {0, 0, 0};
 8006540:	f04f 0300 	mov.w	r3, #0
 8006544:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006548:	f04f 0300 	mov.w	r3, #0
 800654c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006550:	f04f 0300 	mov.w	r3, #0
 8006554:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-9, 0, 0}, {0, 1.0E-12, 0}, {0, 0, 0}};
 8006558:	4b2f      	ldr	r3, [pc, #188]	; (8006618 <reset_kf_state+0x144>)
 800655a:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 800655e:	461d      	mov	r5, r3
 8006560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006568:	682b      	ldr	r3, [r5, #0]
 800656a:	6023      	str	r3, [r4, #0]

    memcpy(kf_state->x_est, x_est_init, sizeof(x_est_init));
 800656c:	1d3b      	adds	r3, r7, #4
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	33c4      	adds	r3, #196	; 0xc4
 8006572:	f507 718a 	add.w	r1, r7, #276	; 0x114
 8006576:	220c      	movs	r2, #12
 8006578:	4618      	mov	r0, r3
 800657a:	f00a f811 	bl	80105a0 <memcpy>
    memcpy(kf_state->P_est, P_est_init, sizeof(P_est_init));
 800657e:	1d3b      	adds	r3, r7, #4
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	33d0      	adds	r3, #208	; 0xd0
 8006584:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8006588:	2224      	movs	r2, #36	; 0x24
 800658a:	4618      	mov	r0, r3
 800658c:	f00a f808 	bl	80105a0 <memcpy>

    memset(kf_state->Q, 0, NUMBER_PROCESS_NOISE*NUMBER_PROCESS_NOISE*sizeof(kf_state->Q[0][0]));
 8006590:	1d3b      	adds	r3, r7, #4
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	339c      	adds	r3, #156	; 0x9c
 8006596:	2204      	movs	r2, #4
 8006598:	2100      	movs	r1, #0
 800659a:	4618      	mov	r0, r3
 800659c:	f00a f80b 	bl	80105b6 <memset>
    memset(kf_state->R, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->R[0][0]));
 80065a0:	1d3b      	adds	r3, r7, #4
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	33a0      	adds	r3, #160	; 0xa0
 80065a6:	2210      	movs	r2, #16
 80065a8:	2100      	movs	r1, #0
 80065aa:	4618      	mov	r0, r3
 80065ac:	f00a f803 	bl	80105b6 <memset>

    memset(kf_state->z, 0, NUMBER_MEASUREMENTS*sizeof(kf_state->z[0]));
 80065b0:	1d3b      	adds	r3, r7, #4
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80065b8:	2208      	movs	r2, #8
 80065ba:	2100      	movs	r1, #0
 80065bc:	4618      	mov	r0, r3
 80065be:	f009 fffa 	bl	80105b6 <memset>
    memset(kf_state->z_active, false, NUMBER_MEASUREMENTS*sizeof(kf_state->z_active[0]));
 80065c2:	1d3b      	adds	r3, r7, #4
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80065ca:	2202      	movs	r2, #2
 80065cc:	2100      	movs	r1, #0
 80065ce:	4618      	mov	r0, r3
 80065d0:	f009 fff1 	bl	80105b6 <memset>
    kf_state->num_z_active = 0;
 80065d4:	1d3b      	adds	r3, r7, #4
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2200      	movs	r2, #0
 80065da:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194

    transpose(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->Ad_T);
 80065de:	1d3b      	adds	r3, r7, #4
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	1d3b      	adds	r3, r7, #4
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	3324      	adds	r3, #36	; 0x24
 80065e8:	2103      	movs	r1, #3
 80065ea:	2003      	movs	r0, #3
 80065ec:	f7fe fddf 	bl	80051ae <transpose>
    transpose(NUMBER_STATES, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Gd_T);
 80065f0:	1d3b      	adds	r3, r7, #4
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80065f8:	1d3b      	adds	r3, r7, #4
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	3360      	adds	r3, #96	; 0x60
 80065fe:	2101      	movs	r1, #1
 8006600:	2003      	movs	r0, #3
 8006602:	f7fe fdd4 	bl	80051ae <transpose>
}
 8006606:	bf00      	nop
 8006608:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800660c:	46bd      	mov	sp, r7
 800660e:	bdb0      	pop	{r4, r5, r7, pc}
 8006610:	08015054 	.word	0x08015054
 8006614:	08015078 	.word	0x08015078
 8006618:	08015084 	.word	0x08015084

0800661c <kf_prediction>:

void kf_prediction(kf_state_t *kf_state){
 800661c:	b580      	push	{r7, lr}
 800661e:	b086      	sub	sp, #24
 8006620:	af04      	add	r7, sp, #16
 8006622:	6078      	str	r0, [r7, #4]
    /* Prediction Step */
    /* Calculation of x_priori */
    matvecprod(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->x_est, kf_state->x_priori, true);
 8006624:	6879      	ldr	r1, [r7, #4]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	33f4      	adds	r3, #244	; 0xf4
 8006630:	2201      	movs	r2, #1
 8006632:	9201      	str	r2, [sp, #4]
 8006634:	9300      	str	r3, [sp, #0]
 8006636:	4603      	mov	r3, r0
 8006638:	460a      	mov	r2, r1
 800663a:	2103      	movs	r1, #3
 800663c:	2003      	movs	r0, #3
 800663e:	f7fe ffe0 	bl	8005602 <matvecprod>
    matvecprod(NUMBER_STATES, NUMBER_INPUTS, kf_state->Bd, kf_state->u, kf_state->x_priori, false);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	33f4      	adds	r3, #244	; 0xf4
 8006652:	2200      	movs	r2, #0
 8006654:	9201      	str	r2, [sp, #4]
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	4603      	mov	r3, r0
 800665a:	460a      	mov	r2, r1
 800665c:	2101      	movs	r1, #1
 800665e:	2003      	movs	r0, #3
 8006660:	f7fe ffcf 	bl	8005602 <matvecprod>

    /* Calculation of P_priori */
    /* P_priori = Ad * P_est_prior * Ad_T + Gd * Q * Gd_T */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->P_est, kf_state->Placeholder_Ad_mult_P_est, true);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	33d0      	adds	r3, #208	; 0xd0
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	f502 72cc 	add.w	r2, r2, #408	; 0x198
 8006670:	2101      	movs	r1, #1
 8006672:	9102      	str	r1, [sp, #8]
 8006674:	9201      	str	r2, [sp, #4]
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	4603      	mov	r3, r0
 800667a:	2203      	movs	r2, #3
 800667c:	2103      	movs	r1, #3
 800667e:	2003      	movs	r0, #3
 8006680:	f7fe ff25 	bl	80054ce <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Q, kf_state->Placeholder_Gd_mult_Q, true);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	339c      	adds	r3, #156	; 0x9c
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8006694:	2101      	movs	r1, #1
 8006696:	9102      	str	r1, [sp, #8]
 8006698:	9201      	str	r2, [sp, #4]
 800669a:	9300      	str	r3, [sp, #0]
 800669c:	4603      	mov	r3, r0
 800669e:	2201      	movs	r2, #1
 80066a0:	2101      	movs	r1, #1
 80066a2:	2003      	movs	r0, #3
 80066a4:	f7fe ff13 	bl	80054ce <matmul>

    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_Ad_mult_P_est, kf_state->Ad_T, kf_state->P_priori, true);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f503 70cc 	add.w	r0, r3, #408	; 0x198
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	3324      	adds	r3, #36	; 0x24
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80066b8:	2101      	movs	r1, #1
 80066ba:	9102      	str	r1, [sp, #8]
 80066bc:	9201      	str	r2, [sp, #4]
 80066be:	9300      	str	r3, [sp, #0]
 80066c0:	4603      	mov	r3, r0
 80066c2:	2203      	movs	r2, #3
 80066c4:	2103      	movs	r1, #3
 80066c6:	2003      	movs	r0, #3
 80066c8:	f7fe ff01 	bl	80054ce <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_STATES, kf_state->Placeholder_Gd_mult_Q, kf_state->Gd_T, kf_state->P_priori, false);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f503 70de 	add.w	r0, r3, #444	; 0x1bc
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	3360      	adds	r3, #96	; 0x60
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80066dc:	2100      	movs	r1, #0
 80066de:	9102      	str	r1, [sp, #8]
 80066e0:	9201      	str	r2, [sp, #4]
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	4603      	mov	r3, r0
 80066e6:	2203      	movs	r2, #3
 80066e8:	2101      	movs	r1, #1
 80066ea:	2003      	movs	r0, #3
 80066ec:	f7fe feef 	bl	80054ce <matmul>
}
 80066f0:	bf00      	nop
 80066f2:	3708      	adds	r7, #8
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <select_kf_observation_matrices>:

void select_kf_observation_matrices(kf_state_t *kf_state){
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
    memset(kf_state->H, 0, NUMBER_MEASUREMENTS*NUMBER_STATES*sizeof(kf_state->H[0][0]));
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	336c      	adds	r3, #108	; 0x6c
 8006704:	2218      	movs	r2, #24
 8006706:	2100      	movs	r1, #0
 8006708:	4618      	mov	r0, r3
 800670a:	f009 ff54 	bl	80105b6 <memset>

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 800670e:	2300      	movs	r3, #0
 8006710:	60fb      	str	r3, [r7, #12]
 8006712:	e021      	b.n	8006758 <select_kf_observation_matrices+0x60>
        if (kf_state->z_active[i]) {
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	4413      	add	r3, r2
 800671a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00b      	beq.n	800673c <select_kf_observation_matrices+0x44>
             /* activate contribution of measurement in measurement matrix */
            kf_state->H[i][0] = 1;
 8006724:	6879      	ldr	r1, [r7, #4]
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	4613      	mov	r3, r2
 800672a:	005b      	lsls	r3, r3, #1
 800672c:	4413      	add	r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	440b      	add	r3, r1
 8006732:	336c      	adds	r3, #108	; 0x6c
 8006734:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006738:	601a      	str	r2, [r3, #0]
 800673a:	e00a      	b.n	8006752 <select_kf_observation_matrices+0x5a>
        } else {
            /* set contributed measurement covariance to zero */
            kf_state->R[i][i] = 0;
 800673c:	6879      	ldr	r1, [r7, #4]
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	4613      	mov	r3, r2
 8006742:	005b      	lsls	r3, r3, #1
 8006744:	4413      	add	r3, r2
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	440b      	add	r3, r1
 800674a:	33a0      	adds	r3, #160	; 0xa0
 800674c:	f04f 0200 	mov.w	r2, #0
 8006750:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	3301      	adds	r3, #1
 8006756:	60fb      	str	r3, [r7, #12]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2b01      	cmp	r3, #1
 800675c:	ddda      	ble.n	8006714 <select_kf_observation_matrices+0x1c>
        }
    }

    transpose(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->H_T);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	3384      	adds	r3, #132	; 0x84
 8006768:	2103      	movs	r1, #3
 800676a:	2002      	movs	r0, #2
 800676c:	f7fe fd1f 	bl	80051ae <transpose>
}
 8006770:	bf00      	nop
 8006772:	3710      	adds	r7, #16
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <kf_update>:

void kf_update(kf_state_t *kf_state) {
 8006778:	b580      	push	{r7, lr}
 800677a:	b086      	sub	sp, #24
 800677c:	af04      	add	r7, sp, #16
 800677e:	6078      	str	r0, [r7, #4]
    /* Update Step */
    /* y = z - H * x_priori */
    matvecprod(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->x_priori, kf_state->y, true);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006792:	2201      	movs	r2, #1
 8006794:	9201      	str	r2, [sp, #4]
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	4603      	mov	r3, r0
 800679a:	460a      	mov	r2, r1
 800679c:	2103      	movs	r1, #3
 800679e:	2002      	movs	r0, #2
 80067a0:	f7fe ff2f 	bl	8005602 <matvecprod>
    vecsub(NUMBER_MEASUREMENTS, kf_state->z, kf_state->y, kf_state->y);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f503 71a4 	add.w	r1, r3, #328	; 0x148
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80067b6:	2002      	movs	r0, #2
 80067b8:	f7fe fd78 	bl	80052ac <vecsub>

    /* S = H * P_priori * H_T + R */
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_STATES, kf_state->H, kf_state->P_priori, kf_state->Placeholder_H_mult_P_priori, true);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	f502 72e4 	add.w	r2, r2, #456	; 0x1c8
 80067ce:	2101      	movs	r1, #1
 80067d0:	9102      	str	r1, [sp, #8]
 80067d2:	9201      	str	r2, [sp, #4]
 80067d4:	9300      	str	r3, [sp, #0]
 80067d6:	4603      	mov	r3, r0
 80067d8:	2203      	movs	r2, #3
 80067da:	2103      	movs	r1, #3
 80067dc:	2002      	movs	r0, #2
 80067de:	f7fe fe76 	bl	80054ce <matmul>
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_H_mult_P_priori, kf_state->H_T, kf_state->S, true);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f503 70e4 	add.w	r0, r3, #456	; 0x1c8
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	3384      	adds	r3, #132	; 0x84
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	f502 72ac 	add.w	r2, r2, #344	; 0x158
 80067f2:	2101      	movs	r1, #1
 80067f4:	9102      	str	r1, [sp, #8]
 80067f6:	9201      	str	r2, [sp, #4]
 80067f8:	9300      	str	r3, [sp, #0]
 80067fa:	4603      	mov	r3, r0
 80067fc:	2202      	movs	r2, #2
 80067fe:	2103      	movs	r1, #3
 8006800:	2002      	movs	r0, #2
 8006802:	f7fe fe64 	bl	80054ce <matmul>
    matadd(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->S, kf_state->R, kf_state->S);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f503 72ac 	add.w	r2, r3, #344	; 0x158
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006818:	9300      	str	r3, [sp, #0]
 800681a:	460b      	mov	r3, r1
 800681c:	2102      	movs	r1, #2
 800681e:	2002      	movs	r0, #2
 8006820:	f7fe fd6f 	bl	8005302 <matadd>

    /* Calculate Pseudoinverse of covariance innovation */
    memset(kf_state->S_inv, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->S_inv[0][0]));
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800682a:	2210      	movs	r2, #16
 800682c:	2100      	movs	r1, #0
 800682e:	4618      	mov	r0, r3
 8006830:	f009 fec1 	bl	80105b6 <memset>
        matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_S_inv_3, kf_state->Placeholder_H_T_mult_R_inv, kf_state->S_inv, true);
        matsub(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->R_inv, kf_state->S_inv, kf_state->S_inv);
    } else {
        /* we use the regular inverse when the state dimension is larger than the number of measurements */
        /* the cholvesky inverse has a big O complexity of n^3 */
        cholesky_inverse(NUMBER_MEASUREMENTS, kf_state->S, kf_state->S_inv, LAMBDA);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f503 71ac 	add.w	r1, r3, #344	; 0x158
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006840:	ed9f 0a42 	vldr	s0, [pc, #264]	; 800694c <kf_update+0x1d4>
 8006844:	461a      	mov	r2, r3
 8006846:	2002      	movs	r0, #2
 8006848:	f7ff f8a6 	bl	8005998 <cholesky_inverse>
    }

    /* K  = P_priori * H_T * S_inv */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->P_priori, kf_state->H_T, kf_state->Placeholder_P_priori_mult_H_T, true);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	3384      	adds	r3, #132	; 0x84
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	f502 72ec 	add.w	r2, r2, #472	; 0x1d8
 800685c:	2101      	movs	r1, #1
 800685e:	9102      	str	r1, [sp, #8]
 8006860:	9201      	str	r2, [sp, #4]
 8006862:	9300      	str	r3, [sp, #0]
 8006864:	4603      	mov	r3, r0
 8006866:	2202      	movs	r2, #2
 8006868:	2103      	movs	r1, #3
 800686a:	2003      	movs	r0, #3
 800686c:	f7fe fe2f 	bl	80054ce <matmul>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->Placeholder_P_priori_mult_H_T, kf_state->S_inv, kf_state->K, true);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	f502 72bc 	add.w	r2, r2, #376	; 0x178
 8006882:	2101      	movs	r1, #1
 8006884:	9102      	str	r1, [sp, #8]
 8006886:	9201      	str	r2, [sp, #4]
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	4603      	mov	r3, r0
 800688c:	2202      	movs	r2, #2
 800688e:	2102      	movs	r1, #2
 8006890:	2003      	movs	r0, #3
 8006892:	f7fe fe1c 	bl	80054ce <matmul>

    /* x_est = x_priori + K*y */
    matvecprod(NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->K, kf_state->y, kf_state->x_est, true);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f503 71bc 	add.w	r1, r3, #376	; 0x178
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f503 70a8 	add.w	r0, r3, #336	; 0x150
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	33c4      	adds	r3, #196	; 0xc4
 80068a6:	2201      	movs	r2, #1
 80068a8:	9201      	str	r2, [sp, #4]
 80068aa:	9300      	str	r3, [sp, #0]
 80068ac:	4603      	mov	r3, r0
 80068ae:	460a      	mov	r2, r1
 80068b0:	2102      	movs	r1, #2
 80068b2:	2003      	movs	r0, #3
 80068b4:	f7fe fea5 	bl	8005602 <matvecprod>
    vecadd(NUMBER_STATES, kf_state->x_priori, kf_state->x_est, kf_state->x_est);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f103 01f4 	add.w	r1, r3, #244	; 0xf4
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	33c4      	adds	r3, #196	; 0xc4
 80068c8:	2003      	movs	r0, #3
 80068ca:	f7fe fcc4 	bl	8005256 <vecadd>


    /* P_est = (eye(NUMBER_STATES) - K*H)*P_priori */
    eye(NUMBER_STATES, kf_state->Placeholder_eye);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80068d4:	4619      	mov	r1, r3
 80068d6:	2003      	movs	r0, #3
 80068d8:	f7fe fc1d 	bl	8005116 <eye>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->K, kf_state->H, kf_state->Placeholder_K_mult_H, true);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f503 70bc 	add.w	r0, r3, #376	; 0x178
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	336c      	adds	r3, #108	; 0x6c
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	f502 720e 	add.w	r2, r2, #568	; 0x238
 80068ec:	2101      	movs	r1, #1
 80068ee:	9102      	str	r1, [sp, #8]
 80068f0:	9201      	str	r2, [sp, #4]
 80068f2:	9300      	str	r3, [sp, #0]
 80068f4:	4603      	mov	r3, r0
 80068f6:	2203      	movs	r2, #3
 80068f8:	2102      	movs	r1, #2
 80068fa:	2003      	movs	r0, #3
 80068fc:	f7fe fde7 	bl	80054ce <matmul>
    matsub(NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_eye, kf_state->Placeholder_K_mult_H, kf_state->Placeholder_P_est);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f503 710e 	add.w	r1, r3, #568	; 0x238
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8006912:	9300      	str	r3, [sp, #0]
 8006914:	460b      	mov	r3, r1
 8006916:	2103      	movs	r1, #3
 8006918:	2003      	movs	r0, #3
 800691a:	f7fe fd65 	bl	80053e8 <matsub>
    matmul(NUMBER_STATES, NUMBER_STATES,  NUMBER_STATES, kf_state->Placeholder_P_est, kf_state->P_priori, kf_state->P_est, true);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f503 70f8 	add.w	r0, r3, #496	; 0x1f0
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	32d0      	adds	r2, #208	; 0xd0
 800692e:	2101      	movs	r1, #1
 8006930:	9102      	str	r1, [sp, #8]
 8006932:	9201      	str	r2, [sp, #4]
 8006934:	9300      	str	r3, [sp, #0]
 8006936:	4603      	mov	r3, r0
 8006938:	2203      	movs	r2, #3
 800693a:	2103      	movs	r1, #3
 800693c:	2003      	movs	r0, #3
 800693e:	f7fe fdc6 	bl	80054ce <matmul>
 8006942:	bf00      	nop
 8006944:	3708      	adds	r7, #8
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	38d1b717 	.word	0x38d1b717

08006950 <reset_state_est_state>:
#include "../Inc/state_est.h"

void reset_state_est_state(float p_g, float T_g, state_est_state_t *state_est_state) {
 8006950:	b580      	push	{r7, lr}
 8006952:	b084      	sub	sp, #16
 8006954:	af00      	add	r7, sp, #0
 8006956:	ed87 0a03 	vstr	s0, [r7, #12]
 800695a:	edc7 0a02 	vstr	s1, [r7, #8]
 800695e:	6078      	str	r0, [r7, #4]
    reset_flight_phase_detection(&state_est_state->flight_phase_detection);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8006966:	4618      	mov	r0, r3
 8006968:	f7ff fd96 	bl	8006498 <reset_flight_phase_detection>

    memset(&state_est_state->state_est_data, 0, sizeof(state_est_state->state_est_data));
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	224c      	movs	r2, #76	; 0x4c
 8006970:	2100      	movs	r1, #0
 8006972:	4618      	mov	r0, r3
 8006974:	f009 fe1f 	bl	80105b6 <memset>
    memset(&state_est_state->state_est_meas, 0, sizeof(state_est_state->state_est_meas));
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	334c      	adds	r3, #76	; 0x4c
 800697c:	2254      	movs	r2, #84	; 0x54
 800697e:	2100      	movs	r1, #0
 8006980:	4618      	mov	r0, r3
 8006982:	f009 fe18 	bl	80105b6 <memset>
    memset(&state_est_state->state_est_meas_prior, 0, sizeof(state_est_state->state_est_meas_prior));
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	33a0      	adds	r3, #160	; 0xa0
 800698a:	2254      	movs	r2, #84	; 0x54
 800698c:	2100      	movs	r1, #0
 800698e:	4618      	mov	r0, r3
 8006990:	f009 fe11 	bl	80105b6 <memset>

    init_env(&state_est_state->env);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800699a:	4618      	mov	r0, r3
 800699c:	f7ff f97a 	bl	8005c94 <init_env>
    calibrate_env(&state_est_state->env, p_g, T_g);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80069a6:	edd7 0a02 	vldr	s1, [r7, #8]
 80069aa:	ed97 0a03 	vldr	s0, [r7, #12]
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7ff f986 	bl	8005cc0 <calibrate_env>
    update_env(&state_est_state->env, T_g);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80069ba:	ed97 0a02 	vldr	s0, [r7, #8]
 80069be:	4618      	mov	r0, r3
 80069c0:	f7ff f9c6 	bl	8005d50 <update_env>

	reset_kf_state(&state_est_state->kf_state);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	33f4      	adds	r3, #244	; 0xf4
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7ff fd83 	bl	80064d4 <reset_kf_state>
    update_state_est_data(state_est_state);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 f8dc 	bl	8006b8c <update_state_est_data>
    #if defined(USE_SENSOR_ELIMINATION_BY_EXTRAPOLATION) && USE_SENSOR_ELIMINATION_BY_EXTRAPOLATION == true
        memset(&state_est_state->baro_roll_mem, 0, sizeof(state_est_state->baro_roll_mem));
    #endif

    #if USE_STATE_EST_DESCENT == false
        memset(&state_est_state->altitude_mav_mem, 0, sizeof(state_est_state->altitude_mav_mem));
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069da:	227c      	movs	r2, #124	; 0x7c
 80069dc:	2100      	movs	r1, #0
 80069de:	4618      	mov	r0, r3
 80069e0:	f009 fde9 	bl	80105b6 <memset>
    #endif

	select_noise_models(state_est_state);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 fb37 	bl	8007058 <select_noise_models>
}
 80069ea:	bf00      	nop
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
	...

080069f4 <state_est_step>:

void state_est_step(timestamp_t t, state_est_state_t *state_est_state, bool bool_detect_flight_phase) {
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b088      	sub	sp, #32
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	4613      	mov	r3, r2
 8006a00:	71fb      	strb	r3, [r7, #7]
    /* process measurements */
	process_measurements(t, state_est_state);
 8006a02:	68b9      	ldr	r1, [r7, #8]
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f000 f927 	bl	8006c58 <process_measurements>

	/* select noise models (dependent on detected flight phase and updated temperature in environment) */
	select_noise_models(state_est_state);
 8006a0a:	68b8      	ldr	r0, [r7, #8]
 8006a0c:	f000 fb24 	bl	8007058 <select_noise_models>
	
	kf_prediction(&state_est_state->kf_state);
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	33f4      	adds	r3, #244	; 0xf4
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7ff fe01 	bl	800661c <kf_prediction>

	if (state_est_state->kf_state.num_z_active > 0) {
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	dd0a      	ble.n	8006a3a <state_est_step+0x46>
		select_kf_observation_matrices(&state_est_state->kf_state);
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	33f4      	adds	r3, #244	; 0xf4
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f7ff fe65 	bl	80066f8 <select_kf_observation_matrices>
		kf_update(&state_est_state->kf_state);
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	33f4      	adds	r3, #244	; 0xf4
 8006a32:	4618      	mov	r0, r3
 8006a34:	f7ff fea0 	bl	8006778 <kf_update>
 8006a38:	e009      	b.n	8006a4e <state_est_step+0x5a>
	} else {
		memcpy(&state_est_state->kf_state.x_est, &state_est_state->kf_state.x_priori, sizeof(state_est_state->kf_state.x_priori));
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	f503 70dc 	add.w	r0, r3, #440	; 0x1b8
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006a46:	220c      	movs	r2, #12
 8006a48:	4619      	mov	r1, r3
 8006a4a:	f009 fda9 	bl	80105a0 <memcpy>
	}

	update_state_est_data(state_est_state);
 8006a4e:	68b8      	ldr	r0, [r7, #8]
 8006a50:	f000 f89c 	bl	8006b8c <update_state_est_data>

    #if USE_STATE_EST_DESCENT == false
        /* during drogue and main descent, the 1D state estimation might work badly,
           thus we are computing the altitude and vertical velocity solely from the barometric data */
        
    	if ((state_est_state->flight_phase_detection.flight_phase == DROGUE_DESCENT || 
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006a5a:	2b08      	cmp	r3, #8
 8006a5c:	d004      	beq.n	8006a68 <state_est_step+0x74>
            state_est_state->flight_phase_detection.flight_phase == MAIN_DESCENT) && 
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
    	if ((state_est_state->flight_phase_detection.flight_phase == DROGUE_DESCENT || 
 8006a64:	2b0a      	cmp	r3, #10
 8006a66:	d175      	bne.n	8006b54 <state_est_step+0x160>
            state_est_state->state_est_data.altitude_raw_active == true){
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
            state_est_state->flight_phase_detection.flight_phase == MAIN_DESCENT) && 
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d070      	beq.n	8006b54 <state_est_step+0x160>
        
            int alt_mav_mem_length = state_est_state->altitude_mav_mem.memory_length;
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8006a78:	61bb      	str	r3, [r7, #24]
            float alt_mav_delta = state_est_state->altitude_mav_mem.avg_values[0] - state_est_state->altitude_mav_mem.avg_values[alt_mav_mem_length-1];
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	f203 4354 	addw	r3, r3, #1108	; 0x454
 8006a80:	ed93 7a00 	vldr	s14, [r3]
 8006a84:	69bb      	ldr	r3, [r7, #24]
 8006a86:	3b01      	subs	r3, #1
 8006a88:	68ba      	ldr	r2, [r7, #8]
 8006a8a:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4413      	add	r3, r2
 8006a92:	3304      	adds	r3, #4
 8006a94:	edd3 7a00 	vldr	s15, [r3]
 8006a98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a9c:	edc7 7a05 	vstr	s15, [r7, #20]
            float alt_mav_dt = (float)(state_est_state->altitude_mav_mem.timestamps[0] - state_est_state->altitude_mav_mem.timestamps[alt_mav_mem_length-1]) / 1000;
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	68b9      	ldr	r1, [r7, #8]
 8006aac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	440b      	add	r3, r1
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	1ad3      	subs	r3, r2, r3
 8006ab8:	ee07 3a90 	vmov	s15, r3
 8006abc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006ac0:	eddf 6a30 	vldr	s13, [pc, #192]	; 8006b84 <state_est_step+0x190>
 8006ac4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006ac8:	edc7 7a04 	vstr	s15, [r7, #16]

            float velocity = 0;
 8006acc:	f04f 0300 	mov.w	r3, #0
 8006ad0:	61fb      	str	r3, [r7, #28]
            if (alt_mav_mem_length > 1){
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	dd07      	ble.n	8006ae8 <state_est_step+0xf4>
                velocity = alt_mav_delta / alt_mav_dt;
 8006ad8:	edd7 6a05 	vldr	s13, [r7, #20]
 8006adc:	ed97 7a04 	vldr	s14, [r7, #16]
 8006ae0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ae4:	edc7 7a07 	vstr	s15, [r7, #28]
            }

			state_est_state->state_est_data.position_world[2] = state_est_state->state_est_data.altitude_raw;
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	609a      	str	r2, [r3, #8]
			state_est_state->state_est_data.velocity_rocket[0] = (int32_t)(velocity * 1000);
 8006af0:	edd7 7a07 	vldr	s15, [r7, #28]
 8006af4:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8006b84 <state_est_step+0x190>
 8006af8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006afc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b00:	ee17 2a90 	vmov	r2, s15
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	60da      	str	r2, [r3, #12]
			state_est_state->state_est_data.velocity_world[2] = (int32_t)(velocity * 1000);
 8006b08:	edd7 7a07 	vldr	s15, [r7, #28]
 8006b0c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8006b84 <state_est_step+0x190>
 8006b10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006b14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b18:	ee17 2a90 	vmov	r2, s15
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	62da      	str	r2, [r3, #44]	; 0x2c
			state_est_state->state_est_data.acceleration_rocket[0] = 0;
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	2200      	movs	r2, #0
 8006b24:	619a      	str	r2, [r3, #24]
			state_est_state->state_est_data.acceleration_world[2] = 0;
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	639a      	str	r2, [r3, #56]	; 0x38
			state_est_state->state_est_data.mach_number = (int32_t)(mach_number(&state_est_state->env, velocity) * 1000000);
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8006b32:	ed97 0a07 	vldr	s0, [r7, #28]
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7ff f940 	bl	8005dbc <mach_number>
 8006b3c:	eeb0 7a40 	vmov.f32	s14, s0
 8006b40:	eddf 7a11 	vldr	s15, [pc, #68]	; 8006b88 <state_est_step+0x194>
 8006b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b48:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b4c:	ee17 2a90 	vmov	r2, s15
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	63da      	str	r2, [r3, #60]	; 0x3c
    	}
    #endif

    if (bool_detect_flight_phase){
 8006b54:	79fb      	ldrb	r3, [r7, #7]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d007      	beq.n	8006b6a <state_est_step+0x176>
        detect_flight_phase(t, &state_est_state->flight_phase_detection, &state_est_state->state_est_data);
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8006b60:	68ba      	ldr	r2, [r7, #8]
 8006b62:	4619      	mov	r1, r3
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f7ff fa6b 	bl	8006040 <detect_flight_phase>
    }

	/* set measurement prior to measurements from completed state estimation step */
	memcpy(&state_est_state->state_est_meas_prior, &state_est_state->state_est_meas, sizeof(state_est_state->state_est_meas));
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	334c      	adds	r3, #76	; 0x4c
 8006b74:	2254      	movs	r2, #84	; 0x54
 8006b76:	4619      	mov	r1, r3
 8006b78:	f009 fd12 	bl	80105a0 <memcpy>
}
 8006b7c:	bf00      	nop
 8006b7e:	3720      	adds	r7, #32
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	447a0000 	.word	0x447a0000
 8006b88:	49742400 	.word	0x49742400

08006b8c <update_state_est_data>:

void update_state_est_data(state_est_state_t *state_est_state) {
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b082      	sub	sp, #8
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
    state_est_state->state_est_data.position_world[2] = (int32_t)(state_est_state->kf_state.x_est[0] * 1000);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	edd3 7a6e 	vldr	s15, [r3, #440]	; 0x1b8
 8006b9a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8006c4c <update_state_est_data+0xc0>
 8006b9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006ba2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ba6:	ee17 2a90 	vmov	r2, s15
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	609a      	str	r2, [r3, #8]
    state_est_state->state_est_data.velocity_rocket[0] = (int32_t)(state_est_state->kf_state.x_est[1] * 1000);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	edd3 7a6f 	vldr	s15, [r3, #444]	; 0x1bc
 8006bb4:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8006c4c <update_state_est_data+0xc0>
 8006bb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006bbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006bc0:	ee17 2a90 	vmov	r2, s15
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	60da      	str	r2, [r3, #12]
    state_est_state->state_est_data.velocity_world[2] = (int32_t)(state_est_state->kf_state.x_est[1] * 1000);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	edd3 7a6f 	vldr	s15, [r3, #444]	; 0x1bc
 8006bce:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8006c4c <update_state_est_data+0xc0>
 8006bd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006bd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006bda:	ee17 2a90 	vmov	r2, s15
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	62da      	str	r2, [r3, #44]	; 0x2c
    state_est_state->state_est_data.acceleration_rocket[0] = (int32_t)(state_est_state->kf_state.u[0] * 1000);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	edd3 7a6d 	vldr	s15, [r3, #436]	; 0x1b4
 8006be8:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006c4c <update_state_est_data+0xc0>
 8006bec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006bf0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006bf4:	ee17 2a90 	vmov	r2, s15
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	619a      	str	r2, [r3, #24]
    state_est_state->state_est_data.acceleration_world[2] = (int32_t)(state_est_state->kf_state.u[0] * 1000);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	edd3 7a6d 	vldr	s15, [r3, #436]	; 0x1b4
 8006c02:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8006c4c <update_state_est_data+0xc0>
 8006c06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006c0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c0e:	ee17 2a90 	vmov	r2, s15
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	639a      	str	r2, [r3, #56]	; 0x38
    state_est_state->state_est_data.mach_number = (int32_t)(mach_number(&state_est_state->env, state_est_state->kf_state.x_est[1]) * 1000000);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f503 7278 	add.w	r2, r3, #992	; 0x3e0
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	edd3 7a6f 	vldr	s15, [r3, #444]	; 0x1bc
 8006c22:	eeb0 0a67 	vmov.f32	s0, s15
 8006c26:	4610      	mov	r0, r2
 8006c28:	f7ff f8c8 	bl	8005dbc <mach_number>
 8006c2c:	eeb0 7a40 	vmov.f32	s14, s0
 8006c30:	eddf 7a07 	vldr	s15, [pc, #28]	; 8006c50 <update_state_est_data+0xc4>
 8006c34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c3c:	ee17 2a90 	vmov	r2, s15
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006c44:	bf00      	nop
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	447a0000 	.word	0x447a0000
 8006c50:	49742400 	.word	0x49742400
 8006c54:	00000000 	.word	0x00000000

08006c58 <process_measurements>:

void process_measurements(timestamp_t t, state_est_state_t *state_est_state) {
 8006c58:	b590      	push	{r4, r7, lr}
 8006c5a:	b099      	sub	sp, #100	; 0x64
 8006c5c:	af02      	add	r7, sp, #8
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
    bool temp_meas_active[NUM_BARO];
    float acc_x_meas[NUM_IMU];
    bool acc_x_meas_active[NUM_IMU];

    /* barometer */
    for (int i = 0; i < NUM_BARO; i++){
 8006c62:	2300      	movs	r3, #0
 8006c64:	657b      	str	r3, [r7, #84]	; 0x54
 8006c66:	e06f      	b.n	8006d48 <process_measurements+0xf0>
        if (state_est_state->state_est_meas.baro_data[i].ts > state_est_state->state_est_meas_prior.baro_data[i].ts) {
 8006c68:	6839      	ldr	r1, [r7, #0]
 8006c6a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	005b      	lsls	r3, r3, #1
 8006c70:	4413      	add	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	440b      	add	r3, r1
 8006c76:	3354      	adds	r3, #84	; 0x54
 8006c78:	6819      	ldr	r1, [r3, #0]
 8006c7a:	6838      	ldr	r0, [r7, #0]
 8006c7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006c7e:	4613      	mov	r3, r2
 8006c80:	005b      	lsls	r3, r3, #1
 8006c82:	4413      	add	r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4403      	add	r3, r0
 8006c88:	33a8      	adds	r3, #168	; 0xa8
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4299      	cmp	r1, r3
 8006c8e:	d939      	bls.n	8006d04 <process_measurements+0xac>
            state_est_state->kf_state.z[i] = state_est_state->state_est_meas.baro_data[i].pressure;
 8006c90:	6839      	ldr	r1, [r7, #0]
 8006c92:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006c94:	4613      	mov	r3, r2
 8006c96:	005b      	lsls	r3, r3, #1
 8006c98:	4413      	add	r3, r2
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	440b      	add	r3, r1
 8006c9e:	334c      	adds	r3, #76	; 0x4c
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	6839      	ldr	r1, [r7, #0]
 8006ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ca6:	338e      	adds	r3, #142	; 0x8e
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	440b      	add	r3, r1
 8006cac:	3304      	adds	r3, #4
 8006cae:	601a      	str	r2, [r3, #0]
            state_est_state->kf_state.z_active[i] = true;
 8006cb0:	683a      	ldr	r2, [r7, #0]
 8006cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cb4:	4413      	add	r3, r2
 8006cb6:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8006cba:	2201      	movs	r2, #1
 8006cbc:	701a      	strb	r2, [r3, #0]

            temp_meas[i] = state_est_state->state_est_meas.baro_data[i].temperature;
 8006cbe:	6839      	ldr	r1, [r7, #0]
 8006cc0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	005b      	lsls	r3, r3, #1
 8006cc6:	4413      	add	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	440b      	add	r3, r1
 8006ccc:	3350      	adds	r3, #80	; 0x50
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006cd8:	440b      	add	r3, r1
 8006cda:	3b3c      	subs	r3, #60	; 0x3c
 8006cdc:	601a      	str	r2, [r3, #0]
            temp_meas_active[i] = true;
 8006cde:	f107 0218 	add.w	r2, r7, #24
 8006ce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ce4:	4413      	add	r3, r2
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	701a      	strb	r2, [r3, #0]

            /* deactivate all barometer measurements if we are transsonic or supersonic */
            if (state_est_state->flight_phase_detection.mach_regime != SUBSONIC) {
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	f893 33f5 	ldrb.w	r3, [r3, #1013]	; 0x3f5
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d026      	beq.n	8006d42 <process_measurements+0xea>
                state_est_state->kf_state.z_active[i] = false;
 8006cf4:	683a      	ldr	r2, [r7, #0]
 8006cf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8006cfe:	2200      	movs	r2, #0
 8006d00:	701a      	strb	r2, [r3, #0]
 8006d02:	e01e      	b.n	8006d42 <process_measurements+0xea>
                        state_est_state->state_est_meas.airbrake_extension > BIAS_RESET_AIRBRAKE_EXTENSION_THRESH)) {
                    state_est_state->kf_state.z_active[i] = false;
                }
            #endif
        } else {
            state_est_state->kf_state.z[i] = 0;
 8006d04:	683a      	ldr	r2, [r7, #0]
 8006d06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d08:	338e      	adds	r3, #142	; 0x8e
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	4413      	add	r3, r2
 8006d0e:	3304      	adds	r3, #4
 8006d10:	f04f 0200 	mov.w	r2, #0
 8006d14:	601a      	str	r2, [r3, #0]
            state_est_state->kf_state.z_active[i] = false;
 8006d16:	683a      	ldr	r2, [r7, #0]
 8006d18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8006d20:	2200      	movs	r2, #0
 8006d22:	701a      	strb	r2, [r3, #0]

            temp_meas[i] = 0;
 8006d24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006d2c:	4413      	add	r3, r2
 8006d2e:	3b3c      	subs	r3, #60	; 0x3c
 8006d30:	f04f 0200 	mov.w	r2, #0
 8006d34:	601a      	str	r2, [r3, #0]
            temp_meas_active[i] = false;
 8006d36:	f107 0218 	add.w	r2, r7, #24
 8006d3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d3c:	4413      	add	r3, r2
 8006d3e:	2200      	movs	r2, #0
 8006d40:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NUM_BARO; i++){
 8006d42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d44:	3301      	adds	r3, #1
 8006d46:	657b      	str	r3, [r7, #84]	; 0x54
 8006d48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	dd8c      	ble.n	8006c68 <process_measurements+0x10>
        }
    }

    /* IMU */
    for (int i = 0; i < NUM_IMU; i++){
 8006d4e:	2300      	movs	r3, #0
 8006d50:	653b      	str	r3, [r7, #80]	; 0x50
 8006d52:	e03c      	b.n	8006dce <process_measurements+0x176>
        if (state_est_state->state_est_meas.imu_data[i].ts > state_est_state->state_est_meas_prior.imu_data[i].ts) {
 8006d54:	6839      	ldr	r1, [r7, #0]
 8006d56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d58:	4613      	mov	r3, r2
 8006d5a:	00db      	lsls	r3, r3, #3
 8006d5c:	1a9b      	subs	r3, r3, r2
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	440b      	add	r3, r1
 8006d62:	337c      	adds	r3, #124	; 0x7c
 8006d64:	6819      	ldr	r1, [r3, #0]
 8006d66:	6838      	ldr	r0, [r7, #0]
 8006d68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	00db      	lsls	r3, r3, #3
 8006d6e:	1a9b      	subs	r3, r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4403      	add	r3, r0
 8006d74:	33d0      	adds	r3, #208	; 0xd0
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4299      	cmp	r1, r3
 8006d7a:	d916      	bls.n	8006daa <process_measurements+0x152>
            acc_x_meas[i] = state_est_state->state_est_meas.imu_data[i].acc_x;
 8006d7c:	6839      	ldr	r1, [r7, #0]
 8006d7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d80:	4613      	mov	r3, r2
 8006d82:	00db      	lsls	r3, r3, #3
 8006d84:	1a9b      	subs	r3, r3, r2
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	440b      	add	r3, r1
 8006d8a:	3370      	adds	r3, #112	; 0x70
 8006d8c:	681a      	ldr	r2, [r3, #0]
 8006d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006d96:	440b      	add	r3, r1
 8006d98:	3b48      	subs	r3, #72	; 0x48
 8006d9a:	601a      	str	r2, [r3, #0]
            acc_x_meas_active[i] = true;
 8006d9c:	f107 020c 	add.w	r2, r7, #12
 8006da0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006da2:	4413      	add	r3, r2
 8006da4:	2201      	movs	r2, #1
 8006da6:	701a      	strb	r2, [r3, #0]
 8006da8:	e00e      	b.n	8006dc8 <process_measurements+0x170>
        } else {
            acc_x_meas[i] = 0;
 8006daa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006db2:	4413      	add	r3, r2
 8006db4:	3b48      	subs	r3, #72	; 0x48
 8006db6:	f04f 0200 	mov.w	r2, #0
 8006dba:	601a      	str	r2, [r3, #0]
            acc_x_meas_active[i] = false;
 8006dbc:	f107 020c 	add.w	r2, r7, #12
 8006dc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dc2:	4413      	add	r3, r2
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NUM_IMU; i++){
 8006dc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dca:	3301      	adds	r3, #1
 8006dcc:	653b      	str	r3, [r7, #80]	; 0x50
 8006dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	ddbf      	ble.n	8006d54 <process_measurements+0xfc>
        if (state_est_state->baro_roll_mem.memory_length < MAX_LENGTH_ROLLING_MEMORY) {
            sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, state_est_state->kf_state.z, state_est_state->kf_state.z_active);
        }
        sensor_elimination_by_extrapolation(t, NUMBER_MEASUREMENTS, state_est_state->kf_state.z, state_est_state->kf_state.z_active, &state_est_state->baro_roll_mem);
    #else
        sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, state_est_state->kf_state.z, state_est_state->kf_state.z_active);
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	f503 710f 	add.w	r1, r3, #572	; 0x23c
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8006de0:	461a      	mov	r2, r3
 8006de2:	2002      	movs	r0, #2
 8006de4:	f000 fa00 	bl	80071e8 <sensor_elimination_by_stdev>
    #endif

    /* eliminate temperature measurements */
    sensor_elimination_by_stdev(NUM_BARO, temp_meas, temp_meas_active);
 8006de8:	f107 0218 	add.w	r2, r7, #24
 8006dec:	f107 031c 	add.w	r3, r7, #28
 8006df0:	4619      	mov	r1, r3
 8006df2:	2002      	movs	r0, #2
 8006df4:	f000 f9f8 	bl	80071e8 <sensor_elimination_by_stdev>

    /* eliminate accelerometer in rocket x-dir measurements */
    sensor_elimination_by_stdev(NUM_IMU, acc_x_meas, acc_x_meas_active);
 8006df8:	f107 020c 	add.w	r2, r7, #12
 8006dfc:	f107 0310 	add.w	r3, r7, #16
 8006e00:	4619      	mov	r1, r3
 8006e02:	2002      	movs	r0, #2
 8006e04:	f000 f9f0 	bl	80071e8 <sensor_elimination_by_stdev>

    /* update num_z_active */
    state_est_state->kf_state.num_z_active = 0;
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
    /* take the average of the active accelerometers in rocket-x dir as the state estimation input */
    float u = 0;
 8006e10:	f04f 0300 	mov.w	r3, #0
 8006e14:	64fb      	str	r3, [r7, #76]	; 0x4c
    int num_acc_x_meas_active = 0;
 8006e16:	2300      	movs	r3, #0
 8006e18:	64bb      	str	r3, [r7, #72]	; 0x48

    /* take the average of the temperature measurement  */
    float temp_meas_mean = 0;
 8006e1a:	f04f 0300 	mov.w	r3, #0
 8006e1e:	647b      	str	r3, [r7, #68]	; 0x44
    int num_temp_meas_active = 0;
 8006e20:	2300      	movs	r3, #0
 8006e22:	643b      	str	r3, [r7, #64]	; 0x40
    
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8006e24:	2300      	movs	r3, #0
 8006e26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e28:	e011      	b.n	8006e4e <process_measurements+0x1f6>
        if (state_est_state->kf_state.z_active[i]){
 8006e2a:	683a      	ldr	r2, [r7, #0]
 8006e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e2e:	4413      	add	r3, r2
 8006e30:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d006      	beq.n	8006e48 <process_measurements+0x1f0>
            state_est_state->kf_state.num_z_active += 1;
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006e40:	1c5a      	adds	r2, r3, #1
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8006e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	ddea      	ble.n	8006e2a <process_measurements+0x1d2>
        }
    }
    for (int i = 0; i < NUM_BARO; i++){
 8006e54:	2300      	movs	r3, #0
 8006e56:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e58:	e020      	b.n	8006e9c <process_measurements+0x244>
        if (temp_meas[i]) {
 8006e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006e62:	4413      	add	r3, r2
 8006e64:	3b3c      	subs	r3, #60	; 0x3c
 8006e66:	edd3 7a00 	vldr	s15, [r3]
 8006e6a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e72:	d010      	beq.n	8006e96 <process_measurements+0x23e>
            temp_meas_mean += temp_meas[i];
 8006e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006e7c:	4413      	add	r3, r2
 8006e7e:	3b3c      	subs	r3, #60	; 0x3c
 8006e80:	edd3 7a00 	vldr	s15, [r3]
 8006e84:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8006e88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e8c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
            num_temp_meas_active += 1;
 8006e90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e92:	3301      	adds	r3, #1
 8006e94:	643b      	str	r3, [r7, #64]	; 0x40
    for (int i = 0; i < NUM_BARO; i++){
 8006e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e98:	3301      	adds	r3, #1
 8006e9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	dddb      	ble.n	8006e5a <process_measurements+0x202>
        }
    }
    for (int i = 0; i < NUM_IMU; i++){
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ea6:	e01a      	b.n	8006ede <process_measurements+0x286>
        if (acc_x_meas_active[i]) {
 8006ea8:	f107 020c 	add.w	r2, r7, #12
 8006eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eae:	4413      	add	r3, r2
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d010      	beq.n	8006ed8 <process_measurements+0x280>
            u += acc_x_meas[i];
 8006eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006ebe:	4413      	add	r3, r2
 8006ec0:	3b48      	subs	r3, #72	; 0x48
 8006ec2:	edd3 7a00 	vldr	s15, [r3]
 8006ec6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8006eca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ece:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
            num_acc_x_meas_active += 1;
 8006ed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	64bb      	str	r3, [r7, #72]	; 0x48
    for (int i = 0; i < NUM_IMU; i++){
 8006ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eda:	3301      	adds	r3, #1
 8006edc:	637b      	str	r3, [r7, #52]	; 0x34
 8006ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	dde1      	ble.n	8006ea8 <process_measurements+0x250>
        }
    }

    pressure2altitudeAGL(&state_est_state->env, NUMBER_MEASUREMENTS, state_est_state->kf_state.z, state_est_state->kf_state.z_active, state_est_state->kf_state.z);
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	f503 7078 	add.w	r0, r3, #992	; 0x3e0
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	f503 720f 	add.w	r2, r3, #572	; 0x23c
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	f503 7121 	add.w	r1, r3, #644	; 0x284
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8006efc:	9300      	str	r3, [sp, #0]
 8006efe:	460b      	mov	r3, r1
 8006f00:	2102      	movs	r1, #2
 8006f02:	f7fe ff79 	bl	8005df8 <pressure2altitudeAGL>

    /* compute the mean raw altitude from all barometer measurements */
    int num_alt_meas_active = 0;
 8006f06:	2300      	movs	r3, #0
 8006f08:	633b      	str	r3, [r7, #48]	; 0x30
    float alt_mean = 0;
 8006f0a:	f04f 0300 	mov.w	r3, #0
 8006f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8006f10:	2300      	movs	r3, #0
 8006f12:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f14:	e01b      	b.n	8006f4e <process_measurements+0x2f6>
        if (state_est_state->kf_state.z_active[i]){
 8006f16:	683a      	ldr	r2, [r7, #0]
 8006f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1a:	4413      	add	r3, r2
 8006f1c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d010      	beq.n	8006f48 <process_measurements+0x2f0>
            num_alt_meas_active += 1;
 8006f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f28:	3301      	adds	r3, #1
 8006f2a:	633b      	str	r3, [r7, #48]	; 0x30
            alt_mean += state_est_state->kf_state.z[i];
 8006f2c:	683a      	ldr	r2, [r7, #0]
 8006f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f30:	338e      	adds	r3, #142	; 0x8e
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	4413      	add	r3, r2
 8006f36:	3304      	adds	r3, #4
 8006f38:	edd3 7a00 	vldr	s15, [r3]
 8006f3c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8006f40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f44:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8006f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	dde0      	ble.n	8006f16 <process_measurements+0x2be>
        }
    }
    if (num_alt_meas_active > 0) {
 8006f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	dd1b      	ble.n	8006f92 <process_measurements+0x33a>
        alt_mean /= num_alt_meas_active;
 8006f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5c:	ee07 3a90 	vmov	s15, r3
 8006f60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f64:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8006f68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f6c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        state_est_state->state_est_data.altitude_raw = (int32_t)(alt_mean * 1000);
 8006f70:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006f74:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8007050 <process_measurements+0x3f8>
 8006f78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f80:	ee17 2a90 	vmov	r2, s15
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	641a      	str	r2, [r3, #64]	; 0x40
        state_est_state->state_est_data.altitude_raw_active = true;
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f90:	e003      	b.n	8006f9a <process_measurements+0x342>
    } else {  
        state_est_state->state_est_data.altitude_raw_active = false;
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }

    #if USE_STATE_EST_DESCENT == false
        /* during drogue and main descent, the 1D state estimation might work badly,
           thus we are computing the altitude and vertical velocity solely from the barometric data */
    	float altitude_avg = update_mav(&state_est_state->altitude_mav_mem, t, 
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	f503 6080 	add.w	r0, r3, #1024	; 0x400
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8006fac:	6879      	ldr	r1, [r7, #4]
 8006fae:	f000 f9ef 	bl	8007390 <update_mav>
 8006fb2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
                                        alt_mean, state_est_state->state_est_data.altitude_raw_active);
    #endif

    /* we take the old acceleration from the previous timestep, if no acceleration measurements are active */
    if (num_acc_x_meas_active > 0){
 8006fb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	dd1c      	ble.n	8006ff6 <process_measurements+0x39e>
        u /= num_acc_x_meas_active;
 8006fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fbe:	ee07 3a90 	vmov	s15, r3
 8006fc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006fc6:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8006fca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fce:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        /* gravity compensation for accelerometer */
        state_est_state->kf_state.u[0] = u - GRAVITATION;
 8006fd2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8006fd4:	f7f9 fab8 	bl	8000548 <__aeabi_f2d>
 8006fd8:	a31b      	add	r3, pc, #108	; (adr r3, 8007048 <process_measurements+0x3f0>)
 8006fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fde:	f7f9 f953 	bl	8000288 <__aeabi_dsub>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	460c      	mov	r4, r1
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	4621      	mov	r1, r4
 8006fea:	f7f9 fdfd 	bl	8000be8 <__aeabi_d2f>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    }
    
    if (num_temp_meas_active > 0){
 8006ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	dd12      	ble.n	8007022 <process_measurements+0x3ca>
        temp_meas_mean /= num_temp_meas_active;
 8006ffc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ffe:	ee07 3a90 	vmov	s15, r3
 8007002:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007006:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800700a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800700e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        update_env(&state_est_state->env, temp_meas_mean);
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8007018:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 800701c:	4618      	mov	r0, r3
 800701e:	f7fe fe97 	bl	8005d50 <update_env>
    }

    /* airbrake extension tracking feedback */
    state_est_state->state_est_data.airbrake_extension = (int32_t)(state_est_state->state_est_meas.airbrake_extension * 1000000);
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8007028:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8007054 <process_measurements+0x3fc>
 800702c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007030:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007034:	ee17 2a90 	vmov	r2, s15
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	649a      	str	r2, [r3, #72]	; 0x48
} 
 800703c:	bf00      	nop
 800703e:	375c      	adds	r7, #92	; 0x5c
 8007040:	46bd      	mov	sp, r7
 8007042:	bd90      	pop	{r4, r7, pc}
 8007044:	f3af 8000 	nop.w
 8007048:	51eb851f 	.word	0x51eb851f
 800704c:	40239eb8 	.word	0x40239eb8
 8007050:	447a0000 	.word	0x447a0000
 8007054:	49742400 	.word	0x49742400

08007058 <select_noise_models>:

void select_noise_models(state_est_state_t *state_est_state) {
 8007058:	b590      	push	{r4, r7, lr}
 800705a:	b08f      	sub	sp, #60	; 0x3c
 800705c:	af02      	add	r7, sp, #8
 800705e:	6078      	str	r0, [r7, #4]
    float accelerometer_x_stdev;
    float barometer_stdev;

    // TODO @maxi: add different noise models for each mach regime
    switch (state_est_state->flight_phase_detection.flight_phase) {
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007066:	3b01      	subs	r3, #1
 8007068:	2b0a      	cmp	r3, #10
 800706a:	d832      	bhi.n	80070d2 <select_noise_models+0x7a>
 800706c:	a201      	add	r2, pc, #4	; (adr r2, 8007074 <select_noise_models+0x1c>)
 800706e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007072:	bf00      	nop
 8007074:	080070a1 	.word	0x080070a1
 8007078:	080070a1 	.word	0x080070a1
 800707c:	080070ab 	.word	0x080070ab
 8007080:	080070b5 	.word	0x080070b5
 8007084:	080070b5 	.word	0x080070b5
 8007088:	080070b5 	.word	0x080070b5
 800708c:	080070b5 	.word	0x080070b5
 8007090:	080070bf 	.word	0x080070bf
 8007094:	080070c9 	.word	0x080070c9
 8007098:	080070bf 	.word	0x080070bf
 800709c:	080070a1 	.word	0x080070a1
        case AIRBRAKE_TEST:
        case TOUCHDOWN:
        case IDLE:
            accelerometer_x_stdev = 0.0185409;
 80070a0:	4b49      	ldr	r3, [pc, #292]	; (80071c8 <select_noise_models+0x170>)
 80070a2:	62fb      	str	r3, [r7, #44]	; 0x2c
            barometer_stdev = 1.869;
 80070a4:	4b49      	ldr	r3, [pc, #292]	; (80071cc <select_noise_models+0x174>)
 80070a6:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 80070a8:	e013      	b.n	80070d2 <select_noise_models+0x7a>
        case THRUSTING:
            accelerometer_x_stdev = 1.250775;
 80070aa:	4b49      	ldr	r3, [pc, #292]	; (80071d0 <select_noise_models+0x178>)
 80070ac:	62fb      	str	r3, [r7, #44]	; 0x2c
            barometer_stdev = 13.000;
 80070ae:	4b49      	ldr	r3, [pc, #292]	; (80071d4 <select_noise_models+0x17c>)
 80070b0:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 80070b2:	e00e      	b.n	80070d2 <select_noise_models+0x7a>
        case BIAS_RESET:
        case APOGEE_APPROACH:
        case CONTROL:
        case COASTING:
            accelerometer_x_stdev = 0.61803;
 80070b4:	4b48      	ldr	r3, [pc, #288]	; (80071d8 <select_noise_models+0x180>)
 80070b6:	62fb      	str	r3, [r7, #44]	; 0x2c
            barometer_stdev = 7.380;
 80070b8:	4b48      	ldr	r3, [pc, #288]	; (80071dc <select_noise_models+0x184>)
 80070ba:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 80070bc:	e009      	b.n	80070d2 <select_noise_models+0x7a>
        case DROGUE_DESCENT:
        case MAIN_DESCENT:
            accelerometer_x_stdev = 1.955133;
 80070be:	4b48      	ldr	r3, [pc, #288]	; (80071e0 <select_noise_models+0x188>)
 80070c0:	62fb      	str	r3, [r7, #44]	; 0x2c
            barometer_stdev = 3.896;
 80070c2:	4b48      	ldr	r3, [pc, #288]	; (80071e4 <select_noise_models+0x18c>)
 80070c4:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 80070c6:	e004      	b.n	80070d2 <select_noise_models+0x7a>
        case BALLISTIC_DESCENT:
            accelerometer_x_stdev = 0.61803;
 80070c8:	4b43      	ldr	r3, [pc, #268]	; (80071d8 <select_noise_models+0x180>)
 80070ca:	62fb      	str	r3, [r7, #44]	; 0x2c
            barometer_stdev = 7.380;
 80070cc:	4b43      	ldr	r3, [pc, #268]	; (80071dc <select_noise_models+0x184>)
 80070ce:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 80070d0:	bf00      	nop
    }

    for(int i = 0; i < NUMBER_PROCESS_NOISE; i++){
 80070d2:	2300      	movs	r3, #0
 80070d4:	627b      	str	r3, [r7, #36]	; 0x24
 80070d6:	e01b      	b.n	8007110 <select_noise_models+0xb8>
        state_est_state->kf_state.Q[i][i] = pow(accelerometer_x_stdev, 2);
 80070d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070da:	f7f9 fa35 	bl	8000548 <__aeabi_f2d>
 80070de:	4603      	mov	r3, r0
 80070e0:	460c      	mov	r4, r1
 80070e2:	ed9f 1b37 	vldr	d1, [pc, #220]	; 80071c0 <select_noise_models+0x168>
 80070e6:	ec44 3b10 	vmov	d0, r3, r4
 80070ea:	f00b ffab 	bl	8013044 <pow>
 80070ee:	ec54 3b10 	vmov	r3, r4, d0
 80070f2:	4618      	mov	r0, r3
 80070f4:	4621      	mov	r1, r4
 80070f6:	f7f9 fd77 	bl	8000be8 <__aeabi_d2f>
 80070fa:	4601      	mov	r1, r0
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007100:	3331      	adds	r3, #49	; 0x31
 8007102:	00db      	lsls	r3, r3, #3
 8007104:	4413      	add	r3, r2
 8007106:	3308      	adds	r3, #8
 8007108:	6019      	str	r1, [r3, #0]
    for(int i = 0; i < NUMBER_PROCESS_NOISE; i++){
 800710a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710c:	3301      	adds	r3, #1
 800710e:	627b      	str	r3, [r7, #36]	; 0x24
 8007110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007112:	2b00      	cmp	r3, #0
 8007114:	dde0      	ble.n	80070d8 <select_noise_models+0x80>
    }

    float p[1];
    float h[1] = {state_est_state->kf_state.x_est[0]};
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800711c:	613b      	str	r3, [r7, #16]
    bool h_active[1] = {true};
 800711e:	2301      	movs	r3, #1
 8007120:	733b      	strb	r3, [r7, #12]
    altitudeAGL2pressure(&state_est_state->env, 1, h, h_active, p);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f503 7078 	add.w	r0, r3, #992	; 0x3e0
 8007128:	f107 010c 	add.w	r1, r7, #12
 800712c:	f107 0210 	add.w	r2, r7, #16
 8007130:	f107 0314 	add.w	r3, r7, #20
 8007134:	9300      	str	r3, [sp, #0]
 8007136:	460b      	mov	r3, r1
 8007138:	2101      	movs	r1, #1
 800713a:	f7fe febd 	bl	8005eb8 <altitudeAGL2pressure>
    float h_grad = altitude_gradient(&state_est_state->env, p[0]);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8007144:	edd7 7a05 	vldr	s15, [r7, #20]
 8007148:	eeb0 0a67 	vmov.f32	s0, s15
 800714c:	4618      	mov	r0, r3
 800714e:	f7fe ff1b 	bl	8005f88 <altitude_gradient>
 8007152:	ed87 0a07 	vstr	s0, [r7, #28]
    float altitude_stdev = fabsf(barometer_stdev * h_grad);
 8007156:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800715a:	edd7 7a07 	vldr	s15, [r7, #28]
 800715e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007162:	eef0 7ae7 	vabs.f32	s15, s15
 8007166:	edc7 7a06 	vstr	s15, [r7, #24]

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 800716a:	2300      	movs	r3, #0
 800716c:	623b      	str	r3, [r7, #32]
 800716e:	e01d      	b.n	80071ac <select_noise_models+0x154>
        state_est_state->kf_state.R[i][i] = pow(altitude_stdev, 2);
 8007170:	69b8      	ldr	r0, [r7, #24]
 8007172:	f7f9 f9e9 	bl	8000548 <__aeabi_f2d>
 8007176:	4603      	mov	r3, r0
 8007178:	460c      	mov	r4, r1
 800717a:	ed9f 1b11 	vldr	d1, [pc, #68]	; 80071c0 <select_noise_models+0x168>
 800717e:	ec44 3b10 	vmov	d0, r3, r4
 8007182:	f00b ff5f 	bl	8013044 <pow>
 8007186:	ec54 3b10 	vmov	r3, r4, d0
 800718a:	4618      	mov	r0, r3
 800718c:	4621      	mov	r1, r4
 800718e:	f7f9 fd2b 	bl	8000be8 <__aeabi_d2f>
 8007192:	6879      	ldr	r1, [r7, #4]
 8007194:	6a3a      	ldr	r2, [r7, #32]
 8007196:	4613      	mov	r3, r2
 8007198:	005b      	lsls	r3, r3, #1
 800719a:	4413      	add	r3, r2
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	440b      	add	r3, r1
 80071a0:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80071a4:	6018      	str	r0, [r3, #0]
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 80071a6:	6a3b      	ldr	r3, [r7, #32]
 80071a8:	3301      	adds	r3, #1
 80071aa:	623b      	str	r3, [r7, #32]
 80071ac:	6a3b      	ldr	r3, [r7, #32]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	ddde      	ble.n	8007170 <select_noise_models+0x118>
    }

    #if defined(USE_SENSOR_ELIMINATION_BY_EXTRAPOLATION) && USE_SENSOR_ELIMINATION_BY_EXTRAPOLATION == true
        state_est_state->baro_roll_mem.noise_stdev = barometer_stdev;
    #endif
}
 80071b2:	bf00      	nop
 80071b4:	3734      	adds	r7, #52	; 0x34
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd90      	pop	{r4, r7, pc}
 80071ba:	bf00      	nop
 80071bc:	f3af 8000 	nop.w
 80071c0:	00000000 	.word	0x00000000
 80071c4:	40000000 	.word	0x40000000
 80071c8:	3c97e316 	.word	0x3c97e316
 80071cc:	3fef3b64 	.word	0x3fef3b64
 80071d0:	3fa01965 	.word	0x3fa01965
 80071d4:	41500000 	.word	0x41500000
 80071d8:	3f1e3737 	.word	0x3f1e3737
 80071dc:	40ec28f6 	.word	0x40ec28f6
 80071e0:	3ffa41cc 	.word	0x3ffa41cc
 80071e4:	40795810 	.word	0x40795810

080071e8 <sensor_elimination_by_stdev>:

void sensor_elimination_by_stdev(int n, float measurements[n], bool measurement_active[n]) {
 80071e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071ea:	b08b      	sub	sp, #44	; 0x2c
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	60b9      	str	r1, [r7, #8]
 80071f2:	607a      	str	r2, [r7, #4]
    /* calculate mean of the sample */
    int num_active = 0;
 80071f4:	2300      	movs	r3, #0
 80071f6:	627b      	str	r3, [r7, #36]	; 0x24
    float mean = 0;
 80071f8:	f04f 0300 	mov.w	r3, #0
 80071fc:	623b      	str	r3, [r7, #32]
    for (int i = 0; i < n; i++){
 80071fe:	2300      	movs	r3, #0
 8007200:	61fb      	str	r3, [r7, #28]
 8007202:	e017      	b.n	8007234 <sensor_elimination_by_stdev+0x4c>
        if (measurement_active[i]) {
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	4413      	add	r3, r2
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d00e      	beq.n	800722e <sensor_elimination_by_stdev+0x46>
            num_active += 1;
 8007210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007212:	3301      	adds	r3, #1
 8007214:	627b      	str	r3, [r7, #36]	; 0x24
            mean += measurements[i];
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	009b      	lsls	r3, r3, #2
 800721a:	68ba      	ldr	r2, [r7, #8]
 800721c:	4413      	add	r3, r2
 800721e:	edd3 7a00 	vldr	s15, [r3]
 8007222:	ed97 7a08 	vldr	s14, [r7, #32]
 8007226:	ee77 7a27 	vadd.f32	s15, s14, s15
 800722a:	edc7 7a08 	vstr	s15, [r7, #32]
    for (int i = 0; i < n; i++){
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	3301      	adds	r3, #1
 8007232:	61fb      	str	r3, [r7, #28]
 8007234:	69fa      	ldr	r2, [r7, #28]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	429a      	cmp	r2, r3
 800723a:	dbe3      	blt.n	8007204 <sensor_elimination_by_stdev+0x1c>
        }
    }
    if (num_active > 0){
 800723c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723e:	2b00      	cmp	r3, #0
 8007240:	dd0a      	ble.n	8007258 <sensor_elimination_by_stdev+0x70>
        mean /= num_active;
 8007242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007244:	ee07 3a90 	vmov	s15, r3
 8007248:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800724c:	edd7 6a08 	vldr	s13, [r7, #32]
 8007250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007254:	edc7 7a08 	vstr	s15, [r7, #32]
    }

    /* calculate the standard deviation of the sample */
    float stdev = 0;
 8007258:	f04f 0300 	mov.w	r3, #0
 800725c:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; ++i) {
 800725e:	2300      	movs	r3, #0
 8007260:	617b      	str	r3, [r7, #20]
 8007262:	e033      	b.n	80072cc <sensor_elimination_by_stdev+0xe4>
        if (measurement_active[i]) {
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	4413      	add	r3, r2
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d02a      	beq.n	80072c6 <sensor_elimination_by_stdev+0xde>
            stdev += pow(measurements[i] - mean, 2);
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	4413      	add	r3, r2
 8007278:	ed93 7a00 	vldr	s14, [r3]
 800727c:	edd7 7a08 	vldr	s15, [r7, #32]
 8007280:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007284:	ee17 0a90 	vmov	r0, s15
 8007288:	f7f9 f95e 	bl	8000548 <__aeabi_f2d>
 800728c:	4603      	mov	r3, r0
 800728e:	460c      	mov	r4, r1
 8007290:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 8007388 <sensor_elimination_by_stdev+0x1a0>
 8007294:	ec44 3b10 	vmov	d0, r3, r4
 8007298:	f00b fed4 	bl	8013044 <pow>
 800729c:	ec56 5b10 	vmov	r5, r6, d0
 80072a0:	69b8      	ldr	r0, [r7, #24]
 80072a2:	f7f9 f951 	bl	8000548 <__aeabi_f2d>
 80072a6:	4603      	mov	r3, r0
 80072a8:	460c      	mov	r4, r1
 80072aa:	461a      	mov	r2, r3
 80072ac:	4623      	mov	r3, r4
 80072ae:	4628      	mov	r0, r5
 80072b0:	4631      	mov	r1, r6
 80072b2:	f7f8 ffeb 	bl	800028c <__adddf3>
 80072b6:	4603      	mov	r3, r0
 80072b8:	460c      	mov	r4, r1
 80072ba:	4618      	mov	r0, r3
 80072bc:	4621      	mov	r1, r4
 80072be:	f7f9 fc93 	bl	8000be8 <__aeabi_d2f>
 80072c2:	4603      	mov	r3, r0
 80072c4:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; ++i) {
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	3301      	adds	r3, #1
 80072ca:	617b      	str	r3, [r7, #20]
 80072cc:	697a      	ldr	r2, [r7, #20]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	dbc7      	blt.n	8007264 <sensor_elimination_by_stdev+0x7c>
        }
    }
    if (num_active > 0){
 80072d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	dd1a      	ble.n	8007310 <sensor_elimination_by_stdev+0x128>
        stdev = sqrt(stdev / num_active);
 80072da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072dc:	ee07 3a90 	vmov	s15, r3
 80072e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072e4:	ed97 7a06 	vldr	s14, [r7, #24]
 80072e8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80072ec:	ee16 0a90 	vmov	r0, s13
 80072f0:	f7f9 f92a 	bl	8000548 <__aeabi_f2d>
 80072f4:	4603      	mov	r3, r0
 80072f6:	460c      	mov	r4, r1
 80072f8:	ec44 3b10 	vmov	d0, r3, r4
 80072fc:	f00c f812 	bl	8013324 <sqrt>
 8007300:	ec54 3b10 	vmov	r3, r4, d0
 8007304:	4618      	mov	r0, r3
 8007306:	4621      	mov	r1, r4
 8007308:	f7f9 fc6e 	bl	8000be8 <__aeabi_d2f>
 800730c:	4603      	mov	r3, r0
 800730e:	61bb      	str	r3, [r7, #24]
    }

    /* deactivate measurements if they are too far off the mean */
    for (int i = 0; i < n; ++i) {
 8007310:	2300      	movs	r3, #0
 8007312:	613b      	str	r3, [r7, #16]
 8007314:	e02f      	b.n	8007376 <sensor_elimination_by_stdev+0x18e>
        if (measurement_active[i]) {
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	4413      	add	r3, r2
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d026      	beq.n	8007370 <sensor_elimination_by_stdev+0x188>
            if (fabsf(measurements[i] - mean) > 2.0 * stdev) {
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	68ba      	ldr	r2, [r7, #8]
 8007328:	4413      	add	r3, r2
 800732a:	ed93 7a00 	vldr	s14, [r3]
 800732e:	edd7 7a08 	vldr	s15, [r7, #32]
 8007332:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007336:	eef0 7ae7 	vabs.f32	s15, s15
 800733a:	ee17 0a90 	vmov	r0, s15
 800733e:	f7f9 f903 	bl	8000548 <__aeabi_f2d>
 8007342:	4604      	mov	r4, r0
 8007344:	460d      	mov	r5, r1
 8007346:	69b8      	ldr	r0, [r7, #24]
 8007348:	f7f9 f8fe 	bl	8000548 <__aeabi_f2d>
 800734c:	4602      	mov	r2, r0
 800734e:	460b      	mov	r3, r1
 8007350:	f7f8 ff9c 	bl	800028c <__adddf3>
 8007354:	4602      	mov	r2, r0
 8007356:	460b      	mov	r3, r1
 8007358:	4620      	mov	r0, r4
 800735a:	4629      	mov	r1, r5
 800735c:	f7f9 fbdc 	bl	8000b18 <__aeabi_dcmpgt>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d004      	beq.n	8007370 <sensor_elimination_by_stdev+0x188>
                measurement_active[i] = false;
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	4413      	add	r3, r2
 800736c:	2200      	movs	r2, #0
 800736e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < n; ++i) {
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	3301      	adds	r3, #1
 8007374:	613b      	str	r3, [r7, #16]
 8007376:	693a      	ldr	r2, [r7, #16]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	429a      	cmp	r2, r3
 800737c:	dbcb      	blt.n	8007316 <sensor_elimination_by_stdev+0x12e>
            }
        }
    }
}
 800737e:	bf00      	nop
 8007380:	372c      	adds	r7, #44	; 0x2c
 8007382:	46bd      	mov	sp, r7
 8007384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007386:	bf00      	nop
 8007388:	00000000 	.word	0x00000000
 800738c:	40000000 	.word	0x40000000

08007390 <update_mav>:
        extrapolation_rolling_memory->memory_length += num_active;
    }

}

float update_mav(mav_memory_t *mav_memory, timestamp_t t, float measurement, bool measurement_active) {
 8007390:	b480      	push	{r7}
 8007392:	b089      	sub	sp, #36	; 0x24
 8007394:	af00      	add	r7, sp, #0
 8007396:	60f8      	str	r0, [r7, #12]
 8007398:	60b9      	str	r1, [r7, #8]
 800739a:	ed87 0a01 	vstr	s0, [r7, #4]
 800739e:	4613      	mov	r3, r2
 80073a0:	70fb      	strb	r3, [r7, #3]
    if (measurement_active == true) {
 80073a2:	78fb      	ldrb	r3, [r7, #3]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d06b      	beq.n	8007480 <update_mav+0xf0>
        if (mav_memory->memory_length < MAX_LENGTH_MOVING_AVERAGE) {
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2b09      	cmp	r3, #9
 80073ae:	dc04      	bgt.n	80073ba <update_mav+0x2a>
            mav_memory->memory_length += 1;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	1c5a      	adds	r2, r3, #1
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	601a      	str	r2, [r3, #0]
        }

        for (int i=(mav_memory->memory_length-1); i > 0; i--) {
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	3b01      	subs	r3, #1
 80073c0:	61fb      	str	r3, [r7, #28]
 80073c2:	e02b      	b.n	800741c <update_mav+0x8c>
		    mav_memory->timestamps[i] = mav_memory->timestamps[i-1];
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	3b01      	subs	r3, #1
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	4413      	add	r3, r2
 80073ce:	685a      	ldr	r2, [r3, #4]
 80073d0:	68f9      	ldr	r1, [r7, #12]
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	440b      	add	r3, r1
 80073d8:	605a      	str	r2, [r3, #4]
            mav_memory->values[i] = mav_memory->values[i-1];
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	3b01      	subs	r3, #1
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	330a      	adds	r3, #10
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	4413      	add	r3, r2
 80073e6:	3304      	adds	r3, #4
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	68f9      	ldr	r1, [r7, #12]
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	330a      	adds	r3, #10
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	440b      	add	r3, r1
 80073f4:	3304      	adds	r3, #4
 80073f6:	601a      	str	r2, [r3, #0]
            mav_memory->avg_values[i] = mav_memory->avg_values[i-1];
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	3b01      	subs	r3, #1
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	3314      	adds	r3, #20
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	4413      	add	r3, r2
 8007404:	3304      	adds	r3, #4
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	68f9      	ldr	r1, [r7, #12]
 800740a:	69fb      	ldr	r3, [r7, #28]
 800740c:	3314      	adds	r3, #20
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	440b      	add	r3, r1
 8007412:	3304      	adds	r3, #4
 8007414:	601a      	str	r2, [r3, #0]
        for (int i=(mav_memory->memory_length-1); i > 0; i--) {
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	3b01      	subs	r3, #1
 800741a:	61fb      	str	r3, [r7, #28]
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	2b00      	cmp	r3, #0
 8007420:	dcd0      	bgt.n	80073c4 <update_mav+0x34>
        }
        
        mav_memory->timestamps[0] = t;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	68ba      	ldr	r2, [r7, #8]
 8007426:	605a      	str	r2, [r3, #4]
        mav_memory->values[0] = measurement;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	62da      	str	r2, [r3, #44]	; 0x2c

        float values_sum = 0;
 800742e:	f04f 0300 	mov.w	r3, #0
 8007432:	61bb      	str	r3, [r7, #24]
        for (int i=0; i < mav_memory->memory_length; i++) {
 8007434:	2300      	movs	r3, #0
 8007436:	617b      	str	r3, [r7, #20]
 8007438:	e010      	b.n	800745c <update_mav+0xcc>
            values_sum += mav_memory->values[i];
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	330a      	adds	r3, #10
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	4413      	add	r3, r2
 8007444:	3304      	adds	r3, #4
 8007446:	edd3 7a00 	vldr	s15, [r3]
 800744a:	ed97 7a06 	vldr	s14, [r7, #24]
 800744e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007452:	edc7 7a06 	vstr	s15, [r7, #24]
        for (int i=0; i < mav_memory->memory_length; i++) {
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	3301      	adds	r3, #1
 800745a:	617b      	str	r3, [r7, #20]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	697a      	ldr	r2, [r7, #20]
 8007462:	429a      	cmp	r2, r3
 8007464:	dbe9      	blt.n	800743a <update_mav+0xaa>
        }

        mav_memory->avg_values[0] = values_sum / (float)mav_memory->memory_length;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	ee07 3a90 	vmov	s15, r3
 800746e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007472:	edd7 6a06 	vldr	s13, [r7, #24]
 8007476:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
    } 

    return mav_memory->avg_values[0];
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007484:	ee07 3a90 	vmov	s15, r3
}
 8007488:	eeb0 0a67 	vmov.f32	s0, s15
 800748c:	3724      	adds	r7, #36	; 0x24
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr
	...

08007498 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800749c:	4b0e      	ldr	r3, [pc, #56]	; (80074d8 <HAL_Init+0x40>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a0d      	ldr	r2, [pc, #52]	; (80074d8 <HAL_Init+0x40>)
 80074a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80074a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80074a8:	4b0b      	ldr	r3, [pc, #44]	; (80074d8 <HAL_Init+0x40>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a0a      	ldr	r2, [pc, #40]	; (80074d8 <HAL_Init+0x40>)
 80074ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80074b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80074b4:	4b08      	ldr	r3, [pc, #32]	; (80074d8 <HAL_Init+0x40>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a07      	ldr	r2, [pc, #28]	; (80074d8 <HAL_Init+0x40>)
 80074ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80074c0:	2003      	movs	r0, #3
 80074c2:	f000 fd8b 	bl	8007fdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80074c6:	2000      	movs	r0, #0
 80074c8:	f000 f808 	bl	80074dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80074cc:	f7fc faa0 	bl	8003a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	40023c00 	.word	0x40023c00

080074dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80074e4:	4b12      	ldr	r3, [pc, #72]	; (8007530 <HAL_InitTick+0x54>)
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	4b12      	ldr	r3, [pc, #72]	; (8007534 <HAL_InitTick+0x58>)
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	4619      	mov	r1, r3
 80074ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80074f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80074f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074fa:	4618      	mov	r0, r3
 80074fc:	f000 fda3 	bl	8008046 <HAL_SYSTICK_Config>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d001      	beq.n	800750a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	e00e      	b.n	8007528 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2b0f      	cmp	r3, #15
 800750e:	d80a      	bhi.n	8007526 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007510:	2200      	movs	r2, #0
 8007512:	6879      	ldr	r1, [r7, #4]
 8007514:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007518:	f000 fd6b 	bl	8007ff2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800751c:	4a06      	ldr	r2, [pc, #24]	; (8007538 <HAL_InitTick+0x5c>)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007522:	2300      	movs	r3, #0
 8007524:	e000      	b.n	8007528 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
}
 8007528:	4618      	mov	r0, r3
 800752a:	3708      	adds	r7, #8
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	20000158 	.word	0x20000158
 8007534:	20000164 	.word	0x20000164
 8007538:	20000160 	.word	0x20000160

0800753c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800753c:	b480      	push	{r7}
 800753e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007540:	4b06      	ldr	r3, [pc, #24]	; (800755c <HAL_IncTick+0x20>)
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	461a      	mov	r2, r3
 8007546:	4b06      	ldr	r3, [pc, #24]	; (8007560 <HAL_IncTick+0x24>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4413      	add	r3, r2
 800754c:	4a04      	ldr	r2, [pc, #16]	; (8007560 <HAL_IncTick+0x24>)
 800754e:	6013      	str	r3, [r2, #0]
}
 8007550:	bf00      	nop
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	20000164 	.word	0x20000164
 8007560:	20015cb4 	.word	0x20015cb4

08007564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007564:	b480      	push	{r7}
 8007566:	af00      	add	r7, sp, #0
  return uwTick;
 8007568:	4b03      	ldr	r3, [pc, #12]	; (8007578 <HAL_GetTick+0x14>)
 800756a:	681b      	ldr	r3, [r3, #0]
}
 800756c:	4618      	mov	r0, r3
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr
 8007576:	bf00      	nop
 8007578:	20015cb4 	.word	0x20015cb4

0800757c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007584:	f7ff ffee 	bl	8007564 <HAL_GetTick>
 8007588:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007594:	d005      	beq.n	80075a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007596:	4b09      	ldr	r3, [pc, #36]	; (80075bc <HAL_Delay+0x40>)
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	461a      	mov	r2, r3
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	4413      	add	r3, r2
 80075a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80075a2:	bf00      	nop
 80075a4:	f7ff ffde 	bl	8007564 <HAL_GetTick>
 80075a8:	4602      	mov	r2, r0
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	1ad3      	subs	r3, r2, r3
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d8f7      	bhi.n	80075a4 <HAL_Delay+0x28>
  {
  }
}
 80075b4:	bf00      	nop
 80075b6:	3710      	adds	r7, #16
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	20000164 	.word	0x20000164

080075c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80075c8:	2300      	movs	r3, #0
 80075ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d101      	bne.n	80075d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	e033      	b.n	800763e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d109      	bne.n	80075f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f7fa f914 	bl	800180c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2200      	movs	r2, #0
 80075ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f6:	f003 0310 	and.w	r3, r3, #16
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d118      	bne.n	8007630 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007602:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007606:	f023 0302 	bic.w	r3, r3, #2
 800760a:	f043 0202 	orr.w	r2, r3, #2
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 fa94 	bl	8007b40 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007622:	f023 0303 	bic.w	r3, r3, #3
 8007626:	f043 0201 	orr.w	r2, r3, #1
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	641a      	str	r2, [r3, #64]	; 0x40
 800762e:	e001      	b.n	8007634 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800763c:	7bfb      	ldrb	r3, [r7, #15]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
	...

08007648 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b086      	sub	sp, #24
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8007654:	2300      	movs	r3, #0
 8007656:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800765e:	2b01      	cmp	r3, #1
 8007660:	d101      	bne.n	8007666 <HAL_ADC_Start_DMA+0x1e>
 8007662:	2302      	movs	r3, #2
 8007664:	e0cc      	b.n	8007800 <HAL_ADC_Start_DMA+0x1b8>
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	f003 0301 	and.w	r3, r3, #1
 8007678:	2b01      	cmp	r3, #1
 800767a:	d018      	beq.n	80076ae <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	689a      	ldr	r2, [r3, #8]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f042 0201 	orr.w	r2, r2, #1
 800768a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800768c:	4b5e      	ldr	r3, [pc, #376]	; (8007808 <HAL_ADC_Start_DMA+0x1c0>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a5e      	ldr	r2, [pc, #376]	; (800780c <HAL_ADC_Start_DMA+0x1c4>)
 8007692:	fba2 2303 	umull	r2, r3, r2, r3
 8007696:	0c9a      	lsrs	r2, r3, #18
 8007698:	4613      	mov	r3, r2
 800769a:	005b      	lsls	r3, r3, #1
 800769c:	4413      	add	r3, r2
 800769e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80076a0:	e002      	b.n	80076a8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	3b01      	subs	r3, #1
 80076a6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1f9      	bne.n	80076a2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	f003 0301 	and.w	r3, r3, #1
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	f040 80a0 	bne.w	80077fe <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80076c6:	f023 0301 	bic.w	r3, r3, #1
 80076ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d007      	beq.n	80076f0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80076e8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076fc:	d106      	bne.n	800770c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007702:	f023 0206 	bic.w	r2, r3, #6
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	645a      	str	r2, [r3, #68]	; 0x44
 800770a:	e002      	b.n	8007712 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2200      	movs	r2, #0
 8007710:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2200      	movs	r2, #0
 8007716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800771a:	4b3d      	ldr	r3, [pc, #244]	; (8007810 <HAL_ADC_Start_DMA+0x1c8>)
 800771c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007722:	4a3c      	ldr	r2, [pc, #240]	; (8007814 <HAL_ADC_Start_DMA+0x1cc>)
 8007724:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800772a:	4a3b      	ldr	r2, [pc, #236]	; (8007818 <HAL_ADC_Start_DMA+0x1d0>)
 800772c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007732:	4a3a      	ldr	r2, [pc, #232]	; (800781c <HAL_ADC_Start_DMA+0x1d4>)
 8007734:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800773e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	685a      	ldr	r2, [r3, #4]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800774e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	689a      	ldr	r2, [r3, #8]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800775e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	334c      	adds	r3, #76	; 0x4c
 800776a:	4619      	mov	r1, r3
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f000 fd24 	bl	80081bc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	f003 031f 	and.w	r3, r3, #31
 800777c:	2b00      	cmp	r3, #0
 800777e:	d12a      	bne.n	80077d6 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a26      	ldr	r2, [pc, #152]	; (8007820 <HAL_ADC_Start_DMA+0x1d8>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d015      	beq.n	80077b6 <HAL_ADC_Start_DMA+0x16e>
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a25      	ldr	r2, [pc, #148]	; (8007824 <HAL_ADC_Start_DMA+0x1dc>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d105      	bne.n	80077a0 <HAL_ADC_Start_DMA+0x158>
 8007794:	4b1e      	ldr	r3, [pc, #120]	; (8007810 <HAL_ADC_Start_DMA+0x1c8>)
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	f003 031f 	and.w	r3, r3, #31
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00a      	beq.n	80077b6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a20      	ldr	r2, [pc, #128]	; (8007828 <HAL_ADC_Start_DMA+0x1e0>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d129      	bne.n	80077fe <HAL_ADC_Start_DMA+0x1b6>
 80077aa:	4b19      	ldr	r3, [pc, #100]	; (8007810 <HAL_ADC_Start_DMA+0x1c8>)
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	f003 031f 	and.w	r3, r3, #31
 80077b2:	2b0f      	cmp	r3, #15
 80077b4:	d823      	bhi.n	80077fe <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d11c      	bne.n	80077fe <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	689a      	ldr	r2, [r3, #8]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80077d2:	609a      	str	r2, [r3, #8]
 80077d4:	e013      	b.n	80077fe <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a11      	ldr	r2, [pc, #68]	; (8007820 <HAL_ADC_Start_DMA+0x1d8>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d10e      	bne.n	80077fe <HAL_ADC_Start_DMA+0x1b6>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d107      	bne.n	80077fe <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	689a      	ldr	r2, [r3, #8]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80077fc:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3718      	adds	r7, #24
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	20000158 	.word	0x20000158
 800780c:	431bde83 	.word	0x431bde83
 8007810:	40012300 	.word	0x40012300
 8007814:	08007d39 	.word	0x08007d39
 8007818:	08007df3 	.word	0x08007df3
 800781c:	08007e0f 	.word	0x08007e0f
 8007820:	40012000 	.word	0x40012000
 8007824:	40012100 	.word	0x40012100
 8007828:	40012200 	.word	0x40012200

0800782c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007834:	2300      	movs	r3, #0
 8007836:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800783e:	2b01      	cmp	r3, #1
 8007840:	d101      	bne.n	8007846 <HAL_ADC_Stop_DMA+0x1a>
 8007842:	2302      	movs	r3, #2
 8007844:	e038      	b.n	80078b8 <HAL_ADC_Stop_DMA+0x8c>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2201      	movs	r2, #1
 800784a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	689a      	ldr	r2, [r3, #8]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f022 0201 	bic.w	r2, r2, #1
 800785c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	f003 0301 	and.w	r3, r3, #1
 8007868:	2b00      	cmp	r3, #0
 800786a:	d120      	bne.n	80078ae <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	689a      	ldr	r2, [r3, #8]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800787a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007880:	4618      	mov	r0, r3
 8007882:	f000 fcf3 	bl	800826c <HAL_DMA_Abort>
 8007886:	4603      	mov	r3, r0
 8007888:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	685a      	ldr	r2, [r3, #4]
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8007898:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80078a2:	f023 0301 	bic.w	r3, r3, #1
 80078a6:	f043 0201 	orr.w	r2, r3, #1
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80078b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3710      	adds	r7, #16
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80078c8:	bf00      	nop
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80078dc:	bf00      	nop
 80078de:	370c      	adds	r7, #12
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80078f0:	bf00      	nop
 80078f2:	370c      	adds	r7, #12
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b085      	sub	sp, #20
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007906:	2300      	movs	r3, #0
 8007908:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007910:	2b01      	cmp	r3, #1
 8007912:	d101      	bne.n	8007918 <HAL_ADC_ConfigChannel+0x1c>
 8007914:	2302      	movs	r3, #2
 8007916:	e105      	b.n	8007b24 <HAL_ADC_ConfigChannel+0x228>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2b09      	cmp	r3, #9
 8007926:	d925      	bls.n	8007974 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68d9      	ldr	r1, [r3, #12]
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	b29b      	uxth	r3, r3
 8007934:	461a      	mov	r2, r3
 8007936:	4613      	mov	r3, r2
 8007938:	005b      	lsls	r3, r3, #1
 800793a:	4413      	add	r3, r2
 800793c:	3b1e      	subs	r3, #30
 800793e:	2207      	movs	r2, #7
 8007940:	fa02 f303 	lsl.w	r3, r2, r3
 8007944:	43da      	mvns	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	400a      	ands	r2, r1
 800794c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	68d9      	ldr	r1, [r3, #12]
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	689a      	ldr	r2, [r3, #8]
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	b29b      	uxth	r3, r3
 800795e:	4618      	mov	r0, r3
 8007960:	4603      	mov	r3, r0
 8007962:	005b      	lsls	r3, r3, #1
 8007964:	4403      	add	r3, r0
 8007966:	3b1e      	subs	r3, #30
 8007968:	409a      	lsls	r2, r3
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	430a      	orrs	r2, r1
 8007970:	60da      	str	r2, [r3, #12]
 8007972:	e022      	b.n	80079ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	6919      	ldr	r1, [r3, #16]
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	b29b      	uxth	r3, r3
 8007980:	461a      	mov	r2, r3
 8007982:	4613      	mov	r3, r2
 8007984:	005b      	lsls	r3, r3, #1
 8007986:	4413      	add	r3, r2
 8007988:	2207      	movs	r2, #7
 800798a:	fa02 f303 	lsl.w	r3, r2, r3
 800798e:	43da      	mvns	r2, r3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	400a      	ands	r2, r1
 8007996:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	6919      	ldr	r1, [r3, #16]
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	689a      	ldr	r2, [r3, #8]
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	4618      	mov	r0, r3
 80079aa:	4603      	mov	r3, r0
 80079ac:	005b      	lsls	r3, r3, #1
 80079ae:	4403      	add	r3, r0
 80079b0:	409a      	lsls	r2, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	430a      	orrs	r2, r1
 80079b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	2b06      	cmp	r3, #6
 80079c0:	d824      	bhi.n	8007a0c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	685a      	ldr	r2, [r3, #4]
 80079cc:	4613      	mov	r3, r2
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	4413      	add	r3, r2
 80079d2:	3b05      	subs	r3, #5
 80079d4:	221f      	movs	r2, #31
 80079d6:	fa02 f303 	lsl.w	r3, r2, r3
 80079da:	43da      	mvns	r2, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	400a      	ands	r2, r1
 80079e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	4618      	mov	r0, r3
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	685a      	ldr	r2, [r3, #4]
 80079f6:	4613      	mov	r3, r2
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	4413      	add	r3, r2
 80079fc:	3b05      	subs	r3, #5
 80079fe:	fa00 f203 	lsl.w	r2, r0, r3
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	430a      	orrs	r2, r1
 8007a08:	635a      	str	r2, [r3, #52]	; 0x34
 8007a0a:	e04c      	b.n	8007aa6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	2b0c      	cmp	r3, #12
 8007a12:	d824      	bhi.n	8007a5e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	685a      	ldr	r2, [r3, #4]
 8007a1e:	4613      	mov	r3, r2
 8007a20:	009b      	lsls	r3, r3, #2
 8007a22:	4413      	add	r3, r2
 8007a24:	3b23      	subs	r3, #35	; 0x23
 8007a26:	221f      	movs	r2, #31
 8007a28:	fa02 f303 	lsl.w	r3, r2, r3
 8007a2c:	43da      	mvns	r2, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	400a      	ands	r2, r1
 8007a34:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	4618      	mov	r0, r3
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	685a      	ldr	r2, [r3, #4]
 8007a48:	4613      	mov	r3, r2
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	4413      	add	r3, r2
 8007a4e:	3b23      	subs	r3, #35	; 0x23
 8007a50:	fa00 f203 	lsl.w	r2, r0, r3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	430a      	orrs	r2, r1
 8007a5a:	631a      	str	r2, [r3, #48]	; 0x30
 8007a5c:	e023      	b.n	8007aa6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	685a      	ldr	r2, [r3, #4]
 8007a68:	4613      	mov	r3, r2
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	4413      	add	r3, r2
 8007a6e:	3b41      	subs	r3, #65	; 0x41
 8007a70:	221f      	movs	r2, #31
 8007a72:	fa02 f303 	lsl.w	r3, r2, r3
 8007a76:	43da      	mvns	r2, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	400a      	ands	r2, r1
 8007a7e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	685a      	ldr	r2, [r3, #4]
 8007a92:	4613      	mov	r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	4413      	add	r3, r2
 8007a98:	3b41      	subs	r3, #65	; 0x41
 8007a9a:	fa00 f203 	lsl.w	r2, r0, r3
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	430a      	orrs	r2, r1
 8007aa4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007aa6:	4b22      	ldr	r3, [pc, #136]	; (8007b30 <HAL_ADC_ConfigChannel+0x234>)
 8007aa8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a21      	ldr	r2, [pc, #132]	; (8007b34 <HAL_ADC_ConfigChannel+0x238>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d109      	bne.n	8007ac8 <HAL_ADC_ConfigChannel+0x1cc>
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2b12      	cmp	r3, #18
 8007aba:	d105      	bne.n	8007ac8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a19      	ldr	r2, [pc, #100]	; (8007b34 <HAL_ADC_ConfigChannel+0x238>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d123      	bne.n	8007b1a <HAL_ADC_ConfigChannel+0x21e>
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2b10      	cmp	r3, #16
 8007ad8:	d003      	beq.n	8007ae2 <HAL_ADC_ConfigChannel+0x1e6>
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2b11      	cmp	r3, #17
 8007ae0:	d11b      	bne.n	8007b1a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2b10      	cmp	r3, #16
 8007af4:	d111      	bne.n	8007b1a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007af6:	4b10      	ldr	r3, [pc, #64]	; (8007b38 <HAL_ADC_ConfigChannel+0x23c>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a10      	ldr	r2, [pc, #64]	; (8007b3c <HAL_ADC_ConfigChannel+0x240>)
 8007afc:	fba2 2303 	umull	r2, r3, r2, r3
 8007b00:	0c9a      	lsrs	r2, r3, #18
 8007b02:	4613      	mov	r3, r2
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	4413      	add	r3, r2
 8007b08:	005b      	lsls	r3, r3, #1
 8007b0a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007b0c:	e002      	b.n	8007b14 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	3b01      	subs	r3, #1
 8007b12:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d1f9      	bne.n	8007b0e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007b22:	2300      	movs	r3, #0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3714      	adds	r7, #20
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr
 8007b30:	40012300 	.word	0x40012300
 8007b34:	40012000 	.word	0x40012000
 8007b38:	20000158 	.word	0x20000158
 8007b3c:	431bde83 	.word	0x431bde83

08007b40 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007b48:	4b79      	ldr	r3, [pc, #484]	; (8007d30 <ADC_Init+0x1f0>)
 8007b4a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	685a      	ldr	r2, [r3, #4]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	431a      	orrs	r2, r3
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	685a      	ldr	r2, [r3, #4]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	6859      	ldr	r1, [r3, #4]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	021a      	lsls	r2, r3, #8
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	430a      	orrs	r2, r1
 8007b88:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	685a      	ldr	r2, [r3, #4]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007b98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	6859      	ldr	r1, [r3, #4]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	689a      	ldr	r2, [r3, #8]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	430a      	orrs	r2, r1
 8007baa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	689a      	ldr	r2, [r3, #8]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007bba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	6899      	ldr	r1, [r3, #8]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	68da      	ldr	r2, [r3, #12]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	430a      	orrs	r2, r1
 8007bcc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd2:	4a58      	ldr	r2, [pc, #352]	; (8007d34 <ADC_Init+0x1f4>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d022      	beq.n	8007c1e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	689a      	ldr	r2, [r3, #8]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007be6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	6899      	ldr	r1, [r3, #8]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	430a      	orrs	r2, r1
 8007bf8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	689a      	ldr	r2, [r3, #8]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007c08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	6899      	ldr	r1, [r3, #8]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	430a      	orrs	r2, r1
 8007c1a:	609a      	str	r2, [r3, #8]
 8007c1c:	e00f      	b.n	8007c3e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	689a      	ldr	r2, [r3, #8]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007c2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	689a      	ldr	r2, [r3, #8]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007c3c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	689a      	ldr	r2, [r3, #8]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f022 0202 	bic.w	r2, r2, #2
 8007c4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	6899      	ldr	r1, [r3, #8]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	7e1b      	ldrb	r3, [r3, #24]
 8007c58:	005a      	lsls	r2, r3, #1
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	430a      	orrs	r2, r1
 8007c60:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d01b      	beq.n	8007ca4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	685a      	ldr	r2, [r3, #4]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c7a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	685a      	ldr	r2, [r3, #4]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007c8a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	6859      	ldr	r1, [r3, #4]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c96:	3b01      	subs	r3, #1
 8007c98:	035a      	lsls	r2, r3, #13
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	430a      	orrs	r2, r1
 8007ca0:	605a      	str	r2, [r3, #4]
 8007ca2:	e007      	b.n	8007cb4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	685a      	ldr	r2, [r3, #4]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007cb2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007cc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	69db      	ldr	r3, [r3, #28]
 8007cce:	3b01      	subs	r3, #1
 8007cd0:	051a      	lsls	r2, r3, #20
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	430a      	orrs	r2, r1
 8007cd8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	689a      	ldr	r2, [r3, #8]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007ce8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	6899      	ldr	r1, [r3, #8]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007cf6:	025a      	lsls	r2, r3, #9
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	430a      	orrs	r2, r1
 8007cfe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	689a      	ldr	r2, [r3, #8]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	6899      	ldr	r1, [r3, #8]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	695b      	ldr	r3, [r3, #20]
 8007d1a:	029a      	lsls	r2, r3, #10
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	430a      	orrs	r2, r1
 8007d22:	609a      	str	r2, [r3, #8]
}
 8007d24:	bf00      	nop
 8007d26:	3714      	adds	r7, #20
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr
 8007d30:	40012300 	.word	0x40012300
 8007d34:	0f000001 	.word	0x0f000001

08007d38 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d44:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d13c      	bne.n	8007dcc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d56:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d12b      	bne.n	8007dc4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d127      	bne.n	8007dc4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d006      	beq.n	8007d90 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d119      	bne.n	8007dc4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	685a      	ldr	r2, [r3, #4]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f022 0220 	bic.w	r2, r2, #32
 8007d9e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d105      	bne.n	8007dc4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dbc:	f043 0201 	orr.w	r2, r3, #1
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007dc4:	68f8      	ldr	r0, [r7, #12]
 8007dc6:	f7ff fd7b 	bl	80078c0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007dca:	e00e      	b.n	8007dea <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd0:	f003 0310 	and.w	r3, r3, #16
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d003      	beq.n	8007de0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007dd8:	68f8      	ldr	r0, [r7, #12]
 8007dda:	f7ff fd85 	bl	80078e8 <HAL_ADC_ErrorCallback>
}
 8007dde:	e004      	b.n	8007dea <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	4798      	blx	r3
}
 8007dea:	bf00      	nop
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b084      	sub	sp, #16
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dfe:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	f7ff fd67 	bl	80078d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007e06:	bf00      	nop
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b084      	sub	sp, #16
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e1a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2240      	movs	r2, #64	; 0x40
 8007e20:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e26:	f043 0204 	orr.w	r2, r3, #4
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	f7ff fd5a 	bl	80078e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007e34:	bf00      	nop
 8007e36:	3710      	adds	r7, #16
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <__NVIC_SetPriorityGrouping>:
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f003 0307 	and.w	r3, r3, #7
 8007e4a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007e4c:	4b0c      	ldr	r3, [pc, #48]	; (8007e80 <__NVIC_SetPriorityGrouping+0x44>)
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007e52:	68ba      	ldr	r2, [r7, #8]
 8007e54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007e58:	4013      	ands	r3, r2
 8007e5a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007e64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007e6e:	4a04      	ldr	r2, [pc, #16]	; (8007e80 <__NVIC_SetPriorityGrouping+0x44>)
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	60d3      	str	r3, [r2, #12]
}
 8007e74:	bf00      	nop
 8007e76:	3714      	adds	r7, #20
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr
 8007e80:	e000ed00 	.word	0xe000ed00

08007e84 <__NVIC_GetPriorityGrouping>:
{
 8007e84:	b480      	push	{r7}
 8007e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007e88:	4b04      	ldr	r3, [pc, #16]	; (8007e9c <__NVIC_GetPriorityGrouping+0x18>)
 8007e8a:	68db      	ldr	r3, [r3, #12]
 8007e8c:	0a1b      	lsrs	r3, r3, #8
 8007e8e:	f003 0307 	and.w	r3, r3, #7
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr
 8007e9c:	e000ed00 	.word	0xe000ed00

08007ea0 <__NVIC_EnableIRQ>:
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	db0b      	blt.n	8007eca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007eb2:	79fb      	ldrb	r3, [r7, #7]
 8007eb4:	f003 021f 	and.w	r2, r3, #31
 8007eb8:	4907      	ldr	r1, [pc, #28]	; (8007ed8 <__NVIC_EnableIRQ+0x38>)
 8007eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ebe:	095b      	lsrs	r3, r3, #5
 8007ec0:	2001      	movs	r0, #1
 8007ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8007ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007eca:	bf00      	nop
 8007ecc:	370c      	adds	r7, #12
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	e000e100 	.word	0xe000e100

08007edc <__NVIC_SetPriority>:
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	6039      	str	r1, [r7, #0]
 8007ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	db0a      	blt.n	8007f06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	b2da      	uxtb	r2, r3
 8007ef4:	490c      	ldr	r1, [pc, #48]	; (8007f28 <__NVIC_SetPriority+0x4c>)
 8007ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007efa:	0112      	lsls	r2, r2, #4
 8007efc:	b2d2      	uxtb	r2, r2
 8007efe:	440b      	add	r3, r1
 8007f00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007f04:	e00a      	b.n	8007f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	b2da      	uxtb	r2, r3
 8007f0a:	4908      	ldr	r1, [pc, #32]	; (8007f2c <__NVIC_SetPriority+0x50>)
 8007f0c:	79fb      	ldrb	r3, [r7, #7]
 8007f0e:	f003 030f 	and.w	r3, r3, #15
 8007f12:	3b04      	subs	r3, #4
 8007f14:	0112      	lsls	r2, r2, #4
 8007f16:	b2d2      	uxtb	r2, r2
 8007f18:	440b      	add	r3, r1
 8007f1a:	761a      	strb	r2, [r3, #24]
}
 8007f1c:	bf00      	nop
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr
 8007f28:	e000e100 	.word	0xe000e100
 8007f2c:	e000ed00 	.word	0xe000ed00

08007f30 <NVIC_EncodePriority>:
{
 8007f30:	b480      	push	{r7}
 8007f32:	b089      	sub	sp, #36	; 0x24
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	60f8      	str	r0, [r7, #12]
 8007f38:	60b9      	str	r1, [r7, #8]
 8007f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f003 0307 	and.w	r3, r3, #7
 8007f42:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	f1c3 0307 	rsb	r3, r3, #7
 8007f4a:	2b04      	cmp	r3, #4
 8007f4c:	bf28      	it	cs
 8007f4e:	2304      	movcs	r3, #4
 8007f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007f52:	69fb      	ldr	r3, [r7, #28]
 8007f54:	3304      	adds	r3, #4
 8007f56:	2b06      	cmp	r3, #6
 8007f58:	d902      	bls.n	8007f60 <NVIC_EncodePriority+0x30>
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	3b03      	subs	r3, #3
 8007f5e:	e000      	b.n	8007f62 <NVIC_EncodePriority+0x32>
 8007f60:	2300      	movs	r3, #0
 8007f62:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f6e:	43da      	mvns	r2, r3
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	401a      	ands	r2, r3
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007f78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8007f82:	43d9      	mvns	r1, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f88:	4313      	orrs	r3, r2
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3724      	adds	r7, #36	; 0x24
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr
	...

08007f98 <SysTick_Config>:
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007fa8:	d301      	bcc.n	8007fae <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8007faa:	2301      	movs	r3, #1
 8007fac:	e00f      	b.n	8007fce <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007fae:	4a0a      	ldr	r2, [pc, #40]	; (8007fd8 <SysTick_Config+0x40>)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	3b01      	subs	r3, #1
 8007fb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007fb6:	210f      	movs	r1, #15
 8007fb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fbc:	f7ff ff8e 	bl	8007edc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007fc0:	4b05      	ldr	r3, [pc, #20]	; (8007fd8 <SysTick_Config+0x40>)
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007fc6:	4b04      	ldr	r3, [pc, #16]	; (8007fd8 <SysTick_Config+0x40>)
 8007fc8:	2207      	movs	r2, #7
 8007fca:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3708      	adds	r7, #8
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	e000e010 	.word	0xe000e010

08007fdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f7ff ff29 	bl	8007e3c <__NVIC_SetPriorityGrouping>
}
 8007fea:	bf00      	nop
 8007fec:	3708      	adds	r7, #8
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}

08007ff2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007ff2:	b580      	push	{r7, lr}
 8007ff4:	b086      	sub	sp, #24
 8007ff6:	af00      	add	r7, sp, #0
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	60b9      	str	r1, [r7, #8]
 8007ffc:	607a      	str	r2, [r7, #4]
 8007ffe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008000:	2300      	movs	r3, #0
 8008002:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008004:	f7ff ff3e 	bl	8007e84 <__NVIC_GetPriorityGrouping>
 8008008:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	68b9      	ldr	r1, [r7, #8]
 800800e:	6978      	ldr	r0, [r7, #20]
 8008010:	f7ff ff8e 	bl	8007f30 <NVIC_EncodePriority>
 8008014:	4602      	mov	r2, r0
 8008016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800801a:	4611      	mov	r1, r2
 800801c:	4618      	mov	r0, r3
 800801e:	f7ff ff5d 	bl	8007edc <__NVIC_SetPriority>
}
 8008022:	bf00      	nop
 8008024:	3718      	adds	r7, #24
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}

0800802a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800802a:	b580      	push	{r7, lr}
 800802c:	b082      	sub	sp, #8
 800802e:	af00      	add	r7, sp, #0
 8008030:	4603      	mov	r3, r0
 8008032:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008038:	4618      	mov	r0, r3
 800803a:	f7ff ff31 	bl	8007ea0 <__NVIC_EnableIRQ>
}
 800803e:	bf00      	nop
 8008040:	3708      	adds	r7, #8
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b082      	sub	sp, #8
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f7ff ffa2 	bl	8007f98 <SysTick_Config>
 8008054:	4603      	mov	r3, r0
}
 8008056:	4618      	mov	r0, r3
 8008058:	3708      	adds	r7, #8
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
	...

08008060 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b086      	sub	sp, #24
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008068:	2300      	movs	r3, #0
 800806a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800806c:	f7ff fa7a 	bl	8007564 <HAL_GetTick>
 8008070:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d101      	bne.n	800807c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008078:	2301      	movs	r3, #1
 800807a:	e099      	b.n	80081b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2202      	movs	r2, #2
 8008088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f022 0201 	bic.w	r2, r2, #1
 800809a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800809c:	e00f      	b.n	80080be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800809e:	f7ff fa61 	bl	8007564 <HAL_GetTick>
 80080a2:	4602      	mov	r2, r0
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	1ad3      	subs	r3, r2, r3
 80080a8:	2b05      	cmp	r3, #5
 80080aa:	d908      	bls.n	80080be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2220      	movs	r2, #32
 80080b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2203      	movs	r2, #3
 80080b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80080ba:	2303      	movs	r3, #3
 80080bc:	e078      	b.n	80081b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f003 0301 	and.w	r3, r3, #1
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d1e8      	bne.n	800809e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80080d4:	697a      	ldr	r2, [r7, #20]
 80080d6:	4b38      	ldr	r3, [pc, #224]	; (80081b8 <HAL_DMA_Init+0x158>)
 80080d8:	4013      	ands	r3, r2
 80080da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	685a      	ldr	r2, [r3, #4]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80080ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	691b      	ldr	r3, [r3, #16]
 80080f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80080f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	699b      	ldr	r3, [r3, #24]
 80080fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008102:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6a1b      	ldr	r3, [r3, #32]
 8008108:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800810a:	697a      	ldr	r2, [r7, #20]
 800810c:	4313      	orrs	r3, r2
 800810e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008114:	2b04      	cmp	r3, #4
 8008116:	d107      	bne.n	8008128 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008120:	4313      	orrs	r3, r2
 8008122:	697a      	ldr	r2, [r7, #20]
 8008124:	4313      	orrs	r3, r2
 8008126:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	697a      	ldr	r2, [r7, #20]
 800812e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	695b      	ldr	r3, [r3, #20]
 8008136:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	f023 0307 	bic.w	r3, r3, #7
 800813e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008144:	697a      	ldr	r2, [r7, #20]
 8008146:	4313      	orrs	r3, r2
 8008148:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814e:	2b04      	cmp	r3, #4
 8008150:	d117      	bne.n	8008182 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008156:	697a      	ldr	r2, [r7, #20]
 8008158:	4313      	orrs	r3, r2
 800815a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008160:	2b00      	cmp	r3, #0
 8008162:	d00e      	beq.n	8008182 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 fb0d 	bl	8008784 <DMA_CheckFifoParam>
 800816a:	4603      	mov	r3, r0
 800816c:	2b00      	cmp	r3, #0
 800816e:	d008      	beq.n	8008182 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2240      	movs	r2, #64	; 0x40
 8008174:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2201      	movs	r2, #1
 800817a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800817e:	2301      	movs	r3, #1
 8008180:	e016      	b.n	80081b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	697a      	ldr	r2, [r7, #20]
 8008188:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 fac4 	bl	8008718 <DMA_CalcBaseAndBitshift>
 8008190:	4603      	mov	r3, r0
 8008192:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008198:	223f      	movs	r2, #63	; 0x3f
 800819a:	409a      	lsls	r2, r3
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2201      	movs	r2, #1
 80081aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3718      	adds	r7, #24
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}
 80081b8:	f010803f 	.word	0xf010803f

080081bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b086      	sub	sp, #24
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	607a      	str	r2, [r7, #4]
 80081c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081ca:	2300      	movs	r3, #0
 80081cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d101      	bne.n	80081e2 <HAL_DMA_Start_IT+0x26>
 80081de:	2302      	movs	r3, #2
 80081e0:	e040      	b.n	8008264 <HAL_DMA_Start_IT+0xa8>
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2201      	movs	r2, #1
 80081e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d12f      	bne.n	8008256 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2202      	movs	r2, #2
 80081fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2200      	movs	r2, #0
 8008202:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	68b9      	ldr	r1, [r7, #8]
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f000 fa56 	bl	80086bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008214:	223f      	movs	r2, #63	; 0x3f
 8008216:	409a      	lsls	r2, r3
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f042 0216 	orr.w	r2, r2, #22
 800822a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008230:	2b00      	cmp	r3, #0
 8008232:	d007      	beq.n	8008244 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f042 0208 	orr.w	r2, r2, #8
 8008242:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681a      	ldr	r2, [r3, #0]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f042 0201 	orr.w	r2, r2, #1
 8008252:	601a      	str	r2, [r3, #0]
 8008254:	e005      	b.n	8008262 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2200      	movs	r2, #0
 800825a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800825e:	2302      	movs	r3, #2
 8008260:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008262:	7dfb      	ldrb	r3, [r7, #23]
}
 8008264:	4618      	mov	r0, r3
 8008266:	3718      	adds	r7, #24
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008278:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800827a:	f7ff f973 	bl	8007564 <HAL_GetTick>
 800827e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008286:	b2db      	uxtb	r3, r3
 8008288:	2b02      	cmp	r3, #2
 800828a:	d008      	beq.n	800829e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2280      	movs	r2, #128	; 0x80
 8008290:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	e052      	b.n	8008344 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	681a      	ldr	r2, [r3, #0]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f022 0216 	bic.w	r2, r2, #22
 80082ac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	695a      	ldr	r2, [r3, #20]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80082bc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d103      	bne.n	80082ce <HAL_DMA_Abort+0x62>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d007      	beq.n	80082de <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f022 0208 	bic.w	r2, r2, #8
 80082dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	681a      	ldr	r2, [r3, #0]
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f022 0201 	bic.w	r2, r2, #1
 80082ec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80082ee:	e013      	b.n	8008318 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80082f0:	f7ff f938 	bl	8007564 <HAL_GetTick>
 80082f4:	4602      	mov	r2, r0
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	1ad3      	subs	r3, r2, r3
 80082fa:	2b05      	cmp	r3, #5
 80082fc:	d90c      	bls.n	8008318 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2220      	movs	r2, #32
 8008302:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2203      	movs	r2, #3
 8008310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8008314:	2303      	movs	r3, #3
 8008316:	e015      	b.n	8008344 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f003 0301 	and.w	r3, r3, #1
 8008322:	2b00      	cmp	r3, #0
 8008324:	d1e4      	bne.n	80082f0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800832a:	223f      	movs	r2, #63	; 0x3f
 800832c:	409a      	lsls	r2, r3
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2201      	movs	r2, #1
 800833e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	3710      	adds	r7, #16
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800835a:	b2db      	uxtb	r3, r3
 800835c:	2b02      	cmp	r3, #2
 800835e:	d004      	beq.n	800836a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2280      	movs	r2, #128	; 0x80
 8008364:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	e00c      	b.n	8008384 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2205      	movs	r2, #5
 800836e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f022 0201 	bic.w	r2, r2, #1
 8008380:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	370c      	adds	r7, #12
 8008388:	46bd      	mov	sp, r7
 800838a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838e:	4770      	bx	lr

08008390 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b086      	sub	sp, #24
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008398:	2300      	movs	r3, #0
 800839a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800839c:	4b92      	ldr	r3, [pc, #584]	; (80085e8 <HAL_DMA_IRQHandler+0x258>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a92      	ldr	r2, [pc, #584]	; (80085ec <HAL_DMA_IRQHandler+0x25c>)
 80083a2:	fba2 2303 	umull	r2, r3, r2, r3
 80083a6:	0a9b      	lsrs	r3, r3, #10
 80083a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083ba:	2208      	movs	r2, #8
 80083bc:	409a      	lsls	r2, r3
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	4013      	ands	r3, r2
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d01a      	beq.n	80083fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f003 0304 	and.w	r3, r3, #4
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d013      	beq.n	80083fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	681a      	ldr	r2, [r3, #0]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f022 0204 	bic.w	r2, r2, #4
 80083e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083e8:	2208      	movs	r2, #8
 80083ea:	409a      	lsls	r2, r3
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083f4:	f043 0201 	orr.w	r2, r3, #1
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008400:	2201      	movs	r2, #1
 8008402:	409a      	lsls	r2, r3
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	4013      	ands	r3, r2
 8008408:	2b00      	cmp	r3, #0
 800840a:	d012      	beq.n	8008432 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	695b      	ldr	r3, [r3, #20]
 8008412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008416:	2b00      	cmp	r3, #0
 8008418:	d00b      	beq.n	8008432 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800841e:	2201      	movs	r2, #1
 8008420:	409a      	lsls	r2, r3
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800842a:	f043 0202 	orr.w	r2, r3, #2
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008436:	2204      	movs	r2, #4
 8008438:	409a      	lsls	r2, r3
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	4013      	ands	r3, r2
 800843e:	2b00      	cmp	r3, #0
 8008440:	d012      	beq.n	8008468 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f003 0302 	and.w	r3, r3, #2
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00b      	beq.n	8008468 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008454:	2204      	movs	r2, #4
 8008456:	409a      	lsls	r2, r3
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008460:	f043 0204 	orr.w	r2, r3, #4
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800846c:	2210      	movs	r2, #16
 800846e:	409a      	lsls	r2, r3
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	4013      	ands	r3, r2
 8008474:	2b00      	cmp	r3, #0
 8008476:	d043      	beq.n	8008500 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f003 0308 	and.w	r3, r3, #8
 8008482:	2b00      	cmp	r3, #0
 8008484:	d03c      	beq.n	8008500 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800848a:	2210      	movs	r2, #16
 800848c:	409a      	lsls	r2, r3
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800849c:	2b00      	cmp	r3, #0
 800849e:	d018      	beq.n	80084d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d108      	bne.n	80084c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d024      	beq.n	8008500 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	4798      	blx	r3
 80084be:	e01f      	b.n	8008500 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d01b      	beq.n	8008500 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	4798      	blx	r3
 80084d0:	e016      	b.n	8008500 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d107      	bne.n	80084f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f022 0208 	bic.w	r2, r2, #8
 80084ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d003      	beq.n	8008500 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008504:	2220      	movs	r2, #32
 8008506:	409a      	lsls	r2, r3
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	4013      	ands	r3, r2
 800850c:	2b00      	cmp	r3, #0
 800850e:	f000 808e 	beq.w	800862e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f003 0310 	and.w	r3, r3, #16
 800851c:	2b00      	cmp	r3, #0
 800851e:	f000 8086 	beq.w	800862e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008526:	2220      	movs	r2, #32
 8008528:	409a      	lsls	r2, r3
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008534:	b2db      	uxtb	r3, r3
 8008536:	2b05      	cmp	r3, #5
 8008538:	d136      	bne.n	80085a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	681a      	ldr	r2, [r3, #0]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f022 0216 	bic.w	r2, r2, #22
 8008548:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	695a      	ldr	r2, [r3, #20]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008558:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800855e:	2b00      	cmp	r3, #0
 8008560:	d103      	bne.n	800856a <HAL_DMA_IRQHandler+0x1da>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008566:	2b00      	cmp	r3, #0
 8008568:	d007      	beq.n	800857a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f022 0208 	bic.w	r2, r2, #8
 8008578:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800857e:	223f      	movs	r2, #63	; 0x3f
 8008580:	409a      	lsls	r2, r3
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2200      	movs	r2, #0
 800858a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2201      	movs	r2, #1
 8008592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800859a:	2b00      	cmp	r3, #0
 800859c:	d07d      	beq.n	800869a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	4798      	blx	r3
        }
        return;
 80085a6:	e078      	b.n	800869a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d01c      	beq.n	80085f0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d108      	bne.n	80085d6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d030      	beq.n	800862e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	4798      	blx	r3
 80085d4:	e02b      	b.n	800862e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d027      	beq.n	800862e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	4798      	blx	r3
 80085e6:	e022      	b.n	800862e <HAL_DMA_IRQHandler+0x29e>
 80085e8:	20000158 	.word	0x20000158
 80085ec:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d10f      	bne.n	800861e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f022 0210 	bic.w	r2, r2, #16
 800860c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2201      	movs	r2, #1
 800861a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008622:	2b00      	cmp	r3, #0
 8008624:	d003      	beq.n	800862e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008632:	2b00      	cmp	r3, #0
 8008634:	d032      	beq.n	800869c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800863a:	f003 0301 	and.w	r3, r3, #1
 800863e:	2b00      	cmp	r3, #0
 8008640:	d022      	beq.n	8008688 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2205      	movs	r2, #5
 8008646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f022 0201 	bic.w	r2, r2, #1
 8008658:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	3301      	adds	r3, #1
 800865e:	60bb      	str	r3, [r7, #8]
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	429a      	cmp	r2, r3
 8008664:	d307      	bcc.n	8008676 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f003 0301 	and.w	r3, r3, #1
 8008670:	2b00      	cmp	r3, #0
 8008672:	d1f2      	bne.n	800865a <HAL_DMA_IRQHandler+0x2ca>
 8008674:	e000      	b.n	8008678 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8008676:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800868c:	2b00      	cmp	r3, #0
 800868e:	d005      	beq.n	800869c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	4798      	blx	r3
 8008698:	e000      	b.n	800869c <HAL_DMA_IRQHandler+0x30c>
        return;
 800869a:	bf00      	nop
    }
  }
}
 800869c:	3718      	adds	r7, #24
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop

080086a4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b083      	sub	sp, #12
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80086bc:	b480      	push	{r7}
 80086be:	b085      	sub	sp, #20
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	60f8      	str	r0, [r7, #12]
 80086c4:	60b9      	str	r1, [r7, #8]
 80086c6:	607a      	str	r2, [r7, #4]
 80086c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80086d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	683a      	ldr	r2, [r7, #0]
 80086e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	2b40      	cmp	r3, #64	; 0x40
 80086e8:	d108      	bne.n	80086fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	68ba      	ldr	r2, [r7, #8]
 80086f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80086fa:	e007      	b.n	800870c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	68ba      	ldr	r2, [r7, #8]
 8008702:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	60da      	str	r2, [r3, #12]
}
 800870c:	bf00      	nop
 800870e:	3714      	adds	r7, #20
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	b2db      	uxtb	r3, r3
 8008726:	3b10      	subs	r3, #16
 8008728:	4a14      	ldr	r2, [pc, #80]	; (800877c <DMA_CalcBaseAndBitshift+0x64>)
 800872a:	fba2 2303 	umull	r2, r3, r2, r3
 800872e:	091b      	lsrs	r3, r3, #4
 8008730:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008732:	4a13      	ldr	r2, [pc, #76]	; (8008780 <DMA_CalcBaseAndBitshift+0x68>)
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	4413      	add	r3, r2
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	461a      	mov	r2, r3
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2b03      	cmp	r3, #3
 8008744:	d909      	bls.n	800875a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800874e:	f023 0303 	bic.w	r3, r3, #3
 8008752:	1d1a      	adds	r2, r3, #4
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	659a      	str	r2, [r3, #88]	; 0x58
 8008758:	e007      	b.n	800876a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008762:	f023 0303 	bic.w	r3, r3, #3
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800876e:	4618      	mov	r0, r3
 8008770:	3714      	adds	r7, #20
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr
 800877a:	bf00      	nop
 800877c:	aaaaaaab 	.word	0xaaaaaaab
 8008780:	08015104 	.word	0x08015104

08008784 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008784:	b480      	push	{r7}
 8008786:	b085      	sub	sp, #20
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800878c:	2300      	movs	r3, #0
 800878e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008794:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	699b      	ldr	r3, [r3, #24]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d11f      	bne.n	80087de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	2b03      	cmp	r3, #3
 80087a2:	d855      	bhi.n	8008850 <DMA_CheckFifoParam+0xcc>
 80087a4:	a201      	add	r2, pc, #4	; (adr r2, 80087ac <DMA_CheckFifoParam+0x28>)
 80087a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087aa:	bf00      	nop
 80087ac:	080087bd 	.word	0x080087bd
 80087b0:	080087cf 	.word	0x080087cf
 80087b4:	080087bd 	.word	0x080087bd
 80087b8:	08008851 	.word	0x08008851
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d045      	beq.n	8008854 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80087cc:	e042      	b.n	8008854 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80087d6:	d13f      	bne.n	8008858 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80087dc:	e03c      	b.n	8008858 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	699b      	ldr	r3, [r3, #24]
 80087e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087e6:	d121      	bne.n	800882c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	2b03      	cmp	r3, #3
 80087ec:	d836      	bhi.n	800885c <DMA_CheckFifoParam+0xd8>
 80087ee:	a201      	add	r2, pc, #4	; (adr r2, 80087f4 <DMA_CheckFifoParam+0x70>)
 80087f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f4:	08008805 	.word	0x08008805
 80087f8:	0800880b 	.word	0x0800880b
 80087fc:	08008805 	.word	0x08008805
 8008800:	0800881d 	.word	0x0800881d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	73fb      	strb	r3, [r7, #15]
      break;
 8008808:	e02f      	b.n	800886a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008812:	2b00      	cmp	r3, #0
 8008814:	d024      	beq.n	8008860 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800881a:	e021      	b.n	8008860 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008820:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008824:	d11e      	bne.n	8008864 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800882a:	e01b      	b.n	8008864 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	2b02      	cmp	r3, #2
 8008830:	d902      	bls.n	8008838 <DMA_CheckFifoParam+0xb4>
 8008832:	2b03      	cmp	r3, #3
 8008834:	d003      	beq.n	800883e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008836:	e018      	b.n	800886a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8008838:	2301      	movs	r3, #1
 800883a:	73fb      	strb	r3, [r7, #15]
      break;
 800883c:	e015      	b.n	800886a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008842:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00e      	beq.n	8008868 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	73fb      	strb	r3, [r7, #15]
      break;
 800884e:	e00b      	b.n	8008868 <DMA_CheckFifoParam+0xe4>
      break;
 8008850:	bf00      	nop
 8008852:	e00a      	b.n	800886a <DMA_CheckFifoParam+0xe6>
      break;
 8008854:	bf00      	nop
 8008856:	e008      	b.n	800886a <DMA_CheckFifoParam+0xe6>
      break;
 8008858:	bf00      	nop
 800885a:	e006      	b.n	800886a <DMA_CheckFifoParam+0xe6>
      break;
 800885c:	bf00      	nop
 800885e:	e004      	b.n	800886a <DMA_CheckFifoParam+0xe6>
      break;
 8008860:	bf00      	nop
 8008862:	e002      	b.n	800886a <DMA_CheckFifoParam+0xe6>
      break;   
 8008864:	bf00      	nop
 8008866:	e000      	b.n	800886a <DMA_CheckFifoParam+0xe6>
      break;
 8008868:	bf00      	nop
    }
  } 
  
  return status; 
 800886a:	7bfb      	ldrb	r3, [r7, #15]
}
 800886c:	4618      	mov	r0, r3
 800886e:	3714      	adds	r7, #20
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008878:	b480      	push	{r7}
 800887a:	b089      	sub	sp, #36	; 0x24
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008882:	2300      	movs	r3, #0
 8008884:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008886:	2300      	movs	r3, #0
 8008888:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800888a:	2300      	movs	r3, #0
 800888c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800888e:	2300      	movs	r3, #0
 8008890:	61fb      	str	r3, [r7, #28]
 8008892:	e16b      	b.n	8008b6c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008894:	2201      	movs	r2, #1
 8008896:	69fb      	ldr	r3, [r7, #28]
 8008898:	fa02 f303 	lsl.w	r3, r2, r3
 800889c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	697a      	ldr	r2, [r7, #20]
 80088a4:	4013      	ands	r3, r2
 80088a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80088a8:	693a      	ldr	r2, [r7, #16]
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	429a      	cmp	r2, r3
 80088ae:	f040 815a 	bne.w	8008b66 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d00b      	beq.n	80088d2 <HAL_GPIO_Init+0x5a>
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d007      	beq.n	80088d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80088c6:	2b11      	cmp	r3, #17
 80088c8:	d003      	beq.n	80088d2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	2b12      	cmp	r3, #18
 80088d0:	d130      	bne.n	8008934 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80088d8:	69fb      	ldr	r3, [r7, #28]
 80088da:	005b      	lsls	r3, r3, #1
 80088dc:	2203      	movs	r2, #3
 80088de:	fa02 f303 	lsl.w	r3, r2, r3
 80088e2:	43db      	mvns	r3, r3
 80088e4:	69ba      	ldr	r2, [r7, #24]
 80088e6:	4013      	ands	r3, r2
 80088e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	68da      	ldr	r2, [r3, #12]
 80088ee:	69fb      	ldr	r3, [r7, #28]
 80088f0:	005b      	lsls	r3, r3, #1
 80088f2:	fa02 f303 	lsl.w	r3, r2, r3
 80088f6:	69ba      	ldr	r2, [r7, #24]
 80088f8:	4313      	orrs	r3, r2
 80088fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	69ba      	ldr	r2, [r7, #24]
 8008900:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008908:	2201      	movs	r2, #1
 800890a:	69fb      	ldr	r3, [r7, #28]
 800890c:	fa02 f303 	lsl.w	r3, r2, r3
 8008910:	43db      	mvns	r3, r3
 8008912:	69ba      	ldr	r2, [r7, #24]
 8008914:	4013      	ands	r3, r2
 8008916:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	091b      	lsrs	r3, r3, #4
 800891e:	f003 0201 	and.w	r2, r3, #1
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	fa02 f303 	lsl.w	r3, r2, r3
 8008928:	69ba      	ldr	r2, [r7, #24]
 800892a:	4313      	orrs	r3, r2
 800892c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	69ba      	ldr	r2, [r7, #24]
 8008932:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800893a:	69fb      	ldr	r3, [r7, #28]
 800893c:	005b      	lsls	r3, r3, #1
 800893e:	2203      	movs	r2, #3
 8008940:	fa02 f303 	lsl.w	r3, r2, r3
 8008944:	43db      	mvns	r3, r3
 8008946:	69ba      	ldr	r2, [r7, #24]
 8008948:	4013      	ands	r3, r2
 800894a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	689a      	ldr	r2, [r3, #8]
 8008950:	69fb      	ldr	r3, [r7, #28]
 8008952:	005b      	lsls	r3, r3, #1
 8008954:	fa02 f303 	lsl.w	r3, r2, r3
 8008958:	69ba      	ldr	r2, [r7, #24]
 800895a:	4313      	orrs	r3, r2
 800895c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	69ba      	ldr	r2, [r7, #24]
 8008962:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	2b02      	cmp	r3, #2
 800896a:	d003      	beq.n	8008974 <HAL_GPIO_Init+0xfc>
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	2b12      	cmp	r3, #18
 8008972:	d123      	bne.n	80089bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	08da      	lsrs	r2, r3, #3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	3208      	adds	r2, #8
 800897c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008980:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008982:	69fb      	ldr	r3, [r7, #28]
 8008984:	f003 0307 	and.w	r3, r3, #7
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	220f      	movs	r2, #15
 800898c:	fa02 f303 	lsl.w	r3, r2, r3
 8008990:	43db      	mvns	r3, r3
 8008992:	69ba      	ldr	r2, [r7, #24]
 8008994:	4013      	ands	r3, r2
 8008996:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	691a      	ldr	r2, [r3, #16]
 800899c:	69fb      	ldr	r3, [r7, #28]
 800899e:	f003 0307 	and.w	r3, r3, #7
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	fa02 f303 	lsl.w	r3, r2, r3
 80089a8:	69ba      	ldr	r2, [r7, #24]
 80089aa:	4313      	orrs	r3, r2
 80089ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	08da      	lsrs	r2, r3, #3
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	3208      	adds	r2, #8
 80089b6:	69b9      	ldr	r1, [r7, #24]
 80089b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	005b      	lsls	r3, r3, #1
 80089c6:	2203      	movs	r2, #3
 80089c8:	fa02 f303 	lsl.w	r3, r2, r3
 80089cc:	43db      	mvns	r3, r3
 80089ce:	69ba      	ldr	r2, [r7, #24]
 80089d0:	4013      	ands	r3, r2
 80089d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	f003 0203 	and.w	r2, r3, #3
 80089dc:	69fb      	ldr	r3, [r7, #28]
 80089de:	005b      	lsls	r3, r3, #1
 80089e0:	fa02 f303 	lsl.w	r3, r2, r3
 80089e4:	69ba      	ldr	r2, [r7, #24]
 80089e6:	4313      	orrs	r3, r2
 80089e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	69ba      	ldr	r2, [r7, #24]
 80089ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	f000 80b4 	beq.w	8008b66 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80089fe:	2300      	movs	r3, #0
 8008a00:	60fb      	str	r3, [r7, #12]
 8008a02:	4b5f      	ldr	r3, [pc, #380]	; (8008b80 <HAL_GPIO_Init+0x308>)
 8008a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a06:	4a5e      	ldr	r2, [pc, #376]	; (8008b80 <HAL_GPIO_Init+0x308>)
 8008a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8008a0e:	4b5c      	ldr	r3, [pc, #368]	; (8008b80 <HAL_GPIO_Init+0x308>)
 8008a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a16:	60fb      	str	r3, [r7, #12]
 8008a18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008a1a:	4a5a      	ldr	r2, [pc, #360]	; (8008b84 <HAL_GPIO_Init+0x30c>)
 8008a1c:	69fb      	ldr	r3, [r7, #28]
 8008a1e:	089b      	lsrs	r3, r3, #2
 8008a20:	3302      	adds	r3, #2
 8008a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	f003 0303 	and.w	r3, r3, #3
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	220f      	movs	r2, #15
 8008a32:	fa02 f303 	lsl.w	r3, r2, r3
 8008a36:	43db      	mvns	r3, r3
 8008a38:	69ba      	ldr	r2, [r7, #24]
 8008a3a:	4013      	ands	r3, r2
 8008a3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	4a51      	ldr	r2, [pc, #324]	; (8008b88 <HAL_GPIO_Init+0x310>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d02b      	beq.n	8008a9e <HAL_GPIO_Init+0x226>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4a50      	ldr	r2, [pc, #320]	; (8008b8c <HAL_GPIO_Init+0x314>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d025      	beq.n	8008a9a <HAL_GPIO_Init+0x222>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4a4f      	ldr	r2, [pc, #316]	; (8008b90 <HAL_GPIO_Init+0x318>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d01f      	beq.n	8008a96 <HAL_GPIO_Init+0x21e>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	4a4e      	ldr	r2, [pc, #312]	; (8008b94 <HAL_GPIO_Init+0x31c>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d019      	beq.n	8008a92 <HAL_GPIO_Init+0x21a>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	4a4d      	ldr	r2, [pc, #308]	; (8008b98 <HAL_GPIO_Init+0x320>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d013      	beq.n	8008a8e <HAL_GPIO_Init+0x216>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	4a4c      	ldr	r2, [pc, #304]	; (8008b9c <HAL_GPIO_Init+0x324>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d00d      	beq.n	8008a8a <HAL_GPIO_Init+0x212>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	4a4b      	ldr	r2, [pc, #300]	; (8008ba0 <HAL_GPIO_Init+0x328>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d007      	beq.n	8008a86 <HAL_GPIO_Init+0x20e>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	4a4a      	ldr	r2, [pc, #296]	; (8008ba4 <HAL_GPIO_Init+0x32c>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d101      	bne.n	8008a82 <HAL_GPIO_Init+0x20a>
 8008a7e:	2307      	movs	r3, #7
 8008a80:	e00e      	b.n	8008aa0 <HAL_GPIO_Init+0x228>
 8008a82:	2308      	movs	r3, #8
 8008a84:	e00c      	b.n	8008aa0 <HAL_GPIO_Init+0x228>
 8008a86:	2306      	movs	r3, #6
 8008a88:	e00a      	b.n	8008aa0 <HAL_GPIO_Init+0x228>
 8008a8a:	2305      	movs	r3, #5
 8008a8c:	e008      	b.n	8008aa0 <HAL_GPIO_Init+0x228>
 8008a8e:	2304      	movs	r3, #4
 8008a90:	e006      	b.n	8008aa0 <HAL_GPIO_Init+0x228>
 8008a92:	2303      	movs	r3, #3
 8008a94:	e004      	b.n	8008aa0 <HAL_GPIO_Init+0x228>
 8008a96:	2302      	movs	r3, #2
 8008a98:	e002      	b.n	8008aa0 <HAL_GPIO_Init+0x228>
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e000      	b.n	8008aa0 <HAL_GPIO_Init+0x228>
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	69fa      	ldr	r2, [r7, #28]
 8008aa2:	f002 0203 	and.w	r2, r2, #3
 8008aa6:	0092      	lsls	r2, r2, #2
 8008aa8:	4093      	lsls	r3, r2
 8008aaa:	69ba      	ldr	r2, [r7, #24]
 8008aac:	4313      	orrs	r3, r2
 8008aae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008ab0:	4934      	ldr	r1, [pc, #208]	; (8008b84 <HAL_GPIO_Init+0x30c>)
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	089b      	lsrs	r3, r3, #2
 8008ab6:	3302      	adds	r3, #2
 8008ab8:	69ba      	ldr	r2, [r7, #24]
 8008aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008abe:	4b3a      	ldr	r3, [pc, #232]	; (8008ba8 <HAL_GPIO_Init+0x330>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	43db      	mvns	r3, r3
 8008ac8:	69ba      	ldr	r2, [r7, #24]
 8008aca:	4013      	ands	r3, r2
 8008acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d003      	beq.n	8008ae2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008ada:	69ba      	ldr	r2, [r7, #24]
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008ae2:	4a31      	ldr	r2, [pc, #196]	; (8008ba8 <HAL_GPIO_Init+0x330>)
 8008ae4:	69bb      	ldr	r3, [r7, #24]
 8008ae6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008ae8:	4b2f      	ldr	r3, [pc, #188]	; (8008ba8 <HAL_GPIO_Init+0x330>)
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	43db      	mvns	r3, r3
 8008af2:	69ba      	ldr	r2, [r7, #24]
 8008af4:	4013      	ands	r3, r2
 8008af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d003      	beq.n	8008b0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008b04:	69ba      	ldr	r2, [r7, #24]
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008b0c:	4a26      	ldr	r2, [pc, #152]	; (8008ba8 <HAL_GPIO_Init+0x330>)
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008b12:	4b25      	ldr	r3, [pc, #148]	; (8008ba8 <HAL_GPIO_Init+0x330>)
 8008b14:	689b      	ldr	r3, [r3, #8]
 8008b16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	43db      	mvns	r3, r3
 8008b1c:	69ba      	ldr	r2, [r7, #24]
 8008b1e:	4013      	ands	r3, r2
 8008b20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d003      	beq.n	8008b36 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008b2e:	69ba      	ldr	r2, [r7, #24]
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	4313      	orrs	r3, r2
 8008b34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008b36:	4a1c      	ldr	r2, [pc, #112]	; (8008ba8 <HAL_GPIO_Init+0x330>)
 8008b38:	69bb      	ldr	r3, [r7, #24]
 8008b3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008b3c:	4b1a      	ldr	r3, [pc, #104]	; (8008ba8 <HAL_GPIO_Init+0x330>)
 8008b3e:	68db      	ldr	r3, [r3, #12]
 8008b40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	43db      	mvns	r3, r3
 8008b46:	69ba      	ldr	r2, [r7, #24]
 8008b48:	4013      	ands	r3, r2
 8008b4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d003      	beq.n	8008b60 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008b58:	69ba      	ldr	r2, [r7, #24]
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008b60:	4a11      	ldr	r2, [pc, #68]	; (8008ba8 <HAL_GPIO_Init+0x330>)
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	3301      	adds	r3, #1
 8008b6a:	61fb      	str	r3, [r7, #28]
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	2b0f      	cmp	r3, #15
 8008b70:	f67f ae90 	bls.w	8008894 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008b74:	bf00      	nop
 8008b76:	3724      	adds	r7, #36	; 0x24
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7e:	4770      	bx	lr
 8008b80:	40023800 	.word	0x40023800
 8008b84:	40013800 	.word	0x40013800
 8008b88:	40020000 	.word	0x40020000
 8008b8c:	40020400 	.word	0x40020400
 8008b90:	40020800 	.word	0x40020800
 8008b94:	40020c00 	.word	0x40020c00
 8008b98:	40021000 	.word	0x40021000
 8008b9c:	40021400 	.word	0x40021400
 8008ba0:	40021800 	.word	0x40021800
 8008ba4:	40021c00 	.word	0x40021c00
 8008ba8:	40013c00 	.word	0x40013c00

08008bac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008bac:	b480      	push	{r7}
 8008bae:	b085      	sub	sp, #20
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	691a      	ldr	r2, [r3, #16]
 8008bbc:	887b      	ldrh	r3, [r7, #2]
 8008bbe:	4013      	ands	r3, r2
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d002      	beq.n	8008bca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	73fb      	strb	r3, [r7, #15]
 8008bc8:	e001      	b.n	8008bce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3714      	adds	r7, #20
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	460b      	mov	r3, r1
 8008be6:	807b      	strh	r3, [r7, #2]
 8008be8:	4613      	mov	r3, r2
 8008bea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008bec:	787b      	ldrb	r3, [r7, #1]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d003      	beq.n	8008bfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008bf2:	887a      	ldrh	r2, [r7, #2]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008bf8:	e003      	b.n	8008c02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008bfa:	887b      	ldrh	r3, [r7, #2]
 8008bfc:	041a      	lsls	r2, r3, #16
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	619a      	str	r2, [r3, #24]
}
 8008c02:	bf00      	nop
 8008c04:	370c      	adds	r7, #12
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr

08008c0e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008c0e:	b480      	push	{r7}
 8008c10:	b083      	sub	sp, #12
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
 8008c16:	460b      	mov	r3, r1
 8008c18:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	695a      	ldr	r2, [r3, #20]
 8008c1e:	887b      	ldrh	r3, [r7, #2]
 8008c20:	401a      	ands	r2, r3
 8008c22:	887b      	ldrh	r3, [r7, #2]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d104      	bne.n	8008c32 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008c28:	887b      	ldrh	r3, [r7, #2]
 8008c2a:	041a      	lsls	r2, r3, #16
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8008c30:	e002      	b.n	8008c38 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8008c32:	887a      	ldrh	r2, [r7, #2]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	619a      	str	r2, [r3, #24]
}
 8008c38:	bf00      	nop
 8008c3a:	370c      	adds	r7, #12
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b084      	sub	sp, #16
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d101      	bne.n	8008c56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008c52:	2301      	movs	r3, #1
 8008c54:	e11f      	b.n	8008e96 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d106      	bne.n	8008c70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2200      	movs	r2, #0
 8008c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f7f9 f8f4 	bl	8001e58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2224      	movs	r2, #36	; 0x24
 8008c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f022 0201 	bic.w	r2, r2, #1
 8008c86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	681a      	ldr	r2, [r3, #0]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008ca6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008ca8:	f001 fca4 	bl	800a5f4 <HAL_RCC_GetPCLK1Freq>
 8008cac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	4a7b      	ldr	r2, [pc, #492]	; (8008ea0 <HAL_I2C_Init+0x25c>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d807      	bhi.n	8008cc8 <HAL_I2C_Init+0x84>
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	4a7a      	ldr	r2, [pc, #488]	; (8008ea4 <HAL_I2C_Init+0x260>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	bf94      	ite	ls
 8008cc0:	2301      	movls	r3, #1
 8008cc2:	2300      	movhi	r3, #0
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	e006      	b.n	8008cd6 <HAL_I2C_Init+0x92>
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	4a77      	ldr	r2, [pc, #476]	; (8008ea8 <HAL_I2C_Init+0x264>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	bf94      	ite	ls
 8008cd0:	2301      	movls	r3, #1
 8008cd2:	2300      	movhi	r3, #0
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d001      	beq.n	8008cde <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e0db      	b.n	8008e96 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	4a72      	ldr	r2, [pc, #456]	; (8008eac <HAL_I2C_Init+0x268>)
 8008ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ce6:	0c9b      	lsrs	r3, r3, #18
 8008ce8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	68ba      	ldr	r2, [r7, #8]
 8008cfa:	430a      	orrs	r2, r1
 8008cfc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	6a1b      	ldr	r3, [r3, #32]
 8008d04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	4a64      	ldr	r2, [pc, #400]	; (8008ea0 <HAL_I2C_Init+0x25c>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d802      	bhi.n	8008d18 <HAL_I2C_Init+0xd4>
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	3301      	adds	r3, #1
 8008d16:	e009      	b.n	8008d2c <HAL_I2C_Init+0xe8>
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008d1e:	fb02 f303 	mul.w	r3, r2, r3
 8008d22:	4a63      	ldr	r2, [pc, #396]	; (8008eb0 <HAL_I2C_Init+0x26c>)
 8008d24:	fba2 2303 	umull	r2, r3, r2, r3
 8008d28:	099b      	lsrs	r3, r3, #6
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	6812      	ldr	r2, [r2, #0]
 8008d30:	430b      	orrs	r3, r1
 8008d32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	69db      	ldr	r3, [r3, #28]
 8008d3a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008d3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	4956      	ldr	r1, [pc, #344]	; (8008ea0 <HAL_I2C_Init+0x25c>)
 8008d48:	428b      	cmp	r3, r1
 8008d4a:	d80d      	bhi.n	8008d68 <HAL_I2C_Init+0x124>
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	1e59      	subs	r1, r3, #1
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	005b      	lsls	r3, r3, #1
 8008d56:	fbb1 f3f3 	udiv	r3, r1, r3
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d60:	2b04      	cmp	r3, #4
 8008d62:	bf38      	it	cc
 8008d64:	2304      	movcc	r3, #4
 8008d66:	e04f      	b.n	8008e08 <HAL_I2C_Init+0x1c4>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	689b      	ldr	r3, [r3, #8]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d111      	bne.n	8008d94 <HAL_I2C_Init+0x150>
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	1e58      	subs	r0, r3, #1
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6859      	ldr	r1, [r3, #4]
 8008d78:	460b      	mov	r3, r1
 8008d7a:	005b      	lsls	r3, r3, #1
 8008d7c:	440b      	add	r3, r1
 8008d7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d82:	3301      	adds	r3, #1
 8008d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	bf0c      	ite	eq
 8008d8c:	2301      	moveq	r3, #1
 8008d8e:	2300      	movne	r3, #0
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	e012      	b.n	8008dba <HAL_I2C_Init+0x176>
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	1e58      	subs	r0, r3, #1
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6859      	ldr	r1, [r3, #4]
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	440b      	add	r3, r1
 8008da2:	0099      	lsls	r1, r3, #2
 8008da4:	440b      	add	r3, r1
 8008da6:	fbb0 f3f3 	udiv	r3, r0, r3
 8008daa:	3301      	adds	r3, #1
 8008dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	bf0c      	ite	eq
 8008db4:	2301      	moveq	r3, #1
 8008db6:	2300      	movne	r3, #0
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d001      	beq.n	8008dc2 <HAL_I2C_Init+0x17e>
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e022      	b.n	8008e08 <HAL_I2C_Init+0x1c4>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d10e      	bne.n	8008de8 <HAL_I2C_Init+0x1a4>
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	1e58      	subs	r0, r3, #1
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6859      	ldr	r1, [r3, #4]
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	005b      	lsls	r3, r3, #1
 8008dd6:	440b      	add	r3, r1
 8008dd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8008ddc:	3301      	adds	r3, #1
 8008dde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008de6:	e00f      	b.n	8008e08 <HAL_I2C_Init+0x1c4>
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	1e58      	subs	r0, r3, #1
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6859      	ldr	r1, [r3, #4]
 8008df0:	460b      	mov	r3, r1
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	440b      	add	r3, r1
 8008df6:	0099      	lsls	r1, r3, #2
 8008df8:	440b      	add	r3, r1
 8008dfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8008dfe:	3301      	adds	r3, #1
 8008e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008e08:	6879      	ldr	r1, [r7, #4]
 8008e0a:	6809      	ldr	r1, [r1, #0]
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	69da      	ldr	r2, [r3, #28]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6a1b      	ldr	r3, [r3, #32]
 8008e22:	431a      	orrs	r2, r3
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	430a      	orrs	r2, r1
 8008e2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	689b      	ldr	r3, [r3, #8]
 8008e32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008e36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	6911      	ldr	r1, [r2, #16]
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	68d2      	ldr	r2, [r2, #12]
 8008e42:	4311      	orrs	r1, r2
 8008e44:	687a      	ldr	r2, [r7, #4]
 8008e46:	6812      	ldr	r2, [r2, #0]
 8008e48:	430b      	orrs	r3, r1
 8008e4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	68db      	ldr	r3, [r3, #12]
 8008e52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	695a      	ldr	r2, [r3, #20]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	699b      	ldr	r3, [r3, #24]
 8008e5e:	431a      	orrs	r2, r3
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	430a      	orrs	r2, r1
 8008e66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f042 0201 	orr.w	r2, r2, #1
 8008e76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2220      	movs	r2, #32
 8008e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	000186a0 	.word	0x000186a0
 8008ea4:	001e847f 	.word	0x001e847f
 8008ea8:	003d08ff 	.word	0x003d08ff
 8008eac:	431bde83 	.word	0x431bde83
 8008eb0:	10624dd3 	.word	0x10624dd3

08008eb4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b088      	sub	sp, #32
 8008eb8:	af02      	add	r7, sp, #8
 8008eba:	60f8      	str	r0, [r7, #12]
 8008ebc:	607a      	str	r2, [r7, #4]
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	817b      	strh	r3, [r7, #10]
 8008ec4:	4613      	mov	r3, r2
 8008ec6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008ec8:	f7fe fb4c 	bl	8007564 <HAL_GetTick>
 8008ecc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	2b20      	cmp	r3, #32
 8008ed8:	f040 80e0 	bne.w	800909c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	9300      	str	r3, [sp, #0]
 8008ee0:	2319      	movs	r3, #25
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	4970      	ldr	r1, [pc, #448]	; (80090a8 <HAL_I2C_Master_Transmit+0x1f4>)
 8008ee6:	68f8      	ldr	r0, [r7, #12]
 8008ee8:	f000 fd92 	bl	8009a10 <I2C_WaitOnFlagUntilTimeout>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d001      	beq.n	8008ef6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008ef2:	2302      	movs	r3, #2
 8008ef4:	e0d3      	b.n	800909e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d101      	bne.n	8008f04 <HAL_I2C_Master_Transmit+0x50>
 8008f00:	2302      	movs	r3, #2
 8008f02:	e0cc      	b.n	800909e <HAL_I2C_Master_Transmit+0x1ea>
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2201      	movs	r2, #1
 8008f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f003 0301 	and.w	r3, r3, #1
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d007      	beq.n	8008f2a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f042 0201 	orr.w	r2, r2, #1
 8008f28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008f38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2221      	movs	r2, #33	; 0x21
 8008f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2210      	movs	r2, #16
 8008f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	893a      	ldrh	r2, [r7, #8]
 8008f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f60:	b29a      	uxth	r2, r3
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	4a50      	ldr	r2, [pc, #320]	; (80090ac <HAL_I2C_Master_Transmit+0x1f8>)
 8008f6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008f6c:	8979      	ldrh	r1, [r7, #10]
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	6a3a      	ldr	r2, [r7, #32]
 8008f72:	68f8      	ldr	r0, [r7, #12]
 8008f74:	f000 fbfe 	bl	8009774 <I2C_MasterRequestWrite>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d001      	beq.n	8008f82 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e08d      	b.n	800909e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f82:	2300      	movs	r3, #0
 8008f84:	613b      	str	r3, [r7, #16]
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	695b      	ldr	r3, [r3, #20]
 8008f8c:	613b      	str	r3, [r7, #16]
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	699b      	ldr	r3, [r3, #24]
 8008f94:	613b      	str	r3, [r7, #16]
 8008f96:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008f98:	e066      	b.n	8009068 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f9a:	697a      	ldr	r2, [r7, #20]
 8008f9c:	6a39      	ldr	r1, [r7, #32]
 8008f9e:	68f8      	ldr	r0, [r7, #12]
 8008fa0:	f000 fe0c 	bl	8009bbc <I2C_WaitOnTXEFlagUntilTimeout>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d00d      	beq.n	8008fc6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fae:	2b04      	cmp	r3, #4
 8008fb0:	d107      	bne.n	8008fc2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	681a      	ldr	r2, [r3, #0]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008fc0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	e06b      	b.n	800909e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fca:	781a      	ldrb	r2, [r3, #0]
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd6:	1c5a      	adds	r2, r3, #1
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	3b01      	subs	r3, #1
 8008fe4:	b29a      	uxth	r2, r3
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fee:	3b01      	subs	r3, #1
 8008ff0:	b29a      	uxth	r2, r3
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	695b      	ldr	r3, [r3, #20]
 8008ffc:	f003 0304 	and.w	r3, r3, #4
 8009000:	2b04      	cmp	r3, #4
 8009002:	d11b      	bne.n	800903c <HAL_I2C_Master_Transmit+0x188>
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009008:	2b00      	cmp	r3, #0
 800900a:	d017      	beq.n	800903c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009010:	781a      	ldrb	r2, [r3, #0]
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800901c:	1c5a      	adds	r2, r3, #1
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009026:	b29b      	uxth	r3, r3
 8009028:	3b01      	subs	r3, #1
 800902a:	b29a      	uxth	r2, r3
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009034:	3b01      	subs	r3, #1
 8009036:	b29a      	uxth	r2, r3
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800903c:	697a      	ldr	r2, [r7, #20]
 800903e:	6a39      	ldr	r1, [r7, #32]
 8009040:	68f8      	ldr	r0, [r7, #12]
 8009042:	f000 fdfc 	bl	8009c3e <I2C_WaitOnBTFFlagUntilTimeout>
 8009046:	4603      	mov	r3, r0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d00d      	beq.n	8009068 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009050:	2b04      	cmp	r3, #4
 8009052:	d107      	bne.n	8009064 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009062:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	e01a      	b.n	800909e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800906c:	2b00      	cmp	r3, #0
 800906e:	d194      	bne.n	8008f9a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800907e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2220      	movs	r2, #32
 8009084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2200      	movs	r2, #0
 800908c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2200      	movs	r2, #0
 8009094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009098:	2300      	movs	r3, #0
 800909a:	e000      	b.n	800909e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800909c:	2302      	movs	r3, #2
  }
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3718      	adds	r7, #24
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
 80090a6:	bf00      	nop
 80090a8:	00100002 	.word	0x00100002
 80090ac:	ffff0000 	.word	0xffff0000

080090b0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b08c      	sub	sp, #48	; 0x30
 80090b4:	af02      	add	r7, sp, #8
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	607a      	str	r2, [r7, #4]
 80090ba:	461a      	mov	r2, r3
 80090bc:	460b      	mov	r3, r1
 80090be:	817b      	strh	r3, [r7, #10]
 80090c0:	4613      	mov	r3, r2
 80090c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80090c4:	f7fe fa4e 	bl	8007564 <HAL_GetTick>
 80090c8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	2b20      	cmp	r3, #32
 80090d4:	f040 820b 	bne.w	80094ee <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80090d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090da:	9300      	str	r3, [sp, #0]
 80090dc:	2319      	movs	r3, #25
 80090de:	2201      	movs	r2, #1
 80090e0:	497c      	ldr	r1, [pc, #496]	; (80092d4 <HAL_I2C_Master_Receive+0x224>)
 80090e2:	68f8      	ldr	r0, [r7, #12]
 80090e4:	f000 fc94 	bl	8009a10 <I2C_WaitOnFlagUntilTimeout>
 80090e8:	4603      	mov	r3, r0
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d001      	beq.n	80090f2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80090ee:	2302      	movs	r3, #2
 80090f0:	e1fe      	b.n	80094f0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d101      	bne.n	8009100 <HAL_I2C_Master_Receive+0x50>
 80090fc:	2302      	movs	r3, #2
 80090fe:	e1f7      	b.n	80094f0 <HAL_I2C_Master_Receive+0x440>
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	2201      	movs	r2, #1
 8009104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f003 0301 	and.w	r3, r3, #1
 8009112:	2b01      	cmp	r3, #1
 8009114:	d007      	beq.n	8009126 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	681a      	ldr	r2, [r3, #0]
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f042 0201 	orr.w	r2, r2, #1
 8009124:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009134:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2222      	movs	r2, #34	; 0x22
 800913a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2210      	movs	r2, #16
 8009142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2200      	movs	r2, #0
 800914a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	687a      	ldr	r2, [r7, #4]
 8009150:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	893a      	ldrh	r2, [r7, #8]
 8009156:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800915c:	b29a      	uxth	r2, r3
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	4a5c      	ldr	r2, [pc, #368]	; (80092d8 <HAL_I2C_Master_Receive+0x228>)
 8009166:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009168:	8979      	ldrh	r1, [r7, #10]
 800916a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800916e:	68f8      	ldr	r0, [r7, #12]
 8009170:	f000 fb82 	bl	8009878 <I2C_MasterRequestRead>
 8009174:	4603      	mov	r3, r0
 8009176:	2b00      	cmp	r3, #0
 8009178:	d001      	beq.n	800917e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	e1b8      	b.n	80094f0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009182:	2b00      	cmp	r3, #0
 8009184:	d113      	bne.n	80091ae <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009186:	2300      	movs	r3, #0
 8009188:	623b      	str	r3, [r7, #32]
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	695b      	ldr	r3, [r3, #20]
 8009190:	623b      	str	r3, [r7, #32]
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	699b      	ldr	r3, [r3, #24]
 8009198:	623b      	str	r3, [r7, #32]
 800919a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091aa:	601a      	str	r2, [r3, #0]
 80091ac:	e18c      	b.n	80094c8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d11b      	bne.n	80091ee <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80091c6:	2300      	movs	r3, #0
 80091c8:	61fb      	str	r3, [r7, #28]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	695b      	ldr	r3, [r3, #20]
 80091d0:	61fb      	str	r3, [r7, #28]
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	699b      	ldr	r3, [r3, #24]
 80091d8:	61fb      	str	r3, [r7, #28]
 80091da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091ea:	601a      	str	r2, [r3, #0]
 80091ec:	e16c      	b.n	80094c8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091f2:	2b02      	cmp	r3, #2
 80091f4:	d11b      	bne.n	800922e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009204:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009214:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009216:	2300      	movs	r3, #0
 8009218:	61bb      	str	r3, [r7, #24]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	695b      	ldr	r3, [r3, #20]
 8009220:	61bb      	str	r3, [r7, #24]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	699b      	ldr	r3, [r3, #24]
 8009228:	61bb      	str	r3, [r7, #24]
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	e14c      	b.n	80094c8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800923c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800923e:	2300      	movs	r3, #0
 8009240:	617b      	str	r3, [r7, #20]
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	695b      	ldr	r3, [r3, #20]
 8009248:	617b      	str	r3, [r7, #20]
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	699b      	ldr	r3, [r3, #24]
 8009250:	617b      	str	r3, [r7, #20]
 8009252:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009254:	e138      	b.n	80094c8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800925a:	2b03      	cmp	r3, #3
 800925c:	f200 80f1 	bhi.w	8009442 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009264:	2b01      	cmp	r3, #1
 8009266:	d123      	bne.n	80092b0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800926a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800926c:	68f8      	ldr	r0, [r7, #12]
 800926e:	f000 fd27 	bl	8009cc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d001      	beq.n	800927c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8009278:	2301      	movs	r3, #1
 800927a:	e139      	b.n	80094f0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	691a      	ldr	r2, [r3, #16]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009286:	b2d2      	uxtb	r2, r2
 8009288:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800928e:	1c5a      	adds	r2, r3, #1
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009298:	3b01      	subs	r3, #1
 800929a:	b29a      	uxth	r2, r3
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	3b01      	subs	r3, #1
 80092a8:	b29a      	uxth	r2, r3
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80092ae:	e10b      	b.n	80094c8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092b4:	2b02      	cmp	r3, #2
 80092b6:	d14e      	bne.n	8009356 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80092b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ba:	9300      	str	r3, [sp, #0]
 80092bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092be:	2200      	movs	r2, #0
 80092c0:	4906      	ldr	r1, [pc, #24]	; (80092dc <HAL_I2C_Master_Receive+0x22c>)
 80092c2:	68f8      	ldr	r0, [r7, #12]
 80092c4:	f000 fba4 	bl	8009a10 <I2C_WaitOnFlagUntilTimeout>
 80092c8:	4603      	mov	r3, r0
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d008      	beq.n	80092e0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80092ce:	2301      	movs	r3, #1
 80092d0:	e10e      	b.n	80094f0 <HAL_I2C_Master_Receive+0x440>
 80092d2:	bf00      	nop
 80092d4:	00100002 	.word	0x00100002
 80092d8:	ffff0000 	.word	0xffff0000
 80092dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	691a      	ldr	r2, [r3, #16]
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092fa:	b2d2      	uxtb	r2, r2
 80092fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009302:	1c5a      	adds	r2, r3, #1
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800930c:	3b01      	subs	r3, #1
 800930e:	b29a      	uxth	r2, r3
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009318:	b29b      	uxth	r3, r3
 800931a:	3b01      	subs	r3, #1
 800931c:	b29a      	uxth	r2, r3
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	691a      	ldr	r2, [r3, #16]
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800932c:	b2d2      	uxtb	r2, r2
 800932e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009334:	1c5a      	adds	r2, r3, #1
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800933e:	3b01      	subs	r3, #1
 8009340:	b29a      	uxth	r2, r3
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800934a:	b29b      	uxth	r3, r3
 800934c:	3b01      	subs	r3, #1
 800934e:	b29a      	uxth	r2, r3
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009354:	e0b8      	b.n	80094c8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009358:	9300      	str	r3, [sp, #0]
 800935a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800935c:	2200      	movs	r2, #0
 800935e:	4966      	ldr	r1, [pc, #408]	; (80094f8 <HAL_I2C_Master_Receive+0x448>)
 8009360:	68f8      	ldr	r0, [r7, #12]
 8009362:	f000 fb55 	bl	8009a10 <I2C_WaitOnFlagUntilTimeout>
 8009366:	4603      	mov	r3, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	d001      	beq.n	8009370 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800936c:	2301      	movs	r3, #1
 800936e:	e0bf      	b.n	80094f0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	681a      	ldr	r2, [r3, #0]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800937e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	691a      	ldr	r2, [r3, #16]
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800938a:	b2d2      	uxtb	r2, r2
 800938c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009392:	1c5a      	adds	r2, r3, #1
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800939c:	3b01      	subs	r3, #1
 800939e:	b29a      	uxth	r2, r3
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093a8:	b29b      	uxth	r3, r3
 80093aa:	3b01      	subs	r3, #1
 80093ac:	b29a      	uxth	r2, r3
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80093b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b4:	9300      	str	r3, [sp, #0]
 80093b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b8:	2200      	movs	r2, #0
 80093ba:	494f      	ldr	r1, [pc, #316]	; (80094f8 <HAL_I2C_Master_Receive+0x448>)
 80093bc:	68f8      	ldr	r0, [r7, #12]
 80093be:	f000 fb27 	bl	8009a10 <I2C_WaitOnFlagUntilTimeout>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d001      	beq.n	80093cc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80093c8:	2301      	movs	r3, #1
 80093ca:	e091      	b.n	80094f0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	691a      	ldr	r2, [r3, #16]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e6:	b2d2      	uxtb	r2, r2
 80093e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ee:	1c5a      	adds	r2, r3, #1
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093f8:	3b01      	subs	r3, #1
 80093fa:	b29a      	uxth	r2, r3
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009404:	b29b      	uxth	r3, r3
 8009406:	3b01      	subs	r3, #1
 8009408:	b29a      	uxth	r2, r3
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	691a      	ldr	r2, [r3, #16]
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009418:	b2d2      	uxtb	r2, r2
 800941a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009420:	1c5a      	adds	r2, r3, #1
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800942a:	3b01      	subs	r3, #1
 800942c:	b29a      	uxth	r2, r3
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009436:	b29b      	uxth	r3, r3
 8009438:	3b01      	subs	r3, #1
 800943a:	b29a      	uxth	r2, r3
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009440:	e042      	b.n	80094c8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009444:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009446:	68f8      	ldr	r0, [r7, #12]
 8009448:	f000 fc3a 	bl	8009cc0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800944c:	4603      	mov	r3, r0
 800944e:	2b00      	cmp	r3, #0
 8009450:	d001      	beq.n	8009456 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8009452:	2301      	movs	r3, #1
 8009454:	e04c      	b.n	80094f0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	691a      	ldr	r2, [r3, #16]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009460:	b2d2      	uxtb	r2, r2
 8009462:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009468:	1c5a      	adds	r2, r3, #1
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009472:	3b01      	subs	r3, #1
 8009474:	b29a      	uxth	r2, r3
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800947e:	b29b      	uxth	r3, r3
 8009480:	3b01      	subs	r3, #1
 8009482:	b29a      	uxth	r2, r3
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	695b      	ldr	r3, [r3, #20]
 800948e:	f003 0304 	and.w	r3, r3, #4
 8009492:	2b04      	cmp	r3, #4
 8009494:	d118      	bne.n	80094c8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	691a      	ldr	r2, [r3, #16]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a0:	b2d2      	uxtb	r2, r2
 80094a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a8:	1c5a      	adds	r2, r3, #1
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094b2:	3b01      	subs	r3, #1
 80094b4:	b29a      	uxth	r2, r3
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094be:	b29b      	uxth	r3, r3
 80094c0:	3b01      	subs	r3, #1
 80094c2:	b29a      	uxth	r2, r3
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	f47f aec2 	bne.w	8009256 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2220      	movs	r2, #32
 80094d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2200      	movs	r2, #0
 80094de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2200      	movs	r2, #0
 80094e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80094ea:	2300      	movs	r3, #0
 80094ec:	e000      	b.n	80094f0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80094ee:	2302      	movs	r3, #2
  }
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3728      	adds	r7, #40	; 0x28
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}
 80094f8:	00010004 	.word	0x00010004

080094fc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b08a      	sub	sp, #40	; 0x28
 8009500:	af02      	add	r7, sp, #8
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	607a      	str	r2, [r7, #4]
 8009506:	603b      	str	r3, [r7, #0]
 8009508:	460b      	mov	r3, r1
 800950a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800950c:	f7fe f82a 	bl	8007564 <HAL_GetTick>
 8009510:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8009512:	2301      	movs	r3, #1
 8009514:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800951c:	b2db      	uxtb	r3, r3
 800951e:	2b20      	cmp	r3, #32
 8009520:	f040 8110 	bne.w	8009744 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009524:	69fb      	ldr	r3, [r7, #28]
 8009526:	9300      	str	r3, [sp, #0]
 8009528:	2319      	movs	r3, #25
 800952a:	2201      	movs	r2, #1
 800952c:	4988      	ldr	r1, [pc, #544]	; (8009750 <HAL_I2C_IsDeviceReady+0x254>)
 800952e:	68f8      	ldr	r0, [r7, #12]
 8009530:	f000 fa6e 	bl	8009a10 <I2C_WaitOnFlagUntilTimeout>
 8009534:	4603      	mov	r3, r0
 8009536:	2b00      	cmp	r3, #0
 8009538:	d001      	beq.n	800953e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800953a:	2302      	movs	r3, #2
 800953c:	e103      	b.n	8009746 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009544:	2b01      	cmp	r3, #1
 8009546:	d101      	bne.n	800954c <HAL_I2C_IsDeviceReady+0x50>
 8009548:	2302      	movs	r3, #2
 800954a:	e0fc      	b.n	8009746 <HAL_I2C_IsDeviceReady+0x24a>
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2201      	movs	r2, #1
 8009550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f003 0301 	and.w	r3, r3, #1
 800955e:	2b01      	cmp	r3, #1
 8009560:	d007      	beq.n	8009572 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	681a      	ldr	r2, [r3, #0]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f042 0201 	orr.w	r2, r2, #1
 8009570:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	681a      	ldr	r2, [r3, #0]
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009580:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2224      	movs	r2, #36	; 0x24
 8009586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2200      	movs	r2, #0
 800958e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	4a70      	ldr	r2, [pc, #448]	; (8009754 <HAL_I2C_IsDeviceReady+0x258>)
 8009594:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	681a      	ldr	r2, [r3, #0]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80095a4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80095a6:	69fb      	ldr	r3, [r7, #28]
 80095a8:	9300      	str	r3, [sp, #0]
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	2200      	movs	r2, #0
 80095ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80095b2:	68f8      	ldr	r0, [r7, #12]
 80095b4:	f000 fa2c 	bl	8009a10 <I2C_WaitOnFlagUntilTimeout>
 80095b8:	4603      	mov	r3, r0
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d00c      	beq.n	80095d8 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d003      	beq.n	80095d4 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095d2:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80095d4:	2303      	movs	r3, #3
 80095d6:	e0b6      	b.n	8009746 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80095d8:	897b      	ldrh	r3, [r7, #10]
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	461a      	mov	r2, r3
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80095e6:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80095e8:	f7fd ffbc 	bl	8007564 <HAL_GetTick>
 80095ec:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	695b      	ldr	r3, [r3, #20]
 80095f4:	f003 0302 	and.w	r3, r3, #2
 80095f8:	2b02      	cmp	r3, #2
 80095fa:	bf0c      	ite	eq
 80095fc:	2301      	moveq	r3, #1
 80095fe:	2300      	movne	r3, #0
 8009600:	b2db      	uxtb	r3, r3
 8009602:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	695b      	ldr	r3, [r3, #20]
 800960a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800960e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009612:	bf0c      	ite	eq
 8009614:	2301      	moveq	r3, #1
 8009616:	2300      	movne	r3, #0
 8009618:	b2db      	uxtb	r3, r3
 800961a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800961c:	e025      	b.n	800966a <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800961e:	f7fd ffa1 	bl	8007564 <HAL_GetTick>
 8009622:	4602      	mov	r2, r0
 8009624:	69fb      	ldr	r3, [r7, #28]
 8009626:	1ad3      	subs	r3, r2, r3
 8009628:	683a      	ldr	r2, [r7, #0]
 800962a:	429a      	cmp	r2, r3
 800962c:	d302      	bcc.n	8009634 <HAL_I2C_IsDeviceReady+0x138>
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d103      	bne.n	800963c <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	22a0      	movs	r2, #160	; 0xa0
 8009638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	695b      	ldr	r3, [r3, #20]
 8009642:	f003 0302 	and.w	r3, r3, #2
 8009646:	2b02      	cmp	r3, #2
 8009648:	bf0c      	ite	eq
 800964a:	2301      	moveq	r3, #1
 800964c:	2300      	movne	r3, #0
 800964e:	b2db      	uxtb	r3, r3
 8009650:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	695b      	ldr	r3, [r3, #20]
 8009658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800965c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009660:	bf0c      	ite	eq
 8009662:	2301      	moveq	r3, #1
 8009664:	2300      	movne	r3, #0
 8009666:	b2db      	uxtb	r3, r3
 8009668:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009670:	b2db      	uxtb	r3, r3
 8009672:	2ba0      	cmp	r3, #160	; 0xa0
 8009674:	d005      	beq.n	8009682 <HAL_I2C_IsDeviceReady+0x186>
 8009676:	7dfb      	ldrb	r3, [r7, #23]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d102      	bne.n	8009682 <HAL_I2C_IsDeviceReady+0x186>
 800967c:	7dbb      	ldrb	r3, [r7, #22]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d0cd      	beq.n	800961e <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2220      	movs	r2, #32
 8009686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	695b      	ldr	r3, [r3, #20]
 8009690:	f003 0302 	and.w	r3, r3, #2
 8009694:	2b02      	cmp	r3, #2
 8009696:	d129      	bne.n	80096ec <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096a6:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80096a8:	2300      	movs	r3, #0
 80096aa:	613b      	str	r3, [r7, #16]
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	695b      	ldr	r3, [r3, #20]
 80096b2:	613b      	str	r3, [r7, #16]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	699b      	ldr	r3, [r3, #24]
 80096ba:	613b      	str	r3, [r7, #16]
 80096bc:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80096be:	69fb      	ldr	r3, [r7, #28]
 80096c0:	9300      	str	r3, [sp, #0]
 80096c2:	2319      	movs	r3, #25
 80096c4:	2201      	movs	r2, #1
 80096c6:	4922      	ldr	r1, [pc, #136]	; (8009750 <HAL_I2C_IsDeviceReady+0x254>)
 80096c8:	68f8      	ldr	r0, [r7, #12]
 80096ca:	f000 f9a1 	bl	8009a10 <I2C_WaitOnFlagUntilTimeout>
 80096ce:	4603      	mov	r3, r0
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d001      	beq.n	80096d8 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 80096d4:	2301      	movs	r3, #1
 80096d6:	e036      	b.n	8009746 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2220      	movs	r2, #32
 80096dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80096e8:	2300      	movs	r3, #0
 80096ea:	e02c      	b.n	8009746 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	681a      	ldr	r2, [r3, #0]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096fa:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009704:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009706:	69fb      	ldr	r3, [r7, #28]
 8009708:	9300      	str	r3, [sp, #0]
 800970a:	2319      	movs	r3, #25
 800970c:	2201      	movs	r2, #1
 800970e:	4910      	ldr	r1, [pc, #64]	; (8009750 <HAL_I2C_IsDeviceReady+0x254>)
 8009710:	68f8      	ldr	r0, [r7, #12]
 8009712:	f000 f97d 	bl	8009a10 <I2C_WaitOnFlagUntilTimeout>
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d001      	beq.n	8009720 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 800971c:	2301      	movs	r3, #1
 800971e:	e012      	b.n	8009746 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	3301      	adds	r3, #1
 8009724:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8009726:	69ba      	ldr	r2, [r7, #24]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	429a      	cmp	r2, r3
 800972c:	f4ff af33 	bcc.w	8009596 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2220      	movs	r2, #32
 8009734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2200      	movs	r2, #0
 800973c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009740:	2301      	movs	r3, #1
 8009742:	e000      	b.n	8009746 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8009744:	2302      	movs	r3, #2
  }
}
 8009746:	4618      	mov	r0, r3
 8009748:	3720      	adds	r7, #32
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}
 800974e:	bf00      	nop
 8009750:	00100002 	.word	0x00100002
 8009754:	ffff0000 	.word	0xffff0000

08009758 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009766:	b2db      	uxtb	r3, r3
}
 8009768:	4618      	mov	r0, r3
 800976a:	370c      	adds	r7, #12
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr

08009774 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b088      	sub	sp, #32
 8009778:	af02      	add	r7, sp, #8
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	607a      	str	r2, [r7, #4]
 800977e:	603b      	str	r3, [r7, #0]
 8009780:	460b      	mov	r3, r1
 8009782:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009788:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	2b08      	cmp	r3, #8
 800978e:	d006      	beq.n	800979e <I2C_MasterRequestWrite+0x2a>
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	2b01      	cmp	r3, #1
 8009794:	d003      	beq.n	800979e <I2C_MasterRequestWrite+0x2a>
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800979c:	d108      	bne.n	80097b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097ac:	601a      	str	r2, [r3, #0]
 80097ae:	e00b      	b.n	80097c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097b4:	2b12      	cmp	r3, #18
 80097b6:	d107      	bne.n	80097c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	681a      	ldr	r2, [r3, #0]
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	9300      	str	r3, [sp, #0]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2200      	movs	r2, #0
 80097d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80097d4:	68f8      	ldr	r0, [r7, #12]
 80097d6:	f000 f91b 	bl	8009a10 <I2C_WaitOnFlagUntilTimeout>
 80097da:	4603      	mov	r3, r0
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d00c      	beq.n	80097fa <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d003      	beq.n	80097f6 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80097f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80097f6:	2303      	movs	r3, #3
 80097f8:	e035      	b.n	8009866 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	691b      	ldr	r3, [r3, #16]
 80097fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009802:	d108      	bne.n	8009816 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009804:	897b      	ldrh	r3, [r7, #10]
 8009806:	b2db      	uxtb	r3, r3
 8009808:	461a      	mov	r2, r3
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009812:	611a      	str	r2, [r3, #16]
 8009814:	e01b      	b.n	800984e <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009816:	897b      	ldrh	r3, [r7, #10]
 8009818:	11db      	asrs	r3, r3, #7
 800981a:	b2db      	uxtb	r3, r3
 800981c:	f003 0306 	and.w	r3, r3, #6
 8009820:	b2db      	uxtb	r3, r3
 8009822:	f063 030f 	orn	r3, r3, #15
 8009826:	b2da      	uxtb	r2, r3
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	687a      	ldr	r2, [r7, #4]
 8009832:	490f      	ldr	r1, [pc, #60]	; (8009870 <I2C_MasterRequestWrite+0xfc>)
 8009834:	68f8      	ldr	r0, [r7, #12]
 8009836:	f000 f942 	bl	8009abe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800983a:	4603      	mov	r3, r0
 800983c:	2b00      	cmp	r3, #0
 800983e:	d001      	beq.n	8009844 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8009840:	2301      	movs	r3, #1
 8009842:	e010      	b.n	8009866 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009844:	897b      	ldrh	r3, [r7, #10]
 8009846:	b2da      	uxtb	r2, r3
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	4908      	ldr	r1, [pc, #32]	; (8009874 <I2C_MasterRequestWrite+0x100>)
 8009854:	68f8      	ldr	r0, [r7, #12]
 8009856:	f000 f932 	bl	8009abe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800985a:	4603      	mov	r3, r0
 800985c:	2b00      	cmp	r3, #0
 800985e:	d001      	beq.n	8009864 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8009860:	2301      	movs	r3, #1
 8009862:	e000      	b.n	8009866 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8009864:	2300      	movs	r3, #0
}
 8009866:	4618      	mov	r0, r3
 8009868:	3718      	adds	r7, #24
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
 800986e:	bf00      	nop
 8009870:	00010008 	.word	0x00010008
 8009874:	00010002 	.word	0x00010002

08009878 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b088      	sub	sp, #32
 800987c:	af02      	add	r7, sp, #8
 800987e:	60f8      	str	r0, [r7, #12]
 8009880:	607a      	str	r2, [r7, #4]
 8009882:	603b      	str	r3, [r7, #0]
 8009884:	460b      	mov	r3, r1
 8009886:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800988c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	681a      	ldr	r2, [r3, #0]
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800989c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	2b08      	cmp	r3, #8
 80098a2:	d006      	beq.n	80098b2 <I2C_MasterRequestRead+0x3a>
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d003      	beq.n	80098b2 <I2C_MasterRequestRead+0x3a>
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80098b0:	d108      	bne.n	80098c4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098c0:	601a      	str	r2, [r3, #0]
 80098c2:	e00b      	b.n	80098dc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098c8:	2b11      	cmp	r3, #17
 80098ca:	d107      	bne.n	80098dc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	681a      	ldr	r2, [r3, #0]
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	9300      	str	r3, [sp, #0]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2200      	movs	r2, #0
 80098e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80098e8:	68f8      	ldr	r0, [r7, #12]
 80098ea:	f000 f891 	bl	8009a10 <I2C_WaitOnFlagUntilTimeout>
 80098ee:	4603      	mov	r3, r0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d00c      	beq.n	800990e <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d003      	beq.n	800990a <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009908:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800990a:	2303      	movs	r3, #3
 800990c:	e078      	b.n	8009a00 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	691b      	ldr	r3, [r3, #16]
 8009912:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009916:	d108      	bne.n	800992a <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009918:	897b      	ldrh	r3, [r7, #10]
 800991a:	b2db      	uxtb	r3, r3
 800991c:	f043 0301 	orr.w	r3, r3, #1
 8009920:	b2da      	uxtb	r2, r3
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	611a      	str	r2, [r3, #16]
 8009928:	e05e      	b.n	80099e8 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800992a:	897b      	ldrh	r3, [r7, #10]
 800992c:	11db      	asrs	r3, r3, #7
 800992e:	b2db      	uxtb	r3, r3
 8009930:	f003 0306 	and.w	r3, r3, #6
 8009934:	b2db      	uxtb	r3, r3
 8009936:	f063 030f 	orn	r3, r3, #15
 800993a:	b2da      	uxtb	r2, r3
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	4930      	ldr	r1, [pc, #192]	; (8009a08 <I2C_MasterRequestRead+0x190>)
 8009948:	68f8      	ldr	r0, [r7, #12]
 800994a:	f000 f8b8 	bl	8009abe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800994e:	4603      	mov	r3, r0
 8009950:	2b00      	cmp	r3, #0
 8009952:	d001      	beq.n	8009958 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8009954:	2301      	movs	r3, #1
 8009956:	e053      	b.n	8009a00 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009958:	897b      	ldrh	r3, [r7, #10]
 800995a:	b2da      	uxtb	r2, r3
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	4929      	ldr	r1, [pc, #164]	; (8009a0c <I2C_MasterRequestRead+0x194>)
 8009968:	68f8      	ldr	r0, [r7, #12]
 800996a:	f000 f8a8 	bl	8009abe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800996e:	4603      	mov	r3, r0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d001      	beq.n	8009978 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8009974:	2301      	movs	r3, #1
 8009976:	e043      	b.n	8009a00 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009978:	2300      	movs	r3, #0
 800997a:	613b      	str	r3, [r7, #16]
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	695b      	ldr	r3, [r3, #20]
 8009982:	613b      	str	r3, [r7, #16]
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	699b      	ldr	r3, [r3, #24]
 800998a:	613b      	str	r3, [r7, #16]
 800998c:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	681a      	ldr	r2, [r3, #0]
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800999c:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	9300      	str	r3, [sp, #0]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2200      	movs	r2, #0
 80099a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80099aa:	68f8      	ldr	r0, [r7, #12]
 80099ac:	f000 f830 	bl	8009a10 <I2C_WaitOnFlagUntilTimeout>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d00c      	beq.n	80099d0 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d003      	beq.n	80099cc <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099ca:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80099cc:	2303      	movs	r3, #3
 80099ce:	e017      	b.n	8009a00 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80099d0:	897b      	ldrh	r3, [r7, #10]
 80099d2:	11db      	asrs	r3, r3, #7
 80099d4:	b2db      	uxtb	r3, r3
 80099d6:	f003 0306 	and.w	r3, r3, #6
 80099da:	b2db      	uxtb	r3, r3
 80099dc:	f063 030e 	orn	r3, r3, #14
 80099e0:	b2da      	uxtb	r2, r3
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	4907      	ldr	r1, [pc, #28]	; (8009a0c <I2C_MasterRequestRead+0x194>)
 80099ee:	68f8      	ldr	r0, [r7, #12]
 80099f0:	f000 f865 	bl	8009abe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80099f4:	4603      	mov	r3, r0
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d001      	beq.n	80099fe <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 80099fa:	2301      	movs	r3, #1
 80099fc:	e000      	b.n	8009a00 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 80099fe:	2300      	movs	r3, #0
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3718      	adds	r7, #24
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}
 8009a08:	00010008 	.word	0x00010008
 8009a0c:	00010002 	.word	0x00010002

08009a10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	60f8      	str	r0, [r7, #12]
 8009a18:	60b9      	str	r1, [r7, #8]
 8009a1a:	603b      	str	r3, [r7, #0]
 8009a1c:	4613      	mov	r3, r2
 8009a1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009a20:	e025      	b.n	8009a6e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a28:	d021      	beq.n	8009a6e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a2a:	f7fd fd9b 	bl	8007564 <HAL_GetTick>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	69bb      	ldr	r3, [r7, #24]
 8009a32:	1ad3      	subs	r3, r2, r3
 8009a34:	683a      	ldr	r2, [r7, #0]
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d302      	bcc.n	8009a40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d116      	bne.n	8009a6e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	2200      	movs	r2, #0
 8009a44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2220      	movs	r2, #32
 8009a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2200      	movs	r2, #0
 8009a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a5a:	f043 0220 	orr.w	r2, r3, #32
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2200      	movs	r2, #0
 8009a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	e023      	b.n	8009ab6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	0c1b      	lsrs	r3, r3, #16
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d10d      	bne.n	8009a94 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	695b      	ldr	r3, [r3, #20]
 8009a7e:	43da      	mvns	r2, r3
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	4013      	ands	r3, r2
 8009a84:	b29b      	uxth	r3, r3
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	bf0c      	ite	eq
 8009a8a:	2301      	moveq	r3, #1
 8009a8c:	2300      	movne	r3, #0
 8009a8e:	b2db      	uxtb	r3, r3
 8009a90:	461a      	mov	r2, r3
 8009a92:	e00c      	b.n	8009aae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	699b      	ldr	r3, [r3, #24]
 8009a9a:	43da      	mvns	r2, r3
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	4013      	ands	r3, r2
 8009aa0:	b29b      	uxth	r3, r3
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	bf0c      	ite	eq
 8009aa6:	2301      	moveq	r3, #1
 8009aa8:	2300      	movne	r3, #0
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	461a      	mov	r2, r3
 8009aae:	79fb      	ldrb	r3, [r7, #7]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d0b6      	beq.n	8009a22 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009ab4:	2300      	movs	r3, #0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3710      	adds	r7, #16
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}

08009abe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009abe:	b580      	push	{r7, lr}
 8009ac0:	b084      	sub	sp, #16
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	60f8      	str	r0, [r7, #12]
 8009ac6:	60b9      	str	r1, [r7, #8]
 8009ac8:	607a      	str	r2, [r7, #4]
 8009aca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009acc:	e051      	b.n	8009b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	695b      	ldr	r3, [r3, #20]
 8009ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009adc:	d123      	bne.n	8009b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009aec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009af6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	2200      	movs	r2, #0
 8009afc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2220      	movs	r2, #32
 8009b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b12:	f043 0204 	orr.w	r2, r3, #4
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009b22:	2301      	movs	r3, #1
 8009b24:	e046      	b.n	8009bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b2c:	d021      	beq.n	8009b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b2e:	f7fd fd19 	bl	8007564 <HAL_GetTick>
 8009b32:	4602      	mov	r2, r0
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	1ad3      	subs	r3, r2, r3
 8009b38:	687a      	ldr	r2, [r7, #4]
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d302      	bcc.n	8009b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d116      	bne.n	8009b72 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	2200      	movs	r2, #0
 8009b48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2220      	movs	r2, #32
 8009b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2200      	movs	r2, #0
 8009b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b5e:	f043 0220 	orr.w	r2, r3, #32
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e020      	b.n	8009bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	0c1b      	lsrs	r3, r3, #16
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d10c      	bne.n	8009b96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	695b      	ldr	r3, [r3, #20]
 8009b82:	43da      	mvns	r2, r3
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	4013      	ands	r3, r2
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	bf14      	ite	ne
 8009b8e:	2301      	movne	r3, #1
 8009b90:	2300      	moveq	r3, #0
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	e00b      	b.n	8009bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	699b      	ldr	r3, [r3, #24]
 8009b9c:	43da      	mvns	r2, r3
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	4013      	ands	r3, r2
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	bf14      	ite	ne
 8009ba8:	2301      	movne	r3, #1
 8009baa:	2300      	moveq	r3, #0
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d18d      	bne.n	8009ace <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009bb2:	2300      	movs	r3, #0
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3710      	adds	r7, #16
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b084      	sub	sp, #16
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	60f8      	str	r0, [r7, #12]
 8009bc4:	60b9      	str	r1, [r7, #8]
 8009bc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009bc8:	e02d      	b.n	8009c26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009bca:	68f8      	ldr	r0, [r7, #12]
 8009bcc:	f000 f8ce 	bl	8009d6c <I2C_IsAcknowledgeFailed>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d001      	beq.n	8009bda <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e02d      	b.n	8009c36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009be0:	d021      	beq.n	8009c26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009be2:	f7fd fcbf 	bl	8007564 <HAL_GetTick>
 8009be6:	4602      	mov	r2, r0
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	1ad3      	subs	r3, r2, r3
 8009bec:	68ba      	ldr	r2, [r7, #8]
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d302      	bcc.n	8009bf8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d116      	bne.n	8009c26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2220      	movs	r2, #32
 8009c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c12:	f043 0220 	orr.w	r2, r3, #32
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009c22:	2301      	movs	r3, #1
 8009c24:	e007      	b.n	8009c36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	695b      	ldr	r3, [r3, #20]
 8009c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c30:	2b80      	cmp	r3, #128	; 0x80
 8009c32:	d1ca      	bne.n	8009bca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009c34:	2300      	movs	r3, #0
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3710      	adds	r7, #16
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}

08009c3e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009c3e:	b580      	push	{r7, lr}
 8009c40:	b084      	sub	sp, #16
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	60f8      	str	r0, [r7, #12]
 8009c46:	60b9      	str	r1, [r7, #8]
 8009c48:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009c4a:	e02d      	b.n	8009ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009c4c:	68f8      	ldr	r0, [r7, #12]
 8009c4e:	f000 f88d 	bl	8009d6c <I2C_IsAcknowledgeFailed>
 8009c52:	4603      	mov	r3, r0
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d001      	beq.n	8009c5c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	e02d      	b.n	8009cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c62:	d021      	beq.n	8009ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c64:	f7fd fc7e 	bl	8007564 <HAL_GetTick>
 8009c68:	4602      	mov	r2, r0
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	1ad3      	subs	r3, r2, r3
 8009c6e:	68ba      	ldr	r2, [r7, #8]
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d302      	bcc.n	8009c7a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d116      	bne.n	8009ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2220      	movs	r2, #32
 8009c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c94:	f043 0220 	orr.w	r2, r3, #32
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	e007      	b.n	8009cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	695b      	ldr	r3, [r3, #20]
 8009cae:	f003 0304 	and.w	r3, r3, #4
 8009cb2:	2b04      	cmp	r3, #4
 8009cb4:	d1ca      	bne.n	8009c4c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009cb6:	2300      	movs	r3, #0
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3710      	adds	r7, #16
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b084      	sub	sp, #16
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	60f8      	str	r0, [r7, #12]
 8009cc8:	60b9      	str	r1, [r7, #8]
 8009cca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009ccc:	e042      	b.n	8009d54 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	695b      	ldr	r3, [r3, #20]
 8009cd4:	f003 0310 	and.w	r3, r3, #16
 8009cd8:	2b10      	cmp	r3, #16
 8009cda:	d119      	bne.n	8009d10 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f06f 0210 	mvn.w	r2, #16
 8009ce4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	2220      	movs	r2, #32
 8009cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2200      	movs	r2, #0
 8009d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	e029      	b.n	8009d64 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d10:	f7fd fc28 	bl	8007564 <HAL_GetTick>
 8009d14:	4602      	mov	r2, r0
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	1ad3      	subs	r3, r2, r3
 8009d1a:	68ba      	ldr	r2, [r7, #8]
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d302      	bcc.n	8009d26 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d116      	bne.n	8009d54 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2220      	movs	r2, #32
 8009d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2200      	movs	r2, #0
 8009d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d40:	f043 0220 	orr.w	r2, r3, #32
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009d50:	2301      	movs	r3, #1
 8009d52:	e007      	b.n	8009d64 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	695b      	ldr	r3, [r3, #20]
 8009d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d5e:	2b40      	cmp	r3, #64	; 0x40
 8009d60:	d1b5      	bne.n	8009cce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009d62:	2300      	movs	r3, #0
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3710      	adds	r7, #16
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	695b      	ldr	r3, [r3, #20]
 8009d7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d82:	d11b      	bne.n	8009dbc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009d8c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2200      	movs	r2, #0
 8009d92:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2220      	movs	r2, #32
 8009d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009da8:	f043 0204 	orr.w	r2, r3, #4
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009db8:	2301      	movs	r3, #1
 8009dba:	e000      	b.n	8009dbe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009dbc:	2300      	movs	r3, #0
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	370c      	adds	r7, #12
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc8:	4770      	bx	lr
	...

08009dcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b086      	sub	sp, #24
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d101      	bne.n	8009dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e25b      	b.n	800a296 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f003 0301 	and.w	r3, r3, #1
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d075      	beq.n	8009ed6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009dea:	4ba3      	ldr	r3, [pc, #652]	; (800a078 <HAL_RCC_OscConfig+0x2ac>)
 8009dec:	689b      	ldr	r3, [r3, #8]
 8009dee:	f003 030c 	and.w	r3, r3, #12
 8009df2:	2b04      	cmp	r3, #4
 8009df4:	d00c      	beq.n	8009e10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009df6:	4ba0      	ldr	r3, [pc, #640]	; (800a078 <HAL_RCC_OscConfig+0x2ac>)
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009dfe:	2b08      	cmp	r3, #8
 8009e00:	d112      	bne.n	8009e28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009e02:	4b9d      	ldr	r3, [pc, #628]	; (800a078 <HAL_RCC_OscConfig+0x2ac>)
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e0e:	d10b      	bne.n	8009e28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e10:	4b99      	ldr	r3, [pc, #612]	; (800a078 <HAL_RCC_OscConfig+0x2ac>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d05b      	beq.n	8009ed4 <HAL_RCC_OscConfig+0x108>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d157      	bne.n	8009ed4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009e24:	2301      	movs	r3, #1
 8009e26:	e236      	b.n	800a296 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e30:	d106      	bne.n	8009e40 <HAL_RCC_OscConfig+0x74>
 8009e32:	4b91      	ldr	r3, [pc, #580]	; (800a078 <HAL_RCC_OscConfig+0x2ac>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a90      	ldr	r2, [pc, #576]	; (800a078 <HAL_RCC_OscConfig+0x2ac>)
 8009e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e3c:	6013      	str	r3, [r2, #0]
 8009e3e:	e01d      	b.n	8009e7c <HAL_RCC_OscConfig+0xb0>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009e48:	d10c      	bne.n	8009e64 <HAL_RCC_OscConfig+0x98>
 8009e4a:	4b8b      	ldr	r3, [pc, #556]	; (800a078 <HAL_RCC_OscConfig+0x2ac>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a8a      	ldr	r2, [pc, #552]	; (800a078 <HAL_RCC_OscConfig+0x2ac>)
 8009e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e54:	6013      	str	r3, [r2, #0]
 8009e56:	4b88      	ldr	r3, [pc, #544]	; (800a078 <HAL_RCC_OscConfig+0x2ac>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4a87      	ldr	r2, [pc, #540]	; (800a078 <HAL_RCC_OscConfig+0x2ac>)
 8009e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e60:	6013      	str	r3, [r2, #0]
 8009e62:	e00b      	b.n	8009e7c <HAL_RCC_OscConfig+0xb0>
 8009e64:	4b84      	ldr	r3, [pc, #528]	; (800a078 <HAL_RCC_OscConfig+0x2ac>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a83      	ldr	r2, [pc, #524]	; (800a078 <HAL_RCC_OscConfig+0x2ac>)
 8009e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e6e:	6013      	str	r3, [r2, #0]
 8009e70:	4b81      	ldr	r3, [pc, #516]	; (800a078 <HAL_RCC_OscConfig+0x2ac>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4a80      	ldr	r2, [pc, #512]	; (800a078 <HAL_RCC_OscConfig+0x2ac>)
 8009e76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d013      	beq.n	8009eac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e84:	f7fd fb6e 	bl	8007564 <HAL_GetTick>
 8009e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e8a:	e008      	b.n	8009e9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009e8c:	f7fd fb6a 	bl	8007564 <HAL_GetTick>
 8009e90:	4602      	mov	r2, r0
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	1ad3      	subs	r3, r2, r3
 8009e96:	2b64      	cmp	r3, #100	; 0x64
 8009e98:	d901      	bls.n	8009e9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009e9a:	2303      	movs	r3, #3
 8009e9c:	e1fb      	b.n	800a296 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e9e:	4b76      	ldr	r3, [pc, #472]	; (800a078 <HAL_RCC_OscConfig+0x2ac>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d0f0      	beq.n	8009e8c <HAL_RCC_OscConfig+0xc0>
 8009eaa:	e014      	b.n	8009ed6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009eac:	f7fd fb5a 	bl	8007564 <HAL_GetTick>
 8009eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009eb2:	e008      	b.n	8009ec6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009eb4:	f7fd fb56 	bl	8007564 <HAL_GetTick>
 8009eb8:	4602      	mov	r2, r0
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	1ad3      	subs	r3, r2, r3
 8009ebe:	2b64      	cmp	r3, #100	; 0x64
 8009ec0:	d901      	bls.n	8009ec6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009ec2:	2303      	movs	r3, #3
 8009ec4:	e1e7      	b.n	800a296 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009ec6:	4b6c      	ldr	r3, [pc, #432]	; (800a078 <HAL_RCC_OscConfig+0x2ac>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d1f0      	bne.n	8009eb4 <HAL_RCC_OscConfig+0xe8>
 8009ed2:	e000      	b.n	8009ed6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f003 0302 	and.w	r3, r3, #2
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d063      	beq.n	8009faa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009ee2:	4b65      	ldr	r3, [pc, #404]	; (800a078 <HAL_RCC_OscConfig+0x2ac>)
 8009ee4:	689b      	ldr	r3, [r3, #8]
 8009ee6:	f003 030c 	and.w	r3, r3, #12
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d00b      	beq.n	8009f06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009eee:	4b62      	ldr	r3, [pc, #392]	; (800a078 <HAL_RCC_OscConfig+0x2ac>)
 8009ef0:	689b      	ldr	r3, [r3, #8]
 8009ef2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009ef6:	2b08      	cmp	r3, #8
 8009ef8:	d11c      	bne.n	8009f34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009efa:	4b5f      	ldr	r3, [pc, #380]	; (800a078 <HAL_RCC_OscConfig+0x2ac>)
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d116      	bne.n	8009f34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009f06:	4b5c      	ldr	r3, [pc, #368]	; (800a078 <HAL_RCC_OscConfig+0x2ac>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f003 0302 	and.w	r3, r3, #2
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d005      	beq.n	8009f1e <HAL_RCC_OscConfig+0x152>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	68db      	ldr	r3, [r3, #12]
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	d001      	beq.n	8009f1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e1bb      	b.n	800a296 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f1e:	4b56      	ldr	r3, [pc, #344]	; (800a078 <HAL_RCC_OscConfig+0x2ac>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	691b      	ldr	r3, [r3, #16]
 8009f2a:	00db      	lsls	r3, r3, #3
 8009f2c:	4952      	ldr	r1, [pc, #328]	; (800a078 <HAL_RCC_OscConfig+0x2ac>)
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009f32:	e03a      	b.n	8009faa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	68db      	ldr	r3, [r3, #12]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d020      	beq.n	8009f7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009f3c:	4b4f      	ldr	r3, [pc, #316]	; (800a07c <HAL_RCC_OscConfig+0x2b0>)
 8009f3e:	2201      	movs	r2, #1
 8009f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f42:	f7fd fb0f 	bl	8007564 <HAL_GetTick>
 8009f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f48:	e008      	b.n	8009f5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009f4a:	f7fd fb0b 	bl	8007564 <HAL_GetTick>
 8009f4e:	4602      	mov	r2, r0
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	1ad3      	subs	r3, r2, r3
 8009f54:	2b02      	cmp	r3, #2
 8009f56:	d901      	bls.n	8009f5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009f58:	2303      	movs	r3, #3
 8009f5a:	e19c      	b.n	800a296 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f5c:	4b46      	ldr	r3, [pc, #280]	; (800a078 <HAL_RCC_OscConfig+0x2ac>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f003 0302 	and.w	r3, r3, #2
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d0f0      	beq.n	8009f4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f68:	4b43      	ldr	r3, [pc, #268]	; (800a078 <HAL_RCC_OscConfig+0x2ac>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	691b      	ldr	r3, [r3, #16]
 8009f74:	00db      	lsls	r3, r3, #3
 8009f76:	4940      	ldr	r1, [pc, #256]	; (800a078 <HAL_RCC_OscConfig+0x2ac>)
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	600b      	str	r3, [r1, #0]
 8009f7c:	e015      	b.n	8009faa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009f7e:	4b3f      	ldr	r3, [pc, #252]	; (800a07c <HAL_RCC_OscConfig+0x2b0>)
 8009f80:	2200      	movs	r2, #0
 8009f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f84:	f7fd faee 	bl	8007564 <HAL_GetTick>
 8009f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009f8a:	e008      	b.n	8009f9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009f8c:	f7fd faea 	bl	8007564 <HAL_GetTick>
 8009f90:	4602      	mov	r2, r0
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	1ad3      	subs	r3, r2, r3
 8009f96:	2b02      	cmp	r3, #2
 8009f98:	d901      	bls.n	8009f9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009f9a:	2303      	movs	r3, #3
 8009f9c:	e17b      	b.n	800a296 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009f9e:	4b36      	ldr	r3, [pc, #216]	; (800a078 <HAL_RCC_OscConfig+0x2ac>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f003 0302 	and.w	r3, r3, #2
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d1f0      	bne.n	8009f8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f003 0308 	and.w	r3, r3, #8
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d030      	beq.n	800a018 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	695b      	ldr	r3, [r3, #20]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d016      	beq.n	8009fec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009fbe:	4b30      	ldr	r3, [pc, #192]	; (800a080 <HAL_RCC_OscConfig+0x2b4>)
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009fc4:	f7fd face 	bl	8007564 <HAL_GetTick>
 8009fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009fca:	e008      	b.n	8009fde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009fcc:	f7fd faca 	bl	8007564 <HAL_GetTick>
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	1ad3      	subs	r3, r2, r3
 8009fd6:	2b02      	cmp	r3, #2
 8009fd8:	d901      	bls.n	8009fde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009fda:	2303      	movs	r3, #3
 8009fdc:	e15b      	b.n	800a296 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009fde:	4b26      	ldr	r3, [pc, #152]	; (800a078 <HAL_RCC_OscConfig+0x2ac>)
 8009fe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fe2:	f003 0302 	and.w	r3, r3, #2
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d0f0      	beq.n	8009fcc <HAL_RCC_OscConfig+0x200>
 8009fea:	e015      	b.n	800a018 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009fec:	4b24      	ldr	r3, [pc, #144]	; (800a080 <HAL_RCC_OscConfig+0x2b4>)
 8009fee:	2200      	movs	r2, #0
 8009ff0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009ff2:	f7fd fab7 	bl	8007564 <HAL_GetTick>
 8009ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009ff8:	e008      	b.n	800a00c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009ffa:	f7fd fab3 	bl	8007564 <HAL_GetTick>
 8009ffe:	4602      	mov	r2, r0
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	1ad3      	subs	r3, r2, r3
 800a004:	2b02      	cmp	r3, #2
 800a006:	d901      	bls.n	800a00c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a008:	2303      	movs	r3, #3
 800a00a:	e144      	b.n	800a296 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a00c:	4b1a      	ldr	r3, [pc, #104]	; (800a078 <HAL_RCC_OscConfig+0x2ac>)
 800a00e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a010:	f003 0302 	and.w	r3, r3, #2
 800a014:	2b00      	cmp	r3, #0
 800a016:	d1f0      	bne.n	8009ffa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f003 0304 	and.w	r3, r3, #4
 800a020:	2b00      	cmp	r3, #0
 800a022:	f000 80a0 	beq.w	800a166 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a026:	2300      	movs	r3, #0
 800a028:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a02a:	4b13      	ldr	r3, [pc, #76]	; (800a078 <HAL_RCC_OscConfig+0x2ac>)
 800a02c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a02e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a032:	2b00      	cmp	r3, #0
 800a034:	d10f      	bne.n	800a056 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a036:	2300      	movs	r3, #0
 800a038:	60bb      	str	r3, [r7, #8]
 800a03a:	4b0f      	ldr	r3, [pc, #60]	; (800a078 <HAL_RCC_OscConfig+0x2ac>)
 800a03c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a03e:	4a0e      	ldr	r2, [pc, #56]	; (800a078 <HAL_RCC_OscConfig+0x2ac>)
 800a040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a044:	6413      	str	r3, [r2, #64]	; 0x40
 800a046:	4b0c      	ldr	r3, [pc, #48]	; (800a078 <HAL_RCC_OscConfig+0x2ac>)
 800a048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a04a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a04e:	60bb      	str	r3, [r7, #8]
 800a050:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a052:	2301      	movs	r3, #1
 800a054:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a056:	4b0b      	ldr	r3, [pc, #44]	; (800a084 <HAL_RCC_OscConfig+0x2b8>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d121      	bne.n	800a0a6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a062:	4b08      	ldr	r3, [pc, #32]	; (800a084 <HAL_RCC_OscConfig+0x2b8>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4a07      	ldr	r2, [pc, #28]	; (800a084 <HAL_RCC_OscConfig+0x2b8>)
 800a068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a06c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a06e:	f7fd fa79 	bl	8007564 <HAL_GetTick>
 800a072:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a074:	e011      	b.n	800a09a <HAL_RCC_OscConfig+0x2ce>
 800a076:	bf00      	nop
 800a078:	40023800 	.word	0x40023800
 800a07c:	42470000 	.word	0x42470000
 800a080:	42470e80 	.word	0x42470e80
 800a084:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a088:	f7fd fa6c 	bl	8007564 <HAL_GetTick>
 800a08c:	4602      	mov	r2, r0
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	1ad3      	subs	r3, r2, r3
 800a092:	2b02      	cmp	r3, #2
 800a094:	d901      	bls.n	800a09a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800a096:	2303      	movs	r3, #3
 800a098:	e0fd      	b.n	800a296 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a09a:	4b81      	ldr	r3, [pc, #516]	; (800a2a0 <HAL_RCC_OscConfig+0x4d4>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d0f0      	beq.n	800a088 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	689b      	ldr	r3, [r3, #8]
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	d106      	bne.n	800a0bc <HAL_RCC_OscConfig+0x2f0>
 800a0ae:	4b7d      	ldr	r3, [pc, #500]	; (800a2a4 <HAL_RCC_OscConfig+0x4d8>)
 800a0b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0b2:	4a7c      	ldr	r2, [pc, #496]	; (800a2a4 <HAL_RCC_OscConfig+0x4d8>)
 800a0b4:	f043 0301 	orr.w	r3, r3, #1
 800a0b8:	6713      	str	r3, [r2, #112]	; 0x70
 800a0ba:	e01c      	b.n	800a0f6 <HAL_RCC_OscConfig+0x32a>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	689b      	ldr	r3, [r3, #8]
 800a0c0:	2b05      	cmp	r3, #5
 800a0c2:	d10c      	bne.n	800a0de <HAL_RCC_OscConfig+0x312>
 800a0c4:	4b77      	ldr	r3, [pc, #476]	; (800a2a4 <HAL_RCC_OscConfig+0x4d8>)
 800a0c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0c8:	4a76      	ldr	r2, [pc, #472]	; (800a2a4 <HAL_RCC_OscConfig+0x4d8>)
 800a0ca:	f043 0304 	orr.w	r3, r3, #4
 800a0ce:	6713      	str	r3, [r2, #112]	; 0x70
 800a0d0:	4b74      	ldr	r3, [pc, #464]	; (800a2a4 <HAL_RCC_OscConfig+0x4d8>)
 800a0d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0d4:	4a73      	ldr	r2, [pc, #460]	; (800a2a4 <HAL_RCC_OscConfig+0x4d8>)
 800a0d6:	f043 0301 	orr.w	r3, r3, #1
 800a0da:	6713      	str	r3, [r2, #112]	; 0x70
 800a0dc:	e00b      	b.n	800a0f6 <HAL_RCC_OscConfig+0x32a>
 800a0de:	4b71      	ldr	r3, [pc, #452]	; (800a2a4 <HAL_RCC_OscConfig+0x4d8>)
 800a0e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0e2:	4a70      	ldr	r2, [pc, #448]	; (800a2a4 <HAL_RCC_OscConfig+0x4d8>)
 800a0e4:	f023 0301 	bic.w	r3, r3, #1
 800a0e8:	6713      	str	r3, [r2, #112]	; 0x70
 800a0ea:	4b6e      	ldr	r3, [pc, #440]	; (800a2a4 <HAL_RCC_OscConfig+0x4d8>)
 800a0ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0ee:	4a6d      	ldr	r2, [pc, #436]	; (800a2a4 <HAL_RCC_OscConfig+0x4d8>)
 800a0f0:	f023 0304 	bic.w	r3, r3, #4
 800a0f4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	689b      	ldr	r3, [r3, #8]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d015      	beq.n	800a12a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0fe:	f7fd fa31 	bl	8007564 <HAL_GetTick>
 800a102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a104:	e00a      	b.n	800a11c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a106:	f7fd fa2d 	bl	8007564 <HAL_GetTick>
 800a10a:	4602      	mov	r2, r0
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	1ad3      	subs	r3, r2, r3
 800a110:	f241 3288 	movw	r2, #5000	; 0x1388
 800a114:	4293      	cmp	r3, r2
 800a116:	d901      	bls.n	800a11c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800a118:	2303      	movs	r3, #3
 800a11a:	e0bc      	b.n	800a296 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a11c:	4b61      	ldr	r3, [pc, #388]	; (800a2a4 <HAL_RCC_OscConfig+0x4d8>)
 800a11e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a120:	f003 0302 	and.w	r3, r3, #2
 800a124:	2b00      	cmp	r3, #0
 800a126:	d0ee      	beq.n	800a106 <HAL_RCC_OscConfig+0x33a>
 800a128:	e014      	b.n	800a154 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a12a:	f7fd fa1b 	bl	8007564 <HAL_GetTick>
 800a12e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a130:	e00a      	b.n	800a148 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a132:	f7fd fa17 	bl	8007564 <HAL_GetTick>
 800a136:	4602      	mov	r2, r0
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	1ad3      	subs	r3, r2, r3
 800a13c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a140:	4293      	cmp	r3, r2
 800a142:	d901      	bls.n	800a148 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800a144:	2303      	movs	r3, #3
 800a146:	e0a6      	b.n	800a296 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a148:	4b56      	ldr	r3, [pc, #344]	; (800a2a4 <HAL_RCC_OscConfig+0x4d8>)
 800a14a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a14c:	f003 0302 	and.w	r3, r3, #2
 800a150:	2b00      	cmp	r3, #0
 800a152:	d1ee      	bne.n	800a132 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a154:	7dfb      	ldrb	r3, [r7, #23]
 800a156:	2b01      	cmp	r3, #1
 800a158:	d105      	bne.n	800a166 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a15a:	4b52      	ldr	r3, [pc, #328]	; (800a2a4 <HAL_RCC_OscConfig+0x4d8>)
 800a15c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a15e:	4a51      	ldr	r2, [pc, #324]	; (800a2a4 <HAL_RCC_OscConfig+0x4d8>)
 800a160:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a164:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	699b      	ldr	r3, [r3, #24]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	f000 8092 	beq.w	800a294 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a170:	4b4c      	ldr	r3, [pc, #304]	; (800a2a4 <HAL_RCC_OscConfig+0x4d8>)
 800a172:	689b      	ldr	r3, [r3, #8]
 800a174:	f003 030c 	and.w	r3, r3, #12
 800a178:	2b08      	cmp	r3, #8
 800a17a:	d05c      	beq.n	800a236 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	699b      	ldr	r3, [r3, #24]
 800a180:	2b02      	cmp	r3, #2
 800a182:	d141      	bne.n	800a208 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a184:	4b48      	ldr	r3, [pc, #288]	; (800a2a8 <HAL_RCC_OscConfig+0x4dc>)
 800a186:	2200      	movs	r2, #0
 800a188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a18a:	f7fd f9eb 	bl	8007564 <HAL_GetTick>
 800a18e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a190:	e008      	b.n	800a1a4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a192:	f7fd f9e7 	bl	8007564 <HAL_GetTick>
 800a196:	4602      	mov	r2, r0
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	1ad3      	subs	r3, r2, r3
 800a19c:	2b02      	cmp	r3, #2
 800a19e:	d901      	bls.n	800a1a4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800a1a0:	2303      	movs	r3, #3
 800a1a2:	e078      	b.n	800a296 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a1a4:	4b3f      	ldr	r3, [pc, #252]	; (800a2a4 <HAL_RCC_OscConfig+0x4d8>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d1f0      	bne.n	800a192 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	69da      	ldr	r2, [r3, #28]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6a1b      	ldr	r3, [r3, #32]
 800a1b8:	431a      	orrs	r2, r3
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1be:	019b      	lsls	r3, r3, #6
 800a1c0:	431a      	orrs	r2, r3
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1c6:	085b      	lsrs	r3, r3, #1
 800a1c8:	3b01      	subs	r3, #1
 800a1ca:	041b      	lsls	r3, r3, #16
 800a1cc:	431a      	orrs	r2, r3
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d2:	061b      	lsls	r3, r3, #24
 800a1d4:	4933      	ldr	r1, [pc, #204]	; (800a2a4 <HAL_RCC_OscConfig+0x4d8>)
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a1da:	4b33      	ldr	r3, [pc, #204]	; (800a2a8 <HAL_RCC_OscConfig+0x4dc>)
 800a1dc:	2201      	movs	r2, #1
 800a1de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1e0:	f7fd f9c0 	bl	8007564 <HAL_GetTick>
 800a1e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a1e6:	e008      	b.n	800a1fa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a1e8:	f7fd f9bc 	bl	8007564 <HAL_GetTick>
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	693b      	ldr	r3, [r7, #16]
 800a1f0:	1ad3      	subs	r3, r2, r3
 800a1f2:	2b02      	cmp	r3, #2
 800a1f4:	d901      	bls.n	800a1fa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800a1f6:	2303      	movs	r3, #3
 800a1f8:	e04d      	b.n	800a296 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a1fa:	4b2a      	ldr	r3, [pc, #168]	; (800a2a4 <HAL_RCC_OscConfig+0x4d8>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a202:	2b00      	cmp	r3, #0
 800a204:	d0f0      	beq.n	800a1e8 <HAL_RCC_OscConfig+0x41c>
 800a206:	e045      	b.n	800a294 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a208:	4b27      	ldr	r3, [pc, #156]	; (800a2a8 <HAL_RCC_OscConfig+0x4dc>)
 800a20a:	2200      	movs	r2, #0
 800a20c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a20e:	f7fd f9a9 	bl	8007564 <HAL_GetTick>
 800a212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a214:	e008      	b.n	800a228 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a216:	f7fd f9a5 	bl	8007564 <HAL_GetTick>
 800a21a:	4602      	mov	r2, r0
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	1ad3      	subs	r3, r2, r3
 800a220:	2b02      	cmp	r3, #2
 800a222:	d901      	bls.n	800a228 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800a224:	2303      	movs	r3, #3
 800a226:	e036      	b.n	800a296 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a228:	4b1e      	ldr	r3, [pc, #120]	; (800a2a4 <HAL_RCC_OscConfig+0x4d8>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a230:	2b00      	cmp	r3, #0
 800a232:	d1f0      	bne.n	800a216 <HAL_RCC_OscConfig+0x44a>
 800a234:	e02e      	b.n	800a294 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	699b      	ldr	r3, [r3, #24]
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d101      	bne.n	800a242 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800a23e:	2301      	movs	r3, #1
 800a240:	e029      	b.n	800a296 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a242:	4b18      	ldr	r3, [pc, #96]	; (800a2a4 <HAL_RCC_OscConfig+0x4d8>)
 800a244:	685b      	ldr	r3, [r3, #4]
 800a246:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	69db      	ldr	r3, [r3, #28]
 800a252:	429a      	cmp	r2, r3
 800a254:	d11c      	bne.n	800a290 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a260:	429a      	cmp	r2, r3
 800a262:	d115      	bne.n	800a290 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800a264:	68fa      	ldr	r2, [r7, #12]
 800a266:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a26a:	4013      	ands	r3, r2
 800a26c:	687a      	ldr	r2, [r7, #4]
 800a26e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a270:	4293      	cmp	r3, r2
 800a272:	d10d      	bne.n	800a290 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800a27e:	429a      	cmp	r2, r3
 800a280:	d106      	bne.n	800a290 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d001      	beq.n	800a294 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800a290:	2301      	movs	r3, #1
 800a292:	e000      	b.n	800a296 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800a294:	2300      	movs	r3, #0
}
 800a296:	4618      	mov	r0, r3
 800a298:	3718      	adds	r7, #24
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	40007000 	.word	0x40007000
 800a2a4:	40023800 	.word	0x40023800
 800a2a8:	42470060 	.word	0x42470060

0800a2ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d101      	bne.n	800a2c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a2bc:	2301      	movs	r3, #1
 800a2be:	e0cc      	b.n	800a45a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a2c0:	4b68      	ldr	r3, [pc, #416]	; (800a464 <HAL_RCC_ClockConfig+0x1b8>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f003 030f 	and.w	r3, r3, #15
 800a2c8:	683a      	ldr	r2, [r7, #0]
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d90c      	bls.n	800a2e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a2ce:	4b65      	ldr	r3, [pc, #404]	; (800a464 <HAL_RCC_ClockConfig+0x1b8>)
 800a2d0:	683a      	ldr	r2, [r7, #0]
 800a2d2:	b2d2      	uxtb	r2, r2
 800a2d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a2d6:	4b63      	ldr	r3, [pc, #396]	; (800a464 <HAL_RCC_ClockConfig+0x1b8>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f003 030f 	and.w	r3, r3, #15
 800a2de:	683a      	ldr	r2, [r7, #0]
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d001      	beq.n	800a2e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	e0b8      	b.n	800a45a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f003 0302 	and.w	r3, r3, #2
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d020      	beq.n	800a336 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f003 0304 	and.w	r3, r3, #4
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d005      	beq.n	800a30c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a300:	4b59      	ldr	r3, [pc, #356]	; (800a468 <HAL_RCC_ClockConfig+0x1bc>)
 800a302:	689b      	ldr	r3, [r3, #8]
 800a304:	4a58      	ldr	r2, [pc, #352]	; (800a468 <HAL_RCC_ClockConfig+0x1bc>)
 800a306:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a30a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f003 0308 	and.w	r3, r3, #8
 800a314:	2b00      	cmp	r3, #0
 800a316:	d005      	beq.n	800a324 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a318:	4b53      	ldr	r3, [pc, #332]	; (800a468 <HAL_RCC_ClockConfig+0x1bc>)
 800a31a:	689b      	ldr	r3, [r3, #8]
 800a31c:	4a52      	ldr	r2, [pc, #328]	; (800a468 <HAL_RCC_ClockConfig+0x1bc>)
 800a31e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a322:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a324:	4b50      	ldr	r3, [pc, #320]	; (800a468 <HAL_RCC_ClockConfig+0x1bc>)
 800a326:	689b      	ldr	r3, [r3, #8]
 800a328:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	689b      	ldr	r3, [r3, #8]
 800a330:	494d      	ldr	r1, [pc, #308]	; (800a468 <HAL_RCC_ClockConfig+0x1bc>)
 800a332:	4313      	orrs	r3, r2
 800a334:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f003 0301 	and.w	r3, r3, #1
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d044      	beq.n	800a3cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	685b      	ldr	r3, [r3, #4]
 800a346:	2b01      	cmp	r3, #1
 800a348:	d107      	bne.n	800a35a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a34a:	4b47      	ldr	r3, [pc, #284]	; (800a468 <HAL_RCC_ClockConfig+0x1bc>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a352:	2b00      	cmp	r3, #0
 800a354:	d119      	bne.n	800a38a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a356:	2301      	movs	r3, #1
 800a358:	e07f      	b.n	800a45a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	2b02      	cmp	r3, #2
 800a360:	d003      	beq.n	800a36a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a366:	2b03      	cmp	r3, #3
 800a368:	d107      	bne.n	800a37a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a36a:	4b3f      	ldr	r3, [pc, #252]	; (800a468 <HAL_RCC_ClockConfig+0x1bc>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a372:	2b00      	cmp	r3, #0
 800a374:	d109      	bne.n	800a38a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a376:	2301      	movs	r3, #1
 800a378:	e06f      	b.n	800a45a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a37a:	4b3b      	ldr	r3, [pc, #236]	; (800a468 <HAL_RCC_ClockConfig+0x1bc>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f003 0302 	and.w	r3, r3, #2
 800a382:	2b00      	cmp	r3, #0
 800a384:	d101      	bne.n	800a38a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a386:	2301      	movs	r3, #1
 800a388:	e067      	b.n	800a45a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a38a:	4b37      	ldr	r3, [pc, #220]	; (800a468 <HAL_RCC_ClockConfig+0x1bc>)
 800a38c:	689b      	ldr	r3, [r3, #8]
 800a38e:	f023 0203 	bic.w	r2, r3, #3
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	685b      	ldr	r3, [r3, #4]
 800a396:	4934      	ldr	r1, [pc, #208]	; (800a468 <HAL_RCC_ClockConfig+0x1bc>)
 800a398:	4313      	orrs	r3, r2
 800a39a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a39c:	f7fd f8e2 	bl	8007564 <HAL_GetTick>
 800a3a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a3a2:	e00a      	b.n	800a3ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a3a4:	f7fd f8de 	bl	8007564 <HAL_GetTick>
 800a3a8:	4602      	mov	r2, r0
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	1ad3      	subs	r3, r2, r3
 800a3ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d901      	bls.n	800a3ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a3b6:	2303      	movs	r3, #3
 800a3b8:	e04f      	b.n	800a45a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a3ba:	4b2b      	ldr	r3, [pc, #172]	; (800a468 <HAL_RCC_ClockConfig+0x1bc>)
 800a3bc:	689b      	ldr	r3, [r3, #8]
 800a3be:	f003 020c 	and.w	r2, r3, #12
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	009b      	lsls	r3, r3, #2
 800a3c8:	429a      	cmp	r2, r3
 800a3ca:	d1eb      	bne.n	800a3a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a3cc:	4b25      	ldr	r3, [pc, #148]	; (800a464 <HAL_RCC_ClockConfig+0x1b8>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f003 030f 	and.w	r3, r3, #15
 800a3d4:	683a      	ldr	r2, [r7, #0]
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d20c      	bcs.n	800a3f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a3da:	4b22      	ldr	r3, [pc, #136]	; (800a464 <HAL_RCC_ClockConfig+0x1b8>)
 800a3dc:	683a      	ldr	r2, [r7, #0]
 800a3de:	b2d2      	uxtb	r2, r2
 800a3e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a3e2:	4b20      	ldr	r3, [pc, #128]	; (800a464 <HAL_RCC_ClockConfig+0x1b8>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	f003 030f 	and.w	r3, r3, #15
 800a3ea:	683a      	ldr	r2, [r7, #0]
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	d001      	beq.n	800a3f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	e032      	b.n	800a45a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	f003 0304 	and.w	r3, r3, #4
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d008      	beq.n	800a412 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a400:	4b19      	ldr	r3, [pc, #100]	; (800a468 <HAL_RCC_ClockConfig+0x1bc>)
 800a402:	689b      	ldr	r3, [r3, #8]
 800a404:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	68db      	ldr	r3, [r3, #12]
 800a40c:	4916      	ldr	r1, [pc, #88]	; (800a468 <HAL_RCC_ClockConfig+0x1bc>)
 800a40e:	4313      	orrs	r3, r2
 800a410:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f003 0308 	and.w	r3, r3, #8
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d009      	beq.n	800a432 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a41e:	4b12      	ldr	r3, [pc, #72]	; (800a468 <HAL_RCC_ClockConfig+0x1bc>)
 800a420:	689b      	ldr	r3, [r3, #8]
 800a422:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	691b      	ldr	r3, [r3, #16]
 800a42a:	00db      	lsls	r3, r3, #3
 800a42c:	490e      	ldr	r1, [pc, #56]	; (800a468 <HAL_RCC_ClockConfig+0x1bc>)
 800a42e:	4313      	orrs	r3, r2
 800a430:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a432:	f000 f821 	bl	800a478 <HAL_RCC_GetSysClockFreq>
 800a436:	4601      	mov	r1, r0
 800a438:	4b0b      	ldr	r3, [pc, #44]	; (800a468 <HAL_RCC_ClockConfig+0x1bc>)
 800a43a:	689b      	ldr	r3, [r3, #8]
 800a43c:	091b      	lsrs	r3, r3, #4
 800a43e:	f003 030f 	and.w	r3, r3, #15
 800a442:	4a0a      	ldr	r2, [pc, #40]	; (800a46c <HAL_RCC_ClockConfig+0x1c0>)
 800a444:	5cd3      	ldrb	r3, [r2, r3]
 800a446:	fa21 f303 	lsr.w	r3, r1, r3
 800a44a:	4a09      	ldr	r2, [pc, #36]	; (800a470 <HAL_RCC_ClockConfig+0x1c4>)
 800a44c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a44e:	4b09      	ldr	r3, [pc, #36]	; (800a474 <HAL_RCC_ClockConfig+0x1c8>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	4618      	mov	r0, r3
 800a454:	f7fd f842 	bl	80074dc <HAL_InitTick>

  return HAL_OK;
 800a458:	2300      	movs	r3, #0
}
 800a45a:	4618      	mov	r0, r3
 800a45c:	3710      	adds	r7, #16
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
 800a462:	bf00      	nop
 800a464:	40023c00 	.word	0x40023c00
 800a468:	40023800 	.word	0x40023800
 800a46c:	080150ec 	.word	0x080150ec
 800a470:	20000158 	.word	0x20000158
 800a474:	20000160 	.word	0x20000160

0800a478 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a47a:	b085      	sub	sp, #20
 800a47c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a47e:	2300      	movs	r3, #0
 800a480:	607b      	str	r3, [r7, #4]
 800a482:	2300      	movs	r3, #0
 800a484:	60fb      	str	r3, [r7, #12]
 800a486:	2300      	movs	r3, #0
 800a488:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a48a:	2300      	movs	r3, #0
 800a48c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a48e:	4b50      	ldr	r3, [pc, #320]	; (800a5d0 <HAL_RCC_GetSysClockFreq+0x158>)
 800a490:	689b      	ldr	r3, [r3, #8]
 800a492:	f003 030c 	and.w	r3, r3, #12
 800a496:	2b04      	cmp	r3, #4
 800a498:	d007      	beq.n	800a4aa <HAL_RCC_GetSysClockFreq+0x32>
 800a49a:	2b08      	cmp	r3, #8
 800a49c:	d008      	beq.n	800a4b0 <HAL_RCC_GetSysClockFreq+0x38>
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	f040 808d 	bne.w	800a5be <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a4a4:	4b4b      	ldr	r3, [pc, #300]	; (800a5d4 <HAL_RCC_GetSysClockFreq+0x15c>)
 800a4a6:	60bb      	str	r3, [r7, #8]
       break;
 800a4a8:	e08c      	b.n	800a5c4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a4aa:	4b4b      	ldr	r3, [pc, #300]	; (800a5d8 <HAL_RCC_GetSysClockFreq+0x160>)
 800a4ac:	60bb      	str	r3, [r7, #8]
      break;
 800a4ae:	e089      	b.n	800a5c4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a4b0:	4b47      	ldr	r3, [pc, #284]	; (800a5d0 <HAL_RCC_GetSysClockFreq+0x158>)
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a4b8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a4ba:	4b45      	ldr	r3, [pc, #276]	; (800a5d0 <HAL_RCC_GetSysClockFreq+0x158>)
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d023      	beq.n	800a50e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a4c6:	4b42      	ldr	r3, [pc, #264]	; (800a5d0 <HAL_RCC_GetSysClockFreq+0x158>)
 800a4c8:	685b      	ldr	r3, [r3, #4]
 800a4ca:	099b      	lsrs	r3, r3, #6
 800a4cc:	f04f 0400 	mov.w	r4, #0
 800a4d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a4d4:	f04f 0200 	mov.w	r2, #0
 800a4d8:	ea03 0501 	and.w	r5, r3, r1
 800a4dc:	ea04 0602 	and.w	r6, r4, r2
 800a4e0:	4a3d      	ldr	r2, [pc, #244]	; (800a5d8 <HAL_RCC_GetSysClockFreq+0x160>)
 800a4e2:	fb02 f106 	mul.w	r1, r2, r6
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	fb02 f205 	mul.w	r2, r2, r5
 800a4ec:	440a      	add	r2, r1
 800a4ee:	493a      	ldr	r1, [pc, #232]	; (800a5d8 <HAL_RCC_GetSysClockFreq+0x160>)
 800a4f0:	fba5 0101 	umull	r0, r1, r5, r1
 800a4f4:	1853      	adds	r3, r2, r1
 800a4f6:	4619      	mov	r1, r3
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f04f 0400 	mov.w	r4, #0
 800a4fe:	461a      	mov	r2, r3
 800a500:	4623      	mov	r3, r4
 800a502:	f7f6 fbc1 	bl	8000c88 <__aeabi_uldivmod>
 800a506:	4603      	mov	r3, r0
 800a508:	460c      	mov	r4, r1
 800a50a:	60fb      	str	r3, [r7, #12]
 800a50c:	e049      	b.n	800a5a2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a50e:	4b30      	ldr	r3, [pc, #192]	; (800a5d0 <HAL_RCC_GetSysClockFreq+0x158>)
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	099b      	lsrs	r3, r3, #6
 800a514:	f04f 0400 	mov.w	r4, #0
 800a518:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a51c:	f04f 0200 	mov.w	r2, #0
 800a520:	ea03 0501 	and.w	r5, r3, r1
 800a524:	ea04 0602 	and.w	r6, r4, r2
 800a528:	4629      	mov	r1, r5
 800a52a:	4632      	mov	r2, r6
 800a52c:	f04f 0300 	mov.w	r3, #0
 800a530:	f04f 0400 	mov.w	r4, #0
 800a534:	0154      	lsls	r4, r2, #5
 800a536:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a53a:	014b      	lsls	r3, r1, #5
 800a53c:	4619      	mov	r1, r3
 800a53e:	4622      	mov	r2, r4
 800a540:	1b49      	subs	r1, r1, r5
 800a542:	eb62 0206 	sbc.w	r2, r2, r6
 800a546:	f04f 0300 	mov.w	r3, #0
 800a54a:	f04f 0400 	mov.w	r4, #0
 800a54e:	0194      	lsls	r4, r2, #6
 800a550:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a554:	018b      	lsls	r3, r1, #6
 800a556:	1a5b      	subs	r3, r3, r1
 800a558:	eb64 0402 	sbc.w	r4, r4, r2
 800a55c:	f04f 0100 	mov.w	r1, #0
 800a560:	f04f 0200 	mov.w	r2, #0
 800a564:	00e2      	lsls	r2, r4, #3
 800a566:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a56a:	00d9      	lsls	r1, r3, #3
 800a56c:	460b      	mov	r3, r1
 800a56e:	4614      	mov	r4, r2
 800a570:	195b      	adds	r3, r3, r5
 800a572:	eb44 0406 	adc.w	r4, r4, r6
 800a576:	f04f 0100 	mov.w	r1, #0
 800a57a:	f04f 0200 	mov.w	r2, #0
 800a57e:	02a2      	lsls	r2, r4, #10
 800a580:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a584:	0299      	lsls	r1, r3, #10
 800a586:	460b      	mov	r3, r1
 800a588:	4614      	mov	r4, r2
 800a58a:	4618      	mov	r0, r3
 800a58c:	4621      	mov	r1, r4
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f04f 0400 	mov.w	r4, #0
 800a594:	461a      	mov	r2, r3
 800a596:	4623      	mov	r3, r4
 800a598:	f7f6 fb76 	bl	8000c88 <__aeabi_uldivmod>
 800a59c:	4603      	mov	r3, r0
 800a59e:	460c      	mov	r4, r1
 800a5a0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a5a2:	4b0b      	ldr	r3, [pc, #44]	; (800a5d0 <HAL_RCC_GetSysClockFreq+0x158>)
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	0c1b      	lsrs	r3, r3, #16
 800a5a8:	f003 0303 	and.w	r3, r3, #3
 800a5ac:	3301      	adds	r3, #1
 800a5ae:	005b      	lsls	r3, r3, #1
 800a5b0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a5b2:	68fa      	ldr	r2, [r7, #12]
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5ba:	60bb      	str	r3, [r7, #8]
      break;
 800a5bc:	e002      	b.n	800a5c4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a5be:	4b05      	ldr	r3, [pc, #20]	; (800a5d4 <HAL_RCC_GetSysClockFreq+0x15c>)
 800a5c0:	60bb      	str	r3, [r7, #8]
      break;
 800a5c2:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a5c4:	68bb      	ldr	r3, [r7, #8]
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3714      	adds	r7, #20
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5ce:	bf00      	nop
 800a5d0:	40023800 	.word	0x40023800
 800a5d4:	00f42400 	.word	0x00f42400
 800a5d8:	017d7840 	.word	0x017d7840

0800a5dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a5e0:	4b03      	ldr	r3, [pc, #12]	; (800a5f0 <HAL_RCC_GetHCLKFreq+0x14>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ec:	4770      	bx	lr
 800a5ee:	bf00      	nop
 800a5f0:	20000158 	.word	0x20000158

0800a5f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a5f8:	f7ff fff0 	bl	800a5dc <HAL_RCC_GetHCLKFreq>
 800a5fc:	4601      	mov	r1, r0
 800a5fe:	4b05      	ldr	r3, [pc, #20]	; (800a614 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a600:	689b      	ldr	r3, [r3, #8]
 800a602:	0a9b      	lsrs	r3, r3, #10
 800a604:	f003 0307 	and.w	r3, r3, #7
 800a608:	4a03      	ldr	r2, [pc, #12]	; (800a618 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a60a:	5cd3      	ldrb	r3, [r2, r3]
 800a60c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a610:	4618      	mov	r0, r3
 800a612:	bd80      	pop	{r7, pc}
 800a614:	40023800 	.word	0x40023800
 800a618:	080150fc 	.word	0x080150fc

0800a61c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b082      	sub	sp, #8
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d101      	bne.n	800a62e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a62a:	2301      	movs	r3, #1
 800a62c:	e022      	b.n	800a674 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a634:	b2db      	uxtb	r3, r3
 800a636:	2b00      	cmp	r3, #0
 800a638:	d105      	bne.n	800a646 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f7f8 fc61 	bl	8002f08 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2203      	movs	r2, #3
 800a64a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f000 f814 	bl	800a67c <HAL_SD_InitCard>
 800a654:	4603      	mov	r3, r0
 800a656:	2b00      	cmp	r3, #0
 800a658:	d001      	beq.n	800a65e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a65a:	2301      	movs	r3, #1
 800a65c:	e00a      	b.n	800a674 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2200      	movs	r2, #0
 800a662:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2200      	movs	r2, #0
 800a668:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2201      	movs	r2, #1
 800a66e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a672:	2300      	movs	r3, #0
}
 800a674:	4618      	mov	r0, r3
 800a676:	3708      	adds	r7, #8
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}

0800a67c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a67c:	b5b0      	push	{r4, r5, r7, lr}
 800a67e:	b08e      	sub	sp, #56	; 0x38
 800a680:	af04      	add	r7, sp, #16
 800a682:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800a684:	2300      	movs	r3, #0
 800a686:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800a688:	2300      	movs	r3, #0
 800a68a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a68c:	2300      	movs	r3, #0
 800a68e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800a690:	2300      	movs	r3, #0
 800a692:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a694:	2300      	movs	r3, #0
 800a696:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800a698:	2376      	movs	r3, #118	; 0x76
 800a69a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681d      	ldr	r5, [r3, #0]
 800a6a0:	466c      	mov	r4, sp
 800a6a2:	f107 0314 	add.w	r3, r7, #20
 800a6a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a6aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a6ae:	f107 0308 	add.w	r3, r7, #8
 800a6b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a6b4:	4628      	mov	r0, r5
 800a6b6:	f002 f803 	bl	800c6c0 <SDIO_Init>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800a6c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d001      	beq.n	800a6cc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	e031      	b.n	800a730 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800a6cc:	4b1a      	ldr	r3, [pc, #104]	; (800a738 <HAL_SD_InitCard+0xbc>)
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f002 f83b 	bl	800c752 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800a6dc:	4b16      	ldr	r3, [pc, #88]	; (800a738 <HAL_SD_InitCard+0xbc>)
 800a6de:	2201      	movs	r2, #1
 800a6e0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f000 ffdc 	bl	800b6a0 <SD_PowerON>
 800a6e8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a6ea:	6a3b      	ldr	r3, [r7, #32]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d00b      	beq.n	800a708 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6fc:	6a3b      	ldr	r3, [r7, #32]
 800a6fe:	431a      	orrs	r2, r3
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a704:	2301      	movs	r3, #1
 800a706:	e013      	b.n	800a730 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f000 fefb 	bl	800b504 <SD_InitCard>
 800a70e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a710:	6a3b      	ldr	r3, [r7, #32]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d00b      	beq.n	800a72e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	2201      	movs	r2, #1
 800a71a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a722:	6a3b      	ldr	r3, [r7, #32]
 800a724:	431a      	orrs	r2, r3
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a72a:	2301      	movs	r3, #1
 800a72c:	e000      	b.n	800a730 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800a72e:	2300      	movs	r3, #0
}
 800a730:	4618      	mov	r0, r3
 800a732:	3728      	adds	r7, #40	; 0x28
 800a734:	46bd      	mov	sp, r7
 800a736:	bdb0      	pop	{r4, r5, r7, pc}
 800a738:	422580a0 	.word	0x422580a0

0800a73c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b08c      	sub	sp, #48	; 0x30
 800a740:	af00      	add	r7, sp, #0
 800a742:	60f8      	str	r0, [r7, #12]
 800a744:	60b9      	str	r1, [r7, #8]
 800a746:	607a      	str	r2, [r7, #4]
 800a748:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	2b00      	cmp	r3, #0
 800a752:	d107      	bne.n	800a764 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a758:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a760:	2301      	movs	r3, #1
 800a762:	e0c9      	b.n	800a8f8 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	f040 80c2 	bne.w	800a8f6 <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	2200      	movs	r2, #0
 800a776:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a778:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	441a      	add	r2, r3
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a782:	429a      	cmp	r2, r3
 800a784:	d907      	bls.n	800a796 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a78a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a792:	2301      	movs	r3, #1
 800a794:	e0b0      	b.n	800a8f8 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	2203      	movs	r2, #3
 800a79a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7ac:	68fa      	ldr	r2, [r7, #12]
 800a7ae:	6812      	ldr	r2, [r2, #0]
 800a7b0:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800a7b4:	f043 0302 	orr.w	r3, r3, #2
 800a7b8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7be:	4a50      	ldr	r2, [pc, #320]	; (800a900 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800a7c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7c6:	4a4f      	ldr	r2, [pc, #316]	; (800a904 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800a7c8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	3380      	adds	r3, #128	; 0x80
 800a7dc:	4619      	mov	r1, r3
 800a7de:	68ba      	ldr	r2, [r7, #8]
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	025b      	lsls	r3, r3, #9
 800a7e4:	089b      	lsrs	r3, r3, #2
 800a7e6:	f7fd fce9 	bl	80081bc <HAL_DMA_Start_IT>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d017      	beq.n	800a820 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800a7fe:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4a40      	ldr	r2, [pc, #256]	; (800a908 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800a806:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a80c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2201      	movs	r2, #1
 800a818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a81c:	2301      	movs	r3, #1
 800a81e:	e06b      	b.n	800a8f8 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800a820:	4b3a      	ldr	r3, [pc, #232]	; (800a90c <HAL_SD_ReadBlocks_DMA+0x1d0>)
 800a822:	2201      	movs	r2, #1
 800a824:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a82a:	2b01      	cmp	r3, #1
 800a82c:	d002      	beq.n	800a834 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 800a82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a830:	025b      	lsls	r3, r3, #9
 800a832:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a83c:	4618      	mov	r0, r3
 800a83e:	f002 f81b 	bl	800c878 <SDMMC_CmdBlockLength>
 800a842:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800a844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a846:	2b00      	cmp	r3, #0
 800a848:	d00f      	beq.n	800a86a <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4a2e      	ldr	r2, [pc, #184]	; (800a908 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800a850:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a858:	431a      	orrs	r2, r3
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2201      	movs	r2, #1
 800a862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800a866:	2301      	movs	r3, #1
 800a868:	e046      	b.n	800a8f8 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a86a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a86e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	025b      	lsls	r3, r3, #9
 800a874:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a876:	2390      	movs	r3, #144	; 0x90
 800a878:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a87a:	2302      	movs	r3, #2
 800a87c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a87e:	2300      	movs	r3, #0
 800a880:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800a882:	2301      	movs	r3, #1
 800a884:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f107 0210 	add.w	r2, r7, #16
 800a88e:	4611      	mov	r1, r2
 800a890:	4618      	mov	r0, r3
 800a892:	f001 ffc5 	bl	800c820 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	2b01      	cmp	r3, #1
 800a89a:	d90a      	bls.n	800a8b2 <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2282      	movs	r2, #130	; 0x82
 800a8a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f002 f829 	bl	800c900 <SDMMC_CmdReadMultiBlock>
 800a8ae:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a8b0:	e009      	b.n	800a8c6 <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	2281      	movs	r2, #129	; 0x81
 800a8b6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f001 fffc 	bl	800c8bc <SDMMC_CmdReadSingleBlock>
 800a8c4:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800a8c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d012      	beq.n	800a8f2 <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	4a0d      	ldr	r2, [pc, #52]	; (800a908 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800a8d2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8da:	431a      	orrs	r2, r3
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	e002      	b.n	800a8f8 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	e000      	b.n	800a8f8 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 800a8f6:	2302      	movs	r3, #2
  }
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3730      	adds	r7, #48	; 0x30
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}
 800a900:	0800b313 	.word	0x0800b313
 800a904:	0800b385 	.word	0x0800b385
 800a908:	004005ff 	.word	0x004005ff
 800a90c:	4225858c 	.word	0x4225858c

0800a910 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b08c      	sub	sp, #48	; 0x30
 800a914:	af00      	add	r7, sp, #0
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	60b9      	str	r1, [r7, #8]
 800a91a:	607a      	str	r2, [r7, #4]
 800a91c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d107      	bne.n	800a938 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a92c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a934:	2301      	movs	r3, #1
 800a936:	e0ce      	b.n	800aad6 <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	2b01      	cmp	r3, #1
 800a942:	f040 80c7 	bne.w	800aad4 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	2200      	movs	r2, #0
 800a94a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a94c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	441a      	add	r2, r3
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a956:	429a      	cmp	r2, r3
 800a958:	d907      	bls.n	800a96a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a95e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a966:	2301      	movs	r3, #1
 800a968:	e0b5      	b.n	800aad6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	2203      	movs	r2, #3
 800a96e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	2200      	movs	r2, #0
 800a978:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a980:	68fa      	ldr	r2, [r7, #12]
 800a982:	6812      	ldr	r2, [r2, #0]
 800a984:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800a988:	f043 0302 	orr.w	r3, r3, #2
 800a98c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a992:	4a53      	ldr	r2, [pc, #332]	; (800aae0 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800a994:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a99a:	4a52      	ldr	r2, [pc, #328]	; (800aae4 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800a99c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d002      	beq.n	800a9b4 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800a9ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b0:	025b      	lsls	r3, r3, #9
 800a9b2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f001 ff5b 	bl	800c878 <SDMMC_CmdBlockLength>
 800a9c2:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d00f      	beq.n	800a9ea <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	4a46      	ldr	r2, [pc, #280]	; (800aae8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800a9d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d8:	431a      	orrs	r2, r3
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	e075      	b.n	800aad6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	d90a      	bls.n	800aa06 <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	22a0      	movs	r2, #160	; 0xa0
 800a9f4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f001 ffc3 	bl	800c988 <SDMMC_CmdWriteMultiBlock>
 800aa02:	62f8      	str	r0, [r7, #44]	; 0x2c
 800aa04:	e009      	b.n	800aa1a <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	2290      	movs	r2, #144	; 0x90
 800aa0a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa12:	4618      	mov	r0, r3
 800aa14:	f001 ff96 	bl	800c944 <SDMMC_CmdWriteSingleBlock>
 800aa18:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d012      	beq.n	800aa46 <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	4a30      	ldr	r2, [pc, #192]	; (800aae8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800aa26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa2e:	431a      	orrs	r2, r3
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	2201      	movs	r2, #1
 800aa38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800aa42:	2301      	movs	r3, #1
 800aa44:	e047      	b.n	800aad6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800aa46:	4b29      	ldr	r3, [pc, #164]	; (800aaec <HAL_SD_WriteBlocks_DMA+0x1dc>)
 800aa48:	2201      	movs	r2, #1
 800aa4a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800aa50:	68b9      	ldr	r1, [r7, #8]
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	3380      	adds	r3, #128	; 0x80
 800aa58:	461a      	mov	r2, r3
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	025b      	lsls	r3, r3, #9
 800aa5e:	089b      	lsrs	r3, r3, #2
 800aa60:	f7fd fbac 	bl	80081bc <HAL_DMA_Start_IT>
 800aa64:	4603      	mov	r3, r0
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d01c      	beq.n	800aaa4 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa70:	68fa      	ldr	r2, [r7, #12]
 800aa72:	6812      	ldr	r2, [r2, #0]
 800aa74:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800aa78:	f023 0302 	bic.w	r3, r3, #2
 800aa7c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	4a19      	ldr	r2, [pc, #100]	; (800aae8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800aa84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa8a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2201      	movs	r2, #1
 800aa96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	e018      	b.n	800aad6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800aaa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aaa8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	025b      	lsls	r3, r3, #9
 800aaae:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800aab0:	2390      	movs	r3, #144	; 0x90
 800aab2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800aab4:	2300      	movs	r3, #0
 800aab6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800aab8:	2300      	movs	r3, #0
 800aaba:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800aabc:	2301      	movs	r3, #1
 800aabe:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f107 0210 	add.w	r2, r7, #16
 800aac8:	4611      	mov	r1, r2
 800aaca:	4618      	mov	r0, r3
 800aacc:	f001 fea8 	bl	800c820 <SDIO_ConfigData>

      return HAL_OK;
 800aad0:	2300      	movs	r3, #0
 800aad2:	e000      	b.n	800aad6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 800aad4:	2302      	movs	r3, #2
  }
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3730      	adds	r7, #48	; 0x30
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
 800aade:	bf00      	nop
 800aae0:	0800b2e9 	.word	0x0800b2e9
 800aae4:	0800b385 	.word	0x0800b385
 800aae8:	004005ff 	.word	0x004005ff
 800aaec:	4225858c 	.word	0x4225858c

0800aaf0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aafc:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d008      	beq.n	800ab1e <HAL_SD_IRQHandler+0x2e>
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	f003 0308 	and.w	r3, r3, #8
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d003      	beq.n	800ab1e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f000 ffd8 	bl	800bacc <SD_Read_IT>
 800ab1c:	e165      	b.n	800adea <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	f000 808f 	beq.w	800ac4c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ab36:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab3e:	687a      	ldr	r2, [r7, #4]
 800ab40:	6812      	ldr	r2, [r2, #0]
 800ab42:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800ab46:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800ab4a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f022 0201 	bic.w	r2, r2, #1
 800ab5a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	f003 0308 	and.w	r3, r3, #8
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d039      	beq.n	800abda <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	f003 0302 	and.w	r3, r3, #2
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d104      	bne.n	800ab7a <HAL_SD_IRQHandler+0x8a>
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f003 0320 	and.w	r3, r3, #32
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d011      	beq.n	800ab9e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f001 ff24 	bl	800c9cc <SDMMC_CmdStopTransfer>
 800ab84:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d008      	beq.n	800ab9e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	431a      	orrs	r2, r3
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f000 f92f 	bl	800adfc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f240 523a 	movw	r2, #1338	; 0x53a
 800aba6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2201      	movs	r2, #1
 800abac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2200      	movs	r2, #0
 800abb4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	f003 0301 	and.w	r3, r3, #1
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d104      	bne.n	800abca <HAL_SD_IRQHandler+0xda>
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f003 0302 	and.w	r3, r3, #2
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d003      	beq.n	800abd2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f002 fb82 	bl	800d2d4 <HAL_SD_RxCpltCallback>
 800abd0:	e10b      	b.n	800adea <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f002 fb74 	bl	800d2c0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800abd8:	e107      	b.n	800adea <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	f000 8102 	beq.w	800adea <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	f003 0320 	and.w	r3, r3, #32
 800abec:	2b00      	cmp	r3, #0
 800abee:	d011      	beq.n	800ac14 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	4618      	mov	r0, r3
 800abf6:	f001 fee9 	bl	800c9cc <SDMMC_CmdStopTransfer>
 800abfa:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d008      	beq.n	800ac14 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	431a      	orrs	r2, r3
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f000 f8f4 	bl	800adfc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	f003 0301 	and.w	r3, r3, #1
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	f040 80e5 	bne.w	800adea <HAL_SD_IRQHandler+0x2fa>
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	f003 0302 	and.w	r3, r3, #2
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	f040 80df 	bne.w	800adea <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f022 0208 	bic.w	r2, r2, #8
 800ac3a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2201      	movs	r2, #1
 800ac40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f002 fb3b 	bl	800d2c0 <HAL_SD_TxCpltCallback>
}
 800ac4a:	e0ce      	b.n	800adea <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d008      	beq.n	800ac6c <HAL_SD_IRQHandler+0x17c>
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	f003 0308 	and.w	r3, r3, #8
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d003      	beq.n	800ac6c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f000 ff82 	bl	800bb6e <SD_Write_IT>
 800ac6a:	e0be      	b.n	800adea <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac72:	f240 233a 	movw	r3, #570	; 0x23a
 800ac76:	4013      	ands	r3, r2
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	f000 80b6 	beq.w	800adea <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac84:	f003 0302 	and.w	r3, r3, #2
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d005      	beq.n	800ac98 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac90:	f043 0202 	orr.w	r2, r3, #2
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac9e:	f003 0308 	and.w	r3, r3, #8
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d005      	beq.n	800acb2 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acaa:	f043 0208 	orr.w	r2, r3, #8
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acb8:	f003 0320 	and.w	r3, r3, #32
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d005      	beq.n	800accc <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acc4:	f043 0220 	orr.w	r2, r3, #32
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acd2:	f003 0310 	and.w	r3, r3, #16
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d005      	beq.n	800ace6 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acde:	f043 0210 	orr.w	r2, r3, #16
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d005      	beq.n	800ad00 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acf8:	f043 0208 	orr.w	r2, r3, #8
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f240 723a 	movw	r2, #1850	; 0x73a
 800ad08:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad10:	687a      	ldr	r2, [r7, #4]
 800ad12:	6812      	ldr	r2, [r2, #0]
 800ad14:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800ad18:	f023 0302 	bic.w	r3, r3, #2
 800ad1c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	4618      	mov	r0, r3
 800ad24:	f001 fe52 	bl	800c9cc <SDMMC_CmdStopTransfer>
 800ad28:	4602      	mov	r2, r0
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad2e:	431a      	orrs	r2, r3
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f003 0308 	and.w	r3, r3, #8
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d00a      	beq.n	800ad54 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2201      	movs	r2, #1
 800ad42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f000 f855 	bl	800adfc <HAL_SD_ErrorCallback>
}
 800ad52:	e04a      	b.n	800adea <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d045      	beq.n	800adea <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	f003 0310 	and.w	r3, r3, #16
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d104      	bne.n	800ad72 <HAL_SD_IRQHandler+0x282>
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f003 0320 	and.w	r3, r3, #32
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d011      	beq.n	800ad96 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad76:	4a1f      	ldr	r2, [pc, #124]	; (800adf4 <HAL_SD_IRQHandler+0x304>)
 800ad78:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f7fd fae4 	bl	800834c <HAL_DMA_Abort_IT>
 800ad84:	4603      	mov	r3, r0
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d02f      	beq.n	800adea <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f000 fb4a 	bl	800b428 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800ad94:	e029      	b.n	800adea <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	f003 0301 	and.w	r3, r3, #1
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d104      	bne.n	800adaa <HAL_SD_IRQHandler+0x2ba>
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f003 0302 	and.w	r3, r3, #2
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d011      	beq.n	800adce <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adae:	4a12      	ldr	r2, [pc, #72]	; (800adf8 <HAL_SD_IRQHandler+0x308>)
 800adb0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adb6:	4618      	mov	r0, r3
 800adb8:	f7fd fac8 	bl	800834c <HAL_DMA_Abort_IT>
 800adbc:	4603      	mov	r3, r0
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d013      	beq.n	800adea <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adc6:	4618      	mov	r0, r3
 800adc8:	f000 fb65 	bl	800b496 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800adcc:	e00d      	b.n	800adea <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2200      	movs	r2, #0
 800add2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2201      	movs	r2, #1
 800add8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2200      	movs	r2, #0
 800ade0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f002 fa62 	bl	800d2ac <HAL_SD_AbortCallback>
}
 800ade8:	e7ff      	b.n	800adea <HAL_SD_IRQHandler+0x2fa>
 800adea:	bf00      	nop
 800adec:	3710      	adds	r7, #16
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop
 800adf4:	0800b429 	.word	0x0800b429
 800adf8:	0800b497 	.word	0x0800b497

0800adfc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b083      	sub	sp, #12
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800ae04:	bf00      	nop
 800ae06:	370c      	adds	r7, #12
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr

0800ae10 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b083      	sub	sp, #12
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae1e:	0f9b      	lsrs	r3, r3, #30
 800ae20:	b2da      	uxtb	r2, r3
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae2a:	0e9b      	lsrs	r3, r3, #26
 800ae2c:	b2db      	uxtb	r3, r3
 800ae2e:	f003 030f 	and.w	r3, r3, #15
 800ae32:	b2da      	uxtb	r2, r3
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae3c:	0e1b      	lsrs	r3, r3, #24
 800ae3e:	b2db      	uxtb	r3, r3
 800ae40:	f003 0303 	and.w	r3, r3, #3
 800ae44:	b2da      	uxtb	r2, r3
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae4e:	0c1b      	lsrs	r3, r3, #16
 800ae50:	b2da      	uxtb	r2, r3
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae5a:	0a1b      	lsrs	r3, r3, #8
 800ae5c:	b2da      	uxtb	r2, r3
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae66:	b2da      	uxtb	r2, r3
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae70:	0d1b      	lsrs	r3, r3, #20
 800ae72:	b29a      	uxth	r2, r3
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae7c:	0c1b      	lsrs	r3, r3, #16
 800ae7e:	b2db      	uxtb	r3, r3
 800ae80:	f003 030f 	and.w	r3, r3, #15
 800ae84:	b2da      	uxtb	r2, r3
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae8e:	0bdb      	lsrs	r3, r3, #15
 800ae90:	b2db      	uxtb	r3, r3
 800ae92:	f003 0301 	and.w	r3, r3, #1
 800ae96:	b2da      	uxtb	r2, r3
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aea0:	0b9b      	lsrs	r3, r3, #14
 800aea2:	b2db      	uxtb	r3, r3
 800aea4:	f003 0301 	and.w	r3, r3, #1
 800aea8:	b2da      	uxtb	r2, r3
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aeb2:	0b5b      	lsrs	r3, r3, #13
 800aeb4:	b2db      	uxtb	r3, r3
 800aeb6:	f003 0301 	and.w	r3, r3, #1
 800aeba:	b2da      	uxtb	r2, r3
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aec4:	0b1b      	lsrs	r3, r3, #12
 800aec6:	b2db      	uxtb	r3, r3
 800aec8:	f003 0301 	and.w	r3, r3, #1
 800aecc:	b2da      	uxtb	r2, r3
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	2200      	movs	r2, #0
 800aed6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d163      	bne.n	800afa8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aee4:	009a      	lsls	r2, r3, #2
 800aee6:	f640 73fc 	movw	r3, #4092	; 0xffc
 800aeea:	4013      	ands	r3, r2
 800aeec:	687a      	ldr	r2, [r7, #4]
 800aeee:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800aef0:	0f92      	lsrs	r2, r2, #30
 800aef2:	431a      	orrs	r2, r3
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aefc:	0edb      	lsrs	r3, r3, #27
 800aefe:	b2db      	uxtb	r3, r3
 800af00:	f003 0307 	and.w	r3, r3, #7
 800af04:	b2da      	uxtb	r2, r3
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af0e:	0e1b      	lsrs	r3, r3, #24
 800af10:	b2db      	uxtb	r3, r3
 800af12:	f003 0307 	and.w	r3, r3, #7
 800af16:	b2da      	uxtb	r2, r3
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af20:	0d5b      	lsrs	r3, r3, #21
 800af22:	b2db      	uxtb	r3, r3
 800af24:	f003 0307 	and.w	r3, r3, #7
 800af28:	b2da      	uxtb	r2, r3
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af32:	0c9b      	lsrs	r3, r3, #18
 800af34:	b2db      	uxtb	r3, r3
 800af36:	f003 0307 	and.w	r3, r3, #7
 800af3a:	b2da      	uxtb	r2, r3
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af44:	0bdb      	lsrs	r3, r3, #15
 800af46:	b2db      	uxtb	r3, r3
 800af48:	f003 0307 	and.w	r3, r3, #7
 800af4c:	b2da      	uxtb	r2, r3
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	691b      	ldr	r3, [r3, #16]
 800af56:	1c5a      	adds	r2, r3, #1
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	7e1b      	ldrb	r3, [r3, #24]
 800af60:	b2db      	uxtb	r3, r3
 800af62:	f003 0307 	and.w	r3, r3, #7
 800af66:	3302      	adds	r3, #2
 800af68:	2201      	movs	r2, #1
 800af6a:	fa02 f303 	lsl.w	r3, r2, r3
 800af6e:	687a      	ldr	r2, [r7, #4]
 800af70:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800af72:	fb02 f203 	mul.w	r2, r2, r3
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	7a1b      	ldrb	r3, [r3, #8]
 800af7e:	b2db      	uxtb	r3, r3
 800af80:	f003 030f 	and.w	r3, r3, #15
 800af84:	2201      	movs	r2, #1
 800af86:	409a      	lsls	r2, r3
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af90:	687a      	ldr	r2, [r7, #4]
 800af92:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800af94:	0a52      	lsrs	r2, r2, #9
 800af96:	fb02 f203 	mul.w	r2, r2, r3
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800afa4:	661a      	str	r2, [r3, #96]	; 0x60
 800afa6:	e031      	b.n	800b00c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afac:	2b01      	cmp	r3, #1
 800afae:	d11d      	bne.n	800afec <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800afb4:	041b      	lsls	r3, r3, #16
 800afb6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afbe:	0c1b      	lsrs	r3, r3, #16
 800afc0:	431a      	orrs	r2, r3
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	691b      	ldr	r3, [r3, #16]
 800afca:	3301      	adds	r3, #1
 800afcc:	029a      	lsls	r2, r3, #10
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800afe0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	661a      	str	r2, [r3, #96]	; 0x60
 800afea:	e00f      	b.n	800b00c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4a58      	ldr	r2, [pc, #352]	; (800b154 <HAL_SD_GetCardCSD+0x344>)
 800aff2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aff8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2201      	movs	r2, #1
 800b004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b008:	2301      	movs	r3, #1
 800b00a:	e09d      	b.n	800b148 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b010:	0b9b      	lsrs	r3, r3, #14
 800b012:	b2db      	uxtb	r3, r3
 800b014:	f003 0301 	and.w	r3, r3, #1
 800b018:	b2da      	uxtb	r2, r3
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b022:	09db      	lsrs	r3, r3, #7
 800b024:	b2db      	uxtb	r3, r3
 800b026:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b02a:	b2da      	uxtb	r2, r3
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b034:	b2db      	uxtb	r3, r3
 800b036:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b03a:	b2da      	uxtb	r2, r3
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b044:	0fdb      	lsrs	r3, r3, #31
 800b046:	b2da      	uxtb	r2, r3
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b050:	0f5b      	lsrs	r3, r3, #29
 800b052:	b2db      	uxtb	r3, r3
 800b054:	f003 0303 	and.w	r3, r3, #3
 800b058:	b2da      	uxtb	r2, r3
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b062:	0e9b      	lsrs	r3, r3, #26
 800b064:	b2db      	uxtb	r3, r3
 800b066:	f003 0307 	and.w	r3, r3, #7
 800b06a:	b2da      	uxtb	r2, r3
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b074:	0d9b      	lsrs	r3, r3, #22
 800b076:	b2db      	uxtb	r3, r3
 800b078:	f003 030f 	and.w	r3, r3, #15
 800b07c:	b2da      	uxtb	r2, r3
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b086:	0d5b      	lsrs	r3, r3, #21
 800b088:	b2db      	uxtb	r3, r3
 800b08a:	f003 0301 	and.w	r3, r3, #1
 800b08e:	b2da      	uxtb	r2, r3
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	2200      	movs	r2, #0
 800b09a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0a2:	0c1b      	lsrs	r3, r3, #16
 800b0a4:	b2db      	uxtb	r3, r3
 800b0a6:	f003 0301 	and.w	r3, r3, #1
 800b0aa:	b2da      	uxtb	r2, r3
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0b6:	0bdb      	lsrs	r3, r3, #15
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	f003 0301 	and.w	r3, r3, #1
 800b0be:	b2da      	uxtb	r2, r3
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0ca:	0b9b      	lsrs	r3, r3, #14
 800b0cc:	b2db      	uxtb	r3, r3
 800b0ce:	f003 0301 	and.w	r3, r3, #1
 800b0d2:	b2da      	uxtb	r2, r3
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0de:	0b5b      	lsrs	r3, r3, #13
 800b0e0:	b2db      	uxtb	r3, r3
 800b0e2:	f003 0301 	and.w	r3, r3, #1
 800b0e6:	b2da      	uxtb	r2, r3
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0f2:	0b1b      	lsrs	r3, r3, #12
 800b0f4:	b2db      	uxtb	r3, r3
 800b0f6:	f003 0301 	and.w	r3, r3, #1
 800b0fa:	b2da      	uxtb	r2, r3
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b106:	0a9b      	lsrs	r3, r3, #10
 800b108:	b2db      	uxtb	r3, r3
 800b10a:	f003 0303 	and.w	r3, r3, #3
 800b10e:	b2da      	uxtb	r2, r3
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b11a:	0a1b      	lsrs	r3, r3, #8
 800b11c:	b2db      	uxtb	r3, r3
 800b11e:	f003 0303 	and.w	r3, r3, #3
 800b122:	b2da      	uxtb	r2, r3
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b12e:	085b      	lsrs	r3, r3, #1
 800b130:	b2db      	uxtb	r3, r3
 800b132:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b136:	b2da      	uxtb	r2, r3
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	2201      	movs	r2, #1
 800b142:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800b146:	2300      	movs	r3, #0
}
 800b148:	4618      	mov	r0, r3
 800b14a:	370c      	adds	r7, #12
 800b14c:	46bd      	mov	sp, r7
 800b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b152:	4770      	bx	lr
 800b154:	004005ff 	.word	0x004005ff

0800b158 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b158:	b480      	push	{r7}
 800b15a:	b083      	sub	sp, #12
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
 800b160:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800b1a2:	2300      	movs	r3, #0
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	370c      	adds	r7, #12
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr

0800b1b0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b1b0:	b5b0      	push	{r4, r5, r7, lr}
 800b1b2:	b08e      	sub	sp, #56	; 0x38
 800b1b4:	af04      	add	r7, sp, #16
 800b1b6:	6078      	str	r0, [r7, #4]
 800b1b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2203      	movs	r2, #3
 800b1be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1c6:	2b03      	cmp	r3, #3
 800b1c8:	d02e      	beq.n	800b228 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1d0:	d106      	bne.n	800b1e0 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1d6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	639a      	str	r2, [r3, #56]	; 0x38
 800b1de:	e029      	b.n	800b234 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b1e6:	d10a      	bne.n	800b1fe <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f000 fb0f 	bl	800b80c <SD_WideBus_Enable>
 800b1ee:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f6:	431a      	orrs	r2, r3
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	639a      	str	r2, [r3, #56]	; 0x38
 800b1fc:	e01a      	b.n	800b234 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d10a      	bne.n	800b21a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f000 fb4c 	bl	800b8a2 <SD_WideBus_Disable>
 800b20a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b212:	431a      	orrs	r2, r3
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	639a      	str	r2, [r3, #56]	; 0x38
 800b218:	e00c      	b.n	800b234 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b21e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	639a      	str	r2, [r3, #56]	; 0x38
 800b226:	e005      	b.n	800b234 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b22c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d009      	beq.n	800b250 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4a18      	ldr	r2, [pc, #96]	; (800b2a4 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800b242:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2201      	movs	r2, #1
 800b248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b24c:	2301      	movs	r3, #1
 800b24e:	e024      	b.n	800b29a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	689b      	ldr	r3, [r3, #8]
 800b25a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	68db      	ldr	r3, [r3, #12]
 800b260:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	695b      	ldr	r3, [r3, #20]
 800b26a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	699b      	ldr	r3, [r3, #24]
 800b270:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681d      	ldr	r5, [r3, #0]
 800b276:	466c      	mov	r4, sp
 800b278:	f107 0318 	add.w	r3, r7, #24
 800b27c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b280:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b284:	f107 030c 	add.w	r3, r7, #12
 800b288:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b28a:	4628      	mov	r0, r5
 800b28c:	f001 fa18 	bl	800c6c0 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2201      	movs	r2, #1
 800b294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b298:	2300      	movs	r3, #0
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3728      	adds	r7, #40	; 0x28
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bdb0      	pop	{r4, r5, r7, pc}
 800b2a2:	bf00      	nop
 800b2a4:	004005ff 	.word	0x004005ff

0800b2a8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b086      	sub	sp, #24
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b2b4:	f107 030c 	add.w	r3, r7, #12
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f000 fa7e 	bl	800b7bc <SD_SendStatus>
 800b2c0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d005      	beq.n	800b2d4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	431a      	orrs	r2, r3
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	0a5b      	lsrs	r3, r3, #9
 800b2d8:	f003 030f 	and.w	r3, r3, #15
 800b2dc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b2de:	693b      	ldr	r3, [r7, #16]
}
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	3718      	adds	r7, #24
 800b2e4:	46bd      	mov	sp, r7
 800b2e6:	bd80      	pop	{r7, pc}

0800b2e8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b085      	sub	sp, #20
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2f4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b304:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800b306:	bf00      	nop
 800b308:	3714      	adds	r7, #20
 800b30a:	46bd      	mov	sp, r7
 800b30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b310:	4770      	bx	lr

0800b312 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b312:	b580      	push	{r7, lr}
 800b314:	b084      	sub	sp, #16
 800b316:	af00      	add	r7, sp, #0
 800b318:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b31e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b324:	2b82      	cmp	r3, #130	; 0x82
 800b326:	d111      	bne.n	800b34c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	4618      	mov	r0, r3
 800b32e:	f001 fb4d 	bl	800c9cc <SDMMC_CmdStopTransfer>
 800b332:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d008      	beq.n	800b34c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	431a      	orrs	r2, r3
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800b346:	68f8      	ldr	r0, [r7, #12]
 800b348:	f7ff fd58 	bl	800adfc <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f022 0208 	bic.w	r2, r2, #8
 800b35a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f240 523a 	movw	r2, #1338	; 0x53a
 800b364:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2201      	movs	r2, #1
 800b36a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	2200      	movs	r2, #0
 800b372:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800b374:	68f8      	ldr	r0, [r7, #12]
 800b376:	f001 ffad 	bl	800d2d4 <HAL_SD_RxCpltCallback>
#endif
}
 800b37a:	bf00      	nop
 800b37c:	3710      	adds	r7, #16
 800b37e:	46bd      	mov	sp, r7
 800b380:	bd80      	pop	{r7, pc}
	...

0800b384 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b086      	sub	sp, #24
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b390:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f7fd f986 	bl	80086a4 <HAL_DMA_GetError>
 800b398:	4603      	mov	r3, r0
 800b39a:	2b02      	cmp	r3, #2
 800b39c:	d03e      	beq.n	800b41c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800b39e:	697b      	ldr	r3, [r7, #20]
 800b3a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3a4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3ac:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	2b01      	cmp	r3, #1
 800b3b2:	d002      	beq.n	800b3ba <SD_DMAError+0x36>
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	2b01      	cmp	r3, #1
 800b3b8:	d12d      	bne.n	800b416 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	4a19      	ldr	r2, [pc, #100]	; (800b424 <SD_DMAError+0xa0>)
 800b3c0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b3d0:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3d6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800b3de:	6978      	ldr	r0, [r7, #20]
 800b3e0:	f7ff ff62 	bl	800b2a8 <HAL_SD_GetCardState>
 800b3e4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	2b06      	cmp	r3, #6
 800b3ea:	d002      	beq.n	800b3f2 <SD_DMAError+0x6e>
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	2b05      	cmp	r3, #5
 800b3f0:	d10a      	bne.n	800b408 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f001 fae8 	bl	800c9cc <SDMMC_CmdStopTransfer>
 800b3fc:	4602      	mov	r2, r0
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b402:	431a      	orrs	r2, r3
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	2201      	movs	r2, #1
 800b40c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	2200      	movs	r2, #0
 800b414:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800b416:	6978      	ldr	r0, [r7, #20]
 800b418:	f7ff fcf0 	bl	800adfc <HAL_SD_ErrorCallback>
#endif
  }
}
 800b41c:	bf00      	nop
 800b41e:	3718      	adds	r7, #24
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}
 800b424:	004005ff 	.word	0x004005ff

0800b428 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b434:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f240 523a 	movw	r2, #1338	; 0x53a
 800b43e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b440:	68f8      	ldr	r0, [r7, #12]
 800b442:	f7ff ff31 	bl	800b2a8 <HAL_SD_GetCardState>
 800b446:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	2201      	movs	r2, #1
 800b44c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2200      	movs	r2, #0
 800b454:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	2b06      	cmp	r3, #6
 800b45a:	d002      	beq.n	800b462 <SD_DMATxAbort+0x3a>
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	2b05      	cmp	r3, #5
 800b460:	d10a      	bne.n	800b478 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	4618      	mov	r0, r3
 800b468:	f001 fab0 	bl	800c9cc <SDMMC_CmdStopTransfer>
 800b46c:	4602      	mov	r2, r0
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b472:	431a      	orrs	r2, r3
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d103      	bne.n	800b488 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800b480:	68f8      	ldr	r0, [r7, #12]
 800b482:	f001 ff13 	bl	800d2ac <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b486:	e002      	b.n	800b48e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b488:	68f8      	ldr	r0, [r7, #12]
 800b48a:	f7ff fcb7 	bl	800adfc <HAL_SD_ErrorCallback>
}
 800b48e:	bf00      	nop
 800b490:	3710      	adds	r7, #16
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}

0800b496 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800b496:	b580      	push	{r7, lr}
 800b498:	b084      	sub	sp, #16
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4a2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f240 523a 	movw	r2, #1338	; 0x53a
 800b4ac:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b4ae:	68f8      	ldr	r0, [r7, #12]
 800b4b0:	f7ff fefa 	bl	800b2a8 <HAL_SD_GetCardState>
 800b4b4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	2201      	movs	r2, #1
 800b4ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	2b06      	cmp	r3, #6
 800b4c8:	d002      	beq.n	800b4d0 <SD_DMARxAbort+0x3a>
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	2b05      	cmp	r3, #5
 800b4ce:	d10a      	bne.n	800b4e6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f001 fa79 	bl	800c9cc <SDMMC_CmdStopTransfer>
 800b4da:	4602      	mov	r2, r0
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4e0:	431a      	orrs	r2, r3
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d103      	bne.n	800b4f6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800b4ee:	68f8      	ldr	r0, [r7, #12]
 800b4f0:	f001 fedc 	bl	800d2ac <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b4f4:	e002      	b.n	800b4fc <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b4f6:	68f8      	ldr	r0, [r7, #12]
 800b4f8:	f7ff fc80 	bl	800adfc <HAL_SD_ErrorCallback>
}
 800b4fc:	bf00      	nop
 800b4fe:	3710      	adds	r7, #16
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b504:	b5b0      	push	{r4, r5, r7, lr}
 800b506:	b094      	sub	sp, #80	; 0x50
 800b508:	af04      	add	r7, sp, #16
 800b50a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b50c:	2301      	movs	r3, #1
 800b50e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	4618      	mov	r0, r3
 800b516:	f001 f92b 	bl	800c770 <SDIO_GetPowerState>
 800b51a:	4603      	mov	r3, r0
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d102      	bne.n	800b526 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b520:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b524:	e0b7      	b.n	800b696 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b52a:	2b03      	cmp	r3, #3
 800b52c:	d02f      	beq.n	800b58e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	4618      	mov	r0, r3
 800b534:	f001 fb54 	bl	800cbe0 <SDMMC_CmdSendCID>
 800b538:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b53a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d001      	beq.n	800b544 <SD_InitCard+0x40>
    {
      return errorstate;
 800b540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b542:	e0a8      	b.n	800b696 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	2100      	movs	r1, #0
 800b54a:	4618      	mov	r0, r3
 800b54c:	f001 f955 	bl	800c7fa <SDIO_GetResponse>
 800b550:	4602      	mov	r2, r0
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	2104      	movs	r1, #4
 800b55c:	4618      	mov	r0, r3
 800b55e:	f001 f94c 	bl	800c7fa <SDIO_GetResponse>
 800b562:	4602      	mov	r2, r0
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	2108      	movs	r1, #8
 800b56e:	4618      	mov	r0, r3
 800b570:	f001 f943 	bl	800c7fa <SDIO_GetResponse>
 800b574:	4602      	mov	r2, r0
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	210c      	movs	r1, #12
 800b580:	4618      	mov	r0, r3
 800b582:	f001 f93a 	bl	800c7fa <SDIO_GetResponse>
 800b586:	4602      	mov	r2, r0
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b592:	2b03      	cmp	r3, #3
 800b594:	d00d      	beq.n	800b5b2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f107 020e 	add.w	r2, r7, #14
 800b59e:	4611      	mov	r1, r2
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f001 fb5a 	bl	800cc5a <SDMMC_CmdSetRelAdd>
 800b5a6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b5a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d001      	beq.n	800b5b2 <SD_InitCard+0xae>
    {
      return errorstate;
 800b5ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5b0:	e071      	b.n	800b696 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5b6:	2b03      	cmp	r3, #3
 800b5b8:	d036      	beq.n	800b628 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b5ba:	89fb      	ldrh	r3, [r7, #14]
 800b5bc:	461a      	mov	r2, r3
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	681a      	ldr	r2, [r3, #0]
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5ca:	041b      	lsls	r3, r3, #16
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	4610      	mov	r0, r2
 800b5d0:	f001 fb24 	bl	800cc1c <SDMMC_CmdSendCSD>
 800b5d4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b5d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d001      	beq.n	800b5e0 <SD_InitCard+0xdc>
    {
      return errorstate;
 800b5dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5de:	e05a      	b.n	800b696 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	2100      	movs	r1, #0
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	f001 f907 	bl	800c7fa <SDIO_GetResponse>
 800b5ec:	4602      	mov	r2, r0
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	2104      	movs	r1, #4
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f001 f8fe 	bl	800c7fa <SDIO_GetResponse>
 800b5fe:	4602      	mov	r2, r0
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	2108      	movs	r1, #8
 800b60a:	4618      	mov	r0, r3
 800b60c:	f001 f8f5 	bl	800c7fa <SDIO_GetResponse>
 800b610:	4602      	mov	r2, r0
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	210c      	movs	r1, #12
 800b61c:	4618      	mov	r0, r3
 800b61e:	f001 f8ec 	bl	800c7fa <SDIO_GetResponse>
 800b622:	4602      	mov	r2, r0
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	2104      	movs	r1, #4
 800b62e:	4618      	mov	r0, r3
 800b630:	f001 f8e3 	bl	800c7fa <SDIO_GetResponse>
 800b634:	4603      	mov	r3, r0
 800b636:	0d1a      	lsrs	r2, r3, #20
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b63c:	f107 0310 	add.w	r3, r7, #16
 800b640:	4619      	mov	r1, r3
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f7ff fbe4 	bl	800ae10 <HAL_SD_GetCardCSD>
 800b648:	4603      	mov	r3, r0
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d002      	beq.n	800b654 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b64e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b652:	e020      	b.n	800b696 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6819      	ldr	r1, [r3, #0]
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b65c:	041b      	lsls	r3, r3, #16
 800b65e:	f04f 0400 	mov.w	r4, #0
 800b662:	461a      	mov	r2, r3
 800b664:	4623      	mov	r3, r4
 800b666:	4608      	mov	r0, r1
 800b668:	f001 f9d2 	bl	800ca10 <SDMMC_CmdSelDesel>
 800b66c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b66e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b670:	2b00      	cmp	r3, #0
 800b672:	d001      	beq.n	800b678 <SD_InitCard+0x174>
  {
    return errorstate;
 800b674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b676:	e00e      	b.n	800b696 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681d      	ldr	r5, [r3, #0]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	466c      	mov	r4, sp
 800b680:	f103 0210 	add.w	r2, r3, #16
 800b684:	ca07      	ldmia	r2, {r0, r1, r2}
 800b686:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b68a:	3304      	adds	r3, #4
 800b68c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b68e:	4628      	mov	r0, r5
 800b690:	f001 f816 	bl	800c6c0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b694:	2300      	movs	r3, #0
}
 800b696:	4618      	mov	r0, r3
 800b698:	3740      	adds	r7, #64	; 0x40
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b6a0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b086      	sub	sp, #24
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	617b      	str	r3, [r7, #20]
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f001 f9cc 	bl	800ca56 <SDMMC_CmdGoIdleState>
 800b6be:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d001      	beq.n	800b6ca <SD_PowerON+0x2a>
  {
    return errorstate;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	e072      	b.n	800b7b0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f001 f9df 	bl	800ca92 <SDMMC_CmdOperCond>
 800b6d4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d00d      	beq.n	800b6f8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f001 f9b5 	bl	800ca56 <SDMMC_CmdGoIdleState>
 800b6ec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d004      	beq.n	800b6fe <SD_PowerON+0x5e>
    {
      return errorstate;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	e05b      	b.n	800b7b0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b702:	2b01      	cmp	r3, #1
 800b704:	d137      	bne.n	800b776 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	2100      	movs	r1, #0
 800b70c:	4618      	mov	r0, r3
 800b70e:	f001 f9df 	bl	800cad0 <SDMMC_CmdAppCommand>
 800b712:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d02d      	beq.n	800b776 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b71a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b71e:	e047      	b.n	800b7b0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	2100      	movs	r1, #0
 800b726:	4618      	mov	r0, r3
 800b728:	f001 f9d2 	bl	800cad0 <SDMMC_CmdAppCommand>
 800b72c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d001      	beq.n	800b738 <SD_PowerON+0x98>
    {
      return errorstate;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	e03b      	b.n	800b7b0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	491e      	ldr	r1, [pc, #120]	; (800b7b8 <SD_PowerON+0x118>)
 800b73e:	4618      	mov	r0, r3
 800b740:	f001 f9e8 	bl	800cb14 <SDMMC_CmdAppOperCommand>
 800b744:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d002      	beq.n	800b752 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b74c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b750:	e02e      	b.n	800b7b0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	2100      	movs	r1, #0
 800b758:	4618      	mov	r0, r3
 800b75a:	f001 f84e 	bl	800c7fa <SDIO_GetResponse>
 800b75e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	0fdb      	lsrs	r3, r3, #31
 800b764:	2b01      	cmp	r3, #1
 800b766:	d101      	bne.n	800b76c <SD_PowerON+0xcc>
 800b768:	2301      	movs	r3, #1
 800b76a:	e000      	b.n	800b76e <SD_PowerON+0xce>
 800b76c:	2300      	movs	r3, #0
 800b76e:	613b      	str	r3, [r7, #16]

    count++;
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	3301      	adds	r3, #1
 800b774:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d802      	bhi.n	800b786 <SD_PowerON+0xe6>
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d0cc      	beq.n	800b720 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b78c:	4293      	cmp	r3, r2
 800b78e:	d902      	bls.n	800b796 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b790:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b794:	e00c      	b.n	800b7b0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d003      	beq.n	800b7a8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2201      	movs	r2, #1
 800b7a4:	645a      	str	r2, [r3, #68]	; 0x44
 800b7a6:	e002      	b.n	800b7ae <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800b7ae:	2300      	movs	r3, #0
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	3718      	adds	r7, #24
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}
 800b7b8:	c1100000 	.word	0xc1100000

0800b7bc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b084      	sub	sp, #16
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
 800b7c4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d102      	bne.n	800b7d2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b7cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b7d0:	e018      	b.n	800b804 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681a      	ldr	r2, [r3, #0]
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7da:	041b      	lsls	r3, r3, #16
 800b7dc:	4619      	mov	r1, r3
 800b7de:	4610      	mov	r0, r2
 800b7e0:	f001 fa5c 	bl	800cc9c <SDMMC_CmdSendStatus>
 800b7e4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d001      	beq.n	800b7f0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	e009      	b.n	800b804 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	2100      	movs	r1, #0
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f000 ffff 	bl	800c7fa <SDIO_GetResponse>
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b802:	2300      	movs	r3, #0
}
 800b804:	4618      	mov	r0, r3
 800b806:	3710      	adds	r7, #16
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}

0800b80c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b80c:	b580      	push	{r7, lr}
 800b80e:	b086      	sub	sp, #24
 800b810:	af00      	add	r7, sp, #0
 800b812:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b814:	2300      	movs	r3, #0
 800b816:	60fb      	str	r3, [r7, #12]
 800b818:	2300      	movs	r3, #0
 800b81a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	2100      	movs	r1, #0
 800b822:	4618      	mov	r0, r3
 800b824:	f000 ffe9 	bl	800c7fa <SDIO_GetResponse>
 800b828:	4603      	mov	r3, r0
 800b82a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b82e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b832:	d102      	bne.n	800b83a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b834:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b838:	e02f      	b.n	800b89a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b83a:	f107 030c 	add.w	r3, r7, #12
 800b83e:	4619      	mov	r1, r3
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f000 f879 	bl	800b938 <SD_FindSCR>
 800b846:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d001      	beq.n	800b852 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	e023      	b.n	800b89a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d01c      	beq.n	800b896 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681a      	ldr	r2, [r3, #0]
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b864:	041b      	lsls	r3, r3, #16
 800b866:	4619      	mov	r1, r3
 800b868:	4610      	mov	r0, r2
 800b86a:	f001 f931 	bl	800cad0 <SDMMC_CmdAppCommand>
 800b86e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d001      	beq.n	800b87a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	e00f      	b.n	800b89a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	2102      	movs	r1, #2
 800b880:	4618      	mov	r0, r3
 800b882:	f001 f96a 	bl	800cb5a <SDMMC_CmdBusWidth>
 800b886:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d001      	beq.n	800b892 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	e003      	b.n	800b89a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b892:	2300      	movs	r3, #0
 800b894:	e001      	b.n	800b89a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b896:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3718      	adds	r7, #24
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}

0800b8a2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b8a2:	b580      	push	{r7, lr}
 800b8a4:	b086      	sub	sp, #24
 800b8a6:	af00      	add	r7, sp, #0
 800b8a8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	60fb      	str	r3, [r7, #12]
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	2100      	movs	r1, #0
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	f000 ff9e 	bl	800c7fa <SDIO_GetResponse>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b8c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b8c8:	d102      	bne.n	800b8d0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b8ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b8ce:	e02f      	b.n	800b930 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b8d0:	f107 030c 	add.w	r3, r7, #12
 800b8d4:	4619      	mov	r1, r3
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f000 f82e 	bl	800b938 <SD_FindSCR>
 800b8dc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d001      	beq.n	800b8e8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b8e4:	697b      	ldr	r3, [r7, #20]
 800b8e6:	e023      	b.n	800b930 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d01c      	beq.n	800b92c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681a      	ldr	r2, [r3, #0]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8fa:	041b      	lsls	r3, r3, #16
 800b8fc:	4619      	mov	r1, r3
 800b8fe:	4610      	mov	r0, r2
 800b900:	f001 f8e6 	bl	800cad0 <SDMMC_CmdAppCommand>
 800b904:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b906:	697b      	ldr	r3, [r7, #20]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d001      	beq.n	800b910 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	e00f      	b.n	800b930 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	2100      	movs	r1, #0
 800b916:	4618      	mov	r0, r3
 800b918:	f001 f91f 	bl	800cb5a <SDMMC_CmdBusWidth>
 800b91c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d001      	beq.n	800b928 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b924:	697b      	ldr	r3, [r7, #20]
 800b926:	e003      	b.n	800b930 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b928:	2300      	movs	r3, #0
 800b92a:	e001      	b.n	800b930 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b92c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b930:	4618      	mov	r0, r3
 800b932:	3718      	adds	r7, #24
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}

0800b938 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b938:	b590      	push	{r4, r7, lr}
 800b93a:	b08f      	sub	sp, #60	; 0x3c
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
 800b940:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b942:	f7fb fe0f 	bl	8007564 <HAL_GetTick>
 800b946:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b948:	2300      	movs	r3, #0
 800b94a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800b94c:	2300      	movs	r3, #0
 800b94e:	60bb      	str	r3, [r7, #8]
 800b950:	2300      	movs	r3, #0
 800b952:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	2108      	movs	r1, #8
 800b95e:	4618      	mov	r0, r3
 800b960:	f000 ff8a 	bl	800c878 <SDMMC_CmdBlockLength>
 800b964:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d001      	beq.n	800b970 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b96e:	e0a9      	b.n	800bac4 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681a      	ldr	r2, [r3, #0]
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b978:	041b      	lsls	r3, r3, #16
 800b97a:	4619      	mov	r1, r3
 800b97c:	4610      	mov	r0, r2
 800b97e:	f001 f8a7 	bl	800cad0 <SDMMC_CmdAppCommand>
 800b982:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b986:	2b00      	cmp	r3, #0
 800b988:	d001      	beq.n	800b98e <SD_FindSCR+0x56>
  {
    return errorstate;
 800b98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b98c:	e09a      	b.n	800bac4 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b98e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b992:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b994:	2308      	movs	r3, #8
 800b996:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800b998:	2330      	movs	r3, #48	; 0x30
 800b99a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800b99c:	2302      	movs	r3, #2
 800b99e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f107 0210 	add.w	r2, r7, #16
 800b9b0:	4611      	mov	r1, r2
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f000 ff34 	bl	800c820 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f001 f8ee 	bl	800cb9e <SDMMC_CmdSendSCR>
 800b9c2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d022      	beq.n	800ba10 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800b9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9cc:	e07a      	b.n	800bac4 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d00e      	beq.n	800b9fa <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6819      	ldr	r1, [r3, #0]
 800b9e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9e2:	009b      	lsls	r3, r3, #2
 800b9e4:	f107 0208 	add.w	r2, r7, #8
 800b9e8:	18d4      	adds	r4, r2, r3
 800b9ea:	4608      	mov	r0, r1
 800b9ec:	f000 fe93 	bl	800c716 <SDIO_ReadFIFO>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	6023      	str	r3, [r4, #0]
      index++;
 800b9f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b9fa:	f7fb fdb3 	bl	8007564 <HAL_GetTick>
 800b9fe:	4602      	mov	r2, r0
 800ba00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba02:	1ad3      	subs	r3, r2, r3
 800ba04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba08:	d102      	bne.n	800ba10 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ba0a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba0e:	e059      	b.n	800bac4 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba16:	f240 432a 	movw	r3, #1066	; 0x42a
 800ba1a:	4013      	ands	r3, r2
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d0d6      	beq.n	800b9ce <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba26:	f003 0308 	and.w	r3, r3, #8
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d005      	beq.n	800ba3a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	2208      	movs	r2, #8
 800ba34:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ba36:	2308      	movs	r3, #8
 800ba38:	e044      	b.n	800bac4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba40:	f003 0302 	and.w	r3, r3, #2
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d005      	beq.n	800ba54 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	2202      	movs	r2, #2
 800ba4e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ba50:	2302      	movs	r3, #2
 800ba52:	e037      	b.n	800bac4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba5a:	f003 0320 	and.w	r3, r3, #32
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d005      	beq.n	800ba6e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	2220      	movs	r2, #32
 800ba68:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ba6a:	2320      	movs	r3, #32
 800ba6c:	e02a      	b.n	800bac4 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	f240 523a 	movw	r2, #1338	; 0x53a
 800ba76:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	061a      	lsls	r2, r3, #24
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	021b      	lsls	r3, r3, #8
 800ba80:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ba84:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	0a1b      	lsrs	r3, r3, #8
 800ba8a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ba8e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	0e1b      	lsrs	r3, r3, #24
 800ba94:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ba96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba98:	601a      	str	r2, [r3, #0]
    scr++;
 800ba9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba9c:	3304      	adds	r3, #4
 800ba9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	061a      	lsls	r2, r3, #24
 800baa4:	68bb      	ldr	r3, [r7, #8]
 800baa6:	021b      	lsls	r3, r3, #8
 800baa8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800baac:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	0a1b      	lsrs	r3, r3, #8
 800bab2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800bab6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800bab8:	68bb      	ldr	r3, [r7, #8]
 800baba:	0e1b      	lsrs	r3, r3, #24
 800babc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800babe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bac0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800bac2:	2300      	movs	r3, #0
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	373c      	adds	r7, #60	; 0x3c
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd90      	pop	{r4, r7, pc}

0800bacc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b086      	sub	sp, #24
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bad8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bade:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d03f      	beq.n	800bb66 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800bae6:	2300      	movs	r3, #0
 800bae8:	617b      	str	r3, [r7, #20]
 800baea:	e033      	b.n	800bb54 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	4618      	mov	r0, r3
 800baf2:	f000 fe10 	bl	800c716 <SDIO_ReadFIFO>
 800baf6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	b2da      	uxtb	r2, r3
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	3301      	adds	r3, #1
 800bb04:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	3b01      	subs	r3, #1
 800bb0a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	0a1b      	lsrs	r3, r3, #8
 800bb10:	b2da      	uxtb	r2, r3
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	3301      	adds	r3, #1
 800bb1a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	3b01      	subs	r3, #1
 800bb20:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800bb22:	68bb      	ldr	r3, [r7, #8]
 800bb24:	0c1b      	lsrs	r3, r3, #16
 800bb26:	b2da      	uxtb	r2, r3
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	3301      	adds	r3, #1
 800bb30:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	3b01      	subs	r3, #1
 800bb36:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	0e1b      	lsrs	r3, r3, #24
 800bb3c:	b2da      	uxtb	r2, r3
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	3301      	adds	r3, #1
 800bb46:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	3b01      	subs	r3, #1
 800bb4c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	3301      	adds	r3, #1
 800bb52:	617b      	str	r3, [r7, #20]
 800bb54:	697b      	ldr	r3, [r7, #20]
 800bb56:	2b07      	cmp	r3, #7
 800bb58:	d9c8      	bls.n	800baec <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	68fa      	ldr	r2, [r7, #12]
 800bb5e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	693a      	ldr	r2, [r7, #16]
 800bb64:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800bb66:	bf00      	nop
 800bb68:	3718      	adds	r7, #24
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}

0800bb6e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800bb6e:	b580      	push	{r7, lr}
 800bb70:	b086      	sub	sp, #24
 800bb72:	af00      	add	r7, sp, #0
 800bb74:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6a1b      	ldr	r3, [r3, #32]
 800bb7a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb80:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d043      	beq.n	800bc10 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800bb88:	2300      	movs	r3, #0
 800bb8a:	617b      	str	r3, [r7, #20]
 800bb8c:	e037      	b.n	800bbfe <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	781b      	ldrb	r3, [r3, #0]
 800bb92:	60bb      	str	r3, [r7, #8]
      tmp++;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	3301      	adds	r3, #1
 800bb98:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	3b01      	subs	r3, #1
 800bb9e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	781b      	ldrb	r3, [r3, #0]
 800bba4:	021a      	lsls	r2, r3, #8
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	60bb      	str	r3, [r7, #8]
      tmp++;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	3301      	adds	r3, #1
 800bbb0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	3b01      	subs	r3, #1
 800bbb6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	781b      	ldrb	r3, [r3, #0]
 800bbbc:	041a      	lsls	r2, r3, #16
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	4313      	orrs	r3, r2
 800bbc2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	3301      	adds	r3, #1
 800bbc8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	3b01      	subs	r3, #1
 800bbce:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	781b      	ldrb	r3, [r3, #0]
 800bbd4:	061a      	lsls	r2, r3, #24
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	4313      	orrs	r3, r2
 800bbda:	60bb      	str	r3, [r7, #8]
      tmp++;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	3301      	adds	r3, #1
 800bbe0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	3b01      	subs	r3, #1
 800bbe6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f107 0208 	add.w	r2, r7, #8
 800bbf0:	4611      	mov	r1, r2
 800bbf2:	4618      	mov	r0, r3
 800bbf4:	f000 fd9c 	bl	800c730 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	3301      	adds	r3, #1
 800bbfc:	617b      	str	r3, [r7, #20]
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	2b07      	cmp	r3, #7
 800bc02:	d9c4      	bls.n	800bb8e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	68fa      	ldr	r2, [r7, #12]
 800bc08:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	693a      	ldr	r2, [r7, #16]
 800bc0e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800bc10:	bf00      	nop
 800bc12:	3718      	adds	r7, #24
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}

0800bc18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b082      	sub	sp, #8
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d101      	bne.n	800bc2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bc26:	2301      	movs	r3, #1
 800bc28:	e056      	b.n	800bcd8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bc36:	b2db      	uxtb	r3, r3
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d106      	bne.n	800bc4a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f7f7 fe65 	bl	8003914 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2202      	movs	r2, #2
 800bc4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	681a      	ldr	r2, [r3, #0]
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc60:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	685a      	ldr	r2, [r3, #4]
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	689b      	ldr	r3, [r3, #8]
 800bc6a:	431a      	orrs	r2, r3
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	68db      	ldr	r3, [r3, #12]
 800bc70:	431a      	orrs	r2, r3
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	691b      	ldr	r3, [r3, #16]
 800bc76:	431a      	orrs	r2, r3
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	695b      	ldr	r3, [r3, #20]
 800bc7c:	431a      	orrs	r2, r3
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	699b      	ldr	r3, [r3, #24]
 800bc82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bc86:	431a      	orrs	r2, r3
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	69db      	ldr	r3, [r3, #28]
 800bc8c:	431a      	orrs	r2, r3
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	6a1b      	ldr	r3, [r3, #32]
 800bc92:	ea42 0103 	orr.w	r1, r2, r3
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	430a      	orrs	r2, r1
 800bca0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	699b      	ldr	r3, [r3, #24]
 800bca6:	0c1b      	lsrs	r3, r3, #16
 800bca8:	f003 0104 	and.w	r1, r3, #4
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	430a      	orrs	r2, r1
 800bcb6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	69da      	ldr	r2, [r3, #28]
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bcc6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2200      	movs	r2, #0
 800bccc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2201      	movs	r2, #1
 800bcd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800bcd6:	2300      	movs	r3, #0
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3708      	adds	r7, #8
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}

0800bce0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b088      	sub	sp, #32
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	60f8      	str	r0, [r7, #12]
 800bce8:	60b9      	str	r1, [r7, #8]
 800bcea:	603b      	str	r3, [r7, #0]
 800bcec:	4613      	mov	r3, r2
 800bcee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bcfa:	2b01      	cmp	r3, #1
 800bcfc:	d101      	bne.n	800bd02 <HAL_SPI_Transmit+0x22>
 800bcfe:	2302      	movs	r3, #2
 800bd00:	e11e      	b.n	800bf40 <HAL_SPI_Transmit+0x260>
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	2201      	movs	r2, #1
 800bd06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bd0a:	f7fb fc2b 	bl	8007564 <HAL_GetTick>
 800bd0e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800bd10:	88fb      	ldrh	r3, [r7, #6]
 800bd12:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bd1a:	b2db      	uxtb	r3, r3
 800bd1c:	2b01      	cmp	r3, #1
 800bd1e:	d002      	beq.n	800bd26 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800bd20:	2302      	movs	r3, #2
 800bd22:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bd24:	e103      	b.n	800bf2e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d002      	beq.n	800bd32 <HAL_SPI_Transmit+0x52>
 800bd2c:	88fb      	ldrh	r3, [r7, #6]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d102      	bne.n	800bd38 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800bd32:	2301      	movs	r3, #1
 800bd34:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bd36:	e0fa      	b.n	800bf2e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	2203      	movs	r2, #3
 800bd3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	2200      	movs	r2, #0
 800bd44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	68ba      	ldr	r2, [r7, #8]
 800bd4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	88fa      	ldrh	r2, [r7, #6]
 800bd50:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	88fa      	ldrh	r2, [r7, #6]
 800bd56:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	2200      	movs	r2, #0
 800bd62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2200      	movs	r2, #0
 800bd68:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	2200      	movs	r2, #0
 800bd74:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	689b      	ldr	r3, [r3, #8]
 800bd7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd7e:	d107      	bne.n	800bd90 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	681a      	ldr	r2, [r3, #0]
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bd8e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd9a:	2b40      	cmp	r3, #64	; 0x40
 800bd9c:	d007      	beq.n	800bdae <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	681a      	ldr	r2, [r3, #0]
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bdac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	68db      	ldr	r3, [r3, #12]
 800bdb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bdb6:	d14b      	bne.n	800be50 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	685b      	ldr	r3, [r3, #4]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d002      	beq.n	800bdc6 <HAL_SPI_Transmit+0xe6>
 800bdc0:	8afb      	ldrh	r3, [r7, #22]
 800bdc2:	2b01      	cmp	r3, #1
 800bdc4:	d13e      	bne.n	800be44 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdca:	881a      	ldrh	r2, [r3, #0]
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdd6:	1c9a      	adds	r2, r3, #2
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bde0:	b29b      	uxth	r3, r3
 800bde2:	3b01      	subs	r3, #1
 800bde4:	b29a      	uxth	r2, r3
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800bdea:	e02b      	b.n	800be44 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	689b      	ldr	r3, [r3, #8]
 800bdf2:	f003 0302 	and.w	r3, r3, #2
 800bdf6:	2b02      	cmp	r3, #2
 800bdf8:	d112      	bne.n	800be20 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdfe:	881a      	ldrh	r2, [r3, #0]
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be0a:	1c9a      	adds	r2, r3, #2
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800be14:	b29b      	uxth	r3, r3
 800be16:	3b01      	subs	r3, #1
 800be18:	b29a      	uxth	r2, r3
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	86da      	strh	r2, [r3, #54]	; 0x36
 800be1e:	e011      	b.n	800be44 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be20:	f7fb fba0 	bl	8007564 <HAL_GetTick>
 800be24:	4602      	mov	r2, r0
 800be26:	69bb      	ldr	r3, [r7, #24]
 800be28:	1ad3      	subs	r3, r2, r3
 800be2a:	683a      	ldr	r2, [r7, #0]
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d803      	bhi.n	800be38 <HAL_SPI_Transmit+0x158>
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be36:	d102      	bne.n	800be3e <HAL_SPI_Transmit+0x15e>
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d102      	bne.n	800be44 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800be3e:	2303      	movs	r3, #3
 800be40:	77fb      	strb	r3, [r7, #31]
          goto error;
 800be42:	e074      	b.n	800bf2e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800be48:	b29b      	uxth	r3, r3
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d1ce      	bne.n	800bdec <HAL_SPI_Transmit+0x10c>
 800be4e:	e04c      	b.n	800beea <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	685b      	ldr	r3, [r3, #4]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d002      	beq.n	800be5e <HAL_SPI_Transmit+0x17e>
 800be58:	8afb      	ldrh	r3, [r7, #22]
 800be5a:	2b01      	cmp	r3, #1
 800be5c:	d140      	bne.n	800bee0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	330c      	adds	r3, #12
 800be68:	7812      	ldrb	r2, [r2, #0]
 800be6a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be70:	1c5a      	adds	r2, r3, #1
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800be7a:	b29b      	uxth	r3, r3
 800be7c:	3b01      	subs	r3, #1
 800be7e:	b29a      	uxth	r2, r3
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800be84:	e02c      	b.n	800bee0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	689b      	ldr	r3, [r3, #8]
 800be8c:	f003 0302 	and.w	r3, r3, #2
 800be90:	2b02      	cmp	r3, #2
 800be92:	d113      	bne.n	800bebc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	330c      	adds	r3, #12
 800be9e:	7812      	ldrb	r2, [r2, #0]
 800bea0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bea6:	1c5a      	adds	r2, r3, #1
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800beb0:	b29b      	uxth	r3, r3
 800beb2:	3b01      	subs	r3, #1
 800beb4:	b29a      	uxth	r2, r3
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	86da      	strh	r2, [r3, #54]	; 0x36
 800beba:	e011      	b.n	800bee0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800bebc:	f7fb fb52 	bl	8007564 <HAL_GetTick>
 800bec0:	4602      	mov	r2, r0
 800bec2:	69bb      	ldr	r3, [r7, #24]
 800bec4:	1ad3      	subs	r3, r2, r3
 800bec6:	683a      	ldr	r2, [r7, #0]
 800bec8:	429a      	cmp	r2, r3
 800beca:	d803      	bhi.n	800bed4 <HAL_SPI_Transmit+0x1f4>
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bed2:	d102      	bne.n	800beda <HAL_SPI_Transmit+0x1fa>
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d102      	bne.n	800bee0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800beda:	2303      	movs	r3, #3
 800bedc:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bede:	e026      	b.n	800bf2e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bee4:	b29b      	uxth	r3, r3
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d1cd      	bne.n	800be86 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800beea:	69ba      	ldr	r2, [r7, #24]
 800beec:	6839      	ldr	r1, [r7, #0]
 800beee:	68f8      	ldr	r0, [r7, #12]
 800bef0:	f000 fba4 	bl	800c63c <SPI_EndRxTxTransaction>
 800bef4:	4603      	mov	r3, r0
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d002      	beq.n	800bf00 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	2220      	movs	r2, #32
 800befe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	689b      	ldr	r3, [r3, #8]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d10a      	bne.n	800bf1e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bf08:	2300      	movs	r3, #0
 800bf0a:	613b      	str	r3, [r7, #16]
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	68db      	ldr	r3, [r3, #12]
 800bf12:	613b      	str	r3, [r7, #16]
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	689b      	ldr	r3, [r3, #8]
 800bf1a:	613b      	str	r3, [r7, #16]
 800bf1c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d002      	beq.n	800bf2c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800bf26:	2301      	movs	r3, #1
 800bf28:	77fb      	strb	r3, [r7, #31]
 800bf2a:	e000      	b.n	800bf2e <HAL_SPI_Transmit+0x24e>
  }

error:
 800bf2c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	2201      	movs	r2, #1
 800bf32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bf3e:	7ffb      	ldrb	r3, [r7, #31]
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3720      	adds	r7, #32
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}

0800bf48 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b088      	sub	sp, #32
 800bf4c:	af02      	add	r7, sp, #8
 800bf4e:	60f8      	str	r0, [r7, #12]
 800bf50:	60b9      	str	r1, [r7, #8]
 800bf52:	603b      	str	r3, [r7, #0]
 800bf54:	4613      	mov	r3, r2
 800bf56:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bf58:	2300      	movs	r3, #0
 800bf5a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	685b      	ldr	r3, [r3, #4]
 800bf60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bf64:	d112      	bne.n	800bf8c <HAL_SPI_Receive+0x44>
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	689b      	ldr	r3, [r3, #8]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d10e      	bne.n	800bf8c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	2204      	movs	r2, #4
 800bf72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800bf76:	88fa      	ldrh	r2, [r7, #6]
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	9300      	str	r3, [sp, #0]
 800bf7c:	4613      	mov	r3, r2
 800bf7e:	68ba      	ldr	r2, [r7, #8]
 800bf80:	68b9      	ldr	r1, [r7, #8]
 800bf82:	68f8      	ldr	r0, [r7, #12]
 800bf84:	f000 f8e9 	bl	800c15a <HAL_SPI_TransmitReceive>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	e0e2      	b.n	800c152 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bf92:	2b01      	cmp	r3, #1
 800bf94:	d101      	bne.n	800bf9a <HAL_SPI_Receive+0x52>
 800bf96:	2302      	movs	r3, #2
 800bf98:	e0db      	b.n	800c152 <HAL_SPI_Receive+0x20a>
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	2201      	movs	r2, #1
 800bf9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bfa2:	f7fb fadf 	bl	8007564 <HAL_GetTick>
 800bfa6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bfae:	b2db      	uxtb	r3, r3
 800bfb0:	2b01      	cmp	r3, #1
 800bfb2:	d002      	beq.n	800bfba <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800bfb4:	2302      	movs	r3, #2
 800bfb6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bfb8:	e0c2      	b.n	800c140 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d002      	beq.n	800bfc6 <HAL_SPI_Receive+0x7e>
 800bfc0:	88fb      	ldrh	r3, [r7, #6]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d102      	bne.n	800bfcc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bfca:	e0b9      	b.n	800c140 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	2204      	movs	r2, #4
 800bfd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	2200      	movs	r2, #0
 800bfd8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	68ba      	ldr	r2, [r7, #8]
 800bfde:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	88fa      	ldrh	r2, [r7, #6]
 800bfe4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	88fa      	ldrh	r2, [r7, #6]
 800bfea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	2200      	movs	r2, #0
 800bff0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	2200      	movs	r2, #0
 800bff6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	2200      	movs	r2, #0
 800bffc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	2200      	movs	r2, #0
 800c002:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	2200      	movs	r2, #0
 800c008:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	689b      	ldr	r3, [r3, #8]
 800c00e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c012:	d107      	bne.n	800c024 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	681a      	ldr	r2, [r3, #0]
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c022:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c02e:	2b40      	cmp	r3, #64	; 0x40
 800c030:	d007      	beq.n	800c042 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	681a      	ldr	r2, [r3, #0]
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c040:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	68db      	ldr	r3, [r3, #12]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d162      	bne.n	800c110 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800c04a:	e02e      	b.n	800c0aa <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	689b      	ldr	r3, [r3, #8]
 800c052:	f003 0301 	and.w	r3, r3, #1
 800c056:	2b01      	cmp	r3, #1
 800c058:	d115      	bne.n	800c086 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f103 020c 	add.w	r2, r3, #12
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c066:	7812      	ldrb	r2, [r2, #0]
 800c068:	b2d2      	uxtb	r2, r2
 800c06a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c070:	1c5a      	adds	r2, r3, #1
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c07a:	b29b      	uxth	r3, r3
 800c07c:	3b01      	subs	r3, #1
 800c07e:	b29a      	uxth	r2, r3
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c084:	e011      	b.n	800c0aa <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c086:	f7fb fa6d 	bl	8007564 <HAL_GetTick>
 800c08a:	4602      	mov	r2, r0
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	1ad3      	subs	r3, r2, r3
 800c090:	683a      	ldr	r2, [r7, #0]
 800c092:	429a      	cmp	r2, r3
 800c094:	d803      	bhi.n	800c09e <HAL_SPI_Receive+0x156>
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c09c:	d102      	bne.n	800c0a4 <HAL_SPI_Receive+0x15c>
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d102      	bne.n	800c0aa <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800c0a4:	2303      	movs	r3, #3
 800c0a6:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c0a8:	e04a      	b.n	800c140 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0ae:	b29b      	uxth	r3, r3
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d1cb      	bne.n	800c04c <HAL_SPI_Receive+0x104>
 800c0b4:	e031      	b.n	800c11a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	689b      	ldr	r3, [r3, #8]
 800c0bc:	f003 0301 	and.w	r3, r3, #1
 800c0c0:	2b01      	cmp	r3, #1
 800c0c2:	d113      	bne.n	800c0ec <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	68da      	ldr	r2, [r3, #12]
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0ce:	b292      	uxth	r2, r2
 800c0d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0d6:	1c9a      	adds	r2, r3, #2
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0e0:	b29b      	uxth	r3, r3
 800c0e2:	3b01      	subs	r3, #1
 800c0e4:	b29a      	uxth	r2, r3
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c0ea:	e011      	b.n	800c110 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c0ec:	f7fb fa3a 	bl	8007564 <HAL_GetTick>
 800c0f0:	4602      	mov	r2, r0
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	1ad3      	subs	r3, r2, r3
 800c0f6:	683a      	ldr	r2, [r7, #0]
 800c0f8:	429a      	cmp	r2, r3
 800c0fa:	d803      	bhi.n	800c104 <HAL_SPI_Receive+0x1bc>
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c102:	d102      	bne.n	800c10a <HAL_SPI_Receive+0x1c2>
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d102      	bne.n	800c110 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800c10a:	2303      	movs	r3, #3
 800c10c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c10e:	e017      	b.n	800c140 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c114:	b29b      	uxth	r3, r3
 800c116:	2b00      	cmp	r3, #0
 800c118:	d1cd      	bne.n	800c0b6 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c11a:	693a      	ldr	r2, [r7, #16]
 800c11c:	6839      	ldr	r1, [r7, #0]
 800c11e:	68f8      	ldr	r0, [r7, #12]
 800c120:	f000 fa27 	bl	800c572 <SPI_EndRxTransaction>
 800c124:	4603      	mov	r3, r0
 800c126:	2b00      	cmp	r3, #0
 800c128:	d002      	beq.n	800c130 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	2220      	movs	r2, #32
 800c12e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c134:	2b00      	cmp	r3, #0
 800c136:	d002      	beq.n	800c13e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800c138:	2301      	movs	r3, #1
 800c13a:	75fb      	strb	r3, [r7, #23]
 800c13c:	e000      	b.n	800c140 <HAL_SPI_Receive+0x1f8>
  }

error :
 800c13e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	2201      	movs	r2, #1
 800c144:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	2200      	movs	r2, #0
 800c14c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c150:	7dfb      	ldrb	r3, [r7, #23]
}
 800c152:	4618      	mov	r0, r3
 800c154:	3718      	adds	r7, #24
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}

0800c15a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c15a:	b580      	push	{r7, lr}
 800c15c:	b08c      	sub	sp, #48	; 0x30
 800c15e:	af00      	add	r7, sp, #0
 800c160:	60f8      	str	r0, [r7, #12]
 800c162:	60b9      	str	r1, [r7, #8]
 800c164:	607a      	str	r2, [r7, #4]
 800c166:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c168:	2301      	movs	r3, #1
 800c16a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c16c:	2300      	movs	r3, #0
 800c16e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c178:	2b01      	cmp	r3, #1
 800c17a:	d101      	bne.n	800c180 <HAL_SPI_TransmitReceive+0x26>
 800c17c:	2302      	movs	r3, #2
 800c17e:	e18a      	b.n	800c496 <HAL_SPI_TransmitReceive+0x33c>
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	2201      	movs	r2, #1
 800c184:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c188:	f7fb f9ec 	bl	8007564 <HAL_GetTick>
 800c18c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c194:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	685b      	ldr	r3, [r3, #4]
 800c19c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800c19e:	887b      	ldrh	r3, [r7, #2]
 800c1a0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c1a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c1a6:	2b01      	cmp	r3, #1
 800c1a8:	d00f      	beq.n	800c1ca <HAL_SPI_TransmitReceive+0x70>
 800c1aa:	69fb      	ldr	r3, [r7, #28]
 800c1ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c1b0:	d107      	bne.n	800c1c2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	689b      	ldr	r3, [r3, #8]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d103      	bne.n	800c1c2 <HAL_SPI_TransmitReceive+0x68>
 800c1ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c1be:	2b04      	cmp	r3, #4
 800c1c0:	d003      	beq.n	800c1ca <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800c1c2:	2302      	movs	r3, #2
 800c1c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c1c8:	e15b      	b.n	800c482 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c1ca:	68bb      	ldr	r3, [r7, #8]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d005      	beq.n	800c1dc <HAL_SPI_TransmitReceive+0x82>
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d002      	beq.n	800c1dc <HAL_SPI_TransmitReceive+0x82>
 800c1d6:	887b      	ldrh	r3, [r7, #2]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d103      	bne.n	800c1e4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800c1dc:	2301      	movs	r3, #1
 800c1de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c1e2:	e14e      	b.n	800c482 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c1ea:	b2db      	uxtb	r3, r3
 800c1ec:	2b04      	cmp	r3, #4
 800c1ee:	d003      	beq.n	800c1f8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	2205      	movs	r2, #5
 800c1f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	687a      	ldr	r2, [r7, #4]
 800c202:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	887a      	ldrh	r2, [r7, #2]
 800c208:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	887a      	ldrh	r2, [r7, #2]
 800c20e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	68ba      	ldr	r2, [r7, #8]
 800c214:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	887a      	ldrh	r2, [r7, #2]
 800c21a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	887a      	ldrh	r2, [r7, #2]
 800c220:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	2200      	movs	r2, #0
 800c226:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	2200      	movs	r2, #0
 800c22c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c238:	2b40      	cmp	r3, #64	; 0x40
 800c23a:	d007      	beq.n	800c24c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	681a      	ldr	r2, [r3, #0]
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c24a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	68db      	ldr	r3, [r3, #12]
 800c250:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c254:	d178      	bne.n	800c348 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	685b      	ldr	r3, [r3, #4]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d002      	beq.n	800c264 <HAL_SPI_TransmitReceive+0x10a>
 800c25e:	8b7b      	ldrh	r3, [r7, #26]
 800c260:	2b01      	cmp	r3, #1
 800c262:	d166      	bne.n	800c332 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c268:	881a      	ldrh	r2, [r3, #0]
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c274:	1c9a      	adds	r2, r3, #2
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c27e:	b29b      	uxth	r3, r3
 800c280:	3b01      	subs	r3, #1
 800c282:	b29a      	uxth	r2, r3
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c288:	e053      	b.n	800c332 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	689b      	ldr	r3, [r3, #8]
 800c290:	f003 0302 	and.w	r3, r3, #2
 800c294:	2b02      	cmp	r3, #2
 800c296:	d11b      	bne.n	800c2d0 <HAL_SPI_TransmitReceive+0x176>
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c29c:	b29b      	uxth	r3, r3
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d016      	beq.n	800c2d0 <HAL_SPI_TransmitReceive+0x176>
 800c2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a4:	2b01      	cmp	r3, #1
 800c2a6:	d113      	bne.n	800c2d0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2ac:	881a      	ldrh	r2, [r3, #0]
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2b8:	1c9a      	adds	r2, r3, #2
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c2c2:	b29b      	uxth	r3, r3
 800c2c4:	3b01      	subs	r3, #1
 800c2c6:	b29a      	uxth	r2, r3
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	689b      	ldr	r3, [r3, #8]
 800c2d6:	f003 0301 	and.w	r3, r3, #1
 800c2da:	2b01      	cmp	r3, #1
 800c2dc:	d119      	bne.n	800c312 <HAL_SPI_TransmitReceive+0x1b8>
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2e2:	b29b      	uxth	r3, r3
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d014      	beq.n	800c312 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	68da      	ldr	r2, [r3, #12]
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2f2:	b292      	uxth	r2, r2
 800c2f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2fa:	1c9a      	adds	r2, r3, #2
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c304:	b29b      	uxth	r3, r3
 800c306:	3b01      	subs	r3, #1
 800c308:	b29a      	uxth	r2, r3
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c30e:	2301      	movs	r3, #1
 800c310:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c312:	f7fb f927 	bl	8007564 <HAL_GetTick>
 800c316:	4602      	mov	r2, r0
 800c318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c31a:	1ad3      	subs	r3, r2, r3
 800c31c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c31e:	429a      	cmp	r2, r3
 800c320:	d807      	bhi.n	800c332 <HAL_SPI_TransmitReceive+0x1d8>
 800c322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c324:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c328:	d003      	beq.n	800c332 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800c32a:	2303      	movs	r3, #3
 800c32c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c330:	e0a7      	b.n	800c482 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c336:	b29b      	uxth	r3, r3
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d1a6      	bne.n	800c28a <HAL_SPI_TransmitReceive+0x130>
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c340:	b29b      	uxth	r3, r3
 800c342:	2b00      	cmp	r3, #0
 800c344:	d1a1      	bne.n	800c28a <HAL_SPI_TransmitReceive+0x130>
 800c346:	e07c      	b.n	800c442 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	685b      	ldr	r3, [r3, #4]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d002      	beq.n	800c356 <HAL_SPI_TransmitReceive+0x1fc>
 800c350:	8b7b      	ldrh	r3, [r7, #26]
 800c352:	2b01      	cmp	r3, #1
 800c354:	d16b      	bne.n	800c42e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	330c      	adds	r3, #12
 800c360:	7812      	ldrb	r2, [r2, #0]
 800c362:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c368:	1c5a      	adds	r2, r3, #1
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c372:	b29b      	uxth	r3, r3
 800c374:	3b01      	subs	r3, #1
 800c376:	b29a      	uxth	r2, r3
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c37c:	e057      	b.n	800c42e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	689b      	ldr	r3, [r3, #8]
 800c384:	f003 0302 	and.w	r3, r3, #2
 800c388:	2b02      	cmp	r3, #2
 800c38a:	d11c      	bne.n	800c3c6 <HAL_SPI_TransmitReceive+0x26c>
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c390:	b29b      	uxth	r3, r3
 800c392:	2b00      	cmp	r3, #0
 800c394:	d017      	beq.n	800c3c6 <HAL_SPI_TransmitReceive+0x26c>
 800c396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c398:	2b01      	cmp	r3, #1
 800c39a:	d114      	bne.n	800c3c6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	330c      	adds	r3, #12
 800c3a6:	7812      	ldrb	r2, [r2, #0]
 800c3a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3ae:	1c5a      	adds	r2, r3, #1
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c3b8:	b29b      	uxth	r3, r3
 800c3ba:	3b01      	subs	r3, #1
 800c3bc:	b29a      	uxth	r2, r3
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	689b      	ldr	r3, [r3, #8]
 800c3cc:	f003 0301 	and.w	r3, r3, #1
 800c3d0:	2b01      	cmp	r3, #1
 800c3d2:	d119      	bne.n	800c408 <HAL_SPI_TransmitReceive+0x2ae>
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c3d8:	b29b      	uxth	r3, r3
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d014      	beq.n	800c408 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	68da      	ldr	r2, [r3, #12]
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3e8:	b2d2      	uxtb	r2, r2
 800c3ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3f0:	1c5a      	adds	r2, r3, #1
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c3fa:	b29b      	uxth	r3, r3
 800c3fc:	3b01      	subs	r3, #1
 800c3fe:	b29a      	uxth	r2, r3
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c404:	2301      	movs	r3, #1
 800c406:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c408:	f7fb f8ac 	bl	8007564 <HAL_GetTick>
 800c40c:	4602      	mov	r2, r0
 800c40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c410:	1ad3      	subs	r3, r2, r3
 800c412:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c414:	429a      	cmp	r2, r3
 800c416:	d803      	bhi.n	800c420 <HAL_SPI_TransmitReceive+0x2c6>
 800c418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c41a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c41e:	d102      	bne.n	800c426 <HAL_SPI_TransmitReceive+0x2cc>
 800c420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c422:	2b00      	cmp	r3, #0
 800c424:	d103      	bne.n	800c42e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c426:	2303      	movs	r3, #3
 800c428:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c42c:	e029      	b.n	800c482 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c432:	b29b      	uxth	r3, r3
 800c434:	2b00      	cmp	r3, #0
 800c436:	d1a2      	bne.n	800c37e <HAL_SPI_TransmitReceive+0x224>
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c43c:	b29b      	uxth	r3, r3
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d19d      	bne.n	800c37e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c444:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c446:	68f8      	ldr	r0, [r7, #12]
 800c448:	f000 f8f8 	bl	800c63c <SPI_EndRxTxTransaction>
 800c44c:	4603      	mov	r3, r0
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d006      	beq.n	800c460 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800c452:	2301      	movs	r3, #1
 800c454:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	2220      	movs	r2, #32
 800c45c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800c45e:	e010      	b.n	800c482 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	689b      	ldr	r3, [r3, #8]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d10b      	bne.n	800c480 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c468:	2300      	movs	r3, #0
 800c46a:	617b      	str	r3, [r7, #20]
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	68db      	ldr	r3, [r3, #12]
 800c472:	617b      	str	r3, [r7, #20]
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	689b      	ldr	r3, [r3, #8]
 800c47a:	617b      	str	r3, [r7, #20]
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	e000      	b.n	800c482 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c480:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	2201      	movs	r2, #1
 800c486:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	2200      	movs	r2, #0
 800c48e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c492:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c496:	4618      	mov	r0, r3
 800c498:	3730      	adds	r7, #48	; 0x30
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}

0800c49e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c49e:	b580      	push	{r7, lr}
 800c4a0:	b084      	sub	sp, #16
 800c4a2:	af00      	add	r7, sp, #0
 800c4a4:	60f8      	str	r0, [r7, #12]
 800c4a6:	60b9      	str	r1, [r7, #8]
 800c4a8:	603b      	str	r3, [r7, #0]
 800c4aa:	4613      	mov	r3, r2
 800c4ac:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c4ae:	e04c      	b.n	800c54a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c4b6:	d048      	beq.n	800c54a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c4b8:	f7fb f854 	bl	8007564 <HAL_GetTick>
 800c4bc:	4602      	mov	r2, r0
 800c4be:	69bb      	ldr	r3, [r7, #24]
 800c4c0:	1ad3      	subs	r3, r2, r3
 800c4c2:	683a      	ldr	r2, [r7, #0]
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	d902      	bls.n	800c4ce <SPI_WaitFlagStateUntilTimeout+0x30>
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d13d      	bne.n	800c54a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	685a      	ldr	r2, [r3, #4]
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c4dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	685b      	ldr	r3, [r3, #4]
 800c4e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c4e6:	d111      	bne.n	800c50c <SPI_WaitFlagStateUntilTimeout+0x6e>
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	689b      	ldr	r3, [r3, #8]
 800c4ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c4f0:	d004      	beq.n	800c4fc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	689b      	ldr	r3, [r3, #8]
 800c4f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c4fa:	d107      	bne.n	800c50c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	681a      	ldr	r2, [r3, #0]
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c50a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c510:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c514:	d10f      	bne.n	800c536 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	681a      	ldr	r2, [r3, #0]
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c524:	601a      	str	r2, [r3, #0]
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	681a      	ldr	r2, [r3, #0]
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c534:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	2201      	movs	r2, #1
 800c53a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	2200      	movs	r2, #0
 800c542:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c546:	2303      	movs	r3, #3
 800c548:	e00f      	b.n	800c56a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	689a      	ldr	r2, [r3, #8]
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	4013      	ands	r3, r2
 800c554:	68ba      	ldr	r2, [r7, #8]
 800c556:	429a      	cmp	r2, r3
 800c558:	bf0c      	ite	eq
 800c55a:	2301      	moveq	r3, #1
 800c55c:	2300      	movne	r3, #0
 800c55e:	b2db      	uxtb	r3, r3
 800c560:	461a      	mov	r2, r3
 800c562:	79fb      	ldrb	r3, [r7, #7]
 800c564:	429a      	cmp	r2, r3
 800c566:	d1a3      	bne.n	800c4b0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800c568:	2300      	movs	r3, #0
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	3710      	adds	r7, #16
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}

0800c572 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c572:	b580      	push	{r7, lr}
 800c574:	b086      	sub	sp, #24
 800c576:	af02      	add	r7, sp, #8
 800c578:	60f8      	str	r0, [r7, #12]
 800c57a:	60b9      	str	r1, [r7, #8]
 800c57c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	685b      	ldr	r3, [r3, #4]
 800c582:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c586:	d111      	bne.n	800c5ac <SPI_EndRxTransaction+0x3a>
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	689b      	ldr	r3, [r3, #8]
 800c58c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c590:	d004      	beq.n	800c59c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	689b      	ldr	r3, [r3, #8]
 800c596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c59a:	d107      	bne.n	800c5ac <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	681a      	ldr	r2, [r3, #0]
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c5aa:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c5b4:	d12a      	bne.n	800c60c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	689b      	ldr	r3, [r3, #8]
 800c5ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c5be:	d012      	beq.n	800c5e6 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	9300      	str	r3, [sp, #0]
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	2180      	movs	r1, #128	; 0x80
 800c5ca:	68f8      	ldr	r0, [r7, #12]
 800c5cc:	f7ff ff67 	bl	800c49e <SPI_WaitFlagStateUntilTimeout>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d02d      	beq.n	800c632 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5da:	f043 0220 	orr.w	r2, r3, #32
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c5e2:	2303      	movs	r3, #3
 800c5e4:	e026      	b.n	800c634 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	9300      	str	r3, [sp, #0]
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	2101      	movs	r1, #1
 800c5f0:	68f8      	ldr	r0, [r7, #12]
 800c5f2:	f7ff ff54 	bl	800c49e <SPI_WaitFlagStateUntilTimeout>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d01a      	beq.n	800c632 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c600:	f043 0220 	orr.w	r2, r3, #32
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c608:	2303      	movs	r3, #3
 800c60a:	e013      	b.n	800c634 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	9300      	str	r3, [sp, #0]
 800c610:	68bb      	ldr	r3, [r7, #8]
 800c612:	2200      	movs	r2, #0
 800c614:	2101      	movs	r1, #1
 800c616:	68f8      	ldr	r0, [r7, #12]
 800c618:	f7ff ff41 	bl	800c49e <SPI_WaitFlagStateUntilTimeout>
 800c61c:	4603      	mov	r3, r0
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d007      	beq.n	800c632 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c626:	f043 0220 	orr.w	r2, r3, #32
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c62e:	2303      	movs	r3, #3
 800c630:	e000      	b.n	800c634 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800c632:	2300      	movs	r3, #0
}
 800c634:	4618      	mov	r0, r3
 800c636:	3710      	adds	r7, #16
 800c638:	46bd      	mov	sp, r7
 800c63a:	bd80      	pop	{r7, pc}

0800c63c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b088      	sub	sp, #32
 800c640:	af02      	add	r7, sp, #8
 800c642:	60f8      	str	r0, [r7, #12]
 800c644:	60b9      	str	r1, [r7, #8]
 800c646:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c648:	4b1b      	ldr	r3, [pc, #108]	; (800c6b8 <SPI_EndRxTxTransaction+0x7c>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	4a1b      	ldr	r2, [pc, #108]	; (800c6bc <SPI_EndRxTxTransaction+0x80>)
 800c64e:	fba2 2303 	umull	r2, r3, r2, r3
 800c652:	0d5b      	lsrs	r3, r3, #21
 800c654:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c658:	fb02 f303 	mul.w	r3, r2, r3
 800c65c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	685b      	ldr	r3, [r3, #4]
 800c662:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c666:	d112      	bne.n	800c68e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	9300      	str	r3, [sp, #0]
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	2200      	movs	r2, #0
 800c670:	2180      	movs	r1, #128	; 0x80
 800c672:	68f8      	ldr	r0, [r7, #12]
 800c674:	f7ff ff13 	bl	800c49e <SPI_WaitFlagStateUntilTimeout>
 800c678:	4603      	mov	r3, r0
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d016      	beq.n	800c6ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c682:	f043 0220 	orr.w	r2, r3, #32
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c68a:	2303      	movs	r3, #3
 800c68c:	e00f      	b.n	800c6ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c68e:	697b      	ldr	r3, [r7, #20]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d00a      	beq.n	800c6aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c694:	697b      	ldr	r3, [r7, #20]
 800c696:	3b01      	subs	r3, #1
 800c698:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	689b      	ldr	r3, [r3, #8]
 800c6a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6a4:	2b80      	cmp	r3, #128	; 0x80
 800c6a6:	d0f2      	beq.n	800c68e <SPI_EndRxTxTransaction+0x52>
 800c6a8:	e000      	b.n	800c6ac <SPI_EndRxTxTransaction+0x70>
        break;
 800c6aa:	bf00      	nop
  }

  return HAL_OK;
 800c6ac:	2300      	movs	r3, #0
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3718      	adds	r7, #24
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}
 800c6b6:	bf00      	nop
 800c6b8:	20000158 	.word	0x20000158
 800c6bc:	165e9f81 	.word	0x165e9f81

0800c6c0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800c6c0:	b084      	sub	sp, #16
 800c6c2:	b480      	push	{r7}
 800c6c4:	b085      	sub	sp, #20
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	6078      	str	r0, [r7, #4]
 800c6ca:	f107 001c 	add.w	r0, r7, #28
 800c6ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c6d6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c6d8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c6da:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800c6de:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c6e2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c6e6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c6ea:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c6ec:	68fa      	ldr	r2, [r7, #12]
 800c6ee:	4313      	orrs	r3, r2
 800c6f0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	685b      	ldr	r3, [r3, #4]
 800c6f6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800c6fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c6fe:	68fa      	ldr	r2, [r7, #12]
 800c700:	431a      	orrs	r2, r3
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c706:	2300      	movs	r3, #0
}
 800c708:	4618      	mov	r0, r3
 800c70a:	3714      	adds	r7, #20
 800c70c:	46bd      	mov	sp, r7
 800c70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c712:	b004      	add	sp, #16
 800c714:	4770      	bx	lr

0800c716 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800c716:	b480      	push	{r7}
 800c718:	b083      	sub	sp, #12
 800c71a:	af00      	add	r7, sp, #0
 800c71c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c724:	4618      	mov	r0, r3
 800c726:	370c      	adds	r7, #12
 800c728:	46bd      	mov	sp, r7
 800c72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72e:	4770      	bx	lr

0800c730 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800c730:	b480      	push	{r7}
 800c732:	b083      	sub	sp, #12
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	681a      	ldr	r2, [r3, #0]
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c744:	2300      	movs	r3, #0
}
 800c746:	4618      	mov	r0, r3
 800c748:	370c      	adds	r7, #12
 800c74a:	46bd      	mov	sp, r7
 800c74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c750:	4770      	bx	lr

0800c752 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800c752:	b580      	push	{r7, lr}
 800c754:	b082      	sub	sp, #8
 800c756:	af00      	add	r7, sp, #0
 800c758:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2203      	movs	r2, #3
 800c75e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800c760:	2002      	movs	r0, #2
 800c762:	f7fa ff0b 	bl	800757c <HAL_Delay>
  
  return HAL_OK;
 800c766:	2300      	movs	r3, #0
}
 800c768:	4618      	mov	r0, r3
 800c76a:	3708      	adds	r7, #8
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}

0800c770 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800c770:	b480      	push	{r7}
 800c772:	b083      	sub	sp, #12
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f003 0303 	and.w	r3, r3, #3
}
 800c780:	4618      	mov	r0, r3
 800c782:	370c      	adds	r7, #12
 800c784:	46bd      	mov	sp, r7
 800c786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78a:	4770      	bx	lr

0800c78c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800c78c:	b480      	push	{r7}
 800c78e:	b085      	sub	sp, #20
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
 800c794:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c796:	2300      	movs	r3, #0
 800c798:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	681a      	ldr	r2, [r3, #0]
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c7aa:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c7ac:	683b      	ldr	r3, [r7, #0]
 800c7ae:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c7b0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c7b6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c7b8:	68fa      	ldr	r2, [r7, #12]
 800c7ba:	4313      	orrs	r3, r2
 800c7bc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	68db      	ldr	r3, [r3, #12]
 800c7c2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c7c6:	f023 030f 	bic.w	r3, r3, #15
 800c7ca:	68fa      	ldr	r2, [r7, #12]
 800c7cc:	431a      	orrs	r2, r3
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c7d2:	2300      	movs	r3, #0
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3714      	adds	r7, #20
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7de:	4770      	bx	lr

0800c7e0 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b083      	sub	sp, #12
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	691b      	ldr	r3, [r3, #16]
 800c7ec:	b2db      	uxtb	r3, r3
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	370c      	adds	r7, #12
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f8:	4770      	bx	lr

0800c7fa <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800c7fa:	b480      	push	{r7}
 800c7fc:	b085      	sub	sp, #20
 800c7fe:	af00      	add	r7, sp, #0
 800c800:	6078      	str	r0, [r7, #4]
 800c802:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	3314      	adds	r3, #20
 800c808:	461a      	mov	r2, r3
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	4413      	add	r3, r2
 800c80e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	681b      	ldr	r3, [r3, #0]
}  
 800c814:	4618      	mov	r0, r3
 800c816:	3714      	adds	r7, #20
 800c818:	46bd      	mov	sp, r7
 800c81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81e:	4770      	bx	lr

0800c820 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800c820:	b480      	push	{r7}
 800c822:	b085      	sub	sp, #20
 800c824:	af00      	add	r7, sp, #0
 800c826:	6078      	str	r0, [r7, #4]
 800c828:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c82a:	2300      	movs	r3, #0
 800c82c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	681a      	ldr	r2, [r3, #0]
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	685a      	ldr	r2, [r3, #4]
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c846:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c84c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c852:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c854:	68fa      	ldr	r2, [r7, #12]
 800c856:	4313      	orrs	r3, r2
 800c858:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c85e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	431a      	orrs	r2, r3
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c86a:	2300      	movs	r3, #0

}
 800c86c:	4618      	mov	r0, r3
 800c86e:	3714      	adds	r7, #20
 800c870:	46bd      	mov	sp, r7
 800c872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c876:	4770      	bx	lr

0800c878 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b088      	sub	sp, #32
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
 800c880:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c886:	2310      	movs	r3, #16
 800c888:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c88a:	2340      	movs	r3, #64	; 0x40
 800c88c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c88e:	2300      	movs	r3, #0
 800c890:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c892:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c896:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c898:	f107 0308 	add.w	r3, r7, #8
 800c89c:	4619      	mov	r1, r3
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f7ff ff74 	bl	800c78c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800c8a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8a8:	2110      	movs	r1, #16
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f000 fa40 	bl	800cd30 <SDMMC_GetCmdResp1>
 800c8b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8b2:	69fb      	ldr	r3, [r7, #28]
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3720      	adds	r7, #32
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}

0800c8bc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b088      	sub	sp, #32
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
 800c8c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c8ca:	2311      	movs	r3, #17
 800c8cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c8ce:	2340      	movs	r3, #64	; 0x40
 800c8d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c8d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c8dc:	f107 0308 	add.w	r3, r7, #8
 800c8e0:	4619      	mov	r1, r3
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f7ff ff52 	bl	800c78c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c8e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8ec:	2111      	movs	r1, #17
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f000 fa1e 	bl	800cd30 <SDMMC_GetCmdResp1>
 800c8f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8f6:	69fb      	ldr	r3, [r7, #28]
}
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	3720      	adds	r7, #32
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd80      	pop	{r7, pc}

0800c900 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b088      	sub	sp, #32
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
 800c908:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c90e:	2312      	movs	r3, #18
 800c910:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c912:	2340      	movs	r3, #64	; 0x40
 800c914:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c916:	2300      	movs	r3, #0
 800c918:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c91a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c91e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c920:	f107 0308 	add.w	r3, r7, #8
 800c924:	4619      	mov	r1, r3
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f7ff ff30 	bl	800c78c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c92c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c930:	2112      	movs	r1, #18
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f000 f9fc 	bl	800cd30 <SDMMC_GetCmdResp1>
 800c938:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c93a:	69fb      	ldr	r3, [r7, #28]
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3720      	adds	r7, #32
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}

0800c944 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b088      	sub	sp, #32
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
 800c94c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c952:	2318      	movs	r3, #24
 800c954:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c956:	2340      	movs	r3, #64	; 0x40
 800c958:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c95a:	2300      	movs	r3, #0
 800c95c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c95e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c962:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c964:	f107 0308 	add.w	r3, r7, #8
 800c968:	4619      	mov	r1, r3
 800c96a:	6878      	ldr	r0, [r7, #4]
 800c96c:	f7ff ff0e 	bl	800c78c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c970:	f241 3288 	movw	r2, #5000	; 0x1388
 800c974:	2118      	movs	r1, #24
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f000 f9da 	bl	800cd30 <SDMMC_GetCmdResp1>
 800c97c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c97e:	69fb      	ldr	r3, [r7, #28]
}
 800c980:	4618      	mov	r0, r3
 800c982:	3720      	adds	r7, #32
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}

0800c988 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b088      	sub	sp, #32
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c996:	2319      	movs	r3, #25
 800c998:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c99a:	2340      	movs	r3, #64	; 0x40
 800c99c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c9a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c9a8:	f107 0308 	add.w	r3, r7, #8
 800c9ac:	4619      	mov	r1, r3
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f7ff feec 	bl	800c78c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c9b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9b8:	2119      	movs	r1, #25
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f000 f9b8 	bl	800cd30 <SDMMC_GetCmdResp1>
 800c9c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9c2:	69fb      	ldr	r3, [r7, #28]
}
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	3720      	adds	r7, #32
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}

0800c9cc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b088      	sub	sp, #32
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c9d8:	230c      	movs	r3, #12
 800c9da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c9dc:	2340      	movs	r3, #64	; 0x40
 800c9de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c9e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c9ea:	f107 0308 	add.w	r3, r7, #8
 800c9ee:	4619      	mov	r1, r3
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f7ff fecb 	bl	800c78c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800c9f6:	4a05      	ldr	r2, [pc, #20]	; (800ca0c <SDMMC_CmdStopTransfer+0x40>)
 800c9f8:	210c      	movs	r1, #12
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f000 f998 	bl	800cd30 <SDMMC_GetCmdResp1>
 800ca00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca02:	69fb      	ldr	r3, [r7, #28]
}
 800ca04:	4618      	mov	r0, r3
 800ca06:	3720      	adds	r7, #32
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}
 800ca0c:	05f5e100 	.word	0x05f5e100

0800ca10 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b08a      	sub	sp, #40	; 0x28
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	60f8      	str	r0, [r7, #12]
 800ca18:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ca20:	2307      	movs	r3, #7
 800ca22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ca24:	2340      	movs	r3, #64	; 0x40
 800ca26:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ca2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca30:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ca32:	f107 0310 	add.w	r3, r7, #16
 800ca36:	4619      	mov	r1, r3
 800ca38:	68f8      	ldr	r0, [r7, #12]
 800ca3a:	f7ff fea7 	bl	800c78c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800ca3e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca42:	2107      	movs	r1, #7
 800ca44:	68f8      	ldr	r0, [r7, #12]
 800ca46:	f000 f973 	bl	800cd30 <SDMMC_GetCmdResp1>
 800ca4a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ca4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3728      	adds	r7, #40	; 0x28
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}

0800ca56 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800ca56:	b580      	push	{r7, lr}
 800ca58:	b088      	sub	sp, #32
 800ca5a:	af00      	add	r7, sp, #0
 800ca5c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ca62:	2300      	movs	r3, #0
 800ca64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800ca66:	2300      	movs	r3, #0
 800ca68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ca6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca72:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ca74:	f107 0308 	add.w	r3, r7, #8
 800ca78:	4619      	mov	r1, r3
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f7ff fe86 	bl	800c78c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f000 f92d 	bl	800cce0 <SDMMC_GetCmdError>
 800ca86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca88:	69fb      	ldr	r3, [r7, #28]
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3720      	adds	r7, #32
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}

0800ca92 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800ca92:	b580      	push	{r7, lr}
 800ca94:	b088      	sub	sp, #32
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ca9a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ca9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800caa0:	2308      	movs	r3, #8
 800caa2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800caa4:	2340      	movs	r3, #64	; 0x40
 800caa6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800caa8:	2300      	movs	r3, #0
 800caaa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800caac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cab0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cab2:	f107 0308 	add.w	r3, r7, #8
 800cab6:	4619      	mov	r1, r3
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f7ff fe67 	bl	800c78c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f000 fb16 	bl	800d0f0 <SDMMC_GetCmdResp7>
 800cac4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cac6:	69fb      	ldr	r3, [r7, #28]
}
 800cac8:	4618      	mov	r0, r3
 800caca:	3720      	adds	r7, #32
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}

0800cad0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b088      	sub	sp, #32
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
 800cad8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800cade:	2337      	movs	r3, #55	; 0x37
 800cae0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cae2:	2340      	movs	r3, #64	; 0x40
 800cae4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cae6:	2300      	movs	r3, #0
 800cae8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800caea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800caee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800caf0:	f107 0308 	add.w	r3, r7, #8
 800caf4:	4619      	mov	r1, r3
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f7ff fe48 	bl	800c78c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800cafc:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb00:	2137      	movs	r1, #55	; 0x37
 800cb02:	6878      	ldr	r0, [r7, #4]
 800cb04:	f000 f914 	bl	800cd30 <SDMMC_GetCmdResp1>
 800cb08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb0a:	69fb      	ldr	r3, [r7, #28]
}
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	3720      	adds	r7, #32
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}

0800cb14 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b088      	sub	sp, #32
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
 800cb1c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cb24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800cb2a:	2329      	movs	r3, #41	; 0x29
 800cb2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cb2e:	2340      	movs	r3, #64	; 0x40
 800cb30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cb32:	2300      	movs	r3, #0
 800cb34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cb36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb3a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cb3c:	f107 0308 	add.w	r3, r7, #8
 800cb40:	4619      	mov	r1, r3
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f7ff fe22 	bl	800c78c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	f000 fa23 	bl	800cf94 <SDMMC_GetCmdResp3>
 800cb4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb50:	69fb      	ldr	r3, [r7, #28]
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3720      	adds	r7, #32
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}

0800cb5a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800cb5a:	b580      	push	{r7, lr}
 800cb5c:	b088      	sub	sp, #32
 800cb5e:	af00      	add	r7, sp, #0
 800cb60:	6078      	str	r0, [r7, #4]
 800cb62:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800cb68:	2306      	movs	r3, #6
 800cb6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cb6c:	2340      	movs	r3, #64	; 0x40
 800cb6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cb70:	2300      	movs	r3, #0
 800cb72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cb74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb78:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cb7a:	f107 0308 	add.w	r3, r7, #8
 800cb7e:	4619      	mov	r1, r3
 800cb80:	6878      	ldr	r0, [r7, #4]
 800cb82:	f7ff fe03 	bl	800c78c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800cb86:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb8a:	2106      	movs	r1, #6
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f000 f8cf 	bl	800cd30 <SDMMC_GetCmdResp1>
 800cb92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb94:	69fb      	ldr	r3, [r7, #28]
}
 800cb96:	4618      	mov	r0, r3
 800cb98:	3720      	adds	r7, #32
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}

0800cb9e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800cb9e:	b580      	push	{r7, lr}
 800cba0:	b088      	sub	sp, #32
 800cba2:	af00      	add	r7, sp, #0
 800cba4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800cba6:	2300      	movs	r3, #0
 800cba8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800cbaa:	2333      	movs	r3, #51	; 0x33
 800cbac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cbae:	2340      	movs	r3, #64	; 0x40
 800cbb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cbb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cbbc:	f107 0308 	add.w	r3, r7, #8
 800cbc0:	4619      	mov	r1, r3
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f7ff fde2 	bl	800c78c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800cbc8:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbcc:	2133      	movs	r1, #51	; 0x33
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f000 f8ae 	bl	800cd30 <SDMMC_GetCmdResp1>
 800cbd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cbd6:	69fb      	ldr	r3, [r7, #28]
}
 800cbd8:	4618      	mov	r0, r3
 800cbda:	3720      	adds	r7, #32
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}

0800cbe0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b088      	sub	sp, #32
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800cbe8:	2300      	movs	r3, #0
 800cbea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800cbec:	2302      	movs	r3, #2
 800cbee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800cbf0:	23c0      	movs	r3, #192	; 0xc0
 800cbf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cbf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbfc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cbfe:	f107 0308 	add.w	r3, r7, #8
 800cc02:	4619      	mov	r1, r3
 800cc04:	6878      	ldr	r0, [r7, #4]
 800cc06:	f7ff fdc1 	bl	800c78c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800cc0a:	6878      	ldr	r0, [r7, #4]
 800cc0c:	f000 f97c 	bl	800cf08 <SDMMC_GetCmdResp2>
 800cc10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc12:	69fb      	ldr	r3, [r7, #28]
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	3720      	adds	r7, #32
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}

0800cc1c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b088      	sub	sp, #32
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
 800cc24:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800cc2a:	2309      	movs	r3, #9
 800cc2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800cc2e:	23c0      	movs	r3, #192	; 0xc0
 800cc30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cc32:	2300      	movs	r3, #0
 800cc34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cc36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc3a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cc3c:	f107 0308 	add.w	r3, r7, #8
 800cc40:	4619      	mov	r1, r3
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f7ff fda2 	bl	800c78c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f000 f95d 	bl	800cf08 <SDMMC_GetCmdResp2>
 800cc4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc50:	69fb      	ldr	r3, [r7, #28]
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	3720      	adds	r7, #32
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}

0800cc5a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800cc5a:	b580      	push	{r7, lr}
 800cc5c:	b088      	sub	sp, #32
 800cc5e:	af00      	add	r7, sp, #0
 800cc60:	6078      	str	r0, [r7, #4]
 800cc62:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800cc64:	2300      	movs	r3, #0
 800cc66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800cc68:	2303      	movs	r3, #3
 800cc6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cc6c:	2340      	movs	r3, #64	; 0x40
 800cc6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cc70:	2300      	movs	r3, #0
 800cc72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cc74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc78:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cc7a:	f107 0308 	add.w	r3, r7, #8
 800cc7e:	4619      	mov	r1, r3
 800cc80:	6878      	ldr	r0, [r7, #4]
 800cc82:	f7ff fd83 	bl	800c78c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800cc86:	683a      	ldr	r2, [r7, #0]
 800cc88:	2103      	movs	r1, #3
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f000 f9bc 	bl	800d008 <SDMMC_GetCmdResp6>
 800cc90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc92:	69fb      	ldr	r3, [r7, #28]
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3720      	adds	r7, #32
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}

0800cc9c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b088      	sub	sp, #32
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
 800cca4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ccaa:	230d      	movs	r3, #13
 800ccac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ccae:	2340      	movs	r3, #64	; 0x40
 800ccb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ccb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ccbc:	f107 0308 	add.w	r3, r7, #8
 800ccc0:	4619      	mov	r1, r3
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f7ff fd62 	bl	800c78c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800ccc8:	f241 3288 	movw	r2, #5000	; 0x1388
 800cccc:	210d      	movs	r1, #13
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f000 f82e 	bl	800cd30 <SDMMC_GetCmdResp1>
 800ccd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ccd6:	69fb      	ldr	r3, [r7, #28]
}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	3720      	adds	r7, #32
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}

0800cce0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800cce0:	b490      	push	{r4, r7}
 800cce2:	b082      	sub	sp, #8
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cce8:	4b0f      	ldr	r3, [pc, #60]	; (800cd28 <SDMMC_GetCmdError+0x48>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	4a0f      	ldr	r2, [pc, #60]	; (800cd2c <SDMMC_GetCmdError+0x4c>)
 800ccee:	fba2 2303 	umull	r2, r3, r2, r3
 800ccf2:	0a5b      	lsrs	r3, r3, #9
 800ccf4:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccf8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ccfc:	4623      	mov	r3, r4
 800ccfe:	1e5c      	subs	r4, r3, #1
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d102      	bne.n	800cd0a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cd04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cd08:	e009      	b.n	800cd1e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d0f2      	beq.n	800ccfc <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	22c5      	movs	r2, #197	; 0xc5
 800cd1a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800cd1c:	2300      	movs	r3, #0
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3708      	adds	r7, #8
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bc90      	pop	{r4, r7}
 800cd26:	4770      	bx	lr
 800cd28:	20000158 	.word	0x20000158
 800cd2c:	10624dd3 	.word	0x10624dd3

0800cd30 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800cd30:	b590      	push	{r4, r7, lr}
 800cd32:	b087      	sub	sp, #28
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	60f8      	str	r0, [r7, #12]
 800cd38:	460b      	mov	r3, r1
 800cd3a:	607a      	str	r2, [r7, #4]
 800cd3c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800cd3e:	4b6f      	ldr	r3, [pc, #444]	; (800cefc <SDMMC_GetCmdResp1+0x1cc>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	4a6f      	ldr	r2, [pc, #444]	; (800cf00 <SDMMC_GetCmdResp1+0x1d0>)
 800cd44:	fba2 2303 	umull	r2, r3, r2, r3
 800cd48:	0a5b      	lsrs	r3, r3, #9
 800cd4a:	687a      	ldr	r2, [r7, #4]
 800cd4c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cd50:	4623      	mov	r3, r4
 800cd52:	1e5c      	subs	r4, r3, #1
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d102      	bne.n	800cd5e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cd58:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cd5c:	e0c9      	b.n	800cef2 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd62:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cd64:	697b      	ldr	r3, [r7, #20]
 800cd66:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d0f0      	beq.n	800cd50 <SDMMC_GetCmdResp1+0x20>
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d1eb      	bne.n	800cd50 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd7c:	f003 0304 	and.w	r3, r3, #4
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d004      	beq.n	800cd8e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	2204      	movs	r2, #4
 800cd88:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cd8a:	2304      	movs	r3, #4
 800cd8c:	e0b1      	b.n	800cef2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd92:	f003 0301 	and.w	r3, r3, #1
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d004      	beq.n	800cda4 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	2201      	movs	r2, #1
 800cd9e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cda0:	2301      	movs	r3, #1
 800cda2:	e0a6      	b.n	800cef2 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	22c5      	movs	r2, #197	; 0xc5
 800cda8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800cdaa:	68f8      	ldr	r0, [r7, #12]
 800cdac:	f7ff fd18 	bl	800c7e0 <SDIO_GetCommandResponse>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	461a      	mov	r2, r3
 800cdb4:	7afb      	ldrb	r3, [r7, #11]
 800cdb6:	4293      	cmp	r3, r2
 800cdb8:	d001      	beq.n	800cdbe <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cdba:	2301      	movs	r3, #1
 800cdbc:	e099      	b.n	800cef2 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800cdbe:	2100      	movs	r1, #0
 800cdc0:	68f8      	ldr	r0, [r7, #12]
 800cdc2:	f7ff fd1a 	bl	800c7fa <SDIO_GetResponse>
 800cdc6:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cdc8:	693a      	ldr	r2, [r7, #16]
 800cdca:	4b4e      	ldr	r3, [pc, #312]	; (800cf04 <SDMMC_GetCmdResp1+0x1d4>)
 800cdcc:	4013      	ands	r3, r2
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d101      	bne.n	800cdd6 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	e08d      	b.n	800cef2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800cdd6:	693b      	ldr	r3, [r7, #16]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	da02      	bge.n	800cde2 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cddc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cde0:	e087      	b.n	800cef2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cde2:	693b      	ldr	r3, [r7, #16]
 800cde4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d001      	beq.n	800cdf0 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cdec:	2340      	movs	r3, #64	; 0x40
 800cdee:	e080      	b.n	800cef2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800cdf0:	693b      	ldr	r3, [r7, #16]
 800cdf2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d001      	beq.n	800cdfe <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800cdfa:	2380      	movs	r3, #128	; 0x80
 800cdfc:	e079      	b.n	800cef2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800cdfe:	693b      	ldr	r3, [r7, #16]
 800ce00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d002      	beq.n	800ce0e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ce08:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ce0c:	e071      	b.n	800cef2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d002      	beq.n	800ce1e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ce18:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ce1c:	e069      	b.n	800cef2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ce1e:	693b      	ldr	r3, [r7, #16]
 800ce20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d002      	beq.n	800ce2e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ce28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce2c:	e061      	b.n	800cef2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ce2e:	693b      	ldr	r3, [r7, #16]
 800ce30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d002      	beq.n	800ce3e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ce38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ce3c:	e059      	b.n	800cef2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ce3e:	693b      	ldr	r3, [r7, #16]
 800ce40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d002      	beq.n	800ce4e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ce48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ce4c:	e051      	b.n	800cef2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d002      	beq.n	800ce5e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ce58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ce5c:	e049      	b.n	800cef2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d002      	beq.n	800ce6e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ce68:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ce6c:	e041      	b.n	800cef2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d002      	beq.n	800ce7e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800ce78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ce7c:	e039      	b.n	800cef2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ce7e:	693b      	ldr	r3, [r7, #16]
 800ce80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d002      	beq.n	800ce8e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ce88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ce8c:	e031      	b.n	800cef2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ce8e:	693b      	ldr	r3, [r7, #16]
 800ce90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d002      	beq.n	800ce9e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ce98:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ce9c:	e029      	b.n	800cef2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ce9e:	693b      	ldr	r3, [r7, #16]
 800cea0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d002      	beq.n	800ceae <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cea8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ceac:	e021      	b.n	800cef2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ceae:	693b      	ldr	r3, [r7, #16]
 800ceb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d002      	beq.n	800cebe <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ceb8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cebc:	e019      	b.n	800cef2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cebe:	693b      	ldr	r3, [r7, #16]
 800cec0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d002      	beq.n	800cece <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cec8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cecc:	e011      	b.n	800cef2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d002      	beq.n	800cede <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ced8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cedc:	e009      	b.n	800cef2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800cede:	693b      	ldr	r3, [r7, #16]
 800cee0:	f003 0308 	and.w	r3, r3, #8
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d002      	beq.n	800ceee <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cee8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ceec:	e001      	b.n	800cef2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ceee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	371c      	adds	r7, #28
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd90      	pop	{r4, r7, pc}
 800cefa:	bf00      	nop
 800cefc:	20000158 	.word	0x20000158
 800cf00:	10624dd3 	.word	0x10624dd3
 800cf04:	fdffe008 	.word	0xfdffe008

0800cf08 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800cf08:	b490      	push	{r4, r7}
 800cf0a:	b084      	sub	sp, #16
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cf10:	4b1e      	ldr	r3, [pc, #120]	; (800cf8c <SDMMC_GetCmdResp2+0x84>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	4a1e      	ldr	r2, [pc, #120]	; (800cf90 <SDMMC_GetCmdResp2+0x88>)
 800cf16:	fba2 2303 	umull	r2, r3, r2, r3
 800cf1a:	0a5b      	lsrs	r3, r3, #9
 800cf1c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf20:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cf24:	4623      	mov	r3, r4
 800cf26:	1e5c      	subs	r4, r3, #1
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d102      	bne.n	800cf32 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cf2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cf30:	e026      	b.n	800cf80 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf36:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d0f0      	beq.n	800cf24 <SDMMC_GetCmdResp2+0x1c>
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d1eb      	bne.n	800cf24 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf50:	f003 0304 	and.w	r3, r3, #4
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d004      	beq.n	800cf62 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2204      	movs	r2, #4
 800cf5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cf5e:	2304      	movs	r3, #4
 800cf60:	e00e      	b.n	800cf80 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf66:	f003 0301 	and.w	r3, r3, #1
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d004      	beq.n	800cf78 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	2201      	movs	r2, #1
 800cf72:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cf74:	2301      	movs	r3, #1
 800cf76:	e003      	b.n	800cf80 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	22c5      	movs	r2, #197	; 0xc5
 800cf7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800cf7e:	2300      	movs	r3, #0
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	3710      	adds	r7, #16
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bc90      	pop	{r4, r7}
 800cf88:	4770      	bx	lr
 800cf8a:	bf00      	nop
 800cf8c:	20000158 	.word	0x20000158
 800cf90:	10624dd3 	.word	0x10624dd3

0800cf94 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800cf94:	b490      	push	{r4, r7}
 800cf96:	b084      	sub	sp, #16
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cf9c:	4b18      	ldr	r3, [pc, #96]	; (800d000 <SDMMC_GetCmdResp3+0x6c>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	4a18      	ldr	r2, [pc, #96]	; (800d004 <SDMMC_GetCmdResp3+0x70>)
 800cfa2:	fba2 2303 	umull	r2, r3, r2, r3
 800cfa6:	0a5b      	lsrs	r3, r3, #9
 800cfa8:	f241 3288 	movw	r2, #5000	; 0x1388
 800cfac:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cfb0:	4623      	mov	r3, r4
 800cfb2:	1e5c      	subs	r4, r3, #1
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d102      	bne.n	800cfbe <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cfb8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cfbc:	e01b      	b.n	800cff6 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfc2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d0f0      	beq.n	800cfb0 <SDMMC_GetCmdResp3+0x1c>
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d1eb      	bne.n	800cfb0 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfdc:	f003 0304 	and.w	r3, r3, #4
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d004      	beq.n	800cfee <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2204      	movs	r2, #4
 800cfe8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cfea:	2304      	movs	r3, #4
 800cfec:	e003      	b.n	800cff6 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	22c5      	movs	r2, #197	; 0xc5
 800cff2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800cff4:	2300      	movs	r3, #0
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	3710      	adds	r7, #16
 800cffa:	46bd      	mov	sp, r7
 800cffc:	bc90      	pop	{r4, r7}
 800cffe:	4770      	bx	lr
 800d000:	20000158 	.word	0x20000158
 800d004:	10624dd3 	.word	0x10624dd3

0800d008 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d008:	b590      	push	{r4, r7, lr}
 800d00a:	b087      	sub	sp, #28
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	60f8      	str	r0, [r7, #12]
 800d010:	460b      	mov	r3, r1
 800d012:	607a      	str	r2, [r7, #4]
 800d014:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d016:	4b34      	ldr	r3, [pc, #208]	; (800d0e8 <SDMMC_GetCmdResp6+0xe0>)
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	4a34      	ldr	r2, [pc, #208]	; (800d0ec <SDMMC_GetCmdResp6+0xe4>)
 800d01c:	fba2 2303 	umull	r2, r3, r2, r3
 800d020:	0a5b      	lsrs	r3, r3, #9
 800d022:	f241 3288 	movw	r2, #5000	; 0x1388
 800d026:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d02a:	4623      	mov	r3, r4
 800d02c:	1e5c      	subs	r4, r3, #1
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d102      	bne.n	800d038 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d032:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d036:	e052      	b.n	800d0de <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d03c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d03e:	697b      	ldr	r3, [r7, #20]
 800d040:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d044:	2b00      	cmp	r3, #0
 800d046:	d0f0      	beq.n	800d02a <SDMMC_GetCmdResp6+0x22>
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d1eb      	bne.n	800d02a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d056:	f003 0304 	and.w	r3, r3, #4
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d004      	beq.n	800d068 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	2204      	movs	r2, #4
 800d062:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d064:	2304      	movs	r3, #4
 800d066:	e03a      	b.n	800d0de <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d06c:	f003 0301 	and.w	r3, r3, #1
 800d070:	2b00      	cmp	r3, #0
 800d072:	d004      	beq.n	800d07e <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	2201      	movs	r2, #1
 800d078:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d07a:	2301      	movs	r3, #1
 800d07c:	e02f      	b.n	800d0de <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d07e:	68f8      	ldr	r0, [r7, #12]
 800d080:	f7ff fbae 	bl	800c7e0 <SDIO_GetCommandResponse>
 800d084:	4603      	mov	r3, r0
 800d086:	461a      	mov	r2, r3
 800d088:	7afb      	ldrb	r3, [r7, #11]
 800d08a:	4293      	cmp	r3, r2
 800d08c:	d001      	beq.n	800d092 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d08e:	2301      	movs	r3, #1
 800d090:	e025      	b.n	800d0de <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	22c5      	movs	r2, #197	; 0xc5
 800d096:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d098:	2100      	movs	r1, #0
 800d09a:	68f8      	ldr	r0, [r7, #12]
 800d09c:	f7ff fbad 	bl	800c7fa <SDIO_GetResponse>
 800d0a0:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d0a2:	693b      	ldr	r3, [r7, #16]
 800d0a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d106      	bne.n	800d0ba <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	0c1b      	lsrs	r3, r3, #16
 800d0b0:	b29a      	uxth	r2, r3
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	e011      	b.n	800d0de <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d002      	beq.n	800d0ca <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d0c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d0c8:	e009      	b.n	800d0de <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d0ca:	693b      	ldr	r3, [r7, #16]
 800d0cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d002      	beq.n	800d0da <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d0d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d0d8:	e001      	b.n	800d0de <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d0da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	371c      	adds	r7, #28
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd90      	pop	{r4, r7, pc}
 800d0e6:	bf00      	nop
 800d0e8:	20000158 	.word	0x20000158
 800d0ec:	10624dd3 	.word	0x10624dd3

0800d0f0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800d0f0:	b490      	push	{r4, r7}
 800d0f2:	b084      	sub	sp, #16
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d0f8:	4b21      	ldr	r3, [pc, #132]	; (800d180 <SDMMC_GetCmdResp7+0x90>)
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	4a21      	ldr	r2, [pc, #132]	; (800d184 <SDMMC_GetCmdResp7+0x94>)
 800d0fe:	fba2 2303 	umull	r2, r3, r2, r3
 800d102:	0a5b      	lsrs	r3, r3, #9
 800d104:	f241 3288 	movw	r2, #5000	; 0x1388
 800d108:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d10c:	4623      	mov	r3, r4
 800d10e:	1e5c      	subs	r4, r3, #1
 800d110:	2b00      	cmp	r3, #0
 800d112:	d102      	bne.n	800d11a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d114:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d118:	e02c      	b.n	800d174 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d11e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d126:	2b00      	cmp	r3, #0
 800d128:	d0f0      	beq.n	800d10c <SDMMC_GetCmdResp7+0x1c>
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d130:	2b00      	cmp	r3, #0
 800d132:	d1eb      	bne.n	800d10c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d138:	f003 0304 	and.w	r3, r3, #4
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d004      	beq.n	800d14a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2204      	movs	r2, #4
 800d144:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d146:	2304      	movs	r3, #4
 800d148:	e014      	b.n	800d174 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d14e:	f003 0301 	and.w	r3, r3, #1
 800d152:	2b00      	cmp	r3, #0
 800d154:	d004      	beq.n	800d160 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	2201      	movs	r2, #1
 800d15a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d15c:	2301      	movs	r3, #1
 800d15e:	e009      	b.n	800d174 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d002      	beq.n	800d172 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2240      	movs	r2, #64	; 0x40
 800d170:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d172:	2300      	movs	r3, #0
  
}
 800d174:	4618      	mov	r0, r3
 800d176:	3710      	adds	r7, #16
 800d178:	46bd      	mov	sp, r7
 800d17a:	bc90      	pop	{r4, r7}
 800d17c:	4770      	bx	lr
 800d17e:	bf00      	nop
 800d180:	20000158 	.word	0x20000158
 800d184:	10624dd3 	.word	0x10624dd3

0800d188 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d18c:	4904      	ldr	r1, [pc, #16]	; (800d1a0 <MX_FATFS_Init+0x18>)
 800d18e:	4805      	ldr	r0, [pc, #20]	; (800d1a4 <MX_FATFS_Init+0x1c>)
 800d190:	f003 f9cc 	bl	801052c <FATFS_LinkDriver>
 800d194:	4603      	mov	r3, r0
 800d196:	461a      	mov	r2, r3
 800d198:	4b03      	ldr	r3, [pc, #12]	; (800d1a8 <MX_FATFS_Init+0x20>)
 800d19a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d19c:	bf00      	nop
 800d19e:	bd80      	pop	{r7, pc}
 800d1a0:	20015cbc 	.word	0x20015cbc
 800d1a4:	0801510c 	.word	0x0801510c
 800d1a8:	20015cb8 	.word	0x20015cb8

0800d1ac <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d1b0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ba:	4770      	bx	lr

0800d1bc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b082      	sub	sp, #8
 800d1c0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d1c6:	f000 f896 	bl	800d2f6 <BSP_SD_IsDetected>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	2b01      	cmp	r3, #1
 800d1ce:	d001      	beq.n	800d1d4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	e012      	b.n	800d1fa <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800d1d4:	480b      	ldr	r0, [pc, #44]	; (800d204 <BSP_SD_Init+0x48>)
 800d1d6:	f7fd fa21 	bl	800a61c <HAL_SD_Init>
 800d1da:	4603      	mov	r3, r0
 800d1dc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d1de:	79fb      	ldrb	r3, [r7, #7]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d109      	bne.n	800d1f8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800d1e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d1e8:	4806      	ldr	r0, [pc, #24]	; (800d204 <BSP_SD_Init+0x48>)
 800d1ea:	f7fd ffe1 	bl	800b1b0 <HAL_SD_ConfigWideBusOperation>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d001      	beq.n	800d1f8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d1f4:	2301      	movs	r3, #1
 800d1f6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d1f8:	79fb      	ldrb	r3, [r7, #7]
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3708      	adds	r7, #8
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}
 800d202:	bf00      	nop
 800d204:	20015b80 	.word	0x20015b80

0800d208 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b086      	sub	sp, #24
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	60f8      	str	r0, [r7, #12]
 800d210:	60b9      	str	r1, [r7, #8]
 800d212:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d214:	2300      	movs	r3, #0
 800d216:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	68ba      	ldr	r2, [r7, #8]
 800d21c:	68f9      	ldr	r1, [r7, #12]
 800d21e:	4806      	ldr	r0, [pc, #24]	; (800d238 <BSP_SD_ReadBlocks_DMA+0x30>)
 800d220:	f7fd fa8c 	bl	800a73c <HAL_SD_ReadBlocks_DMA>
 800d224:	4603      	mov	r3, r0
 800d226:	2b00      	cmp	r3, #0
 800d228:	d001      	beq.n	800d22e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d22a:	2301      	movs	r3, #1
 800d22c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d22e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d230:	4618      	mov	r0, r3
 800d232:	3718      	adds	r7, #24
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}
 800d238:	20015b80 	.word	0x20015b80

0800d23c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b086      	sub	sp, #24
 800d240:	af00      	add	r7, sp, #0
 800d242:	60f8      	str	r0, [r7, #12]
 800d244:	60b9      	str	r1, [r7, #8]
 800d246:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d248:	2300      	movs	r3, #0
 800d24a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	68ba      	ldr	r2, [r7, #8]
 800d250:	68f9      	ldr	r1, [r7, #12]
 800d252:	4806      	ldr	r0, [pc, #24]	; (800d26c <BSP_SD_WriteBlocks_DMA+0x30>)
 800d254:	f7fd fb5c 	bl	800a910 <HAL_SD_WriteBlocks_DMA>
 800d258:	4603      	mov	r3, r0
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d001      	beq.n	800d262 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d25e:	2301      	movs	r3, #1
 800d260:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d262:	7dfb      	ldrb	r3, [r7, #23]
}
 800d264:	4618      	mov	r0, r3
 800d266:	3718      	adds	r7, #24
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}
 800d26c:	20015b80 	.word	0x20015b80

0800d270 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d274:	4805      	ldr	r0, [pc, #20]	; (800d28c <BSP_SD_GetCardState+0x1c>)
 800d276:	f7fe f817 	bl	800b2a8 <HAL_SD_GetCardState>
 800d27a:	4603      	mov	r3, r0
 800d27c:	2b04      	cmp	r3, #4
 800d27e:	bf14      	ite	ne
 800d280:	2301      	movne	r3, #1
 800d282:	2300      	moveq	r3, #0
 800d284:	b2db      	uxtb	r3, r3
}
 800d286:	4618      	mov	r0, r3
 800d288:	bd80      	pop	{r7, pc}
 800d28a:	bf00      	nop
 800d28c:	20015b80 	.word	0x20015b80

0800d290 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b082      	sub	sp, #8
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800d298:	6879      	ldr	r1, [r7, #4]
 800d29a:	4803      	ldr	r0, [pc, #12]	; (800d2a8 <BSP_SD_GetCardInfo+0x18>)
 800d29c:	f7fd ff5c 	bl	800b158 <HAL_SD_GetCardInfo>
}
 800d2a0:	bf00      	nop
 800d2a2:	3708      	adds	r7, #8
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}
 800d2a8:	20015b80 	.word	0x20015b80

0800d2ac <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b082      	sub	sp, #8
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800d2b4:	f000 f818 	bl	800d2e8 <BSP_SD_AbortCallback>
}
 800d2b8:	bf00      	nop
 800d2ba:	3708      	adds	r7, #8
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bd80      	pop	{r7, pc}

0800d2c0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b082      	sub	sp, #8
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800d2c8:	f000 f9aa 	bl	800d620 <BSP_SD_WriteCpltCallback>
}
 800d2cc:	bf00      	nop
 800d2ce:	3708      	adds	r7, #8
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}

0800d2d4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b082      	sub	sp, #8
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d2dc:	f000 f9ac 	bl	800d638 <BSP_SD_ReadCpltCallback>
}
 800d2e0:	bf00      	nop
 800d2e2:	3708      	adds	r7, #8
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}

0800d2e8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800d2e8:	b480      	push	{r7}
 800d2ea:	af00      	add	r7, sp, #0

}
 800d2ec:	bf00      	nop
 800d2ee:	46bd      	mov	sp, r7
 800d2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f4:	4770      	bx	lr

0800d2f6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d2f6:	b580      	push	{r7, lr}
 800d2f8:	b082      	sub	sp, #8
 800d2fa:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d300:	f000 f80c 	bl	800d31c <BSP_PlatformIsDetected>
 800d304:	4603      	mov	r3, r0
 800d306:	2b00      	cmp	r3, #0
 800d308:	d101      	bne.n	800d30e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d30a:	2300      	movs	r3, #0
 800d30c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d30e:	79fb      	ldrb	r3, [r7, #7]
 800d310:	b2db      	uxtb	r3, r3
}
 800d312:	4618      	mov	r0, r3
 800d314:	3708      	adds	r7, #8
 800d316:	46bd      	mov	sp, r7
 800d318:	bd80      	pop	{r7, pc}
	...

0800d31c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b082      	sub	sp, #8
 800d320:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d322:	2301      	movs	r3, #1
 800d324:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d326:	2101      	movs	r1, #1
 800d328:	4807      	ldr	r0, [pc, #28]	; (800d348 <BSP_PlatformIsDetected+0x2c>)
 800d32a:	f7fb fc3f 	bl	8008bac <HAL_GPIO_ReadPin>
 800d32e:	4603      	mov	r3, r0
 800d330:	2b00      	cmp	r3, #0
 800d332:	d001      	beq.n	800d338 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800d334:	2300      	movs	r3, #0
 800d336:	71fb      	strb	r3, [r7, #7]
//    if (status == SD_NOT_PRESENT){
//    	status = SD_PRESENT;
//    } else {
//    	status = SD_NOT_PRESENT;
//    }
   	status = SD_PRESENT;
 800d338:	2301      	movs	r3, #1
 800d33a:	71fb      	strb	r3, [r7, #7]

    /* USER CODE END 1 */
    return status;
 800d33c:	79fb      	ldrb	r3, [r7, #7]
}
 800d33e:	4618      	mov	r0, r3
 800d340:	3708      	adds	r7, #8
 800d342:	46bd      	mov	sp, r7
 800d344:	bd80      	pop	{r7, pc}
 800d346:	bf00      	nop
 800d348:	40020c00 	.word	0x40020c00

0800d34c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b084      	sub	sp, #16
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800d354:	f7fa f906 	bl	8007564 <HAL_GetTick>
 800d358:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800d35a:	e006      	b.n	800d36a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d35c:	f7ff ff88 	bl	800d270 <BSP_SD_GetCardState>
 800d360:	4603      	mov	r3, r0
 800d362:	2b00      	cmp	r3, #0
 800d364:	d101      	bne.n	800d36a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d366:	2300      	movs	r3, #0
 800d368:	e009      	b.n	800d37e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800d36a:	f7fa f8fb 	bl	8007564 <HAL_GetTick>
 800d36e:	4602      	mov	r2, r0
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	1ad3      	subs	r3, r2, r3
 800d374:	687a      	ldr	r2, [r7, #4]
 800d376:	429a      	cmp	r2, r3
 800d378:	d8f0      	bhi.n	800d35c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d37a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3710      	adds	r7, #16
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}
	...

0800d388 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b082      	sub	sp, #8
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	4603      	mov	r3, r0
 800d390:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d392:	4b0b      	ldr	r3, [pc, #44]	; (800d3c0 <SD_CheckStatus+0x38>)
 800d394:	2201      	movs	r2, #1
 800d396:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d398:	f7ff ff6a 	bl	800d270 <BSP_SD_GetCardState>
 800d39c:	4603      	mov	r3, r0
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d107      	bne.n	800d3b2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d3a2:	4b07      	ldr	r3, [pc, #28]	; (800d3c0 <SD_CheckStatus+0x38>)
 800d3a4:	781b      	ldrb	r3, [r3, #0]
 800d3a6:	b2db      	uxtb	r3, r3
 800d3a8:	f023 0301 	bic.w	r3, r3, #1
 800d3ac:	b2da      	uxtb	r2, r3
 800d3ae:	4b04      	ldr	r3, [pc, #16]	; (800d3c0 <SD_CheckStatus+0x38>)
 800d3b0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d3b2:	4b03      	ldr	r3, [pc, #12]	; (800d3c0 <SD_CheckStatus+0x38>)
 800d3b4:	781b      	ldrb	r3, [r3, #0]
 800d3b6:	b2db      	uxtb	r3, r3
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	3708      	adds	r7, #8
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}
 800d3c0:	20000165 	.word	0x20000165

0800d3c4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b082      	sub	sp, #8
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d3ce:	f7ff fef5 	bl	800d1bc <BSP_SD_Init>
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d107      	bne.n	800d3e8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800d3d8:	79fb      	ldrb	r3, [r7, #7]
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f7ff ffd4 	bl	800d388 <SD_CheckStatus>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	461a      	mov	r2, r3
 800d3e4:	4b04      	ldr	r3, [pc, #16]	; (800d3f8 <SD_initialize+0x34>)
 800d3e6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d3e8:	4b03      	ldr	r3, [pc, #12]	; (800d3f8 <SD_initialize+0x34>)
 800d3ea:	781b      	ldrb	r3, [r3, #0]
 800d3ec:	b2db      	uxtb	r3, r3
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	3708      	adds	r7, #8
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}
 800d3f6:	bf00      	nop
 800d3f8:	20000165 	.word	0x20000165

0800d3fc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b082      	sub	sp, #8
 800d400:	af00      	add	r7, sp, #0
 800d402:	4603      	mov	r3, r0
 800d404:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d406:	79fb      	ldrb	r3, [r7, #7]
 800d408:	4618      	mov	r0, r3
 800d40a:	f7ff ffbd 	bl	800d388 <SD_CheckStatus>
 800d40e:	4603      	mov	r3, r0
}
 800d410:	4618      	mov	r0, r3
 800d412:	3708      	adds	r7, #8
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}

0800d418 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b086      	sub	sp, #24
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	60b9      	str	r1, [r7, #8]
 800d420:	607a      	str	r2, [r7, #4]
 800d422:	603b      	str	r3, [r7, #0]
 800d424:	4603      	mov	r3, r0
 800d426:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d428:	2301      	movs	r3, #1
 800d42a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d42c:	f247 5030 	movw	r0, #30000	; 0x7530
 800d430:	f7ff ff8c 	bl	800d34c <SD_CheckStatusWithTimeout>
 800d434:	4603      	mov	r3, r0
 800d436:	2b00      	cmp	r3, #0
 800d438:	da01      	bge.n	800d43e <SD_read+0x26>
  {
    return res;
 800d43a:	7dfb      	ldrb	r3, [r7, #23]
 800d43c:	e03b      	b.n	800d4b6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800d43e:	683a      	ldr	r2, [r7, #0]
 800d440:	6879      	ldr	r1, [r7, #4]
 800d442:	68b8      	ldr	r0, [r7, #8]
 800d444:	f7ff fee0 	bl	800d208 <BSP_SD_ReadBlocks_DMA>
 800d448:	4603      	mov	r3, r0
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d132      	bne.n	800d4b4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800d44e:	4b1c      	ldr	r3, [pc, #112]	; (800d4c0 <SD_read+0xa8>)
 800d450:	2200      	movs	r2, #0
 800d452:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800d454:	f7fa f886 	bl	8007564 <HAL_GetTick>
 800d458:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d45a:	bf00      	nop
 800d45c:	4b18      	ldr	r3, [pc, #96]	; (800d4c0 <SD_read+0xa8>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d108      	bne.n	800d476 <SD_read+0x5e>
 800d464:	f7fa f87e 	bl	8007564 <HAL_GetTick>
 800d468:	4602      	mov	r2, r0
 800d46a:	693b      	ldr	r3, [r7, #16]
 800d46c:	1ad3      	subs	r3, r2, r3
 800d46e:	f247 522f 	movw	r2, #29999	; 0x752f
 800d472:	4293      	cmp	r3, r2
 800d474:	d9f2      	bls.n	800d45c <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800d476:	4b12      	ldr	r3, [pc, #72]	; (800d4c0 <SD_read+0xa8>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d102      	bne.n	800d484 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800d47e:	2301      	movs	r3, #1
 800d480:	75fb      	strb	r3, [r7, #23]
 800d482:	e017      	b.n	800d4b4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800d484:	4b0e      	ldr	r3, [pc, #56]	; (800d4c0 <SD_read+0xa8>)
 800d486:	2200      	movs	r2, #0
 800d488:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d48a:	f7fa f86b 	bl	8007564 <HAL_GetTick>
 800d48e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d490:	e007      	b.n	800d4a2 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d492:	f7ff feed 	bl	800d270 <BSP_SD_GetCardState>
 800d496:	4603      	mov	r3, r0
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d102      	bne.n	800d4a2 <SD_read+0x8a>
          {
            res = RES_OK;
 800d49c:	2300      	movs	r3, #0
 800d49e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800d4a0:	e008      	b.n	800d4b4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d4a2:	f7fa f85f 	bl	8007564 <HAL_GetTick>
 800d4a6:	4602      	mov	r2, r0
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	1ad3      	subs	r3, r2, r3
 800d4ac:	f247 522f 	movw	r2, #29999	; 0x752f
 800d4b0:	4293      	cmp	r3, r2
 800d4b2:	d9ee      	bls.n	800d492 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800d4b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	3718      	adds	r7, #24
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}
 800d4be:	bf00      	nop
 800d4c0:	20000838 	.word	0x20000838

0800d4c4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b086      	sub	sp, #24
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	60b9      	str	r1, [r7, #8]
 800d4cc:	607a      	str	r2, [r7, #4]
 800d4ce:	603b      	str	r3, [r7, #0]
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800d4d8:	4b24      	ldr	r3, [pc, #144]	; (800d56c <SD_write+0xa8>)
 800d4da:	2200      	movs	r2, #0
 800d4dc:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d4de:	f247 5030 	movw	r0, #30000	; 0x7530
 800d4e2:	f7ff ff33 	bl	800d34c <SD_CheckStatusWithTimeout>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	da01      	bge.n	800d4f0 <SD_write+0x2c>
  {
    return res;
 800d4ec:	7dfb      	ldrb	r3, [r7, #23]
 800d4ee:	e038      	b.n	800d562 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d4f0:	683a      	ldr	r2, [r7, #0]
 800d4f2:	6879      	ldr	r1, [r7, #4]
 800d4f4:	68b8      	ldr	r0, [r7, #8]
 800d4f6:	f7ff fea1 	bl	800d23c <BSP_SD_WriteBlocks_DMA>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d12f      	bne.n	800d560 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800d500:	f7fa f830 	bl	8007564 <HAL_GetTick>
 800d504:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d506:	bf00      	nop
 800d508:	4b18      	ldr	r3, [pc, #96]	; (800d56c <SD_write+0xa8>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d108      	bne.n	800d522 <SD_write+0x5e>
 800d510:	f7fa f828 	bl	8007564 <HAL_GetTick>
 800d514:	4602      	mov	r2, r0
 800d516:	693b      	ldr	r3, [r7, #16]
 800d518:	1ad3      	subs	r3, r2, r3
 800d51a:	f247 522f 	movw	r2, #29999	; 0x752f
 800d51e:	4293      	cmp	r3, r2
 800d520:	d9f2      	bls.n	800d508 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800d522:	4b12      	ldr	r3, [pc, #72]	; (800d56c <SD_write+0xa8>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d102      	bne.n	800d530 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800d52a:	2301      	movs	r3, #1
 800d52c:	75fb      	strb	r3, [r7, #23]
 800d52e:	e017      	b.n	800d560 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800d530:	4b0e      	ldr	r3, [pc, #56]	; (800d56c <SD_write+0xa8>)
 800d532:	2200      	movs	r2, #0
 800d534:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d536:	f7fa f815 	bl	8007564 <HAL_GetTick>
 800d53a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d53c:	e007      	b.n	800d54e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d53e:	f7ff fe97 	bl	800d270 <BSP_SD_GetCardState>
 800d542:	4603      	mov	r3, r0
 800d544:	2b00      	cmp	r3, #0
 800d546:	d102      	bne.n	800d54e <SD_write+0x8a>
          {
            res = RES_OK;
 800d548:	2300      	movs	r3, #0
 800d54a:	75fb      	strb	r3, [r7, #23]
            break;
 800d54c:	e008      	b.n	800d560 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d54e:	f7fa f809 	bl	8007564 <HAL_GetTick>
 800d552:	4602      	mov	r2, r0
 800d554:	693b      	ldr	r3, [r7, #16]
 800d556:	1ad3      	subs	r3, r2, r3
 800d558:	f247 522f 	movw	r2, #29999	; 0x752f
 800d55c:	4293      	cmp	r3, r2
 800d55e:	d9ee      	bls.n	800d53e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800d560:	7dfb      	ldrb	r3, [r7, #23]
}
 800d562:	4618      	mov	r0, r3
 800d564:	3718      	adds	r7, #24
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}
 800d56a:	bf00      	nop
 800d56c:	20000834 	.word	0x20000834

0800d570 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b08c      	sub	sp, #48	; 0x30
 800d574:	af00      	add	r7, sp, #0
 800d576:	4603      	mov	r3, r0
 800d578:	603a      	str	r2, [r7, #0]
 800d57a:	71fb      	strb	r3, [r7, #7]
 800d57c:	460b      	mov	r3, r1
 800d57e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d580:	2301      	movs	r3, #1
 800d582:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d586:	4b25      	ldr	r3, [pc, #148]	; (800d61c <SD_ioctl+0xac>)
 800d588:	781b      	ldrb	r3, [r3, #0]
 800d58a:	b2db      	uxtb	r3, r3
 800d58c:	f003 0301 	and.w	r3, r3, #1
 800d590:	2b00      	cmp	r3, #0
 800d592:	d001      	beq.n	800d598 <SD_ioctl+0x28>
 800d594:	2303      	movs	r3, #3
 800d596:	e03c      	b.n	800d612 <SD_ioctl+0xa2>

  switch (cmd)
 800d598:	79bb      	ldrb	r3, [r7, #6]
 800d59a:	2b03      	cmp	r3, #3
 800d59c:	d834      	bhi.n	800d608 <SD_ioctl+0x98>
 800d59e:	a201      	add	r2, pc, #4	; (adr r2, 800d5a4 <SD_ioctl+0x34>)
 800d5a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5a4:	0800d5b5 	.word	0x0800d5b5
 800d5a8:	0800d5bd 	.word	0x0800d5bd
 800d5ac:	0800d5d5 	.word	0x0800d5d5
 800d5b0:	0800d5ef 	.word	0x0800d5ef
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d5ba:	e028      	b.n	800d60e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d5bc:	f107 030c 	add.w	r3, r7, #12
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	f7ff fe65 	bl	800d290 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d5c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d5d2:	e01c      	b.n	800d60e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d5d4:	f107 030c 	add.w	r3, r7, #12
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f7ff fe59 	bl	800d290 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5e0:	b29a      	uxth	r2, r3
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d5ec:	e00f      	b.n	800d60e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d5ee:	f107 030c 	add.w	r3, r7, #12
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	f7ff fe4c 	bl	800d290 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5fa:	0a5a      	lsrs	r2, r3, #9
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d600:	2300      	movs	r3, #0
 800d602:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d606:	e002      	b.n	800d60e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d608:	2304      	movs	r3, #4
 800d60a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d60e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d612:	4618      	mov	r0, r3
 800d614:	3730      	adds	r7, #48	; 0x30
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}
 800d61a:	bf00      	nop
 800d61c:	20000165 	.word	0x20000165

0800d620 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800d620:	b480      	push	{r7}
 800d622:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800d624:	4b03      	ldr	r3, [pc, #12]	; (800d634 <BSP_SD_WriteCpltCallback+0x14>)
 800d626:	2201      	movs	r2, #1
 800d628:	601a      	str	r2, [r3, #0]
}
 800d62a:	bf00      	nop
 800d62c:	46bd      	mov	sp, r7
 800d62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d632:	4770      	bx	lr
 800d634:	20000834 	.word	0x20000834

0800d638 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d638:	b480      	push	{r7}
 800d63a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800d63c:	4b03      	ldr	r3, [pc, #12]	; (800d64c <BSP_SD_ReadCpltCallback+0x14>)
 800d63e:	2201      	movs	r2, #1
 800d640:	601a      	str	r2, [r3, #0]
}
 800d642:	bf00      	nop
 800d644:	46bd      	mov	sp, r7
 800d646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64a:	4770      	bx	lr
 800d64c:	20000838 	.word	0x20000838

0800d650 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b084      	sub	sp, #16
 800d654:	af00      	add	r7, sp, #0
 800d656:	4603      	mov	r3, r0
 800d658:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d65a:	79fb      	ldrb	r3, [r7, #7]
 800d65c:	4a08      	ldr	r2, [pc, #32]	; (800d680 <disk_status+0x30>)
 800d65e:	009b      	lsls	r3, r3, #2
 800d660:	4413      	add	r3, r2
 800d662:	685b      	ldr	r3, [r3, #4]
 800d664:	685b      	ldr	r3, [r3, #4]
 800d666:	79fa      	ldrb	r2, [r7, #7]
 800d668:	4905      	ldr	r1, [pc, #20]	; (800d680 <disk_status+0x30>)
 800d66a:	440a      	add	r2, r1
 800d66c:	7a12      	ldrb	r2, [r2, #8]
 800d66e:	4610      	mov	r0, r2
 800d670:	4798      	blx	r3
 800d672:	4603      	mov	r3, r0
 800d674:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d676:	7bfb      	ldrb	r3, [r7, #15]
}
 800d678:	4618      	mov	r0, r3
 800d67a:	3710      	adds	r7, #16
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}
 800d680:	20000864 	.word	0x20000864

0800d684 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b084      	sub	sp, #16
 800d688:	af00      	add	r7, sp, #0
 800d68a:	4603      	mov	r3, r0
 800d68c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d68e:	2300      	movs	r3, #0
 800d690:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d692:	79fb      	ldrb	r3, [r7, #7]
 800d694:	4a0d      	ldr	r2, [pc, #52]	; (800d6cc <disk_initialize+0x48>)
 800d696:	5cd3      	ldrb	r3, [r2, r3]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d111      	bne.n	800d6c0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d69c:	79fb      	ldrb	r3, [r7, #7]
 800d69e:	4a0b      	ldr	r2, [pc, #44]	; (800d6cc <disk_initialize+0x48>)
 800d6a0:	2101      	movs	r1, #1
 800d6a2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d6a4:	79fb      	ldrb	r3, [r7, #7]
 800d6a6:	4a09      	ldr	r2, [pc, #36]	; (800d6cc <disk_initialize+0x48>)
 800d6a8:	009b      	lsls	r3, r3, #2
 800d6aa:	4413      	add	r3, r2
 800d6ac:	685b      	ldr	r3, [r3, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	79fa      	ldrb	r2, [r7, #7]
 800d6b2:	4906      	ldr	r1, [pc, #24]	; (800d6cc <disk_initialize+0x48>)
 800d6b4:	440a      	add	r2, r1
 800d6b6:	7a12      	ldrb	r2, [r2, #8]
 800d6b8:	4610      	mov	r0, r2
 800d6ba:	4798      	blx	r3
 800d6bc:	4603      	mov	r3, r0
 800d6be:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d6c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3710      	adds	r7, #16
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}
 800d6ca:	bf00      	nop
 800d6cc:	20000864 	.word	0x20000864

0800d6d0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d6d0:	b590      	push	{r4, r7, lr}
 800d6d2:	b087      	sub	sp, #28
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	60b9      	str	r1, [r7, #8]
 800d6d8:	607a      	str	r2, [r7, #4]
 800d6da:	603b      	str	r3, [r7, #0]
 800d6dc:	4603      	mov	r3, r0
 800d6de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d6e0:	7bfb      	ldrb	r3, [r7, #15]
 800d6e2:	4a0a      	ldr	r2, [pc, #40]	; (800d70c <disk_read+0x3c>)
 800d6e4:	009b      	lsls	r3, r3, #2
 800d6e6:	4413      	add	r3, r2
 800d6e8:	685b      	ldr	r3, [r3, #4]
 800d6ea:	689c      	ldr	r4, [r3, #8]
 800d6ec:	7bfb      	ldrb	r3, [r7, #15]
 800d6ee:	4a07      	ldr	r2, [pc, #28]	; (800d70c <disk_read+0x3c>)
 800d6f0:	4413      	add	r3, r2
 800d6f2:	7a18      	ldrb	r0, [r3, #8]
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	687a      	ldr	r2, [r7, #4]
 800d6f8:	68b9      	ldr	r1, [r7, #8]
 800d6fa:	47a0      	blx	r4
 800d6fc:	4603      	mov	r3, r0
 800d6fe:	75fb      	strb	r3, [r7, #23]
  return res;
 800d700:	7dfb      	ldrb	r3, [r7, #23]
}
 800d702:	4618      	mov	r0, r3
 800d704:	371c      	adds	r7, #28
 800d706:	46bd      	mov	sp, r7
 800d708:	bd90      	pop	{r4, r7, pc}
 800d70a:	bf00      	nop
 800d70c:	20000864 	.word	0x20000864

0800d710 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d710:	b590      	push	{r4, r7, lr}
 800d712:	b087      	sub	sp, #28
 800d714:	af00      	add	r7, sp, #0
 800d716:	60b9      	str	r1, [r7, #8]
 800d718:	607a      	str	r2, [r7, #4]
 800d71a:	603b      	str	r3, [r7, #0]
 800d71c:	4603      	mov	r3, r0
 800d71e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d720:	7bfb      	ldrb	r3, [r7, #15]
 800d722:	4a0a      	ldr	r2, [pc, #40]	; (800d74c <disk_write+0x3c>)
 800d724:	009b      	lsls	r3, r3, #2
 800d726:	4413      	add	r3, r2
 800d728:	685b      	ldr	r3, [r3, #4]
 800d72a:	68dc      	ldr	r4, [r3, #12]
 800d72c:	7bfb      	ldrb	r3, [r7, #15]
 800d72e:	4a07      	ldr	r2, [pc, #28]	; (800d74c <disk_write+0x3c>)
 800d730:	4413      	add	r3, r2
 800d732:	7a18      	ldrb	r0, [r3, #8]
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	687a      	ldr	r2, [r7, #4]
 800d738:	68b9      	ldr	r1, [r7, #8]
 800d73a:	47a0      	blx	r4
 800d73c:	4603      	mov	r3, r0
 800d73e:	75fb      	strb	r3, [r7, #23]
  return res;
 800d740:	7dfb      	ldrb	r3, [r7, #23]
}
 800d742:	4618      	mov	r0, r3
 800d744:	371c      	adds	r7, #28
 800d746:	46bd      	mov	sp, r7
 800d748:	bd90      	pop	{r4, r7, pc}
 800d74a:	bf00      	nop
 800d74c:	20000864 	.word	0x20000864

0800d750 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b084      	sub	sp, #16
 800d754:	af00      	add	r7, sp, #0
 800d756:	4603      	mov	r3, r0
 800d758:	603a      	str	r2, [r7, #0]
 800d75a:	71fb      	strb	r3, [r7, #7]
 800d75c:	460b      	mov	r3, r1
 800d75e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d760:	79fb      	ldrb	r3, [r7, #7]
 800d762:	4a09      	ldr	r2, [pc, #36]	; (800d788 <disk_ioctl+0x38>)
 800d764:	009b      	lsls	r3, r3, #2
 800d766:	4413      	add	r3, r2
 800d768:	685b      	ldr	r3, [r3, #4]
 800d76a:	691b      	ldr	r3, [r3, #16]
 800d76c:	79fa      	ldrb	r2, [r7, #7]
 800d76e:	4906      	ldr	r1, [pc, #24]	; (800d788 <disk_ioctl+0x38>)
 800d770:	440a      	add	r2, r1
 800d772:	7a10      	ldrb	r0, [r2, #8]
 800d774:	79b9      	ldrb	r1, [r7, #6]
 800d776:	683a      	ldr	r2, [r7, #0]
 800d778:	4798      	blx	r3
 800d77a:	4603      	mov	r3, r0
 800d77c:	73fb      	strb	r3, [r7, #15]
  return res;
 800d77e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d780:	4618      	mov	r0, r3
 800d782:	3710      	adds	r7, #16
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}
 800d788:	20000864 	.word	0x20000864

0800d78c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d78c:	b480      	push	{r7}
 800d78e:	b085      	sub	sp, #20
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	3301      	adds	r3, #1
 800d798:	781b      	ldrb	r3, [r3, #0]
 800d79a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d79c:	89fb      	ldrh	r3, [r7, #14]
 800d79e:	021b      	lsls	r3, r3, #8
 800d7a0:	b21a      	sxth	r2, r3
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	781b      	ldrb	r3, [r3, #0]
 800d7a6:	b21b      	sxth	r3, r3
 800d7a8:	4313      	orrs	r3, r2
 800d7aa:	b21b      	sxth	r3, r3
 800d7ac:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d7ae:	89fb      	ldrh	r3, [r7, #14]
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	3714      	adds	r7, #20
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ba:	4770      	bx	lr

0800d7bc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d7bc:	b480      	push	{r7}
 800d7be:	b085      	sub	sp, #20
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	3303      	adds	r3, #3
 800d7c8:	781b      	ldrb	r3, [r3, #0]
 800d7ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	021b      	lsls	r3, r3, #8
 800d7d0:	687a      	ldr	r2, [r7, #4]
 800d7d2:	3202      	adds	r2, #2
 800d7d4:	7812      	ldrb	r2, [r2, #0]
 800d7d6:	4313      	orrs	r3, r2
 800d7d8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	021b      	lsls	r3, r3, #8
 800d7de:	687a      	ldr	r2, [r7, #4]
 800d7e0:	3201      	adds	r2, #1
 800d7e2:	7812      	ldrb	r2, [r2, #0]
 800d7e4:	4313      	orrs	r3, r2
 800d7e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	021b      	lsls	r3, r3, #8
 800d7ec:	687a      	ldr	r2, [r7, #4]
 800d7ee:	7812      	ldrb	r2, [r2, #0]
 800d7f0:	4313      	orrs	r3, r2
 800d7f2:	60fb      	str	r3, [r7, #12]
	return rv;
 800d7f4:	68fb      	ldr	r3, [r7, #12]
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	3714      	adds	r7, #20
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d800:	4770      	bx	lr

0800d802 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d802:	b480      	push	{r7}
 800d804:	b083      	sub	sp, #12
 800d806:	af00      	add	r7, sp, #0
 800d808:	6078      	str	r0, [r7, #4]
 800d80a:	460b      	mov	r3, r1
 800d80c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	1c5a      	adds	r2, r3, #1
 800d812:	607a      	str	r2, [r7, #4]
 800d814:	887a      	ldrh	r2, [r7, #2]
 800d816:	b2d2      	uxtb	r2, r2
 800d818:	701a      	strb	r2, [r3, #0]
 800d81a:	887b      	ldrh	r3, [r7, #2]
 800d81c:	0a1b      	lsrs	r3, r3, #8
 800d81e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	1c5a      	adds	r2, r3, #1
 800d824:	607a      	str	r2, [r7, #4]
 800d826:	887a      	ldrh	r2, [r7, #2]
 800d828:	b2d2      	uxtb	r2, r2
 800d82a:	701a      	strb	r2, [r3, #0]
}
 800d82c:	bf00      	nop
 800d82e:	370c      	adds	r7, #12
 800d830:	46bd      	mov	sp, r7
 800d832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d836:	4770      	bx	lr

0800d838 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d838:	b480      	push	{r7}
 800d83a:	b083      	sub	sp, #12
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
 800d840:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	1c5a      	adds	r2, r3, #1
 800d846:	607a      	str	r2, [r7, #4]
 800d848:	683a      	ldr	r2, [r7, #0]
 800d84a:	b2d2      	uxtb	r2, r2
 800d84c:	701a      	strb	r2, [r3, #0]
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	0a1b      	lsrs	r3, r3, #8
 800d852:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	1c5a      	adds	r2, r3, #1
 800d858:	607a      	str	r2, [r7, #4]
 800d85a:	683a      	ldr	r2, [r7, #0]
 800d85c:	b2d2      	uxtb	r2, r2
 800d85e:	701a      	strb	r2, [r3, #0]
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	0a1b      	lsrs	r3, r3, #8
 800d864:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	1c5a      	adds	r2, r3, #1
 800d86a:	607a      	str	r2, [r7, #4]
 800d86c:	683a      	ldr	r2, [r7, #0]
 800d86e:	b2d2      	uxtb	r2, r2
 800d870:	701a      	strb	r2, [r3, #0]
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	0a1b      	lsrs	r3, r3, #8
 800d876:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	1c5a      	adds	r2, r3, #1
 800d87c:	607a      	str	r2, [r7, #4]
 800d87e:	683a      	ldr	r2, [r7, #0]
 800d880:	b2d2      	uxtb	r2, r2
 800d882:	701a      	strb	r2, [r3, #0]
}
 800d884:	bf00      	nop
 800d886:	370c      	adds	r7, #12
 800d888:	46bd      	mov	sp, r7
 800d88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d88e:	4770      	bx	lr

0800d890 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d890:	b480      	push	{r7}
 800d892:	b087      	sub	sp, #28
 800d894:	af00      	add	r7, sp, #0
 800d896:	60f8      	str	r0, [r7, #12]
 800d898:	60b9      	str	r1, [r7, #8]
 800d89a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d00d      	beq.n	800d8c6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d8aa:	693a      	ldr	r2, [r7, #16]
 800d8ac:	1c53      	adds	r3, r2, #1
 800d8ae:	613b      	str	r3, [r7, #16]
 800d8b0:	697b      	ldr	r3, [r7, #20]
 800d8b2:	1c59      	adds	r1, r3, #1
 800d8b4:	6179      	str	r1, [r7, #20]
 800d8b6:	7812      	ldrb	r2, [r2, #0]
 800d8b8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	3b01      	subs	r3, #1
 800d8be:	607b      	str	r3, [r7, #4]
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d1f1      	bne.n	800d8aa <mem_cpy+0x1a>
	}
}
 800d8c6:	bf00      	nop
 800d8c8:	371c      	adds	r7, #28
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d0:	4770      	bx	lr

0800d8d2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d8d2:	b480      	push	{r7}
 800d8d4:	b087      	sub	sp, #28
 800d8d6:	af00      	add	r7, sp, #0
 800d8d8:	60f8      	str	r0, [r7, #12]
 800d8da:	60b9      	str	r1, [r7, #8]
 800d8dc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	1c5a      	adds	r2, r3, #1
 800d8e6:	617a      	str	r2, [r7, #20]
 800d8e8:	68ba      	ldr	r2, [r7, #8]
 800d8ea:	b2d2      	uxtb	r2, r2
 800d8ec:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	3b01      	subs	r3, #1
 800d8f2:	607b      	str	r3, [r7, #4]
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d1f3      	bne.n	800d8e2 <mem_set+0x10>
}
 800d8fa:	bf00      	nop
 800d8fc:	371c      	adds	r7, #28
 800d8fe:	46bd      	mov	sp, r7
 800d900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d904:	4770      	bx	lr

0800d906 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d906:	b480      	push	{r7}
 800d908:	b089      	sub	sp, #36	; 0x24
 800d90a:	af00      	add	r7, sp, #0
 800d90c:	60f8      	str	r0, [r7, #12]
 800d90e:	60b9      	str	r1, [r7, #8]
 800d910:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	61fb      	str	r3, [r7, #28]
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d91a:	2300      	movs	r3, #0
 800d91c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d91e:	69fb      	ldr	r3, [r7, #28]
 800d920:	1c5a      	adds	r2, r3, #1
 800d922:	61fa      	str	r2, [r7, #28]
 800d924:	781b      	ldrb	r3, [r3, #0]
 800d926:	4619      	mov	r1, r3
 800d928:	69bb      	ldr	r3, [r7, #24]
 800d92a:	1c5a      	adds	r2, r3, #1
 800d92c:	61ba      	str	r2, [r7, #24]
 800d92e:	781b      	ldrb	r3, [r3, #0]
 800d930:	1acb      	subs	r3, r1, r3
 800d932:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	3b01      	subs	r3, #1
 800d938:	607b      	str	r3, [r7, #4]
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d002      	beq.n	800d946 <mem_cmp+0x40>
 800d940:	697b      	ldr	r3, [r7, #20]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d0eb      	beq.n	800d91e <mem_cmp+0x18>

	return r;
 800d946:	697b      	ldr	r3, [r7, #20]
}
 800d948:	4618      	mov	r0, r3
 800d94a:	3724      	adds	r7, #36	; 0x24
 800d94c:	46bd      	mov	sp, r7
 800d94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d952:	4770      	bx	lr

0800d954 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d954:	b480      	push	{r7}
 800d956:	b083      	sub	sp, #12
 800d958:	af00      	add	r7, sp, #0
 800d95a:	6078      	str	r0, [r7, #4]
 800d95c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d95e:	e002      	b.n	800d966 <chk_chr+0x12>
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	3301      	adds	r3, #1
 800d964:	607b      	str	r3, [r7, #4]
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	781b      	ldrb	r3, [r3, #0]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d005      	beq.n	800d97a <chk_chr+0x26>
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	781b      	ldrb	r3, [r3, #0]
 800d972:	461a      	mov	r2, r3
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	4293      	cmp	r3, r2
 800d978:	d1f2      	bne.n	800d960 <chk_chr+0xc>
	return *str;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	781b      	ldrb	r3, [r3, #0]
}
 800d97e:	4618      	mov	r0, r3
 800d980:	370c      	adds	r7, #12
 800d982:	46bd      	mov	sp, r7
 800d984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d988:	4770      	bx	lr
	...

0800d98c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d98c:	b480      	push	{r7}
 800d98e:	b085      	sub	sp, #20
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
 800d994:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d996:	2300      	movs	r3, #0
 800d998:	60bb      	str	r3, [r7, #8]
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	60fb      	str	r3, [r7, #12]
 800d99e:	e029      	b.n	800d9f4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d9a0:	4a27      	ldr	r2, [pc, #156]	; (800da40 <chk_lock+0xb4>)
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	011b      	lsls	r3, r3, #4
 800d9a6:	4413      	add	r3, r2
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d01d      	beq.n	800d9ea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d9ae:	4a24      	ldr	r2, [pc, #144]	; (800da40 <chk_lock+0xb4>)
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	011b      	lsls	r3, r3, #4
 800d9b4:	4413      	add	r3, r2
 800d9b6:	681a      	ldr	r2, [r3, #0]
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	429a      	cmp	r2, r3
 800d9be:	d116      	bne.n	800d9ee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d9c0:	4a1f      	ldr	r2, [pc, #124]	; (800da40 <chk_lock+0xb4>)
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	011b      	lsls	r3, r3, #4
 800d9c6:	4413      	add	r3, r2
 800d9c8:	3304      	adds	r3, #4
 800d9ca:	681a      	ldr	r2, [r3, #0]
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d9d0:	429a      	cmp	r2, r3
 800d9d2:	d10c      	bne.n	800d9ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d9d4:	4a1a      	ldr	r2, [pc, #104]	; (800da40 <chk_lock+0xb4>)
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	011b      	lsls	r3, r3, #4
 800d9da:	4413      	add	r3, r2
 800d9dc:	3308      	adds	r3, #8
 800d9de:	681a      	ldr	r2, [r3, #0]
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d9e4:	429a      	cmp	r2, r3
 800d9e6:	d102      	bne.n	800d9ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d9e8:	e007      	b.n	800d9fa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d9ea:	2301      	movs	r3, #1
 800d9ec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	3301      	adds	r3, #1
 800d9f2:	60fb      	str	r3, [r7, #12]
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	2b01      	cmp	r3, #1
 800d9f8:	d9d2      	bls.n	800d9a0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	2b02      	cmp	r3, #2
 800d9fe:	d109      	bne.n	800da14 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d102      	bne.n	800da0c <chk_lock+0x80>
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	2b02      	cmp	r3, #2
 800da0a:	d101      	bne.n	800da10 <chk_lock+0x84>
 800da0c:	2300      	movs	r3, #0
 800da0e:	e010      	b.n	800da32 <chk_lock+0xa6>
 800da10:	2312      	movs	r3, #18
 800da12:	e00e      	b.n	800da32 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d108      	bne.n	800da2c <chk_lock+0xa0>
 800da1a:	4a09      	ldr	r2, [pc, #36]	; (800da40 <chk_lock+0xb4>)
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	011b      	lsls	r3, r3, #4
 800da20:	4413      	add	r3, r2
 800da22:	330c      	adds	r3, #12
 800da24:	881b      	ldrh	r3, [r3, #0]
 800da26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da2a:	d101      	bne.n	800da30 <chk_lock+0xa4>
 800da2c:	2310      	movs	r3, #16
 800da2e:	e000      	b.n	800da32 <chk_lock+0xa6>
 800da30:	2300      	movs	r3, #0
}
 800da32:	4618      	mov	r0, r3
 800da34:	3714      	adds	r7, #20
 800da36:	46bd      	mov	sp, r7
 800da38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3c:	4770      	bx	lr
 800da3e:	bf00      	nop
 800da40:	20000844 	.word	0x20000844

0800da44 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800da44:	b480      	push	{r7}
 800da46:	b083      	sub	sp, #12
 800da48:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800da4a:	2300      	movs	r3, #0
 800da4c:	607b      	str	r3, [r7, #4]
 800da4e:	e002      	b.n	800da56 <enq_lock+0x12>
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	3301      	adds	r3, #1
 800da54:	607b      	str	r3, [r7, #4]
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	2b01      	cmp	r3, #1
 800da5a:	d806      	bhi.n	800da6a <enq_lock+0x26>
 800da5c:	4a09      	ldr	r2, [pc, #36]	; (800da84 <enq_lock+0x40>)
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	011b      	lsls	r3, r3, #4
 800da62:	4413      	add	r3, r2
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d1f2      	bne.n	800da50 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	2b02      	cmp	r3, #2
 800da6e:	bf14      	ite	ne
 800da70:	2301      	movne	r3, #1
 800da72:	2300      	moveq	r3, #0
 800da74:	b2db      	uxtb	r3, r3
}
 800da76:	4618      	mov	r0, r3
 800da78:	370c      	adds	r7, #12
 800da7a:	46bd      	mov	sp, r7
 800da7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da80:	4770      	bx	lr
 800da82:	bf00      	nop
 800da84:	20000844 	.word	0x20000844

0800da88 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800da88:	b480      	push	{r7}
 800da8a:	b085      	sub	sp, #20
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
 800da90:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800da92:	2300      	movs	r3, #0
 800da94:	60fb      	str	r3, [r7, #12]
 800da96:	e01f      	b.n	800dad8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800da98:	4a41      	ldr	r2, [pc, #260]	; (800dba0 <inc_lock+0x118>)
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	011b      	lsls	r3, r3, #4
 800da9e:	4413      	add	r3, r2
 800daa0:	681a      	ldr	r2, [r3, #0]
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	429a      	cmp	r2, r3
 800daa8:	d113      	bne.n	800dad2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800daaa:	4a3d      	ldr	r2, [pc, #244]	; (800dba0 <inc_lock+0x118>)
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	011b      	lsls	r3, r3, #4
 800dab0:	4413      	add	r3, r2
 800dab2:	3304      	adds	r3, #4
 800dab4:	681a      	ldr	r2, [r3, #0]
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800daba:	429a      	cmp	r2, r3
 800dabc:	d109      	bne.n	800dad2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800dabe:	4a38      	ldr	r2, [pc, #224]	; (800dba0 <inc_lock+0x118>)
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	011b      	lsls	r3, r3, #4
 800dac4:	4413      	add	r3, r2
 800dac6:	3308      	adds	r3, #8
 800dac8:	681a      	ldr	r2, [r3, #0]
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800dace:	429a      	cmp	r2, r3
 800dad0:	d006      	beq.n	800dae0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	3301      	adds	r3, #1
 800dad6:	60fb      	str	r3, [r7, #12]
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	2b01      	cmp	r3, #1
 800dadc:	d9dc      	bls.n	800da98 <inc_lock+0x10>
 800dade:	e000      	b.n	800dae2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800dae0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	2b02      	cmp	r3, #2
 800dae6:	d132      	bne.n	800db4e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800dae8:	2300      	movs	r3, #0
 800daea:	60fb      	str	r3, [r7, #12]
 800daec:	e002      	b.n	800daf4 <inc_lock+0x6c>
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	3301      	adds	r3, #1
 800daf2:	60fb      	str	r3, [r7, #12]
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	2b01      	cmp	r3, #1
 800daf8:	d806      	bhi.n	800db08 <inc_lock+0x80>
 800dafa:	4a29      	ldr	r2, [pc, #164]	; (800dba0 <inc_lock+0x118>)
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	011b      	lsls	r3, r3, #4
 800db00:	4413      	add	r3, r2
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d1f2      	bne.n	800daee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	2b02      	cmp	r3, #2
 800db0c:	d101      	bne.n	800db12 <inc_lock+0x8a>
 800db0e:	2300      	movs	r3, #0
 800db10:	e040      	b.n	800db94 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681a      	ldr	r2, [r3, #0]
 800db16:	4922      	ldr	r1, [pc, #136]	; (800dba0 <inc_lock+0x118>)
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	011b      	lsls	r3, r3, #4
 800db1c:	440b      	add	r3, r1
 800db1e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	689a      	ldr	r2, [r3, #8]
 800db24:	491e      	ldr	r1, [pc, #120]	; (800dba0 <inc_lock+0x118>)
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	011b      	lsls	r3, r3, #4
 800db2a:	440b      	add	r3, r1
 800db2c:	3304      	adds	r3, #4
 800db2e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	695a      	ldr	r2, [r3, #20]
 800db34:	491a      	ldr	r1, [pc, #104]	; (800dba0 <inc_lock+0x118>)
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	011b      	lsls	r3, r3, #4
 800db3a:	440b      	add	r3, r1
 800db3c:	3308      	adds	r3, #8
 800db3e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800db40:	4a17      	ldr	r2, [pc, #92]	; (800dba0 <inc_lock+0x118>)
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	011b      	lsls	r3, r3, #4
 800db46:	4413      	add	r3, r2
 800db48:	330c      	adds	r3, #12
 800db4a:	2200      	movs	r2, #0
 800db4c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d009      	beq.n	800db68 <inc_lock+0xe0>
 800db54:	4a12      	ldr	r2, [pc, #72]	; (800dba0 <inc_lock+0x118>)
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	011b      	lsls	r3, r3, #4
 800db5a:	4413      	add	r3, r2
 800db5c:	330c      	adds	r3, #12
 800db5e:	881b      	ldrh	r3, [r3, #0]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d001      	beq.n	800db68 <inc_lock+0xe0>
 800db64:	2300      	movs	r3, #0
 800db66:	e015      	b.n	800db94 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800db68:	683b      	ldr	r3, [r7, #0]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d108      	bne.n	800db80 <inc_lock+0xf8>
 800db6e:	4a0c      	ldr	r2, [pc, #48]	; (800dba0 <inc_lock+0x118>)
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	011b      	lsls	r3, r3, #4
 800db74:	4413      	add	r3, r2
 800db76:	330c      	adds	r3, #12
 800db78:	881b      	ldrh	r3, [r3, #0]
 800db7a:	3301      	adds	r3, #1
 800db7c:	b29a      	uxth	r2, r3
 800db7e:	e001      	b.n	800db84 <inc_lock+0xfc>
 800db80:	f44f 7280 	mov.w	r2, #256	; 0x100
 800db84:	4906      	ldr	r1, [pc, #24]	; (800dba0 <inc_lock+0x118>)
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	011b      	lsls	r3, r3, #4
 800db8a:	440b      	add	r3, r1
 800db8c:	330c      	adds	r3, #12
 800db8e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	3301      	adds	r3, #1
}
 800db94:	4618      	mov	r0, r3
 800db96:	3714      	adds	r7, #20
 800db98:	46bd      	mov	sp, r7
 800db9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9e:	4770      	bx	lr
 800dba0:	20000844 	.word	0x20000844

0800dba4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800dba4:	b480      	push	{r7}
 800dba6:	b085      	sub	sp, #20
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	3b01      	subs	r3, #1
 800dbb0:	607b      	str	r3, [r7, #4]
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2b01      	cmp	r3, #1
 800dbb6:	d825      	bhi.n	800dc04 <dec_lock+0x60>
		n = Files[i].ctr;
 800dbb8:	4a17      	ldr	r2, [pc, #92]	; (800dc18 <dec_lock+0x74>)
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	011b      	lsls	r3, r3, #4
 800dbbe:	4413      	add	r3, r2
 800dbc0:	330c      	adds	r3, #12
 800dbc2:	881b      	ldrh	r3, [r3, #0]
 800dbc4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800dbc6:	89fb      	ldrh	r3, [r7, #14]
 800dbc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dbcc:	d101      	bne.n	800dbd2 <dec_lock+0x2e>
 800dbce:	2300      	movs	r3, #0
 800dbd0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800dbd2:	89fb      	ldrh	r3, [r7, #14]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d002      	beq.n	800dbde <dec_lock+0x3a>
 800dbd8:	89fb      	ldrh	r3, [r7, #14]
 800dbda:	3b01      	subs	r3, #1
 800dbdc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800dbde:	4a0e      	ldr	r2, [pc, #56]	; (800dc18 <dec_lock+0x74>)
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	011b      	lsls	r3, r3, #4
 800dbe4:	4413      	add	r3, r2
 800dbe6:	330c      	adds	r3, #12
 800dbe8:	89fa      	ldrh	r2, [r7, #14]
 800dbea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800dbec:	89fb      	ldrh	r3, [r7, #14]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d105      	bne.n	800dbfe <dec_lock+0x5a>
 800dbf2:	4a09      	ldr	r2, [pc, #36]	; (800dc18 <dec_lock+0x74>)
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	011b      	lsls	r3, r3, #4
 800dbf8:	4413      	add	r3, r2
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	737b      	strb	r3, [r7, #13]
 800dc02:	e001      	b.n	800dc08 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800dc04:	2302      	movs	r3, #2
 800dc06:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800dc08:	7b7b      	ldrb	r3, [r7, #13]
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3714      	adds	r7, #20
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc14:	4770      	bx	lr
 800dc16:	bf00      	nop
 800dc18:	20000844 	.word	0x20000844

0800dc1c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800dc1c:	b480      	push	{r7}
 800dc1e:	b085      	sub	sp, #20
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800dc24:	2300      	movs	r3, #0
 800dc26:	60fb      	str	r3, [r7, #12]
 800dc28:	e010      	b.n	800dc4c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800dc2a:	4a0d      	ldr	r2, [pc, #52]	; (800dc60 <clear_lock+0x44>)
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	011b      	lsls	r3, r3, #4
 800dc30:	4413      	add	r3, r2
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	687a      	ldr	r2, [r7, #4]
 800dc36:	429a      	cmp	r2, r3
 800dc38:	d105      	bne.n	800dc46 <clear_lock+0x2a>
 800dc3a:	4a09      	ldr	r2, [pc, #36]	; (800dc60 <clear_lock+0x44>)
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	011b      	lsls	r3, r3, #4
 800dc40:	4413      	add	r3, r2
 800dc42:	2200      	movs	r2, #0
 800dc44:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	3301      	adds	r3, #1
 800dc4a:	60fb      	str	r3, [r7, #12]
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	2b01      	cmp	r3, #1
 800dc50:	d9eb      	bls.n	800dc2a <clear_lock+0xe>
	}
}
 800dc52:	bf00      	nop
 800dc54:	3714      	adds	r7, #20
 800dc56:	46bd      	mov	sp, r7
 800dc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5c:	4770      	bx	lr
 800dc5e:	bf00      	nop
 800dc60:	20000844 	.word	0x20000844

0800dc64 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b086      	sub	sp, #24
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	78db      	ldrb	r3, [r3, #3]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d034      	beq.n	800dce2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc7c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	7858      	ldrb	r0, [r3, #1]
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dc88:	2301      	movs	r3, #1
 800dc8a:	697a      	ldr	r2, [r7, #20]
 800dc8c:	f7ff fd40 	bl	800d710 <disk_write>
 800dc90:	4603      	mov	r3, r0
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d002      	beq.n	800dc9c <sync_window+0x38>
			res = FR_DISK_ERR;
 800dc96:	2301      	movs	r3, #1
 800dc98:	73fb      	strb	r3, [r7, #15]
 800dc9a:	e022      	b.n	800dce2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2200      	movs	r2, #0
 800dca0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dca6:	697a      	ldr	r2, [r7, #20]
 800dca8:	1ad2      	subs	r2, r2, r3
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	69db      	ldr	r3, [r3, #28]
 800dcae:	429a      	cmp	r2, r3
 800dcb0:	d217      	bcs.n	800dce2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	789b      	ldrb	r3, [r3, #2]
 800dcb6:	613b      	str	r3, [r7, #16]
 800dcb8:	e010      	b.n	800dcdc <sync_window+0x78>
					wsect += fs->fsize;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	69db      	ldr	r3, [r3, #28]
 800dcbe:	697a      	ldr	r2, [r7, #20]
 800dcc0:	4413      	add	r3, r2
 800dcc2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	7858      	ldrb	r0, [r3, #1]
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dcce:	2301      	movs	r3, #1
 800dcd0:	697a      	ldr	r2, [r7, #20]
 800dcd2:	f7ff fd1d 	bl	800d710 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dcd6:	693b      	ldr	r3, [r7, #16]
 800dcd8:	3b01      	subs	r3, #1
 800dcda:	613b      	str	r3, [r7, #16]
 800dcdc:	693b      	ldr	r3, [r7, #16]
 800dcde:	2b01      	cmp	r3, #1
 800dce0:	d8eb      	bhi.n	800dcba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800dce2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dce4:	4618      	mov	r0, r3
 800dce6:	3718      	adds	r7, #24
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}

0800dcec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b084      	sub	sp, #16
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
 800dcf4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcfe:	683a      	ldr	r2, [r7, #0]
 800dd00:	429a      	cmp	r2, r3
 800dd02:	d01b      	beq.n	800dd3c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800dd04:	6878      	ldr	r0, [r7, #4]
 800dd06:	f7ff ffad 	bl	800dc64 <sync_window>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800dd0e:	7bfb      	ldrb	r3, [r7, #15]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d113      	bne.n	800dd3c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	7858      	ldrb	r0, [r3, #1]
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dd1e:	2301      	movs	r3, #1
 800dd20:	683a      	ldr	r2, [r7, #0]
 800dd22:	f7ff fcd5 	bl	800d6d0 <disk_read>
 800dd26:	4603      	mov	r3, r0
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d004      	beq.n	800dd36 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800dd2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dd30:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800dd32:	2301      	movs	r3, #1
 800dd34:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	683a      	ldr	r2, [r7, #0]
 800dd3a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800dd3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd3e:	4618      	mov	r0, r3
 800dd40:	3710      	adds	r7, #16
 800dd42:	46bd      	mov	sp, r7
 800dd44:	bd80      	pop	{r7, pc}
	...

0800dd48 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b084      	sub	sp, #16
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800dd50:	6878      	ldr	r0, [r7, #4]
 800dd52:	f7ff ff87 	bl	800dc64 <sync_window>
 800dd56:	4603      	mov	r3, r0
 800dd58:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800dd5a:	7bfb      	ldrb	r3, [r7, #15]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d159      	bne.n	800de14 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	781b      	ldrb	r3, [r3, #0]
 800dd64:	2b03      	cmp	r3, #3
 800dd66:	d149      	bne.n	800ddfc <sync_fs+0xb4>
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	791b      	ldrb	r3, [r3, #4]
 800dd6c:	2b01      	cmp	r3, #1
 800dd6e:	d145      	bne.n	800ddfc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	899b      	ldrh	r3, [r3, #12]
 800dd7a:	461a      	mov	r2, r3
 800dd7c:	2100      	movs	r1, #0
 800dd7e:	f7ff fda8 	bl	800d8d2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	3334      	adds	r3, #52	; 0x34
 800dd86:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dd8a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800dd8e:	4618      	mov	r0, r3
 800dd90:	f7ff fd37 	bl	800d802 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	3334      	adds	r3, #52	; 0x34
 800dd98:	4921      	ldr	r1, [pc, #132]	; (800de20 <sync_fs+0xd8>)
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	f7ff fd4c 	bl	800d838 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	3334      	adds	r3, #52	; 0x34
 800dda4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800dda8:	491e      	ldr	r1, [pc, #120]	; (800de24 <sync_fs+0xdc>)
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f7ff fd44 	bl	800d838 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	3334      	adds	r3, #52	; 0x34
 800ddb4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	695b      	ldr	r3, [r3, #20]
 800ddbc:	4619      	mov	r1, r3
 800ddbe:	4610      	mov	r0, r2
 800ddc0:	f7ff fd3a 	bl	800d838 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	3334      	adds	r3, #52	; 0x34
 800ddc8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	691b      	ldr	r3, [r3, #16]
 800ddd0:	4619      	mov	r1, r3
 800ddd2:	4610      	mov	r0, r2
 800ddd4:	f7ff fd30 	bl	800d838 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	6a1b      	ldr	r3, [r3, #32]
 800dddc:	1c5a      	adds	r2, r3, #1
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	7858      	ldrb	r0, [r3, #1]
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ddf0:	2301      	movs	r3, #1
 800ddf2:	f7ff fc8d 	bl	800d710 <disk_write>
			fs->fsi_flag = 0;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	785b      	ldrb	r3, [r3, #1]
 800de00:	2200      	movs	r2, #0
 800de02:	2100      	movs	r1, #0
 800de04:	4618      	mov	r0, r3
 800de06:	f7ff fca3 	bl	800d750 <disk_ioctl>
 800de0a:	4603      	mov	r3, r0
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d001      	beq.n	800de14 <sync_fs+0xcc>
 800de10:	2301      	movs	r3, #1
 800de12:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800de14:	7bfb      	ldrb	r3, [r7, #15]
}
 800de16:	4618      	mov	r0, r3
 800de18:	3710      	adds	r7, #16
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}
 800de1e:	bf00      	nop
 800de20:	41615252 	.word	0x41615252
 800de24:	61417272 	.word	0x61417272

0800de28 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800de28:	b480      	push	{r7}
 800de2a:	b083      	sub	sp, #12
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
 800de30:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	3b02      	subs	r3, #2
 800de36:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	699b      	ldr	r3, [r3, #24]
 800de3c:	3b02      	subs	r3, #2
 800de3e:	683a      	ldr	r2, [r7, #0]
 800de40:	429a      	cmp	r2, r3
 800de42:	d301      	bcc.n	800de48 <clust2sect+0x20>
 800de44:	2300      	movs	r3, #0
 800de46:	e008      	b.n	800de5a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	895b      	ldrh	r3, [r3, #10]
 800de4c:	461a      	mov	r2, r3
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	fb03 f202 	mul.w	r2, r3, r2
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de58:	4413      	add	r3, r2
}
 800de5a:	4618      	mov	r0, r3
 800de5c:	370c      	adds	r7, #12
 800de5e:	46bd      	mov	sp, r7
 800de60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de64:	4770      	bx	lr

0800de66 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800de66:	b580      	push	{r7, lr}
 800de68:	b086      	sub	sp, #24
 800de6a:	af00      	add	r7, sp, #0
 800de6c:	6078      	str	r0, [r7, #4]
 800de6e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	2b01      	cmp	r3, #1
 800de7a:	d904      	bls.n	800de86 <get_fat+0x20>
 800de7c:	693b      	ldr	r3, [r7, #16]
 800de7e:	699b      	ldr	r3, [r3, #24]
 800de80:	683a      	ldr	r2, [r7, #0]
 800de82:	429a      	cmp	r2, r3
 800de84:	d302      	bcc.n	800de8c <get_fat+0x26>
		val = 1;	/* Internal error */
 800de86:	2301      	movs	r3, #1
 800de88:	617b      	str	r3, [r7, #20]
 800de8a:	e0b7      	b.n	800dffc <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800de8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de90:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800de92:	693b      	ldr	r3, [r7, #16]
 800de94:	781b      	ldrb	r3, [r3, #0]
 800de96:	2b02      	cmp	r3, #2
 800de98:	d05a      	beq.n	800df50 <get_fat+0xea>
 800de9a:	2b03      	cmp	r3, #3
 800de9c:	d07d      	beq.n	800df9a <get_fat+0x134>
 800de9e:	2b01      	cmp	r3, #1
 800dea0:	f040 80a2 	bne.w	800dfe8 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800dea4:	683b      	ldr	r3, [r7, #0]
 800dea6:	60fb      	str	r3, [r7, #12]
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	085b      	lsrs	r3, r3, #1
 800deac:	68fa      	ldr	r2, [r7, #12]
 800deae:	4413      	add	r3, r2
 800deb0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800deb2:	693b      	ldr	r3, [r7, #16]
 800deb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800deb6:	693b      	ldr	r3, [r7, #16]
 800deb8:	899b      	ldrh	r3, [r3, #12]
 800deba:	4619      	mov	r1, r3
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	fbb3 f3f1 	udiv	r3, r3, r1
 800dec2:	4413      	add	r3, r2
 800dec4:	4619      	mov	r1, r3
 800dec6:	6938      	ldr	r0, [r7, #16]
 800dec8:	f7ff ff10 	bl	800dcec <move_window>
 800decc:	4603      	mov	r3, r0
 800dece:	2b00      	cmp	r3, #0
 800ded0:	f040 808d 	bne.w	800dfee <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	1c5a      	adds	r2, r3, #1
 800ded8:	60fa      	str	r2, [r7, #12]
 800deda:	693a      	ldr	r2, [r7, #16]
 800dedc:	8992      	ldrh	r2, [r2, #12]
 800dede:	fbb3 f1f2 	udiv	r1, r3, r2
 800dee2:	fb02 f201 	mul.w	r2, r2, r1
 800dee6:	1a9b      	subs	r3, r3, r2
 800dee8:	693a      	ldr	r2, [r7, #16]
 800deea:	4413      	add	r3, r2
 800deec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800def0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800def2:	693b      	ldr	r3, [r7, #16]
 800def4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800def6:	693b      	ldr	r3, [r7, #16]
 800def8:	899b      	ldrh	r3, [r3, #12]
 800defa:	4619      	mov	r1, r3
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	fbb3 f3f1 	udiv	r3, r3, r1
 800df02:	4413      	add	r3, r2
 800df04:	4619      	mov	r1, r3
 800df06:	6938      	ldr	r0, [r7, #16]
 800df08:	f7ff fef0 	bl	800dcec <move_window>
 800df0c:	4603      	mov	r3, r0
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d16f      	bne.n	800dff2 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800df12:	693b      	ldr	r3, [r7, #16]
 800df14:	899b      	ldrh	r3, [r3, #12]
 800df16:	461a      	mov	r2, r3
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	fbb3 f1f2 	udiv	r1, r3, r2
 800df1e:	fb02 f201 	mul.w	r2, r2, r1
 800df22:	1a9b      	subs	r3, r3, r2
 800df24:	693a      	ldr	r2, [r7, #16]
 800df26:	4413      	add	r3, r2
 800df28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800df2c:	021b      	lsls	r3, r3, #8
 800df2e:	461a      	mov	r2, r3
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	4313      	orrs	r3, r2
 800df34:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	f003 0301 	and.w	r3, r3, #1
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d002      	beq.n	800df46 <get_fat+0xe0>
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	091b      	lsrs	r3, r3, #4
 800df44:	e002      	b.n	800df4c <get_fat+0xe6>
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800df4c:	617b      	str	r3, [r7, #20]
			break;
 800df4e:	e055      	b.n	800dffc <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800df50:	693b      	ldr	r3, [r7, #16]
 800df52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df54:	693b      	ldr	r3, [r7, #16]
 800df56:	899b      	ldrh	r3, [r3, #12]
 800df58:	085b      	lsrs	r3, r3, #1
 800df5a:	b29b      	uxth	r3, r3
 800df5c:	4619      	mov	r1, r3
 800df5e:	683b      	ldr	r3, [r7, #0]
 800df60:	fbb3 f3f1 	udiv	r3, r3, r1
 800df64:	4413      	add	r3, r2
 800df66:	4619      	mov	r1, r3
 800df68:	6938      	ldr	r0, [r7, #16]
 800df6a:	f7ff febf 	bl	800dcec <move_window>
 800df6e:	4603      	mov	r3, r0
 800df70:	2b00      	cmp	r3, #0
 800df72:	d140      	bne.n	800dff6 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800df74:	693b      	ldr	r3, [r7, #16]
 800df76:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	005b      	lsls	r3, r3, #1
 800df7e:	693a      	ldr	r2, [r7, #16]
 800df80:	8992      	ldrh	r2, [r2, #12]
 800df82:	fbb3 f0f2 	udiv	r0, r3, r2
 800df86:	fb02 f200 	mul.w	r2, r2, r0
 800df8a:	1a9b      	subs	r3, r3, r2
 800df8c:	440b      	add	r3, r1
 800df8e:	4618      	mov	r0, r3
 800df90:	f7ff fbfc 	bl	800d78c <ld_word>
 800df94:	4603      	mov	r3, r0
 800df96:	617b      	str	r3, [r7, #20]
			break;
 800df98:	e030      	b.n	800dffc <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800df9a:	693b      	ldr	r3, [r7, #16]
 800df9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df9e:	693b      	ldr	r3, [r7, #16]
 800dfa0:	899b      	ldrh	r3, [r3, #12]
 800dfa2:	089b      	lsrs	r3, r3, #2
 800dfa4:	b29b      	uxth	r3, r3
 800dfa6:	4619      	mov	r1, r3
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	fbb3 f3f1 	udiv	r3, r3, r1
 800dfae:	4413      	add	r3, r2
 800dfb0:	4619      	mov	r1, r3
 800dfb2:	6938      	ldr	r0, [r7, #16]
 800dfb4:	f7ff fe9a 	bl	800dcec <move_window>
 800dfb8:	4603      	mov	r3, r0
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d11d      	bne.n	800dffa <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800dfbe:	693b      	ldr	r3, [r7, #16]
 800dfc0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dfc4:	683b      	ldr	r3, [r7, #0]
 800dfc6:	009b      	lsls	r3, r3, #2
 800dfc8:	693a      	ldr	r2, [r7, #16]
 800dfca:	8992      	ldrh	r2, [r2, #12]
 800dfcc:	fbb3 f0f2 	udiv	r0, r3, r2
 800dfd0:	fb02 f200 	mul.w	r2, r2, r0
 800dfd4:	1a9b      	subs	r3, r3, r2
 800dfd6:	440b      	add	r3, r1
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f7ff fbef 	bl	800d7bc <ld_dword>
 800dfde:	4603      	mov	r3, r0
 800dfe0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800dfe4:	617b      	str	r3, [r7, #20]
			break;
 800dfe6:	e009      	b.n	800dffc <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800dfe8:	2301      	movs	r3, #1
 800dfea:	617b      	str	r3, [r7, #20]
 800dfec:	e006      	b.n	800dffc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dfee:	bf00      	nop
 800dff0:	e004      	b.n	800dffc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dff2:	bf00      	nop
 800dff4:	e002      	b.n	800dffc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dff6:	bf00      	nop
 800dff8:	e000      	b.n	800dffc <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dffa:	bf00      	nop
		}
	}

	return val;
 800dffc:	697b      	ldr	r3, [r7, #20]
}
 800dffe:	4618      	mov	r0, r3
 800e000:	3718      	adds	r7, #24
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}

0800e006 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e006:	b590      	push	{r4, r7, lr}
 800e008:	b089      	sub	sp, #36	; 0x24
 800e00a:	af00      	add	r7, sp, #0
 800e00c:	60f8      	str	r0, [r7, #12]
 800e00e:	60b9      	str	r1, [r7, #8]
 800e010:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e012:	2302      	movs	r3, #2
 800e014:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e016:	68bb      	ldr	r3, [r7, #8]
 800e018:	2b01      	cmp	r3, #1
 800e01a:	f240 8106 	bls.w	800e22a <put_fat+0x224>
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	699b      	ldr	r3, [r3, #24]
 800e022:	68ba      	ldr	r2, [r7, #8]
 800e024:	429a      	cmp	r2, r3
 800e026:	f080 8100 	bcs.w	800e22a <put_fat+0x224>
		switch (fs->fs_type) {
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	781b      	ldrb	r3, [r3, #0]
 800e02e:	2b02      	cmp	r3, #2
 800e030:	f000 8088 	beq.w	800e144 <put_fat+0x13e>
 800e034:	2b03      	cmp	r3, #3
 800e036:	f000 80b0 	beq.w	800e19a <put_fat+0x194>
 800e03a:	2b01      	cmp	r3, #1
 800e03c:	f040 80f5 	bne.w	800e22a <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e040:	68bb      	ldr	r3, [r7, #8]
 800e042:	61bb      	str	r3, [r7, #24]
 800e044:	69bb      	ldr	r3, [r7, #24]
 800e046:	085b      	lsrs	r3, r3, #1
 800e048:	69ba      	ldr	r2, [r7, #24]
 800e04a:	4413      	add	r3, r2
 800e04c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	899b      	ldrh	r3, [r3, #12]
 800e056:	4619      	mov	r1, r3
 800e058:	69bb      	ldr	r3, [r7, #24]
 800e05a:	fbb3 f3f1 	udiv	r3, r3, r1
 800e05e:	4413      	add	r3, r2
 800e060:	4619      	mov	r1, r3
 800e062:	68f8      	ldr	r0, [r7, #12]
 800e064:	f7ff fe42 	bl	800dcec <move_window>
 800e068:	4603      	mov	r3, r0
 800e06a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e06c:	7ffb      	ldrb	r3, [r7, #31]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	f040 80d4 	bne.w	800e21c <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e07a:	69bb      	ldr	r3, [r7, #24]
 800e07c:	1c5a      	adds	r2, r3, #1
 800e07e:	61ba      	str	r2, [r7, #24]
 800e080:	68fa      	ldr	r2, [r7, #12]
 800e082:	8992      	ldrh	r2, [r2, #12]
 800e084:	fbb3 f0f2 	udiv	r0, r3, r2
 800e088:	fb02 f200 	mul.w	r2, r2, r0
 800e08c:	1a9b      	subs	r3, r3, r2
 800e08e:	440b      	add	r3, r1
 800e090:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	f003 0301 	and.w	r3, r3, #1
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d00d      	beq.n	800e0b8 <put_fat+0xb2>
 800e09c:	697b      	ldr	r3, [r7, #20]
 800e09e:	781b      	ldrb	r3, [r3, #0]
 800e0a0:	b25b      	sxtb	r3, r3
 800e0a2:	f003 030f 	and.w	r3, r3, #15
 800e0a6:	b25a      	sxtb	r2, r3
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	b2db      	uxtb	r3, r3
 800e0ac:	011b      	lsls	r3, r3, #4
 800e0ae:	b25b      	sxtb	r3, r3
 800e0b0:	4313      	orrs	r3, r2
 800e0b2:	b25b      	sxtb	r3, r3
 800e0b4:	b2db      	uxtb	r3, r3
 800e0b6:	e001      	b.n	800e0bc <put_fat+0xb6>
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	b2db      	uxtb	r3, r3
 800e0bc:	697a      	ldr	r2, [r7, #20]
 800e0be:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	2201      	movs	r2, #1
 800e0c4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	899b      	ldrh	r3, [r3, #12]
 800e0ce:	4619      	mov	r1, r3
 800e0d0:	69bb      	ldr	r3, [r7, #24]
 800e0d2:	fbb3 f3f1 	udiv	r3, r3, r1
 800e0d6:	4413      	add	r3, r2
 800e0d8:	4619      	mov	r1, r3
 800e0da:	68f8      	ldr	r0, [r7, #12]
 800e0dc:	f7ff fe06 	bl	800dcec <move_window>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e0e4:	7ffb      	ldrb	r3, [r7, #31]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	f040 809a 	bne.w	800e220 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	899b      	ldrh	r3, [r3, #12]
 800e0f6:	461a      	mov	r2, r3
 800e0f8:	69bb      	ldr	r3, [r7, #24]
 800e0fa:	fbb3 f0f2 	udiv	r0, r3, r2
 800e0fe:	fb02 f200 	mul.w	r2, r2, r0
 800e102:	1a9b      	subs	r3, r3, r2
 800e104:	440b      	add	r3, r1
 800e106:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e108:	68bb      	ldr	r3, [r7, #8]
 800e10a:	f003 0301 	and.w	r3, r3, #1
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d003      	beq.n	800e11a <put_fat+0x114>
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	091b      	lsrs	r3, r3, #4
 800e116:	b2db      	uxtb	r3, r3
 800e118:	e00e      	b.n	800e138 <put_fat+0x132>
 800e11a:	697b      	ldr	r3, [r7, #20]
 800e11c:	781b      	ldrb	r3, [r3, #0]
 800e11e:	b25b      	sxtb	r3, r3
 800e120:	f023 030f 	bic.w	r3, r3, #15
 800e124:	b25a      	sxtb	r2, r3
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	0a1b      	lsrs	r3, r3, #8
 800e12a:	b25b      	sxtb	r3, r3
 800e12c:	f003 030f 	and.w	r3, r3, #15
 800e130:	b25b      	sxtb	r3, r3
 800e132:	4313      	orrs	r3, r2
 800e134:	b25b      	sxtb	r3, r3
 800e136:	b2db      	uxtb	r3, r3
 800e138:	697a      	ldr	r2, [r7, #20]
 800e13a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	2201      	movs	r2, #1
 800e140:	70da      	strb	r2, [r3, #3]
			break;
 800e142:	e072      	b.n	800e22a <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e144:	68fb      	ldr	r3, [r7, #12]
 800e146:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	899b      	ldrh	r3, [r3, #12]
 800e14c:	085b      	lsrs	r3, r3, #1
 800e14e:	b29b      	uxth	r3, r3
 800e150:	4619      	mov	r1, r3
 800e152:	68bb      	ldr	r3, [r7, #8]
 800e154:	fbb3 f3f1 	udiv	r3, r3, r1
 800e158:	4413      	add	r3, r2
 800e15a:	4619      	mov	r1, r3
 800e15c:	68f8      	ldr	r0, [r7, #12]
 800e15e:	f7ff fdc5 	bl	800dcec <move_window>
 800e162:	4603      	mov	r3, r0
 800e164:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e166:	7ffb      	ldrb	r3, [r7, #31]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d15b      	bne.n	800e224 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e172:	68bb      	ldr	r3, [r7, #8]
 800e174:	005b      	lsls	r3, r3, #1
 800e176:	68fa      	ldr	r2, [r7, #12]
 800e178:	8992      	ldrh	r2, [r2, #12]
 800e17a:	fbb3 f0f2 	udiv	r0, r3, r2
 800e17e:	fb02 f200 	mul.w	r2, r2, r0
 800e182:	1a9b      	subs	r3, r3, r2
 800e184:	440b      	add	r3, r1
 800e186:	687a      	ldr	r2, [r7, #4]
 800e188:	b292      	uxth	r2, r2
 800e18a:	4611      	mov	r1, r2
 800e18c:	4618      	mov	r0, r3
 800e18e:	f7ff fb38 	bl	800d802 <st_word>
			fs->wflag = 1;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	2201      	movs	r2, #1
 800e196:	70da      	strb	r2, [r3, #3]
			break;
 800e198:	e047      	b.n	800e22a <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	899b      	ldrh	r3, [r3, #12]
 800e1a2:	089b      	lsrs	r3, r3, #2
 800e1a4:	b29b      	uxth	r3, r3
 800e1a6:	4619      	mov	r1, r3
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	fbb3 f3f1 	udiv	r3, r3, r1
 800e1ae:	4413      	add	r3, r2
 800e1b0:	4619      	mov	r1, r3
 800e1b2:	68f8      	ldr	r0, [r7, #12]
 800e1b4:	f7ff fd9a 	bl	800dcec <move_window>
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e1bc:	7ffb      	ldrb	r3, [r7, #31]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d132      	bne.n	800e228 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e1ce:	68bb      	ldr	r3, [r7, #8]
 800e1d0:	009b      	lsls	r3, r3, #2
 800e1d2:	68fa      	ldr	r2, [r7, #12]
 800e1d4:	8992      	ldrh	r2, [r2, #12]
 800e1d6:	fbb3 f0f2 	udiv	r0, r3, r2
 800e1da:	fb02 f200 	mul.w	r2, r2, r0
 800e1de:	1a9b      	subs	r3, r3, r2
 800e1e0:	440b      	add	r3, r1
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f7ff faea 	bl	800d7bc <ld_dword>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e1ee:	4323      	orrs	r3, r4
 800e1f0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e1f8:	68bb      	ldr	r3, [r7, #8]
 800e1fa:	009b      	lsls	r3, r3, #2
 800e1fc:	68fa      	ldr	r2, [r7, #12]
 800e1fe:	8992      	ldrh	r2, [r2, #12]
 800e200:	fbb3 f0f2 	udiv	r0, r3, r2
 800e204:	fb02 f200 	mul.w	r2, r2, r0
 800e208:	1a9b      	subs	r3, r3, r2
 800e20a:	440b      	add	r3, r1
 800e20c:	6879      	ldr	r1, [r7, #4]
 800e20e:	4618      	mov	r0, r3
 800e210:	f7ff fb12 	bl	800d838 <st_dword>
			fs->wflag = 1;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	2201      	movs	r2, #1
 800e218:	70da      	strb	r2, [r3, #3]
			break;
 800e21a:	e006      	b.n	800e22a <put_fat+0x224>
			if (res != FR_OK) break;
 800e21c:	bf00      	nop
 800e21e:	e004      	b.n	800e22a <put_fat+0x224>
			if (res != FR_OK) break;
 800e220:	bf00      	nop
 800e222:	e002      	b.n	800e22a <put_fat+0x224>
			if (res != FR_OK) break;
 800e224:	bf00      	nop
 800e226:	e000      	b.n	800e22a <put_fat+0x224>
			if (res != FR_OK) break;
 800e228:	bf00      	nop
		}
	}
	return res;
 800e22a:	7ffb      	ldrb	r3, [r7, #31]
}
 800e22c:	4618      	mov	r0, r3
 800e22e:	3724      	adds	r7, #36	; 0x24
 800e230:	46bd      	mov	sp, r7
 800e232:	bd90      	pop	{r4, r7, pc}

0800e234 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b088      	sub	sp, #32
 800e238:	af00      	add	r7, sp, #0
 800e23a:	60f8      	str	r0, [r7, #12]
 800e23c:	60b9      	str	r1, [r7, #8]
 800e23e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e240:	2300      	movs	r3, #0
 800e242:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e24a:	68bb      	ldr	r3, [r7, #8]
 800e24c:	2b01      	cmp	r3, #1
 800e24e:	d904      	bls.n	800e25a <remove_chain+0x26>
 800e250:	69bb      	ldr	r3, [r7, #24]
 800e252:	699b      	ldr	r3, [r3, #24]
 800e254:	68ba      	ldr	r2, [r7, #8]
 800e256:	429a      	cmp	r2, r3
 800e258:	d301      	bcc.n	800e25e <remove_chain+0x2a>
 800e25a:	2302      	movs	r3, #2
 800e25c:	e04b      	b.n	800e2f6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d00c      	beq.n	800e27e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e264:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e268:	6879      	ldr	r1, [r7, #4]
 800e26a:	69b8      	ldr	r0, [r7, #24]
 800e26c:	f7ff fecb 	bl	800e006 <put_fat>
 800e270:	4603      	mov	r3, r0
 800e272:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e274:	7ffb      	ldrb	r3, [r7, #31]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d001      	beq.n	800e27e <remove_chain+0x4a>
 800e27a:	7ffb      	ldrb	r3, [r7, #31]
 800e27c:	e03b      	b.n	800e2f6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e27e:	68b9      	ldr	r1, [r7, #8]
 800e280:	68f8      	ldr	r0, [r7, #12]
 800e282:	f7ff fdf0 	bl	800de66 <get_fat>
 800e286:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e288:	697b      	ldr	r3, [r7, #20]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d031      	beq.n	800e2f2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e28e:	697b      	ldr	r3, [r7, #20]
 800e290:	2b01      	cmp	r3, #1
 800e292:	d101      	bne.n	800e298 <remove_chain+0x64>
 800e294:	2302      	movs	r3, #2
 800e296:	e02e      	b.n	800e2f6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e298:	697b      	ldr	r3, [r7, #20]
 800e29a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e29e:	d101      	bne.n	800e2a4 <remove_chain+0x70>
 800e2a0:	2301      	movs	r3, #1
 800e2a2:	e028      	b.n	800e2f6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	68b9      	ldr	r1, [r7, #8]
 800e2a8:	69b8      	ldr	r0, [r7, #24]
 800e2aa:	f7ff feac 	bl	800e006 <put_fat>
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e2b2:	7ffb      	ldrb	r3, [r7, #31]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d001      	beq.n	800e2bc <remove_chain+0x88>
 800e2b8:	7ffb      	ldrb	r3, [r7, #31]
 800e2ba:	e01c      	b.n	800e2f6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e2bc:	69bb      	ldr	r3, [r7, #24]
 800e2be:	695a      	ldr	r2, [r3, #20]
 800e2c0:	69bb      	ldr	r3, [r7, #24]
 800e2c2:	699b      	ldr	r3, [r3, #24]
 800e2c4:	3b02      	subs	r3, #2
 800e2c6:	429a      	cmp	r2, r3
 800e2c8:	d20b      	bcs.n	800e2e2 <remove_chain+0xae>
			fs->free_clst++;
 800e2ca:	69bb      	ldr	r3, [r7, #24]
 800e2cc:	695b      	ldr	r3, [r3, #20]
 800e2ce:	1c5a      	adds	r2, r3, #1
 800e2d0:	69bb      	ldr	r3, [r7, #24]
 800e2d2:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800e2d4:	69bb      	ldr	r3, [r7, #24]
 800e2d6:	791b      	ldrb	r3, [r3, #4]
 800e2d8:	f043 0301 	orr.w	r3, r3, #1
 800e2dc:	b2da      	uxtb	r2, r3
 800e2de:	69bb      	ldr	r3, [r7, #24]
 800e2e0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e2e2:	697b      	ldr	r3, [r7, #20]
 800e2e4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e2e6:	69bb      	ldr	r3, [r7, #24]
 800e2e8:	699b      	ldr	r3, [r3, #24]
 800e2ea:	68ba      	ldr	r2, [r7, #8]
 800e2ec:	429a      	cmp	r2, r3
 800e2ee:	d3c6      	bcc.n	800e27e <remove_chain+0x4a>
 800e2f0:	e000      	b.n	800e2f4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e2f2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e2f4:	2300      	movs	r3, #0
}
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	3720      	adds	r7, #32
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	bd80      	pop	{r7, pc}

0800e2fe <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e2fe:	b580      	push	{r7, lr}
 800e300:	b088      	sub	sp, #32
 800e302:	af00      	add	r7, sp, #0
 800e304:	6078      	str	r0, [r7, #4]
 800e306:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d10d      	bne.n	800e330 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e314:	693b      	ldr	r3, [r7, #16]
 800e316:	691b      	ldr	r3, [r3, #16]
 800e318:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e31a:	69bb      	ldr	r3, [r7, #24]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d004      	beq.n	800e32a <create_chain+0x2c>
 800e320:	693b      	ldr	r3, [r7, #16]
 800e322:	699b      	ldr	r3, [r3, #24]
 800e324:	69ba      	ldr	r2, [r7, #24]
 800e326:	429a      	cmp	r2, r3
 800e328:	d31b      	bcc.n	800e362 <create_chain+0x64>
 800e32a:	2301      	movs	r3, #1
 800e32c:	61bb      	str	r3, [r7, #24]
 800e32e:	e018      	b.n	800e362 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e330:	6839      	ldr	r1, [r7, #0]
 800e332:	6878      	ldr	r0, [r7, #4]
 800e334:	f7ff fd97 	bl	800de66 <get_fat>
 800e338:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	2b01      	cmp	r3, #1
 800e33e:	d801      	bhi.n	800e344 <create_chain+0x46>
 800e340:	2301      	movs	r3, #1
 800e342:	e070      	b.n	800e426 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e34a:	d101      	bne.n	800e350 <create_chain+0x52>
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	e06a      	b.n	800e426 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e350:	693b      	ldr	r3, [r7, #16]
 800e352:	699b      	ldr	r3, [r3, #24]
 800e354:	68fa      	ldr	r2, [r7, #12]
 800e356:	429a      	cmp	r2, r3
 800e358:	d201      	bcs.n	800e35e <create_chain+0x60>
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	e063      	b.n	800e426 <create_chain+0x128>
		scl = clst;
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e362:	69bb      	ldr	r3, [r7, #24]
 800e364:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e366:	69fb      	ldr	r3, [r7, #28]
 800e368:	3301      	adds	r3, #1
 800e36a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e36c:	693b      	ldr	r3, [r7, #16]
 800e36e:	699b      	ldr	r3, [r3, #24]
 800e370:	69fa      	ldr	r2, [r7, #28]
 800e372:	429a      	cmp	r2, r3
 800e374:	d307      	bcc.n	800e386 <create_chain+0x88>
				ncl = 2;
 800e376:	2302      	movs	r3, #2
 800e378:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e37a:	69fa      	ldr	r2, [r7, #28]
 800e37c:	69bb      	ldr	r3, [r7, #24]
 800e37e:	429a      	cmp	r2, r3
 800e380:	d901      	bls.n	800e386 <create_chain+0x88>
 800e382:	2300      	movs	r3, #0
 800e384:	e04f      	b.n	800e426 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e386:	69f9      	ldr	r1, [r7, #28]
 800e388:	6878      	ldr	r0, [r7, #4]
 800e38a:	f7ff fd6c 	bl	800de66 <get_fat>
 800e38e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d00e      	beq.n	800e3b4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	2b01      	cmp	r3, #1
 800e39a:	d003      	beq.n	800e3a4 <create_chain+0xa6>
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e3a2:	d101      	bne.n	800e3a8 <create_chain+0xaa>
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	e03e      	b.n	800e426 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e3a8:	69fa      	ldr	r2, [r7, #28]
 800e3aa:	69bb      	ldr	r3, [r7, #24]
 800e3ac:	429a      	cmp	r2, r3
 800e3ae:	d1da      	bne.n	800e366 <create_chain+0x68>
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	e038      	b.n	800e426 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e3b4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e3b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e3ba:	69f9      	ldr	r1, [r7, #28]
 800e3bc:	6938      	ldr	r0, [r7, #16]
 800e3be:	f7ff fe22 	bl	800e006 <put_fat>
 800e3c2:	4603      	mov	r3, r0
 800e3c4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e3c6:	7dfb      	ldrb	r3, [r7, #23]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d109      	bne.n	800e3e0 <create_chain+0xe2>
 800e3cc:	683b      	ldr	r3, [r7, #0]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d006      	beq.n	800e3e0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e3d2:	69fa      	ldr	r2, [r7, #28]
 800e3d4:	6839      	ldr	r1, [r7, #0]
 800e3d6:	6938      	ldr	r0, [r7, #16]
 800e3d8:	f7ff fe15 	bl	800e006 <put_fat>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e3e0:	7dfb      	ldrb	r3, [r7, #23]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d116      	bne.n	800e414 <create_chain+0x116>
		fs->last_clst = ncl;
 800e3e6:	693b      	ldr	r3, [r7, #16]
 800e3e8:	69fa      	ldr	r2, [r7, #28]
 800e3ea:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e3ec:	693b      	ldr	r3, [r7, #16]
 800e3ee:	695a      	ldr	r2, [r3, #20]
 800e3f0:	693b      	ldr	r3, [r7, #16]
 800e3f2:	699b      	ldr	r3, [r3, #24]
 800e3f4:	3b02      	subs	r3, #2
 800e3f6:	429a      	cmp	r2, r3
 800e3f8:	d804      	bhi.n	800e404 <create_chain+0x106>
 800e3fa:	693b      	ldr	r3, [r7, #16]
 800e3fc:	695b      	ldr	r3, [r3, #20]
 800e3fe:	1e5a      	subs	r2, r3, #1
 800e400:	693b      	ldr	r3, [r7, #16]
 800e402:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800e404:	693b      	ldr	r3, [r7, #16]
 800e406:	791b      	ldrb	r3, [r3, #4]
 800e408:	f043 0301 	orr.w	r3, r3, #1
 800e40c:	b2da      	uxtb	r2, r3
 800e40e:	693b      	ldr	r3, [r7, #16]
 800e410:	711a      	strb	r2, [r3, #4]
 800e412:	e007      	b.n	800e424 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e414:	7dfb      	ldrb	r3, [r7, #23]
 800e416:	2b01      	cmp	r3, #1
 800e418:	d102      	bne.n	800e420 <create_chain+0x122>
 800e41a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e41e:	e000      	b.n	800e422 <create_chain+0x124>
 800e420:	2301      	movs	r3, #1
 800e422:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e424:	69fb      	ldr	r3, [r7, #28]
}
 800e426:	4618      	mov	r0, r3
 800e428:	3720      	adds	r7, #32
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}

0800e42e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e42e:	b480      	push	{r7}
 800e430:	b087      	sub	sp, #28
 800e432:	af00      	add	r7, sp, #0
 800e434:	6078      	str	r0, [r7, #4]
 800e436:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e442:	3304      	adds	r3, #4
 800e444:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	899b      	ldrh	r3, [r3, #12]
 800e44a:	461a      	mov	r2, r3
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e452:	68fa      	ldr	r2, [r7, #12]
 800e454:	8952      	ldrh	r2, [r2, #10]
 800e456:	fbb3 f3f2 	udiv	r3, r3, r2
 800e45a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e45c:	693b      	ldr	r3, [r7, #16]
 800e45e:	1d1a      	adds	r2, r3, #4
 800e460:	613a      	str	r2, [r7, #16]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e466:	68bb      	ldr	r3, [r7, #8]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d101      	bne.n	800e470 <clmt_clust+0x42>
 800e46c:	2300      	movs	r3, #0
 800e46e:	e010      	b.n	800e492 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800e470:	697a      	ldr	r2, [r7, #20]
 800e472:	68bb      	ldr	r3, [r7, #8]
 800e474:	429a      	cmp	r2, r3
 800e476:	d307      	bcc.n	800e488 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800e478:	697a      	ldr	r2, [r7, #20]
 800e47a:	68bb      	ldr	r3, [r7, #8]
 800e47c:	1ad3      	subs	r3, r2, r3
 800e47e:	617b      	str	r3, [r7, #20]
 800e480:	693b      	ldr	r3, [r7, #16]
 800e482:	3304      	adds	r3, #4
 800e484:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e486:	e7e9      	b.n	800e45c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800e488:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e48a:	693b      	ldr	r3, [r7, #16]
 800e48c:	681a      	ldr	r2, [r3, #0]
 800e48e:	697b      	ldr	r3, [r7, #20]
 800e490:	4413      	add	r3, r2
}
 800e492:	4618      	mov	r0, r3
 800e494:	371c      	adds	r7, #28
 800e496:	46bd      	mov	sp, r7
 800e498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49c:	4770      	bx	lr

0800e49e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e49e:	b580      	push	{r7, lr}
 800e4a0:	b086      	sub	sp, #24
 800e4a2:	af00      	add	r7, sp, #0
 800e4a4:	6078      	str	r0, [r7, #4]
 800e4a6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e4b4:	d204      	bcs.n	800e4c0 <dir_sdi+0x22>
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	f003 031f 	and.w	r3, r3, #31
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d001      	beq.n	800e4c4 <dir_sdi+0x26>
		return FR_INT_ERR;
 800e4c0:	2302      	movs	r3, #2
 800e4c2:	e071      	b.n	800e5a8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	683a      	ldr	r2, [r7, #0]
 800e4c8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	689b      	ldr	r3, [r3, #8]
 800e4ce:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e4d0:	697b      	ldr	r3, [r7, #20]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d106      	bne.n	800e4e4 <dir_sdi+0x46>
 800e4d6:	693b      	ldr	r3, [r7, #16]
 800e4d8:	781b      	ldrb	r3, [r3, #0]
 800e4da:	2b02      	cmp	r3, #2
 800e4dc:	d902      	bls.n	800e4e4 <dir_sdi+0x46>
		clst = fs->dirbase;
 800e4de:	693b      	ldr	r3, [r7, #16]
 800e4e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4e2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e4e4:	697b      	ldr	r3, [r7, #20]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d10c      	bne.n	800e504 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	095b      	lsrs	r3, r3, #5
 800e4ee:	693a      	ldr	r2, [r7, #16]
 800e4f0:	8912      	ldrh	r2, [r2, #8]
 800e4f2:	4293      	cmp	r3, r2
 800e4f4:	d301      	bcc.n	800e4fa <dir_sdi+0x5c>
 800e4f6:	2302      	movs	r3, #2
 800e4f8:	e056      	b.n	800e5a8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800e4fa:	693b      	ldr	r3, [r7, #16]
 800e4fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	61da      	str	r2, [r3, #28]
 800e502:	e02d      	b.n	800e560 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e504:	693b      	ldr	r3, [r7, #16]
 800e506:	895b      	ldrh	r3, [r3, #10]
 800e508:	461a      	mov	r2, r3
 800e50a:	693b      	ldr	r3, [r7, #16]
 800e50c:	899b      	ldrh	r3, [r3, #12]
 800e50e:	fb03 f302 	mul.w	r3, r3, r2
 800e512:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e514:	e019      	b.n	800e54a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	6979      	ldr	r1, [r7, #20]
 800e51a:	4618      	mov	r0, r3
 800e51c:	f7ff fca3 	bl	800de66 <get_fat>
 800e520:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e522:	697b      	ldr	r3, [r7, #20]
 800e524:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e528:	d101      	bne.n	800e52e <dir_sdi+0x90>
 800e52a:	2301      	movs	r3, #1
 800e52c:	e03c      	b.n	800e5a8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e52e:	697b      	ldr	r3, [r7, #20]
 800e530:	2b01      	cmp	r3, #1
 800e532:	d904      	bls.n	800e53e <dir_sdi+0xa0>
 800e534:	693b      	ldr	r3, [r7, #16]
 800e536:	699b      	ldr	r3, [r3, #24]
 800e538:	697a      	ldr	r2, [r7, #20]
 800e53a:	429a      	cmp	r2, r3
 800e53c:	d301      	bcc.n	800e542 <dir_sdi+0xa4>
 800e53e:	2302      	movs	r3, #2
 800e540:	e032      	b.n	800e5a8 <dir_sdi+0x10a>
			ofs -= csz;
 800e542:	683a      	ldr	r2, [r7, #0]
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	1ad3      	subs	r3, r2, r3
 800e548:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e54a:	683a      	ldr	r2, [r7, #0]
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	429a      	cmp	r2, r3
 800e550:	d2e1      	bcs.n	800e516 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800e552:	6979      	ldr	r1, [r7, #20]
 800e554:	6938      	ldr	r0, [r7, #16]
 800e556:	f7ff fc67 	bl	800de28 <clust2sect>
 800e55a:	4602      	mov	r2, r0
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	697a      	ldr	r2, [r7, #20]
 800e564:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	69db      	ldr	r3, [r3, #28]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d101      	bne.n	800e572 <dir_sdi+0xd4>
 800e56e:	2302      	movs	r3, #2
 800e570:	e01a      	b.n	800e5a8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	69da      	ldr	r2, [r3, #28]
 800e576:	693b      	ldr	r3, [r7, #16]
 800e578:	899b      	ldrh	r3, [r3, #12]
 800e57a:	4619      	mov	r1, r3
 800e57c:	683b      	ldr	r3, [r7, #0]
 800e57e:	fbb3 f3f1 	udiv	r3, r3, r1
 800e582:	441a      	add	r2, r3
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e588:	693b      	ldr	r3, [r7, #16]
 800e58a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e58e:	693b      	ldr	r3, [r7, #16]
 800e590:	899b      	ldrh	r3, [r3, #12]
 800e592:	461a      	mov	r2, r3
 800e594:	683b      	ldr	r3, [r7, #0]
 800e596:	fbb3 f0f2 	udiv	r0, r3, r2
 800e59a:	fb02 f200 	mul.w	r2, r2, r0
 800e59e:	1a9b      	subs	r3, r3, r2
 800e5a0:	18ca      	adds	r2, r1, r3
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e5a6:	2300      	movs	r3, #0
}
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	3718      	adds	r7, #24
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	bd80      	pop	{r7, pc}

0800e5b0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b086      	sub	sp, #24
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
 800e5b8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	695b      	ldr	r3, [r3, #20]
 800e5c4:	3320      	adds	r3, #32
 800e5c6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	69db      	ldr	r3, [r3, #28]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d003      	beq.n	800e5d8 <dir_next+0x28>
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e5d6:	d301      	bcc.n	800e5dc <dir_next+0x2c>
 800e5d8:	2304      	movs	r3, #4
 800e5da:	e0bb      	b.n	800e754 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	899b      	ldrh	r3, [r3, #12]
 800e5e0:	461a      	mov	r2, r3
 800e5e2:	68bb      	ldr	r3, [r7, #8]
 800e5e4:	fbb3 f1f2 	udiv	r1, r3, r2
 800e5e8:	fb02 f201 	mul.w	r2, r2, r1
 800e5ec:	1a9b      	subs	r3, r3, r2
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	f040 809d 	bne.w	800e72e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	69db      	ldr	r3, [r3, #28]
 800e5f8:	1c5a      	adds	r2, r3, #1
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	699b      	ldr	r3, [r3, #24]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d10b      	bne.n	800e61e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e606:	68bb      	ldr	r3, [r7, #8]
 800e608:	095b      	lsrs	r3, r3, #5
 800e60a:	68fa      	ldr	r2, [r7, #12]
 800e60c:	8912      	ldrh	r2, [r2, #8]
 800e60e:	4293      	cmp	r3, r2
 800e610:	f0c0 808d 	bcc.w	800e72e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2200      	movs	r2, #0
 800e618:	61da      	str	r2, [r3, #28]
 800e61a:	2304      	movs	r3, #4
 800e61c:	e09a      	b.n	800e754 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	899b      	ldrh	r3, [r3, #12]
 800e622:	461a      	mov	r2, r3
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	fbb3 f3f2 	udiv	r3, r3, r2
 800e62a:	68fa      	ldr	r2, [r7, #12]
 800e62c:	8952      	ldrh	r2, [r2, #10]
 800e62e:	3a01      	subs	r2, #1
 800e630:	4013      	ands	r3, r2
 800e632:	2b00      	cmp	r3, #0
 800e634:	d17b      	bne.n	800e72e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e636:	687a      	ldr	r2, [r7, #4]
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	699b      	ldr	r3, [r3, #24]
 800e63c:	4619      	mov	r1, r3
 800e63e:	4610      	mov	r0, r2
 800e640:	f7ff fc11 	bl	800de66 <get_fat>
 800e644:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e646:	697b      	ldr	r3, [r7, #20]
 800e648:	2b01      	cmp	r3, #1
 800e64a:	d801      	bhi.n	800e650 <dir_next+0xa0>
 800e64c:	2302      	movs	r3, #2
 800e64e:	e081      	b.n	800e754 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e650:	697b      	ldr	r3, [r7, #20]
 800e652:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e656:	d101      	bne.n	800e65c <dir_next+0xac>
 800e658:	2301      	movs	r3, #1
 800e65a:	e07b      	b.n	800e754 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	699b      	ldr	r3, [r3, #24]
 800e660:	697a      	ldr	r2, [r7, #20]
 800e662:	429a      	cmp	r2, r3
 800e664:	d359      	bcc.n	800e71a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e666:	683b      	ldr	r3, [r7, #0]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d104      	bne.n	800e676 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	2200      	movs	r2, #0
 800e670:	61da      	str	r2, [r3, #28]
 800e672:	2304      	movs	r3, #4
 800e674:	e06e      	b.n	800e754 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e676:	687a      	ldr	r2, [r7, #4]
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	699b      	ldr	r3, [r3, #24]
 800e67c:	4619      	mov	r1, r3
 800e67e:	4610      	mov	r0, r2
 800e680:	f7ff fe3d 	bl	800e2fe <create_chain>
 800e684:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e686:	697b      	ldr	r3, [r7, #20]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d101      	bne.n	800e690 <dir_next+0xe0>
 800e68c:	2307      	movs	r3, #7
 800e68e:	e061      	b.n	800e754 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e690:	697b      	ldr	r3, [r7, #20]
 800e692:	2b01      	cmp	r3, #1
 800e694:	d101      	bne.n	800e69a <dir_next+0xea>
 800e696:	2302      	movs	r3, #2
 800e698:	e05c      	b.n	800e754 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e69a:	697b      	ldr	r3, [r7, #20]
 800e69c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e6a0:	d101      	bne.n	800e6a6 <dir_next+0xf6>
 800e6a2:	2301      	movs	r3, #1
 800e6a4:	e056      	b.n	800e754 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e6a6:	68f8      	ldr	r0, [r7, #12]
 800e6a8:	f7ff fadc 	bl	800dc64 <sync_window>
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d001      	beq.n	800e6b6 <dir_next+0x106>
 800e6b2:	2301      	movs	r3, #1
 800e6b4:	e04e      	b.n	800e754 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	899b      	ldrh	r3, [r3, #12]
 800e6c0:	461a      	mov	r2, r3
 800e6c2:	2100      	movs	r1, #0
 800e6c4:	f7ff f905 	bl	800d8d2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	613b      	str	r3, [r7, #16]
 800e6cc:	6979      	ldr	r1, [r7, #20]
 800e6ce:	68f8      	ldr	r0, [r7, #12]
 800e6d0:	f7ff fbaa 	bl	800de28 <clust2sect>
 800e6d4:	4602      	mov	r2, r0
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	631a      	str	r2, [r3, #48]	; 0x30
 800e6da:	e012      	b.n	800e702 <dir_next+0x152>
						fs->wflag = 1;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	2201      	movs	r2, #1
 800e6e0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e6e2:	68f8      	ldr	r0, [r7, #12]
 800e6e4:	f7ff fabe 	bl	800dc64 <sync_window>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d001      	beq.n	800e6f2 <dir_next+0x142>
 800e6ee:	2301      	movs	r3, #1
 800e6f0:	e030      	b.n	800e754 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e6f2:	693b      	ldr	r3, [r7, #16]
 800e6f4:	3301      	adds	r3, #1
 800e6f6:	613b      	str	r3, [r7, #16]
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6fc:	1c5a      	adds	r2, r3, #1
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	631a      	str	r2, [r3, #48]	; 0x30
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	895b      	ldrh	r3, [r3, #10]
 800e706:	461a      	mov	r2, r3
 800e708:	693b      	ldr	r3, [r7, #16]
 800e70a:	4293      	cmp	r3, r2
 800e70c:	d3e6      	bcc.n	800e6dc <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e712:	693b      	ldr	r3, [r7, #16]
 800e714:	1ad2      	subs	r2, r2, r3
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	697a      	ldr	r2, [r7, #20]
 800e71e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e720:	6979      	ldr	r1, [r7, #20]
 800e722:	68f8      	ldr	r0, [r7, #12]
 800e724:	f7ff fb80 	bl	800de28 <clust2sect>
 800e728:	4602      	mov	r2, r0
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	68ba      	ldr	r2, [r7, #8]
 800e732:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	899b      	ldrh	r3, [r3, #12]
 800e73e:	461a      	mov	r2, r3
 800e740:	68bb      	ldr	r3, [r7, #8]
 800e742:	fbb3 f0f2 	udiv	r0, r3, r2
 800e746:	fb02 f200 	mul.w	r2, r2, r0
 800e74a:	1a9b      	subs	r3, r3, r2
 800e74c:	18ca      	adds	r2, r1, r3
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e752:	2300      	movs	r3, #0
}
 800e754:	4618      	mov	r0, r3
 800e756:	3718      	adds	r7, #24
 800e758:	46bd      	mov	sp, r7
 800e75a:	bd80      	pop	{r7, pc}

0800e75c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b086      	sub	sp, #24
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
 800e764:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e76c:	2100      	movs	r1, #0
 800e76e:	6878      	ldr	r0, [r7, #4]
 800e770:	f7ff fe95 	bl	800e49e <dir_sdi>
 800e774:	4603      	mov	r3, r0
 800e776:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e778:	7dfb      	ldrb	r3, [r7, #23]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d12b      	bne.n	800e7d6 <dir_alloc+0x7a>
		n = 0;
 800e77e:	2300      	movs	r3, #0
 800e780:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	69db      	ldr	r3, [r3, #28]
 800e786:	4619      	mov	r1, r3
 800e788:	68f8      	ldr	r0, [r7, #12]
 800e78a:	f7ff faaf 	bl	800dcec <move_window>
 800e78e:	4603      	mov	r3, r0
 800e790:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e792:	7dfb      	ldrb	r3, [r7, #23]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d11d      	bne.n	800e7d4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	6a1b      	ldr	r3, [r3, #32]
 800e79c:	781b      	ldrb	r3, [r3, #0]
 800e79e:	2be5      	cmp	r3, #229	; 0xe5
 800e7a0:	d004      	beq.n	800e7ac <dir_alloc+0x50>
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	6a1b      	ldr	r3, [r3, #32]
 800e7a6:	781b      	ldrb	r3, [r3, #0]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d107      	bne.n	800e7bc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e7ac:	693b      	ldr	r3, [r7, #16]
 800e7ae:	3301      	adds	r3, #1
 800e7b0:	613b      	str	r3, [r7, #16]
 800e7b2:	693a      	ldr	r2, [r7, #16]
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	429a      	cmp	r2, r3
 800e7b8:	d102      	bne.n	800e7c0 <dir_alloc+0x64>
 800e7ba:	e00c      	b.n	800e7d6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e7bc:	2300      	movs	r3, #0
 800e7be:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e7c0:	2101      	movs	r1, #1
 800e7c2:	6878      	ldr	r0, [r7, #4]
 800e7c4:	f7ff fef4 	bl	800e5b0 <dir_next>
 800e7c8:	4603      	mov	r3, r0
 800e7ca:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e7cc:	7dfb      	ldrb	r3, [r7, #23]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d0d7      	beq.n	800e782 <dir_alloc+0x26>
 800e7d2:	e000      	b.n	800e7d6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e7d4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e7d6:	7dfb      	ldrb	r3, [r7, #23]
 800e7d8:	2b04      	cmp	r3, #4
 800e7da:	d101      	bne.n	800e7e0 <dir_alloc+0x84>
 800e7dc:	2307      	movs	r3, #7
 800e7de:	75fb      	strb	r3, [r7, #23]
	return res;
 800e7e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	3718      	adds	r7, #24
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	bd80      	pop	{r7, pc}

0800e7ea <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e7ea:	b580      	push	{r7, lr}
 800e7ec:	b084      	sub	sp, #16
 800e7ee:	af00      	add	r7, sp, #0
 800e7f0:	6078      	str	r0, [r7, #4]
 800e7f2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e7f4:	683b      	ldr	r3, [r7, #0]
 800e7f6:	331a      	adds	r3, #26
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	f7fe ffc7 	bl	800d78c <ld_word>
 800e7fe:	4603      	mov	r3, r0
 800e800:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	781b      	ldrb	r3, [r3, #0]
 800e806:	2b03      	cmp	r3, #3
 800e808:	d109      	bne.n	800e81e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	3314      	adds	r3, #20
 800e80e:	4618      	mov	r0, r3
 800e810:	f7fe ffbc 	bl	800d78c <ld_word>
 800e814:	4603      	mov	r3, r0
 800e816:	041b      	lsls	r3, r3, #16
 800e818:	68fa      	ldr	r2, [r7, #12]
 800e81a:	4313      	orrs	r3, r2
 800e81c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e81e:	68fb      	ldr	r3, [r7, #12]
}
 800e820:	4618      	mov	r0, r3
 800e822:	3710      	adds	r7, #16
 800e824:	46bd      	mov	sp, r7
 800e826:	bd80      	pop	{r7, pc}

0800e828 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e828:	b580      	push	{r7, lr}
 800e82a:	b084      	sub	sp, #16
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	60f8      	str	r0, [r7, #12]
 800e830:	60b9      	str	r1, [r7, #8]
 800e832:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e834:	68bb      	ldr	r3, [r7, #8]
 800e836:	331a      	adds	r3, #26
 800e838:	687a      	ldr	r2, [r7, #4]
 800e83a:	b292      	uxth	r2, r2
 800e83c:	4611      	mov	r1, r2
 800e83e:	4618      	mov	r0, r3
 800e840:	f7fe ffdf 	bl	800d802 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	781b      	ldrb	r3, [r3, #0]
 800e848:	2b03      	cmp	r3, #3
 800e84a:	d109      	bne.n	800e860 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e84c:	68bb      	ldr	r3, [r7, #8]
 800e84e:	f103 0214 	add.w	r2, r3, #20
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	0c1b      	lsrs	r3, r3, #16
 800e856:	b29b      	uxth	r3, r3
 800e858:	4619      	mov	r1, r3
 800e85a:	4610      	mov	r0, r2
 800e85c:	f7fe ffd1 	bl	800d802 <st_word>
	}
}
 800e860:	bf00      	nop
 800e862:	3710      	adds	r7, #16
 800e864:	46bd      	mov	sp, r7
 800e866:	bd80      	pop	{r7, pc}

0800e868 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b086      	sub	sp, #24
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
 800e870:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800e872:	2304      	movs	r3, #4
 800e874:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800e87c:	e03c      	b.n	800e8f8 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	69db      	ldr	r3, [r3, #28]
 800e882:	4619      	mov	r1, r3
 800e884:	6938      	ldr	r0, [r7, #16]
 800e886:	f7ff fa31 	bl	800dcec <move_window>
 800e88a:	4603      	mov	r3, r0
 800e88c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e88e:	7dfb      	ldrb	r3, [r7, #23]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d136      	bne.n	800e902 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	6a1b      	ldr	r3, [r3, #32]
 800e898:	781b      	ldrb	r3, [r3, #0]
 800e89a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800e89c:	7bfb      	ldrb	r3, [r7, #15]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d102      	bne.n	800e8a8 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800e8a2:	2304      	movs	r3, #4
 800e8a4:	75fb      	strb	r3, [r7, #23]
 800e8a6:	e031      	b.n	800e90c <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	6a1b      	ldr	r3, [r3, #32]
 800e8ac:	330b      	adds	r3, #11
 800e8ae:	781b      	ldrb	r3, [r3, #0]
 800e8b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e8b4:	73bb      	strb	r3, [r7, #14]
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	7bba      	ldrb	r2, [r7, #14]
 800e8ba:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800e8bc:	7bfb      	ldrb	r3, [r7, #15]
 800e8be:	2be5      	cmp	r3, #229	; 0xe5
 800e8c0:	d011      	beq.n	800e8e6 <dir_read+0x7e>
 800e8c2:	7bfb      	ldrb	r3, [r7, #15]
 800e8c4:	2b2e      	cmp	r3, #46	; 0x2e
 800e8c6:	d00e      	beq.n	800e8e6 <dir_read+0x7e>
 800e8c8:	7bbb      	ldrb	r3, [r7, #14]
 800e8ca:	2b0f      	cmp	r3, #15
 800e8cc:	d00b      	beq.n	800e8e6 <dir_read+0x7e>
 800e8ce:	7bbb      	ldrb	r3, [r7, #14]
 800e8d0:	f023 0320 	bic.w	r3, r3, #32
 800e8d4:	2b08      	cmp	r3, #8
 800e8d6:	bf0c      	ite	eq
 800e8d8:	2301      	moveq	r3, #1
 800e8da:	2300      	movne	r3, #0
 800e8dc:	b2db      	uxtb	r3, r3
 800e8de:	461a      	mov	r2, r3
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	4293      	cmp	r3, r2
 800e8e4:	d00f      	beq.n	800e906 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800e8e6:	2100      	movs	r1, #0
 800e8e8:	6878      	ldr	r0, [r7, #4]
 800e8ea:	f7ff fe61 	bl	800e5b0 <dir_next>
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e8f2:	7dfb      	ldrb	r3, [r7, #23]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d108      	bne.n	800e90a <dir_read+0xa2>
	while (dp->sect) {
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	69db      	ldr	r3, [r3, #28]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d1be      	bne.n	800e87e <dir_read+0x16>
 800e900:	e004      	b.n	800e90c <dir_read+0xa4>
		if (res != FR_OK) break;
 800e902:	bf00      	nop
 800e904:	e002      	b.n	800e90c <dir_read+0xa4>
				break;
 800e906:	bf00      	nop
 800e908:	e000      	b.n	800e90c <dir_read+0xa4>
		if (res != FR_OK) break;
 800e90a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800e90c:	7dfb      	ldrb	r3, [r7, #23]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d002      	beq.n	800e918 <dir_read+0xb0>
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2200      	movs	r2, #0
 800e916:	61da      	str	r2, [r3, #28]
	return res;
 800e918:	7dfb      	ldrb	r3, [r7, #23]
}
 800e91a:	4618      	mov	r0, r3
 800e91c:	3718      	adds	r7, #24
 800e91e:	46bd      	mov	sp, r7
 800e920:	bd80      	pop	{r7, pc}

0800e922 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e922:	b580      	push	{r7, lr}
 800e924:	b086      	sub	sp, #24
 800e926:	af00      	add	r7, sp, #0
 800e928:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e930:	2100      	movs	r1, #0
 800e932:	6878      	ldr	r0, [r7, #4]
 800e934:	f7ff fdb3 	bl	800e49e <dir_sdi>
 800e938:	4603      	mov	r3, r0
 800e93a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e93c:	7dfb      	ldrb	r3, [r7, #23]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d001      	beq.n	800e946 <dir_find+0x24>
 800e942:	7dfb      	ldrb	r3, [r7, #23]
 800e944:	e03e      	b.n	800e9c4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	69db      	ldr	r3, [r3, #28]
 800e94a:	4619      	mov	r1, r3
 800e94c:	6938      	ldr	r0, [r7, #16]
 800e94e:	f7ff f9cd 	bl	800dcec <move_window>
 800e952:	4603      	mov	r3, r0
 800e954:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e956:	7dfb      	ldrb	r3, [r7, #23]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d12f      	bne.n	800e9bc <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	6a1b      	ldr	r3, [r3, #32]
 800e960:	781b      	ldrb	r3, [r3, #0]
 800e962:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e964:	7bfb      	ldrb	r3, [r7, #15]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d102      	bne.n	800e970 <dir_find+0x4e>
 800e96a:	2304      	movs	r3, #4
 800e96c:	75fb      	strb	r3, [r7, #23]
 800e96e:	e028      	b.n	800e9c2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	6a1b      	ldr	r3, [r3, #32]
 800e974:	330b      	adds	r3, #11
 800e976:	781b      	ldrb	r3, [r3, #0]
 800e978:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e97c:	b2da      	uxtb	r2, r3
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	6a1b      	ldr	r3, [r3, #32]
 800e986:	330b      	adds	r3, #11
 800e988:	781b      	ldrb	r3, [r3, #0]
 800e98a:	f003 0308 	and.w	r3, r3, #8
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d10a      	bne.n	800e9a8 <dir_find+0x86>
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	6a18      	ldr	r0, [r3, #32]
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	3324      	adds	r3, #36	; 0x24
 800e99a:	220b      	movs	r2, #11
 800e99c:	4619      	mov	r1, r3
 800e99e:	f7fe ffb2 	bl	800d906 <mem_cmp>
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d00b      	beq.n	800e9c0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e9a8:	2100      	movs	r1, #0
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	f7ff fe00 	bl	800e5b0 <dir_next>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e9b4:	7dfb      	ldrb	r3, [r7, #23]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d0c5      	beq.n	800e946 <dir_find+0x24>
 800e9ba:	e002      	b.n	800e9c2 <dir_find+0xa0>
		if (res != FR_OK) break;
 800e9bc:	bf00      	nop
 800e9be:	e000      	b.n	800e9c2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e9c0:	bf00      	nop

	return res;
 800e9c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	3718      	adds	r7, #24
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd80      	pop	{r7, pc}

0800e9cc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b084      	sub	sp, #16
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800e9da:	2101      	movs	r1, #1
 800e9dc:	6878      	ldr	r0, [r7, #4]
 800e9de:	f7ff febd 	bl	800e75c <dir_alloc>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e9e6:	7bfb      	ldrb	r3, [r7, #15]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d11c      	bne.n	800ea26 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	69db      	ldr	r3, [r3, #28]
 800e9f0:	4619      	mov	r1, r3
 800e9f2:	68b8      	ldr	r0, [r7, #8]
 800e9f4:	f7ff f97a 	bl	800dcec <move_window>
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e9fc:	7bfb      	ldrb	r3, [r7, #15]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d111      	bne.n	800ea26 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	6a1b      	ldr	r3, [r3, #32]
 800ea06:	2220      	movs	r2, #32
 800ea08:	2100      	movs	r1, #0
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	f7fe ff61 	bl	800d8d2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	6a18      	ldr	r0, [r3, #32]
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	3324      	adds	r3, #36	; 0x24
 800ea18:	220b      	movs	r2, #11
 800ea1a:	4619      	mov	r1, r3
 800ea1c:	f7fe ff38 	bl	800d890 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ea20:	68bb      	ldr	r3, [r7, #8]
 800ea22:	2201      	movs	r2, #1
 800ea24:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ea26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea28:	4618      	mov	r0, r3
 800ea2a:	3710      	adds	r7, #16
 800ea2c:	46bd      	mov	sp, r7
 800ea2e:	bd80      	pop	{r7, pc}

0800ea30 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b086      	sub	sp, #24
 800ea34:	af00      	add	r7, sp, #0
 800ea36:	6078      	str	r0, [r7, #4]
 800ea38:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800ea3a:	683b      	ldr	r3, [r7, #0]
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	69db      	ldr	r3, [r3, #28]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d04e      	beq.n	800eae6 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800ea48:	2300      	movs	r3, #0
 800ea4a:	613b      	str	r3, [r7, #16]
 800ea4c:	693b      	ldr	r3, [r7, #16]
 800ea4e:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800ea50:	e021      	b.n	800ea96 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	6a1a      	ldr	r2, [r3, #32]
 800ea56:	697b      	ldr	r3, [r7, #20]
 800ea58:	1c59      	adds	r1, r3, #1
 800ea5a:	6179      	str	r1, [r7, #20]
 800ea5c:	4413      	add	r3, r2
 800ea5e:	781b      	ldrb	r3, [r3, #0]
 800ea60:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800ea62:	7bfb      	ldrb	r3, [r7, #15]
 800ea64:	2b20      	cmp	r3, #32
 800ea66:	d100      	bne.n	800ea6a <get_fileinfo+0x3a>
 800ea68:	e015      	b.n	800ea96 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800ea6a:	7bfb      	ldrb	r3, [r7, #15]
 800ea6c:	2b05      	cmp	r3, #5
 800ea6e:	d101      	bne.n	800ea74 <get_fileinfo+0x44>
 800ea70:	23e5      	movs	r3, #229	; 0xe5
 800ea72:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800ea74:	697b      	ldr	r3, [r7, #20]
 800ea76:	2b09      	cmp	r3, #9
 800ea78:	d106      	bne.n	800ea88 <get_fileinfo+0x58>
 800ea7a:	693b      	ldr	r3, [r7, #16]
 800ea7c:	1c5a      	adds	r2, r3, #1
 800ea7e:	613a      	str	r2, [r7, #16]
 800ea80:	683a      	ldr	r2, [r7, #0]
 800ea82:	4413      	add	r3, r2
 800ea84:	222e      	movs	r2, #46	; 0x2e
 800ea86:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800ea88:	693b      	ldr	r3, [r7, #16]
 800ea8a:	1c5a      	adds	r2, r3, #1
 800ea8c:	613a      	str	r2, [r7, #16]
 800ea8e:	683a      	ldr	r2, [r7, #0]
 800ea90:	4413      	add	r3, r2
 800ea92:	7bfa      	ldrb	r2, [r7, #15]
 800ea94:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800ea96:	697b      	ldr	r3, [r7, #20]
 800ea98:	2b0a      	cmp	r3, #10
 800ea9a:	d9da      	bls.n	800ea52 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800ea9c:	683a      	ldr	r2, [r7, #0]
 800ea9e:	693b      	ldr	r3, [r7, #16]
 800eaa0:	4413      	add	r3, r2
 800eaa2:	3309      	adds	r3, #9
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6a1b      	ldr	r3, [r3, #32]
 800eaac:	7ada      	ldrb	r2, [r3, #11]
 800eaae:	683b      	ldr	r3, [r7, #0]
 800eab0:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	6a1b      	ldr	r3, [r3, #32]
 800eab6:	331c      	adds	r3, #28
 800eab8:	4618      	mov	r0, r3
 800eaba:	f7fe fe7f 	bl	800d7bc <ld_dword>
 800eabe:	4602      	mov	r2, r0
 800eac0:	683b      	ldr	r3, [r7, #0]
 800eac2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	6a1b      	ldr	r3, [r3, #32]
 800eac8:	3316      	adds	r3, #22
 800eaca:	4618      	mov	r0, r3
 800eacc:	f7fe fe76 	bl	800d7bc <ld_dword>
 800ead0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	b29a      	uxth	r2, r3
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	80da      	strh	r2, [r3, #6]
 800eada:	68bb      	ldr	r3, [r7, #8]
 800eadc:	0c1b      	lsrs	r3, r3, #16
 800eade:	b29a      	uxth	r2, r3
 800eae0:	683b      	ldr	r3, [r7, #0]
 800eae2:	809a      	strh	r2, [r3, #4]
 800eae4:	e000      	b.n	800eae8 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800eae6:	bf00      	nop
}
 800eae8:	3718      	adds	r7, #24
 800eaea:	46bd      	mov	sp, r7
 800eaec:	bd80      	pop	{r7, pc}
	...

0800eaf0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b088      	sub	sp, #32
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
 800eaf8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	60fb      	str	r3, [r7, #12]
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	3324      	adds	r3, #36	; 0x24
 800eb04:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800eb06:	220b      	movs	r2, #11
 800eb08:	2120      	movs	r1, #32
 800eb0a:	68b8      	ldr	r0, [r7, #8]
 800eb0c:	f7fe fee1 	bl	800d8d2 <mem_set>
	si = i = 0; ni = 8;
 800eb10:	2300      	movs	r3, #0
 800eb12:	613b      	str	r3, [r7, #16]
 800eb14:	693b      	ldr	r3, [r7, #16]
 800eb16:	617b      	str	r3, [r7, #20]
 800eb18:	2308      	movs	r3, #8
 800eb1a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800eb1c:	697b      	ldr	r3, [r7, #20]
 800eb1e:	1c5a      	adds	r2, r3, #1
 800eb20:	617a      	str	r2, [r7, #20]
 800eb22:	68fa      	ldr	r2, [r7, #12]
 800eb24:	4413      	add	r3, r2
 800eb26:	781b      	ldrb	r3, [r3, #0]
 800eb28:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800eb2a:	7ffb      	ldrb	r3, [r7, #31]
 800eb2c:	2b20      	cmp	r3, #32
 800eb2e:	d94e      	bls.n	800ebce <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800eb30:	7ffb      	ldrb	r3, [r7, #31]
 800eb32:	2b2f      	cmp	r3, #47	; 0x2f
 800eb34:	d006      	beq.n	800eb44 <create_name+0x54>
 800eb36:	7ffb      	ldrb	r3, [r7, #31]
 800eb38:	2b5c      	cmp	r3, #92	; 0x5c
 800eb3a:	d110      	bne.n	800eb5e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800eb3c:	e002      	b.n	800eb44 <create_name+0x54>
 800eb3e:	697b      	ldr	r3, [r7, #20]
 800eb40:	3301      	adds	r3, #1
 800eb42:	617b      	str	r3, [r7, #20]
 800eb44:	68fa      	ldr	r2, [r7, #12]
 800eb46:	697b      	ldr	r3, [r7, #20]
 800eb48:	4413      	add	r3, r2
 800eb4a:	781b      	ldrb	r3, [r3, #0]
 800eb4c:	2b2f      	cmp	r3, #47	; 0x2f
 800eb4e:	d0f6      	beq.n	800eb3e <create_name+0x4e>
 800eb50:	68fa      	ldr	r2, [r7, #12]
 800eb52:	697b      	ldr	r3, [r7, #20]
 800eb54:	4413      	add	r3, r2
 800eb56:	781b      	ldrb	r3, [r3, #0]
 800eb58:	2b5c      	cmp	r3, #92	; 0x5c
 800eb5a:	d0f0      	beq.n	800eb3e <create_name+0x4e>
			break;
 800eb5c:	e038      	b.n	800ebd0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800eb5e:	7ffb      	ldrb	r3, [r7, #31]
 800eb60:	2b2e      	cmp	r3, #46	; 0x2e
 800eb62:	d003      	beq.n	800eb6c <create_name+0x7c>
 800eb64:	693a      	ldr	r2, [r7, #16]
 800eb66:	69bb      	ldr	r3, [r7, #24]
 800eb68:	429a      	cmp	r2, r3
 800eb6a:	d30c      	bcc.n	800eb86 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800eb6c:	69bb      	ldr	r3, [r7, #24]
 800eb6e:	2b0b      	cmp	r3, #11
 800eb70:	d002      	beq.n	800eb78 <create_name+0x88>
 800eb72:	7ffb      	ldrb	r3, [r7, #31]
 800eb74:	2b2e      	cmp	r3, #46	; 0x2e
 800eb76:	d001      	beq.n	800eb7c <create_name+0x8c>
 800eb78:	2306      	movs	r3, #6
 800eb7a:	e044      	b.n	800ec06 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800eb7c:	2308      	movs	r3, #8
 800eb7e:	613b      	str	r3, [r7, #16]
 800eb80:	230b      	movs	r3, #11
 800eb82:	61bb      	str	r3, [r7, #24]
			continue;
 800eb84:	e022      	b.n	800ebcc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800eb86:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	da04      	bge.n	800eb98 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800eb8e:	7ffb      	ldrb	r3, [r7, #31]
 800eb90:	3b80      	subs	r3, #128	; 0x80
 800eb92:	4a1f      	ldr	r2, [pc, #124]	; (800ec10 <create_name+0x120>)
 800eb94:	5cd3      	ldrb	r3, [r2, r3]
 800eb96:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800eb98:	7ffb      	ldrb	r3, [r7, #31]
 800eb9a:	4619      	mov	r1, r3
 800eb9c:	481d      	ldr	r0, [pc, #116]	; (800ec14 <create_name+0x124>)
 800eb9e:	f7fe fed9 	bl	800d954 <chk_chr>
 800eba2:	4603      	mov	r3, r0
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d001      	beq.n	800ebac <create_name+0xbc>
 800eba8:	2306      	movs	r3, #6
 800ebaa:	e02c      	b.n	800ec06 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800ebac:	7ffb      	ldrb	r3, [r7, #31]
 800ebae:	2b60      	cmp	r3, #96	; 0x60
 800ebb0:	d905      	bls.n	800ebbe <create_name+0xce>
 800ebb2:	7ffb      	ldrb	r3, [r7, #31]
 800ebb4:	2b7a      	cmp	r3, #122	; 0x7a
 800ebb6:	d802      	bhi.n	800ebbe <create_name+0xce>
 800ebb8:	7ffb      	ldrb	r3, [r7, #31]
 800ebba:	3b20      	subs	r3, #32
 800ebbc:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800ebbe:	693b      	ldr	r3, [r7, #16]
 800ebc0:	1c5a      	adds	r2, r3, #1
 800ebc2:	613a      	str	r2, [r7, #16]
 800ebc4:	68ba      	ldr	r2, [r7, #8]
 800ebc6:	4413      	add	r3, r2
 800ebc8:	7ffa      	ldrb	r2, [r7, #31]
 800ebca:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ebcc:	e7a6      	b.n	800eb1c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ebce:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800ebd0:	68fa      	ldr	r2, [r7, #12]
 800ebd2:	697b      	ldr	r3, [r7, #20]
 800ebd4:	441a      	add	r2, r3
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ebda:	693b      	ldr	r3, [r7, #16]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d101      	bne.n	800ebe4 <create_name+0xf4>
 800ebe0:	2306      	movs	r3, #6
 800ebe2:	e010      	b.n	800ec06 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ebe4:	68bb      	ldr	r3, [r7, #8]
 800ebe6:	781b      	ldrb	r3, [r3, #0]
 800ebe8:	2be5      	cmp	r3, #229	; 0xe5
 800ebea:	d102      	bne.n	800ebf2 <create_name+0x102>
 800ebec:	68bb      	ldr	r3, [r7, #8]
 800ebee:	2205      	movs	r2, #5
 800ebf0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ebf2:	7ffb      	ldrb	r3, [r7, #31]
 800ebf4:	2b20      	cmp	r3, #32
 800ebf6:	d801      	bhi.n	800ebfc <create_name+0x10c>
 800ebf8:	2204      	movs	r2, #4
 800ebfa:	e000      	b.n	800ebfe <create_name+0x10e>
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	68bb      	ldr	r3, [r7, #8]
 800ec00:	330b      	adds	r3, #11
 800ec02:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ec04:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800ec06:	4618      	mov	r0, r3
 800ec08:	3720      	adds	r7, #32
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}
 800ec0e:	bf00      	nop
 800ec10:	08015120 	.word	0x08015120
 800ec14:	080150a8 	.word	0x080150a8

0800ec18 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b086      	sub	sp, #24
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
 800ec20:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ec26:	693b      	ldr	r3, [r7, #16]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ec2c:	e002      	b.n	800ec34 <follow_path+0x1c>
 800ec2e:	683b      	ldr	r3, [r7, #0]
 800ec30:	3301      	adds	r3, #1
 800ec32:	603b      	str	r3, [r7, #0]
 800ec34:	683b      	ldr	r3, [r7, #0]
 800ec36:	781b      	ldrb	r3, [r3, #0]
 800ec38:	2b2f      	cmp	r3, #47	; 0x2f
 800ec3a:	d0f8      	beq.n	800ec2e <follow_path+0x16>
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	781b      	ldrb	r3, [r3, #0]
 800ec40:	2b5c      	cmp	r3, #92	; 0x5c
 800ec42:	d0f4      	beq.n	800ec2e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ec44:	693b      	ldr	r3, [r7, #16]
 800ec46:	2200      	movs	r2, #0
 800ec48:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ec4a:	683b      	ldr	r3, [r7, #0]
 800ec4c:	781b      	ldrb	r3, [r3, #0]
 800ec4e:	2b1f      	cmp	r3, #31
 800ec50:	d80a      	bhi.n	800ec68 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	2280      	movs	r2, #128	; 0x80
 800ec56:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ec5a:	2100      	movs	r1, #0
 800ec5c:	6878      	ldr	r0, [r7, #4]
 800ec5e:	f7ff fc1e 	bl	800e49e <dir_sdi>
 800ec62:	4603      	mov	r3, r0
 800ec64:	75fb      	strb	r3, [r7, #23]
 800ec66:	e048      	b.n	800ecfa <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ec68:	463b      	mov	r3, r7
 800ec6a:	4619      	mov	r1, r3
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	f7ff ff3f 	bl	800eaf0 <create_name>
 800ec72:	4603      	mov	r3, r0
 800ec74:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ec76:	7dfb      	ldrb	r3, [r7, #23]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d139      	bne.n	800ecf0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ec7c:	6878      	ldr	r0, [r7, #4]
 800ec7e:	f7ff fe50 	bl	800e922 <dir_find>
 800ec82:	4603      	mov	r3, r0
 800ec84:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ec8c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ec8e:	7dfb      	ldrb	r3, [r7, #23]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d00a      	beq.n	800ecaa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ec94:	7dfb      	ldrb	r3, [r7, #23]
 800ec96:	2b04      	cmp	r3, #4
 800ec98:	d12c      	bne.n	800ecf4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ec9a:	7afb      	ldrb	r3, [r7, #11]
 800ec9c:	f003 0304 	and.w	r3, r3, #4
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d127      	bne.n	800ecf4 <follow_path+0xdc>
 800eca4:	2305      	movs	r3, #5
 800eca6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800eca8:	e024      	b.n	800ecf4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ecaa:	7afb      	ldrb	r3, [r7, #11]
 800ecac:	f003 0304 	and.w	r3, r3, #4
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d121      	bne.n	800ecf8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ecb4:	693b      	ldr	r3, [r7, #16]
 800ecb6:	799b      	ldrb	r3, [r3, #6]
 800ecb8:	f003 0310 	and.w	r3, r3, #16
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d102      	bne.n	800ecc6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ecc0:	2305      	movs	r3, #5
 800ecc2:	75fb      	strb	r3, [r7, #23]
 800ecc4:	e019      	b.n	800ecfa <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	695b      	ldr	r3, [r3, #20]
 800ecd0:	68fa      	ldr	r2, [r7, #12]
 800ecd2:	8992      	ldrh	r2, [r2, #12]
 800ecd4:	fbb3 f0f2 	udiv	r0, r3, r2
 800ecd8:	fb02 f200 	mul.w	r2, r2, r0
 800ecdc:	1a9b      	subs	r3, r3, r2
 800ecde:	440b      	add	r3, r1
 800ece0:	4619      	mov	r1, r3
 800ece2:	68f8      	ldr	r0, [r7, #12]
 800ece4:	f7ff fd81 	bl	800e7ea <ld_clust>
 800ece8:	4602      	mov	r2, r0
 800ecea:	693b      	ldr	r3, [r7, #16]
 800ecec:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ecee:	e7bb      	b.n	800ec68 <follow_path+0x50>
			if (res != FR_OK) break;
 800ecf0:	bf00      	nop
 800ecf2:	e002      	b.n	800ecfa <follow_path+0xe2>
				break;
 800ecf4:	bf00      	nop
 800ecf6:	e000      	b.n	800ecfa <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ecf8:	bf00      	nop
			}
		}
	}

	return res;
 800ecfa:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	3718      	adds	r7, #24
 800ed00:	46bd      	mov	sp, r7
 800ed02:	bd80      	pop	{r7, pc}

0800ed04 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ed04:	b480      	push	{r7}
 800ed06:	b087      	sub	sp, #28
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ed0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed10:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d031      	beq.n	800ed7e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	617b      	str	r3, [r7, #20]
 800ed20:	e002      	b.n	800ed28 <get_ldnumber+0x24>
 800ed22:	697b      	ldr	r3, [r7, #20]
 800ed24:	3301      	adds	r3, #1
 800ed26:	617b      	str	r3, [r7, #20]
 800ed28:	697b      	ldr	r3, [r7, #20]
 800ed2a:	781b      	ldrb	r3, [r3, #0]
 800ed2c:	2b20      	cmp	r3, #32
 800ed2e:	d903      	bls.n	800ed38 <get_ldnumber+0x34>
 800ed30:	697b      	ldr	r3, [r7, #20]
 800ed32:	781b      	ldrb	r3, [r3, #0]
 800ed34:	2b3a      	cmp	r3, #58	; 0x3a
 800ed36:	d1f4      	bne.n	800ed22 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ed38:	697b      	ldr	r3, [r7, #20]
 800ed3a:	781b      	ldrb	r3, [r3, #0]
 800ed3c:	2b3a      	cmp	r3, #58	; 0x3a
 800ed3e:	d11c      	bne.n	800ed7a <get_ldnumber+0x76>
			tp = *path;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	1c5a      	adds	r2, r3, #1
 800ed4a:	60fa      	str	r2, [r7, #12]
 800ed4c:	781b      	ldrb	r3, [r3, #0]
 800ed4e:	3b30      	subs	r3, #48	; 0x30
 800ed50:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	2b09      	cmp	r3, #9
 800ed56:	d80e      	bhi.n	800ed76 <get_ldnumber+0x72>
 800ed58:	68fa      	ldr	r2, [r7, #12]
 800ed5a:	697b      	ldr	r3, [r7, #20]
 800ed5c:	429a      	cmp	r2, r3
 800ed5e:	d10a      	bne.n	800ed76 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ed60:	68bb      	ldr	r3, [r7, #8]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d107      	bne.n	800ed76 <get_ldnumber+0x72>
					vol = (int)i;
 800ed66:	68bb      	ldr	r3, [r7, #8]
 800ed68:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ed6a:	697b      	ldr	r3, [r7, #20]
 800ed6c:	3301      	adds	r3, #1
 800ed6e:	617b      	str	r3, [r7, #20]
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	697a      	ldr	r2, [r7, #20]
 800ed74:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ed76:	693b      	ldr	r3, [r7, #16]
 800ed78:	e002      	b.n	800ed80 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ed7e:	693b      	ldr	r3, [r7, #16]
}
 800ed80:	4618      	mov	r0, r3
 800ed82:	371c      	adds	r7, #28
 800ed84:	46bd      	mov	sp, r7
 800ed86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8a:	4770      	bx	lr

0800ed8c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b082      	sub	sp, #8
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
 800ed94:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	2200      	movs	r2, #0
 800ed9a:	70da      	strb	r2, [r3, #3]
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eda2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800eda4:	6839      	ldr	r1, [r7, #0]
 800eda6:	6878      	ldr	r0, [r7, #4]
 800eda8:	f7fe ffa0 	bl	800dcec <move_window>
 800edac:	4603      	mov	r3, r0
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d001      	beq.n	800edb6 <check_fs+0x2a>
 800edb2:	2304      	movs	r3, #4
 800edb4:	e038      	b.n	800ee28 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	3334      	adds	r3, #52	; 0x34
 800edba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800edbe:	4618      	mov	r0, r3
 800edc0:	f7fe fce4 	bl	800d78c <ld_word>
 800edc4:	4603      	mov	r3, r0
 800edc6:	461a      	mov	r2, r3
 800edc8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800edcc:	429a      	cmp	r2, r3
 800edce:	d001      	beq.n	800edd4 <check_fs+0x48>
 800edd0:	2303      	movs	r3, #3
 800edd2:	e029      	b.n	800ee28 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800edda:	2be9      	cmp	r3, #233	; 0xe9
 800eddc:	d009      	beq.n	800edf2 <check_fs+0x66>
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ede4:	2beb      	cmp	r3, #235	; 0xeb
 800ede6:	d11e      	bne.n	800ee26 <check_fs+0x9a>
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800edee:	2b90      	cmp	r3, #144	; 0x90
 800edf0:	d119      	bne.n	800ee26 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	3334      	adds	r3, #52	; 0x34
 800edf6:	3336      	adds	r3, #54	; 0x36
 800edf8:	4618      	mov	r0, r3
 800edfa:	f7fe fcdf 	bl	800d7bc <ld_dword>
 800edfe:	4603      	mov	r3, r0
 800ee00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ee04:	4a0a      	ldr	r2, [pc, #40]	; (800ee30 <check_fs+0xa4>)
 800ee06:	4293      	cmp	r3, r2
 800ee08:	d101      	bne.n	800ee0e <check_fs+0x82>
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	e00c      	b.n	800ee28 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	3334      	adds	r3, #52	; 0x34
 800ee12:	3352      	adds	r3, #82	; 0x52
 800ee14:	4618      	mov	r0, r3
 800ee16:	f7fe fcd1 	bl	800d7bc <ld_dword>
 800ee1a:	4602      	mov	r2, r0
 800ee1c:	4b05      	ldr	r3, [pc, #20]	; (800ee34 <check_fs+0xa8>)
 800ee1e:	429a      	cmp	r2, r3
 800ee20:	d101      	bne.n	800ee26 <check_fs+0x9a>
 800ee22:	2300      	movs	r3, #0
 800ee24:	e000      	b.n	800ee28 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ee26:	2302      	movs	r3, #2
}
 800ee28:	4618      	mov	r0, r3
 800ee2a:	3708      	adds	r7, #8
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	bd80      	pop	{r7, pc}
 800ee30:	00544146 	.word	0x00544146
 800ee34:	33544146 	.word	0x33544146

0800ee38 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b096      	sub	sp, #88	; 0x58
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	60f8      	str	r0, [r7, #12]
 800ee40:	60b9      	str	r1, [r7, #8]
 800ee42:	4613      	mov	r3, r2
 800ee44:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ee46:	68bb      	ldr	r3, [r7, #8]
 800ee48:	2200      	movs	r2, #0
 800ee4a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ee4c:	68f8      	ldr	r0, [r7, #12]
 800ee4e:	f7ff ff59 	bl	800ed04 <get_ldnumber>
 800ee52:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ee54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	da01      	bge.n	800ee5e <find_volume+0x26>
 800ee5a:	230b      	movs	r3, #11
 800ee5c:	e265      	b.n	800f32a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ee5e:	4ab0      	ldr	r2, [pc, #704]	; (800f120 <find_volume+0x2e8>)
 800ee60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee66:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ee68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d101      	bne.n	800ee72 <find_volume+0x3a>
 800ee6e:	230c      	movs	r3, #12
 800ee70:	e25b      	b.n	800f32a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ee72:	68bb      	ldr	r3, [r7, #8]
 800ee74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee76:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ee78:	79fb      	ldrb	r3, [r7, #7]
 800ee7a:	f023 0301 	bic.w	r3, r3, #1
 800ee7e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ee80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee82:	781b      	ldrb	r3, [r3, #0]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d01a      	beq.n	800eebe <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ee88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee8a:	785b      	ldrb	r3, [r3, #1]
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f7fe fbdf 	bl	800d650 <disk_status>
 800ee92:	4603      	mov	r3, r0
 800ee94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ee98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ee9c:	f003 0301 	and.w	r3, r3, #1
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d10c      	bne.n	800eebe <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800eea4:	79fb      	ldrb	r3, [r7, #7]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d007      	beq.n	800eeba <find_volume+0x82>
 800eeaa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eeae:	f003 0304 	and.w	r3, r3, #4
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d001      	beq.n	800eeba <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800eeb6:	230a      	movs	r3, #10
 800eeb8:	e237      	b.n	800f32a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800eeba:	2300      	movs	r3, #0
 800eebc:	e235      	b.n	800f32a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800eebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eec0:	2200      	movs	r2, #0
 800eec2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800eec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eec6:	b2da      	uxtb	r2, r3
 800eec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeca:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800eecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eece:	785b      	ldrb	r3, [r3, #1]
 800eed0:	4618      	mov	r0, r3
 800eed2:	f7fe fbd7 	bl	800d684 <disk_initialize>
 800eed6:	4603      	mov	r3, r0
 800eed8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800eedc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eee0:	f003 0301 	and.w	r3, r3, #1
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d001      	beq.n	800eeec <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800eee8:	2303      	movs	r3, #3
 800eeea:	e21e      	b.n	800f32a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800eeec:	79fb      	ldrb	r3, [r7, #7]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d007      	beq.n	800ef02 <find_volume+0xca>
 800eef2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eef6:	f003 0304 	and.w	r3, r3, #4
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d001      	beq.n	800ef02 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800eefe:	230a      	movs	r3, #10
 800ef00:	e213      	b.n	800f32a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800ef02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef04:	7858      	ldrb	r0, [r3, #1]
 800ef06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef08:	330c      	adds	r3, #12
 800ef0a:	461a      	mov	r2, r3
 800ef0c:	2102      	movs	r1, #2
 800ef0e:	f7fe fc1f 	bl	800d750 <disk_ioctl>
 800ef12:	4603      	mov	r3, r0
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d001      	beq.n	800ef1c <find_volume+0xe4>
 800ef18:	2301      	movs	r3, #1
 800ef1a:	e206      	b.n	800f32a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800ef1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef1e:	899b      	ldrh	r3, [r3, #12]
 800ef20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef24:	d80d      	bhi.n	800ef42 <find_volume+0x10a>
 800ef26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef28:	899b      	ldrh	r3, [r3, #12]
 800ef2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef2e:	d308      	bcc.n	800ef42 <find_volume+0x10a>
 800ef30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef32:	899b      	ldrh	r3, [r3, #12]
 800ef34:	461a      	mov	r2, r3
 800ef36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef38:	899b      	ldrh	r3, [r3, #12]
 800ef3a:	3b01      	subs	r3, #1
 800ef3c:	4013      	ands	r3, r2
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d001      	beq.n	800ef46 <find_volume+0x10e>
 800ef42:	2301      	movs	r3, #1
 800ef44:	e1f1      	b.n	800f32a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ef46:	2300      	movs	r3, #0
 800ef48:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ef4a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ef4c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ef4e:	f7ff ff1d 	bl	800ed8c <check_fs>
 800ef52:	4603      	mov	r3, r0
 800ef54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ef58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ef5c:	2b02      	cmp	r3, #2
 800ef5e:	d14b      	bne.n	800eff8 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ef60:	2300      	movs	r3, #0
 800ef62:	643b      	str	r3, [r7, #64]	; 0x40
 800ef64:	e01f      	b.n	800efa6 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ef66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef68:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ef6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef6e:	011b      	lsls	r3, r3, #4
 800ef70:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ef74:	4413      	add	r3, r2
 800ef76:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ef78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef7a:	3304      	adds	r3, #4
 800ef7c:	781b      	ldrb	r3, [r3, #0]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d006      	beq.n	800ef90 <find_volume+0x158>
 800ef82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef84:	3308      	adds	r3, #8
 800ef86:	4618      	mov	r0, r3
 800ef88:	f7fe fc18 	bl	800d7bc <ld_dword>
 800ef8c:	4602      	mov	r2, r0
 800ef8e:	e000      	b.n	800ef92 <find_volume+0x15a>
 800ef90:	2200      	movs	r2, #0
 800ef92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef94:	009b      	lsls	r3, r3, #2
 800ef96:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ef9a:	440b      	add	r3, r1
 800ef9c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800efa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efa2:	3301      	adds	r3, #1
 800efa4:	643b      	str	r3, [r7, #64]	; 0x40
 800efa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efa8:	2b03      	cmp	r3, #3
 800efaa:	d9dc      	bls.n	800ef66 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800efac:	2300      	movs	r3, #0
 800efae:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800efb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d002      	beq.n	800efbc <find_volume+0x184>
 800efb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efb8:	3b01      	subs	r3, #1
 800efba:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800efbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efbe:	009b      	lsls	r3, r3, #2
 800efc0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800efc4:	4413      	add	r3, r2
 800efc6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800efca:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800efcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d005      	beq.n	800efde <find_volume+0x1a6>
 800efd2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800efd4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800efd6:	f7ff fed9 	bl	800ed8c <check_fs>
 800efda:	4603      	mov	r3, r0
 800efdc:	e000      	b.n	800efe0 <find_volume+0x1a8>
 800efde:	2303      	movs	r3, #3
 800efe0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800efe4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800efe8:	2b01      	cmp	r3, #1
 800efea:	d905      	bls.n	800eff8 <find_volume+0x1c0>
 800efec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efee:	3301      	adds	r3, #1
 800eff0:	643b      	str	r3, [r7, #64]	; 0x40
 800eff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eff4:	2b03      	cmp	r3, #3
 800eff6:	d9e1      	bls.n	800efbc <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800eff8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800effc:	2b04      	cmp	r3, #4
 800effe:	d101      	bne.n	800f004 <find_volume+0x1cc>
 800f000:	2301      	movs	r3, #1
 800f002:	e192      	b.n	800f32a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f004:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f008:	2b01      	cmp	r3, #1
 800f00a:	d901      	bls.n	800f010 <find_volume+0x1d8>
 800f00c:	230d      	movs	r3, #13
 800f00e:	e18c      	b.n	800f32a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f012:	3334      	adds	r3, #52	; 0x34
 800f014:	330b      	adds	r3, #11
 800f016:	4618      	mov	r0, r3
 800f018:	f7fe fbb8 	bl	800d78c <ld_word>
 800f01c:	4603      	mov	r3, r0
 800f01e:	461a      	mov	r2, r3
 800f020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f022:	899b      	ldrh	r3, [r3, #12]
 800f024:	429a      	cmp	r2, r3
 800f026:	d001      	beq.n	800f02c <find_volume+0x1f4>
 800f028:	230d      	movs	r3, #13
 800f02a:	e17e      	b.n	800f32a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f02e:	3334      	adds	r3, #52	; 0x34
 800f030:	3316      	adds	r3, #22
 800f032:	4618      	mov	r0, r3
 800f034:	f7fe fbaa 	bl	800d78c <ld_word>
 800f038:	4603      	mov	r3, r0
 800f03a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f03c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d106      	bne.n	800f050 <find_volume+0x218>
 800f042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f044:	3334      	adds	r3, #52	; 0x34
 800f046:	3324      	adds	r3, #36	; 0x24
 800f048:	4618      	mov	r0, r3
 800f04a:	f7fe fbb7 	bl	800d7bc <ld_dword>
 800f04e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800f050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f052:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f054:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f058:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800f05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f05e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f062:	789b      	ldrb	r3, [r3, #2]
 800f064:	2b01      	cmp	r3, #1
 800f066:	d005      	beq.n	800f074 <find_volume+0x23c>
 800f068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f06a:	789b      	ldrb	r3, [r3, #2]
 800f06c:	2b02      	cmp	r3, #2
 800f06e:	d001      	beq.n	800f074 <find_volume+0x23c>
 800f070:	230d      	movs	r3, #13
 800f072:	e15a      	b.n	800f32a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f076:	789b      	ldrb	r3, [r3, #2]
 800f078:	461a      	mov	r2, r3
 800f07a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f07c:	fb02 f303 	mul.w	r3, r2, r3
 800f080:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f084:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f088:	b29a      	uxth	r2, r3
 800f08a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f08c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f090:	895b      	ldrh	r3, [r3, #10]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d008      	beq.n	800f0a8 <find_volume+0x270>
 800f096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f098:	895b      	ldrh	r3, [r3, #10]
 800f09a:	461a      	mov	r2, r3
 800f09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f09e:	895b      	ldrh	r3, [r3, #10]
 800f0a0:	3b01      	subs	r3, #1
 800f0a2:	4013      	ands	r3, r2
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d001      	beq.n	800f0ac <find_volume+0x274>
 800f0a8:	230d      	movs	r3, #13
 800f0aa:	e13e      	b.n	800f32a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ae:	3334      	adds	r3, #52	; 0x34
 800f0b0:	3311      	adds	r3, #17
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	f7fe fb6a 	bl	800d78c <ld_word>
 800f0b8:	4603      	mov	r3, r0
 800f0ba:	461a      	mov	r2, r3
 800f0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0be:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0c2:	891b      	ldrh	r3, [r3, #8]
 800f0c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f0c6:	8992      	ldrh	r2, [r2, #12]
 800f0c8:	0952      	lsrs	r2, r2, #5
 800f0ca:	b292      	uxth	r2, r2
 800f0cc:	fbb3 f1f2 	udiv	r1, r3, r2
 800f0d0:	fb02 f201 	mul.w	r2, r2, r1
 800f0d4:	1a9b      	subs	r3, r3, r2
 800f0d6:	b29b      	uxth	r3, r3
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d001      	beq.n	800f0e0 <find_volume+0x2a8>
 800f0dc:	230d      	movs	r3, #13
 800f0de:	e124      	b.n	800f32a <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0e2:	3334      	adds	r3, #52	; 0x34
 800f0e4:	3313      	adds	r3, #19
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	f7fe fb50 	bl	800d78c <ld_word>
 800f0ec:	4603      	mov	r3, r0
 800f0ee:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f0f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d106      	bne.n	800f104 <find_volume+0x2cc>
 800f0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0f8:	3334      	adds	r3, #52	; 0x34
 800f0fa:	3320      	adds	r3, #32
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f7fe fb5d 	bl	800d7bc <ld_dword>
 800f102:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f106:	3334      	adds	r3, #52	; 0x34
 800f108:	330e      	adds	r3, #14
 800f10a:	4618      	mov	r0, r3
 800f10c:	f7fe fb3e 	bl	800d78c <ld_word>
 800f110:	4603      	mov	r3, r0
 800f112:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f114:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f116:	2b00      	cmp	r3, #0
 800f118:	d104      	bne.n	800f124 <find_volume+0x2ec>
 800f11a:	230d      	movs	r3, #13
 800f11c:	e105      	b.n	800f32a <find_volume+0x4f2>
 800f11e:	bf00      	nop
 800f120:	2000083c 	.word	0x2000083c

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f124:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f128:	4413      	add	r3, r2
 800f12a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f12c:	8911      	ldrh	r1, [r2, #8]
 800f12e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f130:	8992      	ldrh	r2, [r2, #12]
 800f132:	0952      	lsrs	r2, r2, #5
 800f134:	b292      	uxth	r2, r2
 800f136:	fbb1 f2f2 	udiv	r2, r1, r2
 800f13a:	b292      	uxth	r2, r2
 800f13c:	4413      	add	r3, r2
 800f13e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f140:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f144:	429a      	cmp	r2, r3
 800f146:	d201      	bcs.n	800f14c <find_volume+0x314>
 800f148:	230d      	movs	r3, #13
 800f14a:	e0ee      	b.n	800f32a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f14c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f150:	1ad3      	subs	r3, r2, r3
 800f152:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f154:	8952      	ldrh	r2, [r2, #10]
 800f156:	fbb3 f3f2 	udiv	r3, r3, r2
 800f15a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d101      	bne.n	800f166 <find_volume+0x32e>
 800f162:	230d      	movs	r3, #13
 800f164:	e0e1      	b.n	800f32a <find_volume+0x4f2>
		fmt = FS_FAT32;
 800f166:	2303      	movs	r3, #3
 800f168:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f16e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f172:	4293      	cmp	r3, r2
 800f174:	d802      	bhi.n	800f17c <find_volume+0x344>
 800f176:	2302      	movs	r3, #2
 800f178:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f17e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f182:	4293      	cmp	r3, r2
 800f184:	d802      	bhi.n	800f18c <find_volume+0x354>
 800f186:	2301      	movs	r3, #1
 800f188:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f18e:	1c9a      	adds	r2, r3, #2
 800f190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f192:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800f194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f196:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f198:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f19a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f19c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f19e:	441a      	add	r2, r3
 800f1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1a2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800f1a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1a8:	441a      	add	r2, r3
 800f1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ac:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800f1ae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f1b2:	2b03      	cmp	r3, #3
 800f1b4:	d11e      	bne.n	800f1f4 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1b8:	3334      	adds	r3, #52	; 0x34
 800f1ba:	332a      	adds	r3, #42	; 0x2a
 800f1bc:	4618      	mov	r0, r3
 800f1be:	f7fe fae5 	bl	800d78c <ld_word>
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d001      	beq.n	800f1cc <find_volume+0x394>
 800f1c8:	230d      	movs	r3, #13
 800f1ca:	e0ae      	b.n	800f32a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ce:	891b      	ldrh	r3, [r3, #8]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d001      	beq.n	800f1d8 <find_volume+0x3a0>
 800f1d4:	230d      	movs	r3, #13
 800f1d6:	e0a8      	b.n	800f32a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1da:	3334      	adds	r3, #52	; 0x34
 800f1dc:	332c      	adds	r3, #44	; 0x2c
 800f1de:	4618      	mov	r0, r3
 800f1e0:	f7fe faec 	bl	800d7bc <ld_dword>
 800f1e4:	4602      	mov	r2, r0
 800f1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1e8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ec:	699b      	ldr	r3, [r3, #24]
 800f1ee:	009b      	lsls	r3, r3, #2
 800f1f0:	647b      	str	r3, [r7, #68]	; 0x44
 800f1f2:	e01f      	b.n	800f234 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1f6:	891b      	ldrh	r3, [r3, #8]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d101      	bne.n	800f200 <find_volume+0x3c8>
 800f1fc:	230d      	movs	r3, #13
 800f1fe:	e094      	b.n	800f32a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f202:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f206:	441a      	add	r2, r3
 800f208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f20a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f20c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f210:	2b02      	cmp	r3, #2
 800f212:	d103      	bne.n	800f21c <find_volume+0x3e4>
 800f214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f216:	699b      	ldr	r3, [r3, #24]
 800f218:	005b      	lsls	r3, r3, #1
 800f21a:	e00a      	b.n	800f232 <find_volume+0x3fa>
 800f21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f21e:	699a      	ldr	r2, [r3, #24]
 800f220:	4613      	mov	r3, r2
 800f222:	005b      	lsls	r3, r3, #1
 800f224:	4413      	add	r3, r2
 800f226:	085a      	lsrs	r2, r3, #1
 800f228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f22a:	699b      	ldr	r3, [r3, #24]
 800f22c:	f003 0301 	and.w	r3, r3, #1
 800f230:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f232:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f236:	69da      	ldr	r2, [r3, #28]
 800f238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f23a:	899b      	ldrh	r3, [r3, #12]
 800f23c:	4619      	mov	r1, r3
 800f23e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f240:	440b      	add	r3, r1
 800f242:	3b01      	subs	r3, #1
 800f244:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f246:	8989      	ldrh	r1, [r1, #12]
 800f248:	fbb3 f3f1 	udiv	r3, r3, r1
 800f24c:	429a      	cmp	r2, r3
 800f24e:	d201      	bcs.n	800f254 <find_volume+0x41c>
 800f250:	230d      	movs	r3, #13
 800f252:	e06a      	b.n	800f32a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f256:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f25a:	615a      	str	r2, [r3, #20]
 800f25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f25e:	695a      	ldr	r2, [r3, #20]
 800f260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f262:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800f264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f266:	2280      	movs	r2, #128	; 0x80
 800f268:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f26a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f26e:	2b03      	cmp	r3, #3
 800f270:	d149      	bne.n	800f306 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f274:	3334      	adds	r3, #52	; 0x34
 800f276:	3330      	adds	r3, #48	; 0x30
 800f278:	4618      	mov	r0, r3
 800f27a:	f7fe fa87 	bl	800d78c <ld_word>
 800f27e:	4603      	mov	r3, r0
 800f280:	2b01      	cmp	r3, #1
 800f282:	d140      	bne.n	800f306 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f284:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f286:	3301      	adds	r3, #1
 800f288:	4619      	mov	r1, r3
 800f28a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f28c:	f7fe fd2e 	bl	800dcec <move_window>
 800f290:	4603      	mov	r3, r0
 800f292:	2b00      	cmp	r3, #0
 800f294:	d137      	bne.n	800f306 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800f296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f298:	2200      	movs	r2, #0
 800f29a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f29e:	3334      	adds	r3, #52	; 0x34
 800f2a0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	f7fe fa71 	bl	800d78c <ld_word>
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	461a      	mov	r2, r3
 800f2ae:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f2b2:	429a      	cmp	r2, r3
 800f2b4:	d127      	bne.n	800f306 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f2b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2b8:	3334      	adds	r3, #52	; 0x34
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	f7fe fa7e 	bl	800d7bc <ld_dword>
 800f2c0:	4602      	mov	r2, r0
 800f2c2:	4b1c      	ldr	r3, [pc, #112]	; (800f334 <find_volume+0x4fc>)
 800f2c4:	429a      	cmp	r2, r3
 800f2c6:	d11e      	bne.n	800f306 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2ca:	3334      	adds	r3, #52	; 0x34
 800f2cc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	f7fe fa73 	bl	800d7bc <ld_dword>
 800f2d6:	4602      	mov	r2, r0
 800f2d8:	4b17      	ldr	r3, [pc, #92]	; (800f338 <find_volume+0x500>)
 800f2da:	429a      	cmp	r2, r3
 800f2dc:	d113      	bne.n	800f306 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2e0:	3334      	adds	r3, #52	; 0x34
 800f2e2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	f7fe fa68 	bl	800d7bc <ld_dword>
 800f2ec:	4602      	mov	r2, r0
 800f2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2f0:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2f4:	3334      	adds	r3, #52	; 0x34
 800f2f6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	f7fe fa5e 	bl	800d7bc <ld_dword>
 800f300:	4602      	mov	r2, r0
 800f302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f304:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f308:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f30c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f30e:	4b0b      	ldr	r3, [pc, #44]	; (800f33c <find_volume+0x504>)
 800f310:	881b      	ldrh	r3, [r3, #0]
 800f312:	3301      	adds	r3, #1
 800f314:	b29a      	uxth	r2, r3
 800f316:	4b09      	ldr	r3, [pc, #36]	; (800f33c <find_volume+0x504>)
 800f318:	801a      	strh	r2, [r3, #0]
 800f31a:	4b08      	ldr	r3, [pc, #32]	; (800f33c <find_volume+0x504>)
 800f31c:	881a      	ldrh	r2, [r3, #0]
 800f31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f320:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f322:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f324:	f7fe fc7a 	bl	800dc1c <clear_lock>
#endif
	return FR_OK;
 800f328:	2300      	movs	r3, #0
}
 800f32a:	4618      	mov	r0, r3
 800f32c:	3758      	adds	r7, #88	; 0x58
 800f32e:	46bd      	mov	sp, r7
 800f330:	bd80      	pop	{r7, pc}
 800f332:	bf00      	nop
 800f334:	41615252 	.word	0x41615252
 800f338:	61417272 	.word	0x61417272
 800f33c:	20000840 	.word	0x20000840

0800f340 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b084      	sub	sp, #16
 800f344:	af00      	add	r7, sp, #0
 800f346:	6078      	str	r0, [r7, #4]
 800f348:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f34a:	2309      	movs	r3, #9
 800f34c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d01c      	beq.n	800f38e <validate+0x4e>
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d018      	beq.n	800f38e <validate+0x4e>
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	781b      	ldrb	r3, [r3, #0]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d013      	beq.n	800f38e <validate+0x4e>
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	889a      	ldrh	r2, [r3, #4]
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	88db      	ldrh	r3, [r3, #6]
 800f370:	429a      	cmp	r2, r3
 800f372:	d10c      	bne.n	800f38e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	785b      	ldrb	r3, [r3, #1]
 800f37a:	4618      	mov	r0, r3
 800f37c:	f7fe f968 	bl	800d650 <disk_status>
 800f380:	4603      	mov	r3, r0
 800f382:	f003 0301 	and.w	r3, r3, #1
 800f386:	2b00      	cmp	r3, #0
 800f388:	d101      	bne.n	800f38e <validate+0x4e>
			res = FR_OK;
 800f38a:	2300      	movs	r3, #0
 800f38c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f38e:	7bfb      	ldrb	r3, [r7, #15]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d102      	bne.n	800f39a <validate+0x5a>
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	e000      	b.n	800f39c <validate+0x5c>
 800f39a:	2300      	movs	r3, #0
 800f39c:	683a      	ldr	r2, [r7, #0]
 800f39e:	6013      	str	r3, [r2, #0]
	return res;
 800f3a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	3710      	adds	r7, #16
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	bd80      	pop	{r7, pc}
	...

0800f3ac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b088      	sub	sp, #32
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	60f8      	str	r0, [r7, #12]
 800f3b4:	60b9      	str	r1, [r7, #8]
 800f3b6:	4613      	mov	r3, r2
 800f3b8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f3ba:	68bb      	ldr	r3, [r7, #8]
 800f3bc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f3be:	f107 0310 	add.w	r3, r7, #16
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	f7ff fc9e 	bl	800ed04 <get_ldnumber>
 800f3c8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f3ca:	69fb      	ldr	r3, [r7, #28]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	da01      	bge.n	800f3d4 <f_mount+0x28>
 800f3d0:	230b      	movs	r3, #11
 800f3d2:	e02b      	b.n	800f42c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f3d4:	4a17      	ldr	r2, [pc, #92]	; (800f434 <f_mount+0x88>)
 800f3d6:	69fb      	ldr	r3, [r7, #28]
 800f3d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3dc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f3de:	69bb      	ldr	r3, [r7, #24]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d005      	beq.n	800f3f0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f3e4:	69b8      	ldr	r0, [r7, #24]
 800f3e6:	f7fe fc19 	bl	800dc1c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f3ea:	69bb      	ldr	r3, [r7, #24]
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d002      	beq.n	800f3fc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	2200      	movs	r2, #0
 800f3fa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f3fc:	68fa      	ldr	r2, [r7, #12]
 800f3fe:	490d      	ldr	r1, [pc, #52]	; (800f434 <f_mount+0x88>)
 800f400:	69fb      	ldr	r3, [r7, #28]
 800f402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d002      	beq.n	800f412 <f_mount+0x66>
 800f40c:	79fb      	ldrb	r3, [r7, #7]
 800f40e:	2b01      	cmp	r3, #1
 800f410:	d001      	beq.n	800f416 <f_mount+0x6a>
 800f412:	2300      	movs	r3, #0
 800f414:	e00a      	b.n	800f42c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f416:	f107 010c 	add.w	r1, r7, #12
 800f41a:	f107 0308 	add.w	r3, r7, #8
 800f41e:	2200      	movs	r2, #0
 800f420:	4618      	mov	r0, r3
 800f422:	f7ff fd09 	bl	800ee38 <find_volume>
 800f426:	4603      	mov	r3, r0
 800f428:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f42a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f42c:	4618      	mov	r0, r3
 800f42e:	3720      	adds	r7, #32
 800f430:	46bd      	mov	sp, r7
 800f432:	bd80      	pop	{r7, pc}
 800f434:	2000083c 	.word	0x2000083c

0800f438 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b098      	sub	sp, #96	; 0x60
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	60f8      	str	r0, [r7, #12]
 800f440:	60b9      	str	r1, [r7, #8]
 800f442:	4613      	mov	r3, r2
 800f444:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d101      	bne.n	800f450 <f_open+0x18>
 800f44c:	2309      	movs	r3, #9
 800f44e:	e1bb      	b.n	800f7c8 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f450:	79fb      	ldrb	r3, [r7, #7]
 800f452:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f456:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f458:	79fa      	ldrb	r2, [r7, #7]
 800f45a:	f107 0110 	add.w	r1, r7, #16
 800f45e:	f107 0308 	add.w	r3, r7, #8
 800f462:	4618      	mov	r0, r3
 800f464:	f7ff fce8 	bl	800ee38 <find_volume>
 800f468:	4603      	mov	r3, r0
 800f46a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800f46e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f472:	2b00      	cmp	r3, #0
 800f474:	f040 819f 	bne.w	800f7b6 <f_open+0x37e>
		dj.obj.fs = fs;
 800f478:	693b      	ldr	r3, [r7, #16]
 800f47a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f47c:	68ba      	ldr	r2, [r7, #8]
 800f47e:	f107 0314 	add.w	r3, r7, #20
 800f482:	4611      	mov	r1, r2
 800f484:	4618      	mov	r0, r3
 800f486:	f7ff fbc7 	bl	800ec18 <follow_path>
 800f48a:	4603      	mov	r3, r0
 800f48c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f490:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f494:	2b00      	cmp	r3, #0
 800f496:	d11a      	bne.n	800f4ce <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f498:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f49c:	b25b      	sxtb	r3, r3
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	da03      	bge.n	800f4aa <f_open+0x72>
				res = FR_INVALID_NAME;
 800f4a2:	2306      	movs	r3, #6
 800f4a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f4a8:	e011      	b.n	800f4ce <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f4aa:	79fb      	ldrb	r3, [r7, #7]
 800f4ac:	f023 0301 	bic.w	r3, r3, #1
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	bf14      	ite	ne
 800f4b4:	2301      	movne	r3, #1
 800f4b6:	2300      	moveq	r3, #0
 800f4b8:	b2db      	uxtb	r3, r3
 800f4ba:	461a      	mov	r2, r3
 800f4bc:	f107 0314 	add.w	r3, r7, #20
 800f4c0:	4611      	mov	r1, r2
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f7fe fa62 	bl	800d98c <chk_lock>
 800f4c8:	4603      	mov	r3, r0
 800f4ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f4ce:	79fb      	ldrb	r3, [r7, #7]
 800f4d0:	f003 031c 	and.w	r3, r3, #28
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d07f      	beq.n	800f5d8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800f4d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d017      	beq.n	800f510 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f4e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f4e4:	2b04      	cmp	r3, #4
 800f4e6:	d10e      	bne.n	800f506 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f4e8:	f7fe faac 	bl	800da44 <enq_lock>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d006      	beq.n	800f500 <f_open+0xc8>
 800f4f2:	f107 0314 	add.w	r3, r7, #20
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	f7ff fa68 	bl	800e9cc <dir_register>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	e000      	b.n	800f502 <f_open+0xca>
 800f500:	2312      	movs	r3, #18
 800f502:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f506:	79fb      	ldrb	r3, [r7, #7]
 800f508:	f043 0308 	orr.w	r3, r3, #8
 800f50c:	71fb      	strb	r3, [r7, #7]
 800f50e:	e010      	b.n	800f532 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f510:	7ebb      	ldrb	r3, [r7, #26]
 800f512:	f003 0311 	and.w	r3, r3, #17
 800f516:	2b00      	cmp	r3, #0
 800f518:	d003      	beq.n	800f522 <f_open+0xea>
					res = FR_DENIED;
 800f51a:	2307      	movs	r3, #7
 800f51c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f520:	e007      	b.n	800f532 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f522:	79fb      	ldrb	r3, [r7, #7]
 800f524:	f003 0304 	and.w	r3, r3, #4
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d002      	beq.n	800f532 <f_open+0xfa>
 800f52c:	2308      	movs	r3, #8
 800f52e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f532:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f536:	2b00      	cmp	r3, #0
 800f538:	d168      	bne.n	800f60c <f_open+0x1d4>
 800f53a:	79fb      	ldrb	r3, [r7, #7]
 800f53c:	f003 0308 	and.w	r3, r3, #8
 800f540:	2b00      	cmp	r3, #0
 800f542:	d063      	beq.n	800f60c <f_open+0x1d4>
				dw = GET_FATTIME();
 800f544:	f7fd fe32 	bl	800d1ac <get_fattime>
 800f548:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f54a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f54c:	330e      	adds	r3, #14
 800f54e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f550:	4618      	mov	r0, r3
 800f552:	f7fe f971 	bl	800d838 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f558:	3316      	adds	r3, #22
 800f55a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f55c:	4618      	mov	r0, r3
 800f55e:	f7fe f96b 	bl	800d838 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f564:	330b      	adds	r3, #11
 800f566:	2220      	movs	r2, #32
 800f568:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f56a:	693b      	ldr	r3, [r7, #16]
 800f56c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f56e:	4611      	mov	r1, r2
 800f570:	4618      	mov	r0, r3
 800f572:	f7ff f93a 	bl	800e7ea <ld_clust>
 800f576:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f578:	693b      	ldr	r3, [r7, #16]
 800f57a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f57c:	2200      	movs	r2, #0
 800f57e:	4618      	mov	r0, r3
 800f580:	f7ff f952 	bl	800e828 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f586:	331c      	adds	r3, #28
 800f588:	2100      	movs	r1, #0
 800f58a:	4618      	mov	r0, r3
 800f58c:	f7fe f954 	bl	800d838 <st_dword>
					fs->wflag = 1;
 800f590:	693b      	ldr	r3, [r7, #16]
 800f592:	2201      	movs	r2, #1
 800f594:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d037      	beq.n	800f60c <f_open+0x1d4>
						dw = fs->winsect;
 800f59c:	693b      	ldr	r3, [r7, #16]
 800f59e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5a0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800f5a2:	f107 0314 	add.w	r3, r7, #20
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	f7fe fe42 	bl	800e234 <remove_chain>
 800f5b0:	4603      	mov	r3, r0
 800f5b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800f5b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d126      	bne.n	800f60c <f_open+0x1d4>
							res = move_window(fs, dw);
 800f5be:	693b      	ldr	r3, [r7, #16]
 800f5c0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f7fe fb92 	bl	800dcec <move_window>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f5ce:	693b      	ldr	r3, [r7, #16]
 800f5d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f5d2:	3a01      	subs	r2, #1
 800f5d4:	611a      	str	r2, [r3, #16]
 800f5d6:	e019      	b.n	800f60c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f5d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d115      	bne.n	800f60c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f5e0:	7ebb      	ldrb	r3, [r7, #26]
 800f5e2:	f003 0310 	and.w	r3, r3, #16
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d003      	beq.n	800f5f2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800f5ea:	2304      	movs	r3, #4
 800f5ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f5f0:	e00c      	b.n	800f60c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f5f2:	79fb      	ldrb	r3, [r7, #7]
 800f5f4:	f003 0302 	and.w	r3, r3, #2
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d007      	beq.n	800f60c <f_open+0x1d4>
 800f5fc:	7ebb      	ldrb	r3, [r7, #26]
 800f5fe:	f003 0301 	and.w	r3, r3, #1
 800f602:	2b00      	cmp	r3, #0
 800f604:	d002      	beq.n	800f60c <f_open+0x1d4>
						res = FR_DENIED;
 800f606:	2307      	movs	r3, #7
 800f608:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800f60c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f610:	2b00      	cmp	r3, #0
 800f612:	d128      	bne.n	800f666 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f614:	79fb      	ldrb	r3, [r7, #7]
 800f616:	f003 0308 	and.w	r3, r3, #8
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d003      	beq.n	800f626 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800f61e:	79fb      	ldrb	r3, [r7, #7]
 800f620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f624:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f626:	693b      	ldr	r3, [r7, #16]
 800f628:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800f62e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f634:	79fb      	ldrb	r3, [r7, #7]
 800f636:	f023 0301 	bic.w	r3, r3, #1
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	bf14      	ite	ne
 800f63e:	2301      	movne	r3, #1
 800f640:	2300      	moveq	r3, #0
 800f642:	b2db      	uxtb	r3, r3
 800f644:	461a      	mov	r2, r3
 800f646:	f107 0314 	add.w	r3, r7, #20
 800f64a:	4611      	mov	r1, r2
 800f64c:	4618      	mov	r0, r3
 800f64e:	f7fe fa1b 	bl	800da88 <inc_lock>
 800f652:	4602      	mov	r2, r0
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	691b      	ldr	r3, [r3, #16]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d102      	bne.n	800f666 <f_open+0x22e>
 800f660:	2302      	movs	r3, #2
 800f662:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f666:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	f040 80a3 	bne.w	800f7b6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f670:	693b      	ldr	r3, [r7, #16]
 800f672:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f674:	4611      	mov	r1, r2
 800f676:	4618      	mov	r0, r3
 800f678:	f7ff f8b7 	bl	800e7ea <ld_clust>
 800f67c:	4602      	mov	r2, r0
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f684:	331c      	adds	r3, #28
 800f686:	4618      	mov	r0, r3
 800f688:	f7fe f898 	bl	800d7bc <ld_dword>
 800f68c:	4602      	mov	r2, r0
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	2200      	movs	r2, #0
 800f696:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f698:	693a      	ldr	r2, [r7, #16]
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f69e:	693b      	ldr	r3, [r7, #16]
 800f6a0:	88da      	ldrh	r2, [r3, #6]
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	79fa      	ldrb	r2, [r7, #7]
 800f6aa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	3330      	adds	r3, #48	; 0x30
 800f6c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f6c6:	2100      	movs	r1, #0
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	f7fe f902 	bl	800d8d2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f6ce:	79fb      	ldrb	r3, [r7, #7]
 800f6d0:	f003 0320 	and.w	r3, r3, #32
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d06e      	beq.n	800f7b6 <f_open+0x37e>
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	68db      	ldr	r3, [r3, #12]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d06a      	beq.n	800f7b6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	68da      	ldr	r2, [r3, #12]
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f6e8:	693b      	ldr	r3, [r7, #16]
 800f6ea:	895b      	ldrh	r3, [r3, #10]
 800f6ec:	461a      	mov	r2, r3
 800f6ee:	693b      	ldr	r3, [r7, #16]
 800f6f0:	899b      	ldrh	r3, [r3, #12]
 800f6f2:	fb03 f302 	mul.w	r3, r3, r2
 800f6f6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	689b      	ldr	r3, [r3, #8]
 800f6fc:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	68db      	ldr	r3, [r3, #12]
 800f702:	657b      	str	r3, [r7, #84]	; 0x54
 800f704:	e016      	b.n	800f734 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f70a:	4618      	mov	r0, r3
 800f70c:	f7fe fbab 	bl	800de66 <get_fat>
 800f710:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800f712:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f714:	2b01      	cmp	r3, #1
 800f716:	d802      	bhi.n	800f71e <f_open+0x2e6>
 800f718:	2302      	movs	r3, #2
 800f71a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f71e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f724:	d102      	bne.n	800f72c <f_open+0x2f4>
 800f726:	2301      	movs	r3, #1
 800f728:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f72c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f72e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f730:	1ad3      	subs	r3, r2, r3
 800f732:	657b      	str	r3, [r7, #84]	; 0x54
 800f734:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d103      	bne.n	800f744 <f_open+0x30c>
 800f73c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f73e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f740:	429a      	cmp	r2, r3
 800f742:	d8e0      	bhi.n	800f706 <f_open+0x2ce>
				}
				fp->clust = clst;
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f748:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f74a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d131      	bne.n	800f7b6 <f_open+0x37e>
 800f752:	693b      	ldr	r3, [r7, #16]
 800f754:	899b      	ldrh	r3, [r3, #12]
 800f756:	461a      	mov	r2, r3
 800f758:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f75a:	fbb3 f1f2 	udiv	r1, r3, r2
 800f75e:	fb02 f201 	mul.w	r2, r2, r1
 800f762:	1a9b      	subs	r3, r3, r2
 800f764:	2b00      	cmp	r3, #0
 800f766:	d026      	beq.n	800f7b6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f768:	693b      	ldr	r3, [r7, #16]
 800f76a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f76c:	4618      	mov	r0, r3
 800f76e:	f7fe fb5b 	bl	800de28 <clust2sect>
 800f772:	6478      	str	r0, [r7, #68]	; 0x44
 800f774:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f776:	2b00      	cmp	r3, #0
 800f778:	d103      	bne.n	800f782 <f_open+0x34a>
						res = FR_INT_ERR;
 800f77a:	2302      	movs	r3, #2
 800f77c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f780:	e019      	b.n	800f7b6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f782:	693b      	ldr	r3, [r7, #16]
 800f784:	899b      	ldrh	r3, [r3, #12]
 800f786:	461a      	mov	r2, r3
 800f788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f78a:	fbb3 f2f2 	udiv	r2, r3, r2
 800f78e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f790:	441a      	add	r2, r3
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f796:	693b      	ldr	r3, [r7, #16]
 800f798:	7858      	ldrb	r0, [r3, #1]
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	6a1a      	ldr	r2, [r3, #32]
 800f7a4:	2301      	movs	r3, #1
 800f7a6:	f7fd ff93 	bl	800d6d0 <disk_read>
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d002      	beq.n	800f7b6 <f_open+0x37e>
 800f7b0:	2301      	movs	r3, #1
 800f7b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f7b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d002      	beq.n	800f7c4 <f_open+0x38c>
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f7c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	3760      	adds	r7, #96	; 0x60
 800f7cc:	46bd      	mov	sp, r7
 800f7ce:	bd80      	pop	{r7, pc}

0800f7d0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b08c      	sub	sp, #48	; 0x30
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	60f8      	str	r0, [r7, #12]
 800f7d8:	60b9      	str	r1, [r7, #8]
 800f7da:	607a      	str	r2, [r7, #4]
 800f7dc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f7de:	68bb      	ldr	r3, [r7, #8]
 800f7e0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f7e2:	683b      	ldr	r3, [r7, #0]
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	f107 0210 	add.w	r2, r7, #16
 800f7ee:	4611      	mov	r1, r2
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	f7ff fda5 	bl	800f340 <validate>
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f7fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f800:	2b00      	cmp	r3, #0
 800f802:	d107      	bne.n	800f814 <f_write+0x44>
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	7d5b      	ldrb	r3, [r3, #21]
 800f808:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f80c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f810:	2b00      	cmp	r3, #0
 800f812:	d002      	beq.n	800f81a <f_write+0x4a>
 800f814:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f818:	e16a      	b.n	800faf0 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	7d1b      	ldrb	r3, [r3, #20]
 800f81e:	f003 0302 	and.w	r3, r3, #2
 800f822:	2b00      	cmp	r3, #0
 800f824:	d101      	bne.n	800f82a <f_write+0x5a>
 800f826:	2307      	movs	r3, #7
 800f828:	e162      	b.n	800faf0 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	699a      	ldr	r2, [r3, #24]
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	441a      	add	r2, r3
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	699b      	ldr	r3, [r3, #24]
 800f836:	429a      	cmp	r2, r3
 800f838:	f080 814c 	bcs.w	800fad4 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	699b      	ldr	r3, [r3, #24]
 800f840:	43db      	mvns	r3, r3
 800f842:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f844:	e146      	b.n	800fad4 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	699b      	ldr	r3, [r3, #24]
 800f84a:	693a      	ldr	r2, [r7, #16]
 800f84c:	8992      	ldrh	r2, [r2, #12]
 800f84e:	fbb3 f1f2 	udiv	r1, r3, r2
 800f852:	fb02 f201 	mul.w	r2, r2, r1
 800f856:	1a9b      	subs	r3, r3, r2
 800f858:	2b00      	cmp	r3, #0
 800f85a:	f040 80f1 	bne.w	800fa40 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	699b      	ldr	r3, [r3, #24]
 800f862:	693a      	ldr	r2, [r7, #16]
 800f864:	8992      	ldrh	r2, [r2, #12]
 800f866:	fbb3 f3f2 	udiv	r3, r3, r2
 800f86a:	693a      	ldr	r2, [r7, #16]
 800f86c:	8952      	ldrh	r2, [r2, #10]
 800f86e:	3a01      	subs	r2, #1
 800f870:	4013      	ands	r3, r2
 800f872:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f874:	69bb      	ldr	r3, [r7, #24]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d143      	bne.n	800f902 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	699b      	ldr	r3, [r3, #24]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d10c      	bne.n	800f89c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	689b      	ldr	r3, [r3, #8]
 800f886:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d11a      	bne.n	800f8c4 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	2100      	movs	r1, #0
 800f892:	4618      	mov	r0, r3
 800f894:	f7fe fd33 	bl	800e2fe <create_chain>
 800f898:	62b8      	str	r0, [r7, #40]	; 0x28
 800f89a:	e013      	b.n	800f8c4 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d007      	beq.n	800f8b4 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	699b      	ldr	r3, [r3, #24]
 800f8a8:	4619      	mov	r1, r3
 800f8aa:	68f8      	ldr	r0, [r7, #12]
 800f8ac:	f7fe fdbf 	bl	800e42e <clmt_clust>
 800f8b0:	62b8      	str	r0, [r7, #40]	; 0x28
 800f8b2:	e007      	b.n	800f8c4 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f8b4:	68fa      	ldr	r2, [r7, #12]
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	69db      	ldr	r3, [r3, #28]
 800f8ba:	4619      	mov	r1, r3
 800f8bc:	4610      	mov	r0, r2
 800f8be:	f7fe fd1e 	bl	800e2fe <create_chain>
 800f8c2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f8c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	f000 8109 	beq.w	800fade <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8ce:	2b01      	cmp	r3, #1
 800f8d0:	d104      	bne.n	800f8dc <f_write+0x10c>
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	2202      	movs	r2, #2
 800f8d6:	755a      	strb	r2, [r3, #21]
 800f8d8:	2302      	movs	r3, #2
 800f8da:	e109      	b.n	800faf0 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f8e2:	d104      	bne.n	800f8ee <f_write+0x11e>
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	2201      	movs	r2, #1
 800f8e8:	755a      	strb	r2, [r3, #21]
 800f8ea:	2301      	movs	r3, #1
 800f8ec:	e100      	b.n	800faf0 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f8f2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	689b      	ldr	r3, [r3, #8]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d102      	bne.n	800f902 <f_write+0x132>
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f900:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	7d1b      	ldrb	r3, [r3, #20]
 800f906:	b25b      	sxtb	r3, r3
 800f908:	2b00      	cmp	r3, #0
 800f90a:	da18      	bge.n	800f93e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f90c:	693b      	ldr	r3, [r7, #16]
 800f90e:	7858      	ldrb	r0, [r3, #1]
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	6a1a      	ldr	r2, [r3, #32]
 800f91a:	2301      	movs	r3, #1
 800f91c:	f7fd fef8 	bl	800d710 <disk_write>
 800f920:	4603      	mov	r3, r0
 800f922:	2b00      	cmp	r3, #0
 800f924:	d004      	beq.n	800f930 <f_write+0x160>
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	2201      	movs	r2, #1
 800f92a:	755a      	strb	r2, [r3, #21]
 800f92c:	2301      	movs	r3, #1
 800f92e:	e0df      	b.n	800faf0 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	7d1b      	ldrb	r3, [r3, #20]
 800f934:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f938:	b2da      	uxtb	r2, r3
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f93e:	693a      	ldr	r2, [r7, #16]
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	69db      	ldr	r3, [r3, #28]
 800f944:	4619      	mov	r1, r3
 800f946:	4610      	mov	r0, r2
 800f948:	f7fe fa6e 	bl	800de28 <clust2sect>
 800f94c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f94e:	697b      	ldr	r3, [r7, #20]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d104      	bne.n	800f95e <f_write+0x18e>
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	2202      	movs	r2, #2
 800f958:	755a      	strb	r2, [r3, #21]
 800f95a:	2302      	movs	r3, #2
 800f95c:	e0c8      	b.n	800faf0 <f_write+0x320>
			sect += csect;
 800f95e:	697a      	ldr	r2, [r7, #20]
 800f960:	69bb      	ldr	r3, [r7, #24]
 800f962:	4413      	add	r3, r2
 800f964:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f966:	693b      	ldr	r3, [r7, #16]
 800f968:	899b      	ldrh	r3, [r3, #12]
 800f96a:	461a      	mov	r2, r3
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f972:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f974:	6a3b      	ldr	r3, [r7, #32]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d043      	beq.n	800fa02 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f97a:	69ba      	ldr	r2, [r7, #24]
 800f97c:	6a3b      	ldr	r3, [r7, #32]
 800f97e:	4413      	add	r3, r2
 800f980:	693a      	ldr	r2, [r7, #16]
 800f982:	8952      	ldrh	r2, [r2, #10]
 800f984:	4293      	cmp	r3, r2
 800f986:	d905      	bls.n	800f994 <f_write+0x1c4>
					cc = fs->csize - csect;
 800f988:	693b      	ldr	r3, [r7, #16]
 800f98a:	895b      	ldrh	r3, [r3, #10]
 800f98c:	461a      	mov	r2, r3
 800f98e:	69bb      	ldr	r3, [r7, #24]
 800f990:	1ad3      	subs	r3, r2, r3
 800f992:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f994:	693b      	ldr	r3, [r7, #16]
 800f996:	7858      	ldrb	r0, [r3, #1]
 800f998:	6a3b      	ldr	r3, [r7, #32]
 800f99a:	697a      	ldr	r2, [r7, #20]
 800f99c:	69f9      	ldr	r1, [r7, #28]
 800f99e:	f7fd feb7 	bl	800d710 <disk_write>
 800f9a2:	4603      	mov	r3, r0
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d004      	beq.n	800f9b2 <f_write+0x1e2>
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	2201      	movs	r2, #1
 800f9ac:	755a      	strb	r2, [r3, #21]
 800f9ae:	2301      	movs	r3, #1
 800f9b0:	e09e      	b.n	800faf0 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	6a1a      	ldr	r2, [r3, #32]
 800f9b6:	697b      	ldr	r3, [r7, #20]
 800f9b8:	1ad3      	subs	r3, r2, r3
 800f9ba:	6a3a      	ldr	r2, [r7, #32]
 800f9bc:	429a      	cmp	r2, r3
 800f9be:	d918      	bls.n	800f9f2 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	6a1a      	ldr	r2, [r3, #32]
 800f9ca:	697b      	ldr	r3, [r7, #20]
 800f9cc:	1ad3      	subs	r3, r2, r3
 800f9ce:	693a      	ldr	r2, [r7, #16]
 800f9d0:	8992      	ldrh	r2, [r2, #12]
 800f9d2:	fb02 f303 	mul.w	r3, r2, r3
 800f9d6:	69fa      	ldr	r2, [r7, #28]
 800f9d8:	18d1      	adds	r1, r2, r3
 800f9da:	693b      	ldr	r3, [r7, #16]
 800f9dc:	899b      	ldrh	r3, [r3, #12]
 800f9de:	461a      	mov	r2, r3
 800f9e0:	f7fd ff56 	bl	800d890 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	7d1b      	ldrb	r3, [r3, #20]
 800f9e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f9ec:	b2da      	uxtb	r2, r3
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f9f2:	693b      	ldr	r3, [r7, #16]
 800f9f4:	899b      	ldrh	r3, [r3, #12]
 800f9f6:	461a      	mov	r2, r3
 800f9f8:	6a3b      	ldr	r3, [r7, #32]
 800f9fa:	fb02 f303 	mul.w	r3, r2, r3
 800f9fe:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800fa00:	e04b      	b.n	800fa9a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	6a1b      	ldr	r3, [r3, #32]
 800fa06:	697a      	ldr	r2, [r7, #20]
 800fa08:	429a      	cmp	r2, r3
 800fa0a:	d016      	beq.n	800fa3a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	699a      	ldr	r2, [r3, #24]
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fa14:	429a      	cmp	r2, r3
 800fa16:	d210      	bcs.n	800fa3a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800fa18:	693b      	ldr	r3, [r7, #16]
 800fa1a:	7858      	ldrb	r0, [r3, #1]
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fa22:	2301      	movs	r3, #1
 800fa24:	697a      	ldr	r2, [r7, #20]
 800fa26:	f7fd fe53 	bl	800d6d0 <disk_read>
 800fa2a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d004      	beq.n	800fa3a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	2201      	movs	r2, #1
 800fa34:	755a      	strb	r2, [r3, #21]
 800fa36:	2301      	movs	r3, #1
 800fa38:	e05a      	b.n	800faf0 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	697a      	ldr	r2, [r7, #20]
 800fa3e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800fa40:	693b      	ldr	r3, [r7, #16]
 800fa42:	899b      	ldrh	r3, [r3, #12]
 800fa44:	4618      	mov	r0, r3
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	699b      	ldr	r3, [r3, #24]
 800fa4a:	693a      	ldr	r2, [r7, #16]
 800fa4c:	8992      	ldrh	r2, [r2, #12]
 800fa4e:	fbb3 f1f2 	udiv	r1, r3, r2
 800fa52:	fb02 f201 	mul.w	r2, r2, r1
 800fa56:	1a9b      	subs	r3, r3, r2
 800fa58:	1ac3      	subs	r3, r0, r3
 800fa5a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800fa5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	429a      	cmp	r2, r3
 800fa62:	d901      	bls.n	800fa68 <f_write+0x298>
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	699b      	ldr	r3, [r3, #24]
 800fa72:	693a      	ldr	r2, [r7, #16]
 800fa74:	8992      	ldrh	r2, [r2, #12]
 800fa76:	fbb3 f0f2 	udiv	r0, r3, r2
 800fa7a:	fb02 f200 	mul.w	r2, r2, r0
 800fa7e:	1a9b      	subs	r3, r3, r2
 800fa80:	440b      	add	r3, r1
 800fa82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa84:	69f9      	ldr	r1, [r7, #28]
 800fa86:	4618      	mov	r0, r3
 800fa88:	f7fd ff02 	bl	800d890 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	7d1b      	ldrb	r3, [r3, #20]
 800fa90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fa94:	b2da      	uxtb	r2, r3
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800fa9a:	69fa      	ldr	r2, [r7, #28]
 800fa9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa9e:	4413      	add	r3, r2
 800faa0:	61fb      	str	r3, [r7, #28]
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	699a      	ldr	r2, [r3, #24]
 800faa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faa8:	441a      	add	r2, r3
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	619a      	str	r2, [r3, #24]
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	68da      	ldr	r2, [r3, #12]
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	699b      	ldr	r3, [r3, #24]
 800fab6:	429a      	cmp	r2, r3
 800fab8:	bf38      	it	cc
 800faba:	461a      	movcc	r2, r3
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	60da      	str	r2, [r3, #12]
 800fac0:	683b      	ldr	r3, [r7, #0]
 800fac2:	681a      	ldr	r2, [r3, #0]
 800fac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fac6:	441a      	add	r2, r3
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	601a      	str	r2, [r3, #0]
 800facc:	687a      	ldr	r2, [r7, #4]
 800face:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fad0:	1ad3      	subs	r3, r2, r3
 800fad2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	f47f aeb5 	bne.w	800f846 <f_write+0x76>
 800fadc:	e000      	b.n	800fae0 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fade:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	7d1b      	ldrb	r3, [r3, #20]
 800fae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fae8:	b2da      	uxtb	r2, r3
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800faee:	2300      	movs	r3, #0
}
 800faf0:	4618      	mov	r0, r3
 800faf2:	3730      	adds	r7, #48	; 0x30
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd80      	pop	{r7, pc}

0800faf8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b086      	sub	sp, #24
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	f107 0208 	add.w	r2, r7, #8
 800fb06:	4611      	mov	r1, r2
 800fb08:	4618      	mov	r0, r3
 800fb0a:	f7ff fc19 	bl	800f340 <validate>
 800fb0e:	4603      	mov	r3, r0
 800fb10:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fb12:	7dfb      	ldrb	r3, [r7, #23]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d168      	bne.n	800fbea <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	7d1b      	ldrb	r3, [r3, #20]
 800fb1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d062      	beq.n	800fbea <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	7d1b      	ldrb	r3, [r3, #20]
 800fb28:	b25b      	sxtb	r3, r3
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	da15      	bge.n	800fb5a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800fb2e:	68bb      	ldr	r3, [r7, #8]
 800fb30:	7858      	ldrb	r0, [r3, #1]
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	6a1a      	ldr	r2, [r3, #32]
 800fb3c:	2301      	movs	r3, #1
 800fb3e:	f7fd fde7 	bl	800d710 <disk_write>
 800fb42:	4603      	mov	r3, r0
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d001      	beq.n	800fb4c <f_sync+0x54>
 800fb48:	2301      	movs	r3, #1
 800fb4a:	e04f      	b.n	800fbec <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	7d1b      	ldrb	r3, [r3, #20]
 800fb50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fb54:	b2da      	uxtb	r2, r3
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800fb5a:	f7fd fb27 	bl	800d1ac <get_fattime>
 800fb5e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800fb60:	68ba      	ldr	r2, [r7, #8]
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb66:	4619      	mov	r1, r3
 800fb68:	4610      	mov	r0, r2
 800fb6a:	f7fe f8bf 	bl	800dcec <move_window>
 800fb6e:	4603      	mov	r3, r0
 800fb70:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800fb72:	7dfb      	ldrb	r3, [r7, #23]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d138      	bne.n	800fbea <f_sync+0xf2>
					dir = fp->dir_ptr;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb7c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	330b      	adds	r3, #11
 800fb82:	781a      	ldrb	r2, [r3, #0]
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	330b      	adds	r3, #11
 800fb88:	f042 0220 	orr.w	r2, r2, #32
 800fb8c:	b2d2      	uxtb	r2, r2
 800fb8e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	6818      	ldr	r0, [r3, #0]
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	689b      	ldr	r3, [r3, #8]
 800fb98:	461a      	mov	r2, r3
 800fb9a:	68f9      	ldr	r1, [r7, #12]
 800fb9c:	f7fe fe44 	bl	800e828 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	f103 021c 	add.w	r2, r3, #28
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	68db      	ldr	r3, [r3, #12]
 800fbaa:	4619      	mov	r1, r3
 800fbac:	4610      	mov	r0, r2
 800fbae:	f7fd fe43 	bl	800d838 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	3316      	adds	r3, #22
 800fbb6:	6939      	ldr	r1, [r7, #16]
 800fbb8:	4618      	mov	r0, r3
 800fbba:	f7fd fe3d 	bl	800d838 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	3312      	adds	r3, #18
 800fbc2:	2100      	movs	r1, #0
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	f7fd fe1c 	bl	800d802 <st_word>
					fs->wflag = 1;
 800fbca:	68bb      	ldr	r3, [r7, #8]
 800fbcc:	2201      	movs	r2, #1
 800fbce:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800fbd0:	68bb      	ldr	r3, [r7, #8]
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	f7fe f8b8 	bl	800dd48 <sync_fs>
 800fbd8:	4603      	mov	r3, r0
 800fbda:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	7d1b      	ldrb	r3, [r3, #20]
 800fbe0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fbe4:	b2da      	uxtb	r2, r3
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800fbea:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbec:	4618      	mov	r0, r3
 800fbee:	3718      	adds	r7, #24
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	bd80      	pop	{r7, pc}

0800fbf4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b084      	sub	sp, #16
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800fbfc:	6878      	ldr	r0, [r7, #4]
 800fbfe:	f7ff ff7b 	bl	800faf8 <f_sync>
 800fc02:	4603      	mov	r3, r0
 800fc04:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800fc06:	7bfb      	ldrb	r3, [r7, #15]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d118      	bne.n	800fc3e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	f107 0208 	add.w	r2, r7, #8
 800fc12:	4611      	mov	r1, r2
 800fc14:	4618      	mov	r0, r3
 800fc16:	f7ff fb93 	bl	800f340 <validate>
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fc1e:	7bfb      	ldrb	r3, [r7, #15]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d10c      	bne.n	800fc3e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	691b      	ldr	r3, [r3, #16]
 800fc28:	4618      	mov	r0, r3
 800fc2a:	f7fd ffbb 	bl	800dba4 <dec_lock>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800fc32:	7bfb      	ldrb	r3, [r7, #15]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d102      	bne.n	800fc3e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800fc3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc40:	4618      	mov	r0, r3
 800fc42:	3710      	adds	r7, #16
 800fc44:	46bd      	mov	sp, r7
 800fc46:	bd80      	pop	{r7, pc}

0800fc48 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b090      	sub	sp, #64	; 0x40
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
 800fc50:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	f107 0208 	add.w	r2, r7, #8
 800fc58:	4611      	mov	r1, r2
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	f7ff fb70 	bl	800f340 <validate>
 800fc60:	4603      	mov	r3, r0
 800fc62:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800fc66:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d103      	bne.n	800fc76 <f_lseek+0x2e>
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	7d5b      	ldrb	r3, [r3, #21]
 800fc72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800fc76:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d002      	beq.n	800fc84 <f_lseek+0x3c>
 800fc7e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fc82:	e201      	b.n	8010088 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	f000 80d9 	beq.w	800fe40 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800fc8e:	683b      	ldr	r3, [r7, #0]
 800fc90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fc94:	d15a      	bne.n	800fd4c <f_lseek+0x104>
			tbl = fp->cltbl;
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc9a:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800fc9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc9e:	1d1a      	adds	r2, r3, #4
 800fca0:	627a      	str	r2, [r7, #36]	; 0x24
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	617b      	str	r3, [r7, #20]
 800fca6:	2302      	movs	r3, #2
 800fca8:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	689b      	ldr	r3, [r3, #8]
 800fcae:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800fcb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d03a      	beq.n	800fd2c <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800fcb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcb8:	613b      	str	r3, [r7, #16]
 800fcba:	2300      	movs	r3, #0
 800fcbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fcbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcc0:	3302      	adds	r3, #2
 800fcc2:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800fcc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcc6:	60fb      	str	r3, [r7, #12]
 800fcc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcca:	3301      	adds	r3, #1
 800fccc:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	f7fe f8c7 	bl	800de66 <get_fat>
 800fcd8:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800fcda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcdc:	2b01      	cmp	r3, #1
 800fcde:	d804      	bhi.n	800fcea <f_lseek+0xa2>
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	2202      	movs	r2, #2
 800fce4:	755a      	strb	r2, [r3, #21]
 800fce6:	2302      	movs	r3, #2
 800fce8:	e1ce      	b.n	8010088 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fcea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fcf0:	d104      	bne.n	800fcfc <f_lseek+0xb4>
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	2201      	movs	r2, #1
 800fcf6:	755a      	strb	r2, [r3, #21]
 800fcf8:	2301      	movs	r3, #1
 800fcfa:	e1c5      	b.n	8010088 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	3301      	adds	r3, #1
 800fd00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd02:	429a      	cmp	r2, r3
 800fd04:	d0de      	beq.n	800fcc4 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800fd06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd08:	697b      	ldr	r3, [r7, #20]
 800fd0a:	429a      	cmp	r2, r3
 800fd0c:	d809      	bhi.n	800fd22 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800fd0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd10:	1d1a      	adds	r2, r3, #4
 800fd12:	627a      	str	r2, [r7, #36]	; 0x24
 800fd14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd16:	601a      	str	r2, [r3, #0]
 800fd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd1a:	1d1a      	adds	r2, r3, #4
 800fd1c:	627a      	str	r2, [r7, #36]	; 0x24
 800fd1e:	693a      	ldr	r2, [r7, #16]
 800fd20:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800fd22:	68bb      	ldr	r3, [r7, #8]
 800fd24:	699b      	ldr	r3, [r3, #24]
 800fd26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd28:	429a      	cmp	r2, r3
 800fd2a:	d3c4      	bcc.n	800fcb6 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd32:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800fd34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd36:	697b      	ldr	r3, [r7, #20]
 800fd38:	429a      	cmp	r2, r3
 800fd3a:	d803      	bhi.n	800fd44 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800fd3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd3e:	2200      	movs	r2, #0
 800fd40:	601a      	str	r2, [r3, #0]
 800fd42:	e19f      	b.n	8010084 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800fd44:	2311      	movs	r3, #17
 800fd46:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fd4a:	e19b      	b.n	8010084 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	68db      	ldr	r3, [r3, #12]
 800fd50:	683a      	ldr	r2, [r7, #0]
 800fd52:	429a      	cmp	r2, r3
 800fd54:	d902      	bls.n	800fd5c <f_lseek+0x114>
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	68db      	ldr	r3, [r3, #12]
 800fd5a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	683a      	ldr	r2, [r7, #0]
 800fd60:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800fd62:	683b      	ldr	r3, [r7, #0]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	f000 818d 	beq.w	8010084 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800fd6a:	683b      	ldr	r3, [r7, #0]
 800fd6c:	3b01      	subs	r3, #1
 800fd6e:	4619      	mov	r1, r3
 800fd70:	6878      	ldr	r0, [r7, #4]
 800fd72:	f7fe fb5c 	bl	800e42e <clmt_clust>
 800fd76:	4602      	mov	r2, r0
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800fd7c:	68ba      	ldr	r2, [r7, #8]
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	69db      	ldr	r3, [r3, #28]
 800fd82:	4619      	mov	r1, r3
 800fd84:	4610      	mov	r0, r2
 800fd86:	f7fe f84f 	bl	800de28 <clust2sect>
 800fd8a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800fd8c:	69bb      	ldr	r3, [r7, #24]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d104      	bne.n	800fd9c <f_lseek+0x154>
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	2202      	movs	r2, #2
 800fd96:	755a      	strb	r2, [r3, #21]
 800fd98:	2302      	movs	r3, #2
 800fd9a:	e175      	b.n	8010088 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	3b01      	subs	r3, #1
 800fda0:	68ba      	ldr	r2, [r7, #8]
 800fda2:	8992      	ldrh	r2, [r2, #12]
 800fda4:	fbb3 f3f2 	udiv	r3, r3, r2
 800fda8:	68ba      	ldr	r2, [r7, #8]
 800fdaa:	8952      	ldrh	r2, [r2, #10]
 800fdac:	3a01      	subs	r2, #1
 800fdae:	4013      	ands	r3, r2
 800fdb0:	69ba      	ldr	r2, [r7, #24]
 800fdb2:	4413      	add	r3, r2
 800fdb4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	699b      	ldr	r3, [r3, #24]
 800fdba:	68ba      	ldr	r2, [r7, #8]
 800fdbc:	8992      	ldrh	r2, [r2, #12]
 800fdbe:	fbb3 f1f2 	udiv	r1, r3, r2
 800fdc2:	fb02 f201 	mul.w	r2, r2, r1
 800fdc6:	1a9b      	subs	r3, r3, r2
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	f000 815b 	beq.w	8010084 <f_lseek+0x43c>
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	6a1b      	ldr	r3, [r3, #32]
 800fdd2:	69ba      	ldr	r2, [r7, #24]
 800fdd4:	429a      	cmp	r2, r3
 800fdd6:	f000 8155 	beq.w	8010084 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	7d1b      	ldrb	r3, [r3, #20]
 800fdde:	b25b      	sxtb	r3, r3
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	da18      	bge.n	800fe16 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fde4:	68bb      	ldr	r3, [r7, #8]
 800fde6:	7858      	ldrb	r0, [r3, #1]
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	6a1a      	ldr	r2, [r3, #32]
 800fdf2:	2301      	movs	r3, #1
 800fdf4:	f7fd fc8c 	bl	800d710 <disk_write>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d004      	beq.n	800fe08 <f_lseek+0x1c0>
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	2201      	movs	r2, #1
 800fe02:	755a      	strb	r2, [r3, #21]
 800fe04:	2301      	movs	r3, #1
 800fe06:	e13f      	b.n	8010088 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	7d1b      	ldrb	r3, [r3, #20]
 800fe0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fe10:	b2da      	uxtb	r2, r3
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800fe16:	68bb      	ldr	r3, [r7, #8]
 800fe18:	7858      	ldrb	r0, [r3, #1]
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fe20:	2301      	movs	r3, #1
 800fe22:	69ba      	ldr	r2, [r7, #24]
 800fe24:	f7fd fc54 	bl	800d6d0 <disk_read>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d004      	beq.n	800fe38 <f_lseek+0x1f0>
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	2201      	movs	r2, #1
 800fe32:	755a      	strb	r2, [r3, #21]
 800fe34:	2301      	movs	r3, #1
 800fe36:	e127      	b.n	8010088 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	69ba      	ldr	r2, [r7, #24]
 800fe3c:	621a      	str	r2, [r3, #32]
 800fe3e:	e121      	b.n	8010084 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	68db      	ldr	r3, [r3, #12]
 800fe44:	683a      	ldr	r2, [r7, #0]
 800fe46:	429a      	cmp	r2, r3
 800fe48:	d908      	bls.n	800fe5c <f_lseek+0x214>
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	7d1b      	ldrb	r3, [r3, #20]
 800fe4e:	f003 0302 	and.w	r3, r3, #2
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d102      	bne.n	800fe5c <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	68db      	ldr	r3, [r3, #12]
 800fe5a:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	699b      	ldr	r3, [r3, #24]
 800fe60:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800fe62:	2300      	movs	r3, #0
 800fe64:	637b      	str	r3, [r7, #52]	; 0x34
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe6a:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800fe6c:	683b      	ldr	r3, [r7, #0]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	f000 80b5 	beq.w	800ffde <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800fe74:	68bb      	ldr	r3, [r7, #8]
 800fe76:	895b      	ldrh	r3, [r3, #10]
 800fe78:	461a      	mov	r2, r3
 800fe7a:	68bb      	ldr	r3, [r7, #8]
 800fe7c:	899b      	ldrh	r3, [r3, #12]
 800fe7e:	fb03 f302 	mul.w	r3, r3, r2
 800fe82:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800fe84:	6a3b      	ldr	r3, [r7, #32]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d01b      	beq.n	800fec2 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800fe8a:	683b      	ldr	r3, [r7, #0]
 800fe8c:	1e5a      	subs	r2, r3, #1
 800fe8e:	69fb      	ldr	r3, [r7, #28]
 800fe90:	fbb2 f2f3 	udiv	r2, r2, r3
 800fe94:	6a3b      	ldr	r3, [r7, #32]
 800fe96:	1e59      	subs	r1, r3, #1
 800fe98:	69fb      	ldr	r3, [r7, #28]
 800fe9a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800fe9e:	429a      	cmp	r2, r3
 800fea0:	d30f      	bcc.n	800fec2 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800fea2:	6a3b      	ldr	r3, [r7, #32]
 800fea4:	1e5a      	subs	r2, r3, #1
 800fea6:	69fb      	ldr	r3, [r7, #28]
 800fea8:	425b      	negs	r3, r3
 800feaa:	401a      	ands	r2, r3
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	699b      	ldr	r3, [r3, #24]
 800feb4:	683a      	ldr	r2, [r7, #0]
 800feb6:	1ad3      	subs	r3, r2, r3
 800feb8:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	69db      	ldr	r3, [r3, #28]
 800febe:	63bb      	str	r3, [r7, #56]	; 0x38
 800fec0:	e022      	b.n	800ff08 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	689b      	ldr	r3, [r3, #8]
 800fec6:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800fec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d119      	bne.n	800ff02 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	2100      	movs	r1, #0
 800fed2:	4618      	mov	r0, r3
 800fed4:	f7fe fa13 	bl	800e2fe <create_chain>
 800fed8:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800feda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fedc:	2b01      	cmp	r3, #1
 800fede:	d104      	bne.n	800feea <f_lseek+0x2a2>
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2202      	movs	r2, #2
 800fee4:	755a      	strb	r2, [r3, #21]
 800fee6:	2302      	movs	r3, #2
 800fee8:	e0ce      	b.n	8010088 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800feea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fef0:	d104      	bne.n	800fefc <f_lseek+0x2b4>
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	2201      	movs	r2, #1
 800fef6:	755a      	strb	r2, [r3, #21]
 800fef8:	2301      	movs	r3, #1
 800fefa:	e0c5      	b.n	8010088 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff00:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff06:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800ff08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d067      	beq.n	800ffde <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800ff0e:	e03a      	b.n	800ff86 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800ff10:	683a      	ldr	r2, [r7, #0]
 800ff12:	69fb      	ldr	r3, [r7, #28]
 800ff14:	1ad3      	subs	r3, r2, r3
 800ff16:	603b      	str	r3, [r7, #0]
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	699a      	ldr	r2, [r3, #24]
 800ff1c:	69fb      	ldr	r3, [r7, #28]
 800ff1e:	441a      	add	r2, r3
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	7d1b      	ldrb	r3, [r3, #20]
 800ff28:	f003 0302 	and.w	r3, r3, #2
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d00b      	beq.n	800ff48 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ff34:	4618      	mov	r0, r3
 800ff36:	f7fe f9e2 	bl	800e2fe <create_chain>
 800ff3a:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800ff3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d108      	bne.n	800ff54 <f_lseek+0x30c>
							ofs = 0; break;
 800ff42:	2300      	movs	r3, #0
 800ff44:	603b      	str	r3, [r7, #0]
 800ff46:	e022      	b.n	800ff8e <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	f7fd ff8a 	bl	800de66 <get_fat>
 800ff52:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ff54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ff5a:	d104      	bne.n	800ff66 <f_lseek+0x31e>
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	2201      	movs	r2, #1
 800ff60:	755a      	strb	r2, [r3, #21]
 800ff62:	2301      	movs	r3, #1
 800ff64:	e090      	b.n	8010088 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800ff66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff68:	2b01      	cmp	r3, #1
 800ff6a:	d904      	bls.n	800ff76 <f_lseek+0x32e>
 800ff6c:	68bb      	ldr	r3, [r7, #8]
 800ff6e:	699b      	ldr	r3, [r3, #24]
 800ff70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff72:	429a      	cmp	r2, r3
 800ff74:	d304      	bcc.n	800ff80 <f_lseek+0x338>
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	2202      	movs	r2, #2
 800ff7a:	755a      	strb	r2, [r3, #21]
 800ff7c:	2302      	movs	r3, #2
 800ff7e:	e083      	b.n	8010088 <f_lseek+0x440>
					fp->clust = clst;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff84:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800ff86:	683a      	ldr	r2, [r7, #0]
 800ff88:	69fb      	ldr	r3, [r7, #28]
 800ff8a:	429a      	cmp	r2, r3
 800ff8c:	d8c0      	bhi.n	800ff10 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	699a      	ldr	r2, [r3, #24]
 800ff92:	683b      	ldr	r3, [r7, #0]
 800ff94:	441a      	add	r2, r3
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800ff9a:	68bb      	ldr	r3, [r7, #8]
 800ff9c:	899b      	ldrh	r3, [r3, #12]
 800ff9e:	461a      	mov	r2, r3
 800ffa0:	683b      	ldr	r3, [r7, #0]
 800ffa2:	fbb3 f1f2 	udiv	r1, r3, r2
 800ffa6:	fb02 f201 	mul.w	r2, r2, r1
 800ffaa:	1a9b      	subs	r3, r3, r2
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d016      	beq.n	800ffde <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800ffb0:	68bb      	ldr	r3, [r7, #8]
 800ffb2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	f7fd ff37 	bl	800de28 <clust2sect>
 800ffba:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800ffbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d104      	bne.n	800ffcc <f_lseek+0x384>
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	2202      	movs	r2, #2
 800ffc6:	755a      	strb	r2, [r3, #21]
 800ffc8:	2302      	movs	r3, #2
 800ffca:	e05d      	b.n	8010088 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800ffcc:	68bb      	ldr	r3, [r7, #8]
 800ffce:	899b      	ldrh	r3, [r3, #12]
 800ffd0:	461a      	mov	r2, r3
 800ffd2:	683b      	ldr	r3, [r7, #0]
 800ffd4:	fbb3 f3f2 	udiv	r3, r3, r2
 800ffd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ffda:	4413      	add	r3, r2
 800ffdc:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	699a      	ldr	r2, [r3, #24]
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	68db      	ldr	r3, [r3, #12]
 800ffe6:	429a      	cmp	r2, r3
 800ffe8:	d90a      	bls.n	8010000 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	699a      	ldr	r2, [r3, #24]
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	7d1b      	ldrb	r3, [r3, #20]
 800fff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fffa:	b2da      	uxtb	r2, r3
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	699b      	ldr	r3, [r3, #24]
 8010004:	68ba      	ldr	r2, [r7, #8]
 8010006:	8992      	ldrh	r2, [r2, #12]
 8010008:	fbb3 f1f2 	udiv	r1, r3, r2
 801000c:	fb02 f201 	mul.w	r2, r2, r1
 8010010:	1a9b      	subs	r3, r3, r2
 8010012:	2b00      	cmp	r3, #0
 8010014:	d036      	beq.n	8010084 <f_lseek+0x43c>
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	6a1b      	ldr	r3, [r3, #32]
 801001a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801001c:	429a      	cmp	r2, r3
 801001e:	d031      	beq.n	8010084 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	7d1b      	ldrb	r3, [r3, #20]
 8010024:	b25b      	sxtb	r3, r3
 8010026:	2b00      	cmp	r3, #0
 8010028:	da18      	bge.n	801005c <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801002a:	68bb      	ldr	r3, [r7, #8]
 801002c:	7858      	ldrb	r0, [r3, #1]
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	6a1a      	ldr	r2, [r3, #32]
 8010038:	2301      	movs	r3, #1
 801003a:	f7fd fb69 	bl	800d710 <disk_write>
 801003e:	4603      	mov	r3, r0
 8010040:	2b00      	cmp	r3, #0
 8010042:	d004      	beq.n	801004e <f_lseek+0x406>
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	2201      	movs	r2, #1
 8010048:	755a      	strb	r2, [r3, #21]
 801004a:	2301      	movs	r3, #1
 801004c:	e01c      	b.n	8010088 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	7d1b      	ldrb	r3, [r3, #20]
 8010052:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010056:	b2da      	uxtb	r2, r3
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801005c:	68bb      	ldr	r3, [r7, #8]
 801005e:	7858      	ldrb	r0, [r3, #1]
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010066:	2301      	movs	r3, #1
 8010068:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801006a:	f7fd fb31 	bl	800d6d0 <disk_read>
 801006e:	4603      	mov	r3, r0
 8010070:	2b00      	cmp	r3, #0
 8010072:	d004      	beq.n	801007e <f_lseek+0x436>
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	2201      	movs	r2, #1
 8010078:	755a      	strb	r2, [r3, #21]
 801007a:	2301      	movs	r3, #1
 801007c:	e004      	b.n	8010088 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010082:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8010084:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8010088:	4618      	mov	r0, r3
 801008a:	3740      	adds	r7, #64	; 0x40
 801008c:	46bd      	mov	sp, r7
 801008e:	bd80      	pop	{r7, pc}

08010090 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8010090:	b580      	push	{r7, lr}
 8010092:	b086      	sub	sp, #24
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
 8010098:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	2b00      	cmp	r3, #0
 801009e:	d101      	bne.n	80100a4 <f_opendir+0x14>
 80100a0:	2309      	movs	r3, #9
 80100a2:	e064      	b.n	801016e <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80100a8:	f107 010c 	add.w	r1, r7, #12
 80100ac:	463b      	mov	r3, r7
 80100ae:	2200      	movs	r2, #0
 80100b0:	4618      	mov	r0, r3
 80100b2:	f7fe fec1 	bl	800ee38 <find_volume>
 80100b6:	4603      	mov	r3, r0
 80100b8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80100ba:	7dfb      	ldrb	r3, [r7, #23]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d14f      	bne.n	8010160 <f_opendir+0xd0>
		obj->fs = fs;
 80100c0:	68fa      	ldr	r2, [r7, #12]
 80100c2:	693b      	ldr	r3, [r7, #16]
 80100c4:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80100c6:	683b      	ldr	r3, [r7, #0]
 80100c8:	4619      	mov	r1, r3
 80100ca:	6878      	ldr	r0, [r7, #4]
 80100cc:	f7fe fda4 	bl	800ec18 <follow_path>
 80100d0:	4603      	mov	r3, r0
 80100d2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80100d4:	7dfb      	ldrb	r3, [r7, #23]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d13d      	bne.n	8010156 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80100e0:	b25b      	sxtb	r3, r3
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	db12      	blt.n	801010c <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80100e6:	693b      	ldr	r3, [r7, #16]
 80100e8:	799b      	ldrb	r3, [r3, #6]
 80100ea:	f003 0310 	and.w	r3, r3, #16
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d00a      	beq.n	8010108 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80100f2:	68fa      	ldr	r2, [r7, #12]
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	6a1b      	ldr	r3, [r3, #32]
 80100f8:	4619      	mov	r1, r3
 80100fa:	4610      	mov	r0, r2
 80100fc:	f7fe fb75 	bl	800e7ea <ld_clust>
 8010100:	4602      	mov	r2, r0
 8010102:	693b      	ldr	r3, [r7, #16]
 8010104:	609a      	str	r2, [r3, #8]
 8010106:	e001      	b.n	801010c <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8010108:	2305      	movs	r3, #5
 801010a:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 801010c:	7dfb      	ldrb	r3, [r7, #23]
 801010e:	2b00      	cmp	r3, #0
 8010110:	d121      	bne.n	8010156 <f_opendir+0xc6>
				obj->id = fs->id;
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	88da      	ldrh	r2, [r3, #6]
 8010116:	693b      	ldr	r3, [r7, #16]
 8010118:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801011a:	2100      	movs	r1, #0
 801011c:	6878      	ldr	r0, [r7, #4]
 801011e:	f7fe f9be 	bl	800e49e <dir_sdi>
 8010122:	4603      	mov	r3, r0
 8010124:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8010126:	7dfb      	ldrb	r3, [r7, #23]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d114      	bne.n	8010156 <f_opendir+0xc6>
					if (obj->sclust) {
 801012c:	693b      	ldr	r3, [r7, #16]
 801012e:	689b      	ldr	r3, [r3, #8]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d00d      	beq.n	8010150 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8010134:	2100      	movs	r1, #0
 8010136:	6878      	ldr	r0, [r7, #4]
 8010138:	f7fd fca6 	bl	800da88 <inc_lock>
 801013c:	4602      	mov	r2, r0
 801013e:	693b      	ldr	r3, [r7, #16]
 8010140:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8010142:	693b      	ldr	r3, [r7, #16]
 8010144:	691b      	ldr	r3, [r3, #16]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d105      	bne.n	8010156 <f_opendir+0xc6>
 801014a:	2312      	movs	r3, #18
 801014c:	75fb      	strb	r3, [r7, #23]
 801014e:	e002      	b.n	8010156 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8010150:	693b      	ldr	r3, [r7, #16]
 8010152:	2200      	movs	r2, #0
 8010154:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8010156:	7dfb      	ldrb	r3, [r7, #23]
 8010158:	2b04      	cmp	r3, #4
 801015a:	d101      	bne.n	8010160 <f_opendir+0xd0>
 801015c:	2305      	movs	r3, #5
 801015e:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8010160:	7dfb      	ldrb	r3, [r7, #23]
 8010162:	2b00      	cmp	r3, #0
 8010164:	d002      	beq.n	801016c <f_opendir+0xdc>
 8010166:	693b      	ldr	r3, [r7, #16]
 8010168:	2200      	movs	r2, #0
 801016a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801016c:	7dfb      	ldrb	r3, [r7, #23]
}
 801016e:	4618      	mov	r0, r3
 8010170:	3718      	adds	r7, #24
 8010172:	46bd      	mov	sp, r7
 8010174:	bd80      	pop	{r7, pc}

08010176 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8010176:	b580      	push	{r7, lr}
 8010178:	b084      	sub	sp, #16
 801017a:	af00      	add	r7, sp, #0
 801017c:	6078      	str	r0, [r7, #4]
 801017e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	f107 0208 	add.w	r2, r7, #8
 8010186:	4611      	mov	r1, r2
 8010188:	4618      	mov	r0, r3
 801018a:	f7ff f8d9 	bl	800f340 <validate>
 801018e:	4603      	mov	r3, r0
 8010190:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010192:	7bfb      	ldrb	r3, [r7, #15]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d126      	bne.n	80101e6 <f_readdir+0x70>
		if (!fno) {
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d106      	bne.n	80101ac <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801019e:	2100      	movs	r1, #0
 80101a0:	6878      	ldr	r0, [r7, #4]
 80101a2:	f7fe f97c 	bl	800e49e <dir_sdi>
 80101a6:	4603      	mov	r3, r0
 80101a8:	73fb      	strb	r3, [r7, #15]
 80101aa:	e01c      	b.n	80101e6 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 80101ac:	2100      	movs	r1, #0
 80101ae:	6878      	ldr	r0, [r7, #4]
 80101b0:	f7fe fb5a 	bl	800e868 <dir_read>
 80101b4:	4603      	mov	r3, r0
 80101b6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80101b8:	7bfb      	ldrb	r3, [r7, #15]
 80101ba:	2b04      	cmp	r3, #4
 80101bc:	d101      	bne.n	80101c2 <f_readdir+0x4c>
 80101be:	2300      	movs	r3, #0
 80101c0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80101c2:	7bfb      	ldrb	r3, [r7, #15]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d10e      	bne.n	80101e6 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80101c8:	6839      	ldr	r1, [r7, #0]
 80101ca:	6878      	ldr	r0, [r7, #4]
 80101cc:	f7fe fc30 	bl	800ea30 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80101d0:	2100      	movs	r1, #0
 80101d2:	6878      	ldr	r0, [r7, #4]
 80101d4:	f7fe f9ec 	bl	800e5b0 <dir_next>
 80101d8:	4603      	mov	r3, r0
 80101da:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80101dc:	7bfb      	ldrb	r3, [r7, #15]
 80101de:	2b04      	cmp	r3, #4
 80101e0:	d101      	bne.n	80101e6 <f_readdir+0x70>
 80101e2:	2300      	movs	r3, #0
 80101e4:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80101e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80101e8:	4618      	mov	r0, r3
 80101ea:	3710      	adds	r7, #16
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bd80      	pop	{r7, pc}

080101f0 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b092      	sub	sp, #72	; 0x48
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	60f8      	str	r0, [r7, #12]
 80101f8:	60b9      	str	r1, [r7, #8]
 80101fa:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80101fc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8010200:	f107 030c 	add.w	r3, r7, #12
 8010204:	2200      	movs	r2, #0
 8010206:	4618      	mov	r0, r3
 8010208:	f7fe fe16 	bl	800ee38 <find_volume>
 801020c:	4603      	mov	r3, r0
 801020e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8010212:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010216:	2b00      	cmp	r3, #0
 8010218:	f040 8099 	bne.w	801034e <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 801021c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8010222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010224:	695a      	ldr	r2, [r3, #20]
 8010226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010228:	699b      	ldr	r3, [r3, #24]
 801022a:	3b02      	subs	r3, #2
 801022c:	429a      	cmp	r2, r3
 801022e:	d804      	bhi.n	801023a <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8010230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010232:	695a      	ldr	r2, [r3, #20]
 8010234:	68bb      	ldr	r3, [r7, #8]
 8010236:	601a      	str	r2, [r3, #0]
 8010238:	e089      	b.n	801034e <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 801023a:	2300      	movs	r3, #0
 801023c:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 801023e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010240:	781b      	ldrb	r3, [r3, #0]
 8010242:	2b01      	cmp	r3, #1
 8010244:	d128      	bne.n	8010298 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8010246:	2302      	movs	r3, #2
 8010248:	63fb      	str	r3, [r7, #60]	; 0x3c
 801024a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801024c:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 801024e:	f107 0314 	add.w	r3, r7, #20
 8010252:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010254:	4618      	mov	r0, r3
 8010256:	f7fd fe06 	bl	800de66 <get_fat>
 801025a:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 801025c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801025e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010262:	d103      	bne.n	801026c <f_getfree+0x7c>
 8010264:	2301      	movs	r3, #1
 8010266:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801026a:	e063      	b.n	8010334 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 801026c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801026e:	2b01      	cmp	r3, #1
 8010270:	d103      	bne.n	801027a <f_getfree+0x8a>
 8010272:	2302      	movs	r3, #2
 8010274:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8010278:	e05c      	b.n	8010334 <f_getfree+0x144>
					if (stat == 0) nfree++;
 801027a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801027c:	2b00      	cmp	r3, #0
 801027e:	d102      	bne.n	8010286 <f_getfree+0x96>
 8010280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010282:	3301      	adds	r3, #1
 8010284:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8010286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010288:	3301      	adds	r3, #1
 801028a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801028c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801028e:	699b      	ldr	r3, [r3, #24]
 8010290:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010292:	429a      	cmp	r2, r3
 8010294:	d3db      	bcc.n	801024e <f_getfree+0x5e>
 8010296:	e04d      	b.n	8010334 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8010298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801029a:	699b      	ldr	r3, [r3, #24]
 801029c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801029e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102a2:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80102a4:	2300      	movs	r3, #0
 80102a6:	637b      	str	r3, [r7, #52]	; 0x34
 80102a8:	2300      	movs	r3, #0
 80102aa:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80102ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d113      	bne.n	80102da <f_getfree+0xea>
							res = move_window(fs, sect++);
 80102b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80102b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102b6:	1c5a      	adds	r2, r3, #1
 80102b8:	63ba      	str	r2, [r7, #56]	; 0x38
 80102ba:	4619      	mov	r1, r3
 80102bc:	f7fd fd16 	bl	800dcec <move_window>
 80102c0:	4603      	mov	r3, r0
 80102c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80102c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d131      	bne.n	8010332 <f_getfree+0x142>
							p = fs->win;
 80102ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102d0:	3334      	adds	r3, #52	; 0x34
 80102d2:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80102d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102d6:	899b      	ldrh	r3, [r3, #12]
 80102d8:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80102da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102dc:	781b      	ldrb	r3, [r3, #0]
 80102de:	2b02      	cmp	r3, #2
 80102e0:	d10f      	bne.n	8010302 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80102e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80102e4:	f7fd fa52 	bl	800d78c <ld_word>
 80102e8:	4603      	mov	r3, r0
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d102      	bne.n	80102f4 <f_getfree+0x104>
 80102ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102f0:	3301      	adds	r3, #1
 80102f2:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 80102f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102f6:	3302      	adds	r3, #2
 80102f8:	633b      	str	r3, [r7, #48]	; 0x30
 80102fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102fc:	3b02      	subs	r3, #2
 80102fe:	637b      	str	r3, [r7, #52]	; 0x34
 8010300:	e010      	b.n	8010324 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8010302:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010304:	f7fd fa5a 	bl	800d7bc <ld_dword>
 8010308:	4603      	mov	r3, r0
 801030a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801030e:	2b00      	cmp	r3, #0
 8010310:	d102      	bne.n	8010318 <f_getfree+0x128>
 8010312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010314:	3301      	adds	r3, #1
 8010316:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8010318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801031a:	3304      	adds	r3, #4
 801031c:	633b      	str	r3, [r7, #48]	; 0x30
 801031e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010320:	3b04      	subs	r3, #4
 8010322:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8010324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010326:	3b01      	subs	r3, #1
 8010328:	63fb      	str	r3, [r7, #60]	; 0x3c
 801032a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801032c:	2b00      	cmp	r3, #0
 801032e:	d1bd      	bne.n	80102ac <f_getfree+0xbc>
 8010330:	e000      	b.n	8010334 <f_getfree+0x144>
							if (res != FR_OK) break;
 8010332:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8010334:	68bb      	ldr	r3, [r7, #8]
 8010336:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010338:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 801033a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801033c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801033e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8010340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010342:	791a      	ldrb	r2, [r3, #4]
 8010344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010346:	f042 0201 	orr.w	r2, r2, #1
 801034a:	b2d2      	uxtb	r2, r2
 801034c:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 801034e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8010352:	4618      	mov	r0, r3
 8010354:	3748      	adds	r7, #72	; 0x48
 8010356:	46bd      	mov	sp, r7
 8010358:	bd80      	pop	{r7, pc}

0801035a <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 801035a:	b580      	push	{r7, lr}
 801035c:	b084      	sub	sp, #16
 801035e:	af00      	add	r7, sp, #0
 8010360:	6078      	str	r0, [r7, #4]
 8010362:	460b      	mov	r3, r1
 8010364:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8010366:	78fb      	ldrb	r3, [r7, #3]
 8010368:	2b0a      	cmp	r3, #10
 801036a:	d103      	bne.n	8010374 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 801036c:	210d      	movs	r1, #13
 801036e:	6878      	ldr	r0, [r7, #4]
 8010370:	f7ff fff3 	bl	801035a <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	685b      	ldr	r3, [r3, #4]
 8010378:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	2b00      	cmp	r3, #0
 801037e:	db25      	blt.n	80103cc <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	1c5a      	adds	r2, r3, #1
 8010384:	60fa      	str	r2, [r7, #12]
 8010386:	687a      	ldr	r2, [r7, #4]
 8010388:	4413      	add	r3, r2
 801038a:	78fa      	ldrb	r2, [r7, #3]
 801038c:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	2b3c      	cmp	r3, #60	; 0x3c
 8010392:	dd12      	ble.n	80103ba <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	6818      	ldr	r0, [r3, #0]
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	f103 010c 	add.w	r1, r3, #12
 801039e:	68fa      	ldr	r2, [r7, #12]
 80103a0:	f107 0308 	add.w	r3, r7, #8
 80103a4:	f7ff fa14 	bl	800f7d0 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80103a8:	68ba      	ldr	r2, [r7, #8]
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	429a      	cmp	r2, r3
 80103ae:	d101      	bne.n	80103b4 <putc_bfd+0x5a>
 80103b0:	2300      	movs	r3, #0
 80103b2:	e001      	b.n	80103b8 <putc_bfd+0x5e>
 80103b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80103b8:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	68fa      	ldr	r2, [r7, #12]
 80103be:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	689b      	ldr	r3, [r3, #8]
 80103c4:	1c5a      	adds	r2, r3, #1
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	609a      	str	r2, [r3, #8]
 80103ca:	e000      	b.n	80103ce <putc_bfd+0x74>
	if (i < 0) return;
 80103cc:	bf00      	nop
}
 80103ce:	3710      	adds	r7, #16
 80103d0:	46bd      	mov	sp, r7
 80103d2:	bd80      	pop	{r7, pc}

080103d4 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b084      	sub	sp, #16
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	685b      	ldr	r3, [r3, #4]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	db17      	blt.n	8010414 <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	6818      	ldr	r0, [r3, #0]
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	f103 010c 	add.w	r1, r3, #12
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	685b      	ldr	r3, [r3, #4]
 80103f2:	461a      	mov	r2, r3
 80103f4:	f107 030c 	add.w	r3, r7, #12
 80103f8:	f7ff f9ea 	bl	800f7d0 <f_write>
 80103fc:	4603      	mov	r3, r0
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d108      	bne.n	8010414 <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	685b      	ldr	r3, [r3, #4]
 8010406:	461a      	mov	r2, r3
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	429a      	cmp	r2, r3
 801040c:	d102      	bne.n	8010414 <putc_flush+0x40>
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	689b      	ldr	r3, [r3, #8]
 8010412:	e001      	b.n	8010418 <putc_flush+0x44>
	return EOF;
 8010414:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8010418:	4618      	mov	r0, r3
 801041a:	3710      	adds	r7, #16
 801041c:	46bd      	mov	sp, r7
 801041e:	bd80      	pop	{r7, pc}

08010420 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8010420:	b480      	push	{r7}
 8010422:	b083      	sub	sp, #12
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
 8010428:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	683a      	ldr	r2, [r7, #0]
 801042e:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	2200      	movs	r2, #0
 8010434:	605a      	str	r2, [r3, #4]
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	685a      	ldr	r2, [r3, #4]
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	609a      	str	r2, [r3, #8]
}
 801043e:	bf00      	nop
 8010440:	370c      	adds	r7, #12
 8010442:	46bd      	mov	sp, r7
 8010444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010448:	4770      	bx	lr

0801044a <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 801044a:	b580      	push	{r7, lr}
 801044c:	b096      	sub	sp, #88	; 0x58
 801044e:	af00      	add	r7, sp, #0
 8010450:	6078      	str	r0, [r7, #4]
 8010452:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8010454:	f107 030c 	add.w	r3, r7, #12
 8010458:	6839      	ldr	r1, [r7, #0]
 801045a:	4618      	mov	r0, r3
 801045c:	f7ff ffe0 	bl	8010420 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8010460:	e009      	b.n	8010476 <f_puts+0x2c>
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	1c5a      	adds	r2, r3, #1
 8010466:	607a      	str	r2, [r7, #4]
 8010468:	781a      	ldrb	r2, [r3, #0]
 801046a:	f107 030c 	add.w	r3, r7, #12
 801046e:	4611      	mov	r1, r2
 8010470:	4618      	mov	r0, r3
 8010472:	f7ff ff72 	bl	801035a <putc_bfd>
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	781b      	ldrb	r3, [r3, #0]
 801047a:	2b00      	cmp	r3, #0
 801047c:	d1f1      	bne.n	8010462 <f_puts+0x18>
	return putc_flush(&pb);
 801047e:	f107 030c 	add.w	r3, r7, #12
 8010482:	4618      	mov	r0, r3
 8010484:	f7ff ffa6 	bl	80103d4 <putc_flush>
 8010488:	4603      	mov	r3, r0
}
 801048a:	4618      	mov	r0, r3
 801048c:	3758      	adds	r7, #88	; 0x58
 801048e:	46bd      	mov	sp, r7
 8010490:	bd80      	pop	{r7, pc}
	...

08010494 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010494:	b480      	push	{r7}
 8010496:	b087      	sub	sp, #28
 8010498:	af00      	add	r7, sp, #0
 801049a:	60f8      	str	r0, [r7, #12]
 801049c:	60b9      	str	r1, [r7, #8]
 801049e:	4613      	mov	r3, r2
 80104a0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80104a2:	2301      	movs	r3, #1
 80104a4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80104a6:	2300      	movs	r3, #0
 80104a8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80104aa:	4b1f      	ldr	r3, [pc, #124]	; (8010528 <FATFS_LinkDriverEx+0x94>)
 80104ac:	7a5b      	ldrb	r3, [r3, #9]
 80104ae:	b2db      	uxtb	r3, r3
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d131      	bne.n	8010518 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80104b4:	4b1c      	ldr	r3, [pc, #112]	; (8010528 <FATFS_LinkDriverEx+0x94>)
 80104b6:	7a5b      	ldrb	r3, [r3, #9]
 80104b8:	b2db      	uxtb	r3, r3
 80104ba:	461a      	mov	r2, r3
 80104bc:	4b1a      	ldr	r3, [pc, #104]	; (8010528 <FATFS_LinkDriverEx+0x94>)
 80104be:	2100      	movs	r1, #0
 80104c0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80104c2:	4b19      	ldr	r3, [pc, #100]	; (8010528 <FATFS_LinkDriverEx+0x94>)
 80104c4:	7a5b      	ldrb	r3, [r3, #9]
 80104c6:	b2db      	uxtb	r3, r3
 80104c8:	4a17      	ldr	r2, [pc, #92]	; (8010528 <FATFS_LinkDriverEx+0x94>)
 80104ca:	009b      	lsls	r3, r3, #2
 80104cc:	4413      	add	r3, r2
 80104ce:	68fa      	ldr	r2, [r7, #12]
 80104d0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80104d2:	4b15      	ldr	r3, [pc, #84]	; (8010528 <FATFS_LinkDriverEx+0x94>)
 80104d4:	7a5b      	ldrb	r3, [r3, #9]
 80104d6:	b2db      	uxtb	r3, r3
 80104d8:	461a      	mov	r2, r3
 80104da:	4b13      	ldr	r3, [pc, #76]	; (8010528 <FATFS_LinkDriverEx+0x94>)
 80104dc:	4413      	add	r3, r2
 80104de:	79fa      	ldrb	r2, [r7, #7]
 80104e0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80104e2:	4b11      	ldr	r3, [pc, #68]	; (8010528 <FATFS_LinkDriverEx+0x94>)
 80104e4:	7a5b      	ldrb	r3, [r3, #9]
 80104e6:	b2db      	uxtb	r3, r3
 80104e8:	1c5a      	adds	r2, r3, #1
 80104ea:	b2d1      	uxtb	r1, r2
 80104ec:	4a0e      	ldr	r2, [pc, #56]	; (8010528 <FATFS_LinkDriverEx+0x94>)
 80104ee:	7251      	strb	r1, [r2, #9]
 80104f0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80104f2:	7dbb      	ldrb	r3, [r7, #22]
 80104f4:	3330      	adds	r3, #48	; 0x30
 80104f6:	b2da      	uxtb	r2, r3
 80104f8:	68bb      	ldr	r3, [r7, #8]
 80104fa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80104fc:	68bb      	ldr	r3, [r7, #8]
 80104fe:	3301      	adds	r3, #1
 8010500:	223a      	movs	r2, #58	; 0x3a
 8010502:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010504:	68bb      	ldr	r3, [r7, #8]
 8010506:	3302      	adds	r3, #2
 8010508:	222f      	movs	r2, #47	; 0x2f
 801050a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801050c:	68bb      	ldr	r3, [r7, #8]
 801050e:	3303      	adds	r3, #3
 8010510:	2200      	movs	r2, #0
 8010512:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010514:	2300      	movs	r3, #0
 8010516:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010518:	7dfb      	ldrb	r3, [r7, #23]
}
 801051a:	4618      	mov	r0, r3
 801051c:	371c      	adds	r7, #28
 801051e:	46bd      	mov	sp, r7
 8010520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010524:	4770      	bx	lr
 8010526:	bf00      	nop
 8010528:	20000864 	.word	0x20000864

0801052c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801052c:	b580      	push	{r7, lr}
 801052e:	b082      	sub	sp, #8
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
 8010534:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010536:	2200      	movs	r2, #0
 8010538:	6839      	ldr	r1, [r7, #0]
 801053a:	6878      	ldr	r0, [r7, #4]
 801053c:	f7ff ffaa 	bl	8010494 <FATFS_LinkDriverEx>
 8010540:	4603      	mov	r3, r0
}
 8010542:	4618      	mov	r0, r3
 8010544:	3708      	adds	r7, #8
 8010546:	46bd      	mov	sp, r7
 8010548:	bd80      	pop	{r7, pc}
	...

0801054c <__errno>:
 801054c:	4b01      	ldr	r3, [pc, #4]	; (8010554 <__errno+0x8>)
 801054e:	6818      	ldr	r0, [r3, #0]
 8010550:	4770      	bx	lr
 8010552:	bf00      	nop
 8010554:	20000168 	.word	0x20000168

08010558 <__libc_init_array>:
 8010558:	b570      	push	{r4, r5, r6, lr}
 801055a:	4e0d      	ldr	r6, [pc, #52]	; (8010590 <__libc_init_array+0x38>)
 801055c:	4c0d      	ldr	r4, [pc, #52]	; (8010594 <__libc_init_array+0x3c>)
 801055e:	1ba4      	subs	r4, r4, r6
 8010560:	10a4      	asrs	r4, r4, #2
 8010562:	2500      	movs	r5, #0
 8010564:	42a5      	cmp	r5, r4
 8010566:	d109      	bne.n	801057c <__libc_init_array+0x24>
 8010568:	4e0b      	ldr	r6, [pc, #44]	; (8010598 <__libc_init_array+0x40>)
 801056a:	4c0c      	ldr	r4, [pc, #48]	; (801059c <__libc_init_array+0x44>)
 801056c:	f004 fb66 	bl	8014c3c <_init>
 8010570:	1ba4      	subs	r4, r4, r6
 8010572:	10a4      	asrs	r4, r4, #2
 8010574:	2500      	movs	r5, #0
 8010576:	42a5      	cmp	r5, r4
 8010578:	d105      	bne.n	8010586 <__libc_init_array+0x2e>
 801057a:	bd70      	pop	{r4, r5, r6, pc}
 801057c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010580:	4798      	blx	r3
 8010582:	3501      	adds	r5, #1
 8010584:	e7ee      	b.n	8010564 <__libc_init_array+0xc>
 8010586:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801058a:	4798      	blx	r3
 801058c:	3501      	adds	r5, #1
 801058e:	e7f2      	b.n	8010576 <__libc_init_array+0x1e>
 8010590:	080154e8 	.word	0x080154e8
 8010594:	080154e8 	.word	0x080154e8
 8010598:	080154e8 	.word	0x080154e8
 801059c:	080154ec 	.word	0x080154ec

080105a0 <memcpy>:
 80105a0:	b510      	push	{r4, lr}
 80105a2:	1e43      	subs	r3, r0, #1
 80105a4:	440a      	add	r2, r1
 80105a6:	4291      	cmp	r1, r2
 80105a8:	d100      	bne.n	80105ac <memcpy+0xc>
 80105aa:	bd10      	pop	{r4, pc}
 80105ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80105b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80105b4:	e7f7      	b.n	80105a6 <memcpy+0x6>

080105b6 <memset>:
 80105b6:	4402      	add	r2, r0
 80105b8:	4603      	mov	r3, r0
 80105ba:	4293      	cmp	r3, r2
 80105bc:	d100      	bne.n	80105c0 <memset+0xa>
 80105be:	4770      	bx	lr
 80105c0:	f803 1b01 	strb.w	r1, [r3], #1
 80105c4:	e7f9      	b.n	80105ba <memset+0x4>

080105c6 <__cvt>:
 80105c6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80105ca:	ec55 4b10 	vmov	r4, r5, d0
 80105ce:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80105d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80105d4:	2d00      	cmp	r5, #0
 80105d6:	460e      	mov	r6, r1
 80105d8:	4691      	mov	r9, r2
 80105da:	4619      	mov	r1, r3
 80105dc:	bfb8      	it	lt
 80105de:	4622      	movlt	r2, r4
 80105e0:	462b      	mov	r3, r5
 80105e2:	f027 0720 	bic.w	r7, r7, #32
 80105e6:	bfbb      	ittet	lt
 80105e8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80105ec:	461d      	movlt	r5, r3
 80105ee:	2300      	movge	r3, #0
 80105f0:	232d      	movlt	r3, #45	; 0x2d
 80105f2:	bfb8      	it	lt
 80105f4:	4614      	movlt	r4, r2
 80105f6:	2f46      	cmp	r7, #70	; 0x46
 80105f8:	700b      	strb	r3, [r1, #0]
 80105fa:	d004      	beq.n	8010606 <__cvt+0x40>
 80105fc:	2f45      	cmp	r7, #69	; 0x45
 80105fe:	d100      	bne.n	8010602 <__cvt+0x3c>
 8010600:	3601      	adds	r6, #1
 8010602:	2102      	movs	r1, #2
 8010604:	e000      	b.n	8010608 <__cvt+0x42>
 8010606:	2103      	movs	r1, #3
 8010608:	ab03      	add	r3, sp, #12
 801060a:	9301      	str	r3, [sp, #4]
 801060c:	ab02      	add	r3, sp, #8
 801060e:	9300      	str	r3, [sp, #0]
 8010610:	4632      	mov	r2, r6
 8010612:	4653      	mov	r3, sl
 8010614:	ec45 4b10 	vmov	d0, r4, r5
 8010618:	f000 fe1a 	bl	8011250 <_dtoa_r>
 801061c:	2f47      	cmp	r7, #71	; 0x47
 801061e:	4680      	mov	r8, r0
 8010620:	d102      	bne.n	8010628 <__cvt+0x62>
 8010622:	f019 0f01 	tst.w	r9, #1
 8010626:	d026      	beq.n	8010676 <__cvt+0xb0>
 8010628:	2f46      	cmp	r7, #70	; 0x46
 801062a:	eb08 0906 	add.w	r9, r8, r6
 801062e:	d111      	bne.n	8010654 <__cvt+0x8e>
 8010630:	f898 3000 	ldrb.w	r3, [r8]
 8010634:	2b30      	cmp	r3, #48	; 0x30
 8010636:	d10a      	bne.n	801064e <__cvt+0x88>
 8010638:	2200      	movs	r2, #0
 801063a:	2300      	movs	r3, #0
 801063c:	4620      	mov	r0, r4
 801063e:	4629      	mov	r1, r5
 8010640:	f7f0 fa42 	bl	8000ac8 <__aeabi_dcmpeq>
 8010644:	b918      	cbnz	r0, 801064e <__cvt+0x88>
 8010646:	f1c6 0601 	rsb	r6, r6, #1
 801064a:	f8ca 6000 	str.w	r6, [sl]
 801064e:	f8da 3000 	ldr.w	r3, [sl]
 8010652:	4499      	add	r9, r3
 8010654:	2200      	movs	r2, #0
 8010656:	2300      	movs	r3, #0
 8010658:	4620      	mov	r0, r4
 801065a:	4629      	mov	r1, r5
 801065c:	f7f0 fa34 	bl	8000ac8 <__aeabi_dcmpeq>
 8010660:	b938      	cbnz	r0, 8010672 <__cvt+0xac>
 8010662:	2230      	movs	r2, #48	; 0x30
 8010664:	9b03      	ldr	r3, [sp, #12]
 8010666:	454b      	cmp	r3, r9
 8010668:	d205      	bcs.n	8010676 <__cvt+0xb0>
 801066a:	1c59      	adds	r1, r3, #1
 801066c:	9103      	str	r1, [sp, #12]
 801066e:	701a      	strb	r2, [r3, #0]
 8010670:	e7f8      	b.n	8010664 <__cvt+0x9e>
 8010672:	f8cd 900c 	str.w	r9, [sp, #12]
 8010676:	9b03      	ldr	r3, [sp, #12]
 8010678:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801067a:	eba3 0308 	sub.w	r3, r3, r8
 801067e:	4640      	mov	r0, r8
 8010680:	6013      	str	r3, [r2, #0]
 8010682:	b004      	add	sp, #16
 8010684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010688 <__exponent>:
 8010688:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801068a:	2900      	cmp	r1, #0
 801068c:	4604      	mov	r4, r0
 801068e:	bfba      	itte	lt
 8010690:	4249      	neglt	r1, r1
 8010692:	232d      	movlt	r3, #45	; 0x2d
 8010694:	232b      	movge	r3, #43	; 0x2b
 8010696:	2909      	cmp	r1, #9
 8010698:	f804 2b02 	strb.w	r2, [r4], #2
 801069c:	7043      	strb	r3, [r0, #1]
 801069e:	dd20      	ble.n	80106e2 <__exponent+0x5a>
 80106a0:	f10d 0307 	add.w	r3, sp, #7
 80106a4:	461f      	mov	r7, r3
 80106a6:	260a      	movs	r6, #10
 80106a8:	fb91 f5f6 	sdiv	r5, r1, r6
 80106ac:	fb06 1115 	mls	r1, r6, r5, r1
 80106b0:	3130      	adds	r1, #48	; 0x30
 80106b2:	2d09      	cmp	r5, #9
 80106b4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80106b8:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80106bc:	4629      	mov	r1, r5
 80106be:	dc09      	bgt.n	80106d4 <__exponent+0x4c>
 80106c0:	3130      	adds	r1, #48	; 0x30
 80106c2:	3b02      	subs	r3, #2
 80106c4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80106c8:	42bb      	cmp	r3, r7
 80106ca:	4622      	mov	r2, r4
 80106cc:	d304      	bcc.n	80106d8 <__exponent+0x50>
 80106ce:	1a10      	subs	r0, r2, r0
 80106d0:	b003      	add	sp, #12
 80106d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106d4:	4613      	mov	r3, r2
 80106d6:	e7e7      	b.n	80106a8 <__exponent+0x20>
 80106d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80106dc:	f804 2b01 	strb.w	r2, [r4], #1
 80106e0:	e7f2      	b.n	80106c8 <__exponent+0x40>
 80106e2:	2330      	movs	r3, #48	; 0x30
 80106e4:	4419      	add	r1, r3
 80106e6:	7083      	strb	r3, [r0, #2]
 80106e8:	1d02      	adds	r2, r0, #4
 80106ea:	70c1      	strb	r1, [r0, #3]
 80106ec:	e7ef      	b.n	80106ce <__exponent+0x46>
	...

080106f0 <_printf_float>:
 80106f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106f4:	b08d      	sub	sp, #52	; 0x34
 80106f6:	460c      	mov	r4, r1
 80106f8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80106fc:	4616      	mov	r6, r2
 80106fe:	461f      	mov	r7, r3
 8010700:	4605      	mov	r5, r0
 8010702:	f001 fcd7 	bl	80120b4 <_localeconv_r>
 8010706:	6803      	ldr	r3, [r0, #0]
 8010708:	9304      	str	r3, [sp, #16]
 801070a:	4618      	mov	r0, r3
 801070c:	f7ef fd60 	bl	80001d0 <strlen>
 8010710:	2300      	movs	r3, #0
 8010712:	930a      	str	r3, [sp, #40]	; 0x28
 8010714:	f8d8 3000 	ldr.w	r3, [r8]
 8010718:	9005      	str	r0, [sp, #20]
 801071a:	3307      	adds	r3, #7
 801071c:	f023 0307 	bic.w	r3, r3, #7
 8010720:	f103 0208 	add.w	r2, r3, #8
 8010724:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010728:	f8d4 b000 	ldr.w	fp, [r4]
 801072c:	f8c8 2000 	str.w	r2, [r8]
 8010730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010734:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010738:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801073c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010740:	9307      	str	r3, [sp, #28]
 8010742:	f8cd 8018 	str.w	r8, [sp, #24]
 8010746:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801074a:	4ba7      	ldr	r3, [pc, #668]	; (80109e8 <_printf_float+0x2f8>)
 801074c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010750:	f7f0 f9ec 	bl	8000b2c <__aeabi_dcmpun>
 8010754:	bb70      	cbnz	r0, 80107b4 <_printf_float+0xc4>
 8010756:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801075a:	4ba3      	ldr	r3, [pc, #652]	; (80109e8 <_printf_float+0x2f8>)
 801075c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010760:	f7f0 f9c6 	bl	8000af0 <__aeabi_dcmple>
 8010764:	bb30      	cbnz	r0, 80107b4 <_printf_float+0xc4>
 8010766:	2200      	movs	r2, #0
 8010768:	2300      	movs	r3, #0
 801076a:	4640      	mov	r0, r8
 801076c:	4649      	mov	r1, r9
 801076e:	f7f0 f9b5 	bl	8000adc <__aeabi_dcmplt>
 8010772:	b110      	cbz	r0, 801077a <_printf_float+0x8a>
 8010774:	232d      	movs	r3, #45	; 0x2d
 8010776:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801077a:	4a9c      	ldr	r2, [pc, #624]	; (80109ec <_printf_float+0x2fc>)
 801077c:	4b9c      	ldr	r3, [pc, #624]	; (80109f0 <_printf_float+0x300>)
 801077e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8010782:	bf8c      	ite	hi
 8010784:	4690      	movhi	r8, r2
 8010786:	4698      	movls	r8, r3
 8010788:	2303      	movs	r3, #3
 801078a:	f02b 0204 	bic.w	r2, fp, #4
 801078e:	6123      	str	r3, [r4, #16]
 8010790:	6022      	str	r2, [r4, #0]
 8010792:	f04f 0900 	mov.w	r9, #0
 8010796:	9700      	str	r7, [sp, #0]
 8010798:	4633      	mov	r3, r6
 801079a:	aa0b      	add	r2, sp, #44	; 0x2c
 801079c:	4621      	mov	r1, r4
 801079e:	4628      	mov	r0, r5
 80107a0:	f000 f9e6 	bl	8010b70 <_printf_common>
 80107a4:	3001      	adds	r0, #1
 80107a6:	f040 808d 	bne.w	80108c4 <_printf_float+0x1d4>
 80107aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80107ae:	b00d      	add	sp, #52	; 0x34
 80107b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107b4:	4642      	mov	r2, r8
 80107b6:	464b      	mov	r3, r9
 80107b8:	4640      	mov	r0, r8
 80107ba:	4649      	mov	r1, r9
 80107bc:	f7f0 f9b6 	bl	8000b2c <__aeabi_dcmpun>
 80107c0:	b110      	cbz	r0, 80107c8 <_printf_float+0xd8>
 80107c2:	4a8c      	ldr	r2, [pc, #560]	; (80109f4 <_printf_float+0x304>)
 80107c4:	4b8c      	ldr	r3, [pc, #560]	; (80109f8 <_printf_float+0x308>)
 80107c6:	e7da      	b.n	801077e <_printf_float+0x8e>
 80107c8:	6861      	ldr	r1, [r4, #4]
 80107ca:	1c4b      	adds	r3, r1, #1
 80107cc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80107d0:	a80a      	add	r0, sp, #40	; 0x28
 80107d2:	d13e      	bne.n	8010852 <_printf_float+0x162>
 80107d4:	2306      	movs	r3, #6
 80107d6:	6063      	str	r3, [r4, #4]
 80107d8:	2300      	movs	r3, #0
 80107da:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80107de:	ab09      	add	r3, sp, #36	; 0x24
 80107e0:	9300      	str	r3, [sp, #0]
 80107e2:	ec49 8b10 	vmov	d0, r8, r9
 80107e6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80107ea:	6022      	str	r2, [r4, #0]
 80107ec:	f8cd a004 	str.w	sl, [sp, #4]
 80107f0:	6861      	ldr	r1, [r4, #4]
 80107f2:	4628      	mov	r0, r5
 80107f4:	f7ff fee7 	bl	80105c6 <__cvt>
 80107f8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80107fc:	2b47      	cmp	r3, #71	; 0x47
 80107fe:	4680      	mov	r8, r0
 8010800:	d109      	bne.n	8010816 <_printf_float+0x126>
 8010802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010804:	1cd8      	adds	r0, r3, #3
 8010806:	db02      	blt.n	801080e <_printf_float+0x11e>
 8010808:	6862      	ldr	r2, [r4, #4]
 801080a:	4293      	cmp	r3, r2
 801080c:	dd47      	ble.n	801089e <_printf_float+0x1ae>
 801080e:	f1aa 0a02 	sub.w	sl, sl, #2
 8010812:	fa5f fa8a 	uxtb.w	sl, sl
 8010816:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801081a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801081c:	d824      	bhi.n	8010868 <_printf_float+0x178>
 801081e:	3901      	subs	r1, #1
 8010820:	4652      	mov	r2, sl
 8010822:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010826:	9109      	str	r1, [sp, #36]	; 0x24
 8010828:	f7ff ff2e 	bl	8010688 <__exponent>
 801082c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801082e:	1813      	adds	r3, r2, r0
 8010830:	2a01      	cmp	r2, #1
 8010832:	4681      	mov	r9, r0
 8010834:	6123      	str	r3, [r4, #16]
 8010836:	dc02      	bgt.n	801083e <_printf_float+0x14e>
 8010838:	6822      	ldr	r2, [r4, #0]
 801083a:	07d1      	lsls	r1, r2, #31
 801083c:	d501      	bpl.n	8010842 <_printf_float+0x152>
 801083e:	3301      	adds	r3, #1
 8010840:	6123      	str	r3, [r4, #16]
 8010842:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010846:	2b00      	cmp	r3, #0
 8010848:	d0a5      	beq.n	8010796 <_printf_float+0xa6>
 801084a:	232d      	movs	r3, #45	; 0x2d
 801084c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010850:	e7a1      	b.n	8010796 <_printf_float+0xa6>
 8010852:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8010856:	f000 8177 	beq.w	8010b48 <_printf_float+0x458>
 801085a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801085e:	d1bb      	bne.n	80107d8 <_printf_float+0xe8>
 8010860:	2900      	cmp	r1, #0
 8010862:	d1b9      	bne.n	80107d8 <_printf_float+0xe8>
 8010864:	2301      	movs	r3, #1
 8010866:	e7b6      	b.n	80107d6 <_printf_float+0xe6>
 8010868:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801086c:	d119      	bne.n	80108a2 <_printf_float+0x1b2>
 801086e:	2900      	cmp	r1, #0
 8010870:	6863      	ldr	r3, [r4, #4]
 8010872:	dd0c      	ble.n	801088e <_printf_float+0x19e>
 8010874:	6121      	str	r1, [r4, #16]
 8010876:	b913      	cbnz	r3, 801087e <_printf_float+0x18e>
 8010878:	6822      	ldr	r2, [r4, #0]
 801087a:	07d2      	lsls	r2, r2, #31
 801087c:	d502      	bpl.n	8010884 <_printf_float+0x194>
 801087e:	3301      	adds	r3, #1
 8010880:	440b      	add	r3, r1
 8010882:	6123      	str	r3, [r4, #16]
 8010884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010886:	65a3      	str	r3, [r4, #88]	; 0x58
 8010888:	f04f 0900 	mov.w	r9, #0
 801088c:	e7d9      	b.n	8010842 <_printf_float+0x152>
 801088e:	b913      	cbnz	r3, 8010896 <_printf_float+0x1a6>
 8010890:	6822      	ldr	r2, [r4, #0]
 8010892:	07d0      	lsls	r0, r2, #31
 8010894:	d501      	bpl.n	801089a <_printf_float+0x1aa>
 8010896:	3302      	adds	r3, #2
 8010898:	e7f3      	b.n	8010882 <_printf_float+0x192>
 801089a:	2301      	movs	r3, #1
 801089c:	e7f1      	b.n	8010882 <_printf_float+0x192>
 801089e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80108a2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80108a6:	4293      	cmp	r3, r2
 80108a8:	db05      	blt.n	80108b6 <_printf_float+0x1c6>
 80108aa:	6822      	ldr	r2, [r4, #0]
 80108ac:	6123      	str	r3, [r4, #16]
 80108ae:	07d1      	lsls	r1, r2, #31
 80108b0:	d5e8      	bpl.n	8010884 <_printf_float+0x194>
 80108b2:	3301      	adds	r3, #1
 80108b4:	e7e5      	b.n	8010882 <_printf_float+0x192>
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	bfd4      	ite	le
 80108ba:	f1c3 0302 	rsble	r3, r3, #2
 80108be:	2301      	movgt	r3, #1
 80108c0:	4413      	add	r3, r2
 80108c2:	e7de      	b.n	8010882 <_printf_float+0x192>
 80108c4:	6823      	ldr	r3, [r4, #0]
 80108c6:	055a      	lsls	r2, r3, #21
 80108c8:	d407      	bmi.n	80108da <_printf_float+0x1ea>
 80108ca:	6923      	ldr	r3, [r4, #16]
 80108cc:	4642      	mov	r2, r8
 80108ce:	4631      	mov	r1, r6
 80108d0:	4628      	mov	r0, r5
 80108d2:	47b8      	blx	r7
 80108d4:	3001      	adds	r0, #1
 80108d6:	d12b      	bne.n	8010930 <_printf_float+0x240>
 80108d8:	e767      	b.n	80107aa <_printf_float+0xba>
 80108da:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80108de:	f240 80dc 	bls.w	8010a9a <_printf_float+0x3aa>
 80108e2:	2200      	movs	r2, #0
 80108e4:	2300      	movs	r3, #0
 80108e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80108ea:	f7f0 f8ed 	bl	8000ac8 <__aeabi_dcmpeq>
 80108ee:	2800      	cmp	r0, #0
 80108f0:	d033      	beq.n	801095a <_printf_float+0x26a>
 80108f2:	2301      	movs	r3, #1
 80108f4:	4a41      	ldr	r2, [pc, #260]	; (80109fc <_printf_float+0x30c>)
 80108f6:	4631      	mov	r1, r6
 80108f8:	4628      	mov	r0, r5
 80108fa:	47b8      	blx	r7
 80108fc:	3001      	adds	r0, #1
 80108fe:	f43f af54 	beq.w	80107aa <_printf_float+0xba>
 8010902:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010906:	429a      	cmp	r2, r3
 8010908:	db02      	blt.n	8010910 <_printf_float+0x220>
 801090a:	6823      	ldr	r3, [r4, #0]
 801090c:	07d8      	lsls	r0, r3, #31
 801090e:	d50f      	bpl.n	8010930 <_printf_float+0x240>
 8010910:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010914:	4631      	mov	r1, r6
 8010916:	4628      	mov	r0, r5
 8010918:	47b8      	blx	r7
 801091a:	3001      	adds	r0, #1
 801091c:	f43f af45 	beq.w	80107aa <_printf_float+0xba>
 8010920:	f04f 0800 	mov.w	r8, #0
 8010924:	f104 091a 	add.w	r9, r4, #26
 8010928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801092a:	3b01      	subs	r3, #1
 801092c:	4543      	cmp	r3, r8
 801092e:	dc09      	bgt.n	8010944 <_printf_float+0x254>
 8010930:	6823      	ldr	r3, [r4, #0]
 8010932:	079b      	lsls	r3, r3, #30
 8010934:	f100 8103 	bmi.w	8010b3e <_printf_float+0x44e>
 8010938:	68e0      	ldr	r0, [r4, #12]
 801093a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801093c:	4298      	cmp	r0, r3
 801093e:	bfb8      	it	lt
 8010940:	4618      	movlt	r0, r3
 8010942:	e734      	b.n	80107ae <_printf_float+0xbe>
 8010944:	2301      	movs	r3, #1
 8010946:	464a      	mov	r2, r9
 8010948:	4631      	mov	r1, r6
 801094a:	4628      	mov	r0, r5
 801094c:	47b8      	blx	r7
 801094e:	3001      	adds	r0, #1
 8010950:	f43f af2b 	beq.w	80107aa <_printf_float+0xba>
 8010954:	f108 0801 	add.w	r8, r8, #1
 8010958:	e7e6      	b.n	8010928 <_printf_float+0x238>
 801095a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801095c:	2b00      	cmp	r3, #0
 801095e:	dc2b      	bgt.n	80109b8 <_printf_float+0x2c8>
 8010960:	2301      	movs	r3, #1
 8010962:	4a26      	ldr	r2, [pc, #152]	; (80109fc <_printf_float+0x30c>)
 8010964:	4631      	mov	r1, r6
 8010966:	4628      	mov	r0, r5
 8010968:	47b8      	blx	r7
 801096a:	3001      	adds	r0, #1
 801096c:	f43f af1d 	beq.w	80107aa <_printf_float+0xba>
 8010970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010972:	b923      	cbnz	r3, 801097e <_printf_float+0x28e>
 8010974:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010976:	b913      	cbnz	r3, 801097e <_printf_float+0x28e>
 8010978:	6823      	ldr	r3, [r4, #0]
 801097a:	07d9      	lsls	r1, r3, #31
 801097c:	d5d8      	bpl.n	8010930 <_printf_float+0x240>
 801097e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010982:	4631      	mov	r1, r6
 8010984:	4628      	mov	r0, r5
 8010986:	47b8      	blx	r7
 8010988:	3001      	adds	r0, #1
 801098a:	f43f af0e 	beq.w	80107aa <_printf_float+0xba>
 801098e:	f04f 0900 	mov.w	r9, #0
 8010992:	f104 0a1a 	add.w	sl, r4, #26
 8010996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010998:	425b      	negs	r3, r3
 801099a:	454b      	cmp	r3, r9
 801099c:	dc01      	bgt.n	80109a2 <_printf_float+0x2b2>
 801099e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80109a0:	e794      	b.n	80108cc <_printf_float+0x1dc>
 80109a2:	2301      	movs	r3, #1
 80109a4:	4652      	mov	r2, sl
 80109a6:	4631      	mov	r1, r6
 80109a8:	4628      	mov	r0, r5
 80109aa:	47b8      	blx	r7
 80109ac:	3001      	adds	r0, #1
 80109ae:	f43f aefc 	beq.w	80107aa <_printf_float+0xba>
 80109b2:	f109 0901 	add.w	r9, r9, #1
 80109b6:	e7ee      	b.n	8010996 <_printf_float+0x2a6>
 80109b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80109ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80109bc:	429a      	cmp	r2, r3
 80109be:	bfa8      	it	ge
 80109c0:	461a      	movge	r2, r3
 80109c2:	2a00      	cmp	r2, #0
 80109c4:	4691      	mov	r9, r2
 80109c6:	dd07      	ble.n	80109d8 <_printf_float+0x2e8>
 80109c8:	4613      	mov	r3, r2
 80109ca:	4631      	mov	r1, r6
 80109cc:	4642      	mov	r2, r8
 80109ce:	4628      	mov	r0, r5
 80109d0:	47b8      	blx	r7
 80109d2:	3001      	adds	r0, #1
 80109d4:	f43f aee9 	beq.w	80107aa <_printf_float+0xba>
 80109d8:	f104 031a 	add.w	r3, r4, #26
 80109dc:	f04f 0b00 	mov.w	fp, #0
 80109e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80109e4:	9306      	str	r3, [sp, #24]
 80109e6:	e015      	b.n	8010a14 <_printf_float+0x324>
 80109e8:	7fefffff 	.word	0x7fefffff
 80109ec:	080151a8 	.word	0x080151a8
 80109f0:	080151a4 	.word	0x080151a4
 80109f4:	080151b0 	.word	0x080151b0
 80109f8:	080151ac 	.word	0x080151ac
 80109fc:	080151b4 	.word	0x080151b4
 8010a00:	2301      	movs	r3, #1
 8010a02:	9a06      	ldr	r2, [sp, #24]
 8010a04:	4631      	mov	r1, r6
 8010a06:	4628      	mov	r0, r5
 8010a08:	47b8      	blx	r7
 8010a0a:	3001      	adds	r0, #1
 8010a0c:	f43f aecd 	beq.w	80107aa <_printf_float+0xba>
 8010a10:	f10b 0b01 	add.w	fp, fp, #1
 8010a14:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8010a18:	ebaa 0309 	sub.w	r3, sl, r9
 8010a1c:	455b      	cmp	r3, fp
 8010a1e:	dcef      	bgt.n	8010a00 <_printf_float+0x310>
 8010a20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010a24:	429a      	cmp	r2, r3
 8010a26:	44d0      	add	r8, sl
 8010a28:	db15      	blt.n	8010a56 <_printf_float+0x366>
 8010a2a:	6823      	ldr	r3, [r4, #0]
 8010a2c:	07da      	lsls	r2, r3, #31
 8010a2e:	d412      	bmi.n	8010a56 <_printf_float+0x366>
 8010a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010a34:	eba3 020a 	sub.w	r2, r3, sl
 8010a38:	eba3 0a01 	sub.w	sl, r3, r1
 8010a3c:	4592      	cmp	sl, r2
 8010a3e:	bfa8      	it	ge
 8010a40:	4692      	movge	sl, r2
 8010a42:	f1ba 0f00 	cmp.w	sl, #0
 8010a46:	dc0e      	bgt.n	8010a66 <_printf_float+0x376>
 8010a48:	f04f 0800 	mov.w	r8, #0
 8010a4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010a50:	f104 091a 	add.w	r9, r4, #26
 8010a54:	e019      	b.n	8010a8a <_printf_float+0x39a>
 8010a56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010a5a:	4631      	mov	r1, r6
 8010a5c:	4628      	mov	r0, r5
 8010a5e:	47b8      	blx	r7
 8010a60:	3001      	adds	r0, #1
 8010a62:	d1e5      	bne.n	8010a30 <_printf_float+0x340>
 8010a64:	e6a1      	b.n	80107aa <_printf_float+0xba>
 8010a66:	4653      	mov	r3, sl
 8010a68:	4642      	mov	r2, r8
 8010a6a:	4631      	mov	r1, r6
 8010a6c:	4628      	mov	r0, r5
 8010a6e:	47b8      	blx	r7
 8010a70:	3001      	adds	r0, #1
 8010a72:	d1e9      	bne.n	8010a48 <_printf_float+0x358>
 8010a74:	e699      	b.n	80107aa <_printf_float+0xba>
 8010a76:	2301      	movs	r3, #1
 8010a78:	464a      	mov	r2, r9
 8010a7a:	4631      	mov	r1, r6
 8010a7c:	4628      	mov	r0, r5
 8010a7e:	47b8      	blx	r7
 8010a80:	3001      	adds	r0, #1
 8010a82:	f43f ae92 	beq.w	80107aa <_printf_float+0xba>
 8010a86:	f108 0801 	add.w	r8, r8, #1
 8010a8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010a8e:	1a9b      	subs	r3, r3, r2
 8010a90:	eba3 030a 	sub.w	r3, r3, sl
 8010a94:	4543      	cmp	r3, r8
 8010a96:	dcee      	bgt.n	8010a76 <_printf_float+0x386>
 8010a98:	e74a      	b.n	8010930 <_printf_float+0x240>
 8010a9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010a9c:	2a01      	cmp	r2, #1
 8010a9e:	dc01      	bgt.n	8010aa4 <_printf_float+0x3b4>
 8010aa0:	07db      	lsls	r3, r3, #31
 8010aa2:	d53a      	bpl.n	8010b1a <_printf_float+0x42a>
 8010aa4:	2301      	movs	r3, #1
 8010aa6:	4642      	mov	r2, r8
 8010aa8:	4631      	mov	r1, r6
 8010aaa:	4628      	mov	r0, r5
 8010aac:	47b8      	blx	r7
 8010aae:	3001      	adds	r0, #1
 8010ab0:	f43f ae7b 	beq.w	80107aa <_printf_float+0xba>
 8010ab4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010ab8:	4631      	mov	r1, r6
 8010aba:	4628      	mov	r0, r5
 8010abc:	47b8      	blx	r7
 8010abe:	3001      	adds	r0, #1
 8010ac0:	f108 0801 	add.w	r8, r8, #1
 8010ac4:	f43f ae71 	beq.w	80107aa <_printf_float+0xba>
 8010ac8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010aca:	2200      	movs	r2, #0
 8010acc:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8010ad0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	f7ef fff7 	bl	8000ac8 <__aeabi_dcmpeq>
 8010ada:	b9c8      	cbnz	r0, 8010b10 <_printf_float+0x420>
 8010adc:	4653      	mov	r3, sl
 8010ade:	4642      	mov	r2, r8
 8010ae0:	4631      	mov	r1, r6
 8010ae2:	4628      	mov	r0, r5
 8010ae4:	47b8      	blx	r7
 8010ae6:	3001      	adds	r0, #1
 8010ae8:	d10e      	bne.n	8010b08 <_printf_float+0x418>
 8010aea:	e65e      	b.n	80107aa <_printf_float+0xba>
 8010aec:	2301      	movs	r3, #1
 8010aee:	4652      	mov	r2, sl
 8010af0:	4631      	mov	r1, r6
 8010af2:	4628      	mov	r0, r5
 8010af4:	47b8      	blx	r7
 8010af6:	3001      	adds	r0, #1
 8010af8:	f43f ae57 	beq.w	80107aa <_printf_float+0xba>
 8010afc:	f108 0801 	add.w	r8, r8, #1
 8010b00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b02:	3b01      	subs	r3, #1
 8010b04:	4543      	cmp	r3, r8
 8010b06:	dcf1      	bgt.n	8010aec <_printf_float+0x3fc>
 8010b08:	464b      	mov	r3, r9
 8010b0a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010b0e:	e6de      	b.n	80108ce <_printf_float+0x1de>
 8010b10:	f04f 0800 	mov.w	r8, #0
 8010b14:	f104 0a1a 	add.w	sl, r4, #26
 8010b18:	e7f2      	b.n	8010b00 <_printf_float+0x410>
 8010b1a:	2301      	movs	r3, #1
 8010b1c:	e7df      	b.n	8010ade <_printf_float+0x3ee>
 8010b1e:	2301      	movs	r3, #1
 8010b20:	464a      	mov	r2, r9
 8010b22:	4631      	mov	r1, r6
 8010b24:	4628      	mov	r0, r5
 8010b26:	47b8      	blx	r7
 8010b28:	3001      	adds	r0, #1
 8010b2a:	f43f ae3e 	beq.w	80107aa <_printf_float+0xba>
 8010b2e:	f108 0801 	add.w	r8, r8, #1
 8010b32:	68e3      	ldr	r3, [r4, #12]
 8010b34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010b36:	1a9b      	subs	r3, r3, r2
 8010b38:	4543      	cmp	r3, r8
 8010b3a:	dcf0      	bgt.n	8010b1e <_printf_float+0x42e>
 8010b3c:	e6fc      	b.n	8010938 <_printf_float+0x248>
 8010b3e:	f04f 0800 	mov.w	r8, #0
 8010b42:	f104 0919 	add.w	r9, r4, #25
 8010b46:	e7f4      	b.n	8010b32 <_printf_float+0x442>
 8010b48:	2900      	cmp	r1, #0
 8010b4a:	f43f ae8b 	beq.w	8010864 <_printf_float+0x174>
 8010b4e:	2300      	movs	r3, #0
 8010b50:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8010b54:	ab09      	add	r3, sp, #36	; 0x24
 8010b56:	9300      	str	r3, [sp, #0]
 8010b58:	ec49 8b10 	vmov	d0, r8, r9
 8010b5c:	6022      	str	r2, [r4, #0]
 8010b5e:	f8cd a004 	str.w	sl, [sp, #4]
 8010b62:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010b66:	4628      	mov	r0, r5
 8010b68:	f7ff fd2d 	bl	80105c6 <__cvt>
 8010b6c:	4680      	mov	r8, r0
 8010b6e:	e648      	b.n	8010802 <_printf_float+0x112>

08010b70 <_printf_common>:
 8010b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b74:	4691      	mov	r9, r2
 8010b76:	461f      	mov	r7, r3
 8010b78:	688a      	ldr	r2, [r1, #8]
 8010b7a:	690b      	ldr	r3, [r1, #16]
 8010b7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010b80:	4293      	cmp	r3, r2
 8010b82:	bfb8      	it	lt
 8010b84:	4613      	movlt	r3, r2
 8010b86:	f8c9 3000 	str.w	r3, [r9]
 8010b8a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010b8e:	4606      	mov	r6, r0
 8010b90:	460c      	mov	r4, r1
 8010b92:	b112      	cbz	r2, 8010b9a <_printf_common+0x2a>
 8010b94:	3301      	adds	r3, #1
 8010b96:	f8c9 3000 	str.w	r3, [r9]
 8010b9a:	6823      	ldr	r3, [r4, #0]
 8010b9c:	0699      	lsls	r1, r3, #26
 8010b9e:	bf42      	ittt	mi
 8010ba0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010ba4:	3302      	addmi	r3, #2
 8010ba6:	f8c9 3000 	strmi.w	r3, [r9]
 8010baa:	6825      	ldr	r5, [r4, #0]
 8010bac:	f015 0506 	ands.w	r5, r5, #6
 8010bb0:	d107      	bne.n	8010bc2 <_printf_common+0x52>
 8010bb2:	f104 0a19 	add.w	sl, r4, #25
 8010bb6:	68e3      	ldr	r3, [r4, #12]
 8010bb8:	f8d9 2000 	ldr.w	r2, [r9]
 8010bbc:	1a9b      	subs	r3, r3, r2
 8010bbe:	42ab      	cmp	r3, r5
 8010bc0:	dc28      	bgt.n	8010c14 <_printf_common+0xa4>
 8010bc2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010bc6:	6822      	ldr	r2, [r4, #0]
 8010bc8:	3300      	adds	r3, #0
 8010bca:	bf18      	it	ne
 8010bcc:	2301      	movne	r3, #1
 8010bce:	0692      	lsls	r2, r2, #26
 8010bd0:	d42d      	bmi.n	8010c2e <_printf_common+0xbe>
 8010bd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010bd6:	4639      	mov	r1, r7
 8010bd8:	4630      	mov	r0, r6
 8010bda:	47c0      	blx	r8
 8010bdc:	3001      	adds	r0, #1
 8010bde:	d020      	beq.n	8010c22 <_printf_common+0xb2>
 8010be0:	6823      	ldr	r3, [r4, #0]
 8010be2:	68e5      	ldr	r5, [r4, #12]
 8010be4:	f8d9 2000 	ldr.w	r2, [r9]
 8010be8:	f003 0306 	and.w	r3, r3, #6
 8010bec:	2b04      	cmp	r3, #4
 8010bee:	bf08      	it	eq
 8010bf0:	1aad      	subeq	r5, r5, r2
 8010bf2:	68a3      	ldr	r3, [r4, #8]
 8010bf4:	6922      	ldr	r2, [r4, #16]
 8010bf6:	bf0c      	ite	eq
 8010bf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010bfc:	2500      	movne	r5, #0
 8010bfe:	4293      	cmp	r3, r2
 8010c00:	bfc4      	itt	gt
 8010c02:	1a9b      	subgt	r3, r3, r2
 8010c04:	18ed      	addgt	r5, r5, r3
 8010c06:	f04f 0900 	mov.w	r9, #0
 8010c0a:	341a      	adds	r4, #26
 8010c0c:	454d      	cmp	r5, r9
 8010c0e:	d11a      	bne.n	8010c46 <_printf_common+0xd6>
 8010c10:	2000      	movs	r0, #0
 8010c12:	e008      	b.n	8010c26 <_printf_common+0xb6>
 8010c14:	2301      	movs	r3, #1
 8010c16:	4652      	mov	r2, sl
 8010c18:	4639      	mov	r1, r7
 8010c1a:	4630      	mov	r0, r6
 8010c1c:	47c0      	blx	r8
 8010c1e:	3001      	adds	r0, #1
 8010c20:	d103      	bne.n	8010c2a <_printf_common+0xba>
 8010c22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c2a:	3501      	adds	r5, #1
 8010c2c:	e7c3      	b.n	8010bb6 <_printf_common+0x46>
 8010c2e:	18e1      	adds	r1, r4, r3
 8010c30:	1c5a      	adds	r2, r3, #1
 8010c32:	2030      	movs	r0, #48	; 0x30
 8010c34:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010c38:	4422      	add	r2, r4
 8010c3a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010c3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010c42:	3302      	adds	r3, #2
 8010c44:	e7c5      	b.n	8010bd2 <_printf_common+0x62>
 8010c46:	2301      	movs	r3, #1
 8010c48:	4622      	mov	r2, r4
 8010c4a:	4639      	mov	r1, r7
 8010c4c:	4630      	mov	r0, r6
 8010c4e:	47c0      	blx	r8
 8010c50:	3001      	adds	r0, #1
 8010c52:	d0e6      	beq.n	8010c22 <_printf_common+0xb2>
 8010c54:	f109 0901 	add.w	r9, r9, #1
 8010c58:	e7d8      	b.n	8010c0c <_printf_common+0x9c>
	...

08010c5c <_printf_i>:
 8010c5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010c60:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010c64:	460c      	mov	r4, r1
 8010c66:	7e09      	ldrb	r1, [r1, #24]
 8010c68:	b085      	sub	sp, #20
 8010c6a:	296e      	cmp	r1, #110	; 0x6e
 8010c6c:	4617      	mov	r7, r2
 8010c6e:	4606      	mov	r6, r0
 8010c70:	4698      	mov	r8, r3
 8010c72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010c74:	f000 80b3 	beq.w	8010dde <_printf_i+0x182>
 8010c78:	d822      	bhi.n	8010cc0 <_printf_i+0x64>
 8010c7a:	2963      	cmp	r1, #99	; 0x63
 8010c7c:	d036      	beq.n	8010cec <_printf_i+0x90>
 8010c7e:	d80a      	bhi.n	8010c96 <_printf_i+0x3a>
 8010c80:	2900      	cmp	r1, #0
 8010c82:	f000 80b9 	beq.w	8010df8 <_printf_i+0x19c>
 8010c86:	2958      	cmp	r1, #88	; 0x58
 8010c88:	f000 8083 	beq.w	8010d92 <_printf_i+0x136>
 8010c8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010c90:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010c94:	e032      	b.n	8010cfc <_printf_i+0xa0>
 8010c96:	2964      	cmp	r1, #100	; 0x64
 8010c98:	d001      	beq.n	8010c9e <_printf_i+0x42>
 8010c9a:	2969      	cmp	r1, #105	; 0x69
 8010c9c:	d1f6      	bne.n	8010c8c <_printf_i+0x30>
 8010c9e:	6820      	ldr	r0, [r4, #0]
 8010ca0:	6813      	ldr	r3, [r2, #0]
 8010ca2:	0605      	lsls	r5, r0, #24
 8010ca4:	f103 0104 	add.w	r1, r3, #4
 8010ca8:	d52a      	bpl.n	8010d00 <_printf_i+0xa4>
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	6011      	str	r1, [r2, #0]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	da03      	bge.n	8010cba <_printf_i+0x5e>
 8010cb2:	222d      	movs	r2, #45	; 0x2d
 8010cb4:	425b      	negs	r3, r3
 8010cb6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010cba:	486f      	ldr	r0, [pc, #444]	; (8010e78 <_printf_i+0x21c>)
 8010cbc:	220a      	movs	r2, #10
 8010cbe:	e039      	b.n	8010d34 <_printf_i+0xd8>
 8010cc0:	2973      	cmp	r1, #115	; 0x73
 8010cc2:	f000 809d 	beq.w	8010e00 <_printf_i+0x1a4>
 8010cc6:	d808      	bhi.n	8010cda <_printf_i+0x7e>
 8010cc8:	296f      	cmp	r1, #111	; 0x6f
 8010cca:	d020      	beq.n	8010d0e <_printf_i+0xb2>
 8010ccc:	2970      	cmp	r1, #112	; 0x70
 8010cce:	d1dd      	bne.n	8010c8c <_printf_i+0x30>
 8010cd0:	6823      	ldr	r3, [r4, #0]
 8010cd2:	f043 0320 	orr.w	r3, r3, #32
 8010cd6:	6023      	str	r3, [r4, #0]
 8010cd8:	e003      	b.n	8010ce2 <_printf_i+0x86>
 8010cda:	2975      	cmp	r1, #117	; 0x75
 8010cdc:	d017      	beq.n	8010d0e <_printf_i+0xb2>
 8010cde:	2978      	cmp	r1, #120	; 0x78
 8010ce0:	d1d4      	bne.n	8010c8c <_printf_i+0x30>
 8010ce2:	2378      	movs	r3, #120	; 0x78
 8010ce4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010ce8:	4864      	ldr	r0, [pc, #400]	; (8010e7c <_printf_i+0x220>)
 8010cea:	e055      	b.n	8010d98 <_printf_i+0x13c>
 8010cec:	6813      	ldr	r3, [r2, #0]
 8010cee:	1d19      	adds	r1, r3, #4
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	6011      	str	r1, [r2, #0]
 8010cf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010cf8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010cfc:	2301      	movs	r3, #1
 8010cfe:	e08c      	b.n	8010e1a <_printf_i+0x1be>
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	6011      	str	r1, [r2, #0]
 8010d04:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010d08:	bf18      	it	ne
 8010d0a:	b21b      	sxthne	r3, r3
 8010d0c:	e7cf      	b.n	8010cae <_printf_i+0x52>
 8010d0e:	6813      	ldr	r3, [r2, #0]
 8010d10:	6825      	ldr	r5, [r4, #0]
 8010d12:	1d18      	adds	r0, r3, #4
 8010d14:	6010      	str	r0, [r2, #0]
 8010d16:	0628      	lsls	r0, r5, #24
 8010d18:	d501      	bpl.n	8010d1e <_printf_i+0xc2>
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	e002      	b.n	8010d24 <_printf_i+0xc8>
 8010d1e:	0668      	lsls	r0, r5, #25
 8010d20:	d5fb      	bpl.n	8010d1a <_printf_i+0xbe>
 8010d22:	881b      	ldrh	r3, [r3, #0]
 8010d24:	4854      	ldr	r0, [pc, #336]	; (8010e78 <_printf_i+0x21c>)
 8010d26:	296f      	cmp	r1, #111	; 0x6f
 8010d28:	bf14      	ite	ne
 8010d2a:	220a      	movne	r2, #10
 8010d2c:	2208      	moveq	r2, #8
 8010d2e:	2100      	movs	r1, #0
 8010d30:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010d34:	6865      	ldr	r5, [r4, #4]
 8010d36:	60a5      	str	r5, [r4, #8]
 8010d38:	2d00      	cmp	r5, #0
 8010d3a:	f2c0 8095 	blt.w	8010e68 <_printf_i+0x20c>
 8010d3e:	6821      	ldr	r1, [r4, #0]
 8010d40:	f021 0104 	bic.w	r1, r1, #4
 8010d44:	6021      	str	r1, [r4, #0]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d13d      	bne.n	8010dc6 <_printf_i+0x16a>
 8010d4a:	2d00      	cmp	r5, #0
 8010d4c:	f040 808e 	bne.w	8010e6c <_printf_i+0x210>
 8010d50:	4665      	mov	r5, ip
 8010d52:	2a08      	cmp	r2, #8
 8010d54:	d10b      	bne.n	8010d6e <_printf_i+0x112>
 8010d56:	6823      	ldr	r3, [r4, #0]
 8010d58:	07db      	lsls	r3, r3, #31
 8010d5a:	d508      	bpl.n	8010d6e <_printf_i+0x112>
 8010d5c:	6923      	ldr	r3, [r4, #16]
 8010d5e:	6862      	ldr	r2, [r4, #4]
 8010d60:	429a      	cmp	r2, r3
 8010d62:	bfde      	ittt	le
 8010d64:	2330      	movle	r3, #48	; 0x30
 8010d66:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010d6a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010d6e:	ebac 0305 	sub.w	r3, ip, r5
 8010d72:	6123      	str	r3, [r4, #16]
 8010d74:	f8cd 8000 	str.w	r8, [sp]
 8010d78:	463b      	mov	r3, r7
 8010d7a:	aa03      	add	r2, sp, #12
 8010d7c:	4621      	mov	r1, r4
 8010d7e:	4630      	mov	r0, r6
 8010d80:	f7ff fef6 	bl	8010b70 <_printf_common>
 8010d84:	3001      	adds	r0, #1
 8010d86:	d14d      	bne.n	8010e24 <_printf_i+0x1c8>
 8010d88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010d8c:	b005      	add	sp, #20
 8010d8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d92:	4839      	ldr	r0, [pc, #228]	; (8010e78 <_printf_i+0x21c>)
 8010d94:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010d98:	6813      	ldr	r3, [r2, #0]
 8010d9a:	6821      	ldr	r1, [r4, #0]
 8010d9c:	1d1d      	adds	r5, r3, #4
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	6015      	str	r5, [r2, #0]
 8010da2:	060a      	lsls	r2, r1, #24
 8010da4:	d50b      	bpl.n	8010dbe <_printf_i+0x162>
 8010da6:	07ca      	lsls	r2, r1, #31
 8010da8:	bf44      	itt	mi
 8010daa:	f041 0120 	orrmi.w	r1, r1, #32
 8010dae:	6021      	strmi	r1, [r4, #0]
 8010db0:	b91b      	cbnz	r3, 8010dba <_printf_i+0x15e>
 8010db2:	6822      	ldr	r2, [r4, #0]
 8010db4:	f022 0220 	bic.w	r2, r2, #32
 8010db8:	6022      	str	r2, [r4, #0]
 8010dba:	2210      	movs	r2, #16
 8010dbc:	e7b7      	b.n	8010d2e <_printf_i+0xd2>
 8010dbe:	064d      	lsls	r5, r1, #25
 8010dc0:	bf48      	it	mi
 8010dc2:	b29b      	uxthmi	r3, r3
 8010dc4:	e7ef      	b.n	8010da6 <_printf_i+0x14a>
 8010dc6:	4665      	mov	r5, ip
 8010dc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8010dcc:	fb02 3311 	mls	r3, r2, r1, r3
 8010dd0:	5cc3      	ldrb	r3, [r0, r3]
 8010dd2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010dd6:	460b      	mov	r3, r1
 8010dd8:	2900      	cmp	r1, #0
 8010dda:	d1f5      	bne.n	8010dc8 <_printf_i+0x16c>
 8010ddc:	e7b9      	b.n	8010d52 <_printf_i+0xf6>
 8010dde:	6813      	ldr	r3, [r2, #0]
 8010de0:	6825      	ldr	r5, [r4, #0]
 8010de2:	6961      	ldr	r1, [r4, #20]
 8010de4:	1d18      	adds	r0, r3, #4
 8010de6:	6010      	str	r0, [r2, #0]
 8010de8:	0628      	lsls	r0, r5, #24
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	d501      	bpl.n	8010df2 <_printf_i+0x196>
 8010dee:	6019      	str	r1, [r3, #0]
 8010df0:	e002      	b.n	8010df8 <_printf_i+0x19c>
 8010df2:	066a      	lsls	r2, r5, #25
 8010df4:	d5fb      	bpl.n	8010dee <_printf_i+0x192>
 8010df6:	8019      	strh	r1, [r3, #0]
 8010df8:	2300      	movs	r3, #0
 8010dfa:	6123      	str	r3, [r4, #16]
 8010dfc:	4665      	mov	r5, ip
 8010dfe:	e7b9      	b.n	8010d74 <_printf_i+0x118>
 8010e00:	6813      	ldr	r3, [r2, #0]
 8010e02:	1d19      	adds	r1, r3, #4
 8010e04:	6011      	str	r1, [r2, #0]
 8010e06:	681d      	ldr	r5, [r3, #0]
 8010e08:	6862      	ldr	r2, [r4, #4]
 8010e0a:	2100      	movs	r1, #0
 8010e0c:	4628      	mov	r0, r5
 8010e0e:	f7ef f9e7 	bl	80001e0 <memchr>
 8010e12:	b108      	cbz	r0, 8010e18 <_printf_i+0x1bc>
 8010e14:	1b40      	subs	r0, r0, r5
 8010e16:	6060      	str	r0, [r4, #4]
 8010e18:	6863      	ldr	r3, [r4, #4]
 8010e1a:	6123      	str	r3, [r4, #16]
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e22:	e7a7      	b.n	8010d74 <_printf_i+0x118>
 8010e24:	6923      	ldr	r3, [r4, #16]
 8010e26:	462a      	mov	r2, r5
 8010e28:	4639      	mov	r1, r7
 8010e2a:	4630      	mov	r0, r6
 8010e2c:	47c0      	blx	r8
 8010e2e:	3001      	adds	r0, #1
 8010e30:	d0aa      	beq.n	8010d88 <_printf_i+0x12c>
 8010e32:	6823      	ldr	r3, [r4, #0]
 8010e34:	079b      	lsls	r3, r3, #30
 8010e36:	d413      	bmi.n	8010e60 <_printf_i+0x204>
 8010e38:	68e0      	ldr	r0, [r4, #12]
 8010e3a:	9b03      	ldr	r3, [sp, #12]
 8010e3c:	4298      	cmp	r0, r3
 8010e3e:	bfb8      	it	lt
 8010e40:	4618      	movlt	r0, r3
 8010e42:	e7a3      	b.n	8010d8c <_printf_i+0x130>
 8010e44:	2301      	movs	r3, #1
 8010e46:	464a      	mov	r2, r9
 8010e48:	4639      	mov	r1, r7
 8010e4a:	4630      	mov	r0, r6
 8010e4c:	47c0      	blx	r8
 8010e4e:	3001      	adds	r0, #1
 8010e50:	d09a      	beq.n	8010d88 <_printf_i+0x12c>
 8010e52:	3501      	adds	r5, #1
 8010e54:	68e3      	ldr	r3, [r4, #12]
 8010e56:	9a03      	ldr	r2, [sp, #12]
 8010e58:	1a9b      	subs	r3, r3, r2
 8010e5a:	42ab      	cmp	r3, r5
 8010e5c:	dcf2      	bgt.n	8010e44 <_printf_i+0x1e8>
 8010e5e:	e7eb      	b.n	8010e38 <_printf_i+0x1dc>
 8010e60:	2500      	movs	r5, #0
 8010e62:	f104 0919 	add.w	r9, r4, #25
 8010e66:	e7f5      	b.n	8010e54 <_printf_i+0x1f8>
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d1ac      	bne.n	8010dc6 <_printf_i+0x16a>
 8010e6c:	7803      	ldrb	r3, [r0, #0]
 8010e6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010e72:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010e76:	e76c      	b.n	8010d52 <_printf_i+0xf6>
 8010e78:	080151b6 	.word	0x080151b6
 8010e7c:	080151c7 	.word	0x080151c7

08010e80 <iprintf>:
 8010e80:	b40f      	push	{r0, r1, r2, r3}
 8010e82:	4b0a      	ldr	r3, [pc, #40]	; (8010eac <iprintf+0x2c>)
 8010e84:	b513      	push	{r0, r1, r4, lr}
 8010e86:	681c      	ldr	r4, [r3, #0]
 8010e88:	b124      	cbz	r4, 8010e94 <iprintf+0x14>
 8010e8a:	69a3      	ldr	r3, [r4, #24]
 8010e8c:	b913      	cbnz	r3, 8010e94 <iprintf+0x14>
 8010e8e:	4620      	mov	r0, r4
 8010e90:	f001 f886 	bl	8011fa0 <__sinit>
 8010e94:	ab05      	add	r3, sp, #20
 8010e96:	9a04      	ldr	r2, [sp, #16]
 8010e98:	68a1      	ldr	r1, [r4, #8]
 8010e9a:	9301      	str	r3, [sp, #4]
 8010e9c:	4620      	mov	r0, r4
 8010e9e:	f001 fea3 	bl	8012be8 <_vfiprintf_r>
 8010ea2:	b002      	add	sp, #8
 8010ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ea8:	b004      	add	sp, #16
 8010eaa:	4770      	bx	lr
 8010eac:	20000168 	.word	0x20000168

08010eb0 <_puts_r>:
 8010eb0:	b570      	push	{r4, r5, r6, lr}
 8010eb2:	460e      	mov	r6, r1
 8010eb4:	4605      	mov	r5, r0
 8010eb6:	b118      	cbz	r0, 8010ec0 <_puts_r+0x10>
 8010eb8:	6983      	ldr	r3, [r0, #24]
 8010eba:	b90b      	cbnz	r3, 8010ec0 <_puts_r+0x10>
 8010ebc:	f001 f870 	bl	8011fa0 <__sinit>
 8010ec0:	69ab      	ldr	r3, [r5, #24]
 8010ec2:	68ac      	ldr	r4, [r5, #8]
 8010ec4:	b913      	cbnz	r3, 8010ecc <_puts_r+0x1c>
 8010ec6:	4628      	mov	r0, r5
 8010ec8:	f001 f86a 	bl	8011fa0 <__sinit>
 8010ecc:	4b23      	ldr	r3, [pc, #140]	; (8010f5c <_puts_r+0xac>)
 8010ece:	429c      	cmp	r4, r3
 8010ed0:	d117      	bne.n	8010f02 <_puts_r+0x52>
 8010ed2:	686c      	ldr	r4, [r5, #4]
 8010ed4:	89a3      	ldrh	r3, [r4, #12]
 8010ed6:	071b      	lsls	r3, r3, #28
 8010ed8:	d51d      	bpl.n	8010f16 <_puts_r+0x66>
 8010eda:	6923      	ldr	r3, [r4, #16]
 8010edc:	b1db      	cbz	r3, 8010f16 <_puts_r+0x66>
 8010ede:	3e01      	subs	r6, #1
 8010ee0:	68a3      	ldr	r3, [r4, #8]
 8010ee2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010ee6:	3b01      	subs	r3, #1
 8010ee8:	60a3      	str	r3, [r4, #8]
 8010eea:	b9e9      	cbnz	r1, 8010f28 <_puts_r+0x78>
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	da2e      	bge.n	8010f4e <_puts_r+0x9e>
 8010ef0:	4622      	mov	r2, r4
 8010ef2:	210a      	movs	r1, #10
 8010ef4:	4628      	mov	r0, r5
 8010ef6:	f000 f85f 	bl	8010fb8 <__swbuf_r>
 8010efa:	3001      	adds	r0, #1
 8010efc:	d011      	beq.n	8010f22 <_puts_r+0x72>
 8010efe:	200a      	movs	r0, #10
 8010f00:	e011      	b.n	8010f26 <_puts_r+0x76>
 8010f02:	4b17      	ldr	r3, [pc, #92]	; (8010f60 <_puts_r+0xb0>)
 8010f04:	429c      	cmp	r4, r3
 8010f06:	d101      	bne.n	8010f0c <_puts_r+0x5c>
 8010f08:	68ac      	ldr	r4, [r5, #8]
 8010f0a:	e7e3      	b.n	8010ed4 <_puts_r+0x24>
 8010f0c:	4b15      	ldr	r3, [pc, #84]	; (8010f64 <_puts_r+0xb4>)
 8010f0e:	429c      	cmp	r4, r3
 8010f10:	bf08      	it	eq
 8010f12:	68ec      	ldreq	r4, [r5, #12]
 8010f14:	e7de      	b.n	8010ed4 <_puts_r+0x24>
 8010f16:	4621      	mov	r1, r4
 8010f18:	4628      	mov	r0, r5
 8010f1a:	f000 f89f 	bl	801105c <__swsetup_r>
 8010f1e:	2800      	cmp	r0, #0
 8010f20:	d0dd      	beq.n	8010ede <_puts_r+0x2e>
 8010f22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010f26:	bd70      	pop	{r4, r5, r6, pc}
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	da04      	bge.n	8010f36 <_puts_r+0x86>
 8010f2c:	69a2      	ldr	r2, [r4, #24]
 8010f2e:	429a      	cmp	r2, r3
 8010f30:	dc06      	bgt.n	8010f40 <_puts_r+0x90>
 8010f32:	290a      	cmp	r1, #10
 8010f34:	d004      	beq.n	8010f40 <_puts_r+0x90>
 8010f36:	6823      	ldr	r3, [r4, #0]
 8010f38:	1c5a      	adds	r2, r3, #1
 8010f3a:	6022      	str	r2, [r4, #0]
 8010f3c:	7019      	strb	r1, [r3, #0]
 8010f3e:	e7cf      	b.n	8010ee0 <_puts_r+0x30>
 8010f40:	4622      	mov	r2, r4
 8010f42:	4628      	mov	r0, r5
 8010f44:	f000 f838 	bl	8010fb8 <__swbuf_r>
 8010f48:	3001      	adds	r0, #1
 8010f4a:	d1c9      	bne.n	8010ee0 <_puts_r+0x30>
 8010f4c:	e7e9      	b.n	8010f22 <_puts_r+0x72>
 8010f4e:	6823      	ldr	r3, [r4, #0]
 8010f50:	200a      	movs	r0, #10
 8010f52:	1c5a      	adds	r2, r3, #1
 8010f54:	6022      	str	r2, [r4, #0]
 8010f56:	7018      	strb	r0, [r3, #0]
 8010f58:	e7e5      	b.n	8010f26 <_puts_r+0x76>
 8010f5a:	bf00      	nop
 8010f5c:	08015208 	.word	0x08015208
 8010f60:	08015228 	.word	0x08015228
 8010f64:	080151e8 	.word	0x080151e8

08010f68 <puts>:
 8010f68:	4b02      	ldr	r3, [pc, #8]	; (8010f74 <puts+0xc>)
 8010f6a:	4601      	mov	r1, r0
 8010f6c:	6818      	ldr	r0, [r3, #0]
 8010f6e:	f7ff bf9f 	b.w	8010eb0 <_puts_r>
 8010f72:	bf00      	nop
 8010f74:	20000168 	.word	0x20000168

08010f78 <siprintf>:
 8010f78:	b40e      	push	{r1, r2, r3}
 8010f7a:	b500      	push	{lr}
 8010f7c:	b09c      	sub	sp, #112	; 0x70
 8010f7e:	ab1d      	add	r3, sp, #116	; 0x74
 8010f80:	9002      	str	r0, [sp, #8]
 8010f82:	9006      	str	r0, [sp, #24]
 8010f84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010f88:	4809      	ldr	r0, [pc, #36]	; (8010fb0 <siprintf+0x38>)
 8010f8a:	9107      	str	r1, [sp, #28]
 8010f8c:	9104      	str	r1, [sp, #16]
 8010f8e:	4909      	ldr	r1, [pc, #36]	; (8010fb4 <siprintf+0x3c>)
 8010f90:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f94:	9105      	str	r1, [sp, #20]
 8010f96:	6800      	ldr	r0, [r0, #0]
 8010f98:	9301      	str	r3, [sp, #4]
 8010f9a:	a902      	add	r1, sp, #8
 8010f9c:	f001 fd02 	bl	80129a4 <_svfiprintf_r>
 8010fa0:	9b02      	ldr	r3, [sp, #8]
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	701a      	strb	r2, [r3, #0]
 8010fa6:	b01c      	add	sp, #112	; 0x70
 8010fa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8010fac:	b003      	add	sp, #12
 8010fae:	4770      	bx	lr
 8010fb0:	20000168 	.word	0x20000168
 8010fb4:	ffff0208 	.word	0xffff0208

08010fb8 <__swbuf_r>:
 8010fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fba:	460e      	mov	r6, r1
 8010fbc:	4614      	mov	r4, r2
 8010fbe:	4605      	mov	r5, r0
 8010fc0:	b118      	cbz	r0, 8010fca <__swbuf_r+0x12>
 8010fc2:	6983      	ldr	r3, [r0, #24]
 8010fc4:	b90b      	cbnz	r3, 8010fca <__swbuf_r+0x12>
 8010fc6:	f000 ffeb 	bl	8011fa0 <__sinit>
 8010fca:	4b21      	ldr	r3, [pc, #132]	; (8011050 <__swbuf_r+0x98>)
 8010fcc:	429c      	cmp	r4, r3
 8010fce:	d12a      	bne.n	8011026 <__swbuf_r+0x6e>
 8010fd0:	686c      	ldr	r4, [r5, #4]
 8010fd2:	69a3      	ldr	r3, [r4, #24]
 8010fd4:	60a3      	str	r3, [r4, #8]
 8010fd6:	89a3      	ldrh	r3, [r4, #12]
 8010fd8:	071a      	lsls	r2, r3, #28
 8010fda:	d52e      	bpl.n	801103a <__swbuf_r+0x82>
 8010fdc:	6923      	ldr	r3, [r4, #16]
 8010fde:	b363      	cbz	r3, 801103a <__swbuf_r+0x82>
 8010fe0:	6923      	ldr	r3, [r4, #16]
 8010fe2:	6820      	ldr	r0, [r4, #0]
 8010fe4:	1ac0      	subs	r0, r0, r3
 8010fe6:	6963      	ldr	r3, [r4, #20]
 8010fe8:	b2f6      	uxtb	r6, r6
 8010fea:	4283      	cmp	r3, r0
 8010fec:	4637      	mov	r7, r6
 8010fee:	dc04      	bgt.n	8010ffa <__swbuf_r+0x42>
 8010ff0:	4621      	mov	r1, r4
 8010ff2:	4628      	mov	r0, r5
 8010ff4:	f000 ff6a 	bl	8011ecc <_fflush_r>
 8010ff8:	bb28      	cbnz	r0, 8011046 <__swbuf_r+0x8e>
 8010ffa:	68a3      	ldr	r3, [r4, #8]
 8010ffc:	3b01      	subs	r3, #1
 8010ffe:	60a3      	str	r3, [r4, #8]
 8011000:	6823      	ldr	r3, [r4, #0]
 8011002:	1c5a      	adds	r2, r3, #1
 8011004:	6022      	str	r2, [r4, #0]
 8011006:	701e      	strb	r6, [r3, #0]
 8011008:	6963      	ldr	r3, [r4, #20]
 801100a:	3001      	adds	r0, #1
 801100c:	4283      	cmp	r3, r0
 801100e:	d004      	beq.n	801101a <__swbuf_r+0x62>
 8011010:	89a3      	ldrh	r3, [r4, #12]
 8011012:	07db      	lsls	r3, r3, #31
 8011014:	d519      	bpl.n	801104a <__swbuf_r+0x92>
 8011016:	2e0a      	cmp	r6, #10
 8011018:	d117      	bne.n	801104a <__swbuf_r+0x92>
 801101a:	4621      	mov	r1, r4
 801101c:	4628      	mov	r0, r5
 801101e:	f000 ff55 	bl	8011ecc <_fflush_r>
 8011022:	b190      	cbz	r0, 801104a <__swbuf_r+0x92>
 8011024:	e00f      	b.n	8011046 <__swbuf_r+0x8e>
 8011026:	4b0b      	ldr	r3, [pc, #44]	; (8011054 <__swbuf_r+0x9c>)
 8011028:	429c      	cmp	r4, r3
 801102a:	d101      	bne.n	8011030 <__swbuf_r+0x78>
 801102c:	68ac      	ldr	r4, [r5, #8]
 801102e:	e7d0      	b.n	8010fd2 <__swbuf_r+0x1a>
 8011030:	4b09      	ldr	r3, [pc, #36]	; (8011058 <__swbuf_r+0xa0>)
 8011032:	429c      	cmp	r4, r3
 8011034:	bf08      	it	eq
 8011036:	68ec      	ldreq	r4, [r5, #12]
 8011038:	e7cb      	b.n	8010fd2 <__swbuf_r+0x1a>
 801103a:	4621      	mov	r1, r4
 801103c:	4628      	mov	r0, r5
 801103e:	f000 f80d 	bl	801105c <__swsetup_r>
 8011042:	2800      	cmp	r0, #0
 8011044:	d0cc      	beq.n	8010fe0 <__swbuf_r+0x28>
 8011046:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801104a:	4638      	mov	r0, r7
 801104c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801104e:	bf00      	nop
 8011050:	08015208 	.word	0x08015208
 8011054:	08015228 	.word	0x08015228
 8011058:	080151e8 	.word	0x080151e8

0801105c <__swsetup_r>:
 801105c:	4b32      	ldr	r3, [pc, #200]	; (8011128 <__swsetup_r+0xcc>)
 801105e:	b570      	push	{r4, r5, r6, lr}
 8011060:	681d      	ldr	r5, [r3, #0]
 8011062:	4606      	mov	r6, r0
 8011064:	460c      	mov	r4, r1
 8011066:	b125      	cbz	r5, 8011072 <__swsetup_r+0x16>
 8011068:	69ab      	ldr	r3, [r5, #24]
 801106a:	b913      	cbnz	r3, 8011072 <__swsetup_r+0x16>
 801106c:	4628      	mov	r0, r5
 801106e:	f000 ff97 	bl	8011fa0 <__sinit>
 8011072:	4b2e      	ldr	r3, [pc, #184]	; (801112c <__swsetup_r+0xd0>)
 8011074:	429c      	cmp	r4, r3
 8011076:	d10f      	bne.n	8011098 <__swsetup_r+0x3c>
 8011078:	686c      	ldr	r4, [r5, #4]
 801107a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801107e:	b29a      	uxth	r2, r3
 8011080:	0715      	lsls	r5, r2, #28
 8011082:	d42c      	bmi.n	80110de <__swsetup_r+0x82>
 8011084:	06d0      	lsls	r0, r2, #27
 8011086:	d411      	bmi.n	80110ac <__swsetup_r+0x50>
 8011088:	2209      	movs	r2, #9
 801108a:	6032      	str	r2, [r6, #0]
 801108c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011090:	81a3      	strh	r3, [r4, #12]
 8011092:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011096:	e03e      	b.n	8011116 <__swsetup_r+0xba>
 8011098:	4b25      	ldr	r3, [pc, #148]	; (8011130 <__swsetup_r+0xd4>)
 801109a:	429c      	cmp	r4, r3
 801109c:	d101      	bne.n	80110a2 <__swsetup_r+0x46>
 801109e:	68ac      	ldr	r4, [r5, #8]
 80110a0:	e7eb      	b.n	801107a <__swsetup_r+0x1e>
 80110a2:	4b24      	ldr	r3, [pc, #144]	; (8011134 <__swsetup_r+0xd8>)
 80110a4:	429c      	cmp	r4, r3
 80110a6:	bf08      	it	eq
 80110a8:	68ec      	ldreq	r4, [r5, #12]
 80110aa:	e7e6      	b.n	801107a <__swsetup_r+0x1e>
 80110ac:	0751      	lsls	r1, r2, #29
 80110ae:	d512      	bpl.n	80110d6 <__swsetup_r+0x7a>
 80110b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80110b2:	b141      	cbz	r1, 80110c6 <__swsetup_r+0x6a>
 80110b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80110b8:	4299      	cmp	r1, r3
 80110ba:	d002      	beq.n	80110c2 <__swsetup_r+0x66>
 80110bc:	4630      	mov	r0, r6
 80110be:	f001 fb6f 	bl	80127a0 <_free_r>
 80110c2:	2300      	movs	r3, #0
 80110c4:	6363      	str	r3, [r4, #52]	; 0x34
 80110c6:	89a3      	ldrh	r3, [r4, #12]
 80110c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80110cc:	81a3      	strh	r3, [r4, #12]
 80110ce:	2300      	movs	r3, #0
 80110d0:	6063      	str	r3, [r4, #4]
 80110d2:	6923      	ldr	r3, [r4, #16]
 80110d4:	6023      	str	r3, [r4, #0]
 80110d6:	89a3      	ldrh	r3, [r4, #12]
 80110d8:	f043 0308 	orr.w	r3, r3, #8
 80110dc:	81a3      	strh	r3, [r4, #12]
 80110de:	6923      	ldr	r3, [r4, #16]
 80110e0:	b94b      	cbnz	r3, 80110f6 <__swsetup_r+0x9a>
 80110e2:	89a3      	ldrh	r3, [r4, #12]
 80110e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80110e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80110ec:	d003      	beq.n	80110f6 <__swsetup_r+0x9a>
 80110ee:	4621      	mov	r1, r4
 80110f0:	4630      	mov	r0, r6
 80110f2:	f001 f811 	bl	8012118 <__smakebuf_r>
 80110f6:	89a2      	ldrh	r2, [r4, #12]
 80110f8:	f012 0301 	ands.w	r3, r2, #1
 80110fc:	d00c      	beq.n	8011118 <__swsetup_r+0xbc>
 80110fe:	2300      	movs	r3, #0
 8011100:	60a3      	str	r3, [r4, #8]
 8011102:	6963      	ldr	r3, [r4, #20]
 8011104:	425b      	negs	r3, r3
 8011106:	61a3      	str	r3, [r4, #24]
 8011108:	6923      	ldr	r3, [r4, #16]
 801110a:	b953      	cbnz	r3, 8011122 <__swsetup_r+0xc6>
 801110c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011110:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8011114:	d1ba      	bne.n	801108c <__swsetup_r+0x30>
 8011116:	bd70      	pop	{r4, r5, r6, pc}
 8011118:	0792      	lsls	r2, r2, #30
 801111a:	bf58      	it	pl
 801111c:	6963      	ldrpl	r3, [r4, #20]
 801111e:	60a3      	str	r3, [r4, #8]
 8011120:	e7f2      	b.n	8011108 <__swsetup_r+0xac>
 8011122:	2000      	movs	r0, #0
 8011124:	e7f7      	b.n	8011116 <__swsetup_r+0xba>
 8011126:	bf00      	nop
 8011128:	20000168 	.word	0x20000168
 801112c:	08015208 	.word	0x08015208
 8011130:	08015228 	.word	0x08015228
 8011134:	080151e8 	.word	0x080151e8

08011138 <quorem>:
 8011138:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801113c:	6903      	ldr	r3, [r0, #16]
 801113e:	690c      	ldr	r4, [r1, #16]
 8011140:	42a3      	cmp	r3, r4
 8011142:	4680      	mov	r8, r0
 8011144:	f2c0 8082 	blt.w	801124c <quorem+0x114>
 8011148:	3c01      	subs	r4, #1
 801114a:	f101 0714 	add.w	r7, r1, #20
 801114e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8011152:	f100 0614 	add.w	r6, r0, #20
 8011156:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801115a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801115e:	eb06 030c 	add.w	r3, r6, ip
 8011162:	3501      	adds	r5, #1
 8011164:	eb07 090c 	add.w	r9, r7, ip
 8011168:	9301      	str	r3, [sp, #4]
 801116a:	fbb0 f5f5 	udiv	r5, r0, r5
 801116e:	b395      	cbz	r5, 80111d6 <quorem+0x9e>
 8011170:	f04f 0a00 	mov.w	sl, #0
 8011174:	4638      	mov	r0, r7
 8011176:	46b6      	mov	lr, r6
 8011178:	46d3      	mov	fp, sl
 801117a:	f850 2b04 	ldr.w	r2, [r0], #4
 801117e:	b293      	uxth	r3, r2
 8011180:	fb05 a303 	mla	r3, r5, r3, sl
 8011184:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011188:	b29b      	uxth	r3, r3
 801118a:	ebab 0303 	sub.w	r3, fp, r3
 801118e:	0c12      	lsrs	r2, r2, #16
 8011190:	f8de b000 	ldr.w	fp, [lr]
 8011194:	fb05 a202 	mla	r2, r5, r2, sl
 8011198:	fa13 f38b 	uxtah	r3, r3, fp
 801119c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80111a0:	fa1f fb82 	uxth.w	fp, r2
 80111a4:	f8de 2000 	ldr.w	r2, [lr]
 80111a8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80111ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80111b0:	b29b      	uxth	r3, r3
 80111b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80111b6:	4581      	cmp	r9, r0
 80111b8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80111bc:	f84e 3b04 	str.w	r3, [lr], #4
 80111c0:	d2db      	bcs.n	801117a <quorem+0x42>
 80111c2:	f856 300c 	ldr.w	r3, [r6, ip]
 80111c6:	b933      	cbnz	r3, 80111d6 <quorem+0x9e>
 80111c8:	9b01      	ldr	r3, [sp, #4]
 80111ca:	3b04      	subs	r3, #4
 80111cc:	429e      	cmp	r6, r3
 80111ce:	461a      	mov	r2, r3
 80111d0:	d330      	bcc.n	8011234 <quorem+0xfc>
 80111d2:	f8c8 4010 	str.w	r4, [r8, #16]
 80111d6:	4640      	mov	r0, r8
 80111d8:	f001 fa0e 	bl	80125f8 <__mcmp>
 80111dc:	2800      	cmp	r0, #0
 80111de:	db25      	blt.n	801122c <quorem+0xf4>
 80111e0:	3501      	adds	r5, #1
 80111e2:	4630      	mov	r0, r6
 80111e4:	f04f 0c00 	mov.w	ip, #0
 80111e8:	f857 2b04 	ldr.w	r2, [r7], #4
 80111ec:	f8d0 e000 	ldr.w	lr, [r0]
 80111f0:	b293      	uxth	r3, r2
 80111f2:	ebac 0303 	sub.w	r3, ip, r3
 80111f6:	0c12      	lsrs	r2, r2, #16
 80111f8:	fa13 f38e 	uxtah	r3, r3, lr
 80111fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011200:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011204:	b29b      	uxth	r3, r3
 8011206:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801120a:	45b9      	cmp	r9, r7
 801120c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011210:	f840 3b04 	str.w	r3, [r0], #4
 8011214:	d2e8      	bcs.n	80111e8 <quorem+0xb0>
 8011216:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801121a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801121e:	b92a      	cbnz	r2, 801122c <quorem+0xf4>
 8011220:	3b04      	subs	r3, #4
 8011222:	429e      	cmp	r6, r3
 8011224:	461a      	mov	r2, r3
 8011226:	d30b      	bcc.n	8011240 <quorem+0x108>
 8011228:	f8c8 4010 	str.w	r4, [r8, #16]
 801122c:	4628      	mov	r0, r5
 801122e:	b003      	add	sp, #12
 8011230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011234:	6812      	ldr	r2, [r2, #0]
 8011236:	3b04      	subs	r3, #4
 8011238:	2a00      	cmp	r2, #0
 801123a:	d1ca      	bne.n	80111d2 <quorem+0x9a>
 801123c:	3c01      	subs	r4, #1
 801123e:	e7c5      	b.n	80111cc <quorem+0x94>
 8011240:	6812      	ldr	r2, [r2, #0]
 8011242:	3b04      	subs	r3, #4
 8011244:	2a00      	cmp	r2, #0
 8011246:	d1ef      	bne.n	8011228 <quorem+0xf0>
 8011248:	3c01      	subs	r4, #1
 801124a:	e7ea      	b.n	8011222 <quorem+0xea>
 801124c:	2000      	movs	r0, #0
 801124e:	e7ee      	b.n	801122e <quorem+0xf6>

08011250 <_dtoa_r>:
 8011250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011254:	ec57 6b10 	vmov	r6, r7, d0
 8011258:	b097      	sub	sp, #92	; 0x5c
 801125a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801125c:	9106      	str	r1, [sp, #24]
 801125e:	4604      	mov	r4, r0
 8011260:	920b      	str	r2, [sp, #44]	; 0x2c
 8011262:	9312      	str	r3, [sp, #72]	; 0x48
 8011264:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011268:	e9cd 6700 	strd	r6, r7, [sp]
 801126c:	b93d      	cbnz	r5, 801127e <_dtoa_r+0x2e>
 801126e:	2010      	movs	r0, #16
 8011270:	f000 ff92 	bl	8012198 <malloc>
 8011274:	6260      	str	r0, [r4, #36]	; 0x24
 8011276:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801127a:	6005      	str	r5, [r0, #0]
 801127c:	60c5      	str	r5, [r0, #12]
 801127e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011280:	6819      	ldr	r1, [r3, #0]
 8011282:	b151      	cbz	r1, 801129a <_dtoa_r+0x4a>
 8011284:	685a      	ldr	r2, [r3, #4]
 8011286:	604a      	str	r2, [r1, #4]
 8011288:	2301      	movs	r3, #1
 801128a:	4093      	lsls	r3, r2
 801128c:	608b      	str	r3, [r1, #8]
 801128e:	4620      	mov	r0, r4
 8011290:	f000 ffd0 	bl	8012234 <_Bfree>
 8011294:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011296:	2200      	movs	r2, #0
 8011298:	601a      	str	r2, [r3, #0]
 801129a:	1e3b      	subs	r3, r7, #0
 801129c:	bfbb      	ittet	lt
 801129e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80112a2:	9301      	strlt	r3, [sp, #4]
 80112a4:	2300      	movge	r3, #0
 80112a6:	2201      	movlt	r2, #1
 80112a8:	bfac      	ite	ge
 80112aa:	f8c8 3000 	strge.w	r3, [r8]
 80112ae:	f8c8 2000 	strlt.w	r2, [r8]
 80112b2:	4baf      	ldr	r3, [pc, #700]	; (8011570 <_dtoa_r+0x320>)
 80112b4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80112b8:	ea33 0308 	bics.w	r3, r3, r8
 80112bc:	d114      	bne.n	80112e8 <_dtoa_r+0x98>
 80112be:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80112c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80112c4:	6013      	str	r3, [r2, #0]
 80112c6:	9b00      	ldr	r3, [sp, #0]
 80112c8:	b923      	cbnz	r3, 80112d4 <_dtoa_r+0x84>
 80112ca:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80112ce:	2800      	cmp	r0, #0
 80112d0:	f000 8542 	beq.w	8011d58 <_dtoa_r+0xb08>
 80112d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80112d6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8011584 <_dtoa_r+0x334>
 80112da:	2b00      	cmp	r3, #0
 80112dc:	f000 8544 	beq.w	8011d68 <_dtoa_r+0xb18>
 80112e0:	f10b 0303 	add.w	r3, fp, #3
 80112e4:	f000 bd3e 	b.w	8011d64 <_dtoa_r+0xb14>
 80112e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80112ec:	2200      	movs	r2, #0
 80112ee:	2300      	movs	r3, #0
 80112f0:	4630      	mov	r0, r6
 80112f2:	4639      	mov	r1, r7
 80112f4:	f7ef fbe8 	bl	8000ac8 <__aeabi_dcmpeq>
 80112f8:	4681      	mov	r9, r0
 80112fa:	b168      	cbz	r0, 8011318 <_dtoa_r+0xc8>
 80112fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80112fe:	2301      	movs	r3, #1
 8011300:	6013      	str	r3, [r2, #0]
 8011302:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011304:	2b00      	cmp	r3, #0
 8011306:	f000 8524 	beq.w	8011d52 <_dtoa_r+0xb02>
 801130a:	4b9a      	ldr	r3, [pc, #616]	; (8011574 <_dtoa_r+0x324>)
 801130c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801130e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8011312:	6013      	str	r3, [r2, #0]
 8011314:	f000 bd28 	b.w	8011d68 <_dtoa_r+0xb18>
 8011318:	aa14      	add	r2, sp, #80	; 0x50
 801131a:	a915      	add	r1, sp, #84	; 0x54
 801131c:	ec47 6b10 	vmov	d0, r6, r7
 8011320:	4620      	mov	r0, r4
 8011322:	f001 f9e0 	bl	80126e6 <__d2b>
 8011326:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801132a:	9004      	str	r0, [sp, #16]
 801132c:	2d00      	cmp	r5, #0
 801132e:	d07c      	beq.n	801142a <_dtoa_r+0x1da>
 8011330:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011334:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8011338:	46b2      	mov	sl, r6
 801133a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801133e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011342:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8011346:	2200      	movs	r2, #0
 8011348:	4b8b      	ldr	r3, [pc, #556]	; (8011578 <_dtoa_r+0x328>)
 801134a:	4650      	mov	r0, sl
 801134c:	4659      	mov	r1, fp
 801134e:	f7ee ff9b 	bl	8000288 <__aeabi_dsub>
 8011352:	a381      	add	r3, pc, #516	; (adr r3, 8011558 <_dtoa_r+0x308>)
 8011354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011358:	f7ef f94e 	bl	80005f8 <__aeabi_dmul>
 801135c:	a380      	add	r3, pc, #512	; (adr r3, 8011560 <_dtoa_r+0x310>)
 801135e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011362:	f7ee ff93 	bl	800028c <__adddf3>
 8011366:	4606      	mov	r6, r0
 8011368:	4628      	mov	r0, r5
 801136a:	460f      	mov	r7, r1
 801136c:	f7ef f8da 	bl	8000524 <__aeabi_i2d>
 8011370:	a37d      	add	r3, pc, #500	; (adr r3, 8011568 <_dtoa_r+0x318>)
 8011372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011376:	f7ef f93f 	bl	80005f8 <__aeabi_dmul>
 801137a:	4602      	mov	r2, r0
 801137c:	460b      	mov	r3, r1
 801137e:	4630      	mov	r0, r6
 8011380:	4639      	mov	r1, r7
 8011382:	f7ee ff83 	bl	800028c <__adddf3>
 8011386:	4606      	mov	r6, r0
 8011388:	460f      	mov	r7, r1
 801138a:	f7ef fbe5 	bl	8000b58 <__aeabi_d2iz>
 801138e:	2200      	movs	r2, #0
 8011390:	4682      	mov	sl, r0
 8011392:	2300      	movs	r3, #0
 8011394:	4630      	mov	r0, r6
 8011396:	4639      	mov	r1, r7
 8011398:	f7ef fba0 	bl	8000adc <__aeabi_dcmplt>
 801139c:	b148      	cbz	r0, 80113b2 <_dtoa_r+0x162>
 801139e:	4650      	mov	r0, sl
 80113a0:	f7ef f8c0 	bl	8000524 <__aeabi_i2d>
 80113a4:	4632      	mov	r2, r6
 80113a6:	463b      	mov	r3, r7
 80113a8:	f7ef fb8e 	bl	8000ac8 <__aeabi_dcmpeq>
 80113ac:	b908      	cbnz	r0, 80113b2 <_dtoa_r+0x162>
 80113ae:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80113b2:	f1ba 0f16 	cmp.w	sl, #22
 80113b6:	d859      	bhi.n	801146c <_dtoa_r+0x21c>
 80113b8:	4970      	ldr	r1, [pc, #448]	; (801157c <_dtoa_r+0x32c>)
 80113ba:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80113be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80113c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80113c6:	f7ef fba7 	bl	8000b18 <__aeabi_dcmpgt>
 80113ca:	2800      	cmp	r0, #0
 80113cc:	d050      	beq.n	8011470 <_dtoa_r+0x220>
 80113ce:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80113d2:	2300      	movs	r3, #0
 80113d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80113d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80113d8:	1b5d      	subs	r5, r3, r5
 80113da:	f1b5 0801 	subs.w	r8, r5, #1
 80113de:	bf49      	itett	mi
 80113e0:	f1c5 0301 	rsbmi	r3, r5, #1
 80113e4:	2300      	movpl	r3, #0
 80113e6:	9305      	strmi	r3, [sp, #20]
 80113e8:	f04f 0800 	movmi.w	r8, #0
 80113ec:	bf58      	it	pl
 80113ee:	9305      	strpl	r3, [sp, #20]
 80113f0:	f1ba 0f00 	cmp.w	sl, #0
 80113f4:	db3e      	blt.n	8011474 <_dtoa_r+0x224>
 80113f6:	2300      	movs	r3, #0
 80113f8:	44d0      	add	r8, sl
 80113fa:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80113fe:	9307      	str	r3, [sp, #28]
 8011400:	9b06      	ldr	r3, [sp, #24]
 8011402:	2b09      	cmp	r3, #9
 8011404:	f200 8090 	bhi.w	8011528 <_dtoa_r+0x2d8>
 8011408:	2b05      	cmp	r3, #5
 801140a:	bfc4      	itt	gt
 801140c:	3b04      	subgt	r3, #4
 801140e:	9306      	strgt	r3, [sp, #24]
 8011410:	9b06      	ldr	r3, [sp, #24]
 8011412:	f1a3 0302 	sub.w	r3, r3, #2
 8011416:	bfcc      	ite	gt
 8011418:	2500      	movgt	r5, #0
 801141a:	2501      	movle	r5, #1
 801141c:	2b03      	cmp	r3, #3
 801141e:	f200 808f 	bhi.w	8011540 <_dtoa_r+0x2f0>
 8011422:	e8df f003 	tbb	[pc, r3]
 8011426:	7f7d      	.short	0x7f7d
 8011428:	7131      	.short	0x7131
 801142a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801142e:	441d      	add	r5, r3
 8011430:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8011434:	2820      	cmp	r0, #32
 8011436:	dd13      	ble.n	8011460 <_dtoa_r+0x210>
 8011438:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801143c:	9b00      	ldr	r3, [sp, #0]
 801143e:	fa08 f800 	lsl.w	r8, r8, r0
 8011442:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8011446:	fa23 f000 	lsr.w	r0, r3, r0
 801144a:	ea48 0000 	orr.w	r0, r8, r0
 801144e:	f7ef f859 	bl	8000504 <__aeabi_ui2d>
 8011452:	2301      	movs	r3, #1
 8011454:	4682      	mov	sl, r0
 8011456:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801145a:	3d01      	subs	r5, #1
 801145c:	9313      	str	r3, [sp, #76]	; 0x4c
 801145e:	e772      	b.n	8011346 <_dtoa_r+0xf6>
 8011460:	9b00      	ldr	r3, [sp, #0]
 8011462:	f1c0 0020 	rsb	r0, r0, #32
 8011466:	fa03 f000 	lsl.w	r0, r3, r0
 801146a:	e7f0      	b.n	801144e <_dtoa_r+0x1fe>
 801146c:	2301      	movs	r3, #1
 801146e:	e7b1      	b.n	80113d4 <_dtoa_r+0x184>
 8011470:	900f      	str	r0, [sp, #60]	; 0x3c
 8011472:	e7b0      	b.n	80113d6 <_dtoa_r+0x186>
 8011474:	9b05      	ldr	r3, [sp, #20]
 8011476:	eba3 030a 	sub.w	r3, r3, sl
 801147a:	9305      	str	r3, [sp, #20]
 801147c:	f1ca 0300 	rsb	r3, sl, #0
 8011480:	9307      	str	r3, [sp, #28]
 8011482:	2300      	movs	r3, #0
 8011484:	930e      	str	r3, [sp, #56]	; 0x38
 8011486:	e7bb      	b.n	8011400 <_dtoa_r+0x1b0>
 8011488:	2301      	movs	r3, #1
 801148a:	930a      	str	r3, [sp, #40]	; 0x28
 801148c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801148e:	2b00      	cmp	r3, #0
 8011490:	dd59      	ble.n	8011546 <_dtoa_r+0x2f6>
 8011492:	9302      	str	r3, [sp, #8]
 8011494:	4699      	mov	r9, r3
 8011496:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011498:	2200      	movs	r2, #0
 801149a:	6072      	str	r2, [r6, #4]
 801149c:	2204      	movs	r2, #4
 801149e:	f102 0014 	add.w	r0, r2, #20
 80114a2:	4298      	cmp	r0, r3
 80114a4:	6871      	ldr	r1, [r6, #4]
 80114a6:	d953      	bls.n	8011550 <_dtoa_r+0x300>
 80114a8:	4620      	mov	r0, r4
 80114aa:	f000 fe8f 	bl	80121cc <_Balloc>
 80114ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80114b0:	6030      	str	r0, [r6, #0]
 80114b2:	f1b9 0f0e 	cmp.w	r9, #14
 80114b6:	f8d3 b000 	ldr.w	fp, [r3]
 80114ba:	f200 80e6 	bhi.w	801168a <_dtoa_r+0x43a>
 80114be:	2d00      	cmp	r5, #0
 80114c0:	f000 80e3 	beq.w	801168a <_dtoa_r+0x43a>
 80114c4:	ed9d 7b00 	vldr	d7, [sp]
 80114c8:	f1ba 0f00 	cmp.w	sl, #0
 80114cc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80114d0:	dd74      	ble.n	80115bc <_dtoa_r+0x36c>
 80114d2:	4a2a      	ldr	r2, [pc, #168]	; (801157c <_dtoa_r+0x32c>)
 80114d4:	f00a 030f 	and.w	r3, sl, #15
 80114d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80114dc:	ed93 7b00 	vldr	d7, [r3]
 80114e0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80114e4:	06f0      	lsls	r0, r6, #27
 80114e6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80114ea:	d565      	bpl.n	80115b8 <_dtoa_r+0x368>
 80114ec:	4b24      	ldr	r3, [pc, #144]	; (8011580 <_dtoa_r+0x330>)
 80114ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80114f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80114f6:	f7ef f9a9 	bl	800084c <__aeabi_ddiv>
 80114fa:	e9cd 0100 	strd	r0, r1, [sp]
 80114fe:	f006 060f 	and.w	r6, r6, #15
 8011502:	2503      	movs	r5, #3
 8011504:	4f1e      	ldr	r7, [pc, #120]	; (8011580 <_dtoa_r+0x330>)
 8011506:	e04c      	b.n	80115a2 <_dtoa_r+0x352>
 8011508:	2301      	movs	r3, #1
 801150a:	930a      	str	r3, [sp, #40]	; 0x28
 801150c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801150e:	4453      	add	r3, sl
 8011510:	f103 0901 	add.w	r9, r3, #1
 8011514:	9302      	str	r3, [sp, #8]
 8011516:	464b      	mov	r3, r9
 8011518:	2b01      	cmp	r3, #1
 801151a:	bfb8      	it	lt
 801151c:	2301      	movlt	r3, #1
 801151e:	e7ba      	b.n	8011496 <_dtoa_r+0x246>
 8011520:	2300      	movs	r3, #0
 8011522:	e7b2      	b.n	801148a <_dtoa_r+0x23a>
 8011524:	2300      	movs	r3, #0
 8011526:	e7f0      	b.n	801150a <_dtoa_r+0x2ba>
 8011528:	2501      	movs	r5, #1
 801152a:	2300      	movs	r3, #0
 801152c:	9306      	str	r3, [sp, #24]
 801152e:	950a      	str	r5, [sp, #40]	; 0x28
 8011530:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011534:	9302      	str	r3, [sp, #8]
 8011536:	4699      	mov	r9, r3
 8011538:	2200      	movs	r2, #0
 801153a:	2312      	movs	r3, #18
 801153c:	920b      	str	r2, [sp, #44]	; 0x2c
 801153e:	e7aa      	b.n	8011496 <_dtoa_r+0x246>
 8011540:	2301      	movs	r3, #1
 8011542:	930a      	str	r3, [sp, #40]	; 0x28
 8011544:	e7f4      	b.n	8011530 <_dtoa_r+0x2e0>
 8011546:	2301      	movs	r3, #1
 8011548:	9302      	str	r3, [sp, #8]
 801154a:	4699      	mov	r9, r3
 801154c:	461a      	mov	r2, r3
 801154e:	e7f5      	b.n	801153c <_dtoa_r+0x2ec>
 8011550:	3101      	adds	r1, #1
 8011552:	6071      	str	r1, [r6, #4]
 8011554:	0052      	lsls	r2, r2, #1
 8011556:	e7a2      	b.n	801149e <_dtoa_r+0x24e>
 8011558:	636f4361 	.word	0x636f4361
 801155c:	3fd287a7 	.word	0x3fd287a7
 8011560:	8b60c8b3 	.word	0x8b60c8b3
 8011564:	3fc68a28 	.word	0x3fc68a28
 8011568:	509f79fb 	.word	0x509f79fb
 801156c:	3fd34413 	.word	0x3fd34413
 8011570:	7ff00000 	.word	0x7ff00000
 8011574:	080151b5 	.word	0x080151b5
 8011578:	3ff80000 	.word	0x3ff80000
 801157c:	08015280 	.word	0x08015280
 8011580:	08015258 	.word	0x08015258
 8011584:	080151e1 	.word	0x080151e1
 8011588:	07f1      	lsls	r1, r6, #31
 801158a:	d508      	bpl.n	801159e <_dtoa_r+0x34e>
 801158c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011590:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011594:	f7ef f830 	bl	80005f8 <__aeabi_dmul>
 8011598:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801159c:	3501      	adds	r5, #1
 801159e:	1076      	asrs	r6, r6, #1
 80115a0:	3708      	adds	r7, #8
 80115a2:	2e00      	cmp	r6, #0
 80115a4:	d1f0      	bne.n	8011588 <_dtoa_r+0x338>
 80115a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80115aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80115ae:	f7ef f94d 	bl	800084c <__aeabi_ddiv>
 80115b2:	e9cd 0100 	strd	r0, r1, [sp]
 80115b6:	e01a      	b.n	80115ee <_dtoa_r+0x39e>
 80115b8:	2502      	movs	r5, #2
 80115ba:	e7a3      	b.n	8011504 <_dtoa_r+0x2b4>
 80115bc:	f000 80a0 	beq.w	8011700 <_dtoa_r+0x4b0>
 80115c0:	f1ca 0600 	rsb	r6, sl, #0
 80115c4:	4b9f      	ldr	r3, [pc, #636]	; (8011844 <_dtoa_r+0x5f4>)
 80115c6:	4fa0      	ldr	r7, [pc, #640]	; (8011848 <_dtoa_r+0x5f8>)
 80115c8:	f006 020f 	and.w	r2, r6, #15
 80115cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80115d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80115d8:	f7ef f80e 	bl	80005f8 <__aeabi_dmul>
 80115dc:	e9cd 0100 	strd	r0, r1, [sp]
 80115e0:	1136      	asrs	r6, r6, #4
 80115e2:	2300      	movs	r3, #0
 80115e4:	2502      	movs	r5, #2
 80115e6:	2e00      	cmp	r6, #0
 80115e8:	d17f      	bne.n	80116ea <_dtoa_r+0x49a>
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d1e1      	bne.n	80115b2 <_dtoa_r+0x362>
 80115ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	f000 8087 	beq.w	8011704 <_dtoa_r+0x4b4>
 80115f6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80115fa:	2200      	movs	r2, #0
 80115fc:	4b93      	ldr	r3, [pc, #588]	; (801184c <_dtoa_r+0x5fc>)
 80115fe:	4630      	mov	r0, r6
 8011600:	4639      	mov	r1, r7
 8011602:	f7ef fa6b 	bl	8000adc <__aeabi_dcmplt>
 8011606:	2800      	cmp	r0, #0
 8011608:	d07c      	beq.n	8011704 <_dtoa_r+0x4b4>
 801160a:	f1b9 0f00 	cmp.w	r9, #0
 801160e:	d079      	beq.n	8011704 <_dtoa_r+0x4b4>
 8011610:	9b02      	ldr	r3, [sp, #8]
 8011612:	2b00      	cmp	r3, #0
 8011614:	dd35      	ble.n	8011682 <_dtoa_r+0x432>
 8011616:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801161a:	9308      	str	r3, [sp, #32]
 801161c:	4639      	mov	r1, r7
 801161e:	2200      	movs	r2, #0
 8011620:	4b8b      	ldr	r3, [pc, #556]	; (8011850 <_dtoa_r+0x600>)
 8011622:	4630      	mov	r0, r6
 8011624:	f7ee ffe8 	bl	80005f8 <__aeabi_dmul>
 8011628:	e9cd 0100 	strd	r0, r1, [sp]
 801162c:	9f02      	ldr	r7, [sp, #8]
 801162e:	3501      	adds	r5, #1
 8011630:	4628      	mov	r0, r5
 8011632:	f7ee ff77 	bl	8000524 <__aeabi_i2d>
 8011636:	e9dd 2300 	ldrd	r2, r3, [sp]
 801163a:	f7ee ffdd 	bl	80005f8 <__aeabi_dmul>
 801163e:	2200      	movs	r2, #0
 8011640:	4b84      	ldr	r3, [pc, #528]	; (8011854 <_dtoa_r+0x604>)
 8011642:	f7ee fe23 	bl	800028c <__adddf3>
 8011646:	4605      	mov	r5, r0
 8011648:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801164c:	2f00      	cmp	r7, #0
 801164e:	d15d      	bne.n	801170c <_dtoa_r+0x4bc>
 8011650:	2200      	movs	r2, #0
 8011652:	4b81      	ldr	r3, [pc, #516]	; (8011858 <_dtoa_r+0x608>)
 8011654:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011658:	f7ee fe16 	bl	8000288 <__aeabi_dsub>
 801165c:	462a      	mov	r2, r5
 801165e:	4633      	mov	r3, r6
 8011660:	e9cd 0100 	strd	r0, r1, [sp]
 8011664:	f7ef fa58 	bl	8000b18 <__aeabi_dcmpgt>
 8011668:	2800      	cmp	r0, #0
 801166a:	f040 8288 	bne.w	8011b7e <_dtoa_r+0x92e>
 801166e:	462a      	mov	r2, r5
 8011670:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8011674:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011678:	f7ef fa30 	bl	8000adc <__aeabi_dcmplt>
 801167c:	2800      	cmp	r0, #0
 801167e:	f040 827c 	bne.w	8011b7a <_dtoa_r+0x92a>
 8011682:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011686:	e9cd 2300 	strd	r2, r3, [sp]
 801168a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801168c:	2b00      	cmp	r3, #0
 801168e:	f2c0 8150 	blt.w	8011932 <_dtoa_r+0x6e2>
 8011692:	f1ba 0f0e 	cmp.w	sl, #14
 8011696:	f300 814c 	bgt.w	8011932 <_dtoa_r+0x6e2>
 801169a:	4b6a      	ldr	r3, [pc, #424]	; (8011844 <_dtoa_r+0x5f4>)
 801169c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80116a0:	ed93 7b00 	vldr	d7, [r3]
 80116a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80116ac:	f280 80d8 	bge.w	8011860 <_dtoa_r+0x610>
 80116b0:	f1b9 0f00 	cmp.w	r9, #0
 80116b4:	f300 80d4 	bgt.w	8011860 <_dtoa_r+0x610>
 80116b8:	f040 825e 	bne.w	8011b78 <_dtoa_r+0x928>
 80116bc:	2200      	movs	r2, #0
 80116be:	4b66      	ldr	r3, [pc, #408]	; (8011858 <_dtoa_r+0x608>)
 80116c0:	ec51 0b17 	vmov	r0, r1, d7
 80116c4:	f7ee ff98 	bl	80005f8 <__aeabi_dmul>
 80116c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80116cc:	f7ef fa1a 	bl	8000b04 <__aeabi_dcmpge>
 80116d0:	464f      	mov	r7, r9
 80116d2:	464e      	mov	r6, r9
 80116d4:	2800      	cmp	r0, #0
 80116d6:	f040 8234 	bne.w	8011b42 <_dtoa_r+0x8f2>
 80116da:	2331      	movs	r3, #49	; 0x31
 80116dc:	f10b 0501 	add.w	r5, fp, #1
 80116e0:	f88b 3000 	strb.w	r3, [fp]
 80116e4:	f10a 0a01 	add.w	sl, sl, #1
 80116e8:	e22f      	b.n	8011b4a <_dtoa_r+0x8fa>
 80116ea:	07f2      	lsls	r2, r6, #31
 80116ec:	d505      	bpl.n	80116fa <_dtoa_r+0x4aa>
 80116ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80116f2:	f7ee ff81 	bl	80005f8 <__aeabi_dmul>
 80116f6:	3501      	adds	r5, #1
 80116f8:	2301      	movs	r3, #1
 80116fa:	1076      	asrs	r6, r6, #1
 80116fc:	3708      	adds	r7, #8
 80116fe:	e772      	b.n	80115e6 <_dtoa_r+0x396>
 8011700:	2502      	movs	r5, #2
 8011702:	e774      	b.n	80115ee <_dtoa_r+0x39e>
 8011704:	f8cd a020 	str.w	sl, [sp, #32]
 8011708:	464f      	mov	r7, r9
 801170a:	e791      	b.n	8011630 <_dtoa_r+0x3e0>
 801170c:	4b4d      	ldr	r3, [pc, #308]	; (8011844 <_dtoa_r+0x5f4>)
 801170e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011712:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8011716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011718:	2b00      	cmp	r3, #0
 801171a:	d047      	beq.n	80117ac <_dtoa_r+0x55c>
 801171c:	4602      	mov	r2, r0
 801171e:	460b      	mov	r3, r1
 8011720:	2000      	movs	r0, #0
 8011722:	494e      	ldr	r1, [pc, #312]	; (801185c <_dtoa_r+0x60c>)
 8011724:	f7ef f892 	bl	800084c <__aeabi_ddiv>
 8011728:	462a      	mov	r2, r5
 801172a:	4633      	mov	r3, r6
 801172c:	f7ee fdac 	bl	8000288 <__aeabi_dsub>
 8011730:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011734:	465d      	mov	r5, fp
 8011736:	e9dd 0100 	ldrd	r0, r1, [sp]
 801173a:	f7ef fa0d 	bl	8000b58 <__aeabi_d2iz>
 801173e:	4606      	mov	r6, r0
 8011740:	f7ee fef0 	bl	8000524 <__aeabi_i2d>
 8011744:	4602      	mov	r2, r0
 8011746:	460b      	mov	r3, r1
 8011748:	e9dd 0100 	ldrd	r0, r1, [sp]
 801174c:	f7ee fd9c 	bl	8000288 <__aeabi_dsub>
 8011750:	3630      	adds	r6, #48	; 0x30
 8011752:	f805 6b01 	strb.w	r6, [r5], #1
 8011756:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801175a:	e9cd 0100 	strd	r0, r1, [sp]
 801175e:	f7ef f9bd 	bl	8000adc <__aeabi_dcmplt>
 8011762:	2800      	cmp	r0, #0
 8011764:	d163      	bne.n	801182e <_dtoa_r+0x5de>
 8011766:	e9dd 2300 	ldrd	r2, r3, [sp]
 801176a:	2000      	movs	r0, #0
 801176c:	4937      	ldr	r1, [pc, #220]	; (801184c <_dtoa_r+0x5fc>)
 801176e:	f7ee fd8b 	bl	8000288 <__aeabi_dsub>
 8011772:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8011776:	f7ef f9b1 	bl	8000adc <__aeabi_dcmplt>
 801177a:	2800      	cmp	r0, #0
 801177c:	f040 80b7 	bne.w	80118ee <_dtoa_r+0x69e>
 8011780:	eba5 030b 	sub.w	r3, r5, fp
 8011784:	429f      	cmp	r7, r3
 8011786:	f77f af7c 	ble.w	8011682 <_dtoa_r+0x432>
 801178a:	2200      	movs	r2, #0
 801178c:	4b30      	ldr	r3, [pc, #192]	; (8011850 <_dtoa_r+0x600>)
 801178e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011792:	f7ee ff31 	bl	80005f8 <__aeabi_dmul>
 8011796:	2200      	movs	r2, #0
 8011798:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801179c:	4b2c      	ldr	r3, [pc, #176]	; (8011850 <_dtoa_r+0x600>)
 801179e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80117a2:	f7ee ff29 	bl	80005f8 <__aeabi_dmul>
 80117a6:	e9cd 0100 	strd	r0, r1, [sp]
 80117aa:	e7c4      	b.n	8011736 <_dtoa_r+0x4e6>
 80117ac:	462a      	mov	r2, r5
 80117ae:	4633      	mov	r3, r6
 80117b0:	f7ee ff22 	bl	80005f8 <__aeabi_dmul>
 80117b4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80117b8:	eb0b 0507 	add.w	r5, fp, r7
 80117bc:	465e      	mov	r6, fp
 80117be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80117c2:	f7ef f9c9 	bl	8000b58 <__aeabi_d2iz>
 80117c6:	4607      	mov	r7, r0
 80117c8:	f7ee feac 	bl	8000524 <__aeabi_i2d>
 80117cc:	3730      	adds	r7, #48	; 0x30
 80117ce:	4602      	mov	r2, r0
 80117d0:	460b      	mov	r3, r1
 80117d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80117d6:	f7ee fd57 	bl	8000288 <__aeabi_dsub>
 80117da:	f806 7b01 	strb.w	r7, [r6], #1
 80117de:	42ae      	cmp	r6, r5
 80117e0:	e9cd 0100 	strd	r0, r1, [sp]
 80117e4:	f04f 0200 	mov.w	r2, #0
 80117e8:	d126      	bne.n	8011838 <_dtoa_r+0x5e8>
 80117ea:	4b1c      	ldr	r3, [pc, #112]	; (801185c <_dtoa_r+0x60c>)
 80117ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80117f0:	f7ee fd4c 	bl	800028c <__adddf3>
 80117f4:	4602      	mov	r2, r0
 80117f6:	460b      	mov	r3, r1
 80117f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80117fc:	f7ef f98c 	bl	8000b18 <__aeabi_dcmpgt>
 8011800:	2800      	cmp	r0, #0
 8011802:	d174      	bne.n	80118ee <_dtoa_r+0x69e>
 8011804:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8011808:	2000      	movs	r0, #0
 801180a:	4914      	ldr	r1, [pc, #80]	; (801185c <_dtoa_r+0x60c>)
 801180c:	f7ee fd3c 	bl	8000288 <__aeabi_dsub>
 8011810:	4602      	mov	r2, r0
 8011812:	460b      	mov	r3, r1
 8011814:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011818:	f7ef f960 	bl	8000adc <__aeabi_dcmplt>
 801181c:	2800      	cmp	r0, #0
 801181e:	f43f af30 	beq.w	8011682 <_dtoa_r+0x432>
 8011822:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011826:	2b30      	cmp	r3, #48	; 0x30
 8011828:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 801182c:	d002      	beq.n	8011834 <_dtoa_r+0x5e4>
 801182e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011832:	e04a      	b.n	80118ca <_dtoa_r+0x67a>
 8011834:	4615      	mov	r5, r2
 8011836:	e7f4      	b.n	8011822 <_dtoa_r+0x5d2>
 8011838:	4b05      	ldr	r3, [pc, #20]	; (8011850 <_dtoa_r+0x600>)
 801183a:	f7ee fedd 	bl	80005f8 <__aeabi_dmul>
 801183e:	e9cd 0100 	strd	r0, r1, [sp]
 8011842:	e7bc      	b.n	80117be <_dtoa_r+0x56e>
 8011844:	08015280 	.word	0x08015280
 8011848:	08015258 	.word	0x08015258
 801184c:	3ff00000 	.word	0x3ff00000
 8011850:	40240000 	.word	0x40240000
 8011854:	401c0000 	.word	0x401c0000
 8011858:	40140000 	.word	0x40140000
 801185c:	3fe00000 	.word	0x3fe00000
 8011860:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011864:	465d      	mov	r5, fp
 8011866:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801186a:	4630      	mov	r0, r6
 801186c:	4639      	mov	r1, r7
 801186e:	f7ee ffed 	bl	800084c <__aeabi_ddiv>
 8011872:	f7ef f971 	bl	8000b58 <__aeabi_d2iz>
 8011876:	4680      	mov	r8, r0
 8011878:	f7ee fe54 	bl	8000524 <__aeabi_i2d>
 801187c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011880:	f7ee feba 	bl	80005f8 <__aeabi_dmul>
 8011884:	4602      	mov	r2, r0
 8011886:	460b      	mov	r3, r1
 8011888:	4630      	mov	r0, r6
 801188a:	4639      	mov	r1, r7
 801188c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8011890:	f7ee fcfa 	bl	8000288 <__aeabi_dsub>
 8011894:	f805 6b01 	strb.w	r6, [r5], #1
 8011898:	eba5 060b 	sub.w	r6, r5, fp
 801189c:	45b1      	cmp	r9, r6
 801189e:	4602      	mov	r2, r0
 80118a0:	460b      	mov	r3, r1
 80118a2:	d139      	bne.n	8011918 <_dtoa_r+0x6c8>
 80118a4:	f7ee fcf2 	bl	800028c <__adddf3>
 80118a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80118ac:	4606      	mov	r6, r0
 80118ae:	460f      	mov	r7, r1
 80118b0:	f7ef f932 	bl	8000b18 <__aeabi_dcmpgt>
 80118b4:	b9c8      	cbnz	r0, 80118ea <_dtoa_r+0x69a>
 80118b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80118ba:	4630      	mov	r0, r6
 80118bc:	4639      	mov	r1, r7
 80118be:	f7ef f903 	bl	8000ac8 <__aeabi_dcmpeq>
 80118c2:	b110      	cbz	r0, 80118ca <_dtoa_r+0x67a>
 80118c4:	f018 0f01 	tst.w	r8, #1
 80118c8:	d10f      	bne.n	80118ea <_dtoa_r+0x69a>
 80118ca:	9904      	ldr	r1, [sp, #16]
 80118cc:	4620      	mov	r0, r4
 80118ce:	f000 fcb1 	bl	8012234 <_Bfree>
 80118d2:	2300      	movs	r3, #0
 80118d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80118d6:	702b      	strb	r3, [r5, #0]
 80118d8:	f10a 0301 	add.w	r3, sl, #1
 80118dc:	6013      	str	r3, [r2, #0]
 80118de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	f000 8241 	beq.w	8011d68 <_dtoa_r+0xb18>
 80118e6:	601d      	str	r5, [r3, #0]
 80118e8:	e23e      	b.n	8011d68 <_dtoa_r+0xb18>
 80118ea:	f8cd a020 	str.w	sl, [sp, #32]
 80118ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80118f2:	2a39      	cmp	r2, #57	; 0x39
 80118f4:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80118f8:	d108      	bne.n	801190c <_dtoa_r+0x6bc>
 80118fa:	459b      	cmp	fp, r3
 80118fc:	d10a      	bne.n	8011914 <_dtoa_r+0x6c4>
 80118fe:	9b08      	ldr	r3, [sp, #32]
 8011900:	3301      	adds	r3, #1
 8011902:	9308      	str	r3, [sp, #32]
 8011904:	2330      	movs	r3, #48	; 0x30
 8011906:	f88b 3000 	strb.w	r3, [fp]
 801190a:	465b      	mov	r3, fp
 801190c:	781a      	ldrb	r2, [r3, #0]
 801190e:	3201      	adds	r2, #1
 8011910:	701a      	strb	r2, [r3, #0]
 8011912:	e78c      	b.n	801182e <_dtoa_r+0x5de>
 8011914:	461d      	mov	r5, r3
 8011916:	e7ea      	b.n	80118ee <_dtoa_r+0x69e>
 8011918:	2200      	movs	r2, #0
 801191a:	4b9b      	ldr	r3, [pc, #620]	; (8011b88 <_dtoa_r+0x938>)
 801191c:	f7ee fe6c 	bl	80005f8 <__aeabi_dmul>
 8011920:	2200      	movs	r2, #0
 8011922:	2300      	movs	r3, #0
 8011924:	4606      	mov	r6, r0
 8011926:	460f      	mov	r7, r1
 8011928:	f7ef f8ce 	bl	8000ac8 <__aeabi_dcmpeq>
 801192c:	2800      	cmp	r0, #0
 801192e:	d09a      	beq.n	8011866 <_dtoa_r+0x616>
 8011930:	e7cb      	b.n	80118ca <_dtoa_r+0x67a>
 8011932:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011934:	2a00      	cmp	r2, #0
 8011936:	f000 808b 	beq.w	8011a50 <_dtoa_r+0x800>
 801193a:	9a06      	ldr	r2, [sp, #24]
 801193c:	2a01      	cmp	r2, #1
 801193e:	dc6e      	bgt.n	8011a1e <_dtoa_r+0x7ce>
 8011940:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011942:	2a00      	cmp	r2, #0
 8011944:	d067      	beq.n	8011a16 <_dtoa_r+0x7c6>
 8011946:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801194a:	9f07      	ldr	r7, [sp, #28]
 801194c:	9d05      	ldr	r5, [sp, #20]
 801194e:	9a05      	ldr	r2, [sp, #20]
 8011950:	2101      	movs	r1, #1
 8011952:	441a      	add	r2, r3
 8011954:	4620      	mov	r0, r4
 8011956:	9205      	str	r2, [sp, #20]
 8011958:	4498      	add	r8, r3
 801195a:	f000 fd0b 	bl	8012374 <__i2b>
 801195e:	4606      	mov	r6, r0
 8011960:	2d00      	cmp	r5, #0
 8011962:	dd0c      	ble.n	801197e <_dtoa_r+0x72e>
 8011964:	f1b8 0f00 	cmp.w	r8, #0
 8011968:	dd09      	ble.n	801197e <_dtoa_r+0x72e>
 801196a:	4545      	cmp	r5, r8
 801196c:	9a05      	ldr	r2, [sp, #20]
 801196e:	462b      	mov	r3, r5
 8011970:	bfa8      	it	ge
 8011972:	4643      	movge	r3, r8
 8011974:	1ad2      	subs	r2, r2, r3
 8011976:	9205      	str	r2, [sp, #20]
 8011978:	1aed      	subs	r5, r5, r3
 801197a:	eba8 0803 	sub.w	r8, r8, r3
 801197e:	9b07      	ldr	r3, [sp, #28]
 8011980:	b1eb      	cbz	r3, 80119be <_dtoa_r+0x76e>
 8011982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011984:	2b00      	cmp	r3, #0
 8011986:	d067      	beq.n	8011a58 <_dtoa_r+0x808>
 8011988:	b18f      	cbz	r7, 80119ae <_dtoa_r+0x75e>
 801198a:	4631      	mov	r1, r6
 801198c:	463a      	mov	r2, r7
 801198e:	4620      	mov	r0, r4
 8011990:	f000 fd90 	bl	80124b4 <__pow5mult>
 8011994:	9a04      	ldr	r2, [sp, #16]
 8011996:	4601      	mov	r1, r0
 8011998:	4606      	mov	r6, r0
 801199a:	4620      	mov	r0, r4
 801199c:	f000 fcf3 	bl	8012386 <__multiply>
 80119a0:	9904      	ldr	r1, [sp, #16]
 80119a2:	9008      	str	r0, [sp, #32]
 80119a4:	4620      	mov	r0, r4
 80119a6:	f000 fc45 	bl	8012234 <_Bfree>
 80119aa:	9b08      	ldr	r3, [sp, #32]
 80119ac:	9304      	str	r3, [sp, #16]
 80119ae:	9b07      	ldr	r3, [sp, #28]
 80119b0:	1bda      	subs	r2, r3, r7
 80119b2:	d004      	beq.n	80119be <_dtoa_r+0x76e>
 80119b4:	9904      	ldr	r1, [sp, #16]
 80119b6:	4620      	mov	r0, r4
 80119b8:	f000 fd7c 	bl	80124b4 <__pow5mult>
 80119bc:	9004      	str	r0, [sp, #16]
 80119be:	2101      	movs	r1, #1
 80119c0:	4620      	mov	r0, r4
 80119c2:	f000 fcd7 	bl	8012374 <__i2b>
 80119c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80119c8:	4607      	mov	r7, r0
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	f000 81d0 	beq.w	8011d70 <_dtoa_r+0xb20>
 80119d0:	461a      	mov	r2, r3
 80119d2:	4601      	mov	r1, r0
 80119d4:	4620      	mov	r0, r4
 80119d6:	f000 fd6d 	bl	80124b4 <__pow5mult>
 80119da:	9b06      	ldr	r3, [sp, #24]
 80119dc:	2b01      	cmp	r3, #1
 80119de:	4607      	mov	r7, r0
 80119e0:	dc40      	bgt.n	8011a64 <_dtoa_r+0x814>
 80119e2:	9b00      	ldr	r3, [sp, #0]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d139      	bne.n	8011a5c <_dtoa_r+0x80c>
 80119e8:	9b01      	ldr	r3, [sp, #4]
 80119ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d136      	bne.n	8011a60 <_dtoa_r+0x810>
 80119f2:	9b01      	ldr	r3, [sp, #4]
 80119f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80119f8:	0d1b      	lsrs	r3, r3, #20
 80119fa:	051b      	lsls	r3, r3, #20
 80119fc:	b12b      	cbz	r3, 8011a0a <_dtoa_r+0x7ba>
 80119fe:	9b05      	ldr	r3, [sp, #20]
 8011a00:	3301      	adds	r3, #1
 8011a02:	9305      	str	r3, [sp, #20]
 8011a04:	f108 0801 	add.w	r8, r8, #1
 8011a08:	2301      	movs	r3, #1
 8011a0a:	9307      	str	r3, [sp, #28]
 8011a0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d12a      	bne.n	8011a68 <_dtoa_r+0x818>
 8011a12:	2001      	movs	r0, #1
 8011a14:	e030      	b.n	8011a78 <_dtoa_r+0x828>
 8011a16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011a18:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011a1c:	e795      	b.n	801194a <_dtoa_r+0x6fa>
 8011a1e:	9b07      	ldr	r3, [sp, #28]
 8011a20:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8011a24:	42bb      	cmp	r3, r7
 8011a26:	bfbf      	itttt	lt
 8011a28:	9b07      	ldrlt	r3, [sp, #28]
 8011a2a:	9707      	strlt	r7, [sp, #28]
 8011a2c:	1afa      	sublt	r2, r7, r3
 8011a2e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8011a30:	bfbb      	ittet	lt
 8011a32:	189b      	addlt	r3, r3, r2
 8011a34:	930e      	strlt	r3, [sp, #56]	; 0x38
 8011a36:	1bdf      	subge	r7, r3, r7
 8011a38:	2700      	movlt	r7, #0
 8011a3a:	f1b9 0f00 	cmp.w	r9, #0
 8011a3e:	bfb5      	itete	lt
 8011a40:	9b05      	ldrlt	r3, [sp, #20]
 8011a42:	9d05      	ldrge	r5, [sp, #20]
 8011a44:	eba3 0509 	sublt.w	r5, r3, r9
 8011a48:	464b      	movge	r3, r9
 8011a4a:	bfb8      	it	lt
 8011a4c:	2300      	movlt	r3, #0
 8011a4e:	e77e      	b.n	801194e <_dtoa_r+0x6fe>
 8011a50:	9f07      	ldr	r7, [sp, #28]
 8011a52:	9d05      	ldr	r5, [sp, #20]
 8011a54:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8011a56:	e783      	b.n	8011960 <_dtoa_r+0x710>
 8011a58:	9a07      	ldr	r2, [sp, #28]
 8011a5a:	e7ab      	b.n	80119b4 <_dtoa_r+0x764>
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	e7d4      	b.n	8011a0a <_dtoa_r+0x7ba>
 8011a60:	9b00      	ldr	r3, [sp, #0]
 8011a62:	e7d2      	b.n	8011a0a <_dtoa_r+0x7ba>
 8011a64:	2300      	movs	r3, #0
 8011a66:	9307      	str	r3, [sp, #28]
 8011a68:	693b      	ldr	r3, [r7, #16]
 8011a6a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8011a6e:	6918      	ldr	r0, [r3, #16]
 8011a70:	f000 fc32 	bl	80122d8 <__hi0bits>
 8011a74:	f1c0 0020 	rsb	r0, r0, #32
 8011a78:	4440      	add	r0, r8
 8011a7a:	f010 001f 	ands.w	r0, r0, #31
 8011a7e:	d047      	beq.n	8011b10 <_dtoa_r+0x8c0>
 8011a80:	f1c0 0320 	rsb	r3, r0, #32
 8011a84:	2b04      	cmp	r3, #4
 8011a86:	dd3b      	ble.n	8011b00 <_dtoa_r+0x8b0>
 8011a88:	9b05      	ldr	r3, [sp, #20]
 8011a8a:	f1c0 001c 	rsb	r0, r0, #28
 8011a8e:	4403      	add	r3, r0
 8011a90:	9305      	str	r3, [sp, #20]
 8011a92:	4405      	add	r5, r0
 8011a94:	4480      	add	r8, r0
 8011a96:	9b05      	ldr	r3, [sp, #20]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	dd05      	ble.n	8011aa8 <_dtoa_r+0x858>
 8011a9c:	461a      	mov	r2, r3
 8011a9e:	9904      	ldr	r1, [sp, #16]
 8011aa0:	4620      	mov	r0, r4
 8011aa2:	f000 fd55 	bl	8012550 <__lshift>
 8011aa6:	9004      	str	r0, [sp, #16]
 8011aa8:	f1b8 0f00 	cmp.w	r8, #0
 8011aac:	dd05      	ble.n	8011aba <_dtoa_r+0x86a>
 8011aae:	4639      	mov	r1, r7
 8011ab0:	4642      	mov	r2, r8
 8011ab2:	4620      	mov	r0, r4
 8011ab4:	f000 fd4c 	bl	8012550 <__lshift>
 8011ab8:	4607      	mov	r7, r0
 8011aba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011abc:	b353      	cbz	r3, 8011b14 <_dtoa_r+0x8c4>
 8011abe:	4639      	mov	r1, r7
 8011ac0:	9804      	ldr	r0, [sp, #16]
 8011ac2:	f000 fd99 	bl	80125f8 <__mcmp>
 8011ac6:	2800      	cmp	r0, #0
 8011ac8:	da24      	bge.n	8011b14 <_dtoa_r+0x8c4>
 8011aca:	2300      	movs	r3, #0
 8011acc:	220a      	movs	r2, #10
 8011ace:	9904      	ldr	r1, [sp, #16]
 8011ad0:	4620      	mov	r0, r4
 8011ad2:	f000 fbc6 	bl	8012262 <__multadd>
 8011ad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ad8:	9004      	str	r0, [sp, #16]
 8011ada:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	f000 814d 	beq.w	8011d7e <_dtoa_r+0xb2e>
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	4631      	mov	r1, r6
 8011ae8:	220a      	movs	r2, #10
 8011aea:	4620      	mov	r0, r4
 8011aec:	f000 fbb9 	bl	8012262 <__multadd>
 8011af0:	9b02      	ldr	r3, [sp, #8]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	4606      	mov	r6, r0
 8011af6:	dc4f      	bgt.n	8011b98 <_dtoa_r+0x948>
 8011af8:	9b06      	ldr	r3, [sp, #24]
 8011afa:	2b02      	cmp	r3, #2
 8011afc:	dd4c      	ble.n	8011b98 <_dtoa_r+0x948>
 8011afe:	e011      	b.n	8011b24 <_dtoa_r+0x8d4>
 8011b00:	d0c9      	beq.n	8011a96 <_dtoa_r+0x846>
 8011b02:	9a05      	ldr	r2, [sp, #20]
 8011b04:	331c      	adds	r3, #28
 8011b06:	441a      	add	r2, r3
 8011b08:	9205      	str	r2, [sp, #20]
 8011b0a:	441d      	add	r5, r3
 8011b0c:	4498      	add	r8, r3
 8011b0e:	e7c2      	b.n	8011a96 <_dtoa_r+0x846>
 8011b10:	4603      	mov	r3, r0
 8011b12:	e7f6      	b.n	8011b02 <_dtoa_r+0x8b2>
 8011b14:	f1b9 0f00 	cmp.w	r9, #0
 8011b18:	dc38      	bgt.n	8011b8c <_dtoa_r+0x93c>
 8011b1a:	9b06      	ldr	r3, [sp, #24]
 8011b1c:	2b02      	cmp	r3, #2
 8011b1e:	dd35      	ble.n	8011b8c <_dtoa_r+0x93c>
 8011b20:	f8cd 9008 	str.w	r9, [sp, #8]
 8011b24:	9b02      	ldr	r3, [sp, #8]
 8011b26:	b963      	cbnz	r3, 8011b42 <_dtoa_r+0x8f2>
 8011b28:	4639      	mov	r1, r7
 8011b2a:	2205      	movs	r2, #5
 8011b2c:	4620      	mov	r0, r4
 8011b2e:	f000 fb98 	bl	8012262 <__multadd>
 8011b32:	4601      	mov	r1, r0
 8011b34:	4607      	mov	r7, r0
 8011b36:	9804      	ldr	r0, [sp, #16]
 8011b38:	f000 fd5e 	bl	80125f8 <__mcmp>
 8011b3c:	2800      	cmp	r0, #0
 8011b3e:	f73f adcc 	bgt.w	80116da <_dtoa_r+0x48a>
 8011b42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011b44:	465d      	mov	r5, fp
 8011b46:	ea6f 0a03 	mvn.w	sl, r3
 8011b4a:	f04f 0900 	mov.w	r9, #0
 8011b4e:	4639      	mov	r1, r7
 8011b50:	4620      	mov	r0, r4
 8011b52:	f000 fb6f 	bl	8012234 <_Bfree>
 8011b56:	2e00      	cmp	r6, #0
 8011b58:	f43f aeb7 	beq.w	80118ca <_dtoa_r+0x67a>
 8011b5c:	f1b9 0f00 	cmp.w	r9, #0
 8011b60:	d005      	beq.n	8011b6e <_dtoa_r+0x91e>
 8011b62:	45b1      	cmp	r9, r6
 8011b64:	d003      	beq.n	8011b6e <_dtoa_r+0x91e>
 8011b66:	4649      	mov	r1, r9
 8011b68:	4620      	mov	r0, r4
 8011b6a:	f000 fb63 	bl	8012234 <_Bfree>
 8011b6e:	4631      	mov	r1, r6
 8011b70:	4620      	mov	r0, r4
 8011b72:	f000 fb5f 	bl	8012234 <_Bfree>
 8011b76:	e6a8      	b.n	80118ca <_dtoa_r+0x67a>
 8011b78:	2700      	movs	r7, #0
 8011b7a:	463e      	mov	r6, r7
 8011b7c:	e7e1      	b.n	8011b42 <_dtoa_r+0x8f2>
 8011b7e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011b82:	463e      	mov	r6, r7
 8011b84:	e5a9      	b.n	80116da <_dtoa_r+0x48a>
 8011b86:	bf00      	nop
 8011b88:	40240000 	.word	0x40240000
 8011b8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b8e:	f8cd 9008 	str.w	r9, [sp, #8]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	f000 80fa 	beq.w	8011d8c <_dtoa_r+0xb3c>
 8011b98:	2d00      	cmp	r5, #0
 8011b9a:	dd05      	ble.n	8011ba8 <_dtoa_r+0x958>
 8011b9c:	4631      	mov	r1, r6
 8011b9e:	462a      	mov	r2, r5
 8011ba0:	4620      	mov	r0, r4
 8011ba2:	f000 fcd5 	bl	8012550 <__lshift>
 8011ba6:	4606      	mov	r6, r0
 8011ba8:	9b07      	ldr	r3, [sp, #28]
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d04c      	beq.n	8011c48 <_dtoa_r+0x9f8>
 8011bae:	6871      	ldr	r1, [r6, #4]
 8011bb0:	4620      	mov	r0, r4
 8011bb2:	f000 fb0b 	bl	80121cc <_Balloc>
 8011bb6:	6932      	ldr	r2, [r6, #16]
 8011bb8:	3202      	adds	r2, #2
 8011bba:	4605      	mov	r5, r0
 8011bbc:	0092      	lsls	r2, r2, #2
 8011bbe:	f106 010c 	add.w	r1, r6, #12
 8011bc2:	300c      	adds	r0, #12
 8011bc4:	f7fe fcec 	bl	80105a0 <memcpy>
 8011bc8:	2201      	movs	r2, #1
 8011bca:	4629      	mov	r1, r5
 8011bcc:	4620      	mov	r0, r4
 8011bce:	f000 fcbf 	bl	8012550 <__lshift>
 8011bd2:	9b00      	ldr	r3, [sp, #0]
 8011bd4:	f8cd b014 	str.w	fp, [sp, #20]
 8011bd8:	f003 0301 	and.w	r3, r3, #1
 8011bdc:	46b1      	mov	r9, r6
 8011bde:	9307      	str	r3, [sp, #28]
 8011be0:	4606      	mov	r6, r0
 8011be2:	4639      	mov	r1, r7
 8011be4:	9804      	ldr	r0, [sp, #16]
 8011be6:	f7ff faa7 	bl	8011138 <quorem>
 8011bea:	4649      	mov	r1, r9
 8011bec:	4605      	mov	r5, r0
 8011bee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8011bf2:	9804      	ldr	r0, [sp, #16]
 8011bf4:	f000 fd00 	bl	80125f8 <__mcmp>
 8011bf8:	4632      	mov	r2, r6
 8011bfa:	9000      	str	r0, [sp, #0]
 8011bfc:	4639      	mov	r1, r7
 8011bfe:	4620      	mov	r0, r4
 8011c00:	f000 fd14 	bl	801262c <__mdiff>
 8011c04:	68c3      	ldr	r3, [r0, #12]
 8011c06:	4602      	mov	r2, r0
 8011c08:	bb03      	cbnz	r3, 8011c4c <_dtoa_r+0x9fc>
 8011c0a:	4601      	mov	r1, r0
 8011c0c:	9008      	str	r0, [sp, #32]
 8011c0e:	9804      	ldr	r0, [sp, #16]
 8011c10:	f000 fcf2 	bl	80125f8 <__mcmp>
 8011c14:	9a08      	ldr	r2, [sp, #32]
 8011c16:	4603      	mov	r3, r0
 8011c18:	4611      	mov	r1, r2
 8011c1a:	4620      	mov	r0, r4
 8011c1c:	9308      	str	r3, [sp, #32]
 8011c1e:	f000 fb09 	bl	8012234 <_Bfree>
 8011c22:	9b08      	ldr	r3, [sp, #32]
 8011c24:	b9a3      	cbnz	r3, 8011c50 <_dtoa_r+0xa00>
 8011c26:	9a06      	ldr	r2, [sp, #24]
 8011c28:	b992      	cbnz	r2, 8011c50 <_dtoa_r+0xa00>
 8011c2a:	9a07      	ldr	r2, [sp, #28]
 8011c2c:	b982      	cbnz	r2, 8011c50 <_dtoa_r+0xa00>
 8011c2e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011c32:	d029      	beq.n	8011c88 <_dtoa_r+0xa38>
 8011c34:	9b00      	ldr	r3, [sp, #0]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	dd01      	ble.n	8011c3e <_dtoa_r+0x9ee>
 8011c3a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8011c3e:	9b05      	ldr	r3, [sp, #20]
 8011c40:	1c5d      	adds	r5, r3, #1
 8011c42:	f883 8000 	strb.w	r8, [r3]
 8011c46:	e782      	b.n	8011b4e <_dtoa_r+0x8fe>
 8011c48:	4630      	mov	r0, r6
 8011c4a:	e7c2      	b.n	8011bd2 <_dtoa_r+0x982>
 8011c4c:	2301      	movs	r3, #1
 8011c4e:	e7e3      	b.n	8011c18 <_dtoa_r+0x9c8>
 8011c50:	9a00      	ldr	r2, [sp, #0]
 8011c52:	2a00      	cmp	r2, #0
 8011c54:	db04      	blt.n	8011c60 <_dtoa_r+0xa10>
 8011c56:	d125      	bne.n	8011ca4 <_dtoa_r+0xa54>
 8011c58:	9a06      	ldr	r2, [sp, #24]
 8011c5a:	bb1a      	cbnz	r2, 8011ca4 <_dtoa_r+0xa54>
 8011c5c:	9a07      	ldr	r2, [sp, #28]
 8011c5e:	bb0a      	cbnz	r2, 8011ca4 <_dtoa_r+0xa54>
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	ddec      	ble.n	8011c3e <_dtoa_r+0x9ee>
 8011c64:	2201      	movs	r2, #1
 8011c66:	9904      	ldr	r1, [sp, #16]
 8011c68:	4620      	mov	r0, r4
 8011c6a:	f000 fc71 	bl	8012550 <__lshift>
 8011c6e:	4639      	mov	r1, r7
 8011c70:	9004      	str	r0, [sp, #16]
 8011c72:	f000 fcc1 	bl	80125f8 <__mcmp>
 8011c76:	2800      	cmp	r0, #0
 8011c78:	dc03      	bgt.n	8011c82 <_dtoa_r+0xa32>
 8011c7a:	d1e0      	bne.n	8011c3e <_dtoa_r+0x9ee>
 8011c7c:	f018 0f01 	tst.w	r8, #1
 8011c80:	d0dd      	beq.n	8011c3e <_dtoa_r+0x9ee>
 8011c82:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011c86:	d1d8      	bne.n	8011c3a <_dtoa_r+0x9ea>
 8011c88:	9b05      	ldr	r3, [sp, #20]
 8011c8a:	9a05      	ldr	r2, [sp, #20]
 8011c8c:	1c5d      	adds	r5, r3, #1
 8011c8e:	2339      	movs	r3, #57	; 0x39
 8011c90:	7013      	strb	r3, [r2, #0]
 8011c92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011c96:	2b39      	cmp	r3, #57	; 0x39
 8011c98:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8011c9c:	d04f      	beq.n	8011d3e <_dtoa_r+0xaee>
 8011c9e:	3301      	adds	r3, #1
 8011ca0:	7013      	strb	r3, [r2, #0]
 8011ca2:	e754      	b.n	8011b4e <_dtoa_r+0x8fe>
 8011ca4:	9a05      	ldr	r2, [sp, #20]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	f102 0501 	add.w	r5, r2, #1
 8011cac:	dd06      	ble.n	8011cbc <_dtoa_r+0xa6c>
 8011cae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011cb2:	d0e9      	beq.n	8011c88 <_dtoa_r+0xa38>
 8011cb4:	f108 0801 	add.w	r8, r8, #1
 8011cb8:	9b05      	ldr	r3, [sp, #20]
 8011cba:	e7c2      	b.n	8011c42 <_dtoa_r+0x9f2>
 8011cbc:	9a02      	ldr	r2, [sp, #8]
 8011cbe:	f805 8c01 	strb.w	r8, [r5, #-1]
 8011cc2:	eba5 030b 	sub.w	r3, r5, fp
 8011cc6:	4293      	cmp	r3, r2
 8011cc8:	d021      	beq.n	8011d0e <_dtoa_r+0xabe>
 8011cca:	2300      	movs	r3, #0
 8011ccc:	220a      	movs	r2, #10
 8011cce:	9904      	ldr	r1, [sp, #16]
 8011cd0:	4620      	mov	r0, r4
 8011cd2:	f000 fac6 	bl	8012262 <__multadd>
 8011cd6:	45b1      	cmp	r9, r6
 8011cd8:	9004      	str	r0, [sp, #16]
 8011cda:	f04f 0300 	mov.w	r3, #0
 8011cde:	f04f 020a 	mov.w	r2, #10
 8011ce2:	4649      	mov	r1, r9
 8011ce4:	4620      	mov	r0, r4
 8011ce6:	d105      	bne.n	8011cf4 <_dtoa_r+0xaa4>
 8011ce8:	f000 fabb 	bl	8012262 <__multadd>
 8011cec:	4681      	mov	r9, r0
 8011cee:	4606      	mov	r6, r0
 8011cf0:	9505      	str	r5, [sp, #20]
 8011cf2:	e776      	b.n	8011be2 <_dtoa_r+0x992>
 8011cf4:	f000 fab5 	bl	8012262 <__multadd>
 8011cf8:	4631      	mov	r1, r6
 8011cfa:	4681      	mov	r9, r0
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	220a      	movs	r2, #10
 8011d00:	4620      	mov	r0, r4
 8011d02:	f000 faae 	bl	8012262 <__multadd>
 8011d06:	4606      	mov	r6, r0
 8011d08:	e7f2      	b.n	8011cf0 <_dtoa_r+0xaa0>
 8011d0a:	f04f 0900 	mov.w	r9, #0
 8011d0e:	2201      	movs	r2, #1
 8011d10:	9904      	ldr	r1, [sp, #16]
 8011d12:	4620      	mov	r0, r4
 8011d14:	f000 fc1c 	bl	8012550 <__lshift>
 8011d18:	4639      	mov	r1, r7
 8011d1a:	9004      	str	r0, [sp, #16]
 8011d1c:	f000 fc6c 	bl	80125f8 <__mcmp>
 8011d20:	2800      	cmp	r0, #0
 8011d22:	dcb6      	bgt.n	8011c92 <_dtoa_r+0xa42>
 8011d24:	d102      	bne.n	8011d2c <_dtoa_r+0xadc>
 8011d26:	f018 0f01 	tst.w	r8, #1
 8011d2a:	d1b2      	bne.n	8011c92 <_dtoa_r+0xa42>
 8011d2c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011d30:	2b30      	cmp	r3, #48	; 0x30
 8011d32:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8011d36:	f47f af0a 	bne.w	8011b4e <_dtoa_r+0x8fe>
 8011d3a:	4615      	mov	r5, r2
 8011d3c:	e7f6      	b.n	8011d2c <_dtoa_r+0xadc>
 8011d3e:	4593      	cmp	fp, r2
 8011d40:	d105      	bne.n	8011d4e <_dtoa_r+0xafe>
 8011d42:	2331      	movs	r3, #49	; 0x31
 8011d44:	f10a 0a01 	add.w	sl, sl, #1
 8011d48:	f88b 3000 	strb.w	r3, [fp]
 8011d4c:	e6ff      	b.n	8011b4e <_dtoa_r+0x8fe>
 8011d4e:	4615      	mov	r5, r2
 8011d50:	e79f      	b.n	8011c92 <_dtoa_r+0xa42>
 8011d52:	f8df b064 	ldr.w	fp, [pc, #100]	; 8011db8 <_dtoa_r+0xb68>
 8011d56:	e007      	b.n	8011d68 <_dtoa_r+0xb18>
 8011d58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011d5a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8011dbc <_dtoa_r+0xb6c>
 8011d5e:	b11b      	cbz	r3, 8011d68 <_dtoa_r+0xb18>
 8011d60:	f10b 0308 	add.w	r3, fp, #8
 8011d64:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011d66:	6013      	str	r3, [r2, #0]
 8011d68:	4658      	mov	r0, fp
 8011d6a:	b017      	add	sp, #92	; 0x5c
 8011d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d70:	9b06      	ldr	r3, [sp, #24]
 8011d72:	2b01      	cmp	r3, #1
 8011d74:	f77f ae35 	ble.w	80119e2 <_dtoa_r+0x792>
 8011d78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011d7a:	9307      	str	r3, [sp, #28]
 8011d7c:	e649      	b.n	8011a12 <_dtoa_r+0x7c2>
 8011d7e:	9b02      	ldr	r3, [sp, #8]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	dc03      	bgt.n	8011d8c <_dtoa_r+0xb3c>
 8011d84:	9b06      	ldr	r3, [sp, #24]
 8011d86:	2b02      	cmp	r3, #2
 8011d88:	f73f aecc 	bgt.w	8011b24 <_dtoa_r+0x8d4>
 8011d8c:	465d      	mov	r5, fp
 8011d8e:	4639      	mov	r1, r7
 8011d90:	9804      	ldr	r0, [sp, #16]
 8011d92:	f7ff f9d1 	bl	8011138 <quorem>
 8011d96:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8011d9a:	f805 8b01 	strb.w	r8, [r5], #1
 8011d9e:	9a02      	ldr	r2, [sp, #8]
 8011da0:	eba5 030b 	sub.w	r3, r5, fp
 8011da4:	429a      	cmp	r2, r3
 8011da6:	ddb0      	ble.n	8011d0a <_dtoa_r+0xaba>
 8011da8:	2300      	movs	r3, #0
 8011daa:	220a      	movs	r2, #10
 8011dac:	9904      	ldr	r1, [sp, #16]
 8011dae:	4620      	mov	r0, r4
 8011db0:	f000 fa57 	bl	8012262 <__multadd>
 8011db4:	9004      	str	r0, [sp, #16]
 8011db6:	e7ea      	b.n	8011d8e <_dtoa_r+0xb3e>
 8011db8:	080151b4 	.word	0x080151b4
 8011dbc:	080151d8 	.word	0x080151d8

08011dc0 <__sflush_r>:
 8011dc0:	898a      	ldrh	r2, [r1, #12]
 8011dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dc6:	4605      	mov	r5, r0
 8011dc8:	0710      	lsls	r0, r2, #28
 8011dca:	460c      	mov	r4, r1
 8011dcc:	d458      	bmi.n	8011e80 <__sflush_r+0xc0>
 8011dce:	684b      	ldr	r3, [r1, #4]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	dc05      	bgt.n	8011de0 <__sflush_r+0x20>
 8011dd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	dc02      	bgt.n	8011de0 <__sflush_r+0x20>
 8011dda:	2000      	movs	r0, #0
 8011ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011de0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011de2:	2e00      	cmp	r6, #0
 8011de4:	d0f9      	beq.n	8011dda <__sflush_r+0x1a>
 8011de6:	2300      	movs	r3, #0
 8011de8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011dec:	682f      	ldr	r7, [r5, #0]
 8011dee:	6a21      	ldr	r1, [r4, #32]
 8011df0:	602b      	str	r3, [r5, #0]
 8011df2:	d032      	beq.n	8011e5a <__sflush_r+0x9a>
 8011df4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011df6:	89a3      	ldrh	r3, [r4, #12]
 8011df8:	075a      	lsls	r2, r3, #29
 8011dfa:	d505      	bpl.n	8011e08 <__sflush_r+0x48>
 8011dfc:	6863      	ldr	r3, [r4, #4]
 8011dfe:	1ac0      	subs	r0, r0, r3
 8011e00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011e02:	b10b      	cbz	r3, 8011e08 <__sflush_r+0x48>
 8011e04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011e06:	1ac0      	subs	r0, r0, r3
 8011e08:	2300      	movs	r3, #0
 8011e0a:	4602      	mov	r2, r0
 8011e0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011e0e:	6a21      	ldr	r1, [r4, #32]
 8011e10:	4628      	mov	r0, r5
 8011e12:	47b0      	blx	r6
 8011e14:	1c43      	adds	r3, r0, #1
 8011e16:	89a3      	ldrh	r3, [r4, #12]
 8011e18:	d106      	bne.n	8011e28 <__sflush_r+0x68>
 8011e1a:	6829      	ldr	r1, [r5, #0]
 8011e1c:	291d      	cmp	r1, #29
 8011e1e:	d848      	bhi.n	8011eb2 <__sflush_r+0xf2>
 8011e20:	4a29      	ldr	r2, [pc, #164]	; (8011ec8 <__sflush_r+0x108>)
 8011e22:	40ca      	lsrs	r2, r1
 8011e24:	07d6      	lsls	r6, r2, #31
 8011e26:	d544      	bpl.n	8011eb2 <__sflush_r+0xf2>
 8011e28:	2200      	movs	r2, #0
 8011e2a:	6062      	str	r2, [r4, #4]
 8011e2c:	04d9      	lsls	r1, r3, #19
 8011e2e:	6922      	ldr	r2, [r4, #16]
 8011e30:	6022      	str	r2, [r4, #0]
 8011e32:	d504      	bpl.n	8011e3e <__sflush_r+0x7e>
 8011e34:	1c42      	adds	r2, r0, #1
 8011e36:	d101      	bne.n	8011e3c <__sflush_r+0x7c>
 8011e38:	682b      	ldr	r3, [r5, #0]
 8011e3a:	b903      	cbnz	r3, 8011e3e <__sflush_r+0x7e>
 8011e3c:	6560      	str	r0, [r4, #84]	; 0x54
 8011e3e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011e40:	602f      	str	r7, [r5, #0]
 8011e42:	2900      	cmp	r1, #0
 8011e44:	d0c9      	beq.n	8011dda <__sflush_r+0x1a>
 8011e46:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011e4a:	4299      	cmp	r1, r3
 8011e4c:	d002      	beq.n	8011e54 <__sflush_r+0x94>
 8011e4e:	4628      	mov	r0, r5
 8011e50:	f000 fca6 	bl	80127a0 <_free_r>
 8011e54:	2000      	movs	r0, #0
 8011e56:	6360      	str	r0, [r4, #52]	; 0x34
 8011e58:	e7c0      	b.n	8011ddc <__sflush_r+0x1c>
 8011e5a:	2301      	movs	r3, #1
 8011e5c:	4628      	mov	r0, r5
 8011e5e:	47b0      	blx	r6
 8011e60:	1c41      	adds	r1, r0, #1
 8011e62:	d1c8      	bne.n	8011df6 <__sflush_r+0x36>
 8011e64:	682b      	ldr	r3, [r5, #0]
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d0c5      	beq.n	8011df6 <__sflush_r+0x36>
 8011e6a:	2b1d      	cmp	r3, #29
 8011e6c:	d001      	beq.n	8011e72 <__sflush_r+0xb2>
 8011e6e:	2b16      	cmp	r3, #22
 8011e70:	d101      	bne.n	8011e76 <__sflush_r+0xb6>
 8011e72:	602f      	str	r7, [r5, #0]
 8011e74:	e7b1      	b.n	8011dda <__sflush_r+0x1a>
 8011e76:	89a3      	ldrh	r3, [r4, #12]
 8011e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e7c:	81a3      	strh	r3, [r4, #12]
 8011e7e:	e7ad      	b.n	8011ddc <__sflush_r+0x1c>
 8011e80:	690f      	ldr	r7, [r1, #16]
 8011e82:	2f00      	cmp	r7, #0
 8011e84:	d0a9      	beq.n	8011dda <__sflush_r+0x1a>
 8011e86:	0793      	lsls	r3, r2, #30
 8011e88:	680e      	ldr	r6, [r1, #0]
 8011e8a:	bf08      	it	eq
 8011e8c:	694b      	ldreq	r3, [r1, #20]
 8011e8e:	600f      	str	r7, [r1, #0]
 8011e90:	bf18      	it	ne
 8011e92:	2300      	movne	r3, #0
 8011e94:	eba6 0807 	sub.w	r8, r6, r7
 8011e98:	608b      	str	r3, [r1, #8]
 8011e9a:	f1b8 0f00 	cmp.w	r8, #0
 8011e9e:	dd9c      	ble.n	8011dda <__sflush_r+0x1a>
 8011ea0:	4643      	mov	r3, r8
 8011ea2:	463a      	mov	r2, r7
 8011ea4:	6a21      	ldr	r1, [r4, #32]
 8011ea6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011ea8:	4628      	mov	r0, r5
 8011eaa:	47b0      	blx	r6
 8011eac:	2800      	cmp	r0, #0
 8011eae:	dc06      	bgt.n	8011ebe <__sflush_r+0xfe>
 8011eb0:	89a3      	ldrh	r3, [r4, #12]
 8011eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011eb6:	81a3      	strh	r3, [r4, #12]
 8011eb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011ebc:	e78e      	b.n	8011ddc <__sflush_r+0x1c>
 8011ebe:	4407      	add	r7, r0
 8011ec0:	eba8 0800 	sub.w	r8, r8, r0
 8011ec4:	e7e9      	b.n	8011e9a <__sflush_r+0xda>
 8011ec6:	bf00      	nop
 8011ec8:	20400001 	.word	0x20400001

08011ecc <_fflush_r>:
 8011ecc:	b538      	push	{r3, r4, r5, lr}
 8011ece:	690b      	ldr	r3, [r1, #16]
 8011ed0:	4605      	mov	r5, r0
 8011ed2:	460c      	mov	r4, r1
 8011ed4:	b1db      	cbz	r3, 8011f0e <_fflush_r+0x42>
 8011ed6:	b118      	cbz	r0, 8011ee0 <_fflush_r+0x14>
 8011ed8:	6983      	ldr	r3, [r0, #24]
 8011eda:	b90b      	cbnz	r3, 8011ee0 <_fflush_r+0x14>
 8011edc:	f000 f860 	bl	8011fa0 <__sinit>
 8011ee0:	4b0c      	ldr	r3, [pc, #48]	; (8011f14 <_fflush_r+0x48>)
 8011ee2:	429c      	cmp	r4, r3
 8011ee4:	d109      	bne.n	8011efa <_fflush_r+0x2e>
 8011ee6:	686c      	ldr	r4, [r5, #4]
 8011ee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011eec:	b17b      	cbz	r3, 8011f0e <_fflush_r+0x42>
 8011eee:	4621      	mov	r1, r4
 8011ef0:	4628      	mov	r0, r5
 8011ef2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ef6:	f7ff bf63 	b.w	8011dc0 <__sflush_r>
 8011efa:	4b07      	ldr	r3, [pc, #28]	; (8011f18 <_fflush_r+0x4c>)
 8011efc:	429c      	cmp	r4, r3
 8011efe:	d101      	bne.n	8011f04 <_fflush_r+0x38>
 8011f00:	68ac      	ldr	r4, [r5, #8]
 8011f02:	e7f1      	b.n	8011ee8 <_fflush_r+0x1c>
 8011f04:	4b05      	ldr	r3, [pc, #20]	; (8011f1c <_fflush_r+0x50>)
 8011f06:	429c      	cmp	r4, r3
 8011f08:	bf08      	it	eq
 8011f0a:	68ec      	ldreq	r4, [r5, #12]
 8011f0c:	e7ec      	b.n	8011ee8 <_fflush_r+0x1c>
 8011f0e:	2000      	movs	r0, #0
 8011f10:	bd38      	pop	{r3, r4, r5, pc}
 8011f12:	bf00      	nop
 8011f14:	08015208 	.word	0x08015208
 8011f18:	08015228 	.word	0x08015228
 8011f1c:	080151e8 	.word	0x080151e8

08011f20 <std>:
 8011f20:	2300      	movs	r3, #0
 8011f22:	b510      	push	{r4, lr}
 8011f24:	4604      	mov	r4, r0
 8011f26:	e9c0 3300 	strd	r3, r3, [r0]
 8011f2a:	6083      	str	r3, [r0, #8]
 8011f2c:	8181      	strh	r1, [r0, #12]
 8011f2e:	6643      	str	r3, [r0, #100]	; 0x64
 8011f30:	81c2      	strh	r2, [r0, #14]
 8011f32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011f36:	6183      	str	r3, [r0, #24]
 8011f38:	4619      	mov	r1, r3
 8011f3a:	2208      	movs	r2, #8
 8011f3c:	305c      	adds	r0, #92	; 0x5c
 8011f3e:	f7fe fb3a 	bl	80105b6 <memset>
 8011f42:	4b05      	ldr	r3, [pc, #20]	; (8011f58 <std+0x38>)
 8011f44:	6263      	str	r3, [r4, #36]	; 0x24
 8011f46:	4b05      	ldr	r3, [pc, #20]	; (8011f5c <std+0x3c>)
 8011f48:	62a3      	str	r3, [r4, #40]	; 0x28
 8011f4a:	4b05      	ldr	r3, [pc, #20]	; (8011f60 <std+0x40>)
 8011f4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011f4e:	4b05      	ldr	r3, [pc, #20]	; (8011f64 <std+0x44>)
 8011f50:	6224      	str	r4, [r4, #32]
 8011f52:	6323      	str	r3, [r4, #48]	; 0x30
 8011f54:	bd10      	pop	{r4, pc}
 8011f56:	bf00      	nop
 8011f58:	08012e41 	.word	0x08012e41
 8011f5c:	08012e63 	.word	0x08012e63
 8011f60:	08012e9b 	.word	0x08012e9b
 8011f64:	08012ebf 	.word	0x08012ebf

08011f68 <_cleanup_r>:
 8011f68:	4901      	ldr	r1, [pc, #4]	; (8011f70 <_cleanup_r+0x8>)
 8011f6a:	f000 b885 	b.w	8012078 <_fwalk_reent>
 8011f6e:	bf00      	nop
 8011f70:	08011ecd 	.word	0x08011ecd

08011f74 <__sfmoreglue>:
 8011f74:	b570      	push	{r4, r5, r6, lr}
 8011f76:	1e4a      	subs	r2, r1, #1
 8011f78:	2568      	movs	r5, #104	; 0x68
 8011f7a:	4355      	muls	r5, r2
 8011f7c:	460e      	mov	r6, r1
 8011f7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011f82:	f000 fc5b 	bl	801283c <_malloc_r>
 8011f86:	4604      	mov	r4, r0
 8011f88:	b140      	cbz	r0, 8011f9c <__sfmoreglue+0x28>
 8011f8a:	2100      	movs	r1, #0
 8011f8c:	e9c0 1600 	strd	r1, r6, [r0]
 8011f90:	300c      	adds	r0, #12
 8011f92:	60a0      	str	r0, [r4, #8]
 8011f94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011f98:	f7fe fb0d 	bl	80105b6 <memset>
 8011f9c:	4620      	mov	r0, r4
 8011f9e:	bd70      	pop	{r4, r5, r6, pc}

08011fa0 <__sinit>:
 8011fa0:	6983      	ldr	r3, [r0, #24]
 8011fa2:	b510      	push	{r4, lr}
 8011fa4:	4604      	mov	r4, r0
 8011fa6:	bb33      	cbnz	r3, 8011ff6 <__sinit+0x56>
 8011fa8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8011fac:	6503      	str	r3, [r0, #80]	; 0x50
 8011fae:	4b12      	ldr	r3, [pc, #72]	; (8011ff8 <__sinit+0x58>)
 8011fb0:	4a12      	ldr	r2, [pc, #72]	; (8011ffc <__sinit+0x5c>)
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	6282      	str	r2, [r0, #40]	; 0x28
 8011fb6:	4298      	cmp	r0, r3
 8011fb8:	bf04      	itt	eq
 8011fba:	2301      	moveq	r3, #1
 8011fbc:	6183      	streq	r3, [r0, #24]
 8011fbe:	f000 f81f 	bl	8012000 <__sfp>
 8011fc2:	6060      	str	r0, [r4, #4]
 8011fc4:	4620      	mov	r0, r4
 8011fc6:	f000 f81b 	bl	8012000 <__sfp>
 8011fca:	60a0      	str	r0, [r4, #8]
 8011fcc:	4620      	mov	r0, r4
 8011fce:	f000 f817 	bl	8012000 <__sfp>
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	60e0      	str	r0, [r4, #12]
 8011fd6:	2104      	movs	r1, #4
 8011fd8:	6860      	ldr	r0, [r4, #4]
 8011fda:	f7ff ffa1 	bl	8011f20 <std>
 8011fde:	2201      	movs	r2, #1
 8011fe0:	2109      	movs	r1, #9
 8011fe2:	68a0      	ldr	r0, [r4, #8]
 8011fe4:	f7ff ff9c 	bl	8011f20 <std>
 8011fe8:	2202      	movs	r2, #2
 8011fea:	2112      	movs	r1, #18
 8011fec:	68e0      	ldr	r0, [r4, #12]
 8011fee:	f7ff ff97 	bl	8011f20 <std>
 8011ff2:	2301      	movs	r3, #1
 8011ff4:	61a3      	str	r3, [r4, #24]
 8011ff6:	bd10      	pop	{r4, pc}
 8011ff8:	080151a0 	.word	0x080151a0
 8011ffc:	08011f69 	.word	0x08011f69

08012000 <__sfp>:
 8012000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012002:	4b1b      	ldr	r3, [pc, #108]	; (8012070 <__sfp+0x70>)
 8012004:	681e      	ldr	r6, [r3, #0]
 8012006:	69b3      	ldr	r3, [r6, #24]
 8012008:	4607      	mov	r7, r0
 801200a:	b913      	cbnz	r3, 8012012 <__sfp+0x12>
 801200c:	4630      	mov	r0, r6
 801200e:	f7ff ffc7 	bl	8011fa0 <__sinit>
 8012012:	3648      	adds	r6, #72	; 0x48
 8012014:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012018:	3b01      	subs	r3, #1
 801201a:	d503      	bpl.n	8012024 <__sfp+0x24>
 801201c:	6833      	ldr	r3, [r6, #0]
 801201e:	b133      	cbz	r3, 801202e <__sfp+0x2e>
 8012020:	6836      	ldr	r6, [r6, #0]
 8012022:	e7f7      	b.n	8012014 <__sfp+0x14>
 8012024:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012028:	b16d      	cbz	r5, 8012046 <__sfp+0x46>
 801202a:	3468      	adds	r4, #104	; 0x68
 801202c:	e7f4      	b.n	8012018 <__sfp+0x18>
 801202e:	2104      	movs	r1, #4
 8012030:	4638      	mov	r0, r7
 8012032:	f7ff ff9f 	bl	8011f74 <__sfmoreglue>
 8012036:	6030      	str	r0, [r6, #0]
 8012038:	2800      	cmp	r0, #0
 801203a:	d1f1      	bne.n	8012020 <__sfp+0x20>
 801203c:	230c      	movs	r3, #12
 801203e:	603b      	str	r3, [r7, #0]
 8012040:	4604      	mov	r4, r0
 8012042:	4620      	mov	r0, r4
 8012044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012046:	4b0b      	ldr	r3, [pc, #44]	; (8012074 <__sfp+0x74>)
 8012048:	6665      	str	r5, [r4, #100]	; 0x64
 801204a:	e9c4 5500 	strd	r5, r5, [r4]
 801204e:	60a5      	str	r5, [r4, #8]
 8012050:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8012054:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8012058:	2208      	movs	r2, #8
 801205a:	4629      	mov	r1, r5
 801205c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012060:	f7fe faa9 	bl	80105b6 <memset>
 8012064:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012068:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801206c:	e7e9      	b.n	8012042 <__sfp+0x42>
 801206e:	bf00      	nop
 8012070:	080151a0 	.word	0x080151a0
 8012074:	ffff0001 	.word	0xffff0001

08012078 <_fwalk_reent>:
 8012078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801207c:	4680      	mov	r8, r0
 801207e:	4689      	mov	r9, r1
 8012080:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012084:	2600      	movs	r6, #0
 8012086:	b914      	cbnz	r4, 801208e <_fwalk_reent+0x16>
 8012088:	4630      	mov	r0, r6
 801208a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801208e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8012092:	3f01      	subs	r7, #1
 8012094:	d501      	bpl.n	801209a <_fwalk_reent+0x22>
 8012096:	6824      	ldr	r4, [r4, #0]
 8012098:	e7f5      	b.n	8012086 <_fwalk_reent+0xe>
 801209a:	89ab      	ldrh	r3, [r5, #12]
 801209c:	2b01      	cmp	r3, #1
 801209e:	d907      	bls.n	80120b0 <_fwalk_reent+0x38>
 80120a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80120a4:	3301      	adds	r3, #1
 80120a6:	d003      	beq.n	80120b0 <_fwalk_reent+0x38>
 80120a8:	4629      	mov	r1, r5
 80120aa:	4640      	mov	r0, r8
 80120ac:	47c8      	blx	r9
 80120ae:	4306      	orrs	r6, r0
 80120b0:	3568      	adds	r5, #104	; 0x68
 80120b2:	e7ee      	b.n	8012092 <_fwalk_reent+0x1a>

080120b4 <_localeconv_r>:
 80120b4:	4b04      	ldr	r3, [pc, #16]	; (80120c8 <_localeconv_r+0x14>)
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	6a18      	ldr	r0, [r3, #32]
 80120ba:	4b04      	ldr	r3, [pc, #16]	; (80120cc <_localeconv_r+0x18>)
 80120bc:	2800      	cmp	r0, #0
 80120be:	bf08      	it	eq
 80120c0:	4618      	moveq	r0, r3
 80120c2:	30f0      	adds	r0, #240	; 0xf0
 80120c4:	4770      	bx	lr
 80120c6:	bf00      	nop
 80120c8:	20000168 	.word	0x20000168
 80120cc:	200001cc 	.word	0x200001cc

080120d0 <__swhatbuf_r>:
 80120d0:	b570      	push	{r4, r5, r6, lr}
 80120d2:	460e      	mov	r6, r1
 80120d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120d8:	2900      	cmp	r1, #0
 80120da:	b096      	sub	sp, #88	; 0x58
 80120dc:	4614      	mov	r4, r2
 80120de:	461d      	mov	r5, r3
 80120e0:	da07      	bge.n	80120f2 <__swhatbuf_r+0x22>
 80120e2:	2300      	movs	r3, #0
 80120e4:	602b      	str	r3, [r5, #0]
 80120e6:	89b3      	ldrh	r3, [r6, #12]
 80120e8:	061a      	lsls	r2, r3, #24
 80120ea:	d410      	bmi.n	801210e <__swhatbuf_r+0x3e>
 80120ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80120f0:	e00e      	b.n	8012110 <__swhatbuf_r+0x40>
 80120f2:	466a      	mov	r2, sp
 80120f4:	f000 ff16 	bl	8012f24 <_fstat_r>
 80120f8:	2800      	cmp	r0, #0
 80120fa:	dbf2      	blt.n	80120e2 <__swhatbuf_r+0x12>
 80120fc:	9a01      	ldr	r2, [sp, #4]
 80120fe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012102:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012106:	425a      	negs	r2, r3
 8012108:	415a      	adcs	r2, r3
 801210a:	602a      	str	r2, [r5, #0]
 801210c:	e7ee      	b.n	80120ec <__swhatbuf_r+0x1c>
 801210e:	2340      	movs	r3, #64	; 0x40
 8012110:	2000      	movs	r0, #0
 8012112:	6023      	str	r3, [r4, #0]
 8012114:	b016      	add	sp, #88	; 0x58
 8012116:	bd70      	pop	{r4, r5, r6, pc}

08012118 <__smakebuf_r>:
 8012118:	898b      	ldrh	r3, [r1, #12]
 801211a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801211c:	079d      	lsls	r5, r3, #30
 801211e:	4606      	mov	r6, r0
 8012120:	460c      	mov	r4, r1
 8012122:	d507      	bpl.n	8012134 <__smakebuf_r+0x1c>
 8012124:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012128:	6023      	str	r3, [r4, #0]
 801212a:	6123      	str	r3, [r4, #16]
 801212c:	2301      	movs	r3, #1
 801212e:	6163      	str	r3, [r4, #20]
 8012130:	b002      	add	sp, #8
 8012132:	bd70      	pop	{r4, r5, r6, pc}
 8012134:	ab01      	add	r3, sp, #4
 8012136:	466a      	mov	r2, sp
 8012138:	f7ff ffca 	bl	80120d0 <__swhatbuf_r>
 801213c:	9900      	ldr	r1, [sp, #0]
 801213e:	4605      	mov	r5, r0
 8012140:	4630      	mov	r0, r6
 8012142:	f000 fb7b 	bl	801283c <_malloc_r>
 8012146:	b948      	cbnz	r0, 801215c <__smakebuf_r+0x44>
 8012148:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801214c:	059a      	lsls	r2, r3, #22
 801214e:	d4ef      	bmi.n	8012130 <__smakebuf_r+0x18>
 8012150:	f023 0303 	bic.w	r3, r3, #3
 8012154:	f043 0302 	orr.w	r3, r3, #2
 8012158:	81a3      	strh	r3, [r4, #12]
 801215a:	e7e3      	b.n	8012124 <__smakebuf_r+0xc>
 801215c:	4b0d      	ldr	r3, [pc, #52]	; (8012194 <__smakebuf_r+0x7c>)
 801215e:	62b3      	str	r3, [r6, #40]	; 0x28
 8012160:	89a3      	ldrh	r3, [r4, #12]
 8012162:	6020      	str	r0, [r4, #0]
 8012164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012168:	81a3      	strh	r3, [r4, #12]
 801216a:	9b00      	ldr	r3, [sp, #0]
 801216c:	6163      	str	r3, [r4, #20]
 801216e:	9b01      	ldr	r3, [sp, #4]
 8012170:	6120      	str	r0, [r4, #16]
 8012172:	b15b      	cbz	r3, 801218c <__smakebuf_r+0x74>
 8012174:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012178:	4630      	mov	r0, r6
 801217a:	f000 fee5 	bl	8012f48 <_isatty_r>
 801217e:	b128      	cbz	r0, 801218c <__smakebuf_r+0x74>
 8012180:	89a3      	ldrh	r3, [r4, #12]
 8012182:	f023 0303 	bic.w	r3, r3, #3
 8012186:	f043 0301 	orr.w	r3, r3, #1
 801218a:	81a3      	strh	r3, [r4, #12]
 801218c:	89a3      	ldrh	r3, [r4, #12]
 801218e:	431d      	orrs	r5, r3
 8012190:	81a5      	strh	r5, [r4, #12]
 8012192:	e7cd      	b.n	8012130 <__smakebuf_r+0x18>
 8012194:	08011f69 	.word	0x08011f69

08012198 <malloc>:
 8012198:	4b02      	ldr	r3, [pc, #8]	; (80121a4 <malloc+0xc>)
 801219a:	4601      	mov	r1, r0
 801219c:	6818      	ldr	r0, [r3, #0]
 801219e:	f000 bb4d 	b.w	801283c <_malloc_r>
 80121a2:	bf00      	nop
 80121a4:	20000168 	.word	0x20000168

080121a8 <__ascii_mbtowc>:
 80121a8:	b082      	sub	sp, #8
 80121aa:	b901      	cbnz	r1, 80121ae <__ascii_mbtowc+0x6>
 80121ac:	a901      	add	r1, sp, #4
 80121ae:	b142      	cbz	r2, 80121c2 <__ascii_mbtowc+0x1a>
 80121b0:	b14b      	cbz	r3, 80121c6 <__ascii_mbtowc+0x1e>
 80121b2:	7813      	ldrb	r3, [r2, #0]
 80121b4:	600b      	str	r3, [r1, #0]
 80121b6:	7812      	ldrb	r2, [r2, #0]
 80121b8:	1c10      	adds	r0, r2, #0
 80121ba:	bf18      	it	ne
 80121bc:	2001      	movne	r0, #1
 80121be:	b002      	add	sp, #8
 80121c0:	4770      	bx	lr
 80121c2:	4610      	mov	r0, r2
 80121c4:	e7fb      	b.n	80121be <__ascii_mbtowc+0x16>
 80121c6:	f06f 0001 	mvn.w	r0, #1
 80121ca:	e7f8      	b.n	80121be <__ascii_mbtowc+0x16>

080121cc <_Balloc>:
 80121cc:	b570      	push	{r4, r5, r6, lr}
 80121ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80121d0:	4604      	mov	r4, r0
 80121d2:	460e      	mov	r6, r1
 80121d4:	b93d      	cbnz	r5, 80121e6 <_Balloc+0x1a>
 80121d6:	2010      	movs	r0, #16
 80121d8:	f7ff ffde 	bl	8012198 <malloc>
 80121dc:	6260      	str	r0, [r4, #36]	; 0x24
 80121de:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80121e2:	6005      	str	r5, [r0, #0]
 80121e4:	60c5      	str	r5, [r0, #12]
 80121e6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80121e8:	68eb      	ldr	r3, [r5, #12]
 80121ea:	b183      	cbz	r3, 801220e <_Balloc+0x42>
 80121ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80121ee:	68db      	ldr	r3, [r3, #12]
 80121f0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80121f4:	b9b8      	cbnz	r0, 8012226 <_Balloc+0x5a>
 80121f6:	2101      	movs	r1, #1
 80121f8:	fa01 f506 	lsl.w	r5, r1, r6
 80121fc:	1d6a      	adds	r2, r5, #5
 80121fe:	0092      	lsls	r2, r2, #2
 8012200:	4620      	mov	r0, r4
 8012202:	f000 fabf 	bl	8012784 <_calloc_r>
 8012206:	b160      	cbz	r0, 8012222 <_Balloc+0x56>
 8012208:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801220c:	e00e      	b.n	801222c <_Balloc+0x60>
 801220e:	2221      	movs	r2, #33	; 0x21
 8012210:	2104      	movs	r1, #4
 8012212:	4620      	mov	r0, r4
 8012214:	f000 fab6 	bl	8012784 <_calloc_r>
 8012218:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801221a:	60e8      	str	r0, [r5, #12]
 801221c:	68db      	ldr	r3, [r3, #12]
 801221e:	2b00      	cmp	r3, #0
 8012220:	d1e4      	bne.n	80121ec <_Balloc+0x20>
 8012222:	2000      	movs	r0, #0
 8012224:	bd70      	pop	{r4, r5, r6, pc}
 8012226:	6802      	ldr	r2, [r0, #0]
 8012228:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801222c:	2300      	movs	r3, #0
 801222e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012232:	e7f7      	b.n	8012224 <_Balloc+0x58>

08012234 <_Bfree>:
 8012234:	b570      	push	{r4, r5, r6, lr}
 8012236:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8012238:	4606      	mov	r6, r0
 801223a:	460d      	mov	r5, r1
 801223c:	b93c      	cbnz	r4, 801224e <_Bfree+0x1a>
 801223e:	2010      	movs	r0, #16
 8012240:	f7ff ffaa 	bl	8012198 <malloc>
 8012244:	6270      	str	r0, [r6, #36]	; 0x24
 8012246:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801224a:	6004      	str	r4, [r0, #0]
 801224c:	60c4      	str	r4, [r0, #12]
 801224e:	b13d      	cbz	r5, 8012260 <_Bfree+0x2c>
 8012250:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012252:	686a      	ldr	r2, [r5, #4]
 8012254:	68db      	ldr	r3, [r3, #12]
 8012256:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801225a:	6029      	str	r1, [r5, #0]
 801225c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8012260:	bd70      	pop	{r4, r5, r6, pc}

08012262 <__multadd>:
 8012262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012266:	690d      	ldr	r5, [r1, #16]
 8012268:	461f      	mov	r7, r3
 801226a:	4606      	mov	r6, r0
 801226c:	460c      	mov	r4, r1
 801226e:	f101 0c14 	add.w	ip, r1, #20
 8012272:	2300      	movs	r3, #0
 8012274:	f8dc 0000 	ldr.w	r0, [ip]
 8012278:	b281      	uxth	r1, r0
 801227a:	fb02 7101 	mla	r1, r2, r1, r7
 801227e:	0c0f      	lsrs	r7, r1, #16
 8012280:	0c00      	lsrs	r0, r0, #16
 8012282:	fb02 7000 	mla	r0, r2, r0, r7
 8012286:	b289      	uxth	r1, r1
 8012288:	3301      	adds	r3, #1
 801228a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801228e:	429d      	cmp	r5, r3
 8012290:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8012294:	f84c 1b04 	str.w	r1, [ip], #4
 8012298:	dcec      	bgt.n	8012274 <__multadd+0x12>
 801229a:	b1d7      	cbz	r7, 80122d2 <__multadd+0x70>
 801229c:	68a3      	ldr	r3, [r4, #8]
 801229e:	42ab      	cmp	r3, r5
 80122a0:	dc12      	bgt.n	80122c8 <__multadd+0x66>
 80122a2:	6861      	ldr	r1, [r4, #4]
 80122a4:	4630      	mov	r0, r6
 80122a6:	3101      	adds	r1, #1
 80122a8:	f7ff ff90 	bl	80121cc <_Balloc>
 80122ac:	6922      	ldr	r2, [r4, #16]
 80122ae:	3202      	adds	r2, #2
 80122b0:	f104 010c 	add.w	r1, r4, #12
 80122b4:	4680      	mov	r8, r0
 80122b6:	0092      	lsls	r2, r2, #2
 80122b8:	300c      	adds	r0, #12
 80122ba:	f7fe f971 	bl	80105a0 <memcpy>
 80122be:	4621      	mov	r1, r4
 80122c0:	4630      	mov	r0, r6
 80122c2:	f7ff ffb7 	bl	8012234 <_Bfree>
 80122c6:	4644      	mov	r4, r8
 80122c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80122cc:	3501      	adds	r5, #1
 80122ce:	615f      	str	r7, [r3, #20]
 80122d0:	6125      	str	r5, [r4, #16]
 80122d2:	4620      	mov	r0, r4
 80122d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080122d8 <__hi0bits>:
 80122d8:	0c02      	lsrs	r2, r0, #16
 80122da:	0412      	lsls	r2, r2, #16
 80122dc:	4603      	mov	r3, r0
 80122de:	b9b2      	cbnz	r2, 801230e <__hi0bits+0x36>
 80122e0:	0403      	lsls	r3, r0, #16
 80122e2:	2010      	movs	r0, #16
 80122e4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80122e8:	bf04      	itt	eq
 80122ea:	021b      	lsleq	r3, r3, #8
 80122ec:	3008      	addeq	r0, #8
 80122ee:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80122f2:	bf04      	itt	eq
 80122f4:	011b      	lsleq	r3, r3, #4
 80122f6:	3004      	addeq	r0, #4
 80122f8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80122fc:	bf04      	itt	eq
 80122fe:	009b      	lsleq	r3, r3, #2
 8012300:	3002      	addeq	r0, #2
 8012302:	2b00      	cmp	r3, #0
 8012304:	db06      	blt.n	8012314 <__hi0bits+0x3c>
 8012306:	005b      	lsls	r3, r3, #1
 8012308:	d503      	bpl.n	8012312 <__hi0bits+0x3a>
 801230a:	3001      	adds	r0, #1
 801230c:	4770      	bx	lr
 801230e:	2000      	movs	r0, #0
 8012310:	e7e8      	b.n	80122e4 <__hi0bits+0xc>
 8012312:	2020      	movs	r0, #32
 8012314:	4770      	bx	lr

08012316 <__lo0bits>:
 8012316:	6803      	ldr	r3, [r0, #0]
 8012318:	f013 0207 	ands.w	r2, r3, #7
 801231c:	4601      	mov	r1, r0
 801231e:	d00b      	beq.n	8012338 <__lo0bits+0x22>
 8012320:	07da      	lsls	r2, r3, #31
 8012322:	d423      	bmi.n	801236c <__lo0bits+0x56>
 8012324:	0798      	lsls	r0, r3, #30
 8012326:	bf49      	itett	mi
 8012328:	085b      	lsrmi	r3, r3, #1
 801232a:	089b      	lsrpl	r3, r3, #2
 801232c:	2001      	movmi	r0, #1
 801232e:	600b      	strmi	r3, [r1, #0]
 8012330:	bf5c      	itt	pl
 8012332:	600b      	strpl	r3, [r1, #0]
 8012334:	2002      	movpl	r0, #2
 8012336:	4770      	bx	lr
 8012338:	b298      	uxth	r0, r3
 801233a:	b9a8      	cbnz	r0, 8012368 <__lo0bits+0x52>
 801233c:	0c1b      	lsrs	r3, r3, #16
 801233e:	2010      	movs	r0, #16
 8012340:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012344:	bf04      	itt	eq
 8012346:	0a1b      	lsreq	r3, r3, #8
 8012348:	3008      	addeq	r0, #8
 801234a:	071a      	lsls	r2, r3, #28
 801234c:	bf04      	itt	eq
 801234e:	091b      	lsreq	r3, r3, #4
 8012350:	3004      	addeq	r0, #4
 8012352:	079a      	lsls	r2, r3, #30
 8012354:	bf04      	itt	eq
 8012356:	089b      	lsreq	r3, r3, #2
 8012358:	3002      	addeq	r0, #2
 801235a:	07da      	lsls	r2, r3, #31
 801235c:	d402      	bmi.n	8012364 <__lo0bits+0x4e>
 801235e:	085b      	lsrs	r3, r3, #1
 8012360:	d006      	beq.n	8012370 <__lo0bits+0x5a>
 8012362:	3001      	adds	r0, #1
 8012364:	600b      	str	r3, [r1, #0]
 8012366:	4770      	bx	lr
 8012368:	4610      	mov	r0, r2
 801236a:	e7e9      	b.n	8012340 <__lo0bits+0x2a>
 801236c:	2000      	movs	r0, #0
 801236e:	4770      	bx	lr
 8012370:	2020      	movs	r0, #32
 8012372:	4770      	bx	lr

08012374 <__i2b>:
 8012374:	b510      	push	{r4, lr}
 8012376:	460c      	mov	r4, r1
 8012378:	2101      	movs	r1, #1
 801237a:	f7ff ff27 	bl	80121cc <_Balloc>
 801237e:	2201      	movs	r2, #1
 8012380:	6144      	str	r4, [r0, #20]
 8012382:	6102      	str	r2, [r0, #16]
 8012384:	bd10      	pop	{r4, pc}

08012386 <__multiply>:
 8012386:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801238a:	4614      	mov	r4, r2
 801238c:	690a      	ldr	r2, [r1, #16]
 801238e:	6923      	ldr	r3, [r4, #16]
 8012390:	429a      	cmp	r2, r3
 8012392:	bfb8      	it	lt
 8012394:	460b      	movlt	r3, r1
 8012396:	4688      	mov	r8, r1
 8012398:	bfbc      	itt	lt
 801239a:	46a0      	movlt	r8, r4
 801239c:	461c      	movlt	r4, r3
 801239e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80123a2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80123a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80123aa:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80123ae:	eb07 0609 	add.w	r6, r7, r9
 80123b2:	42b3      	cmp	r3, r6
 80123b4:	bfb8      	it	lt
 80123b6:	3101      	addlt	r1, #1
 80123b8:	f7ff ff08 	bl	80121cc <_Balloc>
 80123bc:	f100 0514 	add.w	r5, r0, #20
 80123c0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80123c4:	462b      	mov	r3, r5
 80123c6:	2200      	movs	r2, #0
 80123c8:	4573      	cmp	r3, lr
 80123ca:	d316      	bcc.n	80123fa <__multiply+0x74>
 80123cc:	f104 0214 	add.w	r2, r4, #20
 80123d0:	f108 0114 	add.w	r1, r8, #20
 80123d4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80123d8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80123dc:	9300      	str	r3, [sp, #0]
 80123de:	9b00      	ldr	r3, [sp, #0]
 80123e0:	9201      	str	r2, [sp, #4]
 80123e2:	4293      	cmp	r3, r2
 80123e4:	d80c      	bhi.n	8012400 <__multiply+0x7a>
 80123e6:	2e00      	cmp	r6, #0
 80123e8:	dd03      	ble.n	80123f2 <__multiply+0x6c>
 80123ea:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d05d      	beq.n	80124ae <__multiply+0x128>
 80123f2:	6106      	str	r6, [r0, #16]
 80123f4:	b003      	add	sp, #12
 80123f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123fa:	f843 2b04 	str.w	r2, [r3], #4
 80123fe:	e7e3      	b.n	80123c8 <__multiply+0x42>
 8012400:	f8b2 b000 	ldrh.w	fp, [r2]
 8012404:	f1bb 0f00 	cmp.w	fp, #0
 8012408:	d023      	beq.n	8012452 <__multiply+0xcc>
 801240a:	4689      	mov	r9, r1
 801240c:	46ac      	mov	ip, r5
 801240e:	f04f 0800 	mov.w	r8, #0
 8012412:	f859 4b04 	ldr.w	r4, [r9], #4
 8012416:	f8dc a000 	ldr.w	sl, [ip]
 801241a:	b2a3      	uxth	r3, r4
 801241c:	fa1f fa8a 	uxth.w	sl, sl
 8012420:	fb0b a303 	mla	r3, fp, r3, sl
 8012424:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012428:	f8dc 4000 	ldr.w	r4, [ip]
 801242c:	4443      	add	r3, r8
 801242e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8012432:	fb0b 840a 	mla	r4, fp, sl, r8
 8012436:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801243a:	46e2      	mov	sl, ip
 801243c:	b29b      	uxth	r3, r3
 801243e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8012442:	454f      	cmp	r7, r9
 8012444:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8012448:	f84a 3b04 	str.w	r3, [sl], #4
 801244c:	d82b      	bhi.n	80124a6 <__multiply+0x120>
 801244e:	f8cc 8004 	str.w	r8, [ip, #4]
 8012452:	9b01      	ldr	r3, [sp, #4]
 8012454:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8012458:	3204      	adds	r2, #4
 801245a:	f1ba 0f00 	cmp.w	sl, #0
 801245e:	d020      	beq.n	80124a2 <__multiply+0x11c>
 8012460:	682b      	ldr	r3, [r5, #0]
 8012462:	4689      	mov	r9, r1
 8012464:	46a8      	mov	r8, r5
 8012466:	f04f 0b00 	mov.w	fp, #0
 801246a:	f8b9 c000 	ldrh.w	ip, [r9]
 801246e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8012472:	fb0a 440c 	mla	r4, sl, ip, r4
 8012476:	445c      	add	r4, fp
 8012478:	46c4      	mov	ip, r8
 801247a:	b29b      	uxth	r3, r3
 801247c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8012480:	f84c 3b04 	str.w	r3, [ip], #4
 8012484:	f859 3b04 	ldr.w	r3, [r9], #4
 8012488:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801248c:	0c1b      	lsrs	r3, r3, #16
 801248e:	fb0a b303 	mla	r3, sl, r3, fp
 8012492:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8012496:	454f      	cmp	r7, r9
 8012498:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801249c:	d805      	bhi.n	80124aa <__multiply+0x124>
 801249e:	f8c8 3004 	str.w	r3, [r8, #4]
 80124a2:	3504      	adds	r5, #4
 80124a4:	e79b      	b.n	80123de <__multiply+0x58>
 80124a6:	46d4      	mov	ip, sl
 80124a8:	e7b3      	b.n	8012412 <__multiply+0x8c>
 80124aa:	46e0      	mov	r8, ip
 80124ac:	e7dd      	b.n	801246a <__multiply+0xe4>
 80124ae:	3e01      	subs	r6, #1
 80124b0:	e799      	b.n	80123e6 <__multiply+0x60>
	...

080124b4 <__pow5mult>:
 80124b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124b8:	4615      	mov	r5, r2
 80124ba:	f012 0203 	ands.w	r2, r2, #3
 80124be:	4606      	mov	r6, r0
 80124c0:	460f      	mov	r7, r1
 80124c2:	d007      	beq.n	80124d4 <__pow5mult+0x20>
 80124c4:	3a01      	subs	r2, #1
 80124c6:	4c21      	ldr	r4, [pc, #132]	; (801254c <__pow5mult+0x98>)
 80124c8:	2300      	movs	r3, #0
 80124ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80124ce:	f7ff fec8 	bl	8012262 <__multadd>
 80124d2:	4607      	mov	r7, r0
 80124d4:	10ad      	asrs	r5, r5, #2
 80124d6:	d035      	beq.n	8012544 <__pow5mult+0x90>
 80124d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80124da:	b93c      	cbnz	r4, 80124ec <__pow5mult+0x38>
 80124dc:	2010      	movs	r0, #16
 80124de:	f7ff fe5b 	bl	8012198 <malloc>
 80124e2:	6270      	str	r0, [r6, #36]	; 0x24
 80124e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80124e8:	6004      	str	r4, [r0, #0]
 80124ea:	60c4      	str	r4, [r0, #12]
 80124ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80124f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80124f4:	b94c      	cbnz	r4, 801250a <__pow5mult+0x56>
 80124f6:	f240 2171 	movw	r1, #625	; 0x271
 80124fa:	4630      	mov	r0, r6
 80124fc:	f7ff ff3a 	bl	8012374 <__i2b>
 8012500:	2300      	movs	r3, #0
 8012502:	f8c8 0008 	str.w	r0, [r8, #8]
 8012506:	4604      	mov	r4, r0
 8012508:	6003      	str	r3, [r0, #0]
 801250a:	f04f 0800 	mov.w	r8, #0
 801250e:	07eb      	lsls	r3, r5, #31
 8012510:	d50a      	bpl.n	8012528 <__pow5mult+0x74>
 8012512:	4639      	mov	r1, r7
 8012514:	4622      	mov	r2, r4
 8012516:	4630      	mov	r0, r6
 8012518:	f7ff ff35 	bl	8012386 <__multiply>
 801251c:	4639      	mov	r1, r7
 801251e:	4681      	mov	r9, r0
 8012520:	4630      	mov	r0, r6
 8012522:	f7ff fe87 	bl	8012234 <_Bfree>
 8012526:	464f      	mov	r7, r9
 8012528:	106d      	asrs	r5, r5, #1
 801252a:	d00b      	beq.n	8012544 <__pow5mult+0x90>
 801252c:	6820      	ldr	r0, [r4, #0]
 801252e:	b938      	cbnz	r0, 8012540 <__pow5mult+0x8c>
 8012530:	4622      	mov	r2, r4
 8012532:	4621      	mov	r1, r4
 8012534:	4630      	mov	r0, r6
 8012536:	f7ff ff26 	bl	8012386 <__multiply>
 801253a:	6020      	str	r0, [r4, #0]
 801253c:	f8c0 8000 	str.w	r8, [r0]
 8012540:	4604      	mov	r4, r0
 8012542:	e7e4      	b.n	801250e <__pow5mult+0x5a>
 8012544:	4638      	mov	r0, r7
 8012546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801254a:	bf00      	nop
 801254c:	08015348 	.word	0x08015348

08012550 <__lshift>:
 8012550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012554:	460c      	mov	r4, r1
 8012556:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801255a:	6923      	ldr	r3, [r4, #16]
 801255c:	6849      	ldr	r1, [r1, #4]
 801255e:	eb0a 0903 	add.w	r9, sl, r3
 8012562:	68a3      	ldr	r3, [r4, #8]
 8012564:	4607      	mov	r7, r0
 8012566:	4616      	mov	r6, r2
 8012568:	f109 0501 	add.w	r5, r9, #1
 801256c:	42ab      	cmp	r3, r5
 801256e:	db32      	blt.n	80125d6 <__lshift+0x86>
 8012570:	4638      	mov	r0, r7
 8012572:	f7ff fe2b 	bl	80121cc <_Balloc>
 8012576:	2300      	movs	r3, #0
 8012578:	4680      	mov	r8, r0
 801257a:	f100 0114 	add.w	r1, r0, #20
 801257e:	461a      	mov	r2, r3
 8012580:	4553      	cmp	r3, sl
 8012582:	db2b      	blt.n	80125dc <__lshift+0x8c>
 8012584:	6920      	ldr	r0, [r4, #16]
 8012586:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801258a:	f104 0314 	add.w	r3, r4, #20
 801258e:	f016 021f 	ands.w	r2, r6, #31
 8012592:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012596:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801259a:	d025      	beq.n	80125e8 <__lshift+0x98>
 801259c:	f1c2 0e20 	rsb	lr, r2, #32
 80125a0:	2000      	movs	r0, #0
 80125a2:	681e      	ldr	r6, [r3, #0]
 80125a4:	468a      	mov	sl, r1
 80125a6:	4096      	lsls	r6, r2
 80125a8:	4330      	orrs	r0, r6
 80125aa:	f84a 0b04 	str.w	r0, [sl], #4
 80125ae:	f853 0b04 	ldr.w	r0, [r3], #4
 80125b2:	459c      	cmp	ip, r3
 80125b4:	fa20 f00e 	lsr.w	r0, r0, lr
 80125b8:	d814      	bhi.n	80125e4 <__lshift+0x94>
 80125ba:	6048      	str	r0, [r1, #4]
 80125bc:	b108      	cbz	r0, 80125c2 <__lshift+0x72>
 80125be:	f109 0502 	add.w	r5, r9, #2
 80125c2:	3d01      	subs	r5, #1
 80125c4:	4638      	mov	r0, r7
 80125c6:	f8c8 5010 	str.w	r5, [r8, #16]
 80125ca:	4621      	mov	r1, r4
 80125cc:	f7ff fe32 	bl	8012234 <_Bfree>
 80125d0:	4640      	mov	r0, r8
 80125d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125d6:	3101      	adds	r1, #1
 80125d8:	005b      	lsls	r3, r3, #1
 80125da:	e7c7      	b.n	801256c <__lshift+0x1c>
 80125dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80125e0:	3301      	adds	r3, #1
 80125e2:	e7cd      	b.n	8012580 <__lshift+0x30>
 80125e4:	4651      	mov	r1, sl
 80125e6:	e7dc      	b.n	80125a2 <__lshift+0x52>
 80125e8:	3904      	subs	r1, #4
 80125ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80125ee:	f841 2f04 	str.w	r2, [r1, #4]!
 80125f2:	459c      	cmp	ip, r3
 80125f4:	d8f9      	bhi.n	80125ea <__lshift+0x9a>
 80125f6:	e7e4      	b.n	80125c2 <__lshift+0x72>

080125f8 <__mcmp>:
 80125f8:	6903      	ldr	r3, [r0, #16]
 80125fa:	690a      	ldr	r2, [r1, #16]
 80125fc:	1a9b      	subs	r3, r3, r2
 80125fe:	b530      	push	{r4, r5, lr}
 8012600:	d10c      	bne.n	801261c <__mcmp+0x24>
 8012602:	0092      	lsls	r2, r2, #2
 8012604:	3014      	adds	r0, #20
 8012606:	3114      	adds	r1, #20
 8012608:	1884      	adds	r4, r0, r2
 801260a:	4411      	add	r1, r2
 801260c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012610:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012614:	4295      	cmp	r5, r2
 8012616:	d003      	beq.n	8012620 <__mcmp+0x28>
 8012618:	d305      	bcc.n	8012626 <__mcmp+0x2e>
 801261a:	2301      	movs	r3, #1
 801261c:	4618      	mov	r0, r3
 801261e:	bd30      	pop	{r4, r5, pc}
 8012620:	42a0      	cmp	r0, r4
 8012622:	d3f3      	bcc.n	801260c <__mcmp+0x14>
 8012624:	e7fa      	b.n	801261c <__mcmp+0x24>
 8012626:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801262a:	e7f7      	b.n	801261c <__mcmp+0x24>

0801262c <__mdiff>:
 801262c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012630:	460d      	mov	r5, r1
 8012632:	4607      	mov	r7, r0
 8012634:	4611      	mov	r1, r2
 8012636:	4628      	mov	r0, r5
 8012638:	4614      	mov	r4, r2
 801263a:	f7ff ffdd 	bl	80125f8 <__mcmp>
 801263e:	1e06      	subs	r6, r0, #0
 8012640:	d108      	bne.n	8012654 <__mdiff+0x28>
 8012642:	4631      	mov	r1, r6
 8012644:	4638      	mov	r0, r7
 8012646:	f7ff fdc1 	bl	80121cc <_Balloc>
 801264a:	2301      	movs	r3, #1
 801264c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8012650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012654:	bfa4      	itt	ge
 8012656:	4623      	movge	r3, r4
 8012658:	462c      	movge	r4, r5
 801265a:	4638      	mov	r0, r7
 801265c:	6861      	ldr	r1, [r4, #4]
 801265e:	bfa6      	itte	ge
 8012660:	461d      	movge	r5, r3
 8012662:	2600      	movge	r6, #0
 8012664:	2601      	movlt	r6, #1
 8012666:	f7ff fdb1 	bl	80121cc <_Balloc>
 801266a:	692b      	ldr	r3, [r5, #16]
 801266c:	60c6      	str	r6, [r0, #12]
 801266e:	6926      	ldr	r6, [r4, #16]
 8012670:	f105 0914 	add.w	r9, r5, #20
 8012674:	f104 0214 	add.w	r2, r4, #20
 8012678:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801267c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8012680:	f100 0514 	add.w	r5, r0, #20
 8012684:	f04f 0e00 	mov.w	lr, #0
 8012688:	f852 ab04 	ldr.w	sl, [r2], #4
 801268c:	f859 4b04 	ldr.w	r4, [r9], #4
 8012690:	fa1e f18a 	uxtah	r1, lr, sl
 8012694:	b2a3      	uxth	r3, r4
 8012696:	1ac9      	subs	r1, r1, r3
 8012698:	0c23      	lsrs	r3, r4, #16
 801269a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801269e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80126a2:	b289      	uxth	r1, r1
 80126a4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80126a8:	45c8      	cmp	r8, r9
 80126aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80126ae:	4694      	mov	ip, r2
 80126b0:	f845 3b04 	str.w	r3, [r5], #4
 80126b4:	d8e8      	bhi.n	8012688 <__mdiff+0x5c>
 80126b6:	45bc      	cmp	ip, r7
 80126b8:	d304      	bcc.n	80126c4 <__mdiff+0x98>
 80126ba:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80126be:	b183      	cbz	r3, 80126e2 <__mdiff+0xb6>
 80126c0:	6106      	str	r6, [r0, #16]
 80126c2:	e7c5      	b.n	8012650 <__mdiff+0x24>
 80126c4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80126c8:	fa1e f381 	uxtah	r3, lr, r1
 80126cc:	141a      	asrs	r2, r3, #16
 80126ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80126d2:	b29b      	uxth	r3, r3
 80126d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80126d8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80126dc:	f845 3b04 	str.w	r3, [r5], #4
 80126e0:	e7e9      	b.n	80126b6 <__mdiff+0x8a>
 80126e2:	3e01      	subs	r6, #1
 80126e4:	e7e9      	b.n	80126ba <__mdiff+0x8e>

080126e6 <__d2b>:
 80126e6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80126ea:	460e      	mov	r6, r1
 80126ec:	2101      	movs	r1, #1
 80126ee:	ec59 8b10 	vmov	r8, r9, d0
 80126f2:	4615      	mov	r5, r2
 80126f4:	f7ff fd6a 	bl	80121cc <_Balloc>
 80126f8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80126fc:	4607      	mov	r7, r0
 80126fe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012702:	bb34      	cbnz	r4, 8012752 <__d2b+0x6c>
 8012704:	9301      	str	r3, [sp, #4]
 8012706:	f1b8 0300 	subs.w	r3, r8, #0
 801270a:	d027      	beq.n	801275c <__d2b+0x76>
 801270c:	a802      	add	r0, sp, #8
 801270e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8012712:	f7ff fe00 	bl	8012316 <__lo0bits>
 8012716:	9900      	ldr	r1, [sp, #0]
 8012718:	b1f0      	cbz	r0, 8012758 <__d2b+0x72>
 801271a:	9a01      	ldr	r2, [sp, #4]
 801271c:	f1c0 0320 	rsb	r3, r0, #32
 8012720:	fa02 f303 	lsl.w	r3, r2, r3
 8012724:	430b      	orrs	r3, r1
 8012726:	40c2      	lsrs	r2, r0
 8012728:	617b      	str	r3, [r7, #20]
 801272a:	9201      	str	r2, [sp, #4]
 801272c:	9b01      	ldr	r3, [sp, #4]
 801272e:	61bb      	str	r3, [r7, #24]
 8012730:	2b00      	cmp	r3, #0
 8012732:	bf14      	ite	ne
 8012734:	2102      	movne	r1, #2
 8012736:	2101      	moveq	r1, #1
 8012738:	6139      	str	r1, [r7, #16]
 801273a:	b1c4      	cbz	r4, 801276e <__d2b+0x88>
 801273c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8012740:	4404      	add	r4, r0
 8012742:	6034      	str	r4, [r6, #0]
 8012744:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012748:	6028      	str	r0, [r5, #0]
 801274a:	4638      	mov	r0, r7
 801274c:	b003      	add	sp, #12
 801274e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012756:	e7d5      	b.n	8012704 <__d2b+0x1e>
 8012758:	6179      	str	r1, [r7, #20]
 801275a:	e7e7      	b.n	801272c <__d2b+0x46>
 801275c:	a801      	add	r0, sp, #4
 801275e:	f7ff fdda 	bl	8012316 <__lo0bits>
 8012762:	9b01      	ldr	r3, [sp, #4]
 8012764:	617b      	str	r3, [r7, #20]
 8012766:	2101      	movs	r1, #1
 8012768:	6139      	str	r1, [r7, #16]
 801276a:	3020      	adds	r0, #32
 801276c:	e7e5      	b.n	801273a <__d2b+0x54>
 801276e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8012772:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012776:	6030      	str	r0, [r6, #0]
 8012778:	6918      	ldr	r0, [r3, #16]
 801277a:	f7ff fdad 	bl	80122d8 <__hi0bits>
 801277e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8012782:	e7e1      	b.n	8012748 <__d2b+0x62>

08012784 <_calloc_r>:
 8012784:	b538      	push	{r3, r4, r5, lr}
 8012786:	fb02 f401 	mul.w	r4, r2, r1
 801278a:	4621      	mov	r1, r4
 801278c:	f000 f856 	bl	801283c <_malloc_r>
 8012790:	4605      	mov	r5, r0
 8012792:	b118      	cbz	r0, 801279c <_calloc_r+0x18>
 8012794:	4622      	mov	r2, r4
 8012796:	2100      	movs	r1, #0
 8012798:	f7fd ff0d 	bl	80105b6 <memset>
 801279c:	4628      	mov	r0, r5
 801279e:	bd38      	pop	{r3, r4, r5, pc}

080127a0 <_free_r>:
 80127a0:	b538      	push	{r3, r4, r5, lr}
 80127a2:	4605      	mov	r5, r0
 80127a4:	2900      	cmp	r1, #0
 80127a6:	d045      	beq.n	8012834 <_free_r+0x94>
 80127a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80127ac:	1f0c      	subs	r4, r1, #4
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	bfb8      	it	lt
 80127b2:	18e4      	addlt	r4, r4, r3
 80127b4:	f000 fc03 	bl	8012fbe <__malloc_lock>
 80127b8:	4a1f      	ldr	r2, [pc, #124]	; (8012838 <_free_r+0x98>)
 80127ba:	6813      	ldr	r3, [r2, #0]
 80127bc:	4610      	mov	r0, r2
 80127be:	b933      	cbnz	r3, 80127ce <_free_r+0x2e>
 80127c0:	6063      	str	r3, [r4, #4]
 80127c2:	6014      	str	r4, [r2, #0]
 80127c4:	4628      	mov	r0, r5
 80127c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80127ca:	f000 bbf9 	b.w	8012fc0 <__malloc_unlock>
 80127ce:	42a3      	cmp	r3, r4
 80127d0:	d90c      	bls.n	80127ec <_free_r+0x4c>
 80127d2:	6821      	ldr	r1, [r4, #0]
 80127d4:	1862      	adds	r2, r4, r1
 80127d6:	4293      	cmp	r3, r2
 80127d8:	bf04      	itt	eq
 80127da:	681a      	ldreq	r2, [r3, #0]
 80127dc:	685b      	ldreq	r3, [r3, #4]
 80127de:	6063      	str	r3, [r4, #4]
 80127e0:	bf04      	itt	eq
 80127e2:	1852      	addeq	r2, r2, r1
 80127e4:	6022      	streq	r2, [r4, #0]
 80127e6:	6004      	str	r4, [r0, #0]
 80127e8:	e7ec      	b.n	80127c4 <_free_r+0x24>
 80127ea:	4613      	mov	r3, r2
 80127ec:	685a      	ldr	r2, [r3, #4]
 80127ee:	b10a      	cbz	r2, 80127f4 <_free_r+0x54>
 80127f0:	42a2      	cmp	r2, r4
 80127f2:	d9fa      	bls.n	80127ea <_free_r+0x4a>
 80127f4:	6819      	ldr	r1, [r3, #0]
 80127f6:	1858      	adds	r0, r3, r1
 80127f8:	42a0      	cmp	r0, r4
 80127fa:	d10b      	bne.n	8012814 <_free_r+0x74>
 80127fc:	6820      	ldr	r0, [r4, #0]
 80127fe:	4401      	add	r1, r0
 8012800:	1858      	adds	r0, r3, r1
 8012802:	4282      	cmp	r2, r0
 8012804:	6019      	str	r1, [r3, #0]
 8012806:	d1dd      	bne.n	80127c4 <_free_r+0x24>
 8012808:	6810      	ldr	r0, [r2, #0]
 801280a:	6852      	ldr	r2, [r2, #4]
 801280c:	605a      	str	r2, [r3, #4]
 801280e:	4401      	add	r1, r0
 8012810:	6019      	str	r1, [r3, #0]
 8012812:	e7d7      	b.n	80127c4 <_free_r+0x24>
 8012814:	d902      	bls.n	801281c <_free_r+0x7c>
 8012816:	230c      	movs	r3, #12
 8012818:	602b      	str	r3, [r5, #0]
 801281a:	e7d3      	b.n	80127c4 <_free_r+0x24>
 801281c:	6820      	ldr	r0, [r4, #0]
 801281e:	1821      	adds	r1, r4, r0
 8012820:	428a      	cmp	r2, r1
 8012822:	bf04      	itt	eq
 8012824:	6811      	ldreq	r1, [r2, #0]
 8012826:	6852      	ldreq	r2, [r2, #4]
 8012828:	6062      	str	r2, [r4, #4]
 801282a:	bf04      	itt	eq
 801282c:	1809      	addeq	r1, r1, r0
 801282e:	6021      	streq	r1, [r4, #0]
 8012830:	605c      	str	r4, [r3, #4]
 8012832:	e7c7      	b.n	80127c4 <_free_r+0x24>
 8012834:	bd38      	pop	{r3, r4, r5, pc}
 8012836:	bf00      	nop
 8012838:	20000870 	.word	0x20000870

0801283c <_malloc_r>:
 801283c:	b570      	push	{r4, r5, r6, lr}
 801283e:	1ccd      	adds	r5, r1, #3
 8012840:	f025 0503 	bic.w	r5, r5, #3
 8012844:	3508      	adds	r5, #8
 8012846:	2d0c      	cmp	r5, #12
 8012848:	bf38      	it	cc
 801284a:	250c      	movcc	r5, #12
 801284c:	2d00      	cmp	r5, #0
 801284e:	4606      	mov	r6, r0
 8012850:	db01      	blt.n	8012856 <_malloc_r+0x1a>
 8012852:	42a9      	cmp	r1, r5
 8012854:	d903      	bls.n	801285e <_malloc_r+0x22>
 8012856:	230c      	movs	r3, #12
 8012858:	6033      	str	r3, [r6, #0]
 801285a:	2000      	movs	r0, #0
 801285c:	bd70      	pop	{r4, r5, r6, pc}
 801285e:	f000 fbae 	bl	8012fbe <__malloc_lock>
 8012862:	4a21      	ldr	r2, [pc, #132]	; (80128e8 <_malloc_r+0xac>)
 8012864:	6814      	ldr	r4, [r2, #0]
 8012866:	4621      	mov	r1, r4
 8012868:	b991      	cbnz	r1, 8012890 <_malloc_r+0x54>
 801286a:	4c20      	ldr	r4, [pc, #128]	; (80128ec <_malloc_r+0xb0>)
 801286c:	6823      	ldr	r3, [r4, #0]
 801286e:	b91b      	cbnz	r3, 8012878 <_malloc_r+0x3c>
 8012870:	4630      	mov	r0, r6
 8012872:	f000 facf 	bl	8012e14 <_sbrk_r>
 8012876:	6020      	str	r0, [r4, #0]
 8012878:	4629      	mov	r1, r5
 801287a:	4630      	mov	r0, r6
 801287c:	f000 faca 	bl	8012e14 <_sbrk_r>
 8012880:	1c43      	adds	r3, r0, #1
 8012882:	d124      	bne.n	80128ce <_malloc_r+0x92>
 8012884:	230c      	movs	r3, #12
 8012886:	6033      	str	r3, [r6, #0]
 8012888:	4630      	mov	r0, r6
 801288a:	f000 fb99 	bl	8012fc0 <__malloc_unlock>
 801288e:	e7e4      	b.n	801285a <_malloc_r+0x1e>
 8012890:	680b      	ldr	r3, [r1, #0]
 8012892:	1b5b      	subs	r3, r3, r5
 8012894:	d418      	bmi.n	80128c8 <_malloc_r+0x8c>
 8012896:	2b0b      	cmp	r3, #11
 8012898:	d90f      	bls.n	80128ba <_malloc_r+0x7e>
 801289a:	600b      	str	r3, [r1, #0]
 801289c:	50cd      	str	r5, [r1, r3]
 801289e:	18cc      	adds	r4, r1, r3
 80128a0:	4630      	mov	r0, r6
 80128a2:	f000 fb8d 	bl	8012fc0 <__malloc_unlock>
 80128a6:	f104 000b 	add.w	r0, r4, #11
 80128aa:	1d23      	adds	r3, r4, #4
 80128ac:	f020 0007 	bic.w	r0, r0, #7
 80128b0:	1ac3      	subs	r3, r0, r3
 80128b2:	d0d3      	beq.n	801285c <_malloc_r+0x20>
 80128b4:	425a      	negs	r2, r3
 80128b6:	50e2      	str	r2, [r4, r3]
 80128b8:	e7d0      	b.n	801285c <_malloc_r+0x20>
 80128ba:	428c      	cmp	r4, r1
 80128bc:	684b      	ldr	r3, [r1, #4]
 80128be:	bf16      	itet	ne
 80128c0:	6063      	strne	r3, [r4, #4]
 80128c2:	6013      	streq	r3, [r2, #0]
 80128c4:	460c      	movne	r4, r1
 80128c6:	e7eb      	b.n	80128a0 <_malloc_r+0x64>
 80128c8:	460c      	mov	r4, r1
 80128ca:	6849      	ldr	r1, [r1, #4]
 80128cc:	e7cc      	b.n	8012868 <_malloc_r+0x2c>
 80128ce:	1cc4      	adds	r4, r0, #3
 80128d0:	f024 0403 	bic.w	r4, r4, #3
 80128d4:	42a0      	cmp	r0, r4
 80128d6:	d005      	beq.n	80128e4 <_malloc_r+0xa8>
 80128d8:	1a21      	subs	r1, r4, r0
 80128da:	4630      	mov	r0, r6
 80128dc:	f000 fa9a 	bl	8012e14 <_sbrk_r>
 80128e0:	3001      	adds	r0, #1
 80128e2:	d0cf      	beq.n	8012884 <_malloc_r+0x48>
 80128e4:	6025      	str	r5, [r4, #0]
 80128e6:	e7db      	b.n	80128a0 <_malloc_r+0x64>
 80128e8:	20000870 	.word	0x20000870
 80128ec:	20000874 	.word	0x20000874

080128f0 <__ssputs_r>:
 80128f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80128f4:	688e      	ldr	r6, [r1, #8]
 80128f6:	429e      	cmp	r6, r3
 80128f8:	4682      	mov	sl, r0
 80128fa:	460c      	mov	r4, r1
 80128fc:	4690      	mov	r8, r2
 80128fe:	4699      	mov	r9, r3
 8012900:	d837      	bhi.n	8012972 <__ssputs_r+0x82>
 8012902:	898a      	ldrh	r2, [r1, #12]
 8012904:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012908:	d031      	beq.n	801296e <__ssputs_r+0x7e>
 801290a:	6825      	ldr	r5, [r4, #0]
 801290c:	6909      	ldr	r1, [r1, #16]
 801290e:	1a6f      	subs	r7, r5, r1
 8012910:	6965      	ldr	r5, [r4, #20]
 8012912:	2302      	movs	r3, #2
 8012914:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012918:	fb95 f5f3 	sdiv	r5, r5, r3
 801291c:	f109 0301 	add.w	r3, r9, #1
 8012920:	443b      	add	r3, r7
 8012922:	429d      	cmp	r5, r3
 8012924:	bf38      	it	cc
 8012926:	461d      	movcc	r5, r3
 8012928:	0553      	lsls	r3, r2, #21
 801292a:	d530      	bpl.n	801298e <__ssputs_r+0x9e>
 801292c:	4629      	mov	r1, r5
 801292e:	f7ff ff85 	bl	801283c <_malloc_r>
 8012932:	4606      	mov	r6, r0
 8012934:	b950      	cbnz	r0, 801294c <__ssputs_r+0x5c>
 8012936:	230c      	movs	r3, #12
 8012938:	f8ca 3000 	str.w	r3, [sl]
 801293c:	89a3      	ldrh	r3, [r4, #12]
 801293e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012942:	81a3      	strh	r3, [r4, #12]
 8012944:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801294c:	463a      	mov	r2, r7
 801294e:	6921      	ldr	r1, [r4, #16]
 8012950:	f7fd fe26 	bl	80105a0 <memcpy>
 8012954:	89a3      	ldrh	r3, [r4, #12]
 8012956:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801295a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801295e:	81a3      	strh	r3, [r4, #12]
 8012960:	6126      	str	r6, [r4, #16]
 8012962:	6165      	str	r5, [r4, #20]
 8012964:	443e      	add	r6, r7
 8012966:	1bed      	subs	r5, r5, r7
 8012968:	6026      	str	r6, [r4, #0]
 801296a:	60a5      	str	r5, [r4, #8]
 801296c:	464e      	mov	r6, r9
 801296e:	454e      	cmp	r6, r9
 8012970:	d900      	bls.n	8012974 <__ssputs_r+0x84>
 8012972:	464e      	mov	r6, r9
 8012974:	4632      	mov	r2, r6
 8012976:	4641      	mov	r1, r8
 8012978:	6820      	ldr	r0, [r4, #0]
 801297a:	f000 fb07 	bl	8012f8c <memmove>
 801297e:	68a3      	ldr	r3, [r4, #8]
 8012980:	1b9b      	subs	r3, r3, r6
 8012982:	60a3      	str	r3, [r4, #8]
 8012984:	6823      	ldr	r3, [r4, #0]
 8012986:	441e      	add	r6, r3
 8012988:	6026      	str	r6, [r4, #0]
 801298a:	2000      	movs	r0, #0
 801298c:	e7dc      	b.n	8012948 <__ssputs_r+0x58>
 801298e:	462a      	mov	r2, r5
 8012990:	f000 fb17 	bl	8012fc2 <_realloc_r>
 8012994:	4606      	mov	r6, r0
 8012996:	2800      	cmp	r0, #0
 8012998:	d1e2      	bne.n	8012960 <__ssputs_r+0x70>
 801299a:	6921      	ldr	r1, [r4, #16]
 801299c:	4650      	mov	r0, sl
 801299e:	f7ff feff 	bl	80127a0 <_free_r>
 80129a2:	e7c8      	b.n	8012936 <__ssputs_r+0x46>

080129a4 <_svfiprintf_r>:
 80129a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129a8:	461d      	mov	r5, r3
 80129aa:	898b      	ldrh	r3, [r1, #12]
 80129ac:	061f      	lsls	r7, r3, #24
 80129ae:	b09d      	sub	sp, #116	; 0x74
 80129b0:	4680      	mov	r8, r0
 80129b2:	460c      	mov	r4, r1
 80129b4:	4616      	mov	r6, r2
 80129b6:	d50f      	bpl.n	80129d8 <_svfiprintf_r+0x34>
 80129b8:	690b      	ldr	r3, [r1, #16]
 80129ba:	b96b      	cbnz	r3, 80129d8 <_svfiprintf_r+0x34>
 80129bc:	2140      	movs	r1, #64	; 0x40
 80129be:	f7ff ff3d 	bl	801283c <_malloc_r>
 80129c2:	6020      	str	r0, [r4, #0]
 80129c4:	6120      	str	r0, [r4, #16]
 80129c6:	b928      	cbnz	r0, 80129d4 <_svfiprintf_r+0x30>
 80129c8:	230c      	movs	r3, #12
 80129ca:	f8c8 3000 	str.w	r3, [r8]
 80129ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80129d2:	e0c8      	b.n	8012b66 <_svfiprintf_r+0x1c2>
 80129d4:	2340      	movs	r3, #64	; 0x40
 80129d6:	6163      	str	r3, [r4, #20]
 80129d8:	2300      	movs	r3, #0
 80129da:	9309      	str	r3, [sp, #36]	; 0x24
 80129dc:	2320      	movs	r3, #32
 80129de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80129e2:	2330      	movs	r3, #48	; 0x30
 80129e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80129e8:	9503      	str	r5, [sp, #12]
 80129ea:	f04f 0b01 	mov.w	fp, #1
 80129ee:	4637      	mov	r7, r6
 80129f0:	463d      	mov	r5, r7
 80129f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80129f6:	b10b      	cbz	r3, 80129fc <_svfiprintf_r+0x58>
 80129f8:	2b25      	cmp	r3, #37	; 0x25
 80129fa:	d13e      	bne.n	8012a7a <_svfiprintf_r+0xd6>
 80129fc:	ebb7 0a06 	subs.w	sl, r7, r6
 8012a00:	d00b      	beq.n	8012a1a <_svfiprintf_r+0x76>
 8012a02:	4653      	mov	r3, sl
 8012a04:	4632      	mov	r2, r6
 8012a06:	4621      	mov	r1, r4
 8012a08:	4640      	mov	r0, r8
 8012a0a:	f7ff ff71 	bl	80128f0 <__ssputs_r>
 8012a0e:	3001      	adds	r0, #1
 8012a10:	f000 80a4 	beq.w	8012b5c <_svfiprintf_r+0x1b8>
 8012a14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a16:	4453      	add	r3, sl
 8012a18:	9309      	str	r3, [sp, #36]	; 0x24
 8012a1a:	783b      	ldrb	r3, [r7, #0]
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	f000 809d 	beq.w	8012b5c <_svfiprintf_r+0x1b8>
 8012a22:	2300      	movs	r3, #0
 8012a24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012a28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012a2c:	9304      	str	r3, [sp, #16]
 8012a2e:	9307      	str	r3, [sp, #28]
 8012a30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012a34:	931a      	str	r3, [sp, #104]	; 0x68
 8012a36:	462f      	mov	r7, r5
 8012a38:	2205      	movs	r2, #5
 8012a3a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8012a3e:	4850      	ldr	r0, [pc, #320]	; (8012b80 <_svfiprintf_r+0x1dc>)
 8012a40:	f7ed fbce 	bl	80001e0 <memchr>
 8012a44:	9b04      	ldr	r3, [sp, #16]
 8012a46:	b9d0      	cbnz	r0, 8012a7e <_svfiprintf_r+0xda>
 8012a48:	06d9      	lsls	r1, r3, #27
 8012a4a:	bf44      	itt	mi
 8012a4c:	2220      	movmi	r2, #32
 8012a4e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012a52:	071a      	lsls	r2, r3, #28
 8012a54:	bf44      	itt	mi
 8012a56:	222b      	movmi	r2, #43	; 0x2b
 8012a58:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012a5c:	782a      	ldrb	r2, [r5, #0]
 8012a5e:	2a2a      	cmp	r2, #42	; 0x2a
 8012a60:	d015      	beq.n	8012a8e <_svfiprintf_r+0xea>
 8012a62:	9a07      	ldr	r2, [sp, #28]
 8012a64:	462f      	mov	r7, r5
 8012a66:	2000      	movs	r0, #0
 8012a68:	250a      	movs	r5, #10
 8012a6a:	4639      	mov	r1, r7
 8012a6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012a70:	3b30      	subs	r3, #48	; 0x30
 8012a72:	2b09      	cmp	r3, #9
 8012a74:	d94d      	bls.n	8012b12 <_svfiprintf_r+0x16e>
 8012a76:	b1b8      	cbz	r0, 8012aa8 <_svfiprintf_r+0x104>
 8012a78:	e00f      	b.n	8012a9a <_svfiprintf_r+0xf6>
 8012a7a:	462f      	mov	r7, r5
 8012a7c:	e7b8      	b.n	80129f0 <_svfiprintf_r+0x4c>
 8012a7e:	4a40      	ldr	r2, [pc, #256]	; (8012b80 <_svfiprintf_r+0x1dc>)
 8012a80:	1a80      	subs	r0, r0, r2
 8012a82:	fa0b f000 	lsl.w	r0, fp, r0
 8012a86:	4318      	orrs	r0, r3
 8012a88:	9004      	str	r0, [sp, #16]
 8012a8a:	463d      	mov	r5, r7
 8012a8c:	e7d3      	b.n	8012a36 <_svfiprintf_r+0x92>
 8012a8e:	9a03      	ldr	r2, [sp, #12]
 8012a90:	1d11      	adds	r1, r2, #4
 8012a92:	6812      	ldr	r2, [r2, #0]
 8012a94:	9103      	str	r1, [sp, #12]
 8012a96:	2a00      	cmp	r2, #0
 8012a98:	db01      	blt.n	8012a9e <_svfiprintf_r+0xfa>
 8012a9a:	9207      	str	r2, [sp, #28]
 8012a9c:	e004      	b.n	8012aa8 <_svfiprintf_r+0x104>
 8012a9e:	4252      	negs	r2, r2
 8012aa0:	f043 0302 	orr.w	r3, r3, #2
 8012aa4:	9207      	str	r2, [sp, #28]
 8012aa6:	9304      	str	r3, [sp, #16]
 8012aa8:	783b      	ldrb	r3, [r7, #0]
 8012aaa:	2b2e      	cmp	r3, #46	; 0x2e
 8012aac:	d10c      	bne.n	8012ac8 <_svfiprintf_r+0x124>
 8012aae:	787b      	ldrb	r3, [r7, #1]
 8012ab0:	2b2a      	cmp	r3, #42	; 0x2a
 8012ab2:	d133      	bne.n	8012b1c <_svfiprintf_r+0x178>
 8012ab4:	9b03      	ldr	r3, [sp, #12]
 8012ab6:	1d1a      	adds	r2, r3, #4
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	9203      	str	r2, [sp, #12]
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	bfb8      	it	lt
 8012ac0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012ac4:	3702      	adds	r7, #2
 8012ac6:	9305      	str	r3, [sp, #20]
 8012ac8:	4d2e      	ldr	r5, [pc, #184]	; (8012b84 <_svfiprintf_r+0x1e0>)
 8012aca:	7839      	ldrb	r1, [r7, #0]
 8012acc:	2203      	movs	r2, #3
 8012ace:	4628      	mov	r0, r5
 8012ad0:	f7ed fb86 	bl	80001e0 <memchr>
 8012ad4:	b138      	cbz	r0, 8012ae6 <_svfiprintf_r+0x142>
 8012ad6:	2340      	movs	r3, #64	; 0x40
 8012ad8:	1b40      	subs	r0, r0, r5
 8012ada:	fa03 f000 	lsl.w	r0, r3, r0
 8012ade:	9b04      	ldr	r3, [sp, #16]
 8012ae0:	4303      	orrs	r3, r0
 8012ae2:	3701      	adds	r7, #1
 8012ae4:	9304      	str	r3, [sp, #16]
 8012ae6:	7839      	ldrb	r1, [r7, #0]
 8012ae8:	4827      	ldr	r0, [pc, #156]	; (8012b88 <_svfiprintf_r+0x1e4>)
 8012aea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012aee:	2206      	movs	r2, #6
 8012af0:	1c7e      	adds	r6, r7, #1
 8012af2:	f7ed fb75 	bl	80001e0 <memchr>
 8012af6:	2800      	cmp	r0, #0
 8012af8:	d038      	beq.n	8012b6c <_svfiprintf_r+0x1c8>
 8012afa:	4b24      	ldr	r3, [pc, #144]	; (8012b8c <_svfiprintf_r+0x1e8>)
 8012afc:	bb13      	cbnz	r3, 8012b44 <_svfiprintf_r+0x1a0>
 8012afe:	9b03      	ldr	r3, [sp, #12]
 8012b00:	3307      	adds	r3, #7
 8012b02:	f023 0307 	bic.w	r3, r3, #7
 8012b06:	3308      	adds	r3, #8
 8012b08:	9303      	str	r3, [sp, #12]
 8012b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b0c:	444b      	add	r3, r9
 8012b0e:	9309      	str	r3, [sp, #36]	; 0x24
 8012b10:	e76d      	b.n	80129ee <_svfiprintf_r+0x4a>
 8012b12:	fb05 3202 	mla	r2, r5, r2, r3
 8012b16:	2001      	movs	r0, #1
 8012b18:	460f      	mov	r7, r1
 8012b1a:	e7a6      	b.n	8012a6a <_svfiprintf_r+0xc6>
 8012b1c:	2300      	movs	r3, #0
 8012b1e:	3701      	adds	r7, #1
 8012b20:	9305      	str	r3, [sp, #20]
 8012b22:	4619      	mov	r1, r3
 8012b24:	250a      	movs	r5, #10
 8012b26:	4638      	mov	r0, r7
 8012b28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012b2c:	3a30      	subs	r2, #48	; 0x30
 8012b2e:	2a09      	cmp	r2, #9
 8012b30:	d903      	bls.n	8012b3a <_svfiprintf_r+0x196>
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d0c8      	beq.n	8012ac8 <_svfiprintf_r+0x124>
 8012b36:	9105      	str	r1, [sp, #20]
 8012b38:	e7c6      	b.n	8012ac8 <_svfiprintf_r+0x124>
 8012b3a:	fb05 2101 	mla	r1, r5, r1, r2
 8012b3e:	2301      	movs	r3, #1
 8012b40:	4607      	mov	r7, r0
 8012b42:	e7f0      	b.n	8012b26 <_svfiprintf_r+0x182>
 8012b44:	ab03      	add	r3, sp, #12
 8012b46:	9300      	str	r3, [sp, #0]
 8012b48:	4622      	mov	r2, r4
 8012b4a:	4b11      	ldr	r3, [pc, #68]	; (8012b90 <_svfiprintf_r+0x1ec>)
 8012b4c:	a904      	add	r1, sp, #16
 8012b4e:	4640      	mov	r0, r8
 8012b50:	f7fd fdce 	bl	80106f0 <_printf_float>
 8012b54:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8012b58:	4681      	mov	r9, r0
 8012b5a:	d1d6      	bne.n	8012b0a <_svfiprintf_r+0x166>
 8012b5c:	89a3      	ldrh	r3, [r4, #12]
 8012b5e:	065b      	lsls	r3, r3, #25
 8012b60:	f53f af35 	bmi.w	80129ce <_svfiprintf_r+0x2a>
 8012b64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012b66:	b01d      	add	sp, #116	; 0x74
 8012b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b6c:	ab03      	add	r3, sp, #12
 8012b6e:	9300      	str	r3, [sp, #0]
 8012b70:	4622      	mov	r2, r4
 8012b72:	4b07      	ldr	r3, [pc, #28]	; (8012b90 <_svfiprintf_r+0x1ec>)
 8012b74:	a904      	add	r1, sp, #16
 8012b76:	4640      	mov	r0, r8
 8012b78:	f7fe f870 	bl	8010c5c <_printf_i>
 8012b7c:	e7ea      	b.n	8012b54 <_svfiprintf_r+0x1b0>
 8012b7e:	bf00      	nop
 8012b80:	08015354 	.word	0x08015354
 8012b84:	0801535a 	.word	0x0801535a
 8012b88:	0801535e 	.word	0x0801535e
 8012b8c:	080106f1 	.word	0x080106f1
 8012b90:	080128f1 	.word	0x080128f1

08012b94 <__sfputc_r>:
 8012b94:	6893      	ldr	r3, [r2, #8]
 8012b96:	3b01      	subs	r3, #1
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	b410      	push	{r4}
 8012b9c:	6093      	str	r3, [r2, #8]
 8012b9e:	da08      	bge.n	8012bb2 <__sfputc_r+0x1e>
 8012ba0:	6994      	ldr	r4, [r2, #24]
 8012ba2:	42a3      	cmp	r3, r4
 8012ba4:	db01      	blt.n	8012baa <__sfputc_r+0x16>
 8012ba6:	290a      	cmp	r1, #10
 8012ba8:	d103      	bne.n	8012bb2 <__sfputc_r+0x1e>
 8012baa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012bae:	f7fe ba03 	b.w	8010fb8 <__swbuf_r>
 8012bb2:	6813      	ldr	r3, [r2, #0]
 8012bb4:	1c58      	adds	r0, r3, #1
 8012bb6:	6010      	str	r0, [r2, #0]
 8012bb8:	7019      	strb	r1, [r3, #0]
 8012bba:	4608      	mov	r0, r1
 8012bbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012bc0:	4770      	bx	lr

08012bc2 <__sfputs_r>:
 8012bc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bc4:	4606      	mov	r6, r0
 8012bc6:	460f      	mov	r7, r1
 8012bc8:	4614      	mov	r4, r2
 8012bca:	18d5      	adds	r5, r2, r3
 8012bcc:	42ac      	cmp	r4, r5
 8012bce:	d101      	bne.n	8012bd4 <__sfputs_r+0x12>
 8012bd0:	2000      	movs	r0, #0
 8012bd2:	e007      	b.n	8012be4 <__sfputs_r+0x22>
 8012bd4:	463a      	mov	r2, r7
 8012bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012bda:	4630      	mov	r0, r6
 8012bdc:	f7ff ffda 	bl	8012b94 <__sfputc_r>
 8012be0:	1c43      	adds	r3, r0, #1
 8012be2:	d1f3      	bne.n	8012bcc <__sfputs_r+0xa>
 8012be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012be8 <_vfiprintf_r>:
 8012be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bec:	460c      	mov	r4, r1
 8012bee:	b09d      	sub	sp, #116	; 0x74
 8012bf0:	4617      	mov	r7, r2
 8012bf2:	461d      	mov	r5, r3
 8012bf4:	4606      	mov	r6, r0
 8012bf6:	b118      	cbz	r0, 8012c00 <_vfiprintf_r+0x18>
 8012bf8:	6983      	ldr	r3, [r0, #24]
 8012bfa:	b90b      	cbnz	r3, 8012c00 <_vfiprintf_r+0x18>
 8012bfc:	f7ff f9d0 	bl	8011fa0 <__sinit>
 8012c00:	4b7c      	ldr	r3, [pc, #496]	; (8012df4 <_vfiprintf_r+0x20c>)
 8012c02:	429c      	cmp	r4, r3
 8012c04:	d158      	bne.n	8012cb8 <_vfiprintf_r+0xd0>
 8012c06:	6874      	ldr	r4, [r6, #4]
 8012c08:	89a3      	ldrh	r3, [r4, #12]
 8012c0a:	0718      	lsls	r0, r3, #28
 8012c0c:	d55e      	bpl.n	8012ccc <_vfiprintf_r+0xe4>
 8012c0e:	6923      	ldr	r3, [r4, #16]
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d05b      	beq.n	8012ccc <_vfiprintf_r+0xe4>
 8012c14:	2300      	movs	r3, #0
 8012c16:	9309      	str	r3, [sp, #36]	; 0x24
 8012c18:	2320      	movs	r3, #32
 8012c1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012c1e:	2330      	movs	r3, #48	; 0x30
 8012c20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012c24:	9503      	str	r5, [sp, #12]
 8012c26:	f04f 0b01 	mov.w	fp, #1
 8012c2a:	46b8      	mov	r8, r7
 8012c2c:	4645      	mov	r5, r8
 8012c2e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012c32:	b10b      	cbz	r3, 8012c38 <_vfiprintf_r+0x50>
 8012c34:	2b25      	cmp	r3, #37	; 0x25
 8012c36:	d154      	bne.n	8012ce2 <_vfiprintf_r+0xfa>
 8012c38:	ebb8 0a07 	subs.w	sl, r8, r7
 8012c3c:	d00b      	beq.n	8012c56 <_vfiprintf_r+0x6e>
 8012c3e:	4653      	mov	r3, sl
 8012c40:	463a      	mov	r2, r7
 8012c42:	4621      	mov	r1, r4
 8012c44:	4630      	mov	r0, r6
 8012c46:	f7ff ffbc 	bl	8012bc2 <__sfputs_r>
 8012c4a:	3001      	adds	r0, #1
 8012c4c:	f000 80c2 	beq.w	8012dd4 <_vfiprintf_r+0x1ec>
 8012c50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c52:	4453      	add	r3, sl
 8012c54:	9309      	str	r3, [sp, #36]	; 0x24
 8012c56:	f898 3000 	ldrb.w	r3, [r8]
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	f000 80ba 	beq.w	8012dd4 <_vfiprintf_r+0x1ec>
 8012c60:	2300      	movs	r3, #0
 8012c62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012c66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012c6a:	9304      	str	r3, [sp, #16]
 8012c6c:	9307      	str	r3, [sp, #28]
 8012c6e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012c72:	931a      	str	r3, [sp, #104]	; 0x68
 8012c74:	46a8      	mov	r8, r5
 8012c76:	2205      	movs	r2, #5
 8012c78:	f818 1b01 	ldrb.w	r1, [r8], #1
 8012c7c:	485e      	ldr	r0, [pc, #376]	; (8012df8 <_vfiprintf_r+0x210>)
 8012c7e:	f7ed faaf 	bl	80001e0 <memchr>
 8012c82:	9b04      	ldr	r3, [sp, #16]
 8012c84:	bb78      	cbnz	r0, 8012ce6 <_vfiprintf_r+0xfe>
 8012c86:	06d9      	lsls	r1, r3, #27
 8012c88:	bf44      	itt	mi
 8012c8a:	2220      	movmi	r2, #32
 8012c8c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012c90:	071a      	lsls	r2, r3, #28
 8012c92:	bf44      	itt	mi
 8012c94:	222b      	movmi	r2, #43	; 0x2b
 8012c96:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012c9a:	782a      	ldrb	r2, [r5, #0]
 8012c9c:	2a2a      	cmp	r2, #42	; 0x2a
 8012c9e:	d02a      	beq.n	8012cf6 <_vfiprintf_r+0x10e>
 8012ca0:	9a07      	ldr	r2, [sp, #28]
 8012ca2:	46a8      	mov	r8, r5
 8012ca4:	2000      	movs	r0, #0
 8012ca6:	250a      	movs	r5, #10
 8012ca8:	4641      	mov	r1, r8
 8012caa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012cae:	3b30      	subs	r3, #48	; 0x30
 8012cb0:	2b09      	cmp	r3, #9
 8012cb2:	d969      	bls.n	8012d88 <_vfiprintf_r+0x1a0>
 8012cb4:	b360      	cbz	r0, 8012d10 <_vfiprintf_r+0x128>
 8012cb6:	e024      	b.n	8012d02 <_vfiprintf_r+0x11a>
 8012cb8:	4b50      	ldr	r3, [pc, #320]	; (8012dfc <_vfiprintf_r+0x214>)
 8012cba:	429c      	cmp	r4, r3
 8012cbc:	d101      	bne.n	8012cc2 <_vfiprintf_r+0xda>
 8012cbe:	68b4      	ldr	r4, [r6, #8]
 8012cc0:	e7a2      	b.n	8012c08 <_vfiprintf_r+0x20>
 8012cc2:	4b4f      	ldr	r3, [pc, #316]	; (8012e00 <_vfiprintf_r+0x218>)
 8012cc4:	429c      	cmp	r4, r3
 8012cc6:	bf08      	it	eq
 8012cc8:	68f4      	ldreq	r4, [r6, #12]
 8012cca:	e79d      	b.n	8012c08 <_vfiprintf_r+0x20>
 8012ccc:	4621      	mov	r1, r4
 8012cce:	4630      	mov	r0, r6
 8012cd0:	f7fe f9c4 	bl	801105c <__swsetup_r>
 8012cd4:	2800      	cmp	r0, #0
 8012cd6:	d09d      	beq.n	8012c14 <_vfiprintf_r+0x2c>
 8012cd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012cdc:	b01d      	add	sp, #116	; 0x74
 8012cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ce2:	46a8      	mov	r8, r5
 8012ce4:	e7a2      	b.n	8012c2c <_vfiprintf_r+0x44>
 8012ce6:	4a44      	ldr	r2, [pc, #272]	; (8012df8 <_vfiprintf_r+0x210>)
 8012ce8:	1a80      	subs	r0, r0, r2
 8012cea:	fa0b f000 	lsl.w	r0, fp, r0
 8012cee:	4318      	orrs	r0, r3
 8012cf0:	9004      	str	r0, [sp, #16]
 8012cf2:	4645      	mov	r5, r8
 8012cf4:	e7be      	b.n	8012c74 <_vfiprintf_r+0x8c>
 8012cf6:	9a03      	ldr	r2, [sp, #12]
 8012cf8:	1d11      	adds	r1, r2, #4
 8012cfa:	6812      	ldr	r2, [r2, #0]
 8012cfc:	9103      	str	r1, [sp, #12]
 8012cfe:	2a00      	cmp	r2, #0
 8012d00:	db01      	blt.n	8012d06 <_vfiprintf_r+0x11e>
 8012d02:	9207      	str	r2, [sp, #28]
 8012d04:	e004      	b.n	8012d10 <_vfiprintf_r+0x128>
 8012d06:	4252      	negs	r2, r2
 8012d08:	f043 0302 	orr.w	r3, r3, #2
 8012d0c:	9207      	str	r2, [sp, #28]
 8012d0e:	9304      	str	r3, [sp, #16]
 8012d10:	f898 3000 	ldrb.w	r3, [r8]
 8012d14:	2b2e      	cmp	r3, #46	; 0x2e
 8012d16:	d10e      	bne.n	8012d36 <_vfiprintf_r+0x14e>
 8012d18:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012d1c:	2b2a      	cmp	r3, #42	; 0x2a
 8012d1e:	d138      	bne.n	8012d92 <_vfiprintf_r+0x1aa>
 8012d20:	9b03      	ldr	r3, [sp, #12]
 8012d22:	1d1a      	adds	r2, r3, #4
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	9203      	str	r2, [sp, #12]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	bfb8      	it	lt
 8012d2c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012d30:	f108 0802 	add.w	r8, r8, #2
 8012d34:	9305      	str	r3, [sp, #20]
 8012d36:	4d33      	ldr	r5, [pc, #204]	; (8012e04 <_vfiprintf_r+0x21c>)
 8012d38:	f898 1000 	ldrb.w	r1, [r8]
 8012d3c:	2203      	movs	r2, #3
 8012d3e:	4628      	mov	r0, r5
 8012d40:	f7ed fa4e 	bl	80001e0 <memchr>
 8012d44:	b140      	cbz	r0, 8012d58 <_vfiprintf_r+0x170>
 8012d46:	2340      	movs	r3, #64	; 0x40
 8012d48:	1b40      	subs	r0, r0, r5
 8012d4a:	fa03 f000 	lsl.w	r0, r3, r0
 8012d4e:	9b04      	ldr	r3, [sp, #16]
 8012d50:	4303      	orrs	r3, r0
 8012d52:	f108 0801 	add.w	r8, r8, #1
 8012d56:	9304      	str	r3, [sp, #16]
 8012d58:	f898 1000 	ldrb.w	r1, [r8]
 8012d5c:	482a      	ldr	r0, [pc, #168]	; (8012e08 <_vfiprintf_r+0x220>)
 8012d5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012d62:	2206      	movs	r2, #6
 8012d64:	f108 0701 	add.w	r7, r8, #1
 8012d68:	f7ed fa3a 	bl	80001e0 <memchr>
 8012d6c:	2800      	cmp	r0, #0
 8012d6e:	d037      	beq.n	8012de0 <_vfiprintf_r+0x1f8>
 8012d70:	4b26      	ldr	r3, [pc, #152]	; (8012e0c <_vfiprintf_r+0x224>)
 8012d72:	bb1b      	cbnz	r3, 8012dbc <_vfiprintf_r+0x1d4>
 8012d74:	9b03      	ldr	r3, [sp, #12]
 8012d76:	3307      	adds	r3, #7
 8012d78:	f023 0307 	bic.w	r3, r3, #7
 8012d7c:	3308      	adds	r3, #8
 8012d7e:	9303      	str	r3, [sp, #12]
 8012d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d82:	444b      	add	r3, r9
 8012d84:	9309      	str	r3, [sp, #36]	; 0x24
 8012d86:	e750      	b.n	8012c2a <_vfiprintf_r+0x42>
 8012d88:	fb05 3202 	mla	r2, r5, r2, r3
 8012d8c:	2001      	movs	r0, #1
 8012d8e:	4688      	mov	r8, r1
 8012d90:	e78a      	b.n	8012ca8 <_vfiprintf_r+0xc0>
 8012d92:	2300      	movs	r3, #0
 8012d94:	f108 0801 	add.w	r8, r8, #1
 8012d98:	9305      	str	r3, [sp, #20]
 8012d9a:	4619      	mov	r1, r3
 8012d9c:	250a      	movs	r5, #10
 8012d9e:	4640      	mov	r0, r8
 8012da0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012da4:	3a30      	subs	r2, #48	; 0x30
 8012da6:	2a09      	cmp	r2, #9
 8012da8:	d903      	bls.n	8012db2 <_vfiprintf_r+0x1ca>
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d0c3      	beq.n	8012d36 <_vfiprintf_r+0x14e>
 8012dae:	9105      	str	r1, [sp, #20]
 8012db0:	e7c1      	b.n	8012d36 <_vfiprintf_r+0x14e>
 8012db2:	fb05 2101 	mla	r1, r5, r1, r2
 8012db6:	2301      	movs	r3, #1
 8012db8:	4680      	mov	r8, r0
 8012dba:	e7f0      	b.n	8012d9e <_vfiprintf_r+0x1b6>
 8012dbc:	ab03      	add	r3, sp, #12
 8012dbe:	9300      	str	r3, [sp, #0]
 8012dc0:	4622      	mov	r2, r4
 8012dc2:	4b13      	ldr	r3, [pc, #76]	; (8012e10 <_vfiprintf_r+0x228>)
 8012dc4:	a904      	add	r1, sp, #16
 8012dc6:	4630      	mov	r0, r6
 8012dc8:	f7fd fc92 	bl	80106f0 <_printf_float>
 8012dcc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8012dd0:	4681      	mov	r9, r0
 8012dd2:	d1d5      	bne.n	8012d80 <_vfiprintf_r+0x198>
 8012dd4:	89a3      	ldrh	r3, [r4, #12]
 8012dd6:	065b      	lsls	r3, r3, #25
 8012dd8:	f53f af7e 	bmi.w	8012cd8 <_vfiprintf_r+0xf0>
 8012ddc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012dde:	e77d      	b.n	8012cdc <_vfiprintf_r+0xf4>
 8012de0:	ab03      	add	r3, sp, #12
 8012de2:	9300      	str	r3, [sp, #0]
 8012de4:	4622      	mov	r2, r4
 8012de6:	4b0a      	ldr	r3, [pc, #40]	; (8012e10 <_vfiprintf_r+0x228>)
 8012de8:	a904      	add	r1, sp, #16
 8012dea:	4630      	mov	r0, r6
 8012dec:	f7fd ff36 	bl	8010c5c <_printf_i>
 8012df0:	e7ec      	b.n	8012dcc <_vfiprintf_r+0x1e4>
 8012df2:	bf00      	nop
 8012df4:	08015208 	.word	0x08015208
 8012df8:	08015354 	.word	0x08015354
 8012dfc:	08015228 	.word	0x08015228
 8012e00:	080151e8 	.word	0x080151e8
 8012e04:	0801535a 	.word	0x0801535a
 8012e08:	0801535e 	.word	0x0801535e
 8012e0c:	080106f1 	.word	0x080106f1
 8012e10:	08012bc3 	.word	0x08012bc3

08012e14 <_sbrk_r>:
 8012e14:	b538      	push	{r3, r4, r5, lr}
 8012e16:	4c06      	ldr	r4, [pc, #24]	; (8012e30 <_sbrk_r+0x1c>)
 8012e18:	2300      	movs	r3, #0
 8012e1a:	4605      	mov	r5, r0
 8012e1c:	4608      	mov	r0, r1
 8012e1e:	6023      	str	r3, [r4, #0]
 8012e20:	f7f0 ff08 	bl	8003c34 <_sbrk>
 8012e24:	1c43      	adds	r3, r0, #1
 8012e26:	d102      	bne.n	8012e2e <_sbrk_r+0x1a>
 8012e28:	6823      	ldr	r3, [r4, #0]
 8012e2a:	b103      	cbz	r3, 8012e2e <_sbrk_r+0x1a>
 8012e2c:	602b      	str	r3, [r5, #0]
 8012e2e:	bd38      	pop	{r3, r4, r5, pc}
 8012e30:	20017d24 	.word	0x20017d24

08012e34 <nanf>:
 8012e34:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012e3c <nanf+0x8>
 8012e38:	4770      	bx	lr
 8012e3a:	bf00      	nop
 8012e3c:	7fc00000 	.word	0x7fc00000

08012e40 <__sread>:
 8012e40:	b510      	push	{r4, lr}
 8012e42:	460c      	mov	r4, r1
 8012e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e48:	f000 f8e2 	bl	8013010 <_read_r>
 8012e4c:	2800      	cmp	r0, #0
 8012e4e:	bfab      	itete	ge
 8012e50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012e52:	89a3      	ldrhlt	r3, [r4, #12]
 8012e54:	181b      	addge	r3, r3, r0
 8012e56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012e5a:	bfac      	ite	ge
 8012e5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8012e5e:	81a3      	strhlt	r3, [r4, #12]
 8012e60:	bd10      	pop	{r4, pc}

08012e62 <__swrite>:
 8012e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e66:	461f      	mov	r7, r3
 8012e68:	898b      	ldrh	r3, [r1, #12]
 8012e6a:	05db      	lsls	r3, r3, #23
 8012e6c:	4605      	mov	r5, r0
 8012e6e:	460c      	mov	r4, r1
 8012e70:	4616      	mov	r6, r2
 8012e72:	d505      	bpl.n	8012e80 <__swrite+0x1e>
 8012e74:	2302      	movs	r3, #2
 8012e76:	2200      	movs	r2, #0
 8012e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e7c:	f000 f874 	bl	8012f68 <_lseek_r>
 8012e80:	89a3      	ldrh	r3, [r4, #12]
 8012e82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012e86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012e8a:	81a3      	strh	r3, [r4, #12]
 8012e8c:	4632      	mov	r2, r6
 8012e8e:	463b      	mov	r3, r7
 8012e90:	4628      	mov	r0, r5
 8012e92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e96:	f000 b823 	b.w	8012ee0 <_write_r>

08012e9a <__sseek>:
 8012e9a:	b510      	push	{r4, lr}
 8012e9c:	460c      	mov	r4, r1
 8012e9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ea2:	f000 f861 	bl	8012f68 <_lseek_r>
 8012ea6:	1c43      	adds	r3, r0, #1
 8012ea8:	89a3      	ldrh	r3, [r4, #12]
 8012eaa:	bf15      	itete	ne
 8012eac:	6560      	strne	r0, [r4, #84]	; 0x54
 8012eae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012eb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012eb6:	81a3      	strheq	r3, [r4, #12]
 8012eb8:	bf18      	it	ne
 8012eba:	81a3      	strhne	r3, [r4, #12]
 8012ebc:	bd10      	pop	{r4, pc}

08012ebe <__sclose>:
 8012ebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ec2:	f000 b81f 	b.w	8012f04 <_close_r>

08012ec6 <__ascii_wctomb>:
 8012ec6:	b149      	cbz	r1, 8012edc <__ascii_wctomb+0x16>
 8012ec8:	2aff      	cmp	r2, #255	; 0xff
 8012eca:	bf85      	ittet	hi
 8012ecc:	238a      	movhi	r3, #138	; 0x8a
 8012ece:	6003      	strhi	r3, [r0, #0]
 8012ed0:	700a      	strbls	r2, [r1, #0]
 8012ed2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8012ed6:	bf98      	it	ls
 8012ed8:	2001      	movls	r0, #1
 8012eda:	4770      	bx	lr
 8012edc:	4608      	mov	r0, r1
 8012ede:	4770      	bx	lr

08012ee0 <_write_r>:
 8012ee0:	b538      	push	{r3, r4, r5, lr}
 8012ee2:	4c07      	ldr	r4, [pc, #28]	; (8012f00 <_write_r+0x20>)
 8012ee4:	4605      	mov	r5, r0
 8012ee6:	4608      	mov	r0, r1
 8012ee8:	4611      	mov	r1, r2
 8012eea:	2200      	movs	r2, #0
 8012eec:	6022      	str	r2, [r4, #0]
 8012eee:	461a      	mov	r2, r3
 8012ef0:	f7f0 fe50 	bl	8003b94 <_write>
 8012ef4:	1c43      	adds	r3, r0, #1
 8012ef6:	d102      	bne.n	8012efe <_write_r+0x1e>
 8012ef8:	6823      	ldr	r3, [r4, #0]
 8012efa:	b103      	cbz	r3, 8012efe <_write_r+0x1e>
 8012efc:	602b      	str	r3, [r5, #0]
 8012efe:	bd38      	pop	{r3, r4, r5, pc}
 8012f00:	20017d24 	.word	0x20017d24

08012f04 <_close_r>:
 8012f04:	b538      	push	{r3, r4, r5, lr}
 8012f06:	4c06      	ldr	r4, [pc, #24]	; (8012f20 <_close_r+0x1c>)
 8012f08:	2300      	movs	r3, #0
 8012f0a:	4605      	mov	r5, r0
 8012f0c:	4608      	mov	r0, r1
 8012f0e:	6023      	str	r3, [r4, #0]
 8012f10:	f7f0 fe5c 	bl	8003bcc <_close>
 8012f14:	1c43      	adds	r3, r0, #1
 8012f16:	d102      	bne.n	8012f1e <_close_r+0x1a>
 8012f18:	6823      	ldr	r3, [r4, #0]
 8012f1a:	b103      	cbz	r3, 8012f1e <_close_r+0x1a>
 8012f1c:	602b      	str	r3, [r5, #0]
 8012f1e:	bd38      	pop	{r3, r4, r5, pc}
 8012f20:	20017d24 	.word	0x20017d24

08012f24 <_fstat_r>:
 8012f24:	b538      	push	{r3, r4, r5, lr}
 8012f26:	4c07      	ldr	r4, [pc, #28]	; (8012f44 <_fstat_r+0x20>)
 8012f28:	2300      	movs	r3, #0
 8012f2a:	4605      	mov	r5, r0
 8012f2c:	4608      	mov	r0, r1
 8012f2e:	4611      	mov	r1, r2
 8012f30:	6023      	str	r3, [r4, #0]
 8012f32:	f7f0 fe57 	bl	8003be4 <_fstat>
 8012f36:	1c43      	adds	r3, r0, #1
 8012f38:	d102      	bne.n	8012f40 <_fstat_r+0x1c>
 8012f3a:	6823      	ldr	r3, [r4, #0]
 8012f3c:	b103      	cbz	r3, 8012f40 <_fstat_r+0x1c>
 8012f3e:	602b      	str	r3, [r5, #0]
 8012f40:	bd38      	pop	{r3, r4, r5, pc}
 8012f42:	bf00      	nop
 8012f44:	20017d24 	.word	0x20017d24

08012f48 <_isatty_r>:
 8012f48:	b538      	push	{r3, r4, r5, lr}
 8012f4a:	4c06      	ldr	r4, [pc, #24]	; (8012f64 <_isatty_r+0x1c>)
 8012f4c:	2300      	movs	r3, #0
 8012f4e:	4605      	mov	r5, r0
 8012f50:	4608      	mov	r0, r1
 8012f52:	6023      	str	r3, [r4, #0]
 8012f54:	f7f0 fe56 	bl	8003c04 <_isatty>
 8012f58:	1c43      	adds	r3, r0, #1
 8012f5a:	d102      	bne.n	8012f62 <_isatty_r+0x1a>
 8012f5c:	6823      	ldr	r3, [r4, #0]
 8012f5e:	b103      	cbz	r3, 8012f62 <_isatty_r+0x1a>
 8012f60:	602b      	str	r3, [r5, #0]
 8012f62:	bd38      	pop	{r3, r4, r5, pc}
 8012f64:	20017d24 	.word	0x20017d24

08012f68 <_lseek_r>:
 8012f68:	b538      	push	{r3, r4, r5, lr}
 8012f6a:	4c07      	ldr	r4, [pc, #28]	; (8012f88 <_lseek_r+0x20>)
 8012f6c:	4605      	mov	r5, r0
 8012f6e:	4608      	mov	r0, r1
 8012f70:	4611      	mov	r1, r2
 8012f72:	2200      	movs	r2, #0
 8012f74:	6022      	str	r2, [r4, #0]
 8012f76:	461a      	mov	r2, r3
 8012f78:	f7f0 fe4f 	bl	8003c1a <_lseek>
 8012f7c:	1c43      	adds	r3, r0, #1
 8012f7e:	d102      	bne.n	8012f86 <_lseek_r+0x1e>
 8012f80:	6823      	ldr	r3, [r4, #0]
 8012f82:	b103      	cbz	r3, 8012f86 <_lseek_r+0x1e>
 8012f84:	602b      	str	r3, [r5, #0]
 8012f86:	bd38      	pop	{r3, r4, r5, pc}
 8012f88:	20017d24 	.word	0x20017d24

08012f8c <memmove>:
 8012f8c:	4288      	cmp	r0, r1
 8012f8e:	b510      	push	{r4, lr}
 8012f90:	eb01 0302 	add.w	r3, r1, r2
 8012f94:	d807      	bhi.n	8012fa6 <memmove+0x1a>
 8012f96:	1e42      	subs	r2, r0, #1
 8012f98:	4299      	cmp	r1, r3
 8012f9a:	d00a      	beq.n	8012fb2 <memmove+0x26>
 8012f9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012fa0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012fa4:	e7f8      	b.n	8012f98 <memmove+0xc>
 8012fa6:	4283      	cmp	r3, r0
 8012fa8:	d9f5      	bls.n	8012f96 <memmove+0xa>
 8012faa:	1881      	adds	r1, r0, r2
 8012fac:	1ad2      	subs	r2, r2, r3
 8012fae:	42d3      	cmn	r3, r2
 8012fb0:	d100      	bne.n	8012fb4 <memmove+0x28>
 8012fb2:	bd10      	pop	{r4, pc}
 8012fb4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012fb8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8012fbc:	e7f7      	b.n	8012fae <memmove+0x22>

08012fbe <__malloc_lock>:
 8012fbe:	4770      	bx	lr

08012fc0 <__malloc_unlock>:
 8012fc0:	4770      	bx	lr

08012fc2 <_realloc_r>:
 8012fc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fc4:	4607      	mov	r7, r0
 8012fc6:	4614      	mov	r4, r2
 8012fc8:	460e      	mov	r6, r1
 8012fca:	b921      	cbnz	r1, 8012fd6 <_realloc_r+0x14>
 8012fcc:	4611      	mov	r1, r2
 8012fce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012fd2:	f7ff bc33 	b.w	801283c <_malloc_r>
 8012fd6:	b922      	cbnz	r2, 8012fe2 <_realloc_r+0x20>
 8012fd8:	f7ff fbe2 	bl	80127a0 <_free_r>
 8012fdc:	4625      	mov	r5, r4
 8012fde:	4628      	mov	r0, r5
 8012fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fe2:	f000 f827 	bl	8013034 <_malloc_usable_size_r>
 8012fe6:	42a0      	cmp	r0, r4
 8012fe8:	d20f      	bcs.n	801300a <_realloc_r+0x48>
 8012fea:	4621      	mov	r1, r4
 8012fec:	4638      	mov	r0, r7
 8012fee:	f7ff fc25 	bl	801283c <_malloc_r>
 8012ff2:	4605      	mov	r5, r0
 8012ff4:	2800      	cmp	r0, #0
 8012ff6:	d0f2      	beq.n	8012fde <_realloc_r+0x1c>
 8012ff8:	4631      	mov	r1, r6
 8012ffa:	4622      	mov	r2, r4
 8012ffc:	f7fd fad0 	bl	80105a0 <memcpy>
 8013000:	4631      	mov	r1, r6
 8013002:	4638      	mov	r0, r7
 8013004:	f7ff fbcc 	bl	80127a0 <_free_r>
 8013008:	e7e9      	b.n	8012fde <_realloc_r+0x1c>
 801300a:	4635      	mov	r5, r6
 801300c:	e7e7      	b.n	8012fde <_realloc_r+0x1c>
	...

08013010 <_read_r>:
 8013010:	b538      	push	{r3, r4, r5, lr}
 8013012:	4c07      	ldr	r4, [pc, #28]	; (8013030 <_read_r+0x20>)
 8013014:	4605      	mov	r5, r0
 8013016:	4608      	mov	r0, r1
 8013018:	4611      	mov	r1, r2
 801301a:	2200      	movs	r2, #0
 801301c:	6022      	str	r2, [r4, #0]
 801301e:	461a      	mov	r2, r3
 8013020:	f7f0 fd9b 	bl	8003b5a <_read>
 8013024:	1c43      	adds	r3, r0, #1
 8013026:	d102      	bne.n	801302e <_read_r+0x1e>
 8013028:	6823      	ldr	r3, [r4, #0]
 801302a:	b103      	cbz	r3, 801302e <_read_r+0x1e>
 801302c:	602b      	str	r3, [r5, #0]
 801302e:	bd38      	pop	{r3, r4, r5, pc}
 8013030:	20017d24 	.word	0x20017d24

08013034 <_malloc_usable_size_r>:
 8013034:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013038:	1f18      	subs	r0, r3, #4
 801303a:	2b00      	cmp	r3, #0
 801303c:	bfbc      	itt	lt
 801303e:	580b      	ldrlt	r3, [r1, r0]
 8013040:	18c0      	addlt	r0, r0, r3
 8013042:	4770      	bx	lr

08013044 <pow>:
 8013044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013048:	ed2d 8b04 	vpush	{d8-d9}
 801304c:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8013320 <pow+0x2dc>
 8013050:	b08d      	sub	sp, #52	; 0x34
 8013052:	ec57 6b10 	vmov	r6, r7, d0
 8013056:	ec55 4b11 	vmov	r4, r5, d1
 801305a:	f000 fb71 	bl	8013740 <__ieee754_pow>
 801305e:	f999 3000 	ldrsb.w	r3, [r9]
 8013062:	9300      	str	r3, [sp, #0]
 8013064:	3301      	adds	r3, #1
 8013066:	eeb0 8a40 	vmov.f32	s16, s0
 801306a:	eef0 8a60 	vmov.f32	s17, s1
 801306e:	46c8      	mov	r8, r9
 8013070:	d05f      	beq.n	8013132 <pow+0xee>
 8013072:	4622      	mov	r2, r4
 8013074:	462b      	mov	r3, r5
 8013076:	4620      	mov	r0, r4
 8013078:	4629      	mov	r1, r5
 801307a:	f7ed fd57 	bl	8000b2c <__aeabi_dcmpun>
 801307e:	4683      	mov	fp, r0
 8013080:	2800      	cmp	r0, #0
 8013082:	d156      	bne.n	8013132 <pow+0xee>
 8013084:	4632      	mov	r2, r6
 8013086:	463b      	mov	r3, r7
 8013088:	4630      	mov	r0, r6
 801308a:	4639      	mov	r1, r7
 801308c:	f7ed fd4e 	bl	8000b2c <__aeabi_dcmpun>
 8013090:	9001      	str	r0, [sp, #4]
 8013092:	b1e8      	cbz	r0, 80130d0 <pow+0x8c>
 8013094:	2200      	movs	r2, #0
 8013096:	2300      	movs	r3, #0
 8013098:	4620      	mov	r0, r4
 801309a:	4629      	mov	r1, r5
 801309c:	f7ed fd14 	bl	8000ac8 <__aeabi_dcmpeq>
 80130a0:	2800      	cmp	r0, #0
 80130a2:	d046      	beq.n	8013132 <pow+0xee>
 80130a4:	2301      	movs	r3, #1
 80130a6:	9302      	str	r3, [sp, #8]
 80130a8:	4b96      	ldr	r3, [pc, #600]	; (8013304 <pow+0x2c0>)
 80130aa:	9303      	str	r3, [sp, #12]
 80130ac:	4b96      	ldr	r3, [pc, #600]	; (8013308 <pow+0x2c4>)
 80130ae:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80130b2:	2200      	movs	r2, #0
 80130b4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80130b8:	9b00      	ldr	r3, [sp, #0]
 80130ba:	2b02      	cmp	r3, #2
 80130bc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80130c0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80130c4:	d033      	beq.n	801312e <pow+0xea>
 80130c6:	a802      	add	r0, sp, #8
 80130c8:	f001 fbcc 	bl	8014864 <matherr>
 80130cc:	bb48      	cbnz	r0, 8013122 <pow+0xde>
 80130ce:	e05d      	b.n	801318c <pow+0x148>
 80130d0:	f04f 0a00 	mov.w	sl, #0
 80130d4:	f04f 0b00 	mov.w	fp, #0
 80130d8:	4652      	mov	r2, sl
 80130da:	465b      	mov	r3, fp
 80130dc:	4630      	mov	r0, r6
 80130de:	4639      	mov	r1, r7
 80130e0:	f7ed fcf2 	bl	8000ac8 <__aeabi_dcmpeq>
 80130e4:	ec4b ab19 	vmov	d9, sl, fp
 80130e8:	2800      	cmp	r0, #0
 80130ea:	d054      	beq.n	8013196 <pow+0x152>
 80130ec:	4652      	mov	r2, sl
 80130ee:	465b      	mov	r3, fp
 80130f0:	4620      	mov	r0, r4
 80130f2:	4629      	mov	r1, r5
 80130f4:	f7ed fce8 	bl	8000ac8 <__aeabi_dcmpeq>
 80130f8:	4680      	mov	r8, r0
 80130fa:	b318      	cbz	r0, 8013144 <pow+0x100>
 80130fc:	2301      	movs	r3, #1
 80130fe:	9302      	str	r3, [sp, #8]
 8013100:	4b80      	ldr	r3, [pc, #512]	; (8013304 <pow+0x2c0>)
 8013102:	9303      	str	r3, [sp, #12]
 8013104:	9b01      	ldr	r3, [sp, #4]
 8013106:	930a      	str	r3, [sp, #40]	; 0x28
 8013108:	9b00      	ldr	r3, [sp, #0]
 801310a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801310e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013112:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8013116:	2b00      	cmp	r3, #0
 8013118:	d0d5      	beq.n	80130c6 <pow+0x82>
 801311a:	4b7b      	ldr	r3, [pc, #492]	; (8013308 <pow+0x2c4>)
 801311c:	2200      	movs	r2, #0
 801311e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013122:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013124:	b11b      	cbz	r3, 801312e <pow+0xea>
 8013126:	f7fd fa11 	bl	801054c <__errno>
 801312a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801312c:	6003      	str	r3, [r0, #0]
 801312e:	ed9d 8b08 	vldr	d8, [sp, #32]
 8013132:	eeb0 0a48 	vmov.f32	s0, s16
 8013136:	eef0 0a68 	vmov.f32	s1, s17
 801313a:	b00d      	add	sp, #52	; 0x34
 801313c:	ecbd 8b04 	vpop	{d8-d9}
 8013140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013144:	ec45 4b10 	vmov	d0, r4, r5
 8013148:	f001 fb84 	bl	8014854 <finite>
 801314c:	2800      	cmp	r0, #0
 801314e:	d0f0      	beq.n	8013132 <pow+0xee>
 8013150:	4652      	mov	r2, sl
 8013152:	465b      	mov	r3, fp
 8013154:	4620      	mov	r0, r4
 8013156:	4629      	mov	r1, r5
 8013158:	f7ed fcc0 	bl	8000adc <__aeabi_dcmplt>
 801315c:	2800      	cmp	r0, #0
 801315e:	d0e8      	beq.n	8013132 <pow+0xee>
 8013160:	2301      	movs	r3, #1
 8013162:	9302      	str	r3, [sp, #8]
 8013164:	4b67      	ldr	r3, [pc, #412]	; (8013304 <pow+0x2c0>)
 8013166:	9303      	str	r3, [sp, #12]
 8013168:	f999 3000 	ldrsb.w	r3, [r9]
 801316c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8013170:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013174:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013178:	b913      	cbnz	r3, 8013180 <pow+0x13c>
 801317a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801317e:	e7a2      	b.n	80130c6 <pow+0x82>
 8013180:	4962      	ldr	r1, [pc, #392]	; (801330c <pow+0x2c8>)
 8013182:	2000      	movs	r0, #0
 8013184:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013188:	2b02      	cmp	r3, #2
 801318a:	d19c      	bne.n	80130c6 <pow+0x82>
 801318c:	f7fd f9de 	bl	801054c <__errno>
 8013190:	2321      	movs	r3, #33	; 0x21
 8013192:	6003      	str	r3, [r0, #0]
 8013194:	e7c5      	b.n	8013122 <pow+0xde>
 8013196:	eeb0 0a48 	vmov.f32	s0, s16
 801319a:	eef0 0a68 	vmov.f32	s1, s17
 801319e:	f001 fb59 	bl	8014854 <finite>
 80131a2:	9000      	str	r0, [sp, #0]
 80131a4:	2800      	cmp	r0, #0
 80131a6:	f040 8081 	bne.w	80132ac <pow+0x268>
 80131aa:	ec47 6b10 	vmov	d0, r6, r7
 80131ae:	f001 fb51 	bl	8014854 <finite>
 80131b2:	2800      	cmp	r0, #0
 80131b4:	d07a      	beq.n	80132ac <pow+0x268>
 80131b6:	ec45 4b10 	vmov	d0, r4, r5
 80131ba:	f001 fb4b 	bl	8014854 <finite>
 80131be:	2800      	cmp	r0, #0
 80131c0:	d074      	beq.n	80132ac <pow+0x268>
 80131c2:	ec53 2b18 	vmov	r2, r3, d8
 80131c6:	ee18 0a10 	vmov	r0, s16
 80131ca:	4619      	mov	r1, r3
 80131cc:	f7ed fcae 	bl	8000b2c <__aeabi_dcmpun>
 80131d0:	f999 9000 	ldrsb.w	r9, [r9]
 80131d4:	4b4b      	ldr	r3, [pc, #300]	; (8013304 <pow+0x2c0>)
 80131d6:	b1b0      	cbz	r0, 8013206 <pow+0x1c2>
 80131d8:	2201      	movs	r2, #1
 80131da:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80131de:	9b00      	ldr	r3, [sp, #0]
 80131e0:	930a      	str	r3, [sp, #40]	; 0x28
 80131e2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80131e6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80131ea:	f1b9 0f00 	cmp.w	r9, #0
 80131ee:	d0c4      	beq.n	801317a <pow+0x136>
 80131f0:	4652      	mov	r2, sl
 80131f2:	465b      	mov	r3, fp
 80131f4:	4650      	mov	r0, sl
 80131f6:	4659      	mov	r1, fp
 80131f8:	f7ed fb28 	bl	800084c <__aeabi_ddiv>
 80131fc:	f1b9 0f02 	cmp.w	r9, #2
 8013200:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013204:	e7c1      	b.n	801318a <pow+0x146>
 8013206:	2203      	movs	r2, #3
 8013208:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801320c:	900a      	str	r0, [sp, #40]	; 0x28
 801320e:	4629      	mov	r1, r5
 8013210:	4620      	mov	r0, r4
 8013212:	2200      	movs	r2, #0
 8013214:	4b3e      	ldr	r3, [pc, #248]	; (8013310 <pow+0x2cc>)
 8013216:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801321a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801321e:	f7ed f9eb 	bl	80005f8 <__aeabi_dmul>
 8013222:	4604      	mov	r4, r0
 8013224:	460d      	mov	r5, r1
 8013226:	f1b9 0f00 	cmp.w	r9, #0
 801322a:	d124      	bne.n	8013276 <pow+0x232>
 801322c:	4b39      	ldr	r3, [pc, #228]	; (8013314 <pow+0x2d0>)
 801322e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8013232:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013236:	4630      	mov	r0, r6
 8013238:	4652      	mov	r2, sl
 801323a:	465b      	mov	r3, fp
 801323c:	4639      	mov	r1, r7
 801323e:	f7ed fc4d 	bl	8000adc <__aeabi_dcmplt>
 8013242:	2800      	cmp	r0, #0
 8013244:	d056      	beq.n	80132f4 <pow+0x2b0>
 8013246:	ec45 4b10 	vmov	d0, r4, r5
 801324a:	f001 fb15 	bl	8014878 <rint>
 801324e:	4622      	mov	r2, r4
 8013250:	462b      	mov	r3, r5
 8013252:	ec51 0b10 	vmov	r0, r1, d0
 8013256:	f7ed fc37 	bl	8000ac8 <__aeabi_dcmpeq>
 801325a:	b920      	cbnz	r0, 8013266 <pow+0x222>
 801325c:	4b2e      	ldr	r3, [pc, #184]	; (8013318 <pow+0x2d4>)
 801325e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8013262:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013266:	f998 3000 	ldrsb.w	r3, [r8]
 801326a:	2b02      	cmp	r3, #2
 801326c:	d142      	bne.n	80132f4 <pow+0x2b0>
 801326e:	f7fd f96d 	bl	801054c <__errno>
 8013272:	2322      	movs	r3, #34	; 0x22
 8013274:	e78d      	b.n	8013192 <pow+0x14e>
 8013276:	4b29      	ldr	r3, [pc, #164]	; (801331c <pow+0x2d8>)
 8013278:	2200      	movs	r2, #0
 801327a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801327e:	4630      	mov	r0, r6
 8013280:	4652      	mov	r2, sl
 8013282:	465b      	mov	r3, fp
 8013284:	4639      	mov	r1, r7
 8013286:	f7ed fc29 	bl	8000adc <__aeabi_dcmplt>
 801328a:	2800      	cmp	r0, #0
 801328c:	d0eb      	beq.n	8013266 <pow+0x222>
 801328e:	ec45 4b10 	vmov	d0, r4, r5
 8013292:	f001 faf1 	bl	8014878 <rint>
 8013296:	4622      	mov	r2, r4
 8013298:	462b      	mov	r3, r5
 801329a:	ec51 0b10 	vmov	r0, r1, d0
 801329e:	f7ed fc13 	bl	8000ac8 <__aeabi_dcmpeq>
 80132a2:	2800      	cmp	r0, #0
 80132a4:	d1df      	bne.n	8013266 <pow+0x222>
 80132a6:	2200      	movs	r2, #0
 80132a8:	4b18      	ldr	r3, [pc, #96]	; (801330c <pow+0x2c8>)
 80132aa:	e7da      	b.n	8013262 <pow+0x21e>
 80132ac:	2200      	movs	r2, #0
 80132ae:	2300      	movs	r3, #0
 80132b0:	ec51 0b18 	vmov	r0, r1, d8
 80132b4:	f7ed fc08 	bl	8000ac8 <__aeabi_dcmpeq>
 80132b8:	2800      	cmp	r0, #0
 80132ba:	f43f af3a 	beq.w	8013132 <pow+0xee>
 80132be:	ec47 6b10 	vmov	d0, r6, r7
 80132c2:	f001 fac7 	bl	8014854 <finite>
 80132c6:	2800      	cmp	r0, #0
 80132c8:	f43f af33 	beq.w	8013132 <pow+0xee>
 80132cc:	ec45 4b10 	vmov	d0, r4, r5
 80132d0:	f001 fac0 	bl	8014854 <finite>
 80132d4:	2800      	cmp	r0, #0
 80132d6:	f43f af2c 	beq.w	8013132 <pow+0xee>
 80132da:	2304      	movs	r3, #4
 80132dc:	9302      	str	r3, [sp, #8]
 80132de:	4b09      	ldr	r3, [pc, #36]	; (8013304 <pow+0x2c0>)
 80132e0:	9303      	str	r3, [sp, #12]
 80132e2:	2300      	movs	r3, #0
 80132e4:	930a      	str	r3, [sp, #40]	; 0x28
 80132e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80132ea:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80132ee:	ed8d 9b08 	vstr	d9, [sp, #32]
 80132f2:	e7b8      	b.n	8013266 <pow+0x222>
 80132f4:	a802      	add	r0, sp, #8
 80132f6:	f001 fab5 	bl	8014864 <matherr>
 80132fa:	2800      	cmp	r0, #0
 80132fc:	f47f af11 	bne.w	8013122 <pow+0xde>
 8013300:	e7b5      	b.n	801326e <pow+0x22a>
 8013302:	bf00      	nop
 8013304:	08015466 	.word	0x08015466
 8013308:	3ff00000 	.word	0x3ff00000
 801330c:	fff00000 	.word	0xfff00000
 8013310:	3fe00000 	.word	0x3fe00000
 8013314:	47efffff 	.word	0x47efffff
 8013318:	c7efffff 	.word	0xc7efffff
 801331c:	7ff00000 	.word	0x7ff00000
 8013320:	20000338 	.word	0x20000338

08013324 <sqrt>:
 8013324:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013328:	ed2d 8b02 	vpush	{d8}
 801332c:	b08b      	sub	sp, #44	; 0x2c
 801332e:	ec55 4b10 	vmov	r4, r5, d0
 8013332:	f000 ff13 	bl	801415c <__ieee754_sqrt>
 8013336:	4b26      	ldr	r3, [pc, #152]	; (80133d0 <sqrt+0xac>)
 8013338:	eeb0 8a40 	vmov.f32	s16, s0
 801333c:	eef0 8a60 	vmov.f32	s17, s1
 8013340:	f993 6000 	ldrsb.w	r6, [r3]
 8013344:	1c73      	adds	r3, r6, #1
 8013346:	d02a      	beq.n	801339e <sqrt+0x7a>
 8013348:	4622      	mov	r2, r4
 801334a:	462b      	mov	r3, r5
 801334c:	4620      	mov	r0, r4
 801334e:	4629      	mov	r1, r5
 8013350:	f7ed fbec 	bl	8000b2c <__aeabi_dcmpun>
 8013354:	4607      	mov	r7, r0
 8013356:	bb10      	cbnz	r0, 801339e <sqrt+0x7a>
 8013358:	f04f 0800 	mov.w	r8, #0
 801335c:	f04f 0900 	mov.w	r9, #0
 8013360:	4642      	mov	r2, r8
 8013362:	464b      	mov	r3, r9
 8013364:	4620      	mov	r0, r4
 8013366:	4629      	mov	r1, r5
 8013368:	f7ed fbb8 	bl	8000adc <__aeabi_dcmplt>
 801336c:	b1b8      	cbz	r0, 801339e <sqrt+0x7a>
 801336e:	2301      	movs	r3, #1
 8013370:	9300      	str	r3, [sp, #0]
 8013372:	4b18      	ldr	r3, [pc, #96]	; (80133d4 <sqrt+0xb0>)
 8013374:	9301      	str	r3, [sp, #4]
 8013376:	9708      	str	r7, [sp, #32]
 8013378:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801337c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8013380:	b9b6      	cbnz	r6, 80133b0 <sqrt+0x8c>
 8013382:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8013386:	4668      	mov	r0, sp
 8013388:	f001 fa6c 	bl	8014864 <matherr>
 801338c:	b1d0      	cbz	r0, 80133c4 <sqrt+0xa0>
 801338e:	9b08      	ldr	r3, [sp, #32]
 8013390:	b11b      	cbz	r3, 801339a <sqrt+0x76>
 8013392:	f7fd f8db 	bl	801054c <__errno>
 8013396:	9b08      	ldr	r3, [sp, #32]
 8013398:	6003      	str	r3, [r0, #0]
 801339a:	ed9d 8b06 	vldr	d8, [sp, #24]
 801339e:	eeb0 0a48 	vmov.f32	s0, s16
 80133a2:	eef0 0a68 	vmov.f32	s1, s17
 80133a6:	b00b      	add	sp, #44	; 0x2c
 80133a8:	ecbd 8b02 	vpop	{d8}
 80133ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133b0:	4642      	mov	r2, r8
 80133b2:	464b      	mov	r3, r9
 80133b4:	4640      	mov	r0, r8
 80133b6:	4649      	mov	r1, r9
 80133b8:	f7ed fa48 	bl	800084c <__aeabi_ddiv>
 80133bc:	2e02      	cmp	r6, #2
 80133be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80133c2:	d1e0      	bne.n	8013386 <sqrt+0x62>
 80133c4:	f7fd f8c2 	bl	801054c <__errno>
 80133c8:	2321      	movs	r3, #33	; 0x21
 80133ca:	6003      	str	r3, [r0, #0]
 80133cc:	e7df      	b.n	801338e <sqrt+0x6a>
 80133ce:	bf00      	nop
 80133d0:	20000338 	.word	0x20000338
 80133d4:	0801546a 	.word	0x0801546a

080133d8 <powf>:
 80133d8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80133dc:	ed2d 8b04 	vpush	{d8-d9}
 80133e0:	4ca7      	ldr	r4, [pc, #668]	; (8013680 <powf+0x2a8>)
 80133e2:	b08a      	sub	sp, #40	; 0x28
 80133e4:	eef0 8a40 	vmov.f32	s17, s0
 80133e8:	eeb0 8a60 	vmov.f32	s16, s1
 80133ec:	f000 ff66 	bl	80142bc <__ieee754_powf>
 80133f0:	f994 5000 	ldrsb.w	r5, [r4]
 80133f4:	1c6b      	adds	r3, r5, #1
 80133f6:	eeb0 9a40 	vmov.f32	s18, s0
 80133fa:	4626      	mov	r6, r4
 80133fc:	d05f      	beq.n	80134be <powf+0xe6>
 80133fe:	eeb4 8a48 	vcmp.f32	s16, s16
 8013402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013406:	d65a      	bvs.n	80134be <powf+0xe6>
 8013408:	eef4 8a68 	vcmp.f32	s17, s17
 801340c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013410:	d721      	bvc.n	8013456 <powf+0x7e>
 8013412:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8013416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801341a:	d150      	bne.n	80134be <powf+0xe6>
 801341c:	2301      	movs	r3, #1
 801341e:	9300      	str	r3, [sp, #0]
 8013420:	4b98      	ldr	r3, [pc, #608]	; (8013684 <powf+0x2ac>)
 8013422:	9301      	str	r3, [sp, #4]
 8013424:	ee18 0a90 	vmov	r0, s17
 8013428:	2300      	movs	r3, #0
 801342a:	9308      	str	r3, [sp, #32]
 801342c:	f7ed f88c 	bl	8000548 <__aeabi_f2d>
 8013430:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013434:	ee18 0a10 	vmov	r0, s16
 8013438:	f7ed f886 	bl	8000548 <__aeabi_f2d>
 801343c:	4b92      	ldr	r3, [pc, #584]	; (8013688 <powf+0x2b0>)
 801343e:	2200      	movs	r2, #0
 8013440:	2d02      	cmp	r5, #2
 8013442:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013446:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801344a:	d032      	beq.n	80134b2 <powf+0xda>
 801344c:	4668      	mov	r0, sp
 801344e:	f001 fa09 	bl	8014864 <matherr>
 8013452:	bb40      	cbnz	r0, 80134a6 <powf+0xce>
 8013454:	e065      	b.n	8013522 <powf+0x14a>
 8013456:	eddf 9a8d 	vldr	s19, [pc, #564]	; 801368c <powf+0x2b4>
 801345a:	eef4 8a69 	vcmp.f32	s17, s19
 801345e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013462:	d163      	bne.n	801352c <powf+0x154>
 8013464:	eeb4 8a69 	vcmp.f32	s16, s19
 8013468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801346c:	d12e      	bne.n	80134cc <powf+0xf4>
 801346e:	2301      	movs	r3, #1
 8013470:	9300      	str	r3, [sp, #0]
 8013472:	4b84      	ldr	r3, [pc, #528]	; (8013684 <powf+0x2ac>)
 8013474:	9301      	str	r3, [sp, #4]
 8013476:	ee18 0a90 	vmov	r0, s17
 801347a:	2300      	movs	r3, #0
 801347c:	9308      	str	r3, [sp, #32]
 801347e:	f7ed f863 	bl	8000548 <__aeabi_f2d>
 8013482:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013486:	ee18 0a10 	vmov	r0, s16
 801348a:	f7ed f85d 	bl	8000548 <__aeabi_f2d>
 801348e:	2200      	movs	r2, #0
 8013490:	2300      	movs	r3, #0
 8013492:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013496:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801349a:	2d00      	cmp	r5, #0
 801349c:	d0d6      	beq.n	801344c <powf+0x74>
 801349e:	4b7a      	ldr	r3, [pc, #488]	; (8013688 <powf+0x2b0>)
 80134a0:	2200      	movs	r2, #0
 80134a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80134a6:	9b08      	ldr	r3, [sp, #32]
 80134a8:	b11b      	cbz	r3, 80134b2 <powf+0xda>
 80134aa:	f7fd f84f 	bl	801054c <__errno>
 80134ae:	9b08      	ldr	r3, [sp, #32]
 80134b0:	6003      	str	r3, [r0, #0]
 80134b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80134b6:	f7ed fb97 	bl	8000be8 <__aeabi_d2f>
 80134ba:	ee09 0a10 	vmov	s18, r0
 80134be:	eeb0 0a49 	vmov.f32	s0, s18
 80134c2:	b00a      	add	sp, #40	; 0x28
 80134c4:	ecbd 8b04 	vpop	{d8-d9}
 80134c8:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80134cc:	eeb0 0a48 	vmov.f32	s0, s16
 80134d0:	f001 fad3 	bl	8014a7a <finitef>
 80134d4:	2800      	cmp	r0, #0
 80134d6:	d0f2      	beq.n	80134be <powf+0xe6>
 80134d8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80134dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134e0:	d5ed      	bpl.n	80134be <powf+0xe6>
 80134e2:	2301      	movs	r3, #1
 80134e4:	9300      	str	r3, [sp, #0]
 80134e6:	4b67      	ldr	r3, [pc, #412]	; (8013684 <powf+0x2ac>)
 80134e8:	9301      	str	r3, [sp, #4]
 80134ea:	ee18 0a90 	vmov	r0, s17
 80134ee:	2300      	movs	r3, #0
 80134f0:	9308      	str	r3, [sp, #32]
 80134f2:	f7ed f829 	bl	8000548 <__aeabi_f2d>
 80134f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80134fa:	ee18 0a10 	vmov	r0, s16
 80134fe:	f7ed f823 	bl	8000548 <__aeabi_f2d>
 8013502:	f994 3000 	ldrsb.w	r3, [r4]
 8013506:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801350a:	b923      	cbnz	r3, 8013516 <powf+0x13e>
 801350c:	2200      	movs	r2, #0
 801350e:	2300      	movs	r3, #0
 8013510:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013514:	e79a      	b.n	801344c <powf+0x74>
 8013516:	495e      	ldr	r1, [pc, #376]	; (8013690 <powf+0x2b8>)
 8013518:	2000      	movs	r0, #0
 801351a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801351e:	2b02      	cmp	r3, #2
 8013520:	d194      	bne.n	801344c <powf+0x74>
 8013522:	f7fd f813 	bl	801054c <__errno>
 8013526:	2321      	movs	r3, #33	; 0x21
 8013528:	6003      	str	r3, [r0, #0]
 801352a:	e7bc      	b.n	80134a6 <powf+0xce>
 801352c:	f001 faa5 	bl	8014a7a <finitef>
 8013530:	4605      	mov	r5, r0
 8013532:	2800      	cmp	r0, #0
 8013534:	d173      	bne.n	801361e <powf+0x246>
 8013536:	eeb0 0a68 	vmov.f32	s0, s17
 801353a:	f001 fa9e 	bl	8014a7a <finitef>
 801353e:	2800      	cmp	r0, #0
 8013540:	d06d      	beq.n	801361e <powf+0x246>
 8013542:	eeb0 0a48 	vmov.f32	s0, s16
 8013546:	f001 fa98 	bl	8014a7a <finitef>
 801354a:	2800      	cmp	r0, #0
 801354c:	d067      	beq.n	801361e <powf+0x246>
 801354e:	ee18 0a90 	vmov	r0, s17
 8013552:	f7ec fff9 	bl	8000548 <__aeabi_f2d>
 8013556:	4680      	mov	r8, r0
 8013558:	ee18 0a10 	vmov	r0, s16
 801355c:	4689      	mov	r9, r1
 801355e:	f7ec fff3 	bl	8000548 <__aeabi_f2d>
 8013562:	eeb4 9a49 	vcmp.f32	s18, s18
 8013566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801356a:	f994 4000 	ldrsb.w	r4, [r4]
 801356e:	4b45      	ldr	r3, [pc, #276]	; (8013684 <powf+0x2ac>)
 8013570:	d713      	bvc.n	801359a <powf+0x1c2>
 8013572:	2201      	movs	r2, #1
 8013574:	e9cd 2300 	strd	r2, r3, [sp]
 8013578:	9508      	str	r5, [sp, #32]
 801357a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801357e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013582:	2c00      	cmp	r4, #0
 8013584:	d0c2      	beq.n	801350c <powf+0x134>
 8013586:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 801358a:	ee17 0a90 	vmov	r0, s15
 801358e:	f7ec ffdb 	bl	8000548 <__aeabi_f2d>
 8013592:	2c02      	cmp	r4, #2
 8013594:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013598:	e7c2      	b.n	8013520 <powf+0x148>
 801359a:	2203      	movs	r2, #3
 801359c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80135a0:	e9cd 2300 	strd	r2, r3, [sp]
 80135a4:	9508      	str	r5, [sp, #32]
 80135a6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80135aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80135ae:	ee28 8a27 	vmul.f32	s16, s16, s15
 80135b2:	b9fc      	cbnz	r4, 80135f4 <powf+0x21c>
 80135b4:	4b37      	ldr	r3, [pc, #220]	; (8013694 <powf+0x2bc>)
 80135b6:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80135ba:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80135be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80135c6:	d553      	bpl.n	8013670 <powf+0x298>
 80135c8:	eeb0 0a48 	vmov.f32	s0, s16
 80135cc:	f001 fa60 	bl	8014a90 <rintf>
 80135d0:	eeb4 0a48 	vcmp.f32	s0, s16
 80135d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135d8:	d004      	beq.n	80135e4 <powf+0x20c>
 80135da:	4b2f      	ldr	r3, [pc, #188]	; (8013698 <powf+0x2c0>)
 80135dc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80135e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80135e4:	f996 3000 	ldrsb.w	r3, [r6]
 80135e8:	2b02      	cmp	r3, #2
 80135ea:	d141      	bne.n	8013670 <powf+0x298>
 80135ec:	f7fc ffae 	bl	801054c <__errno>
 80135f0:	2322      	movs	r3, #34	; 0x22
 80135f2:	e799      	b.n	8013528 <powf+0x150>
 80135f4:	4b29      	ldr	r3, [pc, #164]	; (801369c <powf+0x2c4>)
 80135f6:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80135fa:	2200      	movs	r2, #0
 80135fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013600:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013604:	d5ee      	bpl.n	80135e4 <powf+0x20c>
 8013606:	eeb0 0a48 	vmov.f32	s0, s16
 801360a:	f001 fa41 	bl	8014a90 <rintf>
 801360e:	eeb4 0a48 	vcmp.f32	s0, s16
 8013612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013616:	d0e5      	beq.n	80135e4 <powf+0x20c>
 8013618:	2200      	movs	r2, #0
 801361a:	4b1d      	ldr	r3, [pc, #116]	; (8013690 <powf+0x2b8>)
 801361c:	e7e0      	b.n	80135e0 <powf+0x208>
 801361e:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8013622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013626:	f47f af4a 	bne.w	80134be <powf+0xe6>
 801362a:	eeb0 0a68 	vmov.f32	s0, s17
 801362e:	f001 fa24 	bl	8014a7a <finitef>
 8013632:	2800      	cmp	r0, #0
 8013634:	f43f af43 	beq.w	80134be <powf+0xe6>
 8013638:	eeb0 0a48 	vmov.f32	s0, s16
 801363c:	f001 fa1d 	bl	8014a7a <finitef>
 8013640:	2800      	cmp	r0, #0
 8013642:	f43f af3c 	beq.w	80134be <powf+0xe6>
 8013646:	2304      	movs	r3, #4
 8013648:	9300      	str	r3, [sp, #0]
 801364a:	4b0e      	ldr	r3, [pc, #56]	; (8013684 <powf+0x2ac>)
 801364c:	9301      	str	r3, [sp, #4]
 801364e:	ee18 0a90 	vmov	r0, s17
 8013652:	2300      	movs	r3, #0
 8013654:	9308      	str	r3, [sp, #32]
 8013656:	f7ec ff77 	bl	8000548 <__aeabi_f2d>
 801365a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801365e:	ee18 0a10 	vmov	r0, s16
 8013662:	f7ec ff71 	bl	8000548 <__aeabi_f2d>
 8013666:	2200      	movs	r2, #0
 8013668:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801366c:	2300      	movs	r3, #0
 801366e:	e7b7      	b.n	80135e0 <powf+0x208>
 8013670:	4668      	mov	r0, sp
 8013672:	f001 f8f7 	bl	8014864 <matherr>
 8013676:	2800      	cmp	r0, #0
 8013678:	f47f af15 	bne.w	80134a6 <powf+0xce>
 801367c:	e7b6      	b.n	80135ec <powf+0x214>
 801367e:	bf00      	nop
 8013680:	20000338 	.word	0x20000338
 8013684:	0801546f 	.word	0x0801546f
 8013688:	3ff00000 	.word	0x3ff00000
 801368c:	00000000 	.word	0x00000000
 8013690:	fff00000 	.word	0xfff00000
 8013694:	47efffff 	.word	0x47efffff
 8013698:	c7efffff 	.word	0xc7efffff
 801369c:	7ff00000 	.word	0x7ff00000

080136a0 <sqrtf>:
 80136a0:	b510      	push	{r4, lr}
 80136a2:	ed2d 8b02 	vpush	{d8}
 80136a6:	b08a      	sub	sp, #40	; 0x28
 80136a8:	eeb0 8a40 	vmov.f32	s16, s0
 80136ac:	f001 f8c6 	bl	801483c <__ieee754_sqrtf>
 80136b0:	4b21      	ldr	r3, [pc, #132]	; (8013738 <sqrtf+0x98>)
 80136b2:	f993 4000 	ldrsb.w	r4, [r3]
 80136b6:	1c63      	adds	r3, r4, #1
 80136b8:	d02c      	beq.n	8013714 <sqrtf+0x74>
 80136ba:	eeb4 8a48 	vcmp.f32	s16, s16
 80136be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136c2:	d627      	bvs.n	8013714 <sqrtf+0x74>
 80136c4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80136c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136cc:	d522      	bpl.n	8013714 <sqrtf+0x74>
 80136ce:	2301      	movs	r3, #1
 80136d0:	9300      	str	r3, [sp, #0]
 80136d2:	4b1a      	ldr	r3, [pc, #104]	; (801373c <sqrtf+0x9c>)
 80136d4:	9301      	str	r3, [sp, #4]
 80136d6:	ee18 0a10 	vmov	r0, s16
 80136da:	2300      	movs	r3, #0
 80136dc:	9308      	str	r3, [sp, #32]
 80136de:	f7ec ff33 	bl	8000548 <__aeabi_f2d>
 80136e2:	2200      	movs	r2, #0
 80136e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80136e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80136ec:	2300      	movs	r3, #0
 80136ee:	b9ac      	cbnz	r4, 801371c <sqrtf+0x7c>
 80136f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80136f4:	4668      	mov	r0, sp
 80136f6:	f001 f8b5 	bl	8014864 <matherr>
 80136fa:	b1b8      	cbz	r0, 801372c <sqrtf+0x8c>
 80136fc:	9b08      	ldr	r3, [sp, #32]
 80136fe:	b11b      	cbz	r3, 8013708 <sqrtf+0x68>
 8013700:	f7fc ff24 	bl	801054c <__errno>
 8013704:	9b08      	ldr	r3, [sp, #32]
 8013706:	6003      	str	r3, [r0, #0]
 8013708:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801370c:	f7ed fa6c 	bl	8000be8 <__aeabi_d2f>
 8013710:	ee00 0a10 	vmov	s0, r0
 8013714:	b00a      	add	sp, #40	; 0x28
 8013716:	ecbd 8b02 	vpop	{d8}
 801371a:	bd10      	pop	{r4, pc}
 801371c:	4610      	mov	r0, r2
 801371e:	4619      	mov	r1, r3
 8013720:	f7ed f894 	bl	800084c <__aeabi_ddiv>
 8013724:	2c02      	cmp	r4, #2
 8013726:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801372a:	d1e3      	bne.n	80136f4 <sqrtf+0x54>
 801372c:	f7fc ff0e 	bl	801054c <__errno>
 8013730:	2321      	movs	r3, #33	; 0x21
 8013732:	6003      	str	r3, [r0, #0]
 8013734:	e7e2      	b.n	80136fc <sqrtf+0x5c>
 8013736:	bf00      	nop
 8013738:	20000338 	.word	0x20000338
 801373c:	08015474 	.word	0x08015474

08013740 <__ieee754_pow>:
 8013740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013744:	b091      	sub	sp, #68	; 0x44
 8013746:	ed8d 1b00 	vstr	d1, [sp]
 801374a:	e9dd 2900 	ldrd	r2, r9, [sp]
 801374e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8013752:	ea58 0302 	orrs.w	r3, r8, r2
 8013756:	ec57 6b10 	vmov	r6, r7, d0
 801375a:	f000 84be 	beq.w	80140da <__ieee754_pow+0x99a>
 801375e:	4b7a      	ldr	r3, [pc, #488]	; (8013948 <__ieee754_pow+0x208>)
 8013760:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8013764:	429c      	cmp	r4, r3
 8013766:	463d      	mov	r5, r7
 8013768:	ee10 aa10 	vmov	sl, s0
 801376c:	dc09      	bgt.n	8013782 <__ieee754_pow+0x42>
 801376e:	d103      	bne.n	8013778 <__ieee754_pow+0x38>
 8013770:	b93e      	cbnz	r6, 8013782 <__ieee754_pow+0x42>
 8013772:	45a0      	cmp	r8, r4
 8013774:	dc0d      	bgt.n	8013792 <__ieee754_pow+0x52>
 8013776:	e001      	b.n	801377c <__ieee754_pow+0x3c>
 8013778:	4598      	cmp	r8, r3
 801377a:	dc02      	bgt.n	8013782 <__ieee754_pow+0x42>
 801377c:	4598      	cmp	r8, r3
 801377e:	d10e      	bne.n	801379e <__ieee754_pow+0x5e>
 8013780:	b16a      	cbz	r2, 801379e <__ieee754_pow+0x5e>
 8013782:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013786:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801378a:	ea54 030a 	orrs.w	r3, r4, sl
 801378e:	f000 84a4 	beq.w	80140da <__ieee754_pow+0x99a>
 8013792:	486e      	ldr	r0, [pc, #440]	; (801394c <__ieee754_pow+0x20c>)
 8013794:	b011      	add	sp, #68	; 0x44
 8013796:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801379a:	f001 b865 	b.w	8014868 <nan>
 801379e:	2d00      	cmp	r5, #0
 80137a0:	da53      	bge.n	801384a <__ieee754_pow+0x10a>
 80137a2:	4b6b      	ldr	r3, [pc, #428]	; (8013950 <__ieee754_pow+0x210>)
 80137a4:	4598      	cmp	r8, r3
 80137a6:	dc4d      	bgt.n	8013844 <__ieee754_pow+0x104>
 80137a8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80137ac:	4598      	cmp	r8, r3
 80137ae:	dd4c      	ble.n	801384a <__ieee754_pow+0x10a>
 80137b0:	ea4f 5328 	mov.w	r3, r8, asr #20
 80137b4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80137b8:	2b14      	cmp	r3, #20
 80137ba:	dd26      	ble.n	801380a <__ieee754_pow+0xca>
 80137bc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80137c0:	fa22 f103 	lsr.w	r1, r2, r3
 80137c4:	fa01 f303 	lsl.w	r3, r1, r3
 80137c8:	4293      	cmp	r3, r2
 80137ca:	d13e      	bne.n	801384a <__ieee754_pow+0x10a>
 80137cc:	f001 0101 	and.w	r1, r1, #1
 80137d0:	f1c1 0b02 	rsb	fp, r1, #2
 80137d4:	2a00      	cmp	r2, #0
 80137d6:	d15b      	bne.n	8013890 <__ieee754_pow+0x150>
 80137d8:	4b5b      	ldr	r3, [pc, #364]	; (8013948 <__ieee754_pow+0x208>)
 80137da:	4598      	cmp	r8, r3
 80137dc:	d124      	bne.n	8013828 <__ieee754_pow+0xe8>
 80137de:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80137e2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80137e6:	ea53 030a 	orrs.w	r3, r3, sl
 80137ea:	f000 8476 	beq.w	80140da <__ieee754_pow+0x99a>
 80137ee:	4b59      	ldr	r3, [pc, #356]	; (8013954 <__ieee754_pow+0x214>)
 80137f0:	429c      	cmp	r4, r3
 80137f2:	dd2d      	ble.n	8013850 <__ieee754_pow+0x110>
 80137f4:	f1b9 0f00 	cmp.w	r9, #0
 80137f8:	f280 8473 	bge.w	80140e2 <__ieee754_pow+0x9a2>
 80137fc:	2000      	movs	r0, #0
 80137fe:	2100      	movs	r1, #0
 8013800:	ec41 0b10 	vmov	d0, r0, r1
 8013804:	b011      	add	sp, #68	; 0x44
 8013806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801380a:	2a00      	cmp	r2, #0
 801380c:	d13e      	bne.n	801388c <__ieee754_pow+0x14c>
 801380e:	f1c3 0314 	rsb	r3, r3, #20
 8013812:	fa48 f103 	asr.w	r1, r8, r3
 8013816:	fa01 f303 	lsl.w	r3, r1, r3
 801381a:	4543      	cmp	r3, r8
 801381c:	f040 8469 	bne.w	80140f2 <__ieee754_pow+0x9b2>
 8013820:	f001 0101 	and.w	r1, r1, #1
 8013824:	f1c1 0b02 	rsb	fp, r1, #2
 8013828:	4b4b      	ldr	r3, [pc, #300]	; (8013958 <__ieee754_pow+0x218>)
 801382a:	4598      	cmp	r8, r3
 801382c:	d118      	bne.n	8013860 <__ieee754_pow+0x120>
 801382e:	f1b9 0f00 	cmp.w	r9, #0
 8013832:	f280 845a 	bge.w	80140ea <__ieee754_pow+0x9aa>
 8013836:	4948      	ldr	r1, [pc, #288]	; (8013958 <__ieee754_pow+0x218>)
 8013838:	4632      	mov	r2, r6
 801383a:	463b      	mov	r3, r7
 801383c:	2000      	movs	r0, #0
 801383e:	f7ed f805 	bl	800084c <__aeabi_ddiv>
 8013842:	e7dd      	b.n	8013800 <__ieee754_pow+0xc0>
 8013844:	f04f 0b02 	mov.w	fp, #2
 8013848:	e7c4      	b.n	80137d4 <__ieee754_pow+0x94>
 801384a:	f04f 0b00 	mov.w	fp, #0
 801384e:	e7c1      	b.n	80137d4 <__ieee754_pow+0x94>
 8013850:	f1b9 0f00 	cmp.w	r9, #0
 8013854:	dad2      	bge.n	80137fc <__ieee754_pow+0xbc>
 8013856:	e9dd 0300 	ldrd	r0, r3, [sp]
 801385a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801385e:	e7cf      	b.n	8013800 <__ieee754_pow+0xc0>
 8013860:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8013864:	d106      	bne.n	8013874 <__ieee754_pow+0x134>
 8013866:	4632      	mov	r2, r6
 8013868:	463b      	mov	r3, r7
 801386a:	4610      	mov	r0, r2
 801386c:	4619      	mov	r1, r3
 801386e:	f7ec fec3 	bl	80005f8 <__aeabi_dmul>
 8013872:	e7c5      	b.n	8013800 <__ieee754_pow+0xc0>
 8013874:	4b39      	ldr	r3, [pc, #228]	; (801395c <__ieee754_pow+0x21c>)
 8013876:	4599      	cmp	r9, r3
 8013878:	d10a      	bne.n	8013890 <__ieee754_pow+0x150>
 801387a:	2d00      	cmp	r5, #0
 801387c:	db08      	blt.n	8013890 <__ieee754_pow+0x150>
 801387e:	ec47 6b10 	vmov	d0, r6, r7
 8013882:	b011      	add	sp, #68	; 0x44
 8013884:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013888:	f000 bc68 	b.w	801415c <__ieee754_sqrt>
 801388c:	f04f 0b00 	mov.w	fp, #0
 8013890:	ec47 6b10 	vmov	d0, r6, r7
 8013894:	f000 ffd5 	bl	8014842 <fabs>
 8013898:	ec51 0b10 	vmov	r0, r1, d0
 801389c:	f1ba 0f00 	cmp.w	sl, #0
 80138a0:	d127      	bne.n	80138f2 <__ieee754_pow+0x1b2>
 80138a2:	b124      	cbz	r4, 80138ae <__ieee754_pow+0x16e>
 80138a4:	4b2c      	ldr	r3, [pc, #176]	; (8013958 <__ieee754_pow+0x218>)
 80138a6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80138aa:	429a      	cmp	r2, r3
 80138ac:	d121      	bne.n	80138f2 <__ieee754_pow+0x1b2>
 80138ae:	f1b9 0f00 	cmp.w	r9, #0
 80138b2:	da05      	bge.n	80138c0 <__ieee754_pow+0x180>
 80138b4:	4602      	mov	r2, r0
 80138b6:	460b      	mov	r3, r1
 80138b8:	2000      	movs	r0, #0
 80138ba:	4927      	ldr	r1, [pc, #156]	; (8013958 <__ieee754_pow+0x218>)
 80138bc:	f7ec ffc6 	bl	800084c <__aeabi_ddiv>
 80138c0:	2d00      	cmp	r5, #0
 80138c2:	da9d      	bge.n	8013800 <__ieee754_pow+0xc0>
 80138c4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80138c8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80138cc:	ea54 030b 	orrs.w	r3, r4, fp
 80138d0:	d108      	bne.n	80138e4 <__ieee754_pow+0x1a4>
 80138d2:	4602      	mov	r2, r0
 80138d4:	460b      	mov	r3, r1
 80138d6:	4610      	mov	r0, r2
 80138d8:	4619      	mov	r1, r3
 80138da:	f7ec fcd5 	bl	8000288 <__aeabi_dsub>
 80138de:	4602      	mov	r2, r0
 80138e0:	460b      	mov	r3, r1
 80138e2:	e7ac      	b.n	801383e <__ieee754_pow+0xfe>
 80138e4:	f1bb 0f01 	cmp.w	fp, #1
 80138e8:	d18a      	bne.n	8013800 <__ieee754_pow+0xc0>
 80138ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80138ee:	4619      	mov	r1, r3
 80138f0:	e786      	b.n	8013800 <__ieee754_pow+0xc0>
 80138f2:	0fed      	lsrs	r5, r5, #31
 80138f4:	1e6b      	subs	r3, r5, #1
 80138f6:	930d      	str	r3, [sp, #52]	; 0x34
 80138f8:	ea5b 0303 	orrs.w	r3, fp, r3
 80138fc:	d102      	bne.n	8013904 <__ieee754_pow+0x1c4>
 80138fe:	4632      	mov	r2, r6
 8013900:	463b      	mov	r3, r7
 8013902:	e7e8      	b.n	80138d6 <__ieee754_pow+0x196>
 8013904:	4b16      	ldr	r3, [pc, #88]	; (8013960 <__ieee754_pow+0x220>)
 8013906:	4598      	cmp	r8, r3
 8013908:	f340 80fe 	ble.w	8013b08 <__ieee754_pow+0x3c8>
 801390c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8013910:	4598      	cmp	r8, r3
 8013912:	dd0a      	ble.n	801392a <__ieee754_pow+0x1ea>
 8013914:	4b0f      	ldr	r3, [pc, #60]	; (8013954 <__ieee754_pow+0x214>)
 8013916:	429c      	cmp	r4, r3
 8013918:	dc0d      	bgt.n	8013936 <__ieee754_pow+0x1f6>
 801391a:	f1b9 0f00 	cmp.w	r9, #0
 801391e:	f6bf af6d 	bge.w	80137fc <__ieee754_pow+0xbc>
 8013922:	a307      	add	r3, pc, #28	; (adr r3, 8013940 <__ieee754_pow+0x200>)
 8013924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013928:	e79f      	b.n	801386a <__ieee754_pow+0x12a>
 801392a:	4b0e      	ldr	r3, [pc, #56]	; (8013964 <__ieee754_pow+0x224>)
 801392c:	429c      	cmp	r4, r3
 801392e:	ddf4      	ble.n	801391a <__ieee754_pow+0x1da>
 8013930:	4b09      	ldr	r3, [pc, #36]	; (8013958 <__ieee754_pow+0x218>)
 8013932:	429c      	cmp	r4, r3
 8013934:	dd18      	ble.n	8013968 <__ieee754_pow+0x228>
 8013936:	f1b9 0f00 	cmp.w	r9, #0
 801393a:	dcf2      	bgt.n	8013922 <__ieee754_pow+0x1e2>
 801393c:	e75e      	b.n	80137fc <__ieee754_pow+0xbc>
 801393e:	bf00      	nop
 8013940:	8800759c 	.word	0x8800759c
 8013944:	7e37e43c 	.word	0x7e37e43c
 8013948:	7ff00000 	.word	0x7ff00000
 801394c:	08015359 	.word	0x08015359
 8013950:	433fffff 	.word	0x433fffff
 8013954:	3fefffff 	.word	0x3fefffff
 8013958:	3ff00000 	.word	0x3ff00000
 801395c:	3fe00000 	.word	0x3fe00000
 8013960:	41e00000 	.word	0x41e00000
 8013964:	3feffffe 	.word	0x3feffffe
 8013968:	2200      	movs	r2, #0
 801396a:	4b63      	ldr	r3, [pc, #396]	; (8013af8 <__ieee754_pow+0x3b8>)
 801396c:	f7ec fc8c 	bl	8000288 <__aeabi_dsub>
 8013970:	a355      	add	r3, pc, #340	; (adr r3, 8013ac8 <__ieee754_pow+0x388>)
 8013972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013976:	4604      	mov	r4, r0
 8013978:	460d      	mov	r5, r1
 801397a:	f7ec fe3d 	bl	80005f8 <__aeabi_dmul>
 801397e:	a354      	add	r3, pc, #336	; (adr r3, 8013ad0 <__ieee754_pow+0x390>)
 8013980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013984:	4606      	mov	r6, r0
 8013986:	460f      	mov	r7, r1
 8013988:	4620      	mov	r0, r4
 801398a:	4629      	mov	r1, r5
 801398c:	f7ec fe34 	bl	80005f8 <__aeabi_dmul>
 8013990:	2200      	movs	r2, #0
 8013992:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013996:	4b59      	ldr	r3, [pc, #356]	; (8013afc <__ieee754_pow+0x3bc>)
 8013998:	4620      	mov	r0, r4
 801399a:	4629      	mov	r1, r5
 801399c:	f7ec fe2c 	bl	80005f8 <__aeabi_dmul>
 80139a0:	4602      	mov	r2, r0
 80139a2:	460b      	mov	r3, r1
 80139a4:	a14c      	add	r1, pc, #304	; (adr r1, 8013ad8 <__ieee754_pow+0x398>)
 80139a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80139aa:	f7ec fc6d 	bl	8000288 <__aeabi_dsub>
 80139ae:	4622      	mov	r2, r4
 80139b0:	462b      	mov	r3, r5
 80139b2:	f7ec fe21 	bl	80005f8 <__aeabi_dmul>
 80139b6:	4602      	mov	r2, r0
 80139b8:	460b      	mov	r3, r1
 80139ba:	2000      	movs	r0, #0
 80139bc:	4950      	ldr	r1, [pc, #320]	; (8013b00 <__ieee754_pow+0x3c0>)
 80139be:	f7ec fc63 	bl	8000288 <__aeabi_dsub>
 80139c2:	4622      	mov	r2, r4
 80139c4:	462b      	mov	r3, r5
 80139c6:	4680      	mov	r8, r0
 80139c8:	4689      	mov	r9, r1
 80139ca:	4620      	mov	r0, r4
 80139cc:	4629      	mov	r1, r5
 80139ce:	f7ec fe13 	bl	80005f8 <__aeabi_dmul>
 80139d2:	4602      	mov	r2, r0
 80139d4:	460b      	mov	r3, r1
 80139d6:	4640      	mov	r0, r8
 80139d8:	4649      	mov	r1, r9
 80139da:	f7ec fe0d 	bl	80005f8 <__aeabi_dmul>
 80139de:	a340      	add	r3, pc, #256	; (adr r3, 8013ae0 <__ieee754_pow+0x3a0>)
 80139e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139e4:	f7ec fe08 	bl	80005f8 <__aeabi_dmul>
 80139e8:	4602      	mov	r2, r0
 80139ea:	460b      	mov	r3, r1
 80139ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80139f0:	f7ec fc4a 	bl	8000288 <__aeabi_dsub>
 80139f4:	4602      	mov	r2, r0
 80139f6:	460b      	mov	r3, r1
 80139f8:	4604      	mov	r4, r0
 80139fa:	460d      	mov	r5, r1
 80139fc:	4630      	mov	r0, r6
 80139fe:	4639      	mov	r1, r7
 8013a00:	f7ec fc44 	bl	800028c <__adddf3>
 8013a04:	2000      	movs	r0, #0
 8013a06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013a0a:	4632      	mov	r2, r6
 8013a0c:	463b      	mov	r3, r7
 8013a0e:	f7ec fc3b 	bl	8000288 <__aeabi_dsub>
 8013a12:	4602      	mov	r2, r0
 8013a14:	460b      	mov	r3, r1
 8013a16:	4620      	mov	r0, r4
 8013a18:	4629      	mov	r1, r5
 8013a1a:	f7ec fc35 	bl	8000288 <__aeabi_dsub>
 8013a1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013a20:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8013a24:	4313      	orrs	r3, r2
 8013a26:	4606      	mov	r6, r0
 8013a28:	460f      	mov	r7, r1
 8013a2a:	f040 81eb 	bne.w	8013e04 <__ieee754_pow+0x6c4>
 8013a2e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8013ae8 <__ieee754_pow+0x3a8>
 8013a32:	e9dd 4500 	ldrd	r4, r5, [sp]
 8013a36:	2400      	movs	r4, #0
 8013a38:	4622      	mov	r2, r4
 8013a3a:	462b      	mov	r3, r5
 8013a3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013a40:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013a44:	f7ec fc20 	bl	8000288 <__aeabi_dsub>
 8013a48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013a4c:	f7ec fdd4 	bl	80005f8 <__aeabi_dmul>
 8013a50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013a54:	4680      	mov	r8, r0
 8013a56:	4689      	mov	r9, r1
 8013a58:	4630      	mov	r0, r6
 8013a5a:	4639      	mov	r1, r7
 8013a5c:	f7ec fdcc 	bl	80005f8 <__aeabi_dmul>
 8013a60:	4602      	mov	r2, r0
 8013a62:	460b      	mov	r3, r1
 8013a64:	4640      	mov	r0, r8
 8013a66:	4649      	mov	r1, r9
 8013a68:	f7ec fc10 	bl	800028c <__adddf3>
 8013a6c:	4622      	mov	r2, r4
 8013a6e:	462b      	mov	r3, r5
 8013a70:	4680      	mov	r8, r0
 8013a72:	4689      	mov	r9, r1
 8013a74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013a78:	f7ec fdbe 	bl	80005f8 <__aeabi_dmul>
 8013a7c:	460b      	mov	r3, r1
 8013a7e:	4604      	mov	r4, r0
 8013a80:	460d      	mov	r5, r1
 8013a82:	4602      	mov	r2, r0
 8013a84:	4649      	mov	r1, r9
 8013a86:	4640      	mov	r0, r8
 8013a88:	e9cd 4500 	strd	r4, r5, [sp]
 8013a8c:	f7ec fbfe 	bl	800028c <__adddf3>
 8013a90:	4b1c      	ldr	r3, [pc, #112]	; (8013b04 <__ieee754_pow+0x3c4>)
 8013a92:	4299      	cmp	r1, r3
 8013a94:	4606      	mov	r6, r0
 8013a96:	460f      	mov	r7, r1
 8013a98:	468b      	mov	fp, r1
 8013a9a:	f340 82f7 	ble.w	801408c <__ieee754_pow+0x94c>
 8013a9e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8013aa2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8013aa6:	4303      	orrs	r3, r0
 8013aa8:	f000 81ea 	beq.w	8013e80 <__ieee754_pow+0x740>
 8013aac:	a310      	add	r3, pc, #64	; (adr r3, 8013af0 <__ieee754_pow+0x3b0>)
 8013aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ab2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013ab6:	f7ec fd9f 	bl	80005f8 <__aeabi_dmul>
 8013aba:	a30d      	add	r3, pc, #52	; (adr r3, 8013af0 <__ieee754_pow+0x3b0>)
 8013abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ac0:	e6d5      	b.n	801386e <__ieee754_pow+0x12e>
 8013ac2:	bf00      	nop
 8013ac4:	f3af 8000 	nop.w
 8013ac8:	60000000 	.word	0x60000000
 8013acc:	3ff71547 	.word	0x3ff71547
 8013ad0:	f85ddf44 	.word	0xf85ddf44
 8013ad4:	3e54ae0b 	.word	0x3e54ae0b
 8013ad8:	55555555 	.word	0x55555555
 8013adc:	3fd55555 	.word	0x3fd55555
 8013ae0:	652b82fe 	.word	0x652b82fe
 8013ae4:	3ff71547 	.word	0x3ff71547
 8013ae8:	00000000 	.word	0x00000000
 8013aec:	bff00000 	.word	0xbff00000
 8013af0:	8800759c 	.word	0x8800759c
 8013af4:	7e37e43c 	.word	0x7e37e43c
 8013af8:	3ff00000 	.word	0x3ff00000
 8013afc:	3fd00000 	.word	0x3fd00000
 8013b00:	3fe00000 	.word	0x3fe00000
 8013b04:	408fffff 	.word	0x408fffff
 8013b08:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8013b0c:	f04f 0200 	mov.w	r2, #0
 8013b10:	da05      	bge.n	8013b1e <__ieee754_pow+0x3de>
 8013b12:	4bd3      	ldr	r3, [pc, #844]	; (8013e60 <__ieee754_pow+0x720>)
 8013b14:	f7ec fd70 	bl	80005f8 <__aeabi_dmul>
 8013b18:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8013b1c:	460c      	mov	r4, r1
 8013b1e:	1523      	asrs	r3, r4, #20
 8013b20:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013b24:	4413      	add	r3, r2
 8013b26:	9309      	str	r3, [sp, #36]	; 0x24
 8013b28:	4bce      	ldr	r3, [pc, #824]	; (8013e64 <__ieee754_pow+0x724>)
 8013b2a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8013b2e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8013b32:	429c      	cmp	r4, r3
 8013b34:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8013b38:	dd08      	ble.n	8013b4c <__ieee754_pow+0x40c>
 8013b3a:	4bcb      	ldr	r3, [pc, #812]	; (8013e68 <__ieee754_pow+0x728>)
 8013b3c:	429c      	cmp	r4, r3
 8013b3e:	f340 815e 	ble.w	8013dfe <__ieee754_pow+0x6be>
 8013b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b44:	3301      	adds	r3, #1
 8013b46:	9309      	str	r3, [sp, #36]	; 0x24
 8013b48:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8013b4c:	f04f 0a00 	mov.w	sl, #0
 8013b50:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8013b54:	930c      	str	r3, [sp, #48]	; 0x30
 8013b56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013b58:	4bc4      	ldr	r3, [pc, #784]	; (8013e6c <__ieee754_pow+0x72c>)
 8013b5a:	4413      	add	r3, r2
 8013b5c:	ed93 7b00 	vldr	d7, [r3]
 8013b60:	4629      	mov	r1, r5
 8013b62:	ec53 2b17 	vmov	r2, r3, d7
 8013b66:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013b6a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013b6e:	f7ec fb8b 	bl	8000288 <__aeabi_dsub>
 8013b72:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013b76:	4606      	mov	r6, r0
 8013b78:	460f      	mov	r7, r1
 8013b7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013b7e:	f7ec fb85 	bl	800028c <__adddf3>
 8013b82:	4602      	mov	r2, r0
 8013b84:	460b      	mov	r3, r1
 8013b86:	2000      	movs	r0, #0
 8013b88:	49b9      	ldr	r1, [pc, #740]	; (8013e70 <__ieee754_pow+0x730>)
 8013b8a:	f7ec fe5f 	bl	800084c <__aeabi_ddiv>
 8013b8e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8013b92:	4602      	mov	r2, r0
 8013b94:	460b      	mov	r3, r1
 8013b96:	4630      	mov	r0, r6
 8013b98:	4639      	mov	r1, r7
 8013b9a:	f7ec fd2d 	bl	80005f8 <__aeabi_dmul>
 8013b9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013ba2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8013ba6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8013baa:	2300      	movs	r3, #0
 8013bac:	9302      	str	r3, [sp, #8]
 8013bae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8013bb2:	106d      	asrs	r5, r5, #1
 8013bb4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8013bb8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8013bbc:	2200      	movs	r2, #0
 8013bbe:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8013bc2:	4640      	mov	r0, r8
 8013bc4:	4649      	mov	r1, r9
 8013bc6:	4614      	mov	r4, r2
 8013bc8:	461d      	mov	r5, r3
 8013bca:	f7ec fd15 	bl	80005f8 <__aeabi_dmul>
 8013bce:	4602      	mov	r2, r0
 8013bd0:	460b      	mov	r3, r1
 8013bd2:	4630      	mov	r0, r6
 8013bd4:	4639      	mov	r1, r7
 8013bd6:	f7ec fb57 	bl	8000288 <__aeabi_dsub>
 8013bda:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013bde:	4606      	mov	r6, r0
 8013be0:	460f      	mov	r7, r1
 8013be2:	4620      	mov	r0, r4
 8013be4:	4629      	mov	r1, r5
 8013be6:	f7ec fb4f 	bl	8000288 <__aeabi_dsub>
 8013bea:	4602      	mov	r2, r0
 8013bec:	460b      	mov	r3, r1
 8013bee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013bf2:	f7ec fb49 	bl	8000288 <__aeabi_dsub>
 8013bf6:	4642      	mov	r2, r8
 8013bf8:	464b      	mov	r3, r9
 8013bfa:	f7ec fcfd 	bl	80005f8 <__aeabi_dmul>
 8013bfe:	4602      	mov	r2, r0
 8013c00:	460b      	mov	r3, r1
 8013c02:	4630      	mov	r0, r6
 8013c04:	4639      	mov	r1, r7
 8013c06:	f7ec fb3f 	bl	8000288 <__aeabi_dsub>
 8013c0a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8013c0e:	f7ec fcf3 	bl	80005f8 <__aeabi_dmul>
 8013c12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013c16:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013c1a:	4610      	mov	r0, r2
 8013c1c:	4619      	mov	r1, r3
 8013c1e:	f7ec fceb 	bl	80005f8 <__aeabi_dmul>
 8013c22:	a37b      	add	r3, pc, #492	; (adr r3, 8013e10 <__ieee754_pow+0x6d0>)
 8013c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c28:	4604      	mov	r4, r0
 8013c2a:	460d      	mov	r5, r1
 8013c2c:	f7ec fce4 	bl	80005f8 <__aeabi_dmul>
 8013c30:	a379      	add	r3, pc, #484	; (adr r3, 8013e18 <__ieee754_pow+0x6d8>)
 8013c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c36:	f7ec fb29 	bl	800028c <__adddf3>
 8013c3a:	4622      	mov	r2, r4
 8013c3c:	462b      	mov	r3, r5
 8013c3e:	f7ec fcdb 	bl	80005f8 <__aeabi_dmul>
 8013c42:	a377      	add	r3, pc, #476	; (adr r3, 8013e20 <__ieee754_pow+0x6e0>)
 8013c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c48:	f7ec fb20 	bl	800028c <__adddf3>
 8013c4c:	4622      	mov	r2, r4
 8013c4e:	462b      	mov	r3, r5
 8013c50:	f7ec fcd2 	bl	80005f8 <__aeabi_dmul>
 8013c54:	a374      	add	r3, pc, #464	; (adr r3, 8013e28 <__ieee754_pow+0x6e8>)
 8013c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c5a:	f7ec fb17 	bl	800028c <__adddf3>
 8013c5e:	4622      	mov	r2, r4
 8013c60:	462b      	mov	r3, r5
 8013c62:	f7ec fcc9 	bl	80005f8 <__aeabi_dmul>
 8013c66:	a372      	add	r3, pc, #456	; (adr r3, 8013e30 <__ieee754_pow+0x6f0>)
 8013c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c6c:	f7ec fb0e 	bl	800028c <__adddf3>
 8013c70:	4622      	mov	r2, r4
 8013c72:	462b      	mov	r3, r5
 8013c74:	f7ec fcc0 	bl	80005f8 <__aeabi_dmul>
 8013c78:	a36f      	add	r3, pc, #444	; (adr r3, 8013e38 <__ieee754_pow+0x6f8>)
 8013c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c7e:	f7ec fb05 	bl	800028c <__adddf3>
 8013c82:	4622      	mov	r2, r4
 8013c84:	4606      	mov	r6, r0
 8013c86:	460f      	mov	r7, r1
 8013c88:	462b      	mov	r3, r5
 8013c8a:	4620      	mov	r0, r4
 8013c8c:	4629      	mov	r1, r5
 8013c8e:	f7ec fcb3 	bl	80005f8 <__aeabi_dmul>
 8013c92:	4602      	mov	r2, r0
 8013c94:	460b      	mov	r3, r1
 8013c96:	4630      	mov	r0, r6
 8013c98:	4639      	mov	r1, r7
 8013c9a:	f7ec fcad 	bl	80005f8 <__aeabi_dmul>
 8013c9e:	4642      	mov	r2, r8
 8013ca0:	4604      	mov	r4, r0
 8013ca2:	460d      	mov	r5, r1
 8013ca4:	464b      	mov	r3, r9
 8013ca6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013caa:	f7ec faef 	bl	800028c <__adddf3>
 8013cae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013cb2:	f7ec fca1 	bl	80005f8 <__aeabi_dmul>
 8013cb6:	4622      	mov	r2, r4
 8013cb8:	462b      	mov	r3, r5
 8013cba:	f7ec fae7 	bl	800028c <__adddf3>
 8013cbe:	4642      	mov	r2, r8
 8013cc0:	4606      	mov	r6, r0
 8013cc2:	460f      	mov	r7, r1
 8013cc4:	464b      	mov	r3, r9
 8013cc6:	4640      	mov	r0, r8
 8013cc8:	4649      	mov	r1, r9
 8013cca:	f7ec fc95 	bl	80005f8 <__aeabi_dmul>
 8013cce:	2200      	movs	r2, #0
 8013cd0:	4b68      	ldr	r3, [pc, #416]	; (8013e74 <__ieee754_pow+0x734>)
 8013cd2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013cd6:	f7ec fad9 	bl	800028c <__adddf3>
 8013cda:	4632      	mov	r2, r6
 8013cdc:	463b      	mov	r3, r7
 8013cde:	f7ec fad5 	bl	800028c <__adddf3>
 8013ce2:	9802      	ldr	r0, [sp, #8]
 8013ce4:	460d      	mov	r5, r1
 8013ce6:	4604      	mov	r4, r0
 8013ce8:	4602      	mov	r2, r0
 8013cea:	460b      	mov	r3, r1
 8013cec:	4640      	mov	r0, r8
 8013cee:	4649      	mov	r1, r9
 8013cf0:	f7ec fc82 	bl	80005f8 <__aeabi_dmul>
 8013cf4:	2200      	movs	r2, #0
 8013cf6:	4680      	mov	r8, r0
 8013cf8:	4689      	mov	r9, r1
 8013cfa:	4b5e      	ldr	r3, [pc, #376]	; (8013e74 <__ieee754_pow+0x734>)
 8013cfc:	4620      	mov	r0, r4
 8013cfe:	4629      	mov	r1, r5
 8013d00:	f7ec fac2 	bl	8000288 <__aeabi_dsub>
 8013d04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013d08:	f7ec fabe 	bl	8000288 <__aeabi_dsub>
 8013d0c:	4602      	mov	r2, r0
 8013d0e:	460b      	mov	r3, r1
 8013d10:	4630      	mov	r0, r6
 8013d12:	4639      	mov	r1, r7
 8013d14:	f7ec fab8 	bl	8000288 <__aeabi_dsub>
 8013d18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013d1c:	f7ec fc6c 	bl	80005f8 <__aeabi_dmul>
 8013d20:	4622      	mov	r2, r4
 8013d22:	4606      	mov	r6, r0
 8013d24:	460f      	mov	r7, r1
 8013d26:	462b      	mov	r3, r5
 8013d28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013d2c:	f7ec fc64 	bl	80005f8 <__aeabi_dmul>
 8013d30:	4602      	mov	r2, r0
 8013d32:	460b      	mov	r3, r1
 8013d34:	4630      	mov	r0, r6
 8013d36:	4639      	mov	r1, r7
 8013d38:	f7ec faa8 	bl	800028c <__adddf3>
 8013d3c:	4606      	mov	r6, r0
 8013d3e:	460f      	mov	r7, r1
 8013d40:	4602      	mov	r2, r0
 8013d42:	460b      	mov	r3, r1
 8013d44:	4640      	mov	r0, r8
 8013d46:	4649      	mov	r1, r9
 8013d48:	f7ec faa0 	bl	800028c <__adddf3>
 8013d4c:	9802      	ldr	r0, [sp, #8]
 8013d4e:	a33c      	add	r3, pc, #240	; (adr r3, 8013e40 <__ieee754_pow+0x700>)
 8013d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d54:	4604      	mov	r4, r0
 8013d56:	460d      	mov	r5, r1
 8013d58:	f7ec fc4e 	bl	80005f8 <__aeabi_dmul>
 8013d5c:	4642      	mov	r2, r8
 8013d5e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013d62:	464b      	mov	r3, r9
 8013d64:	4620      	mov	r0, r4
 8013d66:	4629      	mov	r1, r5
 8013d68:	f7ec fa8e 	bl	8000288 <__aeabi_dsub>
 8013d6c:	4602      	mov	r2, r0
 8013d6e:	460b      	mov	r3, r1
 8013d70:	4630      	mov	r0, r6
 8013d72:	4639      	mov	r1, r7
 8013d74:	f7ec fa88 	bl	8000288 <__aeabi_dsub>
 8013d78:	a333      	add	r3, pc, #204	; (adr r3, 8013e48 <__ieee754_pow+0x708>)
 8013d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d7e:	f7ec fc3b 	bl	80005f8 <__aeabi_dmul>
 8013d82:	a333      	add	r3, pc, #204	; (adr r3, 8013e50 <__ieee754_pow+0x710>)
 8013d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d88:	4606      	mov	r6, r0
 8013d8a:	460f      	mov	r7, r1
 8013d8c:	4620      	mov	r0, r4
 8013d8e:	4629      	mov	r1, r5
 8013d90:	f7ec fc32 	bl	80005f8 <__aeabi_dmul>
 8013d94:	4602      	mov	r2, r0
 8013d96:	460b      	mov	r3, r1
 8013d98:	4630      	mov	r0, r6
 8013d9a:	4639      	mov	r1, r7
 8013d9c:	f7ec fa76 	bl	800028c <__adddf3>
 8013da0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013da2:	4b35      	ldr	r3, [pc, #212]	; (8013e78 <__ieee754_pow+0x738>)
 8013da4:	4413      	add	r3, r2
 8013da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013daa:	f7ec fa6f 	bl	800028c <__adddf3>
 8013dae:	4604      	mov	r4, r0
 8013db0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013db2:	460d      	mov	r5, r1
 8013db4:	f7ec fbb6 	bl	8000524 <__aeabi_i2d>
 8013db8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013dba:	4b30      	ldr	r3, [pc, #192]	; (8013e7c <__ieee754_pow+0x73c>)
 8013dbc:	4413      	add	r3, r2
 8013dbe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013dc2:	4606      	mov	r6, r0
 8013dc4:	460f      	mov	r7, r1
 8013dc6:	4622      	mov	r2, r4
 8013dc8:	462b      	mov	r3, r5
 8013dca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013dce:	f7ec fa5d 	bl	800028c <__adddf3>
 8013dd2:	4642      	mov	r2, r8
 8013dd4:	464b      	mov	r3, r9
 8013dd6:	f7ec fa59 	bl	800028c <__adddf3>
 8013dda:	4632      	mov	r2, r6
 8013ddc:	463b      	mov	r3, r7
 8013dde:	f7ec fa55 	bl	800028c <__adddf3>
 8013de2:	9802      	ldr	r0, [sp, #8]
 8013de4:	4632      	mov	r2, r6
 8013de6:	463b      	mov	r3, r7
 8013de8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013dec:	f7ec fa4c 	bl	8000288 <__aeabi_dsub>
 8013df0:	4642      	mov	r2, r8
 8013df2:	464b      	mov	r3, r9
 8013df4:	f7ec fa48 	bl	8000288 <__aeabi_dsub>
 8013df8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013dfc:	e607      	b.n	8013a0e <__ieee754_pow+0x2ce>
 8013dfe:	f04f 0a01 	mov.w	sl, #1
 8013e02:	e6a5      	b.n	8013b50 <__ieee754_pow+0x410>
 8013e04:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8013e58 <__ieee754_pow+0x718>
 8013e08:	e613      	b.n	8013a32 <__ieee754_pow+0x2f2>
 8013e0a:	bf00      	nop
 8013e0c:	f3af 8000 	nop.w
 8013e10:	4a454eef 	.word	0x4a454eef
 8013e14:	3fca7e28 	.word	0x3fca7e28
 8013e18:	93c9db65 	.word	0x93c9db65
 8013e1c:	3fcd864a 	.word	0x3fcd864a
 8013e20:	a91d4101 	.word	0xa91d4101
 8013e24:	3fd17460 	.word	0x3fd17460
 8013e28:	518f264d 	.word	0x518f264d
 8013e2c:	3fd55555 	.word	0x3fd55555
 8013e30:	db6fabff 	.word	0xdb6fabff
 8013e34:	3fdb6db6 	.word	0x3fdb6db6
 8013e38:	33333303 	.word	0x33333303
 8013e3c:	3fe33333 	.word	0x3fe33333
 8013e40:	e0000000 	.word	0xe0000000
 8013e44:	3feec709 	.word	0x3feec709
 8013e48:	dc3a03fd 	.word	0xdc3a03fd
 8013e4c:	3feec709 	.word	0x3feec709
 8013e50:	145b01f5 	.word	0x145b01f5
 8013e54:	be3e2fe0 	.word	0xbe3e2fe0
 8013e58:	00000000 	.word	0x00000000
 8013e5c:	3ff00000 	.word	0x3ff00000
 8013e60:	43400000 	.word	0x43400000
 8013e64:	0003988e 	.word	0x0003988e
 8013e68:	000bb679 	.word	0x000bb679
 8013e6c:	08015480 	.word	0x08015480
 8013e70:	3ff00000 	.word	0x3ff00000
 8013e74:	40080000 	.word	0x40080000
 8013e78:	080154a0 	.word	0x080154a0
 8013e7c:	08015490 	.word	0x08015490
 8013e80:	a3b4      	add	r3, pc, #720	; (adr r3, 8014154 <__ieee754_pow+0xa14>)
 8013e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e86:	4640      	mov	r0, r8
 8013e88:	4649      	mov	r1, r9
 8013e8a:	f7ec f9ff 	bl	800028c <__adddf3>
 8013e8e:	4622      	mov	r2, r4
 8013e90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013e94:	462b      	mov	r3, r5
 8013e96:	4630      	mov	r0, r6
 8013e98:	4639      	mov	r1, r7
 8013e9a:	f7ec f9f5 	bl	8000288 <__aeabi_dsub>
 8013e9e:	4602      	mov	r2, r0
 8013ea0:	460b      	mov	r3, r1
 8013ea2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013ea6:	f7ec fe37 	bl	8000b18 <__aeabi_dcmpgt>
 8013eaa:	2800      	cmp	r0, #0
 8013eac:	f47f adfe 	bne.w	8013aac <__ieee754_pow+0x36c>
 8013eb0:	4aa3      	ldr	r2, [pc, #652]	; (8014140 <__ieee754_pow+0xa00>)
 8013eb2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013eb6:	4293      	cmp	r3, r2
 8013eb8:	f340 810a 	ble.w	80140d0 <__ieee754_pow+0x990>
 8013ebc:	151b      	asrs	r3, r3, #20
 8013ebe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8013ec2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8013ec6:	fa4a f303 	asr.w	r3, sl, r3
 8013eca:	445b      	add	r3, fp
 8013ecc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8013ed0:	4e9c      	ldr	r6, [pc, #624]	; (8014144 <__ieee754_pow+0xa04>)
 8013ed2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8013ed6:	4116      	asrs	r6, r2
 8013ed8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8013edc:	2000      	movs	r0, #0
 8013ede:	ea23 0106 	bic.w	r1, r3, r6
 8013ee2:	f1c2 0214 	rsb	r2, r2, #20
 8013ee6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8013eea:	fa4a fa02 	asr.w	sl, sl, r2
 8013eee:	f1bb 0f00 	cmp.w	fp, #0
 8013ef2:	4602      	mov	r2, r0
 8013ef4:	460b      	mov	r3, r1
 8013ef6:	4620      	mov	r0, r4
 8013ef8:	4629      	mov	r1, r5
 8013efa:	bfb8      	it	lt
 8013efc:	f1ca 0a00 	rsblt	sl, sl, #0
 8013f00:	f7ec f9c2 	bl	8000288 <__aeabi_dsub>
 8013f04:	e9cd 0100 	strd	r0, r1, [sp]
 8013f08:	4642      	mov	r2, r8
 8013f0a:	464b      	mov	r3, r9
 8013f0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013f10:	f7ec f9bc 	bl	800028c <__adddf3>
 8013f14:	2000      	movs	r0, #0
 8013f16:	a378      	add	r3, pc, #480	; (adr r3, 80140f8 <__ieee754_pow+0x9b8>)
 8013f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f1c:	4604      	mov	r4, r0
 8013f1e:	460d      	mov	r5, r1
 8013f20:	f7ec fb6a 	bl	80005f8 <__aeabi_dmul>
 8013f24:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013f28:	4606      	mov	r6, r0
 8013f2a:	460f      	mov	r7, r1
 8013f2c:	4620      	mov	r0, r4
 8013f2e:	4629      	mov	r1, r5
 8013f30:	f7ec f9aa 	bl	8000288 <__aeabi_dsub>
 8013f34:	4602      	mov	r2, r0
 8013f36:	460b      	mov	r3, r1
 8013f38:	4640      	mov	r0, r8
 8013f3a:	4649      	mov	r1, r9
 8013f3c:	f7ec f9a4 	bl	8000288 <__aeabi_dsub>
 8013f40:	a36f      	add	r3, pc, #444	; (adr r3, 8014100 <__ieee754_pow+0x9c0>)
 8013f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f46:	f7ec fb57 	bl	80005f8 <__aeabi_dmul>
 8013f4a:	a36f      	add	r3, pc, #444	; (adr r3, 8014108 <__ieee754_pow+0x9c8>)
 8013f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f50:	4680      	mov	r8, r0
 8013f52:	4689      	mov	r9, r1
 8013f54:	4620      	mov	r0, r4
 8013f56:	4629      	mov	r1, r5
 8013f58:	f7ec fb4e 	bl	80005f8 <__aeabi_dmul>
 8013f5c:	4602      	mov	r2, r0
 8013f5e:	460b      	mov	r3, r1
 8013f60:	4640      	mov	r0, r8
 8013f62:	4649      	mov	r1, r9
 8013f64:	f7ec f992 	bl	800028c <__adddf3>
 8013f68:	4604      	mov	r4, r0
 8013f6a:	460d      	mov	r5, r1
 8013f6c:	4602      	mov	r2, r0
 8013f6e:	460b      	mov	r3, r1
 8013f70:	4630      	mov	r0, r6
 8013f72:	4639      	mov	r1, r7
 8013f74:	f7ec f98a 	bl	800028c <__adddf3>
 8013f78:	4632      	mov	r2, r6
 8013f7a:	463b      	mov	r3, r7
 8013f7c:	4680      	mov	r8, r0
 8013f7e:	4689      	mov	r9, r1
 8013f80:	f7ec f982 	bl	8000288 <__aeabi_dsub>
 8013f84:	4602      	mov	r2, r0
 8013f86:	460b      	mov	r3, r1
 8013f88:	4620      	mov	r0, r4
 8013f8a:	4629      	mov	r1, r5
 8013f8c:	f7ec f97c 	bl	8000288 <__aeabi_dsub>
 8013f90:	4642      	mov	r2, r8
 8013f92:	4606      	mov	r6, r0
 8013f94:	460f      	mov	r7, r1
 8013f96:	464b      	mov	r3, r9
 8013f98:	4640      	mov	r0, r8
 8013f9a:	4649      	mov	r1, r9
 8013f9c:	f7ec fb2c 	bl	80005f8 <__aeabi_dmul>
 8013fa0:	a35b      	add	r3, pc, #364	; (adr r3, 8014110 <__ieee754_pow+0x9d0>)
 8013fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fa6:	4604      	mov	r4, r0
 8013fa8:	460d      	mov	r5, r1
 8013faa:	f7ec fb25 	bl	80005f8 <__aeabi_dmul>
 8013fae:	a35a      	add	r3, pc, #360	; (adr r3, 8014118 <__ieee754_pow+0x9d8>)
 8013fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fb4:	f7ec f968 	bl	8000288 <__aeabi_dsub>
 8013fb8:	4622      	mov	r2, r4
 8013fba:	462b      	mov	r3, r5
 8013fbc:	f7ec fb1c 	bl	80005f8 <__aeabi_dmul>
 8013fc0:	a357      	add	r3, pc, #348	; (adr r3, 8014120 <__ieee754_pow+0x9e0>)
 8013fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fc6:	f7ec f961 	bl	800028c <__adddf3>
 8013fca:	4622      	mov	r2, r4
 8013fcc:	462b      	mov	r3, r5
 8013fce:	f7ec fb13 	bl	80005f8 <__aeabi_dmul>
 8013fd2:	a355      	add	r3, pc, #340	; (adr r3, 8014128 <__ieee754_pow+0x9e8>)
 8013fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fd8:	f7ec f956 	bl	8000288 <__aeabi_dsub>
 8013fdc:	4622      	mov	r2, r4
 8013fde:	462b      	mov	r3, r5
 8013fe0:	f7ec fb0a 	bl	80005f8 <__aeabi_dmul>
 8013fe4:	a352      	add	r3, pc, #328	; (adr r3, 8014130 <__ieee754_pow+0x9f0>)
 8013fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fea:	f7ec f94f 	bl	800028c <__adddf3>
 8013fee:	4622      	mov	r2, r4
 8013ff0:	462b      	mov	r3, r5
 8013ff2:	f7ec fb01 	bl	80005f8 <__aeabi_dmul>
 8013ff6:	4602      	mov	r2, r0
 8013ff8:	460b      	mov	r3, r1
 8013ffa:	4640      	mov	r0, r8
 8013ffc:	4649      	mov	r1, r9
 8013ffe:	f7ec f943 	bl	8000288 <__aeabi_dsub>
 8014002:	4604      	mov	r4, r0
 8014004:	460d      	mov	r5, r1
 8014006:	4602      	mov	r2, r0
 8014008:	460b      	mov	r3, r1
 801400a:	4640      	mov	r0, r8
 801400c:	4649      	mov	r1, r9
 801400e:	f7ec faf3 	bl	80005f8 <__aeabi_dmul>
 8014012:	2200      	movs	r2, #0
 8014014:	e9cd 0100 	strd	r0, r1, [sp]
 8014018:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801401c:	4620      	mov	r0, r4
 801401e:	4629      	mov	r1, r5
 8014020:	f7ec f932 	bl	8000288 <__aeabi_dsub>
 8014024:	4602      	mov	r2, r0
 8014026:	460b      	mov	r3, r1
 8014028:	e9dd 0100 	ldrd	r0, r1, [sp]
 801402c:	f7ec fc0e 	bl	800084c <__aeabi_ddiv>
 8014030:	4632      	mov	r2, r6
 8014032:	4604      	mov	r4, r0
 8014034:	460d      	mov	r5, r1
 8014036:	463b      	mov	r3, r7
 8014038:	4640      	mov	r0, r8
 801403a:	4649      	mov	r1, r9
 801403c:	f7ec fadc 	bl	80005f8 <__aeabi_dmul>
 8014040:	4632      	mov	r2, r6
 8014042:	463b      	mov	r3, r7
 8014044:	f7ec f922 	bl	800028c <__adddf3>
 8014048:	4602      	mov	r2, r0
 801404a:	460b      	mov	r3, r1
 801404c:	4620      	mov	r0, r4
 801404e:	4629      	mov	r1, r5
 8014050:	f7ec f91a 	bl	8000288 <__aeabi_dsub>
 8014054:	4642      	mov	r2, r8
 8014056:	464b      	mov	r3, r9
 8014058:	f7ec f916 	bl	8000288 <__aeabi_dsub>
 801405c:	4602      	mov	r2, r0
 801405e:	460b      	mov	r3, r1
 8014060:	2000      	movs	r0, #0
 8014062:	4939      	ldr	r1, [pc, #228]	; (8014148 <__ieee754_pow+0xa08>)
 8014064:	f7ec f910 	bl	8000288 <__aeabi_dsub>
 8014068:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801406c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8014070:	4602      	mov	r2, r0
 8014072:	460b      	mov	r3, r1
 8014074:	da2f      	bge.n	80140d6 <__ieee754_pow+0x996>
 8014076:	4650      	mov	r0, sl
 8014078:	ec43 2b10 	vmov	d0, r2, r3
 801407c:	f000 fc80 	bl	8014980 <scalbn>
 8014080:	ec51 0b10 	vmov	r0, r1, d0
 8014084:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014088:	f7ff bbf1 	b.w	801386e <__ieee754_pow+0x12e>
 801408c:	4b2f      	ldr	r3, [pc, #188]	; (801414c <__ieee754_pow+0xa0c>)
 801408e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8014092:	429e      	cmp	r6, r3
 8014094:	f77f af0c 	ble.w	8013eb0 <__ieee754_pow+0x770>
 8014098:	4b2d      	ldr	r3, [pc, #180]	; (8014150 <__ieee754_pow+0xa10>)
 801409a:	440b      	add	r3, r1
 801409c:	4303      	orrs	r3, r0
 801409e:	d00b      	beq.n	80140b8 <__ieee754_pow+0x978>
 80140a0:	a325      	add	r3, pc, #148	; (adr r3, 8014138 <__ieee754_pow+0x9f8>)
 80140a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80140aa:	f7ec faa5 	bl	80005f8 <__aeabi_dmul>
 80140ae:	a322      	add	r3, pc, #136	; (adr r3, 8014138 <__ieee754_pow+0x9f8>)
 80140b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140b4:	f7ff bbdb 	b.w	801386e <__ieee754_pow+0x12e>
 80140b8:	4622      	mov	r2, r4
 80140ba:	462b      	mov	r3, r5
 80140bc:	f7ec f8e4 	bl	8000288 <__aeabi_dsub>
 80140c0:	4642      	mov	r2, r8
 80140c2:	464b      	mov	r3, r9
 80140c4:	f7ec fd1e 	bl	8000b04 <__aeabi_dcmpge>
 80140c8:	2800      	cmp	r0, #0
 80140ca:	f43f aef1 	beq.w	8013eb0 <__ieee754_pow+0x770>
 80140ce:	e7e7      	b.n	80140a0 <__ieee754_pow+0x960>
 80140d0:	f04f 0a00 	mov.w	sl, #0
 80140d4:	e718      	b.n	8013f08 <__ieee754_pow+0x7c8>
 80140d6:	4621      	mov	r1, r4
 80140d8:	e7d4      	b.n	8014084 <__ieee754_pow+0x944>
 80140da:	2000      	movs	r0, #0
 80140dc:	491a      	ldr	r1, [pc, #104]	; (8014148 <__ieee754_pow+0xa08>)
 80140de:	f7ff bb8f 	b.w	8013800 <__ieee754_pow+0xc0>
 80140e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80140e6:	f7ff bb8b 	b.w	8013800 <__ieee754_pow+0xc0>
 80140ea:	4630      	mov	r0, r6
 80140ec:	4639      	mov	r1, r7
 80140ee:	f7ff bb87 	b.w	8013800 <__ieee754_pow+0xc0>
 80140f2:	4693      	mov	fp, r2
 80140f4:	f7ff bb98 	b.w	8013828 <__ieee754_pow+0xe8>
 80140f8:	00000000 	.word	0x00000000
 80140fc:	3fe62e43 	.word	0x3fe62e43
 8014100:	fefa39ef 	.word	0xfefa39ef
 8014104:	3fe62e42 	.word	0x3fe62e42
 8014108:	0ca86c39 	.word	0x0ca86c39
 801410c:	be205c61 	.word	0xbe205c61
 8014110:	72bea4d0 	.word	0x72bea4d0
 8014114:	3e663769 	.word	0x3e663769
 8014118:	c5d26bf1 	.word	0xc5d26bf1
 801411c:	3ebbbd41 	.word	0x3ebbbd41
 8014120:	af25de2c 	.word	0xaf25de2c
 8014124:	3f11566a 	.word	0x3f11566a
 8014128:	16bebd93 	.word	0x16bebd93
 801412c:	3f66c16c 	.word	0x3f66c16c
 8014130:	5555553e 	.word	0x5555553e
 8014134:	3fc55555 	.word	0x3fc55555
 8014138:	c2f8f359 	.word	0xc2f8f359
 801413c:	01a56e1f 	.word	0x01a56e1f
 8014140:	3fe00000 	.word	0x3fe00000
 8014144:	000fffff 	.word	0x000fffff
 8014148:	3ff00000 	.word	0x3ff00000
 801414c:	4090cbff 	.word	0x4090cbff
 8014150:	3f6f3400 	.word	0x3f6f3400
 8014154:	652b82fe 	.word	0x652b82fe
 8014158:	3c971547 	.word	0x3c971547

0801415c <__ieee754_sqrt>:
 801415c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014160:	4955      	ldr	r1, [pc, #340]	; (80142b8 <__ieee754_sqrt+0x15c>)
 8014162:	ec55 4b10 	vmov	r4, r5, d0
 8014166:	43a9      	bics	r1, r5
 8014168:	462b      	mov	r3, r5
 801416a:	462a      	mov	r2, r5
 801416c:	d112      	bne.n	8014194 <__ieee754_sqrt+0x38>
 801416e:	ee10 2a10 	vmov	r2, s0
 8014172:	ee10 0a10 	vmov	r0, s0
 8014176:	4629      	mov	r1, r5
 8014178:	f7ec fa3e 	bl	80005f8 <__aeabi_dmul>
 801417c:	4602      	mov	r2, r0
 801417e:	460b      	mov	r3, r1
 8014180:	4620      	mov	r0, r4
 8014182:	4629      	mov	r1, r5
 8014184:	f7ec f882 	bl	800028c <__adddf3>
 8014188:	4604      	mov	r4, r0
 801418a:	460d      	mov	r5, r1
 801418c:	ec45 4b10 	vmov	d0, r4, r5
 8014190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014194:	2d00      	cmp	r5, #0
 8014196:	ee10 0a10 	vmov	r0, s0
 801419a:	4621      	mov	r1, r4
 801419c:	dc0f      	bgt.n	80141be <__ieee754_sqrt+0x62>
 801419e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80141a2:	4330      	orrs	r0, r6
 80141a4:	d0f2      	beq.n	801418c <__ieee754_sqrt+0x30>
 80141a6:	b155      	cbz	r5, 80141be <__ieee754_sqrt+0x62>
 80141a8:	ee10 2a10 	vmov	r2, s0
 80141ac:	4620      	mov	r0, r4
 80141ae:	4629      	mov	r1, r5
 80141b0:	f7ec f86a 	bl	8000288 <__aeabi_dsub>
 80141b4:	4602      	mov	r2, r0
 80141b6:	460b      	mov	r3, r1
 80141b8:	f7ec fb48 	bl	800084c <__aeabi_ddiv>
 80141bc:	e7e4      	b.n	8014188 <__ieee754_sqrt+0x2c>
 80141be:	151b      	asrs	r3, r3, #20
 80141c0:	d073      	beq.n	80142aa <__ieee754_sqrt+0x14e>
 80141c2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80141c6:	07dd      	lsls	r5, r3, #31
 80141c8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80141cc:	bf48      	it	mi
 80141ce:	0fc8      	lsrmi	r0, r1, #31
 80141d0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80141d4:	bf44      	itt	mi
 80141d6:	0049      	lslmi	r1, r1, #1
 80141d8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80141dc:	2500      	movs	r5, #0
 80141de:	1058      	asrs	r0, r3, #1
 80141e0:	0fcb      	lsrs	r3, r1, #31
 80141e2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80141e6:	0049      	lsls	r1, r1, #1
 80141e8:	2316      	movs	r3, #22
 80141ea:	462c      	mov	r4, r5
 80141ec:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80141f0:	19a7      	adds	r7, r4, r6
 80141f2:	4297      	cmp	r7, r2
 80141f4:	bfde      	ittt	le
 80141f6:	19bc      	addle	r4, r7, r6
 80141f8:	1bd2      	suble	r2, r2, r7
 80141fa:	19ad      	addle	r5, r5, r6
 80141fc:	0fcf      	lsrs	r7, r1, #31
 80141fe:	3b01      	subs	r3, #1
 8014200:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8014204:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8014208:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801420c:	d1f0      	bne.n	80141f0 <__ieee754_sqrt+0x94>
 801420e:	f04f 0c20 	mov.w	ip, #32
 8014212:	469e      	mov	lr, r3
 8014214:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8014218:	42a2      	cmp	r2, r4
 801421a:	eb06 070e 	add.w	r7, r6, lr
 801421e:	dc02      	bgt.n	8014226 <__ieee754_sqrt+0xca>
 8014220:	d112      	bne.n	8014248 <__ieee754_sqrt+0xec>
 8014222:	428f      	cmp	r7, r1
 8014224:	d810      	bhi.n	8014248 <__ieee754_sqrt+0xec>
 8014226:	2f00      	cmp	r7, #0
 8014228:	eb07 0e06 	add.w	lr, r7, r6
 801422c:	da42      	bge.n	80142b4 <__ieee754_sqrt+0x158>
 801422e:	f1be 0f00 	cmp.w	lr, #0
 8014232:	db3f      	blt.n	80142b4 <__ieee754_sqrt+0x158>
 8014234:	f104 0801 	add.w	r8, r4, #1
 8014238:	1b12      	subs	r2, r2, r4
 801423a:	428f      	cmp	r7, r1
 801423c:	bf88      	it	hi
 801423e:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8014242:	1bc9      	subs	r1, r1, r7
 8014244:	4433      	add	r3, r6
 8014246:	4644      	mov	r4, r8
 8014248:	0052      	lsls	r2, r2, #1
 801424a:	f1bc 0c01 	subs.w	ip, ip, #1
 801424e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8014252:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8014256:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801425a:	d1dd      	bne.n	8014218 <__ieee754_sqrt+0xbc>
 801425c:	430a      	orrs	r2, r1
 801425e:	d006      	beq.n	801426e <__ieee754_sqrt+0x112>
 8014260:	1c5c      	adds	r4, r3, #1
 8014262:	bf13      	iteet	ne
 8014264:	3301      	addne	r3, #1
 8014266:	3501      	addeq	r5, #1
 8014268:	4663      	moveq	r3, ip
 801426a:	f023 0301 	bicne.w	r3, r3, #1
 801426e:	106a      	asrs	r2, r5, #1
 8014270:	085b      	lsrs	r3, r3, #1
 8014272:	07e9      	lsls	r1, r5, #31
 8014274:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8014278:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801427c:	bf48      	it	mi
 801427e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8014282:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8014286:	461c      	mov	r4, r3
 8014288:	e780      	b.n	801418c <__ieee754_sqrt+0x30>
 801428a:	0aca      	lsrs	r2, r1, #11
 801428c:	3815      	subs	r0, #21
 801428e:	0549      	lsls	r1, r1, #21
 8014290:	2a00      	cmp	r2, #0
 8014292:	d0fa      	beq.n	801428a <__ieee754_sqrt+0x12e>
 8014294:	02d6      	lsls	r6, r2, #11
 8014296:	d50a      	bpl.n	80142ae <__ieee754_sqrt+0x152>
 8014298:	f1c3 0420 	rsb	r4, r3, #32
 801429c:	fa21 f404 	lsr.w	r4, r1, r4
 80142a0:	1e5d      	subs	r5, r3, #1
 80142a2:	4099      	lsls	r1, r3
 80142a4:	4322      	orrs	r2, r4
 80142a6:	1b43      	subs	r3, r0, r5
 80142a8:	e78b      	b.n	80141c2 <__ieee754_sqrt+0x66>
 80142aa:	4618      	mov	r0, r3
 80142ac:	e7f0      	b.n	8014290 <__ieee754_sqrt+0x134>
 80142ae:	0052      	lsls	r2, r2, #1
 80142b0:	3301      	adds	r3, #1
 80142b2:	e7ef      	b.n	8014294 <__ieee754_sqrt+0x138>
 80142b4:	46a0      	mov	r8, r4
 80142b6:	e7bf      	b.n	8014238 <__ieee754_sqrt+0xdc>
 80142b8:	7ff00000 	.word	0x7ff00000

080142bc <__ieee754_powf>:
 80142bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142c0:	ee10 5a90 	vmov	r5, s1
 80142c4:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 80142c8:	ed2d 8b02 	vpush	{d8}
 80142cc:	eeb0 8a40 	vmov.f32	s16, s0
 80142d0:	eef0 8a60 	vmov.f32	s17, s1
 80142d4:	f000 8293 	beq.w	80147fe <__ieee754_powf+0x542>
 80142d8:	ee10 8a10 	vmov	r8, s0
 80142dc:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 80142e0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80142e4:	dc06      	bgt.n	80142f4 <__ieee754_powf+0x38>
 80142e6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80142ea:	dd0a      	ble.n	8014302 <__ieee754_powf+0x46>
 80142ec:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80142f0:	f000 8285 	beq.w	80147fe <__ieee754_powf+0x542>
 80142f4:	ecbd 8b02 	vpop	{d8}
 80142f8:	48d9      	ldr	r0, [pc, #868]	; (8014660 <__ieee754_powf+0x3a4>)
 80142fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80142fe:	f7fe bd99 	b.w	8012e34 <nanf>
 8014302:	f1b8 0f00 	cmp.w	r8, #0
 8014306:	da1d      	bge.n	8014344 <__ieee754_powf+0x88>
 8014308:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 801430c:	da2c      	bge.n	8014368 <__ieee754_powf+0xac>
 801430e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8014312:	db30      	blt.n	8014376 <__ieee754_powf+0xba>
 8014314:	15fb      	asrs	r3, r7, #23
 8014316:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801431a:	fa47 f603 	asr.w	r6, r7, r3
 801431e:	fa06 f303 	lsl.w	r3, r6, r3
 8014322:	42bb      	cmp	r3, r7
 8014324:	d127      	bne.n	8014376 <__ieee754_powf+0xba>
 8014326:	f006 0601 	and.w	r6, r6, #1
 801432a:	f1c6 0602 	rsb	r6, r6, #2
 801432e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8014332:	d122      	bne.n	801437a <__ieee754_powf+0xbe>
 8014334:	2d00      	cmp	r5, #0
 8014336:	f280 8268 	bge.w	801480a <__ieee754_powf+0x54e>
 801433a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801433e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8014342:	e00d      	b.n	8014360 <__ieee754_powf+0xa4>
 8014344:	2600      	movs	r6, #0
 8014346:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801434a:	d1f0      	bne.n	801432e <__ieee754_powf+0x72>
 801434c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8014350:	f000 8255 	beq.w	80147fe <__ieee754_powf+0x542>
 8014354:	dd0a      	ble.n	801436c <__ieee754_powf+0xb0>
 8014356:	2d00      	cmp	r5, #0
 8014358:	f280 8254 	bge.w	8014804 <__ieee754_powf+0x548>
 801435c:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8014664 <__ieee754_powf+0x3a8>
 8014360:	ecbd 8b02 	vpop	{d8}
 8014364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014368:	2602      	movs	r6, #2
 801436a:	e7ec      	b.n	8014346 <__ieee754_powf+0x8a>
 801436c:	2d00      	cmp	r5, #0
 801436e:	daf5      	bge.n	801435c <__ieee754_powf+0xa0>
 8014370:	eeb1 0a68 	vneg.f32	s0, s17
 8014374:	e7f4      	b.n	8014360 <__ieee754_powf+0xa4>
 8014376:	2600      	movs	r6, #0
 8014378:	e7d9      	b.n	801432e <__ieee754_powf+0x72>
 801437a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 801437e:	d102      	bne.n	8014386 <__ieee754_powf+0xca>
 8014380:	ee28 0a08 	vmul.f32	s0, s16, s16
 8014384:	e7ec      	b.n	8014360 <__ieee754_powf+0xa4>
 8014386:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 801438a:	eeb0 0a48 	vmov.f32	s0, s16
 801438e:	d108      	bne.n	80143a2 <__ieee754_powf+0xe6>
 8014390:	f1b8 0f00 	cmp.w	r8, #0
 8014394:	db05      	blt.n	80143a2 <__ieee754_powf+0xe6>
 8014396:	ecbd 8b02 	vpop	{d8}
 801439a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801439e:	f000 ba4d 	b.w	801483c <__ieee754_sqrtf>
 80143a2:	f000 fb63 	bl	8014a6c <fabsf>
 80143a6:	b124      	cbz	r4, 80143b2 <__ieee754_powf+0xf6>
 80143a8:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 80143ac:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80143b0:	d117      	bne.n	80143e2 <__ieee754_powf+0x126>
 80143b2:	2d00      	cmp	r5, #0
 80143b4:	bfbc      	itt	lt
 80143b6:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80143ba:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80143be:	f1b8 0f00 	cmp.w	r8, #0
 80143c2:	dacd      	bge.n	8014360 <__ieee754_powf+0xa4>
 80143c4:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 80143c8:	ea54 0306 	orrs.w	r3, r4, r6
 80143cc:	d104      	bne.n	80143d8 <__ieee754_powf+0x11c>
 80143ce:	ee70 7a40 	vsub.f32	s15, s0, s0
 80143d2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80143d6:	e7c3      	b.n	8014360 <__ieee754_powf+0xa4>
 80143d8:	2e01      	cmp	r6, #1
 80143da:	d1c1      	bne.n	8014360 <__ieee754_powf+0xa4>
 80143dc:	eeb1 0a40 	vneg.f32	s0, s0
 80143e0:	e7be      	b.n	8014360 <__ieee754_powf+0xa4>
 80143e2:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 80143e6:	3801      	subs	r0, #1
 80143e8:	ea56 0300 	orrs.w	r3, r6, r0
 80143ec:	d104      	bne.n	80143f8 <__ieee754_powf+0x13c>
 80143ee:	ee38 8a48 	vsub.f32	s16, s16, s16
 80143f2:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80143f6:	e7b3      	b.n	8014360 <__ieee754_powf+0xa4>
 80143f8:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 80143fc:	dd6d      	ble.n	80144da <__ieee754_powf+0x21e>
 80143fe:	4b9a      	ldr	r3, [pc, #616]	; (8014668 <__ieee754_powf+0x3ac>)
 8014400:	429c      	cmp	r4, r3
 8014402:	dc06      	bgt.n	8014412 <__ieee754_powf+0x156>
 8014404:	2d00      	cmp	r5, #0
 8014406:	daa9      	bge.n	801435c <__ieee754_powf+0xa0>
 8014408:	ed9f 0a98 	vldr	s0, [pc, #608]	; 801466c <__ieee754_powf+0x3b0>
 801440c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014410:	e7a6      	b.n	8014360 <__ieee754_powf+0xa4>
 8014412:	4b97      	ldr	r3, [pc, #604]	; (8014670 <__ieee754_powf+0x3b4>)
 8014414:	429c      	cmp	r4, r3
 8014416:	dd02      	ble.n	801441e <__ieee754_powf+0x162>
 8014418:	2d00      	cmp	r5, #0
 801441a:	dcf5      	bgt.n	8014408 <__ieee754_powf+0x14c>
 801441c:	e79e      	b.n	801435c <__ieee754_powf+0xa0>
 801441e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014422:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014426:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8014674 <__ieee754_powf+0x3b8>
 801442a:	eef1 6a40 	vneg.f32	s13, s0
 801442e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8014432:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014436:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801443a:	eee7 7a40 	vfms.f32	s15, s14, s0
 801443e:	ee60 0a00 	vmul.f32	s1, s0, s0
 8014442:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8014678 <__ieee754_powf+0x3bc>
 8014446:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801444a:	eddf 7a8c 	vldr	s15, [pc, #560]	; 801467c <__ieee754_powf+0x3c0>
 801444e:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 8014452:	eee0 7a07 	vfma.f32	s15, s0, s14
 8014456:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8014680 <__ieee754_powf+0x3c4>
 801445a:	eeb0 6a67 	vmov.f32	s12, s15
 801445e:	eea0 6a07 	vfma.f32	s12, s0, s14
 8014462:	ee16 3a10 	vmov	r3, s12
 8014466:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801446a:	f023 030f 	bic.w	r3, r3, #15
 801446e:	ee00 3a90 	vmov	s1, r3
 8014472:	eee6 0a87 	vfma.f32	s1, s13, s14
 8014476:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801447a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 801447e:	f025 050f 	bic.w	r5, r5, #15
 8014482:	ee07 5a10 	vmov	s14, r5
 8014486:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801448a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801448e:	ee07 3a90 	vmov	s15, r3
 8014492:	eee7 0a27 	vfma.f32	s1, s14, s15
 8014496:	3e01      	subs	r6, #1
 8014498:	ea56 0200 	orrs.w	r2, r6, r0
 801449c:	ee07 5a10 	vmov	s14, r5
 80144a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80144a4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80144a8:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80144ac:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80144b0:	ee17 4a10 	vmov	r4, s14
 80144b4:	bf08      	it	eq
 80144b6:	eeb0 8a40 	vmoveq.f32	s16, s0
 80144ba:	2c00      	cmp	r4, #0
 80144bc:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80144c0:	f340 8184 	ble.w	80147cc <__ieee754_powf+0x510>
 80144c4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80144c8:	f340 80fc 	ble.w	80146c4 <__ieee754_powf+0x408>
 80144cc:	eddf 7a67 	vldr	s15, [pc, #412]	; 801466c <__ieee754_powf+0x3b0>
 80144d0:	ee28 0a27 	vmul.f32	s0, s16, s15
 80144d4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80144d8:	e742      	b.n	8014360 <__ieee754_powf+0xa4>
 80144da:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 80144de:	bfbf      	itttt	lt
 80144e0:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8014684 <__ieee754_powf+0x3c8>
 80144e4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80144e8:	f06f 0217 	mvnlt.w	r2, #23
 80144ec:	ee17 4a90 	vmovlt	r4, s15
 80144f0:	ea4f 53e4 	mov.w	r3, r4, asr #23
 80144f4:	bfa8      	it	ge
 80144f6:	2200      	movge	r2, #0
 80144f8:	3b7f      	subs	r3, #127	; 0x7f
 80144fa:	4413      	add	r3, r2
 80144fc:	4a62      	ldr	r2, [pc, #392]	; (8014688 <__ieee754_powf+0x3cc>)
 80144fe:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8014502:	4294      	cmp	r4, r2
 8014504:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8014508:	dd06      	ble.n	8014518 <__ieee754_powf+0x25c>
 801450a:	4a60      	ldr	r2, [pc, #384]	; (801468c <__ieee754_powf+0x3d0>)
 801450c:	4294      	cmp	r4, r2
 801450e:	f340 80a5 	ble.w	801465c <__ieee754_powf+0x3a0>
 8014512:	3301      	adds	r3, #1
 8014514:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8014518:	2400      	movs	r4, #0
 801451a:	4a5d      	ldr	r2, [pc, #372]	; (8014690 <__ieee754_powf+0x3d4>)
 801451c:	00a7      	lsls	r7, r4, #2
 801451e:	443a      	add	r2, r7
 8014520:	ee07 1a90 	vmov	s15, r1
 8014524:	ed92 7a00 	vldr	s14, [r2]
 8014528:	4a5a      	ldr	r2, [pc, #360]	; (8014694 <__ieee754_powf+0x3d8>)
 801452a:	ee37 6a27 	vadd.f32	s12, s14, s15
 801452e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8014532:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8014536:	1049      	asrs	r1, r1, #1
 8014538:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 801453c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8014540:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8014544:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8014548:	ee06 1a10 	vmov	s12, r1
 801454c:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8014550:	ee14 ca90 	vmov	ip, s9
 8014554:	ea02 0c0c 	and.w	ip, r2, ip
 8014558:	ee05 ca10 	vmov	s10, ip
 801455c:	eeb1 4a45 	vneg.f32	s8, s10
 8014560:	eee4 5a06 	vfma.f32	s11, s8, s12
 8014564:	ee36 6a47 	vsub.f32	s12, s12, s14
 8014568:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8014698 <__ieee754_powf+0x3dc>
 801456c:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8014570:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8014574:	eee4 5a06 	vfma.f32	s11, s8, s12
 8014578:	ee67 3aa7 	vmul.f32	s7, s15, s15
 801457c:	ee25 6aa6 	vmul.f32	s12, s11, s13
 8014580:	eddf 5a46 	vldr	s11, [pc, #280]	; 801469c <__ieee754_powf+0x3e0>
 8014584:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8014588:	eddf 5a45 	vldr	s11, [pc, #276]	; 80146a0 <__ieee754_powf+0x3e4>
 801458c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8014590:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8014674 <__ieee754_powf+0x3b8>
 8014594:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8014598:	eddf 5a42 	vldr	s11, [pc, #264]	; 80146a4 <__ieee754_powf+0x3e8>
 801459c:	eee7 5a27 	vfma.f32	s11, s14, s15
 80145a0:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80146a8 <__ieee754_powf+0x3ec>
 80145a4:	ee75 6a24 	vadd.f32	s13, s10, s9
 80145a8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80145ac:	ee66 6a86 	vmul.f32	s13, s13, s12
 80145b0:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 80145b4:	eef0 7a65 	vmov.f32	s15, s11
 80145b8:	eee3 6a87 	vfma.f32	s13, s7, s14
 80145bc:	eee5 7a05 	vfma.f32	s15, s10, s10
 80145c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80145c4:	ee17 1a90 	vmov	r1, s15
 80145c8:	4011      	ands	r1, r2
 80145ca:	ee07 1a90 	vmov	s15, r1
 80145ce:	ee37 7ae5 	vsub.f32	s14, s15, s11
 80145d2:	eddf 5a36 	vldr	s11, [pc, #216]	; 80146ac <__ieee754_powf+0x3f0>
 80145d6:	eea4 7a05 	vfma.f32	s14, s8, s10
 80145da:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80145de:	ee27 7a24 	vmul.f32	s14, s14, s9
 80145e2:	eea7 7a86 	vfma.f32	s14, s15, s12
 80145e6:	eeb0 6a47 	vmov.f32	s12, s14
 80145ea:	eea5 6a27 	vfma.f32	s12, s10, s15
 80145ee:	ee16 1a10 	vmov	r1, s12
 80145f2:	4011      	ands	r1, r2
 80145f4:	ee06 1a90 	vmov	s13, r1
 80145f8:	eee4 6a27 	vfma.f32	s13, s8, s15
 80145fc:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80146b0 <__ieee754_powf+0x3f4>
 8014600:	ee37 7a66 	vsub.f32	s14, s14, s13
 8014604:	ee06 1a10 	vmov	s12, r1
 8014608:	ee27 7a27 	vmul.f32	s14, s14, s15
 801460c:	eddf 7a29 	vldr	s15, [pc, #164]	; 80146b4 <__ieee754_powf+0x3f8>
 8014610:	4929      	ldr	r1, [pc, #164]	; (80146b8 <__ieee754_powf+0x3fc>)
 8014612:	eea6 7a27 	vfma.f32	s14, s12, s15
 8014616:	4439      	add	r1, r7
 8014618:	edd1 7a00 	vldr	s15, [r1]
 801461c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014620:	ee07 3a90 	vmov	s15, r3
 8014624:	eef0 0a47 	vmov.f32	s1, s14
 8014628:	4b24      	ldr	r3, [pc, #144]	; (80146bc <__ieee754_powf+0x400>)
 801462a:	eee6 0a25 	vfma.f32	s1, s12, s11
 801462e:	443b      	add	r3, r7
 8014630:	ed93 5a00 	vldr	s10, [r3]
 8014634:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8014638:	ee70 0a85 	vadd.f32	s1, s1, s10
 801463c:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8014640:	ee17 3a90 	vmov	r3, s15
 8014644:	4013      	ands	r3, r2
 8014646:	ee07 3a90 	vmov	s15, r3
 801464a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801464e:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8014652:	eee6 7a65 	vfms.f32	s15, s12, s11
 8014656:	ee77 7a67 	vsub.f32	s15, s14, s15
 801465a:	e70e      	b.n	801447a <__ieee754_powf+0x1be>
 801465c:	2401      	movs	r4, #1
 801465e:	e75c      	b.n	801451a <__ieee754_powf+0x25e>
 8014660:	08015359 	.word	0x08015359
 8014664:	00000000 	.word	0x00000000
 8014668:	3f7ffff7 	.word	0x3f7ffff7
 801466c:	7149f2ca 	.word	0x7149f2ca
 8014670:	3f800007 	.word	0x3f800007
 8014674:	3eaaaaab 	.word	0x3eaaaaab
 8014678:	36eca570 	.word	0x36eca570
 801467c:	3fb8aa3b 	.word	0x3fb8aa3b
 8014680:	3fb8aa00 	.word	0x3fb8aa00
 8014684:	4b800000 	.word	0x4b800000
 8014688:	001cc471 	.word	0x001cc471
 801468c:	005db3d6 	.word	0x005db3d6
 8014690:	080154b0 	.word	0x080154b0
 8014694:	fffff000 	.word	0xfffff000
 8014698:	3e6c3255 	.word	0x3e6c3255
 801469c:	3e53f142 	.word	0x3e53f142
 80146a0:	3e8ba305 	.word	0x3e8ba305
 80146a4:	3edb6db7 	.word	0x3edb6db7
 80146a8:	3f19999a 	.word	0x3f19999a
 80146ac:	3f763800 	.word	0x3f763800
 80146b0:	3f76384f 	.word	0x3f76384f
 80146b4:	369dc3a0 	.word	0x369dc3a0
 80146b8:	080154c0 	.word	0x080154c0
 80146bc:	080154b8 	.word	0x080154b8
 80146c0:	3338aa3c 	.word	0x3338aa3c
 80146c4:	f040 8092 	bne.w	80147ec <__ieee754_powf+0x530>
 80146c8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80146c0 <__ieee754_powf+0x404>
 80146cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80146d0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80146d4:	eef4 6ac7 	vcmpe.f32	s13, s14
 80146d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146dc:	f73f aef6 	bgt.w	80144cc <__ieee754_powf+0x210>
 80146e0:	15db      	asrs	r3, r3, #23
 80146e2:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80146e6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80146ea:	4103      	asrs	r3, r0
 80146ec:	4423      	add	r3, r4
 80146ee:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80146f2:	4947      	ldr	r1, [pc, #284]	; (8014810 <__ieee754_powf+0x554>)
 80146f4:	3a7f      	subs	r2, #127	; 0x7f
 80146f6:	4111      	asrs	r1, r2
 80146f8:	ea23 0101 	bic.w	r1, r3, r1
 80146fc:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8014700:	ee07 1a10 	vmov	s14, r1
 8014704:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8014708:	f1c2 0217 	rsb	r2, r2, #23
 801470c:	4110      	asrs	r0, r2
 801470e:	2c00      	cmp	r4, #0
 8014710:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014714:	bfb8      	it	lt
 8014716:	4240      	neglt	r0, r0
 8014718:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801471c:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8014814 <__ieee754_powf+0x558>
 8014720:	ee17 3a10 	vmov	r3, s14
 8014724:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8014728:	f023 030f 	bic.w	r3, r3, #15
 801472c:	ee07 3a10 	vmov	s14, r3
 8014730:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014734:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8014738:	eddf 7a37 	vldr	s15, [pc, #220]	; 8014818 <__ieee754_powf+0x55c>
 801473c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014740:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8014744:	eddf 6a35 	vldr	s13, [pc, #212]	; 801481c <__ieee754_powf+0x560>
 8014748:	eeb0 0a67 	vmov.f32	s0, s15
 801474c:	eea7 0a26 	vfma.f32	s0, s14, s13
 8014750:	eeb0 6a40 	vmov.f32	s12, s0
 8014754:	eea7 6a66 	vfms.f32	s12, s14, s13
 8014758:	ee20 7a00 	vmul.f32	s14, s0, s0
 801475c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8014760:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8014820 <__ieee754_powf+0x564>
 8014764:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8014824 <__ieee754_powf+0x568>
 8014768:	eea7 6a26 	vfma.f32	s12, s14, s13
 801476c:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8014828 <__ieee754_powf+0x56c>
 8014770:	eee6 6a07 	vfma.f32	s13, s12, s14
 8014774:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 801482c <__ieee754_powf+0x570>
 8014778:	eea6 6a87 	vfma.f32	s12, s13, s14
 801477c:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8014830 <__ieee754_powf+0x574>
 8014780:	eee6 6a07 	vfma.f32	s13, s12, s14
 8014784:	eeb0 6a40 	vmov.f32	s12, s0
 8014788:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801478c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8014790:	eeb0 7a46 	vmov.f32	s14, s12
 8014794:	ee77 6a66 	vsub.f32	s13, s14, s13
 8014798:	ee20 6a06 	vmul.f32	s12, s0, s12
 801479c:	eee0 7a27 	vfma.f32	s15, s0, s15
 80147a0:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80147a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80147a8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80147ac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80147b0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80147b4:	ee10 3a10 	vmov	r3, s0
 80147b8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80147bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80147c0:	da1a      	bge.n	80147f8 <__ieee754_powf+0x53c>
 80147c2:	f000 f9bf 	bl	8014b44 <scalbnf>
 80147c6:	ee20 0a08 	vmul.f32	s0, s0, s16
 80147ca:	e5c9      	b.n	8014360 <__ieee754_powf+0xa4>
 80147cc:	4a19      	ldr	r2, [pc, #100]	; (8014834 <__ieee754_powf+0x578>)
 80147ce:	4293      	cmp	r3, r2
 80147d0:	dd02      	ble.n	80147d8 <__ieee754_powf+0x51c>
 80147d2:	eddf 7a19 	vldr	s15, [pc, #100]	; 8014838 <__ieee754_powf+0x57c>
 80147d6:	e67b      	b.n	80144d0 <__ieee754_powf+0x214>
 80147d8:	d108      	bne.n	80147ec <__ieee754_powf+0x530>
 80147da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80147de:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80147e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147e6:	f6ff af7b 	blt.w	80146e0 <__ieee754_powf+0x424>
 80147ea:	e7f2      	b.n	80147d2 <__ieee754_powf+0x516>
 80147ec:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80147f0:	f73f af76 	bgt.w	80146e0 <__ieee754_powf+0x424>
 80147f4:	2000      	movs	r0, #0
 80147f6:	e78f      	b.n	8014718 <__ieee754_powf+0x45c>
 80147f8:	ee00 3a10 	vmov	s0, r3
 80147fc:	e7e3      	b.n	80147c6 <__ieee754_powf+0x50a>
 80147fe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014802:	e5ad      	b.n	8014360 <__ieee754_powf+0xa4>
 8014804:	eeb0 0a68 	vmov.f32	s0, s17
 8014808:	e5aa      	b.n	8014360 <__ieee754_powf+0xa4>
 801480a:	eeb0 0a48 	vmov.f32	s0, s16
 801480e:	e5a7      	b.n	8014360 <__ieee754_powf+0xa4>
 8014810:	007fffff 	.word	0x007fffff
 8014814:	3f317218 	.word	0x3f317218
 8014818:	35bfbe8c 	.word	0x35bfbe8c
 801481c:	3f317200 	.word	0x3f317200
 8014820:	3331bb4c 	.word	0x3331bb4c
 8014824:	b5ddea0e 	.word	0xb5ddea0e
 8014828:	388ab355 	.word	0x388ab355
 801482c:	bb360b61 	.word	0xbb360b61
 8014830:	3e2aaaab 	.word	0x3e2aaaab
 8014834:	43160000 	.word	0x43160000
 8014838:	0da24260 	.word	0x0da24260

0801483c <__ieee754_sqrtf>:
 801483c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8014840:	4770      	bx	lr

08014842 <fabs>:
 8014842:	ec51 0b10 	vmov	r0, r1, d0
 8014846:	ee10 2a10 	vmov	r2, s0
 801484a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801484e:	ec43 2b10 	vmov	d0, r2, r3
 8014852:	4770      	bx	lr

08014854 <finite>:
 8014854:	ee10 3a90 	vmov	r3, s1
 8014858:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801485c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8014860:	0fc0      	lsrs	r0, r0, #31
 8014862:	4770      	bx	lr

08014864 <matherr>:
 8014864:	2000      	movs	r0, #0
 8014866:	4770      	bx	lr

08014868 <nan>:
 8014868:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014870 <nan+0x8>
 801486c:	4770      	bx	lr
 801486e:	bf00      	nop
 8014870:	00000000 	.word	0x00000000
 8014874:	7ff80000 	.word	0x7ff80000

08014878 <rint>:
 8014878:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801487a:	ec51 0b10 	vmov	r0, r1, d0
 801487e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014882:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8014886:	2e13      	cmp	r6, #19
 8014888:	460b      	mov	r3, r1
 801488a:	ee10 4a10 	vmov	r4, s0
 801488e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8014892:	dc56      	bgt.n	8014942 <rint+0xca>
 8014894:	2e00      	cmp	r6, #0
 8014896:	da2b      	bge.n	80148f0 <rint+0x78>
 8014898:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801489c:	4302      	orrs	r2, r0
 801489e:	d023      	beq.n	80148e8 <rint+0x70>
 80148a0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80148a4:	4302      	orrs	r2, r0
 80148a6:	4254      	negs	r4, r2
 80148a8:	4314      	orrs	r4, r2
 80148aa:	0c4b      	lsrs	r3, r1, #17
 80148ac:	0b24      	lsrs	r4, r4, #12
 80148ae:	045b      	lsls	r3, r3, #17
 80148b0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80148b4:	ea44 0103 	orr.w	r1, r4, r3
 80148b8:	460b      	mov	r3, r1
 80148ba:	492f      	ldr	r1, [pc, #188]	; (8014978 <rint+0x100>)
 80148bc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80148c0:	e9d1 6700 	ldrd	r6, r7, [r1]
 80148c4:	4602      	mov	r2, r0
 80148c6:	4639      	mov	r1, r7
 80148c8:	4630      	mov	r0, r6
 80148ca:	f7eb fcdf 	bl	800028c <__adddf3>
 80148ce:	e9cd 0100 	strd	r0, r1, [sp]
 80148d2:	463b      	mov	r3, r7
 80148d4:	4632      	mov	r2, r6
 80148d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80148da:	f7eb fcd5 	bl	8000288 <__aeabi_dsub>
 80148de:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80148e2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80148e6:	4639      	mov	r1, r7
 80148e8:	ec41 0b10 	vmov	d0, r0, r1
 80148ec:	b003      	add	sp, #12
 80148ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148f0:	4a22      	ldr	r2, [pc, #136]	; (801497c <rint+0x104>)
 80148f2:	4132      	asrs	r2, r6
 80148f4:	ea01 0702 	and.w	r7, r1, r2
 80148f8:	4307      	orrs	r7, r0
 80148fa:	d0f5      	beq.n	80148e8 <rint+0x70>
 80148fc:	0852      	lsrs	r2, r2, #1
 80148fe:	4011      	ands	r1, r2
 8014900:	430c      	orrs	r4, r1
 8014902:	d00b      	beq.n	801491c <rint+0xa4>
 8014904:	ea23 0202 	bic.w	r2, r3, r2
 8014908:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801490c:	2e13      	cmp	r6, #19
 801490e:	fa43 f306 	asr.w	r3, r3, r6
 8014912:	bf0c      	ite	eq
 8014914:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8014918:	2400      	movne	r4, #0
 801491a:	4313      	orrs	r3, r2
 801491c:	4916      	ldr	r1, [pc, #88]	; (8014978 <rint+0x100>)
 801491e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8014922:	4622      	mov	r2, r4
 8014924:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014928:	4620      	mov	r0, r4
 801492a:	4629      	mov	r1, r5
 801492c:	f7eb fcae 	bl	800028c <__adddf3>
 8014930:	e9cd 0100 	strd	r0, r1, [sp]
 8014934:	4622      	mov	r2, r4
 8014936:	462b      	mov	r3, r5
 8014938:	e9dd 0100 	ldrd	r0, r1, [sp]
 801493c:	f7eb fca4 	bl	8000288 <__aeabi_dsub>
 8014940:	e7d2      	b.n	80148e8 <rint+0x70>
 8014942:	2e33      	cmp	r6, #51	; 0x33
 8014944:	dd07      	ble.n	8014956 <rint+0xde>
 8014946:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801494a:	d1cd      	bne.n	80148e8 <rint+0x70>
 801494c:	ee10 2a10 	vmov	r2, s0
 8014950:	f7eb fc9c 	bl	800028c <__adddf3>
 8014954:	e7c8      	b.n	80148e8 <rint+0x70>
 8014956:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801495a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801495e:	40f2      	lsrs	r2, r6
 8014960:	4210      	tst	r0, r2
 8014962:	d0c1      	beq.n	80148e8 <rint+0x70>
 8014964:	0852      	lsrs	r2, r2, #1
 8014966:	4210      	tst	r0, r2
 8014968:	bf1f      	itttt	ne
 801496a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801496e:	ea20 0202 	bicne.w	r2, r0, r2
 8014972:	4134      	asrne	r4, r6
 8014974:	4314      	orrne	r4, r2
 8014976:	e7d1      	b.n	801491c <rint+0xa4>
 8014978:	080154c8 	.word	0x080154c8
 801497c:	000fffff 	.word	0x000fffff

08014980 <scalbn>:
 8014980:	b570      	push	{r4, r5, r6, lr}
 8014982:	ec55 4b10 	vmov	r4, r5, d0
 8014986:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801498a:	4606      	mov	r6, r0
 801498c:	462b      	mov	r3, r5
 801498e:	b9aa      	cbnz	r2, 80149bc <scalbn+0x3c>
 8014990:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014994:	4323      	orrs	r3, r4
 8014996:	d03b      	beq.n	8014a10 <scalbn+0x90>
 8014998:	4b31      	ldr	r3, [pc, #196]	; (8014a60 <scalbn+0xe0>)
 801499a:	4629      	mov	r1, r5
 801499c:	2200      	movs	r2, #0
 801499e:	ee10 0a10 	vmov	r0, s0
 80149a2:	f7eb fe29 	bl	80005f8 <__aeabi_dmul>
 80149a6:	4b2f      	ldr	r3, [pc, #188]	; (8014a64 <scalbn+0xe4>)
 80149a8:	429e      	cmp	r6, r3
 80149aa:	4604      	mov	r4, r0
 80149ac:	460d      	mov	r5, r1
 80149ae:	da12      	bge.n	80149d6 <scalbn+0x56>
 80149b0:	a327      	add	r3, pc, #156	; (adr r3, 8014a50 <scalbn+0xd0>)
 80149b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149b6:	f7eb fe1f 	bl	80005f8 <__aeabi_dmul>
 80149ba:	e009      	b.n	80149d0 <scalbn+0x50>
 80149bc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80149c0:	428a      	cmp	r2, r1
 80149c2:	d10c      	bne.n	80149de <scalbn+0x5e>
 80149c4:	ee10 2a10 	vmov	r2, s0
 80149c8:	4620      	mov	r0, r4
 80149ca:	4629      	mov	r1, r5
 80149cc:	f7eb fc5e 	bl	800028c <__adddf3>
 80149d0:	4604      	mov	r4, r0
 80149d2:	460d      	mov	r5, r1
 80149d4:	e01c      	b.n	8014a10 <scalbn+0x90>
 80149d6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80149da:	460b      	mov	r3, r1
 80149dc:	3a36      	subs	r2, #54	; 0x36
 80149de:	4432      	add	r2, r6
 80149e0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80149e4:	428a      	cmp	r2, r1
 80149e6:	dd0b      	ble.n	8014a00 <scalbn+0x80>
 80149e8:	ec45 4b11 	vmov	d1, r4, r5
 80149ec:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8014a58 <scalbn+0xd8>
 80149f0:	f000 f908 	bl	8014c04 <copysign>
 80149f4:	a318      	add	r3, pc, #96	; (adr r3, 8014a58 <scalbn+0xd8>)
 80149f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149fa:	ec51 0b10 	vmov	r0, r1, d0
 80149fe:	e7da      	b.n	80149b6 <scalbn+0x36>
 8014a00:	2a00      	cmp	r2, #0
 8014a02:	dd08      	ble.n	8014a16 <scalbn+0x96>
 8014a04:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014a08:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014a0c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014a10:	ec45 4b10 	vmov	d0, r4, r5
 8014a14:	bd70      	pop	{r4, r5, r6, pc}
 8014a16:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014a1a:	da0d      	bge.n	8014a38 <scalbn+0xb8>
 8014a1c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014a20:	429e      	cmp	r6, r3
 8014a22:	ec45 4b11 	vmov	d1, r4, r5
 8014a26:	dce1      	bgt.n	80149ec <scalbn+0x6c>
 8014a28:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8014a50 <scalbn+0xd0>
 8014a2c:	f000 f8ea 	bl	8014c04 <copysign>
 8014a30:	a307      	add	r3, pc, #28	; (adr r3, 8014a50 <scalbn+0xd0>)
 8014a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a36:	e7e0      	b.n	80149fa <scalbn+0x7a>
 8014a38:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014a3c:	3236      	adds	r2, #54	; 0x36
 8014a3e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014a42:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014a46:	4620      	mov	r0, r4
 8014a48:	4629      	mov	r1, r5
 8014a4a:	2200      	movs	r2, #0
 8014a4c:	4b06      	ldr	r3, [pc, #24]	; (8014a68 <scalbn+0xe8>)
 8014a4e:	e7b2      	b.n	80149b6 <scalbn+0x36>
 8014a50:	c2f8f359 	.word	0xc2f8f359
 8014a54:	01a56e1f 	.word	0x01a56e1f
 8014a58:	8800759c 	.word	0x8800759c
 8014a5c:	7e37e43c 	.word	0x7e37e43c
 8014a60:	43500000 	.word	0x43500000
 8014a64:	ffff3cb0 	.word	0xffff3cb0
 8014a68:	3c900000 	.word	0x3c900000

08014a6c <fabsf>:
 8014a6c:	ee10 3a10 	vmov	r3, s0
 8014a70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014a74:	ee00 3a10 	vmov	s0, r3
 8014a78:	4770      	bx	lr

08014a7a <finitef>:
 8014a7a:	ee10 3a10 	vmov	r3, s0
 8014a7e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8014a82:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8014a86:	bfac      	ite	ge
 8014a88:	2000      	movge	r0, #0
 8014a8a:	2001      	movlt	r0, #1
 8014a8c:	4770      	bx	lr
	...

08014a90 <rintf>:
 8014a90:	b513      	push	{r0, r1, r4, lr}
 8014a92:	ee10 1a10 	vmov	r1, s0
 8014a96:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014a9a:	0ddc      	lsrs	r4, r3, #23
 8014a9c:	3c7f      	subs	r4, #127	; 0x7f
 8014a9e:	2c16      	cmp	r4, #22
 8014aa0:	dc46      	bgt.n	8014b30 <rintf+0xa0>
 8014aa2:	b32b      	cbz	r3, 8014af0 <rintf+0x60>
 8014aa4:	2c00      	cmp	r4, #0
 8014aa6:	ee10 2a10 	vmov	r2, s0
 8014aaa:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8014aae:	da21      	bge.n	8014af4 <rintf+0x64>
 8014ab0:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8014ab4:	425b      	negs	r3, r3
 8014ab6:	4a21      	ldr	r2, [pc, #132]	; (8014b3c <rintf+0xac>)
 8014ab8:	0a5b      	lsrs	r3, r3, #9
 8014aba:	0d09      	lsrs	r1, r1, #20
 8014abc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014ac0:	0509      	lsls	r1, r1, #20
 8014ac2:	430b      	orrs	r3, r1
 8014ac4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8014ac8:	ee07 3a90 	vmov	s15, r3
 8014acc:	edd2 6a00 	vldr	s13, [r2]
 8014ad0:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8014ad4:	ed8d 7a01 	vstr	s14, [sp, #4]
 8014ad8:	eddd 7a01 	vldr	s15, [sp, #4]
 8014adc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014ae0:	ee17 3a90 	vmov	r3, s15
 8014ae4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014ae8:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8014aec:	ee00 3a10 	vmov	s0, r3
 8014af0:	b002      	add	sp, #8
 8014af2:	bd10      	pop	{r4, pc}
 8014af4:	4b12      	ldr	r3, [pc, #72]	; (8014b40 <rintf+0xb0>)
 8014af6:	4123      	asrs	r3, r4
 8014af8:	4219      	tst	r1, r3
 8014afa:	d0f9      	beq.n	8014af0 <rintf+0x60>
 8014afc:	085b      	lsrs	r3, r3, #1
 8014afe:	4219      	tst	r1, r3
 8014b00:	d006      	beq.n	8014b10 <rintf+0x80>
 8014b02:	ea21 0203 	bic.w	r2, r1, r3
 8014b06:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8014b0a:	fa43 f404 	asr.w	r4, r3, r4
 8014b0e:	4322      	orrs	r2, r4
 8014b10:	4b0a      	ldr	r3, [pc, #40]	; (8014b3c <rintf+0xac>)
 8014b12:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8014b16:	ed90 7a00 	vldr	s14, [r0]
 8014b1a:	ee07 2a90 	vmov	s15, r2
 8014b1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014b22:	edcd 7a01 	vstr	s15, [sp, #4]
 8014b26:	ed9d 0a01 	vldr	s0, [sp, #4]
 8014b2a:	ee30 0a47 	vsub.f32	s0, s0, s14
 8014b2e:	e7df      	b.n	8014af0 <rintf+0x60>
 8014b30:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014b34:	d3dc      	bcc.n	8014af0 <rintf+0x60>
 8014b36:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014b3a:	e7d9      	b.n	8014af0 <rintf+0x60>
 8014b3c:	080154d8 	.word	0x080154d8
 8014b40:	007fffff 	.word	0x007fffff

08014b44 <scalbnf>:
 8014b44:	b508      	push	{r3, lr}
 8014b46:	ee10 2a10 	vmov	r2, s0
 8014b4a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8014b4e:	ed2d 8b02 	vpush	{d8}
 8014b52:	eef0 0a40 	vmov.f32	s1, s0
 8014b56:	d004      	beq.n	8014b62 <scalbnf+0x1e>
 8014b58:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014b5c:	d306      	bcc.n	8014b6c <scalbnf+0x28>
 8014b5e:	ee70 0a00 	vadd.f32	s1, s0, s0
 8014b62:	ecbd 8b02 	vpop	{d8}
 8014b66:	eeb0 0a60 	vmov.f32	s0, s1
 8014b6a:	bd08      	pop	{r3, pc}
 8014b6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8014b70:	d21c      	bcs.n	8014bac <scalbnf+0x68>
 8014b72:	4b1f      	ldr	r3, [pc, #124]	; (8014bf0 <scalbnf+0xac>)
 8014b74:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8014bf4 <scalbnf+0xb0>
 8014b78:	4298      	cmp	r0, r3
 8014b7a:	ee60 0a27 	vmul.f32	s1, s0, s15
 8014b7e:	db10      	blt.n	8014ba2 <scalbnf+0x5e>
 8014b80:	ee10 2a90 	vmov	r2, s1
 8014b84:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8014b88:	3b19      	subs	r3, #25
 8014b8a:	4403      	add	r3, r0
 8014b8c:	2bfe      	cmp	r3, #254	; 0xfe
 8014b8e:	dd0f      	ble.n	8014bb0 <scalbnf+0x6c>
 8014b90:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8014bf8 <scalbnf+0xb4>
 8014b94:	eeb0 0a48 	vmov.f32	s0, s16
 8014b98:	f000 f843 	bl	8014c22 <copysignf>
 8014b9c:	ee60 0a08 	vmul.f32	s1, s0, s16
 8014ba0:	e7df      	b.n	8014b62 <scalbnf+0x1e>
 8014ba2:	eddf 7a16 	vldr	s15, [pc, #88]	; 8014bfc <scalbnf+0xb8>
 8014ba6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8014baa:	e7da      	b.n	8014b62 <scalbnf+0x1e>
 8014bac:	0ddb      	lsrs	r3, r3, #23
 8014bae:	e7ec      	b.n	8014b8a <scalbnf+0x46>
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	dd06      	ble.n	8014bc2 <scalbnf+0x7e>
 8014bb4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8014bb8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8014bbc:	ee00 3a90 	vmov	s1, r3
 8014bc0:	e7cf      	b.n	8014b62 <scalbnf+0x1e>
 8014bc2:	f113 0f16 	cmn.w	r3, #22
 8014bc6:	da06      	bge.n	8014bd6 <scalbnf+0x92>
 8014bc8:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014bcc:	4298      	cmp	r0, r3
 8014bce:	dcdf      	bgt.n	8014b90 <scalbnf+0x4c>
 8014bd0:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8014bfc <scalbnf+0xb8>
 8014bd4:	e7de      	b.n	8014b94 <scalbnf+0x50>
 8014bd6:	3319      	adds	r3, #25
 8014bd8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8014bdc:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8014be0:	eddf 7a07 	vldr	s15, [pc, #28]	; 8014c00 <scalbnf+0xbc>
 8014be4:	ee07 3a10 	vmov	s14, r3
 8014be8:	ee67 0a27 	vmul.f32	s1, s14, s15
 8014bec:	e7b9      	b.n	8014b62 <scalbnf+0x1e>
 8014bee:	bf00      	nop
 8014bf0:	ffff3cb0 	.word	0xffff3cb0
 8014bf4:	4c000000 	.word	0x4c000000
 8014bf8:	7149f2ca 	.word	0x7149f2ca
 8014bfc:	0da24260 	.word	0x0da24260
 8014c00:	33000000 	.word	0x33000000

08014c04 <copysign>:
 8014c04:	ec51 0b10 	vmov	r0, r1, d0
 8014c08:	ee11 0a90 	vmov	r0, s3
 8014c0c:	ee10 2a10 	vmov	r2, s0
 8014c10:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8014c14:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8014c18:	ea41 0300 	orr.w	r3, r1, r0
 8014c1c:	ec43 2b10 	vmov	d0, r2, r3
 8014c20:	4770      	bx	lr

08014c22 <copysignf>:
 8014c22:	ee10 3a10 	vmov	r3, s0
 8014c26:	ee10 2a90 	vmov	r2, s1
 8014c2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014c2e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8014c32:	4313      	orrs	r3, r2
 8014c34:	ee00 3a10 	vmov	s0, r3
 8014c38:	4770      	bx	lr
	...

08014c3c <_init>:
 8014c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c3e:	bf00      	nop
 8014c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c42:	bc08      	pop	{r3}
 8014c44:	469e      	mov	lr, r3
 8014c46:	4770      	bx	lr

08014c48 <_fini>:
 8014c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c4a:	bf00      	nop
 8014c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c4e:	bc08      	pop	{r3}
 8014c50:	469e      	mov	lr, r3
 8014c52:	4770      	bx	lr
