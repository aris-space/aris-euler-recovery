
aris-euler-recovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014ab4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000888  08014c48  08014c48  00024c48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080154d0  080154d0  0003033c  2**0
                  CONTENTS
  4 .ARM          00000008  080154d0  080154d0  000254d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080154d8  080154d8  0003033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080154d8  080154d8  000254d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080154dc  080154dc  000254dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000033c  20000000  080154e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000179e8  2000033c  0801581c  0003033c  2**2
                  ALLOC
 10 ._user_heap_stack 0000224c  20017d24  0801581c  00037d24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003033c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028c99  00000000  00000000  0003036c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005ad3  00000000  00000000  00059005  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001780  00000000  00000000  0005ead8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014b8  00000000  00000000  00060258  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027a5b  00000000  00000000  00061710  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001e21b  00000000  00000000  0008916b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c98f9  00000000  00000000  000a7386  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00170c7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070e0  00000000  00000000  00170cfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000033c 	.word	0x2000033c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014c2c 	.word	0x08014c2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000340 	.word	0x20000340
 80001cc:	08014c2c 	.word	0x08014c2c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <stay_alive>:
 */

#include "IO.h"
#include "adc.h"

void stay_alive(void){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(STAY_ALIVE_GPIO_Port, STAY_ALIVE_Pin, GPIO_PIN_SET);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2120      	movs	r1, #32
 8000f90:	4802      	ldr	r0, [pc, #8]	; (8000f9c <stay_alive+0x14>)
 8000f92:	f007 fe1b 	bl	8008bcc <HAL_GPIO_WritePin>
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40020400 	.word	0x40020400

08000fa0 <fire_HAWKs>:


void fire_HAWKs(uint8_t * armed){
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	if (*armed == 1 ) HAL_GPIO_WritePin(HAWK1_GPIO_Port, HAWK1_Pin, GPIO_PIN_SET);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d105      	bne.n	8000fbc <fire_HAWKs+0x1c>
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fb6:	4808      	ldr	r0, [pc, #32]	; (8000fd8 <fire_HAWKs+0x38>)
 8000fb8:	f007 fe08 	bl	8008bcc <HAL_GPIO_WritePin>
	if (*armed == 1 ) HAL_GPIO_WritePin(HAWK2_GPIO_Port, HAWK2_Pin, GPIO_PIN_SET);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d105      	bne.n	8000fd0 <fire_HAWKs+0x30>
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fca:	4803      	ldr	r0, [pc, #12]	; (8000fd8 <fire_HAWKs+0x38>)
 8000fcc:	f007 fdfe 	bl	8008bcc <HAL_GPIO_WritePin>
}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40021000 	.word	0x40021000

08000fdc <turn_off_HAWKs>:

void turn_off_HAWKs(void){
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HAWK1_GPIO_Port, HAWK1_Pin, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fe6:	4805      	ldr	r0, [pc, #20]	; (8000ffc <turn_off_HAWKs+0x20>)
 8000fe8:	f007 fdf0 	bl	8008bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HAWK2_GPIO_Port, HAWK2_Pin, GPIO_PIN_RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ff2:	4802      	ldr	r0, [pc, #8]	; (8000ffc <turn_off_HAWKs+0x20>)
 8000ff4:	f007 fdea 	bl	8008bcc <HAL_GPIO_WritePin>
}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40021000 	.word	0x40021000

08001000 <fire_TDs>:

void fire_TDs(uint8_t * armed){
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	if (*armed == 1 ) HAL_GPIO_WritePin(TD1_GPIO_Port, TD1_Pin, GPIO_PIN_SET);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b01      	cmp	r3, #1
 800100e:	d105      	bne.n	800101c <fire_TDs+0x1c>
 8001010:	2201      	movs	r2, #1
 8001012:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001016:	4808      	ldr	r0, [pc, #32]	; (8001038 <fire_TDs+0x38>)
 8001018:	f007 fdd8 	bl	8008bcc <HAL_GPIO_WritePin>
	if (*armed == 1 ) HAL_GPIO_WritePin(TD2_GPIO_Port, TD2_Pin, GPIO_PIN_SET);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d105      	bne.n	8001030 <fire_TDs+0x30>
 8001024:	2201      	movs	r2, #1
 8001026:	f44f 7100 	mov.w	r1, #512	; 0x200
 800102a:	4803      	ldr	r0, [pc, #12]	; (8001038 <fire_TDs+0x38>)
 800102c:	f007 fdce 	bl	8008bcc <HAL_GPIO_WritePin>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40021000 	.word	0x40021000

0800103c <turn_off_TDs>:

void turn_off_TDs(void){
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TD1_GPIO_Port, TD1_Pin, GPIO_PIN_RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <turn_off_TDs+0x20>)
 8001048:	f007 fdc0 	bl	8008bcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TD2_GPIO_Port, TD2_Pin, GPIO_PIN_RESET);
 800104c:	2200      	movs	r2, #0
 800104e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001052:	4802      	ldr	r0, [pc, #8]	; (800105c <turn_off_TDs+0x20>)
 8001054:	f007 fdba 	bl	8008bcc <HAL_GPIO_WritePin>
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40021000 	.word	0x40021000

08001060 <init_ADC>:

void init_ADC(void){
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 8001064:	4804      	ldr	r0, [pc, #16]	; (8001078 <init_ADC+0x18>)
 8001066:	f006 fbd9 	bl	800781c <HAL_ADC_Stop_DMA>
	HAL_ADC_Start_DMA(&hadc1, adc_buf, 8);
 800106a:	2208      	movs	r2, #8
 800106c:	4903      	ldr	r1, [pc, #12]	; (800107c <init_ADC+0x1c>)
 800106e:	4802      	ldr	r0, [pc, #8]	; (8001078 <init_ADC+0x18>)
 8001070:	f006 fae2 	bl	8007638 <HAL_ADC_Start_DMA>
}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20004964 	.word	0x20004964
 800107c:	20000874 	.word	0x20000874

08001080 <read_ADC>:

void read_ADC(float * out){
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]

	float vsense = 3.3 / 4096.;
 8001088:	4b89      	ldr	r3, [pc, #548]	; (80012b0 <read_ADC+0x230>)
 800108a:	60fb      	str	r3, [r7, #12]
	float scale = 16 / 3.3;
 800108c:	4b89      	ldr	r3, [pc, #548]	; (80012b4 <read_ADC+0x234>)
 800108e:	60bb      	str	r3, [r7, #8]

	out[0] = (float)adc_buf[0] * vsense * scale;
 8001090:	4b89      	ldr	r3, [pc, #548]	; (80012b8 <read_ADC+0x238>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	ee07 3a90 	vmov	s15, r3
 8001098:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800109c:	edd7 7a03 	vldr	s15, [r7, #12]
 80010a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80010a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	edc3 7a00 	vstr	s15, [r3]
	out[1] = (float)adc_buf[1] * vsense * scale;
 80010b2:	4b81      	ldr	r3, [pc, #516]	; (80012b8 <read_ADC+0x238>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	ee07 3a90 	vmov	s15, r3
 80010ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010be:	edd7 7a03 	vldr	s15, [r7, #12]
 80010c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3304      	adds	r3, #4
 80010ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80010ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010d2:	edc3 7a00 	vstr	s15, [r3]
	out[2] = (float)adc_buf[2] * vsense * scale;
 80010d6:	4b78      	ldr	r3, [pc, #480]	; (80012b8 <read_ADC+0x238>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	ee07 3a90 	vmov	s15, r3
 80010de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80010e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3308      	adds	r3, #8
 80010ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80010f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010f6:	edc3 7a00 	vstr	s15, [r3]

	out[3] = -( 1000 * (( 3.3 / 2.0 - (float)adc_buf[3] * vsense) ) / 0.066 );
 80010fa:	4b6f      	ldr	r3, [pc, #444]	; (80012b8 <read_ADC+0x238>)
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	ee07 3a90 	vmov	s15, r3
 8001102:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001106:	edd7 7a03 	vldr	s15, [r7, #12]
 800110a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800110e:	ee17 0a90 	vmov	r0, s15
 8001112:	f7ff fa19 	bl	8000548 <__aeabi_f2d>
 8001116:	4603      	mov	r3, r0
 8001118:	460c      	mov	r4, r1
 800111a:	461a      	mov	r2, r3
 800111c:	4623      	mov	r3, r4
 800111e:	a15c      	add	r1, pc, #368	; (adr r1, 8001290 <read_ADC+0x210>)
 8001120:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001124:	f7ff f8b0 	bl	8000288 <__aeabi_dsub>
 8001128:	4603      	mov	r3, r0
 800112a:	460c      	mov	r4, r1
 800112c:	4618      	mov	r0, r3
 800112e:	4621      	mov	r1, r4
 8001130:	f04f 0200 	mov.w	r2, #0
 8001134:	4b61      	ldr	r3, [pc, #388]	; (80012bc <read_ADC+0x23c>)
 8001136:	f7ff fa5f 	bl	80005f8 <__aeabi_dmul>
 800113a:	4603      	mov	r3, r0
 800113c:	460c      	mov	r4, r1
 800113e:	4618      	mov	r0, r3
 8001140:	4621      	mov	r1, r4
 8001142:	a355      	add	r3, pc, #340	; (adr r3, 8001298 <read_ADC+0x218>)
 8001144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001148:	f7ff fb80 	bl	800084c <__aeabi_ddiv>
 800114c:	4603      	mov	r3, r0
 800114e:	460c      	mov	r4, r1
 8001150:	4618      	mov	r0, r3
 8001152:	4621      	mov	r1, r4
 8001154:	f7ff fd48 	bl	8000be8 <__aeabi_d2f>
 8001158:	4602      	mov	r2, r0
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	330c      	adds	r3, #12
 800115e:	ee07 2a90 	vmov	s15, r2
 8001162:	eef1 7a67 	vneg.f32	s15, s15
 8001166:	edc3 7a00 	vstr	s15, [r3]
	out[4] = -( 1000 * (( 3.3 / 2.0 - (float)adc_buf[4] * vsense) ) / 0.066 );
 800116a:	4b53      	ldr	r3, [pc, #332]	; (80012b8 <read_ADC+0x238>)
 800116c:	691b      	ldr	r3, [r3, #16]
 800116e:	ee07 3a90 	vmov	s15, r3
 8001172:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001176:	edd7 7a03 	vldr	s15, [r7, #12]
 800117a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800117e:	ee17 0a90 	vmov	r0, s15
 8001182:	f7ff f9e1 	bl	8000548 <__aeabi_f2d>
 8001186:	4603      	mov	r3, r0
 8001188:	460c      	mov	r4, r1
 800118a:	461a      	mov	r2, r3
 800118c:	4623      	mov	r3, r4
 800118e:	a140      	add	r1, pc, #256	; (adr r1, 8001290 <read_ADC+0x210>)
 8001190:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001194:	f7ff f878 	bl	8000288 <__aeabi_dsub>
 8001198:	4603      	mov	r3, r0
 800119a:	460c      	mov	r4, r1
 800119c:	4618      	mov	r0, r3
 800119e:	4621      	mov	r1, r4
 80011a0:	f04f 0200 	mov.w	r2, #0
 80011a4:	4b45      	ldr	r3, [pc, #276]	; (80012bc <read_ADC+0x23c>)
 80011a6:	f7ff fa27 	bl	80005f8 <__aeabi_dmul>
 80011aa:	4603      	mov	r3, r0
 80011ac:	460c      	mov	r4, r1
 80011ae:	4618      	mov	r0, r3
 80011b0:	4621      	mov	r1, r4
 80011b2:	a339      	add	r3, pc, #228	; (adr r3, 8001298 <read_ADC+0x218>)
 80011b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b8:	f7ff fb48 	bl	800084c <__aeabi_ddiv>
 80011bc:	4603      	mov	r3, r0
 80011be:	460c      	mov	r4, r1
 80011c0:	4618      	mov	r0, r3
 80011c2:	4621      	mov	r1, r4
 80011c4:	f7ff fd10 	bl	8000be8 <__aeabi_d2f>
 80011c8:	4602      	mov	r2, r0
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3310      	adds	r3, #16
 80011ce:	ee07 2a90 	vmov	s15, r2
 80011d2:	eef1 7a67 	vneg.f32	s15, s15
 80011d6:	edc3 7a00 	vstr	s15, [r3]

	out[5] = (float)adc_buf[5] * vsense * scale;
 80011da:	4b37      	ldr	r3, [pc, #220]	; (80012b8 <read_ADC+0x238>)
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	ee07 3a90 	vmov	s15, r3
 80011e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80011ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	3314      	adds	r3, #20
 80011f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80011f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011fa:	edc3 7a00 	vstr	s15, [r3]
	out[6] = (float)adc_buf[6] * vsense * scale;
 80011fe:	4b2e      	ldr	r3, [pc, #184]	; (80012b8 <read_ADC+0x238>)
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	ee07 3a90 	vmov	s15, r3
 8001206:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800120a:	edd7 7a03 	vldr	s15, [r7, #12]
 800120e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3318      	adds	r3, #24
 8001216:	edd7 7a02 	vldr	s15, [r7, #8]
 800121a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800121e:	edc3 7a00 	vstr	s15, [r3]

	out[7] = ((((float)adc_buf[7] * vsense) - 0.76) / 0.0025) + 25.0;
 8001222:	4b25      	ldr	r3, [pc, #148]	; (80012b8 <read_ADC+0x238>)
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	ee07 3a90 	vmov	s15, r3
 800122a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800122e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001236:	ee17 0a90 	vmov	r0, s15
 800123a:	f7ff f985 	bl	8000548 <__aeabi_f2d>
 800123e:	a318      	add	r3, pc, #96	; (adr r3, 80012a0 <read_ADC+0x220>)
 8001240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001244:	f7ff f820 	bl	8000288 <__aeabi_dsub>
 8001248:	4603      	mov	r3, r0
 800124a:	460c      	mov	r4, r1
 800124c:	4618      	mov	r0, r3
 800124e:	4621      	mov	r1, r4
 8001250:	a315      	add	r3, pc, #84	; (adr r3, 80012a8 <read_ADC+0x228>)
 8001252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001256:	f7ff faf9 	bl	800084c <__aeabi_ddiv>
 800125a:	4603      	mov	r3, r0
 800125c:	460c      	mov	r4, r1
 800125e:	4618      	mov	r0, r3
 8001260:	4621      	mov	r1, r4
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <read_ADC+0x240>)
 8001268:	f7ff f810 	bl	800028c <__adddf3>
 800126c:	4603      	mov	r3, r0
 800126e:	460c      	mov	r4, r1
 8001270:	4619      	mov	r1, r3
 8001272:	4622      	mov	r2, r4
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f103 041c 	add.w	r4, r3, #28
 800127a:	4608      	mov	r0, r1
 800127c:	4611      	mov	r1, r2
 800127e:	f7ff fcb3 	bl	8000be8 <__aeabi_d2f>
 8001282:	4603      	mov	r3, r0
 8001284:	6023      	str	r3, [r4, #0]

}
 8001286:	bf00      	nop
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	bd90      	pop	{r4, r7, pc}
 800128e:	bf00      	nop
 8001290:	66666666 	.word	0x66666666
 8001294:	3ffa6666 	.word	0x3ffa6666
 8001298:	4189374c 	.word	0x4189374c
 800129c:	3fb0e560 	.word	0x3fb0e560
 80012a0:	851eb852 	.word	0x851eb852
 80012a4:	3fe851eb 	.word	0x3fe851eb
 80012a8:	47ae147b 	.word	0x47ae147b
 80012ac:	3f647ae1 	.word	0x3f647ae1
 80012b0:	3a533333 	.word	0x3a533333
 80012b4:	409b26ca 	.word	0x409b26ca
 80012b8:	20000874 	.word	0x20000874
 80012bc:	408f4000 	.word	0x408f4000
 80012c0:	40390000 	.word	0x40390000

080012c4 <bufclear>:
	return i;
}


void bufclear (char * buffer)  // clear buffer
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	for (int i=0; i<BUFLEN; i++)
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	e007      	b.n	80012e2 <bufclear+0x1e>
	{
		buffer[i] = '\0';
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	687a      	ldr	r2, [r7, #4]
 80012d6:	4413      	add	r3, r2
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<BUFLEN; i++)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	3301      	adds	r3, #1
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012e8:	dbf3      	blt.n	80012d2 <bufclear+0xe>
	}
}
 80012ea:	bf00      	nop
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <init_sd>:
		}
	return 0;
}


uint8_t init_sd(uint16_t * file_count, uint16_t * log_count){
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	b09d      	sub	sp, #116	; 0x74
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
	uint32_t total, free_space;
#if DEBUG_PRINT == 1
	printf("mounting SD card...\n");
#endif

	FRESULT ret = f_mount(&fs, SDPath, 1);
 8001302:	2201      	movs	r2, #1
 8001304:	4955      	ldr	r1, [pc, #340]	; (800145c <init_sd+0x164>)
 8001306:	4856      	ldr	r0, [pc, #344]	; (8001460 <init_sd+0x168>)
 8001308:	f00e f848 	bl	800f39c <f_mount>
 800130c:	4603      	mov	r3, r0
 800130e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	if (ret == FR_OK)
 8001312:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <init_sd+0x26>
	} else {
#if DEBUG_PRINT == 1
	  printf("no SD connection established\n");
	  printf("error: %d\n",ret);
#endif
	  return 0;
 800131a:	2300      	movs	r3, #0
 800131c:	e09a      	b.n	8001454 <init_sd+0x15c>
	}

	/* Check free space */
	f_getfree(SDPath, &fre_clust, &pfs);
 800131e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001322:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001326:	4619      	mov	r1, r3
 8001328:	484c      	ldr	r0, [pc, #304]	; (800145c <init_sd+0x164>)
 800132a:	f00e ff59 	bl	80101e0 <f_getfree>

	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 800132e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	3b02      	subs	r3, #2
 8001334:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001336:	8952      	ldrh	r2, [r2, #10]
 8001338:	fb02 f303 	mul.w	r3, r2, r3
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff f8e1 	bl	8000504 <__aeabi_ui2d>
 8001342:	f04f 0200 	mov.w	r2, #0
 8001346:	4b47      	ldr	r3, [pc, #284]	; (8001464 <init_sd+0x16c>)
 8001348:	f7ff f956 	bl	80005f8 <__aeabi_dmul>
 800134c:	4603      	mov	r3, r0
 800134e:	460c      	mov	r4, r1
 8001350:	4618      	mov	r0, r3
 8001352:	4621      	mov	r1, r4
 8001354:	f7ff fc28 	bl	8000ba8 <__aeabi_d2uiz>
 8001358:	4603      	mov	r3, r0
 800135a:	667b      	str	r3, [r7, #100]	; 0x64
#if DEBUG_PRINT == 1
	printf("SD CARD Total Size: \t%lu\n",total);
#endif
	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 800135c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800135e:	895b      	ldrh	r3, [r3, #10]
 8001360:	461a      	mov	r2, r3
 8001362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001364:	fb03 f302 	mul.w	r3, r3, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f8cb 	bl	8000504 <__aeabi_ui2d>
 800136e:	f04f 0200 	mov.w	r2, #0
 8001372:	4b3c      	ldr	r3, [pc, #240]	; (8001464 <init_sd+0x16c>)
 8001374:	f7ff f940 	bl	80005f8 <__aeabi_dmul>
 8001378:	4603      	mov	r3, r0
 800137a:	460c      	mov	r4, r1
 800137c:	4618      	mov	r0, r3
 800137e:	4621      	mov	r1, r4
 8001380:	f7ff fc12 	bl	8000ba8 <__aeabi_d2uiz>
 8001384:	4603      	mov	r3, r0
 8001386:	663b      	str	r3, [r7, #96]	; 0x60

	DIR dirs;
	char *fn;
	FILINFO Finfo;

	uint16_t cnt1 = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	uint16_t cnt2 = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

	if ((fresult = f_opendir(&dirs, SDPath)) == FR_OK)
 8001394:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001398:	4930      	ldr	r1, [pc, #192]	; (800145c <init_sd+0x164>)
 800139a:	4618      	mov	r0, r3
 800139c:	f00e fe70 	bl	8010080 <f_opendir>
 80013a0:	4603      	mov	r3, r0
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b30      	ldr	r3, [pc, #192]	; (8001468 <init_sd+0x170>)
 80013a6:	701a      	strb	r2, [r3, #0]
 80013a8:	4b2f      	ldr	r3, [pc, #188]	; (8001468 <init_sd+0x170>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d148      	bne.n	8001442 <init_sd+0x14a>
	{
			while (((fresult = f_readdir(&dirs, &Finfo)) == FR_OK) && Finfo.fname[0])
 80013b0:	e034      	b.n	800141c <init_sd+0x124>
			{
				fn = Finfo.fname;
 80013b2:	f107 030c 	add.w	r3, r7, #12
 80013b6:	3309      	adds	r3, #9
 80013b8:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (_FS_RPATH && fn[0] == '.') continue;

				if ((fn[0] == 'F') & (fn[1] == 'L'))
 80013ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b46      	cmp	r3, #70	; 0x46
 80013c0:	bf0c      	ite	eq
 80013c2:	2301      	moveq	r3, #1
 80013c4:	2300      	movne	r3, #0
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013ca:	3301      	adds	r3, #1
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b4c      	cmp	r3, #76	; 0x4c
 80013d0:	bf0c      	ite	eq
 80013d2:	2301      	moveq	r3, #1
 80013d4:	2300      	movne	r3, #0
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	4013      	ands	r3, r2
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d005      	beq.n	80013ec <init_sd+0xf4>
				{
#if DEBUG_PRINT == 1
					printf("found flight log: %s \n",fn);
#endif
					cnt1 ++;
 80013e0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80013e4:	3301      	adds	r3, #1
 80013e6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 80013ea:	e017      	b.n	800141c <init_sd+0x124>
				} else if ((fn[0] == 'L') & (fn[1] == 'O'))
 80013ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	2b4c      	cmp	r3, #76	; 0x4c
 80013f2:	bf0c      	ite	eq
 80013f4:	2301      	moveq	r3, #1
 80013f6:	2300      	movne	r3, #0
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013fc:	3301      	adds	r3, #1
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b4f      	cmp	r3, #79	; 0x4f
 8001402:	bf0c      	ite	eq
 8001404:	2301      	moveq	r3, #1
 8001406:	2300      	movne	r3, #0
 8001408:	b2db      	uxtb	r3, r3
 800140a:	4013      	ands	r3, r2
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b00      	cmp	r3, #0
 8001410:	d004      	beq.n	800141c <init_sd+0x124>
				{
#if DEBUG_PRINT == 1
					printf("found log file: %s \n",fn);
#endif
					cnt2 ++;
 8001412:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8001416:	3301      	adds	r3, #1
 8001418:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
			while (((fresult = f_readdir(&dirs, &Finfo)) == FR_OK) && Finfo.fname[0])
 800141c:	f107 020c 	add.w	r2, r7, #12
 8001420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001424:	4611      	mov	r1, r2
 8001426:	4618      	mov	r0, r3
 8001428:	f00e fe9d 	bl	8010166 <f_readdir>
 800142c:	4603      	mov	r3, r0
 800142e:	461a      	mov	r2, r3
 8001430:	4b0d      	ldr	r3, [pc, #52]	; (8001468 <init_sd+0x170>)
 8001432:	701a      	strb	r2, [r3, #0]
 8001434:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <init_sd+0x170>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d102      	bne.n	8001442 <init_sd+0x14a>
 800143c:	7d7b      	ldrb	r3, [r7, #21]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1b7      	bne.n	80013b2 <init_sd+0xba>
				}

			}
	}
	*file_count = cnt1;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001448:	801a      	strh	r2, [r3, #0]
	*log_count = cnt2;
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8001450:	801a      	strh	r2, [r3, #0]
#if DEBUG_PRINT == 1
	printf("\n this is the %hu th flight. \n", *file_count);
	printf("\n this is the %hu th log file. \n", *log_count);
#endif
	return 1;
 8001452:	2301      	movs	r3, #1
}
 8001454:	4618      	mov	r0, r3
 8001456:	3774      	adds	r7, #116	; 0x74
 8001458:	46bd      	mov	sp, r7
 800145a:	bd90      	pop	{r4, r7, pc}
 800145c:	20015cb8 	.word	0x20015cb8
 8001460:	20000894 	.word	0x20000894
 8001464:	3fe00000 	.word	0x3fe00000
 8001468:	20003930 	.word	0x20003930

0800146c <init_file>:

uint8_t init_file(char * FILE_NAME, char * LOG_NAME){
 800146c:	b580      	push	{r7, lr}
 800146e:	b0ee      	sub	sp, #440	; 0x1b8
 8001470:	af00      	add	r7, sp, #0
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	6018      	str	r0, [r3, #0]
 8001476:	463b      	mov	r3, r7
 8001478:	6019      	str	r1, [r3, #0]


	/**************** The following operation is using f_write and f_read **************************/

	/* Create second file with read write access and open it */
	fresult = f_open(&data_file, FILE_NAME, FA_CREATE_ALWAYS | FA_WRITE );
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	220a      	movs	r2, #10
 800147e:	6819      	ldr	r1, [r3, #0]
 8001480:	483c      	ldr	r0, [pc, #240]	; (8001574 <init_file+0x108>)
 8001482:	f00d ffd1 	bl	800f428 <f_open>
 8001486:	4603      	mov	r3, r0
 8001488:	461a      	mov	r2, r3
 800148a:	4b3b      	ldr	r3, [pc, #236]	; (8001578 <init_file+0x10c>)
 800148c:	701a      	strb	r2, [r3, #0]

	if (fresult != FR_OK){
 800148e:	4b3a      	ldr	r3, [pc, #232]	; (8001578 <init_file+0x10c>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <init_file+0x2e>
#if DEBUG_PRINT == 1
		printf("trying to open datalog file, error-code: %d \n",fresult);
#endif
		return 0;
 8001496:	2300      	movs	r3, #0
 8001498:	e067      	b.n	800156a <init_file+0xfe>
	}
	/* Writing text */
	//char myData[] = "xyx,ghj,acceleration,target position\n 1000,231.25,10,500.5";
	char myData[] = "Time,Armed,Event,State,MachTimer,FailSafeTimer,FailSafeMainTimer,h,v,H_SHT,T_SHT,T_CPU,T_BARO1,T_BARO2,T_IMU1,T_IMU2,P_BARO1,P_BARO2,Ax_IMU1,Ay_IMU1,Az_IMU1,Gx_IMU1,Gy_IMU1,Gz_IMU1,Ax_IMU2,Ay_IMU2,Az_IMU2,Gx_IMU2,Gy_IMU2,Gz_IMU2,Ax_H3L,Ay_H3L,Az_H3L,I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2\n";
 800149a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800149e:	4a37      	ldr	r2, [pc, #220]	; (800157c <init_file+0x110>)
 80014a0:	4618      	mov	r0, r3
 80014a2:	4611      	mov	r1, r2
 80014a4:	f240 1329 	movw	r3, #297	; 0x129
 80014a8:	461a      	mov	r2, r3
 80014aa:	f00f f871 	bl	8010590 <memcpy>

	fresult = f_write(&data_file, myData, sizeof(myData), &bw);
 80014ae:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80014b2:	4b33      	ldr	r3, [pc, #204]	; (8001580 <init_file+0x114>)
 80014b4:	f240 1229 	movw	r2, #297	; 0x129
 80014b8:	482e      	ldr	r0, [pc, #184]	; (8001574 <init_file+0x108>)
 80014ba:	f00e f981 	bl	800f7c0 <f_write>
 80014be:	4603      	mov	r3, r0
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b2d      	ldr	r3, [pc, #180]	; (8001578 <init_file+0x10c>)
 80014c4:	701a      	strb	r2, [r3, #0]
	/* Close file */
	f_close(&data_file);
 80014c6:	482b      	ldr	r0, [pc, #172]	; (8001574 <init_file+0x108>)
 80014c8:	f00e fb8c 	bl	800fbe4 <f_close>

	if (fresult != FR_OK){
 80014cc:	4b2a      	ldr	r3, [pc, #168]	; (8001578 <init_file+0x10c>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <init_file+0x6c>
#if DEBUG_PRINT == 1
		printf ("FLIGHT FILE not created, error-code: %d \n",fresult);
#endif
		return 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	e048      	b.n	800156a <init_file+0xfe>
	}
	//bufclear();

	HAL_Delay(100);
 80014d8:	2064      	movs	r0, #100	; 0x64
 80014da:	f006 f847 	bl	800756c <HAL_Delay>

	/* Open file to write/ create a file if it doesn't exist */
	fresult = f_open(&log_file, LOG_NAME, FA_CREATE_NEW | FA_WRITE );
 80014de:	463b      	mov	r3, r7
 80014e0:	2206      	movs	r2, #6
 80014e2:	6819      	ldr	r1, [r3, #0]
 80014e4:	4827      	ldr	r0, [pc, #156]	; (8001584 <init_file+0x118>)
 80014e6:	f00d ff9f 	bl	800f428 <f_open>
 80014ea:	4603      	mov	r3, r0
 80014ec:	461a      	mov	r2, r3
 80014ee:	4b22      	ldr	r3, [pc, #136]	; (8001578 <init_file+0x10c>)
 80014f0:	701a      	strb	r2, [r3, #0]

	if (fresult != FR_OK){
 80014f2:	4b21      	ldr	r3, [pc, #132]	; (8001578 <init_file+0x10c>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <init_file+0x92>

#if DEBUG_PRINT == 1
		printf("trying to open setuplog file, error-code: %d \n",fresult);
#endif
		return 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	e035      	b.n	800156a <init_file+0xfe>

	/* Writing text */

	//sprintf(buffer,"time: %ld,SHT STATE: %d\n ,BARO1 STATE: %d\n ,BARO2 STATE: %d \n ,IMU1 STATE %d\n ,IMU2 STATE %d\n, H3L STATE %d\n",HAL_GetTick(), SHT_STATE,BARO1_STATE,BARO2_STATE,IMU1_STATE,IMU2_STATE,H3L_STATE);

	bw = 0;
 80014fe:	4b20      	ldr	r3, [pc, #128]	; (8001580 <init_file+0x114>)
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
	char myLog[128];

	for (int i=0; i<128; i++)
 8001504:	2300      	movs	r3, #0
 8001506:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 800150a:	e00b      	b.n	8001524 <init_file+0xb8>
	{
		myLog[i] = '\0';
 800150c:	f107 0208 	add.w	r2, r7, #8
 8001510:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001514:	4413      	add	r3, r2
 8001516:	2200      	movs	r2, #0
 8001518:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<128; i++)
 800151a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800151e:	3301      	adds	r3, #1
 8001520:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8001524:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001528:	2b7f      	cmp	r3, #127	; 0x7f
 800152a:	ddef      	ble.n	800150c <init_file+0xa0>
	}

	sprintf(myLog, "TIMESTAMP, STATE, MSG \n %ld, SD WRITE OK, file name: %s \n", HAL_GetTick(), FILE_NAME);
 800152c:	f006 f812 	bl	8007554 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	1d3b      	adds	r3, r7, #4
 8001534:	f107 0008 	add.w	r0, r7, #8
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4913      	ldr	r1, [pc, #76]	; (8001588 <init_file+0x11c>)
 800153c:	f00f fd14 	bl	8010f68 <siprintf>
	fresult = f_write(&log_file, myLog, sizeof(myLog), &bw);
 8001540:	f107 0108 	add.w	r1, r7, #8
 8001544:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <init_file+0x114>)
 8001546:	2280      	movs	r2, #128	; 0x80
 8001548:	480e      	ldr	r0, [pc, #56]	; (8001584 <init_file+0x118>)
 800154a:	f00e f939 	bl	800f7c0 <f_write>
 800154e:	4603      	mov	r3, r0
 8001550:	461a      	mov	r2, r3
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <init_file+0x10c>)
 8001554:	701a      	strb	r2, [r3, #0]

	if (fresult != FR_OK){
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <init_file+0x10c>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <init_file+0xf6>
#if DEBUG_PRINT == 1
		printf ("LOG FILE not created, error-code: %d \n",fresult);
#endif
		return 0;
 800155e:	2300      	movs	r3, #0
 8001560:	e003      	b.n	800156a <init_file+0xfe>
	}

	/* Close file */
	f_close(&log_file);
 8001562:	4808      	ldr	r0, [pc, #32]	; (8001584 <init_file+0x118>)
 8001564:	f00e fb3e 	bl	800fbe4 <f_close>

	// clearing buffer to show that result obtained is from the file
	//bufclear();

	return 1;
 8001568:	2301      	movs	r3, #1

}
 800156a:	4618      	mov	r0, r3
 800156c:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	200018c8 	.word	0x200018c8
 8001578:	20003930 	.word	0x20003930
 800157c:	08014c84 	.word	0x08014c84
 8001580:	2000392c 	.word	0x2000392c
 8001584:	20003934 	.word	0x20003934
 8001588:	08014c48 	.word	0x08014c48

0800158c <write_to_SD>:


}


void write_to_SD(char * FILE_NAME, char * buffer){
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
	char FILE_NAME[11];
	sprintf(FILE_NAME,"FL%05d.CSV",file_count);
	*/

	// Open the file with write access
	fresult = f_open(&data_file, FILE_NAME, FA_OPEN_ALWAYS | FA_WRITE);
 8001596:	2212      	movs	r2, #18
 8001598:	6879      	ldr	r1, [r7, #4]
 800159a:	481b      	ldr	r0, [pc, #108]	; (8001608 <write_to_SD+0x7c>)
 800159c:	f00d ff44 	bl	800f428 <f_open>
 80015a0:	4603      	mov	r3, r0
 80015a2:	461a      	mov	r2, r3
 80015a4:	4b19      	ldr	r3, [pc, #100]	; (800160c <write_to_SD+0x80>)
 80015a6:	701a      	strb	r2, [r3, #0]



	if (fresult == FR_OK)
 80015a8:	4b18      	ldr	r3, [pc, #96]	; (800160c <write_to_SD+0x80>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d00f      	beq.n	80015d0 <write_to_SD+0x44>
#if DEBUG_PRINT == 1
		printf("error opening file for writing\n");
		printf("error: %d\n",fresult);
#endif

		fresult = f_mount(NULL, SDPath, 1);
 80015b0:	2201      	movs	r2, #1
 80015b2:	4917      	ldr	r1, [pc, #92]	; (8001610 <write_to_SD+0x84>)
 80015b4:	2000      	movs	r0, #0
 80015b6:	f00d fef1 	bl	800f39c <f_mount>
 80015ba:	4603      	mov	r3, r0
 80015bc:	461a      	mov	r2, r3
 80015be:	4b13      	ldr	r3, [pc, #76]	; (800160c <write_to_SD+0x80>)
 80015c0:	701a      	strb	r2, [r3, #0]
#if DEBUG_PRINT == 1
		if (fresult == FR_OK) printf ("SD CARD UNMOUNTED successfully...\n");
#endif
		FRESULT ret = f_mount(&fs, SDPath, 1);
 80015c2:	2201      	movs	r2, #1
 80015c4:	4912      	ldr	r1, [pc, #72]	; (8001610 <write_to_SD+0x84>)
 80015c6:	4813      	ldr	r0, [pc, #76]	; (8001614 <write_to_SD+0x88>)
 80015c8:	f00d fee8 	bl	800f39c <f_mount>
 80015cc:	4603      	mov	r3, r0
 80015ce:	73fb      	strb	r3, [r7, #15]
#endif
		}
	}

	// Move to offset to the end of the file
	fresult = f_lseek((&data_file),f_size(&data_file));
 80015d0:	4b0d      	ldr	r3, [pc, #52]	; (8001608 <write_to_SD+0x7c>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	4619      	mov	r1, r3
 80015d6:	480c      	ldr	r0, [pc, #48]	; (8001608 <write_to_SD+0x7c>)
 80015d8:	f00e fb2e 	bl	800fc38 <f_lseek>
 80015dc:	4603      	mov	r3, r0
 80015de:	461a      	mov	r2, r3
 80015e0:	4b0a      	ldr	r3, [pc, #40]	; (800160c <write_to_SD+0x80>)
 80015e2:	701a      	strb	r2, [r3, #0]

	// write the string to the file
	fresult = f_puts(buffer, &data_file);
 80015e4:	4908      	ldr	r1, [pc, #32]	; (8001608 <write_to_SD+0x7c>)
 80015e6:	6838      	ldr	r0, [r7, #0]
 80015e8:	f00e ff27 	bl	801043a <f_puts>
 80015ec:	4603      	mov	r3, r0
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	4b06      	ldr	r3, [pc, #24]	; (800160c <write_to_SD+0x80>)
 80015f2:	701a      	strb	r2, [r3, #0]

	// Close file
	f_close(&data_file);
 80015f4:	4804      	ldr	r0, [pc, #16]	; (8001608 <write_to_SD+0x7c>)
 80015f6:	f00e faf5 	bl	800fbe4 <f_close>

	bufclear(buffer);
 80015fa:	6838      	ldr	r0, [r7, #0]
 80015fc:	f7ff fe62 	bl	80012c4 <bufclear>

}
 8001600:	bf00      	nop
 8001602:	3710      	adds	r7, #16
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	200018c8 	.word	0x200018c8
 800160c:	20003930 	.word	0x20003930
 8001610:	20015cb8 	.word	0x20015cb8
 8001614:	20000894 	.word	0x20000894

08001618 <log_to_SD>:

void log_to_SD(char * FILE_NAME, char * buffer){
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
	char FILE_NAME[11];
	sprintf(FILE_NAME,"FL%05d.CSV",file_count);
	*/

	// Open the file with write access
	fresult = f_open(&log_file, FILE_NAME, FA_OPEN_ALWAYS | FA_WRITE);
 8001622:	2212      	movs	r2, #18
 8001624:	6879      	ldr	r1, [r7, #4]
 8001626:	481b      	ldr	r0, [pc, #108]	; (8001694 <log_to_SD+0x7c>)
 8001628:	f00d fefe 	bl	800f428 <f_open>
 800162c:	4603      	mov	r3, r0
 800162e:	461a      	mov	r2, r3
 8001630:	4b19      	ldr	r3, [pc, #100]	; (8001698 <log_to_SD+0x80>)
 8001632:	701a      	strb	r2, [r3, #0]



	if (fresult == FR_OK)
 8001634:	4b18      	ldr	r3, [pc, #96]	; (8001698 <log_to_SD+0x80>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00f      	beq.n	800165c <log_to_SD+0x44>
#if DEBUG_PRINT == 1
		printf("error opening log file for writing\n");
		printf("error: %d\n",fresult);
#endif

		fresult = f_mount(NULL, SDPath, 1);
 800163c:	2201      	movs	r2, #1
 800163e:	4917      	ldr	r1, [pc, #92]	; (800169c <log_to_SD+0x84>)
 8001640:	2000      	movs	r0, #0
 8001642:	f00d feab 	bl	800f39c <f_mount>
 8001646:	4603      	mov	r3, r0
 8001648:	461a      	mov	r2, r3
 800164a:	4b13      	ldr	r3, [pc, #76]	; (8001698 <log_to_SD+0x80>)
 800164c:	701a      	strb	r2, [r3, #0]
#if DEBUG_PRINT == 1
		if (fresult == FR_OK) printf ("SD CARD UNMOUNTED successfully...\n");
#endif
		FRESULT ret = f_mount(&fs, SDPath, 1);
 800164e:	2201      	movs	r2, #1
 8001650:	4912      	ldr	r1, [pc, #72]	; (800169c <log_to_SD+0x84>)
 8001652:	4813      	ldr	r0, [pc, #76]	; (80016a0 <log_to_SD+0x88>)
 8001654:	f00d fea2 	bl	800f39c <f_mount>
 8001658:	4603      	mov	r3, r0
 800165a:	73fb      	strb	r3, [r7, #15]
#endif
		}
	}

	// Move to offset to the end of the file
	fresult = f_lseek((&log_file),f_size(&log_file));
 800165c:	4b0d      	ldr	r3, [pc, #52]	; (8001694 <log_to_SD+0x7c>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	4619      	mov	r1, r3
 8001662:	480c      	ldr	r0, [pc, #48]	; (8001694 <log_to_SD+0x7c>)
 8001664:	f00e fae8 	bl	800fc38 <f_lseek>
 8001668:	4603      	mov	r3, r0
 800166a:	461a      	mov	r2, r3
 800166c:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <log_to_SD+0x80>)
 800166e:	701a      	strb	r2, [r3, #0]

	// write the string to the file
	fresult = f_puts(buffer, &log_file);
 8001670:	4908      	ldr	r1, [pc, #32]	; (8001694 <log_to_SD+0x7c>)
 8001672:	6838      	ldr	r0, [r7, #0]
 8001674:	f00e fee1 	bl	801043a <f_puts>
 8001678:	4603      	mov	r3, r0
 800167a:	b2da      	uxtb	r2, r3
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <log_to_SD+0x80>)
 800167e:	701a      	strb	r2, [r3, #0]

	// Close file
	f_close(&log_file);
 8001680:	4804      	ldr	r0, [pc, #16]	; (8001694 <log_to_SD+0x7c>)
 8001682:	f00e faaf 	bl	800fbe4 <f_close>

	bufclear(buffer);
 8001686:	6838      	ldr	r0, [r7, #0]
 8001688:	f7ff fe1c 	bl	80012c4 <bufclear>

}
 800168c:	bf00      	nop
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20003934 	.word	0x20003934
 8001698:	20003930 	.word	0x20003930
 800169c:	20015cb8 	.word	0x20015cb8
 80016a0:	20000894 	.word	0x20000894

080016a4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80016aa:	463b      	mov	r3, r7
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016b6:	4b52      	ldr	r3, [pc, #328]	; (8001800 <MX_ADC1_Init+0x15c>)
 80016b8:	4a52      	ldr	r2, [pc, #328]	; (8001804 <MX_ADC1_Init+0x160>)
 80016ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016bc:	4b50      	ldr	r3, [pc, #320]	; (8001800 <MX_ADC1_Init+0x15c>)
 80016be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016c4:	4b4e      	ldr	r3, [pc, #312]	; (8001800 <MX_ADC1_Init+0x15c>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80016ca:	4b4d      	ldr	r3, [pc, #308]	; (8001800 <MX_ADC1_Init+0x15c>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80016d0:	4b4b      	ldr	r3, [pc, #300]	; (8001800 <MX_ADC1_Init+0x15c>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016d6:	4b4a      	ldr	r3, [pc, #296]	; (8001800 <MX_ADC1_Init+0x15c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016de:	4b48      	ldr	r3, [pc, #288]	; (8001800 <MX_ADC1_Init+0x15c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016e4:	4b46      	ldr	r3, [pc, #280]	; (8001800 <MX_ADC1_Init+0x15c>)
 80016e6:	4a48      	ldr	r2, [pc, #288]	; (8001808 <MX_ADC1_Init+0x164>)
 80016e8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016ea:	4b45      	ldr	r3, [pc, #276]	; (8001800 <MX_ADC1_Init+0x15c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 80016f0:	4b43      	ldr	r3, [pc, #268]	; (8001800 <MX_ADC1_Init+0x15c>)
 80016f2:	2208      	movs	r2, #8
 80016f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80016f6:	4b42      	ldr	r3, [pc, #264]	; (8001800 <MX_ADC1_Init+0x15c>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016fe:	4b40      	ldr	r3, [pc, #256]	; (8001800 <MX_ADC1_Init+0x15c>)
 8001700:	2201      	movs	r2, #1
 8001702:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001704:	483e      	ldr	r0, [pc, #248]	; (8001800 <MX_ADC1_Init+0x15c>)
 8001706:	f005 ff53 	bl	80075b0 <HAL_ADC_Init>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001710:	f000 fcaa 	bl	8002068 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001714:	2300      	movs	r3, #0
 8001716:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001718:	2301      	movs	r3, #1
 800171a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800171c:	2307      	movs	r3, #7
 800171e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001720:	463b      	mov	r3, r7
 8001722:	4619      	mov	r1, r3
 8001724:	4836      	ldr	r0, [pc, #216]	; (8001800 <MX_ADC1_Init+0x15c>)
 8001726:	f006 f8e1 	bl	80078ec <HAL_ADC_ConfigChannel>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001730:	f000 fc9a 	bl	8002068 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001734:	2301      	movs	r3, #1
 8001736:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001738:	2302      	movs	r3, #2
 800173a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800173c:	463b      	mov	r3, r7
 800173e:	4619      	mov	r1, r3
 8001740:	482f      	ldr	r0, [pc, #188]	; (8001800 <MX_ADC1_Init+0x15c>)
 8001742:	f006 f8d3 	bl	80078ec <HAL_ADC_ConfigChannel>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800174c:	f000 fc8c 	bl	8002068 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001750:	2302      	movs	r3, #2
 8001752:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001754:	2303      	movs	r3, #3
 8001756:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001758:	463b      	mov	r3, r7
 800175a:	4619      	mov	r1, r3
 800175c:	4828      	ldr	r0, [pc, #160]	; (8001800 <MX_ADC1_Init+0x15c>)
 800175e:	f006 f8c5 	bl	80078ec <HAL_ADC_ConfigChannel>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001768:	f000 fc7e 	bl	8002068 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800176c:	230a      	movs	r3, #10
 800176e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001770:	2304      	movs	r3, #4
 8001772:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001774:	463b      	mov	r3, r7
 8001776:	4619      	mov	r1, r3
 8001778:	4821      	ldr	r0, [pc, #132]	; (8001800 <MX_ADC1_Init+0x15c>)
 800177a:	f006 f8b7 	bl	80078ec <HAL_ADC_ConfigChannel>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001784:	f000 fc70 	bl	8002068 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001788:	230b      	movs	r3, #11
 800178a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800178c:	2305      	movs	r3, #5
 800178e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001790:	463b      	mov	r3, r7
 8001792:	4619      	mov	r1, r3
 8001794:	481a      	ldr	r0, [pc, #104]	; (8001800 <MX_ADC1_Init+0x15c>)
 8001796:	f006 f8a9 	bl	80078ec <HAL_ADC_ConfigChannel>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80017a0:	f000 fc62 	bl	8002068 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80017a4:	230c      	movs	r3, #12
 80017a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80017a8:	2306      	movs	r3, #6
 80017aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017ac:	463b      	mov	r3, r7
 80017ae:	4619      	mov	r1, r3
 80017b0:	4813      	ldr	r0, [pc, #76]	; (8001800 <MX_ADC1_Init+0x15c>)
 80017b2:	f006 f89b 	bl	80078ec <HAL_ADC_ConfigChannel>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80017bc:	f000 fc54 	bl	8002068 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80017c0:	230d      	movs	r3, #13
 80017c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80017c4:	2307      	movs	r3, #7
 80017c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017c8:	463b      	mov	r3, r7
 80017ca:	4619      	mov	r1, r3
 80017cc:	480c      	ldr	r0, [pc, #48]	; (8001800 <MX_ADC1_Init+0x15c>)
 80017ce:	f006 f88d 	bl	80078ec <HAL_ADC_ConfigChannel>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80017d8:	f000 fc46 	bl	8002068 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80017dc:	2310      	movs	r3, #16
 80017de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80017e0:	2308      	movs	r3, #8
 80017e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017e4:	463b      	mov	r3, r7
 80017e6:	4619      	mov	r1, r3
 80017e8:	4805      	ldr	r0, [pc, #20]	; (8001800 <MX_ADC1_Init+0x15c>)
 80017ea:	f006 f87f 	bl	80078ec <HAL_ADC_ConfigChannel>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80017f4:	f000 fc38 	bl	8002068 <Error_Handler>
  }

}
 80017f8:	bf00      	nop
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20004964 	.word	0x20004964
 8001804:	40012000 	.word	0x40012000
 8001808:	0f000001 	.word	0x0f000001

0800180c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08a      	sub	sp, #40	; 0x28
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001814:	f107 0314 	add.w	r3, r7, #20
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a3c      	ldr	r2, [pc, #240]	; (800191c <HAL_ADC_MspInit+0x110>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d171      	bne.n	8001912 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	4b3b      	ldr	r3, [pc, #236]	; (8001920 <HAL_ADC_MspInit+0x114>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	4a3a      	ldr	r2, [pc, #232]	; (8001920 <HAL_ADC_MspInit+0x114>)
 8001838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800183c:	6453      	str	r3, [r2, #68]	; 0x44
 800183e:	4b38      	ldr	r3, [pc, #224]	; (8001920 <HAL_ADC_MspInit+0x114>)
 8001840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
 800184e:	4b34      	ldr	r3, [pc, #208]	; (8001920 <HAL_ADC_MspInit+0x114>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	4a33      	ldr	r2, [pc, #204]	; (8001920 <HAL_ADC_MspInit+0x114>)
 8001854:	f043 0304 	orr.w	r3, r3, #4
 8001858:	6313      	str	r3, [r2, #48]	; 0x30
 800185a:	4b31      	ldr	r3, [pc, #196]	; (8001920 <HAL_ADC_MspInit+0x114>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	f003 0304 	and.w	r3, r3, #4
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	4b2d      	ldr	r3, [pc, #180]	; (8001920 <HAL_ADC_MspInit+0x114>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a2c      	ldr	r2, [pc, #176]	; (8001920 <HAL_ADC_MspInit+0x114>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b2a      	ldr	r3, [pc, #168]	; (8001920 <HAL_ADC_MspInit+0x114>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> ADC1_IN13
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001882:	230f      	movs	r3, #15
 8001884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001886:	2303      	movs	r3, #3
 8001888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800188e:	f107 0314 	add.w	r3, r7, #20
 8001892:	4619      	mov	r1, r3
 8001894:	4823      	ldr	r0, [pc, #140]	; (8001924 <HAL_ADC_MspInit+0x118>)
 8001896:	f006 ffe7 	bl	8008868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800189a:	2307      	movs	r3, #7
 800189c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800189e:	2303      	movs	r3, #3
 80018a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a6:	f107 0314 	add.w	r3, r7, #20
 80018aa:	4619      	mov	r1, r3
 80018ac:	481e      	ldr	r0, [pc, #120]	; (8001928 <HAL_ADC_MspInit+0x11c>)
 80018ae:	f006 ffdb 	bl	8008868 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80018b2:	4b1e      	ldr	r3, [pc, #120]	; (800192c <HAL_ADC_MspInit+0x120>)
 80018b4:	4a1e      	ldr	r2, [pc, #120]	; (8001930 <HAL_ADC_MspInit+0x124>)
 80018b6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80018b8:	4b1c      	ldr	r3, [pc, #112]	; (800192c <HAL_ADC_MspInit+0x120>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018be:	4b1b      	ldr	r3, [pc, #108]	; (800192c <HAL_ADC_MspInit+0x120>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018c4:	4b19      	ldr	r3, [pc, #100]	; (800192c <HAL_ADC_MspInit+0x120>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80018ca:	4b18      	ldr	r3, [pc, #96]	; (800192c <HAL_ADC_MspInit+0x120>)
 80018cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018d2:	4b16      	ldr	r3, [pc, #88]	; (800192c <HAL_ADC_MspInit+0x120>)
 80018d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018da:	4b14      	ldr	r3, [pc, #80]	; (800192c <HAL_ADC_MspInit+0x120>)
 80018dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80018e2:	4b12      	ldr	r3, [pc, #72]	; (800192c <HAL_ADC_MspInit+0x120>)
 80018e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018e8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <HAL_ADC_MspInit+0x120>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018f0:	4b0e      	ldr	r3, [pc, #56]	; (800192c <HAL_ADC_MspInit+0x120>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80018f6:	480d      	ldr	r0, [pc, #52]	; (800192c <HAL_ADC_MspInit+0x120>)
 80018f8:	f006 fbaa 	bl	8008050 <HAL_DMA_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001902:	f000 fbb1 	bl	8002068 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a08      	ldr	r2, [pc, #32]	; (800192c <HAL_ADC_MspInit+0x120>)
 800190a:	639a      	str	r2, [r3, #56]	; 0x38
 800190c:	4a07      	ldr	r2, [pc, #28]	; (800192c <HAL_ADC_MspInit+0x120>)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001912:	bf00      	nop
 8001914:	3728      	adds	r7, #40	; 0x28
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40012000 	.word	0x40012000
 8001920:	40023800 	.word	0x40023800
 8001924:	40020800 	.word	0x40020800
 8001928:	40020000 	.word	0x40020000
 800192c:	200049ac 	.word	0x200049ac
 8001930:	40026410 	.word	0x40026410

08001934 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 800193c:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <DWT_Delay_us+0x3c>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8001942:	f008 fe43 	bl	800a5cc <HAL_RCC_GetHCLKFreq>
 8001946:	4602      	mov	r2, r0
 8001948:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <DWT_Delay_us+0x40>)
 800194a:	fba3 2302 	umull	r2, r3, r3, r2
 800194e:	0c9b      	lsrs	r3, r3, #18
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	fb02 f303 	mul.w	r3, r2, r3
 8001956:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8001958:	bf00      	nop
 800195a:	4b05      	ldr	r3, [pc, #20]	; (8001970 <DWT_Delay_us+0x3c>)
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	1ad2      	subs	r2, r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	429a      	cmp	r2, r3
 8001966:	d3f8      	bcc.n	800195a <DWT_Delay_us+0x26>
}
 8001968:	bf00      	nop
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	e0001000 	.word	0xe0001000
 8001974:	431bde83 	.word	0x431bde83

08001978 <play>:
float fourth = 512.0 / SF;
float half = 1024.0 / SF;


void play(float freq, float time)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001982:	edc7 0a00 	vstr	s1, [r7]
	float value = 0.0;
 8001986:	f04f 0300 	mov.w	r3, #0
 800198a:	60fb      	str	r3, [r7, #12]
	while(value < time){
 800198c:	e01b      	b.n	80019c6 <play+0x4e>
		HAL_GPIO_TogglePin(BUZ_GPIO_Port, BUZ_Pin);
 800198e:	2120      	movs	r1, #32
 8001990:	4816      	ldr	r0, [pc, #88]	; (80019ec <play+0x74>)
 8001992:	f007 f934 	bl	8008bfe <HAL_GPIO_TogglePin>
		DWT_Delay_us (1000*1000/freq);
 8001996:	eddf 6a16 	vldr	s13, [pc, #88]	; 80019f0 <play+0x78>
 800199a:	ed97 7a01 	vldr	s14, [r7, #4]
 800199e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019a6:	ee17 0a90 	vmov	r0, s15
 80019aa:	f7ff ffc3 	bl	8001934 <DWT_Delay_us>
		value += 1000/freq;
 80019ae:	eddf 6a11 	vldr	s13, [pc, #68]	; 80019f4 <play+0x7c>
 80019b2:	ed97 7a01 	vldr	s14, [r7, #4]
 80019b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019ba:	ed97 7a03 	vldr	s14, [r7, #12]
 80019be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019c2:	edc7 7a03 	vstr	s15, [r7, #12]
	while(value < time){
 80019c6:	ed97 7a03 	vldr	s14, [r7, #12]
 80019ca:	edd7 7a00 	vldr	s15, [r7]
 80019ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d6:	d4da      	bmi.n	800198e <play+0x16>
	}
	HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 80019d8:	2200      	movs	r2, #0
 80019da:	2120      	movs	r1, #32
 80019dc:	4803      	ldr	r0, [pc, #12]	; (80019ec <play+0x74>)
 80019de:	f007 f8f5 	bl	8008bcc <HAL_GPIO_WritePin>
};
 80019e2:	bf00      	nop
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40020800 	.word	0x40020800
 80019f0:	49742400 	.word	0x49742400
 80019f4:	447a0000 	.word	0x447a0000

080019f8 <play_OK_sound>:

void play_OK_sound(){
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
	play(800,500);
 80019fc:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8001a2c <play_OK_sound+0x34>
 8001a00:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8001a30 <play_OK_sound+0x38>
 8001a04:	f7ff ffb8 	bl	8001978 <play>
	play(1600,200);
 8001a08:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8001a34 <play_OK_sound+0x3c>
 8001a0c:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001a38 <play_OK_sound+0x40>
 8001a10:	f7ff ffb2 	bl	8001978 <play>
	HAL_Delay(50);
 8001a14:	2032      	movs	r0, #50	; 0x32
 8001a16:	f005 fda9 	bl	800756c <HAL_Delay>
	play(1600,1000);
 8001a1a:	eddf 0a08 	vldr	s1, [pc, #32]	; 8001a3c <play_OK_sound+0x44>
 8001a1e:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8001a38 <play_OK_sound+0x40>
 8001a22:	f7ff ffa9 	bl	8001978 <play>
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	43fa0000 	.word	0x43fa0000
 8001a30:	44480000 	.word	0x44480000
 8001a34:	43480000 	.word	0x43480000
 8001a38:	44c80000 	.word	0x44c80000
 8001a3c:	447a0000 	.word	0x447a0000

08001a40 <play_FAIL_sound>:


void play_FAIL_sound(){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
	for (int i=0; i<20; i++){
 8001a46:	2300      	movs	r3, #0
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	e00e      	b.n	8001a6a <play_FAIL_sound+0x2a>
		play(400,20);
 8001a4c:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8001a50:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8001aa4 <play_FAIL_sound+0x64>
 8001a54:	f7ff ff90 	bl	8001978 <play>
		play(600,20);
 8001a58:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8001a5c:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8001aa8 <play_FAIL_sound+0x68>
 8001a60:	f7ff ff8a 	bl	8001978 <play>
	for (int i=0; i<20; i++){
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3301      	adds	r3, #1
 8001a68:	607b      	str	r3, [r7, #4]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b13      	cmp	r3, #19
 8001a6e:	dded      	ble.n	8001a4c <play_FAIL_sound+0xc>
	}
	for (int i=0; i<20; i++){
 8001a70:	2300      	movs	r3, #0
 8001a72:	603b      	str	r3, [r7, #0]
 8001a74:	e00e      	b.n	8001a94 <play_FAIL_sound+0x54>
		play(1600,20);
 8001a76:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8001a7a:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8001aac <play_FAIL_sound+0x6c>
 8001a7e:	f7ff ff7b 	bl	8001978 <play>
		play(1800,20);
 8001a82:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8001a86:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8001ab0 <play_FAIL_sound+0x70>
 8001a8a:	f7ff ff75 	bl	8001978 <play>
	for (int i=0; i<20; i++){
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	3301      	adds	r3, #1
 8001a92:	603b      	str	r3, [r7, #0]
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	2b13      	cmp	r3, #19
 8001a98:	dded      	ble.n	8001a76 <play_FAIL_sound+0x36>
	}
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	43c80000 	.word	0x43c80000
 8001aa8:	44160000 	.word	0x44160000
 8001aac:	44c80000 	.word	0x44c80000
 8001ab0:	44e10000 	.word	0x44e10000

08001ab4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	607b      	str	r3, [r7, #4]
 8001abe:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <MX_DMA_Init+0x5c>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a13      	ldr	r2, [pc, #76]	; (8001b10 <MX_DMA_Init+0x5c>)
 8001ac4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <MX_DMA_Init+0x5c>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ad2:	607b      	str	r3, [r7, #4]
 8001ad4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2100      	movs	r1, #0
 8001ada:	2038      	movs	r0, #56	; 0x38
 8001adc:	f006 fa81 	bl	8007fe2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001ae0:	2038      	movs	r0, #56	; 0x38
 8001ae2:	f006 fa9a 	bl	800801a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	2100      	movs	r1, #0
 8001aea:	203b      	movs	r0, #59	; 0x3b
 8001aec:	f006 fa79 	bl	8007fe2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001af0:	203b      	movs	r0, #59	; 0x3b
 8001af2:	f006 fa92 	bl	800801a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2100      	movs	r1, #0
 8001afa:	2045      	movs	r0, #69	; 0x45
 8001afc:	f006 fa71 	bl	8007fe2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001b00:	2045      	movs	r0, #69	; 0x45
 8001b02:	f006 fa8a 	bl	800801a <HAL_NVIC_EnableIRQ>

}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800

08001b14 <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001b18:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <DWT_Delay_Init+0x58>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	4a13      	ldr	r2, [pc, #76]	; (8001b6c <DWT_Delay_Init+0x58>)
 8001b1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b22:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001b24:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <DWT_Delay_Init+0x58>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	4a10      	ldr	r2, [pc, #64]	; (8001b6c <DWT_Delay_Init+0x58>)
 8001b2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b2e:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001b30:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <DWT_Delay_Init+0x5c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a0e      	ldr	r2, [pc, #56]	; (8001b70 <DWT_Delay_Init+0x5c>)
 8001b36:	f023 0301 	bic.w	r3, r3, #1
 8001b3a:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <DWT_Delay_Init+0x5c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a0b      	ldr	r2, [pc, #44]	; (8001b70 <DWT_Delay_Init+0x5c>)
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8001b48:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <DWT_Delay_Init+0x5c>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8001b4e:	bf00      	nop
     __ASM volatile ("NOP");
 8001b50:	bf00      	nop
  __ASM volatile ("NOP");
 8001b52:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <DWT_Delay_Init+0x5c>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	e000      	b.n	8001b62 <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8001b60:	2301      	movs	r3, #1
  }
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000edf0 	.word	0xe000edf0
 8001b70:	e0001000 	.word	0xe0001000

08001b74 <start_timer>:
 *      Author: linus
 */

#include "fs_timer.h"

void start_timer(struct timer_t * t, uint32_t * tick){
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
	if (t->active == 0){
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	7a1b      	ldrb	r3, [r3, #8]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d109      	bne.n	8001b9a <start_timer+0x26>
		t->end = *tick + t->value;
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	441a      	add	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	605a      	str	r2, [r3, #4]
		t->active = 1;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	721a      	strb	r2, [r3, #8]
	}
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <check_timer>:

uint8_t check_timer(struct timer_t * t, uint32_t * tick){
 8001ba6:	b480      	push	{r7}
 8001ba8:	b083      	sub	sp, #12
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	6039      	str	r1, [r7, #0]
	if ((*tick > t->end) && (t->active == 1)) {
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d908      	bls.n	8001bce <check_timer+0x28>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	7a1b      	ldrb	r3, [r3, #8]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d104      	bne.n	8001bce <check_timer+0x28>
		t->active = 0;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	721a      	strb	r2, [r3, #8]
		return 1;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <check_timer+0x2a>
	}
	return 0;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08a      	sub	sp, #40	; 0x28
 8001be0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be2:	f107 0314 	add.w	r3, r7, #20
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	605a      	str	r2, [r3, #4]
 8001bec:	609a      	str	r2, [r3, #8]
 8001bee:	60da      	str	r2, [r3, #12]
 8001bf0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	4b64      	ldr	r3, [pc, #400]	; (8001d88 <MX_GPIO_Init+0x1ac>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a63      	ldr	r2, [pc, #396]	; (8001d88 <MX_GPIO_Init+0x1ac>)
 8001bfc:	f043 0310 	orr.w	r3, r3, #16
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b61      	ldr	r3, [pc, #388]	; (8001d88 <MX_GPIO_Init+0x1ac>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0310 	and.w	r3, r3, #16
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	4b5d      	ldr	r3, [pc, #372]	; (8001d88 <MX_GPIO_Init+0x1ac>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	4a5c      	ldr	r2, [pc, #368]	; (8001d88 <MX_GPIO_Init+0x1ac>)
 8001c18:	f043 0304 	orr.w	r3, r3, #4
 8001c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1e:	4b5a      	ldr	r3, [pc, #360]	; (8001d88 <MX_GPIO_Init+0x1ac>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	4b56      	ldr	r3, [pc, #344]	; (8001d88 <MX_GPIO_Init+0x1ac>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	4a55      	ldr	r2, [pc, #340]	; (8001d88 <MX_GPIO_Init+0x1ac>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3a:	4b53      	ldr	r3, [pc, #332]	; (8001d88 <MX_GPIO_Init+0x1ac>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	607b      	str	r3, [r7, #4]
 8001c4a:	4b4f      	ldr	r3, [pc, #316]	; (8001d88 <MX_GPIO_Init+0x1ac>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	4a4e      	ldr	r2, [pc, #312]	; (8001d88 <MX_GPIO_Init+0x1ac>)
 8001c50:	f043 0302 	orr.w	r3, r3, #2
 8001c54:	6313      	str	r3, [r2, #48]	; 0x30
 8001c56:	4b4c      	ldr	r3, [pc, #304]	; (8001d88 <MX_GPIO_Init+0x1ac>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	603b      	str	r3, [r7, #0]
 8001c66:	4b48      	ldr	r3, [pc, #288]	; (8001d88 <MX_GPIO_Init+0x1ac>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	4a47      	ldr	r2, [pc, #284]	; (8001d88 <MX_GPIO_Init+0x1ac>)
 8001c6c:	f043 0308 	orr.w	r3, r3, #8
 8001c70:	6313      	str	r3, [r2, #48]	; 0x30
 8001c72:	4b45      	ldr	r3, [pc, #276]	; (8001d88 <MX_GPIO_Init+0x1ac>)
 8001c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c76:	f003 0308 	and.w	r3, r3, #8
 8001c7a:	603b      	str	r3, [r7, #0]
 8001c7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2110      	movs	r1, #16
 8001c82:	4842      	ldr	r0, [pc, #264]	; (8001d8c <MX_GPIO_Init+0x1b0>)
 8001c84:	f006 ffa2 	bl	8008bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	2120      	movs	r1, #32
 8001c8c:	4840      	ldr	r0, [pc, #256]	; (8001d90 <MX_GPIO_Init+0x1b4>)
 8001c8e:	f006 ff9d 	bl	8008bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_MEM_Pin|TD1_Pin|TD2_Pin|HAWK1_Pin
 8001c92:	2200      	movs	r2, #0
 8001c94:	f64f 7180 	movw	r1, #65408	; 0xff80
 8001c98:	483e      	ldr	r0, [pc, #248]	; (8001d94 <MX_GPIO_Init+0x1b8>)
 8001c9a:	f006 ff97 	bl	8008bcc <HAL_GPIO_WritePin>
                          |HAWK2_Pin|RDY_Pin|STAT_Pin|SAVE_Pin
                          |PRGM_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin|STAY_ALIVE_Pin, GPIO_PIN_RESET);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8001ca4:	483c      	ldr	r0, [pc, #240]	; (8001d98 <MX_GPIO_Init+0x1bc>)
 8001ca6:	f006 ff91 	bl	8008bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWR_DTCT_Pin;
 8001caa:	2308      	movs	r3, #8
 8001cac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PWR_DTCT_GPIO_Port, &GPIO_InitStruct);
 8001cb6:	f107 0314 	add.w	r3, r7, #20
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4835      	ldr	r0, [pc, #212]	; (8001d94 <MX_GPIO_Init+0x1b8>)
 8001cbe:	f006 fdd3 	bl	8008868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SW_Pin;
 8001cc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_GPIO_Port, &GPIO_InitStruct);
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	482e      	ldr	r0, [pc, #184]	; (8001d90 <MX_GPIO_Init+0x1b4>)
 8001cd8:	f006 fdc6 	bl	8008868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001cdc:	2310      	movs	r3, #16
 8001cde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4826      	ldr	r0, [pc, #152]	; (8001d8c <MX_GPIO_Init+0x1b0>)
 8001cf4:	f006 fdb8 	bl	8008868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZ_Pin;
 8001cf8:	2320      	movs	r3, #32
 8001cfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d04:	2300      	movs	r3, #0
 8001d06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 8001d08:	f107 0314 	add.w	r3, r7, #20
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4820      	ldr	r0, [pc, #128]	; (8001d90 <MX_GPIO_Init+0x1b4>)
 8001d10:	f006 fdaa 	bl	8008868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = CS_MEM_Pin|TD1_Pin|TD2_Pin|HAWK1_Pin
 8001d14:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001d18:	617b      	str	r3, [r7, #20]
                          |HAWK2_Pin|RDY_Pin|STAT_Pin|SAVE_Pin
                          |PRGM_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d22:	2300      	movs	r3, #0
 8001d24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d26:	f107 0314 	add.w	r3, r7, #20
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4819      	ldr	r0, [pc, #100]	; (8001d94 <MX_GPIO_Init+0x1b8>)
 8001d2e:	f006 fd9b 	bl	8008868 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin|STAY_ALIVE_Pin;
 8001d32:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8001d36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d40:	2300      	movs	r3, #0
 8001d42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4813      	ldr	r0, [pc, #76]	; (8001d98 <MX_GPIO_Init+0x1bc>)
 8001d4c:	f006 fd8c 	bl	8008868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_DTCT_Pin;
 8001d50:	2301      	movs	r3, #1
 8001d52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d54:	2300      	movs	r3, #0
 8001d56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DTCT_GPIO_Port, &GPIO_InitStruct);
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	4619      	mov	r1, r3
 8001d62:	480e      	ldr	r0, [pc, #56]	; (8001d9c <MX_GPIO_Init+0x1c0>)
 8001d64:	f006 fd80 	bl	8008868 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENSE_Pin;
 8001d68:	2310      	movs	r3, #16
 8001d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SENSE_GPIO_Port, &GPIO_InitStruct);
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4807      	ldr	r0, [pc, #28]	; (8001d98 <MX_GPIO_Init+0x1bc>)
 8001d7c:	f006 fd74 	bl	8008868 <HAL_GPIO_Init>

}
 8001d80:	bf00      	nop
 8001d82:	3728      	adds	r7, #40	; 0x28
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40020000 	.word	0x40020000
 8001d90:	40020800 	.word	0x40020800
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40020400 	.word	0x40020400
 8001d9c:	40020c00 	.word	0x40020c00

08001da0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001da4:	4b12      	ldr	r3, [pc, #72]	; (8001df0 <MX_I2C1_Init+0x50>)
 8001da6:	4a13      	ldr	r2, [pc, #76]	; (8001df4 <MX_I2C1_Init+0x54>)
 8001da8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001daa:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <MX_I2C1_Init+0x50>)
 8001dac:	4a12      	ldr	r2, [pc, #72]	; (8001df8 <MX_I2C1_Init+0x58>)
 8001dae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001db0:	4b0f      	ldr	r3, [pc, #60]	; (8001df0 <MX_I2C1_Init+0x50>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001db6:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <MX_I2C1_Init+0x50>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dbc:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <MX_I2C1_Init+0x50>)
 8001dbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001dc2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dc4:	4b0a      	ldr	r3, [pc, #40]	; (8001df0 <MX_I2C1_Init+0x50>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001dca:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <MX_I2C1_Init+0x50>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dd0:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <MX_I2C1_Init+0x50>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dd6:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <MX_I2C1_Init+0x50>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ddc:	4804      	ldr	r0, [pc, #16]	; (8001df0 <MX_I2C1_Init+0x50>)
 8001dde:	f006 ff29 	bl	8008c34 <HAL_I2C_Init>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001de8:	f000 f93e 	bl	8002068 <Error_Handler>
  }

}
 8001dec:	bf00      	nop
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20004a0c 	.word	0x20004a0c
 8001df4:	40005400 	.word	0x40005400
 8001df8:	00061a80 	.word	0x00061a80

08001dfc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8001e00:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <MX_I2C2_Init+0x50>)
 8001e02:	4a13      	ldr	r2, [pc, #76]	; (8001e50 <MX_I2C2_Init+0x54>)
 8001e04:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001e06:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <MX_I2C2_Init+0x50>)
 8001e08:	4a12      	ldr	r2, [pc, #72]	; (8001e54 <MX_I2C2_Init+0x58>)
 8001e0a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <MX_I2C2_Init+0x50>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001e12:	4b0e      	ldr	r3, [pc, #56]	; (8001e4c <MX_I2C2_Init+0x50>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e18:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <MX_I2C2_Init+0x50>)
 8001e1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e1e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e20:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <MX_I2C2_Init+0x50>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001e26:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <MX_I2C2_Init+0x50>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e2c:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <MX_I2C2_Init+0x50>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <MX_I2C2_Init+0x50>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001e38:	4804      	ldr	r0, [pc, #16]	; (8001e4c <MX_I2C2_Init+0x50>)
 8001e3a:	f006 fefb 	bl	8008c34 <HAL_I2C_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001e44:	f000 f910 	bl	8002068 <Error_Handler>
  }

}
 8001e48:	bf00      	nop
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20004a60 	.word	0x20004a60
 8001e50:	40005800 	.word	0x40005800
 8001e54:	000186a0 	.word	0x000186a0

08001e58 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08c      	sub	sp, #48	; 0x30
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e60:	f107 031c 	add.w	r3, r7, #28
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
 8001e6e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a32      	ldr	r2, [pc, #200]	; (8001f40 <HAL_I2C_MspInit+0xe8>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d12c      	bne.n	8001ed4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61bb      	str	r3, [r7, #24]
 8001e7e:	4b31      	ldr	r3, [pc, #196]	; (8001f44 <HAL_I2C_MspInit+0xec>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	4a30      	ldr	r2, [pc, #192]	; (8001f44 <HAL_I2C_MspInit+0xec>)
 8001e84:	f043 0302 	orr.w	r3, r3, #2
 8001e88:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8a:	4b2e      	ldr	r3, [pc, #184]	; (8001f44 <HAL_I2C_MspInit+0xec>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	61bb      	str	r3, [r7, #24]
 8001e94:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e96:	23c0      	movs	r3, #192	; 0xc0
 8001e98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e9a:	2312      	movs	r3, #18
 8001e9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ea6:	2304      	movs	r3, #4
 8001ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eaa:	f107 031c 	add.w	r3, r7, #28
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4825      	ldr	r0, [pc, #148]	; (8001f48 <HAL_I2C_MspInit+0xf0>)
 8001eb2:	f006 fcd9 	bl	8008868 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	4b22      	ldr	r3, [pc, #136]	; (8001f44 <HAL_I2C_MspInit+0xec>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	4a21      	ldr	r2, [pc, #132]	; (8001f44 <HAL_I2C_MspInit+0xec>)
 8001ec0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ec6:	4b1f      	ldr	r3, [pc, #124]	; (8001f44 <HAL_I2C_MspInit+0xec>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001ed2:	e031      	b.n	8001f38 <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a1c      	ldr	r2, [pc, #112]	; (8001f4c <HAL_I2C_MspInit+0xf4>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d12c      	bne.n	8001f38 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	613b      	str	r3, [r7, #16]
 8001ee2:	4b18      	ldr	r3, [pc, #96]	; (8001f44 <HAL_I2C_MspInit+0xec>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	4a17      	ldr	r2, [pc, #92]	; (8001f44 <HAL_I2C_MspInit+0xec>)
 8001ee8:	f043 0302 	orr.w	r3, r3, #2
 8001eec:	6313      	str	r3, [r2, #48]	; 0x30
 8001eee:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <HAL_I2C_MspInit+0xec>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	613b      	str	r3, [r7, #16]
 8001ef8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001efa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f00:	2312      	movs	r3, #18
 8001f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f04:	2301      	movs	r3, #1
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f0c:	2304      	movs	r3, #4
 8001f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f10:	f107 031c 	add.w	r3, r7, #28
 8001f14:	4619      	mov	r1, r3
 8001f16:	480c      	ldr	r0, [pc, #48]	; (8001f48 <HAL_I2C_MspInit+0xf0>)
 8001f18:	f006 fca6 	bl	8008868 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <HAL_I2C_MspInit+0xec>)
 8001f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f24:	4a07      	ldr	r2, [pc, #28]	; (8001f44 <HAL_I2C_MspInit+0xec>)
 8001f26:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f2a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f2c:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <HAL_I2C_MspInit+0xec>)
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	68fb      	ldr	r3, [r7, #12]
}
 8001f38:	bf00      	nop
 8001f3a:	3730      	adds	r7, #48	; 0x30
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40005400 	.word	0x40005400
 8001f44:	40023800 	.word	0x40023800
 8001f48:	40020400 	.word	0x40020400
 8001f4c:	40005800 	.word	0x40005800

08001f50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f54:	f005 fa98 	bl	8007488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f58:	f000 f81c 	bl	8001f94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f5c:	f7ff fe3e 	bl	8001bdc <MX_GPIO_Init>
  MX_DMA_Init();
 8001f60:	f7ff fda8 	bl	8001ab4 <MX_DMA_Init>
  MX_I2C1_Init();
 8001f64:	f7ff ff1c 	bl	8001da0 <MX_I2C1_Init>
  MX_SPI2_Init();
 8001f68:	f001 fc98 	bl	800389c <MX_SPI2_Init>
  MX_ADC1_Init();
 8001f6c:	f7ff fb9a 	bl	80016a4 <MX_ADC1_Init>
  MX_I2C2_Init();
 8001f70:	f7ff ff44 	bl	8001dfc <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8001f74:	f000 ffa2 	bl	8002ebc <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 8001f78:	f001 fc5a 	bl	8003830 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001f7c:	f00b f8fc 	bl	800d178 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  turn_off_HAWKs();
 8001f80:	f7ff f82c 	bl	8000fdc <turn_off_HAWKs>
  turn_off_TDs();
 8001f84:	f7ff f85a 	bl	800103c <turn_off_TDs>

  schedulerinit();
 8001f88:	f000 f92e 	bl	80021e8 <schedulerinit>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	scheduler();
 8001f8c:	f000 fa90 	bl	80024b0 <scheduler>
 8001f90:	e7fc      	b.n	8001f8c <main+0x3c>
	...

08001f94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b094      	sub	sp, #80	; 0x50
 8001f98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f9a:	f107 0320 	add.w	r3, r7, #32
 8001f9e:	2230      	movs	r2, #48	; 0x30
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f00e faff 	bl	80105a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fa8:	f107 030c 	add.w	r3, r7, #12
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
 8001fb4:	60da      	str	r2, [r3, #12]
 8001fb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60bb      	str	r3, [r7, #8]
 8001fbc:	4b28      	ldr	r3, [pc, #160]	; (8002060 <SystemClock_Config+0xcc>)
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc0:	4a27      	ldr	r2, [pc, #156]	; (8002060 <SystemClock_Config+0xcc>)
 8001fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc6:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc8:	4b25      	ldr	r3, [pc, #148]	; (8002060 <SystemClock_Config+0xcc>)
 8001fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	607b      	str	r3, [r7, #4]
 8001fd8:	4b22      	ldr	r3, [pc, #136]	; (8002064 <SystemClock_Config+0xd0>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a21      	ldr	r2, [pc, #132]	; (8002064 <SystemClock_Config+0xd0>)
 8001fde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fe2:	6013      	str	r3, [r2, #0]
 8001fe4:	4b1f      	ldr	r3, [pc, #124]	; (8002064 <SystemClock_Config+0xd0>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fec:	607b      	str	r3, [r7, #4]
 8001fee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ff8:	2310      	movs	r3, #16
 8001ffa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002000:	2300      	movs	r3, #0
 8002002:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002004:	2308      	movs	r3, #8
 8002006:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002008:	23a8      	movs	r3, #168	; 0xa8
 800200a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800200c:	2302      	movs	r3, #2
 800200e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002010:	2307      	movs	r3, #7
 8002012:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002014:	f107 0320 	add.w	r3, r7, #32
 8002018:	4618      	mov	r0, r3
 800201a:	f007 fecf 	bl	8009dbc <HAL_RCC_OscConfig>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002024:	f000 f820 	bl	8002068 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002028:	230f      	movs	r3, #15
 800202a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800202c:	2302      	movs	r3, #2
 800202e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002034:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002038:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800203a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800203e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002040:	f107 030c 	add.w	r3, r7, #12
 8002044:	2105      	movs	r1, #5
 8002046:	4618      	mov	r0, r3
 8002048:	f008 f928 	bl	800a29c <HAL_RCC_ClockConfig>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002052:	f000 f809 	bl	8002068 <Error_Handler>
  }
}
 8002056:	bf00      	nop
 8002058:	3750      	adds	r7, #80	; 0x50
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40023800 	.word	0x40023800
 8002064:	40007000 	.word	0x40007000

08002068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800206c:	bf00      	nop
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr

08002076 <getNextExecution>:
float Ay2[FAKE_FILE_LEN];
float Az2[FAKE_FILE_LEN];

float launch_detect_buffer[5] = {0.0};

uint32_t getNextExecution(task_t * task){
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
	return task->last_call + task->interval;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	4413      	add	r3, r2
}
 8002088:	4618      	mov	r0, r3
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <launch_detect>:

uint8_t launch_detect(float * a1, float * a2){
 8002094:	b580      	push	{r7, lr}
 8002096:	ed2d 8b02 	vpush	{d8}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
	for (int i = 1; i < 5; i++){
 80020a2:	2301      	movs	r3, #1
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	e00d      	b.n	80020c4 <launch_detect+0x30>
		launch_detect_buffer[i-1] = launch_detect_buffer[i];
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	494c      	ldr	r1, [pc, #304]	; (80021e0 <launch_detect+0x14c>)
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	0092      	lsls	r2, r2, #2
 80020b2:	440a      	add	r2, r1
 80020b4:	6812      	ldr	r2, [r2, #0]
 80020b6:	494a      	ldr	r1, [pc, #296]	; (80021e0 <launch_detect+0x14c>)
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	440b      	add	r3, r1
 80020bc:	601a      	str	r2, [r3, #0]
	for (int i = 1; i < 5; i++){
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	3301      	adds	r3, #1
 80020c2:	617b      	str	r3, [r7, #20]
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	ddee      	ble.n	80020a8 <launch_detect+0x14>
	}
	launch_detect_buffer[4] = (sqrtf(a1[1]*a1[1] + a1[2]*a1[2] + a1[3]*a1[3]) + sqrtf(a2[1]*a2[1] + a2[2]*a2[2] + a2[3]*a2[3])) / 2;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3304      	adds	r3, #4
 80020ce:	ed93 7a00 	vldr	s14, [r3]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	3304      	adds	r3, #4
 80020d6:	edd3 7a00 	vldr	s15, [r3]
 80020da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3308      	adds	r3, #8
 80020e2:	edd3 6a00 	vldr	s13, [r3]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3308      	adds	r3, #8
 80020ea:	edd3 7a00 	vldr	s15, [r3]
 80020ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	330c      	adds	r3, #12
 80020fa:	edd3 6a00 	vldr	s13, [r3]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	330c      	adds	r3, #12
 8002102:	edd3 7a00 	vldr	s15, [r3]
 8002106:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800210a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800210e:	eeb0 0a67 	vmov.f32	s0, s15
 8002112:	f011 fabd 	bl	8013690 <sqrtf>
 8002116:	eeb0 8a40 	vmov.f32	s16, s0
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	3304      	adds	r3, #4
 800211e:	ed93 7a00 	vldr	s14, [r3]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	3304      	adds	r3, #4
 8002126:	edd3 7a00 	vldr	s15, [r3]
 800212a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	3308      	adds	r3, #8
 8002132:	edd3 6a00 	vldr	s13, [r3]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	3308      	adds	r3, #8
 800213a:	edd3 7a00 	vldr	s15, [r3]
 800213e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002142:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	330c      	adds	r3, #12
 800214a:	edd3 6a00 	vldr	s13, [r3]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	330c      	adds	r3, #12
 8002152:	edd3 7a00 	vldr	s15, [r3]
 8002156:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800215a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800215e:	eeb0 0a67 	vmov.f32	s0, s15
 8002162:	f011 fa95 	bl	8013690 <sqrtf>
 8002166:	eef0 7a40 	vmov.f32	s15, s0
 800216a:	ee38 7a27 	vadd.f32	s14, s16, s15
 800216e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002172:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002176:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <launch_detect+0x14c>)
 8002178:	edc3 7a04 	vstr	s15, [r3, #16]
	float sum_a = 0;
 800217c:	f04f 0300 	mov.w	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 5; i++){
 8002182:	2300      	movs	r3, #0
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	e00e      	b.n	80021a6 <launch_detect+0x112>
		sum_a += launch_detect_buffer[i];
 8002188:	4a15      	ldr	r2, [pc, #84]	; (80021e0 <launch_detect+0x14c>)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	edd3 7a00 	vldr	s15, [r3]
 8002194:	ed97 7a04 	vldr	s14, [r7, #16]
 8002198:	ee77 7a27 	vadd.f32	s15, s14, s15
 800219c:	edc7 7a04 	vstr	s15, [r7, #16]
	for (int i = 0; i < 5; i++){
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	3301      	adds	r3, #1
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	dded      	ble.n	8002188 <launch_detect+0xf4>
	}
	sum_a /= 5;
 80021ac:	ed97 7a04 	vldr	s14, [r7, #16]
 80021b0:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80021b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021b8:	edc7 7a04 	vstr	s15, [r7, #16]

	// if average of acceleration over 5 measurements is higher than 4G, launch has been detected.
	if (sum_a >= 40) return 1;
 80021bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80021c0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80021e4 <launch_detect+0x150>
 80021c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021cc:	db01      	blt.n	80021d2 <launch_detect+0x13e>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <launch_detect+0x140>
	return 0;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	ecbd 8b02 	vpop	{d8}
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	20000818 	.word	0x20000818
 80021e4:	42200000 	.word	0x42200000

080021e8 <schedulerinit>:

void schedulerinit () {
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af02      	add	r7, sp, #8

	//initialize all devices
	ms5607_init(&BARO1);
 80021ee:	4892      	ldr	r0, [pc, #584]	; (8002438 <schedulerinit+0x250>)
 80021f0:	f002 fac8 	bl	8004784 <ms5607_init>
	ms5607_init(&BARO2);
 80021f4:	4891      	ldr	r0, [pc, #580]	; (800243c <schedulerinit+0x254>)
 80021f6:	f002 fac5 	bl	8004784 <ms5607_init>
	sht31_init(&TEMP);
 80021fa:	4891      	ldr	r0, [pc, #580]	; (8002440 <schedulerinit+0x258>)
 80021fc:	f002 fe6a 	bl	8004ed4 <sht31_init>
	icm20601_init(&IMU1);
 8002200:	4890      	ldr	r0, [pc, #576]	; (8002444 <schedulerinit+0x25c>)
 8002202:	f002 f816 	bl	8004232 <icm20601_init>
	icm20601_init(&IMU2);
 8002206:	4890      	ldr	r0, [pc, #576]	; (8002448 <schedulerinit+0x260>)
 8002208:	f002 f813 	bl	8004232 <icm20601_init>
	h3l_init(&ACCEL);
 800220c:	488f      	ldr	r0, [pc, #572]	; (800244c <schedulerinit+0x264>)
 800220e:	f001 fd4d 	bl	8003cac <h3l_init>
	init_ADC();
 8002212:	f7fe ff25 	bl	8001060 <init_ADC>

	DWT_Delay_Init();
 8002216:	f7ff fc7d 	bl	8001b14 <DWT_Delay_Init>


	// cycle through LEDs

	turn_on(&STAT);
 800221a:	488d      	ldr	r0, [pc, #564]	; (8002450 <schedulerinit+0x268>)
 800221c:	f002 fa92 	bl	8004744 <turn_on>
	HAL_Delay(300);
 8002220:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002224:	f005 f9a2 	bl	800756c <HAL_Delay>
	turn_on(&SAVE);
 8002228:	488a      	ldr	r0, [pc, #552]	; (8002454 <schedulerinit+0x26c>)
 800222a:	f002 fa8b 	bl	8004744 <turn_on>
	HAL_Delay(300);
 800222e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002232:	f005 f99b 	bl	800756c <HAL_Delay>
	turn_on(&PRGM);
 8002236:	4888      	ldr	r0, [pc, #544]	; (8002458 <schedulerinit+0x270>)
 8002238:	f002 fa84 	bl	8004744 <turn_on>
	HAL_Delay(300);
 800223c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002240:	f005 f994 	bl	800756c <HAL_Delay>
	turn_on(&RDY);
 8002244:	4885      	ldr	r0, [pc, #532]	; (800245c <schedulerinit+0x274>)
 8002246:	f002 fa7d 	bl	8004744 <turn_on>
	HAL_Delay(300);
 800224a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800224e:	f005 f98d 	bl	800756c <HAL_Delay>

	stay_alive();
 8002252:	f7fe fe99 	bl	8000f88 <stay_alive>

	turn_off(&STAT);
 8002256:	487e      	ldr	r0, [pc, #504]	; (8002450 <schedulerinit+0x268>)
 8002258:	f002 fa84 	bl	8004764 <turn_off>
	turn_off(&SAVE);
 800225c:	487d      	ldr	r0, [pc, #500]	; (8002454 <schedulerinit+0x26c>)
 800225e:	f002 fa81 	bl	8004764 <turn_off>
	turn_off(&PRGM);
 8002262:	487d      	ldr	r0, [pc, #500]	; (8002458 <schedulerinit+0x270>)
 8002264:	f002 fa7e 	bl	8004764 <turn_off>
	turn_off(&RDY);
 8002268:	487c      	ldr	r0, [pc, #496]	; (800245c <schedulerinit+0x274>)
 800226a:	f002 fa7b 	bl	8004764 <turn_off>

	// initialize SD card
	turn_on(&SAVE);
 800226e:	4879      	ldr	r0, [pc, #484]	; (8002454 <schedulerinit+0x26c>)
 8002270:	f002 fa68 	bl	8004744 <turn_on>
	SD_state = init_sd(&num_dat_file, &num_log_file);
 8002274:	497a      	ldr	r1, [pc, #488]	; (8002460 <schedulerinit+0x278>)
 8002276:	487b      	ldr	r0, [pc, #492]	; (8002464 <schedulerinit+0x27c>)
 8002278:	f7ff f83e 	bl	80012f8 <init_sd>
 800227c:	4603      	mov	r3, r0
 800227e:	461a      	mov	r2, r3
 8002280:	4b79      	ldr	r3, [pc, #484]	; (8002468 <schedulerinit+0x280>)
 8002282:	701a      	strb	r2, [r3, #0]
	if (SD_state == 0){
 8002284:	4b78      	ldr	r3, [pc, #480]	; (8002468 <schedulerinit+0x280>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d103      	bne.n	8002294 <schedulerinit+0xac>
		turn_off(&SAVE);
 800228c:	4871      	ldr	r0, [pc, #452]	; (8002454 <schedulerinit+0x26c>)
 800228e:	f002 fa69 	bl	8004764 <turn_off>
 8002292:	e00b      	b.n	80022ac <schedulerinit+0xc4>
	} else {
		turn_on(&RDY);
 8002294:	4871      	ldr	r0, [pc, #452]	; (800245c <schedulerinit+0x274>)
 8002296:	f002 fa55 	bl	8004744 <turn_on>
		HAL_Delay(100);
 800229a:	2064      	movs	r0, #100	; 0x64
 800229c:	f005 f966 	bl	800756c <HAL_Delay>
		turn_off(&RDY);
 80022a0:	486e      	ldr	r0, [pc, #440]	; (800245c <schedulerinit+0x274>)
 80022a2:	f002 fa5f 	bl	8004764 <turn_off>
		HAL_Delay(100);
 80022a6:	2064      	movs	r0, #100	; 0x64
 80022a8:	f005 f960 	bl	800756c <HAL_Delay>
	}
#if DEBUG_PRINT == 1
	printf("num_dat_file: %hu \n",num_dat_file);
	printf("num_log_file: %hu \n",num_log_file);
#endif
	num_log_file ++;
 80022ac:	4b6c      	ldr	r3, [pc, #432]	; (8002460 <schedulerinit+0x278>)
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	3301      	adds	r3, #1
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	4b6a      	ldr	r3, [pc, #424]	; (8002460 <schedulerinit+0x278>)
 80022b6:	801a      	strh	r2, [r3, #0]
	num_dat_file ++;
 80022b8:	4b6a      	ldr	r3, [pc, #424]	; (8002464 <schedulerinit+0x27c>)
 80022ba:	881b      	ldrh	r3, [r3, #0]
 80022bc:	3301      	adds	r3, #1
 80022be:	b29a      	uxth	r2, r3
 80022c0:	4b68      	ldr	r3, [pc, #416]	; (8002464 <schedulerinit+0x27c>)
 80022c2:	801a      	strh	r2, [r3, #0]

	sprintf(FILE_NAME,"FL%04u.CSV", num_dat_file);
 80022c4:	4b67      	ldr	r3, [pc, #412]	; (8002464 <schedulerinit+0x27c>)
 80022c6:	881b      	ldrh	r3, [r3, #0]
 80022c8:	461a      	mov	r2, r3
 80022ca:	4968      	ldr	r1, [pc, #416]	; (800246c <schedulerinit+0x284>)
 80022cc:	4868      	ldr	r0, [pc, #416]	; (8002470 <schedulerinit+0x288>)
 80022ce:	f00e fe4b 	bl	8010f68 <siprintf>
#if DEBUG_PRINT == 1
	printf("saving %s ...",FILE_NAME);
#endif

	sprintf(LOG_NAME,"LOG%02u.CSV", num_log_file);
 80022d2:	4b63      	ldr	r3, [pc, #396]	; (8002460 <schedulerinit+0x278>)
 80022d4:	881b      	ldrh	r3, [r3, #0]
 80022d6:	461a      	mov	r2, r3
 80022d8:	4966      	ldr	r1, [pc, #408]	; (8002474 <schedulerinit+0x28c>)
 80022da:	4867      	ldr	r0, [pc, #412]	; (8002478 <schedulerinit+0x290>)
 80022dc:	f00e fe44 	bl	8010f68 <siprintf>
#if DEBUG_PRINT == 1
	printf("saving %s ...",LOG_NAME);
#endif

	SD_state = init_file(FILE_NAME, LOG_NAME);
 80022e0:	4965      	ldr	r1, [pc, #404]	; (8002478 <schedulerinit+0x290>)
 80022e2:	4863      	ldr	r0, [pc, #396]	; (8002470 <schedulerinit+0x288>)
 80022e4:	f7ff f8c2 	bl	800146c <init_file>
 80022e8:	4603      	mov	r3, r0
 80022ea:	461a      	mov	r2, r3
 80022ec:	4b5e      	ldr	r3, [pc, #376]	; (8002468 <schedulerinit+0x280>)
 80022ee:	701a      	strb	r2, [r3, #0]

	if (SD_state == 0){
 80022f0:	4b5d      	ldr	r3, [pc, #372]	; (8002468 <schedulerinit+0x280>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d103      	bne.n	8002300 <schedulerinit+0x118>
		turn_off(&SAVE);
 80022f8:	4856      	ldr	r0, [pc, #344]	; (8002454 <schedulerinit+0x26c>)
 80022fa:	f002 fa33 	bl	8004764 <turn_off>
 80022fe:	e00b      	b.n	8002318 <schedulerinit+0x130>
	} else {
		turn_on(&RDY);
 8002300:	4856      	ldr	r0, [pc, #344]	; (800245c <schedulerinit+0x274>)
 8002302:	f002 fa1f 	bl	8004744 <turn_on>
		HAL_Delay(100);
 8002306:	2064      	movs	r0, #100	; 0x64
 8002308:	f005 f930 	bl	800756c <HAL_Delay>
		turn_off(&RDY);
 800230c:	4853      	ldr	r0, [pc, #332]	; (800245c <schedulerinit+0x274>)
 800230e:	f002 fa29 	bl	8004764 <turn_off>
		HAL_Delay(100);
 8002312:	2064      	movs	r0, #100	; 0x64
 8002314:	f005 f92a 	bl	800756c <HAL_Delay>
	}
	turn_on(&RDY);
 8002318:	4850      	ldr	r0, [pc, #320]	; (800245c <schedulerinit+0x274>)
 800231a:	f002 fa13 	bl	8004744 <turn_on>
	HAL_Delay(1000);
 800231e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002322:	f005 f923 	bl	800756c <HAL_Delay>

	bufclear(buffer);
 8002326:	4855      	ldr	r0, [pc, #340]	; (800247c <schedulerinit+0x294>)
 8002328:	f7fe ffcc 	bl	80012c4 <bufclear>
	sprintf(buffer, "%ld, SCHEDULER INIT OK, - \n", HAL_GetTick());
 800232c:	f005 f912 	bl	8007554 <HAL_GetTick>
 8002330:	4603      	mov	r3, r0
 8002332:	461a      	mov	r2, r3
 8002334:	4952      	ldr	r1, [pc, #328]	; (8002480 <schedulerinit+0x298>)
 8002336:	4851      	ldr	r0, [pc, #324]	; (800247c <schedulerinit+0x294>)
 8002338:	f00e fe16 	bl	8010f68 <siprintf>
	log_to_SD(LOG_NAME, buffer);
 800233c:	494f      	ldr	r1, [pc, #316]	; (800247c <schedulerinit+0x294>)
 800233e:	484e      	ldr	r0, [pc, #312]	; (8002478 <schedulerinit+0x290>)
 8002340:	f7ff f96a 	bl	8001618 <log_to_SD>
		read_from_SD("FDATAHE.CSV", TIME, P1, P2, Ax1, Ay1, Az1, Ax2, Ay2, Az2);
#endif

	// selftest

	read_ADC(adc_dat);
 8002344:	484f      	ldr	r0, [pc, #316]	; (8002484 <schedulerinit+0x29c>)
 8002346:	f7fe fe9b 	bl	8001080 <read_ADC>
	V_TD1 = adc_dat[0];
 800234a:	4b4e      	ldr	r3, [pc, #312]	; (8002484 <schedulerinit+0x29c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a4e      	ldr	r2, [pc, #312]	; (8002488 <schedulerinit+0x2a0>)
 8002350:	6013      	str	r3, [r2, #0]
	V_TD2 = adc_dat[1];
 8002352:	4b4c      	ldr	r3, [pc, #304]	; (8002484 <schedulerinit+0x29c>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	4a4d      	ldr	r2, [pc, #308]	; (800248c <schedulerinit+0x2a4>)
 8002358:	6013      	str	r3, [r2, #0]
	V_LDR = adc_dat[2];
 800235a:	4b4a      	ldr	r3, [pc, #296]	; (8002484 <schedulerinit+0x29c>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	4a4c      	ldr	r2, [pc, #304]	; (8002490 <schedulerinit+0x2a8>)
 8002360:	6013      	str	r3, [r2, #0]
	I_BAT1 = adc_dat[3];
 8002362:	4b48      	ldr	r3, [pc, #288]	; (8002484 <schedulerinit+0x29c>)
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	4a4b      	ldr	r2, [pc, #300]	; (8002494 <schedulerinit+0x2ac>)
 8002368:	6013      	str	r3, [r2, #0]
	I_BAT2 = adc_dat[4];
 800236a:	4b46      	ldr	r3, [pc, #280]	; (8002484 <schedulerinit+0x29c>)
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	4a4a      	ldr	r2, [pc, #296]	; (8002498 <schedulerinit+0x2b0>)
 8002370:	6013      	str	r3, [r2, #0]
	V_BAT1 = adc_dat[5];
 8002372:	4b44      	ldr	r3, [pc, #272]	; (8002484 <schedulerinit+0x29c>)
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	4a49      	ldr	r2, [pc, #292]	; (800249c <schedulerinit+0x2b4>)
 8002378:	6013      	str	r3, [r2, #0]
	V_BAT2 = adc_dat[6];
 800237a:	4b42      	ldr	r3, [pc, #264]	; (8002484 <schedulerinit+0x29c>)
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	4a48      	ldr	r2, [pc, #288]	; (80024a0 <schedulerinit+0x2b8>)
 8002380:	6013      	str	r3, [r2, #0]
	t_cpu = adc_dat[7];
 8002382:	4b40      	ldr	r3, [pc, #256]	; (8002484 <schedulerinit+0x29c>)
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	4a47      	ldr	r2, [pc, #284]	; (80024a4 <schedulerinit+0x2bc>)
 8002388:	6013      	str	r3, [r2, #0]

	selftest(V_TD1, V_TD2, V_BAT1, V_BAT2, V_LDR);
 800238a:	4b3f      	ldr	r3, [pc, #252]	; (8002488 <schedulerinit+0x2a0>)
 800238c:	edd3 7a00 	vldr	s15, [r3]
 8002390:	4b3e      	ldr	r3, [pc, #248]	; (800248c <schedulerinit+0x2a4>)
 8002392:	ed93 7a00 	vldr	s14, [r3]
 8002396:	4b41      	ldr	r3, [pc, #260]	; (800249c <schedulerinit+0x2b4>)
 8002398:	edd3 6a00 	vldr	s13, [r3]
 800239c:	4b40      	ldr	r3, [pc, #256]	; (80024a0 <schedulerinit+0x2b8>)
 800239e:	ed93 6a00 	vldr	s12, [r3]
 80023a2:	4b3b      	ldr	r3, [pc, #236]	; (8002490 <schedulerinit+0x2a8>)
 80023a4:	edd3 5a00 	vldr	s11, [r3]
 80023a8:	eeb0 2a65 	vmov.f32	s4, s11
 80023ac:	eef0 1a46 	vmov.f32	s3, s12
 80023b0:	eeb0 1a66 	vmov.f32	s2, s13
 80023b4:	eef0 0a47 	vmov.f32	s1, s14
 80023b8:	eeb0 0a67 	vmov.f32	s0, s15
 80023bc:	f001 f98c 	bl	80036d8 <selftest>

	// initialize state estimation with environment values

	float ground_pressure = 0;
 80023c0:	f04f 0300 	mov.w	r3, #0
 80023c4:	60bb      	str	r3, [r7, #8]
	float ground_temperature = 0;
 80023c6:	f04f 0300 	mov.w	r3, #0
 80023ca:	607b      	str	r3, [r7, #4]
	uint8_t passed = 0;
 80023cc:	2300      	movs	r3, #0
 80023ce:	73fb      	strb	r3, [r7, #15]
	passed += config_baro(&TEMP, &BARO1, &BARO2, &ground_temperature, &ground_pressure);
 80023d0:	1d3a      	adds	r2, r7, #4
 80023d2:	f107 0308 	add.w	r3, r7, #8
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	4613      	mov	r3, r2
 80023da:	4a18      	ldr	r2, [pc, #96]	; (800243c <schedulerinit+0x254>)
 80023dc:	4916      	ldr	r1, [pc, #88]	; (8002438 <schedulerinit+0x250>)
 80023de:	4818      	ldr	r0, [pc, #96]	; (8002440 <schedulerinit+0x258>)
 80023e0:	f000 ff26 	bl	8003230 <config_baro>
 80023e4:	4603      	mov	r3, r0
 80023e6:	461a      	mov	r2, r3
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
 80023ea:	4413      	add	r3, r2
 80023ec:	73fb      	strb	r3, [r7, #15]
	passed += config_imu(&IMU1, &IMU2);
 80023ee:	4916      	ldr	r1, [pc, #88]	; (8002448 <schedulerinit+0x260>)
 80023f0:	4814      	ldr	r0, [pc, #80]	; (8002444 <schedulerinit+0x25c>)
 80023f2:	f001 f847 	bl	8003484 <config_imu>
 80023f6:	4603      	mov	r3, r0
 80023f8:	461a      	mov	r2, r3
 80023fa:	7bfb      	ldrb	r3, [r7, #15]
 80023fc:	4413      	add	r3, r2
 80023fe:	73fb      	strb	r3, [r7, #15]

	if (passed != 2){
 8002400:	7bfb      	ldrb	r3, [r7, #15]
 8002402:	2b02      	cmp	r3, #2
 8002404:	d002      	beq.n	800240c <schedulerinit+0x224>
		// sound error
		if (IGNORE_ERRORS == 0){
			while (1){
				play_FAIL_sound();
 8002406:	f7ff fb1b 	bl	8001a40 <play_FAIL_sound>
 800240a:	e7fc      	b.n	8002406 <schedulerinit+0x21e>
			}
		}
	}
	play_OK_sound();
 800240c:	f7ff faf4 	bl	80019f8 <play_OK_sound>
		ground_pressure = 86172.00;
		//ground_pressure = 101327;
		ground_temperature = 20;
#endif

	reset_state_est_state(ground_pressure, ground_temperature, &state_est_state);
 8002410:	edd7 7a02 	vldr	s15, [r7, #8]
 8002414:	ed97 7a01 	vldr	s14, [r7, #4]
 8002418:	4823      	ldr	r0, [pc, #140]	; (80024a8 <schedulerinit+0x2c0>)
 800241a:	eef0 0a47 	vmov.f32	s1, s14
 800241e:	eeb0 0a67 	vmov.f32	s0, s15
 8002422:	f004 fa8d 	bl	8006940 <reset_state_est_state>
	t0 = HAL_GetTick();
 8002426:	f005 f895 	bl	8007554 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	4b1f      	ldr	r3, [pc, #124]	; (80024ac <schedulerinit+0x2c4>)
 800242e:	601a      	str	r2, [r3, #0]
}
 8002430:	bf00      	nop
 8002432:	3710      	adds	r7, #16
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	200000d4 	.word	0x200000d4
 800243c:	200000f4 	.word	0x200000f4
 8002440:	20000134 	.word	0x20000134
 8002444:	20000114 	.word	0x20000114
 8002448:	20000124 	.word	0x20000124
 800244c:	20000144 	.word	0x20000144
 8002450:	200000b4 	.word	0x200000b4
 8002454:	200000bc 	.word	0x200000bc
 8002458:	200000c4 	.word	0x200000c4
 800245c:	200000cc 	.word	0x200000cc
 8002460:	2000038a 	.word	0x2000038a
 8002464:	20000388 	.word	0x20000388
 8002468:	2000038c 	.word	0x2000038c
 800246c:	08014db0 	.word	0x08014db0
 8002470:	20015ab0 	.word	0x20015ab0
 8002474:	08014dbc 	.word	0x08014dbc
 8002478:	2000861c 	.word	0x2000861c
 800247c:	2001387c 	.word	0x2001387c
 8002480:	08014dc8 	.word	0x08014dc8
 8002484:	20013ce0 	.word	0x20013ce0
 8002488:	2000c19c 	.word	0x2000c19c
 800248c:	2000fd0c 	.word	0x2000fd0c
 8002490:	20013c80 	.word	0x20013c80
 8002494:	2000fd10 	.word	0x2000fd10
 8002498:	20013c88 	.word	0x20013c88
 800249c:	20013cac 	.word	0x20013cac
 80024a0:	2000fd18 	.word	0x2000fd18
 80024a4:	20004ab4 	.word	0x20004ab4
 80024a8:	20000398 	.word	0x20000398
 80024ac:	20013ca8 	.word	0x20013ca8

080024b0 <scheduler>:

void scheduler (){
 80024b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024b4:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80024b8:	af48      	add	r7, sp, #288	; 0x120

	tick = HAL_GetTick();
 80024ba:	f005 f84b 	bl	8007554 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	4b52      	ldr	r3, [pc, #328]	; (800260c <scheduler+0x15c>)
 80024c2:	601a      	str	r2, [r3, #0]
	counter ++;
 80024c4:	4b52      	ldr	r3, [pc, #328]	; (8002610 <scheduler+0x160>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	3301      	adds	r3, #1
 80024ca:	4a51      	ldr	r2, [pc, #324]	; (8002610 <scheduler+0x160>)
 80024cc:	6013      	str	r3, [r2, #0]

		tick = TIME[counter];
		printf("FAKE DATA LINE %ld \n",counter);
#endif
#if FAKE_DATA == 0
		if (counter > MAX_FILE_SIZE){
 80024ce:	4b50      	ldr	r3, [pc, #320]	; (8002610 <scheduler+0x160>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2b64      	cmp	r3, #100	; 0x64
 80024d4:	d90f      	bls.n	80024f6 <scheduler+0x46>
			counter = 0;
 80024d6:	4b4e      	ldr	r3, [pc, #312]	; (8002610 <scheduler+0x160>)
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
			num_dat_file ++;
 80024dc:	4b4d      	ldr	r3, [pc, #308]	; (8002614 <scheduler+0x164>)
 80024de:	881b      	ldrh	r3, [r3, #0]
 80024e0:	3301      	adds	r3, #1
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	4b4b      	ldr	r3, [pc, #300]	; (8002614 <scheduler+0x164>)
 80024e6:	801a      	strh	r2, [r3, #0]
			sprintf(FILE_NAME,"FL%04u.CSV", num_dat_file);
 80024e8:	4b4a      	ldr	r3, [pc, #296]	; (8002614 <scheduler+0x164>)
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	461a      	mov	r2, r3
 80024ee:	494a      	ldr	r1, [pc, #296]	; (8002618 <scheduler+0x168>)
 80024f0:	484a      	ldr	r0, [pc, #296]	; (800261c <scheduler+0x16c>)
 80024f2:	f00e fd39 	bl	8010f68 <siprintf>
		}
#endif

	// TASK LED
	// cool light show! :)
	if(tick >= getNextExecution(&RDY_TASK)){
 80024f6:	484a      	ldr	r0, [pc, #296]	; (8002620 <scheduler+0x170>)
 80024f8:	f7ff fdbd 	bl	8002076 <getNextExecution>
 80024fc:	4602      	mov	r2, r0
 80024fe:	4b43      	ldr	r3, [pc, #268]	; (800260c <scheduler+0x15c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	429a      	cmp	r2, r3
 8002504:	d806      	bhi.n	8002514 <scheduler+0x64>
		RDY_TASK.last_call = tick;
 8002506:	4b41      	ldr	r3, [pc, #260]	; (800260c <scheduler+0x15c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a45      	ldr	r2, [pc, #276]	; (8002620 <scheduler+0x170>)
 800250c:	6013      	str	r3, [r2, #0]
		toggle(&RDY);
 800250e:	4845      	ldr	r0, [pc, #276]	; (8002624 <scheduler+0x174>)
 8002510:	f002 f908 	bl	8004724 <toggle>
	}
	if(tick >= getNextExecution(&SAVE_TASK)){
 8002514:	4844      	ldr	r0, [pc, #272]	; (8002628 <scheduler+0x178>)
 8002516:	f7ff fdae 	bl	8002076 <getNextExecution>
 800251a:	4602      	mov	r2, r0
 800251c:	4b3b      	ldr	r3, [pc, #236]	; (800260c <scheduler+0x15c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	429a      	cmp	r2, r3
 8002522:	d806      	bhi.n	8002532 <scheduler+0x82>
		SAVE_TASK.last_call = tick;
 8002524:	4b39      	ldr	r3, [pc, #228]	; (800260c <scheduler+0x15c>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a3f      	ldr	r2, [pc, #252]	; (8002628 <scheduler+0x178>)
 800252a:	6013      	str	r3, [r2, #0]
		toggle(&SAVE);
 800252c:	483f      	ldr	r0, [pc, #252]	; (800262c <scheduler+0x17c>)
 800252e:	f002 f8f9 	bl	8004724 <toggle>
	}
	if(tick >= getNextExecution(&STAT_TASK)){
 8002532:	483f      	ldr	r0, [pc, #252]	; (8002630 <scheduler+0x180>)
 8002534:	f7ff fd9f 	bl	8002076 <getNextExecution>
 8002538:	4602      	mov	r2, r0
 800253a:	4b34      	ldr	r3, [pc, #208]	; (800260c <scheduler+0x15c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	429a      	cmp	r2, r3
 8002540:	d806      	bhi.n	8002550 <scheduler+0xa0>
		STAT_TASK.last_call = tick;
 8002542:	4b32      	ldr	r3, [pc, #200]	; (800260c <scheduler+0x15c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a3a      	ldr	r2, [pc, #232]	; (8002630 <scheduler+0x180>)
 8002548:	6013      	str	r3, [r2, #0]
		toggle(&STAT);
 800254a:	483a      	ldr	r0, [pc, #232]	; (8002634 <scheduler+0x184>)
 800254c:	f002 f8ea 	bl	8004724 <toggle>
	}
	if(tick >= getNextExecution(&PRGM_TASK)){
 8002550:	4839      	ldr	r0, [pc, #228]	; (8002638 <scheduler+0x188>)
 8002552:	f7ff fd90 	bl	8002076 <getNextExecution>
 8002556:	4602      	mov	r2, r0
 8002558:	4b2c      	ldr	r3, [pc, #176]	; (800260c <scheduler+0x15c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	429a      	cmp	r2, r3
 800255e:	d806      	bhi.n	800256e <scheduler+0xbe>
		PRGM_TASK.last_call = tick;
 8002560:	4b2a      	ldr	r3, [pc, #168]	; (800260c <scheduler+0x15c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a34      	ldr	r2, [pc, #208]	; (8002638 <scheduler+0x188>)
 8002566:	6013      	str	r3, [r2, #0]
		toggle(&PRGM);
 8002568:	4834      	ldr	r0, [pc, #208]	; (800263c <scheduler+0x18c>)
 800256a:	f002 f8db 	bl	8004724 <toggle>
	}


	// TASK SHT
	if(tick >= getNextExecution(&SHT_TASK)){
 800256e:	4834      	ldr	r0, [pc, #208]	; (8002640 <scheduler+0x190>)
 8002570:	f7ff fd81 	bl	8002076 <getNextExecution>
 8002574:	4602      	mov	r2, r0
 8002576:	4b25      	ldr	r3, [pc, #148]	; (800260c <scheduler+0x15c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d808      	bhi.n	8002590 <scheduler+0xe0>
		SHT_TASK.last_call = tick;
 800257e:	4b23      	ldr	r3, [pc, #140]	; (800260c <scheduler+0x15c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a2f      	ldr	r2, [pc, #188]	; (8002640 <scheduler+0x190>)
 8002584:	6013      	str	r3, [r2, #0]
		sht31_read(&TEMP, t_val, t_buf);
 8002586:	4a2f      	ldr	r2, [pc, #188]	; (8002644 <scheduler+0x194>)
 8002588:	492f      	ldr	r1, [pc, #188]	; (8002648 <scheduler+0x198>)
 800258a:	4830      	ldr	r0, [pc, #192]	; (800264c <scheduler+0x19c>)
 800258c:	f002 fcf8 	bl	8004f80 <sht31_read>
	}

	// TASK BARO
	if(tick >= getNextExecution(&BARO_TASK)){
 8002590:	482f      	ldr	r0, [pc, #188]	; (8002650 <scheduler+0x1a0>)
 8002592:	f7ff fd70 	bl	8002076 <getNextExecution>
 8002596:	4602      	mov	r2, r0
 8002598:	4b1c      	ldr	r3, [pc, #112]	; (800260c <scheduler+0x15c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d869      	bhi.n	8002674 <scheduler+0x1c4>

		// TODO detect invalid values!

		switch(BARO_TASK.stage){
 80025a0:	4b2b      	ldr	r3, [pc, #172]	; (8002650 <scheduler+0x1a0>)
 80025a2:	7a1b      	ldrb	r3, [r3, #8]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d002      	beq.n	80025ae <scheduler+0xfe>
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d010      	beq.n	80025ce <scheduler+0x11e>
 80025ac:	e029      	b.n	8002602 <scheduler+0x152>
			case MS_TEMPERATURE_REQ:
				ms5607_prep_pressure(&BARO1, raw_data1);
 80025ae:	4929      	ldr	r1, [pc, #164]	; (8002654 <scheduler+0x1a4>)
 80025b0:	4829      	ldr	r0, [pc, #164]	; (8002658 <scheduler+0x1a8>)
 80025b2:	f002 f995 	bl	80048e0 <ms5607_prep_pressure>
				ms5607_prep_pressure(&BARO2, raw_data2);
 80025b6:	4929      	ldr	r1, [pc, #164]	; (800265c <scheduler+0x1ac>)
 80025b8:	4829      	ldr	r0, [pc, #164]	; (8002660 <scheduler+0x1b0>)
 80025ba:	f002 f991 	bl	80048e0 <ms5607_prep_pressure>
				BARO_TASK.last_call = tick;
 80025be:	4b13      	ldr	r3, [pc, #76]	; (800260c <scheduler+0x15c>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a23      	ldr	r2, [pc, #140]	; (8002650 <scheduler+0x1a0>)
 80025c4:	6013      	str	r3, [r2, #0]
				BARO_TASK.stage = MS_PRESSURE_REQ;
 80025c6:	4b22      	ldr	r3, [pc, #136]	; (8002650 <scheduler+0x1a0>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	721a      	strb	r2, [r3, #8]
				break;
 80025cc:	e053      	b.n	8002676 <scheduler+0x1c6>
			case MS_PRESSURE_REQ:
				ms5607_read_pressure(&BARO1, raw_data1);
 80025ce:	4921      	ldr	r1, [pc, #132]	; (8002654 <scheduler+0x1a4>)
 80025d0:	4821      	ldr	r0, [pc, #132]	; (8002658 <scheduler+0x1a8>)
 80025d2:	f002 f9ce 	bl	8004972 <ms5607_read_pressure>
				ms5607_read_pressure(&BARO2, raw_data2);
 80025d6:	4921      	ldr	r1, [pc, #132]	; (800265c <scheduler+0x1ac>)
 80025d8:	4821      	ldr	r0, [pc, #132]	; (8002660 <scheduler+0x1b0>)
 80025da:	f002 f9ca 	bl	8004972 <ms5607_read_pressure>
				BARO_TASK.last_call = tick;
 80025de:	4b0b      	ldr	r3, [pc, #44]	; (800260c <scheduler+0x15c>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a1b      	ldr	r2, [pc, #108]	; (8002650 <scheduler+0x1a0>)
 80025e4:	6013      	str	r3, [r2, #0]
				ms5607_convert(&BARO1, &p1, &t_p1);
 80025e6:	4a1f      	ldr	r2, [pc, #124]	; (8002664 <scheduler+0x1b4>)
 80025e8:	491f      	ldr	r1, [pc, #124]	; (8002668 <scheduler+0x1b8>)
 80025ea:	481b      	ldr	r0, [pc, #108]	; (8002658 <scheduler+0x1a8>)
 80025ec:	f002 fa0c 	bl	8004a08 <ms5607_convert>
				ms5607_convert(&BARO2, &p2, &t_p2);
 80025f0:	4a1e      	ldr	r2, [pc, #120]	; (800266c <scheduler+0x1bc>)
 80025f2:	491f      	ldr	r1, [pc, #124]	; (8002670 <scheduler+0x1c0>)
 80025f4:	481a      	ldr	r0, [pc, #104]	; (8002660 <scheduler+0x1b0>)
 80025f6:	f002 fa07 	bl	8004a08 <ms5607_convert>
				BARO_TASK.stage = MS_TEMPERATURE_REQ;
 80025fa:	4b15      	ldr	r3, [pc, #84]	; (8002650 <scheduler+0x1a0>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	721a      	strb	r2, [r3, #8]
				break;
 8002600:	e039      	b.n	8002676 <scheduler+0x1c6>
			default:
				BARO_TASK.stage = MS_TEMPERATURE_REQ;
 8002602:	4b13      	ldr	r3, [pc, #76]	; (8002650 <scheduler+0x1a0>)
 8002604:	2200      	movs	r2, #0
 8002606:	721a      	strb	r2, [r3, #8]
				break;
 8002608:	e035      	b.n	8002676 <scheduler+0x1c6>
 800260a:	bf00      	nop
 800260c:	20013c7c 	.word	0x20013c7c
 8002610:	20000154 	.word	0x20000154
 8002614:	20000388 	.word	0x20000388
 8002618:	08014db0 	.word	0x08014db0
 800261c:	20015ab0 	.word	0x20015ab0
 8002620:	20000050 	.word	0x20000050
 8002624:	200000cc 	.word	0x200000cc
 8002628:	20000070 	.word	0x20000070
 800262c:	200000bc 	.word	0x200000bc
 8002630:	20000060 	.word	0x20000060
 8002634:	200000b4 	.word	0x200000b4
 8002638:	20000080 	.word	0x20000080
 800263c:	200000c4 	.word	0x200000c4
 8002640:	20000010 	.word	0x20000010
 8002644:	2000fd14 	.word	0x2000fd14
 8002648:	20013cbc 	.word	0x20013cbc
 800264c:	20000134 	.word	0x20000134
 8002650:	20000000 	.word	0x20000000
 8002654:	20013c84 	.word	0x20013c84
 8002658:	200000d4 	.word	0x200000d4
 800265c:	20004ab8 	.word	0x20004ab8
 8002660:	200000f4 	.word	0x200000f4
 8002664:	20000380 	.word	0x20000380
 8002668:	20000378 	.word	0x20000378
 800266c:	20000384 	.word	0x20000384
 8002670:	2000037c 	.word	0x2000037c

		}
	}
 8002674:	bf00      	nop

	// TASK IMU

	if(tick >= getNextExecution(&IMU_TASK)){
 8002676:	488c      	ldr	r0, [pc, #560]	; (80028a8 <scheduler+0x3f8>)
 8002678:	f7ff fcfd 	bl	8002076 <getNextExecution>
 800267c:	4602      	mov	r2, r0
 800267e:	4b8b      	ldr	r3, [pc, #556]	; (80028ac <scheduler+0x3fc>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	429a      	cmp	r2, r3
 8002684:	d80b      	bhi.n	800269e <scheduler+0x1ee>
		IMU_TASK.last_call = tick;
 8002686:	4b89      	ldr	r3, [pc, #548]	; (80028ac <scheduler+0x3fc>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a87      	ldr	r2, [pc, #540]	; (80028a8 <scheduler+0x3f8>)
 800268c:	6013      	str	r3, [r2, #0]
		//icm20601_read_data_raw(&IMU1, accel1_raw_buf);
		//icm20601_convert_data(&IMU1, accel1_val, accel1_raw_buf);
		icm20601_read_data(&IMU1, accel1_val);
 800268e:	4988      	ldr	r1, [pc, #544]	; (80028b0 <scheduler+0x400>)
 8002690:	4888      	ldr	r0, [pc, #544]	; (80028b4 <scheduler+0x404>)
 8002692:	f001 ff71 	bl	8004578 <icm20601_read_data>

		//icm20601_read_data_raw(&IMU2, accel2_raw_buf);
		//icm20601_convert_data(&IMU2, accel2_val, accel2_raw_buf);
		icm20601_read_data(&IMU2, accel2_val);
 8002696:	4988      	ldr	r1, [pc, #544]	; (80028b8 <scheduler+0x408>)
 8002698:	4888      	ldr	r0, [pc, #544]	; (80028bc <scheduler+0x40c>)
 800269a:	f001 ff6d 	bl	8004578 <icm20601_read_data>
	}

	// TASK SHOCK ACCEL

	if(tick >= getNextExecution(&ACCEL_TASK)){
 800269e:	4888      	ldr	r0, [pc, #544]	; (80028c0 <scheduler+0x410>)
 80026a0:	f7ff fce9 	bl	8002076 <getNextExecution>
 80026a4:	4602      	mov	r2, r0
 80026a6:	4b81      	ldr	r3, [pc, #516]	; (80028ac <scheduler+0x3fc>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d80b      	bhi.n	80026c6 <scheduler+0x216>
		ACCEL_TASK.last_call = tick;
 80026ae:	4b7f      	ldr	r3, [pc, #508]	; (80028ac <scheduler+0x3fc>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a83      	ldr	r2, [pc, #524]	; (80028c0 <scheduler+0x410>)
 80026b4:	6013      	str	r3, [r2, #0]
		h3l_read_raw(&ACCEL, accel_raw);
 80026b6:	4983      	ldr	r1, [pc, #524]	; (80028c4 <scheduler+0x414>)
 80026b8:	4883      	ldr	r0, [pc, #524]	; (80028c8 <scheduler+0x418>)
 80026ba:	f001 fb41 	bl	8003d40 <h3l_read_raw>
		h3l_convert(&ACCEL, accel);
 80026be:	4983      	ldr	r1, [pc, #524]	; (80028cc <scheduler+0x41c>)
 80026c0:	4881      	ldr	r0, [pc, #516]	; (80028c8 <scheduler+0x418>)
 80026c2:	f001 fc39 	bl	8003f38 <h3l_convert>
	}

	// TASK ADC
	if(tick >= getNextExecution(&ADC_TASK)){
 80026c6:	4882      	ldr	r0, [pc, #520]	; (80028d0 <scheduler+0x420>)
 80026c8:	f7ff fcd5 	bl	8002076 <getNextExecution>
 80026cc:	4602      	mov	r2, r0
 80026ce:	4b77      	ldr	r3, [pc, #476]	; (80028ac <scheduler+0x3fc>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d826      	bhi.n	8002724 <scheduler+0x274>
		ADC_TASK.last_call = tick;
 80026d6:	4b75      	ldr	r3, [pc, #468]	; (80028ac <scheduler+0x3fc>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a7d      	ldr	r2, [pc, #500]	; (80028d0 <scheduler+0x420>)
 80026dc:	6013      	str	r3, [r2, #0]
		read_ADC(adc_dat);
 80026de:	487d      	ldr	r0, [pc, #500]	; (80028d4 <scheduler+0x424>)
 80026e0:	f7fe fcce 	bl	8001080 <read_ADC>
		V_TD1 = adc_dat[0];
 80026e4:	4b7b      	ldr	r3, [pc, #492]	; (80028d4 <scheduler+0x424>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a7b      	ldr	r2, [pc, #492]	; (80028d8 <scheduler+0x428>)
 80026ea:	6013      	str	r3, [r2, #0]
		V_TD2 = adc_dat[1];
 80026ec:	4b79      	ldr	r3, [pc, #484]	; (80028d4 <scheduler+0x424>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	4a7a      	ldr	r2, [pc, #488]	; (80028dc <scheduler+0x42c>)
 80026f2:	6013      	str	r3, [r2, #0]
		V_LDR = adc_dat[2];
 80026f4:	4b77      	ldr	r3, [pc, #476]	; (80028d4 <scheduler+0x424>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	4a79      	ldr	r2, [pc, #484]	; (80028e0 <scheduler+0x430>)
 80026fa:	6013      	str	r3, [r2, #0]
		I_BAT1 = adc_dat[3];
 80026fc:	4b75      	ldr	r3, [pc, #468]	; (80028d4 <scheduler+0x424>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	4a78      	ldr	r2, [pc, #480]	; (80028e4 <scheduler+0x434>)
 8002702:	6013      	str	r3, [r2, #0]
		I_BAT2 = adc_dat[4];
 8002704:	4b73      	ldr	r3, [pc, #460]	; (80028d4 <scheduler+0x424>)
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	4a77      	ldr	r2, [pc, #476]	; (80028e8 <scheduler+0x438>)
 800270a:	6013      	str	r3, [r2, #0]
		V_BAT1 = adc_dat[5];
 800270c:	4b71      	ldr	r3, [pc, #452]	; (80028d4 <scheduler+0x424>)
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	4a76      	ldr	r2, [pc, #472]	; (80028ec <scheduler+0x43c>)
 8002712:	6013      	str	r3, [r2, #0]
		V_BAT2 = adc_dat[6];
 8002714:	4b6f      	ldr	r3, [pc, #444]	; (80028d4 <scheduler+0x424>)
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	4a75      	ldr	r2, [pc, #468]	; (80028f0 <scheduler+0x440>)
 800271a:	6013      	str	r3, [r2, #0]
		t_cpu = adc_dat[7];
 800271c:	4b6d      	ldr	r3, [pc, #436]	; (80028d4 <scheduler+0x424>)
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	4a74      	ldr	r2, [pc, #464]	; (80028f4 <scheduler+0x444>)
 8002722:	6013      	str	r3, [r2, #0]
		t_p2 = 20;
#endif


	// TASK STATE ESTIMATION
	if((tick >= getNextExecution(&STATE_EST_TASK)) || (FAKE_DATA == 1)){
 8002724:	4874      	ldr	r0, [pc, #464]	; (80028f8 <scheduler+0x448>)
 8002726:	f7ff fca6 	bl	8002076 <getNextExecution>
 800272a:	4602      	mov	r2, r0
 800272c:	4b5f      	ldr	r3, [pc, #380]	; (80028ac <scheduler+0x3fc>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	f200 80fd 	bhi.w	8002930 <scheduler+0x480>
		STATE_EST_TASK.last_call = tick;
 8002736:	4b5d      	ldr	r3, [pc, #372]	; (80028ac <scheduler+0x3fc>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a6f      	ldr	r2, [pc, #444]	; (80028f8 <scheduler+0x448>)
 800273c:	6013      	str	r3, [r2, #0]

		// call state estimation

		// feed in sensor values
		state_est_state.state_est_meas.baro_data[0].pressure = p1;
 800273e:	4b6f      	ldr	r3, [pc, #444]	; (80028fc <scheduler+0x44c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a6f      	ldr	r2, [pc, #444]	; (8002900 <scheduler+0x450>)
 8002744:	64d3      	str	r3, [r2, #76]	; 0x4c
		state_est_state.state_est_meas.baro_data[0].temperature = t_p1;
 8002746:	4b6f      	ldr	r3, [pc, #444]	; (8002904 <scheduler+0x454>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a6d      	ldr	r2, [pc, #436]	; (8002900 <scheduler+0x450>)
 800274c:	6513      	str	r3, [r2, #80]	; 0x50
		state_est_state.state_est_meas.baro_data[0].ts = tick;
 800274e:	4b57      	ldr	r3, [pc, #348]	; (80028ac <scheduler+0x3fc>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a6b      	ldr	r2, [pc, #428]	; (8002900 <scheduler+0x450>)
 8002754:	6553      	str	r3, [r2, #84]	; 0x54

		state_est_state.state_est_meas.imu_data[0].acc_x = -accel1_val[2];
 8002756:	4b56      	ldr	r3, [pc, #344]	; (80028b0 <scheduler+0x400>)
 8002758:	edd3 7a02 	vldr	s15, [r3, #8]
 800275c:	eef1 7a67 	vneg.f32	s15, s15
 8002760:	4b67      	ldr	r3, [pc, #412]	; (8002900 <scheduler+0x450>)
 8002762:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
		state_est_state.state_est_meas.imu_data[0].ts = tick;
 8002766:	4b51      	ldr	r3, [pc, #324]	; (80028ac <scheduler+0x3fc>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a65      	ldr	r2, [pc, #404]	; (8002900 <scheduler+0x450>)
 800276c:	67d3      	str	r3, [r2, #124]	; 0x7c

		state_est_state.state_est_meas.baro_data[1].pressure = p2;
 800276e:	4b66      	ldr	r3, [pc, #408]	; (8002908 <scheduler+0x458>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a63      	ldr	r2, [pc, #396]	; (8002900 <scheduler+0x450>)
 8002774:	6593      	str	r3, [r2, #88]	; 0x58
		state_est_state.state_est_meas.baro_data[1].temperature = t_p2;
 8002776:	4b65      	ldr	r3, [pc, #404]	; (800290c <scheduler+0x45c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a61      	ldr	r2, [pc, #388]	; (8002900 <scheduler+0x450>)
 800277c:	65d3      	str	r3, [r2, #92]	; 0x5c
		state_est_state.state_est_meas.baro_data[1].ts = tick;
 800277e:	4b4b      	ldr	r3, [pc, #300]	; (80028ac <scheduler+0x3fc>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a5f      	ldr	r2, [pc, #380]	; (8002900 <scheduler+0x450>)
 8002784:	6613      	str	r3, [r2, #96]	; 0x60

		state_est_state.state_est_meas.imu_data[1].acc_x = -accel2_val[2];
 8002786:	4b4c      	ldr	r3, [pc, #304]	; (80028b8 <scheduler+0x408>)
 8002788:	edd3 7a02 	vldr	s15, [r3, #8]
 800278c:	eef1 7a67 	vneg.f32	s15, s15
 8002790:	4b5b      	ldr	r3, [pc, #364]	; (8002900 <scheduler+0x450>)
 8002792:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
		state_est_state.state_est_meas.imu_data[1].ts = tick;
 8002796:	4b45      	ldr	r3, [pc, #276]	; (80028ac <scheduler+0x3fc>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a59      	ldr	r2, [pc, #356]	; (8002900 <scheduler+0x450>)
 800279c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

		state_est_step(tick, &state_est_state, true);
 80027a0:	4b42      	ldr	r3, [pc, #264]	; (80028ac <scheduler+0x3fc>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	2201      	movs	r2, #1
 80027a6:	4956      	ldr	r1, [pc, #344]	; (8002900 <scheduler+0x450>)
 80027a8:	4618      	mov	r0, r3
 80027aa:	f004 f91b 	bl	80069e4 <state_est_step>


		// timer start
		if ((state_est_state.flight_phase_detection.flight_phase == THRUSTING) || (launch_detect(accel1_val, accel2_val) == 1) ){
 80027ae:	4b54      	ldr	r3, [pc, #336]	; (8002900 <scheduler+0x450>)
 80027b0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80027b4:	2b03      	cmp	r3, #3
 80027b6:	d006      	beq.n	80027c6 <scheduler+0x316>
 80027b8:	493f      	ldr	r1, [pc, #252]	; (80028b8 <scheduler+0x408>)
 80027ba:	483d      	ldr	r0, [pc, #244]	; (80028b0 <scheduler+0x400>)
 80027bc:	f7ff fc6a 	bl	8002094 <launch_detect>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d10b      	bne.n	80027de <scheduler+0x32e>
			// these functions will be called in each run, but timers are only started if they are inactive,
			// once they are active, the function call is ignored
			start_timer(&mach_timer, &tick);
 80027c6:	4939      	ldr	r1, [pc, #228]	; (80028ac <scheduler+0x3fc>)
 80027c8:	4851      	ldr	r0, [pc, #324]	; (8002910 <scheduler+0x460>)
 80027ca:	f7ff f9d3 	bl	8001b74 <start_timer>
			start_timer(&fail_safe_timer, &tick);
 80027ce:	4937      	ldr	r1, [pc, #220]	; (80028ac <scheduler+0x3fc>)
 80027d0:	4850      	ldr	r0, [pc, #320]	; (8002914 <scheduler+0x464>)
 80027d2:	f7ff f9cf 	bl	8001b74 <start_timer>
			start_timer(&fail_safe_timer_main, &tick);
 80027d6:	4935      	ldr	r1, [pc, #212]	; (80028ac <scheduler+0x3fc>)
 80027d8:	484f      	ldr	r0, [pc, #316]	; (8002918 <scheduler+0x468>)
 80027da:	f7ff f9cb 	bl	8001b74 <start_timer>
		}

		if ((tick > t0 + 30000) && (CHECK_FLAG == 0)){
 80027de:	4b4f      	ldr	r3, [pc, #316]	; (800291c <scheduler+0x46c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 80027e6:	3330      	adds	r3, #48	; 0x30
 80027e8:	4a30      	ldr	r2, [pc, #192]	; (80028ac <scheduler+0x3fc>)
 80027ea:	6812      	ldr	r2, [r2, #0]
 80027ec:	4293      	cmp	r3, r2
 80027ee:	f080 809f 	bcs.w	8002930 <scheduler+0x480>
 80027f2:	4b4b      	ldr	r3, [pc, #300]	; (8002920 <scheduler+0x470>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f040 809a 	bne.w	8002930 <scheduler+0x480>

			// Perform sanity check of state estimation 30 seconds after bootup!
			// this is in steady state on the launchpad

			uint8_t passed = 0;
 80027fc:	2300      	movs	r3, #0
 80027fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
			float check_a = -accel1_val[2];
 8002802:	4b2b      	ldr	r3, [pc, #172]	; (80028b0 <scheduler+0x400>)
 8002804:	edd3 7a02 	vldr	s15, [r3, #8]
 8002808:	eef1 7a67 	vneg.f32	s15, s15
 800280c:	edc7 7a44 	vstr	s15, [r7, #272]	; 0x110
			float check_h = (float)state_est_state.state_est_data.position_world[2] / 1000.0;
 8002810:	4b3b      	ldr	r3, [pc, #236]	; (8002900 <scheduler+0x450>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	ee07 3a90 	vmov	s15, r3
 8002818:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800281c:	eddf 6a41 	vldr	s13, [pc, #260]	; 8002924 <scheduler+0x474>
 8002820:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002824:	edc7 7a43 	vstr	s15, [r7, #268]	; 0x10c
			float check_v = (float)state_est_state.state_est_data.velocity_rocket[0] / 1000.0;
 8002828:	4b35      	ldr	r3, [pc, #212]	; (8002900 <scheduler+0x450>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	ee07 3a90 	vmov	s15, r3
 8002830:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002834:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8002924 <scheduler+0x474>
 8002838:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800283c:	edc7 7a42 	vstr	s15, [r7, #264]	; 0x108
			if (state_est_sanity_check(&check_a, &check_h, &check_v) == 0){
 8002840:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8002844:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8002848:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800284c:	4618      	mov	r0, r3
 800284e:	f000 fcb0 	bl	80031b2 <state_est_sanity_check>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d004      	beq.n	8002862 <scheduler+0x3b2>
#if DEBUG_PRINT == 1
				printf("sanity check for state estimation failed! \n");
#endif
			} else {
				passed ++;
 8002858:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800285c:	3301      	adds	r3, #1
 800285e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
			}
			check_a = -accel2_val[2];
 8002862:	4b15      	ldr	r3, [pc, #84]	; (80028b8 <scheduler+0x408>)
 8002864:	edd3 7a02 	vldr	s15, [r3, #8]
 8002868:	eef1 7a67 	vneg.f32	s15, s15
 800286c:	edc7 7a44 	vstr	s15, [r7, #272]	; 0x110
			if (state_est_sanity_check(&check_a, &check_h, &check_v) == 0){
 8002870:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8002874:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8002878:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800287c:	4618      	mov	r0, r3
 800287e:	f000 fc98 	bl	80031b2 <state_est_sanity_check>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d004      	beq.n	8002892 <scheduler+0x3e2>
#if DEBUG_PRINT == 1
				printf("sanity check for state estimation failed! \n");
#endif
			} else {
				passed ++;
 8002888:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800288c:	3301      	adds	r3, #1
 800288e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
			}
			CHECK_FLAG = 1;
 8002892:	4b23      	ldr	r3, [pc, #140]	; (8002920 <scheduler+0x470>)
 8002894:	2201      	movs	r2, #1
 8002896:	701a      	strb	r2, [r3, #0]
			if (passed != 2){
 8002898:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800289c:	2b02      	cmp	r3, #2
 800289e:	d043      	beq.n	8002928 <scheduler+0x478>
				if (IGNORE_ERRORS == 0){
#if DEBUG_PRINT == 1
					printf("state est checkup failed!\n");
#endif
					while (1){
						play_FAIL_sound();
 80028a0:	f7ff f8ce 	bl	8001a40 <play_FAIL_sound>
 80028a4:	e7fc      	b.n	80028a0 <scheduler+0x3f0>
 80028a6:	bf00      	nop
 80028a8:	20000358 	.word	0x20000358
 80028ac:	20013c7c 	.word	0x20013c7c
 80028b0:	20013cc4 	.word	0x20013cc4
 80028b4:	20000114 	.word	0x20000114
 80028b8:	20013c8c 	.word	0x20013c8c
 80028bc:	20000124 	.word	0x20000124
 80028c0:	20000368 	.word	0x20000368
 80028c4:	2000c188 	.word	0x2000c188
 80028c8:	20000144 	.word	0x20000144
 80028cc:	2000c1a0 	.word	0x2000c1a0
 80028d0:	20000020 	.word	0x20000020
 80028d4:	20013ce0 	.word	0x20013ce0
 80028d8:	2000c19c 	.word	0x2000c19c
 80028dc:	2000fd0c 	.word	0x2000fd0c
 80028e0:	20013c80 	.word	0x20013c80
 80028e4:	2000fd10 	.word	0x2000fd10
 80028e8:	20013c88 	.word	0x20013c88
 80028ec:	20013cac 	.word	0x20013cac
 80028f0:	2000fd18 	.word	0x2000fd18
 80028f4:	20004ab4 	.word	0x20004ab4
 80028f8:	20000040 	.word	0x20000040
 80028fc:	20000378 	.word	0x20000378
 8002900:	20000398 	.word	0x20000398
 8002904:	20000380 	.word	0x20000380
 8002908:	2000037c 	.word	0x2000037c
 800290c:	20000384 	.word	0x20000384
 8002910:	20000090 	.word	0x20000090
 8002914:	2000009c 	.word	0x2000009c
 8002918:	200000a8 	.word	0x200000a8
 800291c:	20013ca8 	.word	0x20013ca8
 8002920:	20000814 	.word	0x20000814
 8002924:	447a0000 	.word	0x447a0000
				}
			}
#if DEBUG_PRINT == 1
			printf("state est ok\n");
#endif
			play_OK_sound();
 8002928:	f7ff f866 	bl	80019f8 <play_OK_sound>
			play_OK_sound();
 800292c:	f7ff f864 	bl	80019f8 <play_OK_sound>

	}


	// if mach timer has passed, software arm the system
	if (check_timer(&mach_timer, &tick) == 1) armed = 1;
 8002930:	494f      	ldr	r1, [pc, #316]	; (8002a70 <scheduler+0x5c0>)
 8002932:	4850      	ldr	r0, [pc, #320]	; (8002a74 <scheduler+0x5c4>)
 8002934:	f7ff f937 	bl	8001ba6 <check_timer>
 8002938:	4603      	mov	r3, r0
 800293a:	2b01      	cmp	r3, #1
 800293c:	d102      	bne.n	8002944 <scheduler+0x494>
 800293e:	4b4e      	ldr	r3, [pc, #312]	; (8002a78 <scheduler+0x5c8>)
 8002940:	2201      	movs	r2, #1
 8002942:	701a      	strb	r2, [r3, #0]

	// if fail_safe timer has passed, skip to descent flight phase
	if (check_timer(&fail_safe_timer, &tick) == 1) {
 8002944:	494a      	ldr	r1, [pc, #296]	; (8002a70 <scheduler+0x5c0>)
 8002946:	484d      	ldr	r0, [pc, #308]	; (8002a7c <scheduler+0x5cc>)
 8002948:	f7ff f92d 	bl	8001ba6 <check_timer>
 800294c:	4603      	mov	r3, r0
 800294e:	2b01      	cmp	r3, #1
 8002950:	d117      	bne.n	8002982 <scheduler+0x4d2>
		fire_HAWKs(&armed);
 8002952:	4849      	ldr	r0, [pc, #292]	; (8002a78 <scheduler+0x5c8>)
 8002954:	f7fe fb24 	bl	8000fa0 <fire_HAWKs>
		event = HAWKS;
 8002958:	4b49      	ldr	r3, [pc, #292]	; (8002a80 <scheduler+0x5d0>)
 800295a:	2201      	movs	r2, #1
 800295c:	701a      	strb	r2, [r3, #0]
		if (state_est_state.flight_phase_detection.flight_phase < DROGUE_DESCENT){
 800295e:	4b49      	ldr	r3, [pc, #292]	; (8002a84 <scheduler+0x5d4>)
 8002960:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002964:	2b07      	cmp	r3, #7
 8002966:	d808      	bhi.n	800297a <scheduler+0x4ca>
			printf("TIMER FS OVERWRITING WITH DROGUE\n");
#endif
			// if fail_safe timer has initiated drogue, we need to adjust the second fail safe timer
			// since we spent some part of the descent in ballistic flight, thus falling faster than
			// with drogue exactly at apogee
			fail_safe_timer_main.end = HAL_GetTick() + FAIL_SAFE_MAIN_DELTA;
 8002968:	f004 fdf4 	bl	8007554 <HAL_GetTick>
 800296c:	4603      	mov	r3, r0
 800296e:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8002972:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002976:	4a44      	ldr	r2, [pc, #272]	; (8002a88 <scheduler+0x5d8>)
 8002978:	6053      	str	r3, [r2, #4]
		}
		state_est_state.flight_phase_detection.flight_phase = DROGUE_DESCENT;
 800297a:	4b42      	ldr	r3, [pc, #264]	; (8002a84 <scheduler+0x5d4>)
 800297c:	2208      	movs	r2, #8
 800297e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
	}

	// if fail_safe timer has passed, skip to descent flight phase
	if (check_timer(&fail_safe_timer_main, &tick) == 1) {
 8002982:	493b      	ldr	r1, [pc, #236]	; (8002a70 <scheduler+0x5c0>)
 8002984:	4840      	ldr	r0, [pc, #256]	; (8002a88 <scheduler+0x5d8>)
 8002986:	f7ff f90e 	bl	8001ba6 <check_timer>
 800298a:	4603      	mov	r3, r0
 800298c:	2b01      	cmp	r3, #1
 800298e:	d108      	bne.n	80029a2 <scheduler+0x4f2>
		fire_HAWKs(&armed);
 8002990:	4839      	ldr	r0, [pc, #228]	; (8002a78 <scheduler+0x5c8>)
 8002992:	f7fe fb05 	bl	8000fa0 <fire_HAWKs>
		fire_TDs(&armed);
 8002996:	4838      	ldr	r0, [pc, #224]	; (8002a78 <scheduler+0x5c8>)
 8002998:	f7fe fb32 	bl	8001000 <fire_TDs>
		event = TENDER;
 800299c:	4b38      	ldr	r3, [pc, #224]	; (8002a80 <scheduler+0x5d0>)
 800299e:	2202      	movs	r2, #2
 80029a0:	701a      	strb	r2, [r3, #0]
	}



	// act according to flight phase
	switch(state_est_state.flight_phase_detection.flight_phase){
 80029a2:	4b38      	ldr	r3, [pc, #224]	; (8002a84 <scheduler+0x5d4>)
 80029a4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80029a8:	3b01      	subs	r3, #1
 80029aa:	2b0a      	cmp	r3, #10
 80029ac:	d858      	bhi.n	8002a60 <scheduler+0x5b0>
 80029ae:	a201      	add	r2, pc, #4	; (adr r2, 80029b4 <scheduler+0x504>)
 80029b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b4:	08002a6b 	.word	0x08002a6b
 80029b8:	08002a6b 	.word	0x08002a6b
 80029bc:	08002a6b 	.word	0x08002a6b
 80029c0:	08002a6b 	.word	0x08002a6b
 80029c4:	08002a6b 	.word	0x08002a6b
 80029c8:	08002a6b 	.word	0x08002a6b
 80029cc:	08002a6b 	.word	0x08002a6b
 80029d0:	080029e1 	.word	0x080029e1
 80029d4:	080029ef 	.word	0x080029ef
 80029d8:	080029fd 	.word	0x080029fd
 80029dc:	08002a11 	.word	0x08002a11
			break;
		case APOGEE_APPROACH:
			break;
		case DROGUE_DESCENT:
			// apogee
			fire_HAWKs(&armed);
 80029e0:	4825      	ldr	r0, [pc, #148]	; (8002a78 <scheduler+0x5c8>)
 80029e2:	f7fe fadd 	bl	8000fa0 <fire_HAWKs>
			event = HAWKS;
 80029e6:	4b26      	ldr	r3, [pc, #152]	; (8002a80 <scheduler+0x5d0>)
 80029e8:	2201      	movs	r2, #1
 80029ea:	701a      	strb	r2, [r3, #0]
			break;
 80029ec:	e059      	b.n	8002aa2 <scheduler+0x5f2>
		case BALLISTIC_DESCENT:
			// oh-oh...
			fire_HAWKs(&armed);
 80029ee:	4822      	ldr	r0, [pc, #136]	; (8002a78 <scheduler+0x5c8>)
 80029f0:	f7fe fad6 	bl	8000fa0 <fire_HAWKs>
			event = HAWKS;
 80029f4:	4b22      	ldr	r3, [pc, #136]	; (8002a80 <scheduler+0x5d0>)
 80029f6:	2201      	movs	r2, #1
 80029f8:	701a      	strb	r2, [r3, #0]
			//state_est_state.flight_phase_detection.flight_phase = DROGUE_DESCENT;
			break;
 80029fa:	e052      	b.n	8002aa2 <scheduler+0x5f2>
		case MAIN_DESCENT:
			// second event
			fire_HAWKs(&armed);
 80029fc:	481e      	ldr	r0, [pc, #120]	; (8002a78 <scheduler+0x5c8>)
 80029fe:	f7fe facf 	bl	8000fa0 <fire_HAWKs>
			fire_TDs(&armed);
 8002a02:	481d      	ldr	r0, [pc, #116]	; (8002a78 <scheduler+0x5c8>)
 8002a04:	f7fe fafc 	bl	8001000 <fire_TDs>
			event = TENDER;
 8002a08:	4b1d      	ldr	r3, [pc, #116]	; (8002a80 <scheduler+0x5d0>)
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	701a      	strb	r2, [r3, #0]
			break;
 8002a0e:	e048      	b.n	8002aa2 <scheduler+0x5f2>
		case TOUCHDOWN:
			if ((fail_safe_timer.active == 0) && (fail_safe_timer_main.active == 0)){
 8002a10:	4b1a      	ldr	r3, [pc, #104]	; (8002a7c <scheduler+0x5cc>)
 8002a12:	7a1b      	ldrb	r3, [r3, #8]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d143      	bne.n	8002aa0 <scheduler+0x5f0>
 8002a18:	4b1b      	ldr	r3, [pc, #108]	; (8002a88 <scheduler+0x5d8>)
 8002a1a:	7a1b      	ldrb	r3, [r3, #8]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d13f      	bne.n	8002aa0 <scheduler+0x5f0>
				fire_HAWKs(&armed);
 8002a20:	4815      	ldr	r0, [pc, #84]	; (8002a78 <scheduler+0x5c8>)
 8002a22:	f7fe fabd 	bl	8000fa0 <fire_HAWKs>
				fire_TDs(&armed);
 8002a26:	4814      	ldr	r0, [pc, #80]	; (8002a78 <scheduler+0x5c8>)
 8002a28:	f7fe faea 	bl	8001000 <fire_TDs>
				event = TENDER;
 8002a2c:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <scheduler+0x5d0>)
 8002a2e:	2202      	movs	r2, #2
 8002a30:	701a      	strb	r2, [r3, #0]
				play(440,100);
 8002a32:	eddf 0a16 	vldr	s1, [pc, #88]	; 8002a8c <scheduler+0x5dc>
 8002a36:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8002a90 <scheduler+0x5e0>
 8002a3a:	f7fe ff9d 	bl	8001978 <play>
				play(659.25,100);
 8002a3e:	eddf 0a13 	vldr	s1, [pc, #76]	; 8002a8c <scheduler+0x5dc>
 8002a42:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8002a94 <scheduler+0x5e4>
 8002a46:	f7fe ff97 	bl	8001978 <play>
				play(880,200);
 8002a4a:	eddf 0a13 	vldr	s1, [pc, #76]	; 8002a98 <scheduler+0x5e8>
 8002a4e:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8002a9c <scheduler+0x5ec>
 8002a52:	f7fe ff91 	bl	8001978 <play>
				HAL_Delay(600);
 8002a56:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002a5a:	f004 fd87 	bl	800756c <HAL_Delay>
			}
			break;
 8002a5e:	e01f      	b.n	8002aa0 <scheduler+0x5f0>
		default:
			state_est_state.flight_phase_detection.flight_phase = TOUCHDOWN;
 8002a60:	4b08      	ldr	r3, [pc, #32]	; (8002a84 <scheduler+0x5d4>)
 8002a62:	220b      	movs	r2, #11
 8002a64:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
			break;
 8002a68:	e01b      	b.n	8002aa2 <scheduler+0x5f2>
			break;
 8002a6a:	bf00      	nop
 8002a6c:	e019      	b.n	8002aa2 <scheduler+0x5f2>
 8002a6e:	bf00      	nop
 8002a70:	20013c7c 	.word	0x20013c7c
 8002a74:	20000090 	.word	0x20000090
 8002a78:	2000038d 	.word	0x2000038d
 8002a7c:	2000009c 	.word	0x2000009c
 8002a80:	2000038e 	.word	0x2000038e
 8002a84:	20000398 	.word	0x20000398
 8002a88:	200000a8 	.word	0x200000a8
 8002a8c:	42c80000 	.word	0x42c80000
 8002a90:	43dc0000 	.word	0x43dc0000
 8002a94:	4424d000 	.word	0x4424d000
 8002a98:	43480000 	.word	0x43480000
 8002a9c:	445c0000 	.word	0x445c0000
			break;
 8002aa0:	bf00      	nop
	}


	// TASK LOGGING
	if(tick >= getNextExecution(&LOG_TASK)){
 8002aa2:	489d      	ldr	r0, [pc, #628]	; (8002d18 <scheduler+0x868>)
 8002aa4:	f7ff fae7 	bl	8002076 <getNextExecution>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	4b9c      	ldr	r3, [pc, #624]	; (8002d1c <scheduler+0x86c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	f200 81f7 	bhi.w	8002ea2 <scheduler+0x9f2>
		LOG_TASK.last_call = tick;
 8002ab4:	4b99      	ldr	r3, [pc, #612]	; (8002d1c <scheduler+0x86c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a97      	ldr	r2, [pc, #604]	; (8002d18 <scheduler+0x868>)
 8002aba:	6013      	str	r3, [r2, #0]
		flight_phase = state_est_state.flight_phase_detection.flight_phase;
 8002abc:	4b98      	ldr	r3, [pc, #608]	; (8002d20 <scheduler+0x870>)
 8002abe:	f893 23f4 	ldrb.w	r2, [r3, #1012]	; 0x3f4
 8002ac2:	4b98      	ldr	r3, [pc, #608]	; (8002d24 <scheduler+0x874>)
 8002ac4:	701a      	strb	r2, [r3, #0]
		alt = (float)state_est_state.state_est_data.position_world[2] / 1000.0;
 8002ac6:	4b96      	ldr	r3, [pc, #600]	; (8002d20 <scheduler+0x870>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	ee07 3a90 	vmov	s15, r3
 8002ace:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ad2:	eddf 6a95 	vldr	s13, [pc, #596]	; 8002d28 <scheduler+0x878>
 8002ad6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ada:	4b94      	ldr	r3, [pc, #592]	; (8002d2c <scheduler+0x87c>)
 8002adc:	edc3 7a00 	vstr	s15, [r3]
		// just for debugging
		//t_cpu = state_est_state.kf_state.y[0];
		velocity = (float)state_est_state.state_est_data.velocity_rocket[0] / 1000.0;
 8002ae0:	4b8f      	ldr	r3, [pc, #572]	; (8002d20 <scheduler+0x870>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	ee07 3a90 	vmov	s15, r3
 8002ae8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002aec:	eddf 6a8e 	vldr	s13, [pc, #568]	; 8002d28 <scheduler+0x878>
 8002af0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002af4:	4b8e      	ldr	r3, [pc, #568]	; (8002d30 <scheduler+0x880>)
 8002af6:	edc3 7a00 	vstr	s15, [r3]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002afa:	4b88      	ldr	r3, [pc, #544]	; (8002d1c <scheduler+0x86c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002b02:	4b8c      	ldr	r3, [pc, #560]	; (8002d34 <scheduler+0x884>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002b0a:	4b8b      	ldr	r3, [pc, #556]	; (8002d38 <scheduler+0x888>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002b12:	4b84      	ldr	r3, [pc, #528]	; (8002d24 <scheduler+0x874>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002b1a:	4b88      	ldr	r3, [pc, #544]	; (8002d3c <scheduler+0x88c>)
 8002b1c:	7a1b      	ldrb	r3, [r3, #8]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002b1e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002b22:	4b87      	ldr	r3, [pc, #540]	; (8002d40 <scheduler+0x890>)
 8002b24:	7a1b      	ldrb	r3, [r3, #8]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002b26:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002b2a:	4b86      	ldr	r3, [pc, #536]	; (8002d44 <scheduler+0x894>)
 8002b2c:	7a1b      	ldrb	r3, [r3, #8]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002b2e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002b32:	4b7e      	ldr	r3, [pc, #504]	; (8002d2c <scheduler+0x87c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fd fd06 	bl	8000548 <__aeabi_f2d>
 8002b3c:	e9c7 0138 	strd	r0, r1, [r7, #224]	; 0xe0
 8002b40:	4b7b      	ldr	r3, [pc, #492]	; (8002d30 <scheduler+0x880>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fd fcff 	bl	8000548 <__aeabi_f2d>
 8002b4a:	e9c7 0136 	strd	r0, r1, [r7, #216]	; 0xd8
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002b4e:	4b7e      	ldr	r3, [pc, #504]	; (8002d48 <scheduler+0x898>)
 8002b50:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7fd fcf8 	bl	8000548 <__aeabi_f2d>
 8002b58:	e9c7 0134 	strd	r0, r1, [r7, #208]	; 0xd0
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002b5c:	4b7a      	ldr	r3, [pc, #488]	; (8002d48 <scheduler+0x898>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7fd fcf1 	bl	8000548 <__aeabi_f2d>
 8002b66:	e9c7 0132 	strd	r0, r1, [r7, #200]	; 0xc8
 8002b6a:	4b78      	ldr	r3, [pc, #480]	; (8002d4c <scheduler+0x89c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fd fcea 	bl	8000548 <__aeabi_f2d>
 8002b74:	e9c7 0130 	strd	r0, r1, [r7, #192]	; 0xc0
 8002b78:	4b75      	ldr	r3, [pc, #468]	; (8002d50 <scheduler+0x8a0>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7fd fce3 	bl	8000548 <__aeabi_f2d>
 8002b82:	e9c7 012e 	strd	r0, r1, [r7, #184]	; 0xb8
 8002b86:	4b73      	ldr	r3, [pc, #460]	; (8002d54 <scheduler+0x8a4>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fd fcdc 	bl	8000548 <__aeabi_f2d>
 8002b90:	e9c7 012c 	strd	r0, r1, [r7, #176]	; 0xb0
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002b94:	4b70      	ldr	r3, [pc, #448]	; (8002d58 <scheduler+0x8a8>)
 8002b96:	681b      	ldr	r3, [r3, #0]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fd fcd5 	bl	8000548 <__aeabi_f2d>
 8002b9e:	e9c7 012a 	strd	r0, r1, [r7, #168]	; 0xa8
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002ba2:	4b6e      	ldr	r3, [pc, #440]	; (8002d5c <scheduler+0x8ac>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7fd fcce 	bl	8000548 <__aeabi_f2d>
 8002bac:	e9c7 0128 	strd	r0, r1, [r7, #160]	; 0xa0
 8002bb0:	4b6b      	ldr	r3, [pc, #428]	; (8002d60 <scheduler+0x8b0>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7fd fcc7 	bl	8000548 <__aeabi_f2d>
 8002bba:	e9c7 0126 	strd	r0, r1, [r7, #152]	; 0x98
 8002bbe:	4b69      	ldr	r3, [pc, #420]	; (8002d64 <scheduler+0x8b4>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7fd fcc0 	bl	8000548 <__aeabi_f2d>
 8002bc8:	e9c7 0124 	strd	r0, r1, [r7, #144]	; 0x90
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002bcc:	4b62      	ldr	r3, [pc, #392]	; (8002d58 <scheduler+0x8a8>)
 8002bce:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7fd fcb9 	bl	8000548 <__aeabi_f2d>
 8002bd6:	e9c7 0122 	strd	r0, r1, [r7, #136]	; 0x88
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002bda:	4b5f      	ldr	r3, [pc, #380]	; (8002d58 <scheduler+0x8a8>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fd fcb2 	bl	8000548 <__aeabi_f2d>
 8002be4:	e9c7 0120 	strd	r0, r1, [r7, #128]	; 0x80
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002be8:	4b5b      	ldr	r3, [pc, #364]	; (8002d58 <scheduler+0x8a8>)
 8002bea:	68db      	ldr	r3, [r3, #12]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7fd fcab 	bl	8000548 <__aeabi_f2d>
 8002bf2:	e9c7 011e 	strd	r0, r1, [r7, #120]	; 0x78
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002bf6:	4b58      	ldr	r3, [pc, #352]	; (8002d58 <scheduler+0x8a8>)
 8002bf8:	691b      	ldr	r3, [r3, #16]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fd fca4 	bl	8000548 <__aeabi_f2d>
 8002c00:	e9c7 011c 	strd	r0, r1, [r7, #112]	; 0x70
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002c04:	4b54      	ldr	r3, [pc, #336]	; (8002d58 <scheduler+0x8a8>)
 8002c06:	695b      	ldr	r3, [r3, #20]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7fd fc9d 	bl	8000548 <__aeabi_f2d>
 8002c0e:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002c12:	4b51      	ldr	r3, [pc, #324]	; (8002d58 <scheduler+0x8a8>)
 8002c14:	699b      	ldr	r3, [r3, #24]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7fd fc96 	bl	8000548 <__aeabi_f2d>
 8002c1c:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002c20:	4b4e      	ldr	r3, [pc, #312]	; (8002d5c <scheduler+0x8ac>)
 8002c22:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7fd fc8f 	bl	8000548 <__aeabi_f2d>
 8002c2a:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002c2e:	4b4b      	ldr	r3, [pc, #300]	; (8002d5c <scheduler+0x8ac>)
 8002c30:	689b      	ldr	r3, [r3, #8]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fd fc88 	bl	8000548 <__aeabi_f2d>
 8002c38:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002c3c:	4b47      	ldr	r3, [pc, #284]	; (8002d5c <scheduler+0x8ac>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7fd fc81 	bl	8000548 <__aeabi_f2d>
 8002c46:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002c4a:	4b44      	ldr	r3, [pc, #272]	; (8002d5c <scheduler+0x8ac>)
 8002c4c:	691b      	ldr	r3, [r3, #16]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fd fc7a 	bl	8000548 <__aeabi_f2d>
 8002c54:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002c58:	4b40      	ldr	r3, [pc, #256]	; (8002d5c <scheduler+0x8ac>)
 8002c5a:	695b      	ldr	r3, [r3, #20]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fd fc73 	bl	8000548 <__aeabi_f2d>
 8002c62:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002c66:	4b3d      	ldr	r3, [pc, #244]	; (8002d5c <scheduler+0x8ac>)
 8002c68:	699b      	ldr	r3, [r3, #24]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fd fc6c 	bl	8000548 <__aeabi_f2d>
 8002c70:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002c74:	4b3c      	ldr	r3, [pc, #240]	; (8002d68 <scheduler+0x8b8>)
 8002c76:	681b      	ldr	r3, [r3, #0]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fd fc65 	bl	8000548 <__aeabi_f2d>
 8002c7e:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002c82:	4b39      	ldr	r3, [pc, #228]	; (8002d68 <scheduler+0x8b8>)
 8002c84:	685b      	ldr	r3, [r3, #4]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fd fc5e 	bl	8000548 <__aeabi_f2d>
 8002c8c:	e9c7 0108 	strd	r0, r1, [r7, #32]
				tick, armed, event, flight_phase, mach_timer.active, fail_safe_timer.active, fail_safe_timer_main.active, alt, velocity, t_val[1],t_val[0],t_cpu,t_p1,t_p2,accel1_val[0],accel2_val[0],p1,p2,accel1_val[1],accel1_val[2],accel1_val[3],accel1_val[4],accel1_val[5],accel1_val[6],accel2_val[1],accel2_val[2],accel2_val[3],accel2_val[4],accel2_val[5],accel2_val[6],accel[0],accel[1],accel[2],I_BAT1,I_BAT2,V_BAT1,V_BAT2,V_LDR,V_TD1,V_TD2);
 8002c90:	4b35      	ldr	r3, [pc, #212]	; (8002d68 <scheduler+0x8b8>)
 8002c92:	689b      	ldr	r3, [r3, #8]
		sprintf(buffer,"%ld, %d ,%d, %d, %d, %d, %d, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f, %4.2f\n",
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7fd fc57 	bl	8000548 <__aeabi_f2d>
 8002c9a:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8002c9e:	4b33      	ldr	r3, [pc, #204]	; (8002d6c <scheduler+0x8bc>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fd fc50 	bl	8000548 <__aeabi_f2d>
 8002ca8:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002cac:	4b30      	ldr	r3, [pc, #192]	; (8002d70 <scheduler+0x8c0>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7fd fc49 	bl	8000548 <__aeabi_f2d>
 8002cb6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002cba:	4b2e      	ldr	r3, [pc, #184]	; (8002d74 <scheduler+0x8c4>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fd fc42 	bl	8000548 <__aeabi_f2d>
 8002cc4:	e9c7 0100 	strd	r0, r1, [r7]
 8002cc8:	4b2b      	ldr	r3, [pc, #172]	; (8002d78 <scheduler+0x8c8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7fd fc3b 	bl	8000548 <__aeabi_f2d>
 8002cd2:	4682      	mov	sl, r0
 8002cd4:	468b      	mov	fp, r1
 8002cd6:	4b29      	ldr	r3, [pc, #164]	; (8002d7c <scheduler+0x8cc>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fd fc34 	bl	8000548 <__aeabi_f2d>
 8002ce0:	4680      	mov	r8, r0
 8002ce2:	4689      	mov	r9, r1
 8002ce4:	4b26      	ldr	r3, [pc, #152]	; (8002d80 <scheduler+0x8d0>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7fd fc2d 	bl	8000548 <__aeabi_f2d>
 8002cee:	4605      	mov	r5, r0
 8002cf0:	460e      	mov	r6, r1
 8002cf2:	4b24      	ldr	r3, [pc, #144]	; (8002d84 <scheduler+0x8d4>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fd fc26 	bl	8000548 <__aeabi_f2d>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	460c      	mov	r4, r1
 8002d00:	e9cd 3446 	strd	r3, r4, [sp, #280]	; 0x118
 8002d04:	e9cd 5644 	strd	r5, r6, [sp, #272]	; 0x110
 8002d08:	e9cd 8942 	strd	r8, r9, [sp, #264]	; 0x108
 8002d0c:	e9cd ab40 	strd	sl, fp, [sp, #256]	; 0x100
 8002d10:	ed97 7b00 	vldr	d7, [r7]
 8002d14:	e038      	b.n	8002d88 <scheduler+0x8d8>
 8002d16:	bf00      	nop
 8002d18:	20000030 	.word	0x20000030
 8002d1c:	20013c7c 	.word	0x20013c7c
 8002d20:	20000398 	.word	0x20000398
 8002d24:	2000038f 	.word	0x2000038f
 8002d28:	447a0000 	.word	0x447a0000
 8002d2c:	20000390 	.word	0x20000390
 8002d30:	20000394 	.word	0x20000394
 8002d34:	2000038d 	.word	0x2000038d
 8002d38:	2000038e 	.word	0x2000038e
 8002d3c:	20000090 	.word	0x20000090
 8002d40:	2000009c 	.word	0x2000009c
 8002d44:	200000a8 	.word	0x200000a8
 8002d48:	20013cbc 	.word	0x20013cbc
 8002d4c:	20004ab4 	.word	0x20004ab4
 8002d50:	20000380 	.word	0x20000380
 8002d54:	20000384 	.word	0x20000384
 8002d58:	20013cc4 	.word	0x20013cc4
 8002d5c:	20013c8c 	.word	0x20013c8c
 8002d60:	20000378 	.word	0x20000378
 8002d64:	2000037c 	.word	0x2000037c
 8002d68:	2000c1a0 	.word	0x2000c1a0
 8002d6c:	2000fd10 	.word	0x2000fd10
 8002d70:	20013c88 	.word	0x20013c88
 8002d74:	20013cac 	.word	0x20013cac
 8002d78:	2000fd18 	.word	0x2000fd18
 8002d7c:	20013c80 	.word	0x20013c80
 8002d80:	2000c19c 	.word	0x2000c19c
 8002d84:	2000fd0c 	.word	0x2000fd0c
 8002d88:	ed8d 7b3e 	vstr	d7, [sp, #248]	; 0xf8
 8002d8c:	ed97 7b02 	vldr	d7, [r7, #8]
 8002d90:	ed8d 7b3c 	vstr	d7, [sp, #240]	; 0xf0
 8002d94:	ed97 7b04 	vldr	d7, [r7, #16]
 8002d98:	ed8d 7b3a 	vstr	d7, [sp, #232]	; 0xe8
 8002d9c:	ed97 7b06 	vldr	d7, [r7, #24]
 8002da0:	ed8d 7b38 	vstr	d7, [sp, #224]	; 0xe0
 8002da4:	ed97 7b08 	vldr	d7, [r7, #32]
 8002da8:	ed8d 7b36 	vstr	d7, [sp, #216]	; 0xd8
 8002dac:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8002db0:	ed8d 7b34 	vstr	d7, [sp, #208]	; 0xd0
 8002db4:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8002db8:	ed8d 7b32 	vstr	d7, [sp, #200]	; 0xc8
 8002dbc:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8002dc0:	ed8d 7b30 	vstr	d7, [sp, #192]	; 0xc0
 8002dc4:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8002dc8:	ed8d 7b2e 	vstr	d7, [sp, #184]	; 0xb8
 8002dcc:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8002dd0:	ed8d 7b2c 	vstr	d7, [sp, #176]	; 0xb0
 8002dd4:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8002dd8:	ed8d 7b2a 	vstr	d7, [sp, #168]	; 0xa8
 8002ddc:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8002de0:	ed8d 7b28 	vstr	d7, [sp, #160]	; 0xa0
 8002de4:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 8002de8:	ed8d 7b26 	vstr	d7, [sp, #152]	; 0x98
 8002dec:	ed97 7b1a 	vldr	d7, [r7, #104]	; 0x68
 8002df0:	ed8d 7b24 	vstr	d7, [sp, #144]	; 0x90
 8002df4:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8002df8:	ed8d 7b22 	vstr	d7, [sp, #136]	; 0x88
 8002dfc:	ed97 7b1e 	vldr	d7, [r7, #120]	; 0x78
 8002e00:	ed8d 7b20 	vstr	d7, [sp, #128]	; 0x80
 8002e04:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8002e08:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 8002e0c:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8002e10:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8002e14:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 8002e18:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 8002e1c:	ed97 7b26 	vldr	d7, [r7, #152]	; 0x98
 8002e20:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8002e24:	ed97 7b28 	vldr	d7, [r7, #160]	; 0xa0
 8002e28:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 8002e2c:	ed97 7b2a 	vldr	d7, [r7, #168]	; 0xa8
 8002e30:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8002e34:	ed97 7b2c 	vldr	d7, [r7, #176]	; 0xb0
 8002e38:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8002e3c:	ed97 7b2e 	vldr	d7, [r7, #184]	; 0xb8
 8002e40:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8002e44:	ed97 7b30 	vldr	d7, [r7, #192]	; 0xc0
 8002e48:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8002e4c:	ed97 7b32 	vldr	d7, [r7, #200]	; 0xc8
 8002e50:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8002e54:	ed97 7b34 	vldr	d7, [r7, #208]	; 0xd0
 8002e58:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8002e5c:	ed97 7b36 	vldr	d7, [r7, #216]	; 0xd8
 8002e60:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002e64:	ed97 7b38 	vldr	d7, [r7, #224]	; 0xe0
 8002e68:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002e6c:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8002e70:	9104      	str	r1, [sp, #16]
 8002e72:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8002e76:	9103      	str	r1, [sp, #12]
 8002e78:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8002e7c:	9102      	str	r1, [sp, #8]
 8002e7e:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8002e82:	9101      	str	r1, [sp, #4]
 8002e84:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8002e88:	9100      	str	r1, [sp, #0]
 8002e8a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8002e8e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8002e92:	4907      	ldr	r1, [pc, #28]	; (8002eb0 <scheduler+0xa00>)
 8002e94:	4807      	ldr	r0, [pc, #28]	; (8002eb4 <scheduler+0xa04>)
 8002e96:	f00e f867 	bl	8010f68 <siprintf>

		write_to_SD(FILE_NAME, buffer);
 8002e9a:	4906      	ldr	r1, [pc, #24]	; (8002eb4 <scheduler+0xa04>)
 8002e9c:	4806      	ldr	r0, [pc, #24]	; (8002eb8 <scheduler+0xa08>)
 8002e9e:	f7fe fb75 	bl	800158c <write_to_SD>
	printf("IMU2 ay: %4.2f m/s2 \n", accel2_val[2]);
	printf("ACC az: %4.2f m/s2 \n", accel[2]);
#endif


}
 8002ea2:	bf00      	nop
 8002ea4:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002eae:	bf00      	nop
 8002eb0:	08014de4 	.word	0x08014de4
 8002eb4:	2001387c 	.word	0x2001387c
 8002eb8:	20015ab0 	.word	0x20015ab0

08002ebc <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0

  hsd.Instance = SDIO;
 8002ec0:	4b0c      	ldr	r3, [pc, #48]	; (8002ef4 <MX_SDIO_SD_Init+0x38>)
 8002ec2:	4a0d      	ldr	r2, [pc, #52]	; (8002ef8 <MX_SDIO_SD_Init+0x3c>)
 8002ec4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002ec6:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <MX_SDIO_SD_Init+0x38>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002ecc:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <MX_SDIO_SD_Init+0x38>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002ed2:	4b08      	ldr	r3, [pc, #32]	; (8002ef4 <MX_SDIO_SD_Init+0x38>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002ed8:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <MX_SDIO_SD_Init+0x38>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002ede:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <MX_SDIO_SD_Init+0x38>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 3;
 8002ee4:	4b03      	ldr	r3, [pc, #12]	; (8002ef4 <MX_SDIO_SD_Init+0x38>)
 8002ee6:	2203      	movs	r2, #3
 8002ee8:	619a      	str	r2, [r3, #24]

}
 8002eea:	bf00      	nop
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	20015b7c 	.word	0x20015b7c
 8002ef8:	40012c00 	.word	0x40012c00

08002efc <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b08a      	sub	sp, #40	; 0x28
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f04:	f107 0314 	add.w	r3, r7, #20
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	605a      	str	r2, [r3, #4]
 8002f0e:	609a      	str	r2, [r3, #8]
 8002f10:	60da      	str	r2, [r3, #12]
 8002f12:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a68      	ldr	r2, [pc, #416]	; (80030bc <HAL_SD_MspInit+0x1c0>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	f040 80c9 	bne.w	80030b2 <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002f20:	2300      	movs	r3, #0
 8002f22:	613b      	str	r3, [r7, #16]
 8002f24:	4b66      	ldr	r3, [pc, #408]	; (80030c0 <HAL_SD_MspInit+0x1c4>)
 8002f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f28:	4a65      	ldr	r2, [pc, #404]	; (80030c0 <HAL_SD_MspInit+0x1c4>)
 8002f2a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f2e:	6453      	str	r3, [r2, #68]	; 0x44
 8002f30:	4b63      	ldr	r3, [pc, #396]	; (80030c0 <HAL_SD_MspInit+0x1c4>)
 8002f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f38:	613b      	str	r3, [r7, #16]
 8002f3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	4b5f      	ldr	r3, [pc, #380]	; (80030c0 <HAL_SD_MspInit+0x1c4>)
 8002f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f44:	4a5e      	ldr	r2, [pc, #376]	; (80030c0 <HAL_SD_MspInit+0x1c4>)
 8002f46:	f043 0304 	orr.w	r3, r3, #4
 8002f4a:	6313      	str	r3, [r2, #48]	; 0x30
 8002f4c:	4b5c      	ldr	r3, [pc, #368]	; (80030c0 <HAL_SD_MspInit+0x1c4>)
 8002f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	60fb      	str	r3, [r7, #12]
 8002f56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f58:	2300      	movs	r3, #0
 8002f5a:	60bb      	str	r3, [r7, #8]
 8002f5c:	4b58      	ldr	r3, [pc, #352]	; (80030c0 <HAL_SD_MspInit+0x1c4>)
 8002f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f60:	4a57      	ldr	r2, [pc, #348]	; (80030c0 <HAL_SD_MspInit+0x1c4>)
 8002f62:	f043 0308 	orr.w	r3, r3, #8
 8002f66:	6313      	str	r3, [r2, #48]	; 0x30
 8002f68:	4b55      	ldr	r3, [pc, #340]	; (80030c0 <HAL_SD_MspInit+0x1c4>)
 8002f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6c:	f003 0308 	and.w	r3, r3, #8
 8002f70:	60bb      	str	r3, [r7, #8]
 8002f72:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002f74:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002f78:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f82:	2303      	movs	r3, #3
 8002f84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002f86:	230c      	movs	r3, #12
 8002f88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f8a:	f107 0314 	add.w	r3, r7, #20
 8002f8e:	4619      	mov	r1, r3
 8002f90:	484c      	ldr	r0, [pc, #304]	; (80030c4 <HAL_SD_MspInit+0x1c8>)
 8002f92:	f005 fc69 	bl	8008868 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f96:	2304      	movs	r3, #4
 8002f98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002fa6:	230c      	movs	r3, #12
 8002fa8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002faa:	f107 0314 	add.w	r3, r7, #20
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4845      	ldr	r0, [pc, #276]	; (80030c8 <HAL_SD_MspInit+0x1cc>)
 8002fb2:	f005 fc59 	bl	8008868 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8002fb6:	4b45      	ldr	r3, [pc, #276]	; (80030cc <HAL_SD_MspInit+0x1d0>)
 8002fb8:	4a45      	ldr	r2, [pc, #276]	; (80030d0 <HAL_SD_MspInit+0x1d4>)
 8002fba:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8002fbc:	4b43      	ldr	r3, [pc, #268]	; (80030cc <HAL_SD_MspInit+0x1d0>)
 8002fbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002fc2:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fc4:	4b41      	ldr	r3, [pc, #260]	; (80030cc <HAL_SD_MspInit+0x1d0>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fca:	4b40      	ldr	r3, [pc, #256]	; (80030cc <HAL_SD_MspInit+0x1d0>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fd0:	4b3e      	ldr	r3, [pc, #248]	; (80030cc <HAL_SD_MspInit+0x1d0>)
 8002fd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fd6:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002fd8:	4b3c      	ldr	r3, [pc, #240]	; (80030cc <HAL_SD_MspInit+0x1d0>)
 8002fda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002fde:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002fe0:	4b3a      	ldr	r3, [pc, #232]	; (80030cc <HAL_SD_MspInit+0x1d0>)
 8002fe2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002fe6:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8002fe8:	4b38      	ldr	r3, [pc, #224]	; (80030cc <HAL_SD_MspInit+0x1d0>)
 8002fea:	2220      	movs	r2, #32
 8002fec:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002fee:	4b37      	ldr	r3, [pc, #220]	; (80030cc <HAL_SD_MspInit+0x1d0>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002ff4:	4b35      	ldr	r3, [pc, #212]	; (80030cc <HAL_SD_MspInit+0x1d0>)
 8002ff6:	2204      	movs	r2, #4
 8002ff8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002ffa:	4b34      	ldr	r3, [pc, #208]	; (80030cc <HAL_SD_MspInit+0x1d0>)
 8002ffc:	2203      	movs	r2, #3
 8002ffe:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8003000:	4b32      	ldr	r3, [pc, #200]	; (80030cc <HAL_SD_MspInit+0x1d0>)
 8003002:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003006:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003008:	4b30      	ldr	r3, [pc, #192]	; (80030cc <HAL_SD_MspInit+0x1d0>)
 800300a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800300e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8003010:	482e      	ldr	r0, [pc, #184]	; (80030cc <HAL_SD_MspInit+0x1d0>)
 8003012:	f005 f81d 	bl	8008050 <HAL_DMA_Init>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 800301c:	f7ff f824 	bl	8002068 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a2a      	ldr	r2, [pc, #168]	; (80030cc <HAL_SD_MspInit+0x1d0>)
 8003024:	641a      	str	r2, [r3, #64]	; 0x40
 8003026:	4a29      	ldr	r2, [pc, #164]	; (80030cc <HAL_SD_MspInit+0x1d0>)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800302c:	4b29      	ldr	r3, [pc, #164]	; (80030d4 <HAL_SD_MspInit+0x1d8>)
 800302e:	4a2a      	ldr	r2, [pc, #168]	; (80030d8 <HAL_SD_MspInit+0x1dc>)
 8003030:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8003032:	4b28      	ldr	r3, [pc, #160]	; (80030d4 <HAL_SD_MspInit+0x1d8>)
 8003034:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003038:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800303a:	4b26      	ldr	r3, [pc, #152]	; (80030d4 <HAL_SD_MspInit+0x1d8>)
 800303c:	2240      	movs	r2, #64	; 0x40
 800303e:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003040:	4b24      	ldr	r3, [pc, #144]	; (80030d4 <HAL_SD_MspInit+0x1d8>)
 8003042:	2200      	movs	r2, #0
 8003044:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003046:	4b23      	ldr	r3, [pc, #140]	; (80030d4 <HAL_SD_MspInit+0x1d8>)
 8003048:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800304c:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800304e:	4b21      	ldr	r3, [pc, #132]	; (80030d4 <HAL_SD_MspInit+0x1d8>)
 8003050:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003054:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003056:	4b1f      	ldr	r3, [pc, #124]	; (80030d4 <HAL_SD_MspInit+0x1d8>)
 8003058:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800305c:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800305e:	4b1d      	ldr	r3, [pc, #116]	; (80030d4 <HAL_SD_MspInit+0x1d8>)
 8003060:	2220      	movs	r2, #32
 8003062:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003064:	4b1b      	ldr	r3, [pc, #108]	; (80030d4 <HAL_SD_MspInit+0x1d8>)
 8003066:	2200      	movs	r2, #0
 8003068:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800306a:	4b1a      	ldr	r3, [pc, #104]	; (80030d4 <HAL_SD_MspInit+0x1d8>)
 800306c:	2204      	movs	r2, #4
 800306e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003070:	4b18      	ldr	r3, [pc, #96]	; (80030d4 <HAL_SD_MspInit+0x1d8>)
 8003072:	2203      	movs	r2, #3
 8003074:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8003076:	4b17      	ldr	r3, [pc, #92]	; (80030d4 <HAL_SD_MspInit+0x1d8>)
 8003078:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800307c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800307e:	4b15      	ldr	r3, [pc, #84]	; (80030d4 <HAL_SD_MspInit+0x1d8>)
 8003080:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003084:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8003086:	4813      	ldr	r0, [pc, #76]	; (80030d4 <HAL_SD_MspInit+0x1d8>)
 8003088:	f004 ffe2 	bl	8008050 <HAL_DMA_Init>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8003092:	f7fe ffe9 	bl	8002068 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a0e      	ldr	r2, [pc, #56]	; (80030d4 <HAL_SD_MspInit+0x1d8>)
 800309a:	63da      	str	r2, [r3, #60]	; 0x3c
 800309c:	4a0d      	ldr	r2, [pc, #52]	; (80030d4 <HAL_SD_MspInit+0x1d8>)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80030a2:	2200      	movs	r2, #0
 80030a4:	2100      	movs	r1, #0
 80030a6:	2031      	movs	r0, #49	; 0x31
 80030a8:	f004 ff9b 	bl	8007fe2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80030ac:	2031      	movs	r0, #49	; 0x31
 80030ae:	f004 ffb4 	bl	800801a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80030b2:	bf00      	nop
 80030b4:	3728      	adds	r7, #40	; 0x28
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	40012c00 	.word	0x40012c00
 80030c0:	40023800 	.word	0x40023800
 80030c4:	40020800 	.word	0x40020800
 80030c8:	40020c00 	.word	0x40020c00
 80030cc:	20015abc 	.word	0x20015abc
 80030d0:	40026458 	.word	0x40026458
 80030d4:	20015b1c 	.word	0x20015b1c
 80030d8:	400264a0 	.word	0x400264a0

080030dc <p_sanity_check>:

// TODO implement error sounds!!!!

// these sanity checks are performed during steady state on the launch pad.

uint8_t p_sanity_check(float * p){
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
	// sanity check of the pressure value on the launchpad
	if ((*p < 110000) && (*p > 70000)) {
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	edd3 7a00 	vldr	s15, [r3]
 80030ea:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8003120 <p_sanity_check+0x44>
 80030ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f6:	d50b      	bpl.n	8003110 <p_sanity_check+0x34>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	edd3 7a00 	vldr	s15, [r3]
 80030fe:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8003124 <p_sanity_check+0x48>
 8003102:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800310a:	dd01      	ble.n	8003110 <p_sanity_check+0x34>
		return 1;
 800310c:	2301      	movs	r3, #1
 800310e:	e000      	b.n	8003112 <p_sanity_check+0x36>
	} else {
		return 0;
 8003110:	2300      	movs	r3, #0
	}
}
 8003112:	4618      	mov	r0, r3
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	47d6d800 	.word	0x47d6d800
 8003124:	4788b800 	.word	0x4788b800

08003128 <t_sanity_check>:

uint8_t t_sanity_check(float * t){
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
	// sanity check of the temperature value on the launchpad
	if ((*t < 80) && (*t > 1)) {
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	edd3 7a00 	vldr	s15, [r3]
 8003136:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800316c <t_sanity_check+0x44>
 800313a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800313e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003142:	d50b      	bpl.n	800315c <t_sanity_check+0x34>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	edd3 7a00 	vldr	s15, [r3]
 800314a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800314e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003156:	dd01      	ble.n	800315c <t_sanity_check+0x34>
		return 1;
 8003158:	2301      	movs	r3, #1
 800315a:	e000      	b.n	800315e <t_sanity_check+0x36>
	} else {
		return 0;
 800315c:	2300      	movs	r3, #0
	}
}
 800315e:	4618      	mov	r0, r3
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	42a00000 	.word	0x42a00000

08003170 <a_sanity_check>:

uint8_t a_sanity_check(float * a){
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
	// sanity check of the acceleration value on the launchpad
	if ((*a < 10) && (*a > 8)) {
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	edd3 7a00 	vldr	s15, [r3]
 800317e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003182:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800318a:	d50b      	bpl.n	80031a4 <a_sanity_check+0x34>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	edd3 7a00 	vldr	s15, [r3]
 8003192:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8003196:	eef4 7ac7 	vcmpe.f32	s15, s14
 800319a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800319e:	dd01      	ble.n	80031a4 <a_sanity_check+0x34>
		return 1;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e000      	b.n	80031a6 <a_sanity_check+0x36>
	} else {
		return 0;
 80031a4:	2300      	movs	r3, #0
	}
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	370c      	adds	r7, #12
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <state_est_sanity_check>:

uint8_t state_est_sanity_check(float * h, float * a, float * v){
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b084      	sub	sp, #16
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	60f8      	str	r0, [r7, #12]
 80031ba:	60b9      	str	r1, [r7, #8]
 80031bc:	607a      	str	r2, [r7, #4]
	// sanity check of the altitude, velocity and acceleration value on the launchpad
	if (a_sanity_check(a) == 1){
 80031be:	68b8      	ldr	r0, [r7, #8]
 80031c0:	f7ff ffd6 	bl	8003170 <a_sanity_check>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d101      	bne.n	80031ce <state_est_sanity_check+0x1c>
		if (DEBUG_PRINT == 1) printf("state est accel out of bounds. a = %4.2f \n",*a);
		return 0;
 80031ca:	2300      	movs	r3, #0
 80031cc:	e02c      	b.n	8003228 <state_est_sanity_check+0x76>
	}

	if ((*h > 20) || (*h < -20)) {
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	edd3 7a00 	vldr	s15, [r3]
 80031d4:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80031d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031e0:	dc09      	bgt.n	80031f6 <state_est_sanity_check+0x44>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	edd3 7a00 	vldr	s15, [r3]
 80031e8:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 80031ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f4:	d501      	bpl.n	80031fa <state_est_sanity_check+0x48>
		if (DEBUG_PRINT == 1) printf("state est altitude out of bounds. h = %4.2f \n",*h);
		return 0;
 80031f6:	2300      	movs	r3, #0
 80031f8:	e016      	b.n	8003228 <state_est_sanity_check+0x76>
	}

	if ((*v > 10) || (*v < -10)) {
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	edd3 7a00 	vldr	s15, [r3]
 8003200:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003204:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800320c:	dc09      	bgt.n	8003222 <state_est_sanity_check+0x70>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	edd3 7a00 	vldr	s15, [r3]
 8003214:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8003218:	eef4 7ac7 	vcmpe.f32	s15, s14
 800321c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003220:	d501      	bpl.n	8003226 <state_est_sanity_check+0x74>
		if (DEBUG_PRINT == 1) printf("state est velocity out of bounds. v = %4.2f \n",*v);
		return 0;
 8003222:	2300      	movs	r3, #0
 8003224:	e000      	b.n	8003228 <state_est_sanity_check+0x76>
	}

	return 1;
 8003226:	2301      	movs	r3, #1
}
 8003228:	4618      	mov	r0, r3
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <config_baro>:

uint8_t config_baro(struct sht31_dev * t_dev, struct ms5607_dev * p1_dev, struct ms5607_dev * p2_dev, float * t, float * p){
 8003230:	b590      	push	{r4, r7, lr}
 8003232:	b093      	sub	sp, #76	; 0x4c
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
 800323c:	603b      	str	r3, [r7, #0]

	float t1_sum = 0;
 800323e:	f04f 0300 	mov.w	r3, #0
 8003242:	63fb      	str	r3, [r7, #60]	; 0x3c
	float p1_sum = 0;
 8003244:	f04f 0300 	mov.w	r3, #0
 8003248:	63bb      	str	r3, [r7, #56]	; 0x38
	float t2_sum = 0;
 800324a:	f04f 0300 	mov.w	r3, #0
 800324e:	637b      	str	r3, [r7, #52]	; 0x34
	float p2_sum = 0;
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	633b      	str	r3, [r7, #48]	; 0x30
	float p1;
	float p2;
	float t1;
	float t2;
	// sample pressure/temperture 100 times
	for (int i = 0; i < MAX_SETUP_SAMPLE + 10; i++)
 8003256:	2300      	movs	r3, #0
 8003258:	647b      	str	r3, [r7, #68]	; 0x44
 800325a:	e053      	b.n	8003304 <config_baro+0xd4>
	{
		ms5607_prep_pressure(p1_dev, pbuf);
 800325c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003260:	4619      	mov	r1, r3
 8003262:	68b8      	ldr	r0, [r7, #8]
 8003264:	f001 fb3c 	bl	80048e0 <ms5607_prep_pressure>
		ms5607_prep_pressure(p2_dev, pbuf);
 8003268:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800326c:	4619      	mov	r1, r3
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f001 fb36 	bl	80048e0 <ms5607_prep_pressure>
		HAL_Delay(5);
 8003274:	2005      	movs	r0, #5
 8003276:	f004 f979 	bl	800756c <HAL_Delay>
		ms5607_read_pressure(p1_dev, pbuf);
 800327a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800327e:	4619      	mov	r1, r3
 8003280:	68b8      	ldr	r0, [r7, #8]
 8003282:	f001 fb76 	bl	8004972 <ms5607_read_pressure>
		ms5607_read_pressure(p2_dev, pbuf);
 8003286:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800328a:	4619      	mov	r1, r3
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f001 fb70 	bl	8004972 <ms5607_read_pressure>
		ms5607_convert(p1_dev, &p1, &t1);
 8003292:	f107 0214 	add.w	r2, r7, #20
 8003296:	f107 031c 	add.w	r3, r7, #28
 800329a:	4619      	mov	r1, r3
 800329c:	68b8      	ldr	r0, [r7, #8]
 800329e:	f001 fbb3 	bl	8004a08 <ms5607_convert>
		ms5607_convert(p2_dev, &p2, &t2);
 80032a2:	f107 0210 	add.w	r2, r7, #16
 80032a6:	f107 0318 	add.w	r3, r7, #24
 80032aa:	4619      	mov	r1, r3
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f001 fbab 	bl	8004a08 <ms5607_convert>
		if (i >= 10) {
 80032b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032b4:	2b09      	cmp	r3, #9
 80032b6:	dd1f      	ble.n	80032f8 <config_baro+0xc8>
			// ignore the first 10 values to let the barometer "warm" up
			t1_sum += t1;
 80032b8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80032bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80032c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032c4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
			p1_sum += p1;
 80032c8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80032cc:	edd7 7a07 	vldr	s15, [r7, #28]
 80032d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032d4:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			t2_sum += t2;
 80032d8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80032dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80032e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032e4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
			p2_sum += p2;
 80032e8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80032ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80032f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032f4:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		}
		HAL_Delay(MAX_SETUP_SAMPLE_INTERVAL + 5);
 80032f8:	200f      	movs	r0, #15
 80032fa:	f004 f937 	bl	800756c <HAL_Delay>
	for (int i = 0; i < MAX_SETUP_SAMPLE + 10; i++)
 80032fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003300:	3301      	adds	r3, #1
 8003302:	647b      	str	r3, [r7, #68]	; 0x44
 8003304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003306:	2b6d      	cmp	r3, #109	; 0x6d
 8003308:	dda8      	ble.n	800325c <config_baro+0x2c>
	}
	p1_sum /= MAX_SETUP_SAMPLE;
 800330a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800330e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003470 <config_baro+0x240>
 8003312:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003316:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	t1_sum /= MAX_SETUP_SAMPLE;
 800331a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800331e:	eddf 6a54 	vldr	s13, [pc, #336]	; 8003470 <config_baro+0x240>
 8003322:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003326:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	p2_sum /= MAX_SETUP_SAMPLE;
 800332a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800332e:	eddf 6a50 	vldr	s13, [pc, #320]	; 8003470 <config_baro+0x240>
 8003332:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003336:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	t2_sum /= MAX_SETUP_SAMPLE;
 800333a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800333e:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8003470 <config_baro+0x240>
 8003342:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003346:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	printf("p1: %4.2f \n", p1_sum);
 800334a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334c:	4618      	mov	r0, r3
 800334e:	f7fd f8fb 	bl	8000548 <__aeabi_f2d>
 8003352:	4603      	mov	r3, r0
 8003354:	460c      	mov	r4, r1
 8003356:	461a      	mov	r2, r3
 8003358:	4623      	mov	r3, r4
 800335a:	4846      	ldr	r0, [pc, #280]	; (8003474 <config_baro+0x244>)
 800335c:	f00d fd88 	bl	8010e70 <iprintf>
	printf("p2: %4.2f \n", p2_sum);
 8003360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003362:	4618      	mov	r0, r3
 8003364:	f7fd f8f0 	bl	8000548 <__aeabi_f2d>
 8003368:	4603      	mov	r3, r0
 800336a:	460c      	mov	r4, r1
 800336c:	461a      	mov	r2, r3
 800336e:	4623      	mov	r3, r4
 8003370:	4841      	ldr	r0, [pc, #260]	; (8003478 <config_baro+0x248>)
 8003372:	f00d fd7d 	bl	8010e70 <iprintf>
	printf("t1: %4.2f \n", t1_sum);
 8003376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003378:	4618      	mov	r0, r3
 800337a:	f7fd f8e5 	bl	8000548 <__aeabi_f2d>
 800337e:	4603      	mov	r3, r0
 8003380:	460c      	mov	r4, r1
 8003382:	461a      	mov	r2, r3
 8003384:	4623      	mov	r3, r4
 8003386:	483d      	ldr	r0, [pc, #244]	; (800347c <config_baro+0x24c>)
 8003388:	f00d fd72 	bl	8010e70 <iprintf>
	printf("t2: %4.2f \n", t2_sum);
 800338c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800338e:	4618      	mov	r0, r3
 8003390:	f7fd f8da 	bl	8000548 <__aeabi_f2d>
 8003394:	4603      	mov	r3, r0
 8003396:	460c      	mov	r4, r1
 8003398:	461a      	mov	r2, r3
 800339a:	4623      	mov	r3, r4
 800339c:	4838      	ldr	r0, [pc, #224]	; (8003480 <config_baro+0x250>)
 800339e:	f00d fd67 	bl	8010e70 <iprintf>

	if (!t_sanity_check(&t1_sum)){
 80033a2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80033a6:	4618      	mov	r0, r3
 80033a8:	f7ff febe 	bl	8003128 <t_sanity_check>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <config_baro+0x186>
		if (DEBUG_PRINT == 1) printf("Temperature of BARO 1 out of bounds. abort. \n");
		return 0;
 80033b2:	2300      	movs	r3, #0
 80033b4:	e057      	b.n	8003466 <config_baro+0x236>
	}
	if (!t_sanity_check(&t2_sum)){
 80033b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff feb4 	bl	8003128 <t_sanity_check>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <config_baro+0x19a>
		if (DEBUG_PRINT == 1) printf("Temperature of BARO 2 out of bounds. abort. \n");
		return 0;
 80033c6:	2300      	movs	r3, #0
 80033c8:	e04d      	b.n	8003466 <config_baro+0x236>
	}
	if (!p_sanity_check(&p1_sum)){
 80033ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff fe84 	bl	80030dc <p_sanity_check>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <config_baro+0x1ae>
		if (DEBUG_PRINT == 1) printf("Pressure of BARO 1 out of bounds. abort. \n");
		return 0;
 80033da:	2300      	movs	r3, #0
 80033dc:	e043      	b.n	8003466 <config_baro+0x236>
	}
	if (!p_sanity_check(&p2_sum)){
 80033de:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff fe7a 	bl	80030dc <p_sanity_check>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <config_baro+0x1c2>
		if (DEBUG_PRINT == 1) printf("Pressure of BARO 2 out of bounds. abort. \n");
		return 0;
 80033ee:	2300      	movs	r3, #0
 80033f0:	e039      	b.n	8003466 <config_baro+0x236>
	}

	// set as environement parameters
	*t = (t1_sum + t2_sum) / 2;
 80033f2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80033f6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80033fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033fe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8003402:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	edc3 7a00 	vstr	s15, [r3]
	*p = (p1_sum + p2_sum) / 2;
 800340c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003410:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003414:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003418:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800341c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003420:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003422:	edc3 7a00 	vstr	s15, [r3]


	// sample SHT temperature 100 times

	for (int i = 0; i < MAX_SETUP_SAMPLE + 10; i++)
 8003426:	2300      	movs	r3, #0
 8003428:	643b      	str	r3, [r7, #64]	; 0x40
 800342a:	e018      	b.n	800345e <config_baro+0x22e>
	{
		sht31_read(t_dev, sht_val, buf);
 800342c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003430:	f107 0320 	add.w	r3, r7, #32
 8003434:	4619      	mov	r1, r3
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f001 fda2 	bl	8004f80 <sht31_read>
		// ignore the first 10 measurements to let the SHT "warm" up
		if (i >= 10) t1_sum += sht_val[0];
 800343c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800343e:	2b09      	cmp	r3, #9
 8003440:	dd07      	ble.n	8003452 <config_baro+0x222>
 8003442:	ed97 7a08 	vldr	s14, [r7, #32]
 8003446:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800344a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800344e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		HAL_Delay(MAX_SETUP_SAMPLE_INTERVAL);
 8003452:	200a      	movs	r0, #10
 8003454:	f004 f88a 	bl	800756c <HAL_Delay>
	for (int i = 0; i < MAX_SETUP_SAMPLE + 10; i++)
 8003458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800345a:	3301      	adds	r3, #1
 800345c:	643b      	str	r3, [r7, #64]	; 0x40
 800345e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003460:	2b6d      	cmp	r3, #109	; 0x6d
 8003462:	dde3      	ble.n	800342c <config_baro+0x1fc>
	*/

	if (DEBUG_PRINT == 1) printf("Config pressure = %4.2f \n",*p);
	if (DEBUG_PRINT == 1) printf("Config temp = %4.2f \n",*t);

	return 1;
 8003464:	2301      	movs	r3, #1
}
 8003466:	4618      	mov	r0, r3
 8003468:	374c      	adds	r7, #76	; 0x4c
 800346a:	46bd      	mov	sp, r7
 800346c:	bd90      	pop	{r4, r7, pc}
 800346e:	bf00      	nop
 8003470:	42c80000 	.word	0x42c80000
 8003474:	08014ee8 	.word	0x08014ee8
 8003478:	08014ef4 	.word	0x08014ef4
 800347c:	08014f00 	.word	0x08014f00
 8003480:	08014f0c 	.word	0x08014f0c

08003484 <config_imu>:

uint8_t config_imu(struct icm20601_dev * a1_dev, struct icm20601_dev * a2_dev){
 8003484:	b590      	push	{r4, r7, lr}
 8003486:	b09b      	sub	sp, #108	; 0x6c
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
	float a2_temp[7];

	float a1_sum[3];
	float a2_sum[3];

	for (int i = 0; i < MAX_SETUP_SAMPLE + 10; i++)
 800348e:	2300      	movs	r3, #0
 8003490:	663b      	str	r3, [r7, #96]	; 0x60
 8003492:	e059      	b.n	8003548 <config_imu+0xc4>
	{
		icm20601_read_data(a1_dev, a1_temp);
 8003494:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003498:	4619      	mov	r1, r3
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f001 f86c 	bl	8004578 <icm20601_read_data>
		icm20601_read_data(a2_dev, a2_temp);
 80034a0:	f107 0320 	add.w	r3, r7, #32
 80034a4:	4619      	mov	r1, r3
 80034a6:	6838      	ldr	r0, [r7, #0]
 80034a8:	f001 f866 	bl	8004578 <icm20601_read_data>

		if (i >= 10) {
 80034ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80034ae:	2b09      	cmp	r3, #9
 80034b0:	dd44      	ble.n	800353c <config_imu+0xb8>
			// ignore the first 10 measurements to let the accelerometer "warm" up
			for (int j = 1; j < 4; j++){
 80034b2:	2301      	movs	r3, #1
 80034b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034b6:	e03e      	b.n	8003536 <config_imu+0xb2>
				a1_sum[j-1] += fabs(a1_temp[j]);
 80034b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034ba:	3b01      	subs	r3, #1
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80034c2:	4413      	add	r3, r2
 80034c4:	3b54      	subs	r3, #84	; 0x54
 80034c6:	ed93 7a00 	vldr	s14, [r3]
 80034ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80034d2:	4413      	add	r3, r2
 80034d4:	3b2c      	subs	r3, #44	; 0x2c
 80034d6:	edd3 7a00 	vldr	s15, [r3]
 80034da:	eef0 7ae7 	vabs.f32	s15, s15
 80034de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034e0:	3b01      	subs	r3, #1
 80034e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80034ec:	4413      	add	r3, r2
 80034ee:	3b54      	subs	r3, #84	; 0x54
 80034f0:	edc3 7a00 	vstr	s15, [r3]
				a2_sum[j-1] += fabs(a2_temp[j]);
 80034f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034f6:	3b01      	subs	r3, #1
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80034fe:	4413      	add	r3, r2
 8003500:	3b60      	subs	r3, #96	; 0x60
 8003502:	ed93 7a00 	vldr	s14, [r3]
 8003506:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800350e:	4413      	add	r3, r2
 8003510:	3b48      	subs	r3, #72	; 0x48
 8003512:	edd3 7a00 	vldr	s15, [r3]
 8003516:	eef0 7ae7 	vabs.f32	s15, s15
 800351a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800351c:	3b01      	subs	r3, #1
 800351e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003528:	4413      	add	r3, r2
 800352a:	3b60      	subs	r3, #96	; 0x60
 800352c:	edc3 7a00 	vstr	s15, [r3]
			for (int j = 1; j < 4; j++){
 8003530:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003532:	3301      	adds	r3, #1
 8003534:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003536:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003538:	2b03      	cmp	r3, #3
 800353a:	ddbd      	ble.n	80034b8 <config_imu+0x34>
			}
		}
		HAL_Delay(MAX_SETUP_SAMPLE_INTERVAL);
 800353c:	200a      	movs	r0, #10
 800353e:	f004 f815 	bl	800756c <HAL_Delay>
	for (int i = 0; i < MAX_SETUP_SAMPLE + 10; i++)
 8003542:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003544:	3301      	adds	r3, #1
 8003546:	663b      	str	r3, [r7, #96]	; 0x60
 8003548:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800354a:	2b6d      	cmp	r3, #109	; 0x6d
 800354c:	dda2      	ble.n	8003494 <config_imu+0x10>
	}

	// assume rocket is in upright position, config axes accordingly
	uint8_t imu1_state = 0;
 800354e:	2300      	movs	r3, #0
 8003550:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t imu2_state = 0;
 8003554:	2300      	movs	r3, #0
 8003556:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t correct_axes = 0;
 800355a:	2300      	movs	r3, #0
 800355c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	for (int j = 0; j < 3; j++){
 8003560:	2300      	movs	r3, #0
 8003562:	65bb      	str	r3, [r7, #88]	; 0x58
 8003564:	e06e      	b.n	8003644 <config_imu+0x1c0>
		a1_sum[j] /= MAX_SETUP_SAMPLE;
 8003566:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	f107 0268 	add.w	r2, r7, #104	; 0x68
 800356e:	4413      	add	r3, r2
 8003570:	3b54      	subs	r3, #84	; 0x54
 8003572:	ed93 7a00 	vldr	s14, [r3]
 8003576:	eddf 6a55 	vldr	s13, [pc, #340]	; 80036cc <config_imu+0x248>
 800357a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800357e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003586:	4413      	add	r3, r2
 8003588:	3b54      	subs	r3, #84	; 0x54
 800358a:	edc3 7a00 	vstr	s15, [r3]
		a2_sum[j] /= MAX_SETUP_SAMPLE;
 800358e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8003596:	4413      	add	r3, r2
 8003598:	3b60      	subs	r3, #96	; 0x60
 800359a:	ed93 7a00 	vldr	s14, [r3]
 800359e:	eddf 6a4b 	vldr	s13, [pc, #300]	; 80036cc <config_imu+0x248>
 80035a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80035ae:	4413      	add	r3, r2
 80035b0:	3b60      	subs	r3, #96	; 0x60
 80035b2:	edc3 7a00 	vstr	s15, [r3]
		printf("IMU1 a-%d: %4.2f \n",j,a1_sum[j]);
 80035b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80035be:	4413      	add	r3, r2
 80035c0:	3b54      	subs	r3, #84	; 0x54
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fc ffbf 	bl	8000548 <__aeabi_f2d>
 80035ca:	4603      	mov	r3, r0
 80035cc:	460c      	mov	r4, r1
 80035ce:	461a      	mov	r2, r3
 80035d0:	4623      	mov	r3, r4
 80035d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80035d4:	483e      	ldr	r0, [pc, #248]	; (80036d0 <config_imu+0x24c>)
 80035d6:	f00d fc4b 	bl	8010e70 <iprintf>
		printf("IMU2 a-%d: %4.2f \n",j,a2_sum[j]);
 80035da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80035e2:	4413      	add	r3, r2
 80035e4:	3b60      	subs	r3, #96	; 0x60
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7fc ffad 	bl	8000548 <__aeabi_f2d>
 80035ee:	4603      	mov	r3, r0
 80035f0:	460c      	mov	r4, r1
 80035f2:	461a      	mov	r2, r3
 80035f4:	4623      	mov	r3, r4
 80035f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80035f8:	4836      	ldr	r0, [pc, #216]	; (80036d4 <config_imu+0x250>)
 80035fa:	f00d fc39 	bl	8010e70 <iprintf>
		if (a_sanity_check(&a1_sum[j]) == 1){
 80035fe:	f107 0214 	add.w	r2, r7, #20
 8003602:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4413      	add	r3, r2
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff fdb1 	bl	8003170 <a_sanity_check>
 800360e:	4603      	mov	r3, r0
 8003610:	2b01      	cmp	r3, #1
 8003612:	d104      	bne.n	800361e <config_imu+0x19a>
			imu1_state ++;
 8003614:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8003618:	3301      	adds	r3, #1
 800361a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
		}
		if (a_sanity_check(&a2_sum[j]) == 1){
 800361e:	f107 0208 	add.w	r2, r7, #8
 8003622:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff fda1 	bl	8003170 <a_sanity_check>
 800362e:	4603      	mov	r3, r0
 8003630:	2b01      	cmp	r3, #1
 8003632:	d104      	bne.n	800363e <config_imu+0x1ba>
			imu2_state ++;
 8003634:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8003638:	3301      	adds	r3, #1
 800363a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	for (int j = 0; j < 3; j++){
 800363e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003640:	3301      	adds	r3, #1
 8003642:	65bb      	str	r3, [r7, #88]	; 0x58
 8003644:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003646:	2b02      	cmp	r3, #2
 8003648:	dd8d      	ble.n	8003566 <config_imu+0xe2>
		}
	}

	if ((-a1_temp[2] > 7) && (-a1_temp[2] < 11)) correct_axes ++;
 800364a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800364e:	eeb9 7a0c 	vmov.f32	s14, #156	; 0xc0e00000 -7.0
 8003652:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800365a:	d50d      	bpl.n	8003678 <config_imu+0x1f4>
 800365c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003660:	eeba 7a06 	vmov.f32	s14, #166	; 0xc1300000 -11.0
 8003664:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800366c:	dd04      	ble.n	8003678 <config_imu+0x1f4>
 800366e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003672:	3301      	adds	r3, #1
 8003674:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if ((-a2_temp[2] > 7) && (-a2_temp[2] < 11)) correct_axes ++;
 8003678:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800367c:	eeb9 7a0c 	vmov.f32	s14, #156	; 0xc0e00000 -7.0
 8003680:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003688:	d50d      	bpl.n	80036a6 <config_imu+0x222>
 800368a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800368e:	eeba 7a06 	vmov.f32	s14, #166	; 0xc1300000 -11.0
 8003692:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800369a:	dd04      	ble.n	80036a6 <config_imu+0x222>
 800369c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80036a0:	3301      	adds	r3, #1
 80036a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	if ((imu1_state != 1) || (imu2_state != 1) || (correct_axes != 2)){
 80036a6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d107      	bne.n	80036be <config_imu+0x23a>
 80036ae:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d103      	bne.n	80036be <config_imu+0x23a>
 80036b6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d001      	beq.n	80036c2 <config_imu+0x23e>
		if (DEBUG_PRINT == 1) printf("IMU axes out of bounds. abort. \n");
		if (DEBUG_PRINT == 1) printf("IMU1: %d \n", imu1_state);
		if (DEBUG_PRINT == 1) printf("IMU2: %d \n", imu2_state);
		if (DEBUG_PRINT == 1) printf("IMU ay: %4.2f \n", -a1_temp[2]);
		if (DEBUG_PRINT == 1) printf("IMU ay: %4.2f \n", -a2_temp[2]);
		return 0;
 80036be:	2300      	movs	r3, #0
 80036c0:	e000      	b.n	80036c4 <config_imu+0x240>
	}
	return 1;
 80036c2:	2301      	movs	r3, #1
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	376c      	adds	r7, #108	; 0x6c
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd90      	pop	{r4, r7, pc}
 80036cc:	42c80000 	.word	0x42c80000
 80036d0:	08014f18 	.word	0x08014f18
 80036d4:	08014f2c 	.word	0x08014f2c

080036d8 <selftest>:

uint8_t selftest(float TD1, float TD2, float BAT1, float BAT2, float LDR){
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	ed87 0a05 	vstr	s0, [r7, #20]
 80036e2:	edc7 0a04 	vstr	s1, [r7, #16]
 80036e6:	ed87 1a03 	vstr	s2, [r7, #12]
 80036ea:	edc7 1a02 	vstr	s3, [r7, #8]
 80036ee:	ed87 2a01 	vstr	s4, [r7, #4]

	//check TD voltage
	play(440,250);
 80036f2:	eddf 0a4a 	vldr	s1, [pc, #296]	; 800381c <selftest+0x144>
 80036f6:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8003820 <selftest+0x148>
 80036fa:	f7fe f93d 	bl	8001978 <play>
	HAL_Delay(500);
 80036fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003702:	f003 ff33 	bl	800756c <HAL_Delay>
	if (TD1 < 9) {
 8003706:	edd7 7a05 	vldr	s15, [r7, #20]
 800370a:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 800370e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003716:	d510      	bpl.n	800373a <selftest+0x62>
		play(880,1000);
 8003718:	eddf 0a42 	vldr	s1, [pc, #264]	; 8003824 <selftest+0x14c>
 800371c:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8003828 <selftest+0x150>
 8003720:	f7fe f92a 	bl	8001978 <play>
		HAL_Delay(500);
 8003724:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003728:	f003 ff20 	bl	800756c <HAL_Delay>
		play(880,1000);
 800372c:	eddf 0a3d 	vldr	s1, [pc, #244]	; 8003824 <selftest+0x14c>
 8003730:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8003828 <selftest+0x150>
 8003734:	f7fe f920 	bl	8001978 <play>
 8003738:	e00f      	b.n	800375a <selftest+0x82>
	} else {
		play(440,500);
 800373a:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800382c <selftest+0x154>
 800373e:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8003820 <selftest+0x148>
 8003742:	f7fe f919 	bl	8001978 <play>
		HAL_Delay(500);
 8003746:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800374a:	f003 ff0f 	bl	800756c <HAL_Delay>
		play(880,500);
 800374e:	eddf 0a37 	vldr	s1, [pc, #220]	; 800382c <selftest+0x154>
 8003752:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8003828 <selftest+0x150>
 8003756:	f7fe f90f 	bl	8001978 <play>
	}

	HAL_Delay(1000);
 800375a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800375e:	f003 ff05 	bl	800756c <HAL_Delay>

	play(440,250);
 8003762:	eddf 0a2e 	vldr	s1, [pc, #184]	; 800381c <selftest+0x144>
 8003766:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8003820 <selftest+0x148>
 800376a:	f7fe f905 	bl	8001978 <play>
	HAL_Delay(250);
 800376e:	20fa      	movs	r0, #250	; 0xfa
 8003770:	f003 fefc 	bl	800756c <HAL_Delay>
	play(440,250);
 8003774:	eddf 0a29 	vldr	s1, [pc, #164]	; 800381c <selftest+0x144>
 8003778:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8003820 <selftest+0x148>
 800377c:	f7fe f8fc 	bl	8001978 <play>
	HAL_Delay(500);
 8003780:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003784:	f003 fef2 	bl	800756c <HAL_Delay>
	if (TD2 < 9) {
 8003788:	edd7 7a04 	vldr	s15, [r7, #16]
 800378c:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8003790:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003794:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003798:	d510      	bpl.n	80037bc <selftest+0xe4>
		play(880,1000);
 800379a:	eddf 0a22 	vldr	s1, [pc, #136]	; 8003824 <selftest+0x14c>
 800379e:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8003828 <selftest+0x150>
 80037a2:	f7fe f8e9 	bl	8001978 <play>
		HAL_Delay(500);
 80037a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80037aa:	f003 fedf 	bl	800756c <HAL_Delay>
		play(880,1000);
 80037ae:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8003824 <selftest+0x14c>
 80037b2:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8003828 <selftest+0x150>
 80037b6:	f7fe f8df 	bl	8001978 <play>
 80037ba:	e00f      	b.n	80037dc <selftest+0x104>
	} else {
		play(440,500);
 80037bc:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800382c <selftest+0x154>
 80037c0:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8003820 <selftest+0x148>
 80037c4:	f7fe f8d8 	bl	8001978 <play>
		HAL_Delay(500);
 80037c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80037cc:	f003 fece 	bl	800756c <HAL_Delay>
		play(880,500);
 80037d0:	eddf 0a16 	vldr	s1, [pc, #88]	; 800382c <selftest+0x154>
 80037d4:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8003828 <selftest+0x150>
 80037d8:	f7fe f8ce 	bl	8001978 <play>
	}

	HAL_Delay(1000);
 80037dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80037e0:	f003 fec4 	bl	800756c <HAL_Delay>

	//check battery power,
	if (BAT1 < 11){
 80037e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80037e8:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 80037ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f4:	d501      	bpl.n	80037fa <selftest+0x122>
		play_FAIL_sound();
 80037f6:	f7fe f923 	bl	8001a40 <play_FAIL_sound>
	}

	if (BAT2 < 11){
 80037fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80037fe:	eeb2 7a06 	vmov.f32	s14, #38	; 0x41300000  11.0
 8003802:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800380a:	d501      	bpl.n	8003810 <selftest+0x138>
		play_FAIL_sound();
 800380c:	f7fe f918 	bl	8001a40 <play_FAIL_sound>
	}
	//check LDR sensor

	return 1;
 8003810:	2301      	movs	r3, #1
}
 8003812:	4618      	mov	r0, r3
 8003814:	3718      	adds	r7, #24
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	437a0000 	.word	0x437a0000
 8003820:	43dc0000 	.word	0x43dc0000
 8003824:	447a0000 	.word	0x447a0000
 8003828:	445c0000 	.word	0x445c0000
 800382c:	43fa0000 	.word	0x43fa0000

08003830 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8003834:	4b17      	ldr	r3, [pc, #92]	; (8003894 <MX_SPI1_Init+0x64>)
 8003836:	4a18      	ldr	r2, [pc, #96]	; (8003898 <MX_SPI1_Init+0x68>)
 8003838:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800383a:	4b16      	ldr	r3, [pc, #88]	; (8003894 <MX_SPI1_Init+0x64>)
 800383c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003840:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003842:	4b14      	ldr	r3, [pc, #80]	; (8003894 <MX_SPI1_Init+0x64>)
 8003844:	2200      	movs	r2, #0
 8003846:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003848:	4b12      	ldr	r3, [pc, #72]	; (8003894 <MX_SPI1_Init+0x64>)
 800384a:	2200      	movs	r2, #0
 800384c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800384e:	4b11      	ldr	r3, [pc, #68]	; (8003894 <MX_SPI1_Init+0x64>)
 8003850:	2200      	movs	r2, #0
 8003852:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003854:	4b0f      	ldr	r3, [pc, #60]	; (8003894 <MX_SPI1_Init+0x64>)
 8003856:	2200      	movs	r2, #0
 8003858:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800385a:	4b0e      	ldr	r3, [pc, #56]	; (8003894 <MX_SPI1_Init+0x64>)
 800385c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003860:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003862:	4b0c      	ldr	r3, [pc, #48]	; (8003894 <MX_SPI1_Init+0x64>)
 8003864:	2200      	movs	r2, #0
 8003866:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003868:	4b0a      	ldr	r3, [pc, #40]	; (8003894 <MX_SPI1_Init+0x64>)
 800386a:	2200      	movs	r2, #0
 800386c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800386e:	4b09      	ldr	r3, [pc, #36]	; (8003894 <MX_SPI1_Init+0x64>)
 8003870:	2200      	movs	r2, #0
 8003872:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003874:	4b07      	ldr	r3, [pc, #28]	; (8003894 <MX_SPI1_Init+0x64>)
 8003876:	2200      	movs	r2, #0
 8003878:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800387a:	4b06      	ldr	r3, [pc, #24]	; (8003894 <MX_SPI1_Init+0x64>)
 800387c:	220a      	movs	r2, #10
 800387e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003880:	4804      	ldr	r0, [pc, #16]	; (8003894 <MX_SPI1_Init+0x64>)
 8003882:	f008 f9c1 	bl	800bc08 <HAL_SPI_Init>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800388c:	f7fe fbec 	bl	8002068 <Error_Handler>
  }

}
 8003890:	bf00      	nop
 8003892:	bd80      	pop	{r7, pc}
 8003894:	20015c58 	.word	0x20015c58
 8003898:	40013000 	.word	0x40013000

0800389c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80038a0:	4b17      	ldr	r3, [pc, #92]	; (8003900 <MX_SPI2_Init+0x64>)
 80038a2:	4a18      	ldr	r2, [pc, #96]	; (8003904 <MX_SPI2_Init+0x68>)
 80038a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80038a6:	4b16      	ldr	r3, [pc, #88]	; (8003900 <MX_SPI2_Init+0x64>)
 80038a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80038ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80038ae:	4b14      	ldr	r3, [pc, #80]	; (8003900 <MX_SPI2_Init+0x64>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80038b4:	4b12      	ldr	r3, [pc, #72]	; (8003900 <MX_SPI2_Init+0x64>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80038ba:	4b11      	ldr	r3, [pc, #68]	; (8003900 <MX_SPI2_Init+0x64>)
 80038bc:	2200      	movs	r2, #0
 80038be:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80038c0:	4b0f      	ldr	r3, [pc, #60]	; (8003900 <MX_SPI2_Init+0x64>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80038c6:	4b0e      	ldr	r3, [pc, #56]	; (8003900 <MX_SPI2_Init+0x64>)
 80038c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038cc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038ce:	4b0c      	ldr	r3, [pc, #48]	; (8003900 <MX_SPI2_Init+0x64>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038d4:	4b0a      	ldr	r3, [pc, #40]	; (8003900 <MX_SPI2_Init+0x64>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80038da:	4b09      	ldr	r3, [pc, #36]	; (8003900 <MX_SPI2_Init+0x64>)
 80038dc:	2200      	movs	r2, #0
 80038de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038e0:	4b07      	ldr	r3, [pc, #28]	; (8003900 <MX_SPI2_Init+0x64>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80038e6:	4b06      	ldr	r3, [pc, #24]	; (8003900 <MX_SPI2_Init+0x64>)
 80038e8:	220a      	movs	r2, #10
 80038ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80038ec:	4804      	ldr	r0, [pc, #16]	; (8003900 <MX_SPI2_Init+0x64>)
 80038ee:	f008 f98b 	bl	800bc08 <HAL_SPI_Init>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80038f8:	f7fe fbb6 	bl	8002068 <Error_Handler>
  }

}
 80038fc:	bf00      	nop
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	20015c00 	.word	0x20015c00
 8003904:	40003800 	.word	0x40003800

08003908 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b08c      	sub	sp, #48	; 0x30
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003910:	f107 031c 	add.w	r3, r7, #28
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	605a      	str	r2, [r3, #4]
 800391a:	609a      	str	r2, [r3, #8]
 800391c:	60da      	str	r2, [r3, #12]
 800391e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a32      	ldr	r2, [pc, #200]	; (80039f0 <HAL_SPI_MspInit+0xe8>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d12c      	bne.n	8003984 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800392a:	2300      	movs	r3, #0
 800392c:	61bb      	str	r3, [r7, #24]
 800392e:	4b31      	ldr	r3, [pc, #196]	; (80039f4 <HAL_SPI_MspInit+0xec>)
 8003930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003932:	4a30      	ldr	r2, [pc, #192]	; (80039f4 <HAL_SPI_MspInit+0xec>)
 8003934:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003938:	6453      	str	r3, [r2, #68]	; 0x44
 800393a:	4b2e      	ldr	r3, [pc, #184]	; (80039f4 <HAL_SPI_MspInit+0xec>)
 800393c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003942:	61bb      	str	r3, [r7, #24]
 8003944:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003946:	2300      	movs	r3, #0
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	4b2a      	ldr	r3, [pc, #168]	; (80039f4 <HAL_SPI_MspInit+0xec>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	4a29      	ldr	r2, [pc, #164]	; (80039f4 <HAL_SPI_MspInit+0xec>)
 8003950:	f043 0301 	orr.w	r3, r3, #1
 8003954:	6313      	str	r3, [r2, #48]	; 0x30
 8003956:	4b27      	ldr	r3, [pc, #156]	; (80039f4 <HAL_SPI_MspInit+0xec>)
 8003958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	617b      	str	r3, [r7, #20]
 8003960:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003962:	23e0      	movs	r3, #224	; 0xe0
 8003964:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003966:	2302      	movs	r3, #2
 8003968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396a:	2300      	movs	r3, #0
 800396c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800396e:	2303      	movs	r3, #3
 8003970:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003972:	2305      	movs	r3, #5
 8003974:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003976:	f107 031c 	add.w	r3, r7, #28
 800397a:	4619      	mov	r1, r3
 800397c:	481e      	ldr	r0, [pc, #120]	; (80039f8 <HAL_SPI_MspInit+0xf0>)
 800397e:	f004 ff73 	bl	8008868 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003982:	e031      	b.n	80039e8 <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI2)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a1c      	ldr	r2, [pc, #112]	; (80039fc <HAL_SPI_MspInit+0xf4>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d12c      	bne.n	80039e8 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800398e:	2300      	movs	r3, #0
 8003990:	613b      	str	r3, [r7, #16]
 8003992:	4b18      	ldr	r3, [pc, #96]	; (80039f4 <HAL_SPI_MspInit+0xec>)
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	4a17      	ldr	r2, [pc, #92]	; (80039f4 <HAL_SPI_MspInit+0xec>)
 8003998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800399c:	6413      	str	r3, [r2, #64]	; 0x40
 800399e:	4b15      	ldr	r3, [pc, #84]	; (80039f4 <HAL_SPI_MspInit+0xec>)
 80039a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039a6:	613b      	str	r3, [r7, #16]
 80039a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039aa:	2300      	movs	r3, #0
 80039ac:	60fb      	str	r3, [r7, #12]
 80039ae:	4b11      	ldr	r3, [pc, #68]	; (80039f4 <HAL_SPI_MspInit+0xec>)
 80039b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b2:	4a10      	ldr	r2, [pc, #64]	; (80039f4 <HAL_SPI_MspInit+0xec>)
 80039b4:	f043 0302 	orr.w	r3, r3, #2
 80039b8:	6313      	str	r3, [r2, #48]	; 0x30
 80039ba:	4b0e      	ldr	r3, [pc, #56]	; (80039f4 <HAL_SPI_MspInit+0xec>)
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	f003 0302 	and.w	r3, r3, #2
 80039c2:	60fb      	str	r3, [r7, #12]
 80039c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80039c6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80039ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039cc:	2302      	movs	r3, #2
 80039ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d0:	2300      	movs	r3, #0
 80039d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039d4:	2303      	movs	r3, #3
 80039d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80039d8:	2305      	movs	r3, #5
 80039da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039dc:	f107 031c 	add.w	r3, r7, #28
 80039e0:	4619      	mov	r1, r3
 80039e2:	4807      	ldr	r0, [pc, #28]	; (8003a00 <HAL_SPI_MspInit+0xf8>)
 80039e4:	f004 ff40 	bl	8008868 <HAL_GPIO_Init>
}
 80039e8:	bf00      	nop
 80039ea:	3730      	adds	r7, #48	; 0x30
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	40013000 	.word	0x40013000
 80039f4:	40023800 	.word	0x40023800
 80039f8:	40020000 	.word	0x40020000
 80039fc:	40003800 	.word	0x40003800
 8003a00:	40020400 	.word	0x40020400

08003a04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	607b      	str	r3, [r7, #4]
 8003a0e:	4b10      	ldr	r3, [pc, #64]	; (8003a50 <HAL_MspInit+0x4c>)
 8003a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a12:	4a0f      	ldr	r2, [pc, #60]	; (8003a50 <HAL_MspInit+0x4c>)
 8003a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a18:	6453      	str	r3, [r2, #68]	; 0x44
 8003a1a:	4b0d      	ldr	r3, [pc, #52]	; (8003a50 <HAL_MspInit+0x4c>)
 8003a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a22:	607b      	str	r3, [r7, #4]
 8003a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a26:	2300      	movs	r3, #0
 8003a28:	603b      	str	r3, [r7, #0]
 8003a2a:	4b09      	ldr	r3, [pc, #36]	; (8003a50 <HAL_MspInit+0x4c>)
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	4a08      	ldr	r2, [pc, #32]	; (8003a50 <HAL_MspInit+0x4c>)
 8003a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a34:	6413      	str	r3, [r2, #64]	; 0x40
 8003a36:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <HAL_MspInit+0x4c>)
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a3e:	603b      	str	r3, [r7, #0]
 8003a40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a42:	bf00      	nop
 8003a44:	370c      	adds	r7, #12
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	40023800 	.word	0x40023800

08003a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003a58:	bf00      	nop
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a62:	b480      	push	{r7}
 8003a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a66:	e7fe      	b.n	8003a66 <HardFault_Handler+0x4>

08003a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a6c:	e7fe      	b.n	8003a6c <MemManage_Handler+0x4>

08003a6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a72:	e7fe      	b.n	8003a72 <BusFault_Handler+0x4>

08003a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a78:	e7fe      	b.n	8003a78 <UsageFault_Handler+0x4>

08003a7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a7e:	bf00      	nop
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a8c:	bf00      	nop
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a96:	b480      	push	{r7}
 8003a98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a9a:	bf00      	nop
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003aa8:	f003 fd40 	bl	800752c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003aac:	bf00      	nop
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8003ab4:	4802      	ldr	r0, [pc, #8]	; (8003ac0 <SDIO_IRQHandler+0x10>)
 8003ab6:	f007 f813 	bl	800aae0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8003aba:	bf00      	nop
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	20015b7c 	.word	0x20015b7c

08003ac4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003ac8:	4802      	ldr	r0, [pc, #8]	; (8003ad4 <DMA2_Stream0_IRQHandler+0x10>)
 8003aca:	f004 fc59 	bl	8008380 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003ace:	bf00      	nop
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	200049ac 	.word	0x200049ac

08003ad8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8003adc:	4802      	ldr	r0, [pc, #8]	; (8003ae8 <DMA2_Stream3_IRQHandler+0x10>)
 8003ade:	f004 fc4f 	bl	8008380 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003ae2:	bf00      	nop
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	20015abc 	.word	0x20015abc

08003aec <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8003af0:	4802      	ldr	r0, [pc, #8]	; (8003afc <DMA2_Stream6_IRQHandler+0x10>)
 8003af2:	f004 fc45 	bl	8008380 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003af6:	bf00      	nop
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	20015b1c 	.word	0x20015b1c

08003b00 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003b08:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003b0c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d013      	beq.n	8003b40 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003b18:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003b1c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003b20:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00b      	beq.n	8003b40 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003b28:	e000      	b.n	8003b2c <ITM_SendChar+0x2c>
    {
      __NOP();
 8003b2a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003b2c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0f9      	beq.n	8003b2a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003b36:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	b2d2      	uxtb	r2, r2
 8003b3e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003b40:	687b      	ldr	r3, [r7, #4]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b4e:	b580      	push	{r7, lr}
 8003b50:	b086      	sub	sp, #24
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	60f8      	str	r0, [r7, #12]
 8003b56:	60b9      	str	r1, [r7, #8]
 8003b58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	617b      	str	r3, [r7, #20]
 8003b5e:	e00a      	b.n	8003b76 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003b60:	f3af 8000 	nop.w
 8003b64:	4601      	mov	r1, r0
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	1c5a      	adds	r2, r3, #1
 8003b6a:	60ba      	str	r2, [r7, #8]
 8003b6c:	b2ca      	uxtb	r2, r1
 8003b6e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	3301      	adds	r3, #1
 8003b74:	617b      	str	r3, [r7, #20]
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	dbf0      	blt.n	8003b60 <_read+0x12>
	}

return len;
 8003b7e:	687b      	ldr	r3, [r7, #4]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3718      	adds	r7, #24
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b94:	2300      	movs	r3, #0
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	e009      	b.n	8003bae <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar((*ptr++));
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	1c5a      	adds	r2, r3, #1
 8003b9e:	60ba      	str	r2, [r7, #8]
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7ff ffac 	bl	8003b00 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	3301      	adds	r3, #1
 8003bac:	617b      	str	r3, [r7, #20]
 8003bae:	697a      	ldr	r2, [r7, #20]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	dbf1      	blt.n	8003b9a <_write+0x12>
	}
	return len;
 8003bb6:	687b      	ldr	r3, [r7, #4]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3718      	adds	r7, #24
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <_close>:

int _close(int file)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
	return -1;
 8003bc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	370c      	adds	r7, #12
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003be8:	605a      	str	r2, [r3, #4]
	return 0;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <_isatty>:

int _isatty(int file)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
	return 1;
 8003c00:	2301      	movs	r3, #1
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c0e:	b480      	push	{r7}
 8003c10:	b085      	sub	sp, #20
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	60f8      	str	r0, [r7, #12]
 8003c16:	60b9      	str	r1, [r7, #8]
 8003c18:	607a      	str	r2, [r7, #4]
	return 0;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3714      	adds	r7, #20
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003c30:	4b11      	ldr	r3, [pc, #68]	; (8003c78 <_sbrk+0x50>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d102      	bne.n	8003c3e <_sbrk+0x16>
		heap_end = &end;
 8003c38:	4b0f      	ldr	r3, [pc, #60]	; (8003c78 <_sbrk+0x50>)
 8003c3a:	4a10      	ldr	r2, [pc, #64]	; (8003c7c <_sbrk+0x54>)
 8003c3c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003c3e:	4b0e      	ldr	r3, [pc, #56]	; (8003c78 <_sbrk+0x50>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003c44:	4b0c      	ldr	r3, [pc, #48]	; (8003c78 <_sbrk+0x50>)
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	466a      	mov	r2, sp
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d907      	bls.n	8003c62 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003c52:	f00c fc73 	bl	801053c <__errno>
 8003c56:	4602      	mov	r2, r0
 8003c58:	230c      	movs	r3, #12
 8003c5a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003c5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c60:	e006      	b.n	8003c70 <_sbrk+0x48>
	}

	heap_end += incr;
 8003c62:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <_sbrk+0x50>)
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4413      	add	r3, r2
 8003c6a:	4a03      	ldr	r2, [pc, #12]	; (8003c78 <_sbrk+0x50>)
 8003c6c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	2000082c 	.word	0x2000082c
 8003c7c:	20017d28 	.word	0x20017d28

08003c80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003c84:	4b08      	ldr	r3, [pc, #32]	; (8003ca8 <SystemInit+0x28>)
 8003c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8a:	4a07      	ldr	r2, [pc, #28]	; (8003ca8 <SystemInit+0x28>)
 8003c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003c94:	4b04      	ldr	r3, [pc, #16]	; (8003ca8 <SystemInit+0x28>)
 8003c96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003c9a:	609a      	str	r2, [r3, #8]
#endif
}
 8003c9c:	bf00      	nop
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	e000ed00 	.word	0xe000ed00

08003cac <h3l_init>:
uint8_t _DELAY_HL = 100;
uint8_t _ADDR_HL = 0x18 << 1;

//almost copy of SHT31 drivers
uint8_t h3l_init(struct h3l_dev * dev)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef _ret;
	if (HAL_I2C_GetState(dev->i2c_bus) != HAL_I2C_STATE_READY)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f005 fd45 	bl	8009748 <HAL_I2C_GetState>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b20      	cmp	r3, #32
 8003cc2:	d003      	beq.n	8003ccc <h3l_init+0x20>
	{
		printf("i2c1 not ready!\n");
 8003cc4:	481a      	ldr	r0, [pc, #104]	; (8003d30 <h3l_init+0x84>)
 8003cc6:	f00d f947 	bl	8010f58 <puts>
 8003cca:	e002      	b.n	8003cd2 <h3l_init+0x26>
	} else {
		printf("i2c1 is ready!\n");
 8003ccc:	4819      	ldr	r0, [pc, #100]	; (8003d34 <h3l_init+0x88>)
 8003cce:	f00d f943 	bl	8010f58 <puts>
	}
	_ret = HAL_I2C_IsDeviceReady(dev->i2c_bus, dev->addr, 10, dev->delay);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6858      	ldr	r0, [r3, #4]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	b299      	uxth	r1, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	7a1b      	ldrb	r3, [r3, #8]
 8003ce0:	220a      	movs	r2, #10
 8003ce2:	f005 fc03 	bl	80094ec <HAL_I2C_IsDeviceReady>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	73fb      	strb	r3, [r7, #15]
	if ( _ret != HAL_OK )
 8003cea:	7bfb      	ldrb	r3, [r7, #15]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d009      	beq.n	8003d04 <h3l_init+0x58>
	{
		printf("H3L setup fail\n");
 8003cf0:	4811      	ldr	r0, [pc, #68]	; (8003d38 <h3l_init+0x8c>)
 8003cf2:	f00d f931 	bl	8010f58 <puts>
		printf("Errorcode: %d\n", _ret);
 8003cf6:	7bfb      	ldrb	r3, [r7, #15]
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	4810      	ldr	r0, [pc, #64]	; (8003d3c <h3l_init+0x90>)
 8003cfc:	f00d f8b8 	bl	8010e70 <iprintf>
		return 0;
 8003d00:	2300      	movs	r3, #0
 8003d02:	e010      	b.n	8003d26 <h3l_init+0x7a>
	}

	//power up
	uint8_t PWR_CONF = 0b00111111;
 8003d04:	233f      	movs	r3, #63	; 0x3f
 8003d06:	73bb      	strb	r3, [r7, #14]
	//PWR_CONF = 0x27;

	h3l_write(dev, 0x20, PWR_CONF);
 8003d08:	7bbb      	ldrb	r3, [r7, #14]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	2120      	movs	r1, #32
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f9ae 	bl	8004070 <h3l_write>


	PWR_CONF = 0b10000000;
 8003d14:	2380      	movs	r3, #128	; 0x80
 8003d16:	73bb      	strb	r3, [r7, #14]
	h3l_write(dev, 0x23, PWR_CONF);
 8003d18:	7bbb      	ldrb	r3, [r7, #14]
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	2123      	movs	r1, #35	; 0x23
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f9a6 	bl	8004070 <h3l_write>
	//HAL_Delay(5);
	_ret = HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf, 1, dev->delay);
	printf("WHOAMI: %d \n", buf);
	*/

	return 1;
 8003d24:	2301      	movs	r3, #1
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	08014f40 	.word	0x08014f40
 8003d34:	08014f50 	.word	0x08014f50
 8003d38:	08014f60 	.word	0x08014f60
 8003d3c:	08014f70 	.word	0x08014f70

08003d40 <h3l_read_raw>:


void h3l_read_raw(struct h3l_dev * dev, int16_t * dat)
{
 8003d40:	b590      	push	{r4, r7, lr}
 8003d42:	b087      	sub	sp, #28
 8003d44:	af02      	add	r7, sp, #8
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]

	uint8_t reg;
	uint8_t buf[6];

	reg = 0x28;
 8003d4a:	2328      	movs	r3, #40	; 0x28
 8003d4c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6858      	ldr	r0, [r3, #4]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	b299      	uxth	r1, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	7a1b      	ldrb	r3, [r3, #8]
 8003d5c:	f107 020f 	add.w	r2, r7, #15
 8003d60:	9300      	str	r3, [sp, #0]
 8003d62:	2301      	movs	r3, #1
 8003d64:	f005 f89e 	bl	8008ea4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[0], 1, dev->delay);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6858      	ldr	r0, [r3, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	b299      	uxth	r1, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	7a1b      	ldrb	r3, [r3, #8]
 8003d76:	f107 0208 	add.w	r2, r7, #8
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	f005 f98f 	bl	80090a0 <HAL_I2C_Master_Receive>
	reg = 0x29;
 8003d82:	2329      	movs	r3, #41	; 0x29
 8003d84:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6858      	ldr	r0, [r3, #4]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	b299      	uxth	r1, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	7a1b      	ldrb	r3, [r3, #8]
 8003d94:	f107 020f 	add.w	r2, r7, #15
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	f005 f882 	bl	8008ea4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[1], 1, dev->delay);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6858      	ldr	r0, [r3, #4]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	b299      	uxth	r1, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	7a1b      	ldrb	r3, [r3, #8]
 8003dae:	461c      	mov	r4, r3
 8003db0:	f107 0308 	add.w	r3, r7, #8
 8003db4:	1c5a      	adds	r2, r3, #1
 8003db6:	9400      	str	r4, [sp, #0]
 8003db8:	2301      	movs	r3, #1
 8003dba:	f005 f971 	bl	80090a0 <HAL_I2C_Master_Receive>
	reg = 0x2A;
 8003dbe:	232a      	movs	r3, #42	; 0x2a
 8003dc0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6858      	ldr	r0, [r3, #4]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	b299      	uxth	r1, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	7a1b      	ldrb	r3, [r3, #8]
 8003dd0:	f107 020f 	add.w	r2, r7, #15
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	f005 f864 	bl	8008ea4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[2], 1, dev->delay);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6858      	ldr	r0, [r3, #4]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	b299      	uxth	r1, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	7a1b      	ldrb	r3, [r3, #8]
 8003dea:	461c      	mov	r4, r3
 8003dec:	f107 0308 	add.w	r3, r7, #8
 8003df0:	1c9a      	adds	r2, r3, #2
 8003df2:	9400      	str	r4, [sp, #0]
 8003df4:	2301      	movs	r3, #1
 8003df6:	f005 f953 	bl	80090a0 <HAL_I2C_Master_Receive>
	reg = 0x2B;
 8003dfa:	232b      	movs	r3, #43	; 0x2b
 8003dfc:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6858      	ldr	r0, [r3, #4]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	b299      	uxth	r1, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	7a1b      	ldrb	r3, [r3, #8]
 8003e0c:	f107 020f 	add.w	r2, r7, #15
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	2301      	movs	r3, #1
 8003e14:	f005 f846 	bl	8008ea4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[3], 1, dev->delay);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6858      	ldr	r0, [r3, #4]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	b299      	uxth	r1, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	7a1b      	ldrb	r3, [r3, #8]
 8003e26:	461c      	mov	r4, r3
 8003e28:	f107 0308 	add.w	r3, r7, #8
 8003e2c:	1cda      	adds	r2, r3, #3
 8003e2e:	9400      	str	r4, [sp, #0]
 8003e30:	2301      	movs	r3, #1
 8003e32:	f005 f935 	bl	80090a0 <HAL_I2C_Master_Receive>
	reg = 0x2C;
 8003e36:	232c      	movs	r3, #44	; 0x2c
 8003e38:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6858      	ldr	r0, [r3, #4]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	b299      	uxth	r1, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	7a1b      	ldrb	r3, [r3, #8]
 8003e48:	f107 020f 	add.w	r2, r7, #15
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	2301      	movs	r3, #1
 8003e50:	f005 f828 	bl	8008ea4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[4], 1, dev->delay);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6858      	ldr	r0, [r3, #4]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	b299      	uxth	r1, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	7a1b      	ldrb	r3, [r3, #8]
 8003e62:	461c      	mov	r4, r3
 8003e64:	f107 0308 	add.w	r3, r7, #8
 8003e68:	1d1a      	adds	r2, r3, #4
 8003e6a:	9400      	str	r4, [sp, #0]
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	f005 f917 	bl	80090a0 <HAL_I2C_Master_Receive>
	reg = 0x2D;
 8003e72:	232d      	movs	r3, #45	; 0x2d
 8003e74:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &reg, 1, dev->delay);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6858      	ldr	r0, [r3, #4]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	b299      	uxth	r1, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	7a1b      	ldrb	r3, [r3, #8]
 8003e84:	f107 020f 	add.w	r2, r7, #15
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	f005 f80a 	bl	8008ea4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, &buf[5], 1, dev->delay);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6858      	ldr	r0, [r3, #4]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	b299      	uxth	r1, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	7a1b      	ldrb	r3, [r3, #8]
 8003e9e:	461c      	mov	r4, r3
 8003ea0:	f107 0308 	add.w	r3, r7, #8
 8003ea4:	1d5a      	adds	r2, r3, #5
 8003ea6:	9400      	str	r4, [sp, #0]
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	f005 f8f9 	bl	80090a0 <HAL_I2C_Master_Receive>

	dev->dat[0] = (buf[0]) | (int16_t)(buf[1] << 8);
 8003eae:	7a3b      	ldrb	r3, [r7, #8]
 8003eb0:	b21a      	sxth	r2, r3
 8003eb2:	7a7b      	ldrb	r3, [r7, #9]
 8003eb4:	021b      	lsls	r3, r3, #8
 8003eb6:	b21b      	sxth	r3, r3
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	b21a      	sxth	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	815a      	strh	r2, [r3, #10]
	dev->dat[1] = (buf[2]) | (int16_t)(buf[3] << 8);
 8003ec0:	7abb      	ldrb	r3, [r7, #10]
 8003ec2:	b21a      	sxth	r2, r3
 8003ec4:	7afb      	ldrb	r3, [r7, #11]
 8003ec6:	021b      	lsls	r3, r3, #8
 8003ec8:	b21b      	sxth	r3, r3
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	b21a      	sxth	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	819a      	strh	r2, [r3, #12]
	dev->dat[2] = (buf[4]) | (int16_t)(buf[5] << 8);
 8003ed2:	7b3b      	ldrb	r3, [r7, #12]
 8003ed4:	b21a      	sxth	r2, r3
 8003ed6:	7b7b      	ldrb	r3, [r7, #13]
 8003ed8:	021b      	lsls	r3, r3, #8
 8003eda:	b21b      	sxth	r3, r3
 8003edc:	4313      	orrs	r3, r2
 8003ede:	b21a      	sxth	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	81da      	strh	r2, [r3, #14]
	dev->dat[0] = dev->dat[0] >> 4;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003eea:	111b      	asrs	r3, r3, #4
 8003eec:	b21a      	sxth	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	815a      	strh	r2, [r3, #10]
	dev->dat[1] = dev->dat[1] >> 4;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003ef8:	111b      	asrs	r3, r3, #4
 8003efa:	b21a      	sxth	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	819a      	strh	r2, [r3, #12]
	dev->dat[2] = dev->dat[2] >> 4;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003f06:	111b      	asrs	r3, r3, #4
 8003f08:	b21a      	sxth	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	81da      	strh	r2, [r3, #14]
	dat[0] = dev->dat[0];
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	801a      	strh	r2, [r3, #0]
	dat[1] = dev->dat[1];
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	3302      	adds	r3, #2
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8003f22:	801a      	strh	r2, [r3, #0]
	dat[2] = dev->dat[2];
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	3304      	adds	r3, #4
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8003f2e:	801a      	strh	r2, [r3, #0]

};
 8003f30:	bf00      	nop
 8003f32:	3714      	adds	r7, #20
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd90      	pop	{r4, r7, pc}

08003f38 <h3l_convert>:

void h3l_convert(struct h3l_dev * dev, float* out)
{
 8003f38:	b590      	push	{r4, r7, lr}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]

	out[0] = (float)(dev->dat[0]) * 49. / 1000. * 9.81;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003f48:	ee07 3a90 	vmov	s15, r3
 8003f4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f50:	ee17 0a90 	vmov	r0, s15
 8003f54:	f7fc faf8 	bl	8000548 <__aeabi_f2d>
 8003f58:	f04f 0200 	mov.w	r2, #0
 8003f5c:	4b42      	ldr	r3, [pc, #264]	; (8004068 <h3l_convert+0x130>)
 8003f5e:	f7fc fb4b 	bl	80005f8 <__aeabi_dmul>
 8003f62:	4603      	mov	r3, r0
 8003f64:	460c      	mov	r4, r1
 8003f66:	4618      	mov	r0, r3
 8003f68:	4621      	mov	r1, r4
 8003f6a:	f04f 0200 	mov.w	r2, #0
 8003f6e:	4b3f      	ldr	r3, [pc, #252]	; (800406c <h3l_convert+0x134>)
 8003f70:	f7fc fc6c 	bl	800084c <__aeabi_ddiv>
 8003f74:	4603      	mov	r3, r0
 8003f76:	460c      	mov	r4, r1
 8003f78:	4618      	mov	r0, r3
 8003f7a:	4621      	mov	r1, r4
 8003f7c:	a338      	add	r3, pc, #224	; (adr r3, 8004060 <h3l_convert+0x128>)
 8003f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f82:	f7fc fb39 	bl	80005f8 <__aeabi_dmul>
 8003f86:	4603      	mov	r3, r0
 8003f88:	460c      	mov	r4, r1
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	4621      	mov	r1, r4
 8003f8e:	f7fc fe2b 	bl	8000be8 <__aeabi_d2f>
 8003f92:	4602      	mov	r2, r0
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	601a      	str	r2, [r3, #0]
	out[1] = (float)(dev->dat[1]) * 49. / 1000. * 9.81;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003f9e:	ee07 3a90 	vmov	s15, r3
 8003fa2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fa6:	ee17 0a90 	vmov	r0, s15
 8003faa:	f7fc facd 	bl	8000548 <__aeabi_f2d>
 8003fae:	f04f 0200 	mov.w	r2, #0
 8003fb2:	4b2d      	ldr	r3, [pc, #180]	; (8004068 <h3l_convert+0x130>)
 8003fb4:	f7fc fb20 	bl	80005f8 <__aeabi_dmul>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	460c      	mov	r4, r1
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	4621      	mov	r1, r4
 8003fc0:	f04f 0200 	mov.w	r2, #0
 8003fc4:	4b29      	ldr	r3, [pc, #164]	; (800406c <h3l_convert+0x134>)
 8003fc6:	f7fc fc41 	bl	800084c <__aeabi_ddiv>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	460c      	mov	r4, r1
 8003fce:	4618      	mov	r0, r3
 8003fd0:	4621      	mov	r1, r4
 8003fd2:	a323      	add	r3, pc, #140	; (adr r3, 8004060 <h3l_convert+0x128>)
 8003fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd8:	f7fc fb0e 	bl	80005f8 <__aeabi_dmul>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	460c      	mov	r4, r1
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4622      	mov	r2, r4
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	1d1c      	adds	r4, r3, #4
 8003fe8:	4608      	mov	r0, r1
 8003fea:	4611      	mov	r1, r2
 8003fec:	f7fc fdfc 	bl	8000be8 <__aeabi_d2f>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	6023      	str	r3, [r4, #0]
	out[2] = (float)(dev->dat[2]) * 49. / 1000. * 9.81;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8003ffa:	ee07 3a90 	vmov	s15, r3
 8003ffe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004002:	ee17 0a90 	vmov	r0, s15
 8004006:	f7fc fa9f 	bl	8000548 <__aeabi_f2d>
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	4b16      	ldr	r3, [pc, #88]	; (8004068 <h3l_convert+0x130>)
 8004010:	f7fc faf2 	bl	80005f8 <__aeabi_dmul>
 8004014:	4603      	mov	r3, r0
 8004016:	460c      	mov	r4, r1
 8004018:	4618      	mov	r0, r3
 800401a:	4621      	mov	r1, r4
 800401c:	f04f 0200 	mov.w	r2, #0
 8004020:	4b12      	ldr	r3, [pc, #72]	; (800406c <h3l_convert+0x134>)
 8004022:	f7fc fc13 	bl	800084c <__aeabi_ddiv>
 8004026:	4603      	mov	r3, r0
 8004028:	460c      	mov	r4, r1
 800402a:	4618      	mov	r0, r3
 800402c:	4621      	mov	r1, r4
 800402e:	a30c      	add	r3, pc, #48	; (adr r3, 8004060 <h3l_convert+0x128>)
 8004030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004034:	f7fc fae0 	bl	80005f8 <__aeabi_dmul>
 8004038:	4603      	mov	r3, r0
 800403a:	460c      	mov	r4, r1
 800403c:	4619      	mov	r1, r3
 800403e:	4622      	mov	r2, r4
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	f103 0408 	add.w	r4, r3, #8
 8004046:	4608      	mov	r0, r1
 8004048:	4611      	mov	r1, r2
 800404a:	f7fc fdcd 	bl	8000be8 <__aeabi_d2f>
 800404e:	4603      	mov	r3, r0
 8004050:	6023      	str	r3, [r4, #0]

	//printf("ax: %4.2f, ay: %4.2f, az: %4.2f\n",buffer[0],buffer[1],buffer[2]);

}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	bd90      	pop	{r4, r7, pc}
 800405a:	bf00      	nop
 800405c:	f3af 8000 	nop.w
 8004060:	51eb851f 	.word	0x51eb851f
 8004064:	40239eb8 	.word	0x40239eb8
 8004068:	40488000 	.word	0x40488000
 800406c:	408f4000 	.word	0x408f4000

08004070 <h3l_write>:


void h3l_write(struct h3l_dev * dev, uint8_t reg, uint8_t val)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b086      	sub	sp, #24
 8004074:	af02      	add	r7, sp, #8
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	460b      	mov	r3, r1
 800407a:	70fb      	strb	r3, [r7, #3]
 800407c:	4613      	mov	r3, r2
 800407e:	70bb      	strb	r3, [r7, #2]
	uint8_t _buf[2];
	//printf("writing to h3l: %d\n",val);
	_buf[0] = reg;
 8004080:	78fb      	ldrb	r3, [r7, #3]
 8004082:	733b      	strb	r3, [r7, #12]
	_buf[1] = val;
 8004084:	78bb      	ldrb	r3, [r7, #2]
 8004086:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, _buf, 2, dev->delay);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6858      	ldr	r0, [r3, #4]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	b299      	uxth	r1, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	7a1b      	ldrb	r3, [r3, #8]
 8004096:	f107 020c 	add.w	r2, r7, #12
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	2302      	movs	r3, #2
 800409e:	f004 ff01 	bl	8008ea4 <HAL_I2C_Master_Transmit>

};
 80040a2:	bf00      	nop
 80040a4:	3710      	adds	r7, #16
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
	...

080040ac <_get_accel_sensitivity>:
static float temperature_sensitivity = 326.8;

// *** Local functions *** //

// Used to convert raw accelerometer readings to G-force.
float _get_accel_sensitivity(enum icm20601_accel_g accel_g) {
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	4603      	mov	r3, r0
 80040b4:	71fb      	strb	r3, [r7, #7]
	float f = 0.0;
 80040b6:	f04f 0300 	mov.w	r3, #0
 80040ba:	60fb      	str	r3, [r7, #12]

  	switch (accel_g) {
 80040bc:	79fb      	ldrb	r3, [r7, #7]
 80040be:	2b03      	cmp	r3, #3
 80040c0:	d81a      	bhi.n	80040f8 <_get_accel_sensitivity+0x4c>
 80040c2:	a201      	add	r2, pc, #4	; (adr r2, 80040c8 <_get_accel_sensitivity+0x1c>)
 80040c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c8:	080040d9 	.word	0x080040d9
 80040cc:	080040e1 	.word	0x080040e1
 80040d0:	080040e9 	.word	0x080040e9
 80040d4:	080040f1 	.word	0x080040f1
  	case (ICM20601_ACCEL_RANGE_4G):
    		f = 8192.0;
 80040d8:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 80040dc:	60fb      	str	r3, [r7, #12]
    break;
 80040de:	e00b      	b.n	80040f8 <_get_accel_sensitivity+0x4c>
  	case (ICM20601_ACCEL_RANGE_8G):
    		f = 4096.0;
 80040e0:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 80040e4:	60fb      	str	r3, [r7, #12]
    break;
 80040e6:	e007      	b.n	80040f8 <_get_accel_sensitivity+0x4c>
  	case (ICM20601_ACCEL_RANGE_16G):
    		f = 2048.0;
 80040e8:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 80040ec:	60fb      	str	r3, [r7, #12]
    break;
 80040ee:	e003      	b.n	80040f8 <_get_accel_sensitivity+0x4c>
  	case (ICM20601_ACCEL_RANGE_32G):
    		f = 1024.0;
 80040f0:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 80040f4:	60fb      	str	r3, [r7, #12]
    break;
 80040f6:	bf00      	nop
  }
  return f;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	ee07 3a90 	vmov	s15, r3
}
 80040fe:	eeb0 0a67 	vmov.f32	s0, s15
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <_get_gyro_sensitivity>:

// Used to convert raw gyroscope readings to degrees per second.
float _get_gyro_sensitivity(enum icm20601_gyro_dps gyro_dps) {
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	4603      	mov	r3, r0
 8004114:	71fb      	strb	r3, [r7, #7]
	float f = 0;
 8004116:	f04f 0300 	mov.w	r3, #0
 800411a:	60fb      	str	r3, [r7, #12]

	switch (gyro_dps) {
 800411c:	79fb      	ldrb	r3, [r7, #7]
 800411e:	2b03      	cmp	r3, #3
 8004120:	d816      	bhi.n	8004150 <_get_gyro_sensitivity+0x44>
 8004122:	a201      	add	r2, pc, #4	; (adr r2, 8004128 <_get_gyro_sensitivity+0x1c>)
 8004124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004128:	08004139 	.word	0x08004139
 800412c:	0800413f 	.word	0x0800413f
 8004130:	08004145 	.word	0x08004145
 8004134:	0800414b 	.word	0x0800414b
	case (ICM20601_GYRO_RANGE_500_DPS):
    		f = 65.5;
 8004138:	4b0a      	ldr	r3, [pc, #40]	; (8004164 <_get_gyro_sensitivity+0x58>)
 800413a:	60fb      	str	r3, [r7, #12]
	break;
 800413c:	e008      	b.n	8004150 <_get_gyro_sensitivity+0x44>
	case (ICM20601_GYRO_RANGE_1000_DPS):
    		f = 32.8;
 800413e:	4b0a      	ldr	r3, [pc, #40]	; (8004168 <_get_gyro_sensitivity+0x5c>)
 8004140:	60fb      	str	r3, [r7, #12]
    break;
 8004142:	e005      	b.n	8004150 <_get_gyro_sensitivity+0x44>
    case (ICM20601_GYRO_RANGE_2000_DPS):
    		f = 16.4;
 8004144:	4b09      	ldr	r3, [pc, #36]	; (800416c <_get_gyro_sensitivity+0x60>)
 8004146:	60fb      	str	r3, [r7, #12]
    break;
 8004148:	e002      	b.n	8004150 <_get_gyro_sensitivity+0x44>
    case (ICM20601_GYRO_RANGE_4000_DPS):
    		f = 8.2;
 800414a:	4b09      	ldr	r3, [pc, #36]	; (8004170 <_get_gyro_sensitivity+0x64>)
 800414c:	60fb      	str	r3, [r7, #12]
    break;
 800414e:	bf00      	nop
  }
  return f;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	ee07 3a90 	vmov	s15, r3
}
 8004156:	eeb0 0a67 	vmov.f32	s0, s15
 800415a:	3714      	adds	r7, #20
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	42830000 	.word	0x42830000
 8004168:	42033333 	.word	0x42033333
 800416c:	41833333 	.word	0x41833333
 8004170:	41033333 	.word	0x41033333

08004174 <_icm_read_bytes>:
  }
  return 1;
}

// Read bytes from MEMS
void _icm_read_bytes(struct icm20601_dev * dev, uint8_t reg, uint8_t* pData, uint16_t size){
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	607a      	str	r2, [r7, #4]
 800417e:	461a      	mov	r2, r3
 8004180:	460b      	mov	r3, r1
 8004182:	72fb      	strb	r3, [r7, #11]
 8004184:	4613      	mov	r3, r2
 8004186:	813b      	strh	r3, [r7, #8]
	reg = reg | 0x80;
 8004188:	7afb      	ldrb	r3, [r7, #11]
 800418a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800418e:	b2db      	uxtb	r3, r3
 8004190:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_RESET);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6818      	ldr	r0, [r3, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	889b      	ldrh	r3, [r3, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	4619      	mov	r1, r3
 800419e:	f004 fd15 	bl	8008bcc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->spi_bus, &reg, 1, IMU20601_SPI_TIMEOUT);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6898      	ldr	r0, [r3, #8]
 80041a6:	f107 010b 	add.w	r1, r7, #11
 80041aa:	230a      	movs	r3, #10
 80041ac:	2201      	movs	r2, #1
 80041ae:	f007 fd8f 	bl	800bcd0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(dev->spi_bus, pData, size, IMU20601_SPI_TIMEOUT);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6898      	ldr	r0, [r3, #8]
 80041b6:	893a      	ldrh	r2, [r7, #8]
 80041b8:	230a      	movs	r3, #10
 80041ba:	6879      	ldr	r1, [r7, #4]
 80041bc:	f007 febc 	bl	800bf38 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_SET);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6818      	ldr	r0, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	889b      	ldrh	r3, [r3, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	4619      	mov	r1, r3
 80041cc:	f004 fcfe 	bl	8008bcc <HAL_GPIO_WritePin>
}
 80041d0:	bf00      	nop
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <_icm_write_bytes>:

// Write bytes to MEMS
void _icm_write_bytes(struct icm20601_dev * dev, uint8_t reg, uint8_t *pData, uint16_t size){
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	607a      	str	r2, [r7, #4]
 80041e2:	461a      	mov	r2, r3
 80041e4:	460b      	mov	r3, r1
 80041e6:	72fb      	strb	r3, [r7, #11]
 80041e8:	4613      	mov	r3, r2
 80041ea:	813b      	strh	r3, [r7, #8]

	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_RESET);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6818      	ldr	r0, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	889b      	ldrh	r3, [r3, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	4619      	mov	r1, r3
 80041f8:	f004 fce8 	bl	8008bcc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(dev->spi_bus, &reg, 1, IMU20601_SPI_TIMEOUT);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6898      	ldr	r0, [r3, #8]
 8004200:	f107 010b 	add.w	r1, r7, #11
 8004204:	230a      	movs	r3, #10
 8004206:	2201      	movs	r2, #1
 8004208:	f007 fd62 	bl	800bcd0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(dev->spi_bus, pData, size, IMU20601_SPI_TIMEOUT);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6898      	ldr	r0, [r3, #8]
 8004210:	893a      	ldrh	r2, [r7, #8]
 8004212:	230a      	movs	r3, #10
 8004214:	6879      	ldr	r1, [r7, #4]
 8004216:	f007 fd5b 	bl	800bcd0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_SET);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6818      	ldr	r0, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	889b      	ldrh	r3, [r3, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	4619      	mov	r1, r3
 8004226:	f004 fcd1 	bl	8008bcc <HAL_GPIO_WritePin>
}
 800422a:	bf00      	nop
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <icm20601_init>:


// *** Global Functions *** //

int8_t icm20601_init(struct icm20601_dev * dev) {
 8004232:	b580      	push	{r7, lr}
 8004234:	b084      	sub	sp, #16
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0;
 800423a:	2300      	movs	r3, #0
 800423c:	73fb      	strb	r3, [r7, #15]
	uint8_t r [1] = {0};
 800423e:	2300      	movs	r3, #0
 8004240:	733b      	strb	r3, [r7, #12]
	//  4. disable fifo
	//  5. configure chip
	//  6. enable accelerometer and gyroscope

	// full reset of chip
	tmp = SENS_reset; // 0x81
 8004242:	2381      	movs	r3, #129	; 0x81
 8004244:	73fb      	strb	r3, [r7, #15]
	_icm_write_bytes(dev, REG_PWR_MGMT_1, &tmp , 1);
 8004246:	f107 020f 	add.w	r2, r7, #15
 800424a:	2301      	movs	r3, #1
 800424c:	216b      	movs	r1, #107	; 0x6b
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7ff ffc2 	bl	80041d8 <_icm_write_bytes>
	HAL_Delay(1);
 8004254:	2001      	movs	r0, #1
 8004256:	f003 f989 	bl	800756c <HAL_Delay>

    // set clock to internal PLL
    tmp = SENS_internalpll; //0x01
 800425a:	2301      	movs	r3, #1
 800425c:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_1, &tmp, 1);
 800425e:	f107 020f 	add.w	r2, r7, #15
 8004262:	2301      	movs	r3, #1
 8004264:	216b      	movs	r1, #107	; 0x6b
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f7ff ffb6 	bl	80041d8 <_icm_write_bytes>
    HAL_Delay(1);
 800426c:	2001      	movs	r0, #1
 800426e:	f003 f97d 	bl	800756c <HAL_Delay>

    // verify we are able to read from the chip
    _icm_read_bytes(dev, REG_WHO_AM_I, r, 1);
 8004272:	f107 020c 	add.w	r2, r7, #12
 8004276:	2301      	movs	r3, #1
 8004278:	2175      	movs	r1, #117	; 0x75
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7ff ff7a 	bl	8004174 <_icm_read_bytes>
    if (r[0] != REG_WHO_AM_I_CONST) return 0;
 8004280:	7b3b      	ldrb	r3, [r7, #12]
 8004282:	2bac      	cmp	r3, #172	; 0xac
 8004284:	d001      	beq.n	800428a <icm20601_init+0x58>
 8004286:	2300      	movs	r3, #0
 8004288:	e093      	b.n	80043b2 <icm20601_init+0x180>

    // place accel and gyro on standby
    tmp = SENS_standby; // 0x3F
 800428a:	233f      	movs	r3, #63	; 0x3f
 800428c:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_2, &tmp , 1);
 800428e:	f107 020f 	add.w	r2, r7, #15
 8004292:	2301      	movs	r3, #1
 8004294:	216c      	movs	r1, #108	; 0x6c
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7ff ff9e 	bl	80041d8 <_icm_write_bytes>

    // disable fifo
    tmp = SENS_nofifo; //0x00
 800429c:	2300      	movs	r3, #0
 800429e:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_USER_CTRL, &tmp , 1);
 80042a0:	f107 020f 	add.w	r2, r7, #15
 80042a4:	2301      	movs	r3, #1
 80042a6:	216a      	movs	r1, #106	; 0x6a
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7ff ff95 	bl	80041d8 <_icm_write_bytes>

    // disable chip I2C communications
    tmp = SENS_disablei2c;	//0x41;
 80042ae:	2341      	movs	r3, #65	; 0x41
 80042b0:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_USER_CTRL, &tmp , 1);
 80042b2:	f107 020f 	add.w	r2, r7, #15
 80042b6:	2301      	movs	r3, #1
 80042b8:	216a      	movs	r1, #106	; 0x6a
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7ff ff8c 	bl	80041d8 <_icm_write_bytes>

    // Accelerometer filtering
    if (ICM20601_ACCEL_DLPF_BYPASS_1046_HZ == dev->accel_dlpf) {
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	7b1b      	ldrb	r3, [r3, #12]
 80042c4:	2b08      	cmp	r3, #8
 80042c6:	d102      	bne.n	80042ce <icm20601_init+0x9c>
      tmp = (0x01 << 3);
 80042c8:	2308      	movs	r3, #8
 80042ca:	73fb      	strb	r3, [r7, #15]
 80042cc:	e002      	b.n	80042d4 <icm20601_init+0xa2>
    }
    else {
      tmp = dev->accel_dlpf;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	7b1b      	ldrb	r3, [r3, #12]
 80042d2:	73fb      	strb	r3, [r7, #15]
    }
    _icm_write_bytes(dev, REG_ACCEL_CONFIG_2, &tmp , 1);
 80042d4:	f107 020f 	add.w	r2, r7, #15
 80042d8:	2301      	movs	r3, #1
 80042da:	211d      	movs	r1, #29
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f7ff ff7b 	bl	80041d8 <_icm_write_bytes>

    // Accelerometer range
    tmp = (dev->accel_g) << 3;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	7b5b      	ldrb	r3, [r3, #13]
 80042e6:	00db      	lsls	r3, r3, #3
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_ACCEL_CONFIG_1, &tmp , 1);
 80042ec:	f107 020f 	add.w	r2, r7, #15
 80042f0:	2301      	movs	r3, #1
 80042f2:	211c      	movs	r1, #28
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f7ff ff6f 	bl	80041d8 <_icm_write_bytes>
    // Gyro filtering
    //tmp = ((dev->gyro_dps) << 3) | SENS_gyrofilter; // filter: 0x02
    //_icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);


    if (ICM20601_GYRO_DLPF_BYPASS_3281_HZ == dev->gyro_dlpf) {
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	7b9b      	ldrb	r3, [r3, #14]
 80042fe:	2b08      	cmp	r3, #8
 8004300:	d119      	bne.n	8004336 <icm20601_init+0x104>
    	// bypass dpf and set dps
        tmp = 0x00;
 8004302:	2300      	movs	r3, #0
 8004304:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 8004306:	f107 020f 	add.w	r2, r7, #15
 800430a:	2301      	movs	r3, #1
 800430c:	211a      	movs	r1, #26
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7ff ff62 	bl	80041d8 <_icm_write_bytes>

        tmp = (dev->gyro_dps << 3) | 0x02;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	7bdb      	ldrb	r3, [r3, #15]
 8004318:	00db      	lsls	r3, r3, #3
 800431a:	b25b      	sxtb	r3, r3
 800431c:	f043 0302 	orr.w	r3, r3, #2
 8004320:	b25b      	sxtb	r3, r3
 8004322:	b2db      	uxtb	r3, r3
 8004324:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 8004326:	f107 020f 	add.w	r2, r7, #15
 800432a:	2301      	movs	r3, #1
 800432c:	211b      	movs	r1, #27
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7ff ff52 	bl	80041d8 <_icm_write_bytes>
 8004334:	e033      	b.n	800439e <icm20601_init+0x16c>
     }
     else if (ICM20601_GYRO_DLPF_BYPASS_8173_HZ == dev->gyro_dlpf) {
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	7b9b      	ldrb	r3, [r3, #14]
 800433a:	2b09      	cmp	r3, #9
 800433c:	d119      	bne.n	8004372 <icm20601_init+0x140>
        // bypass dpf and set dps
        tmp = 0x00;
 800433e:	2300      	movs	r3, #0
 8004340:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 8004342:	f107 020f 	add.w	r2, r7, #15
 8004346:	2301      	movs	r3, #1
 8004348:	211a      	movs	r1, #26
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f7ff ff44 	bl	80041d8 <_icm_write_bytes>

        tmp = (dev->gyro_dps << 3) | 0x01;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	7bdb      	ldrb	r3, [r3, #15]
 8004354:	00db      	lsls	r3, r3, #3
 8004356:	b25b      	sxtb	r3, r3
 8004358:	f043 0301 	orr.w	r3, r3, #1
 800435c:	b25b      	sxtb	r3, r3
 800435e:	b2db      	uxtb	r3, r3
 8004360:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 8004362:	f107 020f 	add.w	r2, r7, #15
 8004366:	2301      	movs	r3, #1
 8004368:	211b      	movs	r1, #27
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f7ff ff34 	bl	80041d8 <_icm_write_bytes>
 8004370:	e015      	b.n	800439e <icm20601_init+0x16c>
     }
     else {
        // configure dpf and set dps
        tmp = dev->gyro_dlpf;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	7b9b      	ldrb	r3, [r3, #14]
 8004376:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_CONFIG, &tmp , 1);
 8004378:	f107 020f 	add.w	r2, r7, #15
 800437c:	2301      	movs	r3, #1
 800437e:	211a      	movs	r1, #26
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f7ff ff29 	bl	80041d8 <_icm_write_bytes>

        tmp = dev->gyro_dps << 3;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	7bdb      	ldrb	r3, [r3, #15]
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	b2db      	uxtb	r3, r3
 800438e:	73fb      	strb	r3, [r7, #15]
        _icm_write_bytes(dev, REG_GYRO_CONFIG, &tmp , 1);
 8004390:	f107 020f 	add.w	r2, r7, #15
 8004394:	2301      	movs	r3, #1
 8004396:	211b      	movs	r1, #27
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f7ff ff1d 	bl	80041d8 <_icm_write_bytes>
     }


    tmp = 0x00;
 800439e:	2300      	movs	r3, #0
 80043a0:	73fb      	strb	r3, [r7, #15]
    _icm_write_bytes(dev, REG_PWR_MGMT_2, &tmp, 1);
 80043a2:	f107 020f 	add.w	r2, r7, #15
 80043a6:	2301      	movs	r3, #1
 80043a8:	216c      	movs	r1, #108	; 0x6c
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7ff ff14 	bl	80041d8 <_icm_write_bytes>


    return 1;
 80043b0:	2301      	movs	r3, #1
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <icm20601_read_accel_raw>:

// Read out raw acceleration data
void icm20601_read_accel_raw(struct icm20601_dev * dev, int16_t *accel){
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b084      	sub	sp, #16
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
 80043c2:	6039      	str	r1, [r7, #0]
	uint8_t accel_8bit [6] = { 0 };
 80043c4:	f107 0308 	add.w	r3, r7, #8
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]
 80043cc:	809a      	strh	r2, [r3, #4]
	_icm_read_bytes(dev, REG_ACCEL_XOUT_H, accel_8bit, 6);
 80043ce:	f107 0208 	add.w	r2, r7, #8
 80043d2:	2306      	movs	r3, #6
 80043d4:	213b      	movs	r1, #59	; 0x3b
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7ff fecc 	bl	8004174 <_icm_read_bytes>

	UINT8_TO_INT16(accel[0], accel_8bit[0], accel_8bit[1]);
 80043dc:	7a3b      	ldrb	r3, [r7, #8]
 80043de:	b21a      	sxth	r2, r3
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	801a      	strh	r2, [r3, #0]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043ea:	021b      	lsls	r3, r3, #8
 80043ec:	b21a      	sxth	r2, r3
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	801a      	strh	r2, [r3, #0]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80043f8:	7a7b      	ldrb	r3, [r7, #9]
 80043fa:	b21b      	sxth	r3, r3
 80043fc:	4313      	orrs	r3, r2
 80043fe:	b21a      	sxth	r2, r3
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(accel[1], accel_8bit[2], accel_8bit[3]);
 8004404:	7aba      	ldrb	r2, [r7, #10]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	3302      	adds	r3, #2
 800440a:	b212      	sxth	r2, r2
 800440c:	801a      	strh	r2, [r3, #0]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	3302      	adds	r3, #2
 8004412:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004416:	021a      	lsls	r2, r3, #8
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	3302      	adds	r3, #2
 800441c:	b212      	sxth	r2, r2
 800441e:	801a      	strh	r2, [r3, #0]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	3302      	adds	r3, #2
 8004424:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004428:	7afb      	ldrb	r3, [r7, #11]
 800442a:	b21a      	sxth	r2, r3
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	3302      	adds	r3, #2
 8004430:	430a      	orrs	r2, r1
 8004432:	b212      	sxth	r2, r2
 8004434:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(accel[2], accel_8bit[4], accel_8bit[5]);
 8004436:	7b3a      	ldrb	r2, [r7, #12]
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	3304      	adds	r3, #4
 800443c:	b212      	sxth	r2, r2
 800443e:	801a      	strh	r2, [r3, #0]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	3304      	adds	r3, #4
 8004444:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004448:	021a      	lsls	r2, r3, #8
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	3304      	adds	r3, #4
 800444e:	b212      	sxth	r2, r2
 8004450:	801a      	strh	r2, [r3, #0]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	3304      	adds	r3, #4
 8004456:	f9b3 1000 	ldrsh.w	r1, [r3]
 800445a:	7b7b      	ldrb	r3, [r7, #13]
 800445c:	b21a      	sxth	r2, r3
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	3304      	adds	r3, #4
 8004462:	430a      	orrs	r2, r1
 8004464:	b212      	sxth	r2, r2
 8004466:	801a      	strh	r2, [r3, #0]
}
 8004468:	bf00      	nop
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <icm20601_read_gyro_raw>:
    accel[1]  = ((float) accel_raw[1]) / accel_sensitivity;
    accel[2]  = ((float) accel_raw[2]) / accel_sensitivity;
}

// Read out raw gyro data
void icm20601_read_gyro_raw(struct icm20601_dev * dev, int16_t *gyro){
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
	uint8_t gyro_8bit [6] = { 0 };
 800447a:	f107 0308 	add.w	r3, r7, #8
 800447e:	2200      	movs	r2, #0
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	809a      	strh	r2, [r3, #4]
	_icm_read_bytes(dev, REG_GYRO_XOUT_H, gyro_8bit, 6);
 8004484:	f107 0208 	add.w	r2, r7, #8
 8004488:	2306      	movs	r3, #6
 800448a:	2143      	movs	r1, #67	; 0x43
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f7ff fe71 	bl	8004174 <_icm_read_bytes>

	UINT8_TO_INT16(gyro[0], gyro_8bit[0], gyro_8bit[1]);
 8004492:	7a3b      	ldrb	r3, [r7, #8]
 8004494:	b21a      	sxth	r2, r3
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	801a      	strh	r2, [r3, #0]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044a0:	021b      	lsls	r3, r3, #8
 80044a2:	b21a      	sxth	r2, r3
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	801a      	strh	r2, [r3, #0]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80044ae:	7a7b      	ldrb	r3, [r7, #9]
 80044b0:	b21b      	sxth	r3, r3
 80044b2:	4313      	orrs	r3, r2
 80044b4:	b21a      	sxth	r2, r3
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(gyro[1], gyro_8bit[2], gyro_8bit[3]);
 80044ba:	7aba      	ldrb	r2, [r7, #10]
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	3302      	adds	r3, #2
 80044c0:	b212      	sxth	r2, r2
 80044c2:	801a      	strh	r2, [r3, #0]
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	3302      	adds	r3, #2
 80044c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044cc:	021a      	lsls	r2, r3, #8
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	3302      	adds	r3, #2
 80044d2:	b212      	sxth	r2, r2
 80044d4:	801a      	strh	r2, [r3, #0]
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	3302      	adds	r3, #2
 80044da:	f9b3 1000 	ldrsh.w	r1, [r3]
 80044de:	7afb      	ldrb	r3, [r7, #11]
 80044e0:	b21a      	sxth	r2, r3
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	3302      	adds	r3, #2
 80044e6:	430a      	orrs	r2, r1
 80044e8:	b212      	sxth	r2, r2
 80044ea:	801a      	strh	r2, [r3, #0]
	UINT8_TO_INT16(gyro[2], gyro_8bit[4], gyro_8bit[5]);
 80044ec:	7b3a      	ldrb	r2, [r7, #12]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	3304      	adds	r3, #4
 80044f2:	b212      	sxth	r2, r2
 80044f4:	801a      	strh	r2, [r3, #0]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	3304      	adds	r3, #4
 80044fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044fe:	021a      	lsls	r2, r3, #8
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	3304      	adds	r3, #4
 8004504:	b212      	sxth	r2, r2
 8004506:	801a      	strh	r2, [r3, #0]
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	3304      	adds	r3, #4
 800450c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004510:	7b7b      	ldrb	r3, [r7, #13]
 8004512:	b21a      	sxth	r2, r3
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	3304      	adds	r3, #4
 8004518:	430a      	orrs	r2, r1
 800451a:	b212      	sxth	r2, r2
 800451c:	801a      	strh	r2, [r3, #0]
}
 800451e:	bf00      	nop
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <icm20601_read_temp_raw>:
    gyro[1]  = ((float) gyro_raw[1]) / gyro_sensitivity;
    gyro[2]  = ((float) gyro_raw[2]) / gyro_sensitivity;
}

// Read out raw temperature data
void icm20601_read_temp_raw(struct icm20601_dev * dev, int16_t *temp){
 8004526:	b580      	push	{r7, lr}
 8004528:	b084      	sub	sp, #16
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
 800452e:	6039      	str	r1, [r7, #0]
	uint8_t temp_8bit [2] = { 0 };
 8004530:	2300      	movs	r3, #0
 8004532:	81bb      	strh	r3, [r7, #12]
	_icm_read_bytes(dev, REG_TEMP_OUT_H, temp_8bit, 2);
 8004534:	f107 020c 	add.w	r2, r7, #12
 8004538:	2302      	movs	r3, #2
 800453a:	2141      	movs	r1, #65	; 0x41
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f7ff fe19 	bl	8004174 <_icm_read_bytes>

	UINT8_TO_INT16(*temp, temp_8bit[0], temp_8bit[1]);
 8004542:	7b3b      	ldrb	r3, [r7, #12]
 8004544:	b21a      	sxth	r2, r3
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	801a      	strh	r2, [r3, #0]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004550:	021b      	lsls	r3, r3, #8
 8004552:	b21a      	sxth	r2, r3
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	801a      	strh	r2, [r3, #0]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800455e:	7b7b      	ldrb	r3, [r7, #13]
 8004560:	b21b      	sxth	r3, r3
 8004562:	4313      	orrs	r3, r2
 8004564:	b21a      	sxth	r2, r3
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	801a      	strh	r2, [r3, #0]
}
 800456a:	bf00      	nop
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	0000      	movs	r0, r0
 8004574:	0000      	movs	r0, r0
	...

08004578 <icm20601_read_data>:

	*temp = ((float)temperature_raw) / temperature_sensitivity + 25.0; // TEMP_degC = ((TEMP_OUT – RoomTemp_Offset)/Temp_Sensitivity) + 25degC
}

void icm20601_read_data(struct icm20601_dev * dev, float * buf)
{
 8004578:	b590      	push	{r4, r7, lr}
 800457a:	b089      	sub	sp, #36	; 0x24
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
	int16_t temperature_raw;
	icm20601_read_temp_raw(dev, &temperature_raw);
 8004582:	f107 0316 	add.w	r3, r7, #22
 8004586:	4619      	mov	r1, r3
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f7ff ffcc 	bl	8004526 <icm20601_read_temp_raw>
	buf[0] = ((float)temperature_raw) / temperature_sensitivity + 25.0;
 800458e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004592:	ee07 3a90 	vmov	s15, r3
 8004596:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800459a:	4b61      	ldr	r3, [pc, #388]	; (8004720 <icm20601_read_data+0x1a8>)
 800459c:	ed93 7a00 	vldr	s14, [r3]
 80045a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045a4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80045a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	edc3 7a00 	vstr	s15, [r3]
	float accel_sensitivity;
	int16_t accel_raw[3] = { 0 };
 80045b2:	f107 0310 	add.w	r3, r7, #16
 80045b6:	2200      	movs	r2, #0
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	809a      	strh	r2, [r3, #4]

	accel_sensitivity = _get_accel_sensitivity(dev->accel_g);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	7b5b      	ldrb	r3, [r3, #13]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7ff fd73 	bl	80040ac <_get_accel_sensitivity>
 80045c6:	ed87 0a07 	vstr	s0, [r7, #28]

  	icm20601_read_accel_raw(dev, accel_raw);
 80045ca:	f107 0310 	add.w	r3, r7, #16
 80045ce:	4619      	mov	r1, r3
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f7ff fef2 	bl	80043ba <icm20601_read_accel_raw>

    buf[1] = ((float) accel_raw[0]) / accel_sensitivity * 9.81;
 80045d6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80045da:	ee07 3a90 	vmov	s15, r3
 80045de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045e2:	edd7 7a07 	vldr	s15, [r7, #28]
 80045e6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80045ea:	ee16 0a90 	vmov	r0, s13
 80045ee:	f7fb ffab 	bl	8000548 <__aeabi_f2d>
 80045f2:	a349      	add	r3, pc, #292	; (adr r3, 8004718 <icm20601_read_data+0x1a0>)
 80045f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f8:	f7fb fffe 	bl	80005f8 <__aeabi_dmul>
 80045fc:	4603      	mov	r3, r0
 80045fe:	460c      	mov	r4, r1
 8004600:	4619      	mov	r1, r3
 8004602:	4622      	mov	r2, r4
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	1d1c      	adds	r4, r3, #4
 8004608:	4608      	mov	r0, r1
 800460a:	4611      	mov	r1, r2
 800460c:	f7fc faec 	bl	8000be8 <__aeabi_d2f>
 8004610:	4603      	mov	r3, r0
 8004612:	6023      	str	r3, [r4, #0]
    buf[2]  = ((float) accel_raw[1]) / accel_sensitivity * 9.81;
 8004614:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004618:	ee07 3a90 	vmov	s15, r3
 800461c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004620:	edd7 7a07 	vldr	s15, [r7, #28]
 8004624:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004628:	ee16 0a90 	vmov	r0, s13
 800462c:	f7fb ff8c 	bl	8000548 <__aeabi_f2d>
 8004630:	a339      	add	r3, pc, #228	; (adr r3, 8004718 <icm20601_read_data+0x1a0>)
 8004632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004636:	f7fb ffdf 	bl	80005f8 <__aeabi_dmul>
 800463a:	4603      	mov	r3, r0
 800463c:	460c      	mov	r4, r1
 800463e:	4619      	mov	r1, r3
 8004640:	4622      	mov	r2, r4
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	f103 0408 	add.w	r4, r3, #8
 8004648:	4608      	mov	r0, r1
 800464a:	4611      	mov	r1, r2
 800464c:	f7fc facc 	bl	8000be8 <__aeabi_d2f>
 8004650:	4603      	mov	r3, r0
 8004652:	6023      	str	r3, [r4, #0]
    buf[3]  = ((float) accel_raw[2]) / accel_sensitivity * 9.81 ;
 8004654:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004658:	ee07 3a90 	vmov	s15, r3
 800465c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004660:	edd7 7a07 	vldr	s15, [r7, #28]
 8004664:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004668:	ee16 0a90 	vmov	r0, s13
 800466c:	f7fb ff6c 	bl	8000548 <__aeabi_f2d>
 8004670:	a329      	add	r3, pc, #164	; (adr r3, 8004718 <icm20601_read_data+0x1a0>)
 8004672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004676:	f7fb ffbf 	bl	80005f8 <__aeabi_dmul>
 800467a:	4603      	mov	r3, r0
 800467c:	460c      	mov	r4, r1
 800467e:	4619      	mov	r1, r3
 8004680:	4622      	mov	r2, r4
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	f103 040c 	add.w	r4, r3, #12
 8004688:	4608      	mov	r0, r1
 800468a:	4611      	mov	r1, r2
 800468c:	f7fc faac 	bl	8000be8 <__aeabi_d2f>
 8004690:	4603      	mov	r3, r0
 8004692:	6023      	str	r3, [r4, #0]

	float gyro_sensitivity;
	int16_t gyro_raw[3] = { 0 };
 8004694:	f107 0308 	add.w	r3, r7, #8
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]
 800469c:	809a      	strh	r2, [r3, #4]

	gyro_sensitivity = _get_gyro_sensitivity(dev->gyro_dps);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	7bdb      	ldrb	r3, [r3, #15]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7ff fd32 	bl	800410c <_get_gyro_sensitivity>
 80046a8:	ed87 0a06 	vstr	s0, [r7, #24]

  	icm20601_read_gyro_raw(dev, gyro_raw);
 80046ac:	f107 0308 	add.w	r3, r7, #8
 80046b0:	4619      	mov	r1, r3
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7ff fedc 	bl	8004470 <icm20601_read_gyro_raw>

    buf[4] = ((float) gyro_raw[0]) / gyro_sensitivity;
 80046b8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80046bc:	ee07 3a90 	vmov	s15, r3
 80046c0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	3310      	adds	r3, #16
 80046c8:	ed97 7a06 	vldr	s14, [r7, #24]
 80046cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046d0:	edc3 7a00 	vstr	s15, [r3]
    buf[5]  = ((float) gyro_raw[1]) / gyro_sensitivity;
 80046d4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80046d8:	ee07 3a90 	vmov	s15, r3
 80046dc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	3314      	adds	r3, #20
 80046e4:	ed97 7a06 	vldr	s14, [r7, #24]
 80046e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046ec:	edc3 7a00 	vstr	s15, [r3]
    buf[6]  = ((float) gyro_raw[2]) / gyro_sensitivity;
 80046f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80046f4:	ee07 3a90 	vmov	s15, r3
 80046f8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	3318      	adds	r3, #24
 8004700:	ed97 7a06 	vldr	s14, [r7, #24]
 8004704:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004708:	edc3 7a00 	vstr	s15, [r3]
}
 800470c:	bf00      	nop
 800470e:	3724      	adds	r7, #36	; 0x24
 8004710:	46bd      	mov	sp, r7
 8004712:	bd90      	pop	{r4, r7, pc}
 8004714:	f3af 8000 	nop.w
 8004718:	51eb851f 	.word	0x51eb851f
 800471c:	40239eb8 	.word	0x40239eb8
 8004720:	2000015c 	.word	0x2000015c

08004724 <toggle>:
 *      Author: linus
 */

#include "devices/LED.h"

void toggle(struct LED_dev * ctrl){
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(ctrl->LED_port, ctrl->LED_pin);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	889b      	ldrh	r3, [r3, #4]
 8004734:	4619      	mov	r1, r3
 8004736:	4610      	mov	r0, r2
 8004738:	f004 fa61 	bl	8008bfe <HAL_GPIO_TogglePin>
}
 800473c:	bf00      	nop
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <turn_on>:

void turn_on(struct LED_dev * ctrl){
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ctrl->LED_port, ctrl->LED_pin, GPIO_PIN_SET);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6818      	ldr	r0, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	889b      	ldrh	r3, [r3, #4]
 8004754:	2201      	movs	r2, #1
 8004756:	4619      	mov	r1, r3
 8004758:	f004 fa38 	bl	8008bcc <HAL_GPIO_WritePin>
}
 800475c:	bf00      	nop
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <turn_off>:

void turn_off(struct LED_dev * ctrl){
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ctrl->LED_port, ctrl->LED_pin, GPIO_PIN_RESET);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6818      	ldr	r0, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	889b      	ldrh	r3, [r3, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	4619      	mov	r1, r3
 8004778:	f004 fa28 	bl	8008bcc <HAL_GPIO_WritePin>
}
 800477c:	bf00      	nop
 800477e:	3708      	adds	r7, #8
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <ms5607_init>:
#include <stdio.h>
#include <math.h>


uint8_t ms5607_init(struct ms5607_dev * dev)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b088      	sub	sp, #32
 8004788:	af02      	add	r7, sp, #8
 800478a:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_GetState(dev->i2c_bus) != HAL_I2C_STATE_READY)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	4618      	mov	r0, r3
 8004792:	f004 ffd9 	bl	8009748 <HAL_I2C_GetState>
 8004796:	4603      	mov	r3, r0
 8004798:	2b20      	cmp	r3, #32
 800479a:	d003      	beq.n	80047a4 <ms5607_init+0x20>
	{
		printf("i2c not ready!\n");
 800479c:	484a      	ldr	r0, [pc, #296]	; (80048c8 <ms5607_init+0x144>)
 800479e:	f00c fbdb 	bl	8010f58 <puts>
 80047a2:	e002      	b.n	80047aa <ms5607_init+0x26>
	} else {
		printf("i2c is ready!\n");
 80047a4:	4849      	ldr	r0, [pc, #292]	; (80048cc <ms5607_init+0x148>)
 80047a6:	f00c fbd7 	bl	8010f58 <puts>
	}
	HAL_StatusTypeDef _ret;
	_ret = HAL_I2C_IsDeviceReady(dev->i2c_bus, dev->addr, 10, dev->addr);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6858      	ldr	r0, [r3, #4]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	b299      	uxth	r1, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	220a      	movs	r2, #10
 80047ba:	f004 fe97 	bl	80094ec <HAL_I2C_IsDeviceReady>
 80047be:	4603      	mov	r3, r0
 80047c0:	74fb      	strb	r3, [r7, #19]
	if ( _ret != HAL_OK )
 80047c2:	7cfb      	ldrb	r3, [r7, #19]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d009      	beq.n	80047dc <ms5607_init+0x58>
	{
		printf("BARO setup fail\n");
 80047c8:	4841      	ldr	r0, [pc, #260]	; (80048d0 <ms5607_init+0x14c>)
 80047ca:	f00c fbc5 	bl	8010f58 <puts>
		printf("Errorcode: %d\n", _ret);
 80047ce:	7cfb      	ldrb	r3, [r7, #19]
 80047d0:	4619      	mov	r1, r3
 80047d2:	4840      	ldr	r0, [pc, #256]	; (80048d4 <ms5607_init+0x150>)
 80047d4:	f00c fb4c 	bl	8010e70 <iprintf>
		return 0;
 80047d8:	2300      	movs	r3, #0
 80047da:	e070      	b.n	80048be <ms5607_init+0x13a>

	//get factory calibration data
	//reset (advised in datasheet)

	uint8_t reset_code[1];
	reset_code[0] = 0x1E;
 80047dc:	231e      	movs	r3, #30
 80047de:	743b      	strb	r3, [r7, #16]
	_ret = HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, reset_code, 1, dev->delay);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6858      	ldr	r0, [r3, #4]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	b299      	uxth	r1, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	7a1b      	ldrb	r3, [r3, #8]
 80047ee:	f107 0210 	add.w	r2, r7, #16
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	2301      	movs	r3, #1
 80047f6:	f004 fb55 	bl	8008ea4 <HAL_I2C_Master_Transmit>
 80047fa:	4603      	mov	r3, r0
 80047fc:	74fb      	strb	r3, [r7, #19]

	HAL_Delay(100);
 80047fe:	2064      	movs	r0, #100	; 0x64
 8004800:	f002 feb4 	bl	800756c <HAL_Delay>

	//get each calibration value (c1 - c6 in datasheet)
	uint8_t get_add;
	uint8_t buf[2];

	for(int i = 1; i < 7; i++){
 8004804:	2301      	movs	r3, #1
 8004806:	617b      	str	r3, [r7, #20]
 8004808:	e043      	b.n	8004892 <ms5607_init+0x10e>

		//standard commands (see datasheet)
		get_add = 0b10100000;
 800480a:	23a0      	movs	r3, #160	; 0xa0
 800480c:	73fb      	strb	r3, [r7, #15]
		get_add = get_add + 2*i;
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	b2db      	uxtb	r3, r3
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	b2da      	uxtb	r2, r3
 8004816:	7bfb      	ldrb	r3, [r7, #15]
 8004818:	4413      	add	r3, r2
 800481a:	b2db      	uxtb	r3, r3
 800481c:	73fb      	strb	r3, [r7, #15]

		_ret = HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, &get_add, 1, dev->delay);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6858      	ldr	r0, [r3, #4]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	b299      	uxth	r1, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	7a1b      	ldrb	r3, [r3, #8]
 800482c:	f107 020f 	add.w	r2, r7, #15
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	2301      	movs	r3, #1
 8004834:	f004 fb36 	bl	8008ea4 <HAL_I2C_Master_Transmit>
 8004838:	4603      	mov	r3, r0
 800483a:	74fb      	strb	r3, [r7, #19]
		HAL_Delay(15);
 800483c:	200f      	movs	r0, #15
 800483e:	f002 fe95 	bl	800756c <HAL_Delay>
		_ret = HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 2, dev->delay);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6858      	ldr	r0, [r3, #4]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	b299      	uxth	r1, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	7a1b      	ldrb	r3, [r3, #8]
 8004850:	f107 020c 	add.w	r2, r7, #12
 8004854:	9300      	str	r3, [sp, #0]
 8004856:	2302      	movs	r3, #2
 8004858:	f004 fc22 	bl	80090a0 <HAL_I2C_Master_Receive>
 800485c:	4603      	mov	r3, r0
 800485e:	74fb      	strb	r3, [r7, #19]
		dev->cal[i-1] = (uint16_t)(buf[0] << 8) | buf[1];
 8004860:	7b3b      	ldrb	r3, [r7, #12]
 8004862:	b29b      	uxth	r3, r3
 8004864:	021b      	lsls	r3, r3, #8
 8004866:	b299      	uxth	r1, r3
 8004868:	7b7b      	ldrb	r3, [r7, #13]
 800486a:	b29a      	uxth	r2, r3
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	3b01      	subs	r3, #1
 8004870:	430a      	orrs	r2, r1
 8004872:	b291      	uxth	r1, r2
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	3304      	adds	r3, #4
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	4413      	add	r3, r2
 800487c:	460a      	mov	r2, r1
 800487e:	805a      	strh	r2, [r3, #2]

		if ( _ret != HAL_OK )
 8004880:	7cfb      	ldrb	r3, [r7, #19]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d002      	beq.n	800488c <ms5607_init+0x108>
			{
				printf("MS5607 cal read fail\n");
 8004886:	4814      	ldr	r0, [pc, #80]	; (80048d8 <ms5607_init+0x154>)
 8004888:	f00c fb66 	bl	8010f58 <puts>
	for(int i = 1; i < 7; i++){
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	3301      	adds	r3, #1
 8004890:	617b      	str	r3, [r7, #20]
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	2b06      	cmp	r3, #6
 8004896:	ddb8      	ble.n	800480a <ms5607_init+0x86>
			}
	}


	printf("BARO setup success\n");
 8004898:	4810      	ldr	r0, [pc, #64]	; (80048dc <ms5607_init+0x158>)
 800489a:	f00c fb5d 	bl	8010f58 <puts>

	buf[0] = 0x44;
 800489e:	2344      	movs	r3, #68	; 0x44
 80048a0:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6858      	ldr	r0, [r3, #4]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	b299      	uxth	r1, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	7a1b      	ldrb	r3, [r3, #8]
 80048b0:	f107 020c 	add.w	r2, r7, #12
 80048b4:	9300      	str	r3, [sp, #0]
 80048b6:	2301      	movs	r3, #1
 80048b8:	f004 faf4 	bl	8008ea4 <HAL_I2C_Master_Transmit>
	// need to wait 3 ms
	return 1;
 80048bc:	2301      	movs	r3, #1
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3718      	adds	r7, #24
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	08014f80 	.word	0x08014f80
 80048cc:	08014f90 	.word	0x08014f90
 80048d0:	08014fa0 	.word	0x08014fa0
 80048d4:	08014fb0 	.word	0x08014fb0
 80048d8:	08014fc0 	.word	0x08014fc0
 80048dc:	08014fd8 	.word	0x08014fd8

080048e0 <ms5607_prep_pressure>:

void ms5607_prep_pressure(struct ms5607_dev * dev, uint8_t * dat)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af02      	add	r7, sp, #8
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
	uint8_t buf[3];
	buf[0] = 0x00;
 80048ea:	2300      	movs	r3, #0
 80048ec:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6858      	ldr	r0, [r3, #4]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	b299      	uxth	r1, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	7a1b      	ldrb	r3, [r3, #8]
 80048fc:	f107 020c 	add.w	r2, r7, #12
 8004900:	9300      	str	r3, [sp, #0]
 8004902:	2301      	movs	r3, #1
 8004904:	f004 face 	bl	8008ea4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 3, dev->delay);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6858      	ldr	r0, [r3, #4]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	b299      	uxth	r1, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	7a1b      	ldrb	r3, [r3, #8]
 8004916:	f107 020c 	add.w	r2, r7, #12
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	2303      	movs	r3, #3
 800491e:	f004 fbbf 	bl	80090a0 <HAL_I2C_Master_Receive>

	dev->D1 = (uint32_t)(buf[0] << 16) | (uint32_t)(buf[1] << 8) | (uint32_t)buf[2];
 8004922:	7b3b      	ldrb	r3, [r7, #12]
 8004924:	041b      	lsls	r3, r3, #16
 8004926:	461a      	mov	r2, r3
 8004928:	7b7b      	ldrb	r3, [r7, #13]
 800492a:	021b      	lsls	r3, r3, #8
 800492c:	4313      	orrs	r3, r2
 800492e:	7bba      	ldrb	r2, [r7, #14]
 8004930:	431a      	orrs	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	619a      	str	r2, [r3, #24]
	dat[0] = buf[0];
 8004936:	7b3a      	ldrb	r2, [r7, #12]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	701a      	strb	r2, [r3, #0]
	dat[1] = buf[1];
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	3301      	adds	r3, #1
 8004940:	7b7a      	ldrb	r2, [r7, #13]
 8004942:	701a      	strb	r2, [r3, #0]
	dat[2] = buf[2];
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	3302      	adds	r3, #2
 8004948:	7bba      	ldrb	r2, [r7, #14]
 800494a:	701a      	strb	r2, [r3, #0]

	buf[0] = 0x54;
 800494c:	2354      	movs	r3, #84	; 0x54
 800494e:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6858      	ldr	r0, [r3, #4]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	b299      	uxth	r1, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	7a1b      	ldrb	r3, [r3, #8]
 800495e:	f107 020c 	add.w	r2, r7, #12
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	2301      	movs	r3, #1
 8004966:	f004 fa9d 	bl	8008ea4 <HAL_I2C_Master_Transmit>
	// need to wait 3 ms
}
 800496a:	bf00      	nop
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <ms5607_read_pressure>:

void ms5607_read_pressure(struct ms5607_dev * dev, uint8_t * dat)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b086      	sub	sp, #24
 8004976:	af02      	add	r7, sp, #8
 8004978:	6078      	str	r0, [r7, #4]
 800497a:	6039      	str	r1, [r7, #0]
	uint8_t buf[3];
	buf[0] = 0x00;
 800497c:	2300      	movs	r3, #0
 800497e:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6858      	ldr	r0, [r3, #4]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	b299      	uxth	r1, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	7a1b      	ldrb	r3, [r3, #8]
 800498e:	f107 020c 	add.w	r2, r7, #12
 8004992:	9300      	str	r3, [sp, #0]
 8004994:	2301      	movs	r3, #1
 8004996:	f004 fa85 	bl	8008ea4 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 3, dev->delay);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6858      	ldr	r0, [r3, #4]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	b299      	uxth	r1, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	7a1b      	ldrb	r3, [r3, #8]
 80049a8:	f107 020c 	add.w	r2, r7, #12
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	2303      	movs	r3, #3
 80049b0:	f004 fb76 	bl	80090a0 <HAL_I2C_Master_Receive>

	dev->D2 = (uint32_t)(buf[0] << 16) | (uint32_t)(buf[1] << 8) | (uint32_t)buf[2];
 80049b4:	7b3b      	ldrb	r3, [r7, #12]
 80049b6:	041b      	lsls	r3, r3, #16
 80049b8:	461a      	mov	r2, r3
 80049ba:	7b7b      	ldrb	r3, [r7, #13]
 80049bc:	021b      	lsls	r3, r3, #8
 80049be:	4313      	orrs	r3, r2
 80049c0:	7bba      	ldrb	r2, [r7, #14]
 80049c2:	431a      	orrs	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	61da      	str	r2, [r3, #28]
	dat[0] = buf[0];
 80049c8:	7b3a      	ldrb	r2, [r7, #12]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	701a      	strb	r2, [r3, #0]
	dat[1] = buf[1];
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	3301      	adds	r3, #1
 80049d2:	7b7a      	ldrb	r2, [r7, #13]
 80049d4:	701a      	strb	r2, [r3, #0]
	dat[2] = buf[2];
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	3302      	adds	r3, #2
 80049da:	7bba      	ldrb	r2, [r7, #14]
 80049dc:	701a      	strb	r2, [r3, #0]

	buf[0] = 0x44;
 80049de:	2344      	movs	r3, #68	; 0x44
 80049e0:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 1, dev->delay);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6858      	ldr	r0, [r3, #4]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	b299      	uxth	r1, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	7a1b      	ldrb	r3, [r3, #8]
 80049f0:	f107 020c 	add.w	r2, r7, #12
 80049f4:	9300      	str	r3, [sp, #0]
 80049f6:	2301      	movs	r3, #1
 80049f8:	f004 fa54 	bl	8008ea4 <HAL_I2C_Master_Transmit>
	// need to wait 3 ms
}
 80049fc:	bf00      	nop
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	0000      	movs	r0, r0
	...

08004a08 <ms5607_convert>:

void ms5607_convert(struct ms5607_dev * dev, float * p, float * t)
{
 8004a08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004a0c:	b092      	sub	sp, #72	; 0x48
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	60f8      	str	r0, [r7, #12]
 8004a12:	60b9      	str	r1, [r7, #8]
 8004a14:	607a      	str	r2, [r7, #4]
	//calculate calibration values
	uint16_t c1 = dev->cal[0];
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	895b      	ldrh	r3, [r3, #10]
 8004a1a:	877b      	strh	r3, [r7, #58]	; 0x3a
	uint16_t c2 = dev->cal[1];
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	899b      	ldrh	r3, [r3, #12]
 8004a20:	873b      	strh	r3, [r7, #56]	; 0x38
	uint16_t c3 = dev->cal[2];
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	89db      	ldrh	r3, [r3, #14]
 8004a26:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint16_t c4 = dev->cal[3];
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8a1b      	ldrh	r3, [r3, #16]
 8004a2c:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint16_t c5 = dev->cal[4];
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	8a5b      	ldrh	r3, [r3, #18]
 8004a32:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t c6 = dev->cal[5];
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8a9b      	ldrh	r3, [r3, #20]
 8004a38:	863b      	strh	r3, [r7, #48]	; 0x30

	uint32_t D1 = dev->D1;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t D2 = dev->D2;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	69db      	ldr	r3, [r3, #28]
 8004a44:	62bb      	str	r3, [r7, #40]	; 0x28

	//calculations from datasheet
	float dt = (float)D2 - c5 * 256.0;
 8004a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a48:	ee07 3a90 	vmov	s15, r3
 8004a4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a50:	ee17 0a90 	vmov	r0, s15
 8004a54:	f7fb fd78 	bl	8000548 <__aeabi_f2d>
 8004a58:	4604      	mov	r4, r0
 8004a5a:	460d      	mov	r5, r1
 8004a5c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7fb fd60 	bl	8000524 <__aeabi_i2d>
 8004a64:	f04f 0200 	mov.w	r2, #0
 8004a68:	4bd9      	ldr	r3, [pc, #868]	; (8004dd0 <ms5607_convert+0x3c8>)
 8004a6a:	f7fb fdc5 	bl	80005f8 <__aeabi_dmul>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	460b      	mov	r3, r1
 8004a72:	4620      	mov	r0, r4
 8004a74:	4629      	mov	r1, r5
 8004a76:	f7fb fc07 	bl	8000288 <__aeabi_dsub>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	460c      	mov	r4, r1
 8004a7e:	4618      	mov	r0, r3
 8004a80:	4621      	mov	r1, r4
 8004a82:	f7fc f8b1 	bl	8000be8 <__aeabi_d2f>
 8004a86:	4603      	mov	r3, r0
 8004a88:	627b      	str	r3, [r7, #36]	; 0x24
	float OFF = c2 * pow(2.0, 17) + (c4 * dt)/64.0;
 8004a8a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7fb fd49 	bl	8000524 <__aeabi_i2d>
 8004a92:	f04f 0200 	mov.w	r2, #0
 8004a96:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8004a9a:	f7fb fdad 	bl	80005f8 <__aeabi_dmul>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	460c      	mov	r4, r1
 8004aa2:	4625      	mov	r5, r4
 8004aa4:	461c      	mov	r4, r3
 8004aa6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004aa8:	ee07 3a90 	vmov	s15, r3
 8004aac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004ab0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ab8:	ee17 0a90 	vmov	r0, s15
 8004abc:	f7fb fd44 	bl	8000548 <__aeabi_f2d>
 8004ac0:	f04f 0200 	mov.w	r2, #0
 8004ac4:	4bc3      	ldr	r3, [pc, #780]	; (8004dd4 <ms5607_convert+0x3cc>)
 8004ac6:	f7fb fec1 	bl	800084c <__aeabi_ddiv>
 8004aca:	4602      	mov	r2, r0
 8004acc:	460b      	mov	r3, r1
 8004ace:	4620      	mov	r0, r4
 8004ad0:	4629      	mov	r1, r5
 8004ad2:	f7fb fbdb 	bl	800028c <__adddf3>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	460c      	mov	r4, r1
 8004ada:	4618      	mov	r0, r3
 8004adc:	4621      	mov	r1, r4
 8004ade:	f7fc f883 	bl	8000be8 <__aeabi_d2f>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	623b      	str	r3, [r7, #32]
	float SENS = c1 * pow(2.0, 16) + (c3 * dt)/128.0;
 8004ae6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7fb fd1b 	bl	8000524 <__aeabi_i2d>
 8004aee:	f04f 0200 	mov.w	r2, #0
 8004af2:	4bb9      	ldr	r3, [pc, #740]	; (8004dd8 <ms5607_convert+0x3d0>)
 8004af4:	f7fb fd80 	bl	80005f8 <__aeabi_dmul>
 8004af8:	4603      	mov	r3, r0
 8004afa:	460c      	mov	r4, r1
 8004afc:	4625      	mov	r5, r4
 8004afe:	461c      	mov	r4, r3
 8004b00:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b02:	ee07 3a90 	vmov	s15, r3
 8004b06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b0a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b12:	ee17 0a90 	vmov	r0, s15
 8004b16:	f7fb fd17 	bl	8000548 <__aeabi_f2d>
 8004b1a:	f04f 0200 	mov.w	r2, #0
 8004b1e:	4baf      	ldr	r3, [pc, #700]	; (8004ddc <ms5607_convert+0x3d4>)
 8004b20:	f7fb fe94 	bl	800084c <__aeabi_ddiv>
 8004b24:	4602      	mov	r2, r0
 8004b26:	460b      	mov	r3, r1
 8004b28:	4620      	mov	r0, r4
 8004b2a:	4629      	mov	r1, r5
 8004b2c:	f7fb fbae 	bl	800028c <__adddf3>
 8004b30:	4603      	mov	r3, r0
 8004b32:	460c      	mov	r4, r1
 8004b34:	4618      	mov	r0, r3
 8004b36:	4621      	mov	r1, r4
 8004b38:	f7fc f856 	bl	8000be8 <__aeabi_d2f>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	61fb      	str	r3, [r7, #28]
	float TEMP = 2000.0 + dt * c6/(pow(2.0, 23));
 8004b40:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004b42:	ee07 3a90 	vmov	s15, r3
 8004b46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b4a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b52:	ee17 0a90 	vmov	r0, s15
 8004b56:	f7fb fcf7 	bl	8000548 <__aeabi_f2d>
 8004b5a:	f04f 0200 	mov.w	r2, #0
 8004b5e:	4ba0      	ldr	r3, [pc, #640]	; (8004de0 <ms5607_convert+0x3d8>)
 8004b60:	f7fb fe74 	bl	800084c <__aeabi_ddiv>
 8004b64:	4603      	mov	r3, r0
 8004b66:	460c      	mov	r4, r1
 8004b68:	4618      	mov	r0, r3
 8004b6a:	4621      	mov	r1, r4
 8004b6c:	f04f 0200 	mov.w	r2, #0
 8004b70:	4b9c      	ldr	r3, [pc, #624]	; (8004de4 <ms5607_convert+0x3dc>)
 8004b72:	f7fb fb8b 	bl	800028c <__adddf3>
 8004b76:	4603      	mov	r3, r0
 8004b78:	460c      	mov	r4, r1
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	4621      	mov	r1, r4
 8004b7e:	f7fc f833 	bl	8000be8 <__aeabi_d2f>
 8004b82:	4603      	mov	r3, r0
 8004b84:	61bb      	str	r3, [r7, #24]
	float pressure = ((float)D1 * SENS/(pow(2.0, 21)) - OFF)/(pow(2.0, 15));
 8004b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b88:	ee07 3a90 	vmov	s15, r3
 8004b8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004b90:	edd7 7a07 	vldr	s15, [r7, #28]
 8004b94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b98:	ee17 0a90 	vmov	r0, s15
 8004b9c:	f7fb fcd4 	bl	8000548 <__aeabi_f2d>
 8004ba0:	f04f 0200 	mov.w	r2, #0
 8004ba4:	4b90      	ldr	r3, [pc, #576]	; (8004de8 <ms5607_convert+0x3e0>)
 8004ba6:	f7fb fe51 	bl	800084c <__aeabi_ddiv>
 8004baa:	4603      	mov	r3, r0
 8004bac:	460c      	mov	r4, r1
 8004bae:	4625      	mov	r5, r4
 8004bb0:	461c      	mov	r4, r3
 8004bb2:	6a38      	ldr	r0, [r7, #32]
 8004bb4:	f7fb fcc8 	bl	8000548 <__aeabi_f2d>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	460b      	mov	r3, r1
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	4629      	mov	r1, r5
 8004bc0:	f7fb fb62 	bl	8000288 <__aeabi_dsub>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	460c      	mov	r4, r1
 8004bc8:	4618      	mov	r0, r3
 8004bca:	4621      	mov	r1, r4
 8004bcc:	f04f 0200 	mov.w	r2, #0
 8004bd0:	4b86      	ldr	r3, [pc, #536]	; (8004dec <ms5607_convert+0x3e4>)
 8004bd2:	f7fb fe3b 	bl	800084c <__aeabi_ddiv>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	460c      	mov	r4, r1
 8004bda:	4618      	mov	r0, r3
 8004bdc:	4621      	mov	r1, r4
 8004bde:	f7fc f803 	bl	8000be8 <__aeabi_d2f>
 8004be2:	4603      	mov	r3, r0
 8004be4:	617b      	str	r3, [r7, #20]

	float T2 = 0., OFF2 = 0., SENS2 = 0.;
 8004be6:	f04f 0300 	mov.w	r3, #0
 8004bea:	647b      	str	r3, [r7, #68]	; 0x44
 8004bec:	f04f 0300 	mov.w	r3, #0
 8004bf0:	643b      	str	r3, [r7, #64]	; 0x40
 8004bf2:	f04f 0300 	mov.w	r3, #0
 8004bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
	if(TEMP < 2000)
 8004bf8:	edd7 7a06 	vldr	s15, [r7, #24]
 8004bfc:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8004df0 <ms5607_convert+0x3e8>
 8004c00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c08:	f140 8104 	bpl.w	8004e14 <ms5607_convert+0x40c>
	{
	  T2 = dt * dt / pow(2.0,31);
 8004c0c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004c10:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8004c14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c18:	eddf 6a76 	vldr	s13, [pc, #472]	; 8004df4 <ms5607_convert+0x3ec>
 8004c1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c20:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	  OFF2 = 61.0 * (TEMP - 2000.0) * (TEMP - 2000.0)/pow(2.0,4);
 8004c24:	69b8      	ldr	r0, [r7, #24]
 8004c26:	f7fb fc8f 	bl	8000548 <__aeabi_f2d>
 8004c2a:	f04f 0200 	mov.w	r2, #0
 8004c2e:	4b6d      	ldr	r3, [pc, #436]	; (8004de4 <ms5607_convert+0x3dc>)
 8004c30:	f7fb fb2a 	bl	8000288 <__aeabi_dsub>
 8004c34:	4603      	mov	r3, r0
 8004c36:	460c      	mov	r4, r1
 8004c38:	4618      	mov	r0, r3
 8004c3a:	4621      	mov	r1, r4
 8004c3c:	f04f 0200 	mov.w	r2, #0
 8004c40:	4b6d      	ldr	r3, [pc, #436]	; (8004df8 <ms5607_convert+0x3f0>)
 8004c42:	f7fb fcd9 	bl	80005f8 <__aeabi_dmul>
 8004c46:	4603      	mov	r3, r0
 8004c48:	460c      	mov	r4, r1
 8004c4a:	4625      	mov	r5, r4
 8004c4c:	461c      	mov	r4, r3
 8004c4e:	69b8      	ldr	r0, [r7, #24]
 8004c50:	f7fb fc7a 	bl	8000548 <__aeabi_f2d>
 8004c54:	f04f 0200 	mov.w	r2, #0
 8004c58:	4b62      	ldr	r3, [pc, #392]	; (8004de4 <ms5607_convert+0x3dc>)
 8004c5a:	f7fb fb15 	bl	8000288 <__aeabi_dsub>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	460b      	mov	r3, r1
 8004c62:	4620      	mov	r0, r4
 8004c64:	4629      	mov	r1, r5
 8004c66:	f7fb fcc7 	bl	80005f8 <__aeabi_dmul>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	460c      	mov	r4, r1
 8004c6e:	4618      	mov	r0, r3
 8004c70:	4621      	mov	r1, r4
 8004c72:	f04f 0200 	mov.w	r2, #0
 8004c76:	4b61      	ldr	r3, [pc, #388]	; (8004dfc <ms5607_convert+0x3f4>)
 8004c78:	f7fb fde8 	bl	800084c <__aeabi_ddiv>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	460c      	mov	r4, r1
 8004c80:	4618      	mov	r0, r3
 8004c82:	4621      	mov	r1, r4
 8004c84:	f7fb ffb0 	bl	8000be8 <__aeabi_d2f>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	643b      	str	r3, [r7, #64]	; 0x40
	  SENS2 = 2.0 * (TEMP - 2000.0) * (TEMP - 2000.0);
 8004c8c:	69b8      	ldr	r0, [r7, #24]
 8004c8e:	f7fb fc5b 	bl	8000548 <__aeabi_f2d>
 8004c92:	f04f 0200 	mov.w	r2, #0
 8004c96:	4b53      	ldr	r3, [pc, #332]	; (8004de4 <ms5607_convert+0x3dc>)
 8004c98:	f7fb faf6 	bl	8000288 <__aeabi_dsub>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	460c      	mov	r4, r1
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	4621      	mov	r1, r4
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	f7fb faf0 	bl	800028c <__adddf3>
 8004cac:	4603      	mov	r3, r0
 8004cae:	460c      	mov	r4, r1
 8004cb0:	4625      	mov	r5, r4
 8004cb2:	461c      	mov	r4, r3
 8004cb4:	69b8      	ldr	r0, [r7, #24]
 8004cb6:	f7fb fc47 	bl	8000548 <__aeabi_f2d>
 8004cba:	f04f 0200 	mov.w	r2, #0
 8004cbe:	4b49      	ldr	r3, [pc, #292]	; (8004de4 <ms5607_convert+0x3dc>)
 8004cc0:	f7fb fae2 	bl	8000288 <__aeabi_dsub>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	4620      	mov	r0, r4
 8004cca:	4629      	mov	r1, r5
 8004ccc:	f7fb fc94 	bl	80005f8 <__aeabi_dmul>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	460c      	mov	r4, r1
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	4621      	mov	r1, r4
 8004cd8:	f7fb ff86 	bl	8000be8 <__aeabi_d2f>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if(TEMP < -1500)
 8004ce0:	edd7 7a06 	vldr	s15, [r7, #24]
 8004ce4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8004e00 <ms5607_convert+0x3f8>
 8004ce8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cf0:	f140 8090 	bpl.w	8004e14 <ms5607_convert+0x40c>
	  {
	    OFF2 += 15.0 * (TEMP + 1500)*(TEMP + 1500.0);
 8004cf4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004cf6:	f7fb fc27 	bl	8000548 <__aeabi_f2d>
 8004cfa:	4604      	mov	r4, r0
 8004cfc:	460d      	mov	r5, r1
 8004cfe:	edd7 7a06 	vldr	s15, [r7, #24]
 8004d02:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8004e04 <ms5607_convert+0x3fc>
 8004d06:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d0a:	ee17 0a90 	vmov	r0, s15
 8004d0e:	f7fb fc1b 	bl	8000548 <__aeabi_f2d>
 8004d12:	f04f 0200 	mov.w	r2, #0
 8004d16:	4b3c      	ldr	r3, [pc, #240]	; (8004e08 <ms5607_convert+0x400>)
 8004d18:	f7fb fc6e 	bl	80005f8 <__aeabi_dmul>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	4690      	mov	r8, r2
 8004d22:	4699      	mov	r9, r3
 8004d24:	69b8      	ldr	r0, [r7, #24]
 8004d26:	f7fb fc0f 	bl	8000548 <__aeabi_f2d>
 8004d2a:	a327      	add	r3, pc, #156	; (adr r3, 8004dc8 <ms5607_convert+0x3c0>)
 8004d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d30:	f7fb faac 	bl	800028c <__adddf3>
 8004d34:	4602      	mov	r2, r0
 8004d36:	460b      	mov	r3, r1
 8004d38:	4640      	mov	r0, r8
 8004d3a:	4649      	mov	r1, r9
 8004d3c:	f7fb fc5c 	bl	80005f8 <__aeabi_dmul>
 8004d40:	4602      	mov	r2, r0
 8004d42:	460b      	mov	r3, r1
 8004d44:	4620      	mov	r0, r4
 8004d46:	4629      	mov	r1, r5
 8004d48:	f7fb faa0 	bl	800028c <__adddf3>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	460c      	mov	r4, r1
 8004d50:	4618      	mov	r0, r3
 8004d52:	4621      	mov	r1, r4
 8004d54:	f7fb ff48 	bl	8000be8 <__aeabi_d2f>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	643b      	str	r3, [r7, #64]	; 0x40
	    SENS2 += 8.0 * (TEMP + 1500)*(TEMP + 1500.0);
 8004d5c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004d5e:	f7fb fbf3 	bl	8000548 <__aeabi_f2d>
 8004d62:	4604      	mov	r4, r0
 8004d64:	460d      	mov	r5, r1
 8004d66:	edd7 7a06 	vldr	s15, [r7, #24]
 8004d6a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8004e04 <ms5607_convert+0x3fc>
 8004d6e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d72:	ee17 0a90 	vmov	r0, s15
 8004d76:	f7fb fbe7 	bl	8000548 <__aeabi_f2d>
 8004d7a:	f04f 0200 	mov.w	r2, #0
 8004d7e:	4b23      	ldr	r3, [pc, #140]	; (8004e0c <ms5607_convert+0x404>)
 8004d80:	f7fb fc3a 	bl	80005f8 <__aeabi_dmul>
 8004d84:	4602      	mov	r2, r0
 8004d86:	460b      	mov	r3, r1
 8004d88:	4690      	mov	r8, r2
 8004d8a:	4699      	mov	r9, r3
 8004d8c:	69b8      	ldr	r0, [r7, #24]
 8004d8e:	f7fb fbdb 	bl	8000548 <__aeabi_f2d>
 8004d92:	a30d      	add	r3, pc, #52	; (adr r3, 8004dc8 <ms5607_convert+0x3c0>)
 8004d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d98:	f7fb fa78 	bl	800028c <__adddf3>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4640      	mov	r0, r8
 8004da2:	4649      	mov	r1, r9
 8004da4:	f7fb fc28 	bl	80005f8 <__aeabi_dmul>
 8004da8:	4602      	mov	r2, r0
 8004daa:	460b      	mov	r3, r1
 8004dac:	4620      	mov	r0, r4
 8004dae:	4629      	mov	r1, r5
 8004db0:	f7fb fa6c 	bl	800028c <__adddf3>
 8004db4:	4603      	mov	r3, r0
 8004db6:	460c      	mov	r4, r1
 8004db8:	4618      	mov	r0, r3
 8004dba:	4621      	mov	r1, r4
 8004dbc:	f7fb ff14 	bl	8000be8 <__aeabi_d2f>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dc4:	e026      	b.n	8004e14 <ms5607_convert+0x40c>
 8004dc6:	bf00      	nop
 8004dc8:	00000000 	.word	0x00000000
 8004dcc:	40977000 	.word	0x40977000
 8004dd0:	40700000 	.word	0x40700000
 8004dd4:	40500000 	.word	0x40500000
 8004dd8:	40f00000 	.word	0x40f00000
 8004ddc:	40600000 	.word	0x40600000
 8004de0:	41600000 	.word	0x41600000
 8004de4:	409f4000 	.word	0x409f4000
 8004de8:	41400000 	.word	0x41400000
 8004dec:	40e00000 	.word	0x40e00000
 8004df0:	44fa0000 	.word	0x44fa0000
 8004df4:	4f000000 	.word	0x4f000000
 8004df8:	404e8000 	.word	0x404e8000
 8004dfc:	40300000 	.word	0x40300000
 8004e00:	c4bb8000 	.word	0xc4bb8000
 8004e04:	44bb8000 	.word	0x44bb8000
 8004e08:	402e0000 	.word	0x402e0000
 8004e0c:	40200000 	.word	0x40200000
 8004e10:	42c80000 	.word	0x42c80000
	  }
	}

	TEMP-=T2;
 8004e14:	ed97 7a06 	vldr	s14, [r7, #24]
 8004e18:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004e1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e20:	edc7 7a06 	vstr	s15, [r7, #24]
	OFF-=OFF2;
 8004e24:	ed97 7a08 	vldr	s14, [r7, #32]
 8004e28:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8004e2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e30:	edc7 7a08 	vstr	s15, [r7, #32]
	SENS-=SENS2;
 8004e34:	ed97 7a07 	vldr	s14, [r7, #28]
 8004e38:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004e3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e40:	edc7 7a07 	vstr	s15, [r7, #28]
	TEMP/=100;
 8004e44:	ed97 7a06 	vldr	s14, [r7, #24]
 8004e48:	ed5f 6a0f 	vldr	s13, [pc, #-60]	; 8004e10 <ms5607_convert+0x408>
 8004e4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e50:	edc7 7a06 	vstr	s15, [r7, #24]
	pressure=(((float)(D1*SENS)/pow(2,21)-OFF)/pow(2,15));
 8004e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e56:	ee07 3a90 	vmov	s15, r3
 8004e5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004e5e:	edd7 7a07 	vldr	s15, [r7, #28]
 8004e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e66:	ee17 0a90 	vmov	r0, s15
 8004e6a:	f7fb fb6d 	bl	8000548 <__aeabi_f2d>
 8004e6e:	f04f 0200 	mov.w	r2, #0
 8004e72:	4b16      	ldr	r3, [pc, #88]	; (8004ecc <ms5607_convert+0x4c4>)
 8004e74:	f7fb fcea 	bl	800084c <__aeabi_ddiv>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	460c      	mov	r4, r1
 8004e7c:	4625      	mov	r5, r4
 8004e7e:	461c      	mov	r4, r3
 8004e80:	6a38      	ldr	r0, [r7, #32]
 8004e82:	f7fb fb61 	bl	8000548 <__aeabi_f2d>
 8004e86:	4602      	mov	r2, r0
 8004e88:	460b      	mov	r3, r1
 8004e8a:	4620      	mov	r0, r4
 8004e8c:	4629      	mov	r1, r5
 8004e8e:	f7fb f9fb 	bl	8000288 <__aeabi_dsub>
 8004e92:	4603      	mov	r3, r0
 8004e94:	460c      	mov	r4, r1
 8004e96:	4618      	mov	r0, r3
 8004e98:	4621      	mov	r1, r4
 8004e9a:	f04f 0200 	mov.w	r2, #0
 8004e9e:	4b0c      	ldr	r3, [pc, #48]	; (8004ed0 <ms5607_convert+0x4c8>)
 8004ea0:	f7fb fcd4 	bl	800084c <__aeabi_ddiv>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	460c      	mov	r4, r1
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	4621      	mov	r1, r4
 8004eac:	f7fb fe9c 	bl	8000be8 <__aeabi_d2f>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	617b      	str	r3, [r7, #20]

	*t = TEMP;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	69ba      	ldr	r2, [r7, #24]
 8004eb8:	601a      	str	r2, [r3, #0]
	*p = pressure;
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	601a      	str	r2, [r3, #0]

	//printf("MS pressure is %4.2f Pa\n", pressure);
	//printf("MS temp is %4.2f deg\n", TEMP);

}
 8004ec0:	bf00      	nop
 8004ec2:	3748      	adds	r7, #72	; 0x48
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004eca:	bf00      	nop
 8004ecc:	41400000 	.word	0x41400000
 8004ed0:	40e00000 	.word	0x40e00000

08004ed4 <sht31_init>:
	return 0;
}


int sht31_init(struct sht31_dev * dev)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af02      	add	r7, sp, #8
 8004eda:	6078      	str	r0, [r7, #4]
	if (HAL_I2C_GetState(dev->i2c_bus) != HAL_I2C_STATE_READY)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f004 fc31 	bl	8009748 <HAL_I2C_GetState>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b20      	cmp	r3, #32
 8004eea:	d003      	beq.n	8004ef4 <sht31_init+0x20>
	{
		printf("i2c1 not ready!\n");
 8004eec:	481f      	ldr	r0, [pc, #124]	; (8004f6c <sht31_init+0x98>)
 8004eee:	f00c f833 	bl	8010f58 <puts>
 8004ef2:	e002      	b.n	8004efa <sht31_init+0x26>
	} else {
		printf("i2c1 is ready!\n");
 8004ef4:	481e      	ldr	r0, [pc, #120]	; (8004f70 <sht31_init+0x9c>)
 8004ef6:	f00c f82f 	bl	8010f58 <puts>
	}

	HAL_StatusTypeDef _ret;

	_ret = HAL_I2C_IsDeviceReady(dev->i2c_bus, dev->addr, 10, dev->delay);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6858      	ldr	r0, [r3, #4]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	781b      	ldrb	r3, [r3, #0]
 8004f02:	b299      	uxth	r1, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	7a1b      	ldrb	r3, [r3, #8]
 8004f08:	220a      	movs	r2, #10
 8004f0a:	f004 faef 	bl	80094ec <HAL_I2C_IsDeviceReady>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	73fb      	strb	r3, [r7, #15]
	if ( _ret != HAL_OK )
 8004f12:	7bfb      	ldrb	r3, [r7, #15]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d009      	beq.n	8004f2c <sht31_init+0x58>
	{
		printf("SHT31 setup fail\n");
 8004f18:	4816      	ldr	r0, [pc, #88]	; (8004f74 <sht31_init+0xa0>)
 8004f1a:	f00c f81d 	bl	8010f58 <puts>
		printf("Errorcode: %d\n", _ret);
 8004f1e:	7bfb      	ldrb	r3, [r7, #15]
 8004f20:	4619      	mov	r1, r3
 8004f22:	4815      	ldr	r0, [pc, #84]	; (8004f78 <sht31_init+0xa4>)
 8004f24:	f00b ffa4 	bl	8010e70 <iprintf>
		return 0;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	e01b      	b.n	8004f64 <sht31_init+0x90>
	}

	printf("SHT31 setup success\n");
 8004f2c:	4813      	ldr	r0, [pc, #76]	; (8004f7c <sht31_init+0xa8>)
 8004f2e:	f00c f813 	bl	8010f58 <puts>
	//request first measurement
	uint8_t buf[2];
	uint16_t REG = 0x2416;
 8004f32:	f242 4316 	movw	r3, #9238	; 0x2416
 8004f36:	81bb      	strh	r3, [r7, #12]
	buf[0] = (uint8_t)(REG >> 8);
 8004f38:	89bb      	ldrh	r3, [r7, #12]
 8004f3a:	0a1b      	lsrs	r3, r3, #8
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	723b      	strb	r3, [r7, #8]
	buf[1] = (uint8_t)REG;
 8004f42:	89bb      	ldrh	r3, [r7, #12]
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 2, dev->delay);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6858      	ldr	r0, [r3, #4]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	b299      	uxth	r1, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	7a1b      	ldrb	r3, [r3, #8]
 8004f56:	f107 0208 	add.w	r2, r7, #8
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	f003 ffa1 	bl	8008ea4 <HAL_I2C_Master_Transmit>
	return 1;
 8004f62:	2301      	movs	r3, #1
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	08014fec 	.word	0x08014fec
 8004f70:	08014ffc 	.word	0x08014ffc
 8004f74:	0801500c 	.word	0x0801500c
 8004f78:	08015020 	.word	0x08015020
 8004f7c:	08015030 	.word	0x08015030

08004f80 <sht31_read>:

void sht31_read(struct sht31_dev * dev, float * dat, uint16_t * dat_raw)
{
 8004f80:	b590      	push	{r4, r7, lr}
 8004f82:	b08d      	sub	sp, #52	; 0x34
 8004f84:	af02      	add	r7, sp, #8
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
	float temp;
	float humid;
	uint8_t buf[6];

	//T MSB, T LSB, T CRC, H MSB, H LSB, H CRC
	HAL_I2C_Master_Receive(dev->i2c_bus, dev->addr, buf, 6, dev->delay);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6858      	ldr	r0, [r3, #4]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	b299      	uxth	r1, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	7a1b      	ldrb	r3, [r3, #8]
 8004f9a:	f107 0214 	add.w	r2, r7, #20
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	2306      	movs	r3, #6
 8004fa2:	f004 f87d 	bl	80090a0 <HAL_I2C_Master_Receive>
	/*
	uint16_t rawTemp = (uint16_t)((((uint16_t)_buf[0])<<8) | (uint16_t)_buf[1]);
	uint16_t rawHum = (uint16_t)((((uint16_t)_buf[3])<<8) | (uint16_t)_buf[4]);
	*/
	uint16_t rawTemp = ((uint16_t)buf[0] << 8) | buf[1];
 8004fa6:	7d3b      	ldrb	r3, [r7, #20]
 8004fa8:	021b      	lsls	r3, r3, #8
 8004faa:	b21a      	sxth	r2, r3
 8004fac:	7d7b      	ldrb	r3, [r7, #21]
 8004fae:	b21b      	sxth	r3, r3
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	b21b      	sxth	r3, r3
 8004fb4:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t rawHum = ((uint16_t)buf[3] << 8) | buf[4];
 8004fb6:	7dfb      	ldrb	r3, [r7, #23]
 8004fb8:	021b      	lsls	r3, r3, #8
 8004fba:	b21a      	sxth	r2, r3
 8004fbc:	7e3b      	ldrb	r3, [r7, #24]
 8004fbe:	b21b      	sxth	r3, r3
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	b21b      	sxth	r3, r3
 8004fc4:	84bb      	strh	r3, [r7, #36]	; 0x24
	humid = 100.0 * (float)rawHum / 65535.0;
 8004fc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004fc8:	ee07 3a90 	vmov	s15, r3
 8004fcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fd0:	ee17 0a90 	vmov	r0, s15
 8004fd4:	f7fb fab8 	bl	8000548 <__aeabi_f2d>
 8004fd8:	f04f 0200 	mov.w	r2, #0
 8004fdc:	4b32      	ldr	r3, [pc, #200]	; (80050a8 <sht31_read+0x128>)
 8004fde:	f7fb fb0b 	bl	80005f8 <__aeabi_dmul>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	460c      	mov	r4, r1
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	4621      	mov	r1, r4
 8004fea:	a32d      	add	r3, pc, #180	; (adr r3, 80050a0 <sht31_read+0x120>)
 8004fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff0:	f7fb fc2c 	bl	800084c <__aeabi_ddiv>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	460c      	mov	r4, r1
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	4621      	mov	r1, r4
 8004ffc:	f7fb fdf4 	bl	8000be8 <__aeabi_d2f>
 8005000:	4603      	mov	r3, r0
 8005002:	623b      	str	r3, [r7, #32]
	temp = -45.0 + 175 * (float)rawTemp / 65535.0;
 8005004:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005006:	ee07 3a90 	vmov	s15, r3
 800500a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800500e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80050ac <sht31_read+0x12c>
 8005012:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005016:	ee17 0a90 	vmov	r0, s15
 800501a:	f7fb fa95 	bl	8000548 <__aeabi_f2d>
 800501e:	a320      	add	r3, pc, #128	; (adr r3, 80050a0 <sht31_read+0x120>)
 8005020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005024:	f7fb fc12 	bl	800084c <__aeabi_ddiv>
 8005028:	4603      	mov	r3, r0
 800502a:	460c      	mov	r4, r1
 800502c:	4618      	mov	r0, r3
 800502e:	4621      	mov	r1, r4
 8005030:	f04f 0200 	mov.w	r2, #0
 8005034:	4b1e      	ldr	r3, [pc, #120]	; (80050b0 <sht31_read+0x130>)
 8005036:	f7fb f927 	bl	8000288 <__aeabi_dsub>
 800503a:	4603      	mov	r3, r0
 800503c:	460c      	mov	r4, r1
 800503e:	4618      	mov	r0, r3
 8005040:	4621      	mov	r1, r4
 8005042:	f7fb fdd1 	bl	8000be8 <__aeabi_d2f>
 8005046:	4603      	mov	r3, r0
 8005048:	61fb      	str	r3, [r7, #28]
	//printf("temperature is %4.2f deg\n",temp);
	//printf("humidity is %4.2f perc\n",humid);
	dat[0] = temp;
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	69fa      	ldr	r2, [r7, #28]
 800504e:	601a      	str	r2, [r3, #0]
	dat[1] = humid;
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	3304      	adds	r3, #4
 8005054:	6a3a      	ldr	r2, [r7, #32]
 8005056:	601a      	str	r2, [r3, #0]
	dat_raw[0] = rawTemp;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800505c:	801a      	strh	r2, [r3, #0]
	dat_raw[1] = rawHum;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	3302      	adds	r3, #2
 8005062:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005064:	801a      	strh	r2, [r3, #0]

	uint16_t REG = 0x2416;
 8005066:	f242 4316 	movw	r3, #9238	; 0x2416
 800506a:	837b      	strh	r3, [r7, #26]
	buf[0] = (uint8_t)(REG >> 8);
 800506c:	8b7b      	ldrh	r3, [r7, #26]
 800506e:	0a1b      	lsrs	r3, r3, #8
 8005070:	b29b      	uxth	r3, r3
 8005072:	b2db      	uxtb	r3, r3
 8005074:	753b      	strb	r3, [r7, #20]
	buf[1] = (uint8_t)REG;
 8005076:	8b7b      	ldrh	r3, [r7, #26]
 8005078:	b2db      	uxtb	r3, r3
 800507a:	757b      	strb	r3, [r7, #21]
	HAL_I2C_Master_Transmit(dev->i2c_bus, dev->addr, buf, 2, dev->delay);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6858      	ldr	r0, [r3, #4]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	b299      	uxth	r1, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	7a1b      	ldrb	r3, [r3, #8]
 800508a:	f107 0214 	add.w	r2, r7, #20
 800508e:	9300      	str	r3, [sp, #0]
 8005090:	2302      	movs	r3, #2
 8005092:	f003 ff07 	bl	8008ea4 <HAL_I2C_Master_Transmit>

};
 8005096:	bf00      	nop
 8005098:	372c      	adds	r7, #44	; 0x2c
 800509a:	46bd      	mov	sp, r7
 800509c:	bd90      	pop	{r4, r7, pc}
 800509e:	bf00      	nop
 80050a0:	00000000 	.word	0x00000000
 80050a4:	40efffe0 	.word	0x40efffe0
 80050a8:	40590000 	.word	0x40590000
 80050ac:	432f0000 	.word	0x432f0000
 80050b0:	40468000 	.word	0x40468000

080050b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80050b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80050ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80050b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80050ba:	e003      	b.n	80050c4 <LoopCopyDataInit>

080050bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80050bc:	4b0c      	ldr	r3, [pc, #48]	; (80050f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80050be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80050c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80050c2:	3104      	adds	r1, #4

080050c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80050c4:	480b      	ldr	r0, [pc, #44]	; (80050f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80050c6:	4b0c      	ldr	r3, [pc, #48]	; (80050f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80050c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80050ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80050cc:	d3f6      	bcc.n	80050bc <CopyDataInit>
  ldr  r2, =_sbss
 80050ce:	4a0b      	ldr	r2, [pc, #44]	; (80050fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80050d0:	e002      	b.n	80050d8 <LoopFillZerobss>

080050d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80050d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80050d4:	f842 3b04 	str.w	r3, [r2], #4

080050d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80050d8:	4b09      	ldr	r3, [pc, #36]	; (8005100 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80050da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80050dc:	d3f9      	bcc.n	80050d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80050de:	f7fe fdcf 	bl	8003c80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80050e2:	f00b fa31 	bl	8010548 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80050e6:	f7fc ff33 	bl	8001f50 <main>
  bx  lr    
 80050ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80050ec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80050f0:	080154e0 	.word	0x080154e0
  ldr  r0, =_sdata
 80050f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80050f8:	2000033c 	.word	0x2000033c
  ldr  r2, =_sbss
 80050fc:	2000033c 	.word	0x2000033c
  ldr  r3, = _ebss
 8005100:	20017d24 	.word	0x20017d24

08005104 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005104:	e7fe      	b.n	8005104 <ADC_IRQHandler>

08005106 <eye>:
#include "../../Inc/Util/math_utils.h"


void eye(int dim, float A[dim][dim]) {
 8005106:	b490      	push	{r4, r7}
 8005108:	b086      	sub	sp, #24
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
 800510e:	6039      	str	r1, [r7, #0]
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	1e43      	subs	r3, r0, #1
 8005114:	60fb      	str	r3, [r7, #12]
 8005116:	4603      	mov	r3, r0
 8005118:	4619      	mov	r1, r3
 800511a:	f04f 0200 	mov.w	r2, #0
 800511e:	f04f 0300 	mov.w	r3, #0
 8005122:	f04f 0400 	mov.w	r4, #0
 8005126:	0154      	lsls	r4, r2, #5
 8005128:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800512c:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < dim; i++){
 800512e:	2300      	movs	r3, #0
 8005130:	613b      	str	r3, [r7, #16]
 8005132:	e02b      	b.n	800518c <eye+0x86>
        for(int j = 0; j < dim; j++){
 8005134:	2300      	movs	r3, #0
 8005136:	617b      	str	r3, [r7, #20]
 8005138:	e021      	b.n	800517e <eye+0x78>
            if (i == j){
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	429a      	cmp	r2, r3
 8005140:	d10d      	bne.n	800515e <eye+0x58>
				A[i][j] = 1;
 8005142:	4602      	mov	r2, r0
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	fb03 f302 	mul.w	r3, r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	441a      	add	r2, r3
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	e00c      	b.n	8005178 <eye+0x72>
			} else {
				A[i][j] = 0;
 800515e:	4602      	mov	r2, r0
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	fb03 f302 	mul.w	r3, r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	683a      	ldr	r2, [r7, #0]
 800516a:	441a      	add	r2, r3
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	f04f 0200 	mov.w	r2, #0
 8005176:	601a      	str	r2, [r3, #0]
        for(int j = 0; j < dim; j++){
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	3301      	adds	r3, #1
 800517c:	617b      	str	r3, [r7, #20]
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	429a      	cmp	r2, r3
 8005184:	dbd9      	blt.n	800513a <eye+0x34>
	for(int i = 0; i < dim; i++){
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	3301      	adds	r3, #1
 800518a:	613b      	str	r3, [r7, #16]
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	429a      	cmp	r2, r3
 8005192:	dbcf      	blt.n	8005134 <eye+0x2e>
			}
        }
    }
}
 8005194:	bf00      	nop
 8005196:	3718      	adds	r7, #24
 8005198:	46bd      	mov	sp, r7
 800519a:	bc90      	pop	{r4, r7}
 800519c:	4770      	bx	lr

0800519e <transpose>:

void transpose(int m, int n, float A[m][n], float A_T[n][m]) {
 800519e:	b4b0      	push	{r4, r5, r7}
 80051a0:	b089      	sub	sp, #36	; 0x24
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	60f8      	str	r0, [r7, #12]
 80051a6:	60b9      	str	r1, [r7, #8]
 80051a8:	607a      	str	r2, [r7, #4]
 80051aa:	603b      	str	r3, [r7, #0]
 80051ac:	68b8      	ldr	r0, [r7, #8]
 80051ae:	1e43      	subs	r3, r0, #1
 80051b0:	617b      	str	r3, [r7, #20]
 80051b2:	4603      	mov	r3, r0
 80051b4:	4619      	mov	r1, r3
 80051b6:	f04f 0200 	mov.w	r2, #0
 80051ba:	f04f 0300 	mov.w	r3, #0
 80051be:	f04f 0400 	mov.w	r4, #0
 80051c2:	0154      	lsls	r4, r2, #5
 80051c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80051c8:	014b      	lsls	r3, r1, #5
 80051ca:	68fd      	ldr	r5, [r7, #12]
 80051cc:	1e6b      	subs	r3, r5, #1
 80051ce:	613b      	str	r3, [r7, #16]
 80051d0:	462b      	mov	r3, r5
 80051d2:	4619      	mov	r1, r3
 80051d4:	f04f 0200 	mov.w	r2, #0
 80051d8:	f04f 0300 	mov.w	r3, #0
 80051dc:	f04f 0400 	mov.w	r4, #0
 80051e0:	0154      	lsls	r4, r2, #5
 80051e2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80051e6:	014b      	lsls	r3, r1, #5
	/* Get Transpose */
	for(int i = 0; i < m; i++){
 80051e8:	2300      	movs	r3, #0
 80051ea:	61bb      	str	r3, [r7, #24]
 80051ec:	e022      	b.n	8005234 <transpose+0x96>
		for(int j = 0; j < n; j++){
 80051ee:	2300      	movs	r3, #0
 80051f0:	61fb      	str	r3, [r7, #28]
 80051f2:	e018      	b.n	8005226 <transpose+0x88>
			A_T[j][i] = A[i][j];
 80051f4:	4602      	mov	r2, r0
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	fb03 f302 	mul.w	r3, r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	441a      	add	r2, r3
 8005202:	4629      	mov	r1, r5
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	fb03 f301 	mul.w	r3, r3, r1
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	6839      	ldr	r1, [r7, #0]
 800520e:	4419      	add	r1, r3
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	4413      	add	r3, r2
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	440b      	add	r3, r1
 800521e:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < n; j++){
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	3301      	adds	r3, #1
 8005224:	61fb      	str	r3, [r7, #28]
 8005226:	69fa      	ldr	r2, [r7, #28]
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	429a      	cmp	r2, r3
 800522c:	dbe2      	blt.n	80051f4 <transpose+0x56>
	for(int i = 0; i < m; i++){
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	3301      	adds	r3, #1
 8005232:	61bb      	str	r3, [r7, #24]
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	429a      	cmp	r2, r3
 800523a:	dbd8      	blt.n	80051ee <transpose+0x50>
		}
	}
}
 800523c:	bf00      	nop
 800523e:	3724      	adds	r7, #36	; 0x24
 8005240:	46bd      	mov	sp, r7
 8005242:	bcb0      	pop	{r4, r5, r7}
 8005244:	4770      	bx	lr

08005246 <vecadd>:

void vecadd(int n, float a[n], float b[n], float c[n]) {
 8005246:	b480      	push	{r7}
 8005248:	b087      	sub	sp, #28
 800524a:	af00      	add	r7, sp, #0
 800524c:	60f8      	str	r0, [r7, #12]
 800524e:	60b9      	str	r1, [r7, #8]
 8005250:	607a      	str	r2, [r7, #4]
 8005252:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 8005254:	2300      	movs	r3, #0
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	e016      	b.n	8005288 <vecadd+0x42>
		c[i] = a[i] + b[i];
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	4413      	add	r3, r2
 8005262:	ed93 7a00 	vldr	s14, [r3]
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	4413      	add	r3, r2
 800526e:	edd3 7a00 	vldr	s15, [r3]
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	683a      	ldr	r2, [r7, #0]
 8005278:	4413      	add	r3, r2
 800527a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800527e:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	3301      	adds	r3, #1
 8005286:	617b      	str	r3, [r7, #20]
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	429a      	cmp	r2, r3
 800528e:	dbe4      	blt.n	800525a <vecadd+0x14>
	}
}
 8005290:	bf00      	nop
 8005292:	371c      	adds	r7, #28
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <vecsub>:

void vecsub(int n, float a[n], float b[n], float c[n]) {
 800529c:	b480      	push	{r7}
 800529e:	b087      	sub	sp, #28
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
 80052a8:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 80052aa:	2300      	movs	r3, #0
 80052ac:	617b      	str	r3, [r7, #20]
 80052ae:	e016      	b.n	80052de <vecsub+0x42>
		c[i] = a[i] - b[i];
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	4413      	add	r3, r2
 80052b8:	ed93 7a00 	vldr	s14, [r3]
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	4413      	add	r3, r2
 80052c4:	edd3 7a00 	vldr	s15, [r3]
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	683a      	ldr	r2, [r7, #0]
 80052ce:	4413      	add	r3, r2
 80052d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052d4:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	3301      	adds	r3, #1
 80052dc:	617b      	str	r3, [r7, #20]
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	dbe4      	blt.n	80052b0 <vecsub+0x14>
	}
}
 80052e6:	bf00      	nop
 80052e8:	371c      	adds	r7, #28
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr

080052f2 <matadd>:
    for(int i = 0; i < n; i++){
        b[i] = scalar * a[i];
    }
}

void matadd(int m, int n, float A[m][n], float B[m][n], float C[m][n]) {
 80052f2:	b4f0      	push	{r4, r5, r6, r7}
 80052f4:	b08a      	sub	sp, #40	; 0x28
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	60f8      	str	r0, [r7, #12]
 80052fa:	60b9      	str	r1, [r7, #8]
 80052fc:	607a      	str	r2, [r7, #4]
 80052fe:	603b      	str	r3, [r7, #0]
 8005300:	68b8      	ldr	r0, [r7, #8]
 8005302:	1e43      	subs	r3, r0, #1
 8005304:	627b      	str	r3, [r7, #36]	; 0x24
 8005306:	4603      	mov	r3, r0
 8005308:	4619      	mov	r1, r3
 800530a:	f04f 0200 	mov.w	r2, #0
 800530e:	f04f 0300 	mov.w	r3, #0
 8005312:	f04f 0400 	mov.w	r4, #0
 8005316:	0154      	lsls	r4, r2, #5
 8005318:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800531c:	014b      	lsls	r3, r1, #5
 800531e:	68bd      	ldr	r5, [r7, #8]
 8005320:	1e6b      	subs	r3, r5, #1
 8005322:	61bb      	str	r3, [r7, #24]
 8005324:	462b      	mov	r3, r5
 8005326:	4619      	mov	r1, r3
 8005328:	f04f 0200 	mov.w	r2, #0
 800532c:	f04f 0300 	mov.w	r3, #0
 8005330:	f04f 0400 	mov.w	r4, #0
 8005334:	0154      	lsls	r4, r2, #5
 8005336:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800533a:	014b      	lsls	r3, r1, #5
 800533c:	68be      	ldr	r6, [r7, #8]
 800533e:	1e73      	subs	r3, r6, #1
 8005340:	617b      	str	r3, [r7, #20]
 8005342:	4633      	mov	r3, r6
 8005344:	4619      	mov	r1, r3
 8005346:	f04f 0200 	mov.w	r2, #0
 800534a:	f04f 0300 	mov.w	r3, #0
 800534e:	f04f 0400 	mov.w	r4, #0
 8005352:	0154      	lsls	r4, r2, #5
 8005354:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005358:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 800535a:	2300      	movs	r3, #0
 800535c:	61fb      	str	r3, [r7, #28]
 800535e:	e032      	b.n	80053c6 <matadd+0xd4>
        for(int j = 0; j < n; j++){
 8005360:	2300      	movs	r3, #0
 8005362:	623b      	str	r3, [r7, #32]
 8005364:	e028      	b.n	80053b8 <matadd+0xc6>
            C[i][j] =  A[i][j] + B[i][j];
 8005366:	4602      	mov	r2, r0
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	fb03 f302 	mul.w	r3, r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	441a      	add	r2, r3
 8005374:	6a3b      	ldr	r3, [r7, #32]
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4413      	add	r3, r2
 800537a:	ed93 7a00 	vldr	s14, [r3]
 800537e:	462a      	mov	r2, r5
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	fb03 f302 	mul.w	r3, r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	441a      	add	r2, r3
 800538c:	6a3b      	ldr	r3, [r7, #32]
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4413      	add	r3, r2
 8005392:	edd3 7a00 	vldr	s15, [r3]
 8005396:	4632      	mov	r2, r6
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	fb03 f302 	mul.w	r3, r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053a2:	441a      	add	r2, r3
 80053a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053a8:	6a3b      	ldr	r3, [r7, #32]
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	4413      	add	r3, r2
 80053ae:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 80053b2:	6a3b      	ldr	r3, [r7, #32]
 80053b4:	3301      	adds	r3, #1
 80053b6:	623b      	str	r3, [r7, #32]
 80053b8:	6a3a      	ldr	r2, [r7, #32]
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	429a      	cmp	r2, r3
 80053be:	dbd2      	blt.n	8005366 <matadd+0x74>
	for(int i = 0; i < m; i++){
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	3301      	adds	r3, #1
 80053c4:	61fb      	str	r3, [r7, #28]
 80053c6:	69fa      	ldr	r2, [r7, #28]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	dbc8      	blt.n	8005360 <matadd+0x6e>
        }
    }
}
 80053ce:	bf00      	nop
 80053d0:	3728      	adds	r7, #40	; 0x28
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bcf0      	pop	{r4, r5, r6, r7}
 80053d6:	4770      	bx	lr

080053d8 <matsub>:

void matsub(int m, int n, float A[m][n], float B[m][n], float C[m][n]) {
 80053d8:	b4f0      	push	{r4, r5, r6, r7}
 80053da:	b08a      	sub	sp, #40	; 0x28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
 80053e4:	603b      	str	r3, [r7, #0]
 80053e6:	68b8      	ldr	r0, [r7, #8]
 80053e8:	1e43      	subs	r3, r0, #1
 80053ea:	627b      	str	r3, [r7, #36]	; 0x24
 80053ec:	4603      	mov	r3, r0
 80053ee:	4619      	mov	r1, r3
 80053f0:	f04f 0200 	mov.w	r2, #0
 80053f4:	f04f 0300 	mov.w	r3, #0
 80053f8:	f04f 0400 	mov.w	r4, #0
 80053fc:	0154      	lsls	r4, r2, #5
 80053fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005402:	014b      	lsls	r3, r1, #5
 8005404:	68bd      	ldr	r5, [r7, #8]
 8005406:	1e6b      	subs	r3, r5, #1
 8005408:	61bb      	str	r3, [r7, #24]
 800540a:	462b      	mov	r3, r5
 800540c:	4619      	mov	r1, r3
 800540e:	f04f 0200 	mov.w	r2, #0
 8005412:	f04f 0300 	mov.w	r3, #0
 8005416:	f04f 0400 	mov.w	r4, #0
 800541a:	0154      	lsls	r4, r2, #5
 800541c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005420:	014b      	lsls	r3, r1, #5
 8005422:	68be      	ldr	r6, [r7, #8]
 8005424:	1e73      	subs	r3, r6, #1
 8005426:	617b      	str	r3, [r7, #20]
 8005428:	4633      	mov	r3, r6
 800542a:	4619      	mov	r1, r3
 800542c:	f04f 0200 	mov.w	r2, #0
 8005430:	f04f 0300 	mov.w	r3, #0
 8005434:	f04f 0400 	mov.w	r4, #0
 8005438:	0154      	lsls	r4, r2, #5
 800543a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800543e:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 8005440:	2300      	movs	r3, #0
 8005442:	61fb      	str	r3, [r7, #28]
 8005444:	e032      	b.n	80054ac <matsub+0xd4>
        for(int j = 0; j < n; j++){
 8005446:	2300      	movs	r3, #0
 8005448:	623b      	str	r3, [r7, #32]
 800544a:	e028      	b.n	800549e <matsub+0xc6>
            C[i][j] =  A[i][j] - B[i][j];
 800544c:	4602      	mov	r2, r0
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	fb03 f302 	mul.w	r3, r3, r2
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	441a      	add	r2, r3
 800545a:	6a3b      	ldr	r3, [r7, #32]
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4413      	add	r3, r2
 8005460:	ed93 7a00 	vldr	s14, [r3]
 8005464:	462a      	mov	r2, r5
 8005466:	69fb      	ldr	r3, [r7, #28]
 8005468:	fb03 f302 	mul.w	r3, r3, r2
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	441a      	add	r2, r3
 8005472:	6a3b      	ldr	r3, [r7, #32]
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	4413      	add	r3, r2
 8005478:	edd3 7a00 	vldr	s15, [r3]
 800547c:	4632      	mov	r2, r6
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	fb03 f302 	mul.w	r3, r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005488:	441a      	add	r2, r3
 800548a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800548e:	6a3b      	ldr	r3, [r7, #32]
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	4413      	add	r3, r2
 8005494:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8005498:	6a3b      	ldr	r3, [r7, #32]
 800549a:	3301      	adds	r3, #1
 800549c:	623b      	str	r3, [r7, #32]
 800549e:	6a3a      	ldr	r2, [r7, #32]
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	dbd2      	blt.n	800544c <matsub+0x74>
	for(int i = 0; i < m; i++){
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	3301      	adds	r3, #1
 80054aa:	61fb      	str	r3, [r7, #28]
 80054ac:	69fa      	ldr	r2, [r7, #28]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	dbc8      	blt.n	8005446 <matsub+0x6e>
        }
    }
}
 80054b4:	bf00      	nop
 80054b6:	3728      	adds	r7, #40	; 0x28
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bcf0      	pop	{r4, r5, r6, r7}
 80054bc:	4770      	bx	lr

080054be <matmul>:

void matmul(int m, int n, int o, float A[m][n], float B[n][o], float C[m][o], bool reset) {
 80054be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054c0:	b08d      	sub	sp, #52	; 0x34
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6178      	str	r0, [r7, #20]
 80054c6:	6139      	str	r1, [r7, #16]
 80054c8:	60fa      	str	r2, [r7, #12]
 80054ca:	60bb      	str	r3, [r7, #8]
 80054cc:	693e      	ldr	r6, [r7, #16]
 80054ce:	1e73      	subs	r3, r6, #1
 80054d0:	623b      	str	r3, [r7, #32]
 80054d2:	4633      	mov	r3, r6
 80054d4:	4619      	mov	r1, r3
 80054d6:	f04f 0200 	mov.w	r2, #0
 80054da:	f04f 0300 	mov.w	r3, #0
 80054de:	f04f 0400 	mov.w	r4, #0
 80054e2:	0154      	lsls	r4, r2, #5
 80054e4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80054e8:	014b      	lsls	r3, r1, #5
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	607a      	str	r2, [r7, #4]
 80054ee:	4613      	mov	r3, r2
 80054f0:	3b01      	subs	r3, #1
 80054f2:	61fb      	str	r3, [r7, #28]
 80054f4:	4613      	mov	r3, r2
 80054f6:	4619      	mov	r1, r3
 80054f8:	f04f 0200 	mov.w	r2, #0
 80054fc:	f04f 0300 	mov.w	r3, #0
 8005500:	f04f 0400 	mov.w	r4, #0
 8005504:	0154      	lsls	r4, r2, #5
 8005506:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800550a:	014b      	lsls	r3, r1, #5
 800550c:	68fd      	ldr	r5, [r7, #12]
 800550e:	1e6b      	subs	r3, r5, #1
 8005510:	61bb      	str	r3, [r7, #24]
 8005512:	462b      	mov	r3, r5
 8005514:	4619      	mov	r1, r3
 8005516:	f04f 0200 	mov.w	r2, #0
 800551a:	f04f 0300 	mov.w	r3, #0
 800551e:	f04f 0400 	mov.w	r4, #0
 8005522:	0154      	lsls	r4, r2, #5
 8005524:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005528:	014b      	lsls	r3, r1, #5
	if (reset) {
 800552a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800552e:	2b00      	cmp	r3, #0
 8005530:	d009      	beq.n	8005546 <matmul+0x88>
		memset(C, 0, m * o * sizeof(C[0][0]));
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	fb02 f303 	mul.w	r3, r2, r3
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	461a      	mov	r2, r3
 800553e:	2100      	movs	r1, #0
 8005540:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005542:	f00b f830 	bl	80105a6 <memset>
	}
	for(int i = 0; i < m; i++){
 8005546:	2300      	movs	r3, #0
 8005548:	627b      	str	r3, [r7, #36]	; 0x24
 800554a:	e04a      	b.n	80055e2 <matmul+0x124>
        for(int j = 0; j < o; j++){
 800554c:	2300      	movs	r3, #0
 800554e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005550:	e040      	b.n	80055d4 <matmul+0x116>
            for(int k = 0; k < n; k++){
 8005552:	2300      	movs	r3, #0
 8005554:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005556:	e036      	b.n	80055c6 <matmul+0x108>
                C[i][j] +=  A[i][k] * B[k][j];
 8005558:	4632      	mov	r2, r6
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	fb03 f302 	mul.w	r3, r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	68ba      	ldr	r2, [r7, #8]
 8005564:	441a      	add	r2, r3
 8005566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4413      	add	r3, r2
 800556c:	ed93 7a00 	vldr	s14, [r3]
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005574:	fb03 f302 	mul.w	r3, r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800557c:	441a      	add	r2, r3
 800557e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	4413      	add	r3, r2
 8005584:	edd3 7a00 	vldr	s15, [r3]
 8005588:	ee27 7a27 	vmul.f32	s14, s14, s15
 800558c:	462a      	mov	r2, r5
 800558e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005590:	fb03 f302 	mul.w	r3, r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005598:	441a      	add	r2, r3
 800559a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4413      	add	r3, r2
 80055a0:	edd3 7a00 	vldr	s15, [r3]
 80055a4:	462a      	mov	r2, r5
 80055a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a8:	fb03 f302 	mul.w	r3, r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055b0:	441a      	add	r2, r3
 80055b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4413      	add	r3, r2
 80055bc:	edc3 7a00 	vstr	s15, [r3]
            for(int k = 0; k < n; k++){
 80055c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c2:	3301      	adds	r3, #1
 80055c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	dbc4      	blt.n	8005558 <matmul+0x9a>
        for(int j = 0; j < o; j++){
 80055ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d0:	3301      	adds	r3, #1
 80055d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80055d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	429a      	cmp	r2, r3
 80055da:	dbba      	blt.n	8005552 <matmul+0x94>
	for(int i = 0; i < m; i++){
 80055dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055de:	3301      	adds	r3, #1
 80055e0:	627b      	str	r3, [r7, #36]	; 0x24
 80055e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	dbb0      	blt.n	800554c <matmul+0x8e>
            }
        }
    }
}
 80055ea:	bf00      	nop
 80055ec:	3734      	adds	r7, #52	; 0x34
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080055f2 <matvecprod>:

void matvecprod(int m, int n, float A[m][n], float b[n], float c[m], bool reset) {
 80055f2:	b5b0      	push	{r4, r5, r7, lr}
 80055f4:	b088      	sub	sp, #32
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	60f8      	str	r0, [r7, #12]
 80055fa:	60b9      	str	r1, [r7, #8]
 80055fc:	607a      	str	r2, [r7, #4]
 80055fe:	603b      	str	r3, [r7, #0]
 8005600:	68bd      	ldr	r5, [r7, #8]
 8005602:	1e6b      	subs	r3, r5, #1
 8005604:	617b      	str	r3, [r7, #20]
 8005606:	462b      	mov	r3, r5
 8005608:	4619      	mov	r1, r3
 800560a:	f04f 0200 	mov.w	r2, #0
 800560e:	f04f 0300 	mov.w	r3, #0
 8005612:	f04f 0400 	mov.w	r4, #0
 8005616:	0154      	lsls	r4, r2, #5
 8005618:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800561c:	014b      	lsls	r3, r1, #5
	if (reset) {
 800561e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005622:	2b00      	cmp	r3, #0
 8005624:	d006      	beq.n	8005634 <matvecprod+0x42>
		memset(c, 0, m * sizeof(c[0]));
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	461a      	mov	r2, r3
 800562c:	2100      	movs	r1, #0
 800562e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005630:	f00a ffb9 	bl	80105a6 <memset>
	}
	for(int i = 0; i < m; i++){
 8005634:	2300      	movs	r3, #0
 8005636:	61bb      	str	r3, [r7, #24]
 8005638:	e02e      	b.n	8005698 <matvecprod+0xa6>
        for(int j = 0; j < n; j++){
 800563a:	2300      	movs	r3, #0
 800563c:	61fb      	str	r3, [r7, #28]
 800563e:	e024      	b.n	800568a <matvecprod+0x98>
            c[i] += A[i][j] * b[j];
 8005640:	462a      	mov	r2, r5
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	fb03 f302 	mul.w	r3, r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	441a      	add	r2, r3
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4413      	add	r3, r2
 8005654:	ed93 7a00 	vldr	s14, [r3]
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	683a      	ldr	r2, [r7, #0]
 800565e:	4413      	add	r3, r2
 8005660:	edd3 7a00 	vldr	s15, [r3]
 8005664:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800566e:	4413      	add	r3, r2
 8005670:	edd3 7a00 	vldr	s15, [r3]
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800567a:	4413      	add	r3, r2
 800567c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005680:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	3301      	adds	r3, #1
 8005688:	61fb      	str	r3, [r7, #28]
 800568a:	69fa      	ldr	r2, [r7, #28]
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	429a      	cmp	r2, r3
 8005690:	dbd6      	blt.n	8005640 <matvecprod+0x4e>
	for(int i = 0; i < m; i++){
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	3301      	adds	r3, #1
 8005696:	61bb      	str	r3, [r7, #24]
 8005698:	69ba      	ldr	r2, [r7, #24]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	429a      	cmp	r2, r3
 800569e:	dbcc      	blt.n	800563a <matvecprod+0x48>
        }
    }
}
 80056a0:	bf00      	nop
 80056a2:	3720      	adds	r7, #32
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bdb0      	pop	{r4, r5, r7, pc}

080056a8 <lower_triangular_inverse>:
	}
}

/* computes in-place the inverse of the lower triangular matrix L */
/* http://www.mymathlib.com/matrices/linearsystems/triangular.html */
int lower_triangular_inverse(int n, float *L) {
 80056a8:	b480      	push	{r7}
 80056aa:	b08b      	sub	sp, #44	; 0x2c
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
   int i, j, k;
   float *p_i, *p_j, *p_k;
   float sum;

    /* Invert the diagonal elements of the lower triangular matrix L. */
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 80056b2:	2300      	movs	r3, #0
 80056b4:	61fb      	str	r3, [r7, #28]
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	613b      	str	r3, [r7, #16]
 80056ba:	e01d      	b.n	80056f8 <lower_triangular_inverse+0x50>
        if (*p_k == 0.0) return -1;
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	edd3 7a00 	vldr	s15, [r3]
 80056c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80056c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ca:	d102      	bne.n	80056d2 <lower_triangular_inverse+0x2a>
 80056cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056d0:	e076      	b.n	80057c0 <lower_triangular_inverse+0x118>
        else *p_k = 1.0 / *p_k;
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	ed93 7a00 	vldr	s14, [r3]
 80056d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	edc3 7a00 	vstr	s15, [r3]
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	3301      	adds	r3, #1
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	4413      	add	r3, r2
 80056f0:	613b      	str	r3, [r7, #16]
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	3301      	adds	r3, #1
 80056f6:	61fb      	str	r3, [r7, #28]
 80056f8:	69fa      	ldr	r2, [r7, #28]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	dbdd      	blt.n	80056bc <lower_triangular_inverse+0x14>
    }
    
    /* Invert the remaining lower triangular matrix L row by row. */
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 8005700:	2301      	movs	r3, #1
 8005702:	627b      	str	r3, [r7, #36]	; 0x24
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	4413      	add	r3, r2
 800570c:	61bb      	str	r3, [r7, #24]
 800570e:	e052      	b.n	80057b6 <lower_triangular_inverse+0x10e>
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 8005710:	2300      	movs	r3, #0
 8005712:	623b      	str	r3, [r7, #32]
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	617b      	str	r3, [r7, #20]
 8005718:	e041      	b.n	800579e <lower_triangular_inverse+0xf6>
            sum = 0.0;
 800571a:	f04f 0300 	mov.w	r3, #0
 800571e:	60fb      	str	r3, [r7, #12]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 8005720:	6a3b      	ldr	r3, [r7, #32]
 8005722:	61fb      	str	r3, [r7, #28]
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	613b      	str	r3, [r7, #16]
 8005728:	e01b      	b.n	8005762 <lower_triangular_inverse+0xba>
                sum += *(p_i + k) * *(p_k + j);
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	69ba      	ldr	r2, [r7, #24]
 8005730:	4413      	add	r3, r2
 8005732:	ed93 7a00 	vldr	s14, [r3]
 8005736:	6a3b      	ldr	r3, [r7, #32]
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	4413      	add	r3, r2
 800573e:	edd3 7a00 	vldr	s15, [r3]
 8005742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005746:	ed97 7a03 	vldr	s14, [r7, #12]
 800574a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800574e:	edc7 7a03 	vstr	s15, [r7, #12]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 8005752:	69fb      	ldr	r3, [r7, #28]
 8005754:	3301      	adds	r3, #1
 8005756:	61fb      	str	r3, [r7, #28]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	4413      	add	r3, r2
 8005760:	613b      	str	r3, [r7, #16]
 8005762:	69fa      	ldr	r2, [r7, #28]
 8005764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005766:	429a      	cmp	r2, r3
 8005768:	dbdf      	blt.n	800572a <lower_triangular_inverse+0x82>
            *(p_i + j) = - *(p_i + i) * sum;
 800576a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	69ba      	ldr	r2, [r7, #24]
 8005770:	4413      	add	r3, r2
 8005772:	edd3 7a00 	vldr	s15, [r3]
 8005776:	eeb1 7a67 	vneg.f32	s14, s15
 800577a:	6a3b      	ldr	r3, [r7, #32]
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	69ba      	ldr	r2, [r7, #24]
 8005780:	4413      	add	r3, r2
 8005782:	edd7 7a03 	vldr	s15, [r7, #12]
 8005786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800578a:	edc3 7a00 	vstr	s15, [r3]
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	4413      	add	r3, r2
 8005796:	617b      	str	r3, [r7, #20]
 8005798:	6a3b      	ldr	r3, [r7, #32]
 800579a:	3301      	adds	r3, #1
 800579c:	623b      	str	r3, [r7, #32]
 800579e:	6a3a      	ldr	r2, [r7, #32]
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a2:	429a      	cmp	r2, r3
 80057a4:	dbb9      	blt.n	800571a <lower_triangular_inverse+0x72>
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 80057a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a8:	3301      	adds	r3, #1
 80057aa:	627b      	str	r3, [r7, #36]	; 0x24
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	69ba      	ldr	r2, [r7, #24]
 80057b2:	4413      	add	r3, r2
 80057b4:	61bb      	str	r3, [r7, #24]
 80057b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	dba8      	blt.n	8005710 <lower_triangular_inverse+0x68>
        }
    }
    
    return 0;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	372c      	adds	r7, #44	; 0x2c
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <cholesky>:

/* computes the cholesky decomposition */
/* https://rosettacode.org/wiki/Cholesky_decomposition#C */
void cholesky(int n, float A[n][n], float L[n][n]) {
 80057cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80057d0:	b08b      	sub	sp, #44	; 0x2c
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	60f8      	str	r0, [r7, #12]
 80057d6:	60b9      	str	r1, [r7, #8]
 80057d8:	607a      	str	r2, [r7, #4]
 80057da:	68fe      	ldr	r6, [r7, #12]
 80057dc:	1e73      	subs	r3, r6, #1
 80057de:	617b      	str	r3, [r7, #20]
 80057e0:	4633      	mov	r3, r6
 80057e2:	4619      	mov	r1, r3
 80057e4:	f04f 0200 	mov.w	r2, #0
 80057e8:	f04f 0300 	mov.w	r3, #0
 80057ec:	f04f 0400 	mov.w	r4, #0
 80057f0:	0154      	lsls	r4, r2, #5
 80057f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80057f6:	014b      	lsls	r3, r1, #5
 80057f8:	68fd      	ldr	r5, [r7, #12]
 80057fa:	1e6b      	subs	r3, r5, #1
 80057fc:	613b      	str	r3, [r7, #16]
 80057fe:	462b      	mov	r3, r5
 8005800:	4619      	mov	r1, r3
 8005802:	f04f 0200 	mov.w	r2, #0
 8005806:	f04f 0300 	mov.w	r3, #0
 800580a:	f04f 0400 	mov.w	r4, #0
 800580e:	0154      	lsls	r4, r2, #5
 8005810:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005814:	014b      	lsls	r3, r1, #5
    memset(L, 0, n * n * sizeof(L[0][0]));
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	fb02 f303 	mul.w	r3, r2, r3
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	461a      	mov	r2, r3
 8005822:	2100      	movs	r1, #0
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f00a febe 	bl	80105a6 <memset>
    for (int i = 0; i < n; i++)
 800582a:	2300      	movs	r3, #0
 800582c:	61bb      	str	r3, [r7, #24]
 800582e:	e09f      	b.n	8005970 <cholesky+0x1a4>
        for (int j = 0; j < (i+1); j++) {
 8005830:	2300      	movs	r3, #0
 8005832:	61fb      	str	r3, [r7, #28]
 8005834:	e093      	b.n	800595e <cholesky+0x192>
            float s = 0;
 8005836:	f04f 0300 	mov.w	r3, #0
 800583a:	623b      	str	r3, [r7, #32]
            for (int k = 0; k < j; k++)
 800583c:	2300      	movs	r3, #0
 800583e:	627b      	str	r3, [r7, #36]	; 0x24
 8005840:	e022      	b.n	8005888 <cholesky+0xbc>
                s += L[i][k] * L[j][k];
 8005842:	462a      	mov	r2, r5
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	fb03 f302 	mul.w	r3, r3, r2
 800584a:	009b      	lsls	r3, r3, #2
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	441a      	add	r2, r3
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	ed93 7a00 	vldr	s14, [r3]
 800585a:	462a      	mov	r2, r5
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	fb03 f302 	mul.w	r3, r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	441a      	add	r2, r3
 8005868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	4413      	add	r3, r2
 800586e:	edd3 7a00 	vldr	s15, [r3]
 8005872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005876:	ed97 7a08 	vldr	s14, [r7, #32]
 800587a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800587e:	edc7 7a08 	vstr	s15, [r7, #32]
            for (int k = 0; k < j; k++)
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	3301      	adds	r3, #1
 8005886:	627b      	str	r3, [r7, #36]	; 0x24
 8005888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800588a:	69fb      	ldr	r3, [r7, #28]
 800588c:	429a      	cmp	r2, r3
 800588e:	dbd8      	blt.n	8005842 <cholesky+0x76>
            L[i][j] = (i == j) ? sqrtf(A[i][i] - s) : (1.0 / L[j][j] * (A[i][j] - s));
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	429a      	cmp	r2, r3
 8005896:	d116      	bne.n	80058c6 <cholesky+0xfa>
 8005898:	4632      	mov	r2, r6
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	fb03 f302 	mul.w	r3, r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	441a      	add	r2, r3
 80058a6:	69bb      	ldr	r3, [r7, #24]
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4413      	add	r3, r2
 80058ac:	ed93 7a00 	vldr	s14, [r3]
 80058b0:	edd7 7a08 	vldr	s15, [r7, #32]
 80058b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058b8:	eeb0 0a67 	vmov.f32	s0, s15
 80058bc:	f00d fee8 	bl	8013690 <sqrtf>
 80058c0:	ee10 1a10 	vmov	r1, s0
 80058c4:	e03d      	b.n	8005942 <cholesky+0x176>
 80058c6:	462a      	mov	r2, r5
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	fb03 f302 	mul.w	r3, r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	441a      	add	r2, r3
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	4413      	add	r3, r2
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4618      	mov	r0, r3
 80058de:	f7fa fe33 	bl	8000548 <__aeabi_f2d>
 80058e2:	4603      	mov	r3, r0
 80058e4:	460c      	mov	r4, r1
 80058e6:	461a      	mov	r2, r3
 80058e8:	4623      	mov	r3, r4
 80058ea:	f04f 0000 	mov.w	r0, #0
 80058ee:	4925      	ldr	r1, [pc, #148]	; (8005984 <cholesky+0x1b8>)
 80058f0:	f7fa ffac 	bl	800084c <__aeabi_ddiv>
 80058f4:	4603      	mov	r3, r0
 80058f6:	460c      	mov	r4, r1
 80058f8:	4698      	mov	r8, r3
 80058fa:	46a1      	mov	r9, r4
 80058fc:	4632      	mov	r2, r6
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	fb03 f302 	mul.w	r3, r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	441a      	add	r2, r3
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	4413      	add	r3, r2
 8005910:	ed93 7a00 	vldr	s14, [r3]
 8005914:	edd7 7a08 	vldr	s15, [r7, #32]
 8005918:	ee77 7a67 	vsub.f32	s15, s14, s15
 800591c:	ee17 0a90 	vmov	r0, s15
 8005920:	f7fa fe12 	bl	8000548 <__aeabi_f2d>
 8005924:	4603      	mov	r3, r0
 8005926:	460c      	mov	r4, r1
 8005928:	461a      	mov	r2, r3
 800592a:	4623      	mov	r3, r4
 800592c:	4640      	mov	r0, r8
 800592e:	4649      	mov	r1, r9
 8005930:	f7fa fe62 	bl	80005f8 <__aeabi_dmul>
 8005934:	4603      	mov	r3, r0
 8005936:	460c      	mov	r4, r1
 8005938:	4618      	mov	r0, r3
 800593a:	4621      	mov	r1, r4
 800593c:	f7fb f954 	bl	8000be8 <__aeabi_d2f>
 8005940:	4601      	mov	r1, r0
 8005942:	462a      	mov	r2, r5
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	fb03 f302 	mul.w	r3, r3, r2
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	441a      	add	r2, r3
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4413      	add	r3, r2
 8005956:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < (i+1); j++) {
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	3301      	adds	r3, #1
 800595c:	61fb      	str	r3, [r7, #28]
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	3301      	adds	r3, #1
 8005962:	69fa      	ldr	r2, [r7, #28]
 8005964:	429a      	cmp	r2, r3
 8005966:	f6ff af66 	blt.w	8005836 <cholesky+0x6a>
    for (int i = 0; i < n; i++)
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	3301      	adds	r3, #1
 800596e:	61bb      	str	r3, [r7, #24]
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	429a      	cmp	r2, r3
 8005976:	f6ff af5b 	blt.w	8005830 <cholesky+0x64>
        }
}
 800597a:	bf00      	nop
 800597c:	372c      	adds	r7, #44	; 0x2c
 800597e:	46bd      	mov	sp, r7
 8005980:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005984:	3ff00000 	.word	0x3ff00000

08005988 <cholesky_inverse>:

/* computes the inverse of a Hermitian, positive-definite matrix of dimension n x n using cholesky decomposition*/
/* Krishnamoorthy, Aravindh, and Deepak Menon. "Matrix inversion using Cholesky decomposition." */
/* 2013 signal processing: Algorithms, architectures, arrangements, and applications (SPA). IEEE, 2013. */
/* the inverse has a big O complexity of n^3 */
void cholesky_inverse(int n, float A[n][n], float inverse[n][n], float lambda) {
 8005988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800598c:	b090      	sub	sp, #64	; 0x40
 800598e:	af00      	add	r7, sp, #0
 8005990:	60f8      	str	r0, [r7, #12]
 8005992:	60b9      	str	r1, [r7, #8]
 8005994:	607a      	str	r2, [r7, #4]
 8005996:	ed87 0a00 	vstr	s0, [r7]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	1e5a      	subs	r2, r3, #1
 800599e:	63ba      	str	r2, [r7, #56]	; 0x38
 80059a0:	4619      	mov	r1, r3
 80059a2:	f04f 0200 	mov.w	r2, #0
 80059a6:	f04f 0300 	mov.w	r3, #0
 80059aa:	f04f 0400 	mov.w	r4, #0
 80059ae:	0154      	lsls	r4, r2, #5
 80059b0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80059b4:	014b      	lsls	r3, r1, #5
 80059b6:	68fd      	ldr	r5, [r7, #12]
 80059b8:	1e6b      	subs	r3, r5, #1
 80059ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059bc:	462b      	mov	r3, r5
 80059be:	4619      	mov	r1, r3
 80059c0:	f04f 0200 	mov.w	r2, #0
 80059c4:	f04f 0300 	mov.w	r3, #0
 80059c8:	f04f 0400 	mov.w	r4, #0
 80059cc:	0154      	lsls	r4, r2, #5
 80059ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80059d2:	014b      	lsls	r3, r1, #5
 80059d4:	466b      	mov	r3, sp
 80059d6:	4699      	mov	r9, r3
    /* add damping factor to avoid singularities. */
	/* if no damping is required set lambda to 0.0 */
	float A_dash[n][n];
 80059d8:	68f8      	ldr	r0, [r7, #12]
 80059da:	68fe      	ldr	r6, [r7, #12]
 80059dc:	1e43      	subs	r3, r0, #1
 80059de:	627b      	str	r3, [r7, #36]	; 0x24
 80059e0:	4603      	mov	r3, r0
 80059e2:	4619      	mov	r1, r3
 80059e4:	f04f 0200 	mov.w	r2, #0
 80059e8:	f04f 0300 	mov.w	r3, #0
 80059ec:	f04f 0400 	mov.w	r4, #0
 80059f0:	0154      	lsls	r4, r2, #5
 80059f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80059f6:	014b      	lsls	r3, r1, #5
 80059f8:	4603      	mov	r3, r0
 80059fa:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80059fe:	1e73      	subs	r3, r6, #1
 8005a00:	623b      	str	r3, [r7, #32]
 8005a02:	4603      	mov	r3, r0
 8005a04:	4619      	mov	r1, r3
 8005a06:	f04f 0200 	mov.w	r2, #0
 8005a0a:	4633      	mov	r3, r6
 8005a0c:	f04f 0400 	mov.w	r4, #0
 8005a10:	fb03 fe02 	mul.w	lr, r3, r2
 8005a14:	fb01 fc04 	mul.w	ip, r1, r4
 8005a18:	44f4      	add	ip, lr
 8005a1a:	fba1 3403 	umull	r3, r4, r1, r3
 8005a1e:	eb0c 0204 	add.w	r2, ip, r4
 8005a22:	4614      	mov	r4, r2
 8005a24:	f04f 0100 	mov.w	r1, #0
 8005a28:	f04f 0200 	mov.w	r2, #0
 8005a2c:	0162      	lsls	r2, r4, #5
 8005a2e:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8005a32:	0159      	lsls	r1, r3, #5
 8005a34:	4603      	mov	r3, r0
 8005a36:	4619      	mov	r1, r3
 8005a38:	f04f 0200 	mov.w	r2, #0
 8005a3c:	4633      	mov	r3, r6
 8005a3e:	f04f 0400 	mov.w	r4, #0
 8005a42:	fb03 fe02 	mul.w	lr, r3, r2
 8005a46:	fb01 fc04 	mul.w	ip, r1, r4
 8005a4a:	44f4      	add	ip, lr
 8005a4c:	fba1 3403 	umull	r3, r4, r1, r3
 8005a50:	eb0c 0204 	add.w	r2, ip, r4
 8005a54:	4614      	mov	r4, r2
 8005a56:	f04f 0100 	mov.w	r1, #0
 8005a5a:	f04f 0200 	mov.w	r2, #0
 8005a5e:	0162      	lsls	r2, r4, #5
 8005a60:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8005a64:	0159      	lsls	r1, r3, #5
 8005a66:	4603      	mov	r3, r0
 8005a68:	4632      	mov	r2, r6
 8005a6a:	fb02 f303 	mul.w	r3, r2, r3
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	3303      	adds	r3, #3
 8005a72:	3307      	adds	r3, #7
 8005a74:	08db      	lsrs	r3, r3, #3
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	ebad 0d03 	sub.w	sp, sp, r3
 8005a7c:	466b      	mov	r3, sp
 8005a7e:	3303      	adds	r3, #3
 8005a80:	089b      	lsrs	r3, r3, #2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	61fb      	str	r3, [r7, #28]
    memcpy(A_dash, A, n * n * sizeof(A[0][0]));
 8005a86:	69f8      	ldr	r0, [r7, #28]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	fb02 f303 	mul.w	r3, r2, r3
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	461a      	mov	r2, r3
 8005a94:	68b9      	ldr	r1, [r7, #8]
 8005a96:	f00a fd7b 	bl	8010590 <memcpy>
    for (int i = 0; i < n; i++) {
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a9e:	e022      	b.n	8005ae6 <cholesky_inverse+0x15e>
        A_dash[i][i] = A_dash[i][i] + lambda * lambda; 
 8005aa0:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8005aa4:	69fa      	ldr	r2, [r7, #28]
 8005aa6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005aa8:	fb01 f103 	mul.w	r1, r1, r3
 8005aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aae:	440b      	add	r3, r1
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	4413      	add	r3, r2
 8005ab4:	ed93 7a00 	vldr	s14, [r3]
 8005ab8:	edd7 6a00 	vldr	s13, [r7]
 8005abc:	edd7 7a00 	vldr	s15, [r7]
 8005ac0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ac4:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8005ac8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005acc:	69fa      	ldr	r2, [r7, #28]
 8005ace:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ad0:	fb01 f103 	mul.w	r1, r1, r3
 8005ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad6:	440b      	add	r3, r1
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4413      	add	r3, r2
 8005adc:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < n; i++) {
 8005ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ae6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	dbd8      	blt.n	8005aa0 <cholesky_inverse+0x118>
	}

    /* call cholesky decomposition to get lower triangular matrix L */
    float L[n][n];
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	68fe      	ldr	r6, [r7, #12]
 8005af2:	466b      	mov	r3, sp
 8005af4:	469a      	mov	sl, r3
 8005af6:	1e43      	subs	r3, r0, #1
 8005af8:	61bb      	str	r3, [r7, #24]
 8005afa:	4603      	mov	r3, r0
 8005afc:	4619      	mov	r1, r3
 8005afe:	f04f 0200 	mov.w	r2, #0
 8005b02:	f04f 0300 	mov.w	r3, #0
 8005b06:	f04f 0400 	mov.w	r4, #0
 8005b0a:	0154      	lsls	r4, r2, #5
 8005b0c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005b10:	014b      	lsls	r3, r1, #5
 8005b12:	4603      	mov	r3, r0
 8005b14:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8005b18:	1e73      	subs	r3, r6, #1
 8005b1a:	617b      	str	r3, [r7, #20]
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	4619      	mov	r1, r3
 8005b20:	f04f 0200 	mov.w	r2, #0
 8005b24:	4633      	mov	r3, r6
 8005b26:	f04f 0400 	mov.w	r4, #0
 8005b2a:	fb03 fe02 	mul.w	lr, r3, r2
 8005b2e:	fb01 fc04 	mul.w	ip, r1, r4
 8005b32:	44f4      	add	ip, lr
 8005b34:	fba1 3403 	umull	r3, r4, r1, r3
 8005b38:	eb0c 0204 	add.w	r2, ip, r4
 8005b3c:	4614      	mov	r4, r2
 8005b3e:	f04f 0100 	mov.w	r1, #0
 8005b42:	f04f 0200 	mov.w	r2, #0
 8005b46:	0162      	lsls	r2, r4, #5
 8005b48:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8005b4c:	0159      	lsls	r1, r3, #5
 8005b4e:	4603      	mov	r3, r0
 8005b50:	4619      	mov	r1, r3
 8005b52:	f04f 0200 	mov.w	r2, #0
 8005b56:	4633      	mov	r3, r6
 8005b58:	f04f 0400 	mov.w	r4, #0
 8005b5c:	fb03 fe02 	mul.w	lr, r3, r2
 8005b60:	fb01 fc04 	mul.w	ip, r1, r4
 8005b64:	44f4      	add	ip, lr
 8005b66:	fba1 3403 	umull	r3, r4, r1, r3
 8005b6a:	eb0c 0204 	add.w	r2, ip, r4
 8005b6e:	4614      	mov	r4, r2
 8005b70:	f04f 0100 	mov.w	r1, #0
 8005b74:	f04f 0200 	mov.w	r2, #0
 8005b78:	0162      	lsls	r2, r4, #5
 8005b7a:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8005b7e:	0159      	lsls	r1, r3, #5
 8005b80:	4603      	mov	r3, r0
 8005b82:	4632      	mov	r2, r6
 8005b84:	fb02 f303 	mul.w	r3, r2, r3
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	3303      	adds	r3, #3
 8005b8c:	3307      	adds	r3, #7
 8005b8e:	08db      	lsrs	r3, r3, #3
 8005b90:	00db      	lsls	r3, r3, #3
 8005b92:	ebad 0d03 	sub.w	sp, sp, r3
 8005b96:	466b      	mov	r3, sp
 8005b98:	3303      	adds	r3, #3
 8005b9a:	089b      	lsrs	r3, r3, #2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	613b      	str	r3, [r7, #16]
    cholesky(n, A_dash, L);
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	693a      	ldr	r2, [r7, #16]
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f7ff fe10 	bl	80057cc <cholesky>

    /* compute lower triangular inverse in-place */
    lower_triangular_inverse(n, &L[0][0]);
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	4619      	mov	r1, r3
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f7ff fd79 	bl	80056a8 <lower_triangular_inverse>

    /* compute matrix inverse A_inv = L_T^(-1) * L^(-1) */
    memset(inverse, 0, n * n * sizeof(inverse[0][0]));
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	fb02 f303 	mul.w	r3, r2, r3
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f00a fcee 	bl	80105a6 <memset>
    for(int i = 0; i < n; i++){
 8005bca:	2300      	movs	r3, #0
 8005bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bce:	e04e      	b.n	8005c6e <cholesky_inverse+0x2e6>
        for(int j = 0; j < n; j++){
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	633b      	str	r3, [r7, #48]	; 0x30
 8005bd4:	e044      	b.n	8005c60 <cholesky_inverse+0x2d8>
            for(int k = max(i, j); k < n; k++){
 8005bd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	bfb8      	it	lt
 8005bde:	4613      	movlt	r3, r2
 8005be0:	637b      	str	r3, [r7, #52]	; 0x34
 8005be2:	e036      	b.n	8005c52 <cholesky_inverse+0x2ca>
                inverse[i][j] +=  L[k][i] * L[k][j];
 8005be4:	462a      	mov	r2, r5
 8005be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be8:	fb03 f302 	mul.w	r3, r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	441a      	add	r2, r3
 8005bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4413      	add	r3, r2
 8005bf8:	ed93 7a00 	vldr	s14, [r3]
 8005bfc:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005c04:	fb01 f103 	mul.w	r1, r1, r3
 8005c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0a:	440b      	add	r3, r1
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4413      	add	r3, r2
 8005c10:	edd3 6a00 	vldr	s13, [r3]
 8005c14:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005c1c:	fb01 f103 	mul.w	r1, r1, r3
 8005c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c22:	440b      	add	r3, r1
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4413      	add	r3, r2
 8005c28:	edd3 7a00 	vldr	s15, [r3]
 8005c2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c30:	462a      	mov	r2, r5
 8005c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c34:	fb03 f302 	mul.w	r3, r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	441a      	add	r2, r3
 8005c3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	4413      	add	r3, r2
 8005c48:	edc3 7a00 	vstr	s15, [r3]
            for(int k = max(i, j); k < n; k++){
 8005c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c4e:	3301      	adds	r3, #1
 8005c50:	637b      	str	r3, [r7, #52]	; 0x34
 8005c52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	dbc4      	blt.n	8005be4 <cholesky_inverse+0x25c>
        for(int j = 0; j < n; j++){
 8005c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5c:	3301      	adds	r3, #1
 8005c5e:	633b      	str	r3, [r7, #48]	; 0x30
 8005c60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	dbb6      	blt.n	8005bd6 <cholesky_inverse+0x24e>
    for(int i = 0; i < n; i++){
 8005c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	dbac      	blt.n	8005bd0 <cholesky_inverse+0x248>
 8005c76:	46d5      	mov	sp, sl
 8005c78:	46cd      	mov	sp, r9
            }
        }
    }
}
 8005c7a:	bf00      	nop
 8005c7c:	3740      	adds	r7, #64	; 0x40
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005c84 <init_env>:
#include "../Inc/env.h"

void init_env(env_t *env) {
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
	/* init constants */
	calibrate_env(env, PRESSURE_REFERENCE, TEMPERATURE_REFERENCE);
 8005c8c:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
 8005c90:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8005cac <init_env+0x28>
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f000 f80b 	bl	8005cb0 <calibrate_env>
	update_env(env, TEMPERATURE_REFERENCE);
 8005c9a:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f84e 	bl	8005d40 <update_env>
}
 8005ca4:	bf00      	nop
 8005ca6:	3708      	adds	r7, #8
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	47c5e680 	.word	0x47c5e680

08005cb0 <calibrate_env>:

void calibrate_env(env_t *env, float p_g, float T_g) {
 8005cb0:	b590      	push	{r4, r7, lr}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	ed87 0a02 	vstr	s0, [r7, #8]
 8005cbc:	edc7 0a01 	vstr	s1, [r7, #4]
	env->T_g = T_g + T_0; // input is temperature in °C
 8005cc0:	edd7 7a01 	vldr	s15, [r7, #4]
 8005cc4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8005d30 <calibrate_env+0x80>
 8005cc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	edc3 7a01 	vstr	s15, [r3, #4]
	env->p_g = p_g; //
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	601a      	str	r2, [r3, #0]
	env->rho_g = RHO_REFERENCE * ((env->p_g / PRESSURE_REFERENCE) * ((TEMPERATURE_REFERENCE+T_0) / env->T_g));
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	edd3 7a00 	vldr	s15, [r3]
 8005cde:	eddf 6a15 	vldr	s13, [pc, #84]	; 8005d34 <calibrate_env+0x84>
 8005ce2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	edd3 6a01 	vldr	s13, [r3, #4]
 8005cec:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8005d38 <calibrate_env+0x88>
 8005cf0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005cf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cf8:	ee17 0a90 	vmov	r0, s15
 8005cfc:	f7fa fc24 	bl	8000548 <__aeabi_f2d>
 8005d00:	a309      	add	r3, pc, #36	; (adr r3, 8005d28 <calibrate_env+0x78>)
 8005d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d06:	f7fa fc77 	bl	80005f8 <__aeabi_dmul>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	460c      	mov	r4, r1
 8005d0e:	4618      	mov	r0, r3
 8005d10:	4621      	mov	r1, r4
 8005d12:	f7fa ff69 	bl	8000be8 <__aeabi_d2f>
 8005d16:	4602      	mov	r2, r0
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	609a      	str	r2, [r3, #8]
}
 8005d1c:	bf00      	nop
 8005d1e:	3714      	adds	r7, #20
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd90      	pop	{r4, r7, pc}
 8005d24:	f3af 8000 	nop.w
 8005d28:	9999999a 	.word	0x9999999a
 8005d2c:	3ff39999 	.word	0x3ff39999
 8005d30:	43889333 	.word	0x43889333
 8005d34:	47c5e680 	.word	0x47c5e680
 8005d38:	43901333 	.word	0x43901333
 8005d3c:	00000000 	.word	0x00000000

08005d40 <update_env>:

void update_env(env_t *env, float T) {
 8005d40:	b590      	push	{r4, r7, lr}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	ed87 0a00 	vstr	s0, [r7]
	env->T = T + T_0; // input is temperature in °C and property is temperature in °K
 8005d4c:	edd7 7a00 	vldr	s15, [r7]
 8005d50:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8005da8 <update_env+0x68>
 8005d54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	edc3 7a03 	vstr	s15, [r3, #12]
	env->C = powf(GAMMA * R_0 * env->T, 0.5);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7fa fbf0 	bl	8000548 <__aeabi_f2d>
 8005d68:	a30d      	add	r3, pc, #52	; (adr r3, 8005da0 <update_env+0x60>)
 8005d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6e:	f7fa fc43 	bl	80005f8 <__aeabi_dmul>
 8005d72:	4603      	mov	r3, r0
 8005d74:	460c      	mov	r4, r1
 8005d76:	4618      	mov	r0, r3
 8005d78:	4621      	mov	r1, r4
 8005d7a:	f7fa ff35 	bl	8000be8 <__aeabi_d2f>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8005d84:	ee00 3a10 	vmov	s0, r3
 8005d88:	f00d fb1e 	bl	80133c8 <powf>
 8005d8c:	eef0 7a40 	vmov.f32	s15, s0
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8005d96:	bf00      	nop
 8005d98:	370c      	adds	r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd90      	pop	{r4, r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	d067f4fc 	.word	0xd067f4fc
 8005da4:	40791e18 	.word	0x40791e18
 8005da8:	43889333 	.word	0x43889333

08005dac <mach_number>:

float mach_number(env_t *env, float V_x) {
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	ed87 0a00 	vstr	s0, [r7]
	float mach_number = fabsf(V_x) / env->C;
 8005db8:	edd7 7a00 	vldr	s15, [r7]
 8005dbc:	eef0 6ae7 	vabs.f32	s13, s15
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	ed93 7a04 	vldr	s14, [r3, #16]
 8005dc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dca:	edc7 7a03 	vstr	s15, [r7, #12]
	return mach_number;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	ee07 3a90 	vmov	s15, r3
}
 8005dd4:	eeb0 0a67 	vmov.f32	s0, s15
 8005dd8:	3714      	adds	r7, #20
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
 8005de2:	0000      	movs	r0, r0
 8005de4:	0000      	movs	r0, r0
	...

08005de8 <pressure2altitudeAGL>:

void pressure2altitudeAGL(env_t *env, int n, float p[n], bool p_active[n], float h[n]) {
 8005de8:	b5b0      	push	{r4, r5, r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
 8005df4:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 8005df6:	2300      	movs	r3, #0
 8005df8:	617b      	str	r3, [r7, #20]
 8005dfa:	e043      	b.n	8005e84 <pressure2altitudeAGL+0x9c>
		if (p_active[i]) {
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	683a      	ldr	r2, [r7, #0]
 8005e00:	4413      	add	r3, r2
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d03a      	beq.n	8005e7e <pressure2altitudeAGL+0x96>
			/* original implementation */
			h[i] = env->T_g / T_GRAD * (1 - powf(p[i] / env->p_g, R_0 * T_GRAD / GRAVITATION));
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7fa fb9b 	bl	8000548 <__aeabi_f2d>
 8005e12:	a322      	add	r3, pc, #136	; (adr r3, 8005e9c <pressure2altitudeAGL+0xb4>)
 8005e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e18:	f7fa fd18 	bl	800084c <__aeabi_ddiv>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	460c      	mov	r4, r1
 8005e20:	4625      	mov	r5, r4
 8005e22:	461c      	mov	r4, r3
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	ed93 7a00 	vldr	s14, [r3]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	edd3 7a00 	vldr	s15, [r3]
 8005e36:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005e3a:	eddf 0a17 	vldr	s1, [pc, #92]	; 8005e98 <pressure2altitudeAGL+0xb0>
 8005e3e:	eeb0 0a66 	vmov.f32	s0, s13
 8005e42:	f00d fac1 	bl	80133c8 <powf>
 8005e46:	eeb0 7a40 	vmov.f32	s14, s0
 8005e4a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005e4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e52:	ee17 0a90 	vmov	r0, s15
 8005e56:	f7fa fb77 	bl	8000548 <__aeabi_f2d>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	4620      	mov	r0, r4
 8005e60:	4629      	mov	r1, r5
 8005e62:	f7fa fbc9 	bl	80005f8 <__aeabi_dmul>
 8005e66:	4603      	mov	r3, r0
 8005e68:	460c      	mov	r4, r1
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	4621      	mov	r1, r4
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e74:	18d4      	adds	r4, r2, r3
 8005e76:	f7fa feb7 	bl	8000be8 <__aeabi_d2f>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < n; i++) {
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	3301      	adds	r3, #1
 8005e82:	617b      	str	r3, [r7, #20]
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	dbb7      	blt.n	8005dfc <pressure2altitudeAGL+0x14>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// h[i] = env->T_g / T_GRAD * (1 - expf(logf(p[i] / env->p_g) * R_0 * env->T_grad / GRAVITATION);
		}
	}
}
 8005e8c:	bf00      	nop
 8005e8e:	3718      	adds	r7, #24
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bdb0      	pop	{r4, r5, r7, pc}
 8005e94:	f3af 8000 	nop.w
 8005e98:	3e42c42c 	.word	0x3e42c42c
 8005e9c:	76c8b439 	.word	0x76c8b439
 8005ea0:	3f7a9fbe 	.word	0x3f7a9fbe
 8005ea4:	00000000 	.word	0x00000000

08005ea8 <altitudeAGL2pressure>:

void altitudeAGL2pressure(env_t *env, int n, float h[n], bool h_active[n], float p[n]) {
 8005ea8:	b5b0      	push	{r4, r5, r7, lr}
 8005eaa:	ed2d 8b02 	vpush	{d8}
 8005eae:	b086      	sub	sp, #24
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
 8005eb8:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 8005eba:	2300      	movs	r3, #0
 8005ebc:	617b      	str	r3, [r7, #20]
 8005ebe:	e047      	b.n	8005f50 <altitudeAGL2pressure+0xa8>
		if (h_active[i]) {
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	683a      	ldr	r2, [r7, #0]
 8005ec4:	4413      	add	r3, r2
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d03e      	beq.n	8005f4a <altitudeAGL2pressure+0xa2>
			/* original implementation */
			p[i] = env->p_g * powf((1 - T_GRAD * h[i] / env->T_g), GRAVITATION / (R_0 * T_GRAD));
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	ed93 8a00 	vldr	s16, [r3]
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	4413      	add	r3, r2
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7fa fb33 	bl	8000548 <__aeabi_f2d>
 8005ee2:	a323      	add	r3, pc, #140	; (adr r3, 8005f70 <altitudeAGL2pressure+0xc8>)
 8005ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee8:	f7fa fb86 	bl	80005f8 <__aeabi_dmul>
 8005eec:	4603      	mov	r3, r0
 8005eee:	460c      	mov	r4, r1
 8005ef0:	4625      	mov	r5, r4
 8005ef2:	461c      	mov	r4, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f7fa fb25 	bl	8000548 <__aeabi_f2d>
 8005efe:	4602      	mov	r2, r0
 8005f00:	460b      	mov	r3, r1
 8005f02:	4620      	mov	r0, r4
 8005f04:	4629      	mov	r1, r5
 8005f06:	f7fa fca1 	bl	800084c <__aeabi_ddiv>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	460c      	mov	r4, r1
 8005f0e:	461a      	mov	r2, r3
 8005f10:	4623      	mov	r3, r4
 8005f12:	f04f 0000 	mov.w	r0, #0
 8005f16:	4914      	ldr	r1, [pc, #80]	; (8005f68 <altitudeAGL2pressure+0xc0>)
 8005f18:	f7fa f9b6 	bl	8000288 <__aeabi_dsub>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	460c      	mov	r4, r1
 8005f20:	4618      	mov	r0, r3
 8005f22:	4621      	mov	r1, r4
 8005f24:	f7fa fe60 	bl	8000be8 <__aeabi_d2f>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	eddf 0a10 	vldr	s1, [pc, #64]	; 8005f6c <altitudeAGL2pressure+0xc4>
 8005f2e:	ee00 3a10 	vmov	s0, r3
 8005f32:	f00d fa49 	bl	80133c8 <powf>
 8005f36:	eef0 7a40 	vmov.f32	s15, s0
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f40:	4413      	add	r3, r2
 8005f42:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005f46:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < n; i++) {
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	617b      	str	r3, [r7, #20]
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	dbb3      	blt.n	8005ec0 <altitudeAGL2pressure+0x18>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// p[i] = env->p_g * expf(logf(1 - env->T_grad * h[i] / env->T_g) * GRAVITATION / (R_0 * env->T_grad));
		}
	}
}
 8005f58:	bf00      	nop
 8005f5a:	3718      	adds	r7, #24
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	ecbd 8b02 	vpop	{d8}
 8005f62:	bdb0      	pop	{r4, r5, r7, pc}
 8005f64:	f3af 8000 	nop.w
 8005f68:	3ff00000 	.word	0x3ff00000
 8005f6c:	40a83e1f 	.word	0x40a83e1f
 8005f70:	76c8b439 	.word	0x76c8b439
 8005f74:	3f7a9fbe 	.word	0x3f7a9fbe

08005f78 <altitude_gradient>:

float altitude_gradient(env_t *env, float p) {
 8005f78:	b5b0      	push	{r4, r5, r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	ed87 0a00 	vstr	s0, [r7]
	/* computes the altitude gradient per infitesimal change in pressure (dh/dp) at a specified pressure */
	/* original implementation */
	float h_grad = -R_0 * env->T_g / (GRAVITATION * env->p_g) * powf(p / env->p_g, R_0 * T_GRAD / GRAVITATION - 1);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7fa fadd 	bl	8000548 <__aeabi_f2d>
 8005f8e:	a323      	add	r3, pc, #140	; (adr r3, 800601c <altitude_gradient+0xa4>)
 8005f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f94:	f7fa fb30 	bl	80005f8 <__aeabi_dmul>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	460c      	mov	r4, r1
 8005f9c:	4625      	mov	r5, r4
 8005f9e:	461c      	mov	r4, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f7fa facf 	bl	8000548 <__aeabi_f2d>
 8005faa:	a31e      	add	r3, pc, #120	; (adr r3, 8006024 <altitude_gradient+0xac>)
 8005fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb0:	f7fa fb22 	bl	80005f8 <__aeabi_dmul>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	4620      	mov	r0, r4
 8005fba:	4629      	mov	r1, r5
 8005fbc:	f7fa fc46 	bl	800084c <__aeabi_ddiv>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	460c      	mov	r4, r1
 8005fc4:	4625      	mov	r5, r4
 8005fc6:	461c      	mov	r4, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	edd3 7a00 	vldr	s15, [r3]
 8005fce:	ed97 7a00 	vldr	s14, [r7]
 8005fd2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005fd6:	eddf 0a10 	vldr	s1, [pc, #64]	; 8006018 <altitude_gradient+0xa0>
 8005fda:	eeb0 0a66 	vmov.f32	s0, s13
 8005fde:	f00d f9f3 	bl	80133c8 <powf>
 8005fe2:	ee10 3a10 	vmov	r3, s0
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7fa faae 	bl	8000548 <__aeabi_f2d>
 8005fec:	4602      	mov	r2, r0
 8005fee:	460b      	mov	r3, r1
 8005ff0:	4620      	mov	r0, r4
 8005ff2:	4629      	mov	r1, r5
 8005ff4:	f7fa fb00 	bl	80005f8 <__aeabi_dmul>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	460c      	mov	r4, r1
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	4621      	mov	r1, r4
 8006000:	f7fa fdf2 	bl	8000be8 <__aeabi_d2f>
 8006004:	4603      	mov	r3, r0
 8006006:	60fb      	str	r3, [r7, #12]
	/* adapted implementation which can possibly speed up calculation and should have the same results */
	// float h_grad = - R_0 * env->T_g / (GRAVITATION * env->p_g) * expf(logf(p / env->p_g) * (R_0 * env->T_grad / GRAVITATION - 1));
	return h_grad;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	ee07 3a90 	vmov	s15, r3
}
 800600e:	eeb0 0a67 	vmov.f32	s0, s15
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bdb0      	pop	{r4, r5, r7, pc}
 8006018:	bf4f4ef5 	.word	0xbf4f4ef5
 800601c:	2725aefd 	.word	0x2725aefd
 8006020:	c071f0ed 	.word	0xc071f0ed
 8006024:	51eb851f 	.word	0x51eb851f
 8006028:	40239eb8 	.word	0x40239eb8
 800602c:	00000000 	.word	0x00000000

08006030 <detect_flight_phase>:
#include "../Inc/flight_phase_detection.h"

void detect_flight_phase(timestamp_t t, flight_phase_detection_t *flight_phase_detection, state_est_data_t *state_est_data)
{   
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
    /* timestamp_t t needs to be the tick time in [ms] */

    /* determine state transition events */
    switch (flight_phase_detection->flight_phase) {
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	3b01      	subs	r3, #1
 8006042:	2b09      	cmp	r3, #9
 8006044:	f200 81d1 	bhi.w	80063ea <detect_flight_phase+0x3ba>
 8006048:	a201      	add	r2, pc, #4	; (adr r2, 8006050 <detect_flight_phase+0x20>)
 800604a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604e:	bf00      	nop
 8006050:	08006079 	.word	0x08006079
 8006054:	080063eb 	.word	0x080063eb
 8006058:	08006123 	.word	0x08006123
 800605c:	08006175 	.word	0x08006175
 8006060:	080063eb 	.word	0x080063eb
 8006064:	080063eb 	.word	0x080063eb
 8006068:	080061c7 	.word	0x080061c7
 800606c:	08006219 	.word	0x08006219
 8006070:	080062fd 	.word	0x080062fd
 8006074:	0800627b 	.word	0x0800627b
        case IDLE:
            if (((float)(state_est_data->acceleration_rocket[0])) / 1000 > FPD_LIFTOFF_ACC_THRESH) {
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	ee07 3a90 	vmov	s15, r3
 8006080:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006084:	eddf 6abf 	vldr	s13, [pc, #764]	; 8006384 <detect_flight_phase+0x354>
 8006088:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800608c:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8006090:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006098:	dd18      	ble.n	80060cc <detect_flight_phase+0x9c>
                flight_phase_detection->safety_counter[0] += 1;
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	3301      	adds	r3, #1
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	b25a      	sxtb	r2, r3
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->safety_counter[0] >= FPD_SAFETY_COUNTER_THRESH) {
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80060b2:	2b03      	cmp	r3, #3
 80060b4:	f340 819b 	ble.w	80063ee <detect_flight_phase+0x3be>
                    flight_phase_detection->flight_phase = THRUSTING;
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	2203      	movs	r2, #3
 80060bc:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->safety_counter[0] = 0;
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	2200      	movs	r2, #0
 80060c2:	721a      	strb	r2, [r3, #8]
                    flight_phase_detection->safety_counter[1] = 0;
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	2200      	movs	r2, #0
 80060c8:	725a      	strb	r2, [r3, #9]
                    flight_phase_detection->flight_phase = THRUSTING;
                    flight_phase_detection->safety_counter[0] = 0;
                    flight_phase_detection->safety_counter[1] = 0;
                }
            }
        break;
 80060ca:	e190      	b.n	80063ee <detect_flight_phase+0x3be>
            else if (((float)(state_est_data->position_world[2])) / 1000 > FPD_LIFTOFF_ALT_THRESH) {
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	ee07 3a90 	vmov	s15, r3
 80060d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80060d8:	eddf 6aaa 	vldr	s13, [pc, #680]	; 8006384 <detect_flight_phase+0x354>
 80060dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80060e0:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8006378 <detect_flight_phase+0x348>
 80060e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060ec:	dc00      	bgt.n	80060f0 <detect_flight_phase+0xc0>
        break;
 80060ee:	e17e      	b.n	80063ee <detect_flight_phase+0x3be>
                flight_phase_detection->safety_counter[1] += 1;
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	3301      	adds	r3, #1
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	b25a      	sxtb	r2, r3
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	725a      	strb	r2, [r3, #9]
                if (flight_phase_detection->safety_counter[1] >= FPD_SAFETY_COUNTER_THRESH) {
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8006108:	2b03      	cmp	r3, #3
 800610a:	f340 8170 	ble.w	80063ee <detect_flight_phase+0x3be>
                    flight_phase_detection->flight_phase = THRUSTING;
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	2203      	movs	r2, #3
 8006112:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->safety_counter[0] = 0;
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	2200      	movs	r2, #0
 8006118:	721a      	strb	r2, [r3, #8]
                    flight_phase_detection->safety_counter[1] = 0;
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	2200      	movs	r2, #0
 800611e:	725a      	strb	r2, [r3, #9]
        break;
 8006120:	e165      	b.n	80063ee <detect_flight_phase+0x3be>

        case THRUSTING:
            if (((float)(state_est_data->acceleration_rocket[0])) / 1000 < 0) {
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	699b      	ldr	r3, [r3, #24]
 8006126:	ee07 3a90 	vmov	s15, r3
 800612a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800612e:	eddf 6a95 	vldr	s13, [pc, #596]	; 8006384 <detect_flight_phase+0x354>
 8006132:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006136:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800613a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800613e:	d400      	bmi.n	8006142 <detect_flight_phase+0x112>
                    flight_phase_detection->flight_phase = COASTING;
                    flight_phase_detection->safety_counter[0] = 0;
                    flight_phase_detection->safety_counter[1] = 0;
                }
            }
        break;
 8006140:	e157      	b.n	80063f2 <detect_flight_phase+0x3c2>
                flight_phase_detection->safety_counter[0] += 1;
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006148:	b2db      	uxtb	r3, r3
 800614a:	3301      	adds	r3, #1
 800614c:	b2db      	uxtb	r3, r3
 800614e:	b25a      	sxtb	r2, r3
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->safety_counter[0] >= FPD_SAFETY_COUNTER_THRESH) {
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800615a:	2b03      	cmp	r3, #3
 800615c:	f340 8149 	ble.w	80063f2 <detect_flight_phase+0x3c2>
                    flight_phase_detection->flight_phase = COASTING;
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	2204      	movs	r2, #4
 8006164:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->safety_counter[0] = 0;
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	2200      	movs	r2, #0
 800616a:	721a      	strb	r2, [r3, #8]
                    flight_phase_detection->safety_counter[1] = 0;
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	2200      	movs	r2, #0
 8006170:	725a      	strb	r2, [r3, #9]
        break;
 8006172:	e13e      	b.n	80063f2 <detect_flight_phase+0x3c2>
                        flight_phase_detection->safety_counter[0] = 0;
                        flight_phase_detection->safety_counter[1] = 0;
                    }
                }
            #else
                if (((float)(state_est_data->velocity_world[2])) / 1000 < 0) {
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006178:	ee07 3a90 	vmov	s15, r3
 800617c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006180:	eddf 6a80 	vldr	s13, [pc, #512]	; 8006384 <detect_flight_phase+0x354>
 8006184:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006188:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800618c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006190:	d400      	bmi.n	8006194 <detect_flight_phase+0x164>
                        flight_phase_detection->safety_counter[0] = 0;
                        flight_phase_detection->safety_counter[1] = 0;
                    }
                }
            #endif
        break;
 8006192:	e130      	b.n	80063f6 <detect_flight_phase+0x3c6>
                    flight_phase_detection->safety_counter[0] += 1;
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800619a:	b2db      	uxtb	r3, r3
 800619c:	3301      	adds	r3, #1
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	b25a      	sxtb	r2, r3
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	721a      	strb	r2, [r3, #8]
                    if (flight_phase_detection->safety_counter[0] >= FPD_SAFETY_COUNTER_THRESH) {
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80061ac:	2b03      	cmp	r3, #3
 80061ae:	f340 8122 	ble.w	80063f6 <detect_flight_phase+0x3c6>
                        flight_phase_detection->flight_phase = DROGUE_DESCENT;
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	2208      	movs	r2, #8
 80061b6:	701a      	strb	r2, [r3, #0]
                        flight_phase_detection->safety_counter[0] = 0;
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	2200      	movs	r2, #0
 80061bc:	721a      	strb	r2, [r3, #8]
                        flight_phase_detection->safety_counter[1] = 0;
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	2200      	movs	r2, #0
 80061c2:	725a      	strb	r2, [r3, #9]
        break;
 80061c4:	e117      	b.n	80063f6 <detect_flight_phase+0x3c6>
                }
            #endif
        break;

        case APOGEE_APPROACH:
            if (((float)(state_est_data->velocity_world[2])) / 1000 < 0) {
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ca:	ee07 3a90 	vmov	s15, r3
 80061ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061d2:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8006384 <detect_flight_phase+0x354>
 80061d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80061da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80061de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061e2:	d400      	bmi.n	80061e6 <detect_flight_phase+0x1b6>
                    flight_phase_detection->flight_phase = DROGUE_DESCENT;
                    flight_phase_detection->safety_counter[0] = 0;
                    flight_phase_detection->safety_counter[1] = 0;
                }
            }
        break;
 80061e4:	e109      	b.n	80063fa <detect_flight_phase+0x3ca>
                flight_phase_detection->safety_counter[0] += 1;
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	3301      	adds	r3, #1
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	b25a      	sxtb	r2, r3
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->safety_counter[0] >= FPD_SAFETY_COUNTER_THRESH) {
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80061fe:	2b03      	cmp	r3, #3
 8006200:	f340 80fb 	ble.w	80063fa <detect_flight_phase+0x3ca>
                    flight_phase_detection->flight_phase = DROGUE_DESCENT;
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	2208      	movs	r2, #8
 8006208:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->safety_counter[0] = 0;
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	2200      	movs	r2, #0
 800620e:	721a      	strb	r2, [r3, #8]
                    flight_phase_detection->safety_counter[1] = 0;
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	2200      	movs	r2, #0
 8006214:	725a      	strb	r2, [r3, #9]
        break;
 8006216:	e0f0      	b.n	80063fa <detect_flight_phase+0x3ca>

        case DROGUE_DESCENT:
            if (((float)(state_est_data->altitude_raw) / 1000) < FPD_MAIN_DESCENT_ALT_THRESH && state_est_data->altitude_raw_active == true) {
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621c:	ee07 3a90 	vmov	s15, r3
 8006220:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006224:	eddf 6a57 	vldr	s13, [pc, #348]	; 8006384 <detect_flight_phase+0x354>
 8006228:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800622c:	ed9f 7a53 	vldr	s14, [pc, #332]	; 800637c <detect_flight_phase+0x34c>
 8006230:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006238:	d400      	bmi.n	800623c <detect_flight_phase+0x20c>
                    flight_phase_detection->safety_counter[0] = 0;
                    flight_phase_detection->safety_counter[1] = 0;
                }
            }
            #endif
        break;
 800623a:	e0e0      	b.n	80063fe <detect_flight_phase+0x3ce>
            if (((float)(state_est_data->altitude_raw) / 1000) < FPD_MAIN_DESCENT_ALT_THRESH && state_est_data->altitude_raw_active == true) {
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006242:	2b00      	cmp	r3, #0
 8006244:	f000 80db 	beq.w	80063fe <detect_flight_phase+0x3ce>
                flight_phase_detection->safety_counter[0] += 1;
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800624e:	b2db      	uxtb	r3, r3
 8006250:	3301      	adds	r3, #1
 8006252:	b2db      	uxtb	r3, r3
 8006254:	b25a      	sxtb	r2, r3
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->safety_counter[0] >= FPD_SAFETY_COUNTER_THRESH) {
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006260:	2b03      	cmp	r3, #3
 8006262:	f340 80cc 	ble.w	80063fe <detect_flight_phase+0x3ce>
                    flight_phase_detection->flight_phase = MAIN_DESCENT;
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	220a      	movs	r2, #10
 800626a:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->safety_counter[0] = 0;
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	2200      	movs	r2, #0
 8006270:	721a      	strb	r2, [r3, #8]
                    flight_phase_detection->safety_counter[1] = 0;
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	2200      	movs	r2, #0
 8006276:	725a      	strb	r2, [r3, #9]
        break;
 8006278:	e0c1      	b.n	80063fe <detect_flight_phase+0x3ce>
        
        case MAIN_DESCENT:
            /* we assume a touchdown event when the absolute value of the altitude is smaller than 400m 
               and the absolute velocity of the rocket is smaller than 2 m/s */
            if (fabs(((float)(state_est_data->velocity_rocket[0])) / 1000) < FPD_TOUCHDOWN_VEL_THRESH 
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	ee07 3a90 	vmov	s15, r3
 8006282:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006286:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8006384 <detect_flight_phase+0x354>
 800628a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800628e:	eef0 7ae7 	vabs.f32	s15, s15
 8006292:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006296:	eef4 7ac7 	vcmpe.f32	s15, s14
 800629a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800629e:	d400      	bmi.n	80062a2 <detect_flight_phase+0x272>
                    flight_phase_detection->safety_counter[0] = 0;
                    flight_phase_detection->safety_counter[1] = 0;
                }
            }
            #endif
        break;
 80062a0:	e0af      	b.n	8006402 <detect_flight_phase+0x3d2>
                && fabs(((float)(state_est_data->position_world[2])) / 1000) < FPD_TOUCHDOWN_ALT_THRESH) {
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	ee07 3a90 	vmov	s15, r3
 80062aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80062ae:	eddf 6a35 	vldr	s13, [pc, #212]	; 8006384 <detect_flight_phase+0x354>
 80062b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80062b6:	eef0 7ae7 	vabs.f32	s15, s15
 80062ba:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8006380 <detect_flight_phase+0x350>
 80062be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062c6:	d400      	bmi.n	80062ca <detect_flight_phase+0x29a>
        break;
 80062c8:	e09b      	b.n	8006402 <detect_flight_phase+0x3d2>
                flight_phase_detection->safety_counter[0] += 1;
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	3301      	adds	r3, #1
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	b25a      	sxtb	r2, r3
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->safety_counter[0] >= FPD_TOUCHDOWN_SAFETY_COUNTER_THRESH) {
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80062e2:	2b13      	cmp	r3, #19
 80062e4:	f340 808d 	ble.w	8006402 <detect_flight_phase+0x3d2>
                    flight_phase_detection->flight_phase = TOUCHDOWN;
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	220b      	movs	r2, #11
 80062ec:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->safety_counter[0] = 0;
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	2200      	movs	r2, #0
 80062f2:	721a      	strb	r2, [r3, #8]
                    flight_phase_detection->safety_counter[1] = 0;
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	2200      	movs	r2, #0
 80062f8:	725a      	strb	r2, [r3, #9]
        break;
 80062fa:	e082      	b.n	8006402 <detect_flight_phase+0x3d2>

        case BALLISTIC_DESCENT:
            /* we assume a touchdown event when the absolute value of the altitude is smaller than 400m 
               and the absolute velocity of the rocket is smaller than 2 m/s */
            if (fabs(((float)(state_est_data->velocity_rocket[0])) / 1000) < FPD_TOUCHDOWN_VEL_THRESH 
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	ee07 3a90 	vmov	s15, r3
 8006304:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006308:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8006384 <detect_flight_phase+0x354>
 800630c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006310:	eef0 7ae7 	vabs.f32	s15, s15
 8006314:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006318:	eef4 7ac7 	vcmpe.f32	s15, s14
 800631c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006320:	d536      	bpl.n	8006390 <detect_flight_phase+0x360>
                && fabs(((float)(state_est_data->position_world[2])) / 1000) < FPD_TOUCHDOWN_ALT_THRESH) {
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	ee07 3a90 	vmov	s15, r3
 800632a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800632e:	eddf 6a15 	vldr	s13, [pc, #84]	; 8006384 <detect_flight_phase+0x354>
 8006332:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006336:	eef0 7ae7 	vabs.f32	s15, s15
 800633a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8006380 <detect_flight_phase+0x350>
 800633e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006346:	d523      	bpl.n	8006390 <detect_flight_phase+0x360>
                flight_phase_detection->safety_counter[0] += 1;
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800634e:	b2db      	uxtb	r3, r3
 8006350:	3301      	adds	r3, #1
 8006352:	b2db      	uxtb	r3, r3
 8006354:	b25a      	sxtb	r2, r3
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->safety_counter[0] >= FPD_TOUCHDOWN_SAFETY_COUNTER_THRESH) {
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006360:	2b13      	cmp	r3, #19
 8006362:	dd41      	ble.n	80063e8 <detect_flight_phase+0x3b8>
                    flight_phase_detection->flight_phase = TOUCHDOWN;
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	220b      	movs	r2, #11
 8006368:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->safety_counter[0] = 0;
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	2200      	movs	r2, #0
 800636e:	721a      	strb	r2, [r3, #8]
                    flight_phase_detection->safety_counter[1] = 0;
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	2200      	movs	r2, #0
 8006374:	725a      	strb	r2, [r3, #9]
                if (flight_phase_detection->safety_counter[0] >= FPD_TOUCHDOWN_SAFETY_COUNTER_THRESH) {
 8006376:	e037      	b.n	80063e8 <detect_flight_phase+0x3b8>
 8006378:	43160000 	.word	0x43160000
 800637c:	43c80000 	.word	0x43c80000
 8006380:	43480000 	.word	0x43480000
 8006384:	447a0000 	.word	0x447a0000
 8006388:	42700000 	.word	0x42700000
 800638c:	49742400 	.word	0x49742400
                }
            }
            /* we assume a normal descent with parachute when the absolute velocity of the rocket in vertical direction is smaller than 40 m/s */
            else if (fabs(((float)(state_est_data->velocity_world[2])) / 1000) < FPD_BALLISTIC_VEL_THRESH_LOW) {
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006394:	ee07 3a90 	vmov	s15, r3
 8006398:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800639c:	ed5f 6a07 	vldr	s13, [pc, #-28]	; 8006384 <detect_flight_phase+0x354>
 80063a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80063a4:	eef0 7ae7 	vabs.f32	s15, s15
 80063a8:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 8006388 <detect_flight_phase+0x358>
 80063ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80063b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063b4:	d400      	bmi.n	80063b8 <detect_flight_phase+0x388>
                    flight_phase_detection->flight_phase = DROGUE_DESCENT;
                    flight_phase_detection->safety_counter[0] = 0;
                    flight_phase_detection->safety_counter[1] = 0;
                }
            }
        break;
 80063b6:	e026      	b.n	8006406 <detect_flight_phase+0x3d6>
                flight_phase_detection->safety_counter[1] += 1;
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	3301      	adds	r3, #1
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	b25a      	sxtb	r2, r3
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	725a      	strb	r2, [r3, #9]
                if (flight_phase_detection->safety_counter[1] >= FPD_SAFETY_COUNTER_THRESH) {
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80063d0:	2b03      	cmp	r3, #3
 80063d2:	dd18      	ble.n	8006406 <detect_flight_phase+0x3d6>
                    flight_phase_detection->flight_phase = DROGUE_DESCENT;
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	2208      	movs	r2, #8
 80063d8:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->safety_counter[0] = 0;
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	2200      	movs	r2, #0
 80063de:	721a      	strb	r2, [r3, #8]
                    flight_phase_detection->safety_counter[1] = 0;
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	2200      	movs	r2, #0
 80063e4:	725a      	strb	r2, [r3, #9]
        break;
 80063e6:	e00e      	b.n	8006406 <detect_flight_phase+0x3d6>
 80063e8:	e00d      	b.n	8006406 <detect_flight_phase+0x3d6>

        default:
        break;
 80063ea:	bf00      	nop
 80063ec:	e00c      	b.n	8006408 <detect_flight_phase+0x3d8>
        break;
 80063ee:	bf00      	nop
 80063f0:	e00a      	b.n	8006408 <detect_flight_phase+0x3d8>
        break;
 80063f2:	bf00      	nop
 80063f4:	e008      	b.n	8006408 <detect_flight_phase+0x3d8>
        break;
 80063f6:	bf00      	nop
 80063f8:	e006      	b.n	8006408 <detect_flight_phase+0x3d8>
        break;
 80063fa:	bf00      	nop
 80063fc:	e004      	b.n	8006408 <detect_flight_phase+0x3d8>
        break;
 80063fe:	bf00      	nop
 8006400:	e002      	b.n	8006408 <detect_flight_phase+0x3d8>
        break;
 8006402:	bf00      	nop
 8006404:	e000      	b.n	8006408 <detect_flight_phase+0x3d8>
        break;
 8006406:	bf00      	nop
    }

    flight_phase_detection->mach_number = (float)(state_est_data->mach_number) / 1000000;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800640c:	ee07 3a90 	vmov	s15, r3
 8006410:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006414:	ed5f 6a23 	vldr	s13, [pc, #-140]	; 800638c <detect_flight_phase+0x35c>
 8006418:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	edc3 7a01 	vstr	s15, [r3, #4]

    /* determine the mach regime */
    if (flight_phase_detection->mach_number >= 1.3) {
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	4618      	mov	r0, r3
 8006428:	f7fa f88e 	bl	8000548 <__aeabi_f2d>
 800642c:	a312      	add	r3, pc, #72	; (adr r3, 8006478 <detect_flight_phase+0x448>)
 800642e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006432:	f7fa fb67 	bl	8000b04 <__aeabi_dcmpge>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d003      	beq.n	8006444 <detect_flight_phase+0x414>
        flight_phase_detection->mach_regime = SUPERSONIC;
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	2203      	movs	r2, #3
 8006440:	705a      	strb	r2, [r3, #1]
    {
        flight_phase_detection->mach_regime = SUBSONIC;
    }
    
    
}
 8006442:	e013      	b.n	800646c <detect_flight_phase+0x43c>
    } else if (flight_phase_detection->mach_number >= 0.8)
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	4618      	mov	r0, r3
 800644a:	f7fa f87d 	bl	8000548 <__aeabi_f2d>
 800644e:	a30c      	add	r3, pc, #48	; (adr r3, 8006480 <detect_flight_phase+0x450>)
 8006450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006454:	f7fa fb56 	bl	8000b04 <__aeabi_dcmpge>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d003      	beq.n	8006466 <detect_flight_phase+0x436>
        flight_phase_detection->mach_regime = TRANSONIC;
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	2202      	movs	r2, #2
 8006462:	705a      	strb	r2, [r3, #1]
}
 8006464:	e002      	b.n	800646c <detect_flight_phase+0x43c>
        flight_phase_detection->mach_regime = SUBSONIC;
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	2201      	movs	r2, #1
 800646a:	705a      	strb	r2, [r3, #1]
}
 800646c:	bf00      	nop
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	f3af 8000 	nop.w
 8006478:	cccccccd 	.word	0xcccccccd
 800647c:	3ff4cccc 	.word	0x3ff4cccc
 8006480:	9999999a 	.word	0x9999999a
 8006484:	3fe99999 	.word	0x3fe99999

08006488 <reset_flight_phase_detection>:

void reset_flight_phase_detection(flight_phase_detection_t *flight_phase_detection){
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
    flight_phase_detection->flight_phase = IDLE;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	701a      	strb	r2, [r3, #0]
    flight_phase_detection->mach_regime = SUBSONIC;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2201      	movs	r2, #1
 800649a:	705a      	strb	r2, [r3, #1]
    flight_phase_detection->mach_number = 0.0;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f04f 0200 	mov.w	r2, #0
 80064a2:	605a      	str	r2, [r3, #4]
    flight_phase_detection->safety_counter[0] = 0;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	721a      	strb	r2, [r3, #8]
    flight_phase_detection->safety_counter[1] = 0;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	725a      	strb	r2, [r3, #9]
    flight_phase_detection->t_bias_reset_start = -1;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	22ff      	movs	r2, #255	; 0xff
 80064b4:	729a      	strb	r2, [r3, #10]
 80064b6:	bf00      	nop
 80064b8:	370c      	adds	r7, #12
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
	...

080064c4 <reset_kf_state>:
#include "../Inc/kf.h"

void reset_kf_state(kf_state_t *kf_state){
 80064c4:	b5b0      	push	{r4, r5, r7, lr}
 80064c6:	b0c8      	sub	sp, #288	; 0x120
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	1d3b      	adds	r3, r7, #4
 80064cc:	6018      	str	r0, [r3, #0]
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{2.0E-4}, {2.0E-2}, {0.0}};
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
    } else if (STATE_ESTIMATION_FREQUENCY == 40) { 
        float A_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-0, 2.5E-2, 3.125E-4}, {0, 1.0E-0, 2.5E-2}, {0.0, 0.0, 1.0E-0}};
 80064ce:	f107 030c 	add.w	r3, r7, #12
 80064d2:	4a4b      	ldr	r2, [pc, #300]	; (8006600 <reset_kf_state+0x13c>)
 80064d4:	461c      	mov	r4, r3
 80064d6:	4615      	mov	r5, r2
 80064d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80064da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80064de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064e0:	682b      	ldr	r3, [r5, #0]
 80064e2:	6023      	str	r3, [r4, #0]
        float B_init[NUMBER_STATES][NUMBER_INPUTS] = {{3.125E-4}, {2.5E-2}, {0.0}};
 80064e4:	4a47      	ldr	r2, [pc, #284]	; (8006604 <reset_kf_state+0x140>)
 80064e6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80064ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80064ec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{3.125E-4}, {2.5E-2}, {0.0}};
 80064f0:	4a44      	ldr	r2, [pc, #272]	; (8006604 <reset_kf_state+0x140>)
 80064f2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80064f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80064f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
 80064fc:	1d3b      	adds	r3, r7, #4
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f107 010c 	add.w	r1, r7, #12
 8006504:	2224      	movs	r2, #36	; 0x24
 8006506:	4618      	mov	r0, r3
 8006508:	f00a f842 	bl	8010590 <memcpy>
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
 800650c:	1d3b      	adds	r3, r7, #4
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	3348      	adds	r3, #72	; 0x48
 8006512:	f107 0184 	add.w	r1, r7, #132	; 0x84
 8006516:	220c      	movs	r2, #12
 8006518:	4618      	mov	r0, r3
 800651a:	f00a f839 	bl	8010590 <memcpy>
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
 800651e:	1d3b      	adds	r3, r7, #4
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	3354      	adds	r3, #84	; 0x54
 8006524:	f107 0178 	add.w	r1, r7, #120	; 0x78
 8006528:	220c      	movs	r2, #12
 800652a:	4618      	mov	r0, r3
 800652c:	f00a f830 	bl	8010590 <memcpy>

        discretize(STATE_ESTIMATION_FREQUENCY, NUMBER_STATES, NUMBER_INPUTS, A, B, kf_state->Ad, kf_state->Bd);
        discretize(STATE_ESTIMATION_FREQUENCY, NUMBER_STATES, NUMBER_INPUTS, A, G, kf_state->Ad, kf_state->Gd);
    }

	float x_est_init[NUMBER_STATES] = {0, 0, 0};
 8006530:	f04f 0300 	mov.w	r3, #0
 8006534:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006538:	f04f 0300 	mov.w	r3, #0
 800653c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006540:	f04f 0300 	mov.w	r3, #0
 8006544:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-9, 0, 0}, {0, 1.0E-12, 0}, {0, 0, 0}};
 8006548:	4b2f      	ldr	r3, [pc, #188]	; (8006608 <reset_kf_state+0x144>)
 800654a:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 800654e:	461d      	mov	r5, r3
 8006550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006554:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006556:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006558:	682b      	ldr	r3, [r5, #0]
 800655a:	6023      	str	r3, [r4, #0]

    memcpy(kf_state->x_est, x_est_init, sizeof(x_est_init));
 800655c:	1d3b      	adds	r3, r7, #4
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	33c4      	adds	r3, #196	; 0xc4
 8006562:	f507 718a 	add.w	r1, r7, #276	; 0x114
 8006566:	220c      	movs	r2, #12
 8006568:	4618      	mov	r0, r3
 800656a:	f00a f811 	bl	8010590 <memcpy>
    memcpy(kf_state->P_est, P_est_init, sizeof(P_est_init));
 800656e:	1d3b      	adds	r3, r7, #4
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	33d0      	adds	r3, #208	; 0xd0
 8006574:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 8006578:	2224      	movs	r2, #36	; 0x24
 800657a:	4618      	mov	r0, r3
 800657c:	f00a f808 	bl	8010590 <memcpy>

    memset(kf_state->Q, 0, NUMBER_PROCESS_NOISE*NUMBER_PROCESS_NOISE*sizeof(kf_state->Q[0][0]));
 8006580:	1d3b      	adds	r3, r7, #4
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	339c      	adds	r3, #156	; 0x9c
 8006586:	2204      	movs	r2, #4
 8006588:	2100      	movs	r1, #0
 800658a:	4618      	mov	r0, r3
 800658c:	f00a f80b 	bl	80105a6 <memset>
    memset(kf_state->R, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->R[0][0]));
 8006590:	1d3b      	adds	r3, r7, #4
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	33a0      	adds	r3, #160	; 0xa0
 8006596:	2210      	movs	r2, #16
 8006598:	2100      	movs	r1, #0
 800659a:	4618      	mov	r0, r3
 800659c:	f00a f803 	bl	80105a6 <memset>

    memset(kf_state->z, 0, NUMBER_MEASUREMENTS*sizeof(kf_state->z[0]));
 80065a0:	1d3b      	adds	r3, r7, #4
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80065a8:	2208      	movs	r2, #8
 80065aa:	2100      	movs	r1, #0
 80065ac:	4618      	mov	r0, r3
 80065ae:	f009 fffa 	bl	80105a6 <memset>
    memset(kf_state->z_active, false, NUMBER_MEASUREMENTS*sizeof(kf_state->z_active[0]));
 80065b2:	1d3b      	adds	r3, r7, #4
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 80065ba:	2202      	movs	r2, #2
 80065bc:	2100      	movs	r1, #0
 80065be:	4618      	mov	r0, r3
 80065c0:	f009 fff1 	bl	80105a6 <memset>
    kf_state->num_z_active = 0;
 80065c4:	1d3b      	adds	r3, r7, #4
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194

    transpose(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->Ad_T);
 80065ce:	1d3b      	adds	r3, r7, #4
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	1d3b      	adds	r3, r7, #4
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	3324      	adds	r3, #36	; 0x24
 80065d8:	2103      	movs	r1, #3
 80065da:	2003      	movs	r0, #3
 80065dc:	f7fe fddf 	bl	800519e <transpose>
    transpose(NUMBER_STATES, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Gd_T);
 80065e0:	1d3b      	adds	r3, r7, #4
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80065e8:	1d3b      	adds	r3, r7, #4
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	3360      	adds	r3, #96	; 0x60
 80065ee:	2101      	movs	r1, #1
 80065f0:	2003      	movs	r0, #3
 80065f2:	f7fe fdd4 	bl	800519e <transpose>
}
 80065f6:	bf00      	nop
 80065f8:	f507 7790 	add.w	r7, r7, #288	; 0x120
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bdb0      	pop	{r4, r5, r7, pc}
 8006600:	08015044 	.word	0x08015044
 8006604:	08015068 	.word	0x08015068
 8006608:	08015074 	.word	0x08015074

0800660c <kf_prediction>:

void kf_prediction(kf_state_t *kf_state){
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af04      	add	r7, sp, #16
 8006612:	6078      	str	r0, [r7, #4]
    /* Prediction Step */
    /* Calculation of x_priori */
    matvecprod(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->x_est, kf_state->x_priori, true);
 8006614:	6879      	ldr	r1, [r7, #4]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	33f4      	adds	r3, #244	; 0xf4
 8006620:	2201      	movs	r2, #1
 8006622:	9201      	str	r2, [sp, #4]
 8006624:	9300      	str	r3, [sp, #0]
 8006626:	4603      	mov	r3, r0
 8006628:	460a      	mov	r2, r1
 800662a:	2103      	movs	r1, #3
 800662c:	2003      	movs	r0, #3
 800662e:	f7fe ffe0 	bl	80055f2 <matvecprod>
    matvecprod(NUMBER_STATES, NUMBER_INPUTS, kf_state->Bd, kf_state->u, kf_state->x_priori, false);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	33f4      	adds	r3, #244	; 0xf4
 8006642:	2200      	movs	r2, #0
 8006644:	9201      	str	r2, [sp, #4]
 8006646:	9300      	str	r3, [sp, #0]
 8006648:	4603      	mov	r3, r0
 800664a:	460a      	mov	r2, r1
 800664c:	2101      	movs	r1, #1
 800664e:	2003      	movs	r0, #3
 8006650:	f7fe ffcf 	bl	80055f2 <matvecprod>

    /* Calculation of P_priori */
    /* P_priori = Ad * P_est_prior * Ad_T + Gd * Q * Gd_T */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->P_est, kf_state->Placeholder_Ad_mult_P_est, true);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	33d0      	adds	r3, #208	; 0xd0
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	f502 72cc 	add.w	r2, r2, #408	; 0x198
 8006660:	2101      	movs	r1, #1
 8006662:	9102      	str	r1, [sp, #8]
 8006664:	9201      	str	r2, [sp, #4]
 8006666:	9300      	str	r3, [sp, #0]
 8006668:	4603      	mov	r3, r0
 800666a:	2203      	movs	r2, #3
 800666c:	2103      	movs	r1, #3
 800666e:	2003      	movs	r0, #3
 8006670:	f7fe ff25 	bl	80054be <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Q, kf_state->Placeholder_Gd_mult_Q, true);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	339c      	adds	r3, #156	; 0x9c
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8006684:	2101      	movs	r1, #1
 8006686:	9102      	str	r1, [sp, #8]
 8006688:	9201      	str	r2, [sp, #4]
 800668a:	9300      	str	r3, [sp, #0]
 800668c:	4603      	mov	r3, r0
 800668e:	2201      	movs	r2, #1
 8006690:	2101      	movs	r1, #1
 8006692:	2003      	movs	r0, #3
 8006694:	f7fe ff13 	bl	80054be <matmul>

    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_Ad_mult_P_est, kf_state->Ad_T, kf_state->P_priori, true);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f503 70cc 	add.w	r0, r3, #408	; 0x198
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	3324      	adds	r3, #36	; 0x24
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80066a8:	2101      	movs	r1, #1
 80066aa:	9102      	str	r1, [sp, #8]
 80066ac:	9201      	str	r2, [sp, #4]
 80066ae:	9300      	str	r3, [sp, #0]
 80066b0:	4603      	mov	r3, r0
 80066b2:	2203      	movs	r2, #3
 80066b4:	2103      	movs	r1, #3
 80066b6:	2003      	movs	r0, #3
 80066b8:	f7fe ff01 	bl	80054be <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_STATES, kf_state->Placeholder_Gd_mult_Q, kf_state->Gd_T, kf_state->P_priori, false);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f503 70de 	add.w	r0, r3, #444	; 0x1bc
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	3360      	adds	r3, #96	; 0x60
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	f502 7280 	add.w	r2, r2, #256	; 0x100
 80066cc:	2100      	movs	r1, #0
 80066ce:	9102      	str	r1, [sp, #8]
 80066d0:	9201      	str	r2, [sp, #4]
 80066d2:	9300      	str	r3, [sp, #0]
 80066d4:	4603      	mov	r3, r0
 80066d6:	2203      	movs	r2, #3
 80066d8:	2101      	movs	r1, #1
 80066da:	2003      	movs	r0, #3
 80066dc:	f7fe feef 	bl	80054be <matmul>
}
 80066e0:	bf00      	nop
 80066e2:	3708      	adds	r7, #8
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <select_kf_observation_matrices>:

void select_kf_observation_matrices(kf_state_t *kf_state){
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
    memset(kf_state->H, 0, NUMBER_MEASUREMENTS*NUMBER_STATES*sizeof(kf_state->H[0][0]));
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	336c      	adds	r3, #108	; 0x6c
 80066f4:	2218      	movs	r2, #24
 80066f6:	2100      	movs	r1, #0
 80066f8:	4618      	mov	r0, r3
 80066fa:	f009 ff54 	bl	80105a6 <memset>

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 80066fe:	2300      	movs	r3, #0
 8006700:	60fb      	str	r3, [r7, #12]
 8006702:	e021      	b.n	8006748 <select_kf_observation_matrices+0x60>
        if (kf_state->z_active[i]) {
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	4413      	add	r3, r2
 800670a:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 800670e:	781b      	ldrb	r3, [r3, #0]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d00b      	beq.n	800672c <select_kf_observation_matrices+0x44>
             /* activate contribution of measurement in measurement matrix */
            kf_state->H[i][0] = 1;
 8006714:	6879      	ldr	r1, [r7, #4]
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	4613      	mov	r3, r2
 800671a:	005b      	lsls	r3, r3, #1
 800671c:	4413      	add	r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	440b      	add	r3, r1
 8006722:	336c      	adds	r3, #108	; 0x6c
 8006724:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006728:	601a      	str	r2, [r3, #0]
 800672a:	e00a      	b.n	8006742 <select_kf_observation_matrices+0x5a>
        } else {
            /* set contributed measurement covariance to zero */
            kf_state->R[i][i] = 0;
 800672c:	6879      	ldr	r1, [r7, #4]
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	4613      	mov	r3, r2
 8006732:	005b      	lsls	r3, r3, #1
 8006734:	4413      	add	r3, r2
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	440b      	add	r3, r1
 800673a:	33a0      	adds	r3, #160	; 0xa0
 800673c:	f04f 0200 	mov.w	r2, #0
 8006740:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	3301      	adds	r3, #1
 8006746:	60fb      	str	r3, [r7, #12]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2b01      	cmp	r3, #1
 800674c:	ddda      	ble.n	8006704 <select_kf_observation_matrices+0x1c>
        }
    }

    transpose(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->H_T);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	3384      	adds	r3, #132	; 0x84
 8006758:	2103      	movs	r1, #3
 800675a:	2002      	movs	r0, #2
 800675c:	f7fe fd1f 	bl	800519e <transpose>
}
 8006760:	bf00      	nop
 8006762:	3710      	adds	r7, #16
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <kf_update>:

void kf_update(kf_state_t *kf_state) {
 8006768:	b580      	push	{r7, lr}
 800676a:	b086      	sub	sp, #24
 800676c:	af04      	add	r7, sp, #16
 800676e:	6078      	str	r0, [r7, #4]
    /* Update Step */
    /* y = z - H * x_priori */
    matvecprod(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->x_priori, kf_state->y, true);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f103 00f4 	add.w	r0, r3, #244	; 0xf4
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006782:	2201      	movs	r2, #1
 8006784:	9201      	str	r2, [sp, #4]
 8006786:	9300      	str	r3, [sp, #0]
 8006788:	4603      	mov	r3, r0
 800678a:	460a      	mov	r2, r1
 800678c:	2103      	movs	r1, #3
 800678e:	2002      	movs	r0, #2
 8006790:	f7fe ff2f 	bl	80055f2 <matvecprod>
    vecsub(NUMBER_MEASUREMENTS, kf_state->z, kf_state->y, kf_state->y);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f503 71a4 	add.w	r1, r3, #328	; 0x148
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f503 72a8 	add.w	r2, r3, #336	; 0x150
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80067a6:	2002      	movs	r0, #2
 80067a8:	f7fe fd78 	bl	800529c <vecsub>

    /* S = H * P_priori * H_T + R */
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_STATES, kf_state->H, kf_state->P_priori, kf_state->Placeholder_H_mult_P_priori, true);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	f502 72e4 	add.w	r2, r2, #456	; 0x1c8
 80067be:	2101      	movs	r1, #1
 80067c0:	9102      	str	r1, [sp, #8]
 80067c2:	9201      	str	r2, [sp, #4]
 80067c4:	9300      	str	r3, [sp, #0]
 80067c6:	4603      	mov	r3, r0
 80067c8:	2203      	movs	r2, #3
 80067ca:	2103      	movs	r1, #3
 80067cc:	2002      	movs	r0, #2
 80067ce:	f7fe fe76 	bl	80054be <matmul>
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_H_mult_P_priori, kf_state->H_T, kf_state->S, true);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f503 70e4 	add.w	r0, r3, #456	; 0x1c8
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	3384      	adds	r3, #132	; 0x84
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	f502 72ac 	add.w	r2, r2, #344	; 0x158
 80067e2:	2101      	movs	r1, #1
 80067e4:	9102      	str	r1, [sp, #8]
 80067e6:	9201      	str	r2, [sp, #4]
 80067e8:	9300      	str	r3, [sp, #0]
 80067ea:	4603      	mov	r3, r0
 80067ec:	2202      	movs	r2, #2
 80067ee:	2103      	movs	r1, #3
 80067f0:	2002      	movs	r0, #2
 80067f2:	f7fe fe64 	bl	80054be <matmul>
    matadd(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->S, kf_state->R, kf_state->S);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f503 72ac 	add.w	r2, r3, #344	; 0x158
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006808:	9300      	str	r3, [sp, #0]
 800680a:	460b      	mov	r3, r1
 800680c:	2102      	movs	r1, #2
 800680e:	2002      	movs	r0, #2
 8006810:	f7fe fd6f 	bl	80052f2 <matadd>

    /* Calculate Pseudoinverse of covariance innovation */
    memset(kf_state->S_inv, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->S_inv[0][0]));
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800681a:	2210      	movs	r2, #16
 800681c:	2100      	movs	r1, #0
 800681e:	4618      	mov	r0, r3
 8006820:	f009 fec1 	bl	80105a6 <memset>
        matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_S_inv_3, kf_state->Placeholder_H_T_mult_R_inv, kf_state->S_inv, true);
        matsub(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->R_inv, kf_state->S_inv, kf_state->S_inv);
    } else {
        /* we use the regular inverse when the state dimension is larger than the number of measurements */
        /* the cholvesky inverse has a big O complexity of n^3 */
        cholesky_inverse(NUMBER_MEASUREMENTS, kf_state->S, kf_state->S_inv, LAMBDA);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f503 71ac 	add.w	r1, r3, #344	; 0x158
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006830:	ed9f 0a42 	vldr	s0, [pc, #264]	; 800693c <kf_update+0x1d4>
 8006834:	461a      	mov	r2, r3
 8006836:	2002      	movs	r0, #2
 8006838:	f7ff f8a6 	bl	8005988 <cholesky_inverse>
    }

    /* K  = P_priori * H_T * S_inv */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->P_priori, kf_state->H_T, kf_state->Placeholder_P_priori_mult_H_T, true);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	3384      	adds	r3, #132	; 0x84
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	f502 72ec 	add.w	r2, r2, #472	; 0x1d8
 800684c:	2101      	movs	r1, #1
 800684e:	9102      	str	r1, [sp, #8]
 8006850:	9201      	str	r2, [sp, #4]
 8006852:	9300      	str	r3, [sp, #0]
 8006854:	4603      	mov	r3, r0
 8006856:	2202      	movs	r2, #2
 8006858:	2103      	movs	r1, #3
 800685a:	2003      	movs	r0, #3
 800685c:	f7fe fe2f 	bl	80054be <matmul>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->Placeholder_P_priori_mult_H_T, kf_state->S_inv, kf_state->K, true);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	f502 72bc 	add.w	r2, r2, #376	; 0x178
 8006872:	2101      	movs	r1, #1
 8006874:	9102      	str	r1, [sp, #8]
 8006876:	9201      	str	r2, [sp, #4]
 8006878:	9300      	str	r3, [sp, #0]
 800687a:	4603      	mov	r3, r0
 800687c:	2202      	movs	r2, #2
 800687e:	2102      	movs	r1, #2
 8006880:	2003      	movs	r0, #3
 8006882:	f7fe fe1c 	bl	80054be <matmul>

    /* x_est = x_priori + K*y */
    matvecprod(NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->K, kf_state->y, kf_state->x_est, true);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f503 71bc 	add.w	r1, r3, #376	; 0x178
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f503 70a8 	add.w	r0, r3, #336	; 0x150
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	33c4      	adds	r3, #196	; 0xc4
 8006896:	2201      	movs	r2, #1
 8006898:	9201      	str	r2, [sp, #4]
 800689a:	9300      	str	r3, [sp, #0]
 800689c:	4603      	mov	r3, r0
 800689e:	460a      	mov	r2, r1
 80068a0:	2102      	movs	r1, #2
 80068a2:	2003      	movs	r0, #3
 80068a4:	f7fe fea5 	bl	80055f2 <matvecprod>
    vecadd(NUMBER_STATES, kf_state->x_priori, kf_state->x_est, kf_state->x_est);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f103 01f4 	add.w	r1, r3, #244	; 0xf4
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f103 02c4 	add.w	r2, r3, #196	; 0xc4
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	33c4      	adds	r3, #196	; 0xc4
 80068b8:	2003      	movs	r0, #3
 80068ba:	f7fe fcc4 	bl	8005246 <vecadd>


    /* P_est = (eye(NUMBER_STATES) - K*H)*P_priori */
    eye(NUMBER_STATES, kf_state->Placeholder_eye);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80068c4:	4619      	mov	r1, r3
 80068c6:	2003      	movs	r0, #3
 80068c8:	f7fe fc1d 	bl	8005106 <eye>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->K, kf_state->H, kf_state->Placeholder_K_mult_H, true);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f503 70bc 	add.w	r0, r3, #376	; 0x178
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	336c      	adds	r3, #108	; 0x6c
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	f502 720e 	add.w	r2, r2, #568	; 0x238
 80068dc:	2101      	movs	r1, #1
 80068de:	9102      	str	r1, [sp, #8]
 80068e0:	9201      	str	r2, [sp, #4]
 80068e2:	9300      	str	r3, [sp, #0]
 80068e4:	4603      	mov	r3, r0
 80068e6:	2203      	movs	r2, #3
 80068e8:	2102      	movs	r1, #2
 80068ea:	2003      	movs	r0, #3
 80068ec:	f7fe fde7 	bl	80054be <matmul>
    matsub(NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_eye, kf_state->Placeholder_K_mult_H, kf_state->Placeholder_P_est);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f503 7205 	add.w	r2, r3, #532	; 0x214
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f503 710e 	add.w	r1, r3, #568	; 0x238
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8006902:	9300      	str	r3, [sp, #0]
 8006904:	460b      	mov	r3, r1
 8006906:	2103      	movs	r1, #3
 8006908:	2003      	movs	r0, #3
 800690a:	f7fe fd65 	bl	80053d8 <matsub>
    matmul(NUMBER_STATES, NUMBER_STATES,  NUMBER_STATES, kf_state->Placeholder_P_est, kf_state->P_priori, kf_state->P_est, true);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f503 70f8 	add.w	r0, r3, #496	; 0x1f0
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	32d0      	adds	r2, #208	; 0xd0
 800691e:	2101      	movs	r1, #1
 8006920:	9102      	str	r1, [sp, #8]
 8006922:	9201      	str	r2, [sp, #4]
 8006924:	9300      	str	r3, [sp, #0]
 8006926:	4603      	mov	r3, r0
 8006928:	2203      	movs	r2, #3
 800692a:	2103      	movs	r1, #3
 800692c:	2003      	movs	r0, #3
 800692e:	f7fe fdc6 	bl	80054be <matmul>
 8006932:	bf00      	nop
 8006934:	3708      	adds	r7, #8
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	bf00      	nop
 800693c:	38d1b717 	.word	0x38d1b717

08006940 <reset_state_est_state>:
#include "../Inc/state_est.h"

void reset_state_est_state(float p_g, float T_g, state_est_state_t *state_est_state) {
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	ed87 0a03 	vstr	s0, [r7, #12]
 800694a:	edc7 0a02 	vstr	s1, [r7, #8]
 800694e:	6078      	str	r0, [r7, #4]
    reset_flight_phase_detection(&state_est_state->flight_phase_detection);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8006956:	4618      	mov	r0, r3
 8006958:	f7ff fd96 	bl	8006488 <reset_flight_phase_detection>

    memset(&state_est_state->state_est_data, 0, sizeof(state_est_state->state_est_data));
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	224c      	movs	r2, #76	; 0x4c
 8006960:	2100      	movs	r1, #0
 8006962:	4618      	mov	r0, r3
 8006964:	f009 fe1f 	bl	80105a6 <memset>
    memset(&state_est_state->state_est_meas, 0, sizeof(state_est_state->state_est_meas));
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	334c      	adds	r3, #76	; 0x4c
 800696c:	2254      	movs	r2, #84	; 0x54
 800696e:	2100      	movs	r1, #0
 8006970:	4618      	mov	r0, r3
 8006972:	f009 fe18 	bl	80105a6 <memset>
    memset(&state_est_state->state_est_meas_prior, 0, sizeof(state_est_state->state_est_meas_prior));
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	33a0      	adds	r3, #160	; 0xa0
 800697a:	2254      	movs	r2, #84	; 0x54
 800697c:	2100      	movs	r1, #0
 800697e:	4618      	mov	r0, r3
 8006980:	f009 fe11 	bl	80105a6 <memset>

    init_env(&state_est_state->env);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800698a:	4618      	mov	r0, r3
 800698c:	f7ff f97a 	bl	8005c84 <init_env>
    calibrate_env(&state_est_state->env, p_g, T_g);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8006996:	edd7 0a02 	vldr	s1, [r7, #8]
 800699a:	ed97 0a03 	vldr	s0, [r7, #12]
 800699e:	4618      	mov	r0, r3
 80069a0:	f7ff f986 	bl	8005cb0 <calibrate_env>
    update_env(&state_est_state->env, T_g);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80069aa:	ed97 0a02 	vldr	s0, [r7, #8]
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7ff f9c6 	bl	8005d40 <update_env>

	reset_kf_state(&state_est_state->kf_state);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	33f4      	adds	r3, #244	; 0xf4
 80069b8:	4618      	mov	r0, r3
 80069ba:	f7ff fd83 	bl	80064c4 <reset_kf_state>
    update_state_est_data(state_est_state);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f8dc 	bl	8006b7c <update_state_est_data>
    #if defined(USE_SENSOR_ELIMINATION_BY_EXTRAPOLATION) && USE_SENSOR_ELIMINATION_BY_EXTRAPOLATION == true
        memset(&state_est_state->baro_roll_mem, 0, sizeof(state_est_state->baro_roll_mem));
    #endif

    #if USE_STATE_EST_DESCENT == false
        memset(&state_est_state->altitude_mav_mem, 0, sizeof(state_est_state->altitude_mav_mem));
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069ca:	227c      	movs	r2, #124	; 0x7c
 80069cc:	2100      	movs	r1, #0
 80069ce:	4618      	mov	r0, r3
 80069d0:	f009 fde9 	bl	80105a6 <memset>
    #endif

	select_noise_models(state_est_state);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f000 fb37 	bl	8007048 <select_noise_models>
}
 80069da:	bf00      	nop
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
	...

080069e4 <state_est_step>:

void state_est_step(timestamp_t t, state_est_state_t *state_est_state, bool bool_detect_flight_phase) {
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b088      	sub	sp, #32
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	4613      	mov	r3, r2
 80069f0:	71fb      	strb	r3, [r7, #7]
    /* process measurements */
	process_measurements(t, state_est_state);
 80069f2:	68b9      	ldr	r1, [r7, #8]
 80069f4:	68f8      	ldr	r0, [r7, #12]
 80069f6:	f000 f927 	bl	8006c48 <process_measurements>

	/* select noise models (dependent on detected flight phase and updated temperature in environment) */
	select_noise_models(state_est_state);
 80069fa:	68b8      	ldr	r0, [r7, #8]
 80069fc:	f000 fb24 	bl	8007048 <select_noise_models>
	
	kf_prediction(&state_est_state->kf_state);
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	33f4      	adds	r3, #244	; 0xf4
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7ff fe01 	bl	800660c <kf_prediction>

	if (state_est_state->kf_state.num_z_active > 0) {
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	dd0a      	ble.n	8006a2a <state_est_step+0x46>
		select_kf_observation_matrices(&state_est_state->kf_state);
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	33f4      	adds	r3, #244	; 0xf4
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f7ff fe65 	bl	80066e8 <select_kf_observation_matrices>
		kf_update(&state_est_state->kf_state);
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	33f4      	adds	r3, #244	; 0xf4
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7ff fea0 	bl	8006768 <kf_update>
 8006a28:	e009      	b.n	8006a3e <state_est_step+0x5a>
	} else {
		memcpy(&state_est_state->kf_state.x_est, &state_est_state->kf_state.x_priori, sizeof(state_est_state->kf_state.x_priori));
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	f503 70dc 	add.w	r0, r3, #440	; 0x1b8
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006a36:	220c      	movs	r2, #12
 8006a38:	4619      	mov	r1, r3
 8006a3a:	f009 fda9 	bl	8010590 <memcpy>
	}

	update_state_est_data(state_est_state);
 8006a3e:	68b8      	ldr	r0, [r7, #8]
 8006a40:	f000 f89c 	bl	8006b7c <update_state_est_data>

    #if USE_STATE_EST_DESCENT == false
        /* during drogue and main descent, the 1D state estimation might work badly,
           thus we are computing the altitude and vertical velocity solely from the barometric data */
        
    	if ((state_est_state->flight_phase_detection.flight_phase == DROGUE_DESCENT || 
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006a4a:	2b08      	cmp	r3, #8
 8006a4c:	d004      	beq.n	8006a58 <state_est_step+0x74>
            state_est_state->flight_phase_detection.flight_phase == MAIN_DESCENT) && 
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
    	if ((state_est_state->flight_phase_detection.flight_phase == DROGUE_DESCENT || 
 8006a54:	2b0a      	cmp	r3, #10
 8006a56:	d175      	bne.n	8006b44 <state_est_step+0x160>
            state_est_state->state_est_data.altitude_raw_active == true){
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
            state_est_state->flight_phase_detection.flight_phase == MAIN_DESCENT) && 
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d070      	beq.n	8006b44 <state_est_step+0x160>
        
            int alt_mav_mem_length = state_est_state->altitude_mav_mem.memory_length;
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8006a68:	61bb      	str	r3, [r7, #24]
            float alt_mav_delta = state_est_state->altitude_mav_mem.avg_values[0] - state_est_state->altitude_mav_mem.avg_values[alt_mav_mem_length-1];
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	f203 4354 	addw	r3, r3, #1108	; 0x454
 8006a70:	ed93 7a00 	vldr	s14, [r3]
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	3b01      	subs	r3, #1
 8006a78:	68ba      	ldr	r2, [r7, #8]
 8006a7a:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	4413      	add	r3, r2
 8006a82:	3304      	adds	r3, #4
 8006a84:	edd3 7a00 	vldr	s15, [r3]
 8006a88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a8c:	edc7 7a05 	vstr	s15, [r7, #20]
            float alt_mav_dt = (float)(state_est_state->altitude_mav_mem.timestamps[0] - state_est_state->altitude_mav_mem.timestamps[alt_mav_mem_length-1]) / 1000;
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	3b01      	subs	r3, #1
 8006a9a:	68b9      	ldr	r1, [r7, #8]
 8006a9c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	440b      	add	r3, r1
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	ee07 3a90 	vmov	s15, r3
 8006aac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006ab0:	eddf 6a30 	vldr	s13, [pc, #192]	; 8006b74 <state_est_step+0x190>
 8006ab4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006ab8:	edc7 7a04 	vstr	s15, [r7, #16]

            float velocity = 0;
 8006abc:	f04f 0300 	mov.w	r3, #0
 8006ac0:	61fb      	str	r3, [r7, #28]
            if (alt_mav_mem_length > 1){
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	dd07      	ble.n	8006ad8 <state_est_step+0xf4>
                velocity = alt_mav_delta / alt_mav_dt;
 8006ac8:	edd7 6a05 	vldr	s13, [r7, #20]
 8006acc:	ed97 7a04 	vldr	s14, [r7, #16]
 8006ad0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ad4:	edc7 7a07 	vstr	s15, [r7, #28]
            }

			state_est_state->state_est_data.position_world[2] = state_est_state->state_est_data.altitude_raw;
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	609a      	str	r2, [r3, #8]
			state_est_state->state_est_data.velocity_rocket[0] = (int32_t)(velocity * 1000);
 8006ae0:	edd7 7a07 	vldr	s15, [r7, #28]
 8006ae4:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8006b74 <state_est_step+0x190>
 8006ae8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006aec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006af0:	ee17 2a90 	vmov	r2, s15
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	60da      	str	r2, [r3, #12]
			state_est_state->state_est_data.velocity_world[2] = (int32_t)(velocity * 1000);
 8006af8:	edd7 7a07 	vldr	s15, [r7, #28]
 8006afc:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8006b74 <state_est_step+0x190>
 8006b00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006b04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b08:	ee17 2a90 	vmov	r2, s15
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	62da      	str	r2, [r3, #44]	; 0x2c
			state_est_state->state_est_data.acceleration_rocket[0] = 0;
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	2200      	movs	r2, #0
 8006b14:	619a      	str	r2, [r3, #24]
			state_est_state->state_est_data.acceleration_world[2] = 0;
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	639a      	str	r2, [r3, #56]	; 0x38
			state_est_state->state_est_data.mach_number = (int32_t)(mach_number(&state_est_state->env, velocity) * 1000000);
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8006b22:	ed97 0a07 	vldr	s0, [r7, #28]
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7ff f940 	bl	8005dac <mach_number>
 8006b2c:	eeb0 7a40 	vmov.f32	s14, s0
 8006b30:	eddf 7a11 	vldr	s15, [pc, #68]	; 8006b78 <state_est_step+0x194>
 8006b34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b3c:	ee17 2a90 	vmov	r2, s15
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	63da      	str	r2, [r3, #60]	; 0x3c
    	}
    #endif

    if (bool_detect_flight_phase){
 8006b44:	79fb      	ldrb	r3, [r7, #7]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d007      	beq.n	8006b5a <state_est_step+0x176>
        detect_flight_phase(t, &state_est_state->flight_phase_detection, &state_est_state->state_est_data);
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	f503 737d 	add.w	r3, r3, #1012	; 0x3f4
 8006b50:	68ba      	ldr	r2, [r7, #8]
 8006b52:	4619      	mov	r1, r3
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f7ff fa6b 	bl	8006030 <detect_flight_phase>
    }

	/* set measurement prior to measurements from completed state estimation step */
	memcpy(&state_est_state->state_est_meas_prior, &state_est_state->state_est_meas, sizeof(state_est_state->state_est_meas));
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	f103 00a0 	add.w	r0, r3, #160	; 0xa0
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	334c      	adds	r3, #76	; 0x4c
 8006b64:	2254      	movs	r2, #84	; 0x54
 8006b66:	4619      	mov	r1, r3
 8006b68:	f009 fd12 	bl	8010590 <memcpy>
}
 8006b6c:	bf00      	nop
 8006b6e:	3720      	adds	r7, #32
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	447a0000 	.word	0x447a0000
 8006b78:	49742400 	.word	0x49742400

08006b7c <update_state_est_data>:

void update_state_est_data(state_est_state_t *state_est_state) {
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
    state_est_state->state_est_data.position_world[2] = (int32_t)(state_est_state->kf_state.x_est[0] * 1000);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	edd3 7a6e 	vldr	s15, [r3, #440]	; 0x1b8
 8006b8a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8006c3c <update_state_est_data+0xc0>
 8006b8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006b92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b96:	ee17 2a90 	vmov	r2, s15
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	609a      	str	r2, [r3, #8]
    state_est_state->state_est_data.velocity_rocket[0] = (int32_t)(state_est_state->kf_state.x_est[1] * 1000);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	edd3 7a6f 	vldr	s15, [r3, #444]	; 0x1bc
 8006ba4:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8006c3c <update_state_est_data+0xc0>
 8006ba8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006bac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006bb0:	ee17 2a90 	vmov	r2, s15
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	60da      	str	r2, [r3, #12]
    state_est_state->state_est_data.velocity_world[2] = (int32_t)(state_est_state->kf_state.x_est[1] * 1000);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	edd3 7a6f 	vldr	s15, [r3, #444]	; 0x1bc
 8006bbe:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8006c3c <update_state_est_data+0xc0>
 8006bc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006bc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006bca:	ee17 2a90 	vmov	r2, s15
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	62da      	str	r2, [r3, #44]	; 0x2c
    state_est_state->state_est_data.acceleration_rocket[0] = (int32_t)(state_est_state->kf_state.u[0] * 1000);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	edd3 7a6d 	vldr	s15, [r3, #436]	; 0x1b4
 8006bd8:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006c3c <update_state_est_data+0xc0>
 8006bdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006be0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006be4:	ee17 2a90 	vmov	r2, s15
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	619a      	str	r2, [r3, #24]
    state_est_state->state_est_data.acceleration_world[2] = (int32_t)(state_est_state->kf_state.u[0] * 1000);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	edd3 7a6d 	vldr	s15, [r3, #436]	; 0x1b4
 8006bf2:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8006c3c <update_state_est_data+0xc0>
 8006bf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006bfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006bfe:	ee17 2a90 	vmov	r2, s15
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	639a      	str	r2, [r3, #56]	; 0x38
    state_est_state->state_est_data.mach_number = (int32_t)(mach_number(&state_est_state->env, state_est_state->kf_state.x_est[1]) * 1000000);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f503 7278 	add.w	r2, r3, #992	; 0x3e0
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	edd3 7a6f 	vldr	s15, [r3, #444]	; 0x1bc
 8006c12:	eeb0 0a67 	vmov.f32	s0, s15
 8006c16:	4610      	mov	r0, r2
 8006c18:	f7ff f8c8 	bl	8005dac <mach_number>
 8006c1c:	eeb0 7a40 	vmov.f32	s14, s0
 8006c20:	eddf 7a07 	vldr	s15, [pc, #28]	; 8006c40 <update_state_est_data+0xc4>
 8006c24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c2c:	ee17 2a90 	vmov	r2, s15
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006c34:	bf00      	nop
 8006c36:	3708      	adds	r7, #8
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	447a0000 	.word	0x447a0000
 8006c40:	49742400 	.word	0x49742400
 8006c44:	00000000 	.word	0x00000000

08006c48 <process_measurements>:

void process_measurements(timestamp_t t, state_est_state_t *state_est_state) {
 8006c48:	b590      	push	{r4, r7, lr}
 8006c4a:	b099      	sub	sp, #100	; 0x64
 8006c4c:	af02      	add	r7, sp, #8
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
    bool temp_meas_active[NUM_BARO];
    float acc_x_meas[NUM_IMU];
    bool acc_x_meas_active[NUM_IMU];

    /* barometer */
    for (int i = 0; i < NUM_BARO; i++){
 8006c52:	2300      	movs	r3, #0
 8006c54:	657b      	str	r3, [r7, #84]	; 0x54
 8006c56:	e06f      	b.n	8006d38 <process_measurements+0xf0>
        if (state_est_state->state_est_meas.baro_data[i].ts > state_est_state->state_est_meas_prior.baro_data[i].ts) {
 8006c58:	6839      	ldr	r1, [r7, #0]
 8006c5a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	005b      	lsls	r3, r3, #1
 8006c60:	4413      	add	r3, r2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	440b      	add	r3, r1
 8006c66:	3354      	adds	r3, #84	; 0x54
 8006c68:	6819      	ldr	r1, [r3, #0]
 8006c6a:	6838      	ldr	r0, [r7, #0]
 8006c6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006c6e:	4613      	mov	r3, r2
 8006c70:	005b      	lsls	r3, r3, #1
 8006c72:	4413      	add	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4403      	add	r3, r0
 8006c78:	33a8      	adds	r3, #168	; 0xa8
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4299      	cmp	r1, r3
 8006c7e:	d939      	bls.n	8006cf4 <process_measurements+0xac>
            state_est_state->kf_state.z[i] = state_est_state->state_est_meas.baro_data[i].pressure;
 8006c80:	6839      	ldr	r1, [r7, #0]
 8006c82:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006c84:	4613      	mov	r3, r2
 8006c86:	005b      	lsls	r3, r3, #1
 8006c88:	4413      	add	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	440b      	add	r3, r1
 8006c8e:	334c      	adds	r3, #76	; 0x4c
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	6839      	ldr	r1, [r7, #0]
 8006c94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c96:	338e      	adds	r3, #142	; 0x8e
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	440b      	add	r3, r1
 8006c9c:	3304      	adds	r3, #4
 8006c9e:	601a      	str	r2, [r3, #0]
            state_est_state->kf_state.z_active[i] = true;
 8006ca0:	683a      	ldr	r2, [r7, #0]
 8006ca2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ca4:	4413      	add	r3, r2
 8006ca6:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8006caa:	2201      	movs	r2, #1
 8006cac:	701a      	strb	r2, [r3, #0]

            temp_meas[i] = state_est_state->state_est_meas.baro_data[i].temperature;
 8006cae:	6839      	ldr	r1, [r7, #0]
 8006cb0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	005b      	lsls	r3, r3, #1
 8006cb6:	4413      	add	r3, r2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	440b      	add	r3, r1
 8006cbc:	3350      	adds	r3, #80	; 0x50
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006cc8:	440b      	add	r3, r1
 8006cca:	3b3c      	subs	r3, #60	; 0x3c
 8006ccc:	601a      	str	r2, [r3, #0]
            temp_meas_active[i] = true;
 8006cce:	f107 0218 	add.w	r2, r7, #24
 8006cd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cd4:	4413      	add	r3, r2
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	701a      	strb	r2, [r3, #0]

            /* deactivate all barometer measurements if we are transsonic or supersonic */
            if (state_est_state->flight_phase_detection.mach_regime != SUBSONIC) {
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	f893 33f5 	ldrb.w	r3, [r3, #1013]	; 0x3f5
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d026      	beq.n	8006d32 <process_measurements+0xea>
                state_est_state->kf_state.z_active[i] = false;
 8006ce4:	683a      	ldr	r2, [r7, #0]
 8006ce6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ce8:	4413      	add	r3, r2
 8006cea:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8006cee:	2200      	movs	r2, #0
 8006cf0:	701a      	strb	r2, [r3, #0]
 8006cf2:	e01e      	b.n	8006d32 <process_measurements+0xea>
                        state_est_state->state_est_meas.airbrake_extension > BIAS_RESET_AIRBRAKE_EXTENSION_THRESH)) {
                    state_est_state->kf_state.z_active[i] = false;
                }
            #endif
        } else {
            state_est_state->kf_state.z[i] = 0;
 8006cf4:	683a      	ldr	r2, [r7, #0]
 8006cf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cf8:	338e      	adds	r3, #142	; 0x8e
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	4413      	add	r3, r2
 8006cfe:	3304      	adds	r3, #4
 8006d00:	f04f 0200 	mov.w	r2, #0
 8006d04:	601a      	str	r2, [r3, #0]
            state_est_state->kf_state.z_active[i] = false;
 8006d06:	683a      	ldr	r2, [r7, #0]
 8006d08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d0a:	4413      	add	r3, r2
 8006d0c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8006d10:	2200      	movs	r2, #0
 8006d12:	701a      	strb	r2, [r3, #0]

            temp_meas[i] = 0;
 8006d14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006d1c:	4413      	add	r3, r2
 8006d1e:	3b3c      	subs	r3, #60	; 0x3c
 8006d20:	f04f 0200 	mov.w	r2, #0
 8006d24:	601a      	str	r2, [r3, #0]
            temp_meas_active[i] = false;
 8006d26:	f107 0218 	add.w	r2, r7, #24
 8006d2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d2c:	4413      	add	r3, r2
 8006d2e:	2200      	movs	r2, #0
 8006d30:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NUM_BARO; i++){
 8006d32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d34:	3301      	adds	r3, #1
 8006d36:	657b      	str	r3, [r7, #84]	; 0x54
 8006d38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	dd8c      	ble.n	8006c58 <process_measurements+0x10>
        }
    }

    /* IMU */
    for (int i = 0; i < NUM_IMU; i++){
 8006d3e:	2300      	movs	r3, #0
 8006d40:	653b      	str	r3, [r7, #80]	; 0x50
 8006d42:	e03c      	b.n	8006dbe <process_measurements+0x176>
        if (state_est_state->state_est_meas.imu_data[i].ts > state_est_state->state_est_meas_prior.imu_data[i].ts) {
 8006d44:	6839      	ldr	r1, [r7, #0]
 8006d46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d48:	4613      	mov	r3, r2
 8006d4a:	00db      	lsls	r3, r3, #3
 8006d4c:	1a9b      	subs	r3, r3, r2
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	440b      	add	r3, r1
 8006d52:	337c      	adds	r3, #124	; 0x7c
 8006d54:	6819      	ldr	r1, [r3, #0]
 8006d56:	6838      	ldr	r0, [r7, #0]
 8006d58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	00db      	lsls	r3, r3, #3
 8006d5e:	1a9b      	subs	r3, r3, r2
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	4403      	add	r3, r0
 8006d64:	33d0      	adds	r3, #208	; 0xd0
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4299      	cmp	r1, r3
 8006d6a:	d916      	bls.n	8006d9a <process_measurements+0x152>
            acc_x_meas[i] = state_est_state->state_est_meas.imu_data[i].acc_x;
 8006d6c:	6839      	ldr	r1, [r7, #0]
 8006d6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006d70:	4613      	mov	r3, r2
 8006d72:	00db      	lsls	r3, r3, #3
 8006d74:	1a9b      	subs	r3, r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	440b      	add	r3, r1
 8006d7a:	3370      	adds	r3, #112	; 0x70
 8006d7c:	681a      	ldr	r2, [r3, #0]
 8006d7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006d86:	440b      	add	r3, r1
 8006d88:	3b48      	subs	r3, #72	; 0x48
 8006d8a:	601a      	str	r2, [r3, #0]
            acc_x_meas_active[i] = true;
 8006d8c:	f107 020c 	add.w	r2, r7, #12
 8006d90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d92:	4413      	add	r3, r2
 8006d94:	2201      	movs	r2, #1
 8006d96:	701a      	strb	r2, [r3, #0]
 8006d98:	e00e      	b.n	8006db8 <process_measurements+0x170>
        } else {
            acc_x_meas[i] = 0;
 8006d9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006da2:	4413      	add	r3, r2
 8006da4:	3b48      	subs	r3, #72	; 0x48
 8006da6:	f04f 0200 	mov.w	r2, #0
 8006daa:	601a      	str	r2, [r3, #0]
            acc_x_meas_active[i] = false;
 8006dac:	f107 020c 	add.w	r2, r7, #12
 8006db0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006db2:	4413      	add	r3, r2
 8006db4:	2200      	movs	r2, #0
 8006db6:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NUM_IMU; i++){
 8006db8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dba:	3301      	adds	r3, #1
 8006dbc:	653b      	str	r3, [r7, #80]	; 0x50
 8006dbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	ddbf      	ble.n	8006d44 <process_measurements+0xfc>
        if (state_est_state->baro_roll_mem.memory_length < MAX_LENGTH_ROLLING_MEMORY) {
            sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, state_est_state->kf_state.z, state_est_state->kf_state.z_active);
        }
        sensor_elimination_by_extrapolation(t, NUMBER_MEASUREMENTS, state_est_state->kf_state.z, state_est_state->kf_state.z_active, &state_est_state->baro_roll_mem);
    #else
        sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, state_est_state->kf_state.z, state_est_state->kf_state.z_active);
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	f503 710f 	add.w	r1, r3, #572	; 0x23c
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	2002      	movs	r0, #2
 8006dd4:	f000 fa00 	bl	80071d8 <sensor_elimination_by_stdev>
    #endif

    /* eliminate temperature measurements */
    sensor_elimination_by_stdev(NUM_BARO, temp_meas, temp_meas_active);
 8006dd8:	f107 0218 	add.w	r2, r7, #24
 8006ddc:	f107 031c 	add.w	r3, r7, #28
 8006de0:	4619      	mov	r1, r3
 8006de2:	2002      	movs	r0, #2
 8006de4:	f000 f9f8 	bl	80071d8 <sensor_elimination_by_stdev>

    /* eliminate accelerometer in rocket x-dir measurements */
    sensor_elimination_by_stdev(NUM_IMU, acc_x_meas, acc_x_meas_active);
 8006de8:	f107 020c 	add.w	r2, r7, #12
 8006dec:	f107 0310 	add.w	r3, r7, #16
 8006df0:	4619      	mov	r1, r3
 8006df2:	2002      	movs	r0, #2
 8006df4:	f000 f9f0 	bl	80071d8 <sensor_elimination_by_stdev>

    /* update num_z_active */
    state_est_state->kf_state.num_z_active = 0;
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
    /* take the average of the active accelerometers in rocket-x dir as the state estimation input */
    float u = 0;
 8006e00:	f04f 0300 	mov.w	r3, #0
 8006e04:	64fb      	str	r3, [r7, #76]	; 0x4c
    int num_acc_x_meas_active = 0;
 8006e06:	2300      	movs	r3, #0
 8006e08:	64bb      	str	r3, [r7, #72]	; 0x48

    /* take the average of the temperature measurement  */
    float temp_meas_mean = 0;
 8006e0a:	f04f 0300 	mov.w	r3, #0
 8006e0e:	647b      	str	r3, [r7, #68]	; 0x44
    int num_temp_meas_active = 0;
 8006e10:	2300      	movs	r3, #0
 8006e12:	643b      	str	r3, [r7, #64]	; 0x40
    
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8006e14:	2300      	movs	r3, #0
 8006e16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e18:	e011      	b.n	8006e3e <process_measurements+0x1f6>
        if (state_est_state->kf_state.z_active[i]){
 8006e1a:	683a      	ldr	r2, [r7, #0]
 8006e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e1e:	4413      	add	r3, r2
 8006e20:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d006      	beq.n	8006e38 <process_measurements+0x1f0>
            state_est_state->kf_state.num_z_active += 1;
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8006e30:	1c5a      	adds	r2, r3, #1
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8006e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	ddea      	ble.n	8006e1a <process_measurements+0x1d2>
        }
    }
    for (int i = 0; i < NUM_BARO; i++){
 8006e44:	2300      	movs	r3, #0
 8006e46:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e48:	e020      	b.n	8006e8c <process_measurements+0x244>
        if (temp_meas[i]) {
 8006e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006e52:	4413      	add	r3, r2
 8006e54:	3b3c      	subs	r3, #60	; 0x3c
 8006e56:	edd3 7a00 	vldr	s15, [r3]
 8006e5a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e62:	d010      	beq.n	8006e86 <process_measurements+0x23e>
            temp_meas_mean += temp_meas[i];
 8006e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006e6c:	4413      	add	r3, r2
 8006e6e:	3b3c      	subs	r3, #60	; 0x3c
 8006e70:	edd3 7a00 	vldr	s15, [r3]
 8006e74:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8006e78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e7c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
            num_temp_meas_active += 1;
 8006e80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e82:	3301      	adds	r3, #1
 8006e84:	643b      	str	r3, [r7, #64]	; 0x40
    for (int i = 0; i < NUM_BARO; i++){
 8006e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e88:	3301      	adds	r3, #1
 8006e8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	dddb      	ble.n	8006e4a <process_measurements+0x202>
        }
    }
    for (int i = 0; i < NUM_IMU; i++){
 8006e92:	2300      	movs	r3, #0
 8006e94:	637b      	str	r3, [r7, #52]	; 0x34
 8006e96:	e01a      	b.n	8006ece <process_measurements+0x286>
        if (acc_x_meas_active[i]) {
 8006e98:	f107 020c 	add.w	r2, r7, #12
 8006e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e9e:	4413      	add	r3, r2
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d010      	beq.n	8006ec8 <process_measurements+0x280>
            u += acc_x_meas[i];
 8006ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8006eae:	4413      	add	r3, r2
 8006eb0:	3b48      	subs	r3, #72	; 0x48
 8006eb2:	edd3 7a00 	vldr	s15, [r3]
 8006eb6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8006eba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ebe:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
            num_acc_x_meas_active += 1;
 8006ec2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	64bb      	str	r3, [r7, #72]	; 0x48
    for (int i = 0; i < NUM_IMU; i++){
 8006ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eca:	3301      	adds	r3, #1
 8006ecc:	637b      	str	r3, [r7, #52]	; 0x34
 8006ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	dde1      	ble.n	8006e98 <process_measurements+0x250>
        }
    }

    pressure2altitudeAGL(&state_est_state->env, NUMBER_MEASUREMENTS, state_est_state->kf_state.z, state_est_state->kf_state.z_active, state_est_state->kf_state.z);
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	f503 7078 	add.w	r0, r3, #992	; 0x3e0
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	f503 720f 	add.w	r2, r3, #572	; 0x23c
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	f503 7121 	add.w	r1, r3, #644	; 0x284
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	f503 730f 	add.w	r3, r3, #572	; 0x23c
 8006eec:	9300      	str	r3, [sp, #0]
 8006eee:	460b      	mov	r3, r1
 8006ef0:	2102      	movs	r1, #2
 8006ef2:	f7fe ff79 	bl	8005de8 <pressure2altitudeAGL>

    /* compute the mean raw altitude from all barometer measurements */
    int num_alt_meas_active = 0;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	633b      	str	r3, [r7, #48]	; 0x30
    float alt_mean = 0;
 8006efa:	f04f 0300 	mov.w	r3, #0
 8006efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8006f00:	2300      	movs	r3, #0
 8006f02:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f04:	e01b      	b.n	8006f3e <process_measurements+0x2f6>
        if (state_est_state->kf_state.z_active[i]){
 8006f06:	683a      	ldr	r2, [r7, #0]
 8006f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d010      	beq.n	8006f38 <process_measurements+0x2f0>
            num_alt_meas_active += 1;
 8006f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f18:	3301      	adds	r3, #1
 8006f1a:	633b      	str	r3, [r7, #48]	; 0x30
            alt_mean += state_est_state->kf_state.z[i];
 8006f1c:	683a      	ldr	r2, [r7, #0]
 8006f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f20:	338e      	adds	r3, #142	; 0x8e
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	4413      	add	r3, r2
 8006f26:	3304      	adds	r3, #4
 8006f28:	edd3 7a00 	vldr	s15, [r3]
 8006f2c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8006f30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f34:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8006f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	dde0      	ble.n	8006f06 <process_measurements+0x2be>
        }
    }
    if (num_alt_meas_active > 0) {
 8006f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	dd1b      	ble.n	8006f82 <process_measurements+0x33a>
        alt_mean /= num_alt_meas_active;
 8006f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4c:	ee07 3a90 	vmov	s15, r3
 8006f50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f54:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8006f58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f5c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        state_est_state->state_est_data.altitude_raw = (int32_t)(alt_mean * 1000);
 8006f60:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8006f64:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8007040 <process_measurements+0x3f8>
 8006f68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f70:	ee17 2a90 	vmov	r2, s15
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	641a      	str	r2, [r3, #64]	; 0x40
        state_est_state->state_est_data.altitude_raw_active = true;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f80:	e003      	b.n	8006f8a <process_measurements+0x342>
    } else {  
        state_est_state->state_est_data.altitude_raw_active = false;
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }

    #if USE_STATE_EST_DESCENT == false
        /* during drogue and main descent, the 1D state estimation might work badly,
           thus we are computing the altitude and vertical velocity solely from the barometric data */
    	float altitude_avg = update_mav(&state_est_state->altitude_mav_mem, t, 
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	f503 6080 	add.w	r0, r3, #1024	; 0x400
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f96:	461a      	mov	r2, r3
 8006f98:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8006f9c:	6879      	ldr	r1, [r7, #4]
 8006f9e:	f000 f9ef 	bl	8007380 <update_mav>
 8006fa2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
                                        alt_mean, state_est_state->state_est_data.altitude_raw_active);
    #endif

    /* we take the old acceleration from the previous timestep, if no acceleration measurements are active */
    if (num_acc_x_meas_active > 0){
 8006fa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	dd1c      	ble.n	8006fe6 <process_measurements+0x39e>
        u /= num_acc_x_meas_active;
 8006fac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fae:	ee07 3a90 	vmov	s15, r3
 8006fb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006fb6:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8006fba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fbe:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        /* gravity compensation for accelerometer */
        state_est_state->kf_state.u[0] = u - GRAVITATION;
 8006fc2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8006fc4:	f7f9 fac0 	bl	8000548 <__aeabi_f2d>
 8006fc8:	a31b      	add	r3, pc, #108	; (adr r3, 8007038 <process_measurements+0x3f0>)
 8006fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fce:	f7f9 f95b 	bl	8000288 <__aeabi_dsub>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	460c      	mov	r4, r1
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	4621      	mov	r1, r4
 8006fda:	f7f9 fe05 	bl	8000be8 <__aeabi_d2f>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    }
    
    if (num_temp_meas_active > 0){
 8006fe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	dd12      	ble.n	8007012 <process_measurements+0x3ca>
        temp_meas_mean /= num_temp_meas_active;
 8006fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fee:	ee07 3a90 	vmov	s15, r3
 8006ff2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ff6:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8006ffa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ffe:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        update_env(&state_est_state->env, temp_meas_mean);
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8007008:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 800700c:	4618      	mov	r0, r3
 800700e:	f7fe fe97 	bl	8005d40 <update_env>
    }

    /* airbrake extension tracking feedback */
    state_est_state->state_est_data.airbrake_extension = (int32_t)(state_est_state->state_est_meas.airbrake_extension * 1000000);
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8007018:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8007044 <process_measurements+0x3fc>
 800701c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007020:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007024:	ee17 2a90 	vmov	r2, s15
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	649a      	str	r2, [r3, #72]	; 0x48
} 
 800702c:	bf00      	nop
 800702e:	375c      	adds	r7, #92	; 0x5c
 8007030:	46bd      	mov	sp, r7
 8007032:	bd90      	pop	{r4, r7, pc}
 8007034:	f3af 8000 	nop.w
 8007038:	51eb851f 	.word	0x51eb851f
 800703c:	40239eb8 	.word	0x40239eb8
 8007040:	447a0000 	.word	0x447a0000
 8007044:	49742400 	.word	0x49742400

08007048 <select_noise_models>:

void select_noise_models(state_est_state_t *state_est_state) {
 8007048:	b590      	push	{r4, r7, lr}
 800704a:	b08f      	sub	sp, #60	; 0x3c
 800704c:	af02      	add	r7, sp, #8
 800704e:	6078      	str	r0, [r7, #4]
    float accelerometer_x_stdev;
    float barometer_stdev;

    // TODO @maxi: add different noise models for each mach regime
    switch (state_est_state->flight_phase_detection.flight_phase) {
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007056:	3b01      	subs	r3, #1
 8007058:	2b0a      	cmp	r3, #10
 800705a:	d832      	bhi.n	80070c2 <select_noise_models+0x7a>
 800705c:	a201      	add	r2, pc, #4	; (adr r2, 8007064 <select_noise_models+0x1c>)
 800705e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007062:	bf00      	nop
 8007064:	08007091 	.word	0x08007091
 8007068:	08007091 	.word	0x08007091
 800706c:	0800709b 	.word	0x0800709b
 8007070:	080070a5 	.word	0x080070a5
 8007074:	080070a5 	.word	0x080070a5
 8007078:	080070a5 	.word	0x080070a5
 800707c:	080070a5 	.word	0x080070a5
 8007080:	080070af 	.word	0x080070af
 8007084:	080070b9 	.word	0x080070b9
 8007088:	080070af 	.word	0x080070af
 800708c:	08007091 	.word	0x08007091
        case AIRBRAKE_TEST:
        case TOUCHDOWN:
        case IDLE:
            accelerometer_x_stdev = 0.0185409;
 8007090:	4b49      	ldr	r3, [pc, #292]	; (80071b8 <select_noise_models+0x170>)
 8007092:	62fb      	str	r3, [r7, #44]	; 0x2c
            barometer_stdev = 1.869;
 8007094:	4b49      	ldr	r3, [pc, #292]	; (80071bc <select_noise_models+0x174>)
 8007096:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 8007098:	e013      	b.n	80070c2 <select_noise_models+0x7a>
        case THRUSTING:
            accelerometer_x_stdev = 1.250775;
 800709a:	4b49      	ldr	r3, [pc, #292]	; (80071c0 <select_noise_models+0x178>)
 800709c:	62fb      	str	r3, [r7, #44]	; 0x2c
            barometer_stdev = 13.000;
 800709e:	4b49      	ldr	r3, [pc, #292]	; (80071c4 <select_noise_models+0x17c>)
 80070a0:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 80070a2:	e00e      	b.n	80070c2 <select_noise_models+0x7a>
        case BIAS_RESET:
        case APOGEE_APPROACH:
        case CONTROL:
        case COASTING:
            accelerometer_x_stdev = 0.61803;
 80070a4:	4b48      	ldr	r3, [pc, #288]	; (80071c8 <select_noise_models+0x180>)
 80070a6:	62fb      	str	r3, [r7, #44]	; 0x2c
            barometer_stdev = 7.380;
 80070a8:	4b48      	ldr	r3, [pc, #288]	; (80071cc <select_noise_models+0x184>)
 80070aa:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 80070ac:	e009      	b.n	80070c2 <select_noise_models+0x7a>
        case DROGUE_DESCENT:
        case MAIN_DESCENT:
            accelerometer_x_stdev = 1.955133;
 80070ae:	4b48      	ldr	r3, [pc, #288]	; (80071d0 <select_noise_models+0x188>)
 80070b0:	62fb      	str	r3, [r7, #44]	; 0x2c
            barometer_stdev = 3.896;
 80070b2:	4b48      	ldr	r3, [pc, #288]	; (80071d4 <select_noise_models+0x18c>)
 80070b4:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 80070b6:	e004      	b.n	80070c2 <select_noise_models+0x7a>
        case BALLISTIC_DESCENT:
            accelerometer_x_stdev = 0.61803;
 80070b8:	4b43      	ldr	r3, [pc, #268]	; (80071c8 <select_noise_models+0x180>)
 80070ba:	62fb      	str	r3, [r7, #44]	; 0x2c
            barometer_stdev = 7.380;
 80070bc:	4b43      	ldr	r3, [pc, #268]	; (80071cc <select_noise_models+0x184>)
 80070be:	62bb      	str	r3, [r7, #40]	; 0x28
        break;
 80070c0:	bf00      	nop
    }

    for(int i = 0; i < NUMBER_PROCESS_NOISE; i++){
 80070c2:	2300      	movs	r3, #0
 80070c4:	627b      	str	r3, [r7, #36]	; 0x24
 80070c6:	e01b      	b.n	8007100 <select_noise_models+0xb8>
        state_est_state->kf_state.Q[i][i] = pow(accelerometer_x_stdev, 2);
 80070c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070ca:	f7f9 fa3d 	bl	8000548 <__aeabi_f2d>
 80070ce:	4603      	mov	r3, r0
 80070d0:	460c      	mov	r4, r1
 80070d2:	ed9f 1b37 	vldr	d1, [pc, #220]	; 80071b0 <select_noise_models+0x168>
 80070d6:	ec44 3b10 	vmov	d0, r3, r4
 80070da:	f00b ffab 	bl	8013034 <pow>
 80070de:	ec54 3b10 	vmov	r3, r4, d0
 80070e2:	4618      	mov	r0, r3
 80070e4:	4621      	mov	r1, r4
 80070e6:	f7f9 fd7f 	bl	8000be8 <__aeabi_d2f>
 80070ea:	4601      	mov	r1, r0
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f0:	3331      	adds	r3, #49	; 0x31
 80070f2:	00db      	lsls	r3, r3, #3
 80070f4:	4413      	add	r3, r2
 80070f6:	3308      	adds	r3, #8
 80070f8:	6019      	str	r1, [r3, #0]
    for(int i = 0; i < NUMBER_PROCESS_NOISE; i++){
 80070fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fc:	3301      	adds	r3, #1
 80070fe:	627b      	str	r3, [r7, #36]	; 0x24
 8007100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007102:	2b00      	cmp	r3, #0
 8007104:	dde0      	ble.n	80070c8 <select_noise_models+0x80>
    }

    float p[1];
    float h[1] = {state_est_state->kf_state.x_est[0]};
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800710c:	613b      	str	r3, [r7, #16]
    bool h_active[1] = {true};
 800710e:	2301      	movs	r3, #1
 8007110:	733b      	strb	r3, [r7, #12]
    altitudeAGL2pressure(&state_est_state->env, 1, h, h_active, p);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f503 7078 	add.w	r0, r3, #992	; 0x3e0
 8007118:	f107 010c 	add.w	r1, r7, #12
 800711c:	f107 0210 	add.w	r2, r7, #16
 8007120:	f107 0314 	add.w	r3, r7, #20
 8007124:	9300      	str	r3, [sp, #0]
 8007126:	460b      	mov	r3, r1
 8007128:	2101      	movs	r1, #1
 800712a:	f7fe febd 	bl	8005ea8 <altitudeAGL2pressure>
    float h_grad = altitude_gradient(&state_est_state->env, p[0]);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 8007134:	edd7 7a05 	vldr	s15, [r7, #20]
 8007138:	eeb0 0a67 	vmov.f32	s0, s15
 800713c:	4618      	mov	r0, r3
 800713e:	f7fe ff1b 	bl	8005f78 <altitude_gradient>
 8007142:	ed87 0a07 	vstr	s0, [r7, #28]
    float altitude_stdev = fabsf(barometer_stdev * h_grad);
 8007146:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800714a:	edd7 7a07 	vldr	s15, [r7, #28]
 800714e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007152:	eef0 7ae7 	vabs.f32	s15, s15
 8007156:	edc7 7a06 	vstr	s15, [r7, #24]

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 800715a:	2300      	movs	r3, #0
 800715c:	623b      	str	r3, [r7, #32]
 800715e:	e01d      	b.n	800719c <select_noise_models+0x154>
        state_est_state->kf_state.R[i][i] = pow(altitude_stdev, 2);
 8007160:	69b8      	ldr	r0, [r7, #24]
 8007162:	f7f9 f9f1 	bl	8000548 <__aeabi_f2d>
 8007166:	4603      	mov	r3, r0
 8007168:	460c      	mov	r4, r1
 800716a:	ed9f 1b11 	vldr	d1, [pc, #68]	; 80071b0 <select_noise_models+0x168>
 800716e:	ec44 3b10 	vmov	d0, r3, r4
 8007172:	f00b ff5f 	bl	8013034 <pow>
 8007176:	ec54 3b10 	vmov	r3, r4, d0
 800717a:	4618      	mov	r0, r3
 800717c:	4621      	mov	r1, r4
 800717e:	f7f9 fd33 	bl	8000be8 <__aeabi_d2f>
 8007182:	6879      	ldr	r1, [r7, #4]
 8007184:	6a3a      	ldr	r2, [r7, #32]
 8007186:	4613      	mov	r3, r2
 8007188:	005b      	lsls	r3, r3, #1
 800718a:	4413      	add	r3, r2
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	440b      	add	r3, r1
 8007190:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8007194:	6018      	str	r0, [r3, #0]
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8007196:	6a3b      	ldr	r3, [r7, #32]
 8007198:	3301      	adds	r3, #1
 800719a:	623b      	str	r3, [r7, #32]
 800719c:	6a3b      	ldr	r3, [r7, #32]
 800719e:	2b01      	cmp	r3, #1
 80071a0:	ddde      	ble.n	8007160 <select_noise_models+0x118>
    }

    #if defined(USE_SENSOR_ELIMINATION_BY_EXTRAPOLATION) && USE_SENSOR_ELIMINATION_BY_EXTRAPOLATION == true
        state_est_state->baro_roll_mem.noise_stdev = barometer_stdev;
    #endif
}
 80071a2:	bf00      	nop
 80071a4:	3734      	adds	r7, #52	; 0x34
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd90      	pop	{r4, r7, pc}
 80071aa:	bf00      	nop
 80071ac:	f3af 8000 	nop.w
 80071b0:	00000000 	.word	0x00000000
 80071b4:	40000000 	.word	0x40000000
 80071b8:	3c97e316 	.word	0x3c97e316
 80071bc:	3fef3b64 	.word	0x3fef3b64
 80071c0:	3fa01965 	.word	0x3fa01965
 80071c4:	41500000 	.word	0x41500000
 80071c8:	3f1e3737 	.word	0x3f1e3737
 80071cc:	40ec28f6 	.word	0x40ec28f6
 80071d0:	3ffa41cc 	.word	0x3ffa41cc
 80071d4:	40795810 	.word	0x40795810

080071d8 <sensor_elimination_by_stdev>:

void sensor_elimination_by_stdev(int n, float measurements[n], bool measurement_active[n]) {
 80071d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071da:	b08b      	sub	sp, #44	; 0x2c
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
    /* calculate mean of the sample */
    int num_active = 0;
 80071e4:	2300      	movs	r3, #0
 80071e6:	627b      	str	r3, [r7, #36]	; 0x24
    float mean = 0;
 80071e8:	f04f 0300 	mov.w	r3, #0
 80071ec:	623b      	str	r3, [r7, #32]
    for (int i = 0; i < n; i++){
 80071ee:	2300      	movs	r3, #0
 80071f0:	61fb      	str	r3, [r7, #28]
 80071f2:	e017      	b.n	8007224 <sensor_elimination_by_stdev+0x4c>
        if (measurement_active[i]) {
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	4413      	add	r3, r2
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d00e      	beq.n	800721e <sensor_elimination_by_stdev+0x46>
            num_active += 1;
 8007200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007202:	3301      	adds	r3, #1
 8007204:	627b      	str	r3, [r7, #36]	; 0x24
            mean += measurements[i];
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	68ba      	ldr	r2, [r7, #8]
 800720c:	4413      	add	r3, r2
 800720e:	edd3 7a00 	vldr	s15, [r3]
 8007212:	ed97 7a08 	vldr	s14, [r7, #32]
 8007216:	ee77 7a27 	vadd.f32	s15, s14, s15
 800721a:	edc7 7a08 	vstr	s15, [r7, #32]
    for (int i = 0; i < n; i++){
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	3301      	adds	r3, #1
 8007222:	61fb      	str	r3, [r7, #28]
 8007224:	69fa      	ldr	r2, [r7, #28]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	429a      	cmp	r2, r3
 800722a:	dbe3      	blt.n	80071f4 <sensor_elimination_by_stdev+0x1c>
        }
    }
    if (num_active > 0){
 800722c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722e:	2b00      	cmp	r3, #0
 8007230:	dd0a      	ble.n	8007248 <sensor_elimination_by_stdev+0x70>
        mean /= num_active;
 8007232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007234:	ee07 3a90 	vmov	s15, r3
 8007238:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800723c:	edd7 6a08 	vldr	s13, [r7, #32]
 8007240:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007244:	edc7 7a08 	vstr	s15, [r7, #32]
    }

    /* calculate the standard deviation of the sample */
    float stdev = 0;
 8007248:	f04f 0300 	mov.w	r3, #0
 800724c:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; ++i) {
 800724e:	2300      	movs	r3, #0
 8007250:	617b      	str	r3, [r7, #20]
 8007252:	e033      	b.n	80072bc <sensor_elimination_by_stdev+0xe4>
        if (measurement_active[i]) {
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	4413      	add	r3, r2
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d02a      	beq.n	80072b6 <sensor_elimination_by_stdev+0xde>
            stdev += pow(measurements[i] - mean, 2);
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	68ba      	ldr	r2, [r7, #8]
 8007266:	4413      	add	r3, r2
 8007268:	ed93 7a00 	vldr	s14, [r3]
 800726c:	edd7 7a08 	vldr	s15, [r7, #32]
 8007270:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007274:	ee17 0a90 	vmov	r0, s15
 8007278:	f7f9 f966 	bl	8000548 <__aeabi_f2d>
 800727c:	4603      	mov	r3, r0
 800727e:	460c      	mov	r4, r1
 8007280:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 8007378 <sensor_elimination_by_stdev+0x1a0>
 8007284:	ec44 3b10 	vmov	d0, r3, r4
 8007288:	f00b fed4 	bl	8013034 <pow>
 800728c:	ec56 5b10 	vmov	r5, r6, d0
 8007290:	69b8      	ldr	r0, [r7, #24]
 8007292:	f7f9 f959 	bl	8000548 <__aeabi_f2d>
 8007296:	4603      	mov	r3, r0
 8007298:	460c      	mov	r4, r1
 800729a:	461a      	mov	r2, r3
 800729c:	4623      	mov	r3, r4
 800729e:	4628      	mov	r0, r5
 80072a0:	4631      	mov	r1, r6
 80072a2:	f7f8 fff3 	bl	800028c <__adddf3>
 80072a6:	4603      	mov	r3, r0
 80072a8:	460c      	mov	r4, r1
 80072aa:	4618      	mov	r0, r3
 80072ac:	4621      	mov	r1, r4
 80072ae:	f7f9 fc9b 	bl	8000be8 <__aeabi_d2f>
 80072b2:	4603      	mov	r3, r0
 80072b4:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; ++i) {
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	3301      	adds	r3, #1
 80072ba:	617b      	str	r3, [r7, #20]
 80072bc:	697a      	ldr	r2, [r7, #20]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	dbc7      	blt.n	8007254 <sensor_elimination_by_stdev+0x7c>
        }
    }
    if (num_active > 0){
 80072c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	dd1a      	ble.n	8007300 <sensor_elimination_by_stdev+0x128>
        stdev = sqrt(stdev / num_active);
 80072ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072cc:	ee07 3a90 	vmov	s15, r3
 80072d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072d4:	ed97 7a06 	vldr	s14, [r7, #24]
 80072d8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80072dc:	ee16 0a90 	vmov	r0, s13
 80072e0:	f7f9 f932 	bl	8000548 <__aeabi_f2d>
 80072e4:	4603      	mov	r3, r0
 80072e6:	460c      	mov	r4, r1
 80072e8:	ec44 3b10 	vmov	d0, r3, r4
 80072ec:	f00c f812 	bl	8013314 <sqrt>
 80072f0:	ec54 3b10 	vmov	r3, r4, d0
 80072f4:	4618      	mov	r0, r3
 80072f6:	4621      	mov	r1, r4
 80072f8:	f7f9 fc76 	bl	8000be8 <__aeabi_d2f>
 80072fc:	4603      	mov	r3, r0
 80072fe:	61bb      	str	r3, [r7, #24]
    }

    /* deactivate measurements if they are too far off the mean */
    for (int i = 0; i < n; ++i) {
 8007300:	2300      	movs	r3, #0
 8007302:	613b      	str	r3, [r7, #16]
 8007304:	e02f      	b.n	8007366 <sensor_elimination_by_stdev+0x18e>
        if (measurement_active[i]) {
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	687a      	ldr	r2, [r7, #4]
 800730a:	4413      	add	r3, r2
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d026      	beq.n	8007360 <sensor_elimination_by_stdev+0x188>
            if (fabsf(measurements[i] - mean) > 2.0 * stdev) {
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	68ba      	ldr	r2, [r7, #8]
 8007318:	4413      	add	r3, r2
 800731a:	ed93 7a00 	vldr	s14, [r3]
 800731e:	edd7 7a08 	vldr	s15, [r7, #32]
 8007322:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007326:	eef0 7ae7 	vabs.f32	s15, s15
 800732a:	ee17 0a90 	vmov	r0, s15
 800732e:	f7f9 f90b 	bl	8000548 <__aeabi_f2d>
 8007332:	4604      	mov	r4, r0
 8007334:	460d      	mov	r5, r1
 8007336:	69b8      	ldr	r0, [r7, #24]
 8007338:	f7f9 f906 	bl	8000548 <__aeabi_f2d>
 800733c:	4602      	mov	r2, r0
 800733e:	460b      	mov	r3, r1
 8007340:	f7f8 ffa4 	bl	800028c <__adddf3>
 8007344:	4602      	mov	r2, r0
 8007346:	460b      	mov	r3, r1
 8007348:	4620      	mov	r0, r4
 800734a:	4629      	mov	r1, r5
 800734c:	f7f9 fbe4 	bl	8000b18 <__aeabi_dcmpgt>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d004      	beq.n	8007360 <sensor_elimination_by_stdev+0x188>
                measurement_active[i] = false;
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	4413      	add	r3, r2
 800735c:	2200      	movs	r2, #0
 800735e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < n; ++i) {
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	3301      	adds	r3, #1
 8007364:	613b      	str	r3, [r7, #16]
 8007366:	693a      	ldr	r2, [r7, #16]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	429a      	cmp	r2, r3
 800736c:	dbcb      	blt.n	8007306 <sensor_elimination_by_stdev+0x12e>
            }
        }
    }
}
 800736e:	bf00      	nop
 8007370:	372c      	adds	r7, #44	; 0x2c
 8007372:	46bd      	mov	sp, r7
 8007374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007376:	bf00      	nop
 8007378:	00000000 	.word	0x00000000
 800737c:	40000000 	.word	0x40000000

08007380 <update_mav>:
        extrapolation_rolling_memory->memory_length += num_active;
    }

}

float update_mav(mav_memory_t *mav_memory, timestamp_t t, float measurement, bool measurement_active) {
 8007380:	b480      	push	{r7}
 8007382:	b089      	sub	sp, #36	; 0x24
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	ed87 0a01 	vstr	s0, [r7, #4]
 800738e:	4613      	mov	r3, r2
 8007390:	70fb      	strb	r3, [r7, #3]
    if (measurement_active == true) {
 8007392:	78fb      	ldrb	r3, [r7, #3]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d06b      	beq.n	8007470 <update_mav+0xf0>
        if (mav_memory->memory_length < MAX_LENGTH_MOVING_AVERAGE) {
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2b09      	cmp	r3, #9
 800739e:	dc04      	bgt.n	80073aa <update_mav+0x2a>
            mav_memory->memory_length += 1;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	1c5a      	adds	r2, r3, #1
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	601a      	str	r2, [r3, #0]
        }

        for (int i=(mav_memory->memory_length-1); i > 0; i--) {
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	3b01      	subs	r3, #1
 80073b0:	61fb      	str	r3, [r7, #28]
 80073b2:	e02b      	b.n	800740c <update_mav+0x8c>
		    mav_memory->timestamps[i] = mav_memory->timestamps[i-1];
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	3b01      	subs	r3, #1
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	4413      	add	r3, r2
 80073be:	685a      	ldr	r2, [r3, #4]
 80073c0:	68f9      	ldr	r1, [r7, #12]
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	009b      	lsls	r3, r3, #2
 80073c6:	440b      	add	r3, r1
 80073c8:	605a      	str	r2, [r3, #4]
            mav_memory->values[i] = mav_memory->values[i-1];
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	3b01      	subs	r3, #1
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	330a      	adds	r3, #10
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	4413      	add	r3, r2
 80073d6:	3304      	adds	r3, #4
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	68f9      	ldr	r1, [r7, #12]
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	330a      	adds	r3, #10
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	440b      	add	r3, r1
 80073e4:	3304      	adds	r3, #4
 80073e6:	601a      	str	r2, [r3, #0]
            mav_memory->avg_values[i] = mav_memory->avg_values[i-1];
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	3b01      	subs	r3, #1
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	3314      	adds	r3, #20
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	4413      	add	r3, r2
 80073f4:	3304      	adds	r3, #4
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	68f9      	ldr	r1, [r7, #12]
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	3314      	adds	r3, #20
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	440b      	add	r3, r1
 8007402:	3304      	adds	r3, #4
 8007404:	601a      	str	r2, [r3, #0]
        for (int i=(mav_memory->memory_length-1); i > 0; i--) {
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	3b01      	subs	r3, #1
 800740a:	61fb      	str	r3, [r7, #28]
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	2b00      	cmp	r3, #0
 8007410:	dcd0      	bgt.n	80073b4 <update_mav+0x34>
        }
        
        mav_memory->timestamps[0] = t;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	68ba      	ldr	r2, [r7, #8]
 8007416:	605a      	str	r2, [r3, #4]
        mav_memory->values[0] = measurement;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	62da      	str	r2, [r3, #44]	; 0x2c

        float values_sum = 0;
 800741e:	f04f 0300 	mov.w	r3, #0
 8007422:	61bb      	str	r3, [r7, #24]
        for (int i=0; i < mav_memory->memory_length; i++) {
 8007424:	2300      	movs	r3, #0
 8007426:	617b      	str	r3, [r7, #20]
 8007428:	e010      	b.n	800744c <update_mav+0xcc>
            values_sum += mav_memory->values[i];
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	330a      	adds	r3, #10
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	4413      	add	r3, r2
 8007434:	3304      	adds	r3, #4
 8007436:	edd3 7a00 	vldr	s15, [r3]
 800743a:	ed97 7a06 	vldr	s14, [r7, #24]
 800743e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007442:	edc7 7a06 	vstr	s15, [r7, #24]
        for (int i=0; i < mav_memory->memory_length; i++) {
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	3301      	adds	r3, #1
 800744a:	617b      	str	r3, [r7, #20]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	697a      	ldr	r2, [r7, #20]
 8007452:	429a      	cmp	r2, r3
 8007454:	dbe9      	blt.n	800742a <update_mav+0xaa>
        }

        mav_memory->avg_values[0] = values_sum / (float)mav_memory->memory_length;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	ee07 3a90 	vmov	s15, r3
 800745e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007462:	edd7 6a06 	vldr	s13, [r7, #24]
 8007466:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
    } 

    return mav_memory->avg_values[0];
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007474:	ee07 3a90 	vmov	s15, r3
}
 8007478:	eeb0 0a67 	vmov.f32	s0, s15
 800747c:	3724      	adds	r7, #36	; 0x24
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
	...

08007488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800748c:	4b0e      	ldr	r3, [pc, #56]	; (80074c8 <HAL_Init+0x40>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a0d      	ldr	r2, [pc, #52]	; (80074c8 <HAL_Init+0x40>)
 8007492:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007496:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007498:	4b0b      	ldr	r3, [pc, #44]	; (80074c8 <HAL_Init+0x40>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a0a      	ldr	r2, [pc, #40]	; (80074c8 <HAL_Init+0x40>)
 800749e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80074a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80074a4:	4b08      	ldr	r3, [pc, #32]	; (80074c8 <HAL_Init+0x40>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a07      	ldr	r2, [pc, #28]	; (80074c8 <HAL_Init+0x40>)
 80074aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80074b0:	2003      	movs	r0, #3
 80074b2:	f000 fd8b 	bl	8007fcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80074b6:	2000      	movs	r0, #0
 80074b8:	f000 f808 	bl	80074cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80074bc:	f7fc faa2 	bl	8003a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	40023c00 	.word	0x40023c00

080074cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80074d4:	4b12      	ldr	r3, [pc, #72]	; (8007520 <HAL_InitTick+0x54>)
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	4b12      	ldr	r3, [pc, #72]	; (8007524 <HAL_InitTick+0x58>)
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	4619      	mov	r1, r3
 80074de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80074e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80074e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ea:	4618      	mov	r0, r3
 80074ec:	f000 fda3 	bl	8008036 <HAL_SYSTICK_Config>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d001      	beq.n	80074fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e00e      	b.n	8007518 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2b0f      	cmp	r3, #15
 80074fe:	d80a      	bhi.n	8007516 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007500:	2200      	movs	r2, #0
 8007502:	6879      	ldr	r1, [r7, #4]
 8007504:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007508:	f000 fd6b 	bl	8007fe2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800750c:	4a06      	ldr	r2, [pc, #24]	; (8007528 <HAL_InitTick+0x5c>)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007512:	2300      	movs	r3, #0
 8007514:	e000      	b.n	8007518 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
}
 8007518:	4618      	mov	r0, r3
 800751a:	3708      	adds	r7, #8
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	20000158 	.word	0x20000158
 8007524:	20000164 	.word	0x20000164
 8007528:	20000160 	.word	0x20000160

0800752c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800752c:	b480      	push	{r7}
 800752e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007530:	4b06      	ldr	r3, [pc, #24]	; (800754c <HAL_IncTick+0x20>)
 8007532:	781b      	ldrb	r3, [r3, #0]
 8007534:	461a      	mov	r2, r3
 8007536:	4b06      	ldr	r3, [pc, #24]	; (8007550 <HAL_IncTick+0x24>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4413      	add	r3, r2
 800753c:	4a04      	ldr	r2, [pc, #16]	; (8007550 <HAL_IncTick+0x24>)
 800753e:	6013      	str	r3, [r2, #0]
}
 8007540:	bf00      	nop
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	20000164 	.word	0x20000164
 8007550:	20015cb0 	.word	0x20015cb0

08007554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007554:	b480      	push	{r7}
 8007556:	af00      	add	r7, sp, #0
  return uwTick;
 8007558:	4b03      	ldr	r3, [pc, #12]	; (8007568 <HAL_GetTick+0x14>)
 800755a:	681b      	ldr	r3, [r3, #0]
}
 800755c:	4618      	mov	r0, r3
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	20015cb0 	.word	0x20015cb0

0800756c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007574:	f7ff ffee 	bl	8007554 <HAL_GetTick>
 8007578:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007584:	d005      	beq.n	8007592 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007586:	4b09      	ldr	r3, [pc, #36]	; (80075ac <HAL_Delay+0x40>)
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	461a      	mov	r2, r3
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	4413      	add	r3, r2
 8007590:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007592:	bf00      	nop
 8007594:	f7ff ffde 	bl	8007554 <HAL_GetTick>
 8007598:	4602      	mov	r2, r0
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d8f7      	bhi.n	8007594 <HAL_Delay+0x28>
  {
  }
}
 80075a4:	bf00      	nop
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	20000164 	.word	0x20000164

080075b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80075b8:	2300      	movs	r3, #0
 80075ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d101      	bne.n	80075c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	e033      	b.n	800762e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d109      	bne.n	80075e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f7fa f91c 	bl	800180c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e6:	f003 0310 	and.w	r3, r3, #16
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d118      	bne.n	8007620 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80075f6:	f023 0302 	bic.w	r3, r3, #2
 80075fa:	f043 0202 	orr.w	r2, r3, #2
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 fa94 	bl	8007b30 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007612:	f023 0303 	bic.w	r3, r3, #3
 8007616:	f043 0201 	orr.w	r2, r3, #1
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	641a      	str	r2, [r3, #64]	; 0x40
 800761e:	e001      	b.n	8007624 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007620:	2301      	movs	r3, #1
 8007622:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800762c:	7bfb      	ldrb	r3, [r7, #15]
}
 800762e:	4618      	mov	r0, r3
 8007630:	3710      	adds	r7, #16
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
	...

08007638 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b086      	sub	sp, #24
 800763c:	af00      	add	r7, sp, #0
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8007644:	2300      	movs	r3, #0
 8007646:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800764e:	2b01      	cmp	r3, #1
 8007650:	d101      	bne.n	8007656 <HAL_ADC_Start_DMA+0x1e>
 8007652:	2302      	movs	r3, #2
 8007654:	e0cc      	b.n	80077f0 <HAL_ADC_Start_DMA+0x1b8>
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2201      	movs	r2, #1
 800765a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	f003 0301 	and.w	r3, r3, #1
 8007668:	2b01      	cmp	r3, #1
 800766a:	d018      	beq.n	800769e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	689a      	ldr	r2, [r3, #8]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f042 0201 	orr.w	r2, r2, #1
 800767a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800767c:	4b5e      	ldr	r3, [pc, #376]	; (80077f8 <HAL_ADC_Start_DMA+0x1c0>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a5e      	ldr	r2, [pc, #376]	; (80077fc <HAL_ADC_Start_DMA+0x1c4>)
 8007682:	fba2 2303 	umull	r2, r3, r2, r3
 8007686:	0c9a      	lsrs	r2, r3, #18
 8007688:	4613      	mov	r3, r2
 800768a:	005b      	lsls	r3, r3, #1
 800768c:	4413      	add	r3, r2
 800768e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007690:	e002      	b.n	8007698 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	3b01      	subs	r3, #1
 8007696:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d1f9      	bne.n	8007692 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	f003 0301 	and.w	r3, r3, #1
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	f040 80a0 	bne.w	80077ee <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80076b6:	f023 0301 	bic.w	r3, r3, #1
 80076ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d007      	beq.n	80076e0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80076d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076ec:	d106      	bne.n	80076fc <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076f2:	f023 0206 	bic.w	r2, r3, #6
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	645a      	str	r2, [r3, #68]	; 0x44
 80076fa:	e002      	b.n	8007702 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2200      	movs	r2, #0
 8007700:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2200      	movs	r2, #0
 8007706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800770a:	4b3d      	ldr	r3, [pc, #244]	; (8007800 <HAL_ADC_Start_DMA+0x1c8>)
 800770c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007712:	4a3c      	ldr	r2, [pc, #240]	; (8007804 <HAL_ADC_Start_DMA+0x1cc>)
 8007714:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771a:	4a3b      	ldr	r2, [pc, #236]	; (8007808 <HAL_ADC_Start_DMA+0x1d0>)
 800771c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007722:	4a3a      	ldr	r2, [pc, #232]	; (800780c <HAL_ADC_Start_DMA+0x1d4>)
 8007724:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800772e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	685a      	ldr	r2, [r3, #4]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800773e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	689a      	ldr	r2, [r3, #8]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800774e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	334c      	adds	r3, #76	; 0x4c
 800775a:	4619      	mov	r1, r3
 800775c:	68ba      	ldr	r2, [r7, #8]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f000 fd24 	bl	80081ac <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	f003 031f 	and.w	r3, r3, #31
 800776c:	2b00      	cmp	r3, #0
 800776e:	d12a      	bne.n	80077c6 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a26      	ldr	r2, [pc, #152]	; (8007810 <HAL_ADC_Start_DMA+0x1d8>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d015      	beq.n	80077a6 <HAL_ADC_Start_DMA+0x16e>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a25      	ldr	r2, [pc, #148]	; (8007814 <HAL_ADC_Start_DMA+0x1dc>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d105      	bne.n	8007790 <HAL_ADC_Start_DMA+0x158>
 8007784:	4b1e      	ldr	r3, [pc, #120]	; (8007800 <HAL_ADC_Start_DMA+0x1c8>)
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	f003 031f 	and.w	r3, r3, #31
 800778c:	2b00      	cmp	r3, #0
 800778e:	d00a      	beq.n	80077a6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a20      	ldr	r2, [pc, #128]	; (8007818 <HAL_ADC_Start_DMA+0x1e0>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d129      	bne.n	80077ee <HAL_ADC_Start_DMA+0x1b6>
 800779a:	4b19      	ldr	r3, [pc, #100]	; (8007800 <HAL_ADC_Start_DMA+0x1c8>)
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	f003 031f 	and.w	r3, r3, #31
 80077a2:	2b0f      	cmp	r3, #15
 80077a4:	d823      	bhi.n	80077ee <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d11c      	bne.n	80077ee <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	689a      	ldr	r2, [r3, #8]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80077c2:	609a      	str	r2, [r3, #8]
 80077c4:	e013      	b.n	80077ee <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a11      	ldr	r2, [pc, #68]	; (8007810 <HAL_ADC_Start_DMA+0x1d8>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d10e      	bne.n	80077ee <HAL_ADC_Start_DMA+0x1b6>
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d107      	bne.n	80077ee <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	689a      	ldr	r2, [r3, #8]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80077ec:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3718      	adds	r7, #24
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}
 80077f8:	20000158 	.word	0x20000158
 80077fc:	431bde83 	.word	0x431bde83
 8007800:	40012300 	.word	0x40012300
 8007804:	08007d29 	.word	0x08007d29
 8007808:	08007de3 	.word	0x08007de3
 800780c:	08007dff 	.word	0x08007dff
 8007810:	40012000 	.word	0x40012000
 8007814:	40012100 	.word	0x40012100
 8007818:	40012200 	.word	0x40012200

0800781c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007824:	2300      	movs	r3, #0
 8007826:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800782e:	2b01      	cmp	r3, #1
 8007830:	d101      	bne.n	8007836 <HAL_ADC_Stop_DMA+0x1a>
 8007832:	2302      	movs	r3, #2
 8007834:	e038      	b.n	80078a8 <HAL_ADC_Stop_DMA+0x8c>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2201      	movs	r2, #1
 800783a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	689a      	ldr	r2, [r3, #8]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f022 0201 	bic.w	r2, r2, #1
 800784c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	f003 0301 	and.w	r3, r3, #1
 8007858:	2b00      	cmp	r3, #0
 800785a:	d120      	bne.n	800789e <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	689a      	ldr	r2, [r3, #8]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800786a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007870:	4618      	mov	r0, r3
 8007872:	f000 fcf3 	bl	800825c <HAL_DMA_Abort>
 8007876:	4603      	mov	r3, r0
 8007878:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	685a      	ldr	r2, [r3, #4]
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8007888:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007892:	f023 0301 	bic.w	r3, r3, #1
 8007896:	f043 0201 	orr.w	r2, r3, #1
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80078a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3710      	adds	r7, #16
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80078b8:	bf00      	nop
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80078cc:	bf00      	nop
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80078f6:	2300      	movs	r3, #0
 80078f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007900:	2b01      	cmp	r3, #1
 8007902:	d101      	bne.n	8007908 <HAL_ADC_ConfigChannel+0x1c>
 8007904:	2302      	movs	r3, #2
 8007906:	e105      	b.n	8007b14 <HAL_ADC_ConfigChannel+0x228>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2201      	movs	r2, #1
 800790c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2b09      	cmp	r3, #9
 8007916:	d925      	bls.n	8007964 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	68d9      	ldr	r1, [r3, #12]
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	b29b      	uxth	r3, r3
 8007924:	461a      	mov	r2, r3
 8007926:	4613      	mov	r3, r2
 8007928:	005b      	lsls	r3, r3, #1
 800792a:	4413      	add	r3, r2
 800792c:	3b1e      	subs	r3, #30
 800792e:	2207      	movs	r2, #7
 8007930:	fa02 f303 	lsl.w	r3, r2, r3
 8007934:	43da      	mvns	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	400a      	ands	r2, r1
 800793c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	68d9      	ldr	r1, [r3, #12]
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	689a      	ldr	r2, [r3, #8]
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	b29b      	uxth	r3, r3
 800794e:	4618      	mov	r0, r3
 8007950:	4603      	mov	r3, r0
 8007952:	005b      	lsls	r3, r3, #1
 8007954:	4403      	add	r3, r0
 8007956:	3b1e      	subs	r3, #30
 8007958:	409a      	lsls	r2, r3
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	430a      	orrs	r2, r1
 8007960:	60da      	str	r2, [r3, #12]
 8007962:	e022      	b.n	80079aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	6919      	ldr	r1, [r3, #16]
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	b29b      	uxth	r3, r3
 8007970:	461a      	mov	r2, r3
 8007972:	4613      	mov	r3, r2
 8007974:	005b      	lsls	r3, r3, #1
 8007976:	4413      	add	r3, r2
 8007978:	2207      	movs	r2, #7
 800797a:	fa02 f303 	lsl.w	r3, r2, r3
 800797e:	43da      	mvns	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	400a      	ands	r2, r1
 8007986:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	6919      	ldr	r1, [r3, #16]
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	689a      	ldr	r2, [r3, #8]
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	b29b      	uxth	r3, r3
 8007998:	4618      	mov	r0, r3
 800799a:	4603      	mov	r3, r0
 800799c:	005b      	lsls	r3, r3, #1
 800799e:	4403      	add	r3, r0
 80079a0:	409a      	lsls	r2, r3
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	430a      	orrs	r2, r1
 80079a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	2b06      	cmp	r3, #6
 80079b0:	d824      	bhi.n	80079fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	685a      	ldr	r2, [r3, #4]
 80079bc:	4613      	mov	r3, r2
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	4413      	add	r3, r2
 80079c2:	3b05      	subs	r3, #5
 80079c4:	221f      	movs	r2, #31
 80079c6:	fa02 f303 	lsl.w	r3, r2, r3
 80079ca:	43da      	mvns	r2, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	400a      	ands	r2, r1
 80079d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	b29b      	uxth	r3, r3
 80079e0:	4618      	mov	r0, r3
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	685a      	ldr	r2, [r3, #4]
 80079e6:	4613      	mov	r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	4413      	add	r3, r2
 80079ec:	3b05      	subs	r3, #5
 80079ee:	fa00 f203 	lsl.w	r2, r0, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	430a      	orrs	r2, r1
 80079f8:	635a      	str	r2, [r3, #52]	; 0x34
 80079fa:	e04c      	b.n	8007a96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	2b0c      	cmp	r3, #12
 8007a02:	d824      	bhi.n	8007a4e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	685a      	ldr	r2, [r3, #4]
 8007a0e:	4613      	mov	r3, r2
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	4413      	add	r3, r2
 8007a14:	3b23      	subs	r3, #35	; 0x23
 8007a16:	221f      	movs	r2, #31
 8007a18:	fa02 f303 	lsl.w	r3, r2, r3
 8007a1c:	43da      	mvns	r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	400a      	ands	r2, r1
 8007a24:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	4618      	mov	r0, r3
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	685a      	ldr	r2, [r3, #4]
 8007a38:	4613      	mov	r3, r2
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	4413      	add	r3, r2
 8007a3e:	3b23      	subs	r3, #35	; 0x23
 8007a40:	fa00 f203 	lsl.w	r2, r0, r3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	430a      	orrs	r2, r1
 8007a4a:	631a      	str	r2, [r3, #48]	; 0x30
 8007a4c:	e023      	b.n	8007a96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	685a      	ldr	r2, [r3, #4]
 8007a58:	4613      	mov	r3, r2
 8007a5a:	009b      	lsls	r3, r3, #2
 8007a5c:	4413      	add	r3, r2
 8007a5e:	3b41      	subs	r3, #65	; 0x41
 8007a60:	221f      	movs	r2, #31
 8007a62:	fa02 f303 	lsl.w	r3, r2, r3
 8007a66:	43da      	mvns	r2, r3
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	400a      	ands	r2, r1
 8007a6e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	685a      	ldr	r2, [r3, #4]
 8007a82:	4613      	mov	r3, r2
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	4413      	add	r3, r2
 8007a88:	3b41      	subs	r3, #65	; 0x41
 8007a8a:	fa00 f203 	lsl.w	r2, r0, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	430a      	orrs	r2, r1
 8007a94:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007a96:	4b22      	ldr	r3, [pc, #136]	; (8007b20 <HAL_ADC_ConfigChannel+0x234>)
 8007a98:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a21      	ldr	r2, [pc, #132]	; (8007b24 <HAL_ADC_ConfigChannel+0x238>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d109      	bne.n	8007ab8 <HAL_ADC_ConfigChannel+0x1cc>
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2b12      	cmp	r3, #18
 8007aaa:	d105      	bne.n	8007ab8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a19      	ldr	r2, [pc, #100]	; (8007b24 <HAL_ADC_ConfigChannel+0x238>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d123      	bne.n	8007b0a <HAL_ADC_ConfigChannel+0x21e>
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2b10      	cmp	r3, #16
 8007ac8:	d003      	beq.n	8007ad2 <HAL_ADC_ConfigChannel+0x1e6>
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2b11      	cmp	r3, #17
 8007ad0:	d11b      	bne.n	8007b0a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	2b10      	cmp	r3, #16
 8007ae4:	d111      	bne.n	8007b0a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007ae6:	4b10      	ldr	r3, [pc, #64]	; (8007b28 <HAL_ADC_ConfigChannel+0x23c>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a10      	ldr	r2, [pc, #64]	; (8007b2c <HAL_ADC_ConfigChannel+0x240>)
 8007aec:	fba2 2303 	umull	r2, r3, r2, r3
 8007af0:	0c9a      	lsrs	r2, r3, #18
 8007af2:	4613      	mov	r3, r2
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	4413      	add	r3, r2
 8007af8:	005b      	lsls	r3, r3, #1
 8007afa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007afc:	e002      	b.n	8007b04 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8007afe:	68bb      	ldr	r3, [r7, #8]
 8007b00:	3b01      	subs	r3, #1
 8007b02:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d1f9      	bne.n	8007afe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3714      	adds	r7, #20
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr
 8007b20:	40012300 	.word	0x40012300
 8007b24:	40012000 	.word	0x40012000
 8007b28:	20000158 	.word	0x20000158
 8007b2c:	431bde83 	.word	0x431bde83

08007b30 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b085      	sub	sp, #20
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007b38:	4b79      	ldr	r3, [pc, #484]	; (8007d20 <ADC_Init+0x1f0>)
 8007b3a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	685a      	ldr	r2, [r3, #4]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	431a      	orrs	r2, r3
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	685a      	ldr	r2, [r3, #4]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	6859      	ldr	r1, [r3, #4]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	021a      	lsls	r2, r3, #8
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	430a      	orrs	r2, r1
 8007b78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	685a      	ldr	r2, [r3, #4]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007b88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	6859      	ldr	r1, [r3, #4]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	689a      	ldr	r2, [r3, #8]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	430a      	orrs	r2, r1
 8007b9a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	689a      	ldr	r2, [r3, #8]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007baa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	6899      	ldr	r1, [r3, #8]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	68da      	ldr	r2, [r3, #12]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	430a      	orrs	r2, r1
 8007bbc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc2:	4a58      	ldr	r2, [pc, #352]	; (8007d24 <ADC_Init+0x1f4>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d022      	beq.n	8007c0e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	689a      	ldr	r2, [r3, #8]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007bd6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	6899      	ldr	r1, [r3, #8]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	430a      	orrs	r2, r1
 8007be8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	689a      	ldr	r2, [r3, #8]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007bf8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	6899      	ldr	r1, [r3, #8]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	430a      	orrs	r2, r1
 8007c0a:	609a      	str	r2, [r3, #8]
 8007c0c:	e00f      	b.n	8007c2e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	689a      	ldr	r2, [r3, #8]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007c1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	689a      	ldr	r2, [r3, #8]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007c2c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	689a      	ldr	r2, [r3, #8]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f022 0202 	bic.w	r2, r2, #2
 8007c3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	6899      	ldr	r1, [r3, #8]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	7e1b      	ldrb	r3, [r3, #24]
 8007c48:	005a      	lsls	r2, r3, #1
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	430a      	orrs	r2, r1
 8007c50:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d01b      	beq.n	8007c94 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	685a      	ldr	r2, [r3, #4]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c6a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	685a      	ldr	r2, [r3, #4]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007c7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	6859      	ldr	r1, [r3, #4]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c86:	3b01      	subs	r3, #1
 8007c88:	035a      	lsls	r2, r3, #13
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	430a      	orrs	r2, r1
 8007c90:	605a      	str	r2, [r3, #4]
 8007c92:	e007      	b.n	8007ca4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	685a      	ldr	r2, [r3, #4]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007ca2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007cb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	69db      	ldr	r3, [r3, #28]
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	051a      	lsls	r2, r3, #20
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	430a      	orrs	r2, r1
 8007cc8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	689a      	ldr	r2, [r3, #8]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007cd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	6899      	ldr	r1, [r3, #8]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007ce6:	025a      	lsls	r2, r3, #9
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	430a      	orrs	r2, r1
 8007cee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	689a      	ldr	r2, [r3, #8]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cfe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	6899      	ldr	r1, [r3, #8]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	695b      	ldr	r3, [r3, #20]
 8007d0a:	029a      	lsls	r2, r3, #10
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	430a      	orrs	r2, r1
 8007d12:	609a      	str	r2, [r3, #8]
}
 8007d14:	bf00      	nop
 8007d16:	3714      	adds	r7, #20
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr
 8007d20:	40012300 	.word	0x40012300
 8007d24:	0f000001 	.word	0x0f000001

08007d28 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d34:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d13c      	bne.n	8007dbc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d46:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d12b      	bne.n	8007db4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d127      	bne.n	8007db4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d6a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d006      	beq.n	8007d80 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d119      	bne.n	8007db4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	685a      	ldr	r2, [r3, #4]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f022 0220 	bic.w	r2, r2, #32
 8007d8e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d105      	bne.n	8007db4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dac:	f043 0201 	orr.w	r2, r3, #1
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	f7ff fd7b 	bl	80078b0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007dba:	e00e      	b.n	8007dda <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc0:	f003 0310 	and.w	r3, r3, #16
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d003      	beq.n	8007dd0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007dc8:	68f8      	ldr	r0, [r7, #12]
 8007dca:	f7ff fd85 	bl	80078d8 <HAL_ADC_ErrorCallback>
}
 8007dce:	e004      	b.n	8007dda <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	4798      	blx	r3
}
 8007dda:	bf00      	nop
 8007ddc:	3710      	adds	r7, #16
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}

08007de2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007de2:	b580      	push	{r7, lr}
 8007de4:	b084      	sub	sp, #16
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dee:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f7ff fd67 	bl	80078c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007df6:	bf00      	nop
 8007df8:	3710      	adds	r7, #16
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b084      	sub	sp, #16
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e0a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2240      	movs	r2, #64	; 0x40
 8007e10:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e16:	f043 0204 	orr.w	r2, r3, #4
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007e1e:	68f8      	ldr	r0, [r7, #12]
 8007e20:	f7ff fd5a 	bl	80078d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007e24:	bf00      	nop
 8007e26:	3710      	adds	r7, #16
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <__NVIC_SetPriorityGrouping>:
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b085      	sub	sp, #20
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f003 0307 	and.w	r3, r3, #7
 8007e3a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007e3c:	4b0c      	ldr	r3, [pc, #48]	; (8007e70 <__NVIC_SetPriorityGrouping+0x44>)
 8007e3e:	68db      	ldr	r3, [r3, #12]
 8007e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007e42:	68ba      	ldr	r2, [r7, #8]
 8007e44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007e48:	4013      	ands	r3, r2
 8007e4a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007e54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007e5e:	4a04      	ldr	r2, [pc, #16]	; (8007e70 <__NVIC_SetPriorityGrouping+0x44>)
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	60d3      	str	r3, [r2, #12]
}
 8007e64:	bf00      	nop
 8007e66:	3714      	adds	r7, #20
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr
 8007e70:	e000ed00 	.word	0xe000ed00

08007e74 <__NVIC_GetPriorityGrouping>:
{
 8007e74:	b480      	push	{r7}
 8007e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007e78:	4b04      	ldr	r3, [pc, #16]	; (8007e8c <__NVIC_GetPriorityGrouping+0x18>)
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	0a1b      	lsrs	r3, r3, #8
 8007e7e:	f003 0307 	and.w	r3, r3, #7
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr
 8007e8c:	e000ed00 	.word	0xe000ed00

08007e90 <__NVIC_EnableIRQ>:
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	4603      	mov	r3, r0
 8007e98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	db0b      	blt.n	8007eba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ea2:	79fb      	ldrb	r3, [r7, #7]
 8007ea4:	f003 021f 	and.w	r2, r3, #31
 8007ea8:	4907      	ldr	r1, [pc, #28]	; (8007ec8 <__NVIC_EnableIRQ+0x38>)
 8007eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eae:	095b      	lsrs	r3, r3, #5
 8007eb0:	2001      	movs	r0, #1
 8007eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8007eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007eba:	bf00      	nop
 8007ebc:	370c      	adds	r7, #12
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr
 8007ec6:	bf00      	nop
 8007ec8:	e000e100 	.word	0xe000e100

08007ecc <__NVIC_SetPriority>:
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	6039      	str	r1, [r7, #0]
 8007ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	db0a      	blt.n	8007ef6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	b2da      	uxtb	r2, r3
 8007ee4:	490c      	ldr	r1, [pc, #48]	; (8007f18 <__NVIC_SetPriority+0x4c>)
 8007ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eea:	0112      	lsls	r2, r2, #4
 8007eec:	b2d2      	uxtb	r2, r2
 8007eee:	440b      	add	r3, r1
 8007ef0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007ef4:	e00a      	b.n	8007f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	b2da      	uxtb	r2, r3
 8007efa:	4908      	ldr	r1, [pc, #32]	; (8007f1c <__NVIC_SetPriority+0x50>)
 8007efc:	79fb      	ldrb	r3, [r7, #7]
 8007efe:	f003 030f 	and.w	r3, r3, #15
 8007f02:	3b04      	subs	r3, #4
 8007f04:	0112      	lsls	r2, r2, #4
 8007f06:	b2d2      	uxtb	r2, r2
 8007f08:	440b      	add	r3, r1
 8007f0a:	761a      	strb	r2, [r3, #24]
}
 8007f0c:	bf00      	nop
 8007f0e:	370c      	adds	r7, #12
 8007f10:	46bd      	mov	sp, r7
 8007f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f16:	4770      	bx	lr
 8007f18:	e000e100 	.word	0xe000e100
 8007f1c:	e000ed00 	.word	0xe000ed00

08007f20 <NVIC_EncodePriority>:
{
 8007f20:	b480      	push	{r7}
 8007f22:	b089      	sub	sp, #36	; 0x24
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	60b9      	str	r1, [r7, #8]
 8007f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f003 0307 	and.w	r3, r3, #7
 8007f32:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	f1c3 0307 	rsb	r3, r3, #7
 8007f3a:	2b04      	cmp	r3, #4
 8007f3c:	bf28      	it	cs
 8007f3e:	2304      	movcs	r3, #4
 8007f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007f42:	69fb      	ldr	r3, [r7, #28]
 8007f44:	3304      	adds	r3, #4
 8007f46:	2b06      	cmp	r3, #6
 8007f48:	d902      	bls.n	8007f50 <NVIC_EncodePriority+0x30>
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	3b03      	subs	r3, #3
 8007f4e:	e000      	b.n	8007f52 <NVIC_EncodePriority+0x32>
 8007f50:	2300      	movs	r3, #0
 8007f52:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f5e:	43da      	mvns	r2, r3
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	401a      	ands	r2, r3
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007f68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8007f72:	43d9      	mvns	r1, r3
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f78:	4313      	orrs	r3, r2
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3724      	adds	r7, #36	; 0x24
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr
	...

08007f88 <SysTick_Config>:
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	3b01      	subs	r3, #1
 8007f94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007f98:	d301      	bcc.n	8007f9e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e00f      	b.n	8007fbe <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007f9e:	4a0a      	ldr	r2, [pc, #40]	; (8007fc8 <SysTick_Config+0x40>)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007fa6:	210f      	movs	r1, #15
 8007fa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fac:	f7ff ff8e 	bl	8007ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007fb0:	4b05      	ldr	r3, [pc, #20]	; (8007fc8 <SysTick_Config+0x40>)
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007fb6:	4b04      	ldr	r3, [pc, #16]	; (8007fc8 <SysTick_Config+0x40>)
 8007fb8:	2207      	movs	r2, #7
 8007fba:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3708      	adds	r7, #8
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	e000e010 	.word	0xe000e010

08007fcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f7ff ff29 	bl	8007e2c <__NVIC_SetPriorityGrouping>
}
 8007fda:	bf00      	nop
 8007fdc:	3708      	adds	r7, #8
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b086      	sub	sp, #24
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	4603      	mov	r3, r0
 8007fea:	60b9      	str	r1, [r7, #8]
 8007fec:	607a      	str	r2, [r7, #4]
 8007fee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007ff4:	f7ff ff3e 	bl	8007e74 <__NVIC_GetPriorityGrouping>
 8007ff8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007ffa:	687a      	ldr	r2, [r7, #4]
 8007ffc:	68b9      	ldr	r1, [r7, #8]
 8007ffe:	6978      	ldr	r0, [r7, #20]
 8008000:	f7ff ff8e 	bl	8007f20 <NVIC_EncodePriority>
 8008004:	4602      	mov	r2, r0
 8008006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800800a:	4611      	mov	r1, r2
 800800c:	4618      	mov	r0, r3
 800800e:	f7ff ff5d 	bl	8007ecc <__NVIC_SetPriority>
}
 8008012:	bf00      	nop
 8008014:	3718      	adds	r7, #24
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b082      	sub	sp, #8
 800801e:	af00      	add	r7, sp, #0
 8008020:	4603      	mov	r3, r0
 8008022:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008028:	4618      	mov	r0, r3
 800802a:	f7ff ff31 	bl	8007e90 <__NVIC_EnableIRQ>
}
 800802e:	bf00      	nop
 8008030:	3708      	adds	r7, #8
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b082      	sub	sp, #8
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f7ff ffa2 	bl	8007f88 <SysTick_Config>
 8008044:	4603      	mov	r3, r0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3708      	adds	r7, #8
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
	...

08008050 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b086      	sub	sp, #24
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008058:	2300      	movs	r3, #0
 800805a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800805c:	f7ff fa7a 	bl	8007554 <HAL_GetTick>
 8008060:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d101      	bne.n	800806c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008068:	2301      	movs	r3, #1
 800806a:	e099      	b.n	80081a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2202      	movs	r2, #2
 8008078:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	681a      	ldr	r2, [r3, #0]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f022 0201 	bic.w	r2, r2, #1
 800808a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800808c:	e00f      	b.n	80080ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800808e:	f7ff fa61 	bl	8007554 <HAL_GetTick>
 8008092:	4602      	mov	r2, r0
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	1ad3      	subs	r3, r2, r3
 8008098:	2b05      	cmp	r3, #5
 800809a:	d908      	bls.n	80080ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2220      	movs	r2, #32
 80080a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2203      	movs	r2, #3
 80080a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80080aa:	2303      	movs	r3, #3
 80080ac:	e078      	b.n	80081a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f003 0301 	and.w	r3, r3, #1
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d1e8      	bne.n	800808e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80080c4:	697a      	ldr	r2, [r7, #20]
 80080c6:	4b38      	ldr	r3, [pc, #224]	; (80081a8 <HAL_DMA_Init+0x158>)
 80080c8:	4013      	ands	r3, r2
 80080ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	685a      	ldr	r2, [r3, #4]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80080da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	691b      	ldr	r3, [r3, #16]
 80080e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80080e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	699b      	ldr	r3, [r3, #24]
 80080ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6a1b      	ldr	r3, [r3, #32]
 80080f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80080fa:	697a      	ldr	r2, [r7, #20]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008104:	2b04      	cmp	r3, #4
 8008106:	d107      	bne.n	8008118 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008110:	4313      	orrs	r3, r2
 8008112:	697a      	ldr	r2, [r7, #20]
 8008114:	4313      	orrs	r3, r2
 8008116:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	697a      	ldr	r2, [r7, #20]
 800811e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	695b      	ldr	r3, [r3, #20]
 8008126:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	f023 0307 	bic.w	r3, r3, #7
 800812e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008134:	697a      	ldr	r2, [r7, #20]
 8008136:	4313      	orrs	r3, r2
 8008138:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800813e:	2b04      	cmp	r3, #4
 8008140:	d117      	bne.n	8008172 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008146:	697a      	ldr	r2, [r7, #20]
 8008148:	4313      	orrs	r3, r2
 800814a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00e      	beq.n	8008172 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 fb0d 	bl	8008774 <DMA_CheckFifoParam>
 800815a:	4603      	mov	r3, r0
 800815c:	2b00      	cmp	r3, #0
 800815e:	d008      	beq.n	8008172 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2240      	movs	r2, #64	; 0x40
 8008164:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2201      	movs	r2, #1
 800816a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800816e:	2301      	movs	r3, #1
 8008170:	e016      	b.n	80081a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	697a      	ldr	r2, [r7, #20]
 8008178:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 fac4 	bl	8008708 <DMA_CalcBaseAndBitshift>
 8008180:	4603      	mov	r3, r0
 8008182:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008188:	223f      	movs	r2, #63	; 0x3f
 800818a:	409a      	lsls	r2, r3
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2201      	movs	r2, #1
 800819a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800819e:	2300      	movs	r3, #0
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3718      	adds	r7, #24
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	f010803f 	.word	0xf010803f

080081ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b086      	sub	sp, #24
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	607a      	str	r2, [r7, #4]
 80081b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081ba:	2300      	movs	r3, #0
 80081bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d101      	bne.n	80081d2 <HAL_DMA_Start_IT+0x26>
 80081ce:	2302      	movs	r3, #2
 80081d0:	e040      	b.n	8008254 <HAL_DMA_Start_IT+0xa8>
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2201      	movs	r2, #1
 80081d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d12f      	bne.n	8008246 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2202      	movs	r2, #2
 80081ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2200      	movs	r2, #0
 80081f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	68b9      	ldr	r1, [r7, #8]
 80081fa:	68f8      	ldr	r0, [r7, #12]
 80081fc:	f000 fa56 	bl	80086ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008204:	223f      	movs	r2, #63	; 0x3f
 8008206:	409a      	lsls	r2, r3
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f042 0216 	orr.w	r2, r2, #22
 800821a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008220:	2b00      	cmp	r3, #0
 8008222:	d007      	beq.n	8008234 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f042 0208 	orr.w	r2, r2, #8
 8008232:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f042 0201 	orr.w	r2, r2, #1
 8008242:	601a      	str	r2, [r3, #0]
 8008244:	e005      	b.n	8008252 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2200      	movs	r2, #0
 800824a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800824e:	2302      	movs	r3, #2
 8008250:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008252:	7dfb      	ldrb	r3, [r7, #23]
}
 8008254:	4618      	mov	r0, r3
 8008256:	3718      	adds	r7, #24
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008268:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800826a:	f7ff f973 	bl	8007554 <HAL_GetTick>
 800826e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008276:	b2db      	uxtb	r3, r3
 8008278:	2b02      	cmp	r3, #2
 800827a:	d008      	beq.n	800828e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2280      	movs	r2, #128	; 0x80
 8008280:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	e052      	b.n	8008334 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f022 0216 	bic.w	r2, r2, #22
 800829c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	695a      	ldr	r2, [r3, #20]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80082ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d103      	bne.n	80082be <HAL_DMA_Abort+0x62>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d007      	beq.n	80082ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f022 0208 	bic.w	r2, r2, #8
 80082cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f022 0201 	bic.w	r2, r2, #1
 80082dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80082de:	e013      	b.n	8008308 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80082e0:	f7ff f938 	bl	8007554 <HAL_GetTick>
 80082e4:	4602      	mov	r2, r0
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	1ad3      	subs	r3, r2, r3
 80082ea:	2b05      	cmp	r3, #5
 80082ec:	d90c      	bls.n	8008308 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2220      	movs	r2, #32
 80082f2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2203      	movs	r2, #3
 8008300:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8008304:	2303      	movs	r3, #3
 8008306:	e015      	b.n	8008334 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f003 0301 	and.w	r3, r3, #1
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1e4      	bne.n	80082e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800831a:	223f      	movs	r2, #63	; 0x3f
 800831c:	409a      	lsls	r2, r3
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800834a:	b2db      	uxtb	r3, r3
 800834c:	2b02      	cmp	r3, #2
 800834e:	d004      	beq.n	800835a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2280      	movs	r2, #128	; 0x80
 8008354:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	e00c      	b.n	8008374 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2205      	movs	r2, #5
 800835e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	681a      	ldr	r2, [r3, #0]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f022 0201 	bic.w	r2, r2, #1
 8008370:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b086      	sub	sp, #24
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008388:	2300      	movs	r3, #0
 800838a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800838c:	4b92      	ldr	r3, [pc, #584]	; (80085d8 <HAL_DMA_IRQHandler+0x258>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a92      	ldr	r2, [pc, #584]	; (80085dc <HAL_DMA_IRQHandler+0x25c>)
 8008392:	fba2 2303 	umull	r2, r3, r2, r3
 8008396:	0a9b      	lsrs	r3, r3, #10
 8008398:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800839e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80083a0:	693b      	ldr	r3, [r7, #16]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083aa:	2208      	movs	r2, #8
 80083ac:	409a      	lsls	r2, r3
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	4013      	ands	r3, r2
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d01a      	beq.n	80083ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 0304 	and.w	r3, r3, #4
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d013      	beq.n	80083ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f022 0204 	bic.w	r2, r2, #4
 80083d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083d8:	2208      	movs	r2, #8
 80083da:	409a      	lsls	r2, r3
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083e4:	f043 0201 	orr.w	r2, r3, #1
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083f0:	2201      	movs	r2, #1
 80083f2:	409a      	lsls	r2, r3
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	4013      	ands	r3, r2
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d012      	beq.n	8008422 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	695b      	ldr	r3, [r3, #20]
 8008402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00b      	beq.n	8008422 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800840e:	2201      	movs	r2, #1
 8008410:	409a      	lsls	r2, r3
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800841a:	f043 0202 	orr.w	r2, r3, #2
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008426:	2204      	movs	r2, #4
 8008428:	409a      	lsls	r2, r3
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	4013      	ands	r3, r2
 800842e:	2b00      	cmp	r3, #0
 8008430:	d012      	beq.n	8008458 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 0302 	and.w	r3, r3, #2
 800843c:	2b00      	cmp	r3, #0
 800843e:	d00b      	beq.n	8008458 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008444:	2204      	movs	r2, #4
 8008446:	409a      	lsls	r2, r3
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008450:	f043 0204 	orr.w	r2, r3, #4
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800845c:	2210      	movs	r2, #16
 800845e:	409a      	lsls	r2, r3
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	4013      	ands	r3, r2
 8008464:	2b00      	cmp	r3, #0
 8008466:	d043      	beq.n	80084f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f003 0308 	and.w	r3, r3, #8
 8008472:	2b00      	cmp	r3, #0
 8008474:	d03c      	beq.n	80084f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800847a:	2210      	movs	r2, #16
 800847c:	409a      	lsls	r2, r3
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800848c:	2b00      	cmp	r3, #0
 800848e:	d018      	beq.n	80084c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800849a:	2b00      	cmp	r3, #0
 800849c:	d108      	bne.n	80084b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d024      	beq.n	80084f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	4798      	blx	r3
 80084ae:	e01f      	b.n	80084f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d01b      	beq.n	80084f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	4798      	blx	r3
 80084c0:	e016      	b.n	80084f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d107      	bne.n	80084e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f022 0208 	bic.w	r2, r2, #8
 80084de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d003      	beq.n	80084f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084f4:	2220      	movs	r2, #32
 80084f6:	409a      	lsls	r2, r3
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	4013      	ands	r3, r2
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f000 808e 	beq.w	800861e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f003 0310 	and.w	r3, r3, #16
 800850c:	2b00      	cmp	r3, #0
 800850e:	f000 8086 	beq.w	800861e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008516:	2220      	movs	r2, #32
 8008518:	409a      	lsls	r2, r3
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008524:	b2db      	uxtb	r3, r3
 8008526:	2b05      	cmp	r3, #5
 8008528:	d136      	bne.n	8008598 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f022 0216 	bic.w	r2, r2, #22
 8008538:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	695a      	ldr	r2, [r3, #20]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008548:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854e:	2b00      	cmp	r3, #0
 8008550:	d103      	bne.n	800855a <HAL_DMA_IRQHandler+0x1da>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008556:	2b00      	cmp	r3, #0
 8008558:	d007      	beq.n	800856a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f022 0208 	bic.w	r2, r2, #8
 8008568:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800856e:	223f      	movs	r2, #63	; 0x3f
 8008570:	409a      	lsls	r2, r3
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2201      	movs	r2, #1
 8008582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800858a:	2b00      	cmp	r3, #0
 800858c:	d07d      	beq.n	800868a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	4798      	blx	r3
        }
        return;
 8008596:	e078      	b.n	800868a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d01c      	beq.n	80085e0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d108      	bne.n	80085c6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d030      	beq.n	800861e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	4798      	blx	r3
 80085c4:	e02b      	b.n	800861e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d027      	beq.n	800861e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	4798      	blx	r3
 80085d6:	e022      	b.n	800861e <HAL_DMA_IRQHandler+0x29e>
 80085d8:	20000158 	.word	0x20000158
 80085dc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d10f      	bne.n	800860e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f022 0210 	bic.w	r2, r2, #16
 80085fc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2201      	movs	r2, #1
 800860a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008612:	2b00      	cmp	r3, #0
 8008614:	d003      	beq.n	800861e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008622:	2b00      	cmp	r3, #0
 8008624:	d032      	beq.n	800868c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800862a:	f003 0301 	and.w	r3, r3, #1
 800862e:	2b00      	cmp	r3, #0
 8008630:	d022      	beq.n	8008678 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2205      	movs	r2, #5
 8008636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	681a      	ldr	r2, [r3, #0]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f022 0201 	bic.w	r2, r2, #1
 8008648:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800864a:	68bb      	ldr	r3, [r7, #8]
 800864c:	3301      	adds	r3, #1
 800864e:	60bb      	str	r3, [r7, #8]
 8008650:	697a      	ldr	r2, [r7, #20]
 8008652:	429a      	cmp	r2, r3
 8008654:	d307      	bcc.n	8008666 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f003 0301 	and.w	r3, r3, #1
 8008660:	2b00      	cmp	r3, #0
 8008662:	d1f2      	bne.n	800864a <HAL_DMA_IRQHandler+0x2ca>
 8008664:	e000      	b.n	8008668 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8008666:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800867c:	2b00      	cmp	r3, #0
 800867e:	d005      	beq.n	800868c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	4798      	blx	r3
 8008688:	e000      	b.n	800868c <HAL_DMA_IRQHandler+0x30c>
        return;
 800868a:	bf00      	nop
    }
  }
}
 800868c:	3718      	adds	r7, #24
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop

08008694 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	370c      	adds	r7, #12
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b085      	sub	sp, #20
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	607a      	str	r2, [r7, #4]
 80086b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80086c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	683a      	ldr	r2, [r7, #0]
 80086d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	2b40      	cmp	r3, #64	; 0x40
 80086d8:	d108      	bne.n	80086ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	68ba      	ldr	r2, [r7, #8]
 80086e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80086ea:	e007      	b.n	80086fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	68ba      	ldr	r2, [r7, #8]
 80086f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	60da      	str	r2, [r3, #12]
}
 80086fc:	bf00      	nop
 80086fe:	3714      	adds	r7, #20
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008708:	b480      	push	{r7}
 800870a:	b085      	sub	sp, #20
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	b2db      	uxtb	r3, r3
 8008716:	3b10      	subs	r3, #16
 8008718:	4a14      	ldr	r2, [pc, #80]	; (800876c <DMA_CalcBaseAndBitshift+0x64>)
 800871a:	fba2 2303 	umull	r2, r3, r2, r3
 800871e:	091b      	lsrs	r3, r3, #4
 8008720:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008722:	4a13      	ldr	r2, [pc, #76]	; (8008770 <DMA_CalcBaseAndBitshift+0x68>)
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	4413      	add	r3, r2
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	461a      	mov	r2, r3
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2b03      	cmp	r3, #3
 8008734:	d909      	bls.n	800874a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800873e:	f023 0303 	bic.w	r3, r3, #3
 8008742:	1d1a      	adds	r2, r3, #4
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	659a      	str	r2, [r3, #88]	; 0x58
 8008748:	e007      	b.n	800875a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008752:	f023 0303 	bic.w	r3, r3, #3
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800875e:	4618      	mov	r0, r3
 8008760:	3714      	adds	r7, #20
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr
 800876a:	bf00      	nop
 800876c:	aaaaaaab 	.word	0xaaaaaaab
 8008770:	080150f4 	.word	0x080150f4

08008774 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008774:	b480      	push	{r7}
 8008776:	b085      	sub	sp, #20
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800877c:	2300      	movs	r3, #0
 800877e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008784:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	699b      	ldr	r3, [r3, #24]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d11f      	bne.n	80087ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	2b03      	cmp	r3, #3
 8008792:	d855      	bhi.n	8008840 <DMA_CheckFifoParam+0xcc>
 8008794:	a201      	add	r2, pc, #4	; (adr r2, 800879c <DMA_CheckFifoParam+0x28>)
 8008796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800879a:	bf00      	nop
 800879c:	080087ad 	.word	0x080087ad
 80087a0:	080087bf 	.word	0x080087bf
 80087a4:	080087ad 	.word	0x080087ad
 80087a8:	08008841 	.word	0x08008841
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d045      	beq.n	8008844 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80087bc:	e042      	b.n	8008844 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80087c6:	d13f      	bne.n	8008848 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80087c8:	2301      	movs	r3, #1
 80087ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80087cc:	e03c      	b.n	8008848 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	699b      	ldr	r3, [r3, #24]
 80087d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087d6:	d121      	bne.n	800881c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	2b03      	cmp	r3, #3
 80087dc:	d836      	bhi.n	800884c <DMA_CheckFifoParam+0xd8>
 80087de:	a201      	add	r2, pc, #4	; (adr r2, 80087e4 <DMA_CheckFifoParam+0x70>)
 80087e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e4:	080087f5 	.word	0x080087f5
 80087e8:	080087fb 	.word	0x080087fb
 80087ec:	080087f5 	.word	0x080087f5
 80087f0:	0800880d 	.word	0x0800880d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80087f4:	2301      	movs	r3, #1
 80087f6:	73fb      	strb	r3, [r7, #15]
      break;
 80087f8:	e02f      	b.n	800885a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008802:	2b00      	cmp	r3, #0
 8008804:	d024      	beq.n	8008850 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8008806:	2301      	movs	r3, #1
 8008808:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800880a:	e021      	b.n	8008850 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008810:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008814:	d11e      	bne.n	8008854 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800881a:	e01b      	b.n	8008854 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	2b02      	cmp	r3, #2
 8008820:	d902      	bls.n	8008828 <DMA_CheckFifoParam+0xb4>
 8008822:	2b03      	cmp	r3, #3
 8008824:	d003      	beq.n	800882e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008826:	e018      	b.n	800885a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8008828:	2301      	movs	r3, #1
 800882a:	73fb      	strb	r3, [r7, #15]
      break;
 800882c:	e015      	b.n	800885a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008832:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008836:	2b00      	cmp	r3, #0
 8008838:	d00e      	beq.n	8008858 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800883a:	2301      	movs	r3, #1
 800883c:	73fb      	strb	r3, [r7, #15]
      break;
 800883e:	e00b      	b.n	8008858 <DMA_CheckFifoParam+0xe4>
      break;
 8008840:	bf00      	nop
 8008842:	e00a      	b.n	800885a <DMA_CheckFifoParam+0xe6>
      break;
 8008844:	bf00      	nop
 8008846:	e008      	b.n	800885a <DMA_CheckFifoParam+0xe6>
      break;
 8008848:	bf00      	nop
 800884a:	e006      	b.n	800885a <DMA_CheckFifoParam+0xe6>
      break;
 800884c:	bf00      	nop
 800884e:	e004      	b.n	800885a <DMA_CheckFifoParam+0xe6>
      break;
 8008850:	bf00      	nop
 8008852:	e002      	b.n	800885a <DMA_CheckFifoParam+0xe6>
      break;   
 8008854:	bf00      	nop
 8008856:	e000      	b.n	800885a <DMA_CheckFifoParam+0xe6>
      break;
 8008858:	bf00      	nop
    }
  } 
  
  return status; 
 800885a:	7bfb      	ldrb	r3, [r7, #15]
}
 800885c:	4618      	mov	r0, r3
 800885e:	3714      	adds	r7, #20
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008868:	b480      	push	{r7}
 800886a:	b089      	sub	sp, #36	; 0x24
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008872:	2300      	movs	r3, #0
 8008874:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008876:	2300      	movs	r3, #0
 8008878:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800887a:	2300      	movs	r3, #0
 800887c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800887e:	2300      	movs	r3, #0
 8008880:	61fb      	str	r3, [r7, #28]
 8008882:	e16b      	b.n	8008b5c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008884:	2201      	movs	r2, #1
 8008886:	69fb      	ldr	r3, [r7, #28]
 8008888:	fa02 f303 	lsl.w	r3, r2, r3
 800888c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	697a      	ldr	r2, [r7, #20]
 8008894:	4013      	ands	r3, r2
 8008896:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008898:	693a      	ldr	r2, [r7, #16]
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	429a      	cmp	r2, r3
 800889e:	f040 815a 	bne.w	8008b56 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d00b      	beq.n	80088c2 <HAL_GPIO_Init+0x5a>
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	2b02      	cmp	r3, #2
 80088b0:	d007      	beq.n	80088c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80088b6:	2b11      	cmp	r3, #17
 80088b8:	d003      	beq.n	80088c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	2b12      	cmp	r3, #18
 80088c0:	d130      	bne.n	8008924 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	005b      	lsls	r3, r3, #1
 80088cc:	2203      	movs	r2, #3
 80088ce:	fa02 f303 	lsl.w	r3, r2, r3
 80088d2:	43db      	mvns	r3, r3
 80088d4:	69ba      	ldr	r2, [r7, #24]
 80088d6:	4013      	ands	r3, r2
 80088d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	68da      	ldr	r2, [r3, #12]
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	005b      	lsls	r3, r3, #1
 80088e2:	fa02 f303 	lsl.w	r3, r2, r3
 80088e6:	69ba      	ldr	r2, [r7, #24]
 80088e8:	4313      	orrs	r3, r2
 80088ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	69ba      	ldr	r2, [r7, #24]
 80088f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80088f8:	2201      	movs	r2, #1
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008900:	43db      	mvns	r3, r3
 8008902:	69ba      	ldr	r2, [r7, #24]
 8008904:	4013      	ands	r3, r2
 8008906:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	091b      	lsrs	r3, r3, #4
 800890e:	f003 0201 	and.w	r2, r3, #1
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	fa02 f303 	lsl.w	r3, r2, r3
 8008918:	69ba      	ldr	r2, [r7, #24]
 800891a:	4313      	orrs	r3, r2
 800891c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	69ba      	ldr	r2, [r7, #24]
 8008922:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800892a:	69fb      	ldr	r3, [r7, #28]
 800892c:	005b      	lsls	r3, r3, #1
 800892e:	2203      	movs	r2, #3
 8008930:	fa02 f303 	lsl.w	r3, r2, r3
 8008934:	43db      	mvns	r3, r3
 8008936:	69ba      	ldr	r2, [r7, #24]
 8008938:	4013      	ands	r3, r2
 800893a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	689a      	ldr	r2, [r3, #8]
 8008940:	69fb      	ldr	r3, [r7, #28]
 8008942:	005b      	lsls	r3, r3, #1
 8008944:	fa02 f303 	lsl.w	r3, r2, r3
 8008948:	69ba      	ldr	r2, [r7, #24]
 800894a:	4313      	orrs	r3, r2
 800894c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	69ba      	ldr	r2, [r7, #24]
 8008952:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	2b02      	cmp	r3, #2
 800895a:	d003      	beq.n	8008964 <HAL_GPIO_Init+0xfc>
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	2b12      	cmp	r3, #18
 8008962:	d123      	bne.n	80089ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008964:	69fb      	ldr	r3, [r7, #28]
 8008966:	08da      	lsrs	r2, r3, #3
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	3208      	adds	r2, #8
 800896c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008970:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008972:	69fb      	ldr	r3, [r7, #28]
 8008974:	f003 0307 	and.w	r3, r3, #7
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	220f      	movs	r2, #15
 800897c:	fa02 f303 	lsl.w	r3, r2, r3
 8008980:	43db      	mvns	r3, r3
 8008982:	69ba      	ldr	r2, [r7, #24]
 8008984:	4013      	ands	r3, r2
 8008986:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	691a      	ldr	r2, [r3, #16]
 800898c:	69fb      	ldr	r3, [r7, #28]
 800898e:	f003 0307 	and.w	r3, r3, #7
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	fa02 f303 	lsl.w	r3, r2, r3
 8008998:	69ba      	ldr	r2, [r7, #24]
 800899a:	4313      	orrs	r3, r2
 800899c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	08da      	lsrs	r2, r3, #3
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	3208      	adds	r2, #8
 80089a6:	69b9      	ldr	r1, [r7, #24]
 80089a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	005b      	lsls	r3, r3, #1
 80089b6:	2203      	movs	r2, #3
 80089b8:	fa02 f303 	lsl.w	r3, r2, r3
 80089bc:	43db      	mvns	r3, r3
 80089be:	69ba      	ldr	r2, [r7, #24]
 80089c0:	4013      	ands	r3, r2
 80089c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	f003 0203 	and.w	r2, r3, #3
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	005b      	lsls	r3, r3, #1
 80089d0:	fa02 f303 	lsl.w	r3, r2, r3
 80089d4:	69ba      	ldr	r2, [r7, #24]
 80089d6:	4313      	orrs	r3, r2
 80089d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	69ba      	ldr	r2, [r7, #24]
 80089de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f000 80b4 	beq.w	8008b56 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80089ee:	2300      	movs	r3, #0
 80089f0:	60fb      	str	r3, [r7, #12]
 80089f2:	4b5f      	ldr	r3, [pc, #380]	; (8008b70 <HAL_GPIO_Init+0x308>)
 80089f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089f6:	4a5e      	ldr	r2, [pc, #376]	; (8008b70 <HAL_GPIO_Init+0x308>)
 80089f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80089fc:	6453      	str	r3, [r2, #68]	; 0x44
 80089fe:	4b5c      	ldr	r3, [pc, #368]	; (8008b70 <HAL_GPIO_Init+0x308>)
 8008a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a06:	60fb      	str	r3, [r7, #12]
 8008a08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008a0a:	4a5a      	ldr	r2, [pc, #360]	; (8008b74 <HAL_GPIO_Init+0x30c>)
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	089b      	lsrs	r3, r3, #2
 8008a10:	3302      	adds	r3, #2
 8008a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	f003 0303 	and.w	r3, r3, #3
 8008a1e:	009b      	lsls	r3, r3, #2
 8008a20:	220f      	movs	r2, #15
 8008a22:	fa02 f303 	lsl.w	r3, r2, r3
 8008a26:	43db      	mvns	r3, r3
 8008a28:	69ba      	ldr	r2, [r7, #24]
 8008a2a:	4013      	ands	r3, r2
 8008a2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	4a51      	ldr	r2, [pc, #324]	; (8008b78 <HAL_GPIO_Init+0x310>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d02b      	beq.n	8008a8e <HAL_GPIO_Init+0x226>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	4a50      	ldr	r2, [pc, #320]	; (8008b7c <HAL_GPIO_Init+0x314>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d025      	beq.n	8008a8a <HAL_GPIO_Init+0x222>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	4a4f      	ldr	r2, [pc, #316]	; (8008b80 <HAL_GPIO_Init+0x318>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d01f      	beq.n	8008a86 <HAL_GPIO_Init+0x21e>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4a4e      	ldr	r2, [pc, #312]	; (8008b84 <HAL_GPIO_Init+0x31c>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d019      	beq.n	8008a82 <HAL_GPIO_Init+0x21a>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4a4d      	ldr	r2, [pc, #308]	; (8008b88 <HAL_GPIO_Init+0x320>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d013      	beq.n	8008a7e <HAL_GPIO_Init+0x216>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	4a4c      	ldr	r2, [pc, #304]	; (8008b8c <HAL_GPIO_Init+0x324>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d00d      	beq.n	8008a7a <HAL_GPIO_Init+0x212>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	4a4b      	ldr	r2, [pc, #300]	; (8008b90 <HAL_GPIO_Init+0x328>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d007      	beq.n	8008a76 <HAL_GPIO_Init+0x20e>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	4a4a      	ldr	r2, [pc, #296]	; (8008b94 <HAL_GPIO_Init+0x32c>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d101      	bne.n	8008a72 <HAL_GPIO_Init+0x20a>
 8008a6e:	2307      	movs	r3, #7
 8008a70:	e00e      	b.n	8008a90 <HAL_GPIO_Init+0x228>
 8008a72:	2308      	movs	r3, #8
 8008a74:	e00c      	b.n	8008a90 <HAL_GPIO_Init+0x228>
 8008a76:	2306      	movs	r3, #6
 8008a78:	e00a      	b.n	8008a90 <HAL_GPIO_Init+0x228>
 8008a7a:	2305      	movs	r3, #5
 8008a7c:	e008      	b.n	8008a90 <HAL_GPIO_Init+0x228>
 8008a7e:	2304      	movs	r3, #4
 8008a80:	e006      	b.n	8008a90 <HAL_GPIO_Init+0x228>
 8008a82:	2303      	movs	r3, #3
 8008a84:	e004      	b.n	8008a90 <HAL_GPIO_Init+0x228>
 8008a86:	2302      	movs	r3, #2
 8008a88:	e002      	b.n	8008a90 <HAL_GPIO_Init+0x228>
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e000      	b.n	8008a90 <HAL_GPIO_Init+0x228>
 8008a8e:	2300      	movs	r3, #0
 8008a90:	69fa      	ldr	r2, [r7, #28]
 8008a92:	f002 0203 	and.w	r2, r2, #3
 8008a96:	0092      	lsls	r2, r2, #2
 8008a98:	4093      	lsls	r3, r2
 8008a9a:	69ba      	ldr	r2, [r7, #24]
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008aa0:	4934      	ldr	r1, [pc, #208]	; (8008b74 <HAL_GPIO_Init+0x30c>)
 8008aa2:	69fb      	ldr	r3, [r7, #28]
 8008aa4:	089b      	lsrs	r3, r3, #2
 8008aa6:	3302      	adds	r3, #2
 8008aa8:	69ba      	ldr	r2, [r7, #24]
 8008aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008aae:	4b3a      	ldr	r3, [pc, #232]	; (8008b98 <HAL_GPIO_Init+0x330>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	43db      	mvns	r3, r3
 8008ab8:	69ba      	ldr	r2, [r7, #24]
 8008aba:	4013      	ands	r3, r2
 8008abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d003      	beq.n	8008ad2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008aca:	69ba      	ldr	r2, [r7, #24]
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008ad2:	4a31      	ldr	r2, [pc, #196]	; (8008b98 <HAL_GPIO_Init+0x330>)
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008ad8:	4b2f      	ldr	r3, [pc, #188]	; (8008b98 <HAL_GPIO_Init+0x330>)
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	43db      	mvns	r3, r3
 8008ae2:	69ba      	ldr	r2, [r7, #24]
 8008ae4:	4013      	ands	r3, r2
 8008ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d003      	beq.n	8008afc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008af4:	69ba      	ldr	r2, [r7, #24]
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	4313      	orrs	r3, r2
 8008afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008afc:	4a26      	ldr	r2, [pc, #152]	; (8008b98 <HAL_GPIO_Init+0x330>)
 8008afe:	69bb      	ldr	r3, [r7, #24]
 8008b00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008b02:	4b25      	ldr	r3, [pc, #148]	; (8008b98 <HAL_GPIO_Init+0x330>)
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	43db      	mvns	r3, r3
 8008b0c:	69ba      	ldr	r2, [r7, #24]
 8008b0e:	4013      	ands	r3, r2
 8008b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d003      	beq.n	8008b26 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008b1e:	69ba      	ldr	r2, [r7, #24]
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008b26:	4a1c      	ldr	r2, [pc, #112]	; (8008b98 <HAL_GPIO_Init+0x330>)
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008b2c:	4b1a      	ldr	r3, [pc, #104]	; (8008b98 <HAL_GPIO_Init+0x330>)
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	43db      	mvns	r3, r3
 8008b36:	69ba      	ldr	r2, [r7, #24]
 8008b38:	4013      	ands	r3, r2
 8008b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d003      	beq.n	8008b50 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008b48:	69ba      	ldr	r2, [r7, #24]
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008b50:	4a11      	ldr	r2, [pc, #68]	; (8008b98 <HAL_GPIO_Init+0x330>)
 8008b52:	69bb      	ldr	r3, [r7, #24]
 8008b54:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008b56:	69fb      	ldr	r3, [r7, #28]
 8008b58:	3301      	adds	r3, #1
 8008b5a:	61fb      	str	r3, [r7, #28]
 8008b5c:	69fb      	ldr	r3, [r7, #28]
 8008b5e:	2b0f      	cmp	r3, #15
 8008b60:	f67f ae90 	bls.w	8008884 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008b64:	bf00      	nop
 8008b66:	3724      	adds	r7, #36	; 0x24
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr
 8008b70:	40023800 	.word	0x40023800
 8008b74:	40013800 	.word	0x40013800
 8008b78:	40020000 	.word	0x40020000
 8008b7c:	40020400 	.word	0x40020400
 8008b80:	40020800 	.word	0x40020800
 8008b84:	40020c00 	.word	0x40020c00
 8008b88:	40021000 	.word	0x40021000
 8008b8c:	40021400 	.word	0x40021400
 8008b90:	40021800 	.word	0x40021800
 8008b94:	40021c00 	.word	0x40021c00
 8008b98:	40013c00 	.word	0x40013c00

08008b9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b085      	sub	sp, #20
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	691a      	ldr	r2, [r3, #16]
 8008bac:	887b      	ldrh	r3, [r7, #2]
 8008bae:	4013      	ands	r3, r2
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d002      	beq.n	8008bba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	73fb      	strb	r3, [r7, #15]
 8008bb8:	e001      	b.n	8008bbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3714      	adds	r7, #20
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr

08008bcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	807b      	strh	r3, [r7, #2]
 8008bd8:	4613      	mov	r3, r2
 8008bda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008bdc:	787b      	ldrb	r3, [r7, #1]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d003      	beq.n	8008bea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008be2:	887a      	ldrh	r2, [r7, #2]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008be8:	e003      	b.n	8008bf2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008bea:	887b      	ldrh	r3, [r7, #2]
 8008bec:	041a      	lsls	r2, r3, #16
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	619a      	str	r2, [r3, #24]
}
 8008bf2:	bf00      	nop
 8008bf4:	370c      	adds	r7, #12
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr

08008bfe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008bfe:	b480      	push	{r7}
 8008c00:	b083      	sub	sp, #12
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
 8008c06:	460b      	mov	r3, r1
 8008c08:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	695a      	ldr	r2, [r3, #20]
 8008c0e:	887b      	ldrh	r3, [r7, #2]
 8008c10:	401a      	ands	r2, r3
 8008c12:	887b      	ldrh	r3, [r7, #2]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d104      	bne.n	8008c22 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008c18:	887b      	ldrh	r3, [r7, #2]
 8008c1a:	041a      	lsls	r2, r3, #16
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8008c20:	e002      	b.n	8008c28 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8008c22:	887a      	ldrh	r2, [r7, #2]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	619a      	str	r2, [r3, #24]
}
 8008c28:	bf00      	nop
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d101      	bne.n	8008c46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	e11f      	b.n	8008e86 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d106      	bne.n	8008c60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2200      	movs	r2, #0
 8008c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f7f9 f8fc 	bl	8001e58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2224      	movs	r2, #36	; 0x24
 8008c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	681a      	ldr	r2, [r3, #0]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f022 0201 	bic.w	r2, r2, #1
 8008c76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008c86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008c96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008c98:	f001 fca4 	bl	800a5e4 <HAL_RCC_GetPCLK1Freq>
 8008c9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	4a7b      	ldr	r2, [pc, #492]	; (8008e90 <HAL_I2C_Init+0x25c>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d807      	bhi.n	8008cb8 <HAL_I2C_Init+0x84>
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	4a7a      	ldr	r2, [pc, #488]	; (8008e94 <HAL_I2C_Init+0x260>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	bf94      	ite	ls
 8008cb0:	2301      	movls	r3, #1
 8008cb2:	2300      	movhi	r3, #0
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	e006      	b.n	8008cc6 <HAL_I2C_Init+0x92>
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	4a77      	ldr	r2, [pc, #476]	; (8008e98 <HAL_I2C_Init+0x264>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	bf94      	ite	ls
 8008cc0:	2301      	movls	r3, #1
 8008cc2:	2300      	movhi	r3, #0
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d001      	beq.n	8008cce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008cca:	2301      	movs	r3, #1
 8008ccc:	e0db      	b.n	8008e86 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	4a72      	ldr	r2, [pc, #456]	; (8008e9c <HAL_I2C_Init+0x268>)
 8008cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8008cd6:	0c9b      	lsrs	r3, r3, #18
 8008cd8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	68ba      	ldr	r2, [r7, #8]
 8008cea:	430a      	orrs	r2, r1
 8008cec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	6a1b      	ldr	r3, [r3, #32]
 8008cf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	4a64      	ldr	r2, [pc, #400]	; (8008e90 <HAL_I2C_Init+0x25c>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d802      	bhi.n	8008d08 <HAL_I2C_Init+0xd4>
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	3301      	adds	r3, #1
 8008d06:	e009      	b.n	8008d1c <HAL_I2C_Init+0xe8>
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008d0e:	fb02 f303 	mul.w	r3, r2, r3
 8008d12:	4a63      	ldr	r2, [pc, #396]	; (8008ea0 <HAL_I2C_Init+0x26c>)
 8008d14:	fba2 2303 	umull	r2, r3, r2, r3
 8008d18:	099b      	lsrs	r3, r3, #6
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	6812      	ldr	r2, [r2, #0]
 8008d20:	430b      	orrs	r3, r1
 8008d22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	69db      	ldr	r3, [r3, #28]
 8008d2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008d2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	4956      	ldr	r1, [pc, #344]	; (8008e90 <HAL_I2C_Init+0x25c>)
 8008d38:	428b      	cmp	r3, r1
 8008d3a:	d80d      	bhi.n	8008d58 <HAL_I2C_Init+0x124>
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	1e59      	subs	r1, r3, #1
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	005b      	lsls	r3, r3, #1
 8008d46:	fbb1 f3f3 	udiv	r3, r1, r3
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d50:	2b04      	cmp	r3, #4
 8008d52:	bf38      	it	cc
 8008d54:	2304      	movcc	r3, #4
 8008d56:	e04f      	b.n	8008df8 <HAL_I2C_Init+0x1c4>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d111      	bne.n	8008d84 <HAL_I2C_Init+0x150>
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	1e58      	subs	r0, r3, #1
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6859      	ldr	r1, [r3, #4]
 8008d68:	460b      	mov	r3, r1
 8008d6a:	005b      	lsls	r3, r3, #1
 8008d6c:	440b      	add	r3, r1
 8008d6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d72:	3301      	adds	r3, #1
 8008d74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	bf0c      	ite	eq
 8008d7c:	2301      	moveq	r3, #1
 8008d7e:	2300      	movne	r3, #0
 8008d80:	b2db      	uxtb	r3, r3
 8008d82:	e012      	b.n	8008daa <HAL_I2C_Init+0x176>
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	1e58      	subs	r0, r3, #1
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6859      	ldr	r1, [r3, #4]
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	440b      	add	r3, r1
 8008d92:	0099      	lsls	r1, r3, #2
 8008d94:	440b      	add	r3, r1
 8008d96:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	bf0c      	ite	eq
 8008da4:	2301      	moveq	r3, #1
 8008da6:	2300      	movne	r3, #0
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d001      	beq.n	8008db2 <HAL_I2C_Init+0x17e>
 8008dae:	2301      	movs	r3, #1
 8008db0:	e022      	b.n	8008df8 <HAL_I2C_Init+0x1c4>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d10e      	bne.n	8008dd8 <HAL_I2C_Init+0x1a4>
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	1e58      	subs	r0, r3, #1
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6859      	ldr	r1, [r3, #4]
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	005b      	lsls	r3, r3, #1
 8008dc6:	440b      	add	r3, r1
 8008dc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8008dcc:	3301      	adds	r3, #1
 8008dce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dd6:	e00f      	b.n	8008df8 <HAL_I2C_Init+0x1c4>
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	1e58      	subs	r0, r3, #1
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6859      	ldr	r1, [r3, #4]
 8008de0:	460b      	mov	r3, r1
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	440b      	add	r3, r1
 8008de6:	0099      	lsls	r1, r3, #2
 8008de8:	440b      	add	r3, r1
 8008dea:	fbb0 f3f3 	udiv	r3, r0, r3
 8008dee:	3301      	adds	r3, #1
 8008df0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008df4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008df8:	6879      	ldr	r1, [r7, #4]
 8008dfa:	6809      	ldr	r1, [r1, #0]
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	69da      	ldr	r2, [r3, #28]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6a1b      	ldr	r3, [r3, #32]
 8008e12:	431a      	orrs	r2, r3
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	430a      	orrs	r2, r1
 8008e1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	689b      	ldr	r3, [r3, #8]
 8008e22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008e26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	6911      	ldr	r1, [r2, #16]
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	68d2      	ldr	r2, [r2, #12]
 8008e32:	4311      	orrs	r1, r2
 8008e34:	687a      	ldr	r2, [r7, #4]
 8008e36:	6812      	ldr	r2, [r2, #0]
 8008e38:	430b      	orrs	r3, r1
 8008e3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	68db      	ldr	r3, [r3, #12]
 8008e42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	695a      	ldr	r2, [r3, #20]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	699b      	ldr	r3, [r3, #24]
 8008e4e:	431a      	orrs	r2, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	430a      	orrs	r2, r1
 8008e56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f042 0201 	orr.w	r2, r2, #1
 8008e66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2220      	movs	r2, #32
 8008e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3710      	adds	r7, #16
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	000186a0 	.word	0x000186a0
 8008e94:	001e847f 	.word	0x001e847f
 8008e98:	003d08ff 	.word	0x003d08ff
 8008e9c:	431bde83 	.word	0x431bde83
 8008ea0:	10624dd3 	.word	0x10624dd3

08008ea4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b088      	sub	sp, #32
 8008ea8:	af02      	add	r7, sp, #8
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	607a      	str	r2, [r7, #4]
 8008eae:	461a      	mov	r2, r3
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	817b      	strh	r3, [r7, #10]
 8008eb4:	4613      	mov	r3, r2
 8008eb6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008eb8:	f7fe fb4c 	bl	8007554 <HAL_GetTick>
 8008ebc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	2b20      	cmp	r3, #32
 8008ec8:	f040 80e0 	bne.w	800908c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	9300      	str	r3, [sp, #0]
 8008ed0:	2319      	movs	r3, #25
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	4970      	ldr	r1, [pc, #448]	; (8009098 <HAL_I2C_Master_Transmit+0x1f4>)
 8008ed6:	68f8      	ldr	r0, [r7, #12]
 8008ed8:	f000 fd92 	bl	8009a00 <I2C_WaitOnFlagUntilTimeout>
 8008edc:	4603      	mov	r3, r0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d001      	beq.n	8008ee6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008ee2:	2302      	movs	r3, #2
 8008ee4:	e0d3      	b.n	800908e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d101      	bne.n	8008ef4 <HAL_I2C_Master_Transmit+0x50>
 8008ef0:	2302      	movs	r3, #2
 8008ef2:	e0cc      	b.n	800908e <HAL_I2C_Master_Transmit+0x1ea>
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f003 0301 	and.w	r3, r3, #1
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d007      	beq.n	8008f1a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f042 0201 	orr.w	r2, r2, #1
 8008f18:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008f28:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2221      	movs	r2, #33	; 0x21
 8008f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2210      	movs	r2, #16
 8008f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	893a      	ldrh	r2, [r7, #8]
 8008f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f50:	b29a      	uxth	r2, r3
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	4a50      	ldr	r2, [pc, #320]	; (800909c <HAL_I2C_Master_Transmit+0x1f8>)
 8008f5a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008f5c:	8979      	ldrh	r1, [r7, #10]
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	6a3a      	ldr	r2, [r7, #32]
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	f000 fbfe 	bl	8009764 <I2C_MasterRequestWrite>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d001      	beq.n	8008f72 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	e08d      	b.n	800908e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f72:	2300      	movs	r3, #0
 8008f74:	613b      	str	r3, [r7, #16]
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	695b      	ldr	r3, [r3, #20]
 8008f7c:	613b      	str	r3, [r7, #16]
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	699b      	ldr	r3, [r3, #24]
 8008f84:	613b      	str	r3, [r7, #16]
 8008f86:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008f88:	e066      	b.n	8009058 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f8a:	697a      	ldr	r2, [r7, #20]
 8008f8c:	6a39      	ldr	r1, [r7, #32]
 8008f8e:	68f8      	ldr	r0, [r7, #12]
 8008f90:	f000 fe0c 	bl	8009bac <I2C_WaitOnTXEFlagUntilTimeout>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00d      	beq.n	8008fb6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f9e:	2b04      	cmp	r3, #4
 8008fa0:	d107      	bne.n	8008fb2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	681a      	ldr	r2, [r3, #0]
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008fb0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e06b      	b.n	800908e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fba:	781a      	ldrb	r2, [r3, #0]
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc6:	1c5a      	adds	r2, r3, #1
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	3b01      	subs	r3, #1
 8008fd4:	b29a      	uxth	r2, r3
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fde:	3b01      	subs	r3, #1
 8008fe0:	b29a      	uxth	r2, r3
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	695b      	ldr	r3, [r3, #20]
 8008fec:	f003 0304 	and.w	r3, r3, #4
 8008ff0:	2b04      	cmp	r3, #4
 8008ff2:	d11b      	bne.n	800902c <HAL_I2C_Master_Transmit+0x188>
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d017      	beq.n	800902c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009000:	781a      	ldrb	r2, [r3, #0]
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800900c:	1c5a      	adds	r2, r3, #1
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009016:	b29b      	uxth	r3, r3
 8009018:	3b01      	subs	r3, #1
 800901a:	b29a      	uxth	r2, r3
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009024:	3b01      	subs	r3, #1
 8009026:	b29a      	uxth	r2, r3
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800902c:	697a      	ldr	r2, [r7, #20]
 800902e:	6a39      	ldr	r1, [r7, #32]
 8009030:	68f8      	ldr	r0, [r7, #12]
 8009032:	f000 fdfc 	bl	8009c2e <I2C_WaitOnBTFFlagUntilTimeout>
 8009036:	4603      	mov	r3, r0
 8009038:	2b00      	cmp	r3, #0
 800903a:	d00d      	beq.n	8009058 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009040:	2b04      	cmp	r3, #4
 8009042:	d107      	bne.n	8009054 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	681a      	ldr	r2, [r3, #0]
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009052:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009054:	2301      	movs	r3, #1
 8009056:	e01a      	b.n	800908e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800905c:	2b00      	cmp	r3, #0
 800905e:	d194      	bne.n	8008f8a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800906e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2220      	movs	r2, #32
 8009074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	2200      	movs	r2, #0
 800907c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2200      	movs	r2, #0
 8009084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009088:	2300      	movs	r3, #0
 800908a:	e000      	b.n	800908e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800908c:	2302      	movs	r3, #2
  }
}
 800908e:	4618      	mov	r0, r3
 8009090:	3718      	adds	r7, #24
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	00100002 	.word	0x00100002
 800909c:	ffff0000 	.word	0xffff0000

080090a0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b08c      	sub	sp, #48	; 0x30
 80090a4:	af02      	add	r7, sp, #8
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	607a      	str	r2, [r7, #4]
 80090aa:	461a      	mov	r2, r3
 80090ac:	460b      	mov	r3, r1
 80090ae:	817b      	strh	r3, [r7, #10]
 80090b0:	4613      	mov	r3, r2
 80090b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80090b4:	f7fe fa4e 	bl	8007554 <HAL_GetTick>
 80090b8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	2b20      	cmp	r3, #32
 80090c4:	f040 820b 	bne.w	80094de <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80090c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ca:	9300      	str	r3, [sp, #0]
 80090cc:	2319      	movs	r3, #25
 80090ce:	2201      	movs	r2, #1
 80090d0:	497c      	ldr	r1, [pc, #496]	; (80092c4 <HAL_I2C_Master_Receive+0x224>)
 80090d2:	68f8      	ldr	r0, [r7, #12]
 80090d4:	f000 fc94 	bl	8009a00 <I2C_WaitOnFlagUntilTimeout>
 80090d8:	4603      	mov	r3, r0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d001      	beq.n	80090e2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80090de:	2302      	movs	r3, #2
 80090e0:	e1fe      	b.n	80094e0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d101      	bne.n	80090f0 <HAL_I2C_Master_Receive+0x50>
 80090ec:	2302      	movs	r3, #2
 80090ee:	e1f7      	b.n	80094e0 <HAL_I2C_Master_Receive+0x440>
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2201      	movs	r2, #1
 80090f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f003 0301 	and.w	r3, r3, #1
 8009102:	2b01      	cmp	r3, #1
 8009104:	d007      	beq.n	8009116 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f042 0201 	orr.w	r2, r2, #1
 8009114:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	681a      	ldr	r2, [r3, #0]
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009124:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2222      	movs	r2, #34	; 0x22
 800912a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2210      	movs	r2, #16
 8009132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2200      	movs	r2, #0
 800913a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	893a      	ldrh	r2, [r7, #8]
 8009146:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800914c:	b29a      	uxth	r2, r3
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	4a5c      	ldr	r2, [pc, #368]	; (80092c8 <HAL_I2C_Master_Receive+0x228>)
 8009156:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009158:	8979      	ldrh	r1, [r7, #10]
 800915a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800915e:	68f8      	ldr	r0, [r7, #12]
 8009160:	f000 fb82 	bl	8009868 <I2C_MasterRequestRead>
 8009164:	4603      	mov	r3, r0
 8009166:	2b00      	cmp	r3, #0
 8009168:	d001      	beq.n	800916e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800916a:	2301      	movs	r3, #1
 800916c:	e1b8      	b.n	80094e0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009172:	2b00      	cmp	r3, #0
 8009174:	d113      	bne.n	800919e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009176:	2300      	movs	r3, #0
 8009178:	623b      	str	r3, [r7, #32]
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	695b      	ldr	r3, [r3, #20]
 8009180:	623b      	str	r3, [r7, #32]
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	699b      	ldr	r3, [r3, #24]
 8009188:	623b      	str	r3, [r7, #32]
 800918a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800919a:	601a      	str	r2, [r3, #0]
 800919c:	e18c      	b.n	80094b8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091a2:	2b01      	cmp	r3, #1
 80091a4:	d11b      	bne.n	80091de <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80091b6:	2300      	movs	r3, #0
 80091b8:	61fb      	str	r3, [r7, #28]
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	695b      	ldr	r3, [r3, #20]
 80091c0:	61fb      	str	r3, [r7, #28]
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	699b      	ldr	r3, [r3, #24]
 80091c8:	61fb      	str	r3, [r7, #28]
 80091ca:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091da:	601a      	str	r2, [r3, #0]
 80091dc:	e16c      	b.n	80094b8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091e2:	2b02      	cmp	r3, #2
 80091e4:	d11b      	bne.n	800921e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091f4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009204:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009206:	2300      	movs	r3, #0
 8009208:	61bb      	str	r3, [r7, #24]
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	695b      	ldr	r3, [r3, #20]
 8009210:	61bb      	str	r3, [r7, #24]
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	699b      	ldr	r3, [r3, #24]
 8009218:	61bb      	str	r3, [r7, #24]
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	e14c      	b.n	80094b8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	681a      	ldr	r2, [r3, #0]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800922c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800922e:	2300      	movs	r3, #0
 8009230:	617b      	str	r3, [r7, #20]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	695b      	ldr	r3, [r3, #20]
 8009238:	617b      	str	r3, [r7, #20]
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	699b      	ldr	r3, [r3, #24]
 8009240:	617b      	str	r3, [r7, #20]
 8009242:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009244:	e138      	b.n	80094b8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800924a:	2b03      	cmp	r3, #3
 800924c:	f200 80f1 	bhi.w	8009432 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009254:	2b01      	cmp	r3, #1
 8009256:	d123      	bne.n	80092a0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800925a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800925c:	68f8      	ldr	r0, [r7, #12]
 800925e:	f000 fd27 	bl	8009cb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009262:	4603      	mov	r3, r0
 8009264:	2b00      	cmp	r3, #0
 8009266:	d001      	beq.n	800926c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8009268:	2301      	movs	r3, #1
 800926a:	e139      	b.n	80094e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	691a      	ldr	r2, [r3, #16]
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009276:	b2d2      	uxtb	r2, r2
 8009278:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800927e:	1c5a      	adds	r2, r3, #1
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009288:	3b01      	subs	r3, #1
 800928a:	b29a      	uxth	r2, r3
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009294:	b29b      	uxth	r3, r3
 8009296:	3b01      	subs	r3, #1
 8009298:	b29a      	uxth	r2, r3
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800929e:	e10b      	b.n	80094b8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092a4:	2b02      	cmp	r3, #2
 80092a6:	d14e      	bne.n	8009346 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80092a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092aa:	9300      	str	r3, [sp, #0]
 80092ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ae:	2200      	movs	r2, #0
 80092b0:	4906      	ldr	r1, [pc, #24]	; (80092cc <HAL_I2C_Master_Receive+0x22c>)
 80092b2:	68f8      	ldr	r0, [r7, #12]
 80092b4:	f000 fba4 	bl	8009a00 <I2C_WaitOnFlagUntilTimeout>
 80092b8:	4603      	mov	r3, r0
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d008      	beq.n	80092d0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80092be:	2301      	movs	r3, #1
 80092c0:	e10e      	b.n	80094e0 <HAL_I2C_Master_Receive+0x440>
 80092c2:	bf00      	nop
 80092c4:	00100002 	.word	0x00100002
 80092c8:	ffff0000 	.word	0xffff0000
 80092cc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	691a      	ldr	r2, [r3, #16]
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092ea:	b2d2      	uxtb	r2, r2
 80092ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f2:	1c5a      	adds	r2, r3, #1
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092fc:	3b01      	subs	r3, #1
 80092fe:	b29a      	uxth	r2, r3
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009308:	b29b      	uxth	r3, r3
 800930a:	3b01      	subs	r3, #1
 800930c:	b29a      	uxth	r2, r3
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	691a      	ldr	r2, [r3, #16]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800931c:	b2d2      	uxtb	r2, r2
 800931e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009324:	1c5a      	adds	r2, r3, #1
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800932e:	3b01      	subs	r3, #1
 8009330:	b29a      	uxth	r2, r3
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800933a:	b29b      	uxth	r3, r3
 800933c:	3b01      	subs	r3, #1
 800933e:	b29a      	uxth	r2, r3
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009344:	e0b8      	b.n	80094b8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009348:	9300      	str	r3, [sp, #0]
 800934a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934c:	2200      	movs	r2, #0
 800934e:	4966      	ldr	r1, [pc, #408]	; (80094e8 <HAL_I2C_Master_Receive+0x448>)
 8009350:	68f8      	ldr	r0, [r7, #12]
 8009352:	f000 fb55 	bl	8009a00 <I2C_WaitOnFlagUntilTimeout>
 8009356:	4603      	mov	r3, r0
 8009358:	2b00      	cmp	r3, #0
 800935a:	d001      	beq.n	8009360 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800935c:	2301      	movs	r3, #1
 800935e:	e0bf      	b.n	80094e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	681a      	ldr	r2, [r3, #0]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800936e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	691a      	ldr	r2, [r3, #16]
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800937a:	b2d2      	uxtb	r2, r2
 800937c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009382:	1c5a      	adds	r2, r3, #1
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800938c:	3b01      	subs	r3, #1
 800938e:	b29a      	uxth	r2, r3
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009398:	b29b      	uxth	r3, r3
 800939a:	3b01      	subs	r3, #1
 800939c:	b29a      	uxth	r2, r3
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80093a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a4:	9300      	str	r3, [sp, #0]
 80093a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a8:	2200      	movs	r2, #0
 80093aa:	494f      	ldr	r1, [pc, #316]	; (80094e8 <HAL_I2C_Master_Receive+0x448>)
 80093ac:	68f8      	ldr	r0, [r7, #12]
 80093ae:	f000 fb27 	bl	8009a00 <I2C_WaitOnFlagUntilTimeout>
 80093b2:	4603      	mov	r3, r0
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d001      	beq.n	80093bc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80093b8:	2301      	movs	r3, #1
 80093ba:	e091      	b.n	80094e0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	691a      	ldr	r2, [r3, #16]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093d6:	b2d2      	uxtb	r2, r2
 80093d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093de:	1c5a      	adds	r2, r3, #1
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093e8:	3b01      	subs	r3, #1
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	3b01      	subs	r3, #1
 80093f8:	b29a      	uxth	r2, r3
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	691a      	ldr	r2, [r3, #16]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009408:	b2d2      	uxtb	r2, r2
 800940a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009410:	1c5a      	adds	r2, r3, #1
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800941a:	3b01      	subs	r3, #1
 800941c:	b29a      	uxth	r2, r3
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009426:	b29b      	uxth	r3, r3
 8009428:	3b01      	subs	r3, #1
 800942a:	b29a      	uxth	r2, r3
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009430:	e042      	b.n	80094b8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009434:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009436:	68f8      	ldr	r0, [r7, #12]
 8009438:	f000 fc3a 	bl	8009cb0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800943c:	4603      	mov	r3, r0
 800943e:	2b00      	cmp	r3, #0
 8009440:	d001      	beq.n	8009446 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8009442:	2301      	movs	r3, #1
 8009444:	e04c      	b.n	80094e0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	691a      	ldr	r2, [r3, #16]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009450:	b2d2      	uxtb	r2, r2
 8009452:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009458:	1c5a      	adds	r2, r3, #1
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009462:	3b01      	subs	r3, #1
 8009464:	b29a      	uxth	r2, r3
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800946e:	b29b      	uxth	r3, r3
 8009470:	3b01      	subs	r3, #1
 8009472:	b29a      	uxth	r2, r3
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	695b      	ldr	r3, [r3, #20]
 800947e:	f003 0304 	and.w	r3, r3, #4
 8009482:	2b04      	cmp	r3, #4
 8009484:	d118      	bne.n	80094b8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	691a      	ldr	r2, [r3, #16]
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009490:	b2d2      	uxtb	r2, r2
 8009492:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009498:	1c5a      	adds	r2, r3, #1
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094a2:	3b01      	subs	r3, #1
 80094a4:	b29a      	uxth	r2, r3
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094ae:	b29b      	uxth	r3, r3
 80094b0:	3b01      	subs	r3, #1
 80094b2:	b29a      	uxth	r2, r3
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094bc:	2b00      	cmp	r3, #0
 80094be:	f47f aec2 	bne.w	8009246 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2220      	movs	r2, #32
 80094c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2200      	movs	r2, #0
 80094ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2200      	movs	r2, #0
 80094d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80094da:	2300      	movs	r3, #0
 80094dc:	e000      	b.n	80094e0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80094de:	2302      	movs	r3, #2
  }
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3728      	adds	r7, #40	; 0x28
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	00010004 	.word	0x00010004

080094ec <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b08a      	sub	sp, #40	; 0x28
 80094f0:	af02      	add	r7, sp, #8
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	607a      	str	r2, [r7, #4]
 80094f6:	603b      	str	r3, [r7, #0]
 80094f8:	460b      	mov	r3, r1
 80094fa:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80094fc:	f7fe f82a 	bl	8007554 <HAL_GetTick>
 8009500:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8009502:	2301      	movs	r3, #1
 8009504:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800950c:	b2db      	uxtb	r3, r3
 800950e:	2b20      	cmp	r3, #32
 8009510:	f040 8110 	bne.w	8009734 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009514:	69fb      	ldr	r3, [r7, #28]
 8009516:	9300      	str	r3, [sp, #0]
 8009518:	2319      	movs	r3, #25
 800951a:	2201      	movs	r2, #1
 800951c:	4988      	ldr	r1, [pc, #544]	; (8009740 <HAL_I2C_IsDeviceReady+0x254>)
 800951e:	68f8      	ldr	r0, [r7, #12]
 8009520:	f000 fa6e 	bl	8009a00 <I2C_WaitOnFlagUntilTimeout>
 8009524:	4603      	mov	r3, r0
 8009526:	2b00      	cmp	r3, #0
 8009528:	d001      	beq.n	800952e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800952a:	2302      	movs	r3, #2
 800952c:	e103      	b.n	8009736 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009534:	2b01      	cmp	r3, #1
 8009536:	d101      	bne.n	800953c <HAL_I2C_IsDeviceReady+0x50>
 8009538:	2302      	movs	r3, #2
 800953a:	e0fc      	b.n	8009736 <HAL_I2C_IsDeviceReady+0x24a>
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2201      	movs	r2, #1
 8009540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f003 0301 	and.w	r3, r3, #1
 800954e:	2b01      	cmp	r3, #1
 8009550:	d007      	beq.n	8009562 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f042 0201 	orr.w	r2, r2, #1
 8009560:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	681a      	ldr	r2, [r3, #0]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009570:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2224      	movs	r2, #36	; 0x24
 8009576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2200      	movs	r2, #0
 800957e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	4a70      	ldr	r2, [pc, #448]	; (8009744 <HAL_I2C_IsDeviceReady+0x258>)
 8009584:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	681a      	ldr	r2, [r3, #0]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009594:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8009596:	69fb      	ldr	r3, [r7, #28]
 8009598:	9300      	str	r3, [sp, #0]
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	2200      	movs	r2, #0
 800959e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80095a2:	68f8      	ldr	r0, [r7, #12]
 80095a4:	f000 fa2c 	bl	8009a00 <I2C_WaitOnFlagUntilTimeout>
 80095a8:	4603      	mov	r3, r0
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d00c      	beq.n	80095c8 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d003      	beq.n	80095c4 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095c2:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80095c4:	2303      	movs	r3, #3
 80095c6:	e0b6      	b.n	8009736 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80095c8:	897b      	ldrh	r3, [r7, #10]
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	461a      	mov	r2, r3
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80095d6:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80095d8:	f7fd ffbc 	bl	8007554 <HAL_GetTick>
 80095dc:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	695b      	ldr	r3, [r3, #20]
 80095e4:	f003 0302 	and.w	r3, r3, #2
 80095e8:	2b02      	cmp	r3, #2
 80095ea:	bf0c      	ite	eq
 80095ec:	2301      	moveq	r3, #1
 80095ee:	2300      	movne	r3, #0
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	695b      	ldr	r3, [r3, #20]
 80095fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009602:	bf0c      	ite	eq
 8009604:	2301      	moveq	r3, #1
 8009606:	2300      	movne	r3, #0
 8009608:	b2db      	uxtb	r3, r3
 800960a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800960c:	e025      	b.n	800965a <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800960e:	f7fd ffa1 	bl	8007554 <HAL_GetTick>
 8009612:	4602      	mov	r2, r0
 8009614:	69fb      	ldr	r3, [r7, #28]
 8009616:	1ad3      	subs	r3, r2, r3
 8009618:	683a      	ldr	r2, [r7, #0]
 800961a:	429a      	cmp	r2, r3
 800961c:	d302      	bcc.n	8009624 <HAL_I2C_IsDeviceReady+0x138>
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d103      	bne.n	800962c <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	22a0      	movs	r2, #160	; 0xa0
 8009628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	695b      	ldr	r3, [r3, #20]
 8009632:	f003 0302 	and.w	r3, r3, #2
 8009636:	2b02      	cmp	r3, #2
 8009638:	bf0c      	ite	eq
 800963a:	2301      	moveq	r3, #1
 800963c:	2300      	movne	r3, #0
 800963e:	b2db      	uxtb	r3, r3
 8009640:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	695b      	ldr	r3, [r3, #20]
 8009648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800964c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009650:	bf0c      	ite	eq
 8009652:	2301      	moveq	r3, #1
 8009654:	2300      	movne	r3, #0
 8009656:	b2db      	uxtb	r3, r3
 8009658:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009660:	b2db      	uxtb	r3, r3
 8009662:	2ba0      	cmp	r3, #160	; 0xa0
 8009664:	d005      	beq.n	8009672 <HAL_I2C_IsDeviceReady+0x186>
 8009666:	7dfb      	ldrb	r3, [r7, #23]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d102      	bne.n	8009672 <HAL_I2C_IsDeviceReady+0x186>
 800966c:	7dbb      	ldrb	r3, [r7, #22]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d0cd      	beq.n	800960e <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2220      	movs	r2, #32
 8009676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	695b      	ldr	r3, [r3, #20]
 8009680:	f003 0302 	and.w	r3, r3, #2
 8009684:	2b02      	cmp	r3, #2
 8009686:	d129      	bne.n	80096dc <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009696:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009698:	2300      	movs	r3, #0
 800969a:	613b      	str	r3, [r7, #16]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	695b      	ldr	r3, [r3, #20]
 80096a2:	613b      	str	r3, [r7, #16]
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	699b      	ldr	r3, [r3, #24]
 80096aa:	613b      	str	r3, [r7, #16]
 80096ac:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80096ae:	69fb      	ldr	r3, [r7, #28]
 80096b0:	9300      	str	r3, [sp, #0]
 80096b2:	2319      	movs	r3, #25
 80096b4:	2201      	movs	r2, #1
 80096b6:	4922      	ldr	r1, [pc, #136]	; (8009740 <HAL_I2C_IsDeviceReady+0x254>)
 80096b8:	68f8      	ldr	r0, [r7, #12]
 80096ba:	f000 f9a1 	bl	8009a00 <I2C_WaitOnFlagUntilTimeout>
 80096be:	4603      	mov	r3, r0
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d001      	beq.n	80096c8 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 80096c4:	2301      	movs	r3, #1
 80096c6:	e036      	b.n	8009736 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2220      	movs	r2, #32
 80096cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	2200      	movs	r2, #0
 80096d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80096d8:	2300      	movs	r3, #0
 80096da:	e02c      	b.n	8009736 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	681a      	ldr	r2, [r3, #0]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80096ea:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80096f4:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80096f6:	69fb      	ldr	r3, [r7, #28]
 80096f8:	9300      	str	r3, [sp, #0]
 80096fa:	2319      	movs	r3, #25
 80096fc:	2201      	movs	r2, #1
 80096fe:	4910      	ldr	r1, [pc, #64]	; (8009740 <HAL_I2C_IsDeviceReady+0x254>)
 8009700:	68f8      	ldr	r0, [r7, #12]
 8009702:	f000 f97d 	bl	8009a00 <I2C_WaitOnFlagUntilTimeout>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d001      	beq.n	8009710 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 800970c:	2301      	movs	r3, #1
 800970e:	e012      	b.n	8009736 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8009710:	69bb      	ldr	r3, [r7, #24]
 8009712:	3301      	adds	r3, #1
 8009714:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8009716:	69ba      	ldr	r2, [r7, #24]
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	429a      	cmp	r2, r3
 800971c:	f4ff af33 	bcc.w	8009586 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2220      	movs	r2, #32
 8009724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2200      	movs	r2, #0
 800972c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009730:	2301      	movs	r3, #1
 8009732:	e000      	b.n	8009736 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8009734:	2302      	movs	r3, #2
  }
}
 8009736:	4618      	mov	r0, r3
 8009738:	3720      	adds	r7, #32
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	00100002 	.word	0x00100002
 8009744:	ffff0000 	.word	0xffff0000

08009748 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009756:	b2db      	uxtb	r3, r3
}
 8009758:	4618      	mov	r0, r3
 800975a:	370c      	adds	r7, #12
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b088      	sub	sp, #32
 8009768:	af02      	add	r7, sp, #8
 800976a:	60f8      	str	r0, [r7, #12]
 800976c:	607a      	str	r2, [r7, #4]
 800976e:	603b      	str	r3, [r7, #0]
 8009770:	460b      	mov	r3, r1
 8009772:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009778:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	2b08      	cmp	r3, #8
 800977e:	d006      	beq.n	800978e <I2C_MasterRequestWrite+0x2a>
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	2b01      	cmp	r3, #1
 8009784:	d003      	beq.n	800978e <I2C_MasterRequestWrite+0x2a>
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800978c:	d108      	bne.n	80097a0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	681a      	ldr	r2, [r3, #0]
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800979c:	601a      	str	r2, [r3, #0]
 800979e:	e00b      	b.n	80097b8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097a4:	2b12      	cmp	r3, #18
 80097a6:	d107      	bne.n	80097b8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	9300      	str	r3, [sp, #0]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80097c4:	68f8      	ldr	r0, [r7, #12]
 80097c6:	f000 f91b 	bl	8009a00 <I2C_WaitOnFlagUntilTimeout>
 80097ca:	4603      	mov	r3, r0
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d00c      	beq.n	80097ea <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d003      	beq.n	80097e6 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80097e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80097e6:	2303      	movs	r3, #3
 80097e8:	e035      	b.n	8009856 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	691b      	ldr	r3, [r3, #16]
 80097ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80097f2:	d108      	bne.n	8009806 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80097f4:	897b      	ldrh	r3, [r7, #10]
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	461a      	mov	r2, r3
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009802:	611a      	str	r2, [r3, #16]
 8009804:	e01b      	b.n	800983e <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009806:	897b      	ldrh	r3, [r7, #10]
 8009808:	11db      	asrs	r3, r3, #7
 800980a:	b2db      	uxtb	r3, r3
 800980c:	f003 0306 	and.w	r3, r3, #6
 8009810:	b2db      	uxtb	r3, r3
 8009812:	f063 030f 	orn	r3, r3, #15
 8009816:	b2da      	uxtb	r2, r3
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	490f      	ldr	r1, [pc, #60]	; (8009860 <I2C_MasterRequestWrite+0xfc>)
 8009824:	68f8      	ldr	r0, [r7, #12]
 8009826:	f000 f942 	bl	8009aae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800982a:	4603      	mov	r3, r0
 800982c:	2b00      	cmp	r3, #0
 800982e:	d001      	beq.n	8009834 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	e010      	b.n	8009856 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009834:	897b      	ldrh	r3, [r7, #10]
 8009836:	b2da      	uxtb	r2, r3
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	687a      	ldr	r2, [r7, #4]
 8009842:	4908      	ldr	r1, [pc, #32]	; (8009864 <I2C_MasterRequestWrite+0x100>)
 8009844:	68f8      	ldr	r0, [r7, #12]
 8009846:	f000 f932 	bl	8009aae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800984a:	4603      	mov	r3, r0
 800984c:	2b00      	cmp	r3, #0
 800984e:	d001      	beq.n	8009854 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8009850:	2301      	movs	r3, #1
 8009852:	e000      	b.n	8009856 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8009854:	2300      	movs	r3, #0
}
 8009856:	4618      	mov	r0, r3
 8009858:	3718      	adds	r7, #24
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	00010008 	.word	0x00010008
 8009864:	00010002 	.word	0x00010002

08009868 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b088      	sub	sp, #32
 800986c:	af02      	add	r7, sp, #8
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	607a      	str	r2, [r7, #4]
 8009872:	603b      	str	r3, [r7, #0]
 8009874:	460b      	mov	r3, r1
 8009876:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800988c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	2b08      	cmp	r3, #8
 8009892:	d006      	beq.n	80098a2 <I2C_MasterRequestRead+0x3a>
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	2b01      	cmp	r3, #1
 8009898:	d003      	beq.n	80098a2 <I2C_MasterRequestRead+0x3a>
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80098a0:	d108      	bne.n	80098b4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098b0:	601a      	str	r2, [r3, #0]
 80098b2:	e00b      	b.n	80098cc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098b8:	2b11      	cmp	r3, #17
 80098ba:	d107      	bne.n	80098cc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	9300      	str	r3, [sp, #0]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80098d8:	68f8      	ldr	r0, [r7, #12]
 80098da:	f000 f891 	bl	8009a00 <I2C_WaitOnFlagUntilTimeout>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d00c      	beq.n	80098fe <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d003      	beq.n	80098fa <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80098f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80098fa:	2303      	movs	r3, #3
 80098fc:	e078      	b.n	80099f0 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	691b      	ldr	r3, [r3, #16]
 8009902:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009906:	d108      	bne.n	800991a <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009908:	897b      	ldrh	r3, [r7, #10]
 800990a:	b2db      	uxtb	r3, r3
 800990c:	f043 0301 	orr.w	r3, r3, #1
 8009910:	b2da      	uxtb	r2, r3
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	611a      	str	r2, [r3, #16]
 8009918:	e05e      	b.n	80099d8 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800991a:	897b      	ldrh	r3, [r7, #10]
 800991c:	11db      	asrs	r3, r3, #7
 800991e:	b2db      	uxtb	r3, r3
 8009920:	f003 0306 	and.w	r3, r3, #6
 8009924:	b2db      	uxtb	r3, r3
 8009926:	f063 030f 	orn	r3, r3, #15
 800992a:	b2da      	uxtb	r2, r3
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	4930      	ldr	r1, [pc, #192]	; (80099f8 <I2C_MasterRequestRead+0x190>)
 8009938:	68f8      	ldr	r0, [r7, #12]
 800993a:	f000 f8b8 	bl	8009aae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800993e:	4603      	mov	r3, r0
 8009940:	2b00      	cmp	r3, #0
 8009942:	d001      	beq.n	8009948 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8009944:	2301      	movs	r3, #1
 8009946:	e053      	b.n	80099f0 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009948:	897b      	ldrh	r3, [r7, #10]
 800994a:	b2da      	uxtb	r2, r3
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	4929      	ldr	r1, [pc, #164]	; (80099fc <I2C_MasterRequestRead+0x194>)
 8009958:	68f8      	ldr	r0, [r7, #12]
 800995a:	f000 f8a8 	bl	8009aae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800995e:	4603      	mov	r3, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	d001      	beq.n	8009968 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8009964:	2301      	movs	r3, #1
 8009966:	e043      	b.n	80099f0 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009968:	2300      	movs	r3, #0
 800996a:	613b      	str	r3, [r7, #16]
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	695b      	ldr	r3, [r3, #20]
 8009972:	613b      	str	r3, [r7, #16]
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	699b      	ldr	r3, [r3, #24]
 800997a:	613b      	str	r3, [r7, #16]
 800997c:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800998c:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	9300      	str	r3, [sp, #0]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2200      	movs	r2, #0
 8009996:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800999a:	68f8      	ldr	r0, [r7, #12]
 800999c:	f000 f830 	bl	8009a00 <I2C_WaitOnFlagUntilTimeout>
 80099a0:	4603      	mov	r3, r0
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d00c      	beq.n	80099c0 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d003      	beq.n	80099bc <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099ba:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80099bc:	2303      	movs	r3, #3
 80099be:	e017      	b.n	80099f0 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80099c0:	897b      	ldrh	r3, [r7, #10]
 80099c2:	11db      	asrs	r3, r3, #7
 80099c4:	b2db      	uxtb	r3, r3
 80099c6:	f003 0306 	and.w	r3, r3, #6
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	f063 030e 	orn	r3, r3, #14
 80099d0:	b2da      	uxtb	r2, r3
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	4907      	ldr	r1, [pc, #28]	; (80099fc <I2C_MasterRequestRead+0x194>)
 80099de:	68f8      	ldr	r0, [r7, #12]
 80099e0:	f000 f865 	bl	8009aae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80099e4:	4603      	mov	r3, r0
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d001      	beq.n	80099ee <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 80099ea:	2301      	movs	r3, #1
 80099ec:	e000      	b.n	80099f0 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 80099ee:	2300      	movs	r3, #0
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3718      	adds	r7, #24
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}
 80099f8:	00010008 	.word	0x00010008
 80099fc:	00010002 	.word	0x00010002

08009a00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b084      	sub	sp, #16
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	60b9      	str	r1, [r7, #8]
 8009a0a:	603b      	str	r3, [r7, #0]
 8009a0c:	4613      	mov	r3, r2
 8009a0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009a10:	e025      	b.n	8009a5e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a12:	683b      	ldr	r3, [r7, #0]
 8009a14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a18:	d021      	beq.n	8009a5e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a1a:	f7fd fd9b 	bl	8007554 <HAL_GetTick>
 8009a1e:	4602      	mov	r2, r0
 8009a20:	69bb      	ldr	r3, [r7, #24]
 8009a22:	1ad3      	subs	r3, r2, r3
 8009a24:	683a      	ldr	r2, [r7, #0]
 8009a26:	429a      	cmp	r2, r3
 8009a28:	d302      	bcc.n	8009a30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d116      	bne.n	8009a5e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2200      	movs	r2, #0
 8009a34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2220      	movs	r2, #32
 8009a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2200      	movs	r2, #0
 8009a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a4a:	f043 0220 	orr.w	r2, r3, #32
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2200      	movs	r2, #0
 8009a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e023      	b.n	8009aa6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	0c1b      	lsrs	r3, r3, #16
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d10d      	bne.n	8009a84 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	695b      	ldr	r3, [r3, #20]
 8009a6e:	43da      	mvns	r2, r3
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	4013      	ands	r3, r2
 8009a74:	b29b      	uxth	r3, r3
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	bf0c      	ite	eq
 8009a7a:	2301      	moveq	r3, #1
 8009a7c:	2300      	movne	r3, #0
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	461a      	mov	r2, r3
 8009a82:	e00c      	b.n	8009a9e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	699b      	ldr	r3, [r3, #24]
 8009a8a:	43da      	mvns	r2, r3
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	4013      	ands	r3, r2
 8009a90:	b29b      	uxth	r3, r3
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	bf0c      	ite	eq
 8009a96:	2301      	moveq	r3, #1
 8009a98:	2300      	movne	r3, #0
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	79fb      	ldrb	r3, [r7, #7]
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d0b6      	beq.n	8009a12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009aa4:	2300      	movs	r3, #0
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3710      	adds	r7, #16
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}

08009aae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009aae:	b580      	push	{r7, lr}
 8009ab0:	b084      	sub	sp, #16
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	60f8      	str	r0, [r7, #12]
 8009ab6:	60b9      	str	r1, [r7, #8]
 8009ab8:	607a      	str	r2, [r7, #4]
 8009aba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009abc:	e051      	b.n	8009b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	695b      	ldr	r3, [r3, #20]
 8009ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009acc:	d123      	bne.n	8009b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009adc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009ae6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2200      	movs	r2, #0
 8009aec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	2220      	movs	r2, #32
 8009af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2200      	movs	r2, #0
 8009afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b02:	f043 0204 	orr.w	r2, r3, #4
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009b12:	2301      	movs	r3, #1
 8009b14:	e046      	b.n	8009ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b1c:	d021      	beq.n	8009b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b1e:	f7fd fd19 	bl	8007554 <HAL_GetTick>
 8009b22:	4602      	mov	r2, r0
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	1ad3      	subs	r3, r2, r3
 8009b28:	687a      	ldr	r2, [r7, #4]
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d302      	bcc.n	8009b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d116      	bne.n	8009b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2200      	movs	r2, #0
 8009b38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	2220      	movs	r2, #32
 8009b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2200      	movs	r2, #0
 8009b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b4e:	f043 0220 	orr.w	r2, r3, #32
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	e020      	b.n	8009ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	0c1b      	lsrs	r3, r3, #16
 8009b66:	b2db      	uxtb	r3, r3
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d10c      	bne.n	8009b86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	695b      	ldr	r3, [r3, #20]
 8009b72:	43da      	mvns	r2, r3
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	4013      	ands	r3, r2
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	bf14      	ite	ne
 8009b7e:	2301      	movne	r3, #1
 8009b80:	2300      	moveq	r3, #0
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	e00b      	b.n	8009b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	699b      	ldr	r3, [r3, #24]
 8009b8c:	43da      	mvns	r2, r3
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	4013      	ands	r3, r2
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	bf14      	ite	ne
 8009b98:	2301      	movne	r3, #1
 8009b9a:	2300      	moveq	r3, #0
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d18d      	bne.n	8009abe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009ba2:	2300      	movs	r3, #0
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3710      	adds	r7, #16
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	60f8      	str	r0, [r7, #12]
 8009bb4:	60b9      	str	r1, [r7, #8]
 8009bb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009bb8:	e02d      	b.n	8009c16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009bba:	68f8      	ldr	r0, [r7, #12]
 8009bbc:	f000 f8ce 	bl	8009d5c <I2C_IsAcknowledgeFailed>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d001      	beq.n	8009bca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	e02d      	b.n	8009c26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bd0:	d021      	beq.n	8009c16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bd2:	f7fd fcbf 	bl	8007554 <HAL_GetTick>
 8009bd6:	4602      	mov	r2, r0
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	1ad3      	subs	r3, r2, r3
 8009bdc:	68ba      	ldr	r2, [r7, #8]
 8009bde:	429a      	cmp	r2, r3
 8009be0:	d302      	bcc.n	8009be8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d116      	bne.n	8009c16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	2200      	movs	r2, #0
 8009bec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2220      	movs	r2, #32
 8009bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c02:	f043 0220 	orr.w	r2, r3, #32
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009c12:	2301      	movs	r3, #1
 8009c14:	e007      	b.n	8009c26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	695b      	ldr	r3, [r3, #20]
 8009c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c20:	2b80      	cmp	r3, #128	; 0x80
 8009c22:	d1ca      	bne.n	8009bba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009c24:	2300      	movs	r3, #0
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3710      	adds	r7, #16
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}

08009c2e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009c2e:	b580      	push	{r7, lr}
 8009c30:	b084      	sub	sp, #16
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	60f8      	str	r0, [r7, #12]
 8009c36:	60b9      	str	r1, [r7, #8]
 8009c38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009c3a:	e02d      	b.n	8009c98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009c3c:	68f8      	ldr	r0, [r7, #12]
 8009c3e:	f000 f88d 	bl	8009d5c <I2C_IsAcknowledgeFailed>
 8009c42:	4603      	mov	r3, r0
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d001      	beq.n	8009c4c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009c48:	2301      	movs	r3, #1
 8009c4a:	e02d      	b.n	8009ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c52:	d021      	beq.n	8009c98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c54:	f7fd fc7e 	bl	8007554 <HAL_GetTick>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	1ad3      	subs	r3, r2, r3
 8009c5e:	68ba      	ldr	r2, [r7, #8]
 8009c60:	429a      	cmp	r2, r3
 8009c62:	d302      	bcc.n	8009c6a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d116      	bne.n	8009c98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2220      	movs	r2, #32
 8009c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c84:	f043 0220 	orr.w	r2, r3, #32
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009c94:	2301      	movs	r3, #1
 8009c96:	e007      	b.n	8009ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	695b      	ldr	r3, [r3, #20]
 8009c9e:	f003 0304 	and.w	r3, r3, #4
 8009ca2:	2b04      	cmp	r3, #4
 8009ca4:	d1ca      	bne.n	8009c3c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009ca6:	2300      	movs	r3, #0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3710      	adds	r7, #16
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b084      	sub	sp, #16
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009cbc:	e042      	b.n	8009d44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	695b      	ldr	r3, [r3, #20]
 8009cc4:	f003 0310 	and.w	r3, r3, #16
 8009cc8:	2b10      	cmp	r3, #16
 8009cca:	d119      	bne.n	8009d00 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f06f 0210 	mvn.w	r2, #16
 8009cd4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2220      	movs	r2, #32
 8009ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	e029      	b.n	8009d54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d00:	f7fd fc28 	bl	8007554 <HAL_GetTick>
 8009d04:	4602      	mov	r2, r0
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	1ad3      	subs	r3, r2, r3
 8009d0a:	68ba      	ldr	r2, [r7, #8]
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d302      	bcc.n	8009d16 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d116      	bne.n	8009d44 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2220      	movs	r2, #32
 8009d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2200      	movs	r2, #0
 8009d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d30:	f043 0220 	orr.w	r2, r3, #32
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009d40:	2301      	movs	r3, #1
 8009d42:	e007      	b.n	8009d54 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	695b      	ldr	r3, [r3, #20]
 8009d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d4e:	2b40      	cmp	r3, #64	; 0x40
 8009d50:	d1b5      	bne.n	8009cbe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009d52:	2300      	movs	r3, #0
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3710      	adds	r7, #16
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009d5c:	b480      	push	{r7}
 8009d5e:	b083      	sub	sp, #12
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	695b      	ldr	r3, [r3, #20]
 8009d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d72:	d11b      	bne.n	8009dac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009d7c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2200      	movs	r2, #0
 8009d82:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2220      	movs	r2, #32
 8009d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d98:	f043 0204 	orr.w	r2, r3, #4
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2200      	movs	r2, #0
 8009da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009da8:	2301      	movs	r3, #1
 8009daa:	e000      	b.n	8009dae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009dac:	2300      	movs	r3, #0
}
 8009dae:	4618      	mov	r0, r3
 8009db0:	370c      	adds	r7, #12
 8009db2:	46bd      	mov	sp, r7
 8009db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db8:	4770      	bx	lr
	...

08009dbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b086      	sub	sp, #24
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d101      	bne.n	8009dce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009dca:	2301      	movs	r3, #1
 8009dcc:	e25b      	b.n	800a286 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f003 0301 	and.w	r3, r3, #1
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d075      	beq.n	8009ec6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009dda:	4ba3      	ldr	r3, [pc, #652]	; (800a068 <HAL_RCC_OscConfig+0x2ac>)
 8009ddc:	689b      	ldr	r3, [r3, #8]
 8009dde:	f003 030c 	and.w	r3, r3, #12
 8009de2:	2b04      	cmp	r3, #4
 8009de4:	d00c      	beq.n	8009e00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009de6:	4ba0      	ldr	r3, [pc, #640]	; (800a068 <HAL_RCC_OscConfig+0x2ac>)
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009dee:	2b08      	cmp	r3, #8
 8009df0:	d112      	bne.n	8009e18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009df2:	4b9d      	ldr	r3, [pc, #628]	; (800a068 <HAL_RCC_OscConfig+0x2ac>)
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009dfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009dfe:	d10b      	bne.n	8009e18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e00:	4b99      	ldr	r3, [pc, #612]	; (800a068 <HAL_RCC_OscConfig+0x2ac>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d05b      	beq.n	8009ec4 <HAL_RCC_OscConfig+0x108>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d157      	bne.n	8009ec4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009e14:	2301      	movs	r3, #1
 8009e16:	e236      	b.n	800a286 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e20:	d106      	bne.n	8009e30 <HAL_RCC_OscConfig+0x74>
 8009e22:	4b91      	ldr	r3, [pc, #580]	; (800a068 <HAL_RCC_OscConfig+0x2ac>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4a90      	ldr	r2, [pc, #576]	; (800a068 <HAL_RCC_OscConfig+0x2ac>)
 8009e28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e2c:	6013      	str	r3, [r2, #0]
 8009e2e:	e01d      	b.n	8009e6c <HAL_RCC_OscConfig+0xb0>
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	685b      	ldr	r3, [r3, #4]
 8009e34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009e38:	d10c      	bne.n	8009e54 <HAL_RCC_OscConfig+0x98>
 8009e3a:	4b8b      	ldr	r3, [pc, #556]	; (800a068 <HAL_RCC_OscConfig+0x2ac>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4a8a      	ldr	r2, [pc, #552]	; (800a068 <HAL_RCC_OscConfig+0x2ac>)
 8009e40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e44:	6013      	str	r3, [r2, #0]
 8009e46:	4b88      	ldr	r3, [pc, #544]	; (800a068 <HAL_RCC_OscConfig+0x2ac>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	4a87      	ldr	r2, [pc, #540]	; (800a068 <HAL_RCC_OscConfig+0x2ac>)
 8009e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e50:	6013      	str	r3, [r2, #0]
 8009e52:	e00b      	b.n	8009e6c <HAL_RCC_OscConfig+0xb0>
 8009e54:	4b84      	ldr	r3, [pc, #528]	; (800a068 <HAL_RCC_OscConfig+0x2ac>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a83      	ldr	r2, [pc, #524]	; (800a068 <HAL_RCC_OscConfig+0x2ac>)
 8009e5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e5e:	6013      	str	r3, [r2, #0]
 8009e60:	4b81      	ldr	r3, [pc, #516]	; (800a068 <HAL_RCC_OscConfig+0x2ac>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4a80      	ldr	r2, [pc, #512]	; (800a068 <HAL_RCC_OscConfig+0x2ac>)
 8009e66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d013      	beq.n	8009e9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e74:	f7fd fb6e 	bl	8007554 <HAL_GetTick>
 8009e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e7a:	e008      	b.n	8009e8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009e7c:	f7fd fb6a 	bl	8007554 <HAL_GetTick>
 8009e80:	4602      	mov	r2, r0
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	1ad3      	subs	r3, r2, r3
 8009e86:	2b64      	cmp	r3, #100	; 0x64
 8009e88:	d901      	bls.n	8009e8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009e8a:	2303      	movs	r3, #3
 8009e8c:	e1fb      	b.n	800a286 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e8e:	4b76      	ldr	r3, [pc, #472]	; (800a068 <HAL_RCC_OscConfig+0x2ac>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d0f0      	beq.n	8009e7c <HAL_RCC_OscConfig+0xc0>
 8009e9a:	e014      	b.n	8009ec6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e9c:	f7fd fb5a 	bl	8007554 <HAL_GetTick>
 8009ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009ea2:	e008      	b.n	8009eb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009ea4:	f7fd fb56 	bl	8007554 <HAL_GetTick>
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	1ad3      	subs	r3, r2, r3
 8009eae:	2b64      	cmp	r3, #100	; 0x64
 8009eb0:	d901      	bls.n	8009eb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009eb2:	2303      	movs	r3, #3
 8009eb4:	e1e7      	b.n	800a286 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009eb6:	4b6c      	ldr	r3, [pc, #432]	; (800a068 <HAL_RCC_OscConfig+0x2ac>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d1f0      	bne.n	8009ea4 <HAL_RCC_OscConfig+0xe8>
 8009ec2:	e000      	b.n	8009ec6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ec4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f003 0302 	and.w	r3, r3, #2
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d063      	beq.n	8009f9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009ed2:	4b65      	ldr	r3, [pc, #404]	; (800a068 <HAL_RCC_OscConfig+0x2ac>)
 8009ed4:	689b      	ldr	r3, [r3, #8]
 8009ed6:	f003 030c 	and.w	r3, r3, #12
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d00b      	beq.n	8009ef6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009ede:	4b62      	ldr	r3, [pc, #392]	; (800a068 <HAL_RCC_OscConfig+0x2ac>)
 8009ee0:	689b      	ldr	r3, [r3, #8]
 8009ee2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009ee6:	2b08      	cmp	r3, #8
 8009ee8:	d11c      	bne.n	8009f24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009eea:	4b5f      	ldr	r3, [pc, #380]	; (800a068 <HAL_RCC_OscConfig+0x2ac>)
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d116      	bne.n	8009f24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009ef6:	4b5c      	ldr	r3, [pc, #368]	; (800a068 <HAL_RCC_OscConfig+0x2ac>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f003 0302 	and.w	r3, r3, #2
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d005      	beq.n	8009f0e <HAL_RCC_OscConfig+0x152>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	68db      	ldr	r3, [r3, #12]
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d001      	beq.n	8009f0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	e1bb      	b.n	800a286 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f0e:	4b56      	ldr	r3, [pc, #344]	; (800a068 <HAL_RCC_OscConfig+0x2ac>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	691b      	ldr	r3, [r3, #16]
 8009f1a:	00db      	lsls	r3, r3, #3
 8009f1c:	4952      	ldr	r1, [pc, #328]	; (800a068 <HAL_RCC_OscConfig+0x2ac>)
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009f22:	e03a      	b.n	8009f9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	68db      	ldr	r3, [r3, #12]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d020      	beq.n	8009f6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009f2c:	4b4f      	ldr	r3, [pc, #316]	; (800a06c <HAL_RCC_OscConfig+0x2b0>)
 8009f2e:	2201      	movs	r2, #1
 8009f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f32:	f7fd fb0f 	bl	8007554 <HAL_GetTick>
 8009f36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f38:	e008      	b.n	8009f4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009f3a:	f7fd fb0b 	bl	8007554 <HAL_GetTick>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	1ad3      	subs	r3, r2, r3
 8009f44:	2b02      	cmp	r3, #2
 8009f46:	d901      	bls.n	8009f4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009f48:	2303      	movs	r3, #3
 8009f4a:	e19c      	b.n	800a286 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f4c:	4b46      	ldr	r3, [pc, #280]	; (800a068 <HAL_RCC_OscConfig+0x2ac>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f003 0302 	and.w	r3, r3, #2
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d0f0      	beq.n	8009f3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f58:	4b43      	ldr	r3, [pc, #268]	; (800a068 <HAL_RCC_OscConfig+0x2ac>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	691b      	ldr	r3, [r3, #16]
 8009f64:	00db      	lsls	r3, r3, #3
 8009f66:	4940      	ldr	r1, [pc, #256]	; (800a068 <HAL_RCC_OscConfig+0x2ac>)
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	600b      	str	r3, [r1, #0]
 8009f6c:	e015      	b.n	8009f9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009f6e:	4b3f      	ldr	r3, [pc, #252]	; (800a06c <HAL_RCC_OscConfig+0x2b0>)
 8009f70:	2200      	movs	r2, #0
 8009f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f74:	f7fd faee 	bl	8007554 <HAL_GetTick>
 8009f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009f7a:	e008      	b.n	8009f8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009f7c:	f7fd faea 	bl	8007554 <HAL_GetTick>
 8009f80:	4602      	mov	r2, r0
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	1ad3      	subs	r3, r2, r3
 8009f86:	2b02      	cmp	r3, #2
 8009f88:	d901      	bls.n	8009f8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009f8a:	2303      	movs	r3, #3
 8009f8c:	e17b      	b.n	800a286 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009f8e:	4b36      	ldr	r3, [pc, #216]	; (800a068 <HAL_RCC_OscConfig+0x2ac>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f003 0302 	and.w	r3, r3, #2
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d1f0      	bne.n	8009f7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f003 0308 	and.w	r3, r3, #8
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d030      	beq.n	800a008 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	695b      	ldr	r3, [r3, #20]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d016      	beq.n	8009fdc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009fae:	4b30      	ldr	r3, [pc, #192]	; (800a070 <HAL_RCC_OscConfig+0x2b4>)
 8009fb0:	2201      	movs	r2, #1
 8009fb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009fb4:	f7fd face 	bl	8007554 <HAL_GetTick>
 8009fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009fba:	e008      	b.n	8009fce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009fbc:	f7fd faca 	bl	8007554 <HAL_GetTick>
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	1ad3      	subs	r3, r2, r3
 8009fc6:	2b02      	cmp	r3, #2
 8009fc8:	d901      	bls.n	8009fce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009fca:	2303      	movs	r3, #3
 8009fcc:	e15b      	b.n	800a286 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009fce:	4b26      	ldr	r3, [pc, #152]	; (800a068 <HAL_RCC_OscConfig+0x2ac>)
 8009fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fd2:	f003 0302 	and.w	r3, r3, #2
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d0f0      	beq.n	8009fbc <HAL_RCC_OscConfig+0x200>
 8009fda:	e015      	b.n	800a008 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009fdc:	4b24      	ldr	r3, [pc, #144]	; (800a070 <HAL_RCC_OscConfig+0x2b4>)
 8009fde:	2200      	movs	r2, #0
 8009fe0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009fe2:	f7fd fab7 	bl	8007554 <HAL_GetTick>
 8009fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009fe8:	e008      	b.n	8009ffc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009fea:	f7fd fab3 	bl	8007554 <HAL_GetTick>
 8009fee:	4602      	mov	r2, r0
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	1ad3      	subs	r3, r2, r3
 8009ff4:	2b02      	cmp	r3, #2
 8009ff6:	d901      	bls.n	8009ffc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009ff8:	2303      	movs	r3, #3
 8009ffa:	e144      	b.n	800a286 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009ffc:	4b1a      	ldr	r3, [pc, #104]	; (800a068 <HAL_RCC_OscConfig+0x2ac>)
 8009ffe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a000:	f003 0302 	and.w	r3, r3, #2
 800a004:	2b00      	cmp	r3, #0
 800a006:	d1f0      	bne.n	8009fea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f003 0304 	and.w	r3, r3, #4
 800a010:	2b00      	cmp	r3, #0
 800a012:	f000 80a0 	beq.w	800a156 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a016:	2300      	movs	r3, #0
 800a018:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a01a:	4b13      	ldr	r3, [pc, #76]	; (800a068 <HAL_RCC_OscConfig+0x2ac>)
 800a01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a01e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a022:	2b00      	cmp	r3, #0
 800a024:	d10f      	bne.n	800a046 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a026:	2300      	movs	r3, #0
 800a028:	60bb      	str	r3, [r7, #8]
 800a02a:	4b0f      	ldr	r3, [pc, #60]	; (800a068 <HAL_RCC_OscConfig+0x2ac>)
 800a02c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a02e:	4a0e      	ldr	r2, [pc, #56]	; (800a068 <HAL_RCC_OscConfig+0x2ac>)
 800a030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a034:	6413      	str	r3, [r2, #64]	; 0x40
 800a036:	4b0c      	ldr	r3, [pc, #48]	; (800a068 <HAL_RCC_OscConfig+0x2ac>)
 800a038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a03a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a03e:	60bb      	str	r3, [r7, #8]
 800a040:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a042:	2301      	movs	r3, #1
 800a044:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a046:	4b0b      	ldr	r3, [pc, #44]	; (800a074 <HAL_RCC_OscConfig+0x2b8>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d121      	bne.n	800a096 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a052:	4b08      	ldr	r3, [pc, #32]	; (800a074 <HAL_RCC_OscConfig+0x2b8>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	4a07      	ldr	r2, [pc, #28]	; (800a074 <HAL_RCC_OscConfig+0x2b8>)
 800a058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a05c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a05e:	f7fd fa79 	bl	8007554 <HAL_GetTick>
 800a062:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a064:	e011      	b.n	800a08a <HAL_RCC_OscConfig+0x2ce>
 800a066:	bf00      	nop
 800a068:	40023800 	.word	0x40023800
 800a06c:	42470000 	.word	0x42470000
 800a070:	42470e80 	.word	0x42470e80
 800a074:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a078:	f7fd fa6c 	bl	8007554 <HAL_GetTick>
 800a07c:	4602      	mov	r2, r0
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	1ad3      	subs	r3, r2, r3
 800a082:	2b02      	cmp	r3, #2
 800a084:	d901      	bls.n	800a08a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800a086:	2303      	movs	r3, #3
 800a088:	e0fd      	b.n	800a286 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a08a:	4b81      	ldr	r3, [pc, #516]	; (800a290 <HAL_RCC_OscConfig+0x4d4>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a092:	2b00      	cmp	r3, #0
 800a094:	d0f0      	beq.n	800a078 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	689b      	ldr	r3, [r3, #8]
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d106      	bne.n	800a0ac <HAL_RCC_OscConfig+0x2f0>
 800a09e:	4b7d      	ldr	r3, [pc, #500]	; (800a294 <HAL_RCC_OscConfig+0x4d8>)
 800a0a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0a2:	4a7c      	ldr	r2, [pc, #496]	; (800a294 <HAL_RCC_OscConfig+0x4d8>)
 800a0a4:	f043 0301 	orr.w	r3, r3, #1
 800a0a8:	6713      	str	r3, [r2, #112]	; 0x70
 800a0aa:	e01c      	b.n	800a0e6 <HAL_RCC_OscConfig+0x32a>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	689b      	ldr	r3, [r3, #8]
 800a0b0:	2b05      	cmp	r3, #5
 800a0b2:	d10c      	bne.n	800a0ce <HAL_RCC_OscConfig+0x312>
 800a0b4:	4b77      	ldr	r3, [pc, #476]	; (800a294 <HAL_RCC_OscConfig+0x4d8>)
 800a0b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0b8:	4a76      	ldr	r2, [pc, #472]	; (800a294 <HAL_RCC_OscConfig+0x4d8>)
 800a0ba:	f043 0304 	orr.w	r3, r3, #4
 800a0be:	6713      	str	r3, [r2, #112]	; 0x70
 800a0c0:	4b74      	ldr	r3, [pc, #464]	; (800a294 <HAL_RCC_OscConfig+0x4d8>)
 800a0c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0c4:	4a73      	ldr	r2, [pc, #460]	; (800a294 <HAL_RCC_OscConfig+0x4d8>)
 800a0c6:	f043 0301 	orr.w	r3, r3, #1
 800a0ca:	6713      	str	r3, [r2, #112]	; 0x70
 800a0cc:	e00b      	b.n	800a0e6 <HAL_RCC_OscConfig+0x32a>
 800a0ce:	4b71      	ldr	r3, [pc, #452]	; (800a294 <HAL_RCC_OscConfig+0x4d8>)
 800a0d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0d2:	4a70      	ldr	r2, [pc, #448]	; (800a294 <HAL_RCC_OscConfig+0x4d8>)
 800a0d4:	f023 0301 	bic.w	r3, r3, #1
 800a0d8:	6713      	str	r3, [r2, #112]	; 0x70
 800a0da:	4b6e      	ldr	r3, [pc, #440]	; (800a294 <HAL_RCC_OscConfig+0x4d8>)
 800a0dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0de:	4a6d      	ldr	r2, [pc, #436]	; (800a294 <HAL_RCC_OscConfig+0x4d8>)
 800a0e0:	f023 0304 	bic.w	r3, r3, #4
 800a0e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	689b      	ldr	r3, [r3, #8]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d015      	beq.n	800a11a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0ee:	f7fd fa31 	bl	8007554 <HAL_GetTick>
 800a0f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a0f4:	e00a      	b.n	800a10c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a0f6:	f7fd fa2d 	bl	8007554 <HAL_GetTick>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	1ad3      	subs	r3, r2, r3
 800a100:	f241 3288 	movw	r2, #5000	; 0x1388
 800a104:	4293      	cmp	r3, r2
 800a106:	d901      	bls.n	800a10c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800a108:	2303      	movs	r3, #3
 800a10a:	e0bc      	b.n	800a286 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a10c:	4b61      	ldr	r3, [pc, #388]	; (800a294 <HAL_RCC_OscConfig+0x4d8>)
 800a10e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a110:	f003 0302 	and.w	r3, r3, #2
 800a114:	2b00      	cmp	r3, #0
 800a116:	d0ee      	beq.n	800a0f6 <HAL_RCC_OscConfig+0x33a>
 800a118:	e014      	b.n	800a144 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a11a:	f7fd fa1b 	bl	8007554 <HAL_GetTick>
 800a11e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a120:	e00a      	b.n	800a138 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a122:	f7fd fa17 	bl	8007554 <HAL_GetTick>
 800a126:	4602      	mov	r2, r0
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	1ad3      	subs	r3, r2, r3
 800a12c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a130:	4293      	cmp	r3, r2
 800a132:	d901      	bls.n	800a138 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800a134:	2303      	movs	r3, #3
 800a136:	e0a6      	b.n	800a286 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a138:	4b56      	ldr	r3, [pc, #344]	; (800a294 <HAL_RCC_OscConfig+0x4d8>)
 800a13a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a13c:	f003 0302 	and.w	r3, r3, #2
 800a140:	2b00      	cmp	r3, #0
 800a142:	d1ee      	bne.n	800a122 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a144:	7dfb      	ldrb	r3, [r7, #23]
 800a146:	2b01      	cmp	r3, #1
 800a148:	d105      	bne.n	800a156 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a14a:	4b52      	ldr	r3, [pc, #328]	; (800a294 <HAL_RCC_OscConfig+0x4d8>)
 800a14c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a14e:	4a51      	ldr	r2, [pc, #324]	; (800a294 <HAL_RCC_OscConfig+0x4d8>)
 800a150:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a154:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	699b      	ldr	r3, [r3, #24]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	f000 8092 	beq.w	800a284 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a160:	4b4c      	ldr	r3, [pc, #304]	; (800a294 <HAL_RCC_OscConfig+0x4d8>)
 800a162:	689b      	ldr	r3, [r3, #8]
 800a164:	f003 030c 	and.w	r3, r3, #12
 800a168:	2b08      	cmp	r3, #8
 800a16a:	d05c      	beq.n	800a226 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	699b      	ldr	r3, [r3, #24]
 800a170:	2b02      	cmp	r3, #2
 800a172:	d141      	bne.n	800a1f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a174:	4b48      	ldr	r3, [pc, #288]	; (800a298 <HAL_RCC_OscConfig+0x4dc>)
 800a176:	2200      	movs	r2, #0
 800a178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a17a:	f7fd f9eb 	bl	8007554 <HAL_GetTick>
 800a17e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a180:	e008      	b.n	800a194 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a182:	f7fd f9e7 	bl	8007554 <HAL_GetTick>
 800a186:	4602      	mov	r2, r0
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	1ad3      	subs	r3, r2, r3
 800a18c:	2b02      	cmp	r3, #2
 800a18e:	d901      	bls.n	800a194 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800a190:	2303      	movs	r3, #3
 800a192:	e078      	b.n	800a286 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a194:	4b3f      	ldr	r3, [pc, #252]	; (800a294 <HAL_RCC_OscConfig+0x4d8>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d1f0      	bne.n	800a182 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	69da      	ldr	r2, [r3, #28]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6a1b      	ldr	r3, [r3, #32]
 800a1a8:	431a      	orrs	r2, r3
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ae:	019b      	lsls	r3, r3, #6
 800a1b0:	431a      	orrs	r2, r3
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1b6:	085b      	lsrs	r3, r3, #1
 800a1b8:	3b01      	subs	r3, #1
 800a1ba:	041b      	lsls	r3, r3, #16
 800a1bc:	431a      	orrs	r2, r3
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c2:	061b      	lsls	r3, r3, #24
 800a1c4:	4933      	ldr	r1, [pc, #204]	; (800a294 <HAL_RCC_OscConfig+0x4d8>)
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a1ca:	4b33      	ldr	r3, [pc, #204]	; (800a298 <HAL_RCC_OscConfig+0x4dc>)
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1d0:	f7fd f9c0 	bl	8007554 <HAL_GetTick>
 800a1d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a1d6:	e008      	b.n	800a1ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a1d8:	f7fd f9bc 	bl	8007554 <HAL_GetTick>
 800a1dc:	4602      	mov	r2, r0
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	1ad3      	subs	r3, r2, r3
 800a1e2:	2b02      	cmp	r3, #2
 800a1e4:	d901      	bls.n	800a1ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800a1e6:	2303      	movs	r3, #3
 800a1e8:	e04d      	b.n	800a286 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a1ea:	4b2a      	ldr	r3, [pc, #168]	; (800a294 <HAL_RCC_OscConfig+0x4d8>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d0f0      	beq.n	800a1d8 <HAL_RCC_OscConfig+0x41c>
 800a1f6:	e045      	b.n	800a284 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a1f8:	4b27      	ldr	r3, [pc, #156]	; (800a298 <HAL_RCC_OscConfig+0x4dc>)
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1fe:	f7fd f9a9 	bl	8007554 <HAL_GetTick>
 800a202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a204:	e008      	b.n	800a218 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a206:	f7fd f9a5 	bl	8007554 <HAL_GetTick>
 800a20a:	4602      	mov	r2, r0
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	1ad3      	subs	r3, r2, r3
 800a210:	2b02      	cmp	r3, #2
 800a212:	d901      	bls.n	800a218 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800a214:	2303      	movs	r3, #3
 800a216:	e036      	b.n	800a286 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a218:	4b1e      	ldr	r3, [pc, #120]	; (800a294 <HAL_RCC_OscConfig+0x4d8>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a220:	2b00      	cmp	r3, #0
 800a222:	d1f0      	bne.n	800a206 <HAL_RCC_OscConfig+0x44a>
 800a224:	e02e      	b.n	800a284 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	699b      	ldr	r3, [r3, #24]
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	d101      	bne.n	800a232 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800a22e:	2301      	movs	r3, #1
 800a230:	e029      	b.n	800a286 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a232:	4b18      	ldr	r3, [pc, #96]	; (800a294 <HAL_RCC_OscConfig+0x4d8>)
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	69db      	ldr	r3, [r3, #28]
 800a242:	429a      	cmp	r2, r3
 800a244:	d11c      	bne.n	800a280 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a250:	429a      	cmp	r2, r3
 800a252:	d115      	bne.n	800a280 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800a254:	68fa      	ldr	r2, [r7, #12]
 800a256:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a25a:	4013      	ands	r3, r2
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a260:	4293      	cmp	r3, r2
 800a262:	d10d      	bne.n	800a280 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800a26e:	429a      	cmp	r2, r3
 800a270:	d106      	bne.n	800a280 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d001      	beq.n	800a284 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800a280:	2301      	movs	r3, #1
 800a282:	e000      	b.n	800a286 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800a284:	2300      	movs	r3, #0
}
 800a286:	4618      	mov	r0, r3
 800a288:	3718      	adds	r7, #24
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	bf00      	nop
 800a290:	40007000 	.word	0x40007000
 800a294:	40023800 	.word	0x40023800
 800a298:	42470060 	.word	0x42470060

0800a29c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b084      	sub	sp, #16
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d101      	bne.n	800a2b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	e0cc      	b.n	800a44a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a2b0:	4b68      	ldr	r3, [pc, #416]	; (800a454 <HAL_RCC_ClockConfig+0x1b8>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f003 030f 	and.w	r3, r3, #15
 800a2b8:	683a      	ldr	r2, [r7, #0]
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d90c      	bls.n	800a2d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a2be:	4b65      	ldr	r3, [pc, #404]	; (800a454 <HAL_RCC_ClockConfig+0x1b8>)
 800a2c0:	683a      	ldr	r2, [r7, #0]
 800a2c2:	b2d2      	uxtb	r2, r2
 800a2c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a2c6:	4b63      	ldr	r3, [pc, #396]	; (800a454 <HAL_RCC_ClockConfig+0x1b8>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f003 030f 	and.w	r3, r3, #15
 800a2ce:	683a      	ldr	r2, [r7, #0]
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d001      	beq.n	800a2d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	e0b8      	b.n	800a44a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f003 0302 	and.w	r3, r3, #2
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d020      	beq.n	800a326 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f003 0304 	and.w	r3, r3, #4
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d005      	beq.n	800a2fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a2f0:	4b59      	ldr	r3, [pc, #356]	; (800a458 <HAL_RCC_ClockConfig+0x1bc>)
 800a2f2:	689b      	ldr	r3, [r3, #8]
 800a2f4:	4a58      	ldr	r2, [pc, #352]	; (800a458 <HAL_RCC_ClockConfig+0x1bc>)
 800a2f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a2fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	f003 0308 	and.w	r3, r3, #8
 800a304:	2b00      	cmp	r3, #0
 800a306:	d005      	beq.n	800a314 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a308:	4b53      	ldr	r3, [pc, #332]	; (800a458 <HAL_RCC_ClockConfig+0x1bc>)
 800a30a:	689b      	ldr	r3, [r3, #8]
 800a30c:	4a52      	ldr	r2, [pc, #328]	; (800a458 <HAL_RCC_ClockConfig+0x1bc>)
 800a30e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a312:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a314:	4b50      	ldr	r3, [pc, #320]	; (800a458 <HAL_RCC_ClockConfig+0x1bc>)
 800a316:	689b      	ldr	r3, [r3, #8]
 800a318:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	689b      	ldr	r3, [r3, #8]
 800a320:	494d      	ldr	r1, [pc, #308]	; (800a458 <HAL_RCC_ClockConfig+0x1bc>)
 800a322:	4313      	orrs	r3, r2
 800a324:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f003 0301 	and.w	r3, r3, #1
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d044      	beq.n	800a3bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	2b01      	cmp	r3, #1
 800a338:	d107      	bne.n	800a34a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a33a:	4b47      	ldr	r3, [pc, #284]	; (800a458 <HAL_RCC_ClockConfig+0x1bc>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a342:	2b00      	cmp	r3, #0
 800a344:	d119      	bne.n	800a37a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a346:	2301      	movs	r3, #1
 800a348:	e07f      	b.n	800a44a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	2b02      	cmp	r3, #2
 800a350:	d003      	beq.n	800a35a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a356:	2b03      	cmp	r3, #3
 800a358:	d107      	bne.n	800a36a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a35a:	4b3f      	ldr	r3, [pc, #252]	; (800a458 <HAL_RCC_ClockConfig+0x1bc>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a362:	2b00      	cmp	r3, #0
 800a364:	d109      	bne.n	800a37a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a366:	2301      	movs	r3, #1
 800a368:	e06f      	b.n	800a44a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a36a:	4b3b      	ldr	r3, [pc, #236]	; (800a458 <HAL_RCC_ClockConfig+0x1bc>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f003 0302 	and.w	r3, r3, #2
 800a372:	2b00      	cmp	r3, #0
 800a374:	d101      	bne.n	800a37a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a376:	2301      	movs	r3, #1
 800a378:	e067      	b.n	800a44a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a37a:	4b37      	ldr	r3, [pc, #220]	; (800a458 <HAL_RCC_ClockConfig+0x1bc>)
 800a37c:	689b      	ldr	r3, [r3, #8]
 800a37e:	f023 0203 	bic.w	r2, r3, #3
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	4934      	ldr	r1, [pc, #208]	; (800a458 <HAL_RCC_ClockConfig+0x1bc>)
 800a388:	4313      	orrs	r3, r2
 800a38a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a38c:	f7fd f8e2 	bl	8007554 <HAL_GetTick>
 800a390:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a392:	e00a      	b.n	800a3aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a394:	f7fd f8de 	bl	8007554 <HAL_GetTick>
 800a398:	4602      	mov	r2, r0
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	1ad3      	subs	r3, r2, r3
 800a39e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d901      	bls.n	800a3aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a3a6:	2303      	movs	r3, #3
 800a3a8:	e04f      	b.n	800a44a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a3aa:	4b2b      	ldr	r3, [pc, #172]	; (800a458 <HAL_RCC_ClockConfig+0x1bc>)
 800a3ac:	689b      	ldr	r3, [r3, #8]
 800a3ae:	f003 020c 	and.w	r2, r3, #12
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	009b      	lsls	r3, r3, #2
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d1eb      	bne.n	800a394 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a3bc:	4b25      	ldr	r3, [pc, #148]	; (800a454 <HAL_RCC_ClockConfig+0x1b8>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f003 030f 	and.w	r3, r3, #15
 800a3c4:	683a      	ldr	r2, [r7, #0]
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d20c      	bcs.n	800a3e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a3ca:	4b22      	ldr	r3, [pc, #136]	; (800a454 <HAL_RCC_ClockConfig+0x1b8>)
 800a3cc:	683a      	ldr	r2, [r7, #0]
 800a3ce:	b2d2      	uxtb	r2, r2
 800a3d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a3d2:	4b20      	ldr	r3, [pc, #128]	; (800a454 <HAL_RCC_ClockConfig+0x1b8>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f003 030f 	and.w	r3, r3, #15
 800a3da:	683a      	ldr	r2, [r7, #0]
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d001      	beq.n	800a3e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	e032      	b.n	800a44a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f003 0304 	and.w	r3, r3, #4
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d008      	beq.n	800a402 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a3f0:	4b19      	ldr	r3, [pc, #100]	; (800a458 <HAL_RCC_ClockConfig+0x1bc>)
 800a3f2:	689b      	ldr	r3, [r3, #8]
 800a3f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	68db      	ldr	r3, [r3, #12]
 800a3fc:	4916      	ldr	r1, [pc, #88]	; (800a458 <HAL_RCC_ClockConfig+0x1bc>)
 800a3fe:	4313      	orrs	r3, r2
 800a400:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f003 0308 	and.w	r3, r3, #8
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d009      	beq.n	800a422 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a40e:	4b12      	ldr	r3, [pc, #72]	; (800a458 <HAL_RCC_ClockConfig+0x1bc>)
 800a410:	689b      	ldr	r3, [r3, #8]
 800a412:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	691b      	ldr	r3, [r3, #16]
 800a41a:	00db      	lsls	r3, r3, #3
 800a41c:	490e      	ldr	r1, [pc, #56]	; (800a458 <HAL_RCC_ClockConfig+0x1bc>)
 800a41e:	4313      	orrs	r3, r2
 800a420:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a422:	f000 f821 	bl	800a468 <HAL_RCC_GetSysClockFreq>
 800a426:	4601      	mov	r1, r0
 800a428:	4b0b      	ldr	r3, [pc, #44]	; (800a458 <HAL_RCC_ClockConfig+0x1bc>)
 800a42a:	689b      	ldr	r3, [r3, #8]
 800a42c:	091b      	lsrs	r3, r3, #4
 800a42e:	f003 030f 	and.w	r3, r3, #15
 800a432:	4a0a      	ldr	r2, [pc, #40]	; (800a45c <HAL_RCC_ClockConfig+0x1c0>)
 800a434:	5cd3      	ldrb	r3, [r2, r3]
 800a436:	fa21 f303 	lsr.w	r3, r1, r3
 800a43a:	4a09      	ldr	r2, [pc, #36]	; (800a460 <HAL_RCC_ClockConfig+0x1c4>)
 800a43c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a43e:	4b09      	ldr	r3, [pc, #36]	; (800a464 <HAL_RCC_ClockConfig+0x1c8>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	4618      	mov	r0, r3
 800a444:	f7fd f842 	bl	80074cc <HAL_InitTick>

  return HAL_OK;
 800a448:	2300      	movs	r3, #0
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3710      	adds	r7, #16
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}
 800a452:	bf00      	nop
 800a454:	40023c00 	.word	0x40023c00
 800a458:	40023800 	.word	0x40023800
 800a45c:	080150dc 	.word	0x080150dc
 800a460:	20000158 	.word	0x20000158
 800a464:	20000160 	.word	0x20000160

0800a468 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a46a:	b085      	sub	sp, #20
 800a46c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a46e:	2300      	movs	r3, #0
 800a470:	607b      	str	r3, [r7, #4]
 800a472:	2300      	movs	r3, #0
 800a474:	60fb      	str	r3, [r7, #12]
 800a476:	2300      	movs	r3, #0
 800a478:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a47a:	2300      	movs	r3, #0
 800a47c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a47e:	4b50      	ldr	r3, [pc, #320]	; (800a5c0 <HAL_RCC_GetSysClockFreq+0x158>)
 800a480:	689b      	ldr	r3, [r3, #8]
 800a482:	f003 030c 	and.w	r3, r3, #12
 800a486:	2b04      	cmp	r3, #4
 800a488:	d007      	beq.n	800a49a <HAL_RCC_GetSysClockFreq+0x32>
 800a48a:	2b08      	cmp	r3, #8
 800a48c:	d008      	beq.n	800a4a0 <HAL_RCC_GetSysClockFreq+0x38>
 800a48e:	2b00      	cmp	r3, #0
 800a490:	f040 808d 	bne.w	800a5ae <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a494:	4b4b      	ldr	r3, [pc, #300]	; (800a5c4 <HAL_RCC_GetSysClockFreq+0x15c>)
 800a496:	60bb      	str	r3, [r7, #8]
       break;
 800a498:	e08c      	b.n	800a5b4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a49a:	4b4b      	ldr	r3, [pc, #300]	; (800a5c8 <HAL_RCC_GetSysClockFreq+0x160>)
 800a49c:	60bb      	str	r3, [r7, #8]
      break;
 800a49e:	e089      	b.n	800a5b4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a4a0:	4b47      	ldr	r3, [pc, #284]	; (800a5c0 <HAL_RCC_GetSysClockFreq+0x158>)
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a4a8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a4aa:	4b45      	ldr	r3, [pc, #276]	; (800a5c0 <HAL_RCC_GetSysClockFreq+0x158>)
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d023      	beq.n	800a4fe <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a4b6:	4b42      	ldr	r3, [pc, #264]	; (800a5c0 <HAL_RCC_GetSysClockFreq+0x158>)
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	099b      	lsrs	r3, r3, #6
 800a4bc:	f04f 0400 	mov.w	r4, #0
 800a4c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a4c4:	f04f 0200 	mov.w	r2, #0
 800a4c8:	ea03 0501 	and.w	r5, r3, r1
 800a4cc:	ea04 0602 	and.w	r6, r4, r2
 800a4d0:	4a3d      	ldr	r2, [pc, #244]	; (800a5c8 <HAL_RCC_GetSysClockFreq+0x160>)
 800a4d2:	fb02 f106 	mul.w	r1, r2, r6
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	fb02 f205 	mul.w	r2, r2, r5
 800a4dc:	440a      	add	r2, r1
 800a4de:	493a      	ldr	r1, [pc, #232]	; (800a5c8 <HAL_RCC_GetSysClockFreq+0x160>)
 800a4e0:	fba5 0101 	umull	r0, r1, r5, r1
 800a4e4:	1853      	adds	r3, r2, r1
 800a4e6:	4619      	mov	r1, r3
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f04f 0400 	mov.w	r4, #0
 800a4ee:	461a      	mov	r2, r3
 800a4f0:	4623      	mov	r3, r4
 800a4f2:	f7f6 fbc9 	bl	8000c88 <__aeabi_uldivmod>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	460c      	mov	r4, r1
 800a4fa:	60fb      	str	r3, [r7, #12]
 800a4fc:	e049      	b.n	800a592 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a4fe:	4b30      	ldr	r3, [pc, #192]	; (800a5c0 <HAL_RCC_GetSysClockFreq+0x158>)
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	099b      	lsrs	r3, r3, #6
 800a504:	f04f 0400 	mov.w	r4, #0
 800a508:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a50c:	f04f 0200 	mov.w	r2, #0
 800a510:	ea03 0501 	and.w	r5, r3, r1
 800a514:	ea04 0602 	and.w	r6, r4, r2
 800a518:	4629      	mov	r1, r5
 800a51a:	4632      	mov	r2, r6
 800a51c:	f04f 0300 	mov.w	r3, #0
 800a520:	f04f 0400 	mov.w	r4, #0
 800a524:	0154      	lsls	r4, r2, #5
 800a526:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a52a:	014b      	lsls	r3, r1, #5
 800a52c:	4619      	mov	r1, r3
 800a52e:	4622      	mov	r2, r4
 800a530:	1b49      	subs	r1, r1, r5
 800a532:	eb62 0206 	sbc.w	r2, r2, r6
 800a536:	f04f 0300 	mov.w	r3, #0
 800a53a:	f04f 0400 	mov.w	r4, #0
 800a53e:	0194      	lsls	r4, r2, #6
 800a540:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a544:	018b      	lsls	r3, r1, #6
 800a546:	1a5b      	subs	r3, r3, r1
 800a548:	eb64 0402 	sbc.w	r4, r4, r2
 800a54c:	f04f 0100 	mov.w	r1, #0
 800a550:	f04f 0200 	mov.w	r2, #0
 800a554:	00e2      	lsls	r2, r4, #3
 800a556:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a55a:	00d9      	lsls	r1, r3, #3
 800a55c:	460b      	mov	r3, r1
 800a55e:	4614      	mov	r4, r2
 800a560:	195b      	adds	r3, r3, r5
 800a562:	eb44 0406 	adc.w	r4, r4, r6
 800a566:	f04f 0100 	mov.w	r1, #0
 800a56a:	f04f 0200 	mov.w	r2, #0
 800a56e:	02a2      	lsls	r2, r4, #10
 800a570:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a574:	0299      	lsls	r1, r3, #10
 800a576:	460b      	mov	r3, r1
 800a578:	4614      	mov	r4, r2
 800a57a:	4618      	mov	r0, r3
 800a57c:	4621      	mov	r1, r4
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f04f 0400 	mov.w	r4, #0
 800a584:	461a      	mov	r2, r3
 800a586:	4623      	mov	r3, r4
 800a588:	f7f6 fb7e 	bl	8000c88 <__aeabi_uldivmod>
 800a58c:	4603      	mov	r3, r0
 800a58e:	460c      	mov	r4, r1
 800a590:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a592:	4b0b      	ldr	r3, [pc, #44]	; (800a5c0 <HAL_RCC_GetSysClockFreq+0x158>)
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	0c1b      	lsrs	r3, r3, #16
 800a598:	f003 0303 	and.w	r3, r3, #3
 800a59c:	3301      	adds	r3, #1
 800a59e:	005b      	lsls	r3, r3, #1
 800a5a0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a5a2:	68fa      	ldr	r2, [r7, #12]
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5aa:	60bb      	str	r3, [r7, #8]
      break;
 800a5ac:	e002      	b.n	800a5b4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a5ae:	4b05      	ldr	r3, [pc, #20]	; (800a5c4 <HAL_RCC_GetSysClockFreq+0x15c>)
 800a5b0:	60bb      	str	r3, [r7, #8]
      break;
 800a5b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a5b4:	68bb      	ldr	r3, [r7, #8]
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3714      	adds	r7, #20
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	40023800 	.word	0x40023800
 800a5c4:	00f42400 	.word	0x00f42400
 800a5c8:	017d7840 	.word	0x017d7840

0800a5cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a5d0:	4b03      	ldr	r3, [pc, #12]	; (800a5e0 <HAL_RCC_GetHCLKFreq+0x14>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr
 800a5de:	bf00      	nop
 800a5e0:	20000158 	.word	0x20000158

0800a5e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a5e8:	f7ff fff0 	bl	800a5cc <HAL_RCC_GetHCLKFreq>
 800a5ec:	4601      	mov	r1, r0
 800a5ee:	4b05      	ldr	r3, [pc, #20]	; (800a604 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a5f0:	689b      	ldr	r3, [r3, #8]
 800a5f2:	0a9b      	lsrs	r3, r3, #10
 800a5f4:	f003 0307 	and.w	r3, r3, #7
 800a5f8:	4a03      	ldr	r2, [pc, #12]	; (800a608 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a5fa:	5cd3      	ldrb	r3, [r2, r3]
 800a5fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a600:	4618      	mov	r0, r3
 800a602:	bd80      	pop	{r7, pc}
 800a604:	40023800 	.word	0x40023800
 800a608:	080150ec 	.word	0x080150ec

0800a60c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b082      	sub	sp, #8
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d101      	bne.n	800a61e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a61a:	2301      	movs	r3, #1
 800a61c:	e022      	b.n	800a664 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a624:	b2db      	uxtb	r3, r3
 800a626:	2b00      	cmp	r3, #0
 800a628:	d105      	bne.n	800a636 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2200      	movs	r2, #0
 800a62e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f7f8 fc63 	bl	8002efc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2203      	movs	r2, #3
 800a63a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 f814 	bl	800a66c <HAL_SD_InitCard>
 800a644:	4603      	mov	r3, r0
 800a646:	2b00      	cmp	r3, #0
 800a648:	d001      	beq.n	800a64e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a64a:	2301      	movs	r3, #1
 800a64c:	e00a      	b.n	800a664 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2200      	movs	r2, #0
 800a652:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2200      	movs	r2, #0
 800a658:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2201      	movs	r2, #1
 800a65e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a662:	2300      	movs	r3, #0
}
 800a664:	4618      	mov	r0, r3
 800a666:	3708      	adds	r7, #8
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a66c:	b5b0      	push	{r4, r5, r7, lr}
 800a66e:	b08e      	sub	sp, #56	; 0x38
 800a670:	af04      	add	r7, sp, #16
 800a672:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800a674:	2300      	movs	r3, #0
 800a676:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800a678:	2300      	movs	r3, #0
 800a67a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800a67c:	2300      	movs	r3, #0
 800a67e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800a680:	2300      	movs	r3, #0
 800a682:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800a684:	2300      	movs	r3, #0
 800a686:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800a688:	2376      	movs	r3, #118	; 0x76
 800a68a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681d      	ldr	r5, [r3, #0]
 800a690:	466c      	mov	r4, sp
 800a692:	f107 0314 	add.w	r3, r7, #20
 800a696:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a69a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a69e:	f107 0308 	add.w	r3, r7, #8
 800a6a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a6a4:	4628      	mov	r0, r5
 800a6a6:	f002 f803 	bl	800c6b0 <SDIO_Init>
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800a6b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d001      	beq.n	800a6bc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a6b8:	2301      	movs	r3, #1
 800a6ba:	e031      	b.n	800a720 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800a6bc:	4b1a      	ldr	r3, [pc, #104]	; (800a728 <HAL_SD_InitCard+0xbc>)
 800a6be:	2200      	movs	r2, #0
 800a6c0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f002 f83b 	bl	800c742 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800a6cc:	4b16      	ldr	r3, [pc, #88]	; (800a728 <HAL_SD_InitCard+0xbc>)
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f000 ffdc 	bl	800b690 <SD_PowerON>
 800a6d8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a6da:	6a3b      	ldr	r3, [r7, #32]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d00b      	beq.n	800a6f8 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6ec:	6a3b      	ldr	r3, [r7, #32]
 800a6ee:	431a      	orrs	r2, r3
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	e013      	b.n	800a720 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f000 fefb 	bl	800b4f4 <SD_InitCard>
 800a6fe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a700:	6a3b      	ldr	r3, [r7, #32]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d00b      	beq.n	800a71e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2201      	movs	r2, #1
 800a70a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a712:	6a3b      	ldr	r3, [r7, #32]
 800a714:	431a      	orrs	r2, r3
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a71a:	2301      	movs	r3, #1
 800a71c:	e000      	b.n	800a720 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800a71e:	2300      	movs	r3, #0
}
 800a720:	4618      	mov	r0, r3
 800a722:	3728      	adds	r7, #40	; 0x28
 800a724:	46bd      	mov	sp, r7
 800a726:	bdb0      	pop	{r4, r5, r7, pc}
 800a728:	422580a0 	.word	0x422580a0

0800a72c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b08c      	sub	sp, #48	; 0x30
 800a730:	af00      	add	r7, sp, #0
 800a732:	60f8      	str	r0, [r7, #12]
 800a734:	60b9      	str	r1, [r7, #8]
 800a736:	607a      	str	r2, [r7, #4]
 800a738:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d107      	bne.n	800a754 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a748:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a750:	2301      	movs	r3, #1
 800a752:	e0c9      	b.n	800a8e8 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a75a:	b2db      	uxtb	r3, r3
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	f040 80c2 	bne.w	800a8e6 <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	2200      	movs	r2, #0
 800a766:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a768:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	441a      	add	r2, r3
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a772:	429a      	cmp	r2, r3
 800a774:	d907      	bls.n	800a786 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a77a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a782:	2301      	movs	r3, #1
 800a784:	e0b0      	b.n	800a8e8 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	2203      	movs	r2, #3
 800a78a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	2200      	movs	r2, #0
 800a794:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a79c:	68fa      	ldr	r2, [r7, #12]
 800a79e:	6812      	ldr	r2, [r2, #0]
 800a7a0:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800a7a4:	f043 0302 	orr.w	r3, r3, #2
 800a7a8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ae:	4a50      	ldr	r2, [pc, #320]	; (800a8f0 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800a7b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b6:	4a4f      	ldr	r2, [pc, #316]	; (800a8f4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800a7b8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7be:	2200      	movs	r2, #0
 800a7c0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	3380      	adds	r3, #128	; 0x80
 800a7cc:	4619      	mov	r1, r3
 800a7ce:	68ba      	ldr	r2, [r7, #8]
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	025b      	lsls	r3, r3, #9
 800a7d4:	089b      	lsrs	r3, r3, #2
 800a7d6:	f7fd fce9 	bl	80081ac <HAL_DMA_Start_IT>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d017      	beq.n	800a810 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800a7ee:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	4a40      	ldr	r2, [pc, #256]	; (800a8f8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800a7f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	2201      	movs	r2, #1
 800a808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a80c:	2301      	movs	r3, #1
 800a80e:	e06b      	b.n	800a8e8 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800a810:	4b3a      	ldr	r3, [pc, #232]	; (800a8fc <HAL_SD_ReadBlocks_DMA+0x1d0>)
 800a812:	2201      	movs	r2, #1
 800a814:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a81a:	2b01      	cmp	r3, #1
 800a81c:	d002      	beq.n	800a824 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 800a81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a820:	025b      	lsls	r3, r3, #9
 800a822:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a82c:	4618      	mov	r0, r3
 800a82e:	f002 f81b 	bl	800c868 <SDMMC_CmdBlockLength>
 800a832:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800a834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a836:	2b00      	cmp	r3, #0
 800a838:	d00f      	beq.n	800a85a <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4a2e      	ldr	r2, [pc, #184]	; (800a8f8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800a840:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a848:	431a      	orrs	r2, r3
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2201      	movs	r2, #1
 800a852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800a856:	2301      	movs	r3, #1
 800a858:	e046      	b.n	800a8e8 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a85a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a85e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	025b      	lsls	r3, r3, #9
 800a864:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800a866:	2390      	movs	r3, #144	; 0x90
 800a868:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a86a:	2302      	movs	r3, #2
 800a86c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a86e:	2300      	movs	r3, #0
 800a870:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800a872:	2301      	movs	r3, #1
 800a874:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f107 0210 	add.w	r2, r7, #16
 800a87e:	4611      	mov	r1, r2
 800a880:	4618      	mov	r0, r3
 800a882:	f001 ffc5 	bl	800c810 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	2b01      	cmp	r3, #1
 800a88a:	d90a      	bls.n	800a8a2 <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	2282      	movs	r2, #130	; 0x82
 800a890:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a898:	4618      	mov	r0, r3
 800a89a:	f002 f829 	bl	800c8f0 <SDMMC_CmdReadMultiBlock>
 800a89e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a8a0:	e009      	b.n	800a8b6 <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2281      	movs	r2, #129	; 0x81
 800a8a6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f001 fffc 	bl	800c8ac <SDMMC_CmdReadSingleBlock>
 800a8b4:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800a8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d012      	beq.n	800a8e2 <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a0d      	ldr	r2, [pc, #52]	; (800a8f8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800a8c2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ca:	431a      	orrs	r2, r3
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800a8de:	2301      	movs	r3, #1
 800a8e0:	e002      	b.n	800a8e8 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	e000      	b.n	800a8e8 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 800a8e6:	2302      	movs	r3, #2
  }
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3730      	adds	r7, #48	; 0x30
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}
 800a8f0:	0800b303 	.word	0x0800b303
 800a8f4:	0800b375 	.word	0x0800b375
 800a8f8:	004005ff 	.word	0x004005ff
 800a8fc:	4225858c 	.word	0x4225858c

0800a900 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b08c      	sub	sp, #48	; 0x30
 800a904:	af00      	add	r7, sp, #0
 800a906:	60f8      	str	r0, [r7, #12]
 800a908:	60b9      	str	r1, [r7, #8]
 800a90a:	607a      	str	r2, [r7, #4]
 800a90c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d107      	bne.n	800a928 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a91c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a924:	2301      	movs	r3, #1
 800a926:	e0ce      	b.n	800aac6 <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	2b01      	cmp	r3, #1
 800a932:	f040 80c7 	bne.w	800aac4 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	2200      	movs	r2, #0
 800a93a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a93c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	441a      	add	r2, r3
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a946:	429a      	cmp	r2, r3
 800a948:	d907      	bls.n	800a95a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a94e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a956:	2301      	movs	r3, #1
 800a958:	e0b5      	b.n	800aac6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2203      	movs	r2, #3
 800a95e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	2200      	movs	r2, #0
 800a968:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a970:	68fa      	ldr	r2, [r7, #12]
 800a972:	6812      	ldr	r2, [r2, #0]
 800a974:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800a978:	f043 0302 	orr.w	r3, r3, #2
 800a97c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a982:	4a53      	ldr	r2, [pc, #332]	; (800aad0 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800a984:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a98a:	4a52      	ldr	r2, [pc, #328]	; (800aad4 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800a98c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a992:	2200      	movs	r2, #0
 800a994:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a99a:	2b01      	cmp	r3, #1
 800a99c:	d002      	beq.n	800a9a4 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800a99e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a0:	025b      	lsls	r3, r3, #9
 800a9a2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f001 ff5b 	bl	800c868 <SDMMC_CmdBlockLength>
 800a9b2:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d00f      	beq.n	800a9da <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	4a46      	ldr	r2, [pc, #280]	; (800aad8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800a9c0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c8:	431a      	orrs	r2, r3
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2201      	movs	r2, #1
 800a9d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	e075      	b.n	800aac6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	d90a      	bls.n	800a9f6 <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	22a0      	movs	r2, #160	; 0xa0
 800a9e4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f001 ffc3 	bl	800c978 <SDMMC_CmdWriteMultiBlock>
 800a9f2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a9f4:	e009      	b.n	800aa0a <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	2290      	movs	r2, #144	; 0x90
 800a9fa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa02:	4618      	mov	r0, r3
 800aa04:	f001 ff96 	bl	800c934 <SDMMC_CmdWriteSingleBlock>
 800aa08:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800aa0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d012      	beq.n	800aa36 <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4a30      	ldr	r2, [pc, #192]	; (800aad8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800aa16:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa1e:	431a      	orrs	r2, r3
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2201      	movs	r2, #1
 800aa28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800aa32:	2301      	movs	r3, #1
 800aa34:	e047      	b.n	800aac6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800aa36:	4b29      	ldr	r3, [pc, #164]	; (800aadc <HAL_SD_WriteBlocks_DMA+0x1dc>)
 800aa38:	2201      	movs	r2, #1
 800aa3a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800aa40:	68b9      	ldr	r1, [r7, #8]
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	3380      	adds	r3, #128	; 0x80
 800aa48:	461a      	mov	r2, r3
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	025b      	lsls	r3, r3, #9
 800aa4e:	089b      	lsrs	r3, r3, #2
 800aa50:	f7fd fbac 	bl	80081ac <HAL_DMA_Start_IT>
 800aa54:	4603      	mov	r3, r0
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d01c      	beq.n	800aa94 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa60:	68fa      	ldr	r2, [r7, #12]
 800aa62:	6812      	ldr	r2, [r2, #0]
 800aa64:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800aa68:	f023 0302 	bic.w	r3, r3, #2
 800aa6c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4a19      	ldr	r2, [pc, #100]	; (800aad8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800aa74:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa7a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	2201      	movs	r2, #1
 800aa86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800aa90:	2301      	movs	r3, #1
 800aa92:	e018      	b.n	800aac6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800aa94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa98:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	025b      	lsls	r3, r3, #9
 800aa9e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800aaa0:	2390      	movs	r3, #144	; 0x90
 800aaa2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800aaac:	2301      	movs	r3, #1
 800aaae:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f107 0210 	add.w	r2, r7, #16
 800aab8:	4611      	mov	r1, r2
 800aaba:	4618      	mov	r0, r3
 800aabc:	f001 fea8 	bl	800c810 <SDIO_ConfigData>

      return HAL_OK;
 800aac0:	2300      	movs	r3, #0
 800aac2:	e000      	b.n	800aac6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 800aac4:	2302      	movs	r3, #2
  }
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3730      	adds	r7, #48	; 0x30
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
 800aace:	bf00      	nop
 800aad0:	0800b2d9 	.word	0x0800b2d9
 800aad4:	0800b375 	.word	0x0800b375
 800aad8:	004005ff 	.word	0x004005ff
 800aadc:	4225858c 	.word	0x4225858c

0800aae0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b084      	sub	sp, #16
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaec:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d008      	beq.n	800ab0e <HAL_SD_IRQHandler+0x2e>
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	f003 0308 	and.w	r3, r3, #8
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d003      	beq.n	800ab0e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f000 ffd8 	bl	800babc <SD_Read_IT>
 800ab0c:	e165      	b.n	800adda <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	f000 808f 	beq.w	800ac3c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ab26:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab2e:	687a      	ldr	r2, [r7, #4]
 800ab30:	6812      	ldr	r2, [r2, #0]
 800ab32:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800ab36:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800ab3a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f022 0201 	bic.w	r2, r2, #1
 800ab4a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f003 0308 	and.w	r3, r3, #8
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d039      	beq.n	800abca <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	f003 0302 	and.w	r3, r3, #2
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d104      	bne.n	800ab6a <HAL_SD_IRQHandler+0x8a>
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f003 0320 	and.w	r3, r3, #32
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d011      	beq.n	800ab8e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f001 ff24 	bl	800c9bc <SDMMC_CmdStopTransfer>
 800ab74:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d008      	beq.n	800ab8e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	431a      	orrs	r2, r3
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f000 f92f 	bl	800adec <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f240 523a 	movw	r2, #1338	; 0x53a
 800ab96:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2201      	movs	r2, #1
 800ab9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2200      	movs	r2, #0
 800aba4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	f003 0301 	and.w	r3, r3, #1
 800abac:	2b00      	cmp	r3, #0
 800abae:	d104      	bne.n	800abba <HAL_SD_IRQHandler+0xda>
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f003 0302 	and.w	r3, r3, #2
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d003      	beq.n	800abc2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f002 fb82 	bl	800d2c4 <HAL_SD_RxCpltCallback>
 800abc0:	e10b      	b.n	800adda <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f002 fb74 	bl	800d2b0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800abc8:	e107      	b.n	800adda <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	f000 8102 	beq.w	800adda <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f003 0320 	and.w	r3, r3, #32
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d011      	beq.n	800ac04 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4618      	mov	r0, r3
 800abe6:	f001 fee9 	bl	800c9bc <SDMMC_CmdStopTransfer>
 800abea:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d008      	beq.n	800ac04 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	431a      	orrs	r2, r3
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f000 f8f4 	bl	800adec <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	f003 0301 	and.w	r3, r3, #1
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	f040 80e5 	bne.w	800adda <HAL_SD_IRQHandler+0x2fa>
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	f003 0302 	and.w	r3, r3, #2
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	f040 80df 	bne.w	800adda <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f022 0208 	bic.w	r2, r2, #8
 800ac2a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2201      	movs	r2, #1
 800ac30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f002 fb3b 	bl	800d2b0 <HAL_SD_TxCpltCallback>
}
 800ac3a:	e0ce      	b.n	800adda <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d008      	beq.n	800ac5c <HAL_SD_IRQHandler+0x17c>
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	f003 0308 	and.w	r3, r3, #8
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d003      	beq.n	800ac5c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f000 ff82 	bl	800bb5e <SD_Write_IT>
 800ac5a:	e0be      	b.n	800adda <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac62:	f240 233a 	movw	r3, #570	; 0x23a
 800ac66:	4013      	ands	r3, r2
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	f000 80b6 	beq.w	800adda <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac74:	f003 0302 	and.w	r3, r3, #2
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d005      	beq.n	800ac88 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac80:	f043 0202 	orr.w	r2, r3, #2
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac8e:	f003 0308 	and.w	r3, r3, #8
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d005      	beq.n	800aca2 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac9a:	f043 0208 	orr.w	r2, r3, #8
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aca8:	f003 0320 	and.w	r3, r3, #32
 800acac:	2b00      	cmp	r3, #0
 800acae:	d005      	beq.n	800acbc <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb4:	f043 0220 	orr.w	r2, r3, #32
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acc2:	f003 0310 	and.w	r3, r3, #16
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d005      	beq.n	800acd6 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acce:	f043 0210 	orr.w	r2, r3, #16
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d005      	beq.n	800acf0 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ace8:	f043 0208 	orr.w	r2, r3, #8
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f240 723a 	movw	r2, #1850	; 0x73a
 800acf8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad00:	687a      	ldr	r2, [r7, #4]
 800ad02:	6812      	ldr	r2, [r2, #0]
 800ad04:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800ad08:	f023 0302 	bic.w	r3, r3, #2
 800ad0c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	4618      	mov	r0, r3
 800ad14:	f001 fe52 	bl	800c9bc <SDMMC_CmdStopTransfer>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad1e:	431a      	orrs	r2, r3
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f003 0308 	and.w	r3, r3, #8
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d00a      	beq.n	800ad44 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2201      	movs	r2, #1
 800ad32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f000 f855 	bl	800adec <HAL_SD_ErrorCallback>
}
 800ad42:	e04a      	b.n	800adda <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d045      	beq.n	800adda <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	f003 0310 	and.w	r3, r3, #16
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d104      	bne.n	800ad62 <HAL_SD_IRQHandler+0x282>
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f003 0320 	and.w	r3, r3, #32
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d011      	beq.n	800ad86 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad66:	4a1f      	ldr	r2, [pc, #124]	; (800ade4 <HAL_SD_IRQHandler+0x304>)
 800ad68:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f7fd fae4 	bl	800833c <HAL_DMA_Abort_IT>
 800ad74:	4603      	mov	r3, r0
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d02f      	beq.n	800adda <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f000 fb4a 	bl	800b418 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800ad84:	e029      	b.n	800adda <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	f003 0301 	and.w	r3, r3, #1
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d104      	bne.n	800ad9a <HAL_SD_IRQHandler+0x2ba>
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f003 0302 	and.w	r3, r3, #2
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d011      	beq.n	800adbe <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad9e:	4a12      	ldr	r2, [pc, #72]	; (800ade8 <HAL_SD_IRQHandler+0x308>)
 800ada0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ada6:	4618      	mov	r0, r3
 800ada8:	f7fd fac8 	bl	800833c <HAL_DMA_Abort_IT>
 800adac:	4603      	mov	r3, r0
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d013      	beq.n	800adda <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adb6:	4618      	mov	r0, r3
 800adb8:	f000 fb65 	bl	800b486 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800adbc:	e00d      	b.n	800adda <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2200      	movs	r2, #0
 800adc2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2201      	movs	r2, #1
 800adc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2200      	movs	r2, #0
 800add0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f002 fa62 	bl	800d29c <HAL_SD_AbortCallback>
}
 800add8:	e7ff      	b.n	800adda <HAL_SD_IRQHandler+0x2fa>
 800adda:	bf00      	nop
 800addc:	3710      	adds	r7, #16
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}
 800ade2:	bf00      	nop
 800ade4:	0800b419 	.word	0x0800b419
 800ade8:	0800b487 	.word	0x0800b487

0800adec <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800adf4:	bf00      	nop
 800adf6:	370c      	adds	r7, #12
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr

0800ae00 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b083      	sub	sp, #12
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae0e:	0f9b      	lsrs	r3, r3, #30
 800ae10:	b2da      	uxtb	r2, r3
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae1a:	0e9b      	lsrs	r3, r3, #26
 800ae1c:	b2db      	uxtb	r3, r3
 800ae1e:	f003 030f 	and.w	r3, r3, #15
 800ae22:	b2da      	uxtb	r2, r3
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae2c:	0e1b      	lsrs	r3, r3, #24
 800ae2e:	b2db      	uxtb	r3, r3
 800ae30:	f003 0303 	and.w	r3, r3, #3
 800ae34:	b2da      	uxtb	r2, r3
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae3e:	0c1b      	lsrs	r3, r3, #16
 800ae40:	b2da      	uxtb	r2, r3
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae4a:	0a1b      	lsrs	r3, r3, #8
 800ae4c:	b2da      	uxtb	r2, r3
 800ae4e:	683b      	ldr	r3, [r7, #0]
 800ae50:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae56:	b2da      	uxtb	r2, r3
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae60:	0d1b      	lsrs	r3, r3, #20
 800ae62:	b29a      	uxth	r2, r3
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae6c:	0c1b      	lsrs	r3, r3, #16
 800ae6e:	b2db      	uxtb	r3, r3
 800ae70:	f003 030f 	and.w	r3, r3, #15
 800ae74:	b2da      	uxtb	r2, r3
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae7e:	0bdb      	lsrs	r3, r3, #15
 800ae80:	b2db      	uxtb	r3, r3
 800ae82:	f003 0301 	and.w	r3, r3, #1
 800ae86:	b2da      	uxtb	r2, r3
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ae90:	0b9b      	lsrs	r3, r3, #14
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	f003 0301 	and.w	r3, r3, #1
 800ae98:	b2da      	uxtb	r2, r3
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aea2:	0b5b      	lsrs	r3, r3, #13
 800aea4:	b2db      	uxtb	r3, r3
 800aea6:	f003 0301 	and.w	r3, r3, #1
 800aeaa:	b2da      	uxtb	r2, r3
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aeb4:	0b1b      	lsrs	r3, r3, #12
 800aeb6:	b2db      	uxtb	r3, r3
 800aeb8:	f003 0301 	and.w	r3, r3, #1
 800aebc:	b2da      	uxtb	r2, r3
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	2200      	movs	r2, #0
 800aec6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d163      	bne.n	800af98 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aed4:	009a      	lsls	r2, r3, #2
 800aed6:	f640 73fc 	movw	r3, #4092	; 0xffc
 800aeda:	4013      	ands	r3, r2
 800aedc:	687a      	ldr	r2, [r7, #4]
 800aede:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800aee0:	0f92      	lsrs	r2, r2, #30
 800aee2:	431a      	orrs	r2, r3
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aeec:	0edb      	lsrs	r3, r3, #27
 800aeee:	b2db      	uxtb	r3, r3
 800aef0:	f003 0307 	and.w	r3, r3, #7
 800aef4:	b2da      	uxtb	r2, r3
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aefe:	0e1b      	lsrs	r3, r3, #24
 800af00:	b2db      	uxtb	r3, r3
 800af02:	f003 0307 	and.w	r3, r3, #7
 800af06:	b2da      	uxtb	r2, r3
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af10:	0d5b      	lsrs	r3, r3, #21
 800af12:	b2db      	uxtb	r3, r3
 800af14:	f003 0307 	and.w	r3, r3, #7
 800af18:	b2da      	uxtb	r2, r3
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af22:	0c9b      	lsrs	r3, r3, #18
 800af24:	b2db      	uxtb	r3, r3
 800af26:	f003 0307 	and.w	r3, r3, #7
 800af2a:	b2da      	uxtb	r2, r3
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af34:	0bdb      	lsrs	r3, r3, #15
 800af36:	b2db      	uxtb	r3, r3
 800af38:	f003 0307 	and.w	r3, r3, #7
 800af3c:	b2da      	uxtb	r2, r3
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	691b      	ldr	r3, [r3, #16]
 800af46:	1c5a      	adds	r2, r3, #1
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	7e1b      	ldrb	r3, [r3, #24]
 800af50:	b2db      	uxtb	r3, r3
 800af52:	f003 0307 	and.w	r3, r3, #7
 800af56:	3302      	adds	r3, #2
 800af58:	2201      	movs	r2, #1
 800af5a:	fa02 f303 	lsl.w	r3, r2, r3
 800af5e:	687a      	ldr	r2, [r7, #4]
 800af60:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800af62:	fb02 f203 	mul.w	r2, r2, r3
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	7a1b      	ldrb	r3, [r3, #8]
 800af6e:	b2db      	uxtb	r3, r3
 800af70:	f003 030f 	and.w	r3, r3, #15
 800af74:	2201      	movs	r2, #1
 800af76:	409a      	lsls	r2, r3
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af80:	687a      	ldr	r2, [r7, #4]
 800af82:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800af84:	0a52      	lsrs	r2, r2, #9
 800af86:	fb02 f203 	mul.w	r2, r2, r3
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af94:	661a      	str	r2, [r3, #96]	; 0x60
 800af96:	e031      	b.n	800affc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	d11d      	bne.n	800afdc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800afa4:	041b      	lsls	r3, r3, #16
 800afa6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afae:	0c1b      	lsrs	r3, r3, #16
 800afb0:	431a      	orrs	r2, r3
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	691b      	ldr	r3, [r3, #16]
 800afba:	3301      	adds	r3, #1
 800afbc:	029a      	lsls	r2, r3, #10
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800afd0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	661a      	str	r2, [r3, #96]	; 0x60
 800afda:	e00f      	b.n	800affc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4a58      	ldr	r2, [pc, #352]	; (800b144 <HAL_SD_GetCardCSD+0x344>)
 800afe2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afe8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	2201      	movs	r2, #1
 800aff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800aff8:	2301      	movs	r3, #1
 800affa:	e09d      	b.n	800b138 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b000:	0b9b      	lsrs	r3, r3, #14
 800b002:	b2db      	uxtb	r3, r3
 800b004:	f003 0301 	and.w	r3, r3, #1
 800b008:	b2da      	uxtb	r2, r3
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b012:	09db      	lsrs	r3, r3, #7
 800b014:	b2db      	uxtb	r3, r3
 800b016:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b01a:	b2da      	uxtb	r2, r3
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b024:	b2db      	uxtb	r3, r3
 800b026:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b02a:	b2da      	uxtb	r2, r3
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b034:	0fdb      	lsrs	r3, r3, #31
 800b036:	b2da      	uxtb	r2, r3
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b040:	0f5b      	lsrs	r3, r3, #29
 800b042:	b2db      	uxtb	r3, r3
 800b044:	f003 0303 	and.w	r3, r3, #3
 800b048:	b2da      	uxtb	r2, r3
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b052:	0e9b      	lsrs	r3, r3, #26
 800b054:	b2db      	uxtb	r3, r3
 800b056:	f003 0307 	and.w	r3, r3, #7
 800b05a:	b2da      	uxtb	r2, r3
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b064:	0d9b      	lsrs	r3, r3, #22
 800b066:	b2db      	uxtb	r3, r3
 800b068:	f003 030f 	and.w	r3, r3, #15
 800b06c:	b2da      	uxtb	r2, r3
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b076:	0d5b      	lsrs	r3, r3, #21
 800b078:	b2db      	uxtb	r3, r3
 800b07a:	f003 0301 	and.w	r3, r3, #1
 800b07e:	b2da      	uxtb	r2, r3
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	2200      	movs	r2, #0
 800b08a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b092:	0c1b      	lsrs	r3, r3, #16
 800b094:	b2db      	uxtb	r3, r3
 800b096:	f003 0301 	and.w	r3, r3, #1
 800b09a:	b2da      	uxtb	r2, r3
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0a6:	0bdb      	lsrs	r3, r3, #15
 800b0a8:	b2db      	uxtb	r3, r3
 800b0aa:	f003 0301 	and.w	r3, r3, #1
 800b0ae:	b2da      	uxtb	r2, r3
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0ba:	0b9b      	lsrs	r3, r3, #14
 800b0bc:	b2db      	uxtb	r3, r3
 800b0be:	f003 0301 	and.w	r3, r3, #1
 800b0c2:	b2da      	uxtb	r2, r3
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0ce:	0b5b      	lsrs	r3, r3, #13
 800b0d0:	b2db      	uxtb	r3, r3
 800b0d2:	f003 0301 	and.w	r3, r3, #1
 800b0d6:	b2da      	uxtb	r2, r3
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0e2:	0b1b      	lsrs	r3, r3, #12
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	f003 0301 	and.w	r3, r3, #1
 800b0ea:	b2da      	uxtb	r2, r3
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0f6:	0a9b      	lsrs	r3, r3, #10
 800b0f8:	b2db      	uxtb	r3, r3
 800b0fa:	f003 0303 	and.w	r3, r3, #3
 800b0fe:	b2da      	uxtb	r2, r3
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b10a:	0a1b      	lsrs	r3, r3, #8
 800b10c:	b2db      	uxtb	r3, r3
 800b10e:	f003 0303 	and.w	r3, r3, #3
 800b112:	b2da      	uxtb	r2, r3
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b11e:	085b      	lsrs	r3, r3, #1
 800b120:	b2db      	uxtb	r3, r3
 800b122:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b126:	b2da      	uxtb	r2, r3
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	2201      	movs	r2, #1
 800b132:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800b136:	2300      	movs	r3, #0
}
 800b138:	4618      	mov	r0, r3
 800b13a:	370c      	adds	r7, #12
 800b13c:	46bd      	mov	sp, r7
 800b13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b142:	4770      	bx	lr
 800b144:	004005ff 	.word	0x004005ff

0800b148 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800b148:	b480      	push	{r7}
 800b14a:	b083      	sub	sp, #12
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
 800b150:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800b192:	2300      	movs	r3, #0
}
 800b194:	4618      	mov	r0, r3
 800b196:	370c      	adds	r7, #12
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr

0800b1a0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800b1a0:	b5b0      	push	{r4, r5, r7, lr}
 800b1a2:	b08e      	sub	sp, #56	; 0x38
 800b1a4:	af04      	add	r7, sp, #16
 800b1a6:	6078      	str	r0, [r7, #4]
 800b1a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2203      	movs	r2, #3
 800b1ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1b6:	2b03      	cmp	r3, #3
 800b1b8:	d02e      	beq.n	800b218 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1c0:	d106      	bne.n	800b1d0 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1c6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	639a      	str	r2, [r3, #56]	; 0x38
 800b1ce:	e029      	b.n	800b224 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b1d6:	d10a      	bne.n	800b1ee <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f000 fb0f 	bl	800b7fc <SD_WideBus_Enable>
 800b1de:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e6:	431a      	orrs	r2, r3
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	639a      	str	r2, [r3, #56]	; 0x38
 800b1ec:	e01a      	b.n	800b224 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d10a      	bne.n	800b20a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f000 fb4c 	bl	800b892 <SD_WideBus_Disable>
 800b1fa:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b202:	431a      	orrs	r2, r3
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	639a      	str	r2, [r3, #56]	; 0x38
 800b208:	e00c      	b.n	800b224 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b20e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	639a      	str	r2, [r3, #56]	; 0x38
 800b216:	e005      	b.n	800b224 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b21c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d009      	beq.n	800b240 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	4a18      	ldr	r2, [pc, #96]	; (800b294 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800b232:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2201      	movs	r2, #1
 800b238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b23c:	2301      	movs	r3, #1
 800b23e:	e024      	b.n	800b28a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	689b      	ldr	r3, [r3, #8]
 800b24a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	68db      	ldr	r3, [r3, #12]
 800b250:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	695b      	ldr	r3, [r3, #20]
 800b25a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	699b      	ldr	r3, [r3, #24]
 800b260:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	681d      	ldr	r5, [r3, #0]
 800b266:	466c      	mov	r4, sp
 800b268:	f107 0318 	add.w	r3, r7, #24
 800b26c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b270:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b274:	f107 030c 	add.w	r3, r7, #12
 800b278:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b27a:	4628      	mov	r0, r5
 800b27c:	f001 fa18 	bl	800c6b0 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2201      	movs	r2, #1
 800b284:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b288:	2300      	movs	r3, #0
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3728      	adds	r7, #40	; 0x28
 800b28e:	46bd      	mov	sp, r7
 800b290:	bdb0      	pop	{r4, r5, r7, pc}
 800b292:	bf00      	nop
 800b294:	004005ff 	.word	0x004005ff

0800b298 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b086      	sub	sp, #24
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800b2a4:	f107 030c 	add.w	r3, r7, #12
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f000 fa7e 	bl	800b7ac <SD_SendStatus>
 800b2b0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d005      	beq.n	800b2c4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	431a      	orrs	r2, r3
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	0a5b      	lsrs	r3, r3, #9
 800b2c8:	f003 030f 	and.w	r3, r3, #15
 800b2cc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800b2ce:	693b      	ldr	r3, [r7, #16]
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3718      	adds	r7, #24
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}

0800b2d8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	b085      	sub	sp, #20
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2e4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b2f4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800b2f6:	bf00      	nop
 800b2f8:	3714      	adds	r7, #20
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b300:	4770      	bx	lr

0800b302 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b302:	b580      	push	{r7, lr}
 800b304:	b084      	sub	sp, #16
 800b306:	af00      	add	r7, sp, #0
 800b308:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b30e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b314:	2b82      	cmp	r3, #130	; 0x82
 800b316:	d111      	bne.n	800b33c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4618      	mov	r0, r3
 800b31e:	f001 fb4d 	bl	800c9bc <SDMMC_CmdStopTransfer>
 800b322:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d008      	beq.n	800b33c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	431a      	orrs	r2, r3
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800b336:	68f8      	ldr	r0, [r7, #12]
 800b338:	f7ff fd58 	bl	800adec <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f022 0208 	bic.w	r2, r2, #8
 800b34a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f240 523a 	movw	r2, #1338	; 0x53a
 800b354:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2201      	movs	r2, #1
 800b35a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	2200      	movs	r2, #0
 800b362:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800b364:	68f8      	ldr	r0, [r7, #12]
 800b366:	f001 ffad 	bl	800d2c4 <HAL_SD_RxCpltCallback>
#endif
}
 800b36a:	bf00      	nop
 800b36c:	3710      	adds	r7, #16
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
	...

0800b374 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b086      	sub	sp, #24
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b380:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f7fd f986 	bl	8008694 <HAL_DMA_GetError>
 800b388:	4603      	mov	r3, r0
 800b38a:	2b02      	cmp	r3, #2
 800b38c:	d03e      	beq.n	800b40c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b394:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800b396:	697b      	ldr	r3, [r7, #20]
 800b398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b39a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b39c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	2b01      	cmp	r3, #1
 800b3a2:	d002      	beq.n	800b3aa <SD_DMAError+0x36>
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2b01      	cmp	r3, #1
 800b3a8:	d12d      	bne.n	800b406 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	4a19      	ldr	r2, [pc, #100]	; (800b414 <SD_DMAError+0xa0>)
 800b3b0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b3c0:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3c6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800b3ce:	6978      	ldr	r0, [r7, #20]
 800b3d0:	f7ff ff62 	bl	800b298 <HAL_SD_GetCardState>
 800b3d4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	2b06      	cmp	r3, #6
 800b3da:	d002      	beq.n	800b3e2 <SD_DMAError+0x6e>
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	2b05      	cmp	r3, #5
 800b3e0:	d10a      	bne.n	800b3f8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	f001 fae8 	bl	800c9bc <SDMMC_CmdStopTransfer>
 800b3ec:	4602      	mov	r2, r0
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3f2:	431a      	orrs	r2, r3
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	2201      	movs	r2, #1
 800b3fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	2200      	movs	r2, #0
 800b404:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800b406:	6978      	ldr	r0, [r7, #20]
 800b408:	f7ff fcf0 	bl	800adec <HAL_SD_ErrorCallback>
#endif
  }
}
 800b40c:	bf00      	nop
 800b40e:	3718      	adds	r7, #24
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}
 800b414:	004005ff 	.word	0x004005ff

0800b418 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b084      	sub	sp, #16
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b424:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f240 523a 	movw	r2, #1338	; 0x53a
 800b42e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b430:	68f8      	ldr	r0, [r7, #12]
 800b432:	f7ff ff31 	bl	800b298 <HAL_SD_GetCardState>
 800b436:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	2201      	movs	r2, #1
 800b43c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	2200      	movs	r2, #0
 800b444:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	2b06      	cmp	r3, #6
 800b44a:	d002      	beq.n	800b452 <SD_DMATxAbort+0x3a>
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	2b05      	cmp	r3, #5
 800b450:	d10a      	bne.n	800b468 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	4618      	mov	r0, r3
 800b458:	f001 fab0 	bl	800c9bc <SDMMC_CmdStopTransfer>
 800b45c:	4602      	mov	r2, r0
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b462:	431a      	orrs	r2, r3
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d103      	bne.n	800b478 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800b470:	68f8      	ldr	r0, [r7, #12]
 800b472:	f001 ff13 	bl	800d29c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b476:	e002      	b.n	800b47e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b478:	68f8      	ldr	r0, [r7, #12]
 800b47a:	f7ff fcb7 	bl	800adec <HAL_SD_ErrorCallback>
}
 800b47e:	bf00      	nop
 800b480:	3710      	adds	r7, #16
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}

0800b486 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800b486:	b580      	push	{r7, lr}
 800b488:	b084      	sub	sp, #16
 800b48a:	af00      	add	r7, sp, #0
 800b48c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b492:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f240 523a 	movw	r2, #1338	; 0x53a
 800b49c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800b49e:	68f8      	ldr	r0, [r7, #12]
 800b4a0:	f7ff fefa 	bl	800b298 <HAL_SD_GetCardState>
 800b4a4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	2201      	movs	r2, #1
 800b4aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	2b06      	cmp	r3, #6
 800b4b8:	d002      	beq.n	800b4c0 <SD_DMARxAbort+0x3a>
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	2b05      	cmp	r3, #5
 800b4be:	d10a      	bne.n	800b4d6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	f001 fa79 	bl	800c9bc <SDMMC_CmdStopTransfer>
 800b4ca:	4602      	mov	r2, r0
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4d0:	431a      	orrs	r2, r3
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d103      	bne.n	800b4e6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800b4de:	68f8      	ldr	r0, [r7, #12]
 800b4e0:	f001 fedc 	bl	800d29c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b4e4:	e002      	b.n	800b4ec <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b4e6:	68f8      	ldr	r0, [r7, #12]
 800b4e8:	f7ff fc80 	bl	800adec <HAL_SD_ErrorCallback>
}
 800b4ec:	bf00      	nop
 800b4ee:	3710      	adds	r7, #16
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}

0800b4f4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b4f4:	b5b0      	push	{r4, r5, r7, lr}
 800b4f6:	b094      	sub	sp, #80	; 0x50
 800b4f8:	af04      	add	r7, sp, #16
 800b4fa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4618      	mov	r0, r3
 800b506:	f001 f92b 	bl	800c760 <SDIO_GetPowerState>
 800b50a:	4603      	mov	r3, r0
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d102      	bne.n	800b516 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b510:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b514:	e0b7      	b.n	800b686 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b51a:	2b03      	cmp	r3, #3
 800b51c:	d02f      	beq.n	800b57e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	4618      	mov	r0, r3
 800b524:	f001 fb54 	bl	800cbd0 <SDMMC_CmdSendCID>
 800b528:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b52a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d001      	beq.n	800b534 <SD_InitCard+0x40>
    {
      return errorstate;
 800b530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b532:	e0a8      	b.n	800b686 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	2100      	movs	r1, #0
 800b53a:	4618      	mov	r0, r3
 800b53c:	f001 f955 	bl	800c7ea <SDIO_GetResponse>
 800b540:	4602      	mov	r2, r0
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	2104      	movs	r1, #4
 800b54c:	4618      	mov	r0, r3
 800b54e:	f001 f94c 	bl	800c7ea <SDIO_GetResponse>
 800b552:	4602      	mov	r2, r0
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	2108      	movs	r1, #8
 800b55e:	4618      	mov	r0, r3
 800b560:	f001 f943 	bl	800c7ea <SDIO_GetResponse>
 800b564:	4602      	mov	r2, r0
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	210c      	movs	r1, #12
 800b570:	4618      	mov	r0, r3
 800b572:	f001 f93a 	bl	800c7ea <SDIO_GetResponse>
 800b576:	4602      	mov	r2, r0
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b582:	2b03      	cmp	r3, #3
 800b584:	d00d      	beq.n	800b5a2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f107 020e 	add.w	r2, r7, #14
 800b58e:	4611      	mov	r1, r2
 800b590:	4618      	mov	r0, r3
 800b592:	f001 fb5a 	bl	800cc4a <SDMMC_CmdSetRelAdd>
 800b596:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d001      	beq.n	800b5a2 <SD_InitCard+0xae>
    {
      return errorstate;
 800b59e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5a0:	e071      	b.n	800b686 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5a6:	2b03      	cmp	r3, #3
 800b5a8:	d036      	beq.n	800b618 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b5aa:	89fb      	ldrh	r3, [r7, #14]
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681a      	ldr	r2, [r3, #0]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b5ba:	041b      	lsls	r3, r3, #16
 800b5bc:	4619      	mov	r1, r3
 800b5be:	4610      	mov	r0, r2
 800b5c0:	f001 fb24 	bl	800cc0c <SDMMC_CmdSendCSD>
 800b5c4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b5c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d001      	beq.n	800b5d0 <SD_InitCard+0xdc>
    {
      return errorstate;
 800b5cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5ce:	e05a      	b.n	800b686 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	2100      	movs	r1, #0
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f001 f907 	bl	800c7ea <SDIO_GetResponse>
 800b5dc:	4602      	mov	r2, r0
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	2104      	movs	r1, #4
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f001 f8fe 	bl	800c7ea <SDIO_GetResponse>
 800b5ee:	4602      	mov	r2, r0
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	2108      	movs	r1, #8
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f001 f8f5 	bl	800c7ea <SDIO_GetResponse>
 800b600:	4602      	mov	r2, r0
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	210c      	movs	r1, #12
 800b60c:	4618      	mov	r0, r3
 800b60e:	f001 f8ec 	bl	800c7ea <SDIO_GetResponse>
 800b612:	4602      	mov	r2, r0
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	2104      	movs	r1, #4
 800b61e:	4618      	mov	r0, r3
 800b620:	f001 f8e3 	bl	800c7ea <SDIO_GetResponse>
 800b624:	4603      	mov	r3, r0
 800b626:	0d1a      	lsrs	r2, r3, #20
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b62c:	f107 0310 	add.w	r3, r7, #16
 800b630:	4619      	mov	r1, r3
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f7ff fbe4 	bl	800ae00 <HAL_SD_GetCardCSD>
 800b638:	4603      	mov	r3, r0
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d002      	beq.n	800b644 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b63e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b642:	e020      	b.n	800b686 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	6819      	ldr	r1, [r3, #0]
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b64c:	041b      	lsls	r3, r3, #16
 800b64e:	f04f 0400 	mov.w	r4, #0
 800b652:	461a      	mov	r2, r3
 800b654:	4623      	mov	r3, r4
 800b656:	4608      	mov	r0, r1
 800b658:	f001 f9d2 	bl	800ca00 <SDMMC_CmdSelDesel>
 800b65c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b65e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b660:	2b00      	cmp	r3, #0
 800b662:	d001      	beq.n	800b668 <SD_InitCard+0x174>
  {
    return errorstate;
 800b664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b666:	e00e      	b.n	800b686 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681d      	ldr	r5, [r3, #0]
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	466c      	mov	r4, sp
 800b670:	f103 0210 	add.w	r2, r3, #16
 800b674:	ca07      	ldmia	r2, {r0, r1, r2}
 800b676:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b67a:	3304      	adds	r3, #4
 800b67c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b67e:	4628      	mov	r0, r5
 800b680:	f001 f816 	bl	800c6b0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b684:	2300      	movs	r3, #0
}
 800b686:	4618      	mov	r0, r3
 800b688:	3740      	adds	r7, #64	; 0x40
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b690 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b086      	sub	sp, #24
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b698:	2300      	movs	r3, #0
 800b69a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b69c:	2300      	movs	r3, #0
 800b69e:	617b      	str	r3, [r7, #20]
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f001 f9cc 	bl	800ca46 <SDMMC_CmdGoIdleState>
 800b6ae:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d001      	beq.n	800b6ba <SD_PowerON+0x2a>
  {
    return errorstate;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	e072      	b.n	800b7a0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f001 f9df 	bl	800ca82 <SDMMC_CmdOperCond>
 800b6c4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d00d      	beq.n	800b6e8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f001 f9b5 	bl	800ca46 <SDMMC_CmdGoIdleState>
 800b6dc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d004      	beq.n	800b6ee <SD_PowerON+0x5e>
    {
      return errorstate;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	e05b      	b.n	800b7a0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2201      	movs	r2, #1
 800b6ec:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6f2:	2b01      	cmp	r3, #1
 800b6f4:	d137      	bne.n	800b766 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	2100      	movs	r1, #0
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f001 f9df 	bl	800cac0 <SDMMC_CmdAppCommand>
 800b702:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d02d      	beq.n	800b766 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b70a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b70e:	e047      	b.n	800b7a0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	2100      	movs	r1, #0
 800b716:	4618      	mov	r0, r3
 800b718:	f001 f9d2 	bl	800cac0 <SDMMC_CmdAppCommand>
 800b71c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d001      	beq.n	800b728 <SD_PowerON+0x98>
    {
      return errorstate;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	e03b      	b.n	800b7a0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	491e      	ldr	r1, [pc, #120]	; (800b7a8 <SD_PowerON+0x118>)
 800b72e:	4618      	mov	r0, r3
 800b730:	f001 f9e8 	bl	800cb04 <SDMMC_CmdAppOperCommand>
 800b734:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d002      	beq.n	800b742 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b73c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b740:	e02e      	b.n	800b7a0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	2100      	movs	r1, #0
 800b748:	4618      	mov	r0, r3
 800b74a:	f001 f84e 	bl	800c7ea <SDIO_GetResponse>
 800b74e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	0fdb      	lsrs	r3, r3, #31
 800b754:	2b01      	cmp	r3, #1
 800b756:	d101      	bne.n	800b75c <SD_PowerON+0xcc>
 800b758:	2301      	movs	r3, #1
 800b75a:	e000      	b.n	800b75e <SD_PowerON+0xce>
 800b75c:	2300      	movs	r3, #0
 800b75e:	613b      	str	r3, [r7, #16]

    count++;
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	3301      	adds	r3, #1
 800b764:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d802      	bhi.n	800b776 <SD_PowerON+0xe6>
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d0cc      	beq.n	800b710 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d902      	bls.n	800b786 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b780:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b784:	e00c      	b.n	800b7a0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d003      	beq.n	800b798 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2201      	movs	r2, #1
 800b794:	645a      	str	r2, [r3, #68]	; 0x44
 800b796:	e002      	b.n	800b79e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2200      	movs	r2, #0
 800b79c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800b79e:	2300      	movs	r3, #0
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3718      	adds	r7, #24
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}
 800b7a8:	c1100000 	.word	0xc1100000

0800b7ac <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b084      	sub	sp, #16
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d102      	bne.n	800b7c2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b7bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b7c0:	e018      	b.n	800b7f4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681a      	ldr	r2, [r3, #0]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7ca:	041b      	lsls	r3, r3, #16
 800b7cc:	4619      	mov	r1, r3
 800b7ce:	4610      	mov	r0, r2
 800b7d0:	f001 fa5c 	bl	800cc8c <SDMMC_CmdSendStatus>
 800b7d4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d001      	beq.n	800b7e0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	e009      	b.n	800b7f4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	2100      	movs	r1, #0
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f000 ffff 	bl	800c7ea <SDIO_GetResponse>
 800b7ec:	4602      	mov	r2, r0
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b7f2:	2300      	movs	r3, #0
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3710      	adds	r7, #16
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}

0800b7fc <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b7fc:	b580      	push	{r7, lr}
 800b7fe:	b086      	sub	sp, #24
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b804:	2300      	movs	r3, #0
 800b806:	60fb      	str	r3, [r7, #12]
 800b808:	2300      	movs	r3, #0
 800b80a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	2100      	movs	r1, #0
 800b812:	4618      	mov	r0, r3
 800b814:	f000 ffe9 	bl	800c7ea <SDIO_GetResponse>
 800b818:	4603      	mov	r3, r0
 800b81a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b81e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b822:	d102      	bne.n	800b82a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b824:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b828:	e02f      	b.n	800b88a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b82a:	f107 030c 	add.w	r3, r7, #12
 800b82e:	4619      	mov	r1, r3
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f000 f879 	bl	800b928 <SD_FindSCR>
 800b836:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d001      	beq.n	800b842 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	e023      	b.n	800b88a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d01c      	beq.n	800b886 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681a      	ldr	r2, [r3, #0]
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b854:	041b      	lsls	r3, r3, #16
 800b856:	4619      	mov	r1, r3
 800b858:	4610      	mov	r0, r2
 800b85a:	f001 f931 	bl	800cac0 <SDMMC_CmdAppCommand>
 800b85e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d001      	beq.n	800b86a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	e00f      	b.n	800b88a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	2102      	movs	r1, #2
 800b870:	4618      	mov	r0, r3
 800b872:	f001 f96a 	bl	800cb4a <SDMMC_CmdBusWidth>
 800b876:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d001      	beq.n	800b882 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	e003      	b.n	800b88a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b882:	2300      	movs	r3, #0
 800b884:	e001      	b.n	800b88a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b886:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3718      	adds	r7, #24
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}

0800b892 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b892:	b580      	push	{r7, lr}
 800b894:	b086      	sub	sp, #24
 800b896:	af00      	add	r7, sp, #0
 800b898:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b89a:	2300      	movs	r3, #0
 800b89c:	60fb      	str	r3, [r7, #12]
 800b89e:	2300      	movs	r3, #0
 800b8a0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	2100      	movs	r1, #0
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f000 ff9e 	bl	800c7ea <SDIO_GetResponse>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b8b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b8b8:	d102      	bne.n	800b8c0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b8ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b8be:	e02f      	b.n	800b920 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b8c0:	f107 030c 	add.w	r3, r7, #12
 800b8c4:	4619      	mov	r1, r3
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f000 f82e 	bl	800b928 <SD_FindSCR>
 800b8cc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d001      	beq.n	800b8d8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b8d4:	697b      	ldr	r3, [r7, #20]
 800b8d6:	e023      	b.n	800b920 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d01c      	beq.n	800b91c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681a      	ldr	r2, [r3, #0]
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8ea:	041b      	lsls	r3, r3, #16
 800b8ec:	4619      	mov	r1, r3
 800b8ee:	4610      	mov	r0, r2
 800b8f0:	f001 f8e6 	bl	800cac0 <SDMMC_CmdAppCommand>
 800b8f4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d001      	beq.n	800b900 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	e00f      	b.n	800b920 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	2100      	movs	r1, #0
 800b906:	4618      	mov	r0, r3
 800b908:	f001 f91f 	bl	800cb4a <SDMMC_CmdBusWidth>
 800b90c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d001      	beq.n	800b918 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	e003      	b.n	800b920 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b918:	2300      	movs	r3, #0
 800b91a:	e001      	b.n	800b920 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b91c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b920:	4618      	mov	r0, r3
 800b922:	3718      	adds	r7, #24
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b928:	b590      	push	{r4, r7, lr}
 800b92a:	b08f      	sub	sp, #60	; 0x3c
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b932:	f7fb fe0f 	bl	8007554 <HAL_GetTick>
 800b936:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b938:	2300      	movs	r3, #0
 800b93a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800b93c:	2300      	movs	r3, #0
 800b93e:	60bb      	str	r3, [r7, #8]
 800b940:	2300      	movs	r3, #0
 800b942:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	2108      	movs	r1, #8
 800b94e:	4618      	mov	r0, r3
 800b950:	f000 ff8a 	bl	800c868 <SDMMC_CmdBlockLength>
 800b954:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d001      	beq.n	800b960 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b95e:	e0a9      	b.n	800bab4 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681a      	ldr	r2, [r3, #0]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b968:	041b      	lsls	r3, r3, #16
 800b96a:	4619      	mov	r1, r3
 800b96c:	4610      	mov	r0, r2
 800b96e:	f001 f8a7 	bl	800cac0 <SDMMC_CmdAppCommand>
 800b972:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b976:	2b00      	cmp	r3, #0
 800b978:	d001      	beq.n	800b97e <SD_FindSCR+0x56>
  {
    return errorstate;
 800b97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b97c:	e09a      	b.n	800bab4 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b97e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b982:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b984:	2308      	movs	r3, #8
 800b986:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800b988:	2330      	movs	r3, #48	; 0x30
 800b98a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800b98c:	2302      	movs	r3, #2
 800b98e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b990:	2300      	movs	r3, #0
 800b992:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800b994:	2301      	movs	r3, #1
 800b996:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	f107 0210 	add.w	r2, r7, #16
 800b9a0:	4611      	mov	r1, r2
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f000 ff34 	bl	800c810 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f001 f8ee 	bl	800cb8e <SDMMC_CmdSendSCR>
 800b9b2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d022      	beq.n	800ba00 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800b9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9bc:	e07a      	b.n	800bab4 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d00e      	beq.n	800b9ea <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6819      	ldr	r1, [r3, #0]
 800b9d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9d2:	009b      	lsls	r3, r3, #2
 800b9d4:	f107 0208 	add.w	r2, r7, #8
 800b9d8:	18d4      	adds	r4, r2, r3
 800b9da:	4608      	mov	r0, r1
 800b9dc:	f000 fe93 	bl	800c706 <SDIO_ReadFIFO>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	6023      	str	r3, [r4, #0]
      index++;
 800b9e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b9e6:	3301      	adds	r3, #1
 800b9e8:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b9ea:	f7fb fdb3 	bl	8007554 <HAL_GetTick>
 800b9ee:	4602      	mov	r2, r0
 800b9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f2:	1ad3      	subs	r3, r2, r3
 800b9f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b9f8:	d102      	bne.n	800ba00 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b9fa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b9fe:	e059      	b.n	800bab4 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba06:	f240 432a 	movw	r3, #1066	; 0x42a
 800ba0a:	4013      	ands	r3, r2
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d0d6      	beq.n	800b9be <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba16:	f003 0308 	and.w	r3, r3, #8
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d005      	beq.n	800ba2a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	2208      	movs	r2, #8
 800ba24:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ba26:	2308      	movs	r3, #8
 800ba28:	e044      	b.n	800bab4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba30:	f003 0302 	and.w	r3, r3, #2
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d005      	beq.n	800ba44 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	2202      	movs	r2, #2
 800ba3e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ba40:	2302      	movs	r3, #2
 800ba42:	e037      	b.n	800bab4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba4a:	f003 0320 	and.w	r3, r3, #32
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d005      	beq.n	800ba5e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	2220      	movs	r2, #32
 800ba58:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ba5a:	2320      	movs	r3, #32
 800ba5c:	e02a      	b.n	800bab4 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f240 523a 	movw	r2, #1338	; 0x53a
 800ba66:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	061a      	lsls	r2, r3, #24
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	021b      	lsls	r3, r3, #8
 800ba70:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ba74:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	0a1b      	lsrs	r3, r3, #8
 800ba7a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ba7e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	0e1b      	lsrs	r3, r3, #24
 800ba84:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ba86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba88:	601a      	str	r2, [r3, #0]
    scr++;
 800ba8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba8c:	3304      	adds	r3, #4
 800ba8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	061a      	lsls	r2, r3, #24
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	021b      	lsls	r3, r3, #8
 800ba98:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ba9c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	0a1b      	lsrs	r3, r3, #8
 800baa2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800baa6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	0e1b      	lsrs	r3, r3, #24
 800baac:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800baae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bab0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800bab2:	2300      	movs	r3, #0
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	373c      	adds	r7, #60	; 0x3c
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd90      	pop	{r4, r7, pc}

0800babc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b086      	sub	sp, #24
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bac8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bace:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d03f      	beq.n	800bb56 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800bad6:	2300      	movs	r3, #0
 800bad8:	617b      	str	r3, [r7, #20]
 800bada:	e033      	b.n	800bb44 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	4618      	mov	r0, r3
 800bae2:	f000 fe10 	bl	800c706 <SDIO_ReadFIFO>
 800bae6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	b2da      	uxtb	r2, r3
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	701a      	strb	r2, [r3, #0]
      tmp++;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	3301      	adds	r3, #1
 800baf4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	3b01      	subs	r3, #1
 800bafa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	0a1b      	lsrs	r3, r3, #8
 800bb00:	b2da      	uxtb	r2, r3
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	3301      	adds	r3, #1
 800bb0a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	3b01      	subs	r3, #1
 800bb10:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	0c1b      	lsrs	r3, r3, #16
 800bb16:	b2da      	uxtb	r2, r3
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	3301      	adds	r3, #1
 800bb20:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	3b01      	subs	r3, #1
 800bb26:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	0e1b      	lsrs	r3, r3, #24
 800bb2c:	b2da      	uxtb	r2, r3
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	701a      	strb	r2, [r3, #0]
      tmp++;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	3301      	adds	r3, #1
 800bb36:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	3b01      	subs	r3, #1
 800bb3c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	3301      	adds	r3, #1
 800bb42:	617b      	str	r3, [r7, #20]
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	2b07      	cmp	r3, #7
 800bb48:	d9c8      	bls.n	800badc <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	68fa      	ldr	r2, [r7, #12]
 800bb4e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	693a      	ldr	r2, [r7, #16]
 800bb54:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800bb56:	bf00      	nop
 800bb58:	3718      	adds	r7, #24
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}

0800bb5e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800bb5e:	b580      	push	{r7, lr}
 800bb60:	b086      	sub	sp, #24
 800bb62:	af00      	add	r7, sp, #0
 800bb64:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6a1b      	ldr	r3, [r3, #32]
 800bb6a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb70:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d043      	beq.n	800bc00 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800bb78:	2300      	movs	r3, #0
 800bb7a:	617b      	str	r3, [r7, #20]
 800bb7c:	e037      	b.n	800bbee <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	781b      	ldrb	r3, [r3, #0]
 800bb82:	60bb      	str	r3, [r7, #8]
      tmp++;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	3301      	adds	r3, #1
 800bb88:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bb8a:	693b      	ldr	r3, [r7, #16]
 800bb8c:	3b01      	subs	r3, #1
 800bb8e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	781b      	ldrb	r3, [r3, #0]
 800bb94:	021a      	lsls	r2, r3, #8
 800bb96:	68bb      	ldr	r3, [r7, #8]
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	3301      	adds	r3, #1
 800bba0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bba2:	693b      	ldr	r3, [r7, #16]
 800bba4:	3b01      	subs	r3, #1
 800bba6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	781b      	ldrb	r3, [r3, #0]
 800bbac:	041a      	lsls	r2, r3, #16
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	3301      	adds	r3, #1
 800bbb8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	3b01      	subs	r3, #1
 800bbbe:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	781b      	ldrb	r3, [r3, #0]
 800bbc4:	061a      	lsls	r2, r3, #24
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	4313      	orrs	r3, r2
 800bbca:	60bb      	str	r3, [r7, #8]
      tmp++;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	3301      	adds	r3, #1
 800bbd0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	3b01      	subs	r3, #1
 800bbd6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f107 0208 	add.w	r2, r7, #8
 800bbe0:	4611      	mov	r1, r2
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f000 fd9c 	bl	800c720 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	3301      	adds	r3, #1
 800bbec:	617b      	str	r3, [r7, #20]
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	2b07      	cmp	r3, #7
 800bbf2:	d9c4      	bls.n	800bb7e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	68fa      	ldr	r2, [r7, #12]
 800bbf8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	693a      	ldr	r2, [r7, #16]
 800bbfe:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800bc00:	bf00      	nop
 800bc02:	3718      	adds	r7, #24
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d101      	bne.n	800bc1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bc16:	2301      	movs	r3, #1
 800bc18:	e056      	b.n	800bcc8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bc26:	b2db      	uxtb	r3, r3
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d106      	bne.n	800bc3a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f7f7 fe67 	bl	8003908 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2202      	movs	r2, #2
 800bc3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	681a      	ldr	r2, [r3, #0]
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc50:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	685a      	ldr	r2, [r3, #4]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	689b      	ldr	r3, [r3, #8]
 800bc5a:	431a      	orrs	r2, r3
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	68db      	ldr	r3, [r3, #12]
 800bc60:	431a      	orrs	r2, r3
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	691b      	ldr	r3, [r3, #16]
 800bc66:	431a      	orrs	r2, r3
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	695b      	ldr	r3, [r3, #20]
 800bc6c:	431a      	orrs	r2, r3
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	699b      	ldr	r3, [r3, #24]
 800bc72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bc76:	431a      	orrs	r2, r3
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	69db      	ldr	r3, [r3, #28]
 800bc7c:	431a      	orrs	r2, r3
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6a1b      	ldr	r3, [r3, #32]
 800bc82:	ea42 0103 	orr.w	r1, r2, r3
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	430a      	orrs	r2, r1
 800bc90:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	699b      	ldr	r3, [r3, #24]
 800bc96:	0c1b      	lsrs	r3, r3, #16
 800bc98:	f003 0104 	and.w	r1, r3, #4
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	430a      	orrs	r2, r1
 800bca6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	69da      	ldr	r2, [r3, #28]
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bcb6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2200      	movs	r2, #0
 800bcbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	2201      	movs	r2, #1
 800bcc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800bcc6:	2300      	movs	r3, #0
}
 800bcc8:	4618      	mov	r0, r3
 800bcca:	3708      	adds	r7, #8
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}

0800bcd0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b088      	sub	sp, #32
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	60f8      	str	r0, [r7, #12]
 800bcd8:	60b9      	str	r1, [r7, #8]
 800bcda:	603b      	str	r3, [r7, #0]
 800bcdc:	4613      	mov	r3, r2
 800bcde:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bce0:	2300      	movs	r3, #0
 800bce2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bcea:	2b01      	cmp	r3, #1
 800bcec:	d101      	bne.n	800bcf2 <HAL_SPI_Transmit+0x22>
 800bcee:	2302      	movs	r3, #2
 800bcf0:	e11e      	b.n	800bf30 <HAL_SPI_Transmit+0x260>
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	2201      	movs	r2, #1
 800bcf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bcfa:	f7fb fc2b 	bl	8007554 <HAL_GetTick>
 800bcfe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800bd00:	88fb      	ldrh	r3, [r7, #6]
 800bd02:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bd0a:	b2db      	uxtb	r3, r3
 800bd0c:	2b01      	cmp	r3, #1
 800bd0e:	d002      	beq.n	800bd16 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800bd10:	2302      	movs	r3, #2
 800bd12:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bd14:	e103      	b.n	800bf1e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d002      	beq.n	800bd22 <HAL_SPI_Transmit+0x52>
 800bd1c:	88fb      	ldrh	r3, [r7, #6]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d102      	bne.n	800bd28 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800bd22:	2301      	movs	r3, #1
 800bd24:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bd26:	e0fa      	b.n	800bf1e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	2203      	movs	r2, #3
 800bd2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	2200      	movs	r2, #0
 800bd34:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	68ba      	ldr	r2, [r7, #8]
 800bd3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	88fa      	ldrh	r2, [r7, #6]
 800bd40:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	88fa      	ldrh	r2, [r7, #6]
 800bd46:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	2200      	movs	r2, #0
 800bd52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	2200      	movs	r2, #0
 800bd58:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	2200      	movs	r2, #0
 800bd64:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	689b      	ldr	r3, [r3, #8]
 800bd6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd6e:	d107      	bne.n	800bd80 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	681a      	ldr	r2, [r3, #0]
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bd7e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd8a:	2b40      	cmp	r3, #64	; 0x40
 800bd8c:	d007      	beq.n	800bd9e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	681a      	ldr	r2, [r3, #0]
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd9c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	68db      	ldr	r3, [r3, #12]
 800bda2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bda6:	d14b      	bne.n	800be40 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	685b      	ldr	r3, [r3, #4]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d002      	beq.n	800bdb6 <HAL_SPI_Transmit+0xe6>
 800bdb0:	8afb      	ldrh	r3, [r7, #22]
 800bdb2:	2b01      	cmp	r3, #1
 800bdb4:	d13e      	bne.n	800be34 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdba:	881a      	ldrh	r2, [r3, #0]
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdc6:	1c9a      	adds	r2, r3, #2
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bdd0:	b29b      	uxth	r3, r3
 800bdd2:	3b01      	subs	r3, #1
 800bdd4:	b29a      	uxth	r2, r3
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800bdda:	e02b      	b.n	800be34 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	689b      	ldr	r3, [r3, #8]
 800bde2:	f003 0302 	and.w	r3, r3, #2
 800bde6:	2b02      	cmp	r3, #2
 800bde8:	d112      	bne.n	800be10 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdee:	881a      	ldrh	r2, [r3, #0]
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdfa:	1c9a      	adds	r2, r3, #2
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800be04:	b29b      	uxth	r3, r3
 800be06:	3b01      	subs	r3, #1
 800be08:	b29a      	uxth	r2, r3
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	86da      	strh	r2, [r3, #54]	; 0x36
 800be0e:	e011      	b.n	800be34 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800be10:	f7fb fba0 	bl	8007554 <HAL_GetTick>
 800be14:	4602      	mov	r2, r0
 800be16:	69bb      	ldr	r3, [r7, #24]
 800be18:	1ad3      	subs	r3, r2, r3
 800be1a:	683a      	ldr	r2, [r7, #0]
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d803      	bhi.n	800be28 <HAL_SPI_Transmit+0x158>
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be26:	d102      	bne.n	800be2e <HAL_SPI_Transmit+0x15e>
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d102      	bne.n	800be34 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800be2e:	2303      	movs	r3, #3
 800be30:	77fb      	strb	r3, [r7, #31]
          goto error;
 800be32:	e074      	b.n	800bf1e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800be38:	b29b      	uxth	r3, r3
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d1ce      	bne.n	800bddc <HAL_SPI_Transmit+0x10c>
 800be3e:	e04c      	b.n	800beda <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	685b      	ldr	r3, [r3, #4]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d002      	beq.n	800be4e <HAL_SPI_Transmit+0x17e>
 800be48:	8afb      	ldrh	r3, [r7, #22]
 800be4a:	2b01      	cmp	r3, #1
 800be4c:	d140      	bne.n	800bed0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	330c      	adds	r3, #12
 800be58:	7812      	ldrb	r2, [r2, #0]
 800be5a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be60:	1c5a      	adds	r2, r3, #1
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800be6a:	b29b      	uxth	r3, r3
 800be6c:	3b01      	subs	r3, #1
 800be6e:	b29a      	uxth	r2, r3
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800be74:	e02c      	b.n	800bed0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	689b      	ldr	r3, [r3, #8]
 800be7c:	f003 0302 	and.w	r3, r3, #2
 800be80:	2b02      	cmp	r3, #2
 800be82:	d113      	bne.n	800beac <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	330c      	adds	r3, #12
 800be8e:	7812      	ldrb	r2, [r2, #0]
 800be90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be96:	1c5a      	adds	r2, r3, #1
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bea0:	b29b      	uxth	r3, r3
 800bea2:	3b01      	subs	r3, #1
 800bea4:	b29a      	uxth	r2, r3
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	86da      	strh	r2, [r3, #54]	; 0x36
 800beaa:	e011      	b.n	800bed0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800beac:	f7fb fb52 	bl	8007554 <HAL_GetTick>
 800beb0:	4602      	mov	r2, r0
 800beb2:	69bb      	ldr	r3, [r7, #24]
 800beb4:	1ad3      	subs	r3, r2, r3
 800beb6:	683a      	ldr	r2, [r7, #0]
 800beb8:	429a      	cmp	r2, r3
 800beba:	d803      	bhi.n	800bec4 <HAL_SPI_Transmit+0x1f4>
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bec2:	d102      	bne.n	800beca <HAL_SPI_Transmit+0x1fa>
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d102      	bne.n	800bed0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800beca:	2303      	movs	r3, #3
 800becc:	77fb      	strb	r3, [r7, #31]
          goto error;
 800bece:	e026      	b.n	800bf1e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bed4:	b29b      	uxth	r3, r3
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d1cd      	bne.n	800be76 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800beda:	69ba      	ldr	r2, [r7, #24]
 800bedc:	6839      	ldr	r1, [r7, #0]
 800bede:	68f8      	ldr	r0, [r7, #12]
 800bee0:	f000 fba4 	bl	800c62c <SPI_EndRxTxTransaction>
 800bee4:	4603      	mov	r3, r0
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d002      	beq.n	800bef0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	2220      	movs	r2, #32
 800beee:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	689b      	ldr	r3, [r3, #8]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d10a      	bne.n	800bf0e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bef8:	2300      	movs	r3, #0
 800befa:	613b      	str	r3, [r7, #16]
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	68db      	ldr	r3, [r3, #12]
 800bf02:	613b      	str	r3, [r7, #16]
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	689b      	ldr	r3, [r3, #8]
 800bf0a:	613b      	str	r3, [r7, #16]
 800bf0c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d002      	beq.n	800bf1c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800bf16:	2301      	movs	r3, #1
 800bf18:	77fb      	strb	r3, [r7, #31]
 800bf1a:	e000      	b.n	800bf1e <HAL_SPI_Transmit+0x24e>
  }

error:
 800bf1c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	2201      	movs	r2, #1
 800bf22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	2200      	movs	r2, #0
 800bf2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bf2e:	7ffb      	ldrb	r3, [r7, #31]
}
 800bf30:	4618      	mov	r0, r3
 800bf32:	3720      	adds	r7, #32
 800bf34:	46bd      	mov	sp, r7
 800bf36:	bd80      	pop	{r7, pc}

0800bf38 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b088      	sub	sp, #32
 800bf3c:	af02      	add	r7, sp, #8
 800bf3e:	60f8      	str	r0, [r7, #12]
 800bf40:	60b9      	str	r1, [r7, #8]
 800bf42:	603b      	str	r3, [r7, #0]
 800bf44:	4613      	mov	r3, r2
 800bf46:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	685b      	ldr	r3, [r3, #4]
 800bf50:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bf54:	d112      	bne.n	800bf7c <HAL_SPI_Receive+0x44>
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	689b      	ldr	r3, [r3, #8]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d10e      	bne.n	800bf7c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2204      	movs	r2, #4
 800bf62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800bf66:	88fa      	ldrh	r2, [r7, #6]
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	9300      	str	r3, [sp, #0]
 800bf6c:	4613      	mov	r3, r2
 800bf6e:	68ba      	ldr	r2, [r7, #8]
 800bf70:	68b9      	ldr	r1, [r7, #8]
 800bf72:	68f8      	ldr	r0, [r7, #12]
 800bf74:	f000 f8e9 	bl	800c14a <HAL_SPI_TransmitReceive>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	e0e2      	b.n	800c142 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bf82:	2b01      	cmp	r3, #1
 800bf84:	d101      	bne.n	800bf8a <HAL_SPI_Receive+0x52>
 800bf86:	2302      	movs	r3, #2
 800bf88:	e0db      	b.n	800c142 <HAL_SPI_Receive+0x20a>
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	2201      	movs	r2, #1
 800bf8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bf92:	f7fb fadf 	bl	8007554 <HAL_GetTick>
 800bf96:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bf9e:	b2db      	uxtb	r3, r3
 800bfa0:	2b01      	cmp	r3, #1
 800bfa2:	d002      	beq.n	800bfaa <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800bfa4:	2302      	movs	r3, #2
 800bfa6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bfa8:	e0c2      	b.n	800c130 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d002      	beq.n	800bfb6 <HAL_SPI_Receive+0x7e>
 800bfb0:	88fb      	ldrh	r3, [r7, #6]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d102      	bne.n	800bfbc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bfba:	e0b9      	b.n	800c130 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	2204      	movs	r2, #4
 800bfc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	68ba      	ldr	r2, [r7, #8]
 800bfce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	88fa      	ldrh	r2, [r7, #6]
 800bfd4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	88fa      	ldrh	r2, [r7, #6]
 800bfda:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	2200      	movs	r2, #0
 800bfec:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	2200      	movs	r2, #0
 800bff2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	2200      	movs	r2, #0
 800bff8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	689b      	ldr	r3, [r3, #8]
 800bffe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c002:	d107      	bne.n	800c014 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	681a      	ldr	r2, [r3, #0]
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c012:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c01e:	2b40      	cmp	r3, #64	; 0x40
 800c020:	d007      	beq.n	800c032 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	681a      	ldr	r2, [r3, #0]
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c030:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	68db      	ldr	r3, [r3, #12]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d162      	bne.n	800c100 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800c03a:	e02e      	b.n	800c09a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	689b      	ldr	r3, [r3, #8]
 800c042:	f003 0301 	and.w	r3, r3, #1
 800c046:	2b01      	cmp	r3, #1
 800c048:	d115      	bne.n	800c076 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f103 020c 	add.w	r2, r3, #12
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c056:	7812      	ldrb	r2, [r2, #0]
 800c058:	b2d2      	uxtb	r2, r2
 800c05a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c060:	1c5a      	adds	r2, r3, #1
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c06a:	b29b      	uxth	r3, r3
 800c06c:	3b01      	subs	r3, #1
 800c06e:	b29a      	uxth	r2, r3
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c074:	e011      	b.n	800c09a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c076:	f7fb fa6d 	bl	8007554 <HAL_GetTick>
 800c07a:	4602      	mov	r2, r0
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	1ad3      	subs	r3, r2, r3
 800c080:	683a      	ldr	r2, [r7, #0]
 800c082:	429a      	cmp	r2, r3
 800c084:	d803      	bhi.n	800c08e <HAL_SPI_Receive+0x156>
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c08c:	d102      	bne.n	800c094 <HAL_SPI_Receive+0x15c>
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d102      	bne.n	800c09a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800c094:	2303      	movs	r3, #3
 800c096:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c098:	e04a      	b.n	800c130 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c09e:	b29b      	uxth	r3, r3
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d1cb      	bne.n	800c03c <HAL_SPI_Receive+0x104>
 800c0a4:	e031      	b.n	800c10a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	689b      	ldr	r3, [r3, #8]
 800c0ac:	f003 0301 	and.w	r3, r3, #1
 800c0b0:	2b01      	cmp	r3, #1
 800c0b2:	d113      	bne.n	800c0dc <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	68da      	ldr	r2, [r3, #12]
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0be:	b292      	uxth	r2, r2
 800c0c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0c6:	1c9a      	adds	r2, r3, #2
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0d0:	b29b      	uxth	r3, r3
 800c0d2:	3b01      	subs	r3, #1
 800c0d4:	b29a      	uxth	r2, r3
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c0da:	e011      	b.n	800c100 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c0dc:	f7fb fa3a 	bl	8007554 <HAL_GetTick>
 800c0e0:	4602      	mov	r2, r0
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	1ad3      	subs	r3, r2, r3
 800c0e6:	683a      	ldr	r2, [r7, #0]
 800c0e8:	429a      	cmp	r2, r3
 800c0ea:	d803      	bhi.n	800c0f4 <HAL_SPI_Receive+0x1bc>
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c0f2:	d102      	bne.n	800c0fa <HAL_SPI_Receive+0x1c2>
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d102      	bne.n	800c100 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800c0fa:	2303      	movs	r3, #3
 800c0fc:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c0fe:	e017      	b.n	800c130 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c104:	b29b      	uxth	r3, r3
 800c106:	2b00      	cmp	r3, #0
 800c108:	d1cd      	bne.n	800c0a6 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c10a:	693a      	ldr	r2, [r7, #16]
 800c10c:	6839      	ldr	r1, [r7, #0]
 800c10e:	68f8      	ldr	r0, [r7, #12]
 800c110:	f000 fa27 	bl	800c562 <SPI_EndRxTransaction>
 800c114:	4603      	mov	r3, r0
 800c116:	2b00      	cmp	r3, #0
 800c118:	d002      	beq.n	800c120 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	2220      	movs	r2, #32
 800c11e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c124:	2b00      	cmp	r3, #0
 800c126:	d002      	beq.n	800c12e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800c128:	2301      	movs	r3, #1
 800c12a:	75fb      	strb	r3, [r7, #23]
 800c12c:	e000      	b.n	800c130 <HAL_SPI_Receive+0x1f8>
  }

error :
 800c12e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	2201      	movs	r2, #1
 800c134:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	2200      	movs	r2, #0
 800c13c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c140:	7dfb      	ldrb	r3, [r7, #23]
}
 800c142:	4618      	mov	r0, r3
 800c144:	3718      	adds	r7, #24
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}

0800c14a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c14a:	b580      	push	{r7, lr}
 800c14c:	b08c      	sub	sp, #48	; 0x30
 800c14e:	af00      	add	r7, sp, #0
 800c150:	60f8      	str	r0, [r7, #12]
 800c152:	60b9      	str	r1, [r7, #8]
 800c154:	607a      	str	r2, [r7, #4]
 800c156:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c158:	2301      	movs	r3, #1
 800c15a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c15c:	2300      	movs	r3, #0
 800c15e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c168:	2b01      	cmp	r3, #1
 800c16a:	d101      	bne.n	800c170 <HAL_SPI_TransmitReceive+0x26>
 800c16c:	2302      	movs	r3, #2
 800c16e:	e18a      	b.n	800c486 <HAL_SPI_TransmitReceive+0x33c>
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	2201      	movs	r2, #1
 800c174:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c178:	f7fb f9ec 	bl	8007554 <HAL_GetTick>
 800c17c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c184:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	685b      	ldr	r3, [r3, #4]
 800c18c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800c18e:	887b      	ldrh	r3, [r7, #2]
 800c190:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c192:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c196:	2b01      	cmp	r3, #1
 800c198:	d00f      	beq.n	800c1ba <HAL_SPI_TransmitReceive+0x70>
 800c19a:	69fb      	ldr	r3, [r7, #28]
 800c19c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c1a0:	d107      	bne.n	800c1b2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	689b      	ldr	r3, [r3, #8]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d103      	bne.n	800c1b2 <HAL_SPI_TransmitReceive+0x68>
 800c1aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c1ae:	2b04      	cmp	r3, #4
 800c1b0:	d003      	beq.n	800c1ba <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800c1b2:	2302      	movs	r3, #2
 800c1b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c1b8:	e15b      	b.n	800c472 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d005      	beq.n	800c1cc <HAL_SPI_TransmitReceive+0x82>
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d002      	beq.n	800c1cc <HAL_SPI_TransmitReceive+0x82>
 800c1c6:	887b      	ldrh	r3, [r7, #2]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d103      	bne.n	800c1d4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c1d2:	e14e      	b.n	800c472 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c1da:	b2db      	uxtb	r3, r3
 800c1dc:	2b04      	cmp	r3, #4
 800c1de:	d003      	beq.n	800c1e8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	2205      	movs	r2, #5
 800c1e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	687a      	ldr	r2, [r7, #4]
 800c1f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	887a      	ldrh	r2, [r7, #2]
 800c1f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	887a      	ldrh	r2, [r7, #2]
 800c1fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	68ba      	ldr	r2, [r7, #8]
 800c204:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	887a      	ldrh	r2, [r7, #2]
 800c20a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	887a      	ldrh	r2, [r7, #2]
 800c210:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	2200      	movs	r2, #0
 800c216:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	2200      	movs	r2, #0
 800c21c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c228:	2b40      	cmp	r3, #64	; 0x40
 800c22a:	d007      	beq.n	800c23c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	681a      	ldr	r2, [r3, #0]
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c23a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	68db      	ldr	r3, [r3, #12]
 800c240:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c244:	d178      	bne.n	800c338 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	685b      	ldr	r3, [r3, #4]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d002      	beq.n	800c254 <HAL_SPI_TransmitReceive+0x10a>
 800c24e:	8b7b      	ldrh	r3, [r7, #26]
 800c250:	2b01      	cmp	r3, #1
 800c252:	d166      	bne.n	800c322 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c258:	881a      	ldrh	r2, [r3, #0]
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c264:	1c9a      	adds	r2, r3, #2
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c26e:	b29b      	uxth	r3, r3
 800c270:	3b01      	subs	r3, #1
 800c272:	b29a      	uxth	r2, r3
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c278:	e053      	b.n	800c322 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	689b      	ldr	r3, [r3, #8]
 800c280:	f003 0302 	and.w	r3, r3, #2
 800c284:	2b02      	cmp	r3, #2
 800c286:	d11b      	bne.n	800c2c0 <HAL_SPI_TransmitReceive+0x176>
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c28c:	b29b      	uxth	r3, r3
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d016      	beq.n	800c2c0 <HAL_SPI_TransmitReceive+0x176>
 800c292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c294:	2b01      	cmp	r3, #1
 800c296:	d113      	bne.n	800c2c0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c29c:	881a      	ldrh	r2, [r3, #0]
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2a8:	1c9a      	adds	r2, r3, #2
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c2b2:	b29b      	uxth	r3, r3
 800c2b4:	3b01      	subs	r3, #1
 800c2b6:	b29a      	uxth	r2, r3
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	689b      	ldr	r3, [r3, #8]
 800c2c6:	f003 0301 	and.w	r3, r3, #1
 800c2ca:	2b01      	cmp	r3, #1
 800c2cc:	d119      	bne.n	800c302 <HAL_SPI_TransmitReceive+0x1b8>
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2d2:	b29b      	uxth	r3, r3
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d014      	beq.n	800c302 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	68da      	ldr	r2, [r3, #12]
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2e2:	b292      	uxth	r2, r2
 800c2e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ea:	1c9a      	adds	r2, r3, #2
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2f4:	b29b      	uxth	r3, r3
 800c2f6:	3b01      	subs	r3, #1
 800c2f8:	b29a      	uxth	r2, r3
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c2fe:	2301      	movs	r3, #1
 800c300:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c302:	f7fb f927 	bl	8007554 <HAL_GetTick>
 800c306:	4602      	mov	r2, r0
 800c308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c30a:	1ad3      	subs	r3, r2, r3
 800c30c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c30e:	429a      	cmp	r2, r3
 800c310:	d807      	bhi.n	800c322 <HAL_SPI_TransmitReceive+0x1d8>
 800c312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c314:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c318:	d003      	beq.n	800c322 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800c31a:	2303      	movs	r3, #3
 800c31c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c320:	e0a7      	b.n	800c472 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c326:	b29b      	uxth	r3, r3
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d1a6      	bne.n	800c27a <HAL_SPI_TransmitReceive+0x130>
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c330:	b29b      	uxth	r3, r3
 800c332:	2b00      	cmp	r3, #0
 800c334:	d1a1      	bne.n	800c27a <HAL_SPI_TransmitReceive+0x130>
 800c336:	e07c      	b.n	800c432 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	685b      	ldr	r3, [r3, #4]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d002      	beq.n	800c346 <HAL_SPI_TransmitReceive+0x1fc>
 800c340:	8b7b      	ldrh	r3, [r7, #26]
 800c342:	2b01      	cmp	r3, #1
 800c344:	d16b      	bne.n	800c41e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	330c      	adds	r3, #12
 800c350:	7812      	ldrb	r2, [r2, #0]
 800c352:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c358:	1c5a      	adds	r2, r3, #1
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c362:	b29b      	uxth	r3, r3
 800c364:	3b01      	subs	r3, #1
 800c366:	b29a      	uxth	r2, r3
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c36c:	e057      	b.n	800c41e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	689b      	ldr	r3, [r3, #8]
 800c374:	f003 0302 	and.w	r3, r3, #2
 800c378:	2b02      	cmp	r3, #2
 800c37a:	d11c      	bne.n	800c3b6 <HAL_SPI_TransmitReceive+0x26c>
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c380:	b29b      	uxth	r3, r3
 800c382:	2b00      	cmp	r3, #0
 800c384:	d017      	beq.n	800c3b6 <HAL_SPI_TransmitReceive+0x26c>
 800c386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c388:	2b01      	cmp	r3, #1
 800c38a:	d114      	bne.n	800c3b6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	330c      	adds	r3, #12
 800c396:	7812      	ldrb	r2, [r2, #0]
 800c398:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c39e:	1c5a      	adds	r2, r3, #1
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c3a8:	b29b      	uxth	r3, r3
 800c3aa:	3b01      	subs	r3, #1
 800c3ac:	b29a      	uxth	r2, r3
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	689b      	ldr	r3, [r3, #8]
 800c3bc:	f003 0301 	and.w	r3, r3, #1
 800c3c0:	2b01      	cmp	r3, #1
 800c3c2:	d119      	bne.n	800c3f8 <HAL_SPI_TransmitReceive+0x2ae>
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c3c8:	b29b      	uxth	r3, r3
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d014      	beq.n	800c3f8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	68da      	ldr	r2, [r3, #12]
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3d8:	b2d2      	uxtb	r2, r2
 800c3da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3e0:	1c5a      	adds	r2, r3, #1
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c3ea:	b29b      	uxth	r3, r3
 800c3ec:	3b01      	subs	r3, #1
 800c3ee:	b29a      	uxth	r2, r3
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c3f8:	f7fb f8ac 	bl	8007554 <HAL_GetTick>
 800c3fc:	4602      	mov	r2, r0
 800c3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c400:	1ad3      	subs	r3, r2, r3
 800c402:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c404:	429a      	cmp	r2, r3
 800c406:	d803      	bhi.n	800c410 <HAL_SPI_TransmitReceive+0x2c6>
 800c408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c40a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c40e:	d102      	bne.n	800c416 <HAL_SPI_TransmitReceive+0x2cc>
 800c410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c412:	2b00      	cmp	r3, #0
 800c414:	d103      	bne.n	800c41e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c416:	2303      	movs	r3, #3
 800c418:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c41c:	e029      	b.n	800c472 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c422:	b29b      	uxth	r3, r3
 800c424:	2b00      	cmp	r3, #0
 800c426:	d1a2      	bne.n	800c36e <HAL_SPI_TransmitReceive+0x224>
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c42c:	b29b      	uxth	r3, r3
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d19d      	bne.n	800c36e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c434:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c436:	68f8      	ldr	r0, [r7, #12]
 800c438:	f000 f8f8 	bl	800c62c <SPI_EndRxTxTransaction>
 800c43c:	4603      	mov	r3, r0
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d006      	beq.n	800c450 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800c442:	2301      	movs	r3, #1
 800c444:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	2220      	movs	r2, #32
 800c44c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800c44e:	e010      	b.n	800c472 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	689b      	ldr	r3, [r3, #8]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d10b      	bne.n	800c470 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c458:	2300      	movs	r3, #0
 800c45a:	617b      	str	r3, [r7, #20]
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	68db      	ldr	r3, [r3, #12]
 800c462:	617b      	str	r3, [r7, #20]
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	689b      	ldr	r3, [r3, #8]
 800c46a:	617b      	str	r3, [r7, #20]
 800c46c:	697b      	ldr	r3, [r7, #20]
 800c46e:	e000      	b.n	800c472 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c470:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	2201      	movs	r2, #1
 800c476:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	2200      	movs	r2, #0
 800c47e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c482:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c486:	4618      	mov	r0, r3
 800c488:	3730      	adds	r7, #48	; 0x30
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}

0800c48e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c48e:	b580      	push	{r7, lr}
 800c490:	b084      	sub	sp, #16
 800c492:	af00      	add	r7, sp, #0
 800c494:	60f8      	str	r0, [r7, #12]
 800c496:	60b9      	str	r1, [r7, #8]
 800c498:	603b      	str	r3, [r7, #0]
 800c49a:	4613      	mov	r3, r2
 800c49c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c49e:	e04c      	b.n	800c53a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c4a6:	d048      	beq.n	800c53a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c4a8:	f7fb f854 	bl	8007554 <HAL_GetTick>
 800c4ac:	4602      	mov	r2, r0
 800c4ae:	69bb      	ldr	r3, [r7, #24]
 800c4b0:	1ad3      	subs	r3, r2, r3
 800c4b2:	683a      	ldr	r2, [r7, #0]
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d902      	bls.n	800c4be <SPI_WaitFlagStateUntilTimeout+0x30>
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d13d      	bne.n	800c53a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	685a      	ldr	r2, [r3, #4]
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c4cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	685b      	ldr	r3, [r3, #4]
 800c4d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c4d6:	d111      	bne.n	800c4fc <SPI_WaitFlagStateUntilTimeout+0x6e>
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	689b      	ldr	r3, [r3, #8]
 800c4dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c4e0:	d004      	beq.n	800c4ec <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	689b      	ldr	r3, [r3, #8]
 800c4e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c4ea:	d107      	bne.n	800c4fc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	681a      	ldr	r2, [r3, #0]
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c4fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c500:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c504:	d10f      	bne.n	800c526 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	681a      	ldr	r2, [r3, #0]
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c514:	601a      	str	r2, [r3, #0]
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	681a      	ldr	r2, [r3, #0]
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c524:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	2201      	movs	r2, #1
 800c52a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	2200      	movs	r2, #0
 800c532:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c536:	2303      	movs	r3, #3
 800c538:	e00f      	b.n	800c55a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	689a      	ldr	r2, [r3, #8]
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	4013      	ands	r3, r2
 800c544:	68ba      	ldr	r2, [r7, #8]
 800c546:	429a      	cmp	r2, r3
 800c548:	bf0c      	ite	eq
 800c54a:	2301      	moveq	r3, #1
 800c54c:	2300      	movne	r3, #0
 800c54e:	b2db      	uxtb	r3, r3
 800c550:	461a      	mov	r2, r3
 800c552:	79fb      	ldrb	r3, [r7, #7]
 800c554:	429a      	cmp	r2, r3
 800c556:	d1a3      	bne.n	800c4a0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800c558:	2300      	movs	r3, #0
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	3710      	adds	r7, #16
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}

0800c562 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800c562:	b580      	push	{r7, lr}
 800c564:	b086      	sub	sp, #24
 800c566:	af02      	add	r7, sp, #8
 800c568:	60f8      	str	r0, [r7, #12]
 800c56a:	60b9      	str	r1, [r7, #8]
 800c56c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	685b      	ldr	r3, [r3, #4]
 800c572:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c576:	d111      	bne.n	800c59c <SPI_EndRxTransaction+0x3a>
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	689b      	ldr	r3, [r3, #8]
 800c57c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c580:	d004      	beq.n	800c58c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	689b      	ldr	r3, [r3, #8]
 800c586:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c58a:	d107      	bne.n	800c59c <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	681a      	ldr	r2, [r3, #0]
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c59a:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	685b      	ldr	r3, [r3, #4]
 800c5a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c5a4:	d12a      	bne.n	800c5fc <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	689b      	ldr	r3, [r3, #8]
 800c5aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c5ae:	d012      	beq.n	800c5d6 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	9300      	str	r3, [sp, #0]
 800c5b4:	68bb      	ldr	r3, [r7, #8]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	2180      	movs	r1, #128	; 0x80
 800c5ba:	68f8      	ldr	r0, [r7, #12]
 800c5bc:	f7ff ff67 	bl	800c48e <SPI_WaitFlagStateUntilTimeout>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d02d      	beq.n	800c622 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5ca:	f043 0220 	orr.w	r2, r3, #32
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c5d2:	2303      	movs	r3, #3
 800c5d4:	e026      	b.n	800c624 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	9300      	str	r3, [sp, #0]
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	2200      	movs	r2, #0
 800c5de:	2101      	movs	r1, #1
 800c5e0:	68f8      	ldr	r0, [r7, #12]
 800c5e2:	f7ff ff54 	bl	800c48e <SPI_WaitFlagStateUntilTimeout>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d01a      	beq.n	800c622 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5f0:	f043 0220 	orr.w	r2, r3, #32
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800c5f8:	2303      	movs	r3, #3
 800c5fa:	e013      	b.n	800c624 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	9300      	str	r3, [sp, #0]
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	2200      	movs	r2, #0
 800c604:	2101      	movs	r1, #1
 800c606:	68f8      	ldr	r0, [r7, #12]
 800c608:	f7ff ff41 	bl	800c48e <SPI_WaitFlagStateUntilTimeout>
 800c60c:	4603      	mov	r3, r0
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d007      	beq.n	800c622 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c616:	f043 0220 	orr.w	r2, r3, #32
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c61e:	2303      	movs	r3, #3
 800c620:	e000      	b.n	800c624 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800c622:	2300      	movs	r3, #0
}
 800c624:	4618      	mov	r0, r3
 800c626:	3710      	adds	r7, #16
 800c628:	46bd      	mov	sp, r7
 800c62a:	bd80      	pop	{r7, pc}

0800c62c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b088      	sub	sp, #32
 800c630:	af02      	add	r7, sp, #8
 800c632:	60f8      	str	r0, [r7, #12]
 800c634:	60b9      	str	r1, [r7, #8]
 800c636:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c638:	4b1b      	ldr	r3, [pc, #108]	; (800c6a8 <SPI_EndRxTxTransaction+0x7c>)
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	4a1b      	ldr	r2, [pc, #108]	; (800c6ac <SPI_EndRxTxTransaction+0x80>)
 800c63e:	fba2 2303 	umull	r2, r3, r2, r3
 800c642:	0d5b      	lsrs	r3, r3, #21
 800c644:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c648:	fb02 f303 	mul.w	r3, r2, r3
 800c64c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	685b      	ldr	r3, [r3, #4]
 800c652:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c656:	d112      	bne.n	800c67e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	9300      	str	r3, [sp, #0]
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	2200      	movs	r2, #0
 800c660:	2180      	movs	r1, #128	; 0x80
 800c662:	68f8      	ldr	r0, [r7, #12]
 800c664:	f7ff ff13 	bl	800c48e <SPI_WaitFlagStateUntilTimeout>
 800c668:	4603      	mov	r3, r0
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d016      	beq.n	800c69c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c672:	f043 0220 	orr.w	r2, r3, #32
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c67a:	2303      	movs	r3, #3
 800c67c:	e00f      	b.n	800c69e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c67e:	697b      	ldr	r3, [r7, #20]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d00a      	beq.n	800c69a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c684:	697b      	ldr	r3, [r7, #20]
 800c686:	3b01      	subs	r3, #1
 800c688:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	689b      	ldr	r3, [r3, #8]
 800c690:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c694:	2b80      	cmp	r3, #128	; 0x80
 800c696:	d0f2      	beq.n	800c67e <SPI_EndRxTxTransaction+0x52>
 800c698:	e000      	b.n	800c69c <SPI_EndRxTxTransaction+0x70>
        break;
 800c69a:	bf00      	nop
  }

  return HAL_OK;
 800c69c:	2300      	movs	r3, #0
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	3718      	adds	r7, #24
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}
 800c6a6:	bf00      	nop
 800c6a8:	20000158 	.word	0x20000158
 800c6ac:	165e9f81 	.word	0x165e9f81

0800c6b0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800c6b0:	b084      	sub	sp, #16
 800c6b2:	b480      	push	{r7}
 800c6b4:	b085      	sub	sp, #20
 800c6b6:	af00      	add	r7, sp, #0
 800c6b8:	6078      	str	r0, [r7, #4]
 800c6ba:	f107 001c 	add.w	r0, r7, #28
 800c6be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c6c6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c6c8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c6ca:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800c6ce:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c6d2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c6d6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c6d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c6da:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c6dc:	68fa      	ldr	r2, [r7, #12]
 800c6de:	4313      	orrs	r3, r2
 800c6e0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	685b      	ldr	r3, [r3, #4]
 800c6e6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800c6ea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c6ee:	68fa      	ldr	r2, [r7, #12]
 800c6f0:	431a      	orrs	r2, r3
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c6f6:	2300      	movs	r3, #0
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3714      	adds	r7, #20
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c702:	b004      	add	sp, #16
 800c704:	4770      	bx	lr

0800c706 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800c706:	b480      	push	{r7}
 800c708:	b083      	sub	sp, #12
 800c70a:	af00      	add	r7, sp, #0
 800c70c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c714:	4618      	mov	r0, r3
 800c716:	370c      	adds	r7, #12
 800c718:	46bd      	mov	sp, r7
 800c71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71e:	4770      	bx	lr

0800c720 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800c720:	b480      	push	{r7}
 800c722:	b083      	sub	sp, #12
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
 800c728:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800c72a:	683b      	ldr	r3, [r7, #0]
 800c72c:	681a      	ldr	r2, [r3, #0]
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c734:	2300      	movs	r3, #0
}
 800c736:	4618      	mov	r0, r3
 800c738:	370c      	adds	r7, #12
 800c73a:	46bd      	mov	sp, r7
 800c73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c740:	4770      	bx	lr

0800c742 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800c742:	b580      	push	{r7, lr}
 800c744:	b082      	sub	sp, #8
 800c746:	af00      	add	r7, sp, #0
 800c748:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2203      	movs	r2, #3
 800c74e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800c750:	2002      	movs	r0, #2
 800c752:	f7fa ff0b 	bl	800756c <HAL_Delay>
  
  return HAL_OK;
 800c756:	2300      	movs	r3, #0
}
 800c758:	4618      	mov	r0, r3
 800c75a:	3708      	adds	r7, #8
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bd80      	pop	{r7, pc}

0800c760 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800c760:	b480      	push	{r7}
 800c762:	b083      	sub	sp, #12
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	f003 0303 	and.w	r3, r3, #3
}
 800c770:	4618      	mov	r0, r3
 800c772:	370c      	adds	r7, #12
 800c774:	46bd      	mov	sp, r7
 800c776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77a:	4770      	bx	lr

0800c77c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800c77c:	b480      	push	{r7}
 800c77e:	b085      	sub	sp, #20
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
 800c784:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c786:	2300      	movs	r3, #0
 800c788:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	681a      	ldr	r2, [r3, #0]
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c796:	683b      	ldr	r3, [r7, #0]
 800c798:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c79a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c7a0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c7a6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c7a8:	68fa      	ldr	r2, [r7, #12]
 800c7aa:	4313      	orrs	r3, r2
 800c7ac:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	68db      	ldr	r3, [r3, #12]
 800c7b2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c7b6:	f023 030f 	bic.w	r3, r3, #15
 800c7ba:	68fa      	ldr	r2, [r7, #12]
 800c7bc:	431a      	orrs	r2, r3
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c7c2:	2300      	movs	r3, #0
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3714      	adds	r7, #20
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ce:	4770      	bx	lr

0800c7d0 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	b083      	sub	sp, #12
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	691b      	ldr	r3, [r3, #16]
 800c7dc:	b2db      	uxtb	r3, r3
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	370c      	adds	r7, #12
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e8:	4770      	bx	lr

0800c7ea <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800c7ea:	b480      	push	{r7}
 800c7ec:	b085      	sub	sp, #20
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	6078      	str	r0, [r7, #4]
 800c7f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	3314      	adds	r3, #20
 800c7f8:	461a      	mov	r2, r3
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	4413      	add	r3, r2
 800c7fe:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	681b      	ldr	r3, [r3, #0]
}  
 800c804:	4618      	mov	r0, r3
 800c806:	3714      	adds	r7, #20
 800c808:	46bd      	mov	sp, r7
 800c80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80e:	4770      	bx	lr

0800c810 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800c810:	b480      	push	{r7}
 800c812:	b085      	sub	sp, #20
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
 800c818:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c81a:	2300      	movs	r3, #0
 800c81c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	681a      	ldr	r2, [r3, #0]
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	685a      	ldr	r2, [r3, #4]
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c836:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c83c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c842:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c844:	68fa      	ldr	r2, [r7, #12]
 800c846:	4313      	orrs	r3, r2
 800c848:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c84e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	431a      	orrs	r2, r3
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c85a:	2300      	movs	r3, #0

}
 800c85c:	4618      	mov	r0, r3
 800c85e:	3714      	adds	r7, #20
 800c860:	46bd      	mov	sp, r7
 800c862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c866:	4770      	bx	lr

0800c868 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b088      	sub	sp, #32
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
 800c870:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c876:	2310      	movs	r3, #16
 800c878:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c87a:	2340      	movs	r3, #64	; 0x40
 800c87c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c87e:	2300      	movs	r3, #0
 800c880:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c886:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c888:	f107 0308 	add.w	r3, r7, #8
 800c88c:	4619      	mov	r1, r3
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f7ff ff74 	bl	800c77c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800c894:	f241 3288 	movw	r2, #5000	; 0x1388
 800c898:	2110      	movs	r1, #16
 800c89a:	6878      	ldr	r0, [r7, #4]
 800c89c:	f000 fa40 	bl	800cd20 <SDMMC_GetCmdResp1>
 800c8a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8a2:	69fb      	ldr	r3, [r7, #28]
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3720      	adds	r7, #32
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}

0800c8ac <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b088      	sub	sp, #32
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c8ba:	2311      	movs	r3, #17
 800c8bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c8be:	2340      	movs	r3, #64	; 0x40
 800c8c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c8c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c8cc:	f107 0308 	add.w	r3, r7, #8
 800c8d0:	4619      	mov	r1, r3
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f7ff ff52 	bl	800c77c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c8d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8dc:	2111      	movs	r1, #17
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	f000 fa1e 	bl	800cd20 <SDMMC_GetCmdResp1>
 800c8e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8e6:	69fb      	ldr	r3, [r7, #28]
}
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	3720      	adds	r7, #32
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bd80      	pop	{r7, pc}

0800c8f0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b088      	sub	sp, #32
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
 800c8f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c8fe:	2312      	movs	r3, #18
 800c900:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c902:	2340      	movs	r3, #64	; 0x40
 800c904:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c906:	2300      	movs	r3, #0
 800c908:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c90a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c90e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c910:	f107 0308 	add.w	r3, r7, #8
 800c914:	4619      	mov	r1, r3
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f7ff ff30 	bl	800c77c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c91c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c920:	2112      	movs	r1, #18
 800c922:	6878      	ldr	r0, [r7, #4]
 800c924:	f000 f9fc 	bl	800cd20 <SDMMC_GetCmdResp1>
 800c928:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c92a:	69fb      	ldr	r3, [r7, #28]
}
 800c92c:	4618      	mov	r0, r3
 800c92e:	3720      	adds	r7, #32
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}

0800c934 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b088      	sub	sp, #32
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c942:	2318      	movs	r3, #24
 800c944:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c946:	2340      	movs	r3, #64	; 0x40
 800c948:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c94a:	2300      	movs	r3, #0
 800c94c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c94e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c952:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c954:	f107 0308 	add.w	r3, r7, #8
 800c958:	4619      	mov	r1, r3
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f7ff ff0e 	bl	800c77c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c960:	f241 3288 	movw	r2, #5000	; 0x1388
 800c964:	2118      	movs	r1, #24
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f000 f9da 	bl	800cd20 <SDMMC_GetCmdResp1>
 800c96c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c96e:	69fb      	ldr	r3, [r7, #28]
}
 800c970:	4618      	mov	r0, r3
 800c972:	3720      	adds	r7, #32
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}

0800c978 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b088      	sub	sp, #32
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
 800c980:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c986:	2319      	movs	r3, #25
 800c988:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c98a:	2340      	movs	r3, #64	; 0x40
 800c98c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c98e:	2300      	movs	r3, #0
 800c990:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c992:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c996:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c998:	f107 0308 	add.w	r3, r7, #8
 800c99c:	4619      	mov	r1, r3
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f7ff feec 	bl	800c77c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c9a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9a8:	2119      	movs	r1, #25
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f000 f9b8 	bl	800cd20 <SDMMC_GetCmdResp1>
 800c9b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9b2:	69fb      	ldr	r3, [r7, #28]
}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	3720      	adds	r7, #32
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}

0800c9bc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b088      	sub	sp, #32
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c9c8:	230c      	movs	r3, #12
 800c9ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c9cc:	2340      	movs	r3, #64	; 0x40
 800c9ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c9d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c9da:	f107 0308 	add.w	r3, r7, #8
 800c9de:	4619      	mov	r1, r3
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f7ff fecb 	bl	800c77c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800c9e6:	4a05      	ldr	r2, [pc, #20]	; (800c9fc <SDMMC_CmdStopTransfer+0x40>)
 800c9e8:	210c      	movs	r1, #12
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f000 f998 	bl	800cd20 <SDMMC_GetCmdResp1>
 800c9f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9f2:	69fb      	ldr	r3, [r7, #28]
}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	3720      	adds	r7, #32
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}
 800c9fc:	05f5e100 	.word	0x05f5e100

0800ca00 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b08a      	sub	sp, #40	; 0x28
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	60f8      	str	r0, [r7, #12]
 800ca08:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ca10:	2307      	movs	r3, #7
 800ca12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ca14:	2340      	movs	r3, #64	; 0x40
 800ca16:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ca18:	2300      	movs	r3, #0
 800ca1a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ca1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca20:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ca22:	f107 0310 	add.w	r3, r7, #16
 800ca26:	4619      	mov	r1, r3
 800ca28:	68f8      	ldr	r0, [r7, #12]
 800ca2a:	f7ff fea7 	bl	800c77c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800ca2e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca32:	2107      	movs	r1, #7
 800ca34:	68f8      	ldr	r0, [r7, #12]
 800ca36:	f000 f973 	bl	800cd20 <SDMMC_GetCmdResp1>
 800ca3a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ca3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ca3e:	4618      	mov	r0, r3
 800ca40:	3728      	adds	r7, #40	; 0x28
 800ca42:	46bd      	mov	sp, r7
 800ca44:	bd80      	pop	{r7, pc}

0800ca46 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800ca46:	b580      	push	{r7, lr}
 800ca48:	b088      	sub	sp, #32
 800ca4a:	af00      	add	r7, sp, #0
 800ca4c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800ca4e:	2300      	movs	r3, #0
 800ca50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ca52:	2300      	movs	r3, #0
 800ca54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800ca56:	2300      	movs	r3, #0
 800ca58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ca5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca62:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ca64:	f107 0308 	add.w	r3, r7, #8
 800ca68:	4619      	mov	r1, r3
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f7ff fe86 	bl	800c77c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f000 f92d 	bl	800ccd0 <SDMMC_GetCmdError>
 800ca76:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca78:	69fb      	ldr	r3, [r7, #28]
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3720      	adds	r7, #32
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}

0800ca82 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800ca82:	b580      	push	{r7, lr}
 800ca84:	b088      	sub	sp, #32
 800ca86:	af00      	add	r7, sp, #0
 800ca88:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ca8a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ca8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ca90:	2308      	movs	r3, #8
 800ca92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ca94:	2340      	movs	r3, #64	; 0x40
 800ca96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ca9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800caa0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800caa2:	f107 0308 	add.w	r3, r7, #8
 800caa6:	4619      	mov	r1, r3
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f7ff fe67 	bl	800c77c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f000 fb16 	bl	800d0e0 <SDMMC_GetCmdResp7>
 800cab4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cab6:	69fb      	ldr	r3, [r7, #28]
}
 800cab8:	4618      	mov	r0, r3
 800caba:	3720      	adds	r7, #32
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}

0800cac0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b088      	sub	sp, #32
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
 800cac8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800cace:	2337      	movs	r3, #55	; 0x37
 800cad0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cad2:	2340      	movs	r3, #64	; 0x40
 800cad4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cad6:	2300      	movs	r3, #0
 800cad8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cade:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cae0:	f107 0308 	add.w	r3, r7, #8
 800cae4:	4619      	mov	r1, r3
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f7ff fe48 	bl	800c77c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800caec:	f241 3288 	movw	r2, #5000	; 0x1388
 800caf0:	2137      	movs	r1, #55	; 0x37
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f000 f914 	bl	800cd20 <SDMMC_GetCmdResp1>
 800caf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cafa:	69fb      	ldr	r3, [r7, #28]
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3720      	adds	r7, #32
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b088      	sub	sp, #32
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cb14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800cb1a:	2329      	movs	r3, #41	; 0x29
 800cb1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cb1e:	2340      	movs	r3, #64	; 0x40
 800cb20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cb22:	2300      	movs	r3, #0
 800cb24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cb26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb2a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cb2c:	f107 0308 	add.w	r3, r7, #8
 800cb30:	4619      	mov	r1, r3
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f7ff fe22 	bl	800c77c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f000 fa23 	bl	800cf84 <SDMMC_GetCmdResp3>
 800cb3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb40:	69fb      	ldr	r3, [r7, #28]
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	3720      	adds	r7, #32
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}

0800cb4a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800cb4a:	b580      	push	{r7, lr}
 800cb4c:	b088      	sub	sp, #32
 800cb4e:	af00      	add	r7, sp, #0
 800cb50:	6078      	str	r0, [r7, #4]
 800cb52:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800cb58:	2306      	movs	r3, #6
 800cb5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cb5c:	2340      	movs	r3, #64	; 0x40
 800cb5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cb60:	2300      	movs	r3, #0
 800cb62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cb64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb68:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cb6a:	f107 0308 	add.w	r3, r7, #8
 800cb6e:	4619      	mov	r1, r3
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f7ff fe03 	bl	800c77c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800cb76:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb7a:	2106      	movs	r1, #6
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f000 f8cf 	bl	800cd20 <SDMMC_GetCmdResp1>
 800cb82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb84:	69fb      	ldr	r3, [r7, #28]
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3720      	adds	r7, #32
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}

0800cb8e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800cb8e:	b580      	push	{r7, lr}
 800cb90:	b088      	sub	sp, #32
 800cb92:	af00      	add	r7, sp, #0
 800cb94:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800cb96:	2300      	movs	r3, #0
 800cb98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800cb9a:	2333      	movs	r3, #51	; 0x33
 800cb9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cb9e:	2340      	movs	r3, #64	; 0x40
 800cba0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cba2:	2300      	movs	r3, #0
 800cba4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbaa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cbac:	f107 0308 	add.w	r3, r7, #8
 800cbb0:	4619      	mov	r1, r3
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f7ff fde2 	bl	800c77c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800cbb8:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbbc:	2133      	movs	r1, #51	; 0x33
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	f000 f8ae 	bl	800cd20 <SDMMC_GetCmdResp1>
 800cbc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cbc6:	69fb      	ldr	r3, [r7, #28]
}
 800cbc8:	4618      	mov	r0, r3
 800cbca:	3720      	adds	r7, #32
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd80      	pop	{r7, pc}

0800cbd0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b088      	sub	sp, #32
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800cbdc:	2302      	movs	r3, #2
 800cbde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800cbe0:	23c0      	movs	r3, #192	; 0xc0
 800cbe2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cbe8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cbee:	f107 0308 	add.w	r3, r7, #8
 800cbf2:	4619      	mov	r1, r3
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f7ff fdc1 	bl	800c77c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f000 f97c 	bl	800cef8 <SDMMC_GetCmdResp2>
 800cc00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc02:	69fb      	ldr	r3, [r7, #28]
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3720      	adds	r7, #32
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}

0800cc0c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b088      	sub	sp, #32
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	6078      	str	r0, [r7, #4]
 800cc14:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800cc1a:	2309      	movs	r3, #9
 800cc1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800cc1e:	23c0      	movs	r3, #192	; 0xc0
 800cc20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cc22:	2300      	movs	r3, #0
 800cc24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cc26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc2a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cc2c:	f107 0308 	add.w	r3, r7, #8
 800cc30:	4619      	mov	r1, r3
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f7ff fda2 	bl	800c77c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f000 f95d 	bl	800cef8 <SDMMC_GetCmdResp2>
 800cc3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc40:	69fb      	ldr	r3, [r7, #28]
}
 800cc42:	4618      	mov	r0, r3
 800cc44:	3720      	adds	r7, #32
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}

0800cc4a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800cc4a:	b580      	push	{r7, lr}
 800cc4c:	b088      	sub	sp, #32
 800cc4e:	af00      	add	r7, sp, #0
 800cc50:	6078      	str	r0, [r7, #4]
 800cc52:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800cc54:	2300      	movs	r3, #0
 800cc56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800cc58:	2303      	movs	r3, #3
 800cc5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cc5c:	2340      	movs	r3, #64	; 0x40
 800cc5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cc60:	2300      	movs	r3, #0
 800cc62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cc64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc68:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800cc6a:	f107 0308 	add.w	r3, r7, #8
 800cc6e:	4619      	mov	r1, r3
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f7ff fd83 	bl	800c77c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800cc76:	683a      	ldr	r2, [r7, #0]
 800cc78:	2103      	movs	r1, #3
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f000 f9bc 	bl	800cff8 <SDMMC_GetCmdResp6>
 800cc80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc82:	69fb      	ldr	r3, [r7, #28]
}
 800cc84:	4618      	mov	r0, r3
 800cc86:	3720      	adds	r7, #32
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}

0800cc8c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b088      	sub	sp, #32
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
 800cc94:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800cc9a:	230d      	movs	r3, #13
 800cc9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800cc9e:	2340      	movs	r3, #64	; 0x40
 800cca0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800cca2:	2300      	movs	r3, #0
 800cca4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800cca6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccaa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ccac:	f107 0308 	add.w	r3, r7, #8
 800ccb0:	4619      	mov	r1, r3
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f7ff fd62 	bl	800c77c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800ccb8:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccbc:	210d      	movs	r1, #13
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f000 f82e 	bl	800cd20 <SDMMC_GetCmdResp1>
 800ccc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ccc6:	69fb      	ldr	r3, [r7, #28]
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3720      	adds	r7, #32
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}

0800ccd0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800ccd0:	b490      	push	{r4, r7}
 800ccd2:	b082      	sub	sp, #8
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ccd8:	4b0f      	ldr	r3, [pc, #60]	; (800cd18 <SDMMC_GetCmdError+0x48>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	4a0f      	ldr	r2, [pc, #60]	; (800cd1c <SDMMC_GetCmdError+0x4c>)
 800ccde:	fba2 2303 	umull	r2, r3, r2, r3
 800cce2:	0a5b      	lsrs	r3, r3, #9
 800cce4:	f241 3288 	movw	r2, #5000	; 0x1388
 800cce8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ccec:	4623      	mov	r3, r4
 800ccee:	1e5c      	subs	r4, r3, #1
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d102      	bne.n	800ccfa <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ccf4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ccf8:	e009      	b.n	800cd0e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d0f2      	beq.n	800ccec <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	22c5      	movs	r2, #197	; 0xc5
 800cd0a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800cd0c:	2300      	movs	r3, #0
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3708      	adds	r7, #8
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bc90      	pop	{r4, r7}
 800cd16:	4770      	bx	lr
 800cd18:	20000158 	.word	0x20000158
 800cd1c:	10624dd3 	.word	0x10624dd3

0800cd20 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800cd20:	b590      	push	{r4, r7, lr}
 800cd22:	b087      	sub	sp, #28
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	60f8      	str	r0, [r7, #12]
 800cd28:	460b      	mov	r3, r1
 800cd2a:	607a      	str	r2, [r7, #4]
 800cd2c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800cd2e:	4b6f      	ldr	r3, [pc, #444]	; (800ceec <SDMMC_GetCmdResp1+0x1cc>)
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	4a6f      	ldr	r2, [pc, #444]	; (800cef0 <SDMMC_GetCmdResp1+0x1d0>)
 800cd34:	fba2 2303 	umull	r2, r3, r2, r3
 800cd38:	0a5b      	lsrs	r3, r3, #9
 800cd3a:	687a      	ldr	r2, [r7, #4]
 800cd3c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cd40:	4623      	mov	r3, r4
 800cd42:	1e5c      	subs	r4, r3, #1
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d102      	bne.n	800cd4e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cd48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cd4c:	e0c9      	b.n	800cee2 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd52:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cd54:	697b      	ldr	r3, [r7, #20]
 800cd56:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d0f0      	beq.n	800cd40 <SDMMC_GetCmdResp1+0x20>
 800cd5e:	697b      	ldr	r3, [r7, #20]
 800cd60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d1eb      	bne.n	800cd40 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd6c:	f003 0304 	and.w	r3, r3, #4
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d004      	beq.n	800cd7e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	2204      	movs	r2, #4
 800cd78:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cd7a:	2304      	movs	r3, #4
 800cd7c:	e0b1      	b.n	800cee2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd82:	f003 0301 	and.w	r3, r3, #1
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d004      	beq.n	800cd94 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	2201      	movs	r2, #1
 800cd8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cd90:	2301      	movs	r3, #1
 800cd92:	e0a6      	b.n	800cee2 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	22c5      	movs	r2, #197	; 0xc5
 800cd98:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800cd9a:	68f8      	ldr	r0, [r7, #12]
 800cd9c:	f7ff fd18 	bl	800c7d0 <SDIO_GetCommandResponse>
 800cda0:	4603      	mov	r3, r0
 800cda2:	461a      	mov	r2, r3
 800cda4:	7afb      	ldrb	r3, [r7, #11]
 800cda6:	4293      	cmp	r3, r2
 800cda8:	d001      	beq.n	800cdae <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cdaa:	2301      	movs	r3, #1
 800cdac:	e099      	b.n	800cee2 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800cdae:	2100      	movs	r1, #0
 800cdb0:	68f8      	ldr	r0, [r7, #12]
 800cdb2:	f7ff fd1a 	bl	800c7ea <SDIO_GetResponse>
 800cdb6:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cdb8:	693a      	ldr	r2, [r7, #16]
 800cdba:	4b4e      	ldr	r3, [pc, #312]	; (800cef4 <SDMMC_GetCmdResp1+0x1d4>)
 800cdbc:	4013      	ands	r3, r2
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d101      	bne.n	800cdc6 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	e08d      	b.n	800cee2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800cdc6:	693b      	ldr	r3, [r7, #16]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	da02      	bge.n	800cdd2 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cdcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cdd0:	e087      	b.n	800cee2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cdd2:	693b      	ldr	r3, [r7, #16]
 800cdd4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d001      	beq.n	800cde0 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cddc:	2340      	movs	r3, #64	; 0x40
 800cdde:	e080      	b.n	800cee2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800cde0:	693b      	ldr	r3, [r7, #16]
 800cde2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d001      	beq.n	800cdee <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800cdea:	2380      	movs	r3, #128	; 0x80
 800cdec:	e079      	b.n	800cee2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800cdee:	693b      	ldr	r3, [r7, #16]
 800cdf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d002      	beq.n	800cdfe <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cdf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cdfc:	e071      	b.n	800cee2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cdfe:	693b      	ldr	r3, [r7, #16]
 800ce00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d002      	beq.n	800ce0e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ce08:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ce0c:	e069      	b.n	800cee2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d002      	beq.n	800ce1e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ce18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce1c:	e061      	b.n	800cee2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ce1e:	693b      	ldr	r3, [r7, #16]
 800ce20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d002      	beq.n	800ce2e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ce28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ce2c:	e059      	b.n	800cee2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ce2e:	693b      	ldr	r3, [r7, #16]
 800ce30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d002      	beq.n	800ce3e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ce38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ce3c:	e051      	b.n	800cee2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ce3e:	693b      	ldr	r3, [r7, #16]
 800ce40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d002      	beq.n	800ce4e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ce48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ce4c:	e049      	b.n	800cee2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d002      	beq.n	800ce5e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ce58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ce5c:	e041      	b.n	800cee2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ce5e:	693b      	ldr	r3, [r7, #16]
 800ce60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d002      	beq.n	800ce6e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800ce68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ce6c:	e039      	b.n	800cee2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d002      	beq.n	800ce7e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ce78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ce7c:	e031      	b.n	800cee2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ce7e:	693b      	ldr	r3, [r7, #16]
 800ce80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d002      	beq.n	800ce8e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ce88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ce8c:	e029      	b.n	800cee2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ce8e:	693b      	ldr	r3, [r7, #16]
 800ce90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d002      	beq.n	800ce9e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ce98:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ce9c:	e021      	b.n	800cee2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ce9e:	693b      	ldr	r3, [r7, #16]
 800cea0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d002      	beq.n	800ceae <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cea8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800ceac:	e019      	b.n	800cee2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800ceae:	693b      	ldr	r3, [r7, #16]
 800ceb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d002      	beq.n	800cebe <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ceb8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cebc:	e011      	b.n	800cee2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cebe:	693b      	ldr	r3, [r7, #16]
 800cec0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d002      	beq.n	800cece <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800cec8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cecc:	e009      	b.n	800cee2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	f003 0308 	and.w	r3, r3, #8
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d002      	beq.n	800cede <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ced8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800cedc:	e001      	b.n	800cee2 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cede:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cee2:	4618      	mov	r0, r3
 800cee4:	371c      	adds	r7, #28
 800cee6:	46bd      	mov	sp, r7
 800cee8:	bd90      	pop	{r4, r7, pc}
 800ceea:	bf00      	nop
 800ceec:	20000158 	.word	0x20000158
 800cef0:	10624dd3 	.word	0x10624dd3
 800cef4:	fdffe008 	.word	0xfdffe008

0800cef8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800cef8:	b490      	push	{r4, r7}
 800cefa:	b084      	sub	sp, #16
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cf00:	4b1e      	ldr	r3, [pc, #120]	; (800cf7c <SDMMC_GetCmdResp2+0x84>)
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	4a1e      	ldr	r2, [pc, #120]	; (800cf80 <SDMMC_GetCmdResp2+0x88>)
 800cf06:	fba2 2303 	umull	r2, r3, r2, r3
 800cf0a:	0a5b      	lsrs	r3, r3, #9
 800cf0c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf10:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cf14:	4623      	mov	r3, r4
 800cf16:	1e5c      	subs	r4, r3, #1
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d102      	bne.n	800cf22 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cf1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cf20:	e026      	b.n	800cf70 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf26:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d0f0      	beq.n	800cf14 <SDMMC_GetCmdResp2+0x1c>
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d1eb      	bne.n	800cf14 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf40:	f003 0304 	and.w	r3, r3, #4
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d004      	beq.n	800cf52 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2204      	movs	r2, #4
 800cf4c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cf4e:	2304      	movs	r3, #4
 800cf50:	e00e      	b.n	800cf70 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf56:	f003 0301 	and.w	r3, r3, #1
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d004      	beq.n	800cf68 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2201      	movs	r2, #1
 800cf62:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cf64:	2301      	movs	r3, #1
 800cf66:	e003      	b.n	800cf70 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	22c5      	movs	r2, #197	; 0xc5
 800cf6c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800cf6e:	2300      	movs	r3, #0
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	3710      	adds	r7, #16
 800cf74:	46bd      	mov	sp, r7
 800cf76:	bc90      	pop	{r4, r7}
 800cf78:	4770      	bx	lr
 800cf7a:	bf00      	nop
 800cf7c:	20000158 	.word	0x20000158
 800cf80:	10624dd3 	.word	0x10624dd3

0800cf84 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800cf84:	b490      	push	{r4, r7}
 800cf86:	b084      	sub	sp, #16
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cf8c:	4b18      	ldr	r3, [pc, #96]	; (800cff0 <SDMMC_GetCmdResp3+0x6c>)
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	4a18      	ldr	r2, [pc, #96]	; (800cff4 <SDMMC_GetCmdResp3+0x70>)
 800cf92:	fba2 2303 	umull	r2, r3, r2, r3
 800cf96:	0a5b      	lsrs	r3, r3, #9
 800cf98:	f241 3288 	movw	r2, #5000	; 0x1388
 800cf9c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800cfa0:	4623      	mov	r3, r4
 800cfa2:	1e5c      	subs	r4, r3, #1
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d102      	bne.n	800cfae <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cfa8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cfac:	e01b      	b.n	800cfe6 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfb2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d0f0      	beq.n	800cfa0 <SDMMC_GetCmdResp3+0x1c>
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d1eb      	bne.n	800cfa0 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfcc:	f003 0304 	and.w	r3, r3, #4
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d004      	beq.n	800cfde <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	2204      	movs	r2, #4
 800cfd8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cfda:	2304      	movs	r3, #4
 800cfdc:	e003      	b.n	800cfe6 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	22c5      	movs	r2, #197	; 0xc5
 800cfe2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800cfe4:	2300      	movs	r3, #0
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3710      	adds	r7, #16
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bc90      	pop	{r4, r7}
 800cfee:	4770      	bx	lr
 800cff0:	20000158 	.word	0x20000158
 800cff4:	10624dd3 	.word	0x10624dd3

0800cff8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800cff8:	b590      	push	{r4, r7, lr}
 800cffa:	b087      	sub	sp, #28
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	60f8      	str	r0, [r7, #12]
 800d000:	460b      	mov	r3, r1
 800d002:	607a      	str	r2, [r7, #4]
 800d004:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d006:	4b34      	ldr	r3, [pc, #208]	; (800d0d8 <SDMMC_GetCmdResp6+0xe0>)
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	4a34      	ldr	r2, [pc, #208]	; (800d0dc <SDMMC_GetCmdResp6+0xe4>)
 800d00c:	fba2 2303 	umull	r2, r3, r2, r3
 800d010:	0a5b      	lsrs	r3, r3, #9
 800d012:	f241 3288 	movw	r2, #5000	; 0x1388
 800d016:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d01a:	4623      	mov	r3, r4
 800d01c:	1e5c      	subs	r4, r3, #1
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d102      	bne.n	800d028 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d022:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d026:	e052      	b.n	800d0ce <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d02c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d02e:	697b      	ldr	r3, [r7, #20]
 800d030:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d034:	2b00      	cmp	r3, #0
 800d036:	d0f0      	beq.n	800d01a <SDMMC_GetCmdResp6+0x22>
 800d038:	697b      	ldr	r3, [r7, #20]
 800d03a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d1eb      	bne.n	800d01a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d046:	f003 0304 	and.w	r3, r3, #4
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d004      	beq.n	800d058 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	2204      	movs	r2, #4
 800d052:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d054:	2304      	movs	r3, #4
 800d056:	e03a      	b.n	800d0ce <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d05c:	f003 0301 	and.w	r3, r3, #1
 800d060:	2b00      	cmp	r3, #0
 800d062:	d004      	beq.n	800d06e <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	2201      	movs	r2, #1
 800d068:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d06a:	2301      	movs	r3, #1
 800d06c:	e02f      	b.n	800d0ce <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800d06e:	68f8      	ldr	r0, [r7, #12]
 800d070:	f7ff fbae 	bl	800c7d0 <SDIO_GetCommandResponse>
 800d074:	4603      	mov	r3, r0
 800d076:	461a      	mov	r2, r3
 800d078:	7afb      	ldrb	r3, [r7, #11]
 800d07a:	4293      	cmp	r3, r2
 800d07c:	d001      	beq.n	800d082 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d07e:	2301      	movs	r3, #1
 800d080:	e025      	b.n	800d0ce <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	22c5      	movs	r2, #197	; 0xc5
 800d086:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800d088:	2100      	movs	r1, #0
 800d08a:	68f8      	ldr	r0, [r7, #12]
 800d08c:	f7ff fbad 	bl	800c7ea <SDIO_GetResponse>
 800d090:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d092:	693b      	ldr	r3, [r7, #16]
 800d094:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d106      	bne.n	800d0aa <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d09c:	693b      	ldr	r3, [r7, #16]
 800d09e:	0c1b      	lsrs	r3, r3, #16
 800d0a0:	b29a      	uxth	r2, r3
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	e011      	b.n	800d0ce <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d002      	beq.n	800d0ba <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d0b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d0b8:	e009      	b.n	800d0ce <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d002      	beq.n	800d0ca <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d0c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d0c8:	e001      	b.n	800d0ce <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d0ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	371c      	adds	r7, #28
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd90      	pop	{r4, r7, pc}
 800d0d6:	bf00      	nop
 800d0d8:	20000158 	.word	0x20000158
 800d0dc:	10624dd3 	.word	0x10624dd3

0800d0e0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800d0e0:	b490      	push	{r4, r7}
 800d0e2:	b084      	sub	sp, #16
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d0e8:	4b21      	ldr	r3, [pc, #132]	; (800d170 <SDMMC_GetCmdResp7+0x90>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	4a21      	ldr	r2, [pc, #132]	; (800d174 <SDMMC_GetCmdResp7+0x94>)
 800d0ee:	fba2 2303 	umull	r2, r3, r2, r3
 800d0f2:	0a5b      	lsrs	r3, r3, #9
 800d0f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d0f8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800d0fc:	4623      	mov	r3, r4
 800d0fe:	1e5c      	subs	r4, r3, #1
 800d100:	2b00      	cmp	r3, #0
 800d102:	d102      	bne.n	800d10a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d104:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d108:	e02c      	b.n	800d164 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d10e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800d116:	2b00      	cmp	r3, #0
 800d118:	d0f0      	beq.n	800d0fc <SDMMC_GetCmdResp7+0x1c>
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800d120:	2b00      	cmp	r3, #0
 800d122:	d1eb      	bne.n	800d0fc <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d128:	f003 0304 	and.w	r3, r3, #4
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d004      	beq.n	800d13a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2204      	movs	r2, #4
 800d134:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d136:	2304      	movs	r3, #4
 800d138:	e014      	b.n	800d164 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d13e:	f003 0301 	and.w	r3, r3, #1
 800d142:	2b00      	cmp	r3, #0
 800d144:	d004      	beq.n	800d150 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	2201      	movs	r2, #1
 800d14a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d14c:	2301      	movs	r3, #1
 800d14e:	e009      	b.n	800d164 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d002      	beq.n	800d162 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2240      	movs	r2, #64	; 0x40
 800d160:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d162:	2300      	movs	r3, #0
  
}
 800d164:	4618      	mov	r0, r3
 800d166:	3710      	adds	r7, #16
 800d168:	46bd      	mov	sp, r7
 800d16a:	bc90      	pop	{r4, r7}
 800d16c:	4770      	bx	lr
 800d16e:	bf00      	nop
 800d170:	20000158 	.word	0x20000158
 800d174:	10624dd3 	.word	0x10624dd3

0800d178 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d17c:	4904      	ldr	r1, [pc, #16]	; (800d190 <MX_FATFS_Init+0x18>)
 800d17e:	4805      	ldr	r0, [pc, #20]	; (800d194 <MX_FATFS_Init+0x1c>)
 800d180:	f003 f9cc 	bl	801051c <FATFS_LinkDriver>
 800d184:	4603      	mov	r3, r0
 800d186:	461a      	mov	r2, r3
 800d188:	4b03      	ldr	r3, [pc, #12]	; (800d198 <MX_FATFS_Init+0x20>)
 800d18a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d18c:	bf00      	nop
 800d18e:	bd80      	pop	{r7, pc}
 800d190:	20015cb8 	.word	0x20015cb8
 800d194:	080150fc 	.word	0x080150fc
 800d198:	20015cb4 	.word	0x20015cb4

0800d19c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d19c:	b480      	push	{r7}
 800d19e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d1a0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1aa:	4770      	bx	lr

0800d1ac <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b082      	sub	sp, #8
 800d1b0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d1b6:	f000 f896 	bl	800d2e6 <BSP_SD_IsDetected>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	2b01      	cmp	r3, #1
 800d1be:	d001      	beq.n	800d1c4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	e012      	b.n	800d1ea <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800d1c4:	480b      	ldr	r0, [pc, #44]	; (800d1f4 <BSP_SD_Init+0x48>)
 800d1c6:	f7fd fa21 	bl	800a60c <HAL_SD_Init>
 800d1ca:	4603      	mov	r3, r0
 800d1cc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d1ce:	79fb      	ldrb	r3, [r7, #7]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d109      	bne.n	800d1e8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800d1d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d1d8:	4806      	ldr	r0, [pc, #24]	; (800d1f4 <BSP_SD_Init+0x48>)
 800d1da:	f7fd ffe1 	bl	800b1a0 <HAL_SD_ConfigWideBusOperation>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d001      	beq.n	800d1e8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d1e4:	2301      	movs	r3, #1
 800d1e6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d1e8:	79fb      	ldrb	r3, [r7, #7]
}
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	3708      	adds	r7, #8
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}
 800d1f2:	bf00      	nop
 800d1f4:	20015b7c 	.word	0x20015b7c

0800d1f8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b086      	sub	sp, #24
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	60f8      	str	r0, [r7, #12]
 800d200:	60b9      	str	r1, [r7, #8]
 800d202:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d204:	2300      	movs	r3, #0
 800d206:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	68ba      	ldr	r2, [r7, #8]
 800d20c:	68f9      	ldr	r1, [r7, #12]
 800d20e:	4806      	ldr	r0, [pc, #24]	; (800d228 <BSP_SD_ReadBlocks_DMA+0x30>)
 800d210:	f7fd fa8c 	bl	800a72c <HAL_SD_ReadBlocks_DMA>
 800d214:	4603      	mov	r3, r0
 800d216:	2b00      	cmp	r3, #0
 800d218:	d001      	beq.n	800d21e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d21a:	2301      	movs	r3, #1
 800d21c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d21e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d220:	4618      	mov	r0, r3
 800d222:	3718      	adds	r7, #24
 800d224:	46bd      	mov	sp, r7
 800d226:	bd80      	pop	{r7, pc}
 800d228:	20015b7c 	.word	0x20015b7c

0800d22c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b086      	sub	sp, #24
 800d230:	af00      	add	r7, sp, #0
 800d232:	60f8      	str	r0, [r7, #12]
 800d234:	60b9      	str	r1, [r7, #8]
 800d236:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d238:	2300      	movs	r3, #0
 800d23a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	68ba      	ldr	r2, [r7, #8]
 800d240:	68f9      	ldr	r1, [r7, #12]
 800d242:	4806      	ldr	r0, [pc, #24]	; (800d25c <BSP_SD_WriteBlocks_DMA+0x30>)
 800d244:	f7fd fb5c 	bl	800a900 <HAL_SD_WriteBlocks_DMA>
 800d248:	4603      	mov	r3, r0
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d001      	beq.n	800d252 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d24e:	2301      	movs	r3, #1
 800d250:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d252:	7dfb      	ldrb	r3, [r7, #23]
}
 800d254:	4618      	mov	r0, r3
 800d256:	3718      	adds	r7, #24
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}
 800d25c:	20015b7c 	.word	0x20015b7c

0800d260 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d264:	4805      	ldr	r0, [pc, #20]	; (800d27c <BSP_SD_GetCardState+0x1c>)
 800d266:	f7fe f817 	bl	800b298 <HAL_SD_GetCardState>
 800d26a:	4603      	mov	r3, r0
 800d26c:	2b04      	cmp	r3, #4
 800d26e:	bf14      	ite	ne
 800d270:	2301      	movne	r3, #1
 800d272:	2300      	moveq	r3, #0
 800d274:	b2db      	uxtb	r3, r3
}
 800d276:	4618      	mov	r0, r3
 800d278:	bd80      	pop	{r7, pc}
 800d27a:	bf00      	nop
 800d27c:	20015b7c 	.word	0x20015b7c

0800d280 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b082      	sub	sp, #8
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800d288:	6879      	ldr	r1, [r7, #4]
 800d28a:	4803      	ldr	r0, [pc, #12]	; (800d298 <BSP_SD_GetCardInfo+0x18>)
 800d28c:	f7fd ff5c 	bl	800b148 <HAL_SD_GetCardInfo>
}
 800d290:	bf00      	nop
 800d292:	3708      	adds	r7, #8
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}
 800d298:	20015b7c 	.word	0x20015b7c

0800d29c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b082      	sub	sp, #8
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800d2a4:	f000 f818 	bl	800d2d8 <BSP_SD_AbortCallback>
}
 800d2a8:	bf00      	nop
 800d2aa:	3708      	adds	r7, #8
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}

0800d2b0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b082      	sub	sp, #8
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800d2b8:	f000 f9aa 	bl	800d610 <BSP_SD_WriteCpltCallback>
}
 800d2bc:	bf00      	nop
 800d2be:	3708      	adds	r7, #8
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}

0800d2c4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b082      	sub	sp, #8
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d2cc:	f000 f9ac 	bl	800d628 <BSP_SD_ReadCpltCallback>
}
 800d2d0:	bf00      	nop
 800d2d2:	3708      	adds	r7, #8
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}

0800d2d8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800d2d8:	b480      	push	{r7}
 800d2da:	af00      	add	r7, sp, #0

}
 800d2dc:	bf00      	nop
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e4:	4770      	bx	lr

0800d2e6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d2e6:	b580      	push	{r7, lr}
 800d2e8:	b082      	sub	sp, #8
 800d2ea:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d2ec:	2301      	movs	r3, #1
 800d2ee:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d2f0:	f000 f80c 	bl	800d30c <BSP_PlatformIsDetected>
 800d2f4:	4603      	mov	r3, r0
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d101      	bne.n	800d2fe <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d2fe:	79fb      	ldrb	r3, [r7, #7]
 800d300:	b2db      	uxtb	r3, r3
}
 800d302:	4618      	mov	r0, r3
 800d304:	3708      	adds	r7, #8
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}
	...

0800d30c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b082      	sub	sp, #8
 800d310:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d312:	2301      	movs	r3, #1
 800d314:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d316:	2101      	movs	r1, #1
 800d318:	4807      	ldr	r0, [pc, #28]	; (800d338 <BSP_PlatformIsDetected+0x2c>)
 800d31a:	f7fb fc3f 	bl	8008b9c <HAL_GPIO_ReadPin>
 800d31e:	4603      	mov	r3, r0
 800d320:	2b00      	cmp	r3, #0
 800d322:	d001      	beq.n	800d328 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800d324:	2300      	movs	r3, #0
 800d326:	71fb      	strb	r3, [r7, #7]
//    if (status == SD_NOT_PRESENT){
//    	status = SD_PRESENT;
//    } else {
//    	status = SD_NOT_PRESENT;
//    }
   	status = SD_PRESENT;
 800d328:	2301      	movs	r3, #1
 800d32a:	71fb      	strb	r3, [r7, #7]

    /* USER CODE END 1 */
    return status;
 800d32c:	79fb      	ldrb	r3, [r7, #7]
}
 800d32e:	4618      	mov	r0, r3
 800d330:	3708      	adds	r7, #8
 800d332:	46bd      	mov	sp, r7
 800d334:	bd80      	pop	{r7, pc}
 800d336:	bf00      	nop
 800d338:	40020c00 	.word	0x40020c00

0800d33c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b084      	sub	sp, #16
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800d344:	f7fa f906 	bl	8007554 <HAL_GetTick>
 800d348:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800d34a:	e006      	b.n	800d35a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d34c:	f7ff ff88 	bl	800d260 <BSP_SD_GetCardState>
 800d350:	4603      	mov	r3, r0
 800d352:	2b00      	cmp	r3, #0
 800d354:	d101      	bne.n	800d35a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d356:	2300      	movs	r3, #0
 800d358:	e009      	b.n	800d36e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800d35a:	f7fa f8fb 	bl	8007554 <HAL_GetTick>
 800d35e:	4602      	mov	r2, r0
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	1ad3      	subs	r3, r2, r3
 800d364:	687a      	ldr	r2, [r7, #4]
 800d366:	429a      	cmp	r2, r3
 800d368:	d8f0      	bhi.n	800d34c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d36a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3710      	adds	r7, #16
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}
	...

0800d378 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b082      	sub	sp, #8
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	4603      	mov	r3, r0
 800d380:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d382:	4b0b      	ldr	r3, [pc, #44]	; (800d3b0 <SD_CheckStatus+0x38>)
 800d384:	2201      	movs	r2, #1
 800d386:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d388:	f7ff ff6a 	bl	800d260 <BSP_SD_GetCardState>
 800d38c:	4603      	mov	r3, r0
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d107      	bne.n	800d3a2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d392:	4b07      	ldr	r3, [pc, #28]	; (800d3b0 <SD_CheckStatus+0x38>)
 800d394:	781b      	ldrb	r3, [r3, #0]
 800d396:	b2db      	uxtb	r3, r3
 800d398:	f023 0301 	bic.w	r3, r3, #1
 800d39c:	b2da      	uxtb	r2, r3
 800d39e:	4b04      	ldr	r3, [pc, #16]	; (800d3b0 <SD_CheckStatus+0x38>)
 800d3a0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d3a2:	4b03      	ldr	r3, [pc, #12]	; (800d3b0 <SD_CheckStatus+0x38>)
 800d3a4:	781b      	ldrb	r3, [r3, #0]
 800d3a6:	b2db      	uxtb	r3, r3
}
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	3708      	adds	r7, #8
 800d3ac:	46bd      	mov	sp, r7
 800d3ae:	bd80      	pop	{r7, pc}
 800d3b0:	20000165 	.word	0x20000165

0800d3b4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b082      	sub	sp, #8
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	4603      	mov	r3, r0
 800d3bc:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d3be:	f7ff fef5 	bl	800d1ac <BSP_SD_Init>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d107      	bne.n	800d3d8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800d3c8:	79fb      	ldrb	r3, [r7, #7]
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f7ff ffd4 	bl	800d378 <SD_CheckStatus>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	461a      	mov	r2, r3
 800d3d4:	4b04      	ldr	r3, [pc, #16]	; (800d3e8 <SD_initialize+0x34>)
 800d3d6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d3d8:	4b03      	ldr	r3, [pc, #12]	; (800d3e8 <SD_initialize+0x34>)
 800d3da:	781b      	ldrb	r3, [r3, #0]
 800d3dc:	b2db      	uxtb	r3, r3
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	3708      	adds	r7, #8
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}
 800d3e6:	bf00      	nop
 800d3e8:	20000165 	.word	0x20000165

0800d3ec <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b082      	sub	sp, #8
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d3f6:	79fb      	ldrb	r3, [r7, #7]
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f7ff ffbd 	bl	800d378 <SD_CheckStatus>
 800d3fe:	4603      	mov	r3, r0
}
 800d400:	4618      	mov	r0, r3
 800d402:	3708      	adds	r7, #8
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}

0800d408 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b086      	sub	sp, #24
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	60b9      	str	r1, [r7, #8]
 800d410:	607a      	str	r2, [r7, #4]
 800d412:	603b      	str	r3, [r7, #0]
 800d414:	4603      	mov	r3, r0
 800d416:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d418:	2301      	movs	r3, #1
 800d41a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d41c:	f247 5030 	movw	r0, #30000	; 0x7530
 800d420:	f7ff ff8c 	bl	800d33c <SD_CheckStatusWithTimeout>
 800d424:	4603      	mov	r3, r0
 800d426:	2b00      	cmp	r3, #0
 800d428:	da01      	bge.n	800d42e <SD_read+0x26>
  {
    return res;
 800d42a:	7dfb      	ldrb	r3, [r7, #23]
 800d42c:	e03b      	b.n	800d4a6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800d42e:	683a      	ldr	r2, [r7, #0]
 800d430:	6879      	ldr	r1, [r7, #4]
 800d432:	68b8      	ldr	r0, [r7, #8]
 800d434:	f7ff fee0 	bl	800d1f8 <BSP_SD_ReadBlocks_DMA>
 800d438:	4603      	mov	r3, r0
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d132      	bne.n	800d4a4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800d43e:	4b1c      	ldr	r3, [pc, #112]	; (800d4b0 <SD_read+0xa8>)
 800d440:	2200      	movs	r2, #0
 800d442:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800d444:	f7fa f886 	bl	8007554 <HAL_GetTick>
 800d448:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d44a:	bf00      	nop
 800d44c:	4b18      	ldr	r3, [pc, #96]	; (800d4b0 <SD_read+0xa8>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d108      	bne.n	800d466 <SD_read+0x5e>
 800d454:	f7fa f87e 	bl	8007554 <HAL_GetTick>
 800d458:	4602      	mov	r2, r0
 800d45a:	693b      	ldr	r3, [r7, #16]
 800d45c:	1ad3      	subs	r3, r2, r3
 800d45e:	f247 522f 	movw	r2, #29999	; 0x752f
 800d462:	4293      	cmp	r3, r2
 800d464:	d9f2      	bls.n	800d44c <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800d466:	4b12      	ldr	r3, [pc, #72]	; (800d4b0 <SD_read+0xa8>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d102      	bne.n	800d474 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800d46e:	2301      	movs	r3, #1
 800d470:	75fb      	strb	r3, [r7, #23]
 800d472:	e017      	b.n	800d4a4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800d474:	4b0e      	ldr	r3, [pc, #56]	; (800d4b0 <SD_read+0xa8>)
 800d476:	2200      	movs	r2, #0
 800d478:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d47a:	f7fa f86b 	bl	8007554 <HAL_GetTick>
 800d47e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d480:	e007      	b.n	800d492 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d482:	f7ff feed 	bl	800d260 <BSP_SD_GetCardState>
 800d486:	4603      	mov	r3, r0
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d102      	bne.n	800d492 <SD_read+0x8a>
          {
            res = RES_OK;
 800d48c:	2300      	movs	r3, #0
 800d48e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800d490:	e008      	b.n	800d4a4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d492:	f7fa f85f 	bl	8007554 <HAL_GetTick>
 800d496:	4602      	mov	r2, r0
 800d498:	693b      	ldr	r3, [r7, #16]
 800d49a:	1ad3      	subs	r3, r2, r3
 800d49c:	f247 522f 	movw	r2, #29999	; 0x752f
 800d4a0:	4293      	cmp	r3, r2
 800d4a2:	d9ee      	bls.n	800d482 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800d4a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	3718      	adds	r7, #24
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}
 800d4ae:	bf00      	nop
 800d4b0:	20000834 	.word	0x20000834

0800d4b4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b086      	sub	sp, #24
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	60b9      	str	r1, [r7, #8]
 800d4bc:	607a      	str	r2, [r7, #4]
 800d4be:	603b      	str	r3, [r7, #0]
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d4c4:	2301      	movs	r3, #1
 800d4c6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800d4c8:	4b24      	ldr	r3, [pc, #144]	; (800d55c <SD_write+0xa8>)
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d4ce:	f247 5030 	movw	r0, #30000	; 0x7530
 800d4d2:	f7ff ff33 	bl	800d33c <SD_CheckStatusWithTimeout>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	da01      	bge.n	800d4e0 <SD_write+0x2c>
  {
    return res;
 800d4dc:	7dfb      	ldrb	r3, [r7, #23]
 800d4de:	e038      	b.n	800d552 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d4e0:	683a      	ldr	r2, [r7, #0]
 800d4e2:	6879      	ldr	r1, [r7, #4]
 800d4e4:	68b8      	ldr	r0, [r7, #8]
 800d4e6:	f7ff fea1 	bl	800d22c <BSP_SD_WriteBlocks_DMA>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d12f      	bne.n	800d550 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800d4f0:	f7fa f830 	bl	8007554 <HAL_GetTick>
 800d4f4:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d4f6:	bf00      	nop
 800d4f8:	4b18      	ldr	r3, [pc, #96]	; (800d55c <SD_write+0xa8>)
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d108      	bne.n	800d512 <SD_write+0x5e>
 800d500:	f7fa f828 	bl	8007554 <HAL_GetTick>
 800d504:	4602      	mov	r2, r0
 800d506:	693b      	ldr	r3, [r7, #16]
 800d508:	1ad3      	subs	r3, r2, r3
 800d50a:	f247 522f 	movw	r2, #29999	; 0x752f
 800d50e:	4293      	cmp	r3, r2
 800d510:	d9f2      	bls.n	800d4f8 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800d512:	4b12      	ldr	r3, [pc, #72]	; (800d55c <SD_write+0xa8>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d102      	bne.n	800d520 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800d51a:	2301      	movs	r3, #1
 800d51c:	75fb      	strb	r3, [r7, #23]
 800d51e:	e017      	b.n	800d550 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800d520:	4b0e      	ldr	r3, [pc, #56]	; (800d55c <SD_write+0xa8>)
 800d522:	2200      	movs	r2, #0
 800d524:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d526:	f7fa f815 	bl	8007554 <HAL_GetTick>
 800d52a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d52c:	e007      	b.n	800d53e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d52e:	f7ff fe97 	bl	800d260 <BSP_SD_GetCardState>
 800d532:	4603      	mov	r3, r0
 800d534:	2b00      	cmp	r3, #0
 800d536:	d102      	bne.n	800d53e <SD_write+0x8a>
          {
            res = RES_OK;
 800d538:	2300      	movs	r3, #0
 800d53a:	75fb      	strb	r3, [r7, #23]
            break;
 800d53c:	e008      	b.n	800d550 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d53e:	f7fa f809 	bl	8007554 <HAL_GetTick>
 800d542:	4602      	mov	r2, r0
 800d544:	693b      	ldr	r3, [r7, #16]
 800d546:	1ad3      	subs	r3, r2, r3
 800d548:	f247 522f 	movw	r2, #29999	; 0x752f
 800d54c:	4293      	cmp	r3, r2
 800d54e:	d9ee      	bls.n	800d52e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800d550:	7dfb      	ldrb	r3, [r7, #23]
}
 800d552:	4618      	mov	r0, r3
 800d554:	3718      	adds	r7, #24
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}
 800d55a:	bf00      	nop
 800d55c:	20000830 	.word	0x20000830

0800d560 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b08c      	sub	sp, #48	; 0x30
 800d564:	af00      	add	r7, sp, #0
 800d566:	4603      	mov	r3, r0
 800d568:	603a      	str	r2, [r7, #0]
 800d56a:	71fb      	strb	r3, [r7, #7]
 800d56c:	460b      	mov	r3, r1
 800d56e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d570:	2301      	movs	r3, #1
 800d572:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d576:	4b25      	ldr	r3, [pc, #148]	; (800d60c <SD_ioctl+0xac>)
 800d578:	781b      	ldrb	r3, [r3, #0]
 800d57a:	b2db      	uxtb	r3, r3
 800d57c:	f003 0301 	and.w	r3, r3, #1
 800d580:	2b00      	cmp	r3, #0
 800d582:	d001      	beq.n	800d588 <SD_ioctl+0x28>
 800d584:	2303      	movs	r3, #3
 800d586:	e03c      	b.n	800d602 <SD_ioctl+0xa2>

  switch (cmd)
 800d588:	79bb      	ldrb	r3, [r7, #6]
 800d58a:	2b03      	cmp	r3, #3
 800d58c:	d834      	bhi.n	800d5f8 <SD_ioctl+0x98>
 800d58e:	a201      	add	r2, pc, #4	; (adr r2, 800d594 <SD_ioctl+0x34>)
 800d590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d594:	0800d5a5 	.word	0x0800d5a5
 800d598:	0800d5ad 	.word	0x0800d5ad
 800d59c:	0800d5c5 	.word	0x0800d5c5
 800d5a0:	0800d5df 	.word	0x0800d5df
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d5aa:	e028      	b.n	800d5fe <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d5ac:	f107 030c 	add.w	r3, r7, #12
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f7ff fe65 	bl	800d280 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d5b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d5bc:	2300      	movs	r3, #0
 800d5be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d5c2:	e01c      	b.n	800d5fe <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d5c4:	f107 030c 	add.w	r3, r7, #12
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	f7ff fe59 	bl	800d280 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d5ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5d0:	b29a      	uxth	r2, r3
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d5dc:	e00f      	b.n	800d5fe <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d5de:	f107 030c 	add.w	r3, r7, #12
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f7ff fe4c 	bl	800d280 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ea:	0a5a      	lsrs	r2, r3, #9
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d5f6:	e002      	b.n	800d5fe <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d5f8:	2304      	movs	r3, #4
 800d5fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d5fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d602:	4618      	mov	r0, r3
 800d604:	3730      	adds	r7, #48	; 0x30
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}
 800d60a:	bf00      	nop
 800d60c:	20000165 	.word	0x20000165

0800d610 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800d610:	b480      	push	{r7}
 800d612:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800d614:	4b03      	ldr	r3, [pc, #12]	; (800d624 <BSP_SD_WriteCpltCallback+0x14>)
 800d616:	2201      	movs	r2, #1
 800d618:	601a      	str	r2, [r3, #0]
}
 800d61a:	bf00      	nop
 800d61c:	46bd      	mov	sp, r7
 800d61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d622:	4770      	bx	lr
 800d624:	20000830 	.word	0x20000830

0800d628 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d628:	b480      	push	{r7}
 800d62a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800d62c:	4b03      	ldr	r3, [pc, #12]	; (800d63c <BSP_SD_ReadCpltCallback+0x14>)
 800d62e:	2201      	movs	r2, #1
 800d630:	601a      	str	r2, [r3, #0]
}
 800d632:	bf00      	nop
 800d634:	46bd      	mov	sp, r7
 800d636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63a:	4770      	bx	lr
 800d63c:	20000834 	.word	0x20000834

0800d640 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b084      	sub	sp, #16
 800d644:	af00      	add	r7, sp, #0
 800d646:	4603      	mov	r3, r0
 800d648:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d64a:	79fb      	ldrb	r3, [r7, #7]
 800d64c:	4a08      	ldr	r2, [pc, #32]	; (800d670 <disk_status+0x30>)
 800d64e:	009b      	lsls	r3, r3, #2
 800d650:	4413      	add	r3, r2
 800d652:	685b      	ldr	r3, [r3, #4]
 800d654:	685b      	ldr	r3, [r3, #4]
 800d656:	79fa      	ldrb	r2, [r7, #7]
 800d658:	4905      	ldr	r1, [pc, #20]	; (800d670 <disk_status+0x30>)
 800d65a:	440a      	add	r2, r1
 800d65c:	7a12      	ldrb	r2, [r2, #8]
 800d65e:	4610      	mov	r0, r2
 800d660:	4798      	blx	r3
 800d662:	4603      	mov	r3, r0
 800d664:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d666:	7bfb      	ldrb	r3, [r7, #15]
}
 800d668:	4618      	mov	r0, r3
 800d66a:	3710      	adds	r7, #16
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}
 800d670:	20000860 	.word	0x20000860

0800d674 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b084      	sub	sp, #16
 800d678:	af00      	add	r7, sp, #0
 800d67a:	4603      	mov	r3, r0
 800d67c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d67e:	2300      	movs	r3, #0
 800d680:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d682:	79fb      	ldrb	r3, [r7, #7]
 800d684:	4a0d      	ldr	r2, [pc, #52]	; (800d6bc <disk_initialize+0x48>)
 800d686:	5cd3      	ldrb	r3, [r2, r3]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d111      	bne.n	800d6b0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d68c:	79fb      	ldrb	r3, [r7, #7]
 800d68e:	4a0b      	ldr	r2, [pc, #44]	; (800d6bc <disk_initialize+0x48>)
 800d690:	2101      	movs	r1, #1
 800d692:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d694:	79fb      	ldrb	r3, [r7, #7]
 800d696:	4a09      	ldr	r2, [pc, #36]	; (800d6bc <disk_initialize+0x48>)
 800d698:	009b      	lsls	r3, r3, #2
 800d69a:	4413      	add	r3, r2
 800d69c:	685b      	ldr	r3, [r3, #4]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	79fa      	ldrb	r2, [r7, #7]
 800d6a2:	4906      	ldr	r1, [pc, #24]	; (800d6bc <disk_initialize+0x48>)
 800d6a4:	440a      	add	r2, r1
 800d6a6:	7a12      	ldrb	r2, [r2, #8]
 800d6a8:	4610      	mov	r0, r2
 800d6aa:	4798      	blx	r3
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d6b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	3710      	adds	r7, #16
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}
 800d6ba:	bf00      	nop
 800d6bc:	20000860 	.word	0x20000860

0800d6c0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d6c0:	b590      	push	{r4, r7, lr}
 800d6c2:	b087      	sub	sp, #28
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	60b9      	str	r1, [r7, #8]
 800d6c8:	607a      	str	r2, [r7, #4]
 800d6ca:	603b      	str	r3, [r7, #0]
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d6d0:	7bfb      	ldrb	r3, [r7, #15]
 800d6d2:	4a0a      	ldr	r2, [pc, #40]	; (800d6fc <disk_read+0x3c>)
 800d6d4:	009b      	lsls	r3, r3, #2
 800d6d6:	4413      	add	r3, r2
 800d6d8:	685b      	ldr	r3, [r3, #4]
 800d6da:	689c      	ldr	r4, [r3, #8]
 800d6dc:	7bfb      	ldrb	r3, [r7, #15]
 800d6de:	4a07      	ldr	r2, [pc, #28]	; (800d6fc <disk_read+0x3c>)
 800d6e0:	4413      	add	r3, r2
 800d6e2:	7a18      	ldrb	r0, [r3, #8]
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	687a      	ldr	r2, [r7, #4]
 800d6e8:	68b9      	ldr	r1, [r7, #8]
 800d6ea:	47a0      	blx	r4
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	75fb      	strb	r3, [r7, #23]
  return res;
 800d6f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	371c      	adds	r7, #28
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	bd90      	pop	{r4, r7, pc}
 800d6fa:	bf00      	nop
 800d6fc:	20000860 	.word	0x20000860

0800d700 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d700:	b590      	push	{r4, r7, lr}
 800d702:	b087      	sub	sp, #28
 800d704:	af00      	add	r7, sp, #0
 800d706:	60b9      	str	r1, [r7, #8]
 800d708:	607a      	str	r2, [r7, #4]
 800d70a:	603b      	str	r3, [r7, #0]
 800d70c:	4603      	mov	r3, r0
 800d70e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d710:	7bfb      	ldrb	r3, [r7, #15]
 800d712:	4a0a      	ldr	r2, [pc, #40]	; (800d73c <disk_write+0x3c>)
 800d714:	009b      	lsls	r3, r3, #2
 800d716:	4413      	add	r3, r2
 800d718:	685b      	ldr	r3, [r3, #4]
 800d71a:	68dc      	ldr	r4, [r3, #12]
 800d71c:	7bfb      	ldrb	r3, [r7, #15]
 800d71e:	4a07      	ldr	r2, [pc, #28]	; (800d73c <disk_write+0x3c>)
 800d720:	4413      	add	r3, r2
 800d722:	7a18      	ldrb	r0, [r3, #8]
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	687a      	ldr	r2, [r7, #4]
 800d728:	68b9      	ldr	r1, [r7, #8]
 800d72a:	47a0      	blx	r4
 800d72c:	4603      	mov	r3, r0
 800d72e:	75fb      	strb	r3, [r7, #23]
  return res;
 800d730:	7dfb      	ldrb	r3, [r7, #23]
}
 800d732:	4618      	mov	r0, r3
 800d734:	371c      	adds	r7, #28
 800d736:	46bd      	mov	sp, r7
 800d738:	bd90      	pop	{r4, r7, pc}
 800d73a:	bf00      	nop
 800d73c:	20000860 	.word	0x20000860

0800d740 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b084      	sub	sp, #16
 800d744:	af00      	add	r7, sp, #0
 800d746:	4603      	mov	r3, r0
 800d748:	603a      	str	r2, [r7, #0]
 800d74a:	71fb      	strb	r3, [r7, #7]
 800d74c:	460b      	mov	r3, r1
 800d74e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d750:	79fb      	ldrb	r3, [r7, #7]
 800d752:	4a09      	ldr	r2, [pc, #36]	; (800d778 <disk_ioctl+0x38>)
 800d754:	009b      	lsls	r3, r3, #2
 800d756:	4413      	add	r3, r2
 800d758:	685b      	ldr	r3, [r3, #4]
 800d75a:	691b      	ldr	r3, [r3, #16]
 800d75c:	79fa      	ldrb	r2, [r7, #7]
 800d75e:	4906      	ldr	r1, [pc, #24]	; (800d778 <disk_ioctl+0x38>)
 800d760:	440a      	add	r2, r1
 800d762:	7a10      	ldrb	r0, [r2, #8]
 800d764:	79b9      	ldrb	r1, [r7, #6]
 800d766:	683a      	ldr	r2, [r7, #0]
 800d768:	4798      	blx	r3
 800d76a:	4603      	mov	r3, r0
 800d76c:	73fb      	strb	r3, [r7, #15]
  return res;
 800d76e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d770:	4618      	mov	r0, r3
 800d772:	3710      	adds	r7, #16
 800d774:	46bd      	mov	sp, r7
 800d776:	bd80      	pop	{r7, pc}
 800d778:	20000860 	.word	0x20000860

0800d77c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d77c:	b480      	push	{r7}
 800d77e:	b085      	sub	sp, #20
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	3301      	adds	r3, #1
 800d788:	781b      	ldrb	r3, [r3, #0]
 800d78a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d78c:	89fb      	ldrh	r3, [r7, #14]
 800d78e:	021b      	lsls	r3, r3, #8
 800d790:	b21a      	sxth	r2, r3
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	781b      	ldrb	r3, [r3, #0]
 800d796:	b21b      	sxth	r3, r3
 800d798:	4313      	orrs	r3, r2
 800d79a:	b21b      	sxth	r3, r3
 800d79c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d79e:	89fb      	ldrh	r3, [r7, #14]
}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3714      	adds	r7, #20
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7aa:	4770      	bx	lr

0800d7ac <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	b085      	sub	sp, #20
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	3303      	adds	r3, #3
 800d7b8:	781b      	ldrb	r3, [r3, #0]
 800d7ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	021b      	lsls	r3, r3, #8
 800d7c0:	687a      	ldr	r2, [r7, #4]
 800d7c2:	3202      	adds	r2, #2
 800d7c4:	7812      	ldrb	r2, [r2, #0]
 800d7c6:	4313      	orrs	r3, r2
 800d7c8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	021b      	lsls	r3, r3, #8
 800d7ce:	687a      	ldr	r2, [r7, #4]
 800d7d0:	3201      	adds	r2, #1
 800d7d2:	7812      	ldrb	r2, [r2, #0]
 800d7d4:	4313      	orrs	r3, r2
 800d7d6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	021b      	lsls	r3, r3, #8
 800d7dc:	687a      	ldr	r2, [r7, #4]
 800d7de:	7812      	ldrb	r2, [r2, #0]
 800d7e0:	4313      	orrs	r3, r2
 800d7e2:	60fb      	str	r3, [r7, #12]
	return rv;
 800d7e4:	68fb      	ldr	r3, [r7, #12]
}
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	3714      	adds	r7, #20
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f0:	4770      	bx	lr

0800d7f2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d7f2:	b480      	push	{r7}
 800d7f4:	b083      	sub	sp, #12
 800d7f6:	af00      	add	r7, sp, #0
 800d7f8:	6078      	str	r0, [r7, #4]
 800d7fa:	460b      	mov	r3, r1
 800d7fc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	1c5a      	adds	r2, r3, #1
 800d802:	607a      	str	r2, [r7, #4]
 800d804:	887a      	ldrh	r2, [r7, #2]
 800d806:	b2d2      	uxtb	r2, r2
 800d808:	701a      	strb	r2, [r3, #0]
 800d80a:	887b      	ldrh	r3, [r7, #2]
 800d80c:	0a1b      	lsrs	r3, r3, #8
 800d80e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	1c5a      	adds	r2, r3, #1
 800d814:	607a      	str	r2, [r7, #4]
 800d816:	887a      	ldrh	r2, [r7, #2]
 800d818:	b2d2      	uxtb	r2, r2
 800d81a:	701a      	strb	r2, [r3, #0]
}
 800d81c:	bf00      	nop
 800d81e:	370c      	adds	r7, #12
 800d820:	46bd      	mov	sp, r7
 800d822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d826:	4770      	bx	lr

0800d828 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d828:	b480      	push	{r7}
 800d82a:	b083      	sub	sp, #12
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
 800d830:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	1c5a      	adds	r2, r3, #1
 800d836:	607a      	str	r2, [r7, #4]
 800d838:	683a      	ldr	r2, [r7, #0]
 800d83a:	b2d2      	uxtb	r2, r2
 800d83c:	701a      	strb	r2, [r3, #0]
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	0a1b      	lsrs	r3, r3, #8
 800d842:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	1c5a      	adds	r2, r3, #1
 800d848:	607a      	str	r2, [r7, #4]
 800d84a:	683a      	ldr	r2, [r7, #0]
 800d84c:	b2d2      	uxtb	r2, r2
 800d84e:	701a      	strb	r2, [r3, #0]
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	0a1b      	lsrs	r3, r3, #8
 800d854:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	1c5a      	adds	r2, r3, #1
 800d85a:	607a      	str	r2, [r7, #4]
 800d85c:	683a      	ldr	r2, [r7, #0]
 800d85e:	b2d2      	uxtb	r2, r2
 800d860:	701a      	strb	r2, [r3, #0]
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	0a1b      	lsrs	r3, r3, #8
 800d866:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	1c5a      	adds	r2, r3, #1
 800d86c:	607a      	str	r2, [r7, #4]
 800d86e:	683a      	ldr	r2, [r7, #0]
 800d870:	b2d2      	uxtb	r2, r2
 800d872:	701a      	strb	r2, [r3, #0]
}
 800d874:	bf00      	nop
 800d876:	370c      	adds	r7, #12
 800d878:	46bd      	mov	sp, r7
 800d87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87e:	4770      	bx	lr

0800d880 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d880:	b480      	push	{r7}
 800d882:	b087      	sub	sp, #28
 800d884:	af00      	add	r7, sp, #0
 800d886:	60f8      	str	r0, [r7, #12]
 800d888:	60b9      	str	r1, [r7, #8]
 800d88a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d00d      	beq.n	800d8b6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d89a:	693a      	ldr	r2, [r7, #16]
 800d89c:	1c53      	adds	r3, r2, #1
 800d89e:	613b      	str	r3, [r7, #16]
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	1c59      	adds	r1, r3, #1
 800d8a4:	6179      	str	r1, [r7, #20]
 800d8a6:	7812      	ldrb	r2, [r2, #0]
 800d8a8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	3b01      	subs	r3, #1
 800d8ae:	607b      	str	r3, [r7, #4]
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d1f1      	bne.n	800d89a <mem_cpy+0x1a>
	}
}
 800d8b6:	bf00      	nop
 800d8b8:	371c      	adds	r7, #28
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c0:	4770      	bx	lr

0800d8c2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d8c2:	b480      	push	{r7}
 800d8c4:	b087      	sub	sp, #28
 800d8c6:	af00      	add	r7, sp, #0
 800d8c8:	60f8      	str	r0, [r7, #12]
 800d8ca:	60b9      	str	r1, [r7, #8]
 800d8cc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d8d2:	697b      	ldr	r3, [r7, #20]
 800d8d4:	1c5a      	adds	r2, r3, #1
 800d8d6:	617a      	str	r2, [r7, #20]
 800d8d8:	68ba      	ldr	r2, [r7, #8]
 800d8da:	b2d2      	uxtb	r2, r2
 800d8dc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	3b01      	subs	r3, #1
 800d8e2:	607b      	str	r3, [r7, #4]
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d1f3      	bne.n	800d8d2 <mem_set+0x10>
}
 800d8ea:	bf00      	nop
 800d8ec:	371c      	adds	r7, #28
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f4:	4770      	bx	lr

0800d8f6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d8f6:	b480      	push	{r7}
 800d8f8:	b089      	sub	sp, #36	; 0x24
 800d8fa:	af00      	add	r7, sp, #0
 800d8fc:	60f8      	str	r0, [r7, #12]
 800d8fe:	60b9      	str	r1, [r7, #8]
 800d900:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	61fb      	str	r3, [r7, #28]
 800d906:	68bb      	ldr	r3, [r7, #8]
 800d908:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d90a:	2300      	movs	r3, #0
 800d90c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d90e:	69fb      	ldr	r3, [r7, #28]
 800d910:	1c5a      	adds	r2, r3, #1
 800d912:	61fa      	str	r2, [r7, #28]
 800d914:	781b      	ldrb	r3, [r3, #0]
 800d916:	4619      	mov	r1, r3
 800d918:	69bb      	ldr	r3, [r7, #24]
 800d91a:	1c5a      	adds	r2, r3, #1
 800d91c:	61ba      	str	r2, [r7, #24]
 800d91e:	781b      	ldrb	r3, [r3, #0]
 800d920:	1acb      	subs	r3, r1, r3
 800d922:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	3b01      	subs	r3, #1
 800d928:	607b      	str	r3, [r7, #4]
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d002      	beq.n	800d936 <mem_cmp+0x40>
 800d930:	697b      	ldr	r3, [r7, #20]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d0eb      	beq.n	800d90e <mem_cmp+0x18>

	return r;
 800d936:	697b      	ldr	r3, [r7, #20]
}
 800d938:	4618      	mov	r0, r3
 800d93a:	3724      	adds	r7, #36	; 0x24
 800d93c:	46bd      	mov	sp, r7
 800d93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d942:	4770      	bx	lr

0800d944 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d944:	b480      	push	{r7}
 800d946:	b083      	sub	sp, #12
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d94e:	e002      	b.n	800d956 <chk_chr+0x12>
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	3301      	adds	r3, #1
 800d954:	607b      	str	r3, [r7, #4]
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	781b      	ldrb	r3, [r3, #0]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d005      	beq.n	800d96a <chk_chr+0x26>
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	781b      	ldrb	r3, [r3, #0]
 800d962:	461a      	mov	r2, r3
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	4293      	cmp	r3, r2
 800d968:	d1f2      	bne.n	800d950 <chk_chr+0xc>
	return *str;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	781b      	ldrb	r3, [r3, #0]
}
 800d96e:	4618      	mov	r0, r3
 800d970:	370c      	adds	r7, #12
 800d972:	46bd      	mov	sp, r7
 800d974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d978:	4770      	bx	lr
	...

0800d97c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d97c:	b480      	push	{r7}
 800d97e:	b085      	sub	sp, #20
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
 800d984:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d986:	2300      	movs	r3, #0
 800d988:	60bb      	str	r3, [r7, #8]
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	60fb      	str	r3, [r7, #12]
 800d98e:	e029      	b.n	800d9e4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d990:	4a27      	ldr	r2, [pc, #156]	; (800da30 <chk_lock+0xb4>)
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	011b      	lsls	r3, r3, #4
 800d996:	4413      	add	r3, r2
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d01d      	beq.n	800d9da <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d99e:	4a24      	ldr	r2, [pc, #144]	; (800da30 <chk_lock+0xb4>)
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	011b      	lsls	r3, r3, #4
 800d9a4:	4413      	add	r3, r2
 800d9a6:	681a      	ldr	r2, [r3, #0]
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	429a      	cmp	r2, r3
 800d9ae:	d116      	bne.n	800d9de <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d9b0:	4a1f      	ldr	r2, [pc, #124]	; (800da30 <chk_lock+0xb4>)
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	011b      	lsls	r3, r3, #4
 800d9b6:	4413      	add	r3, r2
 800d9b8:	3304      	adds	r3, #4
 800d9ba:	681a      	ldr	r2, [r3, #0]
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d9c0:	429a      	cmp	r2, r3
 800d9c2:	d10c      	bne.n	800d9de <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d9c4:	4a1a      	ldr	r2, [pc, #104]	; (800da30 <chk_lock+0xb4>)
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	011b      	lsls	r3, r3, #4
 800d9ca:	4413      	add	r3, r2
 800d9cc:	3308      	adds	r3, #8
 800d9ce:	681a      	ldr	r2, [r3, #0]
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d9d4:	429a      	cmp	r2, r3
 800d9d6:	d102      	bne.n	800d9de <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d9d8:	e007      	b.n	800d9ea <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d9da:	2301      	movs	r3, #1
 800d9dc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	3301      	adds	r3, #1
 800d9e2:	60fb      	str	r3, [r7, #12]
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	2b01      	cmp	r3, #1
 800d9e8:	d9d2      	bls.n	800d990 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	2b02      	cmp	r3, #2
 800d9ee:	d109      	bne.n	800da04 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d9f0:	68bb      	ldr	r3, [r7, #8]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d102      	bne.n	800d9fc <chk_lock+0x80>
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	2b02      	cmp	r3, #2
 800d9fa:	d101      	bne.n	800da00 <chk_lock+0x84>
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	e010      	b.n	800da22 <chk_lock+0xa6>
 800da00:	2312      	movs	r3, #18
 800da02:	e00e      	b.n	800da22 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d108      	bne.n	800da1c <chk_lock+0xa0>
 800da0a:	4a09      	ldr	r2, [pc, #36]	; (800da30 <chk_lock+0xb4>)
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	011b      	lsls	r3, r3, #4
 800da10:	4413      	add	r3, r2
 800da12:	330c      	adds	r3, #12
 800da14:	881b      	ldrh	r3, [r3, #0]
 800da16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800da1a:	d101      	bne.n	800da20 <chk_lock+0xa4>
 800da1c:	2310      	movs	r3, #16
 800da1e:	e000      	b.n	800da22 <chk_lock+0xa6>
 800da20:	2300      	movs	r3, #0
}
 800da22:	4618      	mov	r0, r3
 800da24:	3714      	adds	r7, #20
 800da26:	46bd      	mov	sp, r7
 800da28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2c:	4770      	bx	lr
 800da2e:	bf00      	nop
 800da30:	20000840 	.word	0x20000840

0800da34 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800da34:	b480      	push	{r7}
 800da36:	b083      	sub	sp, #12
 800da38:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800da3a:	2300      	movs	r3, #0
 800da3c:	607b      	str	r3, [r7, #4]
 800da3e:	e002      	b.n	800da46 <enq_lock+0x12>
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	3301      	adds	r3, #1
 800da44:	607b      	str	r3, [r7, #4]
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	2b01      	cmp	r3, #1
 800da4a:	d806      	bhi.n	800da5a <enq_lock+0x26>
 800da4c:	4a09      	ldr	r2, [pc, #36]	; (800da74 <enq_lock+0x40>)
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	011b      	lsls	r3, r3, #4
 800da52:	4413      	add	r3, r2
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d1f2      	bne.n	800da40 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2b02      	cmp	r3, #2
 800da5e:	bf14      	ite	ne
 800da60:	2301      	movne	r3, #1
 800da62:	2300      	moveq	r3, #0
 800da64:	b2db      	uxtb	r3, r3
}
 800da66:	4618      	mov	r0, r3
 800da68:	370c      	adds	r7, #12
 800da6a:	46bd      	mov	sp, r7
 800da6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da70:	4770      	bx	lr
 800da72:	bf00      	nop
 800da74:	20000840 	.word	0x20000840

0800da78 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800da78:	b480      	push	{r7}
 800da7a:	b085      	sub	sp, #20
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
 800da80:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800da82:	2300      	movs	r3, #0
 800da84:	60fb      	str	r3, [r7, #12]
 800da86:	e01f      	b.n	800dac8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800da88:	4a41      	ldr	r2, [pc, #260]	; (800db90 <inc_lock+0x118>)
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	011b      	lsls	r3, r3, #4
 800da8e:	4413      	add	r3, r2
 800da90:	681a      	ldr	r2, [r3, #0]
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	429a      	cmp	r2, r3
 800da98:	d113      	bne.n	800dac2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800da9a:	4a3d      	ldr	r2, [pc, #244]	; (800db90 <inc_lock+0x118>)
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	011b      	lsls	r3, r3, #4
 800daa0:	4413      	add	r3, r2
 800daa2:	3304      	adds	r3, #4
 800daa4:	681a      	ldr	r2, [r3, #0]
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800daaa:	429a      	cmp	r2, r3
 800daac:	d109      	bne.n	800dac2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800daae:	4a38      	ldr	r2, [pc, #224]	; (800db90 <inc_lock+0x118>)
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	011b      	lsls	r3, r3, #4
 800dab4:	4413      	add	r3, r2
 800dab6:	3308      	adds	r3, #8
 800dab8:	681a      	ldr	r2, [r3, #0]
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800dabe:	429a      	cmp	r2, r3
 800dac0:	d006      	beq.n	800dad0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	3301      	adds	r3, #1
 800dac6:	60fb      	str	r3, [r7, #12]
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	2b01      	cmp	r3, #1
 800dacc:	d9dc      	bls.n	800da88 <inc_lock+0x10>
 800dace:	e000      	b.n	800dad2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800dad0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	2b02      	cmp	r3, #2
 800dad6:	d132      	bne.n	800db3e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800dad8:	2300      	movs	r3, #0
 800dada:	60fb      	str	r3, [r7, #12]
 800dadc:	e002      	b.n	800dae4 <inc_lock+0x6c>
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	3301      	adds	r3, #1
 800dae2:	60fb      	str	r3, [r7, #12]
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	2b01      	cmp	r3, #1
 800dae8:	d806      	bhi.n	800daf8 <inc_lock+0x80>
 800daea:	4a29      	ldr	r2, [pc, #164]	; (800db90 <inc_lock+0x118>)
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	011b      	lsls	r3, r3, #4
 800daf0:	4413      	add	r3, r2
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d1f2      	bne.n	800dade <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	2b02      	cmp	r3, #2
 800dafc:	d101      	bne.n	800db02 <inc_lock+0x8a>
 800dafe:	2300      	movs	r3, #0
 800db00:	e040      	b.n	800db84 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681a      	ldr	r2, [r3, #0]
 800db06:	4922      	ldr	r1, [pc, #136]	; (800db90 <inc_lock+0x118>)
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	011b      	lsls	r3, r3, #4
 800db0c:	440b      	add	r3, r1
 800db0e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	689a      	ldr	r2, [r3, #8]
 800db14:	491e      	ldr	r1, [pc, #120]	; (800db90 <inc_lock+0x118>)
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	011b      	lsls	r3, r3, #4
 800db1a:	440b      	add	r3, r1
 800db1c:	3304      	adds	r3, #4
 800db1e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	695a      	ldr	r2, [r3, #20]
 800db24:	491a      	ldr	r1, [pc, #104]	; (800db90 <inc_lock+0x118>)
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	011b      	lsls	r3, r3, #4
 800db2a:	440b      	add	r3, r1
 800db2c:	3308      	adds	r3, #8
 800db2e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800db30:	4a17      	ldr	r2, [pc, #92]	; (800db90 <inc_lock+0x118>)
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	011b      	lsls	r3, r3, #4
 800db36:	4413      	add	r3, r2
 800db38:	330c      	adds	r3, #12
 800db3a:	2200      	movs	r2, #0
 800db3c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d009      	beq.n	800db58 <inc_lock+0xe0>
 800db44:	4a12      	ldr	r2, [pc, #72]	; (800db90 <inc_lock+0x118>)
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	011b      	lsls	r3, r3, #4
 800db4a:	4413      	add	r3, r2
 800db4c:	330c      	adds	r3, #12
 800db4e:	881b      	ldrh	r3, [r3, #0]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d001      	beq.n	800db58 <inc_lock+0xe0>
 800db54:	2300      	movs	r3, #0
 800db56:	e015      	b.n	800db84 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d108      	bne.n	800db70 <inc_lock+0xf8>
 800db5e:	4a0c      	ldr	r2, [pc, #48]	; (800db90 <inc_lock+0x118>)
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	011b      	lsls	r3, r3, #4
 800db64:	4413      	add	r3, r2
 800db66:	330c      	adds	r3, #12
 800db68:	881b      	ldrh	r3, [r3, #0]
 800db6a:	3301      	adds	r3, #1
 800db6c:	b29a      	uxth	r2, r3
 800db6e:	e001      	b.n	800db74 <inc_lock+0xfc>
 800db70:	f44f 7280 	mov.w	r2, #256	; 0x100
 800db74:	4906      	ldr	r1, [pc, #24]	; (800db90 <inc_lock+0x118>)
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	011b      	lsls	r3, r3, #4
 800db7a:	440b      	add	r3, r1
 800db7c:	330c      	adds	r3, #12
 800db7e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	3301      	adds	r3, #1
}
 800db84:	4618      	mov	r0, r3
 800db86:	3714      	adds	r7, #20
 800db88:	46bd      	mov	sp, r7
 800db8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8e:	4770      	bx	lr
 800db90:	20000840 	.word	0x20000840

0800db94 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800db94:	b480      	push	{r7}
 800db96:	b085      	sub	sp, #20
 800db98:	af00      	add	r7, sp, #0
 800db9a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	3b01      	subs	r3, #1
 800dba0:	607b      	str	r3, [r7, #4]
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	2b01      	cmp	r3, #1
 800dba6:	d825      	bhi.n	800dbf4 <dec_lock+0x60>
		n = Files[i].ctr;
 800dba8:	4a17      	ldr	r2, [pc, #92]	; (800dc08 <dec_lock+0x74>)
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	011b      	lsls	r3, r3, #4
 800dbae:	4413      	add	r3, r2
 800dbb0:	330c      	adds	r3, #12
 800dbb2:	881b      	ldrh	r3, [r3, #0]
 800dbb4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800dbb6:	89fb      	ldrh	r3, [r7, #14]
 800dbb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dbbc:	d101      	bne.n	800dbc2 <dec_lock+0x2e>
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800dbc2:	89fb      	ldrh	r3, [r7, #14]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d002      	beq.n	800dbce <dec_lock+0x3a>
 800dbc8:	89fb      	ldrh	r3, [r7, #14]
 800dbca:	3b01      	subs	r3, #1
 800dbcc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800dbce:	4a0e      	ldr	r2, [pc, #56]	; (800dc08 <dec_lock+0x74>)
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	011b      	lsls	r3, r3, #4
 800dbd4:	4413      	add	r3, r2
 800dbd6:	330c      	adds	r3, #12
 800dbd8:	89fa      	ldrh	r2, [r7, #14]
 800dbda:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800dbdc:	89fb      	ldrh	r3, [r7, #14]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d105      	bne.n	800dbee <dec_lock+0x5a>
 800dbe2:	4a09      	ldr	r2, [pc, #36]	; (800dc08 <dec_lock+0x74>)
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	011b      	lsls	r3, r3, #4
 800dbe8:	4413      	add	r3, r2
 800dbea:	2200      	movs	r2, #0
 800dbec:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	737b      	strb	r3, [r7, #13]
 800dbf2:	e001      	b.n	800dbf8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800dbf4:	2302      	movs	r3, #2
 800dbf6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800dbf8:	7b7b      	ldrb	r3, [r7, #13]
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	3714      	adds	r7, #20
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc04:	4770      	bx	lr
 800dc06:	bf00      	nop
 800dc08:	20000840 	.word	0x20000840

0800dc0c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800dc0c:	b480      	push	{r7}
 800dc0e:	b085      	sub	sp, #20
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800dc14:	2300      	movs	r3, #0
 800dc16:	60fb      	str	r3, [r7, #12]
 800dc18:	e010      	b.n	800dc3c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800dc1a:	4a0d      	ldr	r2, [pc, #52]	; (800dc50 <clear_lock+0x44>)
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	011b      	lsls	r3, r3, #4
 800dc20:	4413      	add	r3, r2
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	687a      	ldr	r2, [r7, #4]
 800dc26:	429a      	cmp	r2, r3
 800dc28:	d105      	bne.n	800dc36 <clear_lock+0x2a>
 800dc2a:	4a09      	ldr	r2, [pc, #36]	; (800dc50 <clear_lock+0x44>)
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	011b      	lsls	r3, r3, #4
 800dc30:	4413      	add	r3, r2
 800dc32:	2200      	movs	r2, #0
 800dc34:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	3301      	adds	r3, #1
 800dc3a:	60fb      	str	r3, [r7, #12]
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	2b01      	cmp	r3, #1
 800dc40:	d9eb      	bls.n	800dc1a <clear_lock+0xe>
	}
}
 800dc42:	bf00      	nop
 800dc44:	3714      	adds	r7, #20
 800dc46:	46bd      	mov	sp, r7
 800dc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4c:	4770      	bx	lr
 800dc4e:	bf00      	nop
 800dc50:	20000840 	.word	0x20000840

0800dc54 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b086      	sub	sp, #24
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	78db      	ldrb	r3, [r3, #3]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d034      	beq.n	800dcd2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc6c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	7858      	ldrb	r0, [r3, #1]
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dc78:	2301      	movs	r3, #1
 800dc7a:	697a      	ldr	r2, [r7, #20]
 800dc7c:	f7ff fd40 	bl	800d700 <disk_write>
 800dc80:	4603      	mov	r3, r0
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d002      	beq.n	800dc8c <sync_window+0x38>
			res = FR_DISK_ERR;
 800dc86:	2301      	movs	r3, #1
 800dc88:	73fb      	strb	r3, [r7, #15]
 800dc8a:	e022      	b.n	800dcd2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2200      	movs	r2, #0
 800dc90:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc96:	697a      	ldr	r2, [r7, #20]
 800dc98:	1ad2      	subs	r2, r2, r3
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	69db      	ldr	r3, [r3, #28]
 800dc9e:	429a      	cmp	r2, r3
 800dca0:	d217      	bcs.n	800dcd2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	789b      	ldrb	r3, [r3, #2]
 800dca6:	613b      	str	r3, [r7, #16]
 800dca8:	e010      	b.n	800dccc <sync_window+0x78>
					wsect += fs->fsize;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	69db      	ldr	r3, [r3, #28]
 800dcae:	697a      	ldr	r2, [r7, #20]
 800dcb0:	4413      	add	r3, r2
 800dcb2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	7858      	ldrb	r0, [r3, #1]
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dcbe:	2301      	movs	r3, #1
 800dcc0:	697a      	ldr	r2, [r7, #20]
 800dcc2:	f7ff fd1d 	bl	800d700 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dcc6:	693b      	ldr	r3, [r7, #16]
 800dcc8:	3b01      	subs	r3, #1
 800dcca:	613b      	str	r3, [r7, #16]
 800dccc:	693b      	ldr	r3, [r7, #16]
 800dcce:	2b01      	cmp	r3, #1
 800dcd0:	d8eb      	bhi.n	800dcaa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800dcd2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	3718      	adds	r7, #24
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd80      	pop	{r7, pc}

0800dcdc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b084      	sub	sp, #16
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
 800dce4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800dce6:	2300      	movs	r3, #0
 800dce8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcee:	683a      	ldr	r2, [r7, #0]
 800dcf0:	429a      	cmp	r2, r3
 800dcf2:	d01b      	beq.n	800dd2c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	f7ff ffad 	bl	800dc54 <sync_window>
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800dcfe:	7bfb      	ldrb	r3, [r7, #15]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d113      	bne.n	800dd2c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	7858      	ldrb	r0, [r3, #1]
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dd0e:	2301      	movs	r3, #1
 800dd10:	683a      	ldr	r2, [r7, #0]
 800dd12:	f7ff fcd5 	bl	800d6c0 <disk_read>
 800dd16:	4603      	mov	r3, r0
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d004      	beq.n	800dd26 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800dd1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dd20:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800dd22:	2301      	movs	r3, #1
 800dd24:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	683a      	ldr	r2, [r7, #0]
 800dd2a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800dd2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd2e:	4618      	mov	r0, r3
 800dd30:	3710      	adds	r7, #16
 800dd32:	46bd      	mov	sp, r7
 800dd34:	bd80      	pop	{r7, pc}
	...

0800dd38 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	b084      	sub	sp, #16
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800dd40:	6878      	ldr	r0, [r7, #4]
 800dd42:	f7ff ff87 	bl	800dc54 <sync_window>
 800dd46:	4603      	mov	r3, r0
 800dd48:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800dd4a:	7bfb      	ldrb	r3, [r7, #15]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d159      	bne.n	800de04 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	781b      	ldrb	r3, [r3, #0]
 800dd54:	2b03      	cmp	r3, #3
 800dd56:	d149      	bne.n	800ddec <sync_fs+0xb4>
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	791b      	ldrb	r3, [r3, #4]
 800dd5c:	2b01      	cmp	r3, #1
 800dd5e:	d145      	bne.n	800ddec <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	899b      	ldrh	r3, [r3, #12]
 800dd6a:	461a      	mov	r2, r3
 800dd6c:	2100      	movs	r1, #0
 800dd6e:	f7ff fda8 	bl	800d8c2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	3334      	adds	r3, #52	; 0x34
 800dd76:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dd7a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f7ff fd37 	bl	800d7f2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	3334      	adds	r3, #52	; 0x34
 800dd88:	4921      	ldr	r1, [pc, #132]	; (800de10 <sync_fs+0xd8>)
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	f7ff fd4c 	bl	800d828 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	3334      	adds	r3, #52	; 0x34
 800dd94:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800dd98:	491e      	ldr	r1, [pc, #120]	; (800de14 <sync_fs+0xdc>)
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	f7ff fd44 	bl	800d828 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	3334      	adds	r3, #52	; 0x34
 800dda4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	695b      	ldr	r3, [r3, #20]
 800ddac:	4619      	mov	r1, r3
 800ddae:	4610      	mov	r0, r2
 800ddb0:	f7ff fd3a 	bl	800d828 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	3334      	adds	r3, #52	; 0x34
 800ddb8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	691b      	ldr	r3, [r3, #16]
 800ddc0:	4619      	mov	r1, r3
 800ddc2:	4610      	mov	r0, r2
 800ddc4:	f7ff fd30 	bl	800d828 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	6a1b      	ldr	r3, [r3, #32]
 800ddcc:	1c5a      	adds	r2, r3, #1
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	7858      	ldrb	r0, [r3, #1]
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dde0:	2301      	movs	r3, #1
 800dde2:	f7ff fc8d 	bl	800d700 <disk_write>
			fs->fsi_flag = 0;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2200      	movs	r2, #0
 800ddea:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	785b      	ldrb	r3, [r3, #1]
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	2100      	movs	r1, #0
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f7ff fca3 	bl	800d740 <disk_ioctl>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d001      	beq.n	800de04 <sync_fs+0xcc>
 800de00:	2301      	movs	r3, #1
 800de02:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800de04:	7bfb      	ldrb	r3, [r7, #15]
}
 800de06:	4618      	mov	r0, r3
 800de08:	3710      	adds	r7, #16
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd80      	pop	{r7, pc}
 800de0e:	bf00      	nop
 800de10:	41615252 	.word	0x41615252
 800de14:	61417272 	.word	0x61417272

0800de18 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800de18:	b480      	push	{r7}
 800de1a:	b083      	sub	sp, #12
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
 800de20:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	3b02      	subs	r3, #2
 800de26:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	699b      	ldr	r3, [r3, #24]
 800de2c:	3b02      	subs	r3, #2
 800de2e:	683a      	ldr	r2, [r7, #0]
 800de30:	429a      	cmp	r2, r3
 800de32:	d301      	bcc.n	800de38 <clust2sect+0x20>
 800de34:	2300      	movs	r3, #0
 800de36:	e008      	b.n	800de4a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	895b      	ldrh	r3, [r3, #10]
 800de3c:	461a      	mov	r2, r3
 800de3e:	683b      	ldr	r3, [r7, #0]
 800de40:	fb03 f202 	mul.w	r2, r3, r2
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de48:	4413      	add	r3, r2
}
 800de4a:	4618      	mov	r0, r3
 800de4c:	370c      	adds	r7, #12
 800de4e:	46bd      	mov	sp, r7
 800de50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de54:	4770      	bx	lr

0800de56 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800de56:	b580      	push	{r7, lr}
 800de58:	b086      	sub	sp, #24
 800de5a:	af00      	add	r7, sp, #0
 800de5c:	6078      	str	r0, [r7, #4]
 800de5e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800de66:	683b      	ldr	r3, [r7, #0]
 800de68:	2b01      	cmp	r3, #1
 800de6a:	d904      	bls.n	800de76 <get_fat+0x20>
 800de6c:	693b      	ldr	r3, [r7, #16]
 800de6e:	699b      	ldr	r3, [r3, #24]
 800de70:	683a      	ldr	r2, [r7, #0]
 800de72:	429a      	cmp	r2, r3
 800de74:	d302      	bcc.n	800de7c <get_fat+0x26>
		val = 1;	/* Internal error */
 800de76:	2301      	movs	r3, #1
 800de78:	617b      	str	r3, [r7, #20]
 800de7a:	e0b7      	b.n	800dfec <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800de7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800de80:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800de82:	693b      	ldr	r3, [r7, #16]
 800de84:	781b      	ldrb	r3, [r3, #0]
 800de86:	2b02      	cmp	r3, #2
 800de88:	d05a      	beq.n	800df40 <get_fat+0xea>
 800de8a:	2b03      	cmp	r3, #3
 800de8c:	d07d      	beq.n	800df8a <get_fat+0x134>
 800de8e:	2b01      	cmp	r3, #1
 800de90:	f040 80a2 	bne.w	800dfd8 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	60fb      	str	r3, [r7, #12]
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	085b      	lsrs	r3, r3, #1
 800de9c:	68fa      	ldr	r2, [r7, #12]
 800de9e:	4413      	add	r3, r2
 800dea0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dea2:	693b      	ldr	r3, [r7, #16]
 800dea4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dea6:	693b      	ldr	r3, [r7, #16]
 800dea8:	899b      	ldrh	r3, [r3, #12]
 800deaa:	4619      	mov	r1, r3
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	fbb3 f3f1 	udiv	r3, r3, r1
 800deb2:	4413      	add	r3, r2
 800deb4:	4619      	mov	r1, r3
 800deb6:	6938      	ldr	r0, [r7, #16]
 800deb8:	f7ff ff10 	bl	800dcdc <move_window>
 800debc:	4603      	mov	r3, r0
 800debe:	2b00      	cmp	r3, #0
 800dec0:	f040 808d 	bne.w	800dfde <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	1c5a      	adds	r2, r3, #1
 800dec8:	60fa      	str	r2, [r7, #12]
 800deca:	693a      	ldr	r2, [r7, #16]
 800decc:	8992      	ldrh	r2, [r2, #12]
 800dece:	fbb3 f1f2 	udiv	r1, r3, r2
 800ded2:	fb02 f201 	mul.w	r2, r2, r1
 800ded6:	1a9b      	subs	r3, r3, r2
 800ded8:	693a      	ldr	r2, [r7, #16]
 800deda:	4413      	add	r3, r2
 800dedc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dee0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dee2:	693b      	ldr	r3, [r7, #16]
 800dee4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dee6:	693b      	ldr	r3, [r7, #16]
 800dee8:	899b      	ldrh	r3, [r3, #12]
 800deea:	4619      	mov	r1, r3
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	fbb3 f3f1 	udiv	r3, r3, r1
 800def2:	4413      	add	r3, r2
 800def4:	4619      	mov	r1, r3
 800def6:	6938      	ldr	r0, [r7, #16]
 800def8:	f7ff fef0 	bl	800dcdc <move_window>
 800defc:	4603      	mov	r3, r0
 800defe:	2b00      	cmp	r3, #0
 800df00:	d16f      	bne.n	800dfe2 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800df02:	693b      	ldr	r3, [r7, #16]
 800df04:	899b      	ldrh	r3, [r3, #12]
 800df06:	461a      	mov	r2, r3
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	fbb3 f1f2 	udiv	r1, r3, r2
 800df0e:	fb02 f201 	mul.w	r2, r2, r1
 800df12:	1a9b      	subs	r3, r3, r2
 800df14:	693a      	ldr	r2, [r7, #16]
 800df16:	4413      	add	r3, r2
 800df18:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800df1c:	021b      	lsls	r3, r3, #8
 800df1e:	461a      	mov	r2, r3
 800df20:	68bb      	ldr	r3, [r7, #8]
 800df22:	4313      	orrs	r3, r2
 800df24:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	f003 0301 	and.w	r3, r3, #1
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d002      	beq.n	800df36 <get_fat+0xe0>
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	091b      	lsrs	r3, r3, #4
 800df34:	e002      	b.n	800df3c <get_fat+0xe6>
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800df3c:	617b      	str	r3, [r7, #20]
			break;
 800df3e:	e055      	b.n	800dfec <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800df40:	693b      	ldr	r3, [r7, #16]
 800df42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df44:	693b      	ldr	r3, [r7, #16]
 800df46:	899b      	ldrh	r3, [r3, #12]
 800df48:	085b      	lsrs	r3, r3, #1
 800df4a:	b29b      	uxth	r3, r3
 800df4c:	4619      	mov	r1, r3
 800df4e:	683b      	ldr	r3, [r7, #0]
 800df50:	fbb3 f3f1 	udiv	r3, r3, r1
 800df54:	4413      	add	r3, r2
 800df56:	4619      	mov	r1, r3
 800df58:	6938      	ldr	r0, [r7, #16]
 800df5a:	f7ff febf 	bl	800dcdc <move_window>
 800df5e:	4603      	mov	r3, r0
 800df60:	2b00      	cmp	r3, #0
 800df62:	d140      	bne.n	800dfe6 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800df64:	693b      	ldr	r3, [r7, #16]
 800df66:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800df6a:	683b      	ldr	r3, [r7, #0]
 800df6c:	005b      	lsls	r3, r3, #1
 800df6e:	693a      	ldr	r2, [r7, #16]
 800df70:	8992      	ldrh	r2, [r2, #12]
 800df72:	fbb3 f0f2 	udiv	r0, r3, r2
 800df76:	fb02 f200 	mul.w	r2, r2, r0
 800df7a:	1a9b      	subs	r3, r3, r2
 800df7c:	440b      	add	r3, r1
 800df7e:	4618      	mov	r0, r3
 800df80:	f7ff fbfc 	bl	800d77c <ld_word>
 800df84:	4603      	mov	r3, r0
 800df86:	617b      	str	r3, [r7, #20]
			break;
 800df88:	e030      	b.n	800dfec <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800df8a:	693b      	ldr	r3, [r7, #16]
 800df8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800df8e:	693b      	ldr	r3, [r7, #16]
 800df90:	899b      	ldrh	r3, [r3, #12]
 800df92:	089b      	lsrs	r3, r3, #2
 800df94:	b29b      	uxth	r3, r3
 800df96:	4619      	mov	r1, r3
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	fbb3 f3f1 	udiv	r3, r3, r1
 800df9e:	4413      	add	r3, r2
 800dfa0:	4619      	mov	r1, r3
 800dfa2:	6938      	ldr	r0, [r7, #16]
 800dfa4:	f7ff fe9a 	bl	800dcdc <move_window>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d11d      	bne.n	800dfea <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800dfae:	693b      	ldr	r3, [r7, #16]
 800dfb0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	009b      	lsls	r3, r3, #2
 800dfb8:	693a      	ldr	r2, [r7, #16]
 800dfba:	8992      	ldrh	r2, [r2, #12]
 800dfbc:	fbb3 f0f2 	udiv	r0, r3, r2
 800dfc0:	fb02 f200 	mul.w	r2, r2, r0
 800dfc4:	1a9b      	subs	r3, r3, r2
 800dfc6:	440b      	add	r3, r1
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f7ff fbef 	bl	800d7ac <ld_dword>
 800dfce:	4603      	mov	r3, r0
 800dfd0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800dfd4:	617b      	str	r3, [r7, #20]
			break;
 800dfd6:	e009      	b.n	800dfec <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800dfd8:	2301      	movs	r3, #1
 800dfda:	617b      	str	r3, [r7, #20]
 800dfdc:	e006      	b.n	800dfec <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dfde:	bf00      	nop
 800dfe0:	e004      	b.n	800dfec <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dfe2:	bf00      	nop
 800dfe4:	e002      	b.n	800dfec <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dfe6:	bf00      	nop
 800dfe8:	e000      	b.n	800dfec <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dfea:	bf00      	nop
		}
	}

	return val;
 800dfec:	697b      	ldr	r3, [r7, #20]
}
 800dfee:	4618      	mov	r0, r3
 800dff0:	3718      	adds	r7, #24
 800dff2:	46bd      	mov	sp, r7
 800dff4:	bd80      	pop	{r7, pc}

0800dff6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800dff6:	b590      	push	{r4, r7, lr}
 800dff8:	b089      	sub	sp, #36	; 0x24
 800dffa:	af00      	add	r7, sp, #0
 800dffc:	60f8      	str	r0, [r7, #12]
 800dffe:	60b9      	str	r1, [r7, #8]
 800e000:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e002:	2302      	movs	r3, #2
 800e004:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e006:	68bb      	ldr	r3, [r7, #8]
 800e008:	2b01      	cmp	r3, #1
 800e00a:	f240 8106 	bls.w	800e21a <put_fat+0x224>
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	699b      	ldr	r3, [r3, #24]
 800e012:	68ba      	ldr	r2, [r7, #8]
 800e014:	429a      	cmp	r2, r3
 800e016:	f080 8100 	bcs.w	800e21a <put_fat+0x224>
		switch (fs->fs_type) {
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	781b      	ldrb	r3, [r3, #0]
 800e01e:	2b02      	cmp	r3, #2
 800e020:	f000 8088 	beq.w	800e134 <put_fat+0x13e>
 800e024:	2b03      	cmp	r3, #3
 800e026:	f000 80b0 	beq.w	800e18a <put_fat+0x194>
 800e02a:	2b01      	cmp	r3, #1
 800e02c:	f040 80f5 	bne.w	800e21a <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e030:	68bb      	ldr	r3, [r7, #8]
 800e032:	61bb      	str	r3, [r7, #24]
 800e034:	69bb      	ldr	r3, [r7, #24]
 800e036:	085b      	lsrs	r3, r3, #1
 800e038:	69ba      	ldr	r2, [r7, #24]
 800e03a:	4413      	add	r3, r2
 800e03c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	899b      	ldrh	r3, [r3, #12]
 800e046:	4619      	mov	r1, r3
 800e048:	69bb      	ldr	r3, [r7, #24]
 800e04a:	fbb3 f3f1 	udiv	r3, r3, r1
 800e04e:	4413      	add	r3, r2
 800e050:	4619      	mov	r1, r3
 800e052:	68f8      	ldr	r0, [r7, #12]
 800e054:	f7ff fe42 	bl	800dcdc <move_window>
 800e058:	4603      	mov	r3, r0
 800e05a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e05c:	7ffb      	ldrb	r3, [r7, #31]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	f040 80d4 	bne.w	800e20c <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e06a:	69bb      	ldr	r3, [r7, #24]
 800e06c:	1c5a      	adds	r2, r3, #1
 800e06e:	61ba      	str	r2, [r7, #24]
 800e070:	68fa      	ldr	r2, [r7, #12]
 800e072:	8992      	ldrh	r2, [r2, #12]
 800e074:	fbb3 f0f2 	udiv	r0, r3, r2
 800e078:	fb02 f200 	mul.w	r2, r2, r0
 800e07c:	1a9b      	subs	r3, r3, r2
 800e07e:	440b      	add	r3, r1
 800e080:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e082:	68bb      	ldr	r3, [r7, #8]
 800e084:	f003 0301 	and.w	r3, r3, #1
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d00d      	beq.n	800e0a8 <put_fat+0xb2>
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	781b      	ldrb	r3, [r3, #0]
 800e090:	b25b      	sxtb	r3, r3
 800e092:	f003 030f 	and.w	r3, r3, #15
 800e096:	b25a      	sxtb	r2, r3
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	b2db      	uxtb	r3, r3
 800e09c:	011b      	lsls	r3, r3, #4
 800e09e:	b25b      	sxtb	r3, r3
 800e0a0:	4313      	orrs	r3, r2
 800e0a2:	b25b      	sxtb	r3, r3
 800e0a4:	b2db      	uxtb	r3, r3
 800e0a6:	e001      	b.n	800e0ac <put_fat+0xb6>
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	b2db      	uxtb	r3, r3
 800e0ac:	697a      	ldr	r2, [r7, #20]
 800e0ae:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	2201      	movs	r2, #1
 800e0b4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	899b      	ldrh	r3, [r3, #12]
 800e0be:	4619      	mov	r1, r3
 800e0c0:	69bb      	ldr	r3, [r7, #24]
 800e0c2:	fbb3 f3f1 	udiv	r3, r3, r1
 800e0c6:	4413      	add	r3, r2
 800e0c8:	4619      	mov	r1, r3
 800e0ca:	68f8      	ldr	r0, [r7, #12]
 800e0cc:	f7ff fe06 	bl	800dcdc <move_window>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e0d4:	7ffb      	ldrb	r3, [r7, #31]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	f040 809a 	bne.w	800e210 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	899b      	ldrh	r3, [r3, #12]
 800e0e6:	461a      	mov	r2, r3
 800e0e8:	69bb      	ldr	r3, [r7, #24]
 800e0ea:	fbb3 f0f2 	udiv	r0, r3, r2
 800e0ee:	fb02 f200 	mul.w	r2, r2, r0
 800e0f2:	1a9b      	subs	r3, r3, r2
 800e0f4:	440b      	add	r3, r1
 800e0f6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e0f8:	68bb      	ldr	r3, [r7, #8]
 800e0fa:	f003 0301 	and.w	r3, r3, #1
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d003      	beq.n	800e10a <put_fat+0x114>
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	091b      	lsrs	r3, r3, #4
 800e106:	b2db      	uxtb	r3, r3
 800e108:	e00e      	b.n	800e128 <put_fat+0x132>
 800e10a:	697b      	ldr	r3, [r7, #20]
 800e10c:	781b      	ldrb	r3, [r3, #0]
 800e10e:	b25b      	sxtb	r3, r3
 800e110:	f023 030f 	bic.w	r3, r3, #15
 800e114:	b25a      	sxtb	r2, r3
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	0a1b      	lsrs	r3, r3, #8
 800e11a:	b25b      	sxtb	r3, r3
 800e11c:	f003 030f 	and.w	r3, r3, #15
 800e120:	b25b      	sxtb	r3, r3
 800e122:	4313      	orrs	r3, r2
 800e124:	b25b      	sxtb	r3, r3
 800e126:	b2db      	uxtb	r3, r3
 800e128:	697a      	ldr	r2, [r7, #20]
 800e12a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	2201      	movs	r2, #1
 800e130:	70da      	strb	r2, [r3, #3]
			break;
 800e132:	e072      	b.n	800e21a <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	899b      	ldrh	r3, [r3, #12]
 800e13c:	085b      	lsrs	r3, r3, #1
 800e13e:	b29b      	uxth	r3, r3
 800e140:	4619      	mov	r1, r3
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	fbb3 f3f1 	udiv	r3, r3, r1
 800e148:	4413      	add	r3, r2
 800e14a:	4619      	mov	r1, r3
 800e14c:	68f8      	ldr	r0, [r7, #12]
 800e14e:	f7ff fdc5 	bl	800dcdc <move_window>
 800e152:	4603      	mov	r3, r0
 800e154:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e156:	7ffb      	ldrb	r3, [r7, #31]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d15b      	bne.n	800e214 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e162:	68bb      	ldr	r3, [r7, #8]
 800e164:	005b      	lsls	r3, r3, #1
 800e166:	68fa      	ldr	r2, [r7, #12]
 800e168:	8992      	ldrh	r2, [r2, #12]
 800e16a:	fbb3 f0f2 	udiv	r0, r3, r2
 800e16e:	fb02 f200 	mul.w	r2, r2, r0
 800e172:	1a9b      	subs	r3, r3, r2
 800e174:	440b      	add	r3, r1
 800e176:	687a      	ldr	r2, [r7, #4]
 800e178:	b292      	uxth	r2, r2
 800e17a:	4611      	mov	r1, r2
 800e17c:	4618      	mov	r0, r3
 800e17e:	f7ff fb38 	bl	800d7f2 <st_word>
			fs->wflag = 1;
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	2201      	movs	r2, #1
 800e186:	70da      	strb	r2, [r3, #3]
			break;
 800e188:	e047      	b.n	800e21a <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	899b      	ldrh	r3, [r3, #12]
 800e192:	089b      	lsrs	r3, r3, #2
 800e194:	b29b      	uxth	r3, r3
 800e196:	4619      	mov	r1, r3
 800e198:	68bb      	ldr	r3, [r7, #8]
 800e19a:	fbb3 f3f1 	udiv	r3, r3, r1
 800e19e:	4413      	add	r3, r2
 800e1a0:	4619      	mov	r1, r3
 800e1a2:	68f8      	ldr	r0, [r7, #12]
 800e1a4:	f7ff fd9a 	bl	800dcdc <move_window>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e1ac:	7ffb      	ldrb	r3, [r7, #31]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d132      	bne.n	800e218 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e1be:	68bb      	ldr	r3, [r7, #8]
 800e1c0:	009b      	lsls	r3, r3, #2
 800e1c2:	68fa      	ldr	r2, [r7, #12]
 800e1c4:	8992      	ldrh	r2, [r2, #12]
 800e1c6:	fbb3 f0f2 	udiv	r0, r3, r2
 800e1ca:	fb02 f200 	mul.w	r2, r2, r0
 800e1ce:	1a9b      	subs	r3, r3, r2
 800e1d0:	440b      	add	r3, r1
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f7ff faea 	bl	800d7ac <ld_dword>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e1de:	4323      	orrs	r3, r4
 800e1e0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e1e8:	68bb      	ldr	r3, [r7, #8]
 800e1ea:	009b      	lsls	r3, r3, #2
 800e1ec:	68fa      	ldr	r2, [r7, #12]
 800e1ee:	8992      	ldrh	r2, [r2, #12]
 800e1f0:	fbb3 f0f2 	udiv	r0, r3, r2
 800e1f4:	fb02 f200 	mul.w	r2, r2, r0
 800e1f8:	1a9b      	subs	r3, r3, r2
 800e1fa:	440b      	add	r3, r1
 800e1fc:	6879      	ldr	r1, [r7, #4]
 800e1fe:	4618      	mov	r0, r3
 800e200:	f7ff fb12 	bl	800d828 <st_dword>
			fs->wflag = 1;
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	2201      	movs	r2, #1
 800e208:	70da      	strb	r2, [r3, #3]
			break;
 800e20a:	e006      	b.n	800e21a <put_fat+0x224>
			if (res != FR_OK) break;
 800e20c:	bf00      	nop
 800e20e:	e004      	b.n	800e21a <put_fat+0x224>
			if (res != FR_OK) break;
 800e210:	bf00      	nop
 800e212:	e002      	b.n	800e21a <put_fat+0x224>
			if (res != FR_OK) break;
 800e214:	bf00      	nop
 800e216:	e000      	b.n	800e21a <put_fat+0x224>
			if (res != FR_OK) break;
 800e218:	bf00      	nop
		}
	}
	return res;
 800e21a:	7ffb      	ldrb	r3, [r7, #31]
}
 800e21c:	4618      	mov	r0, r3
 800e21e:	3724      	adds	r7, #36	; 0x24
 800e220:	46bd      	mov	sp, r7
 800e222:	bd90      	pop	{r4, r7, pc}

0800e224 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b088      	sub	sp, #32
 800e228:	af00      	add	r7, sp, #0
 800e22a:	60f8      	str	r0, [r7, #12]
 800e22c:	60b9      	str	r1, [r7, #8]
 800e22e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e230:	2300      	movs	r3, #0
 800e232:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e23a:	68bb      	ldr	r3, [r7, #8]
 800e23c:	2b01      	cmp	r3, #1
 800e23e:	d904      	bls.n	800e24a <remove_chain+0x26>
 800e240:	69bb      	ldr	r3, [r7, #24]
 800e242:	699b      	ldr	r3, [r3, #24]
 800e244:	68ba      	ldr	r2, [r7, #8]
 800e246:	429a      	cmp	r2, r3
 800e248:	d301      	bcc.n	800e24e <remove_chain+0x2a>
 800e24a:	2302      	movs	r3, #2
 800e24c:	e04b      	b.n	800e2e6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d00c      	beq.n	800e26e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e254:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e258:	6879      	ldr	r1, [r7, #4]
 800e25a:	69b8      	ldr	r0, [r7, #24]
 800e25c:	f7ff fecb 	bl	800dff6 <put_fat>
 800e260:	4603      	mov	r3, r0
 800e262:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e264:	7ffb      	ldrb	r3, [r7, #31]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d001      	beq.n	800e26e <remove_chain+0x4a>
 800e26a:	7ffb      	ldrb	r3, [r7, #31]
 800e26c:	e03b      	b.n	800e2e6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e26e:	68b9      	ldr	r1, [r7, #8]
 800e270:	68f8      	ldr	r0, [r7, #12]
 800e272:	f7ff fdf0 	bl	800de56 <get_fat>
 800e276:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e278:	697b      	ldr	r3, [r7, #20]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d031      	beq.n	800e2e2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e27e:	697b      	ldr	r3, [r7, #20]
 800e280:	2b01      	cmp	r3, #1
 800e282:	d101      	bne.n	800e288 <remove_chain+0x64>
 800e284:	2302      	movs	r3, #2
 800e286:	e02e      	b.n	800e2e6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e288:	697b      	ldr	r3, [r7, #20]
 800e28a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e28e:	d101      	bne.n	800e294 <remove_chain+0x70>
 800e290:	2301      	movs	r3, #1
 800e292:	e028      	b.n	800e2e6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e294:	2200      	movs	r2, #0
 800e296:	68b9      	ldr	r1, [r7, #8]
 800e298:	69b8      	ldr	r0, [r7, #24]
 800e29a:	f7ff feac 	bl	800dff6 <put_fat>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e2a2:	7ffb      	ldrb	r3, [r7, #31]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d001      	beq.n	800e2ac <remove_chain+0x88>
 800e2a8:	7ffb      	ldrb	r3, [r7, #31]
 800e2aa:	e01c      	b.n	800e2e6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e2ac:	69bb      	ldr	r3, [r7, #24]
 800e2ae:	695a      	ldr	r2, [r3, #20]
 800e2b0:	69bb      	ldr	r3, [r7, #24]
 800e2b2:	699b      	ldr	r3, [r3, #24]
 800e2b4:	3b02      	subs	r3, #2
 800e2b6:	429a      	cmp	r2, r3
 800e2b8:	d20b      	bcs.n	800e2d2 <remove_chain+0xae>
			fs->free_clst++;
 800e2ba:	69bb      	ldr	r3, [r7, #24]
 800e2bc:	695b      	ldr	r3, [r3, #20]
 800e2be:	1c5a      	adds	r2, r3, #1
 800e2c0:	69bb      	ldr	r3, [r7, #24]
 800e2c2:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800e2c4:	69bb      	ldr	r3, [r7, #24]
 800e2c6:	791b      	ldrb	r3, [r3, #4]
 800e2c8:	f043 0301 	orr.w	r3, r3, #1
 800e2cc:	b2da      	uxtb	r2, r3
 800e2ce:	69bb      	ldr	r3, [r7, #24]
 800e2d0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e2d6:	69bb      	ldr	r3, [r7, #24]
 800e2d8:	699b      	ldr	r3, [r3, #24]
 800e2da:	68ba      	ldr	r2, [r7, #8]
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	d3c6      	bcc.n	800e26e <remove_chain+0x4a>
 800e2e0:	e000      	b.n	800e2e4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e2e2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e2e4:	2300      	movs	r3, #0
}
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	3720      	adds	r7, #32
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd80      	pop	{r7, pc}

0800e2ee <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e2ee:	b580      	push	{r7, lr}
 800e2f0:	b088      	sub	sp, #32
 800e2f2:	af00      	add	r7, sp, #0
 800e2f4:	6078      	str	r0, [r7, #4]
 800e2f6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d10d      	bne.n	800e320 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e304:	693b      	ldr	r3, [r7, #16]
 800e306:	691b      	ldr	r3, [r3, #16]
 800e308:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e30a:	69bb      	ldr	r3, [r7, #24]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d004      	beq.n	800e31a <create_chain+0x2c>
 800e310:	693b      	ldr	r3, [r7, #16]
 800e312:	699b      	ldr	r3, [r3, #24]
 800e314:	69ba      	ldr	r2, [r7, #24]
 800e316:	429a      	cmp	r2, r3
 800e318:	d31b      	bcc.n	800e352 <create_chain+0x64>
 800e31a:	2301      	movs	r3, #1
 800e31c:	61bb      	str	r3, [r7, #24]
 800e31e:	e018      	b.n	800e352 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e320:	6839      	ldr	r1, [r7, #0]
 800e322:	6878      	ldr	r0, [r7, #4]
 800e324:	f7ff fd97 	bl	800de56 <get_fat>
 800e328:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	2b01      	cmp	r3, #1
 800e32e:	d801      	bhi.n	800e334 <create_chain+0x46>
 800e330:	2301      	movs	r3, #1
 800e332:	e070      	b.n	800e416 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e33a:	d101      	bne.n	800e340 <create_chain+0x52>
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	e06a      	b.n	800e416 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e340:	693b      	ldr	r3, [r7, #16]
 800e342:	699b      	ldr	r3, [r3, #24]
 800e344:	68fa      	ldr	r2, [r7, #12]
 800e346:	429a      	cmp	r2, r3
 800e348:	d201      	bcs.n	800e34e <create_chain+0x60>
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	e063      	b.n	800e416 <create_chain+0x128>
		scl = clst;
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e352:	69bb      	ldr	r3, [r7, #24]
 800e354:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e356:	69fb      	ldr	r3, [r7, #28]
 800e358:	3301      	adds	r3, #1
 800e35a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e35c:	693b      	ldr	r3, [r7, #16]
 800e35e:	699b      	ldr	r3, [r3, #24]
 800e360:	69fa      	ldr	r2, [r7, #28]
 800e362:	429a      	cmp	r2, r3
 800e364:	d307      	bcc.n	800e376 <create_chain+0x88>
				ncl = 2;
 800e366:	2302      	movs	r3, #2
 800e368:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e36a:	69fa      	ldr	r2, [r7, #28]
 800e36c:	69bb      	ldr	r3, [r7, #24]
 800e36e:	429a      	cmp	r2, r3
 800e370:	d901      	bls.n	800e376 <create_chain+0x88>
 800e372:	2300      	movs	r3, #0
 800e374:	e04f      	b.n	800e416 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e376:	69f9      	ldr	r1, [r7, #28]
 800e378:	6878      	ldr	r0, [r7, #4]
 800e37a:	f7ff fd6c 	bl	800de56 <get_fat>
 800e37e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d00e      	beq.n	800e3a4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	2b01      	cmp	r3, #1
 800e38a:	d003      	beq.n	800e394 <create_chain+0xa6>
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e392:	d101      	bne.n	800e398 <create_chain+0xaa>
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	e03e      	b.n	800e416 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e398:	69fa      	ldr	r2, [r7, #28]
 800e39a:	69bb      	ldr	r3, [r7, #24]
 800e39c:	429a      	cmp	r2, r3
 800e39e:	d1da      	bne.n	800e356 <create_chain+0x68>
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	e038      	b.n	800e416 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e3a4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e3a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e3aa:	69f9      	ldr	r1, [r7, #28]
 800e3ac:	6938      	ldr	r0, [r7, #16]
 800e3ae:	f7ff fe22 	bl	800dff6 <put_fat>
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e3b6:	7dfb      	ldrb	r3, [r7, #23]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d109      	bne.n	800e3d0 <create_chain+0xe2>
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d006      	beq.n	800e3d0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e3c2:	69fa      	ldr	r2, [r7, #28]
 800e3c4:	6839      	ldr	r1, [r7, #0]
 800e3c6:	6938      	ldr	r0, [r7, #16]
 800e3c8:	f7ff fe15 	bl	800dff6 <put_fat>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e3d0:	7dfb      	ldrb	r3, [r7, #23]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d116      	bne.n	800e404 <create_chain+0x116>
		fs->last_clst = ncl;
 800e3d6:	693b      	ldr	r3, [r7, #16]
 800e3d8:	69fa      	ldr	r2, [r7, #28]
 800e3da:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e3dc:	693b      	ldr	r3, [r7, #16]
 800e3de:	695a      	ldr	r2, [r3, #20]
 800e3e0:	693b      	ldr	r3, [r7, #16]
 800e3e2:	699b      	ldr	r3, [r3, #24]
 800e3e4:	3b02      	subs	r3, #2
 800e3e6:	429a      	cmp	r2, r3
 800e3e8:	d804      	bhi.n	800e3f4 <create_chain+0x106>
 800e3ea:	693b      	ldr	r3, [r7, #16]
 800e3ec:	695b      	ldr	r3, [r3, #20]
 800e3ee:	1e5a      	subs	r2, r3, #1
 800e3f0:	693b      	ldr	r3, [r7, #16]
 800e3f2:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800e3f4:	693b      	ldr	r3, [r7, #16]
 800e3f6:	791b      	ldrb	r3, [r3, #4]
 800e3f8:	f043 0301 	orr.w	r3, r3, #1
 800e3fc:	b2da      	uxtb	r2, r3
 800e3fe:	693b      	ldr	r3, [r7, #16]
 800e400:	711a      	strb	r2, [r3, #4]
 800e402:	e007      	b.n	800e414 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e404:	7dfb      	ldrb	r3, [r7, #23]
 800e406:	2b01      	cmp	r3, #1
 800e408:	d102      	bne.n	800e410 <create_chain+0x122>
 800e40a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e40e:	e000      	b.n	800e412 <create_chain+0x124>
 800e410:	2301      	movs	r3, #1
 800e412:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e414:	69fb      	ldr	r3, [r7, #28]
}
 800e416:	4618      	mov	r0, r3
 800e418:	3720      	adds	r7, #32
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bd80      	pop	{r7, pc}

0800e41e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e41e:	b480      	push	{r7}
 800e420:	b087      	sub	sp, #28
 800e422:	af00      	add	r7, sp, #0
 800e424:	6078      	str	r0, [r7, #4]
 800e426:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e432:	3304      	adds	r3, #4
 800e434:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	899b      	ldrh	r3, [r3, #12]
 800e43a:	461a      	mov	r2, r3
 800e43c:	683b      	ldr	r3, [r7, #0]
 800e43e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e442:	68fa      	ldr	r2, [r7, #12]
 800e444:	8952      	ldrh	r2, [r2, #10]
 800e446:	fbb3 f3f2 	udiv	r3, r3, r2
 800e44a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e44c:	693b      	ldr	r3, [r7, #16]
 800e44e:	1d1a      	adds	r2, r3, #4
 800e450:	613a      	str	r2, [r7, #16]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e456:	68bb      	ldr	r3, [r7, #8]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d101      	bne.n	800e460 <clmt_clust+0x42>
 800e45c:	2300      	movs	r3, #0
 800e45e:	e010      	b.n	800e482 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800e460:	697a      	ldr	r2, [r7, #20]
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	429a      	cmp	r2, r3
 800e466:	d307      	bcc.n	800e478 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800e468:	697a      	ldr	r2, [r7, #20]
 800e46a:	68bb      	ldr	r3, [r7, #8]
 800e46c:	1ad3      	subs	r3, r2, r3
 800e46e:	617b      	str	r3, [r7, #20]
 800e470:	693b      	ldr	r3, [r7, #16]
 800e472:	3304      	adds	r3, #4
 800e474:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e476:	e7e9      	b.n	800e44c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800e478:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e47a:	693b      	ldr	r3, [r7, #16]
 800e47c:	681a      	ldr	r2, [r3, #0]
 800e47e:	697b      	ldr	r3, [r7, #20]
 800e480:	4413      	add	r3, r2
}
 800e482:	4618      	mov	r0, r3
 800e484:	371c      	adds	r7, #28
 800e486:	46bd      	mov	sp, r7
 800e488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48c:	4770      	bx	lr

0800e48e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e48e:	b580      	push	{r7, lr}
 800e490:	b086      	sub	sp, #24
 800e492:	af00      	add	r7, sp, #0
 800e494:	6078      	str	r0, [r7, #4]
 800e496:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e49e:	683b      	ldr	r3, [r7, #0]
 800e4a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e4a4:	d204      	bcs.n	800e4b0 <dir_sdi+0x22>
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	f003 031f 	and.w	r3, r3, #31
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d001      	beq.n	800e4b4 <dir_sdi+0x26>
		return FR_INT_ERR;
 800e4b0:	2302      	movs	r3, #2
 800e4b2:	e071      	b.n	800e598 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	683a      	ldr	r2, [r7, #0]
 800e4b8:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	689b      	ldr	r3, [r3, #8]
 800e4be:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e4c0:	697b      	ldr	r3, [r7, #20]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d106      	bne.n	800e4d4 <dir_sdi+0x46>
 800e4c6:	693b      	ldr	r3, [r7, #16]
 800e4c8:	781b      	ldrb	r3, [r3, #0]
 800e4ca:	2b02      	cmp	r3, #2
 800e4cc:	d902      	bls.n	800e4d4 <dir_sdi+0x46>
		clst = fs->dirbase;
 800e4ce:	693b      	ldr	r3, [r7, #16]
 800e4d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4d2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e4d4:	697b      	ldr	r3, [r7, #20]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d10c      	bne.n	800e4f4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e4da:	683b      	ldr	r3, [r7, #0]
 800e4dc:	095b      	lsrs	r3, r3, #5
 800e4de:	693a      	ldr	r2, [r7, #16]
 800e4e0:	8912      	ldrh	r2, [r2, #8]
 800e4e2:	4293      	cmp	r3, r2
 800e4e4:	d301      	bcc.n	800e4ea <dir_sdi+0x5c>
 800e4e6:	2302      	movs	r3, #2
 800e4e8:	e056      	b.n	800e598 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800e4ea:	693b      	ldr	r3, [r7, #16]
 800e4ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	61da      	str	r2, [r3, #28]
 800e4f2:	e02d      	b.n	800e550 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e4f4:	693b      	ldr	r3, [r7, #16]
 800e4f6:	895b      	ldrh	r3, [r3, #10]
 800e4f8:	461a      	mov	r2, r3
 800e4fa:	693b      	ldr	r3, [r7, #16]
 800e4fc:	899b      	ldrh	r3, [r3, #12]
 800e4fe:	fb03 f302 	mul.w	r3, r3, r2
 800e502:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e504:	e019      	b.n	800e53a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	6979      	ldr	r1, [r7, #20]
 800e50a:	4618      	mov	r0, r3
 800e50c:	f7ff fca3 	bl	800de56 <get_fat>
 800e510:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e512:	697b      	ldr	r3, [r7, #20]
 800e514:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e518:	d101      	bne.n	800e51e <dir_sdi+0x90>
 800e51a:	2301      	movs	r3, #1
 800e51c:	e03c      	b.n	800e598 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e51e:	697b      	ldr	r3, [r7, #20]
 800e520:	2b01      	cmp	r3, #1
 800e522:	d904      	bls.n	800e52e <dir_sdi+0xa0>
 800e524:	693b      	ldr	r3, [r7, #16]
 800e526:	699b      	ldr	r3, [r3, #24]
 800e528:	697a      	ldr	r2, [r7, #20]
 800e52a:	429a      	cmp	r2, r3
 800e52c:	d301      	bcc.n	800e532 <dir_sdi+0xa4>
 800e52e:	2302      	movs	r3, #2
 800e530:	e032      	b.n	800e598 <dir_sdi+0x10a>
			ofs -= csz;
 800e532:	683a      	ldr	r2, [r7, #0]
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	1ad3      	subs	r3, r2, r3
 800e538:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e53a:	683a      	ldr	r2, [r7, #0]
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	429a      	cmp	r2, r3
 800e540:	d2e1      	bcs.n	800e506 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800e542:	6979      	ldr	r1, [r7, #20]
 800e544:	6938      	ldr	r0, [r7, #16]
 800e546:	f7ff fc67 	bl	800de18 <clust2sect>
 800e54a:	4602      	mov	r2, r0
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	697a      	ldr	r2, [r7, #20]
 800e554:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	69db      	ldr	r3, [r3, #28]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d101      	bne.n	800e562 <dir_sdi+0xd4>
 800e55e:	2302      	movs	r3, #2
 800e560:	e01a      	b.n	800e598 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	69da      	ldr	r2, [r3, #28]
 800e566:	693b      	ldr	r3, [r7, #16]
 800e568:	899b      	ldrh	r3, [r3, #12]
 800e56a:	4619      	mov	r1, r3
 800e56c:	683b      	ldr	r3, [r7, #0]
 800e56e:	fbb3 f3f1 	udiv	r3, r3, r1
 800e572:	441a      	add	r2, r3
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e578:	693b      	ldr	r3, [r7, #16]
 800e57a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e57e:	693b      	ldr	r3, [r7, #16]
 800e580:	899b      	ldrh	r3, [r3, #12]
 800e582:	461a      	mov	r2, r3
 800e584:	683b      	ldr	r3, [r7, #0]
 800e586:	fbb3 f0f2 	udiv	r0, r3, r2
 800e58a:	fb02 f200 	mul.w	r2, r2, r0
 800e58e:	1a9b      	subs	r3, r3, r2
 800e590:	18ca      	adds	r2, r1, r3
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e596:	2300      	movs	r3, #0
}
 800e598:	4618      	mov	r0, r3
 800e59a:	3718      	adds	r7, #24
 800e59c:	46bd      	mov	sp, r7
 800e59e:	bd80      	pop	{r7, pc}

0800e5a0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b086      	sub	sp, #24
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
 800e5a8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	695b      	ldr	r3, [r3, #20]
 800e5b4:	3320      	adds	r3, #32
 800e5b6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	69db      	ldr	r3, [r3, #28]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d003      	beq.n	800e5c8 <dir_next+0x28>
 800e5c0:	68bb      	ldr	r3, [r7, #8]
 800e5c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e5c6:	d301      	bcc.n	800e5cc <dir_next+0x2c>
 800e5c8:	2304      	movs	r3, #4
 800e5ca:	e0bb      	b.n	800e744 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	899b      	ldrh	r3, [r3, #12]
 800e5d0:	461a      	mov	r2, r3
 800e5d2:	68bb      	ldr	r3, [r7, #8]
 800e5d4:	fbb3 f1f2 	udiv	r1, r3, r2
 800e5d8:	fb02 f201 	mul.w	r2, r2, r1
 800e5dc:	1a9b      	subs	r3, r3, r2
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	f040 809d 	bne.w	800e71e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	69db      	ldr	r3, [r3, #28]
 800e5e8:	1c5a      	adds	r2, r3, #1
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	699b      	ldr	r3, [r3, #24]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d10b      	bne.n	800e60e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e5f6:	68bb      	ldr	r3, [r7, #8]
 800e5f8:	095b      	lsrs	r3, r3, #5
 800e5fa:	68fa      	ldr	r2, [r7, #12]
 800e5fc:	8912      	ldrh	r2, [r2, #8]
 800e5fe:	4293      	cmp	r3, r2
 800e600:	f0c0 808d 	bcc.w	800e71e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	2200      	movs	r2, #0
 800e608:	61da      	str	r2, [r3, #28]
 800e60a:	2304      	movs	r3, #4
 800e60c:	e09a      	b.n	800e744 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	899b      	ldrh	r3, [r3, #12]
 800e612:	461a      	mov	r2, r3
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	fbb3 f3f2 	udiv	r3, r3, r2
 800e61a:	68fa      	ldr	r2, [r7, #12]
 800e61c:	8952      	ldrh	r2, [r2, #10]
 800e61e:	3a01      	subs	r2, #1
 800e620:	4013      	ands	r3, r2
 800e622:	2b00      	cmp	r3, #0
 800e624:	d17b      	bne.n	800e71e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e626:	687a      	ldr	r2, [r7, #4]
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	699b      	ldr	r3, [r3, #24]
 800e62c:	4619      	mov	r1, r3
 800e62e:	4610      	mov	r0, r2
 800e630:	f7ff fc11 	bl	800de56 <get_fat>
 800e634:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e636:	697b      	ldr	r3, [r7, #20]
 800e638:	2b01      	cmp	r3, #1
 800e63a:	d801      	bhi.n	800e640 <dir_next+0xa0>
 800e63c:	2302      	movs	r3, #2
 800e63e:	e081      	b.n	800e744 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e646:	d101      	bne.n	800e64c <dir_next+0xac>
 800e648:	2301      	movs	r3, #1
 800e64a:	e07b      	b.n	800e744 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	699b      	ldr	r3, [r3, #24]
 800e650:	697a      	ldr	r2, [r7, #20]
 800e652:	429a      	cmp	r2, r3
 800e654:	d359      	bcc.n	800e70a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d104      	bne.n	800e666 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	2200      	movs	r2, #0
 800e660:	61da      	str	r2, [r3, #28]
 800e662:	2304      	movs	r3, #4
 800e664:	e06e      	b.n	800e744 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e666:	687a      	ldr	r2, [r7, #4]
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	699b      	ldr	r3, [r3, #24]
 800e66c:	4619      	mov	r1, r3
 800e66e:	4610      	mov	r0, r2
 800e670:	f7ff fe3d 	bl	800e2ee <create_chain>
 800e674:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e676:	697b      	ldr	r3, [r7, #20]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d101      	bne.n	800e680 <dir_next+0xe0>
 800e67c:	2307      	movs	r3, #7
 800e67e:	e061      	b.n	800e744 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e680:	697b      	ldr	r3, [r7, #20]
 800e682:	2b01      	cmp	r3, #1
 800e684:	d101      	bne.n	800e68a <dir_next+0xea>
 800e686:	2302      	movs	r3, #2
 800e688:	e05c      	b.n	800e744 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e68a:	697b      	ldr	r3, [r7, #20]
 800e68c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e690:	d101      	bne.n	800e696 <dir_next+0xf6>
 800e692:	2301      	movs	r3, #1
 800e694:	e056      	b.n	800e744 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e696:	68f8      	ldr	r0, [r7, #12]
 800e698:	f7ff fadc 	bl	800dc54 <sync_window>
 800e69c:	4603      	mov	r3, r0
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d001      	beq.n	800e6a6 <dir_next+0x106>
 800e6a2:	2301      	movs	r3, #1
 800e6a4:	e04e      	b.n	800e744 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800e6ac:	68fb      	ldr	r3, [r7, #12]
 800e6ae:	899b      	ldrh	r3, [r3, #12]
 800e6b0:	461a      	mov	r2, r3
 800e6b2:	2100      	movs	r1, #0
 800e6b4:	f7ff f905 	bl	800d8c2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	613b      	str	r3, [r7, #16]
 800e6bc:	6979      	ldr	r1, [r7, #20]
 800e6be:	68f8      	ldr	r0, [r7, #12]
 800e6c0:	f7ff fbaa 	bl	800de18 <clust2sect>
 800e6c4:	4602      	mov	r2, r0
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	631a      	str	r2, [r3, #48]	; 0x30
 800e6ca:	e012      	b.n	800e6f2 <dir_next+0x152>
						fs->wflag = 1;
 800e6cc:	68fb      	ldr	r3, [r7, #12]
 800e6ce:	2201      	movs	r2, #1
 800e6d0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e6d2:	68f8      	ldr	r0, [r7, #12]
 800e6d4:	f7ff fabe 	bl	800dc54 <sync_window>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d001      	beq.n	800e6e2 <dir_next+0x142>
 800e6de:	2301      	movs	r3, #1
 800e6e0:	e030      	b.n	800e744 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e6e2:	693b      	ldr	r3, [r7, #16]
 800e6e4:	3301      	adds	r3, #1
 800e6e6:	613b      	str	r3, [r7, #16]
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6ec:	1c5a      	adds	r2, r3, #1
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	631a      	str	r2, [r3, #48]	; 0x30
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	895b      	ldrh	r3, [r3, #10]
 800e6f6:	461a      	mov	r2, r3
 800e6f8:	693b      	ldr	r3, [r7, #16]
 800e6fa:	4293      	cmp	r3, r2
 800e6fc:	d3e6      	bcc.n	800e6cc <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e702:	693b      	ldr	r3, [r7, #16]
 800e704:	1ad2      	subs	r2, r2, r3
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	697a      	ldr	r2, [r7, #20]
 800e70e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e710:	6979      	ldr	r1, [r7, #20]
 800e712:	68f8      	ldr	r0, [r7, #12]
 800e714:	f7ff fb80 	bl	800de18 <clust2sect>
 800e718:	4602      	mov	r2, r0
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	68ba      	ldr	r2, [r7, #8]
 800e722:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	899b      	ldrh	r3, [r3, #12]
 800e72e:	461a      	mov	r2, r3
 800e730:	68bb      	ldr	r3, [r7, #8]
 800e732:	fbb3 f0f2 	udiv	r0, r3, r2
 800e736:	fb02 f200 	mul.w	r2, r2, r0
 800e73a:	1a9b      	subs	r3, r3, r2
 800e73c:	18ca      	adds	r2, r1, r3
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e742:	2300      	movs	r3, #0
}
 800e744:	4618      	mov	r0, r3
 800e746:	3718      	adds	r7, #24
 800e748:	46bd      	mov	sp, r7
 800e74a:	bd80      	pop	{r7, pc}

0800e74c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b086      	sub	sp, #24
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
 800e754:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e75c:	2100      	movs	r1, #0
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	f7ff fe95 	bl	800e48e <dir_sdi>
 800e764:	4603      	mov	r3, r0
 800e766:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e768:	7dfb      	ldrb	r3, [r7, #23]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d12b      	bne.n	800e7c6 <dir_alloc+0x7a>
		n = 0;
 800e76e:	2300      	movs	r3, #0
 800e770:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	69db      	ldr	r3, [r3, #28]
 800e776:	4619      	mov	r1, r3
 800e778:	68f8      	ldr	r0, [r7, #12]
 800e77a:	f7ff faaf 	bl	800dcdc <move_window>
 800e77e:	4603      	mov	r3, r0
 800e780:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e782:	7dfb      	ldrb	r3, [r7, #23]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d11d      	bne.n	800e7c4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	6a1b      	ldr	r3, [r3, #32]
 800e78c:	781b      	ldrb	r3, [r3, #0]
 800e78e:	2be5      	cmp	r3, #229	; 0xe5
 800e790:	d004      	beq.n	800e79c <dir_alloc+0x50>
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	6a1b      	ldr	r3, [r3, #32]
 800e796:	781b      	ldrb	r3, [r3, #0]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d107      	bne.n	800e7ac <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e79c:	693b      	ldr	r3, [r7, #16]
 800e79e:	3301      	adds	r3, #1
 800e7a0:	613b      	str	r3, [r7, #16]
 800e7a2:	693a      	ldr	r2, [r7, #16]
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	429a      	cmp	r2, r3
 800e7a8:	d102      	bne.n	800e7b0 <dir_alloc+0x64>
 800e7aa:	e00c      	b.n	800e7c6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e7b0:	2101      	movs	r1, #1
 800e7b2:	6878      	ldr	r0, [r7, #4]
 800e7b4:	f7ff fef4 	bl	800e5a0 <dir_next>
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e7bc:	7dfb      	ldrb	r3, [r7, #23]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d0d7      	beq.n	800e772 <dir_alloc+0x26>
 800e7c2:	e000      	b.n	800e7c6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e7c4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e7c6:	7dfb      	ldrb	r3, [r7, #23]
 800e7c8:	2b04      	cmp	r3, #4
 800e7ca:	d101      	bne.n	800e7d0 <dir_alloc+0x84>
 800e7cc:	2307      	movs	r3, #7
 800e7ce:	75fb      	strb	r3, [r7, #23]
	return res;
 800e7d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	3718      	adds	r7, #24
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	bd80      	pop	{r7, pc}

0800e7da <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e7da:	b580      	push	{r7, lr}
 800e7dc:	b084      	sub	sp, #16
 800e7de:	af00      	add	r7, sp, #0
 800e7e0:	6078      	str	r0, [r7, #4]
 800e7e2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	331a      	adds	r3, #26
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	f7fe ffc7 	bl	800d77c <ld_word>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	781b      	ldrb	r3, [r3, #0]
 800e7f6:	2b03      	cmp	r3, #3
 800e7f8:	d109      	bne.n	800e80e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	3314      	adds	r3, #20
 800e7fe:	4618      	mov	r0, r3
 800e800:	f7fe ffbc 	bl	800d77c <ld_word>
 800e804:	4603      	mov	r3, r0
 800e806:	041b      	lsls	r3, r3, #16
 800e808:	68fa      	ldr	r2, [r7, #12]
 800e80a:	4313      	orrs	r3, r2
 800e80c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e80e:	68fb      	ldr	r3, [r7, #12]
}
 800e810:	4618      	mov	r0, r3
 800e812:	3710      	adds	r7, #16
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}

0800e818 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b084      	sub	sp, #16
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	60f8      	str	r0, [r7, #12]
 800e820:	60b9      	str	r1, [r7, #8]
 800e822:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e824:	68bb      	ldr	r3, [r7, #8]
 800e826:	331a      	adds	r3, #26
 800e828:	687a      	ldr	r2, [r7, #4]
 800e82a:	b292      	uxth	r2, r2
 800e82c:	4611      	mov	r1, r2
 800e82e:	4618      	mov	r0, r3
 800e830:	f7fe ffdf 	bl	800d7f2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	781b      	ldrb	r3, [r3, #0]
 800e838:	2b03      	cmp	r3, #3
 800e83a:	d109      	bne.n	800e850 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e83c:	68bb      	ldr	r3, [r7, #8]
 800e83e:	f103 0214 	add.w	r2, r3, #20
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	0c1b      	lsrs	r3, r3, #16
 800e846:	b29b      	uxth	r3, r3
 800e848:	4619      	mov	r1, r3
 800e84a:	4610      	mov	r0, r2
 800e84c:	f7fe ffd1 	bl	800d7f2 <st_word>
	}
}
 800e850:	bf00      	nop
 800e852:	3710      	adds	r7, #16
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}

0800e858 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b086      	sub	sp, #24
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
 800e860:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800e862:	2304      	movs	r3, #4
 800e864:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 800e86c:	e03c      	b.n	800e8e8 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	69db      	ldr	r3, [r3, #28]
 800e872:	4619      	mov	r1, r3
 800e874:	6938      	ldr	r0, [r7, #16]
 800e876:	f7ff fa31 	bl	800dcdc <move_window>
 800e87a:	4603      	mov	r3, r0
 800e87c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e87e:	7dfb      	ldrb	r3, [r7, #23]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d136      	bne.n	800e8f2 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	6a1b      	ldr	r3, [r3, #32]
 800e888:	781b      	ldrb	r3, [r3, #0]
 800e88a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 800e88c:	7bfb      	ldrb	r3, [r7, #15]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d102      	bne.n	800e898 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800e892:	2304      	movs	r3, #4
 800e894:	75fb      	strb	r3, [r7, #23]
 800e896:	e031      	b.n	800e8fc <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	6a1b      	ldr	r3, [r3, #32]
 800e89c:	330b      	adds	r3, #11
 800e89e:	781b      	ldrb	r3, [r3, #0]
 800e8a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e8a4:	73bb      	strb	r3, [r7, #14]
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	7bba      	ldrb	r2, [r7, #14]
 800e8aa:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 800e8ac:	7bfb      	ldrb	r3, [r7, #15]
 800e8ae:	2be5      	cmp	r3, #229	; 0xe5
 800e8b0:	d011      	beq.n	800e8d6 <dir_read+0x7e>
 800e8b2:	7bfb      	ldrb	r3, [r7, #15]
 800e8b4:	2b2e      	cmp	r3, #46	; 0x2e
 800e8b6:	d00e      	beq.n	800e8d6 <dir_read+0x7e>
 800e8b8:	7bbb      	ldrb	r3, [r7, #14]
 800e8ba:	2b0f      	cmp	r3, #15
 800e8bc:	d00b      	beq.n	800e8d6 <dir_read+0x7e>
 800e8be:	7bbb      	ldrb	r3, [r7, #14]
 800e8c0:	f023 0320 	bic.w	r3, r3, #32
 800e8c4:	2b08      	cmp	r3, #8
 800e8c6:	bf0c      	ite	eq
 800e8c8:	2301      	moveq	r3, #1
 800e8ca:	2300      	movne	r3, #0
 800e8cc:	b2db      	uxtb	r3, r3
 800e8ce:	461a      	mov	r2, r3
 800e8d0:	683b      	ldr	r3, [r7, #0]
 800e8d2:	4293      	cmp	r3, r2
 800e8d4:	d00f      	beq.n	800e8f6 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800e8d6:	2100      	movs	r1, #0
 800e8d8:	6878      	ldr	r0, [r7, #4]
 800e8da:	f7ff fe61 	bl	800e5a0 <dir_next>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e8e2:	7dfb      	ldrb	r3, [r7, #23]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d108      	bne.n	800e8fa <dir_read+0xa2>
	while (dp->sect) {
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	69db      	ldr	r3, [r3, #28]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d1be      	bne.n	800e86e <dir_read+0x16>
 800e8f0:	e004      	b.n	800e8fc <dir_read+0xa4>
		if (res != FR_OK) break;
 800e8f2:	bf00      	nop
 800e8f4:	e002      	b.n	800e8fc <dir_read+0xa4>
				break;
 800e8f6:	bf00      	nop
 800e8f8:	e000      	b.n	800e8fc <dir_read+0xa4>
		if (res != FR_OK) break;
 800e8fa:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800e8fc:	7dfb      	ldrb	r3, [r7, #23]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d002      	beq.n	800e908 <dir_read+0xb0>
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	2200      	movs	r2, #0
 800e906:	61da      	str	r2, [r3, #28]
	return res;
 800e908:	7dfb      	ldrb	r3, [r7, #23]
}
 800e90a:	4618      	mov	r0, r3
 800e90c:	3718      	adds	r7, #24
 800e90e:	46bd      	mov	sp, r7
 800e910:	bd80      	pop	{r7, pc}

0800e912 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e912:	b580      	push	{r7, lr}
 800e914:	b086      	sub	sp, #24
 800e916:	af00      	add	r7, sp, #0
 800e918:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e920:	2100      	movs	r1, #0
 800e922:	6878      	ldr	r0, [r7, #4]
 800e924:	f7ff fdb3 	bl	800e48e <dir_sdi>
 800e928:	4603      	mov	r3, r0
 800e92a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e92c:	7dfb      	ldrb	r3, [r7, #23]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d001      	beq.n	800e936 <dir_find+0x24>
 800e932:	7dfb      	ldrb	r3, [r7, #23]
 800e934:	e03e      	b.n	800e9b4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	69db      	ldr	r3, [r3, #28]
 800e93a:	4619      	mov	r1, r3
 800e93c:	6938      	ldr	r0, [r7, #16]
 800e93e:	f7ff f9cd 	bl	800dcdc <move_window>
 800e942:	4603      	mov	r3, r0
 800e944:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e946:	7dfb      	ldrb	r3, [r7, #23]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d12f      	bne.n	800e9ac <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	6a1b      	ldr	r3, [r3, #32]
 800e950:	781b      	ldrb	r3, [r3, #0]
 800e952:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e954:	7bfb      	ldrb	r3, [r7, #15]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d102      	bne.n	800e960 <dir_find+0x4e>
 800e95a:	2304      	movs	r3, #4
 800e95c:	75fb      	strb	r3, [r7, #23]
 800e95e:	e028      	b.n	800e9b2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	6a1b      	ldr	r3, [r3, #32]
 800e964:	330b      	adds	r3, #11
 800e966:	781b      	ldrb	r3, [r3, #0]
 800e968:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e96c:	b2da      	uxtb	r2, r3
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	6a1b      	ldr	r3, [r3, #32]
 800e976:	330b      	adds	r3, #11
 800e978:	781b      	ldrb	r3, [r3, #0]
 800e97a:	f003 0308 	and.w	r3, r3, #8
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d10a      	bne.n	800e998 <dir_find+0x86>
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	6a18      	ldr	r0, [r3, #32]
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	3324      	adds	r3, #36	; 0x24
 800e98a:	220b      	movs	r2, #11
 800e98c:	4619      	mov	r1, r3
 800e98e:	f7fe ffb2 	bl	800d8f6 <mem_cmp>
 800e992:	4603      	mov	r3, r0
 800e994:	2b00      	cmp	r3, #0
 800e996:	d00b      	beq.n	800e9b0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e998:	2100      	movs	r1, #0
 800e99a:	6878      	ldr	r0, [r7, #4]
 800e99c:	f7ff fe00 	bl	800e5a0 <dir_next>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e9a4:	7dfb      	ldrb	r3, [r7, #23]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d0c5      	beq.n	800e936 <dir_find+0x24>
 800e9aa:	e002      	b.n	800e9b2 <dir_find+0xa0>
		if (res != FR_OK) break;
 800e9ac:	bf00      	nop
 800e9ae:	e000      	b.n	800e9b2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e9b0:	bf00      	nop

	return res;
 800e9b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	3718      	adds	r7, #24
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}

0800e9bc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b084      	sub	sp, #16
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800e9ca:	2101      	movs	r1, #1
 800e9cc:	6878      	ldr	r0, [r7, #4]
 800e9ce:	f7ff febd 	bl	800e74c <dir_alloc>
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e9d6:	7bfb      	ldrb	r3, [r7, #15]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d11c      	bne.n	800ea16 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	69db      	ldr	r3, [r3, #28]
 800e9e0:	4619      	mov	r1, r3
 800e9e2:	68b8      	ldr	r0, [r7, #8]
 800e9e4:	f7ff f97a 	bl	800dcdc <move_window>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e9ec:	7bfb      	ldrb	r3, [r7, #15]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d111      	bne.n	800ea16 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	6a1b      	ldr	r3, [r3, #32]
 800e9f6:	2220      	movs	r2, #32
 800e9f8:	2100      	movs	r1, #0
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f7fe ff61 	bl	800d8c2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	6a18      	ldr	r0, [r3, #32]
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	3324      	adds	r3, #36	; 0x24
 800ea08:	220b      	movs	r2, #11
 800ea0a:	4619      	mov	r1, r3
 800ea0c:	f7fe ff38 	bl	800d880 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ea10:	68bb      	ldr	r3, [r7, #8]
 800ea12:	2201      	movs	r2, #1
 800ea14:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ea16:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea18:	4618      	mov	r0, r3
 800ea1a:	3710      	adds	r7, #16
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}

0800ea20 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b086      	sub	sp, #24
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
 800ea28:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	2200      	movs	r2, #0
 800ea2e:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	69db      	ldr	r3, [r3, #28]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d04e      	beq.n	800ead6 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 800ea38:	2300      	movs	r3, #0
 800ea3a:	613b      	str	r3, [r7, #16]
 800ea3c:	693b      	ldr	r3, [r7, #16]
 800ea3e:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 800ea40:	e021      	b.n	800ea86 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	6a1a      	ldr	r2, [r3, #32]
 800ea46:	697b      	ldr	r3, [r7, #20]
 800ea48:	1c59      	adds	r1, r3, #1
 800ea4a:	6179      	str	r1, [r7, #20]
 800ea4c:	4413      	add	r3, r2
 800ea4e:	781b      	ldrb	r3, [r3, #0]
 800ea50:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 800ea52:	7bfb      	ldrb	r3, [r7, #15]
 800ea54:	2b20      	cmp	r3, #32
 800ea56:	d100      	bne.n	800ea5a <get_fileinfo+0x3a>
 800ea58:	e015      	b.n	800ea86 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800ea5a:	7bfb      	ldrb	r3, [r7, #15]
 800ea5c:	2b05      	cmp	r3, #5
 800ea5e:	d101      	bne.n	800ea64 <get_fileinfo+0x44>
 800ea60:	23e5      	movs	r3, #229	; 0xe5
 800ea62:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800ea64:	697b      	ldr	r3, [r7, #20]
 800ea66:	2b09      	cmp	r3, #9
 800ea68:	d106      	bne.n	800ea78 <get_fileinfo+0x58>
 800ea6a:	693b      	ldr	r3, [r7, #16]
 800ea6c:	1c5a      	adds	r2, r3, #1
 800ea6e:	613a      	str	r2, [r7, #16]
 800ea70:	683a      	ldr	r2, [r7, #0]
 800ea72:	4413      	add	r3, r2
 800ea74:	222e      	movs	r2, #46	; 0x2e
 800ea76:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800ea78:	693b      	ldr	r3, [r7, #16]
 800ea7a:	1c5a      	adds	r2, r3, #1
 800ea7c:	613a      	str	r2, [r7, #16]
 800ea7e:	683a      	ldr	r2, [r7, #0]
 800ea80:	4413      	add	r3, r2
 800ea82:	7bfa      	ldrb	r2, [r7, #15]
 800ea84:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800ea86:	697b      	ldr	r3, [r7, #20]
 800ea88:	2b0a      	cmp	r3, #10
 800ea8a:	d9da      	bls.n	800ea42 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 800ea8c:	683a      	ldr	r2, [r7, #0]
 800ea8e:	693b      	ldr	r3, [r7, #16]
 800ea90:	4413      	add	r3, r2
 800ea92:	3309      	adds	r3, #9
 800ea94:	2200      	movs	r2, #0
 800ea96:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	6a1b      	ldr	r3, [r3, #32]
 800ea9c:	7ada      	ldrb	r2, [r3, #11]
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6a1b      	ldr	r3, [r3, #32]
 800eaa6:	331c      	adds	r3, #28
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	f7fe fe7f 	bl	800d7ac <ld_dword>
 800eaae:	4602      	mov	r2, r0
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	6a1b      	ldr	r3, [r3, #32]
 800eab8:	3316      	adds	r3, #22
 800eaba:	4618      	mov	r0, r3
 800eabc:	f7fe fe76 	bl	800d7ac <ld_dword>
 800eac0:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800eac2:	68bb      	ldr	r3, [r7, #8]
 800eac4:	b29a      	uxth	r2, r3
 800eac6:	683b      	ldr	r3, [r7, #0]
 800eac8:	80da      	strh	r2, [r3, #6]
 800eaca:	68bb      	ldr	r3, [r7, #8]
 800eacc:	0c1b      	lsrs	r3, r3, #16
 800eace:	b29a      	uxth	r2, r3
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	809a      	strh	r2, [r3, #4]
 800ead4:	e000      	b.n	800ead8 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ead6:	bf00      	nop
}
 800ead8:	3718      	adds	r7, #24
 800eada:	46bd      	mov	sp, r7
 800eadc:	bd80      	pop	{r7, pc}
	...

0800eae0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b088      	sub	sp, #32
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
 800eae8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	60fb      	str	r3, [r7, #12]
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	3324      	adds	r3, #36	; 0x24
 800eaf4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800eaf6:	220b      	movs	r2, #11
 800eaf8:	2120      	movs	r1, #32
 800eafa:	68b8      	ldr	r0, [r7, #8]
 800eafc:	f7fe fee1 	bl	800d8c2 <mem_set>
	si = i = 0; ni = 8;
 800eb00:	2300      	movs	r3, #0
 800eb02:	613b      	str	r3, [r7, #16]
 800eb04:	693b      	ldr	r3, [r7, #16]
 800eb06:	617b      	str	r3, [r7, #20]
 800eb08:	2308      	movs	r3, #8
 800eb0a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800eb0c:	697b      	ldr	r3, [r7, #20]
 800eb0e:	1c5a      	adds	r2, r3, #1
 800eb10:	617a      	str	r2, [r7, #20]
 800eb12:	68fa      	ldr	r2, [r7, #12]
 800eb14:	4413      	add	r3, r2
 800eb16:	781b      	ldrb	r3, [r3, #0]
 800eb18:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800eb1a:	7ffb      	ldrb	r3, [r7, #31]
 800eb1c:	2b20      	cmp	r3, #32
 800eb1e:	d94e      	bls.n	800ebbe <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800eb20:	7ffb      	ldrb	r3, [r7, #31]
 800eb22:	2b2f      	cmp	r3, #47	; 0x2f
 800eb24:	d006      	beq.n	800eb34 <create_name+0x54>
 800eb26:	7ffb      	ldrb	r3, [r7, #31]
 800eb28:	2b5c      	cmp	r3, #92	; 0x5c
 800eb2a:	d110      	bne.n	800eb4e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800eb2c:	e002      	b.n	800eb34 <create_name+0x54>
 800eb2e:	697b      	ldr	r3, [r7, #20]
 800eb30:	3301      	adds	r3, #1
 800eb32:	617b      	str	r3, [r7, #20]
 800eb34:	68fa      	ldr	r2, [r7, #12]
 800eb36:	697b      	ldr	r3, [r7, #20]
 800eb38:	4413      	add	r3, r2
 800eb3a:	781b      	ldrb	r3, [r3, #0]
 800eb3c:	2b2f      	cmp	r3, #47	; 0x2f
 800eb3e:	d0f6      	beq.n	800eb2e <create_name+0x4e>
 800eb40:	68fa      	ldr	r2, [r7, #12]
 800eb42:	697b      	ldr	r3, [r7, #20]
 800eb44:	4413      	add	r3, r2
 800eb46:	781b      	ldrb	r3, [r3, #0]
 800eb48:	2b5c      	cmp	r3, #92	; 0x5c
 800eb4a:	d0f0      	beq.n	800eb2e <create_name+0x4e>
			break;
 800eb4c:	e038      	b.n	800ebc0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800eb4e:	7ffb      	ldrb	r3, [r7, #31]
 800eb50:	2b2e      	cmp	r3, #46	; 0x2e
 800eb52:	d003      	beq.n	800eb5c <create_name+0x7c>
 800eb54:	693a      	ldr	r2, [r7, #16]
 800eb56:	69bb      	ldr	r3, [r7, #24]
 800eb58:	429a      	cmp	r2, r3
 800eb5a:	d30c      	bcc.n	800eb76 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800eb5c:	69bb      	ldr	r3, [r7, #24]
 800eb5e:	2b0b      	cmp	r3, #11
 800eb60:	d002      	beq.n	800eb68 <create_name+0x88>
 800eb62:	7ffb      	ldrb	r3, [r7, #31]
 800eb64:	2b2e      	cmp	r3, #46	; 0x2e
 800eb66:	d001      	beq.n	800eb6c <create_name+0x8c>
 800eb68:	2306      	movs	r3, #6
 800eb6a:	e044      	b.n	800ebf6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800eb6c:	2308      	movs	r3, #8
 800eb6e:	613b      	str	r3, [r7, #16]
 800eb70:	230b      	movs	r3, #11
 800eb72:	61bb      	str	r3, [r7, #24]
			continue;
 800eb74:	e022      	b.n	800ebbc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800eb76:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	da04      	bge.n	800eb88 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800eb7e:	7ffb      	ldrb	r3, [r7, #31]
 800eb80:	3b80      	subs	r3, #128	; 0x80
 800eb82:	4a1f      	ldr	r2, [pc, #124]	; (800ec00 <create_name+0x120>)
 800eb84:	5cd3      	ldrb	r3, [r2, r3]
 800eb86:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800eb88:	7ffb      	ldrb	r3, [r7, #31]
 800eb8a:	4619      	mov	r1, r3
 800eb8c:	481d      	ldr	r0, [pc, #116]	; (800ec04 <create_name+0x124>)
 800eb8e:	f7fe fed9 	bl	800d944 <chk_chr>
 800eb92:	4603      	mov	r3, r0
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d001      	beq.n	800eb9c <create_name+0xbc>
 800eb98:	2306      	movs	r3, #6
 800eb9a:	e02c      	b.n	800ebf6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800eb9c:	7ffb      	ldrb	r3, [r7, #31]
 800eb9e:	2b60      	cmp	r3, #96	; 0x60
 800eba0:	d905      	bls.n	800ebae <create_name+0xce>
 800eba2:	7ffb      	ldrb	r3, [r7, #31]
 800eba4:	2b7a      	cmp	r3, #122	; 0x7a
 800eba6:	d802      	bhi.n	800ebae <create_name+0xce>
 800eba8:	7ffb      	ldrb	r3, [r7, #31]
 800ebaa:	3b20      	subs	r3, #32
 800ebac:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800ebae:	693b      	ldr	r3, [r7, #16]
 800ebb0:	1c5a      	adds	r2, r3, #1
 800ebb2:	613a      	str	r2, [r7, #16]
 800ebb4:	68ba      	ldr	r2, [r7, #8]
 800ebb6:	4413      	add	r3, r2
 800ebb8:	7ffa      	ldrb	r2, [r7, #31]
 800ebba:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ebbc:	e7a6      	b.n	800eb0c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ebbe:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800ebc0:	68fa      	ldr	r2, [r7, #12]
 800ebc2:	697b      	ldr	r3, [r7, #20]
 800ebc4:	441a      	add	r2, r3
 800ebc6:	683b      	ldr	r3, [r7, #0]
 800ebc8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ebca:	693b      	ldr	r3, [r7, #16]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d101      	bne.n	800ebd4 <create_name+0xf4>
 800ebd0:	2306      	movs	r3, #6
 800ebd2:	e010      	b.n	800ebf6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ebd4:	68bb      	ldr	r3, [r7, #8]
 800ebd6:	781b      	ldrb	r3, [r3, #0]
 800ebd8:	2be5      	cmp	r3, #229	; 0xe5
 800ebda:	d102      	bne.n	800ebe2 <create_name+0x102>
 800ebdc:	68bb      	ldr	r3, [r7, #8]
 800ebde:	2205      	movs	r2, #5
 800ebe0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ebe2:	7ffb      	ldrb	r3, [r7, #31]
 800ebe4:	2b20      	cmp	r3, #32
 800ebe6:	d801      	bhi.n	800ebec <create_name+0x10c>
 800ebe8:	2204      	movs	r2, #4
 800ebea:	e000      	b.n	800ebee <create_name+0x10e>
 800ebec:	2200      	movs	r2, #0
 800ebee:	68bb      	ldr	r3, [r7, #8]
 800ebf0:	330b      	adds	r3, #11
 800ebf2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ebf4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	3720      	adds	r7, #32
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bd80      	pop	{r7, pc}
 800ebfe:	bf00      	nop
 800ec00:	08015110 	.word	0x08015110
 800ec04:	08015098 	.word	0x08015098

0800ec08 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b086      	sub	sp, #24
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
 800ec10:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ec16:	693b      	ldr	r3, [r7, #16]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ec1c:	e002      	b.n	800ec24 <follow_path+0x1c>
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	3301      	adds	r3, #1
 800ec22:	603b      	str	r3, [r7, #0]
 800ec24:	683b      	ldr	r3, [r7, #0]
 800ec26:	781b      	ldrb	r3, [r3, #0]
 800ec28:	2b2f      	cmp	r3, #47	; 0x2f
 800ec2a:	d0f8      	beq.n	800ec1e <follow_path+0x16>
 800ec2c:	683b      	ldr	r3, [r7, #0]
 800ec2e:	781b      	ldrb	r3, [r3, #0]
 800ec30:	2b5c      	cmp	r3, #92	; 0x5c
 800ec32:	d0f4      	beq.n	800ec1e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ec34:	693b      	ldr	r3, [r7, #16]
 800ec36:	2200      	movs	r2, #0
 800ec38:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	781b      	ldrb	r3, [r3, #0]
 800ec3e:	2b1f      	cmp	r3, #31
 800ec40:	d80a      	bhi.n	800ec58 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	2280      	movs	r2, #128	; 0x80
 800ec46:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ec4a:	2100      	movs	r1, #0
 800ec4c:	6878      	ldr	r0, [r7, #4]
 800ec4e:	f7ff fc1e 	bl	800e48e <dir_sdi>
 800ec52:	4603      	mov	r3, r0
 800ec54:	75fb      	strb	r3, [r7, #23]
 800ec56:	e048      	b.n	800ecea <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ec58:	463b      	mov	r3, r7
 800ec5a:	4619      	mov	r1, r3
 800ec5c:	6878      	ldr	r0, [r7, #4]
 800ec5e:	f7ff ff3f 	bl	800eae0 <create_name>
 800ec62:	4603      	mov	r3, r0
 800ec64:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ec66:	7dfb      	ldrb	r3, [r7, #23]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d139      	bne.n	800ece0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	f7ff fe50 	bl	800e912 <dir_find>
 800ec72:	4603      	mov	r3, r0
 800ec74:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ec7c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ec7e:	7dfb      	ldrb	r3, [r7, #23]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d00a      	beq.n	800ec9a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ec84:	7dfb      	ldrb	r3, [r7, #23]
 800ec86:	2b04      	cmp	r3, #4
 800ec88:	d12c      	bne.n	800ece4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ec8a:	7afb      	ldrb	r3, [r7, #11]
 800ec8c:	f003 0304 	and.w	r3, r3, #4
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d127      	bne.n	800ece4 <follow_path+0xdc>
 800ec94:	2305      	movs	r3, #5
 800ec96:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ec98:	e024      	b.n	800ece4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ec9a:	7afb      	ldrb	r3, [r7, #11]
 800ec9c:	f003 0304 	and.w	r3, r3, #4
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d121      	bne.n	800ece8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800eca4:	693b      	ldr	r3, [r7, #16]
 800eca6:	799b      	ldrb	r3, [r3, #6]
 800eca8:	f003 0310 	and.w	r3, r3, #16
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d102      	bne.n	800ecb6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ecb0:	2305      	movs	r3, #5
 800ecb2:	75fb      	strb	r3, [r7, #23]
 800ecb4:	e019      	b.n	800ecea <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	695b      	ldr	r3, [r3, #20]
 800ecc0:	68fa      	ldr	r2, [r7, #12]
 800ecc2:	8992      	ldrh	r2, [r2, #12]
 800ecc4:	fbb3 f0f2 	udiv	r0, r3, r2
 800ecc8:	fb02 f200 	mul.w	r2, r2, r0
 800eccc:	1a9b      	subs	r3, r3, r2
 800ecce:	440b      	add	r3, r1
 800ecd0:	4619      	mov	r1, r3
 800ecd2:	68f8      	ldr	r0, [r7, #12]
 800ecd4:	f7ff fd81 	bl	800e7da <ld_clust>
 800ecd8:	4602      	mov	r2, r0
 800ecda:	693b      	ldr	r3, [r7, #16]
 800ecdc:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ecde:	e7bb      	b.n	800ec58 <follow_path+0x50>
			if (res != FR_OK) break;
 800ece0:	bf00      	nop
 800ece2:	e002      	b.n	800ecea <follow_path+0xe2>
				break;
 800ece4:	bf00      	nop
 800ece6:	e000      	b.n	800ecea <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ece8:	bf00      	nop
			}
		}
	}

	return res;
 800ecea:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecec:	4618      	mov	r0, r3
 800ecee:	3718      	adds	r7, #24
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	bd80      	pop	{r7, pc}

0800ecf4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ecf4:	b480      	push	{r7}
 800ecf6:	b087      	sub	sp, #28
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ecfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed00:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d031      	beq.n	800ed6e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	617b      	str	r3, [r7, #20]
 800ed10:	e002      	b.n	800ed18 <get_ldnumber+0x24>
 800ed12:	697b      	ldr	r3, [r7, #20]
 800ed14:	3301      	adds	r3, #1
 800ed16:	617b      	str	r3, [r7, #20]
 800ed18:	697b      	ldr	r3, [r7, #20]
 800ed1a:	781b      	ldrb	r3, [r3, #0]
 800ed1c:	2b20      	cmp	r3, #32
 800ed1e:	d903      	bls.n	800ed28 <get_ldnumber+0x34>
 800ed20:	697b      	ldr	r3, [r7, #20]
 800ed22:	781b      	ldrb	r3, [r3, #0]
 800ed24:	2b3a      	cmp	r3, #58	; 0x3a
 800ed26:	d1f4      	bne.n	800ed12 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ed28:	697b      	ldr	r3, [r7, #20]
 800ed2a:	781b      	ldrb	r3, [r3, #0]
 800ed2c:	2b3a      	cmp	r3, #58	; 0x3a
 800ed2e:	d11c      	bne.n	800ed6a <get_ldnumber+0x76>
			tp = *path;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	1c5a      	adds	r2, r3, #1
 800ed3a:	60fa      	str	r2, [r7, #12]
 800ed3c:	781b      	ldrb	r3, [r3, #0]
 800ed3e:	3b30      	subs	r3, #48	; 0x30
 800ed40:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ed42:	68bb      	ldr	r3, [r7, #8]
 800ed44:	2b09      	cmp	r3, #9
 800ed46:	d80e      	bhi.n	800ed66 <get_ldnumber+0x72>
 800ed48:	68fa      	ldr	r2, [r7, #12]
 800ed4a:	697b      	ldr	r3, [r7, #20]
 800ed4c:	429a      	cmp	r2, r3
 800ed4e:	d10a      	bne.n	800ed66 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ed50:	68bb      	ldr	r3, [r7, #8]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d107      	bne.n	800ed66 <get_ldnumber+0x72>
					vol = (int)i;
 800ed56:	68bb      	ldr	r3, [r7, #8]
 800ed58:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ed5a:	697b      	ldr	r3, [r7, #20]
 800ed5c:	3301      	adds	r3, #1
 800ed5e:	617b      	str	r3, [r7, #20]
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	697a      	ldr	r2, [r7, #20]
 800ed64:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ed66:	693b      	ldr	r3, [r7, #16]
 800ed68:	e002      	b.n	800ed70 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ed6e:	693b      	ldr	r3, [r7, #16]
}
 800ed70:	4618      	mov	r0, r3
 800ed72:	371c      	adds	r7, #28
 800ed74:	46bd      	mov	sp, r7
 800ed76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7a:	4770      	bx	lr

0800ed7c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b082      	sub	sp, #8
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
 800ed84:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	2200      	movs	r2, #0
 800ed8a:	70da      	strb	r2, [r3, #3]
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ed92:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ed94:	6839      	ldr	r1, [r7, #0]
 800ed96:	6878      	ldr	r0, [r7, #4]
 800ed98:	f7fe ffa0 	bl	800dcdc <move_window>
 800ed9c:	4603      	mov	r3, r0
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d001      	beq.n	800eda6 <check_fs+0x2a>
 800eda2:	2304      	movs	r3, #4
 800eda4:	e038      	b.n	800ee18 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	3334      	adds	r3, #52	; 0x34
 800edaa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800edae:	4618      	mov	r0, r3
 800edb0:	f7fe fce4 	bl	800d77c <ld_word>
 800edb4:	4603      	mov	r3, r0
 800edb6:	461a      	mov	r2, r3
 800edb8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800edbc:	429a      	cmp	r2, r3
 800edbe:	d001      	beq.n	800edc4 <check_fs+0x48>
 800edc0:	2303      	movs	r3, #3
 800edc2:	e029      	b.n	800ee18 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800edca:	2be9      	cmp	r3, #233	; 0xe9
 800edcc:	d009      	beq.n	800ede2 <check_fs+0x66>
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800edd4:	2beb      	cmp	r3, #235	; 0xeb
 800edd6:	d11e      	bne.n	800ee16 <check_fs+0x9a>
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800edde:	2b90      	cmp	r3, #144	; 0x90
 800ede0:	d119      	bne.n	800ee16 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	3334      	adds	r3, #52	; 0x34
 800ede6:	3336      	adds	r3, #54	; 0x36
 800ede8:	4618      	mov	r0, r3
 800edea:	f7fe fcdf 	bl	800d7ac <ld_dword>
 800edee:	4603      	mov	r3, r0
 800edf0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800edf4:	4a0a      	ldr	r2, [pc, #40]	; (800ee20 <check_fs+0xa4>)
 800edf6:	4293      	cmp	r3, r2
 800edf8:	d101      	bne.n	800edfe <check_fs+0x82>
 800edfa:	2300      	movs	r3, #0
 800edfc:	e00c      	b.n	800ee18 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	3334      	adds	r3, #52	; 0x34
 800ee02:	3352      	adds	r3, #82	; 0x52
 800ee04:	4618      	mov	r0, r3
 800ee06:	f7fe fcd1 	bl	800d7ac <ld_dword>
 800ee0a:	4602      	mov	r2, r0
 800ee0c:	4b05      	ldr	r3, [pc, #20]	; (800ee24 <check_fs+0xa8>)
 800ee0e:	429a      	cmp	r2, r3
 800ee10:	d101      	bne.n	800ee16 <check_fs+0x9a>
 800ee12:	2300      	movs	r3, #0
 800ee14:	e000      	b.n	800ee18 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ee16:	2302      	movs	r3, #2
}
 800ee18:	4618      	mov	r0, r3
 800ee1a:	3708      	adds	r7, #8
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	bd80      	pop	{r7, pc}
 800ee20:	00544146 	.word	0x00544146
 800ee24:	33544146 	.word	0x33544146

0800ee28 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b096      	sub	sp, #88	; 0x58
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	60f8      	str	r0, [r7, #12]
 800ee30:	60b9      	str	r1, [r7, #8]
 800ee32:	4613      	mov	r3, r2
 800ee34:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ee36:	68bb      	ldr	r3, [r7, #8]
 800ee38:	2200      	movs	r2, #0
 800ee3a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ee3c:	68f8      	ldr	r0, [r7, #12]
 800ee3e:	f7ff ff59 	bl	800ecf4 <get_ldnumber>
 800ee42:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ee44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	da01      	bge.n	800ee4e <find_volume+0x26>
 800ee4a:	230b      	movs	r3, #11
 800ee4c:	e265      	b.n	800f31a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ee4e:	4ab0      	ldr	r2, [pc, #704]	; (800f110 <find_volume+0x2e8>)
 800ee50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee56:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ee58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d101      	bne.n	800ee62 <find_volume+0x3a>
 800ee5e:	230c      	movs	r3, #12
 800ee60:	e25b      	b.n	800f31a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ee62:	68bb      	ldr	r3, [r7, #8]
 800ee64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee66:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ee68:	79fb      	ldrb	r3, [r7, #7]
 800ee6a:	f023 0301 	bic.w	r3, r3, #1
 800ee6e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ee70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee72:	781b      	ldrb	r3, [r3, #0]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d01a      	beq.n	800eeae <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ee78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee7a:	785b      	ldrb	r3, [r3, #1]
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f7fe fbdf 	bl	800d640 <disk_status>
 800ee82:	4603      	mov	r3, r0
 800ee84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ee88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ee8c:	f003 0301 	and.w	r3, r3, #1
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d10c      	bne.n	800eeae <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ee94:	79fb      	ldrb	r3, [r7, #7]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d007      	beq.n	800eeaa <find_volume+0x82>
 800ee9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ee9e:	f003 0304 	and.w	r3, r3, #4
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d001      	beq.n	800eeaa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800eea6:	230a      	movs	r3, #10
 800eea8:	e237      	b.n	800f31a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800eeaa:	2300      	movs	r3, #0
 800eeac:	e235      	b.n	800f31a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800eeae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800eeb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eeb6:	b2da      	uxtb	r2, r3
 800eeb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeba:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800eebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eebe:	785b      	ldrb	r3, [r3, #1]
 800eec0:	4618      	mov	r0, r3
 800eec2:	f7fe fbd7 	bl	800d674 <disk_initialize>
 800eec6:	4603      	mov	r3, r0
 800eec8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800eecc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eed0:	f003 0301 	and.w	r3, r3, #1
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d001      	beq.n	800eedc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800eed8:	2303      	movs	r3, #3
 800eeda:	e21e      	b.n	800f31a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800eedc:	79fb      	ldrb	r3, [r7, #7]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d007      	beq.n	800eef2 <find_volume+0xca>
 800eee2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eee6:	f003 0304 	and.w	r3, r3, #4
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d001      	beq.n	800eef2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800eeee:	230a      	movs	r3, #10
 800eef0:	e213      	b.n	800f31a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800eef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eef4:	7858      	ldrb	r0, [r3, #1]
 800eef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eef8:	330c      	adds	r3, #12
 800eefa:	461a      	mov	r2, r3
 800eefc:	2102      	movs	r1, #2
 800eefe:	f7fe fc1f 	bl	800d740 <disk_ioctl>
 800ef02:	4603      	mov	r3, r0
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d001      	beq.n	800ef0c <find_volume+0xe4>
 800ef08:	2301      	movs	r3, #1
 800ef0a:	e206      	b.n	800f31a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800ef0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef0e:	899b      	ldrh	r3, [r3, #12]
 800ef10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ef14:	d80d      	bhi.n	800ef32 <find_volume+0x10a>
 800ef16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef18:	899b      	ldrh	r3, [r3, #12]
 800ef1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef1e:	d308      	bcc.n	800ef32 <find_volume+0x10a>
 800ef20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef22:	899b      	ldrh	r3, [r3, #12]
 800ef24:	461a      	mov	r2, r3
 800ef26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef28:	899b      	ldrh	r3, [r3, #12]
 800ef2a:	3b01      	subs	r3, #1
 800ef2c:	4013      	ands	r3, r2
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d001      	beq.n	800ef36 <find_volume+0x10e>
 800ef32:	2301      	movs	r3, #1
 800ef34:	e1f1      	b.n	800f31a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ef36:	2300      	movs	r3, #0
 800ef38:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ef3a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ef3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ef3e:	f7ff ff1d 	bl	800ed7c <check_fs>
 800ef42:	4603      	mov	r3, r0
 800ef44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ef48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ef4c:	2b02      	cmp	r3, #2
 800ef4e:	d14b      	bne.n	800efe8 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ef50:	2300      	movs	r3, #0
 800ef52:	643b      	str	r3, [r7, #64]	; 0x40
 800ef54:	e01f      	b.n	800ef96 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ef56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef58:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ef5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef5e:	011b      	lsls	r3, r3, #4
 800ef60:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ef64:	4413      	add	r3, r2
 800ef66:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ef68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef6a:	3304      	adds	r3, #4
 800ef6c:	781b      	ldrb	r3, [r3, #0]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d006      	beq.n	800ef80 <find_volume+0x158>
 800ef72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef74:	3308      	adds	r3, #8
 800ef76:	4618      	mov	r0, r3
 800ef78:	f7fe fc18 	bl	800d7ac <ld_dword>
 800ef7c:	4602      	mov	r2, r0
 800ef7e:	e000      	b.n	800ef82 <find_volume+0x15a>
 800ef80:	2200      	movs	r2, #0
 800ef82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef84:	009b      	lsls	r3, r3, #2
 800ef86:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ef8a:	440b      	add	r3, r1
 800ef8c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ef90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef92:	3301      	adds	r3, #1
 800ef94:	643b      	str	r3, [r7, #64]	; 0x40
 800ef96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef98:	2b03      	cmp	r3, #3
 800ef9a:	d9dc      	bls.n	800ef56 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800efa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d002      	beq.n	800efac <find_volume+0x184>
 800efa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efa8:	3b01      	subs	r3, #1
 800efaa:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800efac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efae:	009b      	lsls	r3, r3, #2
 800efb0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800efb4:	4413      	add	r3, r2
 800efb6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800efba:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800efbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d005      	beq.n	800efce <find_volume+0x1a6>
 800efc2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800efc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800efc6:	f7ff fed9 	bl	800ed7c <check_fs>
 800efca:	4603      	mov	r3, r0
 800efcc:	e000      	b.n	800efd0 <find_volume+0x1a8>
 800efce:	2303      	movs	r3, #3
 800efd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800efd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800efd8:	2b01      	cmp	r3, #1
 800efda:	d905      	bls.n	800efe8 <find_volume+0x1c0>
 800efdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efde:	3301      	adds	r3, #1
 800efe0:	643b      	str	r3, [r7, #64]	; 0x40
 800efe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efe4:	2b03      	cmp	r3, #3
 800efe6:	d9e1      	bls.n	800efac <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800efe8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800efec:	2b04      	cmp	r3, #4
 800efee:	d101      	bne.n	800eff4 <find_volume+0x1cc>
 800eff0:	2301      	movs	r3, #1
 800eff2:	e192      	b.n	800f31a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800eff4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eff8:	2b01      	cmp	r3, #1
 800effa:	d901      	bls.n	800f000 <find_volume+0x1d8>
 800effc:	230d      	movs	r3, #13
 800effe:	e18c      	b.n	800f31a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f002:	3334      	adds	r3, #52	; 0x34
 800f004:	330b      	adds	r3, #11
 800f006:	4618      	mov	r0, r3
 800f008:	f7fe fbb8 	bl	800d77c <ld_word>
 800f00c:	4603      	mov	r3, r0
 800f00e:	461a      	mov	r2, r3
 800f010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f012:	899b      	ldrh	r3, [r3, #12]
 800f014:	429a      	cmp	r2, r3
 800f016:	d001      	beq.n	800f01c <find_volume+0x1f4>
 800f018:	230d      	movs	r3, #13
 800f01a:	e17e      	b.n	800f31a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f01c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f01e:	3334      	adds	r3, #52	; 0x34
 800f020:	3316      	adds	r3, #22
 800f022:	4618      	mov	r0, r3
 800f024:	f7fe fbaa 	bl	800d77c <ld_word>
 800f028:	4603      	mov	r3, r0
 800f02a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f02c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d106      	bne.n	800f040 <find_volume+0x218>
 800f032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f034:	3334      	adds	r3, #52	; 0x34
 800f036:	3324      	adds	r3, #36	; 0x24
 800f038:	4618      	mov	r0, r3
 800f03a:	f7fe fbb7 	bl	800d7ac <ld_dword>
 800f03e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800f040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f042:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f044:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f048:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800f04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f04e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f052:	789b      	ldrb	r3, [r3, #2]
 800f054:	2b01      	cmp	r3, #1
 800f056:	d005      	beq.n	800f064 <find_volume+0x23c>
 800f058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f05a:	789b      	ldrb	r3, [r3, #2]
 800f05c:	2b02      	cmp	r3, #2
 800f05e:	d001      	beq.n	800f064 <find_volume+0x23c>
 800f060:	230d      	movs	r3, #13
 800f062:	e15a      	b.n	800f31a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f066:	789b      	ldrb	r3, [r3, #2]
 800f068:	461a      	mov	r2, r3
 800f06a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f06c:	fb02 f303 	mul.w	r3, r2, r3
 800f070:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f074:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f078:	b29a      	uxth	r2, r3
 800f07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f07c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f080:	895b      	ldrh	r3, [r3, #10]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d008      	beq.n	800f098 <find_volume+0x270>
 800f086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f088:	895b      	ldrh	r3, [r3, #10]
 800f08a:	461a      	mov	r2, r3
 800f08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f08e:	895b      	ldrh	r3, [r3, #10]
 800f090:	3b01      	subs	r3, #1
 800f092:	4013      	ands	r3, r2
 800f094:	2b00      	cmp	r3, #0
 800f096:	d001      	beq.n	800f09c <find_volume+0x274>
 800f098:	230d      	movs	r3, #13
 800f09a:	e13e      	b.n	800f31a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f09e:	3334      	adds	r3, #52	; 0x34
 800f0a0:	3311      	adds	r3, #17
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	f7fe fb6a 	bl	800d77c <ld_word>
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	461a      	mov	r2, r3
 800f0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ae:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0b2:	891b      	ldrh	r3, [r3, #8]
 800f0b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f0b6:	8992      	ldrh	r2, [r2, #12]
 800f0b8:	0952      	lsrs	r2, r2, #5
 800f0ba:	b292      	uxth	r2, r2
 800f0bc:	fbb3 f1f2 	udiv	r1, r3, r2
 800f0c0:	fb02 f201 	mul.w	r2, r2, r1
 800f0c4:	1a9b      	subs	r3, r3, r2
 800f0c6:	b29b      	uxth	r3, r3
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d001      	beq.n	800f0d0 <find_volume+0x2a8>
 800f0cc:	230d      	movs	r3, #13
 800f0ce:	e124      	b.n	800f31a <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0d2:	3334      	adds	r3, #52	; 0x34
 800f0d4:	3313      	adds	r3, #19
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	f7fe fb50 	bl	800d77c <ld_word>
 800f0dc:	4603      	mov	r3, r0
 800f0de:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f0e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d106      	bne.n	800f0f4 <find_volume+0x2cc>
 800f0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0e8:	3334      	adds	r3, #52	; 0x34
 800f0ea:	3320      	adds	r3, #32
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	f7fe fb5d 	bl	800d7ac <ld_dword>
 800f0f2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0f6:	3334      	adds	r3, #52	; 0x34
 800f0f8:	330e      	adds	r3, #14
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	f7fe fb3e 	bl	800d77c <ld_word>
 800f100:	4603      	mov	r3, r0
 800f102:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f104:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f106:	2b00      	cmp	r3, #0
 800f108:	d104      	bne.n	800f114 <find_volume+0x2ec>
 800f10a:	230d      	movs	r3, #13
 800f10c:	e105      	b.n	800f31a <find_volume+0x4f2>
 800f10e:	bf00      	nop
 800f110:	20000838 	.word	0x20000838

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f114:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f118:	4413      	add	r3, r2
 800f11a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f11c:	8911      	ldrh	r1, [r2, #8]
 800f11e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f120:	8992      	ldrh	r2, [r2, #12]
 800f122:	0952      	lsrs	r2, r2, #5
 800f124:	b292      	uxth	r2, r2
 800f126:	fbb1 f2f2 	udiv	r2, r1, r2
 800f12a:	b292      	uxth	r2, r2
 800f12c:	4413      	add	r3, r2
 800f12e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f130:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f134:	429a      	cmp	r2, r3
 800f136:	d201      	bcs.n	800f13c <find_volume+0x314>
 800f138:	230d      	movs	r3, #13
 800f13a:	e0ee      	b.n	800f31a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f13c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f140:	1ad3      	subs	r3, r2, r3
 800f142:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f144:	8952      	ldrh	r2, [r2, #10]
 800f146:	fbb3 f3f2 	udiv	r3, r3, r2
 800f14a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d101      	bne.n	800f156 <find_volume+0x32e>
 800f152:	230d      	movs	r3, #13
 800f154:	e0e1      	b.n	800f31a <find_volume+0x4f2>
		fmt = FS_FAT32;
 800f156:	2303      	movs	r3, #3
 800f158:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f15e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f162:	4293      	cmp	r3, r2
 800f164:	d802      	bhi.n	800f16c <find_volume+0x344>
 800f166:	2302      	movs	r3, #2
 800f168:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f16e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f172:	4293      	cmp	r3, r2
 800f174:	d802      	bhi.n	800f17c <find_volume+0x354>
 800f176:	2301      	movs	r3, #1
 800f178:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f17e:	1c9a      	adds	r2, r3, #2
 800f180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f182:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800f184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f186:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f188:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f18a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f18c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f18e:	441a      	add	r2, r3
 800f190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f192:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800f194:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f198:	441a      	add	r2, r3
 800f19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f19c:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800f19e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f1a2:	2b03      	cmp	r3, #3
 800f1a4:	d11e      	bne.n	800f1e4 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f1a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1a8:	3334      	adds	r3, #52	; 0x34
 800f1aa:	332a      	adds	r3, #42	; 0x2a
 800f1ac:	4618      	mov	r0, r3
 800f1ae:	f7fe fae5 	bl	800d77c <ld_word>
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d001      	beq.n	800f1bc <find_volume+0x394>
 800f1b8:	230d      	movs	r3, #13
 800f1ba:	e0ae      	b.n	800f31a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f1bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1be:	891b      	ldrh	r3, [r3, #8]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d001      	beq.n	800f1c8 <find_volume+0x3a0>
 800f1c4:	230d      	movs	r3, #13
 800f1c6:	e0a8      	b.n	800f31a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1ca:	3334      	adds	r3, #52	; 0x34
 800f1cc:	332c      	adds	r3, #44	; 0x2c
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	f7fe faec 	bl	800d7ac <ld_dword>
 800f1d4:	4602      	mov	r2, r0
 800f1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1d8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1dc:	699b      	ldr	r3, [r3, #24]
 800f1de:	009b      	lsls	r3, r3, #2
 800f1e0:	647b      	str	r3, [r7, #68]	; 0x44
 800f1e2:	e01f      	b.n	800f224 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1e6:	891b      	ldrh	r3, [r3, #8]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d101      	bne.n	800f1f0 <find_volume+0x3c8>
 800f1ec:	230d      	movs	r3, #13
 800f1ee:	e094      	b.n	800f31a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f1f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f1f6:	441a      	add	r2, r3
 800f1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1fa:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f1fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f200:	2b02      	cmp	r3, #2
 800f202:	d103      	bne.n	800f20c <find_volume+0x3e4>
 800f204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f206:	699b      	ldr	r3, [r3, #24]
 800f208:	005b      	lsls	r3, r3, #1
 800f20a:	e00a      	b.n	800f222 <find_volume+0x3fa>
 800f20c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f20e:	699a      	ldr	r2, [r3, #24]
 800f210:	4613      	mov	r3, r2
 800f212:	005b      	lsls	r3, r3, #1
 800f214:	4413      	add	r3, r2
 800f216:	085a      	lsrs	r2, r3, #1
 800f218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f21a:	699b      	ldr	r3, [r3, #24]
 800f21c:	f003 0301 	and.w	r3, r3, #1
 800f220:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f222:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f226:	69da      	ldr	r2, [r3, #28]
 800f228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f22a:	899b      	ldrh	r3, [r3, #12]
 800f22c:	4619      	mov	r1, r3
 800f22e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f230:	440b      	add	r3, r1
 800f232:	3b01      	subs	r3, #1
 800f234:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f236:	8989      	ldrh	r1, [r1, #12]
 800f238:	fbb3 f3f1 	udiv	r3, r3, r1
 800f23c:	429a      	cmp	r2, r3
 800f23e:	d201      	bcs.n	800f244 <find_volume+0x41c>
 800f240:	230d      	movs	r3, #13
 800f242:	e06a      	b.n	800f31a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f246:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f24a:	615a      	str	r2, [r3, #20]
 800f24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f24e:	695a      	ldr	r2, [r3, #20]
 800f250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f252:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800f254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f256:	2280      	movs	r2, #128	; 0x80
 800f258:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f25a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f25e:	2b03      	cmp	r3, #3
 800f260:	d149      	bne.n	800f2f6 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f264:	3334      	adds	r3, #52	; 0x34
 800f266:	3330      	adds	r3, #48	; 0x30
 800f268:	4618      	mov	r0, r3
 800f26a:	f7fe fa87 	bl	800d77c <ld_word>
 800f26e:	4603      	mov	r3, r0
 800f270:	2b01      	cmp	r3, #1
 800f272:	d140      	bne.n	800f2f6 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f274:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f276:	3301      	adds	r3, #1
 800f278:	4619      	mov	r1, r3
 800f27a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f27c:	f7fe fd2e 	bl	800dcdc <move_window>
 800f280:	4603      	mov	r3, r0
 800f282:	2b00      	cmp	r3, #0
 800f284:	d137      	bne.n	800f2f6 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800f286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f288:	2200      	movs	r2, #0
 800f28a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f28e:	3334      	adds	r3, #52	; 0x34
 800f290:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f294:	4618      	mov	r0, r3
 800f296:	f7fe fa71 	bl	800d77c <ld_word>
 800f29a:	4603      	mov	r3, r0
 800f29c:	461a      	mov	r2, r3
 800f29e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f2a2:	429a      	cmp	r2, r3
 800f2a4:	d127      	bne.n	800f2f6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2a8:	3334      	adds	r3, #52	; 0x34
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f7fe fa7e 	bl	800d7ac <ld_dword>
 800f2b0:	4602      	mov	r2, r0
 800f2b2:	4b1c      	ldr	r3, [pc, #112]	; (800f324 <find_volume+0x4fc>)
 800f2b4:	429a      	cmp	r2, r3
 800f2b6:	d11e      	bne.n	800f2f6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2ba:	3334      	adds	r3, #52	; 0x34
 800f2bc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	f7fe fa73 	bl	800d7ac <ld_dword>
 800f2c6:	4602      	mov	r2, r0
 800f2c8:	4b17      	ldr	r3, [pc, #92]	; (800f328 <find_volume+0x500>)
 800f2ca:	429a      	cmp	r2, r3
 800f2cc:	d113      	bne.n	800f2f6 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2d0:	3334      	adds	r3, #52	; 0x34
 800f2d2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f7fe fa68 	bl	800d7ac <ld_dword>
 800f2dc:	4602      	mov	r2, r0
 800f2de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2e0:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f2e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2e4:	3334      	adds	r3, #52	; 0x34
 800f2e6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	f7fe fa5e 	bl	800d7ac <ld_dword>
 800f2f0:	4602      	mov	r2, r0
 800f2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2f4:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f2f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2f8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f2fc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f2fe:	4b0b      	ldr	r3, [pc, #44]	; (800f32c <find_volume+0x504>)
 800f300:	881b      	ldrh	r3, [r3, #0]
 800f302:	3301      	adds	r3, #1
 800f304:	b29a      	uxth	r2, r3
 800f306:	4b09      	ldr	r3, [pc, #36]	; (800f32c <find_volume+0x504>)
 800f308:	801a      	strh	r2, [r3, #0]
 800f30a:	4b08      	ldr	r3, [pc, #32]	; (800f32c <find_volume+0x504>)
 800f30c:	881a      	ldrh	r2, [r3, #0]
 800f30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f310:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f312:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f314:	f7fe fc7a 	bl	800dc0c <clear_lock>
#endif
	return FR_OK;
 800f318:	2300      	movs	r3, #0
}
 800f31a:	4618      	mov	r0, r3
 800f31c:	3758      	adds	r7, #88	; 0x58
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}
 800f322:	bf00      	nop
 800f324:	41615252 	.word	0x41615252
 800f328:	61417272 	.word	0x61417272
 800f32c:	2000083c 	.word	0x2000083c

0800f330 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b084      	sub	sp, #16
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
 800f338:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f33a:	2309      	movs	r3, #9
 800f33c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d01c      	beq.n	800f37e <validate+0x4e>
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d018      	beq.n	800f37e <validate+0x4e>
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	781b      	ldrb	r3, [r3, #0]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d013      	beq.n	800f37e <validate+0x4e>
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	889a      	ldrh	r2, [r3, #4]
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	88db      	ldrh	r3, [r3, #6]
 800f360:	429a      	cmp	r2, r3
 800f362:	d10c      	bne.n	800f37e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	785b      	ldrb	r3, [r3, #1]
 800f36a:	4618      	mov	r0, r3
 800f36c:	f7fe f968 	bl	800d640 <disk_status>
 800f370:	4603      	mov	r3, r0
 800f372:	f003 0301 	and.w	r3, r3, #1
 800f376:	2b00      	cmp	r3, #0
 800f378:	d101      	bne.n	800f37e <validate+0x4e>
			res = FR_OK;
 800f37a:	2300      	movs	r3, #0
 800f37c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f37e:	7bfb      	ldrb	r3, [r7, #15]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d102      	bne.n	800f38a <validate+0x5a>
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	e000      	b.n	800f38c <validate+0x5c>
 800f38a:	2300      	movs	r3, #0
 800f38c:	683a      	ldr	r2, [r7, #0]
 800f38e:	6013      	str	r3, [r2, #0]
	return res;
 800f390:	7bfb      	ldrb	r3, [r7, #15]
}
 800f392:	4618      	mov	r0, r3
 800f394:	3710      	adds	r7, #16
 800f396:	46bd      	mov	sp, r7
 800f398:	bd80      	pop	{r7, pc}
	...

0800f39c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b088      	sub	sp, #32
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	60f8      	str	r0, [r7, #12]
 800f3a4:	60b9      	str	r1, [r7, #8]
 800f3a6:	4613      	mov	r3, r2
 800f3a8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f3aa:	68bb      	ldr	r3, [r7, #8]
 800f3ac:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f3ae:	f107 0310 	add.w	r3, r7, #16
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	f7ff fc9e 	bl	800ecf4 <get_ldnumber>
 800f3b8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f3ba:	69fb      	ldr	r3, [r7, #28]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	da01      	bge.n	800f3c4 <f_mount+0x28>
 800f3c0:	230b      	movs	r3, #11
 800f3c2:	e02b      	b.n	800f41c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f3c4:	4a17      	ldr	r2, [pc, #92]	; (800f424 <f_mount+0x88>)
 800f3c6:	69fb      	ldr	r3, [r7, #28]
 800f3c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3cc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f3ce:	69bb      	ldr	r3, [r7, #24]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d005      	beq.n	800f3e0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f3d4:	69b8      	ldr	r0, [r7, #24]
 800f3d6:	f7fe fc19 	bl	800dc0c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f3da:	69bb      	ldr	r3, [r7, #24]
 800f3dc:	2200      	movs	r2, #0
 800f3de:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d002      	beq.n	800f3ec <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	2200      	movs	r2, #0
 800f3ea:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f3ec:	68fa      	ldr	r2, [r7, #12]
 800f3ee:	490d      	ldr	r1, [pc, #52]	; (800f424 <f_mount+0x88>)
 800f3f0:	69fb      	ldr	r3, [r7, #28]
 800f3f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d002      	beq.n	800f402 <f_mount+0x66>
 800f3fc:	79fb      	ldrb	r3, [r7, #7]
 800f3fe:	2b01      	cmp	r3, #1
 800f400:	d001      	beq.n	800f406 <f_mount+0x6a>
 800f402:	2300      	movs	r3, #0
 800f404:	e00a      	b.n	800f41c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f406:	f107 010c 	add.w	r1, r7, #12
 800f40a:	f107 0308 	add.w	r3, r7, #8
 800f40e:	2200      	movs	r2, #0
 800f410:	4618      	mov	r0, r3
 800f412:	f7ff fd09 	bl	800ee28 <find_volume>
 800f416:	4603      	mov	r3, r0
 800f418:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f41a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f41c:	4618      	mov	r0, r3
 800f41e:	3720      	adds	r7, #32
 800f420:	46bd      	mov	sp, r7
 800f422:	bd80      	pop	{r7, pc}
 800f424:	20000838 	.word	0x20000838

0800f428 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b098      	sub	sp, #96	; 0x60
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	60f8      	str	r0, [r7, #12]
 800f430:	60b9      	str	r1, [r7, #8]
 800f432:	4613      	mov	r3, r2
 800f434:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d101      	bne.n	800f440 <f_open+0x18>
 800f43c:	2309      	movs	r3, #9
 800f43e:	e1bb      	b.n	800f7b8 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f440:	79fb      	ldrb	r3, [r7, #7]
 800f442:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f446:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f448:	79fa      	ldrb	r2, [r7, #7]
 800f44a:	f107 0110 	add.w	r1, r7, #16
 800f44e:	f107 0308 	add.w	r3, r7, #8
 800f452:	4618      	mov	r0, r3
 800f454:	f7ff fce8 	bl	800ee28 <find_volume>
 800f458:	4603      	mov	r3, r0
 800f45a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800f45e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f462:	2b00      	cmp	r3, #0
 800f464:	f040 819f 	bne.w	800f7a6 <f_open+0x37e>
		dj.obj.fs = fs;
 800f468:	693b      	ldr	r3, [r7, #16]
 800f46a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f46c:	68ba      	ldr	r2, [r7, #8]
 800f46e:	f107 0314 	add.w	r3, r7, #20
 800f472:	4611      	mov	r1, r2
 800f474:	4618      	mov	r0, r3
 800f476:	f7ff fbc7 	bl	800ec08 <follow_path>
 800f47a:	4603      	mov	r3, r0
 800f47c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f480:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f484:	2b00      	cmp	r3, #0
 800f486:	d11a      	bne.n	800f4be <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f488:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f48c:	b25b      	sxtb	r3, r3
 800f48e:	2b00      	cmp	r3, #0
 800f490:	da03      	bge.n	800f49a <f_open+0x72>
				res = FR_INVALID_NAME;
 800f492:	2306      	movs	r3, #6
 800f494:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f498:	e011      	b.n	800f4be <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f49a:	79fb      	ldrb	r3, [r7, #7]
 800f49c:	f023 0301 	bic.w	r3, r3, #1
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	bf14      	ite	ne
 800f4a4:	2301      	movne	r3, #1
 800f4a6:	2300      	moveq	r3, #0
 800f4a8:	b2db      	uxtb	r3, r3
 800f4aa:	461a      	mov	r2, r3
 800f4ac:	f107 0314 	add.w	r3, r7, #20
 800f4b0:	4611      	mov	r1, r2
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f7fe fa62 	bl	800d97c <chk_lock>
 800f4b8:	4603      	mov	r3, r0
 800f4ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f4be:	79fb      	ldrb	r3, [r7, #7]
 800f4c0:	f003 031c 	and.w	r3, r3, #28
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d07f      	beq.n	800f5c8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800f4c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d017      	beq.n	800f500 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f4d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f4d4:	2b04      	cmp	r3, #4
 800f4d6:	d10e      	bne.n	800f4f6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f4d8:	f7fe faac 	bl	800da34 <enq_lock>
 800f4dc:	4603      	mov	r3, r0
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d006      	beq.n	800f4f0 <f_open+0xc8>
 800f4e2:	f107 0314 	add.w	r3, r7, #20
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f7ff fa68 	bl	800e9bc <dir_register>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	e000      	b.n	800f4f2 <f_open+0xca>
 800f4f0:	2312      	movs	r3, #18
 800f4f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f4f6:	79fb      	ldrb	r3, [r7, #7]
 800f4f8:	f043 0308 	orr.w	r3, r3, #8
 800f4fc:	71fb      	strb	r3, [r7, #7]
 800f4fe:	e010      	b.n	800f522 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f500:	7ebb      	ldrb	r3, [r7, #26]
 800f502:	f003 0311 	and.w	r3, r3, #17
 800f506:	2b00      	cmp	r3, #0
 800f508:	d003      	beq.n	800f512 <f_open+0xea>
					res = FR_DENIED;
 800f50a:	2307      	movs	r3, #7
 800f50c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f510:	e007      	b.n	800f522 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f512:	79fb      	ldrb	r3, [r7, #7]
 800f514:	f003 0304 	and.w	r3, r3, #4
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d002      	beq.n	800f522 <f_open+0xfa>
 800f51c:	2308      	movs	r3, #8
 800f51e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f522:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f526:	2b00      	cmp	r3, #0
 800f528:	d168      	bne.n	800f5fc <f_open+0x1d4>
 800f52a:	79fb      	ldrb	r3, [r7, #7]
 800f52c:	f003 0308 	and.w	r3, r3, #8
 800f530:	2b00      	cmp	r3, #0
 800f532:	d063      	beq.n	800f5fc <f_open+0x1d4>
				dw = GET_FATTIME();
 800f534:	f7fd fe32 	bl	800d19c <get_fattime>
 800f538:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f53a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f53c:	330e      	adds	r3, #14
 800f53e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f540:	4618      	mov	r0, r3
 800f542:	f7fe f971 	bl	800d828 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f548:	3316      	adds	r3, #22
 800f54a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f54c:	4618      	mov	r0, r3
 800f54e:	f7fe f96b 	bl	800d828 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f554:	330b      	adds	r3, #11
 800f556:	2220      	movs	r2, #32
 800f558:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f55a:	693b      	ldr	r3, [r7, #16]
 800f55c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f55e:	4611      	mov	r1, r2
 800f560:	4618      	mov	r0, r3
 800f562:	f7ff f93a 	bl	800e7da <ld_clust>
 800f566:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f568:	693b      	ldr	r3, [r7, #16]
 800f56a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f56c:	2200      	movs	r2, #0
 800f56e:	4618      	mov	r0, r3
 800f570:	f7ff f952 	bl	800e818 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f576:	331c      	adds	r3, #28
 800f578:	2100      	movs	r1, #0
 800f57a:	4618      	mov	r0, r3
 800f57c:	f7fe f954 	bl	800d828 <st_dword>
					fs->wflag = 1;
 800f580:	693b      	ldr	r3, [r7, #16]
 800f582:	2201      	movs	r2, #1
 800f584:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f586:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d037      	beq.n	800f5fc <f_open+0x1d4>
						dw = fs->winsect;
 800f58c:	693b      	ldr	r3, [r7, #16]
 800f58e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f590:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800f592:	f107 0314 	add.w	r3, r7, #20
 800f596:	2200      	movs	r2, #0
 800f598:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f59a:	4618      	mov	r0, r3
 800f59c:	f7fe fe42 	bl	800e224 <remove_chain>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800f5a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d126      	bne.n	800f5fc <f_open+0x1d4>
							res = move_window(fs, dw);
 800f5ae:	693b      	ldr	r3, [r7, #16]
 800f5b0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	f7fe fb92 	bl	800dcdc <move_window>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f5be:	693b      	ldr	r3, [r7, #16]
 800f5c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f5c2:	3a01      	subs	r2, #1
 800f5c4:	611a      	str	r2, [r3, #16]
 800f5c6:	e019      	b.n	800f5fc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f5c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d115      	bne.n	800f5fc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f5d0:	7ebb      	ldrb	r3, [r7, #26]
 800f5d2:	f003 0310 	and.w	r3, r3, #16
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d003      	beq.n	800f5e2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800f5da:	2304      	movs	r3, #4
 800f5dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f5e0:	e00c      	b.n	800f5fc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f5e2:	79fb      	ldrb	r3, [r7, #7]
 800f5e4:	f003 0302 	and.w	r3, r3, #2
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d007      	beq.n	800f5fc <f_open+0x1d4>
 800f5ec:	7ebb      	ldrb	r3, [r7, #26]
 800f5ee:	f003 0301 	and.w	r3, r3, #1
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d002      	beq.n	800f5fc <f_open+0x1d4>
						res = FR_DENIED;
 800f5f6:	2307      	movs	r3, #7
 800f5f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800f5fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f600:	2b00      	cmp	r3, #0
 800f602:	d128      	bne.n	800f656 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f604:	79fb      	ldrb	r3, [r7, #7]
 800f606:	f003 0308 	and.w	r3, r3, #8
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d003      	beq.n	800f616 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800f60e:	79fb      	ldrb	r3, [r7, #7]
 800f610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f614:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f616:	693b      	ldr	r3, [r7, #16]
 800f618:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800f61e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f624:	79fb      	ldrb	r3, [r7, #7]
 800f626:	f023 0301 	bic.w	r3, r3, #1
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	bf14      	ite	ne
 800f62e:	2301      	movne	r3, #1
 800f630:	2300      	moveq	r3, #0
 800f632:	b2db      	uxtb	r3, r3
 800f634:	461a      	mov	r2, r3
 800f636:	f107 0314 	add.w	r3, r7, #20
 800f63a:	4611      	mov	r1, r2
 800f63c:	4618      	mov	r0, r3
 800f63e:	f7fe fa1b 	bl	800da78 <inc_lock>
 800f642:	4602      	mov	r2, r0
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	691b      	ldr	r3, [r3, #16]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d102      	bne.n	800f656 <f_open+0x22e>
 800f650:	2302      	movs	r3, #2
 800f652:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f656:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	f040 80a3 	bne.w	800f7a6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f660:	693b      	ldr	r3, [r7, #16]
 800f662:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f664:	4611      	mov	r1, r2
 800f666:	4618      	mov	r0, r3
 800f668:	f7ff f8b7 	bl	800e7da <ld_clust>
 800f66c:	4602      	mov	r2, r0
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f674:	331c      	adds	r3, #28
 800f676:	4618      	mov	r0, r3
 800f678:	f7fe f898 	bl	800d7ac <ld_dword>
 800f67c:	4602      	mov	r2, r0
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	2200      	movs	r2, #0
 800f686:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f688:	693a      	ldr	r2, [r7, #16]
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f68e:	693b      	ldr	r3, [r7, #16]
 800f690:	88da      	ldrh	r2, [r3, #6]
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	79fa      	ldrb	r2, [r7, #7]
 800f69a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	2200      	movs	r2, #0
 800f6a0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	2200      	movs	r2, #0
 800f6a6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	3330      	adds	r3, #48	; 0x30
 800f6b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f6b6:	2100      	movs	r1, #0
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	f7fe f902 	bl	800d8c2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f6be:	79fb      	ldrb	r3, [r7, #7]
 800f6c0:	f003 0320 	and.w	r3, r3, #32
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d06e      	beq.n	800f7a6 <f_open+0x37e>
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	68db      	ldr	r3, [r3, #12]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d06a      	beq.n	800f7a6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	68da      	ldr	r2, [r3, #12]
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f6d8:	693b      	ldr	r3, [r7, #16]
 800f6da:	895b      	ldrh	r3, [r3, #10]
 800f6dc:	461a      	mov	r2, r3
 800f6de:	693b      	ldr	r3, [r7, #16]
 800f6e0:	899b      	ldrh	r3, [r3, #12]
 800f6e2:	fb03 f302 	mul.w	r3, r3, r2
 800f6e6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	689b      	ldr	r3, [r3, #8]
 800f6ec:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	68db      	ldr	r3, [r3, #12]
 800f6f2:	657b      	str	r3, [r7, #84]	; 0x54
 800f6f4:	e016      	b.n	800f724 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	f7fe fbab 	bl	800de56 <get_fat>
 800f700:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800f702:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f704:	2b01      	cmp	r3, #1
 800f706:	d802      	bhi.n	800f70e <f_open+0x2e6>
 800f708:	2302      	movs	r3, #2
 800f70a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f70e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f710:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f714:	d102      	bne.n	800f71c <f_open+0x2f4>
 800f716:	2301      	movs	r3, #1
 800f718:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f71c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f71e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f720:	1ad3      	subs	r3, r2, r3
 800f722:	657b      	str	r3, [r7, #84]	; 0x54
 800f724:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d103      	bne.n	800f734 <f_open+0x30c>
 800f72c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f72e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f730:	429a      	cmp	r2, r3
 800f732:	d8e0      	bhi.n	800f6f6 <f_open+0x2ce>
				}
				fp->clust = clst;
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f738:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f73a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d131      	bne.n	800f7a6 <f_open+0x37e>
 800f742:	693b      	ldr	r3, [r7, #16]
 800f744:	899b      	ldrh	r3, [r3, #12]
 800f746:	461a      	mov	r2, r3
 800f748:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f74a:	fbb3 f1f2 	udiv	r1, r3, r2
 800f74e:	fb02 f201 	mul.w	r2, r2, r1
 800f752:	1a9b      	subs	r3, r3, r2
 800f754:	2b00      	cmp	r3, #0
 800f756:	d026      	beq.n	800f7a6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f758:	693b      	ldr	r3, [r7, #16]
 800f75a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f75c:	4618      	mov	r0, r3
 800f75e:	f7fe fb5b 	bl	800de18 <clust2sect>
 800f762:	6478      	str	r0, [r7, #68]	; 0x44
 800f764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f766:	2b00      	cmp	r3, #0
 800f768:	d103      	bne.n	800f772 <f_open+0x34a>
						res = FR_INT_ERR;
 800f76a:	2302      	movs	r3, #2
 800f76c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f770:	e019      	b.n	800f7a6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f772:	693b      	ldr	r3, [r7, #16]
 800f774:	899b      	ldrh	r3, [r3, #12]
 800f776:	461a      	mov	r2, r3
 800f778:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f77a:	fbb3 f2f2 	udiv	r2, r3, r2
 800f77e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f780:	441a      	add	r2, r3
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f786:	693b      	ldr	r3, [r7, #16]
 800f788:	7858      	ldrb	r0, [r3, #1]
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	6a1a      	ldr	r2, [r3, #32]
 800f794:	2301      	movs	r3, #1
 800f796:	f7fd ff93 	bl	800d6c0 <disk_read>
 800f79a:	4603      	mov	r3, r0
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d002      	beq.n	800f7a6 <f_open+0x37e>
 800f7a0:	2301      	movs	r3, #1
 800f7a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f7a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d002      	beq.n	800f7b4 <f_open+0x38c>
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f7b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800f7b8:	4618      	mov	r0, r3
 800f7ba:	3760      	adds	r7, #96	; 0x60
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	bd80      	pop	{r7, pc}

0800f7c0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b08c      	sub	sp, #48	; 0x30
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	60f8      	str	r0, [r7, #12]
 800f7c8:	60b9      	str	r1, [r7, #8]
 800f7ca:	607a      	str	r2, [r7, #4]
 800f7cc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f7ce:	68bb      	ldr	r3, [r7, #8]
 800f7d0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f7d2:	683b      	ldr	r3, [r7, #0]
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	f107 0210 	add.w	r2, r7, #16
 800f7de:	4611      	mov	r1, r2
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	f7ff fda5 	bl	800f330 <validate>
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f7ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d107      	bne.n	800f804 <f_write+0x44>
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	7d5b      	ldrb	r3, [r3, #21]
 800f7f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f7fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f800:	2b00      	cmp	r3, #0
 800f802:	d002      	beq.n	800f80a <f_write+0x4a>
 800f804:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f808:	e16a      	b.n	800fae0 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	7d1b      	ldrb	r3, [r3, #20]
 800f80e:	f003 0302 	and.w	r3, r3, #2
 800f812:	2b00      	cmp	r3, #0
 800f814:	d101      	bne.n	800f81a <f_write+0x5a>
 800f816:	2307      	movs	r3, #7
 800f818:	e162      	b.n	800fae0 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	699a      	ldr	r2, [r3, #24]
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	441a      	add	r2, r3
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	699b      	ldr	r3, [r3, #24]
 800f826:	429a      	cmp	r2, r3
 800f828:	f080 814c 	bcs.w	800fac4 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	699b      	ldr	r3, [r3, #24]
 800f830:	43db      	mvns	r3, r3
 800f832:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f834:	e146      	b.n	800fac4 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	699b      	ldr	r3, [r3, #24]
 800f83a:	693a      	ldr	r2, [r7, #16]
 800f83c:	8992      	ldrh	r2, [r2, #12]
 800f83e:	fbb3 f1f2 	udiv	r1, r3, r2
 800f842:	fb02 f201 	mul.w	r2, r2, r1
 800f846:	1a9b      	subs	r3, r3, r2
 800f848:	2b00      	cmp	r3, #0
 800f84a:	f040 80f1 	bne.w	800fa30 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	699b      	ldr	r3, [r3, #24]
 800f852:	693a      	ldr	r2, [r7, #16]
 800f854:	8992      	ldrh	r2, [r2, #12]
 800f856:	fbb3 f3f2 	udiv	r3, r3, r2
 800f85a:	693a      	ldr	r2, [r7, #16]
 800f85c:	8952      	ldrh	r2, [r2, #10]
 800f85e:	3a01      	subs	r2, #1
 800f860:	4013      	ands	r3, r2
 800f862:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f864:	69bb      	ldr	r3, [r7, #24]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d143      	bne.n	800f8f2 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	699b      	ldr	r3, [r3, #24]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d10c      	bne.n	800f88c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	689b      	ldr	r3, [r3, #8]
 800f876:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d11a      	bne.n	800f8b4 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	2100      	movs	r1, #0
 800f882:	4618      	mov	r0, r3
 800f884:	f7fe fd33 	bl	800e2ee <create_chain>
 800f888:	62b8      	str	r0, [r7, #40]	; 0x28
 800f88a:	e013      	b.n	800f8b4 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f890:	2b00      	cmp	r3, #0
 800f892:	d007      	beq.n	800f8a4 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	699b      	ldr	r3, [r3, #24]
 800f898:	4619      	mov	r1, r3
 800f89a:	68f8      	ldr	r0, [r7, #12]
 800f89c:	f7fe fdbf 	bl	800e41e <clmt_clust>
 800f8a0:	62b8      	str	r0, [r7, #40]	; 0x28
 800f8a2:	e007      	b.n	800f8b4 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f8a4:	68fa      	ldr	r2, [r7, #12]
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	69db      	ldr	r3, [r3, #28]
 800f8aa:	4619      	mov	r1, r3
 800f8ac:	4610      	mov	r0, r2
 800f8ae:	f7fe fd1e 	bl	800e2ee <create_chain>
 800f8b2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	f000 8109 	beq.w	800face <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8be:	2b01      	cmp	r3, #1
 800f8c0:	d104      	bne.n	800f8cc <f_write+0x10c>
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	2202      	movs	r2, #2
 800f8c6:	755a      	strb	r2, [r3, #21]
 800f8c8:	2302      	movs	r3, #2
 800f8ca:	e109      	b.n	800fae0 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f8d2:	d104      	bne.n	800f8de <f_write+0x11e>
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	2201      	movs	r2, #1
 800f8d8:	755a      	strb	r2, [r3, #21]
 800f8da:	2301      	movs	r3, #1
 800f8dc:	e100      	b.n	800fae0 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f8e2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	689b      	ldr	r3, [r3, #8]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d102      	bne.n	800f8f2 <f_write+0x132>
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f8f0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	7d1b      	ldrb	r3, [r3, #20]
 800f8f6:	b25b      	sxtb	r3, r3
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	da18      	bge.n	800f92e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f8fc:	693b      	ldr	r3, [r7, #16]
 800f8fe:	7858      	ldrb	r0, [r3, #1]
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	6a1a      	ldr	r2, [r3, #32]
 800f90a:	2301      	movs	r3, #1
 800f90c:	f7fd fef8 	bl	800d700 <disk_write>
 800f910:	4603      	mov	r3, r0
 800f912:	2b00      	cmp	r3, #0
 800f914:	d004      	beq.n	800f920 <f_write+0x160>
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	2201      	movs	r2, #1
 800f91a:	755a      	strb	r2, [r3, #21]
 800f91c:	2301      	movs	r3, #1
 800f91e:	e0df      	b.n	800fae0 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	7d1b      	ldrb	r3, [r3, #20]
 800f924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f928:	b2da      	uxtb	r2, r3
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f92e:	693a      	ldr	r2, [r7, #16]
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	69db      	ldr	r3, [r3, #28]
 800f934:	4619      	mov	r1, r3
 800f936:	4610      	mov	r0, r2
 800f938:	f7fe fa6e 	bl	800de18 <clust2sect>
 800f93c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f93e:	697b      	ldr	r3, [r7, #20]
 800f940:	2b00      	cmp	r3, #0
 800f942:	d104      	bne.n	800f94e <f_write+0x18e>
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	2202      	movs	r2, #2
 800f948:	755a      	strb	r2, [r3, #21]
 800f94a:	2302      	movs	r3, #2
 800f94c:	e0c8      	b.n	800fae0 <f_write+0x320>
			sect += csect;
 800f94e:	697a      	ldr	r2, [r7, #20]
 800f950:	69bb      	ldr	r3, [r7, #24]
 800f952:	4413      	add	r3, r2
 800f954:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f956:	693b      	ldr	r3, [r7, #16]
 800f958:	899b      	ldrh	r3, [r3, #12]
 800f95a:	461a      	mov	r2, r3
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f962:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f964:	6a3b      	ldr	r3, [r7, #32]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d043      	beq.n	800f9f2 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f96a:	69ba      	ldr	r2, [r7, #24]
 800f96c:	6a3b      	ldr	r3, [r7, #32]
 800f96e:	4413      	add	r3, r2
 800f970:	693a      	ldr	r2, [r7, #16]
 800f972:	8952      	ldrh	r2, [r2, #10]
 800f974:	4293      	cmp	r3, r2
 800f976:	d905      	bls.n	800f984 <f_write+0x1c4>
					cc = fs->csize - csect;
 800f978:	693b      	ldr	r3, [r7, #16]
 800f97a:	895b      	ldrh	r3, [r3, #10]
 800f97c:	461a      	mov	r2, r3
 800f97e:	69bb      	ldr	r3, [r7, #24]
 800f980:	1ad3      	subs	r3, r2, r3
 800f982:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f984:	693b      	ldr	r3, [r7, #16]
 800f986:	7858      	ldrb	r0, [r3, #1]
 800f988:	6a3b      	ldr	r3, [r7, #32]
 800f98a:	697a      	ldr	r2, [r7, #20]
 800f98c:	69f9      	ldr	r1, [r7, #28]
 800f98e:	f7fd feb7 	bl	800d700 <disk_write>
 800f992:	4603      	mov	r3, r0
 800f994:	2b00      	cmp	r3, #0
 800f996:	d004      	beq.n	800f9a2 <f_write+0x1e2>
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	2201      	movs	r2, #1
 800f99c:	755a      	strb	r2, [r3, #21]
 800f99e:	2301      	movs	r3, #1
 800f9a0:	e09e      	b.n	800fae0 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	6a1a      	ldr	r2, [r3, #32]
 800f9a6:	697b      	ldr	r3, [r7, #20]
 800f9a8:	1ad3      	subs	r3, r2, r3
 800f9aa:	6a3a      	ldr	r2, [r7, #32]
 800f9ac:	429a      	cmp	r2, r3
 800f9ae:	d918      	bls.n	800f9e2 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	6a1a      	ldr	r2, [r3, #32]
 800f9ba:	697b      	ldr	r3, [r7, #20]
 800f9bc:	1ad3      	subs	r3, r2, r3
 800f9be:	693a      	ldr	r2, [r7, #16]
 800f9c0:	8992      	ldrh	r2, [r2, #12]
 800f9c2:	fb02 f303 	mul.w	r3, r2, r3
 800f9c6:	69fa      	ldr	r2, [r7, #28]
 800f9c8:	18d1      	adds	r1, r2, r3
 800f9ca:	693b      	ldr	r3, [r7, #16]
 800f9cc:	899b      	ldrh	r3, [r3, #12]
 800f9ce:	461a      	mov	r2, r3
 800f9d0:	f7fd ff56 	bl	800d880 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	7d1b      	ldrb	r3, [r3, #20]
 800f9d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f9dc:	b2da      	uxtb	r2, r3
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f9e2:	693b      	ldr	r3, [r7, #16]
 800f9e4:	899b      	ldrh	r3, [r3, #12]
 800f9e6:	461a      	mov	r2, r3
 800f9e8:	6a3b      	ldr	r3, [r7, #32]
 800f9ea:	fb02 f303 	mul.w	r3, r2, r3
 800f9ee:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800f9f0:	e04b      	b.n	800fa8a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	6a1b      	ldr	r3, [r3, #32]
 800f9f6:	697a      	ldr	r2, [r7, #20]
 800f9f8:	429a      	cmp	r2, r3
 800f9fa:	d016      	beq.n	800fa2a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800f9fc:	68fb      	ldr	r3, [r7, #12]
 800f9fe:	699a      	ldr	r2, [r3, #24]
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fa04:	429a      	cmp	r2, r3
 800fa06:	d210      	bcs.n	800fa2a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800fa08:	693b      	ldr	r3, [r7, #16]
 800fa0a:	7858      	ldrb	r0, [r3, #1]
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fa12:	2301      	movs	r3, #1
 800fa14:	697a      	ldr	r2, [r7, #20]
 800fa16:	f7fd fe53 	bl	800d6c0 <disk_read>
 800fa1a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d004      	beq.n	800fa2a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	2201      	movs	r2, #1
 800fa24:	755a      	strb	r2, [r3, #21]
 800fa26:	2301      	movs	r3, #1
 800fa28:	e05a      	b.n	800fae0 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	697a      	ldr	r2, [r7, #20]
 800fa2e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800fa30:	693b      	ldr	r3, [r7, #16]
 800fa32:	899b      	ldrh	r3, [r3, #12]
 800fa34:	4618      	mov	r0, r3
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	699b      	ldr	r3, [r3, #24]
 800fa3a:	693a      	ldr	r2, [r7, #16]
 800fa3c:	8992      	ldrh	r2, [r2, #12]
 800fa3e:	fbb3 f1f2 	udiv	r1, r3, r2
 800fa42:	fb02 f201 	mul.w	r2, r2, r1
 800fa46:	1a9b      	subs	r3, r3, r2
 800fa48:	1ac3      	subs	r3, r0, r3
 800fa4a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800fa4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	429a      	cmp	r2, r3
 800fa52:	d901      	bls.n	800fa58 <f_write+0x298>
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	699b      	ldr	r3, [r3, #24]
 800fa62:	693a      	ldr	r2, [r7, #16]
 800fa64:	8992      	ldrh	r2, [r2, #12]
 800fa66:	fbb3 f0f2 	udiv	r0, r3, r2
 800fa6a:	fb02 f200 	mul.w	r2, r2, r0
 800fa6e:	1a9b      	subs	r3, r3, r2
 800fa70:	440b      	add	r3, r1
 800fa72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa74:	69f9      	ldr	r1, [r7, #28]
 800fa76:	4618      	mov	r0, r3
 800fa78:	f7fd ff02 	bl	800d880 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	7d1b      	ldrb	r3, [r3, #20]
 800fa80:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fa84:	b2da      	uxtb	r2, r3
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800fa8a:	69fa      	ldr	r2, [r7, #28]
 800fa8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa8e:	4413      	add	r3, r2
 800fa90:	61fb      	str	r3, [r7, #28]
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	699a      	ldr	r2, [r3, #24]
 800fa96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa98:	441a      	add	r2, r3
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	619a      	str	r2, [r3, #24]
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	68da      	ldr	r2, [r3, #12]
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	699b      	ldr	r3, [r3, #24]
 800faa6:	429a      	cmp	r2, r3
 800faa8:	bf38      	it	cc
 800faaa:	461a      	movcc	r2, r3
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	60da      	str	r2, [r3, #12]
 800fab0:	683b      	ldr	r3, [r7, #0]
 800fab2:	681a      	ldr	r2, [r3, #0]
 800fab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fab6:	441a      	add	r2, r3
 800fab8:	683b      	ldr	r3, [r7, #0]
 800faba:	601a      	str	r2, [r3, #0]
 800fabc:	687a      	ldr	r2, [r7, #4]
 800fabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fac0:	1ad3      	subs	r3, r2, r3
 800fac2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	f47f aeb5 	bne.w	800f836 <f_write+0x76>
 800facc:	e000      	b.n	800fad0 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800face:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	7d1b      	ldrb	r3, [r3, #20]
 800fad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fad8:	b2da      	uxtb	r2, r3
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800fade:	2300      	movs	r3, #0
}
 800fae0:	4618      	mov	r0, r3
 800fae2:	3730      	adds	r7, #48	; 0x30
 800fae4:	46bd      	mov	sp, r7
 800fae6:	bd80      	pop	{r7, pc}

0800fae8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800fae8:	b580      	push	{r7, lr}
 800faea:	b086      	sub	sp, #24
 800faec:	af00      	add	r7, sp, #0
 800faee:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	f107 0208 	add.w	r2, r7, #8
 800faf6:	4611      	mov	r1, r2
 800faf8:	4618      	mov	r0, r3
 800fafa:	f7ff fc19 	bl	800f330 <validate>
 800fafe:	4603      	mov	r3, r0
 800fb00:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fb02:	7dfb      	ldrb	r3, [r7, #23]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d168      	bne.n	800fbda <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	7d1b      	ldrb	r3, [r3, #20]
 800fb0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d062      	beq.n	800fbda <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	7d1b      	ldrb	r3, [r3, #20]
 800fb18:	b25b      	sxtb	r3, r3
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	da15      	bge.n	800fb4a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800fb1e:	68bb      	ldr	r3, [r7, #8]
 800fb20:	7858      	ldrb	r0, [r3, #1]
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	6a1a      	ldr	r2, [r3, #32]
 800fb2c:	2301      	movs	r3, #1
 800fb2e:	f7fd fde7 	bl	800d700 <disk_write>
 800fb32:	4603      	mov	r3, r0
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d001      	beq.n	800fb3c <f_sync+0x54>
 800fb38:	2301      	movs	r3, #1
 800fb3a:	e04f      	b.n	800fbdc <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	7d1b      	ldrb	r3, [r3, #20]
 800fb40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fb44:	b2da      	uxtb	r2, r3
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800fb4a:	f7fd fb27 	bl	800d19c <get_fattime>
 800fb4e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800fb50:	68ba      	ldr	r2, [r7, #8]
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb56:	4619      	mov	r1, r3
 800fb58:	4610      	mov	r0, r2
 800fb5a:	f7fe f8bf 	bl	800dcdc <move_window>
 800fb5e:	4603      	mov	r3, r0
 800fb60:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800fb62:	7dfb      	ldrb	r3, [r7, #23]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d138      	bne.n	800fbda <f_sync+0xf2>
					dir = fp->dir_ptr;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb6c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800fb6e:	68fb      	ldr	r3, [r7, #12]
 800fb70:	330b      	adds	r3, #11
 800fb72:	781a      	ldrb	r2, [r3, #0]
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	330b      	adds	r3, #11
 800fb78:	f042 0220 	orr.w	r2, r2, #32
 800fb7c:	b2d2      	uxtb	r2, r2
 800fb7e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	6818      	ldr	r0, [r3, #0]
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	689b      	ldr	r3, [r3, #8]
 800fb88:	461a      	mov	r2, r3
 800fb8a:	68f9      	ldr	r1, [r7, #12]
 800fb8c:	f7fe fe44 	bl	800e818 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	f103 021c 	add.w	r2, r3, #28
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	68db      	ldr	r3, [r3, #12]
 800fb9a:	4619      	mov	r1, r3
 800fb9c:	4610      	mov	r0, r2
 800fb9e:	f7fd fe43 	bl	800d828 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	3316      	adds	r3, #22
 800fba6:	6939      	ldr	r1, [r7, #16]
 800fba8:	4618      	mov	r0, r3
 800fbaa:	f7fd fe3d 	bl	800d828 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	3312      	adds	r3, #18
 800fbb2:	2100      	movs	r1, #0
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	f7fd fe1c 	bl	800d7f2 <st_word>
					fs->wflag = 1;
 800fbba:	68bb      	ldr	r3, [r7, #8]
 800fbbc:	2201      	movs	r2, #1
 800fbbe:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800fbc0:	68bb      	ldr	r3, [r7, #8]
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	f7fe f8b8 	bl	800dd38 <sync_fs>
 800fbc8:	4603      	mov	r3, r0
 800fbca:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	7d1b      	ldrb	r3, [r3, #20]
 800fbd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fbd4:	b2da      	uxtb	r2, r3
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800fbda:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbdc:	4618      	mov	r0, r3
 800fbde:	3718      	adds	r7, #24
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	bd80      	pop	{r7, pc}

0800fbe4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b084      	sub	sp, #16
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800fbec:	6878      	ldr	r0, [r7, #4]
 800fbee:	f7ff ff7b 	bl	800fae8 <f_sync>
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800fbf6:	7bfb      	ldrb	r3, [r7, #15]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d118      	bne.n	800fc2e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	f107 0208 	add.w	r2, r7, #8
 800fc02:	4611      	mov	r1, r2
 800fc04:	4618      	mov	r0, r3
 800fc06:	f7ff fb93 	bl	800f330 <validate>
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fc0e:	7bfb      	ldrb	r3, [r7, #15]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d10c      	bne.n	800fc2e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	691b      	ldr	r3, [r3, #16]
 800fc18:	4618      	mov	r0, r3
 800fc1a:	f7fd ffbb 	bl	800db94 <dec_lock>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800fc22:	7bfb      	ldrb	r3, [r7, #15]
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d102      	bne.n	800fc2e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800fc2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc30:	4618      	mov	r0, r3
 800fc32:	3710      	adds	r7, #16
 800fc34:	46bd      	mov	sp, r7
 800fc36:	bd80      	pop	{r7, pc}

0800fc38 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b090      	sub	sp, #64	; 0x40
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
 800fc40:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	f107 0208 	add.w	r2, r7, #8
 800fc48:	4611      	mov	r1, r2
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	f7ff fb70 	bl	800f330 <validate>
 800fc50:	4603      	mov	r3, r0
 800fc52:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800fc56:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d103      	bne.n	800fc66 <f_lseek+0x2e>
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	7d5b      	ldrb	r3, [r3, #21]
 800fc62:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800fc66:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d002      	beq.n	800fc74 <f_lseek+0x3c>
 800fc6e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fc72:	e201      	b.n	8010078 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	f000 80d9 	beq.w	800fe30 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800fc7e:	683b      	ldr	r3, [r7, #0]
 800fc80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fc84:	d15a      	bne.n	800fd3c <f_lseek+0x104>
			tbl = fp->cltbl;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc8a:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800fc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc8e:	1d1a      	adds	r2, r3, #4
 800fc90:	627a      	str	r2, [r7, #36]	; 0x24
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	617b      	str	r3, [r7, #20]
 800fc96:	2302      	movs	r3, #2
 800fc98:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	689b      	ldr	r3, [r3, #8]
 800fc9e:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800fca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d03a      	beq.n	800fd1c <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800fca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fca8:	613b      	str	r3, [r7, #16]
 800fcaa:	2300      	movs	r3, #0
 800fcac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fcae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcb0:	3302      	adds	r3, #2
 800fcb2:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800fcb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcb6:	60fb      	str	r3, [r7, #12]
 800fcb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcba:	3301      	adds	r3, #1
 800fcbc:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	f7fe f8c7 	bl	800de56 <get_fat>
 800fcc8:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800fcca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fccc:	2b01      	cmp	r3, #1
 800fcce:	d804      	bhi.n	800fcda <f_lseek+0xa2>
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	2202      	movs	r2, #2
 800fcd4:	755a      	strb	r2, [r3, #21]
 800fcd6:	2302      	movs	r3, #2
 800fcd8:	e1ce      	b.n	8010078 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fcda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fce0:	d104      	bne.n	800fcec <f_lseek+0xb4>
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	2201      	movs	r2, #1
 800fce6:	755a      	strb	r2, [r3, #21]
 800fce8:	2301      	movs	r3, #1
 800fcea:	e1c5      	b.n	8010078 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	3301      	adds	r3, #1
 800fcf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fcf2:	429a      	cmp	r2, r3
 800fcf4:	d0de      	beq.n	800fcb4 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800fcf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fcf8:	697b      	ldr	r3, [r7, #20]
 800fcfa:	429a      	cmp	r2, r3
 800fcfc:	d809      	bhi.n	800fd12 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800fcfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd00:	1d1a      	adds	r2, r3, #4
 800fd02:	627a      	str	r2, [r7, #36]	; 0x24
 800fd04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd06:	601a      	str	r2, [r3, #0]
 800fd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd0a:	1d1a      	adds	r2, r3, #4
 800fd0c:	627a      	str	r2, [r7, #36]	; 0x24
 800fd0e:	693a      	ldr	r2, [r7, #16]
 800fd10:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800fd12:	68bb      	ldr	r3, [r7, #8]
 800fd14:	699b      	ldr	r3, [r3, #24]
 800fd16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd18:	429a      	cmp	r2, r3
 800fd1a:	d3c4      	bcc.n	800fca6 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd22:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800fd24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd26:	697b      	ldr	r3, [r7, #20]
 800fd28:	429a      	cmp	r2, r3
 800fd2a:	d803      	bhi.n	800fd34 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800fd2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd2e:	2200      	movs	r2, #0
 800fd30:	601a      	str	r2, [r3, #0]
 800fd32:	e19f      	b.n	8010074 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800fd34:	2311      	movs	r3, #17
 800fd36:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fd3a:	e19b      	b.n	8010074 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	68db      	ldr	r3, [r3, #12]
 800fd40:	683a      	ldr	r2, [r7, #0]
 800fd42:	429a      	cmp	r2, r3
 800fd44:	d902      	bls.n	800fd4c <f_lseek+0x114>
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	68db      	ldr	r3, [r3, #12]
 800fd4a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	683a      	ldr	r2, [r7, #0]
 800fd50:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800fd52:	683b      	ldr	r3, [r7, #0]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	f000 818d 	beq.w	8010074 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800fd5a:	683b      	ldr	r3, [r7, #0]
 800fd5c:	3b01      	subs	r3, #1
 800fd5e:	4619      	mov	r1, r3
 800fd60:	6878      	ldr	r0, [r7, #4]
 800fd62:	f7fe fb5c 	bl	800e41e <clmt_clust>
 800fd66:	4602      	mov	r2, r0
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800fd6c:	68ba      	ldr	r2, [r7, #8]
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	69db      	ldr	r3, [r3, #28]
 800fd72:	4619      	mov	r1, r3
 800fd74:	4610      	mov	r0, r2
 800fd76:	f7fe f84f 	bl	800de18 <clust2sect>
 800fd7a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800fd7c:	69bb      	ldr	r3, [r7, #24]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d104      	bne.n	800fd8c <f_lseek+0x154>
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	2202      	movs	r2, #2
 800fd86:	755a      	strb	r2, [r3, #21]
 800fd88:	2302      	movs	r3, #2
 800fd8a:	e175      	b.n	8010078 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800fd8c:	683b      	ldr	r3, [r7, #0]
 800fd8e:	3b01      	subs	r3, #1
 800fd90:	68ba      	ldr	r2, [r7, #8]
 800fd92:	8992      	ldrh	r2, [r2, #12]
 800fd94:	fbb3 f3f2 	udiv	r3, r3, r2
 800fd98:	68ba      	ldr	r2, [r7, #8]
 800fd9a:	8952      	ldrh	r2, [r2, #10]
 800fd9c:	3a01      	subs	r2, #1
 800fd9e:	4013      	ands	r3, r2
 800fda0:	69ba      	ldr	r2, [r7, #24]
 800fda2:	4413      	add	r3, r2
 800fda4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	699b      	ldr	r3, [r3, #24]
 800fdaa:	68ba      	ldr	r2, [r7, #8]
 800fdac:	8992      	ldrh	r2, [r2, #12]
 800fdae:	fbb3 f1f2 	udiv	r1, r3, r2
 800fdb2:	fb02 f201 	mul.w	r2, r2, r1
 800fdb6:	1a9b      	subs	r3, r3, r2
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	f000 815b 	beq.w	8010074 <f_lseek+0x43c>
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	6a1b      	ldr	r3, [r3, #32]
 800fdc2:	69ba      	ldr	r2, [r7, #24]
 800fdc4:	429a      	cmp	r2, r3
 800fdc6:	f000 8155 	beq.w	8010074 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	7d1b      	ldrb	r3, [r3, #20]
 800fdce:	b25b      	sxtb	r3, r3
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	da18      	bge.n	800fe06 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fdd4:	68bb      	ldr	r3, [r7, #8]
 800fdd6:	7858      	ldrb	r0, [r3, #1]
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	6a1a      	ldr	r2, [r3, #32]
 800fde2:	2301      	movs	r3, #1
 800fde4:	f7fd fc8c 	bl	800d700 <disk_write>
 800fde8:	4603      	mov	r3, r0
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d004      	beq.n	800fdf8 <f_lseek+0x1c0>
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	2201      	movs	r2, #1
 800fdf2:	755a      	strb	r2, [r3, #21]
 800fdf4:	2301      	movs	r3, #1
 800fdf6:	e13f      	b.n	8010078 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	7d1b      	ldrb	r3, [r3, #20]
 800fdfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fe00:	b2da      	uxtb	r2, r3
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800fe06:	68bb      	ldr	r3, [r7, #8]
 800fe08:	7858      	ldrb	r0, [r3, #1]
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fe10:	2301      	movs	r3, #1
 800fe12:	69ba      	ldr	r2, [r7, #24]
 800fe14:	f7fd fc54 	bl	800d6c0 <disk_read>
 800fe18:	4603      	mov	r3, r0
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d004      	beq.n	800fe28 <f_lseek+0x1f0>
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	2201      	movs	r2, #1
 800fe22:	755a      	strb	r2, [r3, #21]
 800fe24:	2301      	movs	r3, #1
 800fe26:	e127      	b.n	8010078 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	69ba      	ldr	r2, [r7, #24]
 800fe2c:	621a      	str	r2, [r3, #32]
 800fe2e:	e121      	b.n	8010074 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	68db      	ldr	r3, [r3, #12]
 800fe34:	683a      	ldr	r2, [r7, #0]
 800fe36:	429a      	cmp	r2, r3
 800fe38:	d908      	bls.n	800fe4c <f_lseek+0x214>
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	7d1b      	ldrb	r3, [r3, #20]
 800fe3e:	f003 0302 	and.w	r3, r3, #2
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d102      	bne.n	800fe4c <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	68db      	ldr	r3, [r3, #12]
 800fe4a:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	699b      	ldr	r3, [r3, #24]
 800fe50:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800fe52:	2300      	movs	r3, #0
 800fe54:	637b      	str	r3, [r7, #52]	; 0x34
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe5a:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800fe5c:	683b      	ldr	r3, [r7, #0]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	f000 80b5 	beq.w	800ffce <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800fe64:	68bb      	ldr	r3, [r7, #8]
 800fe66:	895b      	ldrh	r3, [r3, #10]
 800fe68:	461a      	mov	r2, r3
 800fe6a:	68bb      	ldr	r3, [r7, #8]
 800fe6c:	899b      	ldrh	r3, [r3, #12]
 800fe6e:	fb03 f302 	mul.w	r3, r3, r2
 800fe72:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800fe74:	6a3b      	ldr	r3, [r7, #32]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d01b      	beq.n	800feb2 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800fe7a:	683b      	ldr	r3, [r7, #0]
 800fe7c:	1e5a      	subs	r2, r3, #1
 800fe7e:	69fb      	ldr	r3, [r7, #28]
 800fe80:	fbb2 f2f3 	udiv	r2, r2, r3
 800fe84:	6a3b      	ldr	r3, [r7, #32]
 800fe86:	1e59      	subs	r1, r3, #1
 800fe88:	69fb      	ldr	r3, [r7, #28]
 800fe8a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800fe8e:	429a      	cmp	r2, r3
 800fe90:	d30f      	bcc.n	800feb2 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800fe92:	6a3b      	ldr	r3, [r7, #32]
 800fe94:	1e5a      	subs	r2, r3, #1
 800fe96:	69fb      	ldr	r3, [r7, #28]
 800fe98:	425b      	negs	r3, r3
 800fe9a:	401a      	ands	r2, r3
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	699b      	ldr	r3, [r3, #24]
 800fea4:	683a      	ldr	r2, [r7, #0]
 800fea6:	1ad3      	subs	r3, r2, r3
 800fea8:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	69db      	ldr	r3, [r3, #28]
 800feae:	63bb      	str	r3, [r7, #56]	; 0x38
 800feb0:	e022      	b.n	800fef8 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	689b      	ldr	r3, [r3, #8]
 800feb6:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800feb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feba:	2b00      	cmp	r3, #0
 800febc:	d119      	bne.n	800fef2 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	2100      	movs	r1, #0
 800fec2:	4618      	mov	r0, r3
 800fec4:	f7fe fa13 	bl	800e2ee <create_chain>
 800fec8:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800feca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fecc:	2b01      	cmp	r3, #1
 800fece:	d104      	bne.n	800feda <f_lseek+0x2a2>
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	2202      	movs	r2, #2
 800fed4:	755a      	strb	r2, [r3, #21]
 800fed6:	2302      	movs	r3, #2
 800fed8:	e0ce      	b.n	8010078 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800feda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fedc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fee0:	d104      	bne.n	800feec <f_lseek+0x2b4>
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	2201      	movs	r2, #1
 800fee6:	755a      	strb	r2, [r3, #21]
 800fee8:	2301      	movs	r3, #1
 800feea:	e0c5      	b.n	8010078 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fef0:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fef6:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800fef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d067      	beq.n	800ffce <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800fefe:	e03a      	b.n	800ff76 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 800ff00:	683a      	ldr	r2, [r7, #0]
 800ff02:	69fb      	ldr	r3, [r7, #28]
 800ff04:	1ad3      	subs	r3, r2, r3
 800ff06:	603b      	str	r3, [r7, #0]
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	699a      	ldr	r2, [r3, #24]
 800ff0c:	69fb      	ldr	r3, [r7, #28]
 800ff0e:	441a      	add	r2, r3
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	7d1b      	ldrb	r3, [r3, #20]
 800ff18:	f003 0302 	and.w	r3, r3, #2
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d00b      	beq.n	800ff38 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ff24:	4618      	mov	r0, r3
 800ff26:	f7fe f9e2 	bl	800e2ee <create_chain>
 800ff2a:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800ff2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d108      	bne.n	800ff44 <f_lseek+0x30c>
							ofs = 0; break;
 800ff32:	2300      	movs	r3, #0
 800ff34:	603b      	str	r3, [r7, #0]
 800ff36:	e022      	b.n	800ff7e <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	f7fd ff8a 	bl	800de56 <get_fat>
 800ff42:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ff44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ff4a:	d104      	bne.n	800ff56 <f_lseek+0x31e>
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	2201      	movs	r2, #1
 800ff50:	755a      	strb	r2, [r3, #21]
 800ff52:	2301      	movs	r3, #1
 800ff54:	e090      	b.n	8010078 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800ff56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff58:	2b01      	cmp	r3, #1
 800ff5a:	d904      	bls.n	800ff66 <f_lseek+0x32e>
 800ff5c:	68bb      	ldr	r3, [r7, #8]
 800ff5e:	699b      	ldr	r3, [r3, #24]
 800ff60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff62:	429a      	cmp	r2, r3
 800ff64:	d304      	bcc.n	800ff70 <f_lseek+0x338>
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	2202      	movs	r2, #2
 800ff6a:	755a      	strb	r2, [r3, #21]
 800ff6c:	2302      	movs	r3, #2
 800ff6e:	e083      	b.n	8010078 <f_lseek+0x440>
					fp->clust = clst;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff74:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800ff76:	683a      	ldr	r2, [r7, #0]
 800ff78:	69fb      	ldr	r3, [r7, #28]
 800ff7a:	429a      	cmp	r2, r3
 800ff7c:	d8c0      	bhi.n	800ff00 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	699a      	ldr	r2, [r3, #24]
 800ff82:	683b      	ldr	r3, [r7, #0]
 800ff84:	441a      	add	r2, r3
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800ff8a:	68bb      	ldr	r3, [r7, #8]
 800ff8c:	899b      	ldrh	r3, [r3, #12]
 800ff8e:	461a      	mov	r2, r3
 800ff90:	683b      	ldr	r3, [r7, #0]
 800ff92:	fbb3 f1f2 	udiv	r1, r3, r2
 800ff96:	fb02 f201 	mul.w	r2, r2, r1
 800ff9a:	1a9b      	subs	r3, r3, r2
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d016      	beq.n	800ffce <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800ffa0:	68bb      	ldr	r3, [r7, #8]
 800ffa2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	f7fd ff37 	bl	800de18 <clust2sect>
 800ffaa:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800ffac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d104      	bne.n	800ffbc <f_lseek+0x384>
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	2202      	movs	r2, #2
 800ffb6:	755a      	strb	r2, [r3, #21]
 800ffb8:	2302      	movs	r3, #2
 800ffba:	e05d      	b.n	8010078 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800ffbc:	68bb      	ldr	r3, [r7, #8]
 800ffbe:	899b      	ldrh	r3, [r3, #12]
 800ffc0:	461a      	mov	r2, r3
 800ffc2:	683b      	ldr	r3, [r7, #0]
 800ffc4:	fbb3 f3f2 	udiv	r3, r3, r2
 800ffc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ffca:	4413      	add	r3, r2
 800ffcc:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	699a      	ldr	r2, [r3, #24]
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	68db      	ldr	r3, [r3, #12]
 800ffd6:	429a      	cmp	r2, r3
 800ffd8:	d90a      	bls.n	800fff0 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	699a      	ldr	r2, [r3, #24]
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	7d1b      	ldrb	r3, [r3, #20]
 800ffe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ffea:	b2da      	uxtb	r2, r3
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	699b      	ldr	r3, [r3, #24]
 800fff4:	68ba      	ldr	r2, [r7, #8]
 800fff6:	8992      	ldrh	r2, [r2, #12]
 800fff8:	fbb3 f1f2 	udiv	r1, r3, r2
 800fffc:	fb02 f201 	mul.w	r2, r2, r1
 8010000:	1a9b      	subs	r3, r3, r2
 8010002:	2b00      	cmp	r3, #0
 8010004:	d036      	beq.n	8010074 <f_lseek+0x43c>
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	6a1b      	ldr	r3, [r3, #32]
 801000a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801000c:	429a      	cmp	r2, r3
 801000e:	d031      	beq.n	8010074 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	7d1b      	ldrb	r3, [r3, #20]
 8010014:	b25b      	sxtb	r3, r3
 8010016:	2b00      	cmp	r3, #0
 8010018:	da18      	bge.n	801004c <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801001a:	68bb      	ldr	r3, [r7, #8]
 801001c:	7858      	ldrb	r0, [r3, #1]
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	6a1a      	ldr	r2, [r3, #32]
 8010028:	2301      	movs	r3, #1
 801002a:	f7fd fb69 	bl	800d700 <disk_write>
 801002e:	4603      	mov	r3, r0
 8010030:	2b00      	cmp	r3, #0
 8010032:	d004      	beq.n	801003e <f_lseek+0x406>
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	2201      	movs	r2, #1
 8010038:	755a      	strb	r2, [r3, #21]
 801003a:	2301      	movs	r3, #1
 801003c:	e01c      	b.n	8010078 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	7d1b      	ldrb	r3, [r3, #20]
 8010042:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010046:	b2da      	uxtb	r2, r3
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801004c:	68bb      	ldr	r3, [r7, #8]
 801004e:	7858      	ldrb	r0, [r3, #1]
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010056:	2301      	movs	r3, #1
 8010058:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801005a:	f7fd fb31 	bl	800d6c0 <disk_read>
 801005e:	4603      	mov	r3, r0
 8010060:	2b00      	cmp	r3, #0
 8010062:	d004      	beq.n	801006e <f_lseek+0x436>
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	2201      	movs	r2, #1
 8010068:	755a      	strb	r2, [r3, #21]
 801006a:	2301      	movs	r3, #1
 801006c:	e004      	b.n	8010078 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010072:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8010074:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8010078:	4618      	mov	r0, r3
 801007a:	3740      	adds	r7, #64	; 0x40
 801007c:	46bd      	mov	sp, r7
 801007e:	bd80      	pop	{r7, pc}

08010080 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b086      	sub	sp, #24
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
 8010088:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	2b00      	cmp	r3, #0
 801008e:	d101      	bne.n	8010094 <f_opendir+0x14>
 8010090:	2309      	movs	r3, #9
 8010092:	e064      	b.n	801015e <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8010098:	f107 010c 	add.w	r1, r7, #12
 801009c:	463b      	mov	r3, r7
 801009e:	2200      	movs	r2, #0
 80100a0:	4618      	mov	r0, r3
 80100a2:	f7fe fec1 	bl	800ee28 <find_volume>
 80100a6:	4603      	mov	r3, r0
 80100a8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80100aa:	7dfb      	ldrb	r3, [r7, #23]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d14f      	bne.n	8010150 <f_opendir+0xd0>
		obj->fs = fs;
 80100b0:	68fa      	ldr	r2, [r7, #12]
 80100b2:	693b      	ldr	r3, [r7, #16]
 80100b4:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80100b6:	683b      	ldr	r3, [r7, #0]
 80100b8:	4619      	mov	r1, r3
 80100ba:	6878      	ldr	r0, [r7, #4]
 80100bc:	f7fe fda4 	bl	800ec08 <follow_path>
 80100c0:	4603      	mov	r3, r0
 80100c2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80100c4:	7dfb      	ldrb	r3, [r7, #23]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d13d      	bne.n	8010146 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80100d0:	b25b      	sxtb	r3, r3
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	db12      	blt.n	80100fc <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80100d6:	693b      	ldr	r3, [r7, #16]
 80100d8:	799b      	ldrb	r3, [r3, #6]
 80100da:	f003 0310 	and.w	r3, r3, #16
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d00a      	beq.n	80100f8 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80100e2:	68fa      	ldr	r2, [r7, #12]
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	6a1b      	ldr	r3, [r3, #32]
 80100e8:	4619      	mov	r1, r3
 80100ea:	4610      	mov	r0, r2
 80100ec:	f7fe fb75 	bl	800e7da <ld_clust>
 80100f0:	4602      	mov	r2, r0
 80100f2:	693b      	ldr	r3, [r7, #16]
 80100f4:	609a      	str	r2, [r3, #8]
 80100f6:	e001      	b.n	80100fc <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80100f8:	2305      	movs	r3, #5
 80100fa:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80100fc:	7dfb      	ldrb	r3, [r7, #23]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d121      	bne.n	8010146 <f_opendir+0xc6>
				obj->id = fs->id;
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	88da      	ldrh	r2, [r3, #6]
 8010106:	693b      	ldr	r3, [r7, #16]
 8010108:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801010a:	2100      	movs	r1, #0
 801010c:	6878      	ldr	r0, [r7, #4]
 801010e:	f7fe f9be 	bl	800e48e <dir_sdi>
 8010112:	4603      	mov	r3, r0
 8010114:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8010116:	7dfb      	ldrb	r3, [r7, #23]
 8010118:	2b00      	cmp	r3, #0
 801011a:	d114      	bne.n	8010146 <f_opendir+0xc6>
					if (obj->sclust) {
 801011c:	693b      	ldr	r3, [r7, #16]
 801011e:	689b      	ldr	r3, [r3, #8]
 8010120:	2b00      	cmp	r3, #0
 8010122:	d00d      	beq.n	8010140 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8010124:	2100      	movs	r1, #0
 8010126:	6878      	ldr	r0, [r7, #4]
 8010128:	f7fd fca6 	bl	800da78 <inc_lock>
 801012c:	4602      	mov	r2, r0
 801012e:	693b      	ldr	r3, [r7, #16]
 8010130:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8010132:	693b      	ldr	r3, [r7, #16]
 8010134:	691b      	ldr	r3, [r3, #16]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d105      	bne.n	8010146 <f_opendir+0xc6>
 801013a:	2312      	movs	r3, #18
 801013c:	75fb      	strb	r3, [r7, #23]
 801013e:	e002      	b.n	8010146 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8010140:	693b      	ldr	r3, [r7, #16]
 8010142:	2200      	movs	r2, #0
 8010144:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8010146:	7dfb      	ldrb	r3, [r7, #23]
 8010148:	2b04      	cmp	r3, #4
 801014a:	d101      	bne.n	8010150 <f_opendir+0xd0>
 801014c:	2305      	movs	r3, #5
 801014e:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8010150:	7dfb      	ldrb	r3, [r7, #23]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d002      	beq.n	801015c <f_opendir+0xdc>
 8010156:	693b      	ldr	r3, [r7, #16]
 8010158:	2200      	movs	r2, #0
 801015a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801015c:	7dfb      	ldrb	r3, [r7, #23]
}
 801015e:	4618      	mov	r0, r3
 8010160:	3718      	adds	r7, #24
 8010162:	46bd      	mov	sp, r7
 8010164:	bd80      	pop	{r7, pc}

08010166 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8010166:	b580      	push	{r7, lr}
 8010168:	b084      	sub	sp, #16
 801016a:	af00      	add	r7, sp, #0
 801016c:	6078      	str	r0, [r7, #4]
 801016e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	f107 0208 	add.w	r2, r7, #8
 8010176:	4611      	mov	r1, r2
 8010178:	4618      	mov	r0, r3
 801017a:	f7ff f8d9 	bl	800f330 <validate>
 801017e:	4603      	mov	r3, r0
 8010180:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010182:	7bfb      	ldrb	r3, [r7, #15]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d126      	bne.n	80101d6 <f_readdir+0x70>
		if (!fno) {
 8010188:	683b      	ldr	r3, [r7, #0]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d106      	bne.n	801019c <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801018e:	2100      	movs	r1, #0
 8010190:	6878      	ldr	r0, [r7, #4]
 8010192:	f7fe f97c 	bl	800e48e <dir_sdi>
 8010196:	4603      	mov	r3, r0
 8010198:	73fb      	strb	r3, [r7, #15]
 801019a:	e01c      	b.n	80101d6 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 801019c:	2100      	movs	r1, #0
 801019e:	6878      	ldr	r0, [r7, #4]
 80101a0:	f7fe fb5a 	bl	800e858 <dir_read>
 80101a4:	4603      	mov	r3, r0
 80101a6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80101a8:	7bfb      	ldrb	r3, [r7, #15]
 80101aa:	2b04      	cmp	r3, #4
 80101ac:	d101      	bne.n	80101b2 <f_readdir+0x4c>
 80101ae:	2300      	movs	r3, #0
 80101b0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80101b2:	7bfb      	ldrb	r3, [r7, #15]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d10e      	bne.n	80101d6 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80101b8:	6839      	ldr	r1, [r7, #0]
 80101ba:	6878      	ldr	r0, [r7, #4]
 80101bc:	f7fe fc30 	bl	800ea20 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80101c0:	2100      	movs	r1, #0
 80101c2:	6878      	ldr	r0, [r7, #4]
 80101c4:	f7fe f9ec 	bl	800e5a0 <dir_next>
 80101c8:	4603      	mov	r3, r0
 80101ca:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80101cc:	7bfb      	ldrb	r3, [r7, #15]
 80101ce:	2b04      	cmp	r3, #4
 80101d0:	d101      	bne.n	80101d6 <f_readdir+0x70>
 80101d2:	2300      	movs	r3, #0
 80101d4:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80101d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80101d8:	4618      	mov	r0, r3
 80101da:	3710      	adds	r7, #16
 80101dc:	46bd      	mov	sp, r7
 80101de:	bd80      	pop	{r7, pc}

080101e0 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b092      	sub	sp, #72	; 0x48
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	60f8      	str	r0, [r7, #12]
 80101e8:	60b9      	str	r1, [r7, #8]
 80101ea:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80101ec:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80101f0:	f107 030c 	add.w	r3, r7, #12
 80101f4:	2200      	movs	r2, #0
 80101f6:	4618      	mov	r0, r3
 80101f8:	f7fe fe16 	bl	800ee28 <find_volume>
 80101fc:	4603      	mov	r3, r0
 80101fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8010202:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010206:	2b00      	cmp	r3, #0
 8010208:	f040 8099 	bne.w	801033e <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 801020c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8010212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010214:	695a      	ldr	r2, [r3, #20]
 8010216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010218:	699b      	ldr	r3, [r3, #24]
 801021a:	3b02      	subs	r3, #2
 801021c:	429a      	cmp	r2, r3
 801021e:	d804      	bhi.n	801022a <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8010220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010222:	695a      	ldr	r2, [r3, #20]
 8010224:	68bb      	ldr	r3, [r7, #8]
 8010226:	601a      	str	r2, [r3, #0]
 8010228:	e089      	b.n	801033e <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 801022a:	2300      	movs	r3, #0
 801022c:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 801022e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010230:	781b      	ldrb	r3, [r3, #0]
 8010232:	2b01      	cmp	r3, #1
 8010234:	d128      	bne.n	8010288 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8010236:	2302      	movs	r3, #2
 8010238:	63fb      	str	r3, [r7, #60]	; 0x3c
 801023a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801023c:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 801023e:	f107 0314 	add.w	r3, r7, #20
 8010242:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010244:	4618      	mov	r0, r3
 8010246:	f7fd fe06 	bl	800de56 <get_fat>
 801024a:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 801024c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801024e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010252:	d103      	bne.n	801025c <f_getfree+0x7c>
 8010254:	2301      	movs	r3, #1
 8010256:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 801025a:	e063      	b.n	8010324 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 801025c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801025e:	2b01      	cmp	r3, #1
 8010260:	d103      	bne.n	801026a <f_getfree+0x8a>
 8010262:	2302      	movs	r3, #2
 8010264:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8010268:	e05c      	b.n	8010324 <f_getfree+0x144>
					if (stat == 0) nfree++;
 801026a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801026c:	2b00      	cmp	r3, #0
 801026e:	d102      	bne.n	8010276 <f_getfree+0x96>
 8010270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010272:	3301      	adds	r3, #1
 8010274:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8010276:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010278:	3301      	adds	r3, #1
 801027a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801027c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801027e:	699b      	ldr	r3, [r3, #24]
 8010280:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010282:	429a      	cmp	r2, r3
 8010284:	d3db      	bcc.n	801023e <f_getfree+0x5e>
 8010286:	e04d      	b.n	8010324 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8010288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801028a:	699b      	ldr	r3, [r3, #24]
 801028c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801028e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010292:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8010294:	2300      	movs	r3, #0
 8010296:	637b      	str	r3, [r7, #52]	; 0x34
 8010298:	2300      	movs	r3, #0
 801029a:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 801029c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d113      	bne.n	80102ca <f_getfree+0xea>
							res = move_window(fs, sect++);
 80102a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80102a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102a6:	1c5a      	adds	r2, r3, #1
 80102a8:	63ba      	str	r2, [r7, #56]	; 0x38
 80102aa:	4619      	mov	r1, r3
 80102ac:	f7fd fd16 	bl	800dcdc <move_window>
 80102b0:	4603      	mov	r3, r0
 80102b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80102b6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d131      	bne.n	8010322 <f_getfree+0x142>
							p = fs->win;
 80102be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102c0:	3334      	adds	r3, #52	; 0x34
 80102c2:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80102c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102c6:	899b      	ldrh	r3, [r3, #12]
 80102c8:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80102ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102cc:	781b      	ldrb	r3, [r3, #0]
 80102ce:	2b02      	cmp	r3, #2
 80102d0:	d10f      	bne.n	80102f2 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80102d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80102d4:	f7fd fa52 	bl	800d77c <ld_word>
 80102d8:	4603      	mov	r3, r0
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d102      	bne.n	80102e4 <f_getfree+0x104>
 80102de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102e0:	3301      	adds	r3, #1
 80102e2:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 80102e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102e6:	3302      	adds	r3, #2
 80102e8:	633b      	str	r3, [r7, #48]	; 0x30
 80102ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102ec:	3b02      	subs	r3, #2
 80102ee:	637b      	str	r3, [r7, #52]	; 0x34
 80102f0:	e010      	b.n	8010314 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80102f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80102f4:	f7fd fa5a 	bl	800d7ac <ld_dword>
 80102f8:	4603      	mov	r3, r0
 80102fa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d102      	bne.n	8010308 <f_getfree+0x128>
 8010302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010304:	3301      	adds	r3, #1
 8010306:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8010308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801030a:	3304      	adds	r3, #4
 801030c:	633b      	str	r3, [r7, #48]	; 0x30
 801030e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010310:	3b04      	subs	r3, #4
 8010312:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8010314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010316:	3b01      	subs	r3, #1
 8010318:	63fb      	str	r3, [r7, #60]	; 0x3c
 801031a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801031c:	2b00      	cmp	r3, #0
 801031e:	d1bd      	bne.n	801029c <f_getfree+0xbc>
 8010320:	e000      	b.n	8010324 <f_getfree+0x144>
							if (res != FR_OK) break;
 8010322:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8010324:	68bb      	ldr	r3, [r7, #8]
 8010326:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010328:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 801032a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801032c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801032e:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8010330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010332:	791a      	ldrb	r2, [r3, #4]
 8010334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010336:	f042 0201 	orr.w	r2, r2, #1
 801033a:	b2d2      	uxtb	r2, r2
 801033c:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 801033e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8010342:	4618      	mov	r0, r3
 8010344:	3748      	adds	r7, #72	; 0x48
 8010346:	46bd      	mov	sp, r7
 8010348:	bd80      	pop	{r7, pc}

0801034a <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 801034a:	b580      	push	{r7, lr}
 801034c:	b084      	sub	sp, #16
 801034e:	af00      	add	r7, sp, #0
 8010350:	6078      	str	r0, [r7, #4]
 8010352:	460b      	mov	r3, r1
 8010354:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8010356:	78fb      	ldrb	r3, [r7, #3]
 8010358:	2b0a      	cmp	r3, #10
 801035a:	d103      	bne.n	8010364 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 801035c:	210d      	movs	r1, #13
 801035e:	6878      	ldr	r0, [r7, #4]
 8010360:	f7ff fff3 	bl	801034a <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	685b      	ldr	r3, [r3, #4]
 8010368:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	2b00      	cmp	r3, #0
 801036e:	db25      	blt.n	80103bc <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	1c5a      	adds	r2, r3, #1
 8010374:	60fa      	str	r2, [r7, #12]
 8010376:	687a      	ldr	r2, [r7, #4]
 8010378:	4413      	add	r3, r2
 801037a:	78fa      	ldrb	r2, [r7, #3]
 801037c:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	2b3c      	cmp	r3, #60	; 0x3c
 8010382:	dd12      	ble.n	80103aa <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	6818      	ldr	r0, [r3, #0]
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	f103 010c 	add.w	r1, r3, #12
 801038e:	68fa      	ldr	r2, [r7, #12]
 8010390:	f107 0308 	add.w	r3, r7, #8
 8010394:	f7ff fa14 	bl	800f7c0 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8010398:	68ba      	ldr	r2, [r7, #8]
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	429a      	cmp	r2, r3
 801039e:	d101      	bne.n	80103a4 <putc_bfd+0x5a>
 80103a0:	2300      	movs	r3, #0
 80103a2:	e001      	b.n	80103a8 <putc_bfd+0x5e>
 80103a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80103a8:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	68fa      	ldr	r2, [r7, #12]
 80103ae:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	689b      	ldr	r3, [r3, #8]
 80103b4:	1c5a      	adds	r2, r3, #1
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	609a      	str	r2, [r3, #8]
 80103ba:	e000      	b.n	80103be <putc_bfd+0x74>
	if (i < 0) return;
 80103bc:	bf00      	nop
}
 80103be:	3710      	adds	r7, #16
 80103c0:	46bd      	mov	sp, r7
 80103c2:	bd80      	pop	{r7, pc}

080103c4 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b084      	sub	sp, #16
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	685b      	ldr	r3, [r3, #4]
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	db17      	blt.n	8010404 <putc_flush+0x40>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	6818      	ldr	r0, [r3, #0]
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	f103 010c 	add.w	r1, r3, #12
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	685b      	ldr	r3, [r3, #4]
 80103e2:	461a      	mov	r2, r3
 80103e4:	f107 030c 	add.w	r3, r7, #12
 80103e8:	f7ff f9ea 	bl	800f7c0 <f_write>
 80103ec:	4603      	mov	r3, r0
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d108      	bne.n	8010404 <putc_flush+0x40>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	685b      	ldr	r3, [r3, #4]
 80103f6:	461a      	mov	r2, r3
 80103f8:	68fb      	ldr	r3, [r7, #12]
 80103fa:	429a      	cmp	r2, r3
 80103fc:	d102      	bne.n	8010404 <putc_flush+0x40>
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	689b      	ldr	r3, [r3, #8]
 8010402:	e001      	b.n	8010408 <putc_flush+0x44>
	return EOF;
 8010404:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8010408:	4618      	mov	r0, r3
 801040a:	3710      	adds	r7, #16
 801040c:	46bd      	mov	sp, r7
 801040e:	bd80      	pop	{r7, pc}

08010410 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8010410:	b480      	push	{r7}
 8010412:	b083      	sub	sp, #12
 8010414:	af00      	add	r7, sp, #0
 8010416:	6078      	str	r0, [r7, #4]
 8010418:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	683a      	ldr	r2, [r7, #0]
 801041e:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	2200      	movs	r2, #0
 8010424:	605a      	str	r2, [r3, #4]
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	685a      	ldr	r2, [r3, #4]
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	609a      	str	r2, [r3, #8]
}
 801042e:	bf00      	nop
 8010430:	370c      	adds	r7, #12
 8010432:	46bd      	mov	sp, r7
 8010434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010438:	4770      	bx	lr

0801043a <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 801043a:	b580      	push	{r7, lr}
 801043c:	b096      	sub	sp, #88	; 0x58
 801043e:	af00      	add	r7, sp, #0
 8010440:	6078      	str	r0, [r7, #4]
 8010442:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8010444:	f107 030c 	add.w	r3, r7, #12
 8010448:	6839      	ldr	r1, [r7, #0]
 801044a:	4618      	mov	r0, r3
 801044c:	f7ff ffe0 	bl	8010410 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8010450:	e009      	b.n	8010466 <f_puts+0x2c>
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	1c5a      	adds	r2, r3, #1
 8010456:	607a      	str	r2, [r7, #4]
 8010458:	781a      	ldrb	r2, [r3, #0]
 801045a:	f107 030c 	add.w	r3, r7, #12
 801045e:	4611      	mov	r1, r2
 8010460:	4618      	mov	r0, r3
 8010462:	f7ff ff72 	bl	801034a <putc_bfd>
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	781b      	ldrb	r3, [r3, #0]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d1f1      	bne.n	8010452 <f_puts+0x18>
	return putc_flush(&pb);
 801046e:	f107 030c 	add.w	r3, r7, #12
 8010472:	4618      	mov	r0, r3
 8010474:	f7ff ffa6 	bl	80103c4 <putc_flush>
 8010478:	4603      	mov	r3, r0
}
 801047a:	4618      	mov	r0, r3
 801047c:	3758      	adds	r7, #88	; 0x58
 801047e:	46bd      	mov	sp, r7
 8010480:	bd80      	pop	{r7, pc}
	...

08010484 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010484:	b480      	push	{r7}
 8010486:	b087      	sub	sp, #28
 8010488:	af00      	add	r7, sp, #0
 801048a:	60f8      	str	r0, [r7, #12]
 801048c:	60b9      	str	r1, [r7, #8]
 801048e:	4613      	mov	r3, r2
 8010490:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010492:	2301      	movs	r3, #1
 8010494:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010496:	2300      	movs	r3, #0
 8010498:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801049a:	4b1f      	ldr	r3, [pc, #124]	; (8010518 <FATFS_LinkDriverEx+0x94>)
 801049c:	7a5b      	ldrb	r3, [r3, #9]
 801049e:	b2db      	uxtb	r3, r3
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d131      	bne.n	8010508 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80104a4:	4b1c      	ldr	r3, [pc, #112]	; (8010518 <FATFS_LinkDriverEx+0x94>)
 80104a6:	7a5b      	ldrb	r3, [r3, #9]
 80104a8:	b2db      	uxtb	r3, r3
 80104aa:	461a      	mov	r2, r3
 80104ac:	4b1a      	ldr	r3, [pc, #104]	; (8010518 <FATFS_LinkDriverEx+0x94>)
 80104ae:	2100      	movs	r1, #0
 80104b0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80104b2:	4b19      	ldr	r3, [pc, #100]	; (8010518 <FATFS_LinkDriverEx+0x94>)
 80104b4:	7a5b      	ldrb	r3, [r3, #9]
 80104b6:	b2db      	uxtb	r3, r3
 80104b8:	4a17      	ldr	r2, [pc, #92]	; (8010518 <FATFS_LinkDriverEx+0x94>)
 80104ba:	009b      	lsls	r3, r3, #2
 80104bc:	4413      	add	r3, r2
 80104be:	68fa      	ldr	r2, [r7, #12]
 80104c0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80104c2:	4b15      	ldr	r3, [pc, #84]	; (8010518 <FATFS_LinkDriverEx+0x94>)
 80104c4:	7a5b      	ldrb	r3, [r3, #9]
 80104c6:	b2db      	uxtb	r3, r3
 80104c8:	461a      	mov	r2, r3
 80104ca:	4b13      	ldr	r3, [pc, #76]	; (8010518 <FATFS_LinkDriverEx+0x94>)
 80104cc:	4413      	add	r3, r2
 80104ce:	79fa      	ldrb	r2, [r7, #7]
 80104d0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80104d2:	4b11      	ldr	r3, [pc, #68]	; (8010518 <FATFS_LinkDriverEx+0x94>)
 80104d4:	7a5b      	ldrb	r3, [r3, #9]
 80104d6:	b2db      	uxtb	r3, r3
 80104d8:	1c5a      	adds	r2, r3, #1
 80104da:	b2d1      	uxtb	r1, r2
 80104dc:	4a0e      	ldr	r2, [pc, #56]	; (8010518 <FATFS_LinkDriverEx+0x94>)
 80104de:	7251      	strb	r1, [r2, #9]
 80104e0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80104e2:	7dbb      	ldrb	r3, [r7, #22]
 80104e4:	3330      	adds	r3, #48	; 0x30
 80104e6:	b2da      	uxtb	r2, r3
 80104e8:	68bb      	ldr	r3, [r7, #8]
 80104ea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80104ec:	68bb      	ldr	r3, [r7, #8]
 80104ee:	3301      	adds	r3, #1
 80104f0:	223a      	movs	r2, #58	; 0x3a
 80104f2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80104f4:	68bb      	ldr	r3, [r7, #8]
 80104f6:	3302      	adds	r3, #2
 80104f8:	222f      	movs	r2, #47	; 0x2f
 80104fa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80104fc:	68bb      	ldr	r3, [r7, #8]
 80104fe:	3303      	adds	r3, #3
 8010500:	2200      	movs	r2, #0
 8010502:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010504:	2300      	movs	r3, #0
 8010506:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010508:	7dfb      	ldrb	r3, [r7, #23]
}
 801050a:	4618      	mov	r0, r3
 801050c:	371c      	adds	r7, #28
 801050e:	46bd      	mov	sp, r7
 8010510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010514:	4770      	bx	lr
 8010516:	bf00      	nop
 8010518:	20000860 	.word	0x20000860

0801051c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801051c:	b580      	push	{r7, lr}
 801051e:	b082      	sub	sp, #8
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
 8010524:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010526:	2200      	movs	r2, #0
 8010528:	6839      	ldr	r1, [r7, #0]
 801052a:	6878      	ldr	r0, [r7, #4]
 801052c:	f7ff ffaa 	bl	8010484 <FATFS_LinkDriverEx>
 8010530:	4603      	mov	r3, r0
}
 8010532:	4618      	mov	r0, r3
 8010534:	3708      	adds	r7, #8
 8010536:	46bd      	mov	sp, r7
 8010538:	bd80      	pop	{r7, pc}
	...

0801053c <__errno>:
 801053c:	4b01      	ldr	r3, [pc, #4]	; (8010544 <__errno+0x8>)
 801053e:	6818      	ldr	r0, [r3, #0]
 8010540:	4770      	bx	lr
 8010542:	bf00      	nop
 8010544:	20000168 	.word	0x20000168

08010548 <__libc_init_array>:
 8010548:	b570      	push	{r4, r5, r6, lr}
 801054a:	4e0d      	ldr	r6, [pc, #52]	; (8010580 <__libc_init_array+0x38>)
 801054c:	4c0d      	ldr	r4, [pc, #52]	; (8010584 <__libc_init_array+0x3c>)
 801054e:	1ba4      	subs	r4, r4, r6
 8010550:	10a4      	asrs	r4, r4, #2
 8010552:	2500      	movs	r5, #0
 8010554:	42a5      	cmp	r5, r4
 8010556:	d109      	bne.n	801056c <__libc_init_array+0x24>
 8010558:	4e0b      	ldr	r6, [pc, #44]	; (8010588 <__libc_init_array+0x40>)
 801055a:	4c0c      	ldr	r4, [pc, #48]	; (801058c <__libc_init_array+0x44>)
 801055c:	f004 fb66 	bl	8014c2c <_init>
 8010560:	1ba4      	subs	r4, r4, r6
 8010562:	10a4      	asrs	r4, r4, #2
 8010564:	2500      	movs	r5, #0
 8010566:	42a5      	cmp	r5, r4
 8010568:	d105      	bne.n	8010576 <__libc_init_array+0x2e>
 801056a:	bd70      	pop	{r4, r5, r6, pc}
 801056c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010570:	4798      	blx	r3
 8010572:	3501      	adds	r5, #1
 8010574:	e7ee      	b.n	8010554 <__libc_init_array+0xc>
 8010576:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801057a:	4798      	blx	r3
 801057c:	3501      	adds	r5, #1
 801057e:	e7f2      	b.n	8010566 <__libc_init_array+0x1e>
 8010580:	080154d8 	.word	0x080154d8
 8010584:	080154d8 	.word	0x080154d8
 8010588:	080154d8 	.word	0x080154d8
 801058c:	080154dc 	.word	0x080154dc

08010590 <memcpy>:
 8010590:	b510      	push	{r4, lr}
 8010592:	1e43      	subs	r3, r0, #1
 8010594:	440a      	add	r2, r1
 8010596:	4291      	cmp	r1, r2
 8010598:	d100      	bne.n	801059c <memcpy+0xc>
 801059a:	bd10      	pop	{r4, pc}
 801059c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80105a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80105a4:	e7f7      	b.n	8010596 <memcpy+0x6>

080105a6 <memset>:
 80105a6:	4402      	add	r2, r0
 80105a8:	4603      	mov	r3, r0
 80105aa:	4293      	cmp	r3, r2
 80105ac:	d100      	bne.n	80105b0 <memset+0xa>
 80105ae:	4770      	bx	lr
 80105b0:	f803 1b01 	strb.w	r1, [r3], #1
 80105b4:	e7f9      	b.n	80105aa <memset+0x4>

080105b6 <__cvt>:
 80105b6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80105ba:	ec55 4b10 	vmov	r4, r5, d0
 80105be:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80105c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80105c4:	2d00      	cmp	r5, #0
 80105c6:	460e      	mov	r6, r1
 80105c8:	4691      	mov	r9, r2
 80105ca:	4619      	mov	r1, r3
 80105cc:	bfb8      	it	lt
 80105ce:	4622      	movlt	r2, r4
 80105d0:	462b      	mov	r3, r5
 80105d2:	f027 0720 	bic.w	r7, r7, #32
 80105d6:	bfbb      	ittet	lt
 80105d8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80105dc:	461d      	movlt	r5, r3
 80105de:	2300      	movge	r3, #0
 80105e0:	232d      	movlt	r3, #45	; 0x2d
 80105e2:	bfb8      	it	lt
 80105e4:	4614      	movlt	r4, r2
 80105e6:	2f46      	cmp	r7, #70	; 0x46
 80105e8:	700b      	strb	r3, [r1, #0]
 80105ea:	d004      	beq.n	80105f6 <__cvt+0x40>
 80105ec:	2f45      	cmp	r7, #69	; 0x45
 80105ee:	d100      	bne.n	80105f2 <__cvt+0x3c>
 80105f0:	3601      	adds	r6, #1
 80105f2:	2102      	movs	r1, #2
 80105f4:	e000      	b.n	80105f8 <__cvt+0x42>
 80105f6:	2103      	movs	r1, #3
 80105f8:	ab03      	add	r3, sp, #12
 80105fa:	9301      	str	r3, [sp, #4]
 80105fc:	ab02      	add	r3, sp, #8
 80105fe:	9300      	str	r3, [sp, #0]
 8010600:	4632      	mov	r2, r6
 8010602:	4653      	mov	r3, sl
 8010604:	ec45 4b10 	vmov	d0, r4, r5
 8010608:	f000 fe1a 	bl	8011240 <_dtoa_r>
 801060c:	2f47      	cmp	r7, #71	; 0x47
 801060e:	4680      	mov	r8, r0
 8010610:	d102      	bne.n	8010618 <__cvt+0x62>
 8010612:	f019 0f01 	tst.w	r9, #1
 8010616:	d026      	beq.n	8010666 <__cvt+0xb0>
 8010618:	2f46      	cmp	r7, #70	; 0x46
 801061a:	eb08 0906 	add.w	r9, r8, r6
 801061e:	d111      	bne.n	8010644 <__cvt+0x8e>
 8010620:	f898 3000 	ldrb.w	r3, [r8]
 8010624:	2b30      	cmp	r3, #48	; 0x30
 8010626:	d10a      	bne.n	801063e <__cvt+0x88>
 8010628:	2200      	movs	r2, #0
 801062a:	2300      	movs	r3, #0
 801062c:	4620      	mov	r0, r4
 801062e:	4629      	mov	r1, r5
 8010630:	f7f0 fa4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8010634:	b918      	cbnz	r0, 801063e <__cvt+0x88>
 8010636:	f1c6 0601 	rsb	r6, r6, #1
 801063a:	f8ca 6000 	str.w	r6, [sl]
 801063e:	f8da 3000 	ldr.w	r3, [sl]
 8010642:	4499      	add	r9, r3
 8010644:	2200      	movs	r2, #0
 8010646:	2300      	movs	r3, #0
 8010648:	4620      	mov	r0, r4
 801064a:	4629      	mov	r1, r5
 801064c:	f7f0 fa3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8010650:	b938      	cbnz	r0, 8010662 <__cvt+0xac>
 8010652:	2230      	movs	r2, #48	; 0x30
 8010654:	9b03      	ldr	r3, [sp, #12]
 8010656:	454b      	cmp	r3, r9
 8010658:	d205      	bcs.n	8010666 <__cvt+0xb0>
 801065a:	1c59      	adds	r1, r3, #1
 801065c:	9103      	str	r1, [sp, #12]
 801065e:	701a      	strb	r2, [r3, #0]
 8010660:	e7f8      	b.n	8010654 <__cvt+0x9e>
 8010662:	f8cd 900c 	str.w	r9, [sp, #12]
 8010666:	9b03      	ldr	r3, [sp, #12]
 8010668:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801066a:	eba3 0308 	sub.w	r3, r3, r8
 801066e:	4640      	mov	r0, r8
 8010670:	6013      	str	r3, [r2, #0]
 8010672:	b004      	add	sp, #16
 8010674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010678 <__exponent>:
 8010678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801067a:	2900      	cmp	r1, #0
 801067c:	4604      	mov	r4, r0
 801067e:	bfba      	itte	lt
 8010680:	4249      	neglt	r1, r1
 8010682:	232d      	movlt	r3, #45	; 0x2d
 8010684:	232b      	movge	r3, #43	; 0x2b
 8010686:	2909      	cmp	r1, #9
 8010688:	f804 2b02 	strb.w	r2, [r4], #2
 801068c:	7043      	strb	r3, [r0, #1]
 801068e:	dd20      	ble.n	80106d2 <__exponent+0x5a>
 8010690:	f10d 0307 	add.w	r3, sp, #7
 8010694:	461f      	mov	r7, r3
 8010696:	260a      	movs	r6, #10
 8010698:	fb91 f5f6 	sdiv	r5, r1, r6
 801069c:	fb06 1115 	mls	r1, r6, r5, r1
 80106a0:	3130      	adds	r1, #48	; 0x30
 80106a2:	2d09      	cmp	r5, #9
 80106a4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80106a8:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80106ac:	4629      	mov	r1, r5
 80106ae:	dc09      	bgt.n	80106c4 <__exponent+0x4c>
 80106b0:	3130      	adds	r1, #48	; 0x30
 80106b2:	3b02      	subs	r3, #2
 80106b4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80106b8:	42bb      	cmp	r3, r7
 80106ba:	4622      	mov	r2, r4
 80106bc:	d304      	bcc.n	80106c8 <__exponent+0x50>
 80106be:	1a10      	subs	r0, r2, r0
 80106c0:	b003      	add	sp, #12
 80106c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106c4:	4613      	mov	r3, r2
 80106c6:	e7e7      	b.n	8010698 <__exponent+0x20>
 80106c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80106cc:	f804 2b01 	strb.w	r2, [r4], #1
 80106d0:	e7f2      	b.n	80106b8 <__exponent+0x40>
 80106d2:	2330      	movs	r3, #48	; 0x30
 80106d4:	4419      	add	r1, r3
 80106d6:	7083      	strb	r3, [r0, #2]
 80106d8:	1d02      	adds	r2, r0, #4
 80106da:	70c1      	strb	r1, [r0, #3]
 80106dc:	e7ef      	b.n	80106be <__exponent+0x46>
	...

080106e0 <_printf_float>:
 80106e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106e4:	b08d      	sub	sp, #52	; 0x34
 80106e6:	460c      	mov	r4, r1
 80106e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80106ec:	4616      	mov	r6, r2
 80106ee:	461f      	mov	r7, r3
 80106f0:	4605      	mov	r5, r0
 80106f2:	f001 fcd7 	bl	80120a4 <_localeconv_r>
 80106f6:	6803      	ldr	r3, [r0, #0]
 80106f8:	9304      	str	r3, [sp, #16]
 80106fa:	4618      	mov	r0, r3
 80106fc:	f7ef fd68 	bl	80001d0 <strlen>
 8010700:	2300      	movs	r3, #0
 8010702:	930a      	str	r3, [sp, #40]	; 0x28
 8010704:	f8d8 3000 	ldr.w	r3, [r8]
 8010708:	9005      	str	r0, [sp, #20]
 801070a:	3307      	adds	r3, #7
 801070c:	f023 0307 	bic.w	r3, r3, #7
 8010710:	f103 0208 	add.w	r2, r3, #8
 8010714:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010718:	f8d4 b000 	ldr.w	fp, [r4]
 801071c:	f8c8 2000 	str.w	r2, [r8]
 8010720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010724:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010728:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801072c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010730:	9307      	str	r3, [sp, #28]
 8010732:	f8cd 8018 	str.w	r8, [sp, #24]
 8010736:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801073a:	4ba7      	ldr	r3, [pc, #668]	; (80109d8 <_printf_float+0x2f8>)
 801073c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010740:	f7f0 f9f4 	bl	8000b2c <__aeabi_dcmpun>
 8010744:	bb70      	cbnz	r0, 80107a4 <_printf_float+0xc4>
 8010746:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801074a:	4ba3      	ldr	r3, [pc, #652]	; (80109d8 <_printf_float+0x2f8>)
 801074c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010750:	f7f0 f9ce 	bl	8000af0 <__aeabi_dcmple>
 8010754:	bb30      	cbnz	r0, 80107a4 <_printf_float+0xc4>
 8010756:	2200      	movs	r2, #0
 8010758:	2300      	movs	r3, #0
 801075a:	4640      	mov	r0, r8
 801075c:	4649      	mov	r1, r9
 801075e:	f7f0 f9bd 	bl	8000adc <__aeabi_dcmplt>
 8010762:	b110      	cbz	r0, 801076a <_printf_float+0x8a>
 8010764:	232d      	movs	r3, #45	; 0x2d
 8010766:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801076a:	4a9c      	ldr	r2, [pc, #624]	; (80109dc <_printf_float+0x2fc>)
 801076c:	4b9c      	ldr	r3, [pc, #624]	; (80109e0 <_printf_float+0x300>)
 801076e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8010772:	bf8c      	ite	hi
 8010774:	4690      	movhi	r8, r2
 8010776:	4698      	movls	r8, r3
 8010778:	2303      	movs	r3, #3
 801077a:	f02b 0204 	bic.w	r2, fp, #4
 801077e:	6123      	str	r3, [r4, #16]
 8010780:	6022      	str	r2, [r4, #0]
 8010782:	f04f 0900 	mov.w	r9, #0
 8010786:	9700      	str	r7, [sp, #0]
 8010788:	4633      	mov	r3, r6
 801078a:	aa0b      	add	r2, sp, #44	; 0x2c
 801078c:	4621      	mov	r1, r4
 801078e:	4628      	mov	r0, r5
 8010790:	f000 f9e6 	bl	8010b60 <_printf_common>
 8010794:	3001      	adds	r0, #1
 8010796:	f040 808d 	bne.w	80108b4 <_printf_float+0x1d4>
 801079a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801079e:	b00d      	add	sp, #52	; 0x34
 80107a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107a4:	4642      	mov	r2, r8
 80107a6:	464b      	mov	r3, r9
 80107a8:	4640      	mov	r0, r8
 80107aa:	4649      	mov	r1, r9
 80107ac:	f7f0 f9be 	bl	8000b2c <__aeabi_dcmpun>
 80107b0:	b110      	cbz	r0, 80107b8 <_printf_float+0xd8>
 80107b2:	4a8c      	ldr	r2, [pc, #560]	; (80109e4 <_printf_float+0x304>)
 80107b4:	4b8c      	ldr	r3, [pc, #560]	; (80109e8 <_printf_float+0x308>)
 80107b6:	e7da      	b.n	801076e <_printf_float+0x8e>
 80107b8:	6861      	ldr	r1, [r4, #4]
 80107ba:	1c4b      	adds	r3, r1, #1
 80107bc:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80107c0:	a80a      	add	r0, sp, #40	; 0x28
 80107c2:	d13e      	bne.n	8010842 <_printf_float+0x162>
 80107c4:	2306      	movs	r3, #6
 80107c6:	6063      	str	r3, [r4, #4]
 80107c8:	2300      	movs	r3, #0
 80107ca:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80107ce:	ab09      	add	r3, sp, #36	; 0x24
 80107d0:	9300      	str	r3, [sp, #0]
 80107d2:	ec49 8b10 	vmov	d0, r8, r9
 80107d6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80107da:	6022      	str	r2, [r4, #0]
 80107dc:	f8cd a004 	str.w	sl, [sp, #4]
 80107e0:	6861      	ldr	r1, [r4, #4]
 80107e2:	4628      	mov	r0, r5
 80107e4:	f7ff fee7 	bl	80105b6 <__cvt>
 80107e8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80107ec:	2b47      	cmp	r3, #71	; 0x47
 80107ee:	4680      	mov	r8, r0
 80107f0:	d109      	bne.n	8010806 <_printf_float+0x126>
 80107f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107f4:	1cd8      	adds	r0, r3, #3
 80107f6:	db02      	blt.n	80107fe <_printf_float+0x11e>
 80107f8:	6862      	ldr	r2, [r4, #4]
 80107fa:	4293      	cmp	r3, r2
 80107fc:	dd47      	ble.n	801088e <_printf_float+0x1ae>
 80107fe:	f1aa 0a02 	sub.w	sl, sl, #2
 8010802:	fa5f fa8a 	uxtb.w	sl, sl
 8010806:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801080a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801080c:	d824      	bhi.n	8010858 <_printf_float+0x178>
 801080e:	3901      	subs	r1, #1
 8010810:	4652      	mov	r2, sl
 8010812:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010816:	9109      	str	r1, [sp, #36]	; 0x24
 8010818:	f7ff ff2e 	bl	8010678 <__exponent>
 801081c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801081e:	1813      	adds	r3, r2, r0
 8010820:	2a01      	cmp	r2, #1
 8010822:	4681      	mov	r9, r0
 8010824:	6123      	str	r3, [r4, #16]
 8010826:	dc02      	bgt.n	801082e <_printf_float+0x14e>
 8010828:	6822      	ldr	r2, [r4, #0]
 801082a:	07d1      	lsls	r1, r2, #31
 801082c:	d501      	bpl.n	8010832 <_printf_float+0x152>
 801082e:	3301      	adds	r3, #1
 8010830:	6123      	str	r3, [r4, #16]
 8010832:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010836:	2b00      	cmp	r3, #0
 8010838:	d0a5      	beq.n	8010786 <_printf_float+0xa6>
 801083a:	232d      	movs	r3, #45	; 0x2d
 801083c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010840:	e7a1      	b.n	8010786 <_printf_float+0xa6>
 8010842:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8010846:	f000 8177 	beq.w	8010b38 <_printf_float+0x458>
 801084a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801084e:	d1bb      	bne.n	80107c8 <_printf_float+0xe8>
 8010850:	2900      	cmp	r1, #0
 8010852:	d1b9      	bne.n	80107c8 <_printf_float+0xe8>
 8010854:	2301      	movs	r3, #1
 8010856:	e7b6      	b.n	80107c6 <_printf_float+0xe6>
 8010858:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801085c:	d119      	bne.n	8010892 <_printf_float+0x1b2>
 801085e:	2900      	cmp	r1, #0
 8010860:	6863      	ldr	r3, [r4, #4]
 8010862:	dd0c      	ble.n	801087e <_printf_float+0x19e>
 8010864:	6121      	str	r1, [r4, #16]
 8010866:	b913      	cbnz	r3, 801086e <_printf_float+0x18e>
 8010868:	6822      	ldr	r2, [r4, #0]
 801086a:	07d2      	lsls	r2, r2, #31
 801086c:	d502      	bpl.n	8010874 <_printf_float+0x194>
 801086e:	3301      	adds	r3, #1
 8010870:	440b      	add	r3, r1
 8010872:	6123      	str	r3, [r4, #16]
 8010874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010876:	65a3      	str	r3, [r4, #88]	; 0x58
 8010878:	f04f 0900 	mov.w	r9, #0
 801087c:	e7d9      	b.n	8010832 <_printf_float+0x152>
 801087e:	b913      	cbnz	r3, 8010886 <_printf_float+0x1a6>
 8010880:	6822      	ldr	r2, [r4, #0]
 8010882:	07d0      	lsls	r0, r2, #31
 8010884:	d501      	bpl.n	801088a <_printf_float+0x1aa>
 8010886:	3302      	adds	r3, #2
 8010888:	e7f3      	b.n	8010872 <_printf_float+0x192>
 801088a:	2301      	movs	r3, #1
 801088c:	e7f1      	b.n	8010872 <_printf_float+0x192>
 801088e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8010892:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010896:	4293      	cmp	r3, r2
 8010898:	db05      	blt.n	80108a6 <_printf_float+0x1c6>
 801089a:	6822      	ldr	r2, [r4, #0]
 801089c:	6123      	str	r3, [r4, #16]
 801089e:	07d1      	lsls	r1, r2, #31
 80108a0:	d5e8      	bpl.n	8010874 <_printf_float+0x194>
 80108a2:	3301      	adds	r3, #1
 80108a4:	e7e5      	b.n	8010872 <_printf_float+0x192>
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	bfd4      	ite	le
 80108aa:	f1c3 0302 	rsble	r3, r3, #2
 80108ae:	2301      	movgt	r3, #1
 80108b0:	4413      	add	r3, r2
 80108b2:	e7de      	b.n	8010872 <_printf_float+0x192>
 80108b4:	6823      	ldr	r3, [r4, #0]
 80108b6:	055a      	lsls	r2, r3, #21
 80108b8:	d407      	bmi.n	80108ca <_printf_float+0x1ea>
 80108ba:	6923      	ldr	r3, [r4, #16]
 80108bc:	4642      	mov	r2, r8
 80108be:	4631      	mov	r1, r6
 80108c0:	4628      	mov	r0, r5
 80108c2:	47b8      	blx	r7
 80108c4:	3001      	adds	r0, #1
 80108c6:	d12b      	bne.n	8010920 <_printf_float+0x240>
 80108c8:	e767      	b.n	801079a <_printf_float+0xba>
 80108ca:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80108ce:	f240 80dc 	bls.w	8010a8a <_printf_float+0x3aa>
 80108d2:	2200      	movs	r2, #0
 80108d4:	2300      	movs	r3, #0
 80108d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80108da:	f7f0 f8f5 	bl	8000ac8 <__aeabi_dcmpeq>
 80108de:	2800      	cmp	r0, #0
 80108e0:	d033      	beq.n	801094a <_printf_float+0x26a>
 80108e2:	2301      	movs	r3, #1
 80108e4:	4a41      	ldr	r2, [pc, #260]	; (80109ec <_printf_float+0x30c>)
 80108e6:	4631      	mov	r1, r6
 80108e8:	4628      	mov	r0, r5
 80108ea:	47b8      	blx	r7
 80108ec:	3001      	adds	r0, #1
 80108ee:	f43f af54 	beq.w	801079a <_printf_float+0xba>
 80108f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80108f6:	429a      	cmp	r2, r3
 80108f8:	db02      	blt.n	8010900 <_printf_float+0x220>
 80108fa:	6823      	ldr	r3, [r4, #0]
 80108fc:	07d8      	lsls	r0, r3, #31
 80108fe:	d50f      	bpl.n	8010920 <_printf_float+0x240>
 8010900:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010904:	4631      	mov	r1, r6
 8010906:	4628      	mov	r0, r5
 8010908:	47b8      	blx	r7
 801090a:	3001      	adds	r0, #1
 801090c:	f43f af45 	beq.w	801079a <_printf_float+0xba>
 8010910:	f04f 0800 	mov.w	r8, #0
 8010914:	f104 091a 	add.w	r9, r4, #26
 8010918:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801091a:	3b01      	subs	r3, #1
 801091c:	4543      	cmp	r3, r8
 801091e:	dc09      	bgt.n	8010934 <_printf_float+0x254>
 8010920:	6823      	ldr	r3, [r4, #0]
 8010922:	079b      	lsls	r3, r3, #30
 8010924:	f100 8103 	bmi.w	8010b2e <_printf_float+0x44e>
 8010928:	68e0      	ldr	r0, [r4, #12]
 801092a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801092c:	4298      	cmp	r0, r3
 801092e:	bfb8      	it	lt
 8010930:	4618      	movlt	r0, r3
 8010932:	e734      	b.n	801079e <_printf_float+0xbe>
 8010934:	2301      	movs	r3, #1
 8010936:	464a      	mov	r2, r9
 8010938:	4631      	mov	r1, r6
 801093a:	4628      	mov	r0, r5
 801093c:	47b8      	blx	r7
 801093e:	3001      	adds	r0, #1
 8010940:	f43f af2b 	beq.w	801079a <_printf_float+0xba>
 8010944:	f108 0801 	add.w	r8, r8, #1
 8010948:	e7e6      	b.n	8010918 <_printf_float+0x238>
 801094a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801094c:	2b00      	cmp	r3, #0
 801094e:	dc2b      	bgt.n	80109a8 <_printf_float+0x2c8>
 8010950:	2301      	movs	r3, #1
 8010952:	4a26      	ldr	r2, [pc, #152]	; (80109ec <_printf_float+0x30c>)
 8010954:	4631      	mov	r1, r6
 8010956:	4628      	mov	r0, r5
 8010958:	47b8      	blx	r7
 801095a:	3001      	adds	r0, #1
 801095c:	f43f af1d 	beq.w	801079a <_printf_float+0xba>
 8010960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010962:	b923      	cbnz	r3, 801096e <_printf_float+0x28e>
 8010964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010966:	b913      	cbnz	r3, 801096e <_printf_float+0x28e>
 8010968:	6823      	ldr	r3, [r4, #0]
 801096a:	07d9      	lsls	r1, r3, #31
 801096c:	d5d8      	bpl.n	8010920 <_printf_float+0x240>
 801096e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010972:	4631      	mov	r1, r6
 8010974:	4628      	mov	r0, r5
 8010976:	47b8      	blx	r7
 8010978:	3001      	adds	r0, #1
 801097a:	f43f af0e 	beq.w	801079a <_printf_float+0xba>
 801097e:	f04f 0900 	mov.w	r9, #0
 8010982:	f104 0a1a 	add.w	sl, r4, #26
 8010986:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010988:	425b      	negs	r3, r3
 801098a:	454b      	cmp	r3, r9
 801098c:	dc01      	bgt.n	8010992 <_printf_float+0x2b2>
 801098e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010990:	e794      	b.n	80108bc <_printf_float+0x1dc>
 8010992:	2301      	movs	r3, #1
 8010994:	4652      	mov	r2, sl
 8010996:	4631      	mov	r1, r6
 8010998:	4628      	mov	r0, r5
 801099a:	47b8      	blx	r7
 801099c:	3001      	adds	r0, #1
 801099e:	f43f aefc 	beq.w	801079a <_printf_float+0xba>
 80109a2:	f109 0901 	add.w	r9, r9, #1
 80109a6:	e7ee      	b.n	8010986 <_printf_float+0x2a6>
 80109a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80109aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80109ac:	429a      	cmp	r2, r3
 80109ae:	bfa8      	it	ge
 80109b0:	461a      	movge	r2, r3
 80109b2:	2a00      	cmp	r2, #0
 80109b4:	4691      	mov	r9, r2
 80109b6:	dd07      	ble.n	80109c8 <_printf_float+0x2e8>
 80109b8:	4613      	mov	r3, r2
 80109ba:	4631      	mov	r1, r6
 80109bc:	4642      	mov	r2, r8
 80109be:	4628      	mov	r0, r5
 80109c0:	47b8      	blx	r7
 80109c2:	3001      	adds	r0, #1
 80109c4:	f43f aee9 	beq.w	801079a <_printf_float+0xba>
 80109c8:	f104 031a 	add.w	r3, r4, #26
 80109cc:	f04f 0b00 	mov.w	fp, #0
 80109d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80109d4:	9306      	str	r3, [sp, #24]
 80109d6:	e015      	b.n	8010a04 <_printf_float+0x324>
 80109d8:	7fefffff 	.word	0x7fefffff
 80109dc:	08015198 	.word	0x08015198
 80109e0:	08015194 	.word	0x08015194
 80109e4:	080151a0 	.word	0x080151a0
 80109e8:	0801519c 	.word	0x0801519c
 80109ec:	080151a4 	.word	0x080151a4
 80109f0:	2301      	movs	r3, #1
 80109f2:	9a06      	ldr	r2, [sp, #24]
 80109f4:	4631      	mov	r1, r6
 80109f6:	4628      	mov	r0, r5
 80109f8:	47b8      	blx	r7
 80109fa:	3001      	adds	r0, #1
 80109fc:	f43f aecd 	beq.w	801079a <_printf_float+0xba>
 8010a00:	f10b 0b01 	add.w	fp, fp, #1
 8010a04:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8010a08:	ebaa 0309 	sub.w	r3, sl, r9
 8010a0c:	455b      	cmp	r3, fp
 8010a0e:	dcef      	bgt.n	80109f0 <_printf_float+0x310>
 8010a10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010a14:	429a      	cmp	r2, r3
 8010a16:	44d0      	add	r8, sl
 8010a18:	db15      	blt.n	8010a46 <_printf_float+0x366>
 8010a1a:	6823      	ldr	r3, [r4, #0]
 8010a1c:	07da      	lsls	r2, r3, #31
 8010a1e:	d412      	bmi.n	8010a46 <_printf_float+0x366>
 8010a20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010a24:	eba3 020a 	sub.w	r2, r3, sl
 8010a28:	eba3 0a01 	sub.w	sl, r3, r1
 8010a2c:	4592      	cmp	sl, r2
 8010a2e:	bfa8      	it	ge
 8010a30:	4692      	movge	sl, r2
 8010a32:	f1ba 0f00 	cmp.w	sl, #0
 8010a36:	dc0e      	bgt.n	8010a56 <_printf_float+0x376>
 8010a38:	f04f 0800 	mov.w	r8, #0
 8010a3c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010a40:	f104 091a 	add.w	r9, r4, #26
 8010a44:	e019      	b.n	8010a7a <_printf_float+0x39a>
 8010a46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010a4a:	4631      	mov	r1, r6
 8010a4c:	4628      	mov	r0, r5
 8010a4e:	47b8      	blx	r7
 8010a50:	3001      	adds	r0, #1
 8010a52:	d1e5      	bne.n	8010a20 <_printf_float+0x340>
 8010a54:	e6a1      	b.n	801079a <_printf_float+0xba>
 8010a56:	4653      	mov	r3, sl
 8010a58:	4642      	mov	r2, r8
 8010a5a:	4631      	mov	r1, r6
 8010a5c:	4628      	mov	r0, r5
 8010a5e:	47b8      	blx	r7
 8010a60:	3001      	adds	r0, #1
 8010a62:	d1e9      	bne.n	8010a38 <_printf_float+0x358>
 8010a64:	e699      	b.n	801079a <_printf_float+0xba>
 8010a66:	2301      	movs	r3, #1
 8010a68:	464a      	mov	r2, r9
 8010a6a:	4631      	mov	r1, r6
 8010a6c:	4628      	mov	r0, r5
 8010a6e:	47b8      	blx	r7
 8010a70:	3001      	adds	r0, #1
 8010a72:	f43f ae92 	beq.w	801079a <_printf_float+0xba>
 8010a76:	f108 0801 	add.w	r8, r8, #1
 8010a7a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010a7e:	1a9b      	subs	r3, r3, r2
 8010a80:	eba3 030a 	sub.w	r3, r3, sl
 8010a84:	4543      	cmp	r3, r8
 8010a86:	dcee      	bgt.n	8010a66 <_printf_float+0x386>
 8010a88:	e74a      	b.n	8010920 <_printf_float+0x240>
 8010a8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010a8c:	2a01      	cmp	r2, #1
 8010a8e:	dc01      	bgt.n	8010a94 <_printf_float+0x3b4>
 8010a90:	07db      	lsls	r3, r3, #31
 8010a92:	d53a      	bpl.n	8010b0a <_printf_float+0x42a>
 8010a94:	2301      	movs	r3, #1
 8010a96:	4642      	mov	r2, r8
 8010a98:	4631      	mov	r1, r6
 8010a9a:	4628      	mov	r0, r5
 8010a9c:	47b8      	blx	r7
 8010a9e:	3001      	adds	r0, #1
 8010aa0:	f43f ae7b 	beq.w	801079a <_printf_float+0xba>
 8010aa4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010aa8:	4631      	mov	r1, r6
 8010aaa:	4628      	mov	r0, r5
 8010aac:	47b8      	blx	r7
 8010aae:	3001      	adds	r0, #1
 8010ab0:	f108 0801 	add.w	r8, r8, #1
 8010ab4:	f43f ae71 	beq.w	801079a <_printf_float+0xba>
 8010ab8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010aba:	2200      	movs	r2, #0
 8010abc:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8010ac0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	f7ef ffff 	bl	8000ac8 <__aeabi_dcmpeq>
 8010aca:	b9c8      	cbnz	r0, 8010b00 <_printf_float+0x420>
 8010acc:	4653      	mov	r3, sl
 8010ace:	4642      	mov	r2, r8
 8010ad0:	4631      	mov	r1, r6
 8010ad2:	4628      	mov	r0, r5
 8010ad4:	47b8      	blx	r7
 8010ad6:	3001      	adds	r0, #1
 8010ad8:	d10e      	bne.n	8010af8 <_printf_float+0x418>
 8010ada:	e65e      	b.n	801079a <_printf_float+0xba>
 8010adc:	2301      	movs	r3, #1
 8010ade:	4652      	mov	r2, sl
 8010ae0:	4631      	mov	r1, r6
 8010ae2:	4628      	mov	r0, r5
 8010ae4:	47b8      	blx	r7
 8010ae6:	3001      	adds	r0, #1
 8010ae8:	f43f ae57 	beq.w	801079a <_printf_float+0xba>
 8010aec:	f108 0801 	add.w	r8, r8, #1
 8010af0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010af2:	3b01      	subs	r3, #1
 8010af4:	4543      	cmp	r3, r8
 8010af6:	dcf1      	bgt.n	8010adc <_printf_float+0x3fc>
 8010af8:	464b      	mov	r3, r9
 8010afa:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010afe:	e6de      	b.n	80108be <_printf_float+0x1de>
 8010b00:	f04f 0800 	mov.w	r8, #0
 8010b04:	f104 0a1a 	add.w	sl, r4, #26
 8010b08:	e7f2      	b.n	8010af0 <_printf_float+0x410>
 8010b0a:	2301      	movs	r3, #1
 8010b0c:	e7df      	b.n	8010ace <_printf_float+0x3ee>
 8010b0e:	2301      	movs	r3, #1
 8010b10:	464a      	mov	r2, r9
 8010b12:	4631      	mov	r1, r6
 8010b14:	4628      	mov	r0, r5
 8010b16:	47b8      	blx	r7
 8010b18:	3001      	adds	r0, #1
 8010b1a:	f43f ae3e 	beq.w	801079a <_printf_float+0xba>
 8010b1e:	f108 0801 	add.w	r8, r8, #1
 8010b22:	68e3      	ldr	r3, [r4, #12]
 8010b24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010b26:	1a9b      	subs	r3, r3, r2
 8010b28:	4543      	cmp	r3, r8
 8010b2a:	dcf0      	bgt.n	8010b0e <_printf_float+0x42e>
 8010b2c:	e6fc      	b.n	8010928 <_printf_float+0x248>
 8010b2e:	f04f 0800 	mov.w	r8, #0
 8010b32:	f104 0919 	add.w	r9, r4, #25
 8010b36:	e7f4      	b.n	8010b22 <_printf_float+0x442>
 8010b38:	2900      	cmp	r1, #0
 8010b3a:	f43f ae8b 	beq.w	8010854 <_printf_float+0x174>
 8010b3e:	2300      	movs	r3, #0
 8010b40:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8010b44:	ab09      	add	r3, sp, #36	; 0x24
 8010b46:	9300      	str	r3, [sp, #0]
 8010b48:	ec49 8b10 	vmov	d0, r8, r9
 8010b4c:	6022      	str	r2, [r4, #0]
 8010b4e:	f8cd a004 	str.w	sl, [sp, #4]
 8010b52:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010b56:	4628      	mov	r0, r5
 8010b58:	f7ff fd2d 	bl	80105b6 <__cvt>
 8010b5c:	4680      	mov	r8, r0
 8010b5e:	e648      	b.n	80107f2 <_printf_float+0x112>

08010b60 <_printf_common>:
 8010b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b64:	4691      	mov	r9, r2
 8010b66:	461f      	mov	r7, r3
 8010b68:	688a      	ldr	r2, [r1, #8]
 8010b6a:	690b      	ldr	r3, [r1, #16]
 8010b6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010b70:	4293      	cmp	r3, r2
 8010b72:	bfb8      	it	lt
 8010b74:	4613      	movlt	r3, r2
 8010b76:	f8c9 3000 	str.w	r3, [r9]
 8010b7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010b7e:	4606      	mov	r6, r0
 8010b80:	460c      	mov	r4, r1
 8010b82:	b112      	cbz	r2, 8010b8a <_printf_common+0x2a>
 8010b84:	3301      	adds	r3, #1
 8010b86:	f8c9 3000 	str.w	r3, [r9]
 8010b8a:	6823      	ldr	r3, [r4, #0]
 8010b8c:	0699      	lsls	r1, r3, #26
 8010b8e:	bf42      	ittt	mi
 8010b90:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010b94:	3302      	addmi	r3, #2
 8010b96:	f8c9 3000 	strmi.w	r3, [r9]
 8010b9a:	6825      	ldr	r5, [r4, #0]
 8010b9c:	f015 0506 	ands.w	r5, r5, #6
 8010ba0:	d107      	bne.n	8010bb2 <_printf_common+0x52>
 8010ba2:	f104 0a19 	add.w	sl, r4, #25
 8010ba6:	68e3      	ldr	r3, [r4, #12]
 8010ba8:	f8d9 2000 	ldr.w	r2, [r9]
 8010bac:	1a9b      	subs	r3, r3, r2
 8010bae:	42ab      	cmp	r3, r5
 8010bb0:	dc28      	bgt.n	8010c04 <_printf_common+0xa4>
 8010bb2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010bb6:	6822      	ldr	r2, [r4, #0]
 8010bb8:	3300      	adds	r3, #0
 8010bba:	bf18      	it	ne
 8010bbc:	2301      	movne	r3, #1
 8010bbe:	0692      	lsls	r2, r2, #26
 8010bc0:	d42d      	bmi.n	8010c1e <_printf_common+0xbe>
 8010bc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010bc6:	4639      	mov	r1, r7
 8010bc8:	4630      	mov	r0, r6
 8010bca:	47c0      	blx	r8
 8010bcc:	3001      	adds	r0, #1
 8010bce:	d020      	beq.n	8010c12 <_printf_common+0xb2>
 8010bd0:	6823      	ldr	r3, [r4, #0]
 8010bd2:	68e5      	ldr	r5, [r4, #12]
 8010bd4:	f8d9 2000 	ldr.w	r2, [r9]
 8010bd8:	f003 0306 	and.w	r3, r3, #6
 8010bdc:	2b04      	cmp	r3, #4
 8010bde:	bf08      	it	eq
 8010be0:	1aad      	subeq	r5, r5, r2
 8010be2:	68a3      	ldr	r3, [r4, #8]
 8010be4:	6922      	ldr	r2, [r4, #16]
 8010be6:	bf0c      	ite	eq
 8010be8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010bec:	2500      	movne	r5, #0
 8010bee:	4293      	cmp	r3, r2
 8010bf0:	bfc4      	itt	gt
 8010bf2:	1a9b      	subgt	r3, r3, r2
 8010bf4:	18ed      	addgt	r5, r5, r3
 8010bf6:	f04f 0900 	mov.w	r9, #0
 8010bfa:	341a      	adds	r4, #26
 8010bfc:	454d      	cmp	r5, r9
 8010bfe:	d11a      	bne.n	8010c36 <_printf_common+0xd6>
 8010c00:	2000      	movs	r0, #0
 8010c02:	e008      	b.n	8010c16 <_printf_common+0xb6>
 8010c04:	2301      	movs	r3, #1
 8010c06:	4652      	mov	r2, sl
 8010c08:	4639      	mov	r1, r7
 8010c0a:	4630      	mov	r0, r6
 8010c0c:	47c0      	blx	r8
 8010c0e:	3001      	adds	r0, #1
 8010c10:	d103      	bne.n	8010c1a <_printf_common+0xba>
 8010c12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c1a:	3501      	adds	r5, #1
 8010c1c:	e7c3      	b.n	8010ba6 <_printf_common+0x46>
 8010c1e:	18e1      	adds	r1, r4, r3
 8010c20:	1c5a      	adds	r2, r3, #1
 8010c22:	2030      	movs	r0, #48	; 0x30
 8010c24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010c28:	4422      	add	r2, r4
 8010c2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010c2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010c32:	3302      	adds	r3, #2
 8010c34:	e7c5      	b.n	8010bc2 <_printf_common+0x62>
 8010c36:	2301      	movs	r3, #1
 8010c38:	4622      	mov	r2, r4
 8010c3a:	4639      	mov	r1, r7
 8010c3c:	4630      	mov	r0, r6
 8010c3e:	47c0      	blx	r8
 8010c40:	3001      	adds	r0, #1
 8010c42:	d0e6      	beq.n	8010c12 <_printf_common+0xb2>
 8010c44:	f109 0901 	add.w	r9, r9, #1
 8010c48:	e7d8      	b.n	8010bfc <_printf_common+0x9c>
	...

08010c4c <_printf_i>:
 8010c4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010c50:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010c54:	460c      	mov	r4, r1
 8010c56:	7e09      	ldrb	r1, [r1, #24]
 8010c58:	b085      	sub	sp, #20
 8010c5a:	296e      	cmp	r1, #110	; 0x6e
 8010c5c:	4617      	mov	r7, r2
 8010c5e:	4606      	mov	r6, r0
 8010c60:	4698      	mov	r8, r3
 8010c62:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010c64:	f000 80b3 	beq.w	8010dce <_printf_i+0x182>
 8010c68:	d822      	bhi.n	8010cb0 <_printf_i+0x64>
 8010c6a:	2963      	cmp	r1, #99	; 0x63
 8010c6c:	d036      	beq.n	8010cdc <_printf_i+0x90>
 8010c6e:	d80a      	bhi.n	8010c86 <_printf_i+0x3a>
 8010c70:	2900      	cmp	r1, #0
 8010c72:	f000 80b9 	beq.w	8010de8 <_printf_i+0x19c>
 8010c76:	2958      	cmp	r1, #88	; 0x58
 8010c78:	f000 8083 	beq.w	8010d82 <_printf_i+0x136>
 8010c7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010c80:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010c84:	e032      	b.n	8010cec <_printf_i+0xa0>
 8010c86:	2964      	cmp	r1, #100	; 0x64
 8010c88:	d001      	beq.n	8010c8e <_printf_i+0x42>
 8010c8a:	2969      	cmp	r1, #105	; 0x69
 8010c8c:	d1f6      	bne.n	8010c7c <_printf_i+0x30>
 8010c8e:	6820      	ldr	r0, [r4, #0]
 8010c90:	6813      	ldr	r3, [r2, #0]
 8010c92:	0605      	lsls	r5, r0, #24
 8010c94:	f103 0104 	add.w	r1, r3, #4
 8010c98:	d52a      	bpl.n	8010cf0 <_printf_i+0xa4>
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	6011      	str	r1, [r2, #0]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	da03      	bge.n	8010caa <_printf_i+0x5e>
 8010ca2:	222d      	movs	r2, #45	; 0x2d
 8010ca4:	425b      	negs	r3, r3
 8010ca6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010caa:	486f      	ldr	r0, [pc, #444]	; (8010e68 <_printf_i+0x21c>)
 8010cac:	220a      	movs	r2, #10
 8010cae:	e039      	b.n	8010d24 <_printf_i+0xd8>
 8010cb0:	2973      	cmp	r1, #115	; 0x73
 8010cb2:	f000 809d 	beq.w	8010df0 <_printf_i+0x1a4>
 8010cb6:	d808      	bhi.n	8010cca <_printf_i+0x7e>
 8010cb8:	296f      	cmp	r1, #111	; 0x6f
 8010cba:	d020      	beq.n	8010cfe <_printf_i+0xb2>
 8010cbc:	2970      	cmp	r1, #112	; 0x70
 8010cbe:	d1dd      	bne.n	8010c7c <_printf_i+0x30>
 8010cc0:	6823      	ldr	r3, [r4, #0]
 8010cc2:	f043 0320 	orr.w	r3, r3, #32
 8010cc6:	6023      	str	r3, [r4, #0]
 8010cc8:	e003      	b.n	8010cd2 <_printf_i+0x86>
 8010cca:	2975      	cmp	r1, #117	; 0x75
 8010ccc:	d017      	beq.n	8010cfe <_printf_i+0xb2>
 8010cce:	2978      	cmp	r1, #120	; 0x78
 8010cd0:	d1d4      	bne.n	8010c7c <_printf_i+0x30>
 8010cd2:	2378      	movs	r3, #120	; 0x78
 8010cd4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010cd8:	4864      	ldr	r0, [pc, #400]	; (8010e6c <_printf_i+0x220>)
 8010cda:	e055      	b.n	8010d88 <_printf_i+0x13c>
 8010cdc:	6813      	ldr	r3, [r2, #0]
 8010cde:	1d19      	adds	r1, r3, #4
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	6011      	str	r1, [r2, #0]
 8010ce4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010ce8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010cec:	2301      	movs	r3, #1
 8010cee:	e08c      	b.n	8010e0a <_printf_i+0x1be>
 8010cf0:	681b      	ldr	r3, [r3, #0]
 8010cf2:	6011      	str	r1, [r2, #0]
 8010cf4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010cf8:	bf18      	it	ne
 8010cfa:	b21b      	sxthne	r3, r3
 8010cfc:	e7cf      	b.n	8010c9e <_printf_i+0x52>
 8010cfe:	6813      	ldr	r3, [r2, #0]
 8010d00:	6825      	ldr	r5, [r4, #0]
 8010d02:	1d18      	adds	r0, r3, #4
 8010d04:	6010      	str	r0, [r2, #0]
 8010d06:	0628      	lsls	r0, r5, #24
 8010d08:	d501      	bpl.n	8010d0e <_printf_i+0xc2>
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	e002      	b.n	8010d14 <_printf_i+0xc8>
 8010d0e:	0668      	lsls	r0, r5, #25
 8010d10:	d5fb      	bpl.n	8010d0a <_printf_i+0xbe>
 8010d12:	881b      	ldrh	r3, [r3, #0]
 8010d14:	4854      	ldr	r0, [pc, #336]	; (8010e68 <_printf_i+0x21c>)
 8010d16:	296f      	cmp	r1, #111	; 0x6f
 8010d18:	bf14      	ite	ne
 8010d1a:	220a      	movne	r2, #10
 8010d1c:	2208      	moveq	r2, #8
 8010d1e:	2100      	movs	r1, #0
 8010d20:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010d24:	6865      	ldr	r5, [r4, #4]
 8010d26:	60a5      	str	r5, [r4, #8]
 8010d28:	2d00      	cmp	r5, #0
 8010d2a:	f2c0 8095 	blt.w	8010e58 <_printf_i+0x20c>
 8010d2e:	6821      	ldr	r1, [r4, #0]
 8010d30:	f021 0104 	bic.w	r1, r1, #4
 8010d34:	6021      	str	r1, [r4, #0]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d13d      	bne.n	8010db6 <_printf_i+0x16a>
 8010d3a:	2d00      	cmp	r5, #0
 8010d3c:	f040 808e 	bne.w	8010e5c <_printf_i+0x210>
 8010d40:	4665      	mov	r5, ip
 8010d42:	2a08      	cmp	r2, #8
 8010d44:	d10b      	bne.n	8010d5e <_printf_i+0x112>
 8010d46:	6823      	ldr	r3, [r4, #0]
 8010d48:	07db      	lsls	r3, r3, #31
 8010d4a:	d508      	bpl.n	8010d5e <_printf_i+0x112>
 8010d4c:	6923      	ldr	r3, [r4, #16]
 8010d4e:	6862      	ldr	r2, [r4, #4]
 8010d50:	429a      	cmp	r2, r3
 8010d52:	bfde      	ittt	le
 8010d54:	2330      	movle	r3, #48	; 0x30
 8010d56:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010d5a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010d5e:	ebac 0305 	sub.w	r3, ip, r5
 8010d62:	6123      	str	r3, [r4, #16]
 8010d64:	f8cd 8000 	str.w	r8, [sp]
 8010d68:	463b      	mov	r3, r7
 8010d6a:	aa03      	add	r2, sp, #12
 8010d6c:	4621      	mov	r1, r4
 8010d6e:	4630      	mov	r0, r6
 8010d70:	f7ff fef6 	bl	8010b60 <_printf_common>
 8010d74:	3001      	adds	r0, #1
 8010d76:	d14d      	bne.n	8010e14 <_printf_i+0x1c8>
 8010d78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010d7c:	b005      	add	sp, #20
 8010d7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d82:	4839      	ldr	r0, [pc, #228]	; (8010e68 <_printf_i+0x21c>)
 8010d84:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010d88:	6813      	ldr	r3, [r2, #0]
 8010d8a:	6821      	ldr	r1, [r4, #0]
 8010d8c:	1d1d      	adds	r5, r3, #4
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	6015      	str	r5, [r2, #0]
 8010d92:	060a      	lsls	r2, r1, #24
 8010d94:	d50b      	bpl.n	8010dae <_printf_i+0x162>
 8010d96:	07ca      	lsls	r2, r1, #31
 8010d98:	bf44      	itt	mi
 8010d9a:	f041 0120 	orrmi.w	r1, r1, #32
 8010d9e:	6021      	strmi	r1, [r4, #0]
 8010da0:	b91b      	cbnz	r3, 8010daa <_printf_i+0x15e>
 8010da2:	6822      	ldr	r2, [r4, #0]
 8010da4:	f022 0220 	bic.w	r2, r2, #32
 8010da8:	6022      	str	r2, [r4, #0]
 8010daa:	2210      	movs	r2, #16
 8010dac:	e7b7      	b.n	8010d1e <_printf_i+0xd2>
 8010dae:	064d      	lsls	r5, r1, #25
 8010db0:	bf48      	it	mi
 8010db2:	b29b      	uxthmi	r3, r3
 8010db4:	e7ef      	b.n	8010d96 <_printf_i+0x14a>
 8010db6:	4665      	mov	r5, ip
 8010db8:	fbb3 f1f2 	udiv	r1, r3, r2
 8010dbc:	fb02 3311 	mls	r3, r2, r1, r3
 8010dc0:	5cc3      	ldrb	r3, [r0, r3]
 8010dc2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010dc6:	460b      	mov	r3, r1
 8010dc8:	2900      	cmp	r1, #0
 8010dca:	d1f5      	bne.n	8010db8 <_printf_i+0x16c>
 8010dcc:	e7b9      	b.n	8010d42 <_printf_i+0xf6>
 8010dce:	6813      	ldr	r3, [r2, #0]
 8010dd0:	6825      	ldr	r5, [r4, #0]
 8010dd2:	6961      	ldr	r1, [r4, #20]
 8010dd4:	1d18      	adds	r0, r3, #4
 8010dd6:	6010      	str	r0, [r2, #0]
 8010dd8:	0628      	lsls	r0, r5, #24
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	d501      	bpl.n	8010de2 <_printf_i+0x196>
 8010dde:	6019      	str	r1, [r3, #0]
 8010de0:	e002      	b.n	8010de8 <_printf_i+0x19c>
 8010de2:	066a      	lsls	r2, r5, #25
 8010de4:	d5fb      	bpl.n	8010dde <_printf_i+0x192>
 8010de6:	8019      	strh	r1, [r3, #0]
 8010de8:	2300      	movs	r3, #0
 8010dea:	6123      	str	r3, [r4, #16]
 8010dec:	4665      	mov	r5, ip
 8010dee:	e7b9      	b.n	8010d64 <_printf_i+0x118>
 8010df0:	6813      	ldr	r3, [r2, #0]
 8010df2:	1d19      	adds	r1, r3, #4
 8010df4:	6011      	str	r1, [r2, #0]
 8010df6:	681d      	ldr	r5, [r3, #0]
 8010df8:	6862      	ldr	r2, [r4, #4]
 8010dfa:	2100      	movs	r1, #0
 8010dfc:	4628      	mov	r0, r5
 8010dfe:	f7ef f9ef 	bl	80001e0 <memchr>
 8010e02:	b108      	cbz	r0, 8010e08 <_printf_i+0x1bc>
 8010e04:	1b40      	subs	r0, r0, r5
 8010e06:	6060      	str	r0, [r4, #4]
 8010e08:	6863      	ldr	r3, [r4, #4]
 8010e0a:	6123      	str	r3, [r4, #16]
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e12:	e7a7      	b.n	8010d64 <_printf_i+0x118>
 8010e14:	6923      	ldr	r3, [r4, #16]
 8010e16:	462a      	mov	r2, r5
 8010e18:	4639      	mov	r1, r7
 8010e1a:	4630      	mov	r0, r6
 8010e1c:	47c0      	blx	r8
 8010e1e:	3001      	adds	r0, #1
 8010e20:	d0aa      	beq.n	8010d78 <_printf_i+0x12c>
 8010e22:	6823      	ldr	r3, [r4, #0]
 8010e24:	079b      	lsls	r3, r3, #30
 8010e26:	d413      	bmi.n	8010e50 <_printf_i+0x204>
 8010e28:	68e0      	ldr	r0, [r4, #12]
 8010e2a:	9b03      	ldr	r3, [sp, #12]
 8010e2c:	4298      	cmp	r0, r3
 8010e2e:	bfb8      	it	lt
 8010e30:	4618      	movlt	r0, r3
 8010e32:	e7a3      	b.n	8010d7c <_printf_i+0x130>
 8010e34:	2301      	movs	r3, #1
 8010e36:	464a      	mov	r2, r9
 8010e38:	4639      	mov	r1, r7
 8010e3a:	4630      	mov	r0, r6
 8010e3c:	47c0      	blx	r8
 8010e3e:	3001      	adds	r0, #1
 8010e40:	d09a      	beq.n	8010d78 <_printf_i+0x12c>
 8010e42:	3501      	adds	r5, #1
 8010e44:	68e3      	ldr	r3, [r4, #12]
 8010e46:	9a03      	ldr	r2, [sp, #12]
 8010e48:	1a9b      	subs	r3, r3, r2
 8010e4a:	42ab      	cmp	r3, r5
 8010e4c:	dcf2      	bgt.n	8010e34 <_printf_i+0x1e8>
 8010e4e:	e7eb      	b.n	8010e28 <_printf_i+0x1dc>
 8010e50:	2500      	movs	r5, #0
 8010e52:	f104 0919 	add.w	r9, r4, #25
 8010e56:	e7f5      	b.n	8010e44 <_printf_i+0x1f8>
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	d1ac      	bne.n	8010db6 <_printf_i+0x16a>
 8010e5c:	7803      	ldrb	r3, [r0, #0]
 8010e5e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010e62:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010e66:	e76c      	b.n	8010d42 <_printf_i+0xf6>
 8010e68:	080151a6 	.word	0x080151a6
 8010e6c:	080151b7 	.word	0x080151b7

08010e70 <iprintf>:
 8010e70:	b40f      	push	{r0, r1, r2, r3}
 8010e72:	4b0a      	ldr	r3, [pc, #40]	; (8010e9c <iprintf+0x2c>)
 8010e74:	b513      	push	{r0, r1, r4, lr}
 8010e76:	681c      	ldr	r4, [r3, #0]
 8010e78:	b124      	cbz	r4, 8010e84 <iprintf+0x14>
 8010e7a:	69a3      	ldr	r3, [r4, #24]
 8010e7c:	b913      	cbnz	r3, 8010e84 <iprintf+0x14>
 8010e7e:	4620      	mov	r0, r4
 8010e80:	f001 f886 	bl	8011f90 <__sinit>
 8010e84:	ab05      	add	r3, sp, #20
 8010e86:	9a04      	ldr	r2, [sp, #16]
 8010e88:	68a1      	ldr	r1, [r4, #8]
 8010e8a:	9301      	str	r3, [sp, #4]
 8010e8c:	4620      	mov	r0, r4
 8010e8e:	f001 fea3 	bl	8012bd8 <_vfiprintf_r>
 8010e92:	b002      	add	sp, #8
 8010e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e98:	b004      	add	sp, #16
 8010e9a:	4770      	bx	lr
 8010e9c:	20000168 	.word	0x20000168

08010ea0 <_puts_r>:
 8010ea0:	b570      	push	{r4, r5, r6, lr}
 8010ea2:	460e      	mov	r6, r1
 8010ea4:	4605      	mov	r5, r0
 8010ea6:	b118      	cbz	r0, 8010eb0 <_puts_r+0x10>
 8010ea8:	6983      	ldr	r3, [r0, #24]
 8010eaa:	b90b      	cbnz	r3, 8010eb0 <_puts_r+0x10>
 8010eac:	f001 f870 	bl	8011f90 <__sinit>
 8010eb0:	69ab      	ldr	r3, [r5, #24]
 8010eb2:	68ac      	ldr	r4, [r5, #8]
 8010eb4:	b913      	cbnz	r3, 8010ebc <_puts_r+0x1c>
 8010eb6:	4628      	mov	r0, r5
 8010eb8:	f001 f86a 	bl	8011f90 <__sinit>
 8010ebc:	4b23      	ldr	r3, [pc, #140]	; (8010f4c <_puts_r+0xac>)
 8010ebe:	429c      	cmp	r4, r3
 8010ec0:	d117      	bne.n	8010ef2 <_puts_r+0x52>
 8010ec2:	686c      	ldr	r4, [r5, #4]
 8010ec4:	89a3      	ldrh	r3, [r4, #12]
 8010ec6:	071b      	lsls	r3, r3, #28
 8010ec8:	d51d      	bpl.n	8010f06 <_puts_r+0x66>
 8010eca:	6923      	ldr	r3, [r4, #16]
 8010ecc:	b1db      	cbz	r3, 8010f06 <_puts_r+0x66>
 8010ece:	3e01      	subs	r6, #1
 8010ed0:	68a3      	ldr	r3, [r4, #8]
 8010ed2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010ed6:	3b01      	subs	r3, #1
 8010ed8:	60a3      	str	r3, [r4, #8]
 8010eda:	b9e9      	cbnz	r1, 8010f18 <_puts_r+0x78>
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	da2e      	bge.n	8010f3e <_puts_r+0x9e>
 8010ee0:	4622      	mov	r2, r4
 8010ee2:	210a      	movs	r1, #10
 8010ee4:	4628      	mov	r0, r5
 8010ee6:	f000 f85f 	bl	8010fa8 <__swbuf_r>
 8010eea:	3001      	adds	r0, #1
 8010eec:	d011      	beq.n	8010f12 <_puts_r+0x72>
 8010eee:	200a      	movs	r0, #10
 8010ef0:	e011      	b.n	8010f16 <_puts_r+0x76>
 8010ef2:	4b17      	ldr	r3, [pc, #92]	; (8010f50 <_puts_r+0xb0>)
 8010ef4:	429c      	cmp	r4, r3
 8010ef6:	d101      	bne.n	8010efc <_puts_r+0x5c>
 8010ef8:	68ac      	ldr	r4, [r5, #8]
 8010efa:	e7e3      	b.n	8010ec4 <_puts_r+0x24>
 8010efc:	4b15      	ldr	r3, [pc, #84]	; (8010f54 <_puts_r+0xb4>)
 8010efe:	429c      	cmp	r4, r3
 8010f00:	bf08      	it	eq
 8010f02:	68ec      	ldreq	r4, [r5, #12]
 8010f04:	e7de      	b.n	8010ec4 <_puts_r+0x24>
 8010f06:	4621      	mov	r1, r4
 8010f08:	4628      	mov	r0, r5
 8010f0a:	f000 f89f 	bl	801104c <__swsetup_r>
 8010f0e:	2800      	cmp	r0, #0
 8010f10:	d0dd      	beq.n	8010ece <_puts_r+0x2e>
 8010f12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010f16:	bd70      	pop	{r4, r5, r6, pc}
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	da04      	bge.n	8010f26 <_puts_r+0x86>
 8010f1c:	69a2      	ldr	r2, [r4, #24]
 8010f1e:	429a      	cmp	r2, r3
 8010f20:	dc06      	bgt.n	8010f30 <_puts_r+0x90>
 8010f22:	290a      	cmp	r1, #10
 8010f24:	d004      	beq.n	8010f30 <_puts_r+0x90>
 8010f26:	6823      	ldr	r3, [r4, #0]
 8010f28:	1c5a      	adds	r2, r3, #1
 8010f2a:	6022      	str	r2, [r4, #0]
 8010f2c:	7019      	strb	r1, [r3, #0]
 8010f2e:	e7cf      	b.n	8010ed0 <_puts_r+0x30>
 8010f30:	4622      	mov	r2, r4
 8010f32:	4628      	mov	r0, r5
 8010f34:	f000 f838 	bl	8010fa8 <__swbuf_r>
 8010f38:	3001      	adds	r0, #1
 8010f3a:	d1c9      	bne.n	8010ed0 <_puts_r+0x30>
 8010f3c:	e7e9      	b.n	8010f12 <_puts_r+0x72>
 8010f3e:	6823      	ldr	r3, [r4, #0]
 8010f40:	200a      	movs	r0, #10
 8010f42:	1c5a      	adds	r2, r3, #1
 8010f44:	6022      	str	r2, [r4, #0]
 8010f46:	7018      	strb	r0, [r3, #0]
 8010f48:	e7e5      	b.n	8010f16 <_puts_r+0x76>
 8010f4a:	bf00      	nop
 8010f4c:	080151f8 	.word	0x080151f8
 8010f50:	08015218 	.word	0x08015218
 8010f54:	080151d8 	.word	0x080151d8

08010f58 <puts>:
 8010f58:	4b02      	ldr	r3, [pc, #8]	; (8010f64 <puts+0xc>)
 8010f5a:	4601      	mov	r1, r0
 8010f5c:	6818      	ldr	r0, [r3, #0]
 8010f5e:	f7ff bf9f 	b.w	8010ea0 <_puts_r>
 8010f62:	bf00      	nop
 8010f64:	20000168 	.word	0x20000168

08010f68 <siprintf>:
 8010f68:	b40e      	push	{r1, r2, r3}
 8010f6a:	b500      	push	{lr}
 8010f6c:	b09c      	sub	sp, #112	; 0x70
 8010f6e:	ab1d      	add	r3, sp, #116	; 0x74
 8010f70:	9002      	str	r0, [sp, #8]
 8010f72:	9006      	str	r0, [sp, #24]
 8010f74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010f78:	4809      	ldr	r0, [pc, #36]	; (8010fa0 <siprintf+0x38>)
 8010f7a:	9107      	str	r1, [sp, #28]
 8010f7c:	9104      	str	r1, [sp, #16]
 8010f7e:	4909      	ldr	r1, [pc, #36]	; (8010fa4 <siprintf+0x3c>)
 8010f80:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f84:	9105      	str	r1, [sp, #20]
 8010f86:	6800      	ldr	r0, [r0, #0]
 8010f88:	9301      	str	r3, [sp, #4]
 8010f8a:	a902      	add	r1, sp, #8
 8010f8c:	f001 fd02 	bl	8012994 <_svfiprintf_r>
 8010f90:	9b02      	ldr	r3, [sp, #8]
 8010f92:	2200      	movs	r2, #0
 8010f94:	701a      	strb	r2, [r3, #0]
 8010f96:	b01c      	add	sp, #112	; 0x70
 8010f98:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f9c:	b003      	add	sp, #12
 8010f9e:	4770      	bx	lr
 8010fa0:	20000168 	.word	0x20000168
 8010fa4:	ffff0208 	.word	0xffff0208

08010fa8 <__swbuf_r>:
 8010fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010faa:	460e      	mov	r6, r1
 8010fac:	4614      	mov	r4, r2
 8010fae:	4605      	mov	r5, r0
 8010fb0:	b118      	cbz	r0, 8010fba <__swbuf_r+0x12>
 8010fb2:	6983      	ldr	r3, [r0, #24]
 8010fb4:	b90b      	cbnz	r3, 8010fba <__swbuf_r+0x12>
 8010fb6:	f000 ffeb 	bl	8011f90 <__sinit>
 8010fba:	4b21      	ldr	r3, [pc, #132]	; (8011040 <__swbuf_r+0x98>)
 8010fbc:	429c      	cmp	r4, r3
 8010fbe:	d12a      	bne.n	8011016 <__swbuf_r+0x6e>
 8010fc0:	686c      	ldr	r4, [r5, #4]
 8010fc2:	69a3      	ldr	r3, [r4, #24]
 8010fc4:	60a3      	str	r3, [r4, #8]
 8010fc6:	89a3      	ldrh	r3, [r4, #12]
 8010fc8:	071a      	lsls	r2, r3, #28
 8010fca:	d52e      	bpl.n	801102a <__swbuf_r+0x82>
 8010fcc:	6923      	ldr	r3, [r4, #16]
 8010fce:	b363      	cbz	r3, 801102a <__swbuf_r+0x82>
 8010fd0:	6923      	ldr	r3, [r4, #16]
 8010fd2:	6820      	ldr	r0, [r4, #0]
 8010fd4:	1ac0      	subs	r0, r0, r3
 8010fd6:	6963      	ldr	r3, [r4, #20]
 8010fd8:	b2f6      	uxtb	r6, r6
 8010fda:	4283      	cmp	r3, r0
 8010fdc:	4637      	mov	r7, r6
 8010fde:	dc04      	bgt.n	8010fea <__swbuf_r+0x42>
 8010fe0:	4621      	mov	r1, r4
 8010fe2:	4628      	mov	r0, r5
 8010fe4:	f000 ff6a 	bl	8011ebc <_fflush_r>
 8010fe8:	bb28      	cbnz	r0, 8011036 <__swbuf_r+0x8e>
 8010fea:	68a3      	ldr	r3, [r4, #8]
 8010fec:	3b01      	subs	r3, #1
 8010fee:	60a3      	str	r3, [r4, #8]
 8010ff0:	6823      	ldr	r3, [r4, #0]
 8010ff2:	1c5a      	adds	r2, r3, #1
 8010ff4:	6022      	str	r2, [r4, #0]
 8010ff6:	701e      	strb	r6, [r3, #0]
 8010ff8:	6963      	ldr	r3, [r4, #20]
 8010ffa:	3001      	adds	r0, #1
 8010ffc:	4283      	cmp	r3, r0
 8010ffe:	d004      	beq.n	801100a <__swbuf_r+0x62>
 8011000:	89a3      	ldrh	r3, [r4, #12]
 8011002:	07db      	lsls	r3, r3, #31
 8011004:	d519      	bpl.n	801103a <__swbuf_r+0x92>
 8011006:	2e0a      	cmp	r6, #10
 8011008:	d117      	bne.n	801103a <__swbuf_r+0x92>
 801100a:	4621      	mov	r1, r4
 801100c:	4628      	mov	r0, r5
 801100e:	f000 ff55 	bl	8011ebc <_fflush_r>
 8011012:	b190      	cbz	r0, 801103a <__swbuf_r+0x92>
 8011014:	e00f      	b.n	8011036 <__swbuf_r+0x8e>
 8011016:	4b0b      	ldr	r3, [pc, #44]	; (8011044 <__swbuf_r+0x9c>)
 8011018:	429c      	cmp	r4, r3
 801101a:	d101      	bne.n	8011020 <__swbuf_r+0x78>
 801101c:	68ac      	ldr	r4, [r5, #8]
 801101e:	e7d0      	b.n	8010fc2 <__swbuf_r+0x1a>
 8011020:	4b09      	ldr	r3, [pc, #36]	; (8011048 <__swbuf_r+0xa0>)
 8011022:	429c      	cmp	r4, r3
 8011024:	bf08      	it	eq
 8011026:	68ec      	ldreq	r4, [r5, #12]
 8011028:	e7cb      	b.n	8010fc2 <__swbuf_r+0x1a>
 801102a:	4621      	mov	r1, r4
 801102c:	4628      	mov	r0, r5
 801102e:	f000 f80d 	bl	801104c <__swsetup_r>
 8011032:	2800      	cmp	r0, #0
 8011034:	d0cc      	beq.n	8010fd0 <__swbuf_r+0x28>
 8011036:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801103a:	4638      	mov	r0, r7
 801103c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801103e:	bf00      	nop
 8011040:	080151f8 	.word	0x080151f8
 8011044:	08015218 	.word	0x08015218
 8011048:	080151d8 	.word	0x080151d8

0801104c <__swsetup_r>:
 801104c:	4b32      	ldr	r3, [pc, #200]	; (8011118 <__swsetup_r+0xcc>)
 801104e:	b570      	push	{r4, r5, r6, lr}
 8011050:	681d      	ldr	r5, [r3, #0]
 8011052:	4606      	mov	r6, r0
 8011054:	460c      	mov	r4, r1
 8011056:	b125      	cbz	r5, 8011062 <__swsetup_r+0x16>
 8011058:	69ab      	ldr	r3, [r5, #24]
 801105a:	b913      	cbnz	r3, 8011062 <__swsetup_r+0x16>
 801105c:	4628      	mov	r0, r5
 801105e:	f000 ff97 	bl	8011f90 <__sinit>
 8011062:	4b2e      	ldr	r3, [pc, #184]	; (801111c <__swsetup_r+0xd0>)
 8011064:	429c      	cmp	r4, r3
 8011066:	d10f      	bne.n	8011088 <__swsetup_r+0x3c>
 8011068:	686c      	ldr	r4, [r5, #4]
 801106a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801106e:	b29a      	uxth	r2, r3
 8011070:	0715      	lsls	r5, r2, #28
 8011072:	d42c      	bmi.n	80110ce <__swsetup_r+0x82>
 8011074:	06d0      	lsls	r0, r2, #27
 8011076:	d411      	bmi.n	801109c <__swsetup_r+0x50>
 8011078:	2209      	movs	r2, #9
 801107a:	6032      	str	r2, [r6, #0]
 801107c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011080:	81a3      	strh	r3, [r4, #12]
 8011082:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011086:	e03e      	b.n	8011106 <__swsetup_r+0xba>
 8011088:	4b25      	ldr	r3, [pc, #148]	; (8011120 <__swsetup_r+0xd4>)
 801108a:	429c      	cmp	r4, r3
 801108c:	d101      	bne.n	8011092 <__swsetup_r+0x46>
 801108e:	68ac      	ldr	r4, [r5, #8]
 8011090:	e7eb      	b.n	801106a <__swsetup_r+0x1e>
 8011092:	4b24      	ldr	r3, [pc, #144]	; (8011124 <__swsetup_r+0xd8>)
 8011094:	429c      	cmp	r4, r3
 8011096:	bf08      	it	eq
 8011098:	68ec      	ldreq	r4, [r5, #12]
 801109a:	e7e6      	b.n	801106a <__swsetup_r+0x1e>
 801109c:	0751      	lsls	r1, r2, #29
 801109e:	d512      	bpl.n	80110c6 <__swsetup_r+0x7a>
 80110a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80110a2:	b141      	cbz	r1, 80110b6 <__swsetup_r+0x6a>
 80110a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80110a8:	4299      	cmp	r1, r3
 80110aa:	d002      	beq.n	80110b2 <__swsetup_r+0x66>
 80110ac:	4630      	mov	r0, r6
 80110ae:	f001 fb6f 	bl	8012790 <_free_r>
 80110b2:	2300      	movs	r3, #0
 80110b4:	6363      	str	r3, [r4, #52]	; 0x34
 80110b6:	89a3      	ldrh	r3, [r4, #12]
 80110b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80110bc:	81a3      	strh	r3, [r4, #12]
 80110be:	2300      	movs	r3, #0
 80110c0:	6063      	str	r3, [r4, #4]
 80110c2:	6923      	ldr	r3, [r4, #16]
 80110c4:	6023      	str	r3, [r4, #0]
 80110c6:	89a3      	ldrh	r3, [r4, #12]
 80110c8:	f043 0308 	orr.w	r3, r3, #8
 80110cc:	81a3      	strh	r3, [r4, #12]
 80110ce:	6923      	ldr	r3, [r4, #16]
 80110d0:	b94b      	cbnz	r3, 80110e6 <__swsetup_r+0x9a>
 80110d2:	89a3      	ldrh	r3, [r4, #12]
 80110d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80110d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80110dc:	d003      	beq.n	80110e6 <__swsetup_r+0x9a>
 80110de:	4621      	mov	r1, r4
 80110e0:	4630      	mov	r0, r6
 80110e2:	f001 f811 	bl	8012108 <__smakebuf_r>
 80110e6:	89a2      	ldrh	r2, [r4, #12]
 80110e8:	f012 0301 	ands.w	r3, r2, #1
 80110ec:	d00c      	beq.n	8011108 <__swsetup_r+0xbc>
 80110ee:	2300      	movs	r3, #0
 80110f0:	60a3      	str	r3, [r4, #8]
 80110f2:	6963      	ldr	r3, [r4, #20]
 80110f4:	425b      	negs	r3, r3
 80110f6:	61a3      	str	r3, [r4, #24]
 80110f8:	6923      	ldr	r3, [r4, #16]
 80110fa:	b953      	cbnz	r3, 8011112 <__swsetup_r+0xc6>
 80110fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011100:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8011104:	d1ba      	bne.n	801107c <__swsetup_r+0x30>
 8011106:	bd70      	pop	{r4, r5, r6, pc}
 8011108:	0792      	lsls	r2, r2, #30
 801110a:	bf58      	it	pl
 801110c:	6963      	ldrpl	r3, [r4, #20]
 801110e:	60a3      	str	r3, [r4, #8]
 8011110:	e7f2      	b.n	80110f8 <__swsetup_r+0xac>
 8011112:	2000      	movs	r0, #0
 8011114:	e7f7      	b.n	8011106 <__swsetup_r+0xba>
 8011116:	bf00      	nop
 8011118:	20000168 	.word	0x20000168
 801111c:	080151f8 	.word	0x080151f8
 8011120:	08015218 	.word	0x08015218
 8011124:	080151d8 	.word	0x080151d8

08011128 <quorem>:
 8011128:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801112c:	6903      	ldr	r3, [r0, #16]
 801112e:	690c      	ldr	r4, [r1, #16]
 8011130:	42a3      	cmp	r3, r4
 8011132:	4680      	mov	r8, r0
 8011134:	f2c0 8082 	blt.w	801123c <quorem+0x114>
 8011138:	3c01      	subs	r4, #1
 801113a:	f101 0714 	add.w	r7, r1, #20
 801113e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8011142:	f100 0614 	add.w	r6, r0, #20
 8011146:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801114a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801114e:	eb06 030c 	add.w	r3, r6, ip
 8011152:	3501      	adds	r5, #1
 8011154:	eb07 090c 	add.w	r9, r7, ip
 8011158:	9301      	str	r3, [sp, #4]
 801115a:	fbb0 f5f5 	udiv	r5, r0, r5
 801115e:	b395      	cbz	r5, 80111c6 <quorem+0x9e>
 8011160:	f04f 0a00 	mov.w	sl, #0
 8011164:	4638      	mov	r0, r7
 8011166:	46b6      	mov	lr, r6
 8011168:	46d3      	mov	fp, sl
 801116a:	f850 2b04 	ldr.w	r2, [r0], #4
 801116e:	b293      	uxth	r3, r2
 8011170:	fb05 a303 	mla	r3, r5, r3, sl
 8011174:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8011178:	b29b      	uxth	r3, r3
 801117a:	ebab 0303 	sub.w	r3, fp, r3
 801117e:	0c12      	lsrs	r2, r2, #16
 8011180:	f8de b000 	ldr.w	fp, [lr]
 8011184:	fb05 a202 	mla	r2, r5, r2, sl
 8011188:	fa13 f38b 	uxtah	r3, r3, fp
 801118c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8011190:	fa1f fb82 	uxth.w	fp, r2
 8011194:	f8de 2000 	ldr.w	r2, [lr]
 8011198:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801119c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80111a0:	b29b      	uxth	r3, r3
 80111a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80111a6:	4581      	cmp	r9, r0
 80111a8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80111ac:	f84e 3b04 	str.w	r3, [lr], #4
 80111b0:	d2db      	bcs.n	801116a <quorem+0x42>
 80111b2:	f856 300c 	ldr.w	r3, [r6, ip]
 80111b6:	b933      	cbnz	r3, 80111c6 <quorem+0x9e>
 80111b8:	9b01      	ldr	r3, [sp, #4]
 80111ba:	3b04      	subs	r3, #4
 80111bc:	429e      	cmp	r6, r3
 80111be:	461a      	mov	r2, r3
 80111c0:	d330      	bcc.n	8011224 <quorem+0xfc>
 80111c2:	f8c8 4010 	str.w	r4, [r8, #16]
 80111c6:	4640      	mov	r0, r8
 80111c8:	f001 fa0e 	bl	80125e8 <__mcmp>
 80111cc:	2800      	cmp	r0, #0
 80111ce:	db25      	blt.n	801121c <quorem+0xf4>
 80111d0:	3501      	adds	r5, #1
 80111d2:	4630      	mov	r0, r6
 80111d4:	f04f 0c00 	mov.w	ip, #0
 80111d8:	f857 2b04 	ldr.w	r2, [r7], #4
 80111dc:	f8d0 e000 	ldr.w	lr, [r0]
 80111e0:	b293      	uxth	r3, r2
 80111e2:	ebac 0303 	sub.w	r3, ip, r3
 80111e6:	0c12      	lsrs	r2, r2, #16
 80111e8:	fa13 f38e 	uxtah	r3, r3, lr
 80111ec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80111f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80111f4:	b29b      	uxth	r3, r3
 80111f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80111fa:	45b9      	cmp	r9, r7
 80111fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011200:	f840 3b04 	str.w	r3, [r0], #4
 8011204:	d2e8      	bcs.n	80111d8 <quorem+0xb0>
 8011206:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801120a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801120e:	b92a      	cbnz	r2, 801121c <quorem+0xf4>
 8011210:	3b04      	subs	r3, #4
 8011212:	429e      	cmp	r6, r3
 8011214:	461a      	mov	r2, r3
 8011216:	d30b      	bcc.n	8011230 <quorem+0x108>
 8011218:	f8c8 4010 	str.w	r4, [r8, #16]
 801121c:	4628      	mov	r0, r5
 801121e:	b003      	add	sp, #12
 8011220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011224:	6812      	ldr	r2, [r2, #0]
 8011226:	3b04      	subs	r3, #4
 8011228:	2a00      	cmp	r2, #0
 801122a:	d1ca      	bne.n	80111c2 <quorem+0x9a>
 801122c:	3c01      	subs	r4, #1
 801122e:	e7c5      	b.n	80111bc <quorem+0x94>
 8011230:	6812      	ldr	r2, [r2, #0]
 8011232:	3b04      	subs	r3, #4
 8011234:	2a00      	cmp	r2, #0
 8011236:	d1ef      	bne.n	8011218 <quorem+0xf0>
 8011238:	3c01      	subs	r4, #1
 801123a:	e7ea      	b.n	8011212 <quorem+0xea>
 801123c:	2000      	movs	r0, #0
 801123e:	e7ee      	b.n	801121e <quorem+0xf6>

08011240 <_dtoa_r>:
 8011240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011244:	ec57 6b10 	vmov	r6, r7, d0
 8011248:	b097      	sub	sp, #92	; 0x5c
 801124a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801124c:	9106      	str	r1, [sp, #24]
 801124e:	4604      	mov	r4, r0
 8011250:	920b      	str	r2, [sp, #44]	; 0x2c
 8011252:	9312      	str	r3, [sp, #72]	; 0x48
 8011254:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011258:	e9cd 6700 	strd	r6, r7, [sp]
 801125c:	b93d      	cbnz	r5, 801126e <_dtoa_r+0x2e>
 801125e:	2010      	movs	r0, #16
 8011260:	f000 ff92 	bl	8012188 <malloc>
 8011264:	6260      	str	r0, [r4, #36]	; 0x24
 8011266:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801126a:	6005      	str	r5, [r0, #0]
 801126c:	60c5      	str	r5, [r0, #12]
 801126e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011270:	6819      	ldr	r1, [r3, #0]
 8011272:	b151      	cbz	r1, 801128a <_dtoa_r+0x4a>
 8011274:	685a      	ldr	r2, [r3, #4]
 8011276:	604a      	str	r2, [r1, #4]
 8011278:	2301      	movs	r3, #1
 801127a:	4093      	lsls	r3, r2
 801127c:	608b      	str	r3, [r1, #8]
 801127e:	4620      	mov	r0, r4
 8011280:	f000 ffd0 	bl	8012224 <_Bfree>
 8011284:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011286:	2200      	movs	r2, #0
 8011288:	601a      	str	r2, [r3, #0]
 801128a:	1e3b      	subs	r3, r7, #0
 801128c:	bfbb      	ittet	lt
 801128e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011292:	9301      	strlt	r3, [sp, #4]
 8011294:	2300      	movge	r3, #0
 8011296:	2201      	movlt	r2, #1
 8011298:	bfac      	ite	ge
 801129a:	f8c8 3000 	strge.w	r3, [r8]
 801129e:	f8c8 2000 	strlt.w	r2, [r8]
 80112a2:	4baf      	ldr	r3, [pc, #700]	; (8011560 <_dtoa_r+0x320>)
 80112a4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80112a8:	ea33 0308 	bics.w	r3, r3, r8
 80112ac:	d114      	bne.n	80112d8 <_dtoa_r+0x98>
 80112ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80112b0:	f242 730f 	movw	r3, #9999	; 0x270f
 80112b4:	6013      	str	r3, [r2, #0]
 80112b6:	9b00      	ldr	r3, [sp, #0]
 80112b8:	b923      	cbnz	r3, 80112c4 <_dtoa_r+0x84>
 80112ba:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80112be:	2800      	cmp	r0, #0
 80112c0:	f000 8542 	beq.w	8011d48 <_dtoa_r+0xb08>
 80112c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80112c6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8011574 <_dtoa_r+0x334>
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	f000 8544 	beq.w	8011d58 <_dtoa_r+0xb18>
 80112d0:	f10b 0303 	add.w	r3, fp, #3
 80112d4:	f000 bd3e 	b.w	8011d54 <_dtoa_r+0xb14>
 80112d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80112dc:	2200      	movs	r2, #0
 80112de:	2300      	movs	r3, #0
 80112e0:	4630      	mov	r0, r6
 80112e2:	4639      	mov	r1, r7
 80112e4:	f7ef fbf0 	bl	8000ac8 <__aeabi_dcmpeq>
 80112e8:	4681      	mov	r9, r0
 80112ea:	b168      	cbz	r0, 8011308 <_dtoa_r+0xc8>
 80112ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80112ee:	2301      	movs	r3, #1
 80112f0:	6013      	str	r3, [r2, #0]
 80112f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	f000 8524 	beq.w	8011d42 <_dtoa_r+0xb02>
 80112fa:	4b9a      	ldr	r3, [pc, #616]	; (8011564 <_dtoa_r+0x324>)
 80112fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80112fe:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8011302:	6013      	str	r3, [r2, #0]
 8011304:	f000 bd28 	b.w	8011d58 <_dtoa_r+0xb18>
 8011308:	aa14      	add	r2, sp, #80	; 0x50
 801130a:	a915      	add	r1, sp, #84	; 0x54
 801130c:	ec47 6b10 	vmov	d0, r6, r7
 8011310:	4620      	mov	r0, r4
 8011312:	f001 f9e0 	bl	80126d6 <__d2b>
 8011316:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801131a:	9004      	str	r0, [sp, #16]
 801131c:	2d00      	cmp	r5, #0
 801131e:	d07c      	beq.n	801141a <_dtoa_r+0x1da>
 8011320:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011324:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8011328:	46b2      	mov	sl, r6
 801132a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 801132e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011332:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8011336:	2200      	movs	r2, #0
 8011338:	4b8b      	ldr	r3, [pc, #556]	; (8011568 <_dtoa_r+0x328>)
 801133a:	4650      	mov	r0, sl
 801133c:	4659      	mov	r1, fp
 801133e:	f7ee ffa3 	bl	8000288 <__aeabi_dsub>
 8011342:	a381      	add	r3, pc, #516	; (adr r3, 8011548 <_dtoa_r+0x308>)
 8011344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011348:	f7ef f956 	bl	80005f8 <__aeabi_dmul>
 801134c:	a380      	add	r3, pc, #512	; (adr r3, 8011550 <_dtoa_r+0x310>)
 801134e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011352:	f7ee ff9b 	bl	800028c <__adddf3>
 8011356:	4606      	mov	r6, r0
 8011358:	4628      	mov	r0, r5
 801135a:	460f      	mov	r7, r1
 801135c:	f7ef f8e2 	bl	8000524 <__aeabi_i2d>
 8011360:	a37d      	add	r3, pc, #500	; (adr r3, 8011558 <_dtoa_r+0x318>)
 8011362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011366:	f7ef f947 	bl	80005f8 <__aeabi_dmul>
 801136a:	4602      	mov	r2, r0
 801136c:	460b      	mov	r3, r1
 801136e:	4630      	mov	r0, r6
 8011370:	4639      	mov	r1, r7
 8011372:	f7ee ff8b 	bl	800028c <__adddf3>
 8011376:	4606      	mov	r6, r0
 8011378:	460f      	mov	r7, r1
 801137a:	f7ef fbed 	bl	8000b58 <__aeabi_d2iz>
 801137e:	2200      	movs	r2, #0
 8011380:	4682      	mov	sl, r0
 8011382:	2300      	movs	r3, #0
 8011384:	4630      	mov	r0, r6
 8011386:	4639      	mov	r1, r7
 8011388:	f7ef fba8 	bl	8000adc <__aeabi_dcmplt>
 801138c:	b148      	cbz	r0, 80113a2 <_dtoa_r+0x162>
 801138e:	4650      	mov	r0, sl
 8011390:	f7ef f8c8 	bl	8000524 <__aeabi_i2d>
 8011394:	4632      	mov	r2, r6
 8011396:	463b      	mov	r3, r7
 8011398:	f7ef fb96 	bl	8000ac8 <__aeabi_dcmpeq>
 801139c:	b908      	cbnz	r0, 80113a2 <_dtoa_r+0x162>
 801139e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80113a2:	f1ba 0f16 	cmp.w	sl, #22
 80113a6:	d859      	bhi.n	801145c <_dtoa_r+0x21c>
 80113a8:	4970      	ldr	r1, [pc, #448]	; (801156c <_dtoa_r+0x32c>)
 80113aa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80113ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80113b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80113b6:	f7ef fbaf 	bl	8000b18 <__aeabi_dcmpgt>
 80113ba:	2800      	cmp	r0, #0
 80113bc:	d050      	beq.n	8011460 <_dtoa_r+0x220>
 80113be:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80113c2:	2300      	movs	r3, #0
 80113c4:	930f      	str	r3, [sp, #60]	; 0x3c
 80113c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80113c8:	1b5d      	subs	r5, r3, r5
 80113ca:	f1b5 0801 	subs.w	r8, r5, #1
 80113ce:	bf49      	itett	mi
 80113d0:	f1c5 0301 	rsbmi	r3, r5, #1
 80113d4:	2300      	movpl	r3, #0
 80113d6:	9305      	strmi	r3, [sp, #20]
 80113d8:	f04f 0800 	movmi.w	r8, #0
 80113dc:	bf58      	it	pl
 80113de:	9305      	strpl	r3, [sp, #20]
 80113e0:	f1ba 0f00 	cmp.w	sl, #0
 80113e4:	db3e      	blt.n	8011464 <_dtoa_r+0x224>
 80113e6:	2300      	movs	r3, #0
 80113e8:	44d0      	add	r8, sl
 80113ea:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80113ee:	9307      	str	r3, [sp, #28]
 80113f0:	9b06      	ldr	r3, [sp, #24]
 80113f2:	2b09      	cmp	r3, #9
 80113f4:	f200 8090 	bhi.w	8011518 <_dtoa_r+0x2d8>
 80113f8:	2b05      	cmp	r3, #5
 80113fa:	bfc4      	itt	gt
 80113fc:	3b04      	subgt	r3, #4
 80113fe:	9306      	strgt	r3, [sp, #24]
 8011400:	9b06      	ldr	r3, [sp, #24]
 8011402:	f1a3 0302 	sub.w	r3, r3, #2
 8011406:	bfcc      	ite	gt
 8011408:	2500      	movgt	r5, #0
 801140a:	2501      	movle	r5, #1
 801140c:	2b03      	cmp	r3, #3
 801140e:	f200 808f 	bhi.w	8011530 <_dtoa_r+0x2f0>
 8011412:	e8df f003 	tbb	[pc, r3]
 8011416:	7f7d      	.short	0x7f7d
 8011418:	7131      	.short	0x7131
 801141a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801141e:	441d      	add	r5, r3
 8011420:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8011424:	2820      	cmp	r0, #32
 8011426:	dd13      	ble.n	8011450 <_dtoa_r+0x210>
 8011428:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801142c:	9b00      	ldr	r3, [sp, #0]
 801142e:	fa08 f800 	lsl.w	r8, r8, r0
 8011432:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8011436:	fa23 f000 	lsr.w	r0, r3, r0
 801143a:	ea48 0000 	orr.w	r0, r8, r0
 801143e:	f7ef f861 	bl	8000504 <__aeabi_ui2d>
 8011442:	2301      	movs	r3, #1
 8011444:	4682      	mov	sl, r0
 8011446:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801144a:	3d01      	subs	r5, #1
 801144c:	9313      	str	r3, [sp, #76]	; 0x4c
 801144e:	e772      	b.n	8011336 <_dtoa_r+0xf6>
 8011450:	9b00      	ldr	r3, [sp, #0]
 8011452:	f1c0 0020 	rsb	r0, r0, #32
 8011456:	fa03 f000 	lsl.w	r0, r3, r0
 801145a:	e7f0      	b.n	801143e <_dtoa_r+0x1fe>
 801145c:	2301      	movs	r3, #1
 801145e:	e7b1      	b.n	80113c4 <_dtoa_r+0x184>
 8011460:	900f      	str	r0, [sp, #60]	; 0x3c
 8011462:	e7b0      	b.n	80113c6 <_dtoa_r+0x186>
 8011464:	9b05      	ldr	r3, [sp, #20]
 8011466:	eba3 030a 	sub.w	r3, r3, sl
 801146a:	9305      	str	r3, [sp, #20]
 801146c:	f1ca 0300 	rsb	r3, sl, #0
 8011470:	9307      	str	r3, [sp, #28]
 8011472:	2300      	movs	r3, #0
 8011474:	930e      	str	r3, [sp, #56]	; 0x38
 8011476:	e7bb      	b.n	80113f0 <_dtoa_r+0x1b0>
 8011478:	2301      	movs	r3, #1
 801147a:	930a      	str	r3, [sp, #40]	; 0x28
 801147c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801147e:	2b00      	cmp	r3, #0
 8011480:	dd59      	ble.n	8011536 <_dtoa_r+0x2f6>
 8011482:	9302      	str	r3, [sp, #8]
 8011484:	4699      	mov	r9, r3
 8011486:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011488:	2200      	movs	r2, #0
 801148a:	6072      	str	r2, [r6, #4]
 801148c:	2204      	movs	r2, #4
 801148e:	f102 0014 	add.w	r0, r2, #20
 8011492:	4298      	cmp	r0, r3
 8011494:	6871      	ldr	r1, [r6, #4]
 8011496:	d953      	bls.n	8011540 <_dtoa_r+0x300>
 8011498:	4620      	mov	r0, r4
 801149a:	f000 fe8f 	bl	80121bc <_Balloc>
 801149e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80114a0:	6030      	str	r0, [r6, #0]
 80114a2:	f1b9 0f0e 	cmp.w	r9, #14
 80114a6:	f8d3 b000 	ldr.w	fp, [r3]
 80114aa:	f200 80e6 	bhi.w	801167a <_dtoa_r+0x43a>
 80114ae:	2d00      	cmp	r5, #0
 80114b0:	f000 80e3 	beq.w	801167a <_dtoa_r+0x43a>
 80114b4:	ed9d 7b00 	vldr	d7, [sp]
 80114b8:	f1ba 0f00 	cmp.w	sl, #0
 80114bc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80114c0:	dd74      	ble.n	80115ac <_dtoa_r+0x36c>
 80114c2:	4a2a      	ldr	r2, [pc, #168]	; (801156c <_dtoa_r+0x32c>)
 80114c4:	f00a 030f 	and.w	r3, sl, #15
 80114c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80114cc:	ed93 7b00 	vldr	d7, [r3]
 80114d0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80114d4:	06f0      	lsls	r0, r6, #27
 80114d6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80114da:	d565      	bpl.n	80115a8 <_dtoa_r+0x368>
 80114dc:	4b24      	ldr	r3, [pc, #144]	; (8011570 <_dtoa_r+0x330>)
 80114de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80114e2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80114e6:	f7ef f9b1 	bl	800084c <__aeabi_ddiv>
 80114ea:	e9cd 0100 	strd	r0, r1, [sp]
 80114ee:	f006 060f 	and.w	r6, r6, #15
 80114f2:	2503      	movs	r5, #3
 80114f4:	4f1e      	ldr	r7, [pc, #120]	; (8011570 <_dtoa_r+0x330>)
 80114f6:	e04c      	b.n	8011592 <_dtoa_r+0x352>
 80114f8:	2301      	movs	r3, #1
 80114fa:	930a      	str	r3, [sp, #40]	; 0x28
 80114fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80114fe:	4453      	add	r3, sl
 8011500:	f103 0901 	add.w	r9, r3, #1
 8011504:	9302      	str	r3, [sp, #8]
 8011506:	464b      	mov	r3, r9
 8011508:	2b01      	cmp	r3, #1
 801150a:	bfb8      	it	lt
 801150c:	2301      	movlt	r3, #1
 801150e:	e7ba      	b.n	8011486 <_dtoa_r+0x246>
 8011510:	2300      	movs	r3, #0
 8011512:	e7b2      	b.n	801147a <_dtoa_r+0x23a>
 8011514:	2300      	movs	r3, #0
 8011516:	e7f0      	b.n	80114fa <_dtoa_r+0x2ba>
 8011518:	2501      	movs	r5, #1
 801151a:	2300      	movs	r3, #0
 801151c:	9306      	str	r3, [sp, #24]
 801151e:	950a      	str	r5, [sp, #40]	; 0x28
 8011520:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011524:	9302      	str	r3, [sp, #8]
 8011526:	4699      	mov	r9, r3
 8011528:	2200      	movs	r2, #0
 801152a:	2312      	movs	r3, #18
 801152c:	920b      	str	r2, [sp, #44]	; 0x2c
 801152e:	e7aa      	b.n	8011486 <_dtoa_r+0x246>
 8011530:	2301      	movs	r3, #1
 8011532:	930a      	str	r3, [sp, #40]	; 0x28
 8011534:	e7f4      	b.n	8011520 <_dtoa_r+0x2e0>
 8011536:	2301      	movs	r3, #1
 8011538:	9302      	str	r3, [sp, #8]
 801153a:	4699      	mov	r9, r3
 801153c:	461a      	mov	r2, r3
 801153e:	e7f5      	b.n	801152c <_dtoa_r+0x2ec>
 8011540:	3101      	adds	r1, #1
 8011542:	6071      	str	r1, [r6, #4]
 8011544:	0052      	lsls	r2, r2, #1
 8011546:	e7a2      	b.n	801148e <_dtoa_r+0x24e>
 8011548:	636f4361 	.word	0x636f4361
 801154c:	3fd287a7 	.word	0x3fd287a7
 8011550:	8b60c8b3 	.word	0x8b60c8b3
 8011554:	3fc68a28 	.word	0x3fc68a28
 8011558:	509f79fb 	.word	0x509f79fb
 801155c:	3fd34413 	.word	0x3fd34413
 8011560:	7ff00000 	.word	0x7ff00000
 8011564:	080151a5 	.word	0x080151a5
 8011568:	3ff80000 	.word	0x3ff80000
 801156c:	08015270 	.word	0x08015270
 8011570:	08015248 	.word	0x08015248
 8011574:	080151d1 	.word	0x080151d1
 8011578:	07f1      	lsls	r1, r6, #31
 801157a:	d508      	bpl.n	801158e <_dtoa_r+0x34e>
 801157c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011580:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011584:	f7ef f838 	bl	80005f8 <__aeabi_dmul>
 8011588:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801158c:	3501      	adds	r5, #1
 801158e:	1076      	asrs	r6, r6, #1
 8011590:	3708      	adds	r7, #8
 8011592:	2e00      	cmp	r6, #0
 8011594:	d1f0      	bne.n	8011578 <_dtoa_r+0x338>
 8011596:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801159a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801159e:	f7ef f955 	bl	800084c <__aeabi_ddiv>
 80115a2:	e9cd 0100 	strd	r0, r1, [sp]
 80115a6:	e01a      	b.n	80115de <_dtoa_r+0x39e>
 80115a8:	2502      	movs	r5, #2
 80115aa:	e7a3      	b.n	80114f4 <_dtoa_r+0x2b4>
 80115ac:	f000 80a0 	beq.w	80116f0 <_dtoa_r+0x4b0>
 80115b0:	f1ca 0600 	rsb	r6, sl, #0
 80115b4:	4b9f      	ldr	r3, [pc, #636]	; (8011834 <_dtoa_r+0x5f4>)
 80115b6:	4fa0      	ldr	r7, [pc, #640]	; (8011838 <_dtoa_r+0x5f8>)
 80115b8:	f006 020f 	and.w	r2, r6, #15
 80115bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80115c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80115c8:	f7ef f816 	bl	80005f8 <__aeabi_dmul>
 80115cc:	e9cd 0100 	strd	r0, r1, [sp]
 80115d0:	1136      	asrs	r6, r6, #4
 80115d2:	2300      	movs	r3, #0
 80115d4:	2502      	movs	r5, #2
 80115d6:	2e00      	cmp	r6, #0
 80115d8:	d17f      	bne.n	80116da <_dtoa_r+0x49a>
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d1e1      	bne.n	80115a2 <_dtoa_r+0x362>
 80115de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	f000 8087 	beq.w	80116f4 <_dtoa_r+0x4b4>
 80115e6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80115ea:	2200      	movs	r2, #0
 80115ec:	4b93      	ldr	r3, [pc, #588]	; (801183c <_dtoa_r+0x5fc>)
 80115ee:	4630      	mov	r0, r6
 80115f0:	4639      	mov	r1, r7
 80115f2:	f7ef fa73 	bl	8000adc <__aeabi_dcmplt>
 80115f6:	2800      	cmp	r0, #0
 80115f8:	d07c      	beq.n	80116f4 <_dtoa_r+0x4b4>
 80115fa:	f1b9 0f00 	cmp.w	r9, #0
 80115fe:	d079      	beq.n	80116f4 <_dtoa_r+0x4b4>
 8011600:	9b02      	ldr	r3, [sp, #8]
 8011602:	2b00      	cmp	r3, #0
 8011604:	dd35      	ble.n	8011672 <_dtoa_r+0x432>
 8011606:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 801160a:	9308      	str	r3, [sp, #32]
 801160c:	4639      	mov	r1, r7
 801160e:	2200      	movs	r2, #0
 8011610:	4b8b      	ldr	r3, [pc, #556]	; (8011840 <_dtoa_r+0x600>)
 8011612:	4630      	mov	r0, r6
 8011614:	f7ee fff0 	bl	80005f8 <__aeabi_dmul>
 8011618:	e9cd 0100 	strd	r0, r1, [sp]
 801161c:	9f02      	ldr	r7, [sp, #8]
 801161e:	3501      	adds	r5, #1
 8011620:	4628      	mov	r0, r5
 8011622:	f7ee ff7f 	bl	8000524 <__aeabi_i2d>
 8011626:	e9dd 2300 	ldrd	r2, r3, [sp]
 801162a:	f7ee ffe5 	bl	80005f8 <__aeabi_dmul>
 801162e:	2200      	movs	r2, #0
 8011630:	4b84      	ldr	r3, [pc, #528]	; (8011844 <_dtoa_r+0x604>)
 8011632:	f7ee fe2b 	bl	800028c <__adddf3>
 8011636:	4605      	mov	r5, r0
 8011638:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801163c:	2f00      	cmp	r7, #0
 801163e:	d15d      	bne.n	80116fc <_dtoa_r+0x4bc>
 8011640:	2200      	movs	r2, #0
 8011642:	4b81      	ldr	r3, [pc, #516]	; (8011848 <_dtoa_r+0x608>)
 8011644:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011648:	f7ee fe1e 	bl	8000288 <__aeabi_dsub>
 801164c:	462a      	mov	r2, r5
 801164e:	4633      	mov	r3, r6
 8011650:	e9cd 0100 	strd	r0, r1, [sp]
 8011654:	f7ef fa60 	bl	8000b18 <__aeabi_dcmpgt>
 8011658:	2800      	cmp	r0, #0
 801165a:	f040 8288 	bne.w	8011b6e <_dtoa_r+0x92e>
 801165e:	462a      	mov	r2, r5
 8011660:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8011664:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011668:	f7ef fa38 	bl	8000adc <__aeabi_dcmplt>
 801166c:	2800      	cmp	r0, #0
 801166e:	f040 827c 	bne.w	8011b6a <_dtoa_r+0x92a>
 8011672:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011676:	e9cd 2300 	strd	r2, r3, [sp]
 801167a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801167c:	2b00      	cmp	r3, #0
 801167e:	f2c0 8150 	blt.w	8011922 <_dtoa_r+0x6e2>
 8011682:	f1ba 0f0e 	cmp.w	sl, #14
 8011686:	f300 814c 	bgt.w	8011922 <_dtoa_r+0x6e2>
 801168a:	4b6a      	ldr	r3, [pc, #424]	; (8011834 <_dtoa_r+0x5f4>)
 801168c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011690:	ed93 7b00 	vldr	d7, [r3]
 8011694:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011696:	2b00      	cmp	r3, #0
 8011698:	ed8d 7b02 	vstr	d7, [sp, #8]
 801169c:	f280 80d8 	bge.w	8011850 <_dtoa_r+0x610>
 80116a0:	f1b9 0f00 	cmp.w	r9, #0
 80116a4:	f300 80d4 	bgt.w	8011850 <_dtoa_r+0x610>
 80116a8:	f040 825e 	bne.w	8011b68 <_dtoa_r+0x928>
 80116ac:	2200      	movs	r2, #0
 80116ae:	4b66      	ldr	r3, [pc, #408]	; (8011848 <_dtoa_r+0x608>)
 80116b0:	ec51 0b17 	vmov	r0, r1, d7
 80116b4:	f7ee ffa0 	bl	80005f8 <__aeabi_dmul>
 80116b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80116bc:	f7ef fa22 	bl	8000b04 <__aeabi_dcmpge>
 80116c0:	464f      	mov	r7, r9
 80116c2:	464e      	mov	r6, r9
 80116c4:	2800      	cmp	r0, #0
 80116c6:	f040 8234 	bne.w	8011b32 <_dtoa_r+0x8f2>
 80116ca:	2331      	movs	r3, #49	; 0x31
 80116cc:	f10b 0501 	add.w	r5, fp, #1
 80116d0:	f88b 3000 	strb.w	r3, [fp]
 80116d4:	f10a 0a01 	add.w	sl, sl, #1
 80116d8:	e22f      	b.n	8011b3a <_dtoa_r+0x8fa>
 80116da:	07f2      	lsls	r2, r6, #31
 80116dc:	d505      	bpl.n	80116ea <_dtoa_r+0x4aa>
 80116de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80116e2:	f7ee ff89 	bl	80005f8 <__aeabi_dmul>
 80116e6:	3501      	adds	r5, #1
 80116e8:	2301      	movs	r3, #1
 80116ea:	1076      	asrs	r6, r6, #1
 80116ec:	3708      	adds	r7, #8
 80116ee:	e772      	b.n	80115d6 <_dtoa_r+0x396>
 80116f0:	2502      	movs	r5, #2
 80116f2:	e774      	b.n	80115de <_dtoa_r+0x39e>
 80116f4:	f8cd a020 	str.w	sl, [sp, #32]
 80116f8:	464f      	mov	r7, r9
 80116fa:	e791      	b.n	8011620 <_dtoa_r+0x3e0>
 80116fc:	4b4d      	ldr	r3, [pc, #308]	; (8011834 <_dtoa_r+0x5f4>)
 80116fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8011702:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8011706:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011708:	2b00      	cmp	r3, #0
 801170a:	d047      	beq.n	801179c <_dtoa_r+0x55c>
 801170c:	4602      	mov	r2, r0
 801170e:	460b      	mov	r3, r1
 8011710:	2000      	movs	r0, #0
 8011712:	494e      	ldr	r1, [pc, #312]	; (801184c <_dtoa_r+0x60c>)
 8011714:	f7ef f89a 	bl	800084c <__aeabi_ddiv>
 8011718:	462a      	mov	r2, r5
 801171a:	4633      	mov	r3, r6
 801171c:	f7ee fdb4 	bl	8000288 <__aeabi_dsub>
 8011720:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8011724:	465d      	mov	r5, fp
 8011726:	e9dd 0100 	ldrd	r0, r1, [sp]
 801172a:	f7ef fa15 	bl	8000b58 <__aeabi_d2iz>
 801172e:	4606      	mov	r6, r0
 8011730:	f7ee fef8 	bl	8000524 <__aeabi_i2d>
 8011734:	4602      	mov	r2, r0
 8011736:	460b      	mov	r3, r1
 8011738:	e9dd 0100 	ldrd	r0, r1, [sp]
 801173c:	f7ee fda4 	bl	8000288 <__aeabi_dsub>
 8011740:	3630      	adds	r6, #48	; 0x30
 8011742:	f805 6b01 	strb.w	r6, [r5], #1
 8011746:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801174a:	e9cd 0100 	strd	r0, r1, [sp]
 801174e:	f7ef f9c5 	bl	8000adc <__aeabi_dcmplt>
 8011752:	2800      	cmp	r0, #0
 8011754:	d163      	bne.n	801181e <_dtoa_r+0x5de>
 8011756:	e9dd 2300 	ldrd	r2, r3, [sp]
 801175a:	2000      	movs	r0, #0
 801175c:	4937      	ldr	r1, [pc, #220]	; (801183c <_dtoa_r+0x5fc>)
 801175e:	f7ee fd93 	bl	8000288 <__aeabi_dsub>
 8011762:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8011766:	f7ef f9b9 	bl	8000adc <__aeabi_dcmplt>
 801176a:	2800      	cmp	r0, #0
 801176c:	f040 80b7 	bne.w	80118de <_dtoa_r+0x69e>
 8011770:	eba5 030b 	sub.w	r3, r5, fp
 8011774:	429f      	cmp	r7, r3
 8011776:	f77f af7c 	ble.w	8011672 <_dtoa_r+0x432>
 801177a:	2200      	movs	r2, #0
 801177c:	4b30      	ldr	r3, [pc, #192]	; (8011840 <_dtoa_r+0x600>)
 801177e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011782:	f7ee ff39 	bl	80005f8 <__aeabi_dmul>
 8011786:	2200      	movs	r2, #0
 8011788:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801178c:	4b2c      	ldr	r3, [pc, #176]	; (8011840 <_dtoa_r+0x600>)
 801178e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011792:	f7ee ff31 	bl	80005f8 <__aeabi_dmul>
 8011796:	e9cd 0100 	strd	r0, r1, [sp]
 801179a:	e7c4      	b.n	8011726 <_dtoa_r+0x4e6>
 801179c:	462a      	mov	r2, r5
 801179e:	4633      	mov	r3, r6
 80117a0:	f7ee ff2a 	bl	80005f8 <__aeabi_dmul>
 80117a4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80117a8:	eb0b 0507 	add.w	r5, fp, r7
 80117ac:	465e      	mov	r6, fp
 80117ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80117b2:	f7ef f9d1 	bl	8000b58 <__aeabi_d2iz>
 80117b6:	4607      	mov	r7, r0
 80117b8:	f7ee feb4 	bl	8000524 <__aeabi_i2d>
 80117bc:	3730      	adds	r7, #48	; 0x30
 80117be:	4602      	mov	r2, r0
 80117c0:	460b      	mov	r3, r1
 80117c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80117c6:	f7ee fd5f 	bl	8000288 <__aeabi_dsub>
 80117ca:	f806 7b01 	strb.w	r7, [r6], #1
 80117ce:	42ae      	cmp	r6, r5
 80117d0:	e9cd 0100 	strd	r0, r1, [sp]
 80117d4:	f04f 0200 	mov.w	r2, #0
 80117d8:	d126      	bne.n	8011828 <_dtoa_r+0x5e8>
 80117da:	4b1c      	ldr	r3, [pc, #112]	; (801184c <_dtoa_r+0x60c>)
 80117dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80117e0:	f7ee fd54 	bl	800028c <__adddf3>
 80117e4:	4602      	mov	r2, r0
 80117e6:	460b      	mov	r3, r1
 80117e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80117ec:	f7ef f994 	bl	8000b18 <__aeabi_dcmpgt>
 80117f0:	2800      	cmp	r0, #0
 80117f2:	d174      	bne.n	80118de <_dtoa_r+0x69e>
 80117f4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80117f8:	2000      	movs	r0, #0
 80117fa:	4914      	ldr	r1, [pc, #80]	; (801184c <_dtoa_r+0x60c>)
 80117fc:	f7ee fd44 	bl	8000288 <__aeabi_dsub>
 8011800:	4602      	mov	r2, r0
 8011802:	460b      	mov	r3, r1
 8011804:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011808:	f7ef f968 	bl	8000adc <__aeabi_dcmplt>
 801180c:	2800      	cmp	r0, #0
 801180e:	f43f af30 	beq.w	8011672 <_dtoa_r+0x432>
 8011812:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011816:	2b30      	cmp	r3, #48	; 0x30
 8011818:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 801181c:	d002      	beq.n	8011824 <_dtoa_r+0x5e4>
 801181e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011822:	e04a      	b.n	80118ba <_dtoa_r+0x67a>
 8011824:	4615      	mov	r5, r2
 8011826:	e7f4      	b.n	8011812 <_dtoa_r+0x5d2>
 8011828:	4b05      	ldr	r3, [pc, #20]	; (8011840 <_dtoa_r+0x600>)
 801182a:	f7ee fee5 	bl	80005f8 <__aeabi_dmul>
 801182e:	e9cd 0100 	strd	r0, r1, [sp]
 8011832:	e7bc      	b.n	80117ae <_dtoa_r+0x56e>
 8011834:	08015270 	.word	0x08015270
 8011838:	08015248 	.word	0x08015248
 801183c:	3ff00000 	.word	0x3ff00000
 8011840:	40240000 	.word	0x40240000
 8011844:	401c0000 	.word	0x401c0000
 8011848:	40140000 	.word	0x40140000
 801184c:	3fe00000 	.word	0x3fe00000
 8011850:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011854:	465d      	mov	r5, fp
 8011856:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801185a:	4630      	mov	r0, r6
 801185c:	4639      	mov	r1, r7
 801185e:	f7ee fff5 	bl	800084c <__aeabi_ddiv>
 8011862:	f7ef f979 	bl	8000b58 <__aeabi_d2iz>
 8011866:	4680      	mov	r8, r0
 8011868:	f7ee fe5c 	bl	8000524 <__aeabi_i2d>
 801186c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011870:	f7ee fec2 	bl	80005f8 <__aeabi_dmul>
 8011874:	4602      	mov	r2, r0
 8011876:	460b      	mov	r3, r1
 8011878:	4630      	mov	r0, r6
 801187a:	4639      	mov	r1, r7
 801187c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8011880:	f7ee fd02 	bl	8000288 <__aeabi_dsub>
 8011884:	f805 6b01 	strb.w	r6, [r5], #1
 8011888:	eba5 060b 	sub.w	r6, r5, fp
 801188c:	45b1      	cmp	r9, r6
 801188e:	4602      	mov	r2, r0
 8011890:	460b      	mov	r3, r1
 8011892:	d139      	bne.n	8011908 <_dtoa_r+0x6c8>
 8011894:	f7ee fcfa 	bl	800028c <__adddf3>
 8011898:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801189c:	4606      	mov	r6, r0
 801189e:	460f      	mov	r7, r1
 80118a0:	f7ef f93a 	bl	8000b18 <__aeabi_dcmpgt>
 80118a4:	b9c8      	cbnz	r0, 80118da <_dtoa_r+0x69a>
 80118a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80118aa:	4630      	mov	r0, r6
 80118ac:	4639      	mov	r1, r7
 80118ae:	f7ef f90b 	bl	8000ac8 <__aeabi_dcmpeq>
 80118b2:	b110      	cbz	r0, 80118ba <_dtoa_r+0x67a>
 80118b4:	f018 0f01 	tst.w	r8, #1
 80118b8:	d10f      	bne.n	80118da <_dtoa_r+0x69a>
 80118ba:	9904      	ldr	r1, [sp, #16]
 80118bc:	4620      	mov	r0, r4
 80118be:	f000 fcb1 	bl	8012224 <_Bfree>
 80118c2:	2300      	movs	r3, #0
 80118c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80118c6:	702b      	strb	r3, [r5, #0]
 80118c8:	f10a 0301 	add.w	r3, sl, #1
 80118cc:	6013      	str	r3, [r2, #0]
 80118ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	f000 8241 	beq.w	8011d58 <_dtoa_r+0xb18>
 80118d6:	601d      	str	r5, [r3, #0]
 80118d8:	e23e      	b.n	8011d58 <_dtoa_r+0xb18>
 80118da:	f8cd a020 	str.w	sl, [sp, #32]
 80118de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80118e2:	2a39      	cmp	r2, #57	; 0x39
 80118e4:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80118e8:	d108      	bne.n	80118fc <_dtoa_r+0x6bc>
 80118ea:	459b      	cmp	fp, r3
 80118ec:	d10a      	bne.n	8011904 <_dtoa_r+0x6c4>
 80118ee:	9b08      	ldr	r3, [sp, #32]
 80118f0:	3301      	adds	r3, #1
 80118f2:	9308      	str	r3, [sp, #32]
 80118f4:	2330      	movs	r3, #48	; 0x30
 80118f6:	f88b 3000 	strb.w	r3, [fp]
 80118fa:	465b      	mov	r3, fp
 80118fc:	781a      	ldrb	r2, [r3, #0]
 80118fe:	3201      	adds	r2, #1
 8011900:	701a      	strb	r2, [r3, #0]
 8011902:	e78c      	b.n	801181e <_dtoa_r+0x5de>
 8011904:	461d      	mov	r5, r3
 8011906:	e7ea      	b.n	80118de <_dtoa_r+0x69e>
 8011908:	2200      	movs	r2, #0
 801190a:	4b9b      	ldr	r3, [pc, #620]	; (8011b78 <_dtoa_r+0x938>)
 801190c:	f7ee fe74 	bl	80005f8 <__aeabi_dmul>
 8011910:	2200      	movs	r2, #0
 8011912:	2300      	movs	r3, #0
 8011914:	4606      	mov	r6, r0
 8011916:	460f      	mov	r7, r1
 8011918:	f7ef f8d6 	bl	8000ac8 <__aeabi_dcmpeq>
 801191c:	2800      	cmp	r0, #0
 801191e:	d09a      	beq.n	8011856 <_dtoa_r+0x616>
 8011920:	e7cb      	b.n	80118ba <_dtoa_r+0x67a>
 8011922:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011924:	2a00      	cmp	r2, #0
 8011926:	f000 808b 	beq.w	8011a40 <_dtoa_r+0x800>
 801192a:	9a06      	ldr	r2, [sp, #24]
 801192c:	2a01      	cmp	r2, #1
 801192e:	dc6e      	bgt.n	8011a0e <_dtoa_r+0x7ce>
 8011930:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011932:	2a00      	cmp	r2, #0
 8011934:	d067      	beq.n	8011a06 <_dtoa_r+0x7c6>
 8011936:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801193a:	9f07      	ldr	r7, [sp, #28]
 801193c:	9d05      	ldr	r5, [sp, #20]
 801193e:	9a05      	ldr	r2, [sp, #20]
 8011940:	2101      	movs	r1, #1
 8011942:	441a      	add	r2, r3
 8011944:	4620      	mov	r0, r4
 8011946:	9205      	str	r2, [sp, #20]
 8011948:	4498      	add	r8, r3
 801194a:	f000 fd0b 	bl	8012364 <__i2b>
 801194e:	4606      	mov	r6, r0
 8011950:	2d00      	cmp	r5, #0
 8011952:	dd0c      	ble.n	801196e <_dtoa_r+0x72e>
 8011954:	f1b8 0f00 	cmp.w	r8, #0
 8011958:	dd09      	ble.n	801196e <_dtoa_r+0x72e>
 801195a:	4545      	cmp	r5, r8
 801195c:	9a05      	ldr	r2, [sp, #20]
 801195e:	462b      	mov	r3, r5
 8011960:	bfa8      	it	ge
 8011962:	4643      	movge	r3, r8
 8011964:	1ad2      	subs	r2, r2, r3
 8011966:	9205      	str	r2, [sp, #20]
 8011968:	1aed      	subs	r5, r5, r3
 801196a:	eba8 0803 	sub.w	r8, r8, r3
 801196e:	9b07      	ldr	r3, [sp, #28]
 8011970:	b1eb      	cbz	r3, 80119ae <_dtoa_r+0x76e>
 8011972:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011974:	2b00      	cmp	r3, #0
 8011976:	d067      	beq.n	8011a48 <_dtoa_r+0x808>
 8011978:	b18f      	cbz	r7, 801199e <_dtoa_r+0x75e>
 801197a:	4631      	mov	r1, r6
 801197c:	463a      	mov	r2, r7
 801197e:	4620      	mov	r0, r4
 8011980:	f000 fd90 	bl	80124a4 <__pow5mult>
 8011984:	9a04      	ldr	r2, [sp, #16]
 8011986:	4601      	mov	r1, r0
 8011988:	4606      	mov	r6, r0
 801198a:	4620      	mov	r0, r4
 801198c:	f000 fcf3 	bl	8012376 <__multiply>
 8011990:	9904      	ldr	r1, [sp, #16]
 8011992:	9008      	str	r0, [sp, #32]
 8011994:	4620      	mov	r0, r4
 8011996:	f000 fc45 	bl	8012224 <_Bfree>
 801199a:	9b08      	ldr	r3, [sp, #32]
 801199c:	9304      	str	r3, [sp, #16]
 801199e:	9b07      	ldr	r3, [sp, #28]
 80119a0:	1bda      	subs	r2, r3, r7
 80119a2:	d004      	beq.n	80119ae <_dtoa_r+0x76e>
 80119a4:	9904      	ldr	r1, [sp, #16]
 80119a6:	4620      	mov	r0, r4
 80119a8:	f000 fd7c 	bl	80124a4 <__pow5mult>
 80119ac:	9004      	str	r0, [sp, #16]
 80119ae:	2101      	movs	r1, #1
 80119b0:	4620      	mov	r0, r4
 80119b2:	f000 fcd7 	bl	8012364 <__i2b>
 80119b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80119b8:	4607      	mov	r7, r0
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	f000 81d0 	beq.w	8011d60 <_dtoa_r+0xb20>
 80119c0:	461a      	mov	r2, r3
 80119c2:	4601      	mov	r1, r0
 80119c4:	4620      	mov	r0, r4
 80119c6:	f000 fd6d 	bl	80124a4 <__pow5mult>
 80119ca:	9b06      	ldr	r3, [sp, #24]
 80119cc:	2b01      	cmp	r3, #1
 80119ce:	4607      	mov	r7, r0
 80119d0:	dc40      	bgt.n	8011a54 <_dtoa_r+0x814>
 80119d2:	9b00      	ldr	r3, [sp, #0]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d139      	bne.n	8011a4c <_dtoa_r+0x80c>
 80119d8:	9b01      	ldr	r3, [sp, #4]
 80119da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d136      	bne.n	8011a50 <_dtoa_r+0x810>
 80119e2:	9b01      	ldr	r3, [sp, #4]
 80119e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80119e8:	0d1b      	lsrs	r3, r3, #20
 80119ea:	051b      	lsls	r3, r3, #20
 80119ec:	b12b      	cbz	r3, 80119fa <_dtoa_r+0x7ba>
 80119ee:	9b05      	ldr	r3, [sp, #20]
 80119f0:	3301      	adds	r3, #1
 80119f2:	9305      	str	r3, [sp, #20]
 80119f4:	f108 0801 	add.w	r8, r8, #1
 80119f8:	2301      	movs	r3, #1
 80119fa:	9307      	str	r3, [sp, #28]
 80119fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d12a      	bne.n	8011a58 <_dtoa_r+0x818>
 8011a02:	2001      	movs	r0, #1
 8011a04:	e030      	b.n	8011a68 <_dtoa_r+0x828>
 8011a06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011a08:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011a0c:	e795      	b.n	801193a <_dtoa_r+0x6fa>
 8011a0e:	9b07      	ldr	r3, [sp, #28]
 8011a10:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8011a14:	42bb      	cmp	r3, r7
 8011a16:	bfbf      	itttt	lt
 8011a18:	9b07      	ldrlt	r3, [sp, #28]
 8011a1a:	9707      	strlt	r7, [sp, #28]
 8011a1c:	1afa      	sublt	r2, r7, r3
 8011a1e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8011a20:	bfbb      	ittet	lt
 8011a22:	189b      	addlt	r3, r3, r2
 8011a24:	930e      	strlt	r3, [sp, #56]	; 0x38
 8011a26:	1bdf      	subge	r7, r3, r7
 8011a28:	2700      	movlt	r7, #0
 8011a2a:	f1b9 0f00 	cmp.w	r9, #0
 8011a2e:	bfb5      	itete	lt
 8011a30:	9b05      	ldrlt	r3, [sp, #20]
 8011a32:	9d05      	ldrge	r5, [sp, #20]
 8011a34:	eba3 0509 	sublt.w	r5, r3, r9
 8011a38:	464b      	movge	r3, r9
 8011a3a:	bfb8      	it	lt
 8011a3c:	2300      	movlt	r3, #0
 8011a3e:	e77e      	b.n	801193e <_dtoa_r+0x6fe>
 8011a40:	9f07      	ldr	r7, [sp, #28]
 8011a42:	9d05      	ldr	r5, [sp, #20]
 8011a44:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8011a46:	e783      	b.n	8011950 <_dtoa_r+0x710>
 8011a48:	9a07      	ldr	r2, [sp, #28]
 8011a4a:	e7ab      	b.n	80119a4 <_dtoa_r+0x764>
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	e7d4      	b.n	80119fa <_dtoa_r+0x7ba>
 8011a50:	9b00      	ldr	r3, [sp, #0]
 8011a52:	e7d2      	b.n	80119fa <_dtoa_r+0x7ba>
 8011a54:	2300      	movs	r3, #0
 8011a56:	9307      	str	r3, [sp, #28]
 8011a58:	693b      	ldr	r3, [r7, #16]
 8011a5a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8011a5e:	6918      	ldr	r0, [r3, #16]
 8011a60:	f000 fc32 	bl	80122c8 <__hi0bits>
 8011a64:	f1c0 0020 	rsb	r0, r0, #32
 8011a68:	4440      	add	r0, r8
 8011a6a:	f010 001f 	ands.w	r0, r0, #31
 8011a6e:	d047      	beq.n	8011b00 <_dtoa_r+0x8c0>
 8011a70:	f1c0 0320 	rsb	r3, r0, #32
 8011a74:	2b04      	cmp	r3, #4
 8011a76:	dd3b      	ble.n	8011af0 <_dtoa_r+0x8b0>
 8011a78:	9b05      	ldr	r3, [sp, #20]
 8011a7a:	f1c0 001c 	rsb	r0, r0, #28
 8011a7e:	4403      	add	r3, r0
 8011a80:	9305      	str	r3, [sp, #20]
 8011a82:	4405      	add	r5, r0
 8011a84:	4480      	add	r8, r0
 8011a86:	9b05      	ldr	r3, [sp, #20]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	dd05      	ble.n	8011a98 <_dtoa_r+0x858>
 8011a8c:	461a      	mov	r2, r3
 8011a8e:	9904      	ldr	r1, [sp, #16]
 8011a90:	4620      	mov	r0, r4
 8011a92:	f000 fd55 	bl	8012540 <__lshift>
 8011a96:	9004      	str	r0, [sp, #16]
 8011a98:	f1b8 0f00 	cmp.w	r8, #0
 8011a9c:	dd05      	ble.n	8011aaa <_dtoa_r+0x86a>
 8011a9e:	4639      	mov	r1, r7
 8011aa0:	4642      	mov	r2, r8
 8011aa2:	4620      	mov	r0, r4
 8011aa4:	f000 fd4c 	bl	8012540 <__lshift>
 8011aa8:	4607      	mov	r7, r0
 8011aaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011aac:	b353      	cbz	r3, 8011b04 <_dtoa_r+0x8c4>
 8011aae:	4639      	mov	r1, r7
 8011ab0:	9804      	ldr	r0, [sp, #16]
 8011ab2:	f000 fd99 	bl	80125e8 <__mcmp>
 8011ab6:	2800      	cmp	r0, #0
 8011ab8:	da24      	bge.n	8011b04 <_dtoa_r+0x8c4>
 8011aba:	2300      	movs	r3, #0
 8011abc:	220a      	movs	r2, #10
 8011abe:	9904      	ldr	r1, [sp, #16]
 8011ac0:	4620      	mov	r0, r4
 8011ac2:	f000 fbc6 	bl	8012252 <__multadd>
 8011ac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ac8:	9004      	str	r0, [sp, #16]
 8011aca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	f000 814d 	beq.w	8011d6e <_dtoa_r+0xb2e>
 8011ad4:	2300      	movs	r3, #0
 8011ad6:	4631      	mov	r1, r6
 8011ad8:	220a      	movs	r2, #10
 8011ada:	4620      	mov	r0, r4
 8011adc:	f000 fbb9 	bl	8012252 <__multadd>
 8011ae0:	9b02      	ldr	r3, [sp, #8]
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	4606      	mov	r6, r0
 8011ae6:	dc4f      	bgt.n	8011b88 <_dtoa_r+0x948>
 8011ae8:	9b06      	ldr	r3, [sp, #24]
 8011aea:	2b02      	cmp	r3, #2
 8011aec:	dd4c      	ble.n	8011b88 <_dtoa_r+0x948>
 8011aee:	e011      	b.n	8011b14 <_dtoa_r+0x8d4>
 8011af0:	d0c9      	beq.n	8011a86 <_dtoa_r+0x846>
 8011af2:	9a05      	ldr	r2, [sp, #20]
 8011af4:	331c      	adds	r3, #28
 8011af6:	441a      	add	r2, r3
 8011af8:	9205      	str	r2, [sp, #20]
 8011afa:	441d      	add	r5, r3
 8011afc:	4498      	add	r8, r3
 8011afe:	e7c2      	b.n	8011a86 <_dtoa_r+0x846>
 8011b00:	4603      	mov	r3, r0
 8011b02:	e7f6      	b.n	8011af2 <_dtoa_r+0x8b2>
 8011b04:	f1b9 0f00 	cmp.w	r9, #0
 8011b08:	dc38      	bgt.n	8011b7c <_dtoa_r+0x93c>
 8011b0a:	9b06      	ldr	r3, [sp, #24]
 8011b0c:	2b02      	cmp	r3, #2
 8011b0e:	dd35      	ble.n	8011b7c <_dtoa_r+0x93c>
 8011b10:	f8cd 9008 	str.w	r9, [sp, #8]
 8011b14:	9b02      	ldr	r3, [sp, #8]
 8011b16:	b963      	cbnz	r3, 8011b32 <_dtoa_r+0x8f2>
 8011b18:	4639      	mov	r1, r7
 8011b1a:	2205      	movs	r2, #5
 8011b1c:	4620      	mov	r0, r4
 8011b1e:	f000 fb98 	bl	8012252 <__multadd>
 8011b22:	4601      	mov	r1, r0
 8011b24:	4607      	mov	r7, r0
 8011b26:	9804      	ldr	r0, [sp, #16]
 8011b28:	f000 fd5e 	bl	80125e8 <__mcmp>
 8011b2c:	2800      	cmp	r0, #0
 8011b2e:	f73f adcc 	bgt.w	80116ca <_dtoa_r+0x48a>
 8011b32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011b34:	465d      	mov	r5, fp
 8011b36:	ea6f 0a03 	mvn.w	sl, r3
 8011b3a:	f04f 0900 	mov.w	r9, #0
 8011b3e:	4639      	mov	r1, r7
 8011b40:	4620      	mov	r0, r4
 8011b42:	f000 fb6f 	bl	8012224 <_Bfree>
 8011b46:	2e00      	cmp	r6, #0
 8011b48:	f43f aeb7 	beq.w	80118ba <_dtoa_r+0x67a>
 8011b4c:	f1b9 0f00 	cmp.w	r9, #0
 8011b50:	d005      	beq.n	8011b5e <_dtoa_r+0x91e>
 8011b52:	45b1      	cmp	r9, r6
 8011b54:	d003      	beq.n	8011b5e <_dtoa_r+0x91e>
 8011b56:	4649      	mov	r1, r9
 8011b58:	4620      	mov	r0, r4
 8011b5a:	f000 fb63 	bl	8012224 <_Bfree>
 8011b5e:	4631      	mov	r1, r6
 8011b60:	4620      	mov	r0, r4
 8011b62:	f000 fb5f 	bl	8012224 <_Bfree>
 8011b66:	e6a8      	b.n	80118ba <_dtoa_r+0x67a>
 8011b68:	2700      	movs	r7, #0
 8011b6a:	463e      	mov	r6, r7
 8011b6c:	e7e1      	b.n	8011b32 <_dtoa_r+0x8f2>
 8011b6e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011b72:	463e      	mov	r6, r7
 8011b74:	e5a9      	b.n	80116ca <_dtoa_r+0x48a>
 8011b76:	bf00      	nop
 8011b78:	40240000 	.word	0x40240000
 8011b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b7e:	f8cd 9008 	str.w	r9, [sp, #8]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	f000 80fa 	beq.w	8011d7c <_dtoa_r+0xb3c>
 8011b88:	2d00      	cmp	r5, #0
 8011b8a:	dd05      	ble.n	8011b98 <_dtoa_r+0x958>
 8011b8c:	4631      	mov	r1, r6
 8011b8e:	462a      	mov	r2, r5
 8011b90:	4620      	mov	r0, r4
 8011b92:	f000 fcd5 	bl	8012540 <__lshift>
 8011b96:	4606      	mov	r6, r0
 8011b98:	9b07      	ldr	r3, [sp, #28]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d04c      	beq.n	8011c38 <_dtoa_r+0x9f8>
 8011b9e:	6871      	ldr	r1, [r6, #4]
 8011ba0:	4620      	mov	r0, r4
 8011ba2:	f000 fb0b 	bl	80121bc <_Balloc>
 8011ba6:	6932      	ldr	r2, [r6, #16]
 8011ba8:	3202      	adds	r2, #2
 8011baa:	4605      	mov	r5, r0
 8011bac:	0092      	lsls	r2, r2, #2
 8011bae:	f106 010c 	add.w	r1, r6, #12
 8011bb2:	300c      	adds	r0, #12
 8011bb4:	f7fe fcec 	bl	8010590 <memcpy>
 8011bb8:	2201      	movs	r2, #1
 8011bba:	4629      	mov	r1, r5
 8011bbc:	4620      	mov	r0, r4
 8011bbe:	f000 fcbf 	bl	8012540 <__lshift>
 8011bc2:	9b00      	ldr	r3, [sp, #0]
 8011bc4:	f8cd b014 	str.w	fp, [sp, #20]
 8011bc8:	f003 0301 	and.w	r3, r3, #1
 8011bcc:	46b1      	mov	r9, r6
 8011bce:	9307      	str	r3, [sp, #28]
 8011bd0:	4606      	mov	r6, r0
 8011bd2:	4639      	mov	r1, r7
 8011bd4:	9804      	ldr	r0, [sp, #16]
 8011bd6:	f7ff faa7 	bl	8011128 <quorem>
 8011bda:	4649      	mov	r1, r9
 8011bdc:	4605      	mov	r5, r0
 8011bde:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8011be2:	9804      	ldr	r0, [sp, #16]
 8011be4:	f000 fd00 	bl	80125e8 <__mcmp>
 8011be8:	4632      	mov	r2, r6
 8011bea:	9000      	str	r0, [sp, #0]
 8011bec:	4639      	mov	r1, r7
 8011bee:	4620      	mov	r0, r4
 8011bf0:	f000 fd14 	bl	801261c <__mdiff>
 8011bf4:	68c3      	ldr	r3, [r0, #12]
 8011bf6:	4602      	mov	r2, r0
 8011bf8:	bb03      	cbnz	r3, 8011c3c <_dtoa_r+0x9fc>
 8011bfa:	4601      	mov	r1, r0
 8011bfc:	9008      	str	r0, [sp, #32]
 8011bfe:	9804      	ldr	r0, [sp, #16]
 8011c00:	f000 fcf2 	bl	80125e8 <__mcmp>
 8011c04:	9a08      	ldr	r2, [sp, #32]
 8011c06:	4603      	mov	r3, r0
 8011c08:	4611      	mov	r1, r2
 8011c0a:	4620      	mov	r0, r4
 8011c0c:	9308      	str	r3, [sp, #32]
 8011c0e:	f000 fb09 	bl	8012224 <_Bfree>
 8011c12:	9b08      	ldr	r3, [sp, #32]
 8011c14:	b9a3      	cbnz	r3, 8011c40 <_dtoa_r+0xa00>
 8011c16:	9a06      	ldr	r2, [sp, #24]
 8011c18:	b992      	cbnz	r2, 8011c40 <_dtoa_r+0xa00>
 8011c1a:	9a07      	ldr	r2, [sp, #28]
 8011c1c:	b982      	cbnz	r2, 8011c40 <_dtoa_r+0xa00>
 8011c1e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011c22:	d029      	beq.n	8011c78 <_dtoa_r+0xa38>
 8011c24:	9b00      	ldr	r3, [sp, #0]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	dd01      	ble.n	8011c2e <_dtoa_r+0x9ee>
 8011c2a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8011c2e:	9b05      	ldr	r3, [sp, #20]
 8011c30:	1c5d      	adds	r5, r3, #1
 8011c32:	f883 8000 	strb.w	r8, [r3]
 8011c36:	e782      	b.n	8011b3e <_dtoa_r+0x8fe>
 8011c38:	4630      	mov	r0, r6
 8011c3a:	e7c2      	b.n	8011bc2 <_dtoa_r+0x982>
 8011c3c:	2301      	movs	r3, #1
 8011c3e:	e7e3      	b.n	8011c08 <_dtoa_r+0x9c8>
 8011c40:	9a00      	ldr	r2, [sp, #0]
 8011c42:	2a00      	cmp	r2, #0
 8011c44:	db04      	blt.n	8011c50 <_dtoa_r+0xa10>
 8011c46:	d125      	bne.n	8011c94 <_dtoa_r+0xa54>
 8011c48:	9a06      	ldr	r2, [sp, #24]
 8011c4a:	bb1a      	cbnz	r2, 8011c94 <_dtoa_r+0xa54>
 8011c4c:	9a07      	ldr	r2, [sp, #28]
 8011c4e:	bb0a      	cbnz	r2, 8011c94 <_dtoa_r+0xa54>
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	ddec      	ble.n	8011c2e <_dtoa_r+0x9ee>
 8011c54:	2201      	movs	r2, #1
 8011c56:	9904      	ldr	r1, [sp, #16]
 8011c58:	4620      	mov	r0, r4
 8011c5a:	f000 fc71 	bl	8012540 <__lshift>
 8011c5e:	4639      	mov	r1, r7
 8011c60:	9004      	str	r0, [sp, #16]
 8011c62:	f000 fcc1 	bl	80125e8 <__mcmp>
 8011c66:	2800      	cmp	r0, #0
 8011c68:	dc03      	bgt.n	8011c72 <_dtoa_r+0xa32>
 8011c6a:	d1e0      	bne.n	8011c2e <_dtoa_r+0x9ee>
 8011c6c:	f018 0f01 	tst.w	r8, #1
 8011c70:	d0dd      	beq.n	8011c2e <_dtoa_r+0x9ee>
 8011c72:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011c76:	d1d8      	bne.n	8011c2a <_dtoa_r+0x9ea>
 8011c78:	9b05      	ldr	r3, [sp, #20]
 8011c7a:	9a05      	ldr	r2, [sp, #20]
 8011c7c:	1c5d      	adds	r5, r3, #1
 8011c7e:	2339      	movs	r3, #57	; 0x39
 8011c80:	7013      	strb	r3, [r2, #0]
 8011c82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011c86:	2b39      	cmp	r3, #57	; 0x39
 8011c88:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8011c8c:	d04f      	beq.n	8011d2e <_dtoa_r+0xaee>
 8011c8e:	3301      	adds	r3, #1
 8011c90:	7013      	strb	r3, [r2, #0]
 8011c92:	e754      	b.n	8011b3e <_dtoa_r+0x8fe>
 8011c94:	9a05      	ldr	r2, [sp, #20]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	f102 0501 	add.w	r5, r2, #1
 8011c9c:	dd06      	ble.n	8011cac <_dtoa_r+0xa6c>
 8011c9e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011ca2:	d0e9      	beq.n	8011c78 <_dtoa_r+0xa38>
 8011ca4:	f108 0801 	add.w	r8, r8, #1
 8011ca8:	9b05      	ldr	r3, [sp, #20]
 8011caa:	e7c2      	b.n	8011c32 <_dtoa_r+0x9f2>
 8011cac:	9a02      	ldr	r2, [sp, #8]
 8011cae:	f805 8c01 	strb.w	r8, [r5, #-1]
 8011cb2:	eba5 030b 	sub.w	r3, r5, fp
 8011cb6:	4293      	cmp	r3, r2
 8011cb8:	d021      	beq.n	8011cfe <_dtoa_r+0xabe>
 8011cba:	2300      	movs	r3, #0
 8011cbc:	220a      	movs	r2, #10
 8011cbe:	9904      	ldr	r1, [sp, #16]
 8011cc0:	4620      	mov	r0, r4
 8011cc2:	f000 fac6 	bl	8012252 <__multadd>
 8011cc6:	45b1      	cmp	r9, r6
 8011cc8:	9004      	str	r0, [sp, #16]
 8011cca:	f04f 0300 	mov.w	r3, #0
 8011cce:	f04f 020a 	mov.w	r2, #10
 8011cd2:	4649      	mov	r1, r9
 8011cd4:	4620      	mov	r0, r4
 8011cd6:	d105      	bne.n	8011ce4 <_dtoa_r+0xaa4>
 8011cd8:	f000 fabb 	bl	8012252 <__multadd>
 8011cdc:	4681      	mov	r9, r0
 8011cde:	4606      	mov	r6, r0
 8011ce0:	9505      	str	r5, [sp, #20]
 8011ce2:	e776      	b.n	8011bd2 <_dtoa_r+0x992>
 8011ce4:	f000 fab5 	bl	8012252 <__multadd>
 8011ce8:	4631      	mov	r1, r6
 8011cea:	4681      	mov	r9, r0
 8011cec:	2300      	movs	r3, #0
 8011cee:	220a      	movs	r2, #10
 8011cf0:	4620      	mov	r0, r4
 8011cf2:	f000 faae 	bl	8012252 <__multadd>
 8011cf6:	4606      	mov	r6, r0
 8011cf8:	e7f2      	b.n	8011ce0 <_dtoa_r+0xaa0>
 8011cfa:	f04f 0900 	mov.w	r9, #0
 8011cfe:	2201      	movs	r2, #1
 8011d00:	9904      	ldr	r1, [sp, #16]
 8011d02:	4620      	mov	r0, r4
 8011d04:	f000 fc1c 	bl	8012540 <__lshift>
 8011d08:	4639      	mov	r1, r7
 8011d0a:	9004      	str	r0, [sp, #16]
 8011d0c:	f000 fc6c 	bl	80125e8 <__mcmp>
 8011d10:	2800      	cmp	r0, #0
 8011d12:	dcb6      	bgt.n	8011c82 <_dtoa_r+0xa42>
 8011d14:	d102      	bne.n	8011d1c <_dtoa_r+0xadc>
 8011d16:	f018 0f01 	tst.w	r8, #1
 8011d1a:	d1b2      	bne.n	8011c82 <_dtoa_r+0xa42>
 8011d1c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011d20:	2b30      	cmp	r3, #48	; 0x30
 8011d22:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8011d26:	f47f af0a 	bne.w	8011b3e <_dtoa_r+0x8fe>
 8011d2a:	4615      	mov	r5, r2
 8011d2c:	e7f6      	b.n	8011d1c <_dtoa_r+0xadc>
 8011d2e:	4593      	cmp	fp, r2
 8011d30:	d105      	bne.n	8011d3e <_dtoa_r+0xafe>
 8011d32:	2331      	movs	r3, #49	; 0x31
 8011d34:	f10a 0a01 	add.w	sl, sl, #1
 8011d38:	f88b 3000 	strb.w	r3, [fp]
 8011d3c:	e6ff      	b.n	8011b3e <_dtoa_r+0x8fe>
 8011d3e:	4615      	mov	r5, r2
 8011d40:	e79f      	b.n	8011c82 <_dtoa_r+0xa42>
 8011d42:	f8df b064 	ldr.w	fp, [pc, #100]	; 8011da8 <_dtoa_r+0xb68>
 8011d46:	e007      	b.n	8011d58 <_dtoa_r+0xb18>
 8011d48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011d4a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8011dac <_dtoa_r+0xb6c>
 8011d4e:	b11b      	cbz	r3, 8011d58 <_dtoa_r+0xb18>
 8011d50:	f10b 0308 	add.w	r3, fp, #8
 8011d54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011d56:	6013      	str	r3, [r2, #0]
 8011d58:	4658      	mov	r0, fp
 8011d5a:	b017      	add	sp, #92	; 0x5c
 8011d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d60:	9b06      	ldr	r3, [sp, #24]
 8011d62:	2b01      	cmp	r3, #1
 8011d64:	f77f ae35 	ble.w	80119d2 <_dtoa_r+0x792>
 8011d68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011d6a:	9307      	str	r3, [sp, #28]
 8011d6c:	e649      	b.n	8011a02 <_dtoa_r+0x7c2>
 8011d6e:	9b02      	ldr	r3, [sp, #8]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	dc03      	bgt.n	8011d7c <_dtoa_r+0xb3c>
 8011d74:	9b06      	ldr	r3, [sp, #24]
 8011d76:	2b02      	cmp	r3, #2
 8011d78:	f73f aecc 	bgt.w	8011b14 <_dtoa_r+0x8d4>
 8011d7c:	465d      	mov	r5, fp
 8011d7e:	4639      	mov	r1, r7
 8011d80:	9804      	ldr	r0, [sp, #16]
 8011d82:	f7ff f9d1 	bl	8011128 <quorem>
 8011d86:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8011d8a:	f805 8b01 	strb.w	r8, [r5], #1
 8011d8e:	9a02      	ldr	r2, [sp, #8]
 8011d90:	eba5 030b 	sub.w	r3, r5, fp
 8011d94:	429a      	cmp	r2, r3
 8011d96:	ddb0      	ble.n	8011cfa <_dtoa_r+0xaba>
 8011d98:	2300      	movs	r3, #0
 8011d9a:	220a      	movs	r2, #10
 8011d9c:	9904      	ldr	r1, [sp, #16]
 8011d9e:	4620      	mov	r0, r4
 8011da0:	f000 fa57 	bl	8012252 <__multadd>
 8011da4:	9004      	str	r0, [sp, #16]
 8011da6:	e7ea      	b.n	8011d7e <_dtoa_r+0xb3e>
 8011da8:	080151a4 	.word	0x080151a4
 8011dac:	080151c8 	.word	0x080151c8

08011db0 <__sflush_r>:
 8011db0:	898a      	ldrh	r2, [r1, #12]
 8011db2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011db6:	4605      	mov	r5, r0
 8011db8:	0710      	lsls	r0, r2, #28
 8011dba:	460c      	mov	r4, r1
 8011dbc:	d458      	bmi.n	8011e70 <__sflush_r+0xc0>
 8011dbe:	684b      	ldr	r3, [r1, #4]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	dc05      	bgt.n	8011dd0 <__sflush_r+0x20>
 8011dc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	dc02      	bgt.n	8011dd0 <__sflush_r+0x20>
 8011dca:	2000      	movs	r0, #0
 8011dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011dd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011dd2:	2e00      	cmp	r6, #0
 8011dd4:	d0f9      	beq.n	8011dca <__sflush_r+0x1a>
 8011dd6:	2300      	movs	r3, #0
 8011dd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011ddc:	682f      	ldr	r7, [r5, #0]
 8011dde:	6a21      	ldr	r1, [r4, #32]
 8011de0:	602b      	str	r3, [r5, #0]
 8011de2:	d032      	beq.n	8011e4a <__sflush_r+0x9a>
 8011de4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011de6:	89a3      	ldrh	r3, [r4, #12]
 8011de8:	075a      	lsls	r2, r3, #29
 8011dea:	d505      	bpl.n	8011df8 <__sflush_r+0x48>
 8011dec:	6863      	ldr	r3, [r4, #4]
 8011dee:	1ac0      	subs	r0, r0, r3
 8011df0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011df2:	b10b      	cbz	r3, 8011df8 <__sflush_r+0x48>
 8011df4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011df6:	1ac0      	subs	r0, r0, r3
 8011df8:	2300      	movs	r3, #0
 8011dfa:	4602      	mov	r2, r0
 8011dfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011dfe:	6a21      	ldr	r1, [r4, #32]
 8011e00:	4628      	mov	r0, r5
 8011e02:	47b0      	blx	r6
 8011e04:	1c43      	adds	r3, r0, #1
 8011e06:	89a3      	ldrh	r3, [r4, #12]
 8011e08:	d106      	bne.n	8011e18 <__sflush_r+0x68>
 8011e0a:	6829      	ldr	r1, [r5, #0]
 8011e0c:	291d      	cmp	r1, #29
 8011e0e:	d848      	bhi.n	8011ea2 <__sflush_r+0xf2>
 8011e10:	4a29      	ldr	r2, [pc, #164]	; (8011eb8 <__sflush_r+0x108>)
 8011e12:	40ca      	lsrs	r2, r1
 8011e14:	07d6      	lsls	r6, r2, #31
 8011e16:	d544      	bpl.n	8011ea2 <__sflush_r+0xf2>
 8011e18:	2200      	movs	r2, #0
 8011e1a:	6062      	str	r2, [r4, #4]
 8011e1c:	04d9      	lsls	r1, r3, #19
 8011e1e:	6922      	ldr	r2, [r4, #16]
 8011e20:	6022      	str	r2, [r4, #0]
 8011e22:	d504      	bpl.n	8011e2e <__sflush_r+0x7e>
 8011e24:	1c42      	adds	r2, r0, #1
 8011e26:	d101      	bne.n	8011e2c <__sflush_r+0x7c>
 8011e28:	682b      	ldr	r3, [r5, #0]
 8011e2a:	b903      	cbnz	r3, 8011e2e <__sflush_r+0x7e>
 8011e2c:	6560      	str	r0, [r4, #84]	; 0x54
 8011e2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011e30:	602f      	str	r7, [r5, #0]
 8011e32:	2900      	cmp	r1, #0
 8011e34:	d0c9      	beq.n	8011dca <__sflush_r+0x1a>
 8011e36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011e3a:	4299      	cmp	r1, r3
 8011e3c:	d002      	beq.n	8011e44 <__sflush_r+0x94>
 8011e3e:	4628      	mov	r0, r5
 8011e40:	f000 fca6 	bl	8012790 <_free_r>
 8011e44:	2000      	movs	r0, #0
 8011e46:	6360      	str	r0, [r4, #52]	; 0x34
 8011e48:	e7c0      	b.n	8011dcc <__sflush_r+0x1c>
 8011e4a:	2301      	movs	r3, #1
 8011e4c:	4628      	mov	r0, r5
 8011e4e:	47b0      	blx	r6
 8011e50:	1c41      	adds	r1, r0, #1
 8011e52:	d1c8      	bne.n	8011de6 <__sflush_r+0x36>
 8011e54:	682b      	ldr	r3, [r5, #0]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d0c5      	beq.n	8011de6 <__sflush_r+0x36>
 8011e5a:	2b1d      	cmp	r3, #29
 8011e5c:	d001      	beq.n	8011e62 <__sflush_r+0xb2>
 8011e5e:	2b16      	cmp	r3, #22
 8011e60:	d101      	bne.n	8011e66 <__sflush_r+0xb6>
 8011e62:	602f      	str	r7, [r5, #0]
 8011e64:	e7b1      	b.n	8011dca <__sflush_r+0x1a>
 8011e66:	89a3      	ldrh	r3, [r4, #12]
 8011e68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011e6c:	81a3      	strh	r3, [r4, #12]
 8011e6e:	e7ad      	b.n	8011dcc <__sflush_r+0x1c>
 8011e70:	690f      	ldr	r7, [r1, #16]
 8011e72:	2f00      	cmp	r7, #0
 8011e74:	d0a9      	beq.n	8011dca <__sflush_r+0x1a>
 8011e76:	0793      	lsls	r3, r2, #30
 8011e78:	680e      	ldr	r6, [r1, #0]
 8011e7a:	bf08      	it	eq
 8011e7c:	694b      	ldreq	r3, [r1, #20]
 8011e7e:	600f      	str	r7, [r1, #0]
 8011e80:	bf18      	it	ne
 8011e82:	2300      	movne	r3, #0
 8011e84:	eba6 0807 	sub.w	r8, r6, r7
 8011e88:	608b      	str	r3, [r1, #8]
 8011e8a:	f1b8 0f00 	cmp.w	r8, #0
 8011e8e:	dd9c      	ble.n	8011dca <__sflush_r+0x1a>
 8011e90:	4643      	mov	r3, r8
 8011e92:	463a      	mov	r2, r7
 8011e94:	6a21      	ldr	r1, [r4, #32]
 8011e96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011e98:	4628      	mov	r0, r5
 8011e9a:	47b0      	blx	r6
 8011e9c:	2800      	cmp	r0, #0
 8011e9e:	dc06      	bgt.n	8011eae <__sflush_r+0xfe>
 8011ea0:	89a3      	ldrh	r3, [r4, #12]
 8011ea2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ea6:	81a3      	strh	r3, [r4, #12]
 8011ea8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011eac:	e78e      	b.n	8011dcc <__sflush_r+0x1c>
 8011eae:	4407      	add	r7, r0
 8011eb0:	eba8 0800 	sub.w	r8, r8, r0
 8011eb4:	e7e9      	b.n	8011e8a <__sflush_r+0xda>
 8011eb6:	bf00      	nop
 8011eb8:	20400001 	.word	0x20400001

08011ebc <_fflush_r>:
 8011ebc:	b538      	push	{r3, r4, r5, lr}
 8011ebe:	690b      	ldr	r3, [r1, #16]
 8011ec0:	4605      	mov	r5, r0
 8011ec2:	460c      	mov	r4, r1
 8011ec4:	b1db      	cbz	r3, 8011efe <_fflush_r+0x42>
 8011ec6:	b118      	cbz	r0, 8011ed0 <_fflush_r+0x14>
 8011ec8:	6983      	ldr	r3, [r0, #24]
 8011eca:	b90b      	cbnz	r3, 8011ed0 <_fflush_r+0x14>
 8011ecc:	f000 f860 	bl	8011f90 <__sinit>
 8011ed0:	4b0c      	ldr	r3, [pc, #48]	; (8011f04 <_fflush_r+0x48>)
 8011ed2:	429c      	cmp	r4, r3
 8011ed4:	d109      	bne.n	8011eea <_fflush_r+0x2e>
 8011ed6:	686c      	ldr	r4, [r5, #4]
 8011ed8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011edc:	b17b      	cbz	r3, 8011efe <_fflush_r+0x42>
 8011ede:	4621      	mov	r1, r4
 8011ee0:	4628      	mov	r0, r5
 8011ee2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ee6:	f7ff bf63 	b.w	8011db0 <__sflush_r>
 8011eea:	4b07      	ldr	r3, [pc, #28]	; (8011f08 <_fflush_r+0x4c>)
 8011eec:	429c      	cmp	r4, r3
 8011eee:	d101      	bne.n	8011ef4 <_fflush_r+0x38>
 8011ef0:	68ac      	ldr	r4, [r5, #8]
 8011ef2:	e7f1      	b.n	8011ed8 <_fflush_r+0x1c>
 8011ef4:	4b05      	ldr	r3, [pc, #20]	; (8011f0c <_fflush_r+0x50>)
 8011ef6:	429c      	cmp	r4, r3
 8011ef8:	bf08      	it	eq
 8011efa:	68ec      	ldreq	r4, [r5, #12]
 8011efc:	e7ec      	b.n	8011ed8 <_fflush_r+0x1c>
 8011efe:	2000      	movs	r0, #0
 8011f00:	bd38      	pop	{r3, r4, r5, pc}
 8011f02:	bf00      	nop
 8011f04:	080151f8 	.word	0x080151f8
 8011f08:	08015218 	.word	0x08015218
 8011f0c:	080151d8 	.word	0x080151d8

08011f10 <std>:
 8011f10:	2300      	movs	r3, #0
 8011f12:	b510      	push	{r4, lr}
 8011f14:	4604      	mov	r4, r0
 8011f16:	e9c0 3300 	strd	r3, r3, [r0]
 8011f1a:	6083      	str	r3, [r0, #8]
 8011f1c:	8181      	strh	r1, [r0, #12]
 8011f1e:	6643      	str	r3, [r0, #100]	; 0x64
 8011f20:	81c2      	strh	r2, [r0, #14]
 8011f22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011f26:	6183      	str	r3, [r0, #24]
 8011f28:	4619      	mov	r1, r3
 8011f2a:	2208      	movs	r2, #8
 8011f2c:	305c      	adds	r0, #92	; 0x5c
 8011f2e:	f7fe fb3a 	bl	80105a6 <memset>
 8011f32:	4b05      	ldr	r3, [pc, #20]	; (8011f48 <std+0x38>)
 8011f34:	6263      	str	r3, [r4, #36]	; 0x24
 8011f36:	4b05      	ldr	r3, [pc, #20]	; (8011f4c <std+0x3c>)
 8011f38:	62a3      	str	r3, [r4, #40]	; 0x28
 8011f3a:	4b05      	ldr	r3, [pc, #20]	; (8011f50 <std+0x40>)
 8011f3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011f3e:	4b05      	ldr	r3, [pc, #20]	; (8011f54 <std+0x44>)
 8011f40:	6224      	str	r4, [r4, #32]
 8011f42:	6323      	str	r3, [r4, #48]	; 0x30
 8011f44:	bd10      	pop	{r4, pc}
 8011f46:	bf00      	nop
 8011f48:	08012e31 	.word	0x08012e31
 8011f4c:	08012e53 	.word	0x08012e53
 8011f50:	08012e8b 	.word	0x08012e8b
 8011f54:	08012eaf 	.word	0x08012eaf

08011f58 <_cleanup_r>:
 8011f58:	4901      	ldr	r1, [pc, #4]	; (8011f60 <_cleanup_r+0x8>)
 8011f5a:	f000 b885 	b.w	8012068 <_fwalk_reent>
 8011f5e:	bf00      	nop
 8011f60:	08011ebd 	.word	0x08011ebd

08011f64 <__sfmoreglue>:
 8011f64:	b570      	push	{r4, r5, r6, lr}
 8011f66:	1e4a      	subs	r2, r1, #1
 8011f68:	2568      	movs	r5, #104	; 0x68
 8011f6a:	4355      	muls	r5, r2
 8011f6c:	460e      	mov	r6, r1
 8011f6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011f72:	f000 fc5b 	bl	801282c <_malloc_r>
 8011f76:	4604      	mov	r4, r0
 8011f78:	b140      	cbz	r0, 8011f8c <__sfmoreglue+0x28>
 8011f7a:	2100      	movs	r1, #0
 8011f7c:	e9c0 1600 	strd	r1, r6, [r0]
 8011f80:	300c      	adds	r0, #12
 8011f82:	60a0      	str	r0, [r4, #8]
 8011f84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011f88:	f7fe fb0d 	bl	80105a6 <memset>
 8011f8c:	4620      	mov	r0, r4
 8011f8e:	bd70      	pop	{r4, r5, r6, pc}

08011f90 <__sinit>:
 8011f90:	6983      	ldr	r3, [r0, #24]
 8011f92:	b510      	push	{r4, lr}
 8011f94:	4604      	mov	r4, r0
 8011f96:	bb33      	cbnz	r3, 8011fe6 <__sinit+0x56>
 8011f98:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8011f9c:	6503      	str	r3, [r0, #80]	; 0x50
 8011f9e:	4b12      	ldr	r3, [pc, #72]	; (8011fe8 <__sinit+0x58>)
 8011fa0:	4a12      	ldr	r2, [pc, #72]	; (8011fec <__sinit+0x5c>)
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	6282      	str	r2, [r0, #40]	; 0x28
 8011fa6:	4298      	cmp	r0, r3
 8011fa8:	bf04      	itt	eq
 8011faa:	2301      	moveq	r3, #1
 8011fac:	6183      	streq	r3, [r0, #24]
 8011fae:	f000 f81f 	bl	8011ff0 <__sfp>
 8011fb2:	6060      	str	r0, [r4, #4]
 8011fb4:	4620      	mov	r0, r4
 8011fb6:	f000 f81b 	bl	8011ff0 <__sfp>
 8011fba:	60a0      	str	r0, [r4, #8]
 8011fbc:	4620      	mov	r0, r4
 8011fbe:	f000 f817 	bl	8011ff0 <__sfp>
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	60e0      	str	r0, [r4, #12]
 8011fc6:	2104      	movs	r1, #4
 8011fc8:	6860      	ldr	r0, [r4, #4]
 8011fca:	f7ff ffa1 	bl	8011f10 <std>
 8011fce:	2201      	movs	r2, #1
 8011fd0:	2109      	movs	r1, #9
 8011fd2:	68a0      	ldr	r0, [r4, #8]
 8011fd4:	f7ff ff9c 	bl	8011f10 <std>
 8011fd8:	2202      	movs	r2, #2
 8011fda:	2112      	movs	r1, #18
 8011fdc:	68e0      	ldr	r0, [r4, #12]
 8011fde:	f7ff ff97 	bl	8011f10 <std>
 8011fe2:	2301      	movs	r3, #1
 8011fe4:	61a3      	str	r3, [r4, #24]
 8011fe6:	bd10      	pop	{r4, pc}
 8011fe8:	08015190 	.word	0x08015190
 8011fec:	08011f59 	.word	0x08011f59

08011ff0 <__sfp>:
 8011ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ff2:	4b1b      	ldr	r3, [pc, #108]	; (8012060 <__sfp+0x70>)
 8011ff4:	681e      	ldr	r6, [r3, #0]
 8011ff6:	69b3      	ldr	r3, [r6, #24]
 8011ff8:	4607      	mov	r7, r0
 8011ffa:	b913      	cbnz	r3, 8012002 <__sfp+0x12>
 8011ffc:	4630      	mov	r0, r6
 8011ffe:	f7ff ffc7 	bl	8011f90 <__sinit>
 8012002:	3648      	adds	r6, #72	; 0x48
 8012004:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012008:	3b01      	subs	r3, #1
 801200a:	d503      	bpl.n	8012014 <__sfp+0x24>
 801200c:	6833      	ldr	r3, [r6, #0]
 801200e:	b133      	cbz	r3, 801201e <__sfp+0x2e>
 8012010:	6836      	ldr	r6, [r6, #0]
 8012012:	e7f7      	b.n	8012004 <__sfp+0x14>
 8012014:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012018:	b16d      	cbz	r5, 8012036 <__sfp+0x46>
 801201a:	3468      	adds	r4, #104	; 0x68
 801201c:	e7f4      	b.n	8012008 <__sfp+0x18>
 801201e:	2104      	movs	r1, #4
 8012020:	4638      	mov	r0, r7
 8012022:	f7ff ff9f 	bl	8011f64 <__sfmoreglue>
 8012026:	6030      	str	r0, [r6, #0]
 8012028:	2800      	cmp	r0, #0
 801202a:	d1f1      	bne.n	8012010 <__sfp+0x20>
 801202c:	230c      	movs	r3, #12
 801202e:	603b      	str	r3, [r7, #0]
 8012030:	4604      	mov	r4, r0
 8012032:	4620      	mov	r0, r4
 8012034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012036:	4b0b      	ldr	r3, [pc, #44]	; (8012064 <__sfp+0x74>)
 8012038:	6665      	str	r5, [r4, #100]	; 0x64
 801203a:	e9c4 5500 	strd	r5, r5, [r4]
 801203e:	60a5      	str	r5, [r4, #8]
 8012040:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8012044:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8012048:	2208      	movs	r2, #8
 801204a:	4629      	mov	r1, r5
 801204c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012050:	f7fe faa9 	bl	80105a6 <memset>
 8012054:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012058:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801205c:	e7e9      	b.n	8012032 <__sfp+0x42>
 801205e:	bf00      	nop
 8012060:	08015190 	.word	0x08015190
 8012064:	ffff0001 	.word	0xffff0001

08012068 <_fwalk_reent>:
 8012068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801206c:	4680      	mov	r8, r0
 801206e:	4689      	mov	r9, r1
 8012070:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012074:	2600      	movs	r6, #0
 8012076:	b914      	cbnz	r4, 801207e <_fwalk_reent+0x16>
 8012078:	4630      	mov	r0, r6
 801207a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801207e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8012082:	3f01      	subs	r7, #1
 8012084:	d501      	bpl.n	801208a <_fwalk_reent+0x22>
 8012086:	6824      	ldr	r4, [r4, #0]
 8012088:	e7f5      	b.n	8012076 <_fwalk_reent+0xe>
 801208a:	89ab      	ldrh	r3, [r5, #12]
 801208c:	2b01      	cmp	r3, #1
 801208e:	d907      	bls.n	80120a0 <_fwalk_reent+0x38>
 8012090:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012094:	3301      	adds	r3, #1
 8012096:	d003      	beq.n	80120a0 <_fwalk_reent+0x38>
 8012098:	4629      	mov	r1, r5
 801209a:	4640      	mov	r0, r8
 801209c:	47c8      	blx	r9
 801209e:	4306      	orrs	r6, r0
 80120a0:	3568      	adds	r5, #104	; 0x68
 80120a2:	e7ee      	b.n	8012082 <_fwalk_reent+0x1a>

080120a4 <_localeconv_r>:
 80120a4:	4b04      	ldr	r3, [pc, #16]	; (80120b8 <_localeconv_r+0x14>)
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	6a18      	ldr	r0, [r3, #32]
 80120aa:	4b04      	ldr	r3, [pc, #16]	; (80120bc <_localeconv_r+0x18>)
 80120ac:	2800      	cmp	r0, #0
 80120ae:	bf08      	it	eq
 80120b0:	4618      	moveq	r0, r3
 80120b2:	30f0      	adds	r0, #240	; 0xf0
 80120b4:	4770      	bx	lr
 80120b6:	bf00      	nop
 80120b8:	20000168 	.word	0x20000168
 80120bc:	200001cc 	.word	0x200001cc

080120c0 <__swhatbuf_r>:
 80120c0:	b570      	push	{r4, r5, r6, lr}
 80120c2:	460e      	mov	r6, r1
 80120c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120c8:	2900      	cmp	r1, #0
 80120ca:	b096      	sub	sp, #88	; 0x58
 80120cc:	4614      	mov	r4, r2
 80120ce:	461d      	mov	r5, r3
 80120d0:	da07      	bge.n	80120e2 <__swhatbuf_r+0x22>
 80120d2:	2300      	movs	r3, #0
 80120d4:	602b      	str	r3, [r5, #0]
 80120d6:	89b3      	ldrh	r3, [r6, #12]
 80120d8:	061a      	lsls	r2, r3, #24
 80120da:	d410      	bmi.n	80120fe <__swhatbuf_r+0x3e>
 80120dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80120e0:	e00e      	b.n	8012100 <__swhatbuf_r+0x40>
 80120e2:	466a      	mov	r2, sp
 80120e4:	f000 ff16 	bl	8012f14 <_fstat_r>
 80120e8:	2800      	cmp	r0, #0
 80120ea:	dbf2      	blt.n	80120d2 <__swhatbuf_r+0x12>
 80120ec:	9a01      	ldr	r2, [sp, #4]
 80120ee:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80120f2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80120f6:	425a      	negs	r2, r3
 80120f8:	415a      	adcs	r2, r3
 80120fa:	602a      	str	r2, [r5, #0]
 80120fc:	e7ee      	b.n	80120dc <__swhatbuf_r+0x1c>
 80120fe:	2340      	movs	r3, #64	; 0x40
 8012100:	2000      	movs	r0, #0
 8012102:	6023      	str	r3, [r4, #0]
 8012104:	b016      	add	sp, #88	; 0x58
 8012106:	bd70      	pop	{r4, r5, r6, pc}

08012108 <__smakebuf_r>:
 8012108:	898b      	ldrh	r3, [r1, #12]
 801210a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801210c:	079d      	lsls	r5, r3, #30
 801210e:	4606      	mov	r6, r0
 8012110:	460c      	mov	r4, r1
 8012112:	d507      	bpl.n	8012124 <__smakebuf_r+0x1c>
 8012114:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012118:	6023      	str	r3, [r4, #0]
 801211a:	6123      	str	r3, [r4, #16]
 801211c:	2301      	movs	r3, #1
 801211e:	6163      	str	r3, [r4, #20]
 8012120:	b002      	add	sp, #8
 8012122:	bd70      	pop	{r4, r5, r6, pc}
 8012124:	ab01      	add	r3, sp, #4
 8012126:	466a      	mov	r2, sp
 8012128:	f7ff ffca 	bl	80120c0 <__swhatbuf_r>
 801212c:	9900      	ldr	r1, [sp, #0]
 801212e:	4605      	mov	r5, r0
 8012130:	4630      	mov	r0, r6
 8012132:	f000 fb7b 	bl	801282c <_malloc_r>
 8012136:	b948      	cbnz	r0, 801214c <__smakebuf_r+0x44>
 8012138:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801213c:	059a      	lsls	r2, r3, #22
 801213e:	d4ef      	bmi.n	8012120 <__smakebuf_r+0x18>
 8012140:	f023 0303 	bic.w	r3, r3, #3
 8012144:	f043 0302 	orr.w	r3, r3, #2
 8012148:	81a3      	strh	r3, [r4, #12]
 801214a:	e7e3      	b.n	8012114 <__smakebuf_r+0xc>
 801214c:	4b0d      	ldr	r3, [pc, #52]	; (8012184 <__smakebuf_r+0x7c>)
 801214e:	62b3      	str	r3, [r6, #40]	; 0x28
 8012150:	89a3      	ldrh	r3, [r4, #12]
 8012152:	6020      	str	r0, [r4, #0]
 8012154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012158:	81a3      	strh	r3, [r4, #12]
 801215a:	9b00      	ldr	r3, [sp, #0]
 801215c:	6163      	str	r3, [r4, #20]
 801215e:	9b01      	ldr	r3, [sp, #4]
 8012160:	6120      	str	r0, [r4, #16]
 8012162:	b15b      	cbz	r3, 801217c <__smakebuf_r+0x74>
 8012164:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012168:	4630      	mov	r0, r6
 801216a:	f000 fee5 	bl	8012f38 <_isatty_r>
 801216e:	b128      	cbz	r0, 801217c <__smakebuf_r+0x74>
 8012170:	89a3      	ldrh	r3, [r4, #12]
 8012172:	f023 0303 	bic.w	r3, r3, #3
 8012176:	f043 0301 	orr.w	r3, r3, #1
 801217a:	81a3      	strh	r3, [r4, #12]
 801217c:	89a3      	ldrh	r3, [r4, #12]
 801217e:	431d      	orrs	r5, r3
 8012180:	81a5      	strh	r5, [r4, #12]
 8012182:	e7cd      	b.n	8012120 <__smakebuf_r+0x18>
 8012184:	08011f59 	.word	0x08011f59

08012188 <malloc>:
 8012188:	4b02      	ldr	r3, [pc, #8]	; (8012194 <malloc+0xc>)
 801218a:	4601      	mov	r1, r0
 801218c:	6818      	ldr	r0, [r3, #0]
 801218e:	f000 bb4d 	b.w	801282c <_malloc_r>
 8012192:	bf00      	nop
 8012194:	20000168 	.word	0x20000168

08012198 <__ascii_mbtowc>:
 8012198:	b082      	sub	sp, #8
 801219a:	b901      	cbnz	r1, 801219e <__ascii_mbtowc+0x6>
 801219c:	a901      	add	r1, sp, #4
 801219e:	b142      	cbz	r2, 80121b2 <__ascii_mbtowc+0x1a>
 80121a0:	b14b      	cbz	r3, 80121b6 <__ascii_mbtowc+0x1e>
 80121a2:	7813      	ldrb	r3, [r2, #0]
 80121a4:	600b      	str	r3, [r1, #0]
 80121a6:	7812      	ldrb	r2, [r2, #0]
 80121a8:	1c10      	adds	r0, r2, #0
 80121aa:	bf18      	it	ne
 80121ac:	2001      	movne	r0, #1
 80121ae:	b002      	add	sp, #8
 80121b0:	4770      	bx	lr
 80121b2:	4610      	mov	r0, r2
 80121b4:	e7fb      	b.n	80121ae <__ascii_mbtowc+0x16>
 80121b6:	f06f 0001 	mvn.w	r0, #1
 80121ba:	e7f8      	b.n	80121ae <__ascii_mbtowc+0x16>

080121bc <_Balloc>:
 80121bc:	b570      	push	{r4, r5, r6, lr}
 80121be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80121c0:	4604      	mov	r4, r0
 80121c2:	460e      	mov	r6, r1
 80121c4:	b93d      	cbnz	r5, 80121d6 <_Balloc+0x1a>
 80121c6:	2010      	movs	r0, #16
 80121c8:	f7ff ffde 	bl	8012188 <malloc>
 80121cc:	6260      	str	r0, [r4, #36]	; 0x24
 80121ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80121d2:	6005      	str	r5, [r0, #0]
 80121d4:	60c5      	str	r5, [r0, #12]
 80121d6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80121d8:	68eb      	ldr	r3, [r5, #12]
 80121da:	b183      	cbz	r3, 80121fe <_Balloc+0x42>
 80121dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80121de:	68db      	ldr	r3, [r3, #12]
 80121e0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80121e4:	b9b8      	cbnz	r0, 8012216 <_Balloc+0x5a>
 80121e6:	2101      	movs	r1, #1
 80121e8:	fa01 f506 	lsl.w	r5, r1, r6
 80121ec:	1d6a      	adds	r2, r5, #5
 80121ee:	0092      	lsls	r2, r2, #2
 80121f0:	4620      	mov	r0, r4
 80121f2:	f000 fabf 	bl	8012774 <_calloc_r>
 80121f6:	b160      	cbz	r0, 8012212 <_Balloc+0x56>
 80121f8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80121fc:	e00e      	b.n	801221c <_Balloc+0x60>
 80121fe:	2221      	movs	r2, #33	; 0x21
 8012200:	2104      	movs	r1, #4
 8012202:	4620      	mov	r0, r4
 8012204:	f000 fab6 	bl	8012774 <_calloc_r>
 8012208:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801220a:	60e8      	str	r0, [r5, #12]
 801220c:	68db      	ldr	r3, [r3, #12]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d1e4      	bne.n	80121dc <_Balloc+0x20>
 8012212:	2000      	movs	r0, #0
 8012214:	bd70      	pop	{r4, r5, r6, pc}
 8012216:	6802      	ldr	r2, [r0, #0]
 8012218:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801221c:	2300      	movs	r3, #0
 801221e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012222:	e7f7      	b.n	8012214 <_Balloc+0x58>

08012224 <_Bfree>:
 8012224:	b570      	push	{r4, r5, r6, lr}
 8012226:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8012228:	4606      	mov	r6, r0
 801222a:	460d      	mov	r5, r1
 801222c:	b93c      	cbnz	r4, 801223e <_Bfree+0x1a>
 801222e:	2010      	movs	r0, #16
 8012230:	f7ff ffaa 	bl	8012188 <malloc>
 8012234:	6270      	str	r0, [r6, #36]	; 0x24
 8012236:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801223a:	6004      	str	r4, [r0, #0]
 801223c:	60c4      	str	r4, [r0, #12]
 801223e:	b13d      	cbz	r5, 8012250 <_Bfree+0x2c>
 8012240:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012242:	686a      	ldr	r2, [r5, #4]
 8012244:	68db      	ldr	r3, [r3, #12]
 8012246:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801224a:	6029      	str	r1, [r5, #0]
 801224c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8012250:	bd70      	pop	{r4, r5, r6, pc}

08012252 <__multadd>:
 8012252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012256:	690d      	ldr	r5, [r1, #16]
 8012258:	461f      	mov	r7, r3
 801225a:	4606      	mov	r6, r0
 801225c:	460c      	mov	r4, r1
 801225e:	f101 0c14 	add.w	ip, r1, #20
 8012262:	2300      	movs	r3, #0
 8012264:	f8dc 0000 	ldr.w	r0, [ip]
 8012268:	b281      	uxth	r1, r0
 801226a:	fb02 7101 	mla	r1, r2, r1, r7
 801226e:	0c0f      	lsrs	r7, r1, #16
 8012270:	0c00      	lsrs	r0, r0, #16
 8012272:	fb02 7000 	mla	r0, r2, r0, r7
 8012276:	b289      	uxth	r1, r1
 8012278:	3301      	adds	r3, #1
 801227a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801227e:	429d      	cmp	r5, r3
 8012280:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8012284:	f84c 1b04 	str.w	r1, [ip], #4
 8012288:	dcec      	bgt.n	8012264 <__multadd+0x12>
 801228a:	b1d7      	cbz	r7, 80122c2 <__multadd+0x70>
 801228c:	68a3      	ldr	r3, [r4, #8]
 801228e:	42ab      	cmp	r3, r5
 8012290:	dc12      	bgt.n	80122b8 <__multadd+0x66>
 8012292:	6861      	ldr	r1, [r4, #4]
 8012294:	4630      	mov	r0, r6
 8012296:	3101      	adds	r1, #1
 8012298:	f7ff ff90 	bl	80121bc <_Balloc>
 801229c:	6922      	ldr	r2, [r4, #16]
 801229e:	3202      	adds	r2, #2
 80122a0:	f104 010c 	add.w	r1, r4, #12
 80122a4:	4680      	mov	r8, r0
 80122a6:	0092      	lsls	r2, r2, #2
 80122a8:	300c      	adds	r0, #12
 80122aa:	f7fe f971 	bl	8010590 <memcpy>
 80122ae:	4621      	mov	r1, r4
 80122b0:	4630      	mov	r0, r6
 80122b2:	f7ff ffb7 	bl	8012224 <_Bfree>
 80122b6:	4644      	mov	r4, r8
 80122b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80122bc:	3501      	adds	r5, #1
 80122be:	615f      	str	r7, [r3, #20]
 80122c0:	6125      	str	r5, [r4, #16]
 80122c2:	4620      	mov	r0, r4
 80122c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080122c8 <__hi0bits>:
 80122c8:	0c02      	lsrs	r2, r0, #16
 80122ca:	0412      	lsls	r2, r2, #16
 80122cc:	4603      	mov	r3, r0
 80122ce:	b9b2      	cbnz	r2, 80122fe <__hi0bits+0x36>
 80122d0:	0403      	lsls	r3, r0, #16
 80122d2:	2010      	movs	r0, #16
 80122d4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80122d8:	bf04      	itt	eq
 80122da:	021b      	lsleq	r3, r3, #8
 80122dc:	3008      	addeq	r0, #8
 80122de:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80122e2:	bf04      	itt	eq
 80122e4:	011b      	lsleq	r3, r3, #4
 80122e6:	3004      	addeq	r0, #4
 80122e8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80122ec:	bf04      	itt	eq
 80122ee:	009b      	lsleq	r3, r3, #2
 80122f0:	3002      	addeq	r0, #2
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	db06      	blt.n	8012304 <__hi0bits+0x3c>
 80122f6:	005b      	lsls	r3, r3, #1
 80122f8:	d503      	bpl.n	8012302 <__hi0bits+0x3a>
 80122fa:	3001      	adds	r0, #1
 80122fc:	4770      	bx	lr
 80122fe:	2000      	movs	r0, #0
 8012300:	e7e8      	b.n	80122d4 <__hi0bits+0xc>
 8012302:	2020      	movs	r0, #32
 8012304:	4770      	bx	lr

08012306 <__lo0bits>:
 8012306:	6803      	ldr	r3, [r0, #0]
 8012308:	f013 0207 	ands.w	r2, r3, #7
 801230c:	4601      	mov	r1, r0
 801230e:	d00b      	beq.n	8012328 <__lo0bits+0x22>
 8012310:	07da      	lsls	r2, r3, #31
 8012312:	d423      	bmi.n	801235c <__lo0bits+0x56>
 8012314:	0798      	lsls	r0, r3, #30
 8012316:	bf49      	itett	mi
 8012318:	085b      	lsrmi	r3, r3, #1
 801231a:	089b      	lsrpl	r3, r3, #2
 801231c:	2001      	movmi	r0, #1
 801231e:	600b      	strmi	r3, [r1, #0]
 8012320:	bf5c      	itt	pl
 8012322:	600b      	strpl	r3, [r1, #0]
 8012324:	2002      	movpl	r0, #2
 8012326:	4770      	bx	lr
 8012328:	b298      	uxth	r0, r3
 801232a:	b9a8      	cbnz	r0, 8012358 <__lo0bits+0x52>
 801232c:	0c1b      	lsrs	r3, r3, #16
 801232e:	2010      	movs	r0, #16
 8012330:	f013 0fff 	tst.w	r3, #255	; 0xff
 8012334:	bf04      	itt	eq
 8012336:	0a1b      	lsreq	r3, r3, #8
 8012338:	3008      	addeq	r0, #8
 801233a:	071a      	lsls	r2, r3, #28
 801233c:	bf04      	itt	eq
 801233e:	091b      	lsreq	r3, r3, #4
 8012340:	3004      	addeq	r0, #4
 8012342:	079a      	lsls	r2, r3, #30
 8012344:	bf04      	itt	eq
 8012346:	089b      	lsreq	r3, r3, #2
 8012348:	3002      	addeq	r0, #2
 801234a:	07da      	lsls	r2, r3, #31
 801234c:	d402      	bmi.n	8012354 <__lo0bits+0x4e>
 801234e:	085b      	lsrs	r3, r3, #1
 8012350:	d006      	beq.n	8012360 <__lo0bits+0x5a>
 8012352:	3001      	adds	r0, #1
 8012354:	600b      	str	r3, [r1, #0]
 8012356:	4770      	bx	lr
 8012358:	4610      	mov	r0, r2
 801235a:	e7e9      	b.n	8012330 <__lo0bits+0x2a>
 801235c:	2000      	movs	r0, #0
 801235e:	4770      	bx	lr
 8012360:	2020      	movs	r0, #32
 8012362:	4770      	bx	lr

08012364 <__i2b>:
 8012364:	b510      	push	{r4, lr}
 8012366:	460c      	mov	r4, r1
 8012368:	2101      	movs	r1, #1
 801236a:	f7ff ff27 	bl	80121bc <_Balloc>
 801236e:	2201      	movs	r2, #1
 8012370:	6144      	str	r4, [r0, #20]
 8012372:	6102      	str	r2, [r0, #16]
 8012374:	bd10      	pop	{r4, pc}

08012376 <__multiply>:
 8012376:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801237a:	4614      	mov	r4, r2
 801237c:	690a      	ldr	r2, [r1, #16]
 801237e:	6923      	ldr	r3, [r4, #16]
 8012380:	429a      	cmp	r2, r3
 8012382:	bfb8      	it	lt
 8012384:	460b      	movlt	r3, r1
 8012386:	4688      	mov	r8, r1
 8012388:	bfbc      	itt	lt
 801238a:	46a0      	movlt	r8, r4
 801238c:	461c      	movlt	r4, r3
 801238e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8012392:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8012396:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801239a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801239e:	eb07 0609 	add.w	r6, r7, r9
 80123a2:	42b3      	cmp	r3, r6
 80123a4:	bfb8      	it	lt
 80123a6:	3101      	addlt	r1, #1
 80123a8:	f7ff ff08 	bl	80121bc <_Balloc>
 80123ac:	f100 0514 	add.w	r5, r0, #20
 80123b0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80123b4:	462b      	mov	r3, r5
 80123b6:	2200      	movs	r2, #0
 80123b8:	4573      	cmp	r3, lr
 80123ba:	d316      	bcc.n	80123ea <__multiply+0x74>
 80123bc:	f104 0214 	add.w	r2, r4, #20
 80123c0:	f108 0114 	add.w	r1, r8, #20
 80123c4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80123c8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80123cc:	9300      	str	r3, [sp, #0]
 80123ce:	9b00      	ldr	r3, [sp, #0]
 80123d0:	9201      	str	r2, [sp, #4]
 80123d2:	4293      	cmp	r3, r2
 80123d4:	d80c      	bhi.n	80123f0 <__multiply+0x7a>
 80123d6:	2e00      	cmp	r6, #0
 80123d8:	dd03      	ble.n	80123e2 <__multiply+0x6c>
 80123da:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d05d      	beq.n	801249e <__multiply+0x128>
 80123e2:	6106      	str	r6, [r0, #16]
 80123e4:	b003      	add	sp, #12
 80123e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123ea:	f843 2b04 	str.w	r2, [r3], #4
 80123ee:	e7e3      	b.n	80123b8 <__multiply+0x42>
 80123f0:	f8b2 b000 	ldrh.w	fp, [r2]
 80123f4:	f1bb 0f00 	cmp.w	fp, #0
 80123f8:	d023      	beq.n	8012442 <__multiply+0xcc>
 80123fa:	4689      	mov	r9, r1
 80123fc:	46ac      	mov	ip, r5
 80123fe:	f04f 0800 	mov.w	r8, #0
 8012402:	f859 4b04 	ldr.w	r4, [r9], #4
 8012406:	f8dc a000 	ldr.w	sl, [ip]
 801240a:	b2a3      	uxth	r3, r4
 801240c:	fa1f fa8a 	uxth.w	sl, sl
 8012410:	fb0b a303 	mla	r3, fp, r3, sl
 8012414:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012418:	f8dc 4000 	ldr.w	r4, [ip]
 801241c:	4443      	add	r3, r8
 801241e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8012422:	fb0b 840a 	mla	r4, fp, sl, r8
 8012426:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801242a:	46e2      	mov	sl, ip
 801242c:	b29b      	uxth	r3, r3
 801242e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8012432:	454f      	cmp	r7, r9
 8012434:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8012438:	f84a 3b04 	str.w	r3, [sl], #4
 801243c:	d82b      	bhi.n	8012496 <__multiply+0x120>
 801243e:	f8cc 8004 	str.w	r8, [ip, #4]
 8012442:	9b01      	ldr	r3, [sp, #4]
 8012444:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8012448:	3204      	adds	r2, #4
 801244a:	f1ba 0f00 	cmp.w	sl, #0
 801244e:	d020      	beq.n	8012492 <__multiply+0x11c>
 8012450:	682b      	ldr	r3, [r5, #0]
 8012452:	4689      	mov	r9, r1
 8012454:	46a8      	mov	r8, r5
 8012456:	f04f 0b00 	mov.w	fp, #0
 801245a:	f8b9 c000 	ldrh.w	ip, [r9]
 801245e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8012462:	fb0a 440c 	mla	r4, sl, ip, r4
 8012466:	445c      	add	r4, fp
 8012468:	46c4      	mov	ip, r8
 801246a:	b29b      	uxth	r3, r3
 801246c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8012470:	f84c 3b04 	str.w	r3, [ip], #4
 8012474:	f859 3b04 	ldr.w	r3, [r9], #4
 8012478:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801247c:	0c1b      	lsrs	r3, r3, #16
 801247e:	fb0a b303 	mla	r3, sl, r3, fp
 8012482:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8012486:	454f      	cmp	r7, r9
 8012488:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801248c:	d805      	bhi.n	801249a <__multiply+0x124>
 801248e:	f8c8 3004 	str.w	r3, [r8, #4]
 8012492:	3504      	adds	r5, #4
 8012494:	e79b      	b.n	80123ce <__multiply+0x58>
 8012496:	46d4      	mov	ip, sl
 8012498:	e7b3      	b.n	8012402 <__multiply+0x8c>
 801249a:	46e0      	mov	r8, ip
 801249c:	e7dd      	b.n	801245a <__multiply+0xe4>
 801249e:	3e01      	subs	r6, #1
 80124a0:	e799      	b.n	80123d6 <__multiply+0x60>
	...

080124a4 <__pow5mult>:
 80124a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124a8:	4615      	mov	r5, r2
 80124aa:	f012 0203 	ands.w	r2, r2, #3
 80124ae:	4606      	mov	r6, r0
 80124b0:	460f      	mov	r7, r1
 80124b2:	d007      	beq.n	80124c4 <__pow5mult+0x20>
 80124b4:	3a01      	subs	r2, #1
 80124b6:	4c21      	ldr	r4, [pc, #132]	; (801253c <__pow5mult+0x98>)
 80124b8:	2300      	movs	r3, #0
 80124ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80124be:	f7ff fec8 	bl	8012252 <__multadd>
 80124c2:	4607      	mov	r7, r0
 80124c4:	10ad      	asrs	r5, r5, #2
 80124c6:	d035      	beq.n	8012534 <__pow5mult+0x90>
 80124c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80124ca:	b93c      	cbnz	r4, 80124dc <__pow5mult+0x38>
 80124cc:	2010      	movs	r0, #16
 80124ce:	f7ff fe5b 	bl	8012188 <malloc>
 80124d2:	6270      	str	r0, [r6, #36]	; 0x24
 80124d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80124d8:	6004      	str	r4, [r0, #0]
 80124da:	60c4      	str	r4, [r0, #12]
 80124dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80124e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80124e4:	b94c      	cbnz	r4, 80124fa <__pow5mult+0x56>
 80124e6:	f240 2171 	movw	r1, #625	; 0x271
 80124ea:	4630      	mov	r0, r6
 80124ec:	f7ff ff3a 	bl	8012364 <__i2b>
 80124f0:	2300      	movs	r3, #0
 80124f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80124f6:	4604      	mov	r4, r0
 80124f8:	6003      	str	r3, [r0, #0]
 80124fa:	f04f 0800 	mov.w	r8, #0
 80124fe:	07eb      	lsls	r3, r5, #31
 8012500:	d50a      	bpl.n	8012518 <__pow5mult+0x74>
 8012502:	4639      	mov	r1, r7
 8012504:	4622      	mov	r2, r4
 8012506:	4630      	mov	r0, r6
 8012508:	f7ff ff35 	bl	8012376 <__multiply>
 801250c:	4639      	mov	r1, r7
 801250e:	4681      	mov	r9, r0
 8012510:	4630      	mov	r0, r6
 8012512:	f7ff fe87 	bl	8012224 <_Bfree>
 8012516:	464f      	mov	r7, r9
 8012518:	106d      	asrs	r5, r5, #1
 801251a:	d00b      	beq.n	8012534 <__pow5mult+0x90>
 801251c:	6820      	ldr	r0, [r4, #0]
 801251e:	b938      	cbnz	r0, 8012530 <__pow5mult+0x8c>
 8012520:	4622      	mov	r2, r4
 8012522:	4621      	mov	r1, r4
 8012524:	4630      	mov	r0, r6
 8012526:	f7ff ff26 	bl	8012376 <__multiply>
 801252a:	6020      	str	r0, [r4, #0]
 801252c:	f8c0 8000 	str.w	r8, [r0]
 8012530:	4604      	mov	r4, r0
 8012532:	e7e4      	b.n	80124fe <__pow5mult+0x5a>
 8012534:	4638      	mov	r0, r7
 8012536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801253a:	bf00      	nop
 801253c:	08015338 	.word	0x08015338

08012540 <__lshift>:
 8012540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012544:	460c      	mov	r4, r1
 8012546:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801254a:	6923      	ldr	r3, [r4, #16]
 801254c:	6849      	ldr	r1, [r1, #4]
 801254e:	eb0a 0903 	add.w	r9, sl, r3
 8012552:	68a3      	ldr	r3, [r4, #8]
 8012554:	4607      	mov	r7, r0
 8012556:	4616      	mov	r6, r2
 8012558:	f109 0501 	add.w	r5, r9, #1
 801255c:	42ab      	cmp	r3, r5
 801255e:	db32      	blt.n	80125c6 <__lshift+0x86>
 8012560:	4638      	mov	r0, r7
 8012562:	f7ff fe2b 	bl	80121bc <_Balloc>
 8012566:	2300      	movs	r3, #0
 8012568:	4680      	mov	r8, r0
 801256a:	f100 0114 	add.w	r1, r0, #20
 801256e:	461a      	mov	r2, r3
 8012570:	4553      	cmp	r3, sl
 8012572:	db2b      	blt.n	80125cc <__lshift+0x8c>
 8012574:	6920      	ldr	r0, [r4, #16]
 8012576:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801257a:	f104 0314 	add.w	r3, r4, #20
 801257e:	f016 021f 	ands.w	r2, r6, #31
 8012582:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012586:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801258a:	d025      	beq.n	80125d8 <__lshift+0x98>
 801258c:	f1c2 0e20 	rsb	lr, r2, #32
 8012590:	2000      	movs	r0, #0
 8012592:	681e      	ldr	r6, [r3, #0]
 8012594:	468a      	mov	sl, r1
 8012596:	4096      	lsls	r6, r2
 8012598:	4330      	orrs	r0, r6
 801259a:	f84a 0b04 	str.w	r0, [sl], #4
 801259e:	f853 0b04 	ldr.w	r0, [r3], #4
 80125a2:	459c      	cmp	ip, r3
 80125a4:	fa20 f00e 	lsr.w	r0, r0, lr
 80125a8:	d814      	bhi.n	80125d4 <__lshift+0x94>
 80125aa:	6048      	str	r0, [r1, #4]
 80125ac:	b108      	cbz	r0, 80125b2 <__lshift+0x72>
 80125ae:	f109 0502 	add.w	r5, r9, #2
 80125b2:	3d01      	subs	r5, #1
 80125b4:	4638      	mov	r0, r7
 80125b6:	f8c8 5010 	str.w	r5, [r8, #16]
 80125ba:	4621      	mov	r1, r4
 80125bc:	f7ff fe32 	bl	8012224 <_Bfree>
 80125c0:	4640      	mov	r0, r8
 80125c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125c6:	3101      	adds	r1, #1
 80125c8:	005b      	lsls	r3, r3, #1
 80125ca:	e7c7      	b.n	801255c <__lshift+0x1c>
 80125cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80125d0:	3301      	adds	r3, #1
 80125d2:	e7cd      	b.n	8012570 <__lshift+0x30>
 80125d4:	4651      	mov	r1, sl
 80125d6:	e7dc      	b.n	8012592 <__lshift+0x52>
 80125d8:	3904      	subs	r1, #4
 80125da:	f853 2b04 	ldr.w	r2, [r3], #4
 80125de:	f841 2f04 	str.w	r2, [r1, #4]!
 80125e2:	459c      	cmp	ip, r3
 80125e4:	d8f9      	bhi.n	80125da <__lshift+0x9a>
 80125e6:	e7e4      	b.n	80125b2 <__lshift+0x72>

080125e8 <__mcmp>:
 80125e8:	6903      	ldr	r3, [r0, #16]
 80125ea:	690a      	ldr	r2, [r1, #16]
 80125ec:	1a9b      	subs	r3, r3, r2
 80125ee:	b530      	push	{r4, r5, lr}
 80125f0:	d10c      	bne.n	801260c <__mcmp+0x24>
 80125f2:	0092      	lsls	r2, r2, #2
 80125f4:	3014      	adds	r0, #20
 80125f6:	3114      	adds	r1, #20
 80125f8:	1884      	adds	r4, r0, r2
 80125fa:	4411      	add	r1, r2
 80125fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012600:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8012604:	4295      	cmp	r5, r2
 8012606:	d003      	beq.n	8012610 <__mcmp+0x28>
 8012608:	d305      	bcc.n	8012616 <__mcmp+0x2e>
 801260a:	2301      	movs	r3, #1
 801260c:	4618      	mov	r0, r3
 801260e:	bd30      	pop	{r4, r5, pc}
 8012610:	42a0      	cmp	r0, r4
 8012612:	d3f3      	bcc.n	80125fc <__mcmp+0x14>
 8012614:	e7fa      	b.n	801260c <__mcmp+0x24>
 8012616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801261a:	e7f7      	b.n	801260c <__mcmp+0x24>

0801261c <__mdiff>:
 801261c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012620:	460d      	mov	r5, r1
 8012622:	4607      	mov	r7, r0
 8012624:	4611      	mov	r1, r2
 8012626:	4628      	mov	r0, r5
 8012628:	4614      	mov	r4, r2
 801262a:	f7ff ffdd 	bl	80125e8 <__mcmp>
 801262e:	1e06      	subs	r6, r0, #0
 8012630:	d108      	bne.n	8012644 <__mdiff+0x28>
 8012632:	4631      	mov	r1, r6
 8012634:	4638      	mov	r0, r7
 8012636:	f7ff fdc1 	bl	80121bc <_Balloc>
 801263a:	2301      	movs	r3, #1
 801263c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8012640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012644:	bfa4      	itt	ge
 8012646:	4623      	movge	r3, r4
 8012648:	462c      	movge	r4, r5
 801264a:	4638      	mov	r0, r7
 801264c:	6861      	ldr	r1, [r4, #4]
 801264e:	bfa6      	itte	ge
 8012650:	461d      	movge	r5, r3
 8012652:	2600      	movge	r6, #0
 8012654:	2601      	movlt	r6, #1
 8012656:	f7ff fdb1 	bl	80121bc <_Balloc>
 801265a:	692b      	ldr	r3, [r5, #16]
 801265c:	60c6      	str	r6, [r0, #12]
 801265e:	6926      	ldr	r6, [r4, #16]
 8012660:	f105 0914 	add.w	r9, r5, #20
 8012664:	f104 0214 	add.w	r2, r4, #20
 8012668:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801266c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8012670:	f100 0514 	add.w	r5, r0, #20
 8012674:	f04f 0e00 	mov.w	lr, #0
 8012678:	f852 ab04 	ldr.w	sl, [r2], #4
 801267c:	f859 4b04 	ldr.w	r4, [r9], #4
 8012680:	fa1e f18a 	uxtah	r1, lr, sl
 8012684:	b2a3      	uxth	r3, r4
 8012686:	1ac9      	subs	r1, r1, r3
 8012688:	0c23      	lsrs	r3, r4, #16
 801268a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801268e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8012692:	b289      	uxth	r1, r1
 8012694:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8012698:	45c8      	cmp	r8, r9
 801269a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801269e:	4694      	mov	ip, r2
 80126a0:	f845 3b04 	str.w	r3, [r5], #4
 80126a4:	d8e8      	bhi.n	8012678 <__mdiff+0x5c>
 80126a6:	45bc      	cmp	ip, r7
 80126a8:	d304      	bcc.n	80126b4 <__mdiff+0x98>
 80126aa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80126ae:	b183      	cbz	r3, 80126d2 <__mdiff+0xb6>
 80126b0:	6106      	str	r6, [r0, #16]
 80126b2:	e7c5      	b.n	8012640 <__mdiff+0x24>
 80126b4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80126b8:	fa1e f381 	uxtah	r3, lr, r1
 80126bc:	141a      	asrs	r2, r3, #16
 80126be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80126c2:	b29b      	uxth	r3, r3
 80126c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80126c8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80126cc:	f845 3b04 	str.w	r3, [r5], #4
 80126d0:	e7e9      	b.n	80126a6 <__mdiff+0x8a>
 80126d2:	3e01      	subs	r6, #1
 80126d4:	e7e9      	b.n	80126aa <__mdiff+0x8e>

080126d6 <__d2b>:
 80126d6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80126da:	460e      	mov	r6, r1
 80126dc:	2101      	movs	r1, #1
 80126de:	ec59 8b10 	vmov	r8, r9, d0
 80126e2:	4615      	mov	r5, r2
 80126e4:	f7ff fd6a 	bl	80121bc <_Balloc>
 80126e8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80126ec:	4607      	mov	r7, r0
 80126ee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80126f2:	bb34      	cbnz	r4, 8012742 <__d2b+0x6c>
 80126f4:	9301      	str	r3, [sp, #4]
 80126f6:	f1b8 0300 	subs.w	r3, r8, #0
 80126fa:	d027      	beq.n	801274c <__d2b+0x76>
 80126fc:	a802      	add	r0, sp, #8
 80126fe:	f840 3d08 	str.w	r3, [r0, #-8]!
 8012702:	f7ff fe00 	bl	8012306 <__lo0bits>
 8012706:	9900      	ldr	r1, [sp, #0]
 8012708:	b1f0      	cbz	r0, 8012748 <__d2b+0x72>
 801270a:	9a01      	ldr	r2, [sp, #4]
 801270c:	f1c0 0320 	rsb	r3, r0, #32
 8012710:	fa02 f303 	lsl.w	r3, r2, r3
 8012714:	430b      	orrs	r3, r1
 8012716:	40c2      	lsrs	r2, r0
 8012718:	617b      	str	r3, [r7, #20]
 801271a:	9201      	str	r2, [sp, #4]
 801271c:	9b01      	ldr	r3, [sp, #4]
 801271e:	61bb      	str	r3, [r7, #24]
 8012720:	2b00      	cmp	r3, #0
 8012722:	bf14      	ite	ne
 8012724:	2102      	movne	r1, #2
 8012726:	2101      	moveq	r1, #1
 8012728:	6139      	str	r1, [r7, #16]
 801272a:	b1c4      	cbz	r4, 801275e <__d2b+0x88>
 801272c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8012730:	4404      	add	r4, r0
 8012732:	6034      	str	r4, [r6, #0]
 8012734:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012738:	6028      	str	r0, [r5, #0]
 801273a:	4638      	mov	r0, r7
 801273c:	b003      	add	sp, #12
 801273e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012742:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012746:	e7d5      	b.n	80126f4 <__d2b+0x1e>
 8012748:	6179      	str	r1, [r7, #20]
 801274a:	e7e7      	b.n	801271c <__d2b+0x46>
 801274c:	a801      	add	r0, sp, #4
 801274e:	f7ff fdda 	bl	8012306 <__lo0bits>
 8012752:	9b01      	ldr	r3, [sp, #4]
 8012754:	617b      	str	r3, [r7, #20]
 8012756:	2101      	movs	r1, #1
 8012758:	6139      	str	r1, [r7, #16]
 801275a:	3020      	adds	r0, #32
 801275c:	e7e5      	b.n	801272a <__d2b+0x54>
 801275e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8012762:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8012766:	6030      	str	r0, [r6, #0]
 8012768:	6918      	ldr	r0, [r3, #16]
 801276a:	f7ff fdad 	bl	80122c8 <__hi0bits>
 801276e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8012772:	e7e1      	b.n	8012738 <__d2b+0x62>

08012774 <_calloc_r>:
 8012774:	b538      	push	{r3, r4, r5, lr}
 8012776:	fb02 f401 	mul.w	r4, r2, r1
 801277a:	4621      	mov	r1, r4
 801277c:	f000 f856 	bl	801282c <_malloc_r>
 8012780:	4605      	mov	r5, r0
 8012782:	b118      	cbz	r0, 801278c <_calloc_r+0x18>
 8012784:	4622      	mov	r2, r4
 8012786:	2100      	movs	r1, #0
 8012788:	f7fd ff0d 	bl	80105a6 <memset>
 801278c:	4628      	mov	r0, r5
 801278e:	bd38      	pop	{r3, r4, r5, pc}

08012790 <_free_r>:
 8012790:	b538      	push	{r3, r4, r5, lr}
 8012792:	4605      	mov	r5, r0
 8012794:	2900      	cmp	r1, #0
 8012796:	d045      	beq.n	8012824 <_free_r+0x94>
 8012798:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801279c:	1f0c      	subs	r4, r1, #4
 801279e:	2b00      	cmp	r3, #0
 80127a0:	bfb8      	it	lt
 80127a2:	18e4      	addlt	r4, r4, r3
 80127a4:	f000 fc03 	bl	8012fae <__malloc_lock>
 80127a8:	4a1f      	ldr	r2, [pc, #124]	; (8012828 <_free_r+0x98>)
 80127aa:	6813      	ldr	r3, [r2, #0]
 80127ac:	4610      	mov	r0, r2
 80127ae:	b933      	cbnz	r3, 80127be <_free_r+0x2e>
 80127b0:	6063      	str	r3, [r4, #4]
 80127b2:	6014      	str	r4, [r2, #0]
 80127b4:	4628      	mov	r0, r5
 80127b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80127ba:	f000 bbf9 	b.w	8012fb0 <__malloc_unlock>
 80127be:	42a3      	cmp	r3, r4
 80127c0:	d90c      	bls.n	80127dc <_free_r+0x4c>
 80127c2:	6821      	ldr	r1, [r4, #0]
 80127c4:	1862      	adds	r2, r4, r1
 80127c6:	4293      	cmp	r3, r2
 80127c8:	bf04      	itt	eq
 80127ca:	681a      	ldreq	r2, [r3, #0]
 80127cc:	685b      	ldreq	r3, [r3, #4]
 80127ce:	6063      	str	r3, [r4, #4]
 80127d0:	bf04      	itt	eq
 80127d2:	1852      	addeq	r2, r2, r1
 80127d4:	6022      	streq	r2, [r4, #0]
 80127d6:	6004      	str	r4, [r0, #0]
 80127d8:	e7ec      	b.n	80127b4 <_free_r+0x24>
 80127da:	4613      	mov	r3, r2
 80127dc:	685a      	ldr	r2, [r3, #4]
 80127de:	b10a      	cbz	r2, 80127e4 <_free_r+0x54>
 80127e0:	42a2      	cmp	r2, r4
 80127e2:	d9fa      	bls.n	80127da <_free_r+0x4a>
 80127e4:	6819      	ldr	r1, [r3, #0]
 80127e6:	1858      	adds	r0, r3, r1
 80127e8:	42a0      	cmp	r0, r4
 80127ea:	d10b      	bne.n	8012804 <_free_r+0x74>
 80127ec:	6820      	ldr	r0, [r4, #0]
 80127ee:	4401      	add	r1, r0
 80127f0:	1858      	adds	r0, r3, r1
 80127f2:	4282      	cmp	r2, r0
 80127f4:	6019      	str	r1, [r3, #0]
 80127f6:	d1dd      	bne.n	80127b4 <_free_r+0x24>
 80127f8:	6810      	ldr	r0, [r2, #0]
 80127fa:	6852      	ldr	r2, [r2, #4]
 80127fc:	605a      	str	r2, [r3, #4]
 80127fe:	4401      	add	r1, r0
 8012800:	6019      	str	r1, [r3, #0]
 8012802:	e7d7      	b.n	80127b4 <_free_r+0x24>
 8012804:	d902      	bls.n	801280c <_free_r+0x7c>
 8012806:	230c      	movs	r3, #12
 8012808:	602b      	str	r3, [r5, #0]
 801280a:	e7d3      	b.n	80127b4 <_free_r+0x24>
 801280c:	6820      	ldr	r0, [r4, #0]
 801280e:	1821      	adds	r1, r4, r0
 8012810:	428a      	cmp	r2, r1
 8012812:	bf04      	itt	eq
 8012814:	6811      	ldreq	r1, [r2, #0]
 8012816:	6852      	ldreq	r2, [r2, #4]
 8012818:	6062      	str	r2, [r4, #4]
 801281a:	bf04      	itt	eq
 801281c:	1809      	addeq	r1, r1, r0
 801281e:	6021      	streq	r1, [r4, #0]
 8012820:	605c      	str	r4, [r3, #4]
 8012822:	e7c7      	b.n	80127b4 <_free_r+0x24>
 8012824:	bd38      	pop	{r3, r4, r5, pc}
 8012826:	bf00      	nop
 8012828:	2000086c 	.word	0x2000086c

0801282c <_malloc_r>:
 801282c:	b570      	push	{r4, r5, r6, lr}
 801282e:	1ccd      	adds	r5, r1, #3
 8012830:	f025 0503 	bic.w	r5, r5, #3
 8012834:	3508      	adds	r5, #8
 8012836:	2d0c      	cmp	r5, #12
 8012838:	bf38      	it	cc
 801283a:	250c      	movcc	r5, #12
 801283c:	2d00      	cmp	r5, #0
 801283e:	4606      	mov	r6, r0
 8012840:	db01      	blt.n	8012846 <_malloc_r+0x1a>
 8012842:	42a9      	cmp	r1, r5
 8012844:	d903      	bls.n	801284e <_malloc_r+0x22>
 8012846:	230c      	movs	r3, #12
 8012848:	6033      	str	r3, [r6, #0]
 801284a:	2000      	movs	r0, #0
 801284c:	bd70      	pop	{r4, r5, r6, pc}
 801284e:	f000 fbae 	bl	8012fae <__malloc_lock>
 8012852:	4a21      	ldr	r2, [pc, #132]	; (80128d8 <_malloc_r+0xac>)
 8012854:	6814      	ldr	r4, [r2, #0]
 8012856:	4621      	mov	r1, r4
 8012858:	b991      	cbnz	r1, 8012880 <_malloc_r+0x54>
 801285a:	4c20      	ldr	r4, [pc, #128]	; (80128dc <_malloc_r+0xb0>)
 801285c:	6823      	ldr	r3, [r4, #0]
 801285e:	b91b      	cbnz	r3, 8012868 <_malloc_r+0x3c>
 8012860:	4630      	mov	r0, r6
 8012862:	f000 facf 	bl	8012e04 <_sbrk_r>
 8012866:	6020      	str	r0, [r4, #0]
 8012868:	4629      	mov	r1, r5
 801286a:	4630      	mov	r0, r6
 801286c:	f000 faca 	bl	8012e04 <_sbrk_r>
 8012870:	1c43      	adds	r3, r0, #1
 8012872:	d124      	bne.n	80128be <_malloc_r+0x92>
 8012874:	230c      	movs	r3, #12
 8012876:	6033      	str	r3, [r6, #0]
 8012878:	4630      	mov	r0, r6
 801287a:	f000 fb99 	bl	8012fb0 <__malloc_unlock>
 801287e:	e7e4      	b.n	801284a <_malloc_r+0x1e>
 8012880:	680b      	ldr	r3, [r1, #0]
 8012882:	1b5b      	subs	r3, r3, r5
 8012884:	d418      	bmi.n	80128b8 <_malloc_r+0x8c>
 8012886:	2b0b      	cmp	r3, #11
 8012888:	d90f      	bls.n	80128aa <_malloc_r+0x7e>
 801288a:	600b      	str	r3, [r1, #0]
 801288c:	50cd      	str	r5, [r1, r3]
 801288e:	18cc      	adds	r4, r1, r3
 8012890:	4630      	mov	r0, r6
 8012892:	f000 fb8d 	bl	8012fb0 <__malloc_unlock>
 8012896:	f104 000b 	add.w	r0, r4, #11
 801289a:	1d23      	adds	r3, r4, #4
 801289c:	f020 0007 	bic.w	r0, r0, #7
 80128a0:	1ac3      	subs	r3, r0, r3
 80128a2:	d0d3      	beq.n	801284c <_malloc_r+0x20>
 80128a4:	425a      	negs	r2, r3
 80128a6:	50e2      	str	r2, [r4, r3]
 80128a8:	e7d0      	b.n	801284c <_malloc_r+0x20>
 80128aa:	428c      	cmp	r4, r1
 80128ac:	684b      	ldr	r3, [r1, #4]
 80128ae:	bf16      	itet	ne
 80128b0:	6063      	strne	r3, [r4, #4]
 80128b2:	6013      	streq	r3, [r2, #0]
 80128b4:	460c      	movne	r4, r1
 80128b6:	e7eb      	b.n	8012890 <_malloc_r+0x64>
 80128b8:	460c      	mov	r4, r1
 80128ba:	6849      	ldr	r1, [r1, #4]
 80128bc:	e7cc      	b.n	8012858 <_malloc_r+0x2c>
 80128be:	1cc4      	adds	r4, r0, #3
 80128c0:	f024 0403 	bic.w	r4, r4, #3
 80128c4:	42a0      	cmp	r0, r4
 80128c6:	d005      	beq.n	80128d4 <_malloc_r+0xa8>
 80128c8:	1a21      	subs	r1, r4, r0
 80128ca:	4630      	mov	r0, r6
 80128cc:	f000 fa9a 	bl	8012e04 <_sbrk_r>
 80128d0:	3001      	adds	r0, #1
 80128d2:	d0cf      	beq.n	8012874 <_malloc_r+0x48>
 80128d4:	6025      	str	r5, [r4, #0]
 80128d6:	e7db      	b.n	8012890 <_malloc_r+0x64>
 80128d8:	2000086c 	.word	0x2000086c
 80128dc:	20000870 	.word	0x20000870

080128e0 <__ssputs_r>:
 80128e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80128e4:	688e      	ldr	r6, [r1, #8]
 80128e6:	429e      	cmp	r6, r3
 80128e8:	4682      	mov	sl, r0
 80128ea:	460c      	mov	r4, r1
 80128ec:	4690      	mov	r8, r2
 80128ee:	4699      	mov	r9, r3
 80128f0:	d837      	bhi.n	8012962 <__ssputs_r+0x82>
 80128f2:	898a      	ldrh	r2, [r1, #12]
 80128f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80128f8:	d031      	beq.n	801295e <__ssputs_r+0x7e>
 80128fa:	6825      	ldr	r5, [r4, #0]
 80128fc:	6909      	ldr	r1, [r1, #16]
 80128fe:	1a6f      	subs	r7, r5, r1
 8012900:	6965      	ldr	r5, [r4, #20]
 8012902:	2302      	movs	r3, #2
 8012904:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012908:	fb95 f5f3 	sdiv	r5, r5, r3
 801290c:	f109 0301 	add.w	r3, r9, #1
 8012910:	443b      	add	r3, r7
 8012912:	429d      	cmp	r5, r3
 8012914:	bf38      	it	cc
 8012916:	461d      	movcc	r5, r3
 8012918:	0553      	lsls	r3, r2, #21
 801291a:	d530      	bpl.n	801297e <__ssputs_r+0x9e>
 801291c:	4629      	mov	r1, r5
 801291e:	f7ff ff85 	bl	801282c <_malloc_r>
 8012922:	4606      	mov	r6, r0
 8012924:	b950      	cbnz	r0, 801293c <__ssputs_r+0x5c>
 8012926:	230c      	movs	r3, #12
 8012928:	f8ca 3000 	str.w	r3, [sl]
 801292c:	89a3      	ldrh	r3, [r4, #12]
 801292e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012932:	81a3      	strh	r3, [r4, #12]
 8012934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801293c:	463a      	mov	r2, r7
 801293e:	6921      	ldr	r1, [r4, #16]
 8012940:	f7fd fe26 	bl	8010590 <memcpy>
 8012944:	89a3      	ldrh	r3, [r4, #12]
 8012946:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801294a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801294e:	81a3      	strh	r3, [r4, #12]
 8012950:	6126      	str	r6, [r4, #16]
 8012952:	6165      	str	r5, [r4, #20]
 8012954:	443e      	add	r6, r7
 8012956:	1bed      	subs	r5, r5, r7
 8012958:	6026      	str	r6, [r4, #0]
 801295a:	60a5      	str	r5, [r4, #8]
 801295c:	464e      	mov	r6, r9
 801295e:	454e      	cmp	r6, r9
 8012960:	d900      	bls.n	8012964 <__ssputs_r+0x84>
 8012962:	464e      	mov	r6, r9
 8012964:	4632      	mov	r2, r6
 8012966:	4641      	mov	r1, r8
 8012968:	6820      	ldr	r0, [r4, #0]
 801296a:	f000 fb07 	bl	8012f7c <memmove>
 801296e:	68a3      	ldr	r3, [r4, #8]
 8012970:	1b9b      	subs	r3, r3, r6
 8012972:	60a3      	str	r3, [r4, #8]
 8012974:	6823      	ldr	r3, [r4, #0]
 8012976:	441e      	add	r6, r3
 8012978:	6026      	str	r6, [r4, #0]
 801297a:	2000      	movs	r0, #0
 801297c:	e7dc      	b.n	8012938 <__ssputs_r+0x58>
 801297e:	462a      	mov	r2, r5
 8012980:	f000 fb17 	bl	8012fb2 <_realloc_r>
 8012984:	4606      	mov	r6, r0
 8012986:	2800      	cmp	r0, #0
 8012988:	d1e2      	bne.n	8012950 <__ssputs_r+0x70>
 801298a:	6921      	ldr	r1, [r4, #16]
 801298c:	4650      	mov	r0, sl
 801298e:	f7ff feff 	bl	8012790 <_free_r>
 8012992:	e7c8      	b.n	8012926 <__ssputs_r+0x46>

08012994 <_svfiprintf_r>:
 8012994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012998:	461d      	mov	r5, r3
 801299a:	898b      	ldrh	r3, [r1, #12]
 801299c:	061f      	lsls	r7, r3, #24
 801299e:	b09d      	sub	sp, #116	; 0x74
 80129a0:	4680      	mov	r8, r0
 80129a2:	460c      	mov	r4, r1
 80129a4:	4616      	mov	r6, r2
 80129a6:	d50f      	bpl.n	80129c8 <_svfiprintf_r+0x34>
 80129a8:	690b      	ldr	r3, [r1, #16]
 80129aa:	b96b      	cbnz	r3, 80129c8 <_svfiprintf_r+0x34>
 80129ac:	2140      	movs	r1, #64	; 0x40
 80129ae:	f7ff ff3d 	bl	801282c <_malloc_r>
 80129b2:	6020      	str	r0, [r4, #0]
 80129b4:	6120      	str	r0, [r4, #16]
 80129b6:	b928      	cbnz	r0, 80129c4 <_svfiprintf_r+0x30>
 80129b8:	230c      	movs	r3, #12
 80129ba:	f8c8 3000 	str.w	r3, [r8]
 80129be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80129c2:	e0c8      	b.n	8012b56 <_svfiprintf_r+0x1c2>
 80129c4:	2340      	movs	r3, #64	; 0x40
 80129c6:	6163      	str	r3, [r4, #20]
 80129c8:	2300      	movs	r3, #0
 80129ca:	9309      	str	r3, [sp, #36]	; 0x24
 80129cc:	2320      	movs	r3, #32
 80129ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80129d2:	2330      	movs	r3, #48	; 0x30
 80129d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80129d8:	9503      	str	r5, [sp, #12]
 80129da:	f04f 0b01 	mov.w	fp, #1
 80129de:	4637      	mov	r7, r6
 80129e0:	463d      	mov	r5, r7
 80129e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80129e6:	b10b      	cbz	r3, 80129ec <_svfiprintf_r+0x58>
 80129e8:	2b25      	cmp	r3, #37	; 0x25
 80129ea:	d13e      	bne.n	8012a6a <_svfiprintf_r+0xd6>
 80129ec:	ebb7 0a06 	subs.w	sl, r7, r6
 80129f0:	d00b      	beq.n	8012a0a <_svfiprintf_r+0x76>
 80129f2:	4653      	mov	r3, sl
 80129f4:	4632      	mov	r2, r6
 80129f6:	4621      	mov	r1, r4
 80129f8:	4640      	mov	r0, r8
 80129fa:	f7ff ff71 	bl	80128e0 <__ssputs_r>
 80129fe:	3001      	adds	r0, #1
 8012a00:	f000 80a4 	beq.w	8012b4c <_svfiprintf_r+0x1b8>
 8012a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a06:	4453      	add	r3, sl
 8012a08:	9309      	str	r3, [sp, #36]	; 0x24
 8012a0a:	783b      	ldrb	r3, [r7, #0]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	f000 809d 	beq.w	8012b4c <_svfiprintf_r+0x1b8>
 8012a12:	2300      	movs	r3, #0
 8012a14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012a18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012a1c:	9304      	str	r3, [sp, #16]
 8012a1e:	9307      	str	r3, [sp, #28]
 8012a20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012a24:	931a      	str	r3, [sp, #104]	; 0x68
 8012a26:	462f      	mov	r7, r5
 8012a28:	2205      	movs	r2, #5
 8012a2a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8012a2e:	4850      	ldr	r0, [pc, #320]	; (8012b70 <_svfiprintf_r+0x1dc>)
 8012a30:	f7ed fbd6 	bl	80001e0 <memchr>
 8012a34:	9b04      	ldr	r3, [sp, #16]
 8012a36:	b9d0      	cbnz	r0, 8012a6e <_svfiprintf_r+0xda>
 8012a38:	06d9      	lsls	r1, r3, #27
 8012a3a:	bf44      	itt	mi
 8012a3c:	2220      	movmi	r2, #32
 8012a3e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012a42:	071a      	lsls	r2, r3, #28
 8012a44:	bf44      	itt	mi
 8012a46:	222b      	movmi	r2, #43	; 0x2b
 8012a48:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012a4c:	782a      	ldrb	r2, [r5, #0]
 8012a4e:	2a2a      	cmp	r2, #42	; 0x2a
 8012a50:	d015      	beq.n	8012a7e <_svfiprintf_r+0xea>
 8012a52:	9a07      	ldr	r2, [sp, #28]
 8012a54:	462f      	mov	r7, r5
 8012a56:	2000      	movs	r0, #0
 8012a58:	250a      	movs	r5, #10
 8012a5a:	4639      	mov	r1, r7
 8012a5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012a60:	3b30      	subs	r3, #48	; 0x30
 8012a62:	2b09      	cmp	r3, #9
 8012a64:	d94d      	bls.n	8012b02 <_svfiprintf_r+0x16e>
 8012a66:	b1b8      	cbz	r0, 8012a98 <_svfiprintf_r+0x104>
 8012a68:	e00f      	b.n	8012a8a <_svfiprintf_r+0xf6>
 8012a6a:	462f      	mov	r7, r5
 8012a6c:	e7b8      	b.n	80129e0 <_svfiprintf_r+0x4c>
 8012a6e:	4a40      	ldr	r2, [pc, #256]	; (8012b70 <_svfiprintf_r+0x1dc>)
 8012a70:	1a80      	subs	r0, r0, r2
 8012a72:	fa0b f000 	lsl.w	r0, fp, r0
 8012a76:	4318      	orrs	r0, r3
 8012a78:	9004      	str	r0, [sp, #16]
 8012a7a:	463d      	mov	r5, r7
 8012a7c:	e7d3      	b.n	8012a26 <_svfiprintf_r+0x92>
 8012a7e:	9a03      	ldr	r2, [sp, #12]
 8012a80:	1d11      	adds	r1, r2, #4
 8012a82:	6812      	ldr	r2, [r2, #0]
 8012a84:	9103      	str	r1, [sp, #12]
 8012a86:	2a00      	cmp	r2, #0
 8012a88:	db01      	blt.n	8012a8e <_svfiprintf_r+0xfa>
 8012a8a:	9207      	str	r2, [sp, #28]
 8012a8c:	e004      	b.n	8012a98 <_svfiprintf_r+0x104>
 8012a8e:	4252      	negs	r2, r2
 8012a90:	f043 0302 	orr.w	r3, r3, #2
 8012a94:	9207      	str	r2, [sp, #28]
 8012a96:	9304      	str	r3, [sp, #16]
 8012a98:	783b      	ldrb	r3, [r7, #0]
 8012a9a:	2b2e      	cmp	r3, #46	; 0x2e
 8012a9c:	d10c      	bne.n	8012ab8 <_svfiprintf_r+0x124>
 8012a9e:	787b      	ldrb	r3, [r7, #1]
 8012aa0:	2b2a      	cmp	r3, #42	; 0x2a
 8012aa2:	d133      	bne.n	8012b0c <_svfiprintf_r+0x178>
 8012aa4:	9b03      	ldr	r3, [sp, #12]
 8012aa6:	1d1a      	adds	r2, r3, #4
 8012aa8:	681b      	ldr	r3, [r3, #0]
 8012aaa:	9203      	str	r2, [sp, #12]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	bfb8      	it	lt
 8012ab0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012ab4:	3702      	adds	r7, #2
 8012ab6:	9305      	str	r3, [sp, #20]
 8012ab8:	4d2e      	ldr	r5, [pc, #184]	; (8012b74 <_svfiprintf_r+0x1e0>)
 8012aba:	7839      	ldrb	r1, [r7, #0]
 8012abc:	2203      	movs	r2, #3
 8012abe:	4628      	mov	r0, r5
 8012ac0:	f7ed fb8e 	bl	80001e0 <memchr>
 8012ac4:	b138      	cbz	r0, 8012ad6 <_svfiprintf_r+0x142>
 8012ac6:	2340      	movs	r3, #64	; 0x40
 8012ac8:	1b40      	subs	r0, r0, r5
 8012aca:	fa03 f000 	lsl.w	r0, r3, r0
 8012ace:	9b04      	ldr	r3, [sp, #16]
 8012ad0:	4303      	orrs	r3, r0
 8012ad2:	3701      	adds	r7, #1
 8012ad4:	9304      	str	r3, [sp, #16]
 8012ad6:	7839      	ldrb	r1, [r7, #0]
 8012ad8:	4827      	ldr	r0, [pc, #156]	; (8012b78 <_svfiprintf_r+0x1e4>)
 8012ada:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012ade:	2206      	movs	r2, #6
 8012ae0:	1c7e      	adds	r6, r7, #1
 8012ae2:	f7ed fb7d 	bl	80001e0 <memchr>
 8012ae6:	2800      	cmp	r0, #0
 8012ae8:	d038      	beq.n	8012b5c <_svfiprintf_r+0x1c8>
 8012aea:	4b24      	ldr	r3, [pc, #144]	; (8012b7c <_svfiprintf_r+0x1e8>)
 8012aec:	bb13      	cbnz	r3, 8012b34 <_svfiprintf_r+0x1a0>
 8012aee:	9b03      	ldr	r3, [sp, #12]
 8012af0:	3307      	adds	r3, #7
 8012af2:	f023 0307 	bic.w	r3, r3, #7
 8012af6:	3308      	adds	r3, #8
 8012af8:	9303      	str	r3, [sp, #12]
 8012afa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012afc:	444b      	add	r3, r9
 8012afe:	9309      	str	r3, [sp, #36]	; 0x24
 8012b00:	e76d      	b.n	80129de <_svfiprintf_r+0x4a>
 8012b02:	fb05 3202 	mla	r2, r5, r2, r3
 8012b06:	2001      	movs	r0, #1
 8012b08:	460f      	mov	r7, r1
 8012b0a:	e7a6      	b.n	8012a5a <_svfiprintf_r+0xc6>
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	3701      	adds	r7, #1
 8012b10:	9305      	str	r3, [sp, #20]
 8012b12:	4619      	mov	r1, r3
 8012b14:	250a      	movs	r5, #10
 8012b16:	4638      	mov	r0, r7
 8012b18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012b1c:	3a30      	subs	r2, #48	; 0x30
 8012b1e:	2a09      	cmp	r2, #9
 8012b20:	d903      	bls.n	8012b2a <_svfiprintf_r+0x196>
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	d0c8      	beq.n	8012ab8 <_svfiprintf_r+0x124>
 8012b26:	9105      	str	r1, [sp, #20]
 8012b28:	e7c6      	b.n	8012ab8 <_svfiprintf_r+0x124>
 8012b2a:	fb05 2101 	mla	r1, r5, r1, r2
 8012b2e:	2301      	movs	r3, #1
 8012b30:	4607      	mov	r7, r0
 8012b32:	e7f0      	b.n	8012b16 <_svfiprintf_r+0x182>
 8012b34:	ab03      	add	r3, sp, #12
 8012b36:	9300      	str	r3, [sp, #0]
 8012b38:	4622      	mov	r2, r4
 8012b3a:	4b11      	ldr	r3, [pc, #68]	; (8012b80 <_svfiprintf_r+0x1ec>)
 8012b3c:	a904      	add	r1, sp, #16
 8012b3e:	4640      	mov	r0, r8
 8012b40:	f7fd fdce 	bl	80106e0 <_printf_float>
 8012b44:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8012b48:	4681      	mov	r9, r0
 8012b4a:	d1d6      	bne.n	8012afa <_svfiprintf_r+0x166>
 8012b4c:	89a3      	ldrh	r3, [r4, #12]
 8012b4e:	065b      	lsls	r3, r3, #25
 8012b50:	f53f af35 	bmi.w	80129be <_svfiprintf_r+0x2a>
 8012b54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012b56:	b01d      	add	sp, #116	; 0x74
 8012b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b5c:	ab03      	add	r3, sp, #12
 8012b5e:	9300      	str	r3, [sp, #0]
 8012b60:	4622      	mov	r2, r4
 8012b62:	4b07      	ldr	r3, [pc, #28]	; (8012b80 <_svfiprintf_r+0x1ec>)
 8012b64:	a904      	add	r1, sp, #16
 8012b66:	4640      	mov	r0, r8
 8012b68:	f7fe f870 	bl	8010c4c <_printf_i>
 8012b6c:	e7ea      	b.n	8012b44 <_svfiprintf_r+0x1b0>
 8012b6e:	bf00      	nop
 8012b70:	08015344 	.word	0x08015344
 8012b74:	0801534a 	.word	0x0801534a
 8012b78:	0801534e 	.word	0x0801534e
 8012b7c:	080106e1 	.word	0x080106e1
 8012b80:	080128e1 	.word	0x080128e1

08012b84 <__sfputc_r>:
 8012b84:	6893      	ldr	r3, [r2, #8]
 8012b86:	3b01      	subs	r3, #1
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	b410      	push	{r4}
 8012b8c:	6093      	str	r3, [r2, #8]
 8012b8e:	da08      	bge.n	8012ba2 <__sfputc_r+0x1e>
 8012b90:	6994      	ldr	r4, [r2, #24]
 8012b92:	42a3      	cmp	r3, r4
 8012b94:	db01      	blt.n	8012b9a <__sfputc_r+0x16>
 8012b96:	290a      	cmp	r1, #10
 8012b98:	d103      	bne.n	8012ba2 <__sfputc_r+0x1e>
 8012b9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b9e:	f7fe ba03 	b.w	8010fa8 <__swbuf_r>
 8012ba2:	6813      	ldr	r3, [r2, #0]
 8012ba4:	1c58      	adds	r0, r3, #1
 8012ba6:	6010      	str	r0, [r2, #0]
 8012ba8:	7019      	strb	r1, [r3, #0]
 8012baa:	4608      	mov	r0, r1
 8012bac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012bb0:	4770      	bx	lr

08012bb2 <__sfputs_r>:
 8012bb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bb4:	4606      	mov	r6, r0
 8012bb6:	460f      	mov	r7, r1
 8012bb8:	4614      	mov	r4, r2
 8012bba:	18d5      	adds	r5, r2, r3
 8012bbc:	42ac      	cmp	r4, r5
 8012bbe:	d101      	bne.n	8012bc4 <__sfputs_r+0x12>
 8012bc0:	2000      	movs	r0, #0
 8012bc2:	e007      	b.n	8012bd4 <__sfputs_r+0x22>
 8012bc4:	463a      	mov	r2, r7
 8012bc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012bca:	4630      	mov	r0, r6
 8012bcc:	f7ff ffda 	bl	8012b84 <__sfputc_r>
 8012bd0:	1c43      	adds	r3, r0, #1
 8012bd2:	d1f3      	bne.n	8012bbc <__sfputs_r+0xa>
 8012bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012bd8 <_vfiprintf_r>:
 8012bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012bdc:	460c      	mov	r4, r1
 8012bde:	b09d      	sub	sp, #116	; 0x74
 8012be0:	4617      	mov	r7, r2
 8012be2:	461d      	mov	r5, r3
 8012be4:	4606      	mov	r6, r0
 8012be6:	b118      	cbz	r0, 8012bf0 <_vfiprintf_r+0x18>
 8012be8:	6983      	ldr	r3, [r0, #24]
 8012bea:	b90b      	cbnz	r3, 8012bf0 <_vfiprintf_r+0x18>
 8012bec:	f7ff f9d0 	bl	8011f90 <__sinit>
 8012bf0:	4b7c      	ldr	r3, [pc, #496]	; (8012de4 <_vfiprintf_r+0x20c>)
 8012bf2:	429c      	cmp	r4, r3
 8012bf4:	d158      	bne.n	8012ca8 <_vfiprintf_r+0xd0>
 8012bf6:	6874      	ldr	r4, [r6, #4]
 8012bf8:	89a3      	ldrh	r3, [r4, #12]
 8012bfa:	0718      	lsls	r0, r3, #28
 8012bfc:	d55e      	bpl.n	8012cbc <_vfiprintf_r+0xe4>
 8012bfe:	6923      	ldr	r3, [r4, #16]
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d05b      	beq.n	8012cbc <_vfiprintf_r+0xe4>
 8012c04:	2300      	movs	r3, #0
 8012c06:	9309      	str	r3, [sp, #36]	; 0x24
 8012c08:	2320      	movs	r3, #32
 8012c0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012c0e:	2330      	movs	r3, #48	; 0x30
 8012c10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012c14:	9503      	str	r5, [sp, #12]
 8012c16:	f04f 0b01 	mov.w	fp, #1
 8012c1a:	46b8      	mov	r8, r7
 8012c1c:	4645      	mov	r5, r8
 8012c1e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012c22:	b10b      	cbz	r3, 8012c28 <_vfiprintf_r+0x50>
 8012c24:	2b25      	cmp	r3, #37	; 0x25
 8012c26:	d154      	bne.n	8012cd2 <_vfiprintf_r+0xfa>
 8012c28:	ebb8 0a07 	subs.w	sl, r8, r7
 8012c2c:	d00b      	beq.n	8012c46 <_vfiprintf_r+0x6e>
 8012c2e:	4653      	mov	r3, sl
 8012c30:	463a      	mov	r2, r7
 8012c32:	4621      	mov	r1, r4
 8012c34:	4630      	mov	r0, r6
 8012c36:	f7ff ffbc 	bl	8012bb2 <__sfputs_r>
 8012c3a:	3001      	adds	r0, #1
 8012c3c:	f000 80c2 	beq.w	8012dc4 <_vfiprintf_r+0x1ec>
 8012c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c42:	4453      	add	r3, sl
 8012c44:	9309      	str	r3, [sp, #36]	; 0x24
 8012c46:	f898 3000 	ldrb.w	r3, [r8]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	f000 80ba 	beq.w	8012dc4 <_vfiprintf_r+0x1ec>
 8012c50:	2300      	movs	r3, #0
 8012c52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012c56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012c5a:	9304      	str	r3, [sp, #16]
 8012c5c:	9307      	str	r3, [sp, #28]
 8012c5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012c62:	931a      	str	r3, [sp, #104]	; 0x68
 8012c64:	46a8      	mov	r8, r5
 8012c66:	2205      	movs	r2, #5
 8012c68:	f818 1b01 	ldrb.w	r1, [r8], #1
 8012c6c:	485e      	ldr	r0, [pc, #376]	; (8012de8 <_vfiprintf_r+0x210>)
 8012c6e:	f7ed fab7 	bl	80001e0 <memchr>
 8012c72:	9b04      	ldr	r3, [sp, #16]
 8012c74:	bb78      	cbnz	r0, 8012cd6 <_vfiprintf_r+0xfe>
 8012c76:	06d9      	lsls	r1, r3, #27
 8012c78:	bf44      	itt	mi
 8012c7a:	2220      	movmi	r2, #32
 8012c7c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012c80:	071a      	lsls	r2, r3, #28
 8012c82:	bf44      	itt	mi
 8012c84:	222b      	movmi	r2, #43	; 0x2b
 8012c86:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012c8a:	782a      	ldrb	r2, [r5, #0]
 8012c8c:	2a2a      	cmp	r2, #42	; 0x2a
 8012c8e:	d02a      	beq.n	8012ce6 <_vfiprintf_r+0x10e>
 8012c90:	9a07      	ldr	r2, [sp, #28]
 8012c92:	46a8      	mov	r8, r5
 8012c94:	2000      	movs	r0, #0
 8012c96:	250a      	movs	r5, #10
 8012c98:	4641      	mov	r1, r8
 8012c9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012c9e:	3b30      	subs	r3, #48	; 0x30
 8012ca0:	2b09      	cmp	r3, #9
 8012ca2:	d969      	bls.n	8012d78 <_vfiprintf_r+0x1a0>
 8012ca4:	b360      	cbz	r0, 8012d00 <_vfiprintf_r+0x128>
 8012ca6:	e024      	b.n	8012cf2 <_vfiprintf_r+0x11a>
 8012ca8:	4b50      	ldr	r3, [pc, #320]	; (8012dec <_vfiprintf_r+0x214>)
 8012caa:	429c      	cmp	r4, r3
 8012cac:	d101      	bne.n	8012cb2 <_vfiprintf_r+0xda>
 8012cae:	68b4      	ldr	r4, [r6, #8]
 8012cb0:	e7a2      	b.n	8012bf8 <_vfiprintf_r+0x20>
 8012cb2:	4b4f      	ldr	r3, [pc, #316]	; (8012df0 <_vfiprintf_r+0x218>)
 8012cb4:	429c      	cmp	r4, r3
 8012cb6:	bf08      	it	eq
 8012cb8:	68f4      	ldreq	r4, [r6, #12]
 8012cba:	e79d      	b.n	8012bf8 <_vfiprintf_r+0x20>
 8012cbc:	4621      	mov	r1, r4
 8012cbe:	4630      	mov	r0, r6
 8012cc0:	f7fe f9c4 	bl	801104c <__swsetup_r>
 8012cc4:	2800      	cmp	r0, #0
 8012cc6:	d09d      	beq.n	8012c04 <_vfiprintf_r+0x2c>
 8012cc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012ccc:	b01d      	add	sp, #116	; 0x74
 8012cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cd2:	46a8      	mov	r8, r5
 8012cd4:	e7a2      	b.n	8012c1c <_vfiprintf_r+0x44>
 8012cd6:	4a44      	ldr	r2, [pc, #272]	; (8012de8 <_vfiprintf_r+0x210>)
 8012cd8:	1a80      	subs	r0, r0, r2
 8012cda:	fa0b f000 	lsl.w	r0, fp, r0
 8012cde:	4318      	orrs	r0, r3
 8012ce0:	9004      	str	r0, [sp, #16]
 8012ce2:	4645      	mov	r5, r8
 8012ce4:	e7be      	b.n	8012c64 <_vfiprintf_r+0x8c>
 8012ce6:	9a03      	ldr	r2, [sp, #12]
 8012ce8:	1d11      	adds	r1, r2, #4
 8012cea:	6812      	ldr	r2, [r2, #0]
 8012cec:	9103      	str	r1, [sp, #12]
 8012cee:	2a00      	cmp	r2, #0
 8012cf0:	db01      	blt.n	8012cf6 <_vfiprintf_r+0x11e>
 8012cf2:	9207      	str	r2, [sp, #28]
 8012cf4:	e004      	b.n	8012d00 <_vfiprintf_r+0x128>
 8012cf6:	4252      	negs	r2, r2
 8012cf8:	f043 0302 	orr.w	r3, r3, #2
 8012cfc:	9207      	str	r2, [sp, #28]
 8012cfe:	9304      	str	r3, [sp, #16]
 8012d00:	f898 3000 	ldrb.w	r3, [r8]
 8012d04:	2b2e      	cmp	r3, #46	; 0x2e
 8012d06:	d10e      	bne.n	8012d26 <_vfiprintf_r+0x14e>
 8012d08:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012d0c:	2b2a      	cmp	r3, #42	; 0x2a
 8012d0e:	d138      	bne.n	8012d82 <_vfiprintf_r+0x1aa>
 8012d10:	9b03      	ldr	r3, [sp, #12]
 8012d12:	1d1a      	adds	r2, r3, #4
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	9203      	str	r2, [sp, #12]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	bfb8      	it	lt
 8012d1c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012d20:	f108 0802 	add.w	r8, r8, #2
 8012d24:	9305      	str	r3, [sp, #20]
 8012d26:	4d33      	ldr	r5, [pc, #204]	; (8012df4 <_vfiprintf_r+0x21c>)
 8012d28:	f898 1000 	ldrb.w	r1, [r8]
 8012d2c:	2203      	movs	r2, #3
 8012d2e:	4628      	mov	r0, r5
 8012d30:	f7ed fa56 	bl	80001e0 <memchr>
 8012d34:	b140      	cbz	r0, 8012d48 <_vfiprintf_r+0x170>
 8012d36:	2340      	movs	r3, #64	; 0x40
 8012d38:	1b40      	subs	r0, r0, r5
 8012d3a:	fa03 f000 	lsl.w	r0, r3, r0
 8012d3e:	9b04      	ldr	r3, [sp, #16]
 8012d40:	4303      	orrs	r3, r0
 8012d42:	f108 0801 	add.w	r8, r8, #1
 8012d46:	9304      	str	r3, [sp, #16]
 8012d48:	f898 1000 	ldrb.w	r1, [r8]
 8012d4c:	482a      	ldr	r0, [pc, #168]	; (8012df8 <_vfiprintf_r+0x220>)
 8012d4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012d52:	2206      	movs	r2, #6
 8012d54:	f108 0701 	add.w	r7, r8, #1
 8012d58:	f7ed fa42 	bl	80001e0 <memchr>
 8012d5c:	2800      	cmp	r0, #0
 8012d5e:	d037      	beq.n	8012dd0 <_vfiprintf_r+0x1f8>
 8012d60:	4b26      	ldr	r3, [pc, #152]	; (8012dfc <_vfiprintf_r+0x224>)
 8012d62:	bb1b      	cbnz	r3, 8012dac <_vfiprintf_r+0x1d4>
 8012d64:	9b03      	ldr	r3, [sp, #12]
 8012d66:	3307      	adds	r3, #7
 8012d68:	f023 0307 	bic.w	r3, r3, #7
 8012d6c:	3308      	adds	r3, #8
 8012d6e:	9303      	str	r3, [sp, #12]
 8012d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d72:	444b      	add	r3, r9
 8012d74:	9309      	str	r3, [sp, #36]	; 0x24
 8012d76:	e750      	b.n	8012c1a <_vfiprintf_r+0x42>
 8012d78:	fb05 3202 	mla	r2, r5, r2, r3
 8012d7c:	2001      	movs	r0, #1
 8012d7e:	4688      	mov	r8, r1
 8012d80:	e78a      	b.n	8012c98 <_vfiprintf_r+0xc0>
 8012d82:	2300      	movs	r3, #0
 8012d84:	f108 0801 	add.w	r8, r8, #1
 8012d88:	9305      	str	r3, [sp, #20]
 8012d8a:	4619      	mov	r1, r3
 8012d8c:	250a      	movs	r5, #10
 8012d8e:	4640      	mov	r0, r8
 8012d90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012d94:	3a30      	subs	r2, #48	; 0x30
 8012d96:	2a09      	cmp	r2, #9
 8012d98:	d903      	bls.n	8012da2 <_vfiprintf_r+0x1ca>
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d0c3      	beq.n	8012d26 <_vfiprintf_r+0x14e>
 8012d9e:	9105      	str	r1, [sp, #20]
 8012da0:	e7c1      	b.n	8012d26 <_vfiprintf_r+0x14e>
 8012da2:	fb05 2101 	mla	r1, r5, r1, r2
 8012da6:	2301      	movs	r3, #1
 8012da8:	4680      	mov	r8, r0
 8012daa:	e7f0      	b.n	8012d8e <_vfiprintf_r+0x1b6>
 8012dac:	ab03      	add	r3, sp, #12
 8012dae:	9300      	str	r3, [sp, #0]
 8012db0:	4622      	mov	r2, r4
 8012db2:	4b13      	ldr	r3, [pc, #76]	; (8012e00 <_vfiprintf_r+0x228>)
 8012db4:	a904      	add	r1, sp, #16
 8012db6:	4630      	mov	r0, r6
 8012db8:	f7fd fc92 	bl	80106e0 <_printf_float>
 8012dbc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8012dc0:	4681      	mov	r9, r0
 8012dc2:	d1d5      	bne.n	8012d70 <_vfiprintf_r+0x198>
 8012dc4:	89a3      	ldrh	r3, [r4, #12]
 8012dc6:	065b      	lsls	r3, r3, #25
 8012dc8:	f53f af7e 	bmi.w	8012cc8 <_vfiprintf_r+0xf0>
 8012dcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012dce:	e77d      	b.n	8012ccc <_vfiprintf_r+0xf4>
 8012dd0:	ab03      	add	r3, sp, #12
 8012dd2:	9300      	str	r3, [sp, #0]
 8012dd4:	4622      	mov	r2, r4
 8012dd6:	4b0a      	ldr	r3, [pc, #40]	; (8012e00 <_vfiprintf_r+0x228>)
 8012dd8:	a904      	add	r1, sp, #16
 8012dda:	4630      	mov	r0, r6
 8012ddc:	f7fd ff36 	bl	8010c4c <_printf_i>
 8012de0:	e7ec      	b.n	8012dbc <_vfiprintf_r+0x1e4>
 8012de2:	bf00      	nop
 8012de4:	080151f8 	.word	0x080151f8
 8012de8:	08015344 	.word	0x08015344
 8012dec:	08015218 	.word	0x08015218
 8012df0:	080151d8 	.word	0x080151d8
 8012df4:	0801534a 	.word	0x0801534a
 8012df8:	0801534e 	.word	0x0801534e
 8012dfc:	080106e1 	.word	0x080106e1
 8012e00:	08012bb3 	.word	0x08012bb3

08012e04 <_sbrk_r>:
 8012e04:	b538      	push	{r3, r4, r5, lr}
 8012e06:	4c06      	ldr	r4, [pc, #24]	; (8012e20 <_sbrk_r+0x1c>)
 8012e08:	2300      	movs	r3, #0
 8012e0a:	4605      	mov	r5, r0
 8012e0c:	4608      	mov	r0, r1
 8012e0e:	6023      	str	r3, [r4, #0]
 8012e10:	f7f0 ff0a 	bl	8003c28 <_sbrk>
 8012e14:	1c43      	adds	r3, r0, #1
 8012e16:	d102      	bne.n	8012e1e <_sbrk_r+0x1a>
 8012e18:	6823      	ldr	r3, [r4, #0]
 8012e1a:	b103      	cbz	r3, 8012e1e <_sbrk_r+0x1a>
 8012e1c:	602b      	str	r3, [r5, #0]
 8012e1e:	bd38      	pop	{r3, r4, r5, pc}
 8012e20:	20017d20 	.word	0x20017d20

08012e24 <nanf>:
 8012e24:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012e2c <nanf+0x8>
 8012e28:	4770      	bx	lr
 8012e2a:	bf00      	nop
 8012e2c:	7fc00000 	.word	0x7fc00000

08012e30 <__sread>:
 8012e30:	b510      	push	{r4, lr}
 8012e32:	460c      	mov	r4, r1
 8012e34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e38:	f000 f8e2 	bl	8013000 <_read_r>
 8012e3c:	2800      	cmp	r0, #0
 8012e3e:	bfab      	itete	ge
 8012e40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012e42:	89a3      	ldrhlt	r3, [r4, #12]
 8012e44:	181b      	addge	r3, r3, r0
 8012e46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012e4a:	bfac      	ite	ge
 8012e4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8012e4e:	81a3      	strhlt	r3, [r4, #12]
 8012e50:	bd10      	pop	{r4, pc}

08012e52 <__swrite>:
 8012e52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e56:	461f      	mov	r7, r3
 8012e58:	898b      	ldrh	r3, [r1, #12]
 8012e5a:	05db      	lsls	r3, r3, #23
 8012e5c:	4605      	mov	r5, r0
 8012e5e:	460c      	mov	r4, r1
 8012e60:	4616      	mov	r6, r2
 8012e62:	d505      	bpl.n	8012e70 <__swrite+0x1e>
 8012e64:	2302      	movs	r3, #2
 8012e66:	2200      	movs	r2, #0
 8012e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e6c:	f000 f874 	bl	8012f58 <_lseek_r>
 8012e70:	89a3      	ldrh	r3, [r4, #12]
 8012e72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012e76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012e7a:	81a3      	strh	r3, [r4, #12]
 8012e7c:	4632      	mov	r2, r6
 8012e7e:	463b      	mov	r3, r7
 8012e80:	4628      	mov	r0, r5
 8012e82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012e86:	f000 b823 	b.w	8012ed0 <_write_r>

08012e8a <__sseek>:
 8012e8a:	b510      	push	{r4, lr}
 8012e8c:	460c      	mov	r4, r1
 8012e8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e92:	f000 f861 	bl	8012f58 <_lseek_r>
 8012e96:	1c43      	adds	r3, r0, #1
 8012e98:	89a3      	ldrh	r3, [r4, #12]
 8012e9a:	bf15      	itete	ne
 8012e9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8012e9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012ea2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012ea6:	81a3      	strheq	r3, [r4, #12]
 8012ea8:	bf18      	it	ne
 8012eaa:	81a3      	strhne	r3, [r4, #12]
 8012eac:	bd10      	pop	{r4, pc}

08012eae <__sclose>:
 8012eae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012eb2:	f000 b81f 	b.w	8012ef4 <_close_r>

08012eb6 <__ascii_wctomb>:
 8012eb6:	b149      	cbz	r1, 8012ecc <__ascii_wctomb+0x16>
 8012eb8:	2aff      	cmp	r2, #255	; 0xff
 8012eba:	bf85      	ittet	hi
 8012ebc:	238a      	movhi	r3, #138	; 0x8a
 8012ebe:	6003      	strhi	r3, [r0, #0]
 8012ec0:	700a      	strbls	r2, [r1, #0]
 8012ec2:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8012ec6:	bf98      	it	ls
 8012ec8:	2001      	movls	r0, #1
 8012eca:	4770      	bx	lr
 8012ecc:	4608      	mov	r0, r1
 8012ece:	4770      	bx	lr

08012ed0 <_write_r>:
 8012ed0:	b538      	push	{r3, r4, r5, lr}
 8012ed2:	4c07      	ldr	r4, [pc, #28]	; (8012ef0 <_write_r+0x20>)
 8012ed4:	4605      	mov	r5, r0
 8012ed6:	4608      	mov	r0, r1
 8012ed8:	4611      	mov	r1, r2
 8012eda:	2200      	movs	r2, #0
 8012edc:	6022      	str	r2, [r4, #0]
 8012ede:	461a      	mov	r2, r3
 8012ee0:	f7f0 fe52 	bl	8003b88 <_write>
 8012ee4:	1c43      	adds	r3, r0, #1
 8012ee6:	d102      	bne.n	8012eee <_write_r+0x1e>
 8012ee8:	6823      	ldr	r3, [r4, #0]
 8012eea:	b103      	cbz	r3, 8012eee <_write_r+0x1e>
 8012eec:	602b      	str	r3, [r5, #0]
 8012eee:	bd38      	pop	{r3, r4, r5, pc}
 8012ef0:	20017d20 	.word	0x20017d20

08012ef4 <_close_r>:
 8012ef4:	b538      	push	{r3, r4, r5, lr}
 8012ef6:	4c06      	ldr	r4, [pc, #24]	; (8012f10 <_close_r+0x1c>)
 8012ef8:	2300      	movs	r3, #0
 8012efa:	4605      	mov	r5, r0
 8012efc:	4608      	mov	r0, r1
 8012efe:	6023      	str	r3, [r4, #0]
 8012f00:	f7f0 fe5e 	bl	8003bc0 <_close>
 8012f04:	1c43      	adds	r3, r0, #1
 8012f06:	d102      	bne.n	8012f0e <_close_r+0x1a>
 8012f08:	6823      	ldr	r3, [r4, #0]
 8012f0a:	b103      	cbz	r3, 8012f0e <_close_r+0x1a>
 8012f0c:	602b      	str	r3, [r5, #0]
 8012f0e:	bd38      	pop	{r3, r4, r5, pc}
 8012f10:	20017d20 	.word	0x20017d20

08012f14 <_fstat_r>:
 8012f14:	b538      	push	{r3, r4, r5, lr}
 8012f16:	4c07      	ldr	r4, [pc, #28]	; (8012f34 <_fstat_r+0x20>)
 8012f18:	2300      	movs	r3, #0
 8012f1a:	4605      	mov	r5, r0
 8012f1c:	4608      	mov	r0, r1
 8012f1e:	4611      	mov	r1, r2
 8012f20:	6023      	str	r3, [r4, #0]
 8012f22:	f7f0 fe59 	bl	8003bd8 <_fstat>
 8012f26:	1c43      	adds	r3, r0, #1
 8012f28:	d102      	bne.n	8012f30 <_fstat_r+0x1c>
 8012f2a:	6823      	ldr	r3, [r4, #0]
 8012f2c:	b103      	cbz	r3, 8012f30 <_fstat_r+0x1c>
 8012f2e:	602b      	str	r3, [r5, #0]
 8012f30:	bd38      	pop	{r3, r4, r5, pc}
 8012f32:	bf00      	nop
 8012f34:	20017d20 	.word	0x20017d20

08012f38 <_isatty_r>:
 8012f38:	b538      	push	{r3, r4, r5, lr}
 8012f3a:	4c06      	ldr	r4, [pc, #24]	; (8012f54 <_isatty_r+0x1c>)
 8012f3c:	2300      	movs	r3, #0
 8012f3e:	4605      	mov	r5, r0
 8012f40:	4608      	mov	r0, r1
 8012f42:	6023      	str	r3, [r4, #0]
 8012f44:	f7f0 fe58 	bl	8003bf8 <_isatty>
 8012f48:	1c43      	adds	r3, r0, #1
 8012f4a:	d102      	bne.n	8012f52 <_isatty_r+0x1a>
 8012f4c:	6823      	ldr	r3, [r4, #0]
 8012f4e:	b103      	cbz	r3, 8012f52 <_isatty_r+0x1a>
 8012f50:	602b      	str	r3, [r5, #0]
 8012f52:	bd38      	pop	{r3, r4, r5, pc}
 8012f54:	20017d20 	.word	0x20017d20

08012f58 <_lseek_r>:
 8012f58:	b538      	push	{r3, r4, r5, lr}
 8012f5a:	4c07      	ldr	r4, [pc, #28]	; (8012f78 <_lseek_r+0x20>)
 8012f5c:	4605      	mov	r5, r0
 8012f5e:	4608      	mov	r0, r1
 8012f60:	4611      	mov	r1, r2
 8012f62:	2200      	movs	r2, #0
 8012f64:	6022      	str	r2, [r4, #0]
 8012f66:	461a      	mov	r2, r3
 8012f68:	f7f0 fe51 	bl	8003c0e <_lseek>
 8012f6c:	1c43      	adds	r3, r0, #1
 8012f6e:	d102      	bne.n	8012f76 <_lseek_r+0x1e>
 8012f70:	6823      	ldr	r3, [r4, #0]
 8012f72:	b103      	cbz	r3, 8012f76 <_lseek_r+0x1e>
 8012f74:	602b      	str	r3, [r5, #0]
 8012f76:	bd38      	pop	{r3, r4, r5, pc}
 8012f78:	20017d20 	.word	0x20017d20

08012f7c <memmove>:
 8012f7c:	4288      	cmp	r0, r1
 8012f7e:	b510      	push	{r4, lr}
 8012f80:	eb01 0302 	add.w	r3, r1, r2
 8012f84:	d807      	bhi.n	8012f96 <memmove+0x1a>
 8012f86:	1e42      	subs	r2, r0, #1
 8012f88:	4299      	cmp	r1, r3
 8012f8a:	d00a      	beq.n	8012fa2 <memmove+0x26>
 8012f8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012f90:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012f94:	e7f8      	b.n	8012f88 <memmove+0xc>
 8012f96:	4283      	cmp	r3, r0
 8012f98:	d9f5      	bls.n	8012f86 <memmove+0xa>
 8012f9a:	1881      	adds	r1, r0, r2
 8012f9c:	1ad2      	subs	r2, r2, r3
 8012f9e:	42d3      	cmn	r3, r2
 8012fa0:	d100      	bne.n	8012fa4 <memmove+0x28>
 8012fa2:	bd10      	pop	{r4, pc}
 8012fa4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012fa8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8012fac:	e7f7      	b.n	8012f9e <memmove+0x22>

08012fae <__malloc_lock>:
 8012fae:	4770      	bx	lr

08012fb0 <__malloc_unlock>:
 8012fb0:	4770      	bx	lr

08012fb2 <_realloc_r>:
 8012fb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fb4:	4607      	mov	r7, r0
 8012fb6:	4614      	mov	r4, r2
 8012fb8:	460e      	mov	r6, r1
 8012fba:	b921      	cbnz	r1, 8012fc6 <_realloc_r+0x14>
 8012fbc:	4611      	mov	r1, r2
 8012fbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012fc2:	f7ff bc33 	b.w	801282c <_malloc_r>
 8012fc6:	b922      	cbnz	r2, 8012fd2 <_realloc_r+0x20>
 8012fc8:	f7ff fbe2 	bl	8012790 <_free_r>
 8012fcc:	4625      	mov	r5, r4
 8012fce:	4628      	mov	r0, r5
 8012fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fd2:	f000 f827 	bl	8013024 <_malloc_usable_size_r>
 8012fd6:	42a0      	cmp	r0, r4
 8012fd8:	d20f      	bcs.n	8012ffa <_realloc_r+0x48>
 8012fda:	4621      	mov	r1, r4
 8012fdc:	4638      	mov	r0, r7
 8012fde:	f7ff fc25 	bl	801282c <_malloc_r>
 8012fe2:	4605      	mov	r5, r0
 8012fe4:	2800      	cmp	r0, #0
 8012fe6:	d0f2      	beq.n	8012fce <_realloc_r+0x1c>
 8012fe8:	4631      	mov	r1, r6
 8012fea:	4622      	mov	r2, r4
 8012fec:	f7fd fad0 	bl	8010590 <memcpy>
 8012ff0:	4631      	mov	r1, r6
 8012ff2:	4638      	mov	r0, r7
 8012ff4:	f7ff fbcc 	bl	8012790 <_free_r>
 8012ff8:	e7e9      	b.n	8012fce <_realloc_r+0x1c>
 8012ffa:	4635      	mov	r5, r6
 8012ffc:	e7e7      	b.n	8012fce <_realloc_r+0x1c>
	...

08013000 <_read_r>:
 8013000:	b538      	push	{r3, r4, r5, lr}
 8013002:	4c07      	ldr	r4, [pc, #28]	; (8013020 <_read_r+0x20>)
 8013004:	4605      	mov	r5, r0
 8013006:	4608      	mov	r0, r1
 8013008:	4611      	mov	r1, r2
 801300a:	2200      	movs	r2, #0
 801300c:	6022      	str	r2, [r4, #0]
 801300e:	461a      	mov	r2, r3
 8013010:	f7f0 fd9d 	bl	8003b4e <_read>
 8013014:	1c43      	adds	r3, r0, #1
 8013016:	d102      	bne.n	801301e <_read_r+0x1e>
 8013018:	6823      	ldr	r3, [r4, #0]
 801301a:	b103      	cbz	r3, 801301e <_read_r+0x1e>
 801301c:	602b      	str	r3, [r5, #0]
 801301e:	bd38      	pop	{r3, r4, r5, pc}
 8013020:	20017d20 	.word	0x20017d20

08013024 <_malloc_usable_size_r>:
 8013024:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013028:	1f18      	subs	r0, r3, #4
 801302a:	2b00      	cmp	r3, #0
 801302c:	bfbc      	itt	lt
 801302e:	580b      	ldrlt	r3, [r1, r0]
 8013030:	18c0      	addlt	r0, r0, r3
 8013032:	4770      	bx	lr

08013034 <pow>:
 8013034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013038:	ed2d 8b04 	vpush	{d8-d9}
 801303c:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8013310 <pow+0x2dc>
 8013040:	b08d      	sub	sp, #52	; 0x34
 8013042:	ec57 6b10 	vmov	r6, r7, d0
 8013046:	ec55 4b11 	vmov	r4, r5, d1
 801304a:	f000 fb71 	bl	8013730 <__ieee754_pow>
 801304e:	f999 3000 	ldrsb.w	r3, [r9]
 8013052:	9300      	str	r3, [sp, #0]
 8013054:	3301      	adds	r3, #1
 8013056:	eeb0 8a40 	vmov.f32	s16, s0
 801305a:	eef0 8a60 	vmov.f32	s17, s1
 801305e:	46c8      	mov	r8, r9
 8013060:	d05f      	beq.n	8013122 <pow+0xee>
 8013062:	4622      	mov	r2, r4
 8013064:	462b      	mov	r3, r5
 8013066:	4620      	mov	r0, r4
 8013068:	4629      	mov	r1, r5
 801306a:	f7ed fd5f 	bl	8000b2c <__aeabi_dcmpun>
 801306e:	4683      	mov	fp, r0
 8013070:	2800      	cmp	r0, #0
 8013072:	d156      	bne.n	8013122 <pow+0xee>
 8013074:	4632      	mov	r2, r6
 8013076:	463b      	mov	r3, r7
 8013078:	4630      	mov	r0, r6
 801307a:	4639      	mov	r1, r7
 801307c:	f7ed fd56 	bl	8000b2c <__aeabi_dcmpun>
 8013080:	9001      	str	r0, [sp, #4]
 8013082:	b1e8      	cbz	r0, 80130c0 <pow+0x8c>
 8013084:	2200      	movs	r2, #0
 8013086:	2300      	movs	r3, #0
 8013088:	4620      	mov	r0, r4
 801308a:	4629      	mov	r1, r5
 801308c:	f7ed fd1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8013090:	2800      	cmp	r0, #0
 8013092:	d046      	beq.n	8013122 <pow+0xee>
 8013094:	2301      	movs	r3, #1
 8013096:	9302      	str	r3, [sp, #8]
 8013098:	4b96      	ldr	r3, [pc, #600]	; (80132f4 <pow+0x2c0>)
 801309a:	9303      	str	r3, [sp, #12]
 801309c:	4b96      	ldr	r3, [pc, #600]	; (80132f8 <pow+0x2c4>)
 801309e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80130a2:	2200      	movs	r2, #0
 80130a4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80130a8:	9b00      	ldr	r3, [sp, #0]
 80130aa:	2b02      	cmp	r3, #2
 80130ac:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80130b0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80130b4:	d033      	beq.n	801311e <pow+0xea>
 80130b6:	a802      	add	r0, sp, #8
 80130b8:	f001 fbcc 	bl	8014854 <matherr>
 80130bc:	bb48      	cbnz	r0, 8013112 <pow+0xde>
 80130be:	e05d      	b.n	801317c <pow+0x148>
 80130c0:	f04f 0a00 	mov.w	sl, #0
 80130c4:	f04f 0b00 	mov.w	fp, #0
 80130c8:	4652      	mov	r2, sl
 80130ca:	465b      	mov	r3, fp
 80130cc:	4630      	mov	r0, r6
 80130ce:	4639      	mov	r1, r7
 80130d0:	f7ed fcfa 	bl	8000ac8 <__aeabi_dcmpeq>
 80130d4:	ec4b ab19 	vmov	d9, sl, fp
 80130d8:	2800      	cmp	r0, #0
 80130da:	d054      	beq.n	8013186 <pow+0x152>
 80130dc:	4652      	mov	r2, sl
 80130de:	465b      	mov	r3, fp
 80130e0:	4620      	mov	r0, r4
 80130e2:	4629      	mov	r1, r5
 80130e4:	f7ed fcf0 	bl	8000ac8 <__aeabi_dcmpeq>
 80130e8:	4680      	mov	r8, r0
 80130ea:	b318      	cbz	r0, 8013134 <pow+0x100>
 80130ec:	2301      	movs	r3, #1
 80130ee:	9302      	str	r3, [sp, #8]
 80130f0:	4b80      	ldr	r3, [pc, #512]	; (80132f4 <pow+0x2c0>)
 80130f2:	9303      	str	r3, [sp, #12]
 80130f4:	9b01      	ldr	r3, [sp, #4]
 80130f6:	930a      	str	r3, [sp, #40]	; 0x28
 80130f8:	9b00      	ldr	r3, [sp, #0]
 80130fa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80130fe:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013102:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8013106:	2b00      	cmp	r3, #0
 8013108:	d0d5      	beq.n	80130b6 <pow+0x82>
 801310a:	4b7b      	ldr	r3, [pc, #492]	; (80132f8 <pow+0x2c4>)
 801310c:	2200      	movs	r2, #0
 801310e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013112:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013114:	b11b      	cbz	r3, 801311e <pow+0xea>
 8013116:	f7fd fa11 	bl	801053c <__errno>
 801311a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801311c:	6003      	str	r3, [r0, #0]
 801311e:	ed9d 8b08 	vldr	d8, [sp, #32]
 8013122:	eeb0 0a48 	vmov.f32	s0, s16
 8013126:	eef0 0a68 	vmov.f32	s1, s17
 801312a:	b00d      	add	sp, #52	; 0x34
 801312c:	ecbd 8b04 	vpop	{d8-d9}
 8013130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013134:	ec45 4b10 	vmov	d0, r4, r5
 8013138:	f001 fb84 	bl	8014844 <finite>
 801313c:	2800      	cmp	r0, #0
 801313e:	d0f0      	beq.n	8013122 <pow+0xee>
 8013140:	4652      	mov	r2, sl
 8013142:	465b      	mov	r3, fp
 8013144:	4620      	mov	r0, r4
 8013146:	4629      	mov	r1, r5
 8013148:	f7ed fcc8 	bl	8000adc <__aeabi_dcmplt>
 801314c:	2800      	cmp	r0, #0
 801314e:	d0e8      	beq.n	8013122 <pow+0xee>
 8013150:	2301      	movs	r3, #1
 8013152:	9302      	str	r3, [sp, #8]
 8013154:	4b67      	ldr	r3, [pc, #412]	; (80132f4 <pow+0x2c0>)
 8013156:	9303      	str	r3, [sp, #12]
 8013158:	f999 3000 	ldrsb.w	r3, [r9]
 801315c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8013160:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013164:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013168:	b913      	cbnz	r3, 8013170 <pow+0x13c>
 801316a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801316e:	e7a2      	b.n	80130b6 <pow+0x82>
 8013170:	4962      	ldr	r1, [pc, #392]	; (80132fc <pow+0x2c8>)
 8013172:	2000      	movs	r0, #0
 8013174:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013178:	2b02      	cmp	r3, #2
 801317a:	d19c      	bne.n	80130b6 <pow+0x82>
 801317c:	f7fd f9de 	bl	801053c <__errno>
 8013180:	2321      	movs	r3, #33	; 0x21
 8013182:	6003      	str	r3, [r0, #0]
 8013184:	e7c5      	b.n	8013112 <pow+0xde>
 8013186:	eeb0 0a48 	vmov.f32	s0, s16
 801318a:	eef0 0a68 	vmov.f32	s1, s17
 801318e:	f001 fb59 	bl	8014844 <finite>
 8013192:	9000      	str	r0, [sp, #0]
 8013194:	2800      	cmp	r0, #0
 8013196:	f040 8081 	bne.w	801329c <pow+0x268>
 801319a:	ec47 6b10 	vmov	d0, r6, r7
 801319e:	f001 fb51 	bl	8014844 <finite>
 80131a2:	2800      	cmp	r0, #0
 80131a4:	d07a      	beq.n	801329c <pow+0x268>
 80131a6:	ec45 4b10 	vmov	d0, r4, r5
 80131aa:	f001 fb4b 	bl	8014844 <finite>
 80131ae:	2800      	cmp	r0, #0
 80131b0:	d074      	beq.n	801329c <pow+0x268>
 80131b2:	ec53 2b18 	vmov	r2, r3, d8
 80131b6:	ee18 0a10 	vmov	r0, s16
 80131ba:	4619      	mov	r1, r3
 80131bc:	f7ed fcb6 	bl	8000b2c <__aeabi_dcmpun>
 80131c0:	f999 9000 	ldrsb.w	r9, [r9]
 80131c4:	4b4b      	ldr	r3, [pc, #300]	; (80132f4 <pow+0x2c0>)
 80131c6:	b1b0      	cbz	r0, 80131f6 <pow+0x1c2>
 80131c8:	2201      	movs	r2, #1
 80131ca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80131ce:	9b00      	ldr	r3, [sp, #0]
 80131d0:	930a      	str	r3, [sp, #40]	; 0x28
 80131d2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80131d6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80131da:	f1b9 0f00 	cmp.w	r9, #0
 80131de:	d0c4      	beq.n	801316a <pow+0x136>
 80131e0:	4652      	mov	r2, sl
 80131e2:	465b      	mov	r3, fp
 80131e4:	4650      	mov	r0, sl
 80131e6:	4659      	mov	r1, fp
 80131e8:	f7ed fb30 	bl	800084c <__aeabi_ddiv>
 80131ec:	f1b9 0f02 	cmp.w	r9, #2
 80131f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80131f4:	e7c1      	b.n	801317a <pow+0x146>
 80131f6:	2203      	movs	r2, #3
 80131f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80131fc:	900a      	str	r0, [sp, #40]	; 0x28
 80131fe:	4629      	mov	r1, r5
 8013200:	4620      	mov	r0, r4
 8013202:	2200      	movs	r2, #0
 8013204:	4b3e      	ldr	r3, [pc, #248]	; (8013300 <pow+0x2cc>)
 8013206:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801320a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801320e:	f7ed f9f3 	bl	80005f8 <__aeabi_dmul>
 8013212:	4604      	mov	r4, r0
 8013214:	460d      	mov	r5, r1
 8013216:	f1b9 0f00 	cmp.w	r9, #0
 801321a:	d124      	bne.n	8013266 <pow+0x232>
 801321c:	4b39      	ldr	r3, [pc, #228]	; (8013304 <pow+0x2d0>)
 801321e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8013222:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013226:	4630      	mov	r0, r6
 8013228:	4652      	mov	r2, sl
 801322a:	465b      	mov	r3, fp
 801322c:	4639      	mov	r1, r7
 801322e:	f7ed fc55 	bl	8000adc <__aeabi_dcmplt>
 8013232:	2800      	cmp	r0, #0
 8013234:	d056      	beq.n	80132e4 <pow+0x2b0>
 8013236:	ec45 4b10 	vmov	d0, r4, r5
 801323a:	f001 fb15 	bl	8014868 <rint>
 801323e:	4622      	mov	r2, r4
 8013240:	462b      	mov	r3, r5
 8013242:	ec51 0b10 	vmov	r0, r1, d0
 8013246:	f7ed fc3f 	bl	8000ac8 <__aeabi_dcmpeq>
 801324a:	b920      	cbnz	r0, 8013256 <pow+0x222>
 801324c:	4b2e      	ldr	r3, [pc, #184]	; (8013308 <pow+0x2d4>)
 801324e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8013252:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013256:	f998 3000 	ldrsb.w	r3, [r8]
 801325a:	2b02      	cmp	r3, #2
 801325c:	d142      	bne.n	80132e4 <pow+0x2b0>
 801325e:	f7fd f96d 	bl	801053c <__errno>
 8013262:	2322      	movs	r3, #34	; 0x22
 8013264:	e78d      	b.n	8013182 <pow+0x14e>
 8013266:	4b29      	ldr	r3, [pc, #164]	; (801330c <pow+0x2d8>)
 8013268:	2200      	movs	r2, #0
 801326a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801326e:	4630      	mov	r0, r6
 8013270:	4652      	mov	r2, sl
 8013272:	465b      	mov	r3, fp
 8013274:	4639      	mov	r1, r7
 8013276:	f7ed fc31 	bl	8000adc <__aeabi_dcmplt>
 801327a:	2800      	cmp	r0, #0
 801327c:	d0eb      	beq.n	8013256 <pow+0x222>
 801327e:	ec45 4b10 	vmov	d0, r4, r5
 8013282:	f001 faf1 	bl	8014868 <rint>
 8013286:	4622      	mov	r2, r4
 8013288:	462b      	mov	r3, r5
 801328a:	ec51 0b10 	vmov	r0, r1, d0
 801328e:	f7ed fc1b 	bl	8000ac8 <__aeabi_dcmpeq>
 8013292:	2800      	cmp	r0, #0
 8013294:	d1df      	bne.n	8013256 <pow+0x222>
 8013296:	2200      	movs	r2, #0
 8013298:	4b18      	ldr	r3, [pc, #96]	; (80132fc <pow+0x2c8>)
 801329a:	e7da      	b.n	8013252 <pow+0x21e>
 801329c:	2200      	movs	r2, #0
 801329e:	2300      	movs	r3, #0
 80132a0:	ec51 0b18 	vmov	r0, r1, d8
 80132a4:	f7ed fc10 	bl	8000ac8 <__aeabi_dcmpeq>
 80132a8:	2800      	cmp	r0, #0
 80132aa:	f43f af3a 	beq.w	8013122 <pow+0xee>
 80132ae:	ec47 6b10 	vmov	d0, r6, r7
 80132b2:	f001 fac7 	bl	8014844 <finite>
 80132b6:	2800      	cmp	r0, #0
 80132b8:	f43f af33 	beq.w	8013122 <pow+0xee>
 80132bc:	ec45 4b10 	vmov	d0, r4, r5
 80132c0:	f001 fac0 	bl	8014844 <finite>
 80132c4:	2800      	cmp	r0, #0
 80132c6:	f43f af2c 	beq.w	8013122 <pow+0xee>
 80132ca:	2304      	movs	r3, #4
 80132cc:	9302      	str	r3, [sp, #8]
 80132ce:	4b09      	ldr	r3, [pc, #36]	; (80132f4 <pow+0x2c0>)
 80132d0:	9303      	str	r3, [sp, #12]
 80132d2:	2300      	movs	r3, #0
 80132d4:	930a      	str	r3, [sp, #40]	; 0x28
 80132d6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80132da:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80132de:	ed8d 9b08 	vstr	d9, [sp, #32]
 80132e2:	e7b8      	b.n	8013256 <pow+0x222>
 80132e4:	a802      	add	r0, sp, #8
 80132e6:	f001 fab5 	bl	8014854 <matherr>
 80132ea:	2800      	cmp	r0, #0
 80132ec:	f47f af11 	bne.w	8013112 <pow+0xde>
 80132f0:	e7b5      	b.n	801325e <pow+0x22a>
 80132f2:	bf00      	nop
 80132f4:	08015456 	.word	0x08015456
 80132f8:	3ff00000 	.word	0x3ff00000
 80132fc:	fff00000 	.word	0xfff00000
 8013300:	3fe00000 	.word	0x3fe00000
 8013304:	47efffff 	.word	0x47efffff
 8013308:	c7efffff 	.word	0xc7efffff
 801330c:	7ff00000 	.word	0x7ff00000
 8013310:	20000338 	.word	0x20000338

08013314 <sqrt>:
 8013314:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013318:	ed2d 8b02 	vpush	{d8}
 801331c:	b08b      	sub	sp, #44	; 0x2c
 801331e:	ec55 4b10 	vmov	r4, r5, d0
 8013322:	f000 ff13 	bl	801414c <__ieee754_sqrt>
 8013326:	4b26      	ldr	r3, [pc, #152]	; (80133c0 <sqrt+0xac>)
 8013328:	eeb0 8a40 	vmov.f32	s16, s0
 801332c:	eef0 8a60 	vmov.f32	s17, s1
 8013330:	f993 6000 	ldrsb.w	r6, [r3]
 8013334:	1c73      	adds	r3, r6, #1
 8013336:	d02a      	beq.n	801338e <sqrt+0x7a>
 8013338:	4622      	mov	r2, r4
 801333a:	462b      	mov	r3, r5
 801333c:	4620      	mov	r0, r4
 801333e:	4629      	mov	r1, r5
 8013340:	f7ed fbf4 	bl	8000b2c <__aeabi_dcmpun>
 8013344:	4607      	mov	r7, r0
 8013346:	bb10      	cbnz	r0, 801338e <sqrt+0x7a>
 8013348:	f04f 0800 	mov.w	r8, #0
 801334c:	f04f 0900 	mov.w	r9, #0
 8013350:	4642      	mov	r2, r8
 8013352:	464b      	mov	r3, r9
 8013354:	4620      	mov	r0, r4
 8013356:	4629      	mov	r1, r5
 8013358:	f7ed fbc0 	bl	8000adc <__aeabi_dcmplt>
 801335c:	b1b8      	cbz	r0, 801338e <sqrt+0x7a>
 801335e:	2301      	movs	r3, #1
 8013360:	9300      	str	r3, [sp, #0]
 8013362:	4b18      	ldr	r3, [pc, #96]	; (80133c4 <sqrt+0xb0>)
 8013364:	9301      	str	r3, [sp, #4]
 8013366:	9708      	str	r7, [sp, #32]
 8013368:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801336c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8013370:	b9b6      	cbnz	r6, 80133a0 <sqrt+0x8c>
 8013372:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8013376:	4668      	mov	r0, sp
 8013378:	f001 fa6c 	bl	8014854 <matherr>
 801337c:	b1d0      	cbz	r0, 80133b4 <sqrt+0xa0>
 801337e:	9b08      	ldr	r3, [sp, #32]
 8013380:	b11b      	cbz	r3, 801338a <sqrt+0x76>
 8013382:	f7fd f8db 	bl	801053c <__errno>
 8013386:	9b08      	ldr	r3, [sp, #32]
 8013388:	6003      	str	r3, [r0, #0]
 801338a:	ed9d 8b06 	vldr	d8, [sp, #24]
 801338e:	eeb0 0a48 	vmov.f32	s0, s16
 8013392:	eef0 0a68 	vmov.f32	s1, s17
 8013396:	b00b      	add	sp, #44	; 0x2c
 8013398:	ecbd 8b02 	vpop	{d8}
 801339c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80133a0:	4642      	mov	r2, r8
 80133a2:	464b      	mov	r3, r9
 80133a4:	4640      	mov	r0, r8
 80133a6:	4649      	mov	r1, r9
 80133a8:	f7ed fa50 	bl	800084c <__aeabi_ddiv>
 80133ac:	2e02      	cmp	r6, #2
 80133ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80133b2:	d1e0      	bne.n	8013376 <sqrt+0x62>
 80133b4:	f7fd f8c2 	bl	801053c <__errno>
 80133b8:	2321      	movs	r3, #33	; 0x21
 80133ba:	6003      	str	r3, [r0, #0]
 80133bc:	e7df      	b.n	801337e <sqrt+0x6a>
 80133be:	bf00      	nop
 80133c0:	20000338 	.word	0x20000338
 80133c4:	0801545a 	.word	0x0801545a

080133c8 <powf>:
 80133c8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80133cc:	ed2d 8b04 	vpush	{d8-d9}
 80133d0:	4ca7      	ldr	r4, [pc, #668]	; (8013670 <powf+0x2a8>)
 80133d2:	b08a      	sub	sp, #40	; 0x28
 80133d4:	eef0 8a40 	vmov.f32	s17, s0
 80133d8:	eeb0 8a60 	vmov.f32	s16, s1
 80133dc:	f000 ff66 	bl	80142ac <__ieee754_powf>
 80133e0:	f994 5000 	ldrsb.w	r5, [r4]
 80133e4:	1c6b      	adds	r3, r5, #1
 80133e6:	eeb0 9a40 	vmov.f32	s18, s0
 80133ea:	4626      	mov	r6, r4
 80133ec:	d05f      	beq.n	80134ae <powf+0xe6>
 80133ee:	eeb4 8a48 	vcmp.f32	s16, s16
 80133f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133f6:	d65a      	bvs.n	80134ae <powf+0xe6>
 80133f8:	eef4 8a68 	vcmp.f32	s17, s17
 80133fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013400:	d721      	bvc.n	8013446 <powf+0x7e>
 8013402:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8013406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801340a:	d150      	bne.n	80134ae <powf+0xe6>
 801340c:	2301      	movs	r3, #1
 801340e:	9300      	str	r3, [sp, #0]
 8013410:	4b98      	ldr	r3, [pc, #608]	; (8013674 <powf+0x2ac>)
 8013412:	9301      	str	r3, [sp, #4]
 8013414:	ee18 0a90 	vmov	r0, s17
 8013418:	2300      	movs	r3, #0
 801341a:	9308      	str	r3, [sp, #32]
 801341c:	f7ed f894 	bl	8000548 <__aeabi_f2d>
 8013420:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013424:	ee18 0a10 	vmov	r0, s16
 8013428:	f7ed f88e 	bl	8000548 <__aeabi_f2d>
 801342c:	4b92      	ldr	r3, [pc, #584]	; (8013678 <powf+0x2b0>)
 801342e:	2200      	movs	r2, #0
 8013430:	2d02      	cmp	r5, #2
 8013432:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013436:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801343a:	d032      	beq.n	80134a2 <powf+0xda>
 801343c:	4668      	mov	r0, sp
 801343e:	f001 fa09 	bl	8014854 <matherr>
 8013442:	bb40      	cbnz	r0, 8013496 <powf+0xce>
 8013444:	e065      	b.n	8013512 <powf+0x14a>
 8013446:	eddf 9a8d 	vldr	s19, [pc, #564]	; 801367c <powf+0x2b4>
 801344a:	eef4 8a69 	vcmp.f32	s17, s19
 801344e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013452:	d163      	bne.n	801351c <powf+0x154>
 8013454:	eeb4 8a69 	vcmp.f32	s16, s19
 8013458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801345c:	d12e      	bne.n	80134bc <powf+0xf4>
 801345e:	2301      	movs	r3, #1
 8013460:	9300      	str	r3, [sp, #0]
 8013462:	4b84      	ldr	r3, [pc, #528]	; (8013674 <powf+0x2ac>)
 8013464:	9301      	str	r3, [sp, #4]
 8013466:	ee18 0a90 	vmov	r0, s17
 801346a:	2300      	movs	r3, #0
 801346c:	9308      	str	r3, [sp, #32]
 801346e:	f7ed f86b 	bl	8000548 <__aeabi_f2d>
 8013472:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013476:	ee18 0a10 	vmov	r0, s16
 801347a:	f7ed f865 	bl	8000548 <__aeabi_f2d>
 801347e:	2200      	movs	r2, #0
 8013480:	2300      	movs	r3, #0
 8013482:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013486:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801348a:	2d00      	cmp	r5, #0
 801348c:	d0d6      	beq.n	801343c <powf+0x74>
 801348e:	4b7a      	ldr	r3, [pc, #488]	; (8013678 <powf+0x2b0>)
 8013490:	2200      	movs	r2, #0
 8013492:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013496:	9b08      	ldr	r3, [sp, #32]
 8013498:	b11b      	cbz	r3, 80134a2 <powf+0xda>
 801349a:	f7fd f84f 	bl	801053c <__errno>
 801349e:	9b08      	ldr	r3, [sp, #32]
 80134a0:	6003      	str	r3, [r0, #0]
 80134a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80134a6:	f7ed fb9f 	bl	8000be8 <__aeabi_d2f>
 80134aa:	ee09 0a10 	vmov	s18, r0
 80134ae:	eeb0 0a49 	vmov.f32	s0, s18
 80134b2:	b00a      	add	sp, #40	; 0x28
 80134b4:	ecbd 8b04 	vpop	{d8-d9}
 80134b8:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80134bc:	eeb0 0a48 	vmov.f32	s0, s16
 80134c0:	f001 fad3 	bl	8014a6a <finitef>
 80134c4:	2800      	cmp	r0, #0
 80134c6:	d0f2      	beq.n	80134ae <powf+0xe6>
 80134c8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80134cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134d0:	d5ed      	bpl.n	80134ae <powf+0xe6>
 80134d2:	2301      	movs	r3, #1
 80134d4:	9300      	str	r3, [sp, #0]
 80134d6:	4b67      	ldr	r3, [pc, #412]	; (8013674 <powf+0x2ac>)
 80134d8:	9301      	str	r3, [sp, #4]
 80134da:	ee18 0a90 	vmov	r0, s17
 80134de:	2300      	movs	r3, #0
 80134e0:	9308      	str	r3, [sp, #32]
 80134e2:	f7ed f831 	bl	8000548 <__aeabi_f2d>
 80134e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80134ea:	ee18 0a10 	vmov	r0, s16
 80134ee:	f7ed f82b 	bl	8000548 <__aeabi_f2d>
 80134f2:	f994 3000 	ldrsb.w	r3, [r4]
 80134f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80134fa:	b923      	cbnz	r3, 8013506 <powf+0x13e>
 80134fc:	2200      	movs	r2, #0
 80134fe:	2300      	movs	r3, #0
 8013500:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8013504:	e79a      	b.n	801343c <powf+0x74>
 8013506:	495e      	ldr	r1, [pc, #376]	; (8013680 <powf+0x2b8>)
 8013508:	2000      	movs	r0, #0
 801350a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801350e:	2b02      	cmp	r3, #2
 8013510:	d194      	bne.n	801343c <powf+0x74>
 8013512:	f7fd f813 	bl	801053c <__errno>
 8013516:	2321      	movs	r3, #33	; 0x21
 8013518:	6003      	str	r3, [r0, #0]
 801351a:	e7bc      	b.n	8013496 <powf+0xce>
 801351c:	f001 faa5 	bl	8014a6a <finitef>
 8013520:	4605      	mov	r5, r0
 8013522:	2800      	cmp	r0, #0
 8013524:	d173      	bne.n	801360e <powf+0x246>
 8013526:	eeb0 0a68 	vmov.f32	s0, s17
 801352a:	f001 fa9e 	bl	8014a6a <finitef>
 801352e:	2800      	cmp	r0, #0
 8013530:	d06d      	beq.n	801360e <powf+0x246>
 8013532:	eeb0 0a48 	vmov.f32	s0, s16
 8013536:	f001 fa98 	bl	8014a6a <finitef>
 801353a:	2800      	cmp	r0, #0
 801353c:	d067      	beq.n	801360e <powf+0x246>
 801353e:	ee18 0a90 	vmov	r0, s17
 8013542:	f7ed f801 	bl	8000548 <__aeabi_f2d>
 8013546:	4680      	mov	r8, r0
 8013548:	ee18 0a10 	vmov	r0, s16
 801354c:	4689      	mov	r9, r1
 801354e:	f7ec fffb 	bl	8000548 <__aeabi_f2d>
 8013552:	eeb4 9a49 	vcmp.f32	s18, s18
 8013556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801355a:	f994 4000 	ldrsb.w	r4, [r4]
 801355e:	4b45      	ldr	r3, [pc, #276]	; (8013674 <powf+0x2ac>)
 8013560:	d713      	bvc.n	801358a <powf+0x1c2>
 8013562:	2201      	movs	r2, #1
 8013564:	e9cd 2300 	strd	r2, r3, [sp]
 8013568:	9508      	str	r5, [sp, #32]
 801356a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801356e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013572:	2c00      	cmp	r4, #0
 8013574:	d0c2      	beq.n	80134fc <powf+0x134>
 8013576:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 801357a:	ee17 0a90 	vmov	r0, s15
 801357e:	f7ec ffe3 	bl	8000548 <__aeabi_f2d>
 8013582:	2c02      	cmp	r4, #2
 8013584:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013588:	e7c2      	b.n	8013510 <powf+0x148>
 801358a:	2203      	movs	r2, #3
 801358c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013590:	e9cd 2300 	strd	r2, r3, [sp]
 8013594:	9508      	str	r5, [sp, #32]
 8013596:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801359a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801359e:	ee28 8a27 	vmul.f32	s16, s16, s15
 80135a2:	b9fc      	cbnz	r4, 80135e4 <powf+0x21c>
 80135a4:	4b37      	ldr	r3, [pc, #220]	; (8013684 <powf+0x2bc>)
 80135a6:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80135aa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80135ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80135b6:	d553      	bpl.n	8013660 <powf+0x298>
 80135b8:	eeb0 0a48 	vmov.f32	s0, s16
 80135bc:	f001 fa60 	bl	8014a80 <rintf>
 80135c0:	eeb4 0a48 	vcmp.f32	s0, s16
 80135c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135c8:	d004      	beq.n	80135d4 <powf+0x20c>
 80135ca:	4b2f      	ldr	r3, [pc, #188]	; (8013688 <powf+0x2c0>)
 80135cc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80135d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80135d4:	f996 3000 	ldrsb.w	r3, [r6]
 80135d8:	2b02      	cmp	r3, #2
 80135da:	d141      	bne.n	8013660 <powf+0x298>
 80135dc:	f7fc ffae 	bl	801053c <__errno>
 80135e0:	2322      	movs	r3, #34	; 0x22
 80135e2:	e799      	b.n	8013518 <powf+0x150>
 80135e4:	4b29      	ldr	r3, [pc, #164]	; (801368c <powf+0x2c4>)
 80135e6:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80135ea:	2200      	movs	r2, #0
 80135ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80135f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80135f4:	d5ee      	bpl.n	80135d4 <powf+0x20c>
 80135f6:	eeb0 0a48 	vmov.f32	s0, s16
 80135fa:	f001 fa41 	bl	8014a80 <rintf>
 80135fe:	eeb4 0a48 	vcmp.f32	s0, s16
 8013602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013606:	d0e5      	beq.n	80135d4 <powf+0x20c>
 8013608:	2200      	movs	r2, #0
 801360a:	4b1d      	ldr	r3, [pc, #116]	; (8013680 <powf+0x2b8>)
 801360c:	e7e0      	b.n	80135d0 <powf+0x208>
 801360e:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8013612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013616:	f47f af4a 	bne.w	80134ae <powf+0xe6>
 801361a:	eeb0 0a68 	vmov.f32	s0, s17
 801361e:	f001 fa24 	bl	8014a6a <finitef>
 8013622:	2800      	cmp	r0, #0
 8013624:	f43f af43 	beq.w	80134ae <powf+0xe6>
 8013628:	eeb0 0a48 	vmov.f32	s0, s16
 801362c:	f001 fa1d 	bl	8014a6a <finitef>
 8013630:	2800      	cmp	r0, #0
 8013632:	f43f af3c 	beq.w	80134ae <powf+0xe6>
 8013636:	2304      	movs	r3, #4
 8013638:	9300      	str	r3, [sp, #0]
 801363a:	4b0e      	ldr	r3, [pc, #56]	; (8013674 <powf+0x2ac>)
 801363c:	9301      	str	r3, [sp, #4]
 801363e:	ee18 0a90 	vmov	r0, s17
 8013642:	2300      	movs	r3, #0
 8013644:	9308      	str	r3, [sp, #32]
 8013646:	f7ec ff7f 	bl	8000548 <__aeabi_f2d>
 801364a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801364e:	ee18 0a10 	vmov	r0, s16
 8013652:	f7ec ff79 	bl	8000548 <__aeabi_f2d>
 8013656:	2200      	movs	r2, #0
 8013658:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801365c:	2300      	movs	r3, #0
 801365e:	e7b7      	b.n	80135d0 <powf+0x208>
 8013660:	4668      	mov	r0, sp
 8013662:	f001 f8f7 	bl	8014854 <matherr>
 8013666:	2800      	cmp	r0, #0
 8013668:	f47f af15 	bne.w	8013496 <powf+0xce>
 801366c:	e7b6      	b.n	80135dc <powf+0x214>
 801366e:	bf00      	nop
 8013670:	20000338 	.word	0x20000338
 8013674:	0801545f 	.word	0x0801545f
 8013678:	3ff00000 	.word	0x3ff00000
 801367c:	00000000 	.word	0x00000000
 8013680:	fff00000 	.word	0xfff00000
 8013684:	47efffff 	.word	0x47efffff
 8013688:	c7efffff 	.word	0xc7efffff
 801368c:	7ff00000 	.word	0x7ff00000

08013690 <sqrtf>:
 8013690:	b510      	push	{r4, lr}
 8013692:	ed2d 8b02 	vpush	{d8}
 8013696:	b08a      	sub	sp, #40	; 0x28
 8013698:	eeb0 8a40 	vmov.f32	s16, s0
 801369c:	f001 f8c6 	bl	801482c <__ieee754_sqrtf>
 80136a0:	4b21      	ldr	r3, [pc, #132]	; (8013728 <sqrtf+0x98>)
 80136a2:	f993 4000 	ldrsb.w	r4, [r3]
 80136a6:	1c63      	adds	r3, r4, #1
 80136a8:	d02c      	beq.n	8013704 <sqrtf+0x74>
 80136aa:	eeb4 8a48 	vcmp.f32	s16, s16
 80136ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136b2:	d627      	bvs.n	8013704 <sqrtf+0x74>
 80136b4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80136b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80136bc:	d522      	bpl.n	8013704 <sqrtf+0x74>
 80136be:	2301      	movs	r3, #1
 80136c0:	9300      	str	r3, [sp, #0]
 80136c2:	4b1a      	ldr	r3, [pc, #104]	; (801372c <sqrtf+0x9c>)
 80136c4:	9301      	str	r3, [sp, #4]
 80136c6:	ee18 0a10 	vmov	r0, s16
 80136ca:	2300      	movs	r3, #0
 80136cc:	9308      	str	r3, [sp, #32]
 80136ce:	f7ec ff3b 	bl	8000548 <__aeabi_f2d>
 80136d2:	2200      	movs	r2, #0
 80136d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80136d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80136dc:	2300      	movs	r3, #0
 80136de:	b9ac      	cbnz	r4, 801370c <sqrtf+0x7c>
 80136e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80136e4:	4668      	mov	r0, sp
 80136e6:	f001 f8b5 	bl	8014854 <matherr>
 80136ea:	b1b8      	cbz	r0, 801371c <sqrtf+0x8c>
 80136ec:	9b08      	ldr	r3, [sp, #32]
 80136ee:	b11b      	cbz	r3, 80136f8 <sqrtf+0x68>
 80136f0:	f7fc ff24 	bl	801053c <__errno>
 80136f4:	9b08      	ldr	r3, [sp, #32]
 80136f6:	6003      	str	r3, [r0, #0]
 80136f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80136fc:	f7ed fa74 	bl	8000be8 <__aeabi_d2f>
 8013700:	ee00 0a10 	vmov	s0, r0
 8013704:	b00a      	add	sp, #40	; 0x28
 8013706:	ecbd 8b02 	vpop	{d8}
 801370a:	bd10      	pop	{r4, pc}
 801370c:	4610      	mov	r0, r2
 801370e:	4619      	mov	r1, r3
 8013710:	f7ed f89c 	bl	800084c <__aeabi_ddiv>
 8013714:	2c02      	cmp	r4, #2
 8013716:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801371a:	d1e3      	bne.n	80136e4 <sqrtf+0x54>
 801371c:	f7fc ff0e 	bl	801053c <__errno>
 8013720:	2321      	movs	r3, #33	; 0x21
 8013722:	6003      	str	r3, [r0, #0]
 8013724:	e7e2      	b.n	80136ec <sqrtf+0x5c>
 8013726:	bf00      	nop
 8013728:	20000338 	.word	0x20000338
 801372c:	08015464 	.word	0x08015464

08013730 <__ieee754_pow>:
 8013730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013734:	b091      	sub	sp, #68	; 0x44
 8013736:	ed8d 1b00 	vstr	d1, [sp]
 801373a:	e9dd 2900 	ldrd	r2, r9, [sp]
 801373e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8013742:	ea58 0302 	orrs.w	r3, r8, r2
 8013746:	ec57 6b10 	vmov	r6, r7, d0
 801374a:	f000 84be 	beq.w	80140ca <__ieee754_pow+0x99a>
 801374e:	4b7a      	ldr	r3, [pc, #488]	; (8013938 <__ieee754_pow+0x208>)
 8013750:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8013754:	429c      	cmp	r4, r3
 8013756:	463d      	mov	r5, r7
 8013758:	ee10 aa10 	vmov	sl, s0
 801375c:	dc09      	bgt.n	8013772 <__ieee754_pow+0x42>
 801375e:	d103      	bne.n	8013768 <__ieee754_pow+0x38>
 8013760:	b93e      	cbnz	r6, 8013772 <__ieee754_pow+0x42>
 8013762:	45a0      	cmp	r8, r4
 8013764:	dc0d      	bgt.n	8013782 <__ieee754_pow+0x52>
 8013766:	e001      	b.n	801376c <__ieee754_pow+0x3c>
 8013768:	4598      	cmp	r8, r3
 801376a:	dc02      	bgt.n	8013772 <__ieee754_pow+0x42>
 801376c:	4598      	cmp	r8, r3
 801376e:	d10e      	bne.n	801378e <__ieee754_pow+0x5e>
 8013770:	b16a      	cbz	r2, 801378e <__ieee754_pow+0x5e>
 8013772:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013776:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801377a:	ea54 030a 	orrs.w	r3, r4, sl
 801377e:	f000 84a4 	beq.w	80140ca <__ieee754_pow+0x99a>
 8013782:	486e      	ldr	r0, [pc, #440]	; (801393c <__ieee754_pow+0x20c>)
 8013784:	b011      	add	sp, #68	; 0x44
 8013786:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801378a:	f001 b865 	b.w	8014858 <nan>
 801378e:	2d00      	cmp	r5, #0
 8013790:	da53      	bge.n	801383a <__ieee754_pow+0x10a>
 8013792:	4b6b      	ldr	r3, [pc, #428]	; (8013940 <__ieee754_pow+0x210>)
 8013794:	4598      	cmp	r8, r3
 8013796:	dc4d      	bgt.n	8013834 <__ieee754_pow+0x104>
 8013798:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801379c:	4598      	cmp	r8, r3
 801379e:	dd4c      	ble.n	801383a <__ieee754_pow+0x10a>
 80137a0:	ea4f 5328 	mov.w	r3, r8, asr #20
 80137a4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80137a8:	2b14      	cmp	r3, #20
 80137aa:	dd26      	ble.n	80137fa <__ieee754_pow+0xca>
 80137ac:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80137b0:	fa22 f103 	lsr.w	r1, r2, r3
 80137b4:	fa01 f303 	lsl.w	r3, r1, r3
 80137b8:	4293      	cmp	r3, r2
 80137ba:	d13e      	bne.n	801383a <__ieee754_pow+0x10a>
 80137bc:	f001 0101 	and.w	r1, r1, #1
 80137c0:	f1c1 0b02 	rsb	fp, r1, #2
 80137c4:	2a00      	cmp	r2, #0
 80137c6:	d15b      	bne.n	8013880 <__ieee754_pow+0x150>
 80137c8:	4b5b      	ldr	r3, [pc, #364]	; (8013938 <__ieee754_pow+0x208>)
 80137ca:	4598      	cmp	r8, r3
 80137cc:	d124      	bne.n	8013818 <__ieee754_pow+0xe8>
 80137ce:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80137d2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80137d6:	ea53 030a 	orrs.w	r3, r3, sl
 80137da:	f000 8476 	beq.w	80140ca <__ieee754_pow+0x99a>
 80137de:	4b59      	ldr	r3, [pc, #356]	; (8013944 <__ieee754_pow+0x214>)
 80137e0:	429c      	cmp	r4, r3
 80137e2:	dd2d      	ble.n	8013840 <__ieee754_pow+0x110>
 80137e4:	f1b9 0f00 	cmp.w	r9, #0
 80137e8:	f280 8473 	bge.w	80140d2 <__ieee754_pow+0x9a2>
 80137ec:	2000      	movs	r0, #0
 80137ee:	2100      	movs	r1, #0
 80137f0:	ec41 0b10 	vmov	d0, r0, r1
 80137f4:	b011      	add	sp, #68	; 0x44
 80137f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137fa:	2a00      	cmp	r2, #0
 80137fc:	d13e      	bne.n	801387c <__ieee754_pow+0x14c>
 80137fe:	f1c3 0314 	rsb	r3, r3, #20
 8013802:	fa48 f103 	asr.w	r1, r8, r3
 8013806:	fa01 f303 	lsl.w	r3, r1, r3
 801380a:	4543      	cmp	r3, r8
 801380c:	f040 8469 	bne.w	80140e2 <__ieee754_pow+0x9b2>
 8013810:	f001 0101 	and.w	r1, r1, #1
 8013814:	f1c1 0b02 	rsb	fp, r1, #2
 8013818:	4b4b      	ldr	r3, [pc, #300]	; (8013948 <__ieee754_pow+0x218>)
 801381a:	4598      	cmp	r8, r3
 801381c:	d118      	bne.n	8013850 <__ieee754_pow+0x120>
 801381e:	f1b9 0f00 	cmp.w	r9, #0
 8013822:	f280 845a 	bge.w	80140da <__ieee754_pow+0x9aa>
 8013826:	4948      	ldr	r1, [pc, #288]	; (8013948 <__ieee754_pow+0x218>)
 8013828:	4632      	mov	r2, r6
 801382a:	463b      	mov	r3, r7
 801382c:	2000      	movs	r0, #0
 801382e:	f7ed f80d 	bl	800084c <__aeabi_ddiv>
 8013832:	e7dd      	b.n	80137f0 <__ieee754_pow+0xc0>
 8013834:	f04f 0b02 	mov.w	fp, #2
 8013838:	e7c4      	b.n	80137c4 <__ieee754_pow+0x94>
 801383a:	f04f 0b00 	mov.w	fp, #0
 801383e:	e7c1      	b.n	80137c4 <__ieee754_pow+0x94>
 8013840:	f1b9 0f00 	cmp.w	r9, #0
 8013844:	dad2      	bge.n	80137ec <__ieee754_pow+0xbc>
 8013846:	e9dd 0300 	ldrd	r0, r3, [sp]
 801384a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801384e:	e7cf      	b.n	80137f0 <__ieee754_pow+0xc0>
 8013850:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8013854:	d106      	bne.n	8013864 <__ieee754_pow+0x134>
 8013856:	4632      	mov	r2, r6
 8013858:	463b      	mov	r3, r7
 801385a:	4610      	mov	r0, r2
 801385c:	4619      	mov	r1, r3
 801385e:	f7ec fecb 	bl	80005f8 <__aeabi_dmul>
 8013862:	e7c5      	b.n	80137f0 <__ieee754_pow+0xc0>
 8013864:	4b39      	ldr	r3, [pc, #228]	; (801394c <__ieee754_pow+0x21c>)
 8013866:	4599      	cmp	r9, r3
 8013868:	d10a      	bne.n	8013880 <__ieee754_pow+0x150>
 801386a:	2d00      	cmp	r5, #0
 801386c:	db08      	blt.n	8013880 <__ieee754_pow+0x150>
 801386e:	ec47 6b10 	vmov	d0, r6, r7
 8013872:	b011      	add	sp, #68	; 0x44
 8013874:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013878:	f000 bc68 	b.w	801414c <__ieee754_sqrt>
 801387c:	f04f 0b00 	mov.w	fp, #0
 8013880:	ec47 6b10 	vmov	d0, r6, r7
 8013884:	f000 ffd5 	bl	8014832 <fabs>
 8013888:	ec51 0b10 	vmov	r0, r1, d0
 801388c:	f1ba 0f00 	cmp.w	sl, #0
 8013890:	d127      	bne.n	80138e2 <__ieee754_pow+0x1b2>
 8013892:	b124      	cbz	r4, 801389e <__ieee754_pow+0x16e>
 8013894:	4b2c      	ldr	r3, [pc, #176]	; (8013948 <__ieee754_pow+0x218>)
 8013896:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801389a:	429a      	cmp	r2, r3
 801389c:	d121      	bne.n	80138e2 <__ieee754_pow+0x1b2>
 801389e:	f1b9 0f00 	cmp.w	r9, #0
 80138a2:	da05      	bge.n	80138b0 <__ieee754_pow+0x180>
 80138a4:	4602      	mov	r2, r0
 80138a6:	460b      	mov	r3, r1
 80138a8:	2000      	movs	r0, #0
 80138aa:	4927      	ldr	r1, [pc, #156]	; (8013948 <__ieee754_pow+0x218>)
 80138ac:	f7ec ffce 	bl	800084c <__aeabi_ddiv>
 80138b0:	2d00      	cmp	r5, #0
 80138b2:	da9d      	bge.n	80137f0 <__ieee754_pow+0xc0>
 80138b4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80138b8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80138bc:	ea54 030b 	orrs.w	r3, r4, fp
 80138c0:	d108      	bne.n	80138d4 <__ieee754_pow+0x1a4>
 80138c2:	4602      	mov	r2, r0
 80138c4:	460b      	mov	r3, r1
 80138c6:	4610      	mov	r0, r2
 80138c8:	4619      	mov	r1, r3
 80138ca:	f7ec fcdd 	bl	8000288 <__aeabi_dsub>
 80138ce:	4602      	mov	r2, r0
 80138d0:	460b      	mov	r3, r1
 80138d2:	e7ac      	b.n	801382e <__ieee754_pow+0xfe>
 80138d4:	f1bb 0f01 	cmp.w	fp, #1
 80138d8:	d18a      	bne.n	80137f0 <__ieee754_pow+0xc0>
 80138da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80138de:	4619      	mov	r1, r3
 80138e0:	e786      	b.n	80137f0 <__ieee754_pow+0xc0>
 80138e2:	0fed      	lsrs	r5, r5, #31
 80138e4:	1e6b      	subs	r3, r5, #1
 80138e6:	930d      	str	r3, [sp, #52]	; 0x34
 80138e8:	ea5b 0303 	orrs.w	r3, fp, r3
 80138ec:	d102      	bne.n	80138f4 <__ieee754_pow+0x1c4>
 80138ee:	4632      	mov	r2, r6
 80138f0:	463b      	mov	r3, r7
 80138f2:	e7e8      	b.n	80138c6 <__ieee754_pow+0x196>
 80138f4:	4b16      	ldr	r3, [pc, #88]	; (8013950 <__ieee754_pow+0x220>)
 80138f6:	4598      	cmp	r8, r3
 80138f8:	f340 80fe 	ble.w	8013af8 <__ieee754_pow+0x3c8>
 80138fc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8013900:	4598      	cmp	r8, r3
 8013902:	dd0a      	ble.n	801391a <__ieee754_pow+0x1ea>
 8013904:	4b0f      	ldr	r3, [pc, #60]	; (8013944 <__ieee754_pow+0x214>)
 8013906:	429c      	cmp	r4, r3
 8013908:	dc0d      	bgt.n	8013926 <__ieee754_pow+0x1f6>
 801390a:	f1b9 0f00 	cmp.w	r9, #0
 801390e:	f6bf af6d 	bge.w	80137ec <__ieee754_pow+0xbc>
 8013912:	a307      	add	r3, pc, #28	; (adr r3, 8013930 <__ieee754_pow+0x200>)
 8013914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013918:	e79f      	b.n	801385a <__ieee754_pow+0x12a>
 801391a:	4b0e      	ldr	r3, [pc, #56]	; (8013954 <__ieee754_pow+0x224>)
 801391c:	429c      	cmp	r4, r3
 801391e:	ddf4      	ble.n	801390a <__ieee754_pow+0x1da>
 8013920:	4b09      	ldr	r3, [pc, #36]	; (8013948 <__ieee754_pow+0x218>)
 8013922:	429c      	cmp	r4, r3
 8013924:	dd18      	ble.n	8013958 <__ieee754_pow+0x228>
 8013926:	f1b9 0f00 	cmp.w	r9, #0
 801392a:	dcf2      	bgt.n	8013912 <__ieee754_pow+0x1e2>
 801392c:	e75e      	b.n	80137ec <__ieee754_pow+0xbc>
 801392e:	bf00      	nop
 8013930:	8800759c 	.word	0x8800759c
 8013934:	7e37e43c 	.word	0x7e37e43c
 8013938:	7ff00000 	.word	0x7ff00000
 801393c:	08015349 	.word	0x08015349
 8013940:	433fffff 	.word	0x433fffff
 8013944:	3fefffff 	.word	0x3fefffff
 8013948:	3ff00000 	.word	0x3ff00000
 801394c:	3fe00000 	.word	0x3fe00000
 8013950:	41e00000 	.word	0x41e00000
 8013954:	3feffffe 	.word	0x3feffffe
 8013958:	2200      	movs	r2, #0
 801395a:	4b63      	ldr	r3, [pc, #396]	; (8013ae8 <__ieee754_pow+0x3b8>)
 801395c:	f7ec fc94 	bl	8000288 <__aeabi_dsub>
 8013960:	a355      	add	r3, pc, #340	; (adr r3, 8013ab8 <__ieee754_pow+0x388>)
 8013962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013966:	4604      	mov	r4, r0
 8013968:	460d      	mov	r5, r1
 801396a:	f7ec fe45 	bl	80005f8 <__aeabi_dmul>
 801396e:	a354      	add	r3, pc, #336	; (adr r3, 8013ac0 <__ieee754_pow+0x390>)
 8013970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013974:	4606      	mov	r6, r0
 8013976:	460f      	mov	r7, r1
 8013978:	4620      	mov	r0, r4
 801397a:	4629      	mov	r1, r5
 801397c:	f7ec fe3c 	bl	80005f8 <__aeabi_dmul>
 8013980:	2200      	movs	r2, #0
 8013982:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013986:	4b59      	ldr	r3, [pc, #356]	; (8013aec <__ieee754_pow+0x3bc>)
 8013988:	4620      	mov	r0, r4
 801398a:	4629      	mov	r1, r5
 801398c:	f7ec fe34 	bl	80005f8 <__aeabi_dmul>
 8013990:	4602      	mov	r2, r0
 8013992:	460b      	mov	r3, r1
 8013994:	a14c      	add	r1, pc, #304	; (adr r1, 8013ac8 <__ieee754_pow+0x398>)
 8013996:	e9d1 0100 	ldrd	r0, r1, [r1]
 801399a:	f7ec fc75 	bl	8000288 <__aeabi_dsub>
 801399e:	4622      	mov	r2, r4
 80139a0:	462b      	mov	r3, r5
 80139a2:	f7ec fe29 	bl	80005f8 <__aeabi_dmul>
 80139a6:	4602      	mov	r2, r0
 80139a8:	460b      	mov	r3, r1
 80139aa:	2000      	movs	r0, #0
 80139ac:	4950      	ldr	r1, [pc, #320]	; (8013af0 <__ieee754_pow+0x3c0>)
 80139ae:	f7ec fc6b 	bl	8000288 <__aeabi_dsub>
 80139b2:	4622      	mov	r2, r4
 80139b4:	462b      	mov	r3, r5
 80139b6:	4680      	mov	r8, r0
 80139b8:	4689      	mov	r9, r1
 80139ba:	4620      	mov	r0, r4
 80139bc:	4629      	mov	r1, r5
 80139be:	f7ec fe1b 	bl	80005f8 <__aeabi_dmul>
 80139c2:	4602      	mov	r2, r0
 80139c4:	460b      	mov	r3, r1
 80139c6:	4640      	mov	r0, r8
 80139c8:	4649      	mov	r1, r9
 80139ca:	f7ec fe15 	bl	80005f8 <__aeabi_dmul>
 80139ce:	a340      	add	r3, pc, #256	; (adr r3, 8013ad0 <__ieee754_pow+0x3a0>)
 80139d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139d4:	f7ec fe10 	bl	80005f8 <__aeabi_dmul>
 80139d8:	4602      	mov	r2, r0
 80139da:	460b      	mov	r3, r1
 80139dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80139e0:	f7ec fc52 	bl	8000288 <__aeabi_dsub>
 80139e4:	4602      	mov	r2, r0
 80139e6:	460b      	mov	r3, r1
 80139e8:	4604      	mov	r4, r0
 80139ea:	460d      	mov	r5, r1
 80139ec:	4630      	mov	r0, r6
 80139ee:	4639      	mov	r1, r7
 80139f0:	f7ec fc4c 	bl	800028c <__adddf3>
 80139f4:	2000      	movs	r0, #0
 80139f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80139fa:	4632      	mov	r2, r6
 80139fc:	463b      	mov	r3, r7
 80139fe:	f7ec fc43 	bl	8000288 <__aeabi_dsub>
 8013a02:	4602      	mov	r2, r0
 8013a04:	460b      	mov	r3, r1
 8013a06:	4620      	mov	r0, r4
 8013a08:	4629      	mov	r1, r5
 8013a0a:	f7ec fc3d 	bl	8000288 <__aeabi_dsub>
 8013a0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013a10:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8013a14:	4313      	orrs	r3, r2
 8013a16:	4606      	mov	r6, r0
 8013a18:	460f      	mov	r7, r1
 8013a1a:	f040 81eb 	bne.w	8013df4 <__ieee754_pow+0x6c4>
 8013a1e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8013ad8 <__ieee754_pow+0x3a8>
 8013a22:	e9dd 4500 	ldrd	r4, r5, [sp]
 8013a26:	2400      	movs	r4, #0
 8013a28:	4622      	mov	r2, r4
 8013a2a:	462b      	mov	r3, r5
 8013a2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013a30:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013a34:	f7ec fc28 	bl	8000288 <__aeabi_dsub>
 8013a38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013a3c:	f7ec fddc 	bl	80005f8 <__aeabi_dmul>
 8013a40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013a44:	4680      	mov	r8, r0
 8013a46:	4689      	mov	r9, r1
 8013a48:	4630      	mov	r0, r6
 8013a4a:	4639      	mov	r1, r7
 8013a4c:	f7ec fdd4 	bl	80005f8 <__aeabi_dmul>
 8013a50:	4602      	mov	r2, r0
 8013a52:	460b      	mov	r3, r1
 8013a54:	4640      	mov	r0, r8
 8013a56:	4649      	mov	r1, r9
 8013a58:	f7ec fc18 	bl	800028c <__adddf3>
 8013a5c:	4622      	mov	r2, r4
 8013a5e:	462b      	mov	r3, r5
 8013a60:	4680      	mov	r8, r0
 8013a62:	4689      	mov	r9, r1
 8013a64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013a68:	f7ec fdc6 	bl	80005f8 <__aeabi_dmul>
 8013a6c:	460b      	mov	r3, r1
 8013a6e:	4604      	mov	r4, r0
 8013a70:	460d      	mov	r5, r1
 8013a72:	4602      	mov	r2, r0
 8013a74:	4649      	mov	r1, r9
 8013a76:	4640      	mov	r0, r8
 8013a78:	e9cd 4500 	strd	r4, r5, [sp]
 8013a7c:	f7ec fc06 	bl	800028c <__adddf3>
 8013a80:	4b1c      	ldr	r3, [pc, #112]	; (8013af4 <__ieee754_pow+0x3c4>)
 8013a82:	4299      	cmp	r1, r3
 8013a84:	4606      	mov	r6, r0
 8013a86:	460f      	mov	r7, r1
 8013a88:	468b      	mov	fp, r1
 8013a8a:	f340 82f7 	ble.w	801407c <__ieee754_pow+0x94c>
 8013a8e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8013a92:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8013a96:	4303      	orrs	r3, r0
 8013a98:	f000 81ea 	beq.w	8013e70 <__ieee754_pow+0x740>
 8013a9c:	a310      	add	r3, pc, #64	; (adr r3, 8013ae0 <__ieee754_pow+0x3b0>)
 8013a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013aa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013aa6:	f7ec fda7 	bl	80005f8 <__aeabi_dmul>
 8013aaa:	a30d      	add	r3, pc, #52	; (adr r3, 8013ae0 <__ieee754_pow+0x3b0>)
 8013aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ab0:	e6d5      	b.n	801385e <__ieee754_pow+0x12e>
 8013ab2:	bf00      	nop
 8013ab4:	f3af 8000 	nop.w
 8013ab8:	60000000 	.word	0x60000000
 8013abc:	3ff71547 	.word	0x3ff71547
 8013ac0:	f85ddf44 	.word	0xf85ddf44
 8013ac4:	3e54ae0b 	.word	0x3e54ae0b
 8013ac8:	55555555 	.word	0x55555555
 8013acc:	3fd55555 	.word	0x3fd55555
 8013ad0:	652b82fe 	.word	0x652b82fe
 8013ad4:	3ff71547 	.word	0x3ff71547
 8013ad8:	00000000 	.word	0x00000000
 8013adc:	bff00000 	.word	0xbff00000
 8013ae0:	8800759c 	.word	0x8800759c
 8013ae4:	7e37e43c 	.word	0x7e37e43c
 8013ae8:	3ff00000 	.word	0x3ff00000
 8013aec:	3fd00000 	.word	0x3fd00000
 8013af0:	3fe00000 	.word	0x3fe00000
 8013af4:	408fffff 	.word	0x408fffff
 8013af8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8013afc:	f04f 0200 	mov.w	r2, #0
 8013b00:	da05      	bge.n	8013b0e <__ieee754_pow+0x3de>
 8013b02:	4bd3      	ldr	r3, [pc, #844]	; (8013e50 <__ieee754_pow+0x720>)
 8013b04:	f7ec fd78 	bl	80005f8 <__aeabi_dmul>
 8013b08:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8013b0c:	460c      	mov	r4, r1
 8013b0e:	1523      	asrs	r3, r4, #20
 8013b10:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013b14:	4413      	add	r3, r2
 8013b16:	9309      	str	r3, [sp, #36]	; 0x24
 8013b18:	4bce      	ldr	r3, [pc, #824]	; (8013e54 <__ieee754_pow+0x724>)
 8013b1a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8013b1e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8013b22:	429c      	cmp	r4, r3
 8013b24:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8013b28:	dd08      	ble.n	8013b3c <__ieee754_pow+0x40c>
 8013b2a:	4bcb      	ldr	r3, [pc, #812]	; (8013e58 <__ieee754_pow+0x728>)
 8013b2c:	429c      	cmp	r4, r3
 8013b2e:	f340 815e 	ble.w	8013dee <__ieee754_pow+0x6be>
 8013b32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b34:	3301      	adds	r3, #1
 8013b36:	9309      	str	r3, [sp, #36]	; 0x24
 8013b38:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8013b3c:	f04f 0a00 	mov.w	sl, #0
 8013b40:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8013b44:	930c      	str	r3, [sp, #48]	; 0x30
 8013b46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013b48:	4bc4      	ldr	r3, [pc, #784]	; (8013e5c <__ieee754_pow+0x72c>)
 8013b4a:	4413      	add	r3, r2
 8013b4c:	ed93 7b00 	vldr	d7, [r3]
 8013b50:	4629      	mov	r1, r5
 8013b52:	ec53 2b17 	vmov	r2, r3, d7
 8013b56:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013b5a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013b5e:	f7ec fb93 	bl	8000288 <__aeabi_dsub>
 8013b62:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013b66:	4606      	mov	r6, r0
 8013b68:	460f      	mov	r7, r1
 8013b6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013b6e:	f7ec fb8d 	bl	800028c <__adddf3>
 8013b72:	4602      	mov	r2, r0
 8013b74:	460b      	mov	r3, r1
 8013b76:	2000      	movs	r0, #0
 8013b78:	49b9      	ldr	r1, [pc, #740]	; (8013e60 <__ieee754_pow+0x730>)
 8013b7a:	f7ec fe67 	bl	800084c <__aeabi_ddiv>
 8013b7e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8013b82:	4602      	mov	r2, r0
 8013b84:	460b      	mov	r3, r1
 8013b86:	4630      	mov	r0, r6
 8013b88:	4639      	mov	r1, r7
 8013b8a:	f7ec fd35 	bl	80005f8 <__aeabi_dmul>
 8013b8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013b92:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8013b96:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8013b9a:	2300      	movs	r3, #0
 8013b9c:	9302      	str	r3, [sp, #8]
 8013b9e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8013ba2:	106d      	asrs	r5, r5, #1
 8013ba4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8013ba8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8013bac:	2200      	movs	r2, #0
 8013bae:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8013bb2:	4640      	mov	r0, r8
 8013bb4:	4649      	mov	r1, r9
 8013bb6:	4614      	mov	r4, r2
 8013bb8:	461d      	mov	r5, r3
 8013bba:	f7ec fd1d 	bl	80005f8 <__aeabi_dmul>
 8013bbe:	4602      	mov	r2, r0
 8013bc0:	460b      	mov	r3, r1
 8013bc2:	4630      	mov	r0, r6
 8013bc4:	4639      	mov	r1, r7
 8013bc6:	f7ec fb5f 	bl	8000288 <__aeabi_dsub>
 8013bca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013bce:	4606      	mov	r6, r0
 8013bd0:	460f      	mov	r7, r1
 8013bd2:	4620      	mov	r0, r4
 8013bd4:	4629      	mov	r1, r5
 8013bd6:	f7ec fb57 	bl	8000288 <__aeabi_dsub>
 8013bda:	4602      	mov	r2, r0
 8013bdc:	460b      	mov	r3, r1
 8013bde:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013be2:	f7ec fb51 	bl	8000288 <__aeabi_dsub>
 8013be6:	4642      	mov	r2, r8
 8013be8:	464b      	mov	r3, r9
 8013bea:	f7ec fd05 	bl	80005f8 <__aeabi_dmul>
 8013bee:	4602      	mov	r2, r0
 8013bf0:	460b      	mov	r3, r1
 8013bf2:	4630      	mov	r0, r6
 8013bf4:	4639      	mov	r1, r7
 8013bf6:	f7ec fb47 	bl	8000288 <__aeabi_dsub>
 8013bfa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8013bfe:	f7ec fcfb 	bl	80005f8 <__aeabi_dmul>
 8013c02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013c06:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013c0a:	4610      	mov	r0, r2
 8013c0c:	4619      	mov	r1, r3
 8013c0e:	f7ec fcf3 	bl	80005f8 <__aeabi_dmul>
 8013c12:	a37b      	add	r3, pc, #492	; (adr r3, 8013e00 <__ieee754_pow+0x6d0>)
 8013c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c18:	4604      	mov	r4, r0
 8013c1a:	460d      	mov	r5, r1
 8013c1c:	f7ec fcec 	bl	80005f8 <__aeabi_dmul>
 8013c20:	a379      	add	r3, pc, #484	; (adr r3, 8013e08 <__ieee754_pow+0x6d8>)
 8013c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c26:	f7ec fb31 	bl	800028c <__adddf3>
 8013c2a:	4622      	mov	r2, r4
 8013c2c:	462b      	mov	r3, r5
 8013c2e:	f7ec fce3 	bl	80005f8 <__aeabi_dmul>
 8013c32:	a377      	add	r3, pc, #476	; (adr r3, 8013e10 <__ieee754_pow+0x6e0>)
 8013c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c38:	f7ec fb28 	bl	800028c <__adddf3>
 8013c3c:	4622      	mov	r2, r4
 8013c3e:	462b      	mov	r3, r5
 8013c40:	f7ec fcda 	bl	80005f8 <__aeabi_dmul>
 8013c44:	a374      	add	r3, pc, #464	; (adr r3, 8013e18 <__ieee754_pow+0x6e8>)
 8013c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c4a:	f7ec fb1f 	bl	800028c <__adddf3>
 8013c4e:	4622      	mov	r2, r4
 8013c50:	462b      	mov	r3, r5
 8013c52:	f7ec fcd1 	bl	80005f8 <__aeabi_dmul>
 8013c56:	a372      	add	r3, pc, #456	; (adr r3, 8013e20 <__ieee754_pow+0x6f0>)
 8013c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c5c:	f7ec fb16 	bl	800028c <__adddf3>
 8013c60:	4622      	mov	r2, r4
 8013c62:	462b      	mov	r3, r5
 8013c64:	f7ec fcc8 	bl	80005f8 <__aeabi_dmul>
 8013c68:	a36f      	add	r3, pc, #444	; (adr r3, 8013e28 <__ieee754_pow+0x6f8>)
 8013c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c6e:	f7ec fb0d 	bl	800028c <__adddf3>
 8013c72:	4622      	mov	r2, r4
 8013c74:	4606      	mov	r6, r0
 8013c76:	460f      	mov	r7, r1
 8013c78:	462b      	mov	r3, r5
 8013c7a:	4620      	mov	r0, r4
 8013c7c:	4629      	mov	r1, r5
 8013c7e:	f7ec fcbb 	bl	80005f8 <__aeabi_dmul>
 8013c82:	4602      	mov	r2, r0
 8013c84:	460b      	mov	r3, r1
 8013c86:	4630      	mov	r0, r6
 8013c88:	4639      	mov	r1, r7
 8013c8a:	f7ec fcb5 	bl	80005f8 <__aeabi_dmul>
 8013c8e:	4642      	mov	r2, r8
 8013c90:	4604      	mov	r4, r0
 8013c92:	460d      	mov	r5, r1
 8013c94:	464b      	mov	r3, r9
 8013c96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013c9a:	f7ec faf7 	bl	800028c <__adddf3>
 8013c9e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013ca2:	f7ec fca9 	bl	80005f8 <__aeabi_dmul>
 8013ca6:	4622      	mov	r2, r4
 8013ca8:	462b      	mov	r3, r5
 8013caa:	f7ec faef 	bl	800028c <__adddf3>
 8013cae:	4642      	mov	r2, r8
 8013cb0:	4606      	mov	r6, r0
 8013cb2:	460f      	mov	r7, r1
 8013cb4:	464b      	mov	r3, r9
 8013cb6:	4640      	mov	r0, r8
 8013cb8:	4649      	mov	r1, r9
 8013cba:	f7ec fc9d 	bl	80005f8 <__aeabi_dmul>
 8013cbe:	2200      	movs	r2, #0
 8013cc0:	4b68      	ldr	r3, [pc, #416]	; (8013e64 <__ieee754_pow+0x734>)
 8013cc2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013cc6:	f7ec fae1 	bl	800028c <__adddf3>
 8013cca:	4632      	mov	r2, r6
 8013ccc:	463b      	mov	r3, r7
 8013cce:	f7ec fadd 	bl	800028c <__adddf3>
 8013cd2:	9802      	ldr	r0, [sp, #8]
 8013cd4:	460d      	mov	r5, r1
 8013cd6:	4604      	mov	r4, r0
 8013cd8:	4602      	mov	r2, r0
 8013cda:	460b      	mov	r3, r1
 8013cdc:	4640      	mov	r0, r8
 8013cde:	4649      	mov	r1, r9
 8013ce0:	f7ec fc8a 	bl	80005f8 <__aeabi_dmul>
 8013ce4:	2200      	movs	r2, #0
 8013ce6:	4680      	mov	r8, r0
 8013ce8:	4689      	mov	r9, r1
 8013cea:	4b5e      	ldr	r3, [pc, #376]	; (8013e64 <__ieee754_pow+0x734>)
 8013cec:	4620      	mov	r0, r4
 8013cee:	4629      	mov	r1, r5
 8013cf0:	f7ec faca 	bl	8000288 <__aeabi_dsub>
 8013cf4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013cf8:	f7ec fac6 	bl	8000288 <__aeabi_dsub>
 8013cfc:	4602      	mov	r2, r0
 8013cfe:	460b      	mov	r3, r1
 8013d00:	4630      	mov	r0, r6
 8013d02:	4639      	mov	r1, r7
 8013d04:	f7ec fac0 	bl	8000288 <__aeabi_dsub>
 8013d08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013d0c:	f7ec fc74 	bl	80005f8 <__aeabi_dmul>
 8013d10:	4622      	mov	r2, r4
 8013d12:	4606      	mov	r6, r0
 8013d14:	460f      	mov	r7, r1
 8013d16:	462b      	mov	r3, r5
 8013d18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013d1c:	f7ec fc6c 	bl	80005f8 <__aeabi_dmul>
 8013d20:	4602      	mov	r2, r0
 8013d22:	460b      	mov	r3, r1
 8013d24:	4630      	mov	r0, r6
 8013d26:	4639      	mov	r1, r7
 8013d28:	f7ec fab0 	bl	800028c <__adddf3>
 8013d2c:	4606      	mov	r6, r0
 8013d2e:	460f      	mov	r7, r1
 8013d30:	4602      	mov	r2, r0
 8013d32:	460b      	mov	r3, r1
 8013d34:	4640      	mov	r0, r8
 8013d36:	4649      	mov	r1, r9
 8013d38:	f7ec faa8 	bl	800028c <__adddf3>
 8013d3c:	9802      	ldr	r0, [sp, #8]
 8013d3e:	a33c      	add	r3, pc, #240	; (adr r3, 8013e30 <__ieee754_pow+0x700>)
 8013d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d44:	4604      	mov	r4, r0
 8013d46:	460d      	mov	r5, r1
 8013d48:	f7ec fc56 	bl	80005f8 <__aeabi_dmul>
 8013d4c:	4642      	mov	r2, r8
 8013d4e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013d52:	464b      	mov	r3, r9
 8013d54:	4620      	mov	r0, r4
 8013d56:	4629      	mov	r1, r5
 8013d58:	f7ec fa96 	bl	8000288 <__aeabi_dsub>
 8013d5c:	4602      	mov	r2, r0
 8013d5e:	460b      	mov	r3, r1
 8013d60:	4630      	mov	r0, r6
 8013d62:	4639      	mov	r1, r7
 8013d64:	f7ec fa90 	bl	8000288 <__aeabi_dsub>
 8013d68:	a333      	add	r3, pc, #204	; (adr r3, 8013e38 <__ieee754_pow+0x708>)
 8013d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d6e:	f7ec fc43 	bl	80005f8 <__aeabi_dmul>
 8013d72:	a333      	add	r3, pc, #204	; (adr r3, 8013e40 <__ieee754_pow+0x710>)
 8013d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d78:	4606      	mov	r6, r0
 8013d7a:	460f      	mov	r7, r1
 8013d7c:	4620      	mov	r0, r4
 8013d7e:	4629      	mov	r1, r5
 8013d80:	f7ec fc3a 	bl	80005f8 <__aeabi_dmul>
 8013d84:	4602      	mov	r2, r0
 8013d86:	460b      	mov	r3, r1
 8013d88:	4630      	mov	r0, r6
 8013d8a:	4639      	mov	r1, r7
 8013d8c:	f7ec fa7e 	bl	800028c <__adddf3>
 8013d90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013d92:	4b35      	ldr	r3, [pc, #212]	; (8013e68 <__ieee754_pow+0x738>)
 8013d94:	4413      	add	r3, r2
 8013d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d9a:	f7ec fa77 	bl	800028c <__adddf3>
 8013d9e:	4604      	mov	r4, r0
 8013da0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013da2:	460d      	mov	r5, r1
 8013da4:	f7ec fbbe 	bl	8000524 <__aeabi_i2d>
 8013da8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013daa:	4b30      	ldr	r3, [pc, #192]	; (8013e6c <__ieee754_pow+0x73c>)
 8013dac:	4413      	add	r3, r2
 8013dae:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013db2:	4606      	mov	r6, r0
 8013db4:	460f      	mov	r7, r1
 8013db6:	4622      	mov	r2, r4
 8013db8:	462b      	mov	r3, r5
 8013dba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013dbe:	f7ec fa65 	bl	800028c <__adddf3>
 8013dc2:	4642      	mov	r2, r8
 8013dc4:	464b      	mov	r3, r9
 8013dc6:	f7ec fa61 	bl	800028c <__adddf3>
 8013dca:	4632      	mov	r2, r6
 8013dcc:	463b      	mov	r3, r7
 8013dce:	f7ec fa5d 	bl	800028c <__adddf3>
 8013dd2:	9802      	ldr	r0, [sp, #8]
 8013dd4:	4632      	mov	r2, r6
 8013dd6:	463b      	mov	r3, r7
 8013dd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013ddc:	f7ec fa54 	bl	8000288 <__aeabi_dsub>
 8013de0:	4642      	mov	r2, r8
 8013de2:	464b      	mov	r3, r9
 8013de4:	f7ec fa50 	bl	8000288 <__aeabi_dsub>
 8013de8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013dec:	e607      	b.n	80139fe <__ieee754_pow+0x2ce>
 8013dee:	f04f 0a01 	mov.w	sl, #1
 8013df2:	e6a5      	b.n	8013b40 <__ieee754_pow+0x410>
 8013df4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8013e48 <__ieee754_pow+0x718>
 8013df8:	e613      	b.n	8013a22 <__ieee754_pow+0x2f2>
 8013dfa:	bf00      	nop
 8013dfc:	f3af 8000 	nop.w
 8013e00:	4a454eef 	.word	0x4a454eef
 8013e04:	3fca7e28 	.word	0x3fca7e28
 8013e08:	93c9db65 	.word	0x93c9db65
 8013e0c:	3fcd864a 	.word	0x3fcd864a
 8013e10:	a91d4101 	.word	0xa91d4101
 8013e14:	3fd17460 	.word	0x3fd17460
 8013e18:	518f264d 	.word	0x518f264d
 8013e1c:	3fd55555 	.word	0x3fd55555
 8013e20:	db6fabff 	.word	0xdb6fabff
 8013e24:	3fdb6db6 	.word	0x3fdb6db6
 8013e28:	33333303 	.word	0x33333303
 8013e2c:	3fe33333 	.word	0x3fe33333
 8013e30:	e0000000 	.word	0xe0000000
 8013e34:	3feec709 	.word	0x3feec709
 8013e38:	dc3a03fd 	.word	0xdc3a03fd
 8013e3c:	3feec709 	.word	0x3feec709
 8013e40:	145b01f5 	.word	0x145b01f5
 8013e44:	be3e2fe0 	.word	0xbe3e2fe0
 8013e48:	00000000 	.word	0x00000000
 8013e4c:	3ff00000 	.word	0x3ff00000
 8013e50:	43400000 	.word	0x43400000
 8013e54:	0003988e 	.word	0x0003988e
 8013e58:	000bb679 	.word	0x000bb679
 8013e5c:	08015470 	.word	0x08015470
 8013e60:	3ff00000 	.word	0x3ff00000
 8013e64:	40080000 	.word	0x40080000
 8013e68:	08015490 	.word	0x08015490
 8013e6c:	08015480 	.word	0x08015480
 8013e70:	a3b4      	add	r3, pc, #720	; (adr r3, 8014144 <__ieee754_pow+0xa14>)
 8013e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e76:	4640      	mov	r0, r8
 8013e78:	4649      	mov	r1, r9
 8013e7a:	f7ec fa07 	bl	800028c <__adddf3>
 8013e7e:	4622      	mov	r2, r4
 8013e80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013e84:	462b      	mov	r3, r5
 8013e86:	4630      	mov	r0, r6
 8013e88:	4639      	mov	r1, r7
 8013e8a:	f7ec f9fd 	bl	8000288 <__aeabi_dsub>
 8013e8e:	4602      	mov	r2, r0
 8013e90:	460b      	mov	r3, r1
 8013e92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013e96:	f7ec fe3f 	bl	8000b18 <__aeabi_dcmpgt>
 8013e9a:	2800      	cmp	r0, #0
 8013e9c:	f47f adfe 	bne.w	8013a9c <__ieee754_pow+0x36c>
 8013ea0:	4aa3      	ldr	r2, [pc, #652]	; (8014130 <__ieee754_pow+0xa00>)
 8013ea2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013ea6:	4293      	cmp	r3, r2
 8013ea8:	f340 810a 	ble.w	80140c0 <__ieee754_pow+0x990>
 8013eac:	151b      	asrs	r3, r3, #20
 8013eae:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8013eb2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8013eb6:	fa4a f303 	asr.w	r3, sl, r3
 8013eba:	445b      	add	r3, fp
 8013ebc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8013ec0:	4e9c      	ldr	r6, [pc, #624]	; (8014134 <__ieee754_pow+0xa04>)
 8013ec2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8013ec6:	4116      	asrs	r6, r2
 8013ec8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8013ecc:	2000      	movs	r0, #0
 8013ece:	ea23 0106 	bic.w	r1, r3, r6
 8013ed2:	f1c2 0214 	rsb	r2, r2, #20
 8013ed6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8013eda:	fa4a fa02 	asr.w	sl, sl, r2
 8013ede:	f1bb 0f00 	cmp.w	fp, #0
 8013ee2:	4602      	mov	r2, r0
 8013ee4:	460b      	mov	r3, r1
 8013ee6:	4620      	mov	r0, r4
 8013ee8:	4629      	mov	r1, r5
 8013eea:	bfb8      	it	lt
 8013eec:	f1ca 0a00 	rsblt	sl, sl, #0
 8013ef0:	f7ec f9ca 	bl	8000288 <__aeabi_dsub>
 8013ef4:	e9cd 0100 	strd	r0, r1, [sp]
 8013ef8:	4642      	mov	r2, r8
 8013efa:	464b      	mov	r3, r9
 8013efc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013f00:	f7ec f9c4 	bl	800028c <__adddf3>
 8013f04:	2000      	movs	r0, #0
 8013f06:	a378      	add	r3, pc, #480	; (adr r3, 80140e8 <__ieee754_pow+0x9b8>)
 8013f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f0c:	4604      	mov	r4, r0
 8013f0e:	460d      	mov	r5, r1
 8013f10:	f7ec fb72 	bl	80005f8 <__aeabi_dmul>
 8013f14:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013f18:	4606      	mov	r6, r0
 8013f1a:	460f      	mov	r7, r1
 8013f1c:	4620      	mov	r0, r4
 8013f1e:	4629      	mov	r1, r5
 8013f20:	f7ec f9b2 	bl	8000288 <__aeabi_dsub>
 8013f24:	4602      	mov	r2, r0
 8013f26:	460b      	mov	r3, r1
 8013f28:	4640      	mov	r0, r8
 8013f2a:	4649      	mov	r1, r9
 8013f2c:	f7ec f9ac 	bl	8000288 <__aeabi_dsub>
 8013f30:	a36f      	add	r3, pc, #444	; (adr r3, 80140f0 <__ieee754_pow+0x9c0>)
 8013f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f36:	f7ec fb5f 	bl	80005f8 <__aeabi_dmul>
 8013f3a:	a36f      	add	r3, pc, #444	; (adr r3, 80140f8 <__ieee754_pow+0x9c8>)
 8013f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f40:	4680      	mov	r8, r0
 8013f42:	4689      	mov	r9, r1
 8013f44:	4620      	mov	r0, r4
 8013f46:	4629      	mov	r1, r5
 8013f48:	f7ec fb56 	bl	80005f8 <__aeabi_dmul>
 8013f4c:	4602      	mov	r2, r0
 8013f4e:	460b      	mov	r3, r1
 8013f50:	4640      	mov	r0, r8
 8013f52:	4649      	mov	r1, r9
 8013f54:	f7ec f99a 	bl	800028c <__adddf3>
 8013f58:	4604      	mov	r4, r0
 8013f5a:	460d      	mov	r5, r1
 8013f5c:	4602      	mov	r2, r0
 8013f5e:	460b      	mov	r3, r1
 8013f60:	4630      	mov	r0, r6
 8013f62:	4639      	mov	r1, r7
 8013f64:	f7ec f992 	bl	800028c <__adddf3>
 8013f68:	4632      	mov	r2, r6
 8013f6a:	463b      	mov	r3, r7
 8013f6c:	4680      	mov	r8, r0
 8013f6e:	4689      	mov	r9, r1
 8013f70:	f7ec f98a 	bl	8000288 <__aeabi_dsub>
 8013f74:	4602      	mov	r2, r0
 8013f76:	460b      	mov	r3, r1
 8013f78:	4620      	mov	r0, r4
 8013f7a:	4629      	mov	r1, r5
 8013f7c:	f7ec f984 	bl	8000288 <__aeabi_dsub>
 8013f80:	4642      	mov	r2, r8
 8013f82:	4606      	mov	r6, r0
 8013f84:	460f      	mov	r7, r1
 8013f86:	464b      	mov	r3, r9
 8013f88:	4640      	mov	r0, r8
 8013f8a:	4649      	mov	r1, r9
 8013f8c:	f7ec fb34 	bl	80005f8 <__aeabi_dmul>
 8013f90:	a35b      	add	r3, pc, #364	; (adr r3, 8014100 <__ieee754_pow+0x9d0>)
 8013f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f96:	4604      	mov	r4, r0
 8013f98:	460d      	mov	r5, r1
 8013f9a:	f7ec fb2d 	bl	80005f8 <__aeabi_dmul>
 8013f9e:	a35a      	add	r3, pc, #360	; (adr r3, 8014108 <__ieee754_pow+0x9d8>)
 8013fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fa4:	f7ec f970 	bl	8000288 <__aeabi_dsub>
 8013fa8:	4622      	mov	r2, r4
 8013faa:	462b      	mov	r3, r5
 8013fac:	f7ec fb24 	bl	80005f8 <__aeabi_dmul>
 8013fb0:	a357      	add	r3, pc, #348	; (adr r3, 8014110 <__ieee754_pow+0x9e0>)
 8013fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fb6:	f7ec f969 	bl	800028c <__adddf3>
 8013fba:	4622      	mov	r2, r4
 8013fbc:	462b      	mov	r3, r5
 8013fbe:	f7ec fb1b 	bl	80005f8 <__aeabi_dmul>
 8013fc2:	a355      	add	r3, pc, #340	; (adr r3, 8014118 <__ieee754_pow+0x9e8>)
 8013fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fc8:	f7ec f95e 	bl	8000288 <__aeabi_dsub>
 8013fcc:	4622      	mov	r2, r4
 8013fce:	462b      	mov	r3, r5
 8013fd0:	f7ec fb12 	bl	80005f8 <__aeabi_dmul>
 8013fd4:	a352      	add	r3, pc, #328	; (adr r3, 8014120 <__ieee754_pow+0x9f0>)
 8013fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fda:	f7ec f957 	bl	800028c <__adddf3>
 8013fde:	4622      	mov	r2, r4
 8013fe0:	462b      	mov	r3, r5
 8013fe2:	f7ec fb09 	bl	80005f8 <__aeabi_dmul>
 8013fe6:	4602      	mov	r2, r0
 8013fe8:	460b      	mov	r3, r1
 8013fea:	4640      	mov	r0, r8
 8013fec:	4649      	mov	r1, r9
 8013fee:	f7ec f94b 	bl	8000288 <__aeabi_dsub>
 8013ff2:	4604      	mov	r4, r0
 8013ff4:	460d      	mov	r5, r1
 8013ff6:	4602      	mov	r2, r0
 8013ff8:	460b      	mov	r3, r1
 8013ffa:	4640      	mov	r0, r8
 8013ffc:	4649      	mov	r1, r9
 8013ffe:	f7ec fafb 	bl	80005f8 <__aeabi_dmul>
 8014002:	2200      	movs	r2, #0
 8014004:	e9cd 0100 	strd	r0, r1, [sp]
 8014008:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801400c:	4620      	mov	r0, r4
 801400e:	4629      	mov	r1, r5
 8014010:	f7ec f93a 	bl	8000288 <__aeabi_dsub>
 8014014:	4602      	mov	r2, r0
 8014016:	460b      	mov	r3, r1
 8014018:	e9dd 0100 	ldrd	r0, r1, [sp]
 801401c:	f7ec fc16 	bl	800084c <__aeabi_ddiv>
 8014020:	4632      	mov	r2, r6
 8014022:	4604      	mov	r4, r0
 8014024:	460d      	mov	r5, r1
 8014026:	463b      	mov	r3, r7
 8014028:	4640      	mov	r0, r8
 801402a:	4649      	mov	r1, r9
 801402c:	f7ec fae4 	bl	80005f8 <__aeabi_dmul>
 8014030:	4632      	mov	r2, r6
 8014032:	463b      	mov	r3, r7
 8014034:	f7ec f92a 	bl	800028c <__adddf3>
 8014038:	4602      	mov	r2, r0
 801403a:	460b      	mov	r3, r1
 801403c:	4620      	mov	r0, r4
 801403e:	4629      	mov	r1, r5
 8014040:	f7ec f922 	bl	8000288 <__aeabi_dsub>
 8014044:	4642      	mov	r2, r8
 8014046:	464b      	mov	r3, r9
 8014048:	f7ec f91e 	bl	8000288 <__aeabi_dsub>
 801404c:	4602      	mov	r2, r0
 801404e:	460b      	mov	r3, r1
 8014050:	2000      	movs	r0, #0
 8014052:	4939      	ldr	r1, [pc, #228]	; (8014138 <__ieee754_pow+0xa08>)
 8014054:	f7ec f918 	bl	8000288 <__aeabi_dsub>
 8014058:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801405c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8014060:	4602      	mov	r2, r0
 8014062:	460b      	mov	r3, r1
 8014064:	da2f      	bge.n	80140c6 <__ieee754_pow+0x996>
 8014066:	4650      	mov	r0, sl
 8014068:	ec43 2b10 	vmov	d0, r2, r3
 801406c:	f000 fc80 	bl	8014970 <scalbn>
 8014070:	ec51 0b10 	vmov	r0, r1, d0
 8014074:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014078:	f7ff bbf1 	b.w	801385e <__ieee754_pow+0x12e>
 801407c:	4b2f      	ldr	r3, [pc, #188]	; (801413c <__ieee754_pow+0xa0c>)
 801407e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8014082:	429e      	cmp	r6, r3
 8014084:	f77f af0c 	ble.w	8013ea0 <__ieee754_pow+0x770>
 8014088:	4b2d      	ldr	r3, [pc, #180]	; (8014140 <__ieee754_pow+0xa10>)
 801408a:	440b      	add	r3, r1
 801408c:	4303      	orrs	r3, r0
 801408e:	d00b      	beq.n	80140a8 <__ieee754_pow+0x978>
 8014090:	a325      	add	r3, pc, #148	; (adr r3, 8014128 <__ieee754_pow+0x9f8>)
 8014092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014096:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801409a:	f7ec faad 	bl	80005f8 <__aeabi_dmul>
 801409e:	a322      	add	r3, pc, #136	; (adr r3, 8014128 <__ieee754_pow+0x9f8>)
 80140a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140a4:	f7ff bbdb 	b.w	801385e <__ieee754_pow+0x12e>
 80140a8:	4622      	mov	r2, r4
 80140aa:	462b      	mov	r3, r5
 80140ac:	f7ec f8ec 	bl	8000288 <__aeabi_dsub>
 80140b0:	4642      	mov	r2, r8
 80140b2:	464b      	mov	r3, r9
 80140b4:	f7ec fd26 	bl	8000b04 <__aeabi_dcmpge>
 80140b8:	2800      	cmp	r0, #0
 80140ba:	f43f aef1 	beq.w	8013ea0 <__ieee754_pow+0x770>
 80140be:	e7e7      	b.n	8014090 <__ieee754_pow+0x960>
 80140c0:	f04f 0a00 	mov.w	sl, #0
 80140c4:	e718      	b.n	8013ef8 <__ieee754_pow+0x7c8>
 80140c6:	4621      	mov	r1, r4
 80140c8:	e7d4      	b.n	8014074 <__ieee754_pow+0x944>
 80140ca:	2000      	movs	r0, #0
 80140cc:	491a      	ldr	r1, [pc, #104]	; (8014138 <__ieee754_pow+0xa08>)
 80140ce:	f7ff bb8f 	b.w	80137f0 <__ieee754_pow+0xc0>
 80140d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80140d6:	f7ff bb8b 	b.w	80137f0 <__ieee754_pow+0xc0>
 80140da:	4630      	mov	r0, r6
 80140dc:	4639      	mov	r1, r7
 80140de:	f7ff bb87 	b.w	80137f0 <__ieee754_pow+0xc0>
 80140e2:	4693      	mov	fp, r2
 80140e4:	f7ff bb98 	b.w	8013818 <__ieee754_pow+0xe8>
 80140e8:	00000000 	.word	0x00000000
 80140ec:	3fe62e43 	.word	0x3fe62e43
 80140f0:	fefa39ef 	.word	0xfefa39ef
 80140f4:	3fe62e42 	.word	0x3fe62e42
 80140f8:	0ca86c39 	.word	0x0ca86c39
 80140fc:	be205c61 	.word	0xbe205c61
 8014100:	72bea4d0 	.word	0x72bea4d0
 8014104:	3e663769 	.word	0x3e663769
 8014108:	c5d26bf1 	.word	0xc5d26bf1
 801410c:	3ebbbd41 	.word	0x3ebbbd41
 8014110:	af25de2c 	.word	0xaf25de2c
 8014114:	3f11566a 	.word	0x3f11566a
 8014118:	16bebd93 	.word	0x16bebd93
 801411c:	3f66c16c 	.word	0x3f66c16c
 8014120:	5555553e 	.word	0x5555553e
 8014124:	3fc55555 	.word	0x3fc55555
 8014128:	c2f8f359 	.word	0xc2f8f359
 801412c:	01a56e1f 	.word	0x01a56e1f
 8014130:	3fe00000 	.word	0x3fe00000
 8014134:	000fffff 	.word	0x000fffff
 8014138:	3ff00000 	.word	0x3ff00000
 801413c:	4090cbff 	.word	0x4090cbff
 8014140:	3f6f3400 	.word	0x3f6f3400
 8014144:	652b82fe 	.word	0x652b82fe
 8014148:	3c971547 	.word	0x3c971547

0801414c <__ieee754_sqrt>:
 801414c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014150:	4955      	ldr	r1, [pc, #340]	; (80142a8 <__ieee754_sqrt+0x15c>)
 8014152:	ec55 4b10 	vmov	r4, r5, d0
 8014156:	43a9      	bics	r1, r5
 8014158:	462b      	mov	r3, r5
 801415a:	462a      	mov	r2, r5
 801415c:	d112      	bne.n	8014184 <__ieee754_sqrt+0x38>
 801415e:	ee10 2a10 	vmov	r2, s0
 8014162:	ee10 0a10 	vmov	r0, s0
 8014166:	4629      	mov	r1, r5
 8014168:	f7ec fa46 	bl	80005f8 <__aeabi_dmul>
 801416c:	4602      	mov	r2, r0
 801416e:	460b      	mov	r3, r1
 8014170:	4620      	mov	r0, r4
 8014172:	4629      	mov	r1, r5
 8014174:	f7ec f88a 	bl	800028c <__adddf3>
 8014178:	4604      	mov	r4, r0
 801417a:	460d      	mov	r5, r1
 801417c:	ec45 4b10 	vmov	d0, r4, r5
 8014180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014184:	2d00      	cmp	r5, #0
 8014186:	ee10 0a10 	vmov	r0, s0
 801418a:	4621      	mov	r1, r4
 801418c:	dc0f      	bgt.n	80141ae <__ieee754_sqrt+0x62>
 801418e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014192:	4330      	orrs	r0, r6
 8014194:	d0f2      	beq.n	801417c <__ieee754_sqrt+0x30>
 8014196:	b155      	cbz	r5, 80141ae <__ieee754_sqrt+0x62>
 8014198:	ee10 2a10 	vmov	r2, s0
 801419c:	4620      	mov	r0, r4
 801419e:	4629      	mov	r1, r5
 80141a0:	f7ec f872 	bl	8000288 <__aeabi_dsub>
 80141a4:	4602      	mov	r2, r0
 80141a6:	460b      	mov	r3, r1
 80141a8:	f7ec fb50 	bl	800084c <__aeabi_ddiv>
 80141ac:	e7e4      	b.n	8014178 <__ieee754_sqrt+0x2c>
 80141ae:	151b      	asrs	r3, r3, #20
 80141b0:	d073      	beq.n	801429a <__ieee754_sqrt+0x14e>
 80141b2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80141b6:	07dd      	lsls	r5, r3, #31
 80141b8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80141bc:	bf48      	it	mi
 80141be:	0fc8      	lsrmi	r0, r1, #31
 80141c0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80141c4:	bf44      	itt	mi
 80141c6:	0049      	lslmi	r1, r1, #1
 80141c8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80141cc:	2500      	movs	r5, #0
 80141ce:	1058      	asrs	r0, r3, #1
 80141d0:	0fcb      	lsrs	r3, r1, #31
 80141d2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80141d6:	0049      	lsls	r1, r1, #1
 80141d8:	2316      	movs	r3, #22
 80141da:	462c      	mov	r4, r5
 80141dc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80141e0:	19a7      	adds	r7, r4, r6
 80141e2:	4297      	cmp	r7, r2
 80141e4:	bfde      	ittt	le
 80141e6:	19bc      	addle	r4, r7, r6
 80141e8:	1bd2      	suble	r2, r2, r7
 80141ea:	19ad      	addle	r5, r5, r6
 80141ec:	0fcf      	lsrs	r7, r1, #31
 80141ee:	3b01      	subs	r3, #1
 80141f0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80141f4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80141f8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80141fc:	d1f0      	bne.n	80141e0 <__ieee754_sqrt+0x94>
 80141fe:	f04f 0c20 	mov.w	ip, #32
 8014202:	469e      	mov	lr, r3
 8014204:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8014208:	42a2      	cmp	r2, r4
 801420a:	eb06 070e 	add.w	r7, r6, lr
 801420e:	dc02      	bgt.n	8014216 <__ieee754_sqrt+0xca>
 8014210:	d112      	bne.n	8014238 <__ieee754_sqrt+0xec>
 8014212:	428f      	cmp	r7, r1
 8014214:	d810      	bhi.n	8014238 <__ieee754_sqrt+0xec>
 8014216:	2f00      	cmp	r7, #0
 8014218:	eb07 0e06 	add.w	lr, r7, r6
 801421c:	da42      	bge.n	80142a4 <__ieee754_sqrt+0x158>
 801421e:	f1be 0f00 	cmp.w	lr, #0
 8014222:	db3f      	blt.n	80142a4 <__ieee754_sqrt+0x158>
 8014224:	f104 0801 	add.w	r8, r4, #1
 8014228:	1b12      	subs	r2, r2, r4
 801422a:	428f      	cmp	r7, r1
 801422c:	bf88      	it	hi
 801422e:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8014232:	1bc9      	subs	r1, r1, r7
 8014234:	4433      	add	r3, r6
 8014236:	4644      	mov	r4, r8
 8014238:	0052      	lsls	r2, r2, #1
 801423a:	f1bc 0c01 	subs.w	ip, ip, #1
 801423e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8014242:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8014246:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801424a:	d1dd      	bne.n	8014208 <__ieee754_sqrt+0xbc>
 801424c:	430a      	orrs	r2, r1
 801424e:	d006      	beq.n	801425e <__ieee754_sqrt+0x112>
 8014250:	1c5c      	adds	r4, r3, #1
 8014252:	bf13      	iteet	ne
 8014254:	3301      	addne	r3, #1
 8014256:	3501      	addeq	r5, #1
 8014258:	4663      	moveq	r3, ip
 801425a:	f023 0301 	bicne.w	r3, r3, #1
 801425e:	106a      	asrs	r2, r5, #1
 8014260:	085b      	lsrs	r3, r3, #1
 8014262:	07e9      	lsls	r1, r5, #31
 8014264:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8014268:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801426c:	bf48      	it	mi
 801426e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8014272:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8014276:	461c      	mov	r4, r3
 8014278:	e780      	b.n	801417c <__ieee754_sqrt+0x30>
 801427a:	0aca      	lsrs	r2, r1, #11
 801427c:	3815      	subs	r0, #21
 801427e:	0549      	lsls	r1, r1, #21
 8014280:	2a00      	cmp	r2, #0
 8014282:	d0fa      	beq.n	801427a <__ieee754_sqrt+0x12e>
 8014284:	02d6      	lsls	r6, r2, #11
 8014286:	d50a      	bpl.n	801429e <__ieee754_sqrt+0x152>
 8014288:	f1c3 0420 	rsb	r4, r3, #32
 801428c:	fa21 f404 	lsr.w	r4, r1, r4
 8014290:	1e5d      	subs	r5, r3, #1
 8014292:	4099      	lsls	r1, r3
 8014294:	4322      	orrs	r2, r4
 8014296:	1b43      	subs	r3, r0, r5
 8014298:	e78b      	b.n	80141b2 <__ieee754_sqrt+0x66>
 801429a:	4618      	mov	r0, r3
 801429c:	e7f0      	b.n	8014280 <__ieee754_sqrt+0x134>
 801429e:	0052      	lsls	r2, r2, #1
 80142a0:	3301      	adds	r3, #1
 80142a2:	e7ef      	b.n	8014284 <__ieee754_sqrt+0x138>
 80142a4:	46a0      	mov	r8, r4
 80142a6:	e7bf      	b.n	8014228 <__ieee754_sqrt+0xdc>
 80142a8:	7ff00000 	.word	0x7ff00000

080142ac <__ieee754_powf>:
 80142ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80142b0:	ee10 5a90 	vmov	r5, s1
 80142b4:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 80142b8:	ed2d 8b02 	vpush	{d8}
 80142bc:	eeb0 8a40 	vmov.f32	s16, s0
 80142c0:	eef0 8a60 	vmov.f32	s17, s1
 80142c4:	f000 8293 	beq.w	80147ee <__ieee754_powf+0x542>
 80142c8:	ee10 8a10 	vmov	r8, s0
 80142cc:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 80142d0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80142d4:	dc06      	bgt.n	80142e4 <__ieee754_powf+0x38>
 80142d6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80142da:	dd0a      	ble.n	80142f2 <__ieee754_powf+0x46>
 80142dc:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80142e0:	f000 8285 	beq.w	80147ee <__ieee754_powf+0x542>
 80142e4:	ecbd 8b02 	vpop	{d8}
 80142e8:	48d9      	ldr	r0, [pc, #868]	; (8014650 <__ieee754_powf+0x3a4>)
 80142ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80142ee:	f7fe bd99 	b.w	8012e24 <nanf>
 80142f2:	f1b8 0f00 	cmp.w	r8, #0
 80142f6:	da1d      	bge.n	8014334 <__ieee754_powf+0x88>
 80142f8:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 80142fc:	da2c      	bge.n	8014358 <__ieee754_powf+0xac>
 80142fe:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8014302:	db30      	blt.n	8014366 <__ieee754_powf+0xba>
 8014304:	15fb      	asrs	r3, r7, #23
 8014306:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801430a:	fa47 f603 	asr.w	r6, r7, r3
 801430e:	fa06 f303 	lsl.w	r3, r6, r3
 8014312:	42bb      	cmp	r3, r7
 8014314:	d127      	bne.n	8014366 <__ieee754_powf+0xba>
 8014316:	f006 0601 	and.w	r6, r6, #1
 801431a:	f1c6 0602 	rsb	r6, r6, #2
 801431e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8014322:	d122      	bne.n	801436a <__ieee754_powf+0xbe>
 8014324:	2d00      	cmp	r5, #0
 8014326:	f280 8268 	bge.w	80147fa <__ieee754_powf+0x54e>
 801432a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801432e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8014332:	e00d      	b.n	8014350 <__ieee754_powf+0xa4>
 8014334:	2600      	movs	r6, #0
 8014336:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801433a:	d1f0      	bne.n	801431e <__ieee754_powf+0x72>
 801433c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8014340:	f000 8255 	beq.w	80147ee <__ieee754_powf+0x542>
 8014344:	dd0a      	ble.n	801435c <__ieee754_powf+0xb0>
 8014346:	2d00      	cmp	r5, #0
 8014348:	f280 8254 	bge.w	80147f4 <__ieee754_powf+0x548>
 801434c:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8014654 <__ieee754_powf+0x3a8>
 8014350:	ecbd 8b02 	vpop	{d8}
 8014354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014358:	2602      	movs	r6, #2
 801435a:	e7ec      	b.n	8014336 <__ieee754_powf+0x8a>
 801435c:	2d00      	cmp	r5, #0
 801435e:	daf5      	bge.n	801434c <__ieee754_powf+0xa0>
 8014360:	eeb1 0a68 	vneg.f32	s0, s17
 8014364:	e7f4      	b.n	8014350 <__ieee754_powf+0xa4>
 8014366:	2600      	movs	r6, #0
 8014368:	e7d9      	b.n	801431e <__ieee754_powf+0x72>
 801436a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 801436e:	d102      	bne.n	8014376 <__ieee754_powf+0xca>
 8014370:	ee28 0a08 	vmul.f32	s0, s16, s16
 8014374:	e7ec      	b.n	8014350 <__ieee754_powf+0xa4>
 8014376:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 801437a:	eeb0 0a48 	vmov.f32	s0, s16
 801437e:	d108      	bne.n	8014392 <__ieee754_powf+0xe6>
 8014380:	f1b8 0f00 	cmp.w	r8, #0
 8014384:	db05      	blt.n	8014392 <__ieee754_powf+0xe6>
 8014386:	ecbd 8b02 	vpop	{d8}
 801438a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801438e:	f000 ba4d 	b.w	801482c <__ieee754_sqrtf>
 8014392:	f000 fb63 	bl	8014a5c <fabsf>
 8014396:	b124      	cbz	r4, 80143a2 <__ieee754_powf+0xf6>
 8014398:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 801439c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80143a0:	d117      	bne.n	80143d2 <__ieee754_powf+0x126>
 80143a2:	2d00      	cmp	r5, #0
 80143a4:	bfbc      	itt	lt
 80143a6:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80143aa:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80143ae:	f1b8 0f00 	cmp.w	r8, #0
 80143b2:	dacd      	bge.n	8014350 <__ieee754_powf+0xa4>
 80143b4:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 80143b8:	ea54 0306 	orrs.w	r3, r4, r6
 80143bc:	d104      	bne.n	80143c8 <__ieee754_powf+0x11c>
 80143be:	ee70 7a40 	vsub.f32	s15, s0, s0
 80143c2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80143c6:	e7c3      	b.n	8014350 <__ieee754_powf+0xa4>
 80143c8:	2e01      	cmp	r6, #1
 80143ca:	d1c1      	bne.n	8014350 <__ieee754_powf+0xa4>
 80143cc:	eeb1 0a40 	vneg.f32	s0, s0
 80143d0:	e7be      	b.n	8014350 <__ieee754_powf+0xa4>
 80143d2:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 80143d6:	3801      	subs	r0, #1
 80143d8:	ea56 0300 	orrs.w	r3, r6, r0
 80143dc:	d104      	bne.n	80143e8 <__ieee754_powf+0x13c>
 80143de:	ee38 8a48 	vsub.f32	s16, s16, s16
 80143e2:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80143e6:	e7b3      	b.n	8014350 <__ieee754_powf+0xa4>
 80143e8:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 80143ec:	dd6d      	ble.n	80144ca <__ieee754_powf+0x21e>
 80143ee:	4b9a      	ldr	r3, [pc, #616]	; (8014658 <__ieee754_powf+0x3ac>)
 80143f0:	429c      	cmp	r4, r3
 80143f2:	dc06      	bgt.n	8014402 <__ieee754_powf+0x156>
 80143f4:	2d00      	cmp	r5, #0
 80143f6:	daa9      	bge.n	801434c <__ieee754_powf+0xa0>
 80143f8:	ed9f 0a98 	vldr	s0, [pc, #608]	; 801465c <__ieee754_powf+0x3b0>
 80143fc:	ee20 0a00 	vmul.f32	s0, s0, s0
 8014400:	e7a6      	b.n	8014350 <__ieee754_powf+0xa4>
 8014402:	4b97      	ldr	r3, [pc, #604]	; (8014660 <__ieee754_powf+0x3b4>)
 8014404:	429c      	cmp	r4, r3
 8014406:	dd02      	ble.n	801440e <__ieee754_powf+0x162>
 8014408:	2d00      	cmp	r5, #0
 801440a:	dcf5      	bgt.n	80143f8 <__ieee754_powf+0x14c>
 801440c:	e79e      	b.n	801434c <__ieee754_powf+0xa0>
 801440e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014412:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014416:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8014664 <__ieee754_powf+0x3b8>
 801441a:	eef1 6a40 	vneg.f32	s13, s0
 801441e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8014422:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8014426:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801442a:	eee7 7a40 	vfms.f32	s15, s14, s0
 801442e:	ee60 0a00 	vmul.f32	s1, s0, s0
 8014432:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8014668 <__ieee754_powf+0x3bc>
 8014436:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801443a:	eddf 7a8c 	vldr	s15, [pc, #560]	; 801466c <__ieee754_powf+0x3c0>
 801443e:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 8014442:	eee0 7a07 	vfma.f32	s15, s0, s14
 8014446:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8014670 <__ieee754_powf+0x3c4>
 801444a:	eeb0 6a67 	vmov.f32	s12, s15
 801444e:	eea0 6a07 	vfma.f32	s12, s0, s14
 8014452:	ee16 3a10 	vmov	r3, s12
 8014456:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801445a:	f023 030f 	bic.w	r3, r3, #15
 801445e:	ee00 3a90 	vmov	s1, r3
 8014462:	eee6 0a87 	vfma.f32	s1, s13, s14
 8014466:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801446a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 801446e:	f025 050f 	bic.w	r5, r5, #15
 8014472:	ee07 5a10 	vmov	s14, r5
 8014476:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801447a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801447e:	ee07 3a90 	vmov	s15, r3
 8014482:	eee7 0a27 	vfma.f32	s1, s14, s15
 8014486:	3e01      	subs	r6, #1
 8014488:	ea56 0200 	orrs.w	r2, r6, r0
 801448c:	ee07 5a10 	vmov	s14, r5
 8014490:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014494:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8014498:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801449c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80144a0:	ee17 4a10 	vmov	r4, s14
 80144a4:	bf08      	it	eq
 80144a6:	eeb0 8a40 	vmoveq.f32	s16, s0
 80144aa:	2c00      	cmp	r4, #0
 80144ac:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80144b0:	f340 8184 	ble.w	80147bc <__ieee754_powf+0x510>
 80144b4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80144b8:	f340 80fc 	ble.w	80146b4 <__ieee754_powf+0x408>
 80144bc:	eddf 7a67 	vldr	s15, [pc, #412]	; 801465c <__ieee754_powf+0x3b0>
 80144c0:	ee28 0a27 	vmul.f32	s0, s16, s15
 80144c4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80144c8:	e742      	b.n	8014350 <__ieee754_powf+0xa4>
 80144ca:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 80144ce:	bfbf      	itttt	lt
 80144d0:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8014674 <__ieee754_powf+0x3c8>
 80144d4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80144d8:	f06f 0217 	mvnlt.w	r2, #23
 80144dc:	ee17 4a90 	vmovlt	r4, s15
 80144e0:	ea4f 53e4 	mov.w	r3, r4, asr #23
 80144e4:	bfa8      	it	ge
 80144e6:	2200      	movge	r2, #0
 80144e8:	3b7f      	subs	r3, #127	; 0x7f
 80144ea:	4413      	add	r3, r2
 80144ec:	4a62      	ldr	r2, [pc, #392]	; (8014678 <__ieee754_powf+0x3cc>)
 80144ee:	f3c4 0416 	ubfx	r4, r4, #0, #23
 80144f2:	4294      	cmp	r4, r2
 80144f4:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 80144f8:	dd06      	ble.n	8014508 <__ieee754_powf+0x25c>
 80144fa:	4a60      	ldr	r2, [pc, #384]	; (801467c <__ieee754_powf+0x3d0>)
 80144fc:	4294      	cmp	r4, r2
 80144fe:	f340 80a5 	ble.w	801464c <__ieee754_powf+0x3a0>
 8014502:	3301      	adds	r3, #1
 8014504:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8014508:	2400      	movs	r4, #0
 801450a:	4a5d      	ldr	r2, [pc, #372]	; (8014680 <__ieee754_powf+0x3d4>)
 801450c:	00a7      	lsls	r7, r4, #2
 801450e:	443a      	add	r2, r7
 8014510:	ee07 1a90 	vmov	s15, r1
 8014514:	ed92 7a00 	vldr	s14, [r2]
 8014518:	4a5a      	ldr	r2, [pc, #360]	; (8014684 <__ieee754_powf+0x3d8>)
 801451a:	ee37 6a27 	vadd.f32	s12, s14, s15
 801451e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8014522:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8014526:	1049      	asrs	r1, r1, #1
 8014528:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 801452c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8014530:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8014534:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8014538:	ee06 1a10 	vmov	s12, r1
 801453c:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8014540:	ee14 ca90 	vmov	ip, s9
 8014544:	ea02 0c0c 	and.w	ip, r2, ip
 8014548:	ee05 ca10 	vmov	s10, ip
 801454c:	eeb1 4a45 	vneg.f32	s8, s10
 8014550:	eee4 5a06 	vfma.f32	s11, s8, s12
 8014554:	ee36 6a47 	vsub.f32	s12, s12, s14
 8014558:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8014688 <__ieee754_powf+0x3dc>
 801455c:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8014560:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8014564:	eee4 5a06 	vfma.f32	s11, s8, s12
 8014568:	ee67 3aa7 	vmul.f32	s7, s15, s15
 801456c:	ee25 6aa6 	vmul.f32	s12, s11, s13
 8014570:	eddf 5a46 	vldr	s11, [pc, #280]	; 801468c <__ieee754_powf+0x3e0>
 8014574:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8014578:	eddf 5a45 	vldr	s11, [pc, #276]	; 8014690 <__ieee754_powf+0x3e4>
 801457c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8014580:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8014664 <__ieee754_powf+0x3b8>
 8014584:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8014588:	eddf 5a42 	vldr	s11, [pc, #264]	; 8014694 <__ieee754_powf+0x3e8>
 801458c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8014590:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8014698 <__ieee754_powf+0x3ec>
 8014594:	ee75 6a24 	vadd.f32	s13, s10, s9
 8014598:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801459c:	ee66 6a86 	vmul.f32	s13, s13, s12
 80145a0:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 80145a4:	eef0 7a65 	vmov.f32	s15, s11
 80145a8:	eee3 6a87 	vfma.f32	s13, s7, s14
 80145ac:	eee5 7a05 	vfma.f32	s15, s10, s10
 80145b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80145b4:	ee17 1a90 	vmov	r1, s15
 80145b8:	4011      	ands	r1, r2
 80145ba:	ee07 1a90 	vmov	s15, r1
 80145be:	ee37 7ae5 	vsub.f32	s14, s15, s11
 80145c2:	eddf 5a36 	vldr	s11, [pc, #216]	; 801469c <__ieee754_powf+0x3f0>
 80145c6:	eea4 7a05 	vfma.f32	s14, s8, s10
 80145ca:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80145ce:	ee27 7a24 	vmul.f32	s14, s14, s9
 80145d2:	eea7 7a86 	vfma.f32	s14, s15, s12
 80145d6:	eeb0 6a47 	vmov.f32	s12, s14
 80145da:	eea5 6a27 	vfma.f32	s12, s10, s15
 80145de:	ee16 1a10 	vmov	r1, s12
 80145e2:	4011      	ands	r1, r2
 80145e4:	ee06 1a90 	vmov	s13, r1
 80145e8:	eee4 6a27 	vfma.f32	s13, s8, s15
 80145ec:	eddf 7a2c 	vldr	s15, [pc, #176]	; 80146a0 <__ieee754_powf+0x3f4>
 80145f0:	ee37 7a66 	vsub.f32	s14, s14, s13
 80145f4:	ee06 1a10 	vmov	s12, r1
 80145f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80145fc:	eddf 7a29 	vldr	s15, [pc, #164]	; 80146a4 <__ieee754_powf+0x3f8>
 8014600:	4929      	ldr	r1, [pc, #164]	; (80146a8 <__ieee754_powf+0x3fc>)
 8014602:	eea6 7a27 	vfma.f32	s14, s12, s15
 8014606:	4439      	add	r1, r7
 8014608:	edd1 7a00 	vldr	s15, [r1]
 801460c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014610:	ee07 3a90 	vmov	s15, r3
 8014614:	eef0 0a47 	vmov.f32	s1, s14
 8014618:	4b24      	ldr	r3, [pc, #144]	; (80146ac <__ieee754_powf+0x400>)
 801461a:	eee6 0a25 	vfma.f32	s1, s12, s11
 801461e:	443b      	add	r3, r7
 8014620:	ed93 5a00 	vldr	s10, [r3]
 8014624:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8014628:	ee70 0a85 	vadd.f32	s1, s1, s10
 801462c:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8014630:	ee17 3a90 	vmov	r3, s15
 8014634:	4013      	ands	r3, r2
 8014636:	ee07 3a90 	vmov	s15, r3
 801463a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801463e:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8014642:	eee6 7a65 	vfms.f32	s15, s12, s11
 8014646:	ee77 7a67 	vsub.f32	s15, s14, s15
 801464a:	e70e      	b.n	801446a <__ieee754_powf+0x1be>
 801464c:	2401      	movs	r4, #1
 801464e:	e75c      	b.n	801450a <__ieee754_powf+0x25e>
 8014650:	08015349 	.word	0x08015349
 8014654:	00000000 	.word	0x00000000
 8014658:	3f7ffff7 	.word	0x3f7ffff7
 801465c:	7149f2ca 	.word	0x7149f2ca
 8014660:	3f800007 	.word	0x3f800007
 8014664:	3eaaaaab 	.word	0x3eaaaaab
 8014668:	36eca570 	.word	0x36eca570
 801466c:	3fb8aa3b 	.word	0x3fb8aa3b
 8014670:	3fb8aa00 	.word	0x3fb8aa00
 8014674:	4b800000 	.word	0x4b800000
 8014678:	001cc471 	.word	0x001cc471
 801467c:	005db3d6 	.word	0x005db3d6
 8014680:	080154a0 	.word	0x080154a0
 8014684:	fffff000 	.word	0xfffff000
 8014688:	3e6c3255 	.word	0x3e6c3255
 801468c:	3e53f142 	.word	0x3e53f142
 8014690:	3e8ba305 	.word	0x3e8ba305
 8014694:	3edb6db7 	.word	0x3edb6db7
 8014698:	3f19999a 	.word	0x3f19999a
 801469c:	3f763800 	.word	0x3f763800
 80146a0:	3f76384f 	.word	0x3f76384f
 80146a4:	369dc3a0 	.word	0x369dc3a0
 80146a8:	080154b0 	.word	0x080154b0
 80146ac:	080154a8 	.word	0x080154a8
 80146b0:	3338aa3c 	.word	0x3338aa3c
 80146b4:	f040 8092 	bne.w	80147dc <__ieee754_powf+0x530>
 80146b8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80146b0 <__ieee754_powf+0x404>
 80146bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80146c0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80146c4:	eef4 6ac7 	vcmpe.f32	s13, s14
 80146c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80146cc:	f73f aef6 	bgt.w	80144bc <__ieee754_powf+0x210>
 80146d0:	15db      	asrs	r3, r3, #23
 80146d2:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80146d6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80146da:	4103      	asrs	r3, r0
 80146dc:	4423      	add	r3, r4
 80146de:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80146e2:	4947      	ldr	r1, [pc, #284]	; (8014800 <__ieee754_powf+0x554>)
 80146e4:	3a7f      	subs	r2, #127	; 0x7f
 80146e6:	4111      	asrs	r1, r2
 80146e8:	ea23 0101 	bic.w	r1, r3, r1
 80146ec:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80146f0:	ee07 1a10 	vmov	s14, r1
 80146f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80146f8:	f1c2 0217 	rsb	r2, r2, #23
 80146fc:	4110      	asrs	r0, r2
 80146fe:	2c00      	cmp	r4, #0
 8014700:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014704:	bfb8      	it	lt
 8014706:	4240      	neglt	r0, r0
 8014708:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801470c:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8014804 <__ieee754_powf+0x558>
 8014710:	ee17 3a10 	vmov	r3, s14
 8014714:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8014718:	f023 030f 	bic.w	r3, r3, #15
 801471c:	ee07 3a10 	vmov	s14, r3
 8014720:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014724:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8014728:	eddf 7a37 	vldr	s15, [pc, #220]	; 8014808 <__ieee754_powf+0x55c>
 801472c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014730:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8014734:	eddf 6a35 	vldr	s13, [pc, #212]	; 801480c <__ieee754_powf+0x560>
 8014738:	eeb0 0a67 	vmov.f32	s0, s15
 801473c:	eea7 0a26 	vfma.f32	s0, s14, s13
 8014740:	eeb0 6a40 	vmov.f32	s12, s0
 8014744:	eea7 6a66 	vfms.f32	s12, s14, s13
 8014748:	ee20 7a00 	vmul.f32	s14, s0, s0
 801474c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8014750:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8014810 <__ieee754_powf+0x564>
 8014754:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8014814 <__ieee754_powf+0x568>
 8014758:	eea7 6a26 	vfma.f32	s12, s14, s13
 801475c:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8014818 <__ieee754_powf+0x56c>
 8014760:	eee6 6a07 	vfma.f32	s13, s12, s14
 8014764:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 801481c <__ieee754_powf+0x570>
 8014768:	eea6 6a87 	vfma.f32	s12, s13, s14
 801476c:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8014820 <__ieee754_powf+0x574>
 8014770:	eee6 6a07 	vfma.f32	s13, s12, s14
 8014774:	eeb0 6a40 	vmov.f32	s12, s0
 8014778:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801477c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8014780:	eeb0 7a46 	vmov.f32	s14, s12
 8014784:	ee77 6a66 	vsub.f32	s13, s14, s13
 8014788:	ee20 6a06 	vmul.f32	s12, s0, s12
 801478c:	eee0 7a27 	vfma.f32	s15, s0, s15
 8014790:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8014794:	ee77 7a67 	vsub.f32	s15, s14, s15
 8014798:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801479c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80147a0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80147a4:	ee10 3a10 	vmov	r3, s0
 80147a8:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80147ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80147b0:	da1a      	bge.n	80147e8 <__ieee754_powf+0x53c>
 80147b2:	f000 f9bf 	bl	8014b34 <scalbnf>
 80147b6:	ee20 0a08 	vmul.f32	s0, s0, s16
 80147ba:	e5c9      	b.n	8014350 <__ieee754_powf+0xa4>
 80147bc:	4a19      	ldr	r2, [pc, #100]	; (8014824 <__ieee754_powf+0x578>)
 80147be:	4293      	cmp	r3, r2
 80147c0:	dd02      	ble.n	80147c8 <__ieee754_powf+0x51c>
 80147c2:	eddf 7a19 	vldr	s15, [pc, #100]	; 8014828 <__ieee754_powf+0x57c>
 80147c6:	e67b      	b.n	80144c0 <__ieee754_powf+0x214>
 80147c8:	d108      	bne.n	80147dc <__ieee754_powf+0x530>
 80147ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80147ce:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80147d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147d6:	f6ff af7b 	blt.w	80146d0 <__ieee754_powf+0x424>
 80147da:	e7f2      	b.n	80147c2 <__ieee754_powf+0x516>
 80147dc:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80147e0:	f73f af76 	bgt.w	80146d0 <__ieee754_powf+0x424>
 80147e4:	2000      	movs	r0, #0
 80147e6:	e78f      	b.n	8014708 <__ieee754_powf+0x45c>
 80147e8:	ee00 3a10 	vmov	s0, r3
 80147ec:	e7e3      	b.n	80147b6 <__ieee754_powf+0x50a>
 80147ee:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80147f2:	e5ad      	b.n	8014350 <__ieee754_powf+0xa4>
 80147f4:	eeb0 0a68 	vmov.f32	s0, s17
 80147f8:	e5aa      	b.n	8014350 <__ieee754_powf+0xa4>
 80147fa:	eeb0 0a48 	vmov.f32	s0, s16
 80147fe:	e5a7      	b.n	8014350 <__ieee754_powf+0xa4>
 8014800:	007fffff 	.word	0x007fffff
 8014804:	3f317218 	.word	0x3f317218
 8014808:	35bfbe8c 	.word	0x35bfbe8c
 801480c:	3f317200 	.word	0x3f317200
 8014810:	3331bb4c 	.word	0x3331bb4c
 8014814:	b5ddea0e 	.word	0xb5ddea0e
 8014818:	388ab355 	.word	0x388ab355
 801481c:	bb360b61 	.word	0xbb360b61
 8014820:	3e2aaaab 	.word	0x3e2aaaab
 8014824:	43160000 	.word	0x43160000
 8014828:	0da24260 	.word	0x0da24260

0801482c <__ieee754_sqrtf>:
 801482c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8014830:	4770      	bx	lr

08014832 <fabs>:
 8014832:	ec51 0b10 	vmov	r0, r1, d0
 8014836:	ee10 2a10 	vmov	r2, s0
 801483a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801483e:	ec43 2b10 	vmov	d0, r2, r3
 8014842:	4770      	bx	lr

08014844 <finite>:
 8014844:	ee10 3a90 	vmov	r3, s1
 8014848:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801484c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8014850:	0fc0      	lsrs	r0, r0, #31
 8014852:	4770      	bx	lr

08014854 <matherr>:
 8014854:	2000      	movs	r0, #0
 8014856:	4770      	bx	lr

08014858 <nan>:
 8014858:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014860 <nan+0x8>
 801485c:	4770      	bx	lr
 801485e:	bf00      	nop
 8014860:	00000000 	.word	0x00000000
 8014864:	7ff80000 	.word	0x7ff80000

08014868 <rint>:
 8014868:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801486a:	ec51 0b10 	vmov	r0, r1, d0
 801486e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014872:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8014876:	2e13      	cmp	r6, #19
 8014878:	460b      	mov	r3, r1
 801487a:	ee10 4a10 	vmov	r4, s0
 801487e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8014882:	dc56      	bgt.n	8014932 <rint+0xca>
 8014884:	2e00      	cmp	r6, #0
 8014886:	da2b      	bge.n	80148e0 <rint+0x78>
 8014888:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801488c:	4302      	orrs	r2, r0
 801488e:	d023      	beq.n	80148d8 <rint+0x70>
 8014890:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8014894:	4302      	orrs	r2, r0
 8014896:	4254      	negs	r4, r2
 8014898:	4314      	orrs	r4, r2
 801489a:	0c4b      	lsrs	r3, r1, #17
 801489c:	0b24      	lsrs	r4, r4, #12
 801489e:	045b      	lsls	r3, r3, #17
 80148a0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80148a4:	ea44 0103 	orr.w	r1, r4, r3
 80148a8:	460b      	mov	r3, r1
 80148aa:	492f      	ldr	r1, [pc, #188]	; (8014968 <rint+0x100>)
 80148ac:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80148b0:	e9d1 6700 	ldrd	r6, r7, [r1]
 80148b4:	4602      	mov	r2, r0
 80148b6:	4639      	mov	r1, r7
 80148b8:	4630      	mov	r0, r6
 80148ba:	f7eb fce7 	bl	800028c <__adddf3>
 80148be:	e9cd 0100 	strd	r0, r1, [sp]
 80148c2:	463b      	mov	r3, r7
 80148c4:	4632      	mov	r2, r6
 80148c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80148ca:	f7eb fcdd 	bl	8000288 <__aeabi_dsub>
 80148ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80148d2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80148d6:	4639      	mov	r1, r7
 80148d8:	ec41 0b10 	vmov	d0, r0, r1
 80148dc:	b003      	add	sp, #12
 80148de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148e0:	4a22      	ldr	r2, [pc, #136]	; (801496c <rint+0x104>)
 80148e2:	4132      	asrs	r2, r6
 80148e4:	ea01 0702 	and.w	r7, r1, r2
 80148e8:	4307      	orrs	r7, r0
 80148ea:	d0f5      	beq.n	80148d8 <rint+0x70>
 80148ec:	0852      	lsrs	r2, r2, #1
 80148ee:	4011      	ands	r1, r2
 80148f0:	430c      	orrs	r4, r1
 80148f2:	d00b      	beq.n	801490c <rint+0xa4>
 80148f4:	ea23 0202 	bic.w	r2, r3, r2
 80148f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80148fc:	2e13      	cmp	r6, #19
 80148fe:	fa43 f306 	asr.w	r3, r3, r6
 8014902:	bf0c      	ite	eq
 8014904:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8014908:	2400      	movne	r4, #0
 801490a:	4313      	orrs	r3, r2
 801490c:	4916      	ldr	r1, [pc, #88]	; (8014968 <rint+0x100>)
 801490e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8014912:	4622      	mov	r2, r4
 8014914:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014918:	4620      	mov	r0, r4
 801491a:	4629      	mov	r1, r5
 801491c:	f7eb fcb6 	bl	800028c <__adddf3>
 8014920:	e9cd 0100 	strd	r0, r1, [sp]
 8014924:	4622      	mov	r2, r4
 8014926:	462b      	mov	r3, r5
 8014928:	e9dd 0100 	ldrd	r0, r1, [sp]
 801492c:	f7eb fcac 	bl	8000288 <__aeabi_dsub>
 8014930:	e7d2      	b.n	80148d8 <rint+0x70>
 8014932:	2e33      	cmp	r6, #51	; 0x33
 8014934:	dd07      	ble.n	8014946 <rint+0xde>
 8014936:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801493a:	d1cd      	bne.n	80148d8 <rint+0x70>
 801493c:	ee10 2a10 	vmov	r2, s0
 8014940:	f7eb fca4 	bl	800028c <__adddf3>
 8014944:	e7c8      	b.n	80148d8 <rint+0x70>
 8014946:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801494a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801494e:	40f2      	lsrs	r2, r6
 8014950:	4210      	tst	r0, r2
 8014952:	d0c1      	beq.n	80148d8 <rint+0x70>
 8014954:	0852      	lsrs	r2, r2, #1
 8014956:	4210      	tst	r0, r2
 8014958:	bf1f      	itttt	ne
 801495a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801495e:	ea20 0202 	bicne.w	r2, r0, r2
 8014962:	4134      	asrne	r4, r6
 8014964:	4314      	orrne	r4, r2
 8014966:	e7d1      	b.n	801490c <rint+0xa4>
 8014968:	080154b8 	.word	0x080154b8
 801496c:	000fffff 	.word	0x000fffff

08014970 <scalbn>:
 8014970:	b570      	push	{r4, r5, r6, lr}
 8014972:	ec55 4b10 	vmov	r4, r5, d0
 8014976:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801497a:	4606      	mov	r6, r0
 801497c:	462b      	mov	r3, r5
 801497e:	b9aa      	cbnz	r2, 80149ac <scalbn+0x3c>
 8014980:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014984:	4323      	orrs	r3, r4
 8014986:	d03b      	beq.n	8014a00 <scalbn+0x90>
 8014988:	4b31      	ldr	r3, [pc, #196]	; (8014a50 <scalbn+0xe0>)
 801498a:	4629      	mov	r1, r5
 801498c:	2200      	movs	r2, #0
 801498e:	ee10 0a10 	vmov	r0, s0
 8014992:	f7eb fe31 	bl	80005f8 <__aeabi_dmul>
 8014996:	4b2f      	ldr	r3, [pc, #188]	; (8014a54 <scalbn+0xe4>)
 8014998:	429e      	cmp	r6, r3
 801499a:	4604      	mov	r4, r0
 801499c:	460d      	mov	r5, r1
 801499e:	da12      	bge.n	80149c6 <scalbn+0x56>
 80149a0:	a327      	add	r3, pc, #156	; (adr r3, 8014a40 <scalbn+0xd0>)
 80149a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149a6:	f7eb fe27 	bl	80005f8 <__aeabi_dmul>
 80149aa:	e009      	b.n	80149c0 <scalbn+0x50>
 80149ac:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80149b0:	428a      	cmp	r2, r1
 80149b2:	d10c      	bne.n	80149ce <scalbn+0x5e>
 80149b4:	ee10 2a10 	vmov	r2, s0
 80149b8:	4620      	mov	r0, r4
 80149ba:	4629      	mov	r1, r5
 80149bc:	f7eb fc66 	bl	800028c <__adddf3>
 80149c0:	4604      	mov	r4, r0
 80149c2:	460d      	mov	r5, r1
 80149c4:	e01c      	b.n	8014a00 <scalbn+0x90>
 80149c6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80149ca:	460b      	mov	r3, r1
 80149cc:	3a36      	subs	r2, #54	; 0x36
 80149ce:	4432      	add	r2, r6
 80149d0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80149d4:	428a      	cmp	r2, r1
 80149d6:	dd0b      	ble.n	80149f0 <scalbn+0x80>
 80149d8:	ec45 4b11 	vmov	d1, r4, r5
 80149dc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8014a48 <scalbn+0xd8>
 80149e0:	f000 f908 	bl	8014bf4 <copysign>
 80149e4:	a318      	add	r3, pc, #96	; (adr r3, 8014a48 <scalbn+0xd8>)
 80149e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149ea:	ec51 0b10 	vmov	r0, r1, d0
 80149ee:	e7da      	b.n	80149a6 <scalbn+0x36>
 80149f0:	2a00      	cmp	r2, #0
 80149f2:	dd08      	ble.n	8014a06 <scalbn+0x96>
 80149f4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80149f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80149fc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014a00:	ec45 4b10 	vmov	d0, r4, r5
 8014a04:	bd70      	pop	{r4, r5, r6, pc}
 8014a06:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014a0a:	da0d      	bge.n	8014a28 <scalbn+0xb8>
 8014a0c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014a10:	429e      	cmp	r6, r3
 8014a12:	ec45 4b11 	vmov	d1, r4, r5
 8014a16:	dce1      	bgt.n	80149dc <scalbn+0x6c>
 8014a18:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8014a40 <scalbn+0xd0>
 8014a1c:	f000 f8ea 	bl	8014bf4 <copysign>
 8014a20:	a307      	add	r3, pc, #28	; (adr r3, 8014a40 <scalbn+0xd0>)
 8014a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a26:	e7e0      	b.n	80149ea <scalbn+0x7a>
 8014a28:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014a2c:	3236      	adds	r2, #54	; 0x36
 8014a2e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014a32:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014a36:	4620      	mov	r0, r4
 8014a38:	4629      	mov	r1, r5
 8014a3a:	2200      	movs	r2, #0
 8014a3c:	4b06      	ldr	r3, [pc, #24]	; (8014a58 <scalbn+0xe8>)
 8014a3e:	e7b2      	b.n	80149a6 <scalbn+0x36>
 8014a40:	c2f8f359 	.word	0xc2f8f359
 8014a44:	01a56e1f 	.word	0x01a56e1f
 8014a48:	8800759c 	.word	0x8800759c
 8014a4c:	7e37e43c 	.word	0x7e37e43c
 8014a50:	43500000 	.word	0x43500000
 8014a54:	ffff3cb0 	.word	0xffff3cb0
 8014a58:	3c900000 	.word	0x3c900000

08014a5c <fabsf>:
 8014a5c:	ee10 3a10 	vmov	r3, s0
 8014a60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014a64:	ee00 3a10 	vmov	s0, r3
 8014a68:	4770      	bx	lr

08014a6a <finitef>:
 8014a6a:	ee10 3a10 	vmov	r3, s0
 8014a6e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8014a72:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8014a76:	bfac      	ite	ge
 8014a78:	2000      	movge	r0, #0
 8014a7a:	2001      	movlt	r0, #1
 8014a7c:	4770      	bx	lr
	...

08014a80 <rintf>:
 8014a80:	b513      	push	{r0, r1, r4, lr}
 8014a82:	ee10 1a10 	vmov	r1, s0
 8014a86:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014a8a:	0ddc      	lsrs	r4, r3, #23
 8014a8c:	3c7f      	subs	r4, #127	; 0x7f
 8014a8e:	2c16      	cmp	r4, #22
 8014a90:	dc46      	bgt.n	8014b20 <rintf+0xa0>
 8014a92:	b32b      	cbz	r3, 8014ae0 <rintf+0x60>
 8014a94:	2c00      	cmp	r4, #0
 8014a96:	ee10 2a10 	vmov	r2, s0
 8014a9a:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8014a9e:	da21      	bge.n	8014ae4 <rintf+0x64>
 8014aa0:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8014aa4:	425b      	negs	r3, r3
 8014aa6:	4a21      	ldr	r2, [pc, #132]	; (8014b2c <rintf+0xac>)
 8014aa8:	0a5b      	lsrs	r3, r3, #9
 8014aaa:	0d09      	lsrs	r1, r1, #20
 8014aac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8014ab0:	0509      	lsls	r1, r1, #20
 8014ab2:	430b      	orrs	r3, r1
 8014ab4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8014ab8:	ee07 3a90 	vmov	s15, r3
 8014abc:	edd2 6a00 	vldr	s13, [r2]
 8014ac0:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8014ac4:	ed8d 7a01 	vstr	s14, [sp, #4]
 8014ac8:	eddd 7a01 	vldr	s15, [sp, #4]
 8014acc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014ad0:	ee17 3a90 	vmov	r3, s15
 8014ad4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014ad8:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8014adc:	ee00 3a10 	vmov	s0, r3
 8014ae0:	b002      	add	sp, #8
 8014ae2:	bd10      	pop	{r4, pc}
 8014ae4:	4b12      	ldr	r3, [pc, #72]	; (8014b30 <rintf+0xb0>)
 8014ae6:	4123      	asrs	r3, r4
 8014ae8:	4219      	tst	r1, r3
 8014aea:	d0f9      	beq.n	8014ae0 <rintf+0x60>
 8014aec:	085b      	lsrs	r3, r3, #1
 8014aee:	4219      	tst	r1, r3
 8014af0:	d006      	beq.n	8014b00 <rintf+0x80>
 8014af2:	ea21 0203 	bic.w	r2, r1, r3
 8014af6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8014afa:	fa43 f404 	asr.w	r4, r3, r4
 8014afe:	4322      	orrs	r2, r4
 8014b00:	4b0a      	ldr	r3, [pc, #40]	; (8014b2c <rintf+0xac>)
 8014b02:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8014b06:	ed90 7a00 	vldr	s14, [r0]
 8014b0a:	ee07 2a90 	vmov	s15, r2
 8014b0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014b12:	edcd 7a01 	vstr	s15, [sp, #4]
 8014b16:	ed9d 0a01 	vldr	s0, [sp, #4]
 8014b1a:	ee30 0a47 	vsub.f32	s0, s0, s14
 8014b1e:	e7df      	b.n	8014ae0 <rintf+0x60>
 8014b20:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014b24:	d3dc      	bcc.n	8014ae0 <rintf+0x60>
 8014b26:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014b2a:	e7d9      	b.n	8014ae0 <rintf+0x60>
 8014b2c:	080154c8 	.word	0x080154c8
 8014b30:	007fffff 	.word	0x007fffff

08014b34 <scalbnf>:
 8014b34:	b508      	push	{r3, lr}
 8014b36:	ee10 2a10 	vmov	r2, s0
 8014b3a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8014b3e:	ed2d 8b02 	vpush	{d8}
 8014b42:	eef0 0a40 	vmov.f32	s1, s0
 8014b46:	d004      	beq.n	8014b52 <scalbnf+0x1e>
 8014b48:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8014b4c:	d306      	bcc.n	8014b5c <scalbnf+0x28>
 8014b4e:	ee70 0a00 	vadd.f32	s1, s0, s0
 8014b52:	ecbd 8b02 	vpop	{d8}
 8014b56:	eeb0 0a60 	vmov.f32	s0, s1
 8014b5a:	bd08      	pop	{r3, pc}
 8014b5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8014b60:	d21c      	bcs.n	8014b9c <scalbnf+0x68>
 8014b62:	4b1f      	ldr	r3, [pc, #124]	; (8014be0 <scalbnf+0xac>)
 8014b64:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8014be4 <scalbnf+0xb0>
 8014b68:	4298      	cmp	r0, r3
 8014b6a:	ee60 0a27 	vmul.f32	s1, s0, s15
 8014b6e:	db10      	blt.n	8014b92 <scalbnf+0x5e>
 8014b70:	ee10 2a90 	vmov	r2, s1
 8014b74:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8014b78:	3b19      	subs	r3, #25
 8014b7a:	4403      	add	r3, r0
 8014b7c:	2bfe      	cmp	r3, #254	; 0xfe
 8014b7e:	dd0f      	ble.n	8014ba0 <scalbnf+0x6c>
 8014b80:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8014be8 <scalbnf+0xb4>
 8014b84:	eeb0 0a48 	vmov.f32	s0, s16
 8014b88:	f000 f843 	bl	8014c12 <copysignf>
 8014b8c:	ee60 0a08 	vmul.f32	s1, s0, s16
 8014b90:	e7df      	b.n	8014b52 <scalbnf+0x1e>
 8014b92:	eddf 7a16 	vldr	s15, [pc, #88]	; 8014bec <scalbnf+0xb8>
 8014b96:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8014b9a:	e7da      	b.n	8014b52 <scalbnf+0x1e>
 8014b9c:	0ddb      	lsrs	r3, r3, #23
 8014b9e:	e7ec      	b.n	8014b7a <scalbnf+0x46>
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	dd06      	ble.n	8014bb2 <scalbnf+0x7e>
 8014ba4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8014ba8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8014bac:	ee00 3a90 	vmov	s1, r3
 8014bb0:	e7cf      	b.n	8014b52 <scalbnf+0x1e>
 8014bb2:	f113 0f16 	cmn.w	r3, #22
 8014bb6:	da06      	bge.n	8014bc6 <scalbnf+0x92>
 8014bb8:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014bbc:	4298      	cmp	r0, r3
 8014bbe:	dcdf      	bgt.n	8014b80 <scalbnf+0x4c>
 8014bc0:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8014bec <scalbnf+0xb8>
 8014bc4:	e7de      	b.n	8014b84 <scalbnf+0x50>
 8014bc6:	3319      	adds	r3, #25
 8014bc8:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8014bcc:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8014bd0:	eddf 7a07 	vldr	s15, [pc, #28]	; 8014bf0 <scalbnf+0xbc>
 8014bd4:	ee07 3a10 	vmov	s14, r3
 8014bd8:	ee67 0a27 	vmul.f32	s1, s14, s15
 8014bdc:	e7b9      	b.n	8014b52 <scalbnf+0x1e>
 8014bde:	bf00      	nop
 8014be0:	ffff3cb0 	.word	0xffff3cb0
 8014be4:	4c000000 	.word	0x4c000000
 8014be8:	7149f2ca 	.word	0x7149f2ca
 8014bec:	0da24260 	.word	0x0da24260
 8014bf0:	33000000 	.word	0x33000000

08014bf4 <copysign>:
 8014bf4:	ec51 0b10 	vmov	r0, r1, d0
 8014bf8:	ee11 0a90 	vmov	r0, s3
 8014bfc:	ee10 2a10 	vmov	r2, s0
 8014c00:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8014c04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8014c08:	ea41 0300 	orr.w	r3, r1, r0
 8014c0c:	ec43 2b10 	vmov	d0, r2, r3
 8014c10:	4770      	bx	lr

08014c12 <copysignf>:
 8014c12:	ee10 3a10 	vmov	r3, s0
 8014c16:	ee10 2a90 	vmov	r2, s1
 8014c1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014c1e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8014c22:	4313      	orrs	r3, r2
 8014c24:	ee00 3a10 	vmov	s0, r3
 8014c28:	4770      	bx	lr
	...

08014c2c <_init>:
 8014c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c2e:	bf00      	nop
 8014c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c32:	bc08      	pop	{r3}
 8014c34:	469e      	mov	lr, r3
 8014c36:	4770      	bx	lr

08014c38 <_fini>:
 8014c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c3a:	bf00      	nop
 8014c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014c3e:	bc08      	pop	{r3}
 8014c40:	469e      	mov	lr, r3
 8014c42:	4770      	bx	lr
